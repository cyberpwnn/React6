org.cyberpwn.gbench.Profiler -> STOt:
    long nanos -> STOt
    long startNano -> fdWf
    long millis -> RanD
    long startMillis -> UITd
    double time -> EmKE
    boolean profiling -> RsPS
    15:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> STOt
    78:78:double getTicks() -> STOt
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> fdWf
    93:93:double getHours() -> RanD
    98:98:double getMilliseconds() -> UITd
    103:103:long getNanoseconds() -> EmKE
    108:108:long getNanos() -> RsPS
    113:113:long getStartNano() -> GrpS
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> ofad
    128:128:double getTime() -> HvTS
    133:133:boolean isProfiling() -> VvkR
org.cyberpwn.gconcurrent.A -> fdWf:
    org.cyberpwn.gconcurrent.ParallelPoolManager mgr -> GrpS
    7:17:void <init>() -> <init>
org.cyberpwn.gconcurrent.A$1 -> fdWf$1:
    org.cyberpwn.gconcurrent.A this$0 -> ofad
    1:9:void <init>(org.cyberpwn.gconcurrent.A) -> <init>
    14:15:void run() -> run
org.cyberpwn.gconcurrent.Execution -> RanD:
    4:4:void <init>() -> <init>
org.cyberpwn.gconcurrent.ParallelPoolManager -> UITd:
    org.cyberpwn.gconcurrent.QueueMode mode -> HvTS
    org.cyberpwn.glang.GList threads -> VvkR
    int next -> MImh
    int threadCount -> PBUy
    java.util.Queue squeue -> jEoY
    java.lang.String key -> key
    org.cyberpwn.gconcurrent.ThreadInformation info -> VCgW
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> WGKY
    22:23:void syncQueue(org.cyberpwn.gconcurrent.Execution) -> STOt
    long getNanoGate() -> MImh
    29:42:void tickSyncQueue() -> PBUy
    46:48:void <init>(java.lang.String,int,org.cyberpwn.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,org.cyberpwn.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> jEoY
    93:94:void start() -> start
    98:102:void shutdown() -> shutdown
    106:107:void <init>(int) -> <init>
    111:112:void queue(org.cyberpwn.gconcurrent.Execution) -> fdWf
    116:116:int getSize() -> getSize
    121:128:int getQueueSize() -> VCgW
    133:133:org.cyberpwn.gconcurrent.ParallelThread[] getThreads() -> WGKY
    140:167:void updateThreadInformation() -> OrWq
    171:203:org.cyberpwn.gconcurrent.ParallelThread nextThread() -> paSp
    208:214:void createThreads(int) -> fdWf
    218:218:org.cyberpwn.gconcurrent.QueueMode getMode() -> flhL
    223:223:int getNext() -> pGaY
    228:228:int getThreadCount() -> getThreadCount
    233:233:java.util.Queue getSqueue() -> gMhM
    238:238:java.lang.String getKey() -> getKey
    243:243:org.cyberpwn.gconcurrent.ThreadInformation getAverageInfo() -> LFjh
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> VDGm
org.cyberpwn.gconcurrent.ParallelThread -> EmKE:
    java.util.Queue queue -> OrWq
    org.cyberpwn.gconcurrent.ThreadInformation info -> VCgW
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> STOt
    68:75:void execute(org.cyberpwn.gconcurrent.Execution) -> RanD
    79:89:void execute() -> execute
    93:94:void queue(org.cyberpwn.gconcurrent.Execution) -> fdWf
    98:98:java.util.Queue getQueue() -> HSqD
    103:103:org.cyberpwn.gconcurrent.ThreadInformation getInfo() -> gEWi
org.cyberpwn.gconcurrent.QueueMode -> RsPS:
    org.cyberpwn.gconcurrent.QueueMode ROUND_ROBIN -> paSp
    org.cyberpwn.gconcurrent.QueueMode SMALLEST -> flhL
    org.cyberpwn.gconcurrent.QueueMode[] ENUM$VALUES -> pGaY
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:org.cyberpwn.gconcurrent.QueueMode[] values() -> values
    1:1:org.cyberpwn.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
org.cyberpwn.gconcurrent.S -> GrpS:
    org.cyberpwn.gconcurrent.ParallelPoolManager mgr -> GrpS
    7:17:void <init>() -> <init>
org.cyberpwn.gconcurrent.S$1 -> GrpS$1:
    org.cyberpwn.gconcurrent.S this$0 -> gMhM
    1:9:void <init>(org.cyberpwn.gconcurrent.S) -> <init>
    14:15:void run() -> run
org.cyberpwn.gconcurrent.TICK -> ofad:
    long tick -> LFjh
    5:5:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
org.cyberpwn.gconcurrent.ThreadInformation -> HvTS:
    double ticksPerSecond -> VDGm
    int queuedSize -> HSqD
    boolean processing -> gEWi
    double utilization -> SCNB
    org.cyberpwn.gmath.Average ticksPerSecondAverage -> EKFb
    long tick -> LFjh
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> SCNB
    33:35:void setTicksPerSecond(double) -> fdWf
    39:39:int getQueuedSize() -> EKFb
    44:45:void setQueuedSize(int) -> RanD
    49:49:boolean isProcessing() -> CMRe
    54:55:void setProcessing(boolean) -> STOt
    59:59:double getUtilization() -> PBUD
    64:65:void setUtilization(double) -> RanD
    69:69:double getTicksPerSecondAverage() -> MkoR
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> KDFr
    89:89:int getId() -> getId
org.cyberpwn.gformat.F -> VvkR:
    java.text.NumberFormat NF -> CMRe
    java.text.DecimalFormat DF -> PBUD
    java.lang.String[] NAMES -> MkoR
    java.math.BigInteger THOUSAND -> KDFr
    java.util.NavigableMap MAP -> JISy
    22:33:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    37:54:java.lang.String capitalize(java.lang.String) -> capitalize
    59:66:java.lang.String capitalizeWords(java.lang.String) -> STOt
    71:86:java.lang.String time(double,int) -> STOt
    91:91:java.lang.String b(int) -> b
    96:96:java.lang.String b(long) -> STOt
    101:101:java.lang.String b(double) -> UITd
    106:123:java.lang.String b(java.math.BigInteger) -> STOt
    128:132:void instantiate() -> JISy
    144:144:java.lang.String fileSize(long) -> fdWf
    157:157:java.lang.String memSize(long) -> RanD
    170:171:java.lang.String stamp(long) -> UITd
    187:214:java.lang.String ofSize(long,int) -> STOt
    228:233:java.lang.String trim(java.lang.String,int) -> STOt
    246:266:java.lang.String cname(java.lang.String) -> fdWf
    280:292:java.lang.String repeat(java.lang.String,int) -> repeat
    304:311:java.lang.String mem(long) -> EmKE
    324:342:java.lang.String memx(long) -> RsPS
    356:357:java.lang.String f(long) -> GrpS
    369:370:java.lang.String f(int) -> UITd
    384:393:java.lang.String f(double,int) -> fdWf
    409:418:java.lang.String fd(double,int) -> RanD
    432:441:java.lang.String f(float,int) -> STOt
    452:452:java.lang.String f(double) -> EmKE
    463:463:java.lang.String f(float) -> STOt
    478:478:java.lang.String pc(double,int) -> UITd
    493:493:java.lang.String pc(float,int) -> fdWf
    506:506:java.lang.String pc(double) -> RsPS
    519:519:java.lang.String pc(float) -> fdWf
    535:535:java.lang.String pc(int,int,int) -> STOt
    549:549:java.lang.String pc(int,int) -> STOt
    565:565:java.lang.String pc(long,long,int) -> STOt
    579:579:java.lang.String pc(long,long) -> STOt
    591:591:java.lang.String msSeconds(long) -> ofad
    605:605:java.lang.String msSeconds(long,int) -> fdWf
    617:617:java.lang.String nsMs(long) -> HvTS
    631:631:java.lang.String nsMs(long,int) -> RanD
    645:645:java.lang.String nsMsd(long,int) -> UITd
org.cyberpwn.glang.AccessCallback -> MImh:
    java.lang.Object get() -> get
org.cyberpwn.glang.Adapter -> PBUy:
    java.lang.Object adapt(java.lang.Object) -> STOt
    java.lang.Object onAdapt(java.lang.Object) -> fdWf
org.cyberpwn.glang.Callback -> jEoY:
    java.lang.Object t -> hakj
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> RanD
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
org.cyberpwn.glang.FinalDouble -> VCgW:
    double i -> jgrN
    19:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> GrpS
org.cyberpwn.glang.FinalFloat -> WGKY:
    float i -> i
    19:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> RanD
org.cyberpwn.glang.FinalInteger -> OrWq:
    int i -> i
    19:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> EmKE
org.cyberpwn.glang.FinalLong -> paSp:
    long i -> jhRo
    19:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> VvkR
org.cyberpwn.glang.FinalString -> flhL:
    java.lang.String string -> string
    19:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
org.cyberpwn.glang.GAdapter -> pGaY:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> STOt
    java.lang.Object onAdapt(java.lang.Object) -> fdWf
org.cyberpwn.glang.GBiset -> gMhM:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> sQKL
    java.lang.Object b -> DaVH
    30:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> hakj
    53:54:void setA(java.lang.Object) -> UITd
    63:63:java.lang.Object getB() -> jgrN
    73:74:void setB(java.lang.Object) -> EmKE
org.cyberpwn.glang.GList -> LFjh:
    long serialVersionUID -> serialVersionUID
    29:30:void <init>() -> <init>
    40:46:void <init>(java.util.Set) -> <init>
    56:62:void <init>(java.util.Collection) -> <init>
    72:78:void <init>(java.util.Iterator) -> <init>
    88:90:void <init>(java.lang.Object[]) -> <init>
    101:109:void <init>(java.util.List) -> <init>
    118:145:java.lang.Object mostCommon() -> jhRo
    155:157:org.cyberpwn.glang.GList shuffleCopy() -> sQKL
    165:166:void shuffle() -> DaVH
    177:203:org.cyberpwn.glang.GList split() -> yAYY
    215:215:boolean hasIndex(int) -> RsPS
    225:226:java.lang.Object pickRandom() -> VfJS
    237:244:org.cyberpwn.glang.GList stringList() -> wUFM
    255:259:void forEach(org.cyberpwn.glang.Callback) -> STOt
    268:268:int last() -> last
    282:287:int getIndexOrLast(int) -> GrpS
    303:303:org.cyberpwn.glang.GList cropFrom(int) -> ofad
    308:340:org.cyberpwn.glang.GList split(int) -> HvTS
    356:356:org.cyberpwn.glang.GList cropTo(int) -> VvkR
    373:383:org.cyberpwn.glang.GList crop(int,int) -> fdWf
    394:398:org.cyberpwn.glang.GList removeDuplicates() -> ktFc
    409:413:void removeAll(java.lang.Object) -> RsPS
    422:422:boolean hasDuplicates() -> KThV
    430:438:void sort() -> sort
    451:457:void push(java.lang.Object,int) -> STOt
    468:472:void add(java.lang.Object[]) -> add
    483:484:org.cyberpwn.glang.GList qadd(java.lang.Object) -> GrpS
    495:499:void add(java.util.List) -> STOt
    511:543:java.lang.String toString(java.lang.String) -> toString
    553:555:org.cyberpwn.glang.GList reverse() -> LXKt
    564:564:java.lang.String toString() -> toString
    574:581:org.cyberpwn.glang.GList copy() -> miJx
    593:594:org.cyberpwn.glang.GList qdel(java.lang.Object) -> ofad
    604:611:java.lang.Object pop() -> pop
    616:625:java.lang.Object popRandom() -> OrVo
org.cyberpwn.glang.GList$1 -> LFjh$1:
    org.cyberpwn.glang.GList this$0 -> yAYY
    431:431:void <init>(org.cyberpwn.glang.GList) -> <init>
    435:435:int compare(java.lang.Object,java.lang.Object) -> compare
org.cyberpwn.glang.GListAdapter -> VDGm:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> fdWf
    java.lang.Object onAdapt(java.lang.Object) -> fdWf
org.cyberpwn.glang.GMap -> HSqD:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:org.cyberpwn.glang.GMap copy() -> yQyd
    53:54:org.cyberpwn.glang.GMap qput(java.lang.Object,java.lang.Object) -> STOt
    64:81:org.cyberpwn.glang.GMap flip() -> fRsw
    87:94:java.lang.String toString() -> toString
    106:111:org.cyberpwn.glang.GMap append(org.cyberpwn.glang.GMap) -> STOt
    121:121:org.cyberpwn.glang.GList k() -> RPnV
    131:131:org.cyberpwn.glang.GSet kset() -> oVBn
    141:141:org.cyberpwn.glang.GList v() -> eqvw
    151:151:org.cyberpwn.glang.GSet vset() -> ooUF
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> fdWf
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:org.cyberpwn.glang.GList get(org.cyberpwn.glang.GList) -> STOt
    209:219:org.cyberpwn.glang.GMap removeDuplicateValues() -> lThw
    233:242:void put(org.cyberpwn.glang.GList,org.cyberpwn.glang.GList) -> STOt
    251:267:org.cyberpwn.glang.GList sortK() -> FMlI
    277:293:org.cyberpwn.glang.GList sortV() -> tSpP
org.cyberpwn.glang.GQuadraset -> gEWi:
    java.lang.Object a -> sQKL
    java.lang.Object b -> DaVH
    java.lang.Object c -> VfJS
    java.lang.Object d -> wUFM
    11:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> hakj
    25:26:void setA(java.lang.Object) -> UITd
    30:30:java.lang.Object getB() -> jgrN
    35:36:void setB(java.lang.Object) -> EmKE
    40:40:java.lang.Object getC() -> VTjN
    45:46:void setC(java.lang.Object) -> HvTS
    50:50:java.lang.Object getD() -> ejGg
    55:56:void setD(java.lang.Object) -> VvkR
org.cyberpwn.glang.GSet -> SCNB:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
org.cyberpwn.glang.GTriset -> EKFb:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> sQKL
    java.lang.Object b -> DaVH
    java.lang.Object c -> VfJS
    13:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> hakj
    26:27:void setA(java.lang.Object) -> UITd
    31:31:java.lang.Object getB() -> jgrN
    36:37:void setB(java.lang.Object) -> EmKE
    41:41:java.lang.Object getC() -> VTjN
    46:47:void setC(java.lang.Object) -> HvTS
org.cyberpwn.gmath.Average -> CMRe:
    double[] values -> ktFc
    double average -> KThV
    boolean dirty -> LXKt
    10:15:void <init>(int) -> <init>
    19:21:void put(double) -> ofad
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> EmLn
org.cyberpwn.gmath.DoubleArrayUtils -> PBUD:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> STOt
    17:19:void wrapRight(double[]) -> STOt
    23:27:void fill(double[],double) -> fill
org.cyberpwn.gmath.M -> MkoR:
    int precision -> miJx
    int modulus -> OrVo
    float[] sin -> yQyd
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> STOt
    31:36:boolean r(java.lang.Double) -> STOt
    51:51:double tps(long,int) -> EmKE
    63:63:double ticksFromNS(long) -> MImh
    75:101:java.lang.String toRoman(int) -> MImh
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> RanD
    144:216:int fromRoman(java.lang.String) -> RanD
    226:226:long ns() -> jyXG
    236:236:long ms() -> IhWk
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> fdWf
    333:333:float sinLookup(int) -> PBUy
org.cyberpwn.json.HTTP -> KDFr:
    java.lang.String CRLF -> fRsw
    35:35:void <init>() -> <init>
    93:127:org.cyberpwn.json.JSONObject toJSONObject(java.lang.String) -> UITd
    162:198:java.lang.String toString(org.cyberpwn.json.JSONObject) -> STOt
org.cyberpwn.json.HTTPTokener -> JISy:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
org.cyberpwn.json.JSONArray -> hakj:
    java.util.ArrayList myArrayList -> RPnV
    94:96:void <init>() -> <init>
    108:143:void <init>(org.cyberpwn.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    167:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> STOt
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> jEoY
    352:358:int getInt(int) -> getInt
    374:379:org.cyberpwn.json.JSONArray getJSONArray(int) -> VCgW
    394:399:org.cyberpwn.json.JSONObject getJSONObject(int) -> WGKY
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> EmKE
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> OrWq
    515:515:boolean optBoolean(int) -> paSp
    533:536:boolean optBoolean(int,boolean) -> STOt
    551:551:double optDouble(int) -> flhL
    569:572:double optDouble(int,double) -> STOt
    587:587:int optInt(int) -> pGaY
    605:608:int optInt(int,int) -> UITd
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> fdWf
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> STOt
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> STOt
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> STOt
    722:723:org.cyberpwn.json.JSONArray optJSONArray(int) -> gMhM
    737:738:org.cyberpwn.json.JSONObject optJSONObject(int) -> LFjh
    752:752:long optLong(int) -> VDGm
    770:773:long optLong(int,long) -> STOt
    788:788:java.lang.String optString(int) -> HSqD
    803:804:java.lang.String optString(int,java.lang.String) -> STOt
    816:817:org.cyberpwn.json.JSONArray put(boolean) -> fdWf
    830:831:org.cyberpwn.json.JSONArray put(java.util.Collection) -> STOt
    845:848:org.cyberpwn.json.JSONArray put(double) -> HvTS
    860:861:org.cyberpwn.json.JSONArray put(int) -> gEWi
    873:874:org.cyberpwn.json.JSONArray put(long) -> PBUy
    887:888:org.cyberpwn.json.JSONArray put(java.util.Map) -> STOt
    902:903:org.cyberpwn.json.JSONArray put(java.lang.Object) -> MImh
    921:922:org.cyberpwn.json.JSONArray put(int,boolean) -> fdWf
    939:940:org.cyberpwn.json.JSONArray put(int,java.util.Collection) -> STOt
    958:959:org.cyberpwn.json.JSONArray put(int,double) -> fdWf
    977:978:org.cyberpwn.json.JSONArray put(int,int) -> EmKE
    996:997:org.cyberpwn.json.JSONArray put(int,long) -> fdWf
    1015:1016:org.cyberpwn.json.JSONArray put(int,java.util.Map) -> STOt
    1037:1053:org.cyberpwn.json.JSONArray put(int,java.lang.Object) -> STOt
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> PBUy
    1126:1135:org.cyberpwn.json.JSONObject toJSONObject(org.cyberpwn.json.JSONArray) -> STOt
    1153:1156:java.lang.String toString() -> toString
    1174:1178:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> STOt
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> STOt
org.cyberpwn.json.JSONException -> jgrN:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> oVBn
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
org.cyberpwn.json.JSONML -> jhRo:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(org.cyberpwn.json.XMLTokener,boolean,org.cyberpwn.json.JSONArray) -> STOt
    301:301:org.cyberpwn.json.JSONArray toJSONArray(java.lang.String) -> RsPS
    320:320:org.cyberpwn.json.JSONArray toJSONArray(org.cyberpwn.json.XMLTokener) -> STOt
    340:340:org.cyberpwn.json.JSONObject toJSONObject(org.cyberpwn.json.XMLTokener) -> fdWf
    360:360:org.cyberpwn.json.JSONObject toJSONObject(java.lang.String) -> UITd
    379:456:java.lang.String toString(org.cyberpwn.json.JSONArray) -> fdWf
    472:552:java.lang.String toString(org.cyberpwn.json.JSONObject) -> STOt
org.cyberpwn.json.JSONObject -> sQKL:
    java.util.Map map -> map
    java.lang.Object NULL -> eqvw
    159:161:void <init>() -> <init>
    179:189:void <init>(org.cyberpwn.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(org.cyberpwn.json.JSONTokener) -> <init>
    262:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:org.cyberpwn.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> STOt
    455:467:org.cyberpwn.json.JSONObject append(java.lang.String,java.lang.Object) -> fdWf
    480:499:java.lang.String doubleToString(double) -> VvkR
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> GrpS
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:org.cyberpwn.json.JSONArray getJSONArray(java.lang.String) -> ofad
    691:696:org.cyberpwn.json.JSONObject getJSONObject(java.lang.String) -> HvTS
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(org.cyberpwn.json.JSONObject) -> fdWf
    751:767:java.lang.String[] getNames(java.lang.Object) -> jEoY
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:org.cyberpwn.json.JSONObject increment(java.lang.String) -> VvkR
    855:855:boolean isNull(java.lang.String) -> MImh
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:org.cyberpwn.json.JSONArray names() -> LiPh
    917:937:java.lang.String numberToString(java.lang.Number) -> STOt
    949:949:java.lang.Object opt(java.lang.String) -> PBUy
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> STOt
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> STOt
    1018:1018:boolean optBoolean(java.lang.String) -> jEoY
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> STOt
    1054:1054:double optDouble(java.lang.String) -> VCgW
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> STOt
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> STOt
    1116:1119:double optDouble(java.lang.String,double) -> STOt
    1134:1134:int optInt(java.lang.String) -> WGKY
    1152:1155:int optInt(java.lang.String,int) -> fdWf
    1169:1170:org.cyberpwn.json.JSONArray optJSONArray(java.lang.String) -> OrWq
    1183:1184:org.cyberpwn.json.JSONObject optJSONObject(java.lang.String) -> paSp
    1198:1198:long optLong(java.lang.String) -> flhL
    1216:1219:long optLong(java.lang.String,long) -> STOt
    1234:1234:java.lang.String optString(java.lang.String) -> pGaY
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> STOt
    1255:1305:void populateMap(java.lang.Object) -> VCgW
    1320:1321:org.cyberpwn.json.JSONObject put(java.lang.String,boolean) -> fdWf
    1337:1338:org.cyberpwn.json.JSONObject put(java.lang.String,java.util.Collection) -> STOt
    1354:1355:org.cyberpwn.json.JSONObject put(java.lang.String,double) -> fdWf
    1371:1372:org.cyberpwn.json.JSONObject put(java.lang.String,int) -> RanD
    1388:1389:org.cyberpwn.json.JSONObject put(java.lang.String,long) -> fdWf
    1405:1406:org.cyberpwn.json.JSONObject put(java.lang.String,java.util.Map) -> STOt
    1425:1437:org.cyberpwn.json.JSONObject put(java.lang.String,java.lang.Object) -> RanD
    1455:1463:org.cyberpwn.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> UITd
    1482:1486:org.cyberpwn.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> EmKE
    1501:1512:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> STOt
    1590:1590:java.lang.Object remove(java.lang.String) -> gMhM
    1605:1640:boolean similar(java.lang.Object) -> PBUy
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> WGKY
    1751:1760:org.cyberpwn.json.JSONArray toJSONArray(org.cyberpwn.json.JSONArray) -> RanD
    1779:1782:java.lang.String toString() -> toString
    1802:1806:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> STOt
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> STOt
    2000:2004:void indent(java.io.Writer,int) -> STOt
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> STOt
    153:153:void <clinit>() -> <clinit>
org.cyberpwn.json.JSONObject$1 -> sQKL$1:
org.cyberpwn.json.JSONObject$Null -> sQKL$STOt:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(org.cyberpwn.json.JSONObject$1) -> <init>
org.cyberpwn.json.JSONString -> DaVH:
    java.lang.String toJSONString() -> toJSONString
org.cyberpwn.json.JSONStringer -> yAYY:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
org.cyberpwn.json.JSONTokener -> VfJS:
    long character -> ooUF
    boolean eof -> eof
    long index -> lThw
    long line -> FMlI
    char previous -> tSpP
    java.io.Reader reader -> reader
    boolean usePrevious -> VTjN
    60:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> qBUi
    119:131:int dehexchar(char) -> STOt
    136:136:boolean end() -> eaVx
    147:153:boolean more() -> MSAq
    164:198:char next() -> next
    213:218:char next(char) -> fdWf
    233:250:java.lang.String next(int) -> SCNB
    263:268:char nextClean() -> IFTh
    287:334:java.lang.String nextString(char) -> RanD
    349:362:java.lang.String nextTo(char) -> UITd
    376:388:java.lang.String nextTo(java.lang.String) -> LFjh
    403:441:java.lang.Object nextValue() -> CxII
    458:479:char skipTo(char) -> EmKE
    491:491:org.cyberpwn.json.JSONException syntaxError(java.lang.String) -> VDGm
    501:501:java.lang.String toString() -> toString
org.cyberpwn.json.JSONWriter -> wUFM:
    int maxdepth -> ejGg
    boolean comma -> EmLn
    char mode -> jyXG
    org.cyberpwn.json.JSONObject[] stack -> IhWk
    int top -> top
    java.io.Writer writer -> writer
    98:104:void <init>(java.io.Writer) -> <init>
    117:141:org.cyberpwn.json.JSONWriter append(java.lang.String) -> HSqD
    157:164:org.cyberpwn.json.JSONWriter array() -> Gapj
    180:193:org.cyberpwn.json.JSONWriter end(char,char) -> STOt
    206:206:org.cyberpwn.json.JSONWriter endArray() -> SSrQ
    219:219:org.cyberpwn.json.JSONWriter endObject() -> xNyq
    235:258:org.cyberpwn.json.JSONWriter key(java.lang.String) -> gEWi
    274:285:org.cyberpwn.json.JSONWriter object() -> gMim
    299:310:void pop(char) -> RsPS
    322:329:void push(org.cyberpwn.json.JSONObject) -> RanD
    342:342:org.cyberpwn.json.JSONWriter value(boolean) -> RanD
    356:356:org.cyberpwn.json.JSONWriter value(double) -> MImh
    369:369:org.cyberpwn.json.JSONWriter value(long) -> jEoY
    385:385:org.cyberpwn.json.JSONWriter value(java.lang.Object) -> OrWq
org.cyberpwn.json.XML -> ktFc:
    java.lang.Character AMP -> LiPh
    java.lang.Character APOS -> qBUi
    java.lang.Character BANG -> eaVx
    java.lang.Character EQ -> MSAq
    java.lang.Character GT -> IFTh
    java.lang.Character LT -> CxII
    java.lang.Character QUEST -> Gapj
    java.lang.Character QUOT -> SSrQ
    java.lang.Character SLASH -> xNyq
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> SCNB
    150:339:boolean parse(org.cyberpwn.json.XMLTokener,org.cyberpwn.json.JSONObject,java.lang.String) -> STOt
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:org.cyberpwn.json.JSONObject toJSONObject(java.lang.String) -> UITd
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
    40:64:void <clinit>() -> <clinit>
org.cyberpwn.json.XMLTokener -> KThV:
    java.util.HashMap entity -> gMim
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> ndAS
    108:133:java.lang.Object nextContent() -> lLXe
    149:166:java.lang.Object nextEntity(char) -> GrpS
    186:239:java.lang.Object nextMeta() -> bGLY
    261:334:java.lang.Object nextToken() -> aCgw
    354:420:boolean skipPast(java.lang.String) -> EKFb
    45:51:void <clinit>() -> <clinit>
react.Config -> LXKt:
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> ndAS
    java.lang.String A_ENTITYCACHE_INTERVAL -> lLXe
    java.lang.String A_DROPSTACK_RADIUS -> bGLY
    java.lang.String A_DROPSTACK_STACKDROPS -> aCgw
    java.lang.String A_DROPSTACK_USEDEFAULT -> vkWW
    java.lang.String A_DROPSTACK_SMOOTHSTACK -> Xtao
    java.lang.String A_POOL_MAXTHREADS -> SSpQ
    java.lang.String A_POOL_SYNC_NANOS -> avka
    java.lang.String A_ENTITYCACHE_ENABLED -> LGLU
    java.lang.String A_FASTLEAF_ENABLED -> mWjx
    java.lang.String A_FASTLEAF_ONDECAY -> lUHx
    java.lang.String A_FASTLEAF_INSTANT -> wCfV
    java.lang.String A_FASTLEAF_DECAYPERIOD -> clQJ
    java.lang.String A_DROPSTACK_MINAGE -> kIUS
    java.lang.String A_ENTITYSTACK_ENABLED -> afKF
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> rojq
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> wKuf
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> JtJq
    java.lang.String A_GLASS_SHOW_BLOCKS -> jWSI
    java.lang.String A_GLASS_SHOW_PARTICLES -> SdrT
    java.lang.String A_ALLOW_CULL -> NMSE
    java.lang.String A_ALLOW_PURGE -> YntR
    java.lang.String A_ALLOW_CACHE -> MdCE
    java.lang.String A_CULL_RULES -> VLXw
    int ENTITYCACHE_CHUNK_RADIUS -> FNNg
    int ENTITYCACHE_INTERVAL -> fmMY
    double DROPSTACK_RADIUS -> lfNK
    boolean DROPSTACK_STACKDROPS -> idsq
    boolean DROPSTACK_USEDEFAULT -> MuGN
    boolean DROPSTACK_SMOOTHSTACK -> TNet
    int POOL_MAXTHREADS -> GIBO
    long POOL_SYNC_NANOS -> dwgT
    boolean ENTITYCACHE_ENABLED -> tBof
    boolean FASTLEAF_ENABLED -> bXOu
    boolean FASTLEAF_ONDECAY -> pPVW
    boolean FASTLEAF_INSTANT -> nuEI
    int FASTLEAF_DECAYPERIOD -> PJjl
    int DROPSTACK_MINAGE -> mrAe
    boolean ENTITYSTACK_ENABLED -> BktM
    int ENTITYSTACK_MINIMUM_GROUP -> kIXH
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> ntdJ
    int ENTITYSTACK_MAXIMUM_HEALTH -> AWqY
    boolean GLASS_SHOW_BLOCKS -> JQhd
    boolean GLASS_SHOW_PARTICLES -> WWnX
    org.cyberpwn.glang.GList ALLOW_CULL -> QMko
    org.cyberpwn.glang.GList ALLOW_PURGE -> Mksa
    org.cyberpwn.glang.GList ALLOW_CACHE -> DjKN
    org.cyberpwn.glang.GList CULL_RULES -> JRIi
    boolean hrld -> PmLx
    boolean rns -> kYwL
    boolean rrl -> RQQF
    int[] $SWITCH_TABLE$org$bukkit$entity$EntityType -> ePVh
    111:225:void <clinit>() -> <clinit>
    34:34:void <init>() -> <init>
    230:247:void doTrack(org.bukkit.plugin.Plugin) -> STOt
    252:274:void onRead(org.bukkit.plugin.Plugin) -> fdWf
    278:308:void read(java.io.File,boolean) -> STOt
    313:418:surge.cluster.DataCluster read(surge.cluster.DataCluster,boolean) -> STOt
    423:460:surge.cluster.DataCluster defaultConfig(boolean) -> UITd
    465:534:org.cyberpwn.glang.GList getDefaultEntitiesForCaching() -> vkWW
    539:610:org.cyberpwn.glang.GList getDefaultEntitiesForCulling() -> Xtao
    615:648:org.cyberpwn.glang.GList getDefaultEntitiesForRemoval() -> SSpQ
    653:677:org.cyberpwn.glang.GList getDefaultCullRules() -> avka
    34:34:int[] $SWITCH_TABLE$org$bukkit$entity$EntityType() -> LGLU
react.Config$1 -> LXKt$1:
    java.io.File val$fConfig -> lTjB
    java.io.File val$fConfigExperimental -> qJgN
    org.bukkit.plugin.Plugin val$main -> XdDU
    1:233:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    238:242:void run() -> run
react.Config$2 -> LXKt$2:
    int[] $SwitchMap$org$bukkit$entity$EntityType -> dxHO
    469:469:void <clinit>() -> <clinit>
react.Gate -> miJx:
    13:13:void <init>() -> <init>
    17:20:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> STOt
    25:25:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> fdWf
    30:30:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> RanD
    35:35:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> UITd
    40:41:void unloadChunk(org.bukkit.Chunk) -> STOt
    45:46:void unloadChunk(org.bukkit.World,int,int) -> STOt
    50:56:void removeEntity(org.bukkit.entity.Entity) -> STOt
    60:66:void purgeEntity(org.bukkit.entity.Entity) -> fdWf
    70:76:void cullEntity(org.bukkit.entity.Entity) -> RanD
    80:86:void cachedEntity(org.bukkit.entity.Entity) -> UITd
    90:101:void cacheEntity(org.bukkit.entity.Entity) -> EmKE
    105:105:int restoreEntities(org.bukkit.Chunk) -> fdWf
    111:115:void updateBlock(org.bukkit.block.Block) -> STOt
react.Info -> OrVo:
    java.lang.String SECRET_IS_GENUINE -> xXLn
    java.lang.String SECRET_IS_GENUINE_VERBOSE -> ylRL
    java.lang.String SECRET_RESCAN -> bGMb
    java.lang.String SECRET_DELETE -> YECi
    java.lang.String CORE_REACT_DOT -> jxwW
    java.lang.String CORE_NAME -> oLqa
    java.lang.String CORE_CACHE -> kIWG
    java.lang.String CORE_DOTYML -> wChD
    java.lang.String COMMAND_REACT -> uNcS
    java.lang.String COMMAND_ACT_DESCRIPTION -> fmNw
    java.lang.String COMMAND_ACT -> rNNh
    java.lang.String COMMAND_ACT_ALIAS_1 -> STVW
    java.lang.String COMMAND_ACT_ALIAS_2 -> WPBW
    java.lang.String COMMAND_ACT_USAGE -> ugyC
    java.lang.String COMMAND_HELP_DESCRIPTION -> Ywik
    java.lang.String COMMAND_HELP -> BRdi
    java.lang.String COMMAND_HELP_ALIAS_1 -> miRo
    java.lang.String COMMAND_HELP_ALIAS_2 -> eXiX
    java.lang.String COMMAND_HELP_USAGE -> Kepc
    java.lang.String COMMAND_STATUS_DESCRIPTION -> cJSM
    java.lang.String COMMAND_STATUS -> ejLf
    java.lang.String COMMAND_STATUS_ALIAS_1 -> hsTl
    java.lang.String COMMAND_STATUS_ALIAS_2 -> QMpH
    java.lang.String COMMAND_STATUS_USAGE -> YVHh
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> XuHg
    java.lang.String COMMAND_CPUSCORE -> Sdwd
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> QosT
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> UQlL
    java.lang.String COMMAND_CPUSCORE_USAGE -> pHGw
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> avpm
    java.lang.String COMMAND_RELOAD -> mFmf
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> ndEB
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> xXOd
    java.lang.String COMMAND_RELOAD_USAGE -> Vvoy
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> FgbD
    java.lang.String COMMAND_MONITOR -> XdEc
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> SvXY
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> KTnL
    java.lang.String COMMAND_MONITOR_USAGE -> Bkwh
    java.lang.String COMMAND_GLASS_DESCRIPTION -> tBpu
    java.lang.String COMMAND_GLASS -> vYxs
    java.lang.String COMMAND_GLASS_ALIAS_1 -> SBrr
    java.lang.String COMMAND_GLASS_ALIAS_2 -> UQjY
    java.lang.String COMMAND_GLASS_USAGE -> oDbo
    java.lang.String MSG_PERMISSION -> Fgas
    java.lang.String MSG_MONITORING_STARTED -> tLBv
    java.lang.String MSG_MONITORING_STOPPED -> FpUl
    java.lang.String MSG_GLASS_STARTED -> TpmU
    java.lang.String MSG_GLASS_STOPPED -> tnIa
    org.bukkit.Color COLOR_HOPPER -> eXka
    org.bukkit.Color COLOR_BLOCK_UPDATE -> YxLy
    org.bukkit.Color COLOR_BLOCK_FROMTO -> uplO
    org.bukkit.Color COLOR_BLOCK_BURN -> WiVG
    org.bukkit.Color COLOR_BLOCK_DECAY -> VTou
    org.bukkit.Color COLOR_BLOCK_FORM -> xPBc
    java.lang.String NAME_TICK -> oMXW
    java.lang.String NAME_MEMORY -> lwSe
    java.lang.String NAME_CHUNKS -> FVcd
    java.lang.String NAME_ENTITIES -> wfQH
    java.lang.String STATE_MONITORING_TAB -> Wqfh
    java.lang.String STATE_MONITORING_ENABLED -> GYgI
    java.lang.String STATE_MAPPING_ENABLED -> NEId
    java.lang.String STATE_SOUND_PLAYS -> MlYy
    java.lang.String STATE_MONITORING_POSTED -> xrDo
    java.lang.String STATE_MONITORING_LASTTAB -> YxLX
    java.lang.String STATE_GLASSES_ENABLED -> XSEy
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> ccem
    java.lang.String STATE_PLAYER_HOTBAR -> PJnC
    java.lang.String STATE_PLAYER_SHIFT -> owja
    java.lang.String STATE_PLAYER_SCROLL -> tdva
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> cBDa
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> NDga
    java.lang.String PERM_ACCESS -> DXmN
    java.lang.String PERM_MONITOR -> biTf
    java.lang.String PERM_MONITOR_TITLE -> WWsD
    java.lang.String PERM_MONITOR_MAP -> dLvb
    java.lang.String PERM_MONITOR_ENVIRONMENT -> Raub
    java.lang.String PERM_MONITOR_GLASSES -> inIP
    java.lang.String PERM_ACT -> Wqeb
    java.lang.String PERM_RELOAD -> UcRM
    java.lang.String SAMPLER_TPS -> miWM
    java.lang.String SAMPLER_TICK -> LOfD
    java.lang.String SAMPLER_TIU -> MIxB
    java.lang.String SAMPLER_MEM -> SBxM
    java.lang.String SAMPLER_FREEMEM -> hkHw
    java.lang.String SAMPLER_MAXMEM -> cRhF
    java.lang.String SAMPLER_ALLOCMEM -> TpoW
    java.lang.String SAMPLER_MAHS -> nkyS
    java.lang.String SAMPLER_CHK -> EmUQ
    java.lang.String SAMPLER_CHKS -> rEbA
    java.lang.String SAMPLER_ENT -> dVKb
    java.lang.String SAMPLER_ENTLIV -> Fovu
    java.lang.String SAMPLER_ENTDROP -> aDPq
    java.lang.String SAMPLER_ENTTILE -> FMtU
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> YwnQ
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> wUQk
    java.lang.String ACTION_CULL_ENTITIES_NAME -> rWDC
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> OHNl
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> TONE
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> xyvc
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> XSIl
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> NfnH
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> BtlB
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> rpVE
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> cuKm
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> jpnR
    6:6:void <init>() -> <init>
    8:130:void <clinit>() -> <clinit>
react.React -> yQyd:
    react.React instance -> imkT
    react.controller.SampleController sampleController -> YVLd
    react.controller.PlayerController playerController -> nRgQ
    react.controller.MonitorController monitorController -> cJXD
    react.controller.CommandController commandController -> kkaN
    react.controller.ActionController actionController -> Ahxp
    react.controller.EntityCacheController entityCacheController -> nSFr
    react.controller.DropMergeController dropMergeController -> CUlw
    react.controller.FastDecayController fastDecayController -> YwmX
    react.controller.EntityStackController entityStackController -> pjNd
    react.controller.GlassController glassController -> tKgA
    react.controller.NMSController nmsController -> WPEX
    react.controller.EntityCullController entityCullController -> CEMD
    react.controller.SpikeController spikeController -> SKhQ
    react.controller.SecurityController securityController -> MRhR
    react.controller.RedstoneController redstoneController -> VfSf
    27:27:void <init>() -> <init>
    81:81:void enable() -> enable
    87:87:void disable() -> disable
react.action.ActionCullEntities -> fRsw:
    long ms -> fmRf
    int lcd -> savF
    31:58:void <init>() -> <init>
    63:149:void enact(react.api.IActionSource,react.api.ISelector[]) -> STOt
    153:155:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> STOt
    26:26:void access$0(react.action.ActionCullEntities,long) -> STOt
    27:27:int access$1(react.action.ActionCullEntities) -> STOt
    26:26:long access$2(react.action.ActionCullEntities) -> fdWf
react.action.ActionCullEntities$1 -> fRsw$1:
    react.action.ActionCullEntities this$0 -> JAOF
    1:35:void <init>(react.action.ActionCullEntities) -> <init>
    40:43:react.api.ISelector get() -> mWjx
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> fRsw$2:
    react.action.ActionCullEntities this$0 -> JAOF
    1:47:void <init>(react.action.ActionCullEntities) -> <init>
    52:55:react.api.ISelector get() -> mWjx
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> fRsw$3:
    react.action.ActionCullEntities this$0 -> JAOF
    org.cyberpwn.glang.FinalInteger val$completed -> ytiE
    org.cyberpwn.glang.FinalInteger val$total -> UANY
    org.cyberpwn.glang.FinalInteger val$totalCulled -> hPsl
    org.cyberpwn.glang.FinalInteger val$totalChunked -> VTrO
    react.api.IActionSource val$source -> PKQR
    1:103:void <init>(react.action.ActionCullEntities,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,react.api.IActionSource) -> <init>
    108:128:void run() -> run
react.action.ActionCullEntities$4 -> fRsw$4:
    react.action.ActionCullEntities this$0 -> JAOF
    react.api.IActionSource val$source -> PKQR
    org.cyberpwn.glang.FinalInteger val$totalCulled -> hPsl
    org.cyberpwn.glang.FinalInteger val$totalChunked -> VTrO
    1:135:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger) -> <init>
    140:146:void run() -> run
react.action.ActionPurgeChunks -> RPnV:
    long ms -> fmRf
    int lcd -> savF
    28:43:void <init>() -> <init>
    48:121:void enact(react.api.IActionSource,react.api.ISelector[]) -> STOt
    125:137:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> fdWf
    21:21:long access$002(react.action.ActionPurgeChunks,long) -> STOt
    21:21:int access$100(react.action.ActionPurgeChunks) -> STOt
    21:21:long access$000(react.action.ActionPurgeChunks) -> fdWf
react.action.ActionPurgeChunks$1 -> RPnV$1:
    react.action.ActionPurgeChunks this$0 -> ssXG
    33:33:void <init>(react.action.ActionPurgeChunks) -> <init>
    37:40:react.api.ISelector get() -> mWjx
    33:33:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> RPnV$2:
    org.cyberpwn.glang.FinalInteger val$completed -> ytiE
    org.cyberpwn.glang.FinalInteger val$total -> UANY
    org.cyberpwn.glang.FinalInteger val$totalCulled -> hPsl
    org.cyberpwn.glang.FinalInteger val$totalChunked -> VTrO
    react.api.IActionSource val$source -> PKQR
    react.action.ActionPurgeChunks this$0 -> ssXG
    76:76:void <init>(react.action.ActionPurgeChunks,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,react.api.IActionSource) -> <init>
    80:100:void run() -> run
react.action.ActionPurgeChunks$3 -> RPnV$3:
    react.api.IActionSource val$source -> PKQR
    org.cyberpwn.glang.FinalInteger val$completed -> ytiE
    react.action.ActionPurgeChunks this$0 -> ssXG
    108:108:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,org.cyberpwn.glang.FinalInteger) -> <init>
    112:118:void run() -> run
react.action.ActionPurgeChunks$4 -> RPnV$4:
    org.bukkit.Chunk val$chunk -> VwUg
    java.lang.Runnable val$cb -> LOdy
    react.action.ActionPurgeChunks this$0 -> ssXG
    126:126:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    130:135:void run() -> run
react.action.ActionPurgeEntities -> oVBn:
    long ms -> fmRf
    int lcd -> savF
    33:60:void <init>() -> <init>
    65:152:void enact(react.api.IActionSource,react.api.ISelector[]) -> STOt
    156:199:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> fdWf
    26:26:long access$002(react.action.ActionPurgeEntities,long) -> STOt
    26:26:int access$100(react.action.ActionPurgeEntities) -> STOt
    26:26:long access$000(react.action.ActionPurgeEntities) -> fdWf
    26:26:int access$102(react.action.ActionPurgeEntities,int) -> STOt
react.action.ActionPurgeEntities$1 -> oVBn$1:
    react.action.ActionPurgeEntities this$0 -> OsAx
    38:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    42:45:react.api.ISelector get() -> mWjx
    38:38:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> oVBn$2:
    react.action.ActionPurgeEntities this$0 -> OsAx
    50:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    54:57:react.api.ISelector get() -> mWjx
    50:50:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> oVBn$3:
    org.cyberpwn.glang.FinalInteger val$completed -> ytiE
    org.cyberpwn.glang.FinalInteger val$total -> UANY
    org.cyberpwn.glang.FinalInteger val$totalCulled -> hPsl
    org.cyberpwn.glang.FinalInteger val$totalChunked -> VTrO
    react.api.IActionSource val$source -> PKQR
    react.action.ActionPurgeEntities this$0 -> OsAx
    106:106:void <init>(react.action.ActionPurgeEntities,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,react.api.IActionSource) -> <init>
    110:130:void run() -> run
react.action.ActionPurgeEntities$4 -> oVBn$4:
    react.api.IActionSource val$source -> PKQR
    org.cyberpwn.glang.FinalInteger val$totalCulled -> hPsl
    org.cyberpwn.glang.FinalInteger val$totalChunked -> VTrO
    react.action.ActionPurgeEntities this$0 -> OsAx
    138:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger) -> <init>
    143:149:void run() -> run
react.action.ActionPurgeEntities$5 -> oVBn$5:
    org.bukkit.entity.Entity val$i -> NxQl
    org.cyberpwn.glang.FinalInteger val$cu -> NxRN
    int val$k -> OHPX
    org.bukkit.Chunk val$chunk -> VwUg
    java.lang.Runnable val$cb -> LOdy
    react.action.ActionPurgeEntities this$0 -> OsAx
    178:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,org.cyberpwn.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    182:190:void run() -> run
react.api.Action -> eqvw:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> UJBM
    java.lang.String[] nodes -> OYQu
    react.api.ActionHandle handle -> RPyC
    react.api.ActionState state -> NDla
    react.api.ActionTargetType target -> XtnO
    react.api.ActionType type -> ArKd
    react.api.IActionSource currentSource -> xXVd
    double progress -> EmXK
    org.cyberpwn.glang.GMap defaultSelectors -> WFuQ
    23:24:void <init>(react.api.ActionType) -> <init>
    27:39:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    44:59:react.api.ISelector[] biselect(react.api.ISelector[]) -> STOt
    65:66:void setDefaultSelector(java.lang.Class,org.cyberpwn.glang.AccessCallback) -> STOt
    71:71:java.lang.String getName() -> getName
    77:77:java.lang.String getDescription() -> getDescription
    83:83:react.api.ActionHandle getHandleType() -> lUHx
    89:89:react.api.ActionState getState() -> wCfV
    95:95:java.lang.String getStatus() -> getStatus
    101:102:void setStatus(java.lang.String) -> CMRe
    107:107:double getProgress() -> getProgress
    113:114:void setProgress(double) -> setProgress
    119:119:react.api.ActionTargetType getTarget() -> clQJ
    125:125:react.api.ActionType getType() -> kIUS
    131:131:org.cyberpwn.glang.GMap getDefaultSelectors() -> afKF
    137:146:void act(react.api.IActionSource,react.api.ISelector[]) -> fdWf
    151:152:void completeAction() -> rojq
    157:157:react.api.IActionSource getCurrentSource() -> wKuf
    163:163:java.lang.String[] getNodes() -> JtJq
    169:170:void setNodes(java.lang.String[]) -> STOt
    void enact(react.api.IActionSource,react.api.ISelector[]) -> STOt
react.api.ActionAlreadyRunningException -> ooUF:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> lThw:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> FMlI:
    react.api.ActionHandle AUTOMATIC -> aCps
    react.api.ActionHandle MANUAL -> VLcQ
    react.api.ActionHandle MUTEX -> Cfnx
    react.api.ActionHandle[] $VALUES -> fSaU
    3:3:react.api.ActionHandle[] values() -> values
    3:3:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ActionNotRunningException -> tSpP:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> VTjN:
    react.api.ActionState IDLE -> WWwP
    react.api.ActionState RUNNING -> VUTp
    react.api.ActionState[] $VALUES -> bqiW
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> ejGg:
    react.api.ActionTargetType POSITIONAL -> LhyN
    react.api.ActionTargetType SYSTEM -> PvFs
    react.api.ActionTargetType[] $VALUES -> ESdL
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> EmLn:
    react.api.ActionType CULL_ENTITIES -> hPvU
    react.api.ActionType PURGE_ENTITIES -> bhxK
    react.api.ActionType PURGE_CHUNKS -> YxPa
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> RPyC
    react.api.ActionTargetType target -> XtnO
    react.api.ActionType[] $VALUES -> EmVh
    5:5:react.api.ActionType[] values() -> values
    5:5:react.api.ActionType valueOf(java.lang.String) -> valueOf
    17:22:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    26:26:java.lang.String getName() -> getName
    31:31:java.lang.String getDescription() -> getDescription
    36:36:react.api.ActionHandle getHandle() -> jWSI
    41:41:react.api.ActionTargetType getTarget() -> clQJ
    5:9:void <clinit>() -> <clinit>
react.api.Address -> jyXG:
    int value() -> value
react.api.Async -> IhWk:
react.api.CPUBenchmark -> LiPh:
    org.bukkit.command.CommandSender sender -> sender
    int score -> VCqw
    16:20:void <init>(org.bukkit.command.CommandSender) -> <init>
    25:57:void run() -> run
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> STOt
    10:10:int access$100(react.api.CPUBenchmark) -> fdWf
react.api.CPUBenchmark$1 -> LiPh$1:
    react.api.CPUBenchmark this$0 -> FWGs
    26:26:void <init>(react.api.CPUBenchmark) -> <init>
    30:31:void run() -> run
react.api.CPUBenchmark$2 -> LiPh$2:
    react.api.CPUBenchmark this$0 -> FWGs
    49:49:void <init>(react.api.CPUBenchmark) -> <init>
    53:55:void run() -> run
react.api.CPUResult -> qBUi:
    react.api.CPUResult ULTRA_SLOW -> mFsf
    react.api.CPUResult VERY_SLOW -> ooaU
    react.api.CPUResult SLOW -> Kvyp
    react.api.CPUResult AVERAGE -> eXrJ
    react.api.CPUResult GOOD -> UbuW
    react.api.CPUResult FAST -> RkOD
    react.api.CPUResult VERY_FAST -> wMEl
    react.api.CPUResult ULTRA_FAST -> rgiR
    java.lang.String m -> DQDb
    react.api.CPUResult[] $VALUES -> opBY
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> EKFb
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> eaVx:
    org.cyberpwn.glang.GMap cache -> aTub
    12:14:void <init>() -> <init>
    19:19:org.cyberpwn.glang.GSet get(java.lang.Object) -> paSp
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> flhL
    42:43:void clear() -> clear
    48:48:org.cyberpwn.glang.GList k() -> RPnV
    54:54:boolean has(java.lang.Object) -> pGaY
react.api.Clip -> MSAq:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> IFTh:
    org.bukkit.command.CommandSender sender -> sender
    12:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> PBUD
    30:31:void sendResponseSuccess(java.lang.String) -> MkoR
    36:37:void sendResponseError(java.lang.String) -> KDFr
    42:43:void sendResponseActing(java.lang.String) -> JISy
react.api.ConsoleActionSource -> CxII:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> PBUD
    18:19:void sendResponseSuccess(java.lang.String) -> MkoR
    24:25:void sendResponseError(java.lang.String) -> KDFr
    30:31:void sendResponseActing(java.lang.String) -> JISy
react.api.CullList -> Gapj:
    org.cyberpwn.glang.GSet toCull -> yuOJ
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> RsPS
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> SdrT
react.api.DTest -> SSrQ:
    3:3:void <init>() -> <init>
    7:58:int test() -> NMSE
react.api.EntityFlag -> xNyq:
    react.api.EntityFlag NAMED -> bFwp
    react.api.EntityFlag TAMED -> YxSq
    react.api.EntityFlag STACKED -> kJBi
    react.api.EntityFlag RIDDEN -> ryKQ
    react.api.EntityFlag LEASHED -> TORT
    java.lang.String m -> DQDb
    react.api.EntityFlag[] $VALUES -> URTs
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:org.cyberpwn.glang.GSet getFlags(org.bukkit.entity.Entity) -> GrpS
    40:60:boolean is(org.bukkit.entity.Entity) -> ofad
    66:66:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> gMim:
    org.cyberpwn.glang.GSet entityTypes -> hjjx
    11:13:void <init>() -> <init>
    17:17:org.cyberpwn.glang.GSet getEntityTypes() -> YntR
react.api.EntitySample -> ndAS:
    org.cyberpwn.glang.GMap counts -> EdgL
    org.cyberpwn.glang.GMap sets -> ryJS
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:org.cyberpwn.glang.GList getAll() -> MdCE
    45:45:org.cyberpwn.glang.GList getTypes() -> VLXw
    50:57:int total() -> FNNg
    62:67:int get(org.bukkit.entity.EntityType) -> STOt
    72:79:org.cyberpwn.glang.GSet getSet(org.bukkit.entity.EntityType) -> fdWf
    84:96:void add(org.bukkit.entity.Entity) -> RsPS
react.api.Experimental -> lLXe:
react.api.IAction -> bGLY:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> lUHx
    void act(react.api.IActionSource,react.api.ISelector[]) -> fdWf
    void enact(react.api.IActionSource,react.api.ISelector[]) -> STOt
    react.api.ActionState getState() -> wCfV
    react.api.ActionTargetType getTarget() -> clQJ
    void setNodes(java.lang.String[]) -> STOt
    java.lang.String[] getNodes() -> JtJq
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> CMRe
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> kIUS
    org.cyberpwn.glang.GMap getDefaultSelectors() -> afKF
    void setDefaultSelector(java.lang.Class,org.cyberpwn.glang.AccessCallback) -> STOt
    react.api.ISelector[] biselect(react.api.ISelector[]) -> STOt
    react.api.IActionSource getCurrentSource() -> wKuf
    void completeAction() -> rojq
react.api.IActionSource -> aCgw:
    void sendResponse(java.lang.String) -> PBUD
    void sendResponseSuccess(java.lang.String) -> MkoR
    void sendResponseError(java.lang.String) -> KDFr
    void sendResponseActing(java.lang.String) -> JISy
react.api.ICache -> vkWW:
    org.cyberpwn.glang.GSet get(java.lang.Object) -> paSp
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> flhL
    void clear() -> clear
    boolean has(java.lang.Object) -> pGaY
    org.cyberpwn.glang.GList k() -> RPnV
react.api.ICommand -> Xtao:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> fmMY
    java.lang.String[] getPermissions() -> lfNK
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    react.api.SideGate getSideGate() -> idsq
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> STOt
react.api.IRecord -> SSpQ:
    java.lang.String getRecordType() -> MuGN
    long getRecordTime() -> TNet
    org.cyberpwn.json.JSONObject toJSON() -> GIBO
    java.lang.Object getRecordObject() -> dwgT
    void fromJSON(org.cyberpwn.json.JSONObject) -> UITd
react.api.IRecordBook -> avka:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> VCgW
    long getOldestRecordTime() -> tBof
    void addRecord(react.api.IRecord) -> STOt
    long getLatestRecordTime() -> bXOu
    int countRecords(long,long) -> fdWf
    org.cyberpwn.glang.GMap getRecords(long,long) -> RanD
    int purgeRecordsBefore(long) -> WGKY
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> LGLU:
    java.lang.String getID() -> getID
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    surge.util.C getColor() -> pPVW
    surge.util.C getAltColor() -> nuEI
    void setColor(surge.util.C,surge.util.C) -> STOt
    int getInterval() -> getInterval
    void setInterval(int) -> CMRe
    void sample() -> PJjl
    java.lang.String get() -> get
    void construct() -> mrAe
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> mWjx:
    react.api.SelectionMode getMode() -> BktM
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> gMhM
    org.cyberpwn.glang.GSet getList() -> kIXH
    org.cyberpwn.glang.GSet getPossibilities() -> ntdJ
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> EmKE
    java.lang.String getName() -> getName
react.api.Injection -> lUHx:
    react.api.InjectionMethod value() -> AWqY
react.api.InjectionMethod -> wCfV:
    react.api.InjectionMethod SWAP -> OHPy
    react.api.InjectionMethod SUBSTRATE -> CxTG
    react.api.InjectionMethod RELOAD -> yAhR
    react.api.InjectionMethod[] $VALUES -> IGAS
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Lang -> clQJ:
    java.lang.String value() -> value
react.api.MSampler -> kIUS:
    6:6:void <init>() -> <init>
    10:10:surge.server.SuperSampler ss() -> JQhd
react.api.MonitorHeading -> afKF:
    react.api.ISampler head -> UtWS
    org.cyberpwn.glang.GList children -> QNXK
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> STOt
    27:27:react.api.ISampler getHead() -> WWnX
    32:33:void setHead(react.api.ISampler) -> fdWf
    37:37:org.cyberpwn.glang.GList getChildren() -> QMko
    42:42:java.lang.String getHeadText() -> Mksa
    47:60:java.lang.String getChildText() -> DjKN
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(org.cyberpwn.glang.GList) -> fdWf
react.api.NoiseGenerator -> rojq:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> wKuf:
    react.api.NoiseGenerator[] octaves -> Jsva
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> JRIi
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> JtJq:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> XdMr
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> PmLx
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> jWSI:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> STOt
react.api.Permissable -> SdrT:
    react.api.Permissable ACCESS -> JARu
    react.api.Permissable MONITOR -> SfAL
    react.api.Permissable MONITOR_TITLE -> RHip
    react.api.Permissable MONITOR_MAP -> rWGL
    react.api.Permissable MONITOR_ENVIRONMENT -> Hebg
    react.api.Permissable MONITOR_GLASSES -> qJuQ
    react.api.Permissable ACT -> OQFH
    react.api.Permissable RELOAD -> hYln
    java.lang.String node -> htAL
    react.api.Permissable[] $VALUES -> PTIR
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    21:31:void <init>(java.lang.String,int,java.lang.String) -> <init>
    35:35:boolean has(org.bukkit.command.CommandSender) -> STOt
    40:40:java.lang.String getNode() -> kYwL
    7:16:void <clinit>() -> <clinit>
react.api.PlayerActionSource -> NMSE:
    org.bukkit.entity.Player p -> EulE
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> PBUD
    30:31:void sendResponseSuccess(java.lang.String) -> MkoR
    36:37:void sendResponseError(java.lang.String) -> KDFr
    42:43:void sendResponseActing(java.lang.String) -> JISy
react.api.PluginSelfDeleter -> YntR:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> GcAN
    java.lang.Runnable r -> padp
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> STOt
react.api.ReactActionSource -> MdCE:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> PBUD
    16:17:void sendResponseSuccess(java.lang.String) -> MkoR
    22:23:void sendResponseError(java.lang.String) -> KDFr
    28:29:void sendResponseActing(java.lang.String) -> JISy
react.api.ReactCommand -> VLXw:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> rFHs
    java.lang.String usage -> tfAl
    java.lang.String description -> description
    react.api.SideGate sideGate -> WaMh
    13:15:void <init>() -> <init>
    20:20:java.lang.String getCommand() -> getCommand
    26:26:java.lang.String[] getAliases() -> fmMY
    32:32:java.lang.String[] getPermissions() -> lfNK
    38:38:java.lang.String getUsage() -> getUsage
    44:44:java.lang.String getDescription() -> getDescription
    50:50:react.api.SideGate getSideGate() -> idsq
react.api.ReactException -> FNNg:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> fmMY:
    org.cyberpwn.glang.GMap keystore -> TNsB
    boolean monitoring -> monitoring
    boolean glasses -> UJFh
    boolean mapping -> pacv
    int monitorSelection -> DXur
    int plays -> pXsP
    boolean monitorPosted -> Cftf
    int monitorLastSelection -> DHUf
    int switchNotification -> lDVb
    int hotbarSlot -> SecB
    boolean shift -> oobe
    int scroll -> CUrG
    double lastHeight -> mrMu
    boolean heightMovement -> oEPG
    org.bukkit.entity.Player p -> EulE
    39:84:void <init>(org.bukkit.entity.Player) -> <init>
    90:97:void save() -> save
    103:110:void load() -> load
    114:114:boolean isMonitoring() -> RQQF
    119:119:boolean isMapping() -> ePVh
    124:124:org.bukkit.entity.Player getP() -> lTjB
    129:130:void setMonitoring(boolean) -> EmKE
    134:135:void setMapping(boolean) -> RsPS
    139:139:int getMonitorSelection() -> qJgN
    144:145:void setMonitorSelection(int) -> PBUD
    149:149:int getHotbarSlot() -> XdDU
    154:155:void setHotbarSlot(int) -> MkoR
    159:159:boolean isShifting() -> dxHO
    164:165:void setShifting(boolean) -> GrpS
    169:169:boolean isShift() -> xXLn
    174:175:void setShift(boolean) -> ofad
    179:179:int getScroll() -> ylRL
    184:185:void setScroll(int) -> KDFr
    189:189:int getMonitorLastSelection() -> bGMb
    194:195:void setMonitorLastSelection(int) -> JISy
    199:200:void setP(org.bukkit.entity.Player) -> STOt
    204:204:double getLastHeight() -> YECi
    209:210:void setLastHeight(double) -> PBUy
    214:214:boolean isHeightMovement() -> jxwW
    219:220:void setHeightMovement(boolean) -> HvTS
    224:224:int getSwitchNotification() -> oLqa
    229:230:void setSwitchNotification(int) -> hakj
    234:234:boolean getMonitorPosted() -> kIWG
    239:240:void setMonitorPosted(boolean) -> VvkR
    244:244:int getPlays() -> wChD
    249:250:void setPlays(int) -> jgrN
    254:254:boolean isGlasses() -> uNcS
    259:260:void setGlasses(boolean) -> MImh
    23:37:void <clinit>() -> <clinit>
react.api.Record -> lfNK:
    java.lang.String recordType -> cmBI
    long recordTime -> YpCv
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> MuGN
    32:32:long getRecordTime() -> TNet
    38:38:java.lang.Object getRecordObject() -> dwgT
    org.cyberpwn.json.JSONObject toJSON() -> GIBO
    void fromJSON(org.cyberpwn.json.JSONObject) -> UITd
react.api.RecordBook -> idsq:
    java.io.File recordFile -> FNYq
    org.cyberpwn.json.JSONObject js -> DXuD
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> STOt
    79:87:react.api.IRecord getRecord(long) -> VCgW
    react.api.IRecord createDummyRecord(long,java.lang.String) -> STOt
    95:107:long getOldestRecordTime() -> tBof
    113:125:long getLatestRecordTime() -> bXOu
    130:130:boolean within(long,long,long) -> STOt
    136:144:int countRecords(long,long) -> fdWf
    150:162:org.cyberpwn.glang.GMap getRecords(long,long) -> RanD
    168:181:int purgeRecordsBefore(long) -> WGKY
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.SampledType -> MuGN:
    react.api.SampledType TPS -> Iyeu
    react.api.SampledType TICK -> IFbI
    react.api.SampledType TIU -> Wqma
    react.api.SampledType MEM -> wnha
    react.api.SampledType FREEMEM -> xaKS
    react.api.SampledType MAXMEM -> Xcnf
    react.api.SampledType ALLOCMEM -> kbuW
    react.api.SampledType MAHS -> Cwtl
    react.api.SampledType CHK -> Thdf
    react.api.SampledType CHKS -> DagB
    react.api.SampledType ENT -> mPIq
    react.api.SampledType ENTLIV -> XBLt
    react.api.SampledType ENTDROP -> rglh
    react.api.SampledType ENTTILE -> YfuU
    java.lang.String node -> htAL
    react.api.SampledType[] $VALUES -> ECJS
    5:5:react.api.SampledType[] values() -> values
    5:5:react.api.SampledType valueOf(java.lang.String) -> valueOf
    25:35:void <init>(java.lang.String,int,java.lang.String) -> <init>
    39:39:java.lang.String getNode() -> kYwL
    5:20:void <clinit>() -> <clinit>
react.api.Sampler -> TNet:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    surge.util.C color -> LOmu
    surge.util.C altColor -> Tyhh
    int interval -> Diya
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:surge.util.C getColor() -> pPVW
    49:49:surge.util.C getAltColor() -> nuEI
    55:55:int getInterval() -> getInterval
    void sample() -> PJjl
    void construct() -> mrAe
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(surge.util.C,surge.util.C) -> STOt
    107:108:void setInterval(int) -> CMRe
react.api.Sector -> GIBO:
    int value() -> value
react.api.SelectionException -> dwgT:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> tBof:
    react.api.SelectionMode WHITELIST -> DQIJ
    react.api.SelectionMode BLACKLIST -> vkhk
    react.api.SelectionMode[] $VALUES -> TOVR
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> bXOu:
    java.lang.Class objectType -> MmDy
    react.api.SelectionMode mode -> eGuQ
    org.cyberpwn.glang.GSet list -> vJEu
    org.cyberpwn.glang.GSet possibilities -> wDWn
    int popoff -> cKAS
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> BktM
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> gMhM
    43:43:org.cyberpwn.glang.GSet getList() -> kIXH
    49:49:org.cyberpwn.glang.GSet getPossibilities() -> ntdJ
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> EmKE
    57:88:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> RsPS
    93:95:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> pPVW:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> RanD
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> EmKE
    65:113:org.cyberpwn.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> GrpS
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> nuEI:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> PJjl:
    16:17:void <init>() -> <init>
    21:22:void add(org.bukkit.Chunk) -> RanD
    26:27:void add(org.bukkit.Chunk,int) -> STOt
    31:35:void add(org.bukkit.World) -> STOt
    39:43:void addAll() -> fmNw
    48:91:int parse(org.bukkit.command.CommandSender,java.lang.String) -> EmKE
    96:277:org.cyberpwn.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> GrpS
    283:283:java.lang.String getName() -> getName
react.api.Side -> mrAe:
    react.api.Side PLAYERS -> pYVO
    react.api.Side CONSOLE -> GtEL
    java.lang.String ss -> GtEM
    react.api.Side[] $VALUES -> Eums
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> rNNh
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> fdWf
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> BktM:
    react.api.SideGate PLAYERS_ONLY -> brQX
    react.api.SideGate CONSOLES_ONLY -> xOkK
    react.api.SideGate ANYTHING -> tKoL
    react.api.SideGate[] $VALUES -> vJEe
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> STOt
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> BktM$1:
    int[] $SwitchMap$react$api$SideGate -> BJbT
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> kIXH:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> SwEb
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> STVW
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> ntdJ:
    double wScale -> pQDv
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> STOt
react.api.StackTraceList -> AWqY:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> JQhd:
    11:12:void <init>(long,org.cyberpwn.glang.GList,java.lang.String) -> <init>
    17:32:org.cyberpwn.json.JSONObject toJSON() -> GIBO
    38:49:void fromJSON(org.cyberpwn.json.JSONObject) -> UITd
react.api.StackTraceRecordBook -> WWnX:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> fdWf
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> STOt
react.api.StackedEntity -> QMko:
    org.bukkit.entity.LivingEntity entity -> BBRI
    int count -> count
    double rmx -> yBMV
    20:30:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    34:34:int getAbsoluteMaxCount() -> WPBW
    39:39:int getMaxCount(org.bukkit.entity.LivingEntity) -> STOt
    44:46:void update() -> update
    50:56:void signalSize() -> ugyC
    60:101:void updateHealth() -> Ywik
    105:106:void heal(double) -> jEoY
    110:111:void setHealth(double) -> setHealth
    115:115:int getEffectiveCount() -> BRdi
    120:120:int getEffectiveCount(double) -> VCgW
    125:125:double getEffectiveMaxHealth(int) -> jhRo
    130:130:double getRealMaxHealth() -> miRo
    135:135:double getHealth() -> getHealth
    140:146:void setMaxHealth(double) -> setMaxHealth
    150:150:double getMaxHealth() -> getMaxHealth
    155:155:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    160:160:int getCount() -> getCount
react.api.TitleMonitor -> Mksa:
    org.cyberpwn.glang.GList headings -> QyOt
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> STOt
    24:24:int getMaxSelection() -> eXiX
    29:37:int left(int) -> sQKL
    42:50:int right(int) -> DaVH
    55:55:react.api.MonitorHeading getHeadFor(int) -> yAYY
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> STOt
    83:100:java.lang.String getHotbarFor(int,boolean) -> RanD
react.api.Unused -> DjKN:
react.cache.CachedEntity -> JRIi:
    java.util.UUID uid -> kJFc
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> twDG
    double x -> x
    double y -> y
    double z -> z
    double vx -> NVUC
    double vy -> McrL
    double vz -> QhNj
    double dx -> DPgP
    double dy -> bPLy
    double dz -> YDpv
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> HvTS
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> Kepc
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> cJSM
    120:121:void setVx(double) -> WGKY
    125:125:double getVy() -> ejLf
    130:131:void setVy(double) -> OrWq
    135:135:double getVz() -> hsTl
    140:141:void setVz(double) -> paSp
    145:145:double getDx() -> QMpH
    150:151:void setDx(double) -> flhL
    155:155:double getDy() -> YVHh
    160:161:void setDy(double) -> pGaY
    165:165:double getDz() -> XuHg
    170:171:void setDz(double) -> gMhM
    175:175:java.util.UUID getUid() -> Sdwd
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> PmLx:
    int age -> yAkh
    boolean ageLock -> qTHO
    boolean breed -> OQIk
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> HvTS
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> QosT
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> UQlL
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> kYwL:
    org.bukkit.DyeColor dye -> kQxf
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> HvTS
    30:30:org.bukkit.DyeColor getDye() -> pHGw
    35:36:void setDye(org.bukkit.DyeColor) -> STOt
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> RQQF:
    org.cyberpwn.glang.GList potionEffects -> qTJy
    boolean canPickupItems -> rhPM
    org.bukkit.inventory.ItemStack[] armorContents -> mqrB
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> IWiE
    double maxHealth -> maxHealth
    int maxAir -> YMds
    int air -> NNFu
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> HvTS
    63:63:org.cyberpwn.glang.GList getPotionEffects() -> avpm
    68:69:void setPotionEffects(org.cyberpwn.glang.GList) -> RanD
    73:73:boolean isCanPickupItems() -> mFmf
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> ndEB
    138:139:void setMaxAir(int) -> VfJS
    143:143:int getAir() -> xXOd
    148:149:void setAir(int) -> wUFM
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> ePVh:
    boolean sheared -> WaQi
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> HvTS
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> lTjB:
    org.bukkit.inventory.ItemStack is -> MtvW
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> HvTS
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> qJgN:
    7:7:void <init>() -> <init>
react.command.CommandAct -> XdDU:
    28:36:void <init>() -> <init>
    41:128:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> STOt
react.command.CommandCPUScore -> dxHO:
    16:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> STOt
react.command.CommandFreeze -> xXLn:
    16:24:void <init>() -> <init>
    29:31:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> STOt
react.command.CommandGlasses -> ylRL:
    16:24:void <init>() -> <init>
    29:31:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> STOt
react.command.CommandHelp -> bGMb:
    15:22:void <init>() -> <init>
    27:28:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> STOt
react.command.CommandMonitor -> YECi:
    16:24:void <init>() -> <init>
    29:31:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> STOt
react.command.CommandReload -> jxwW:
    18:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> STOt
react.command.CommandStatus -> oLqa:
    26:34:void <init>() -> <init>
    39:47:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> STOt
    51:60:org.bukkit.inventory.ItemStack makeBook() -> Vvoy
    65:91:void addSpikePages(org.cyberpwn.glang.GList) -> UITd
    95:105:void addStatusPages(org.cyberpwn.glang.GList) -> EmKE
    109:126:int findSlot(org.bukkit.entity.Player) -> fdWf
react.controller.ActionController -> kIWG:
    int kiv -> XBQl
    org.cyberpwn.glang.GMap actions -> ESlk
    org.cyberpwn.glang.GMap pending -> lLlH
    20:20:void <init>() -> <init>
    29:69:void start() -> start
    73:74:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> STOt
    78:99:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> fdWf
    104:104:react.api.IAction getAction(react.api.ActionType) -> STOt
    109:110:void registerAction(react.api.IAction) -> STOt
    116:116:void stop() -> stop
    121:148:void tick() -> tick
    152:152:org.cyberpwn.glang.GList getActions() -> FgbD
    22:22:void <clinit>() -> <clinit>
react.controller.CommandController -> wChD:
    org.cyberpwn.glang.GList commands -> jGEk
    boolean k -> SmwR
    25:25:void <init>() -> <init>
    33:34:void start() -> start
    39:40:void stop() -> stop
    44:88:void begin() -> begin
    93:97:void tick() -> tick
    101:102:void msg(org.bukkit.command.CommandSender,java.lang.String) -> ofad
    106:107:void f(org.bukkit.command.CommandSender,java.lang.String) -> HvTS
    112:196:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
react.controller.DropMergeController -> uNcS:
    19:19:void <init>() -> <init>
    24:25:void start() -> start
    30:31:void stop() -> stop
    36:45:void on(org.bukkit.event.entity.ItemMergeEvent) -> STOt
    50:107:void tick() -> tick
    111:186:void stack(org.bukkit.entity.Item,org.bukkit.entity.Item) -> STOt
    190:266:void merge(org.bukkit.entity.Item,org.bukkit.entity.Item) -> fdWf
react.controller.DropMergeController$1 -> uNcS$1:
    org.bukkit.World val$i -> BdVA
    react.controller.DropMergeController this$0 -> ccsp
    70:70:void <init>(react.controller.DropMergeController,org.bukkit.World) -> <init>
    74:98:void run() -> run
react.controller.EntityCacheController -> fmNw:
    org.cyberpwn.glang.GMap caches -> lnnP
    int cachedEntities -> Orle
    int cachedDrops -> DalK
    49:49:boolean enabled() -> enabled
    44:55:void <init>() -> <init>
    59:73:void push(org.bukkit.World) -> fdWf
    77:91:void pop(org.bukkit.Chunk) -> UITd
    95:140:void pop(org.bukkit.entity.Entity) -> VvkR
    144:152:boolean hasUid(java.util.UUID,org.bukkit.Chunk) -> STOt
    157:195:int push(org.bukkit.Chunk) -> EmKE
    200:204:void cworld(org.bukkit.World) -> RanD
    209:215:void on(org.bukkit.event.world.WorldLoadEvent) -> STOt
    220:226:void on(org.bukkit.event.world.ChunkUnloadEvent) -> STOt
    231:238:void on(org.bukkit.event.world.WorldUnloadEvent) -> STOt
    243:244:void start() -> start
    249:250:void stop() -> stop
    254:254:boolean isCached(org.bukkit.Chunk) -> RsPS
    260:269:void on(org.bukkit.event.entity.EntitySpawnEvent) -> STOt
    274:344:void tick() -> tick
    348:348:org.cyberpwn.glang.GMap getCaches() -> XdEc
    353:353:int getCachedEntities() -> SvXY
    358:358:int getCachedDrops() -> KTnL
    363:363:int getCachedTotals() -> Bkwh
react.controller.EntityCullController -> rNNh:
    org.cyberpwn.glang.GSet flags -> tnVD
    org.cyberpwn.glang.GSet defer -> NEUy
    org.cyberpwn.glang.GMap maxs -> uNtd
    18:18:void <init>() -> <init>
    27:31:void start() -> start
    37:37:void stop() -> stop
    43:43:void tick() -> tick
    47:167:void repopulateRules() -> tBpu
    171:179:int cull(org.bukkit.Chunk) -> GrpS
    184:284:int partialCull(org.bukkit.Chunk) -> ofad
react.controller.EntityStackController -> STVW:
    org.cyberpwn.glang.GList stacks -> ySPn
    18:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:52:void tick() -> tick
    56:83:void stack(org.cyberpwn.glang.GList) -> RsPS
    87:92:boolean isStacked(org.bukkit.entity.LivingEntity) -> fdWf
    97:110:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> RanD
    116:134:void on(org.bukkit.event.entity.EntityDamageEvent) -> STOt
    138:153:void merge(react.api.StackedEntity,react.api.StackedEntity) -> STOt
    157:208:void checkNear(org.bukkit.entity.LivingEntity) -> UITd
    213:235:void on(org.bukkit.event.entity.EntitySpawnEvent) -> STOt
react.controller.EntityStackController$1 -> STVW$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> LYAV
    react.controller.EntityStackController this$0 -> YwxE
    221:221:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    225:232:void run() -> run
react.controller.FastDecayController -> WPBW:
    18:18:void <init>() -> <init>
    23:24:void start() -> start
    29:30:void stop() -> stop
    35:41:void on(org.bukkit.event.block.BlockBreakEvent) -> STOt
    45:121:void checkBreak(org.bukkit.block.Block) -> fdWf
    127:127:void tick() -> tick
react.controller.FastDecayController$1 -> WPBW$1:
    org.cyberpwn.glang.GMap val$locs -> UQyB
    react.controller.FastDecayController this$0 -> CVXa
    55:55:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,org.cyberpwn.glang.GMap) -> <init>
    59:59:boolean isAllowedSplooge(org.bukkit.Location) -> STOt
    65:65:boolean isAllowedSource(org.bukkit.Location) -> fdWf
    71:90:void clipped(org.bukkit.Location) -> RanD
    95:118:void finished() -> finished
react.controller.FastDecayController$1$1 -> WPBW$1$1:
    int val$i -> XBQS
    react.controller.FastDecayController$1 this$1 -> kbyY
    100:100:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,int) -> <init>
    104:114:void run() -> run
react.controller.GlassController -> ugyC:
    org.cyberpwn.glang.GMap q -> GIPu
    org.cyberpwn.glang.GList g -> hkSG
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:124:void tick() -> tick
    128:128:boolean isUsingGlasses(org.bukkit.entity.Player) -> RanD
    133:133:boolean canUseGlasses(org.bukkit.entity.Player) -> UITd
    138:154:void toggleGlasses(org.bukkit.entity.Player) -> EmKE
    159:164:void on(org.bukkit.event.block.BlockPhysicsEvent) -> STOt
    169:174:void on(org.bukkit.event.block.BlockFromToEvent) -> STOt
    179:184:void on(org.bukkit.event.block.BlockBurnEvent) -> STOt
    189:194:void on(org.bukkit.event.block.BlockFormEvent) -> STOt
    199:204:void on(org.bukkit.event.block.BlockFadeEvent) -> STOt
    209:221:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> STOt
    36:36:org.cyberpwn.glang.GList access$0(react.controller.GlassController) -> STOt
react.controller.GlassController$1 -> ugyC$1:
    react.controller.GlassController this$0 -> vQwW
    org.cyberpwn.glang.GMap val$cc -> cdSq
    1:79:void <init>(react.controller.GlassController,org.cyberpwn.glang.GMap) -> <init>
    84:122:void run() -> run
react.controller.GlassController$1$1 -> ugyC$1$1:
    react.controller.GlassController$1 this$1 -> AaTA
    org.bukkit.Location val$i -> fSiy
    org.bukkit.entity.Player val$j -> ebJI
    1:101:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    106:111:void run() -> run
react.controller.MonitorController -> Ywik:
    int maxCooldown -> GHqD
    react.api.TitleMonitor titleMonitor -> oftj
    org.cyberpwn.glang.GMap posts -> jiGs
    31:31:void <clinit>() -> <clinit>
    35:39:void <init>() -> <init>
    44:55:void start() -> start
    59:75:void toggleMonitoring(org.bukkit.entity.Player) -> RsPS
    80:82:void stop() -> stop
    86:105:void constructMonitor() -> vYxs
    109:114:float calcVolume(react.api.ReactPlayer) -> STOt
    119:119:boolean canMonitor(org.bukkit.entity.Player) -> GrpS
    124:129:boolean isMonitoring(org.bukkit.entity.Player) -> ofad
    134:138:void startMonitoring(org.bukkit.entity.Player) -> HvTS
    142:153:void stopMonitoring(org.bukkit.entity.Player) -> VvkR
    159:159:void tick() -> tick
    163:166:void changePost(react.api.ReactPlayer) -> fdWf
    170:179:void processPlayer(react.api.ReactPlayer) -> RanD
    183:207:void handleTriggers(react.api.ReactPlayer) -> UITd
    211:250:void handleScrolling(react.api.ReactPlayer) -> EmKE
    254:282:void handleShifting(react.api.ReactPlayer) -> RsPS
    286:308:void handlePosting(react.api.ReactPlayer) -> GrpS
    312:330:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> STOt
    335:349:java.lang.String prefixForSub(react.api.ReactPlayer,surge.util.C,int) -> STOt
    354:361:void tickMonitor(react.api.ReactPlayer) -> ofad
    365:365:react.api.TitleMonitor getTitleMonitor() -> SBrr
    371:375:void on(org.bukkit.event.player.PlayerJoinEvent) -> STOt
    380:389:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> STOt
    394:405:void onTick() -> UQjY
    410:410:java.lang.String getTickName() -> oDbo
react.controller.NMSController -> BRdi:
    react.core.IFeatureSet core -> biaO
    18:28:void <init>() -> <init>
    32:61:void handleNMS() -> Fgas
    65:95:react.core.IFeatureSet findCore(java.lang.String) -> hakj
    103:103:void start() -> start
    110:110:void stop() -> stop
    117:117:void tick() -> tick
    15:15:void <clinit>() -> <clinit>
react.controller.PlayerController -> miRo:
    org.cyberpwn.glang.GList players -> eGvE
    12:12:void <init>() -> <init>
    19:21:void start() -> start
    26:27:void stop() -> stop
    33:33:void tick() -> tick
    37:45:boolean has(org.bukkit.entity.Player) -> MImh
    50:61:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> PBUy
    66:66:org.cyberpwn.glang.GList getPlayers() -> tLBv
    72:77:void on(org.bukkit.event.player.PlayerQuitEvent) -> STOt
react.controller.RedstoneController -> eXiX:
    int dv -> nuXB
    int freezeTicks -> TFgy
    int currentFreeze -> IXKc
    int runTicks -> yBRg
    int currentRun -> xrSl
    boolean frozen -> PSnY
    double freezeSpeedRatio -> ArUw
    double runSpeedRatio -> XmHl
    org.cyberpwn.glang.GList toThaw -> sRCD
    org.cyberpwn.gmath.Average a -> gySf
    org.cyberpwn.gmath.Average u -> Rbee
    18:30:void <init>() -> <init>
    35:37:void start() -> start
    42:43:void stop() -> stop
    48:57:void on(org.bukkit.event.block.BlockPhysicsEvent) -> STOt
    61:62:void toggleRedstone() -> FpUl
    66:67:void freezeRedstone() -> TpmU
    71:72:void thawRedstone() -> tnIa
    77:130:void tick() -> tick
    134:134:boolean isFrozen() -> isFrozen
react.controller.SampleController -> Kepc:
    org.cyberpwn.glang.GMap samplers -> ivhb
    surge.server.SuperSampler ss -> fTNS
    24:28:void <init>() -> <init>
    32:33:void registerSampler(react.api.ISampler) -> RanD
    37:37:react.api.ISampler getSampler(java.lang.String) -> jgrN
    42:85:void constructSamplers() -> eXka
    90:93:void start() -> start
    98:101:void stop() -> stop
    107:107:void tick() -> tick
    111:111:surge.server.SuperSampler getSuperSampler() -> YxLy
    117:133:void onTick() -> UQjY
    138:138:java.lang.String getTickName() -> oDbo
react.controller.SecurityController -> cJSM:
    org.cyberpwn.glang.GList failures -> bPQt
    8:8:void <init>() -> <init>
    15:23:void start() -> start
    27:40:void scan(java.lang.Runnable) -> STOt
    46:46:void stop() -> stop
    52:52:void tick() -> tick
    10:10:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> cJSM$1:
    react.controller.SecurityController this$0 -> GHrR
    16:16:void <init>(react.controller.SecurityController) -> <init>
    21:21:void run() -> run
react.controller.SpikeController -> ejLf:
    org.cyberpwn.glang.GMap spikes -> NpJm
    23:25:void <init>() -> <init>
    30:57:void start() -> start
    62:63:void stop() -> stop
    69:98:void onTick() -> UQjY
    103:103:java.lang.String getTickName() -> oDbo
    111:111:void tick() -> tick
    115:115:org.cyberpwn.glang.GMap getSpikes() -> uplO
react.controller.SpikeController$1 -> ejLf$1:
    react.controller.SpikeController this$0 -> IGIN
    1:32:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    37:55:void run() -> run
react.controller.SpikeController$1$1 -> ejLf$1$1:
    react.controller.SpikeController$1 this$1 -> QySm
    1:37:void <init>(react.controller.SpikeController$1) -> <init>
    42:53:void run() -> run
react.controller.SploogeCounter -> hsTl:
    org.cyberpwn.glang.GList sources -> EuqE
    org.cyberpwn.glang.GList splooge -> vJJI
    org.cyberpwn.glang.GSet destroy -> Vwax
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> STOt
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> fdWf
    void clipped(org.bukkit.Location) -> RanD
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> STOt
    boolean isAllowedSource(org.bukkit.Location) -> fdWf
    15:15:org.cyberpwn.glang.GList access$000(react.controller.SploogeCounter) -> STOt
    15:15:org.cyberpwn.glang.GList access$100(react.controller.SploogeCounter) -> fdWf
    15:15:org.cyberpwn.glang.GSet access$200(react.controller.SploogeCounter) -> RanD
react.controller.SploogeCounter$1 -> hsTl$1:
    java.util.Iterator val$it -> xiaY
    org.bukkit.Location val$start -> KxCh
    int val$maxDistance -> VLnQ
    react.controller.SploogeCounter this$0 -> Thjl
    32:32:void <init>(react.controller.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.controller.SploogeCounter$1$1 -> hsTl$1$1:
    react.controller.SploogeCounter$1 this$1 -> UlNp
    90:90:void <init>(react.controller.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.core.FeatureSet -> QMpH:
    3:3:void <init>() -> <init>
react.core.FeatureType -> YVHh:
    react.core.FeatureType WORLD -> uWgJ
    react.core.FeatureType[] $VALUES -> XKDk
    3:3:react.core.FeatureType[] values() -> values
    3:3:react.core.FeatureType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:5:void <clinit>() -> <clinit>
react.core.IEssentialsFeature -> XuHg:
react.core.IFeature -> Sdwd:
react.core.IFeatureSet -> QosT:
    react.core.IFeatureWorld getWorldFeature() -> WiVG
react.core.IFeatureWorld -> UQlL:
    org.cyberpwn.glang.GList getDirtyChunks() -> VTou
    void setBlockFast(org.bukkit.Location,surge.util.MaterialBlock) -> STOt
    void refreshChunk(org.bukkit.Chunk) -> HvTS
react.core.Support -> pHGw:
    react.core.FeatureType value() -> xPBc
react.core.v1_12R1.FeatureWorld -> avpm:
    org.cyberpwn.glang.GList dirty -> Iyls
    19:21:void <init>() -> <init>
    27:34:void setBlockFast(org.bukkit.Location,surge.util.MaterialBlock) -> STOt
    40:41:void refreshChunk(org.bukkit.Chunk) -> HvTS
    46:46:org.cyberpwn.glang.GList getDirtyChunks() -> VTou
react.core.v1_12R1.V1_12R1 -> mFmf:
    react.core.v1_12R1.FeatureWorld featureWorld -> vJHw
    15:27:void <init>() -> <init>
    32:32:react.core.IFeatureWorld getWorldFeature() -> WiVG
react.core.v1_12R1.V1_12R1$1 -> mFmf$1:
    react.core.v1_12R1.V1_12R1 this$0 -> cJcU
    17:17:void <init>(react.core.v1_12R1.V1_12R1,java.lang.String,int) -> <init>
    21:25:void run() -> run
react.sampler.SampleChunksLoaded -> ndEB:
    11:11:void <init>() -> <init>
    16:22:void construct() -> mrAe
    27:28:void sample() -> PJjl
    33:33:java.lang.String get() -> get
react.sampler.SampleChunksLoadedPerSecond -> xXOd:
    org.cyberpwn.gmath.Average a -> gySf
    12:14:void <init>() -> <init>
    19:25:void construct() -> mrAe
    30:32:void sample() -> PJjl
    37:37:java.lang.String get() -> get
react.sampler.SampleEntitiesDrops -> Vvoy:
    12:12:void <init>() -> <init>
    17:23:void construct() -> mrAe
    28:29:void sample() -> PJjl
    34:35:java.lang.String get() -> get
react.sampler.SampleEntitiesLiving -> FgbD:
    12:12:void <init>() -> <init>
    17:23:void construct() -> mrAe
    28:29:void sample() -> PJjl
    34:35:java.lang.String get() -> get
react.sampler.SampleEntitiesTiles -> XdEc:
    11:11:void <init>() -> <init>
    16:22:void construct() -> mrAe
    27:28:void sample() -> PJjl
    33:33:java.lang.String get() -> get
react.sampler.SampleEntitiesTotal -> SvXY:
    11:11:void <init>() -> <init>
    16:22:void construct() -> mrAe
    27:28:void sample() -> PJjl
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryAllocated -> KTnL:
    11:11:void <init>() -> <init>
    16:22:void construct() -> mrAe
    27:28:void sample() -> PJjl
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryAllocationPerSecond -> Bkwh:
    11:11:void <init>() -> <init>
    16:22:void construct() -> mrAe
    27:28:void sample() -> PJjl
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryFree -> tBpu:
    11:11:void <init>() -> <init>
    16:22:void construct() -> mrAe
    27:28:void sample() -> PJjl
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryMax -> vYxs:
    11:11:void <init>() -> <init>
    16:22:void construct() -> mrAe
    27:28:void sample() -> PJjl
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryUse -> SBrr:
    11:11:void <init>() -> <init>
    16:22:void construct() -> mrAe
    27:28:void sample() -> PJjl
    33:33:java.lang.String get() -> get
react.sampler.SampleTickTime -> UQjY:
    org.cyberpwn.gmath.Average aa -> GITK
    12:14:void <init>() -> <init>
    19:25:void construct() -> mrAe
    30:32:void sample() -> PJjl
    37:37:java.lang.String get() -> get
react.sampler.SampleTickUtilization -> oDbo:
    org.cyberpwn.gmath.Average aa -> GITK
    12:14:void <init>() -> <init>
    19:25:void construct() -> mrAe
    30:32:void sample() -> PJjl
    37:37:java.lang.String get() -> get
react.sampler.SampleTicksPerSecond -> Fgas:
    12:12:void <init>() -> <init>
    17:23:void construct() -> mrAe
    28:29:void sample() -> PJjl
    34:39:java.lang.String get() -> get
react.security.checkpoints.SecurityCheckpointAlpha -> tLBv:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> oMXW
    77:141:void doScan(java.lang.Runnable) -> fdWf
    145:174:byte[] readResource(java.io.File,java.lang.String) -> STOt
    179:210:org.cyberpwn.glang.GMap scan(java.io.File) -> fdWf
    32:32:byte[] access$000(java.io.File,java.lang.String) -> fdWf
react.security.checkpoints.SecurityCheckpointAlpha$1 -> tLBv$1:
    java.lang.Runnable val$r -> eajd
    78:78:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> tLBv$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> YUvm
    131:131:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    135:137:void run() -> run
react.security.locks.SecurityLockAlpha -> FpUl:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> FpUl$1:
    java.io.File val$f -> ylcr
    react.security.locks.SecurityLockAlpha this$0 -> sHpD
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
surge.Main -> TpmU:
    org.cyberpwn.glang.GList plugins -> Bcvw
    org.cyberpwn.glang.GMap pluginInstances -> LaWG
    org.cyberpwn.glang.GList controllerSet -> HChP
    org.cyberpwn.glang.GMap anchors -> XJgB
    org.cyberpwn.glang.GList classes -> HTjD
    java.lang.reflect.Field nsField -> WrWh
    java.lang.reflect.Field thField -> pamO
    org.cyberpwn.glang.GList tracks -> twLE
    long nsf -> bifC
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> lwSe
    90:109:long getNanoSync() -> FVcd
    114:115:void requestResetNanos() -> wfQH
    119:122:void requestReload() -> Wqfh
    127:141:int getThreadCount() -> getThreadCount
    150:182:void onStart(surge.util.Protocol) -> STOt
    189:206:void onStop() -> GYgI
    212:212:void onPostInit() -> NEId
    218:218:void onPreInit() -> MlYy
    222:233:void shutDownAmps() -> xrDo
    237:446:void initializeAmps() -> YxLX
    451:484:void doScan() -> XSEy
    488:510:void scanForPoolDefiners() -> ccem
    514:530:void scanForRawEvents() -> PJnC
    534:550:void scanForDynamicTrack() -> owja
    554:575:void scanForAmps() -> tdva
    580:591:void onTick() -> UQjY
surge.PluginAmp -> tnIa:
    surge.control.AmpedPlugin plugin -> sHsV
    boolean connected -> connected
    int masterTask -> skVv
    17:21:void <init>(surge.control.AmpedPlugin) -> <init>
    25:25:surge.control.AmpedPlugin getPluginInstance() -> cBDa
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> NDga
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> STOt
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> STOt
    113:114:void stopTask(int) -> ktFc
    57:57:void access$0(surge.PluginAmp) -> STOt
surge.PluginAmp$1 -> tnIa$1:
    surge.PluginAmp this$0 -> HKxd
    1:37:void <init>(surge.PluginAmp) -> <init>
    42:44:void run() -> run
surge.PluginAmp$2 -> tnIa$2:
    surge.PluginAmp this$0 -> HKxd
    1:47:void <init>(surge.PluginAmp) -> <init>
    52:53:void run() -> run
surge.Surge -> eXka:
    surge.PluginAmp amp -> KoVE
    org.cyberpwn.glang.GList tickComponents -> pGyg
    org.cyberpwn.glang.GList atickComponents -> jNxv
    surge.sched.TaskManager taskmgr -> tLVd
    surge.hotload.HotloadManager hotloadmgr -> Blij
    java.lang.Thread mainThread -> RbhH
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> STOt
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> jhRo
    44:44:java.io.File folder() -> DXmN
    49:51:java.io.File getPluginJarFile() -> biTf
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> RanD
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> WWsD
    74:74:org.cyberpwn.glang.GList getTickComponents() -> dLvb
    79:79:org.cyberpwn.glang.GList getAsyncTickComponents() -> Raub
    84:91:void registerTicked(surge.sched.IMasterTickComponent) -> STOt
    95:102:void unregisterTicked(surge.sched.IMasterTickComponent) -> fdWf
    106:111:surge.PluginAmp createAmp(surge.control.AmpedPlugin) -> STOt
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> inIP
    126:126:boolean hasAmp() -> Wqeb
    131:131:surge.PluginAmp getAmp() -> UcRM
    136:136:surge.sched.TaskManager getTaskManager() -> miWM
    141:141:surge.hotload.HotloadManager getHotloadManager() -> LOfD
surge.cluster.Cluster -> YxLy:
    surge.cluster.ClusterType type -> jWkD
    java.lang.Object t -> hakj
    8:12:void <init>(surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:surge.cluster.ClusterType getType() -> MIxB
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
surge.cluster.ClusterBoolean -> uplO:
    7:8:void <init>(java.lang.Boolean) -> <init>
surge.cluster.ClusterDouble -> WiVG:
    7:8:void <init>(java.lang.Double) -> <init>
surge.cluster.ClusterInt -> VTou:
    7:8:void <init>(java.lang.Integer) -> <init>
surge.cluster.ClusterLong -> xPBc:
    7:8:void <init>(java.lang.Long) -> <init>
surge.cluster.ClusterString -> oMXW:
    7:8:void <init>(java.lang.String) -> <init>
surge.cluster.ClusterStringList -> lwSe:
    9:10:void <init>(java.util.List) -> <init>
surge.cluster.ClusterType -> FVcd:
    surge.cluster.ClusterType INT -> MSXn
    surge.cluster.ClusterType BOOLEAN -> sjum
    surge.cluster.ClusterType STRING -> GbiH
    surge.cluster.ClusterType STRING_LIST -> OPnK
    surge.cluster.ClusterType DOUBLE -> ThnU
    surge.cluster.ClusterType LONG -> FNcw
    surge.cluster.ClusterType[] ENUM$VALUES -> kkoA
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.cluster.ClusterType[] values() -> values
    1:1:surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
surge.cluster.ConfigurationDataInput -> wfQH:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> agBk
    12:12:void <init>() -> <init>
    17:127:void read(surge.cluster.IConfigurable,java.io.File) -> STOt
    132:257:surge.cluster.DataCluster fillDefaults(surge.cluster.IConfigurable) -> STOt
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> SBxM
surge.cluster.ConfigurationDataOutput -> Wqfh:
    12:12:void <init>() -> <init>
    17:143:void write(surge.cluster.IConfigurable,java.io.File) -> fdWf
surge.cluster.DataCluster -> GYgI:
    org.cyberpwn.glang.GMap clusters -> MdXg
    17:20:void <init>() -> <init>
    24:24:org.cyberpwn.glang.GList keys() -> hkHw
    29:33:void fromJson(org.cyberpwn.json.JSONObject) -> EmKE
    37:44:org.cyberpwn.json.JSONObject toJson() -> cRhF
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> TpoW
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> STOt
    104:104:boolean contains(java.lang.String) -> contains
    109:109:surge.cluster.ClusterType getType(java.lang.String) -> sQKL
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> RsPS
    194:195:void set(java.lang.String,int) -> UITd
    199:200:void set(java.lang.String,boolean) -> RanD
    204:205:void set(java.lang.String,double) -> RanD
    209:210:void set(java.lang.String,long) -> RanD
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> STOt
surge.cluster.ICluster -> NEId:
    surge.cluster.ClusterType getType() -> MIxB
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
surge.cluster.IConfigurable -> MlYy:
surge.cluster.IDataInput -> xrDo:
    surge.cluster.DataCluster read(java.io.File) -> RanD
surge.cluster.IDataOutput -> YxLX:
    void write(surge.cluster.DataCluster,java.io.File) -> STOt
surge.cluster.Key -> XSEy:
    java.lang.String value() -> value
surge.cluster.KeyPointer -> ccem:
    int value() -> value
surge.cluster.KeyStore -> PJnC:
surge.cluster.ReflectedConfigurationException -> owja:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
surge.cluster.YamlDataInput -> tdva:
    8:8:void <init>() -> <init>
    13:27:surge.cluster.DataCluster read(java.io.File) -> RanD
surge.cluster.YamlDataOutput -> cBDa:
    6:6:void <init>() -> <init>
    13:20:void write(surge.cluster.DataCluster,java.io.File) -> STOt
surge.collection.GSound -> NDga:
    java.lang.String sound -> ncvX
    org.bukkit.Sound iSound -> STgh
    java.lang.Float volume -> FEpy
    java.lang.Float pitch -> GADs
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> jEoY
    61:72:void play(org.bukkit.Location) -> UITd
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> STOt
    93:93:java.lang.String getSound() -> nkyS
    98:99:void setSound(java.lang.String) -> DaVH
    103:103:org.bukkit.Sound getiSound() -> EmUQ
    108:109:void setiSound(org.bukkit.Sound) -> STOt
    113:113:java.lang.Float getVolume() -> rEbA
    118:119:void setVolume(java.lang.Float) -> STOt
    123:123:java.lang.Float getPitch() -> dVKb
    128:129:void setPitch(java.lang.Float) -> fdWf
surge.control.AmpedPlugin -> DXmN:
    org.cyberpwn.glang.GList controllers -> Vwcd
    org.cyberpwn.gconcurrent.ParallelPoolManager pp -> gFOs
    surge.server.CoreTickThread ctt -> kknQ
    23:49:void <init>() -> <init>
    void doScan() -> XSEy
    long getNanoSync() -> FVcd
    int getThreadCount() -> getThreadCount
    60:65:void onLoad() -> onLoad
    70:79:void onEnable() -> onEnable
    84:94:void onDisable() -> onDisable
    99:99:org.cyberpwn.glang.GList getControllers() -> Fovu
    105:106:void registerController(surge.control.IController) -> STOt
    111:122:void onTick() -> UQjY
    127:127:java.lang.String getTickName() -> oDbo
    133:133:org.cyberpwn.gconcurrent.ParallelPoolManager getThreadPool() -> aDPq
    void onControllerRegistry() -> lwSe
    void onStart(surge.util.Protocol) -> STOt
    void onStop() -> GYgI
    void onPostInit() -> NEId
    void onPreInit() -> MlYy
surge.control.AmpedPlugin$1 -> DXmN$1:
    surge.control.AmpedPlugin this$0 -> uNxB
    1:37:void <init>(surge.control.AmpedPlugin,java.lang.String,int,org.cyberpwn.gconcurrent.QueueMode) -> <init>
    42:42:long getNanoGate() -> MImh
surge.control.Control -> biTf:
surge.control.Controller -> WWsD:
    7:10:void <init>() -> <init>
surge.control.Disable -> dLvb:
surge.control.Enable -> Raub:
surge.control.IController -> inIP:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
surge.control.Instance -> Wqeb:
surge.control.Plugin -> UcRM:
surge.control.SurgePlugin -> miWM:
    void onStart(surge.util.Protocol) -> STOt
    void onStop() -> GYgI
    void onPostInit() -> NEId
    void onPreInit() -> MlYy
    void onControllerRegistry() -> lwSe
    void registerController(surge.control.IController) -> STOt
    org.cyberpwn.glang.GList getControllers() -> Fovu
    org.cyberpwn.gconcurrent.ParallelPoolManager getThreadPool() -> aDPq
surge.hotload.HotloadManager -> LOfD:
    org.cyberpwn.glang.GMap filemods -> loQr
    org.cyberpwn.glang.GMap filesizes -> cAtL
    org.cyberpwn.glang.GMap fileacts -> cBUJ
    16:21:void <init>() -> <init>
    25:29:void track(java.io.File,java.lang.Runnable) -> STOt
    33:36:void untrack(java.io.File) -> UITd
    40:43:void untrackall() -> FMtU
    48:72:void onTick() -> UQjY
    77:77:java.lang.String getTickName() -> oDbo
surge.nms.NMSClass -> MIxB:
    boolean init -> ccwJ
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> jyop
    java.lang.Class IChatBaseComponent -> Qpgh
    java.lang.Class ChatSerializer -> QNdh
    java.lang.Class PacketPlayOutPlayerInfo -> htKX
    java.lang.Class PlayerInfoData -> IXPI
    java.lang.Class EnumPlayerInfoAction -> hjyQ
    java.lang.Class GameProfile -> rpfa
    java.lang.Class EnumGamemode -> oEYd
    java.lang.Class TileEntitySkull -> EnGS
    java.lang.Class LoadingCache -> OYaG
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
surge.nms.NMSX -> SBxM:
    surge.nms.NMSX bountifulAPI -> Tyqj
    boolean useOldMethods -> HTlU
    java.lang.String nmsver -> KLsm
    java.lang.Object eTimes -> XJiH
    java.lang.Object eTitle -> UlTM
    java.lang.Object eSubtitle -> RtME
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> STOt
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> yAYY
    75:89:java.lang.Class getCBClass(java.lang.String) -> VfJS
    96:104:java.lang.Object serializeChat(java.lang.String) -> wUFM
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> STOt
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> STOt
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> YwnQ
    151:151:java.lang.String craftPackage() -> wUQk
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> STOt
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> STOt
    197:207:java.lang.Class getNMSClass(java.lang.String) -> ktFc
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> STOt
    279:280:void clearTitle(org.bukkit.entity.Player) -> VCgW
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> STOt
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> STOt
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> STOt
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> KThV
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> EmKE
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> MImh
    434:447:int ping(org.bukkit.entity.Player) -> WGKY
surge.nms.NMSX$1 -> SBxM$1:
    org.bukkit.entity.Player val$player -> cSYY
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
surge.nms.NMSX$2 -> SBxM$2:
    org.bukkit.entity.Player val$player -> cSYY
    java.lang.String val$message -> wnsd
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
surge.nms.PacketUtil -> hkHw:
    6:6:void <init>() -> <init>
    20:45:surge.nms.PacketUtil$V getVersion() -> rWDC
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> STOt
    68:82:void clearTitle(org.bukkit.entity.Player) -> VCgW
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> STOt
surge.nms.PacketUtil$V -> hkHw$STOt:
    surge.nms.PacketUtil$V R17 -> SwMk
    surge.nms.PacketUtil$V R18 -> QyXP
    surge.nms.PacketUtil$V R19 -> FWVL
    surge.nms.PacketUtil$V R111 -> FWUl
    surge.nms.PacketUtil$V R110 -> fTPf
    surge.nms.PacketUtil$V R112 -> dNKF
    surge.nms.PacketUtil$V[] ENUM$VALUES -> bqwM
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:surge.nms.PacketUtil$V[] values() -> values
    1:1:surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
surge.nms.Title -> cRhF:
    java.lang.String title -> title
    java.lang.String subTitle -> EnFI
    java.lang.String action -> action
    java.lang.Integer fadeIn -> pbOW
    java.lang.Integer fadeOut -> XBWT
    java.lang.Integer stayTime -> oDwb
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> OrWq
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> OHNl
    79:80:void setSubTitle(java.lang.String) -> LXKt
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> TONE
    99:100:void setFadeIn(java.lang.Integer) -> STOt
    104:104:java.lang.Integer getFadeOut() -> xyvc
    109:110:void setFadeOut(java.lang.Integer) -> fdWf
    114:114:java.lang.Integer getStayTime() -> XSIl
    119:120:void setStayTime(java.lang.Integer) -> RanD
surge.nms.VersionBukkit -> TpoW:
    surge.nms.VersionBukkit VU -> Vfdq
    surge.nms.VersionBukkit V7 -> wUaR
    surge.nms.VersionBukkit V8 -> hsiF
    surge.nms.VersionBukkit V9 -> xOsH
    surge.nms.VersionBukkit V11 -> lUbB
    surge.nms.VersionBukkit V111 -> antX
    surge.nms.VersionBukkit V112 -> stMB
    surge.nms.VersionBukkit[] ENUM$VALUES -> GAJU
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> NfnH
    27:32:boolean uc() -> BtlB
    37:67:surge.nms.VersionBukkit get() -> rpVE
    1:1:surge.nms.VersionBukkit[] values() -> values
    1:1:surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
surge.sched.IBursterator -> nkyS:
    void burst(java.lang.Object) -> LFjh
    void setTimeLock(double) -> LFjh
    double getEstimatedTimeUse() -> cuKm
    int flush() -> jpnR
    int flush(org.cyberpwn.gbench.Profiler) -> STOt
    void queue(java.lang.Object) -> VDGm
    void queue(java.util.List) -> RanD
    void queue(java.lang.Object[]) -> STOt
surge.sched.ICancellable -> EmUQ:
    void cancel() -> cancel
surge.sched.IMasterTickComponent -> rEbA:
    void onTick() -> UQjY
    java.lang.String getTickName() -> oDbo
surge.sched.ITask -> dVKb:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> imkT
    java.lang.String getName() -> getName
    double getComputeTime() -> YVLd
    double getTotalComputeTime() -> nRgQ
    double getActiveTime() -> cJXD
    boolean hasCompleted() -> kkaN
surge.sched.Task -> Fovu:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> BAyt
    double computeTime -> vBAQ
    double totalComputeTime -> fnFy
    double activeTime -> Mlmx
    boolean completed -> completed
    org.cyberpwn.gbench.Profiler profiler -> qnGD
    org.cyberpwn.gbench.Profiler activeProfiler -> SvqE
    int ticks -> HfPe
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> UITd
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> imkT
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> YVLd
    150:150:boolean hasCompleted() -> kkaN
    156:156:double getTotalComputeTime() -> nRgQ
    162:162:double getActiveTime() -> cJXD
    17:17:org.cyberpwn.gbench.Profiler access$0(surge.sched.Task) -> STOt
    15:15:void access$1(surge.sched.Task,boolean) -> STOt
    16:16:org.cyberpwn.gbench.Profiler access$2(surge.sched.Task) -> fdWf
    14:14:void access$3(surge.sched.Task,double) -> STOt
    12:12:void access$4(surge.sched.Task,double) -> fdWf
    14:14:double access$5(surge.sched.Task) -> RanD
    13:13:void access$6(surge.sched.Task,double) -> RanD
    13:13:double access$7(surge.sched.Task) -> UITd
    12:12:double access$8(surge.sched.Task) -> EmKE
surge.sched.Task$1 -> Fovu$1:
    surge.sched.Task this$0 -> ivoG
    1:25:void <init>(surge.sched.Task) -> <init>
    30:40:void run() -> run
surge.sched.Task$2 -> Fovu$2:
    surge.sched.Task this$0 -> ivoG
    1:49:void <init>(surge.sched.Task) -> <init>
    54:65:void run() -> run
surge.sched.Task$3 -> Fovu$3:
    surge.sched.Task this$0 -> ivoG
    int val$total -> PTVE
    1:74:void <init>(surge.sched.Task,int) -> <init>
    79:95:void run() -> run
surge.sched.TaskManager -> aDPq:
    org.cyberpwn.glang.GList tasks -> TaBe
    org.cyberpwn.glang.GMap taskProfiles -> ifNW
    11:15:void <init>() -> <init>
    20:30:void onTick() -> UQjY
    34:35:void putFinishingTask(surge.sched.ITask) -> STOt
    39:48:void putTask(surge.sched.ITask) -> fdWf
    53:53:java.lang.String getTickName() -> oDbo
surge.sched.TaskProfile -> FMtU:
    double activeTime -> Mlmx
    double computeTickTime -> ghYA
    double computeTime -> vBAQ
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> cJXD
    23:24:void setActiveTime(double) -> VDGm
    28:28:double getComputeTickTime() -> Ahxp
    33:34:void setComputeTickTime(double) -> HSqD
    38:38:double getComputeTime() -> YVLd
    43:44:void setComputeTime(double) -> gEWi
surge.server.AsyncTick -> YwnQ:
surge.server.CPS -> wUQk:
    org.cyberpwn.glang.GMap keys -> bijU
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:org.cyberpwn.glang.GList identify(java.lang.String) -> miJx
    46:99:void scan() -> nSFr
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> RanD
surge.server.CoreTickThread -> rWDC:
    9:12:void <init>() -> <init>
    17:36:void run() -> run
surge.server.MemoryMonitor -> OHNl:
    long memoryFree -> Pmge
    long memoryUsed -> iTlP
    long memoryMax -> TWoO
    long lastMemoryUsed -> wLrN
    long memoryUsedAfterGC -> rODy
    long allocated -> ryYD
    long collected -> qeSr
    long collections -> Drsm
    long sms -> RYya
    long memoryAllocatedPerTick -> wEBq
    long memoryCollectedPerTick -> FVvs
    long memoryFullyAllocatedPerTick -> YyAh
    long mah -> HwQQ
    long mahs -> dMkc
    22:39:void <init>() -> <init>
    void onAllocationSet() -> CUlw
    46:93:void run() -> run
    97:97:long getMemoryFree() -> YwmX
    102:102:long getMemoryUsed() -> getMemoryUsed
    107:107:long getMemoryMax() -> pjNd
    112:112:long getLastMemoryUsed() -> tKgA
    117:117:long getMemoryUsedAfterGC() -> WPEX
    122:122:long getAllocated() -> getAllocated
    127:127:long getCollected() -> CEMD
    132:132:long getCollections() -> SKhQ
    137:137:long getSms() -> MRhR
    142:142:long getMemoryAllocatedPerTick() -> VfSf
    147:147:long getMemoryCollectedPerTick() -> fmRf
    152:152:long getMemoryFullyAllocatedPerTick() -> savF
    157:157:long getMah() -> JAOF
    162:162:long getMahs() -> ytiE
surge.server.SuperSampler -> TONE:
    org.cyberpwn.gmath.Average ticksPerSecondL -> urAQ
    org.cyberpwn.gmath.Average tickTimeL -> KoXl
    org.cyberpwn.gmath.Average mahL -> mYGd
    double ticksPerSecond -> VDGm
    double ticksPerSecondRaw -> lxGj
    double tickTime -> CWBl
    double tickTimeRaw -> aUgb
    boolean running -> running
    boolean frozen -> PSnY
    double tickUtilizationRaw -> ekEk
    double tickUtilization -> mYJr
    double leftoverTickTime -> OHbl
    long memoryUse -> Vwjw
    long memoryAllocated -> nJkg
    long memoryCollected -> KLxE
    long mahs -> dMkc
    int totalChunks -> rqLH
    int totalEntities -> LYLl
    int totalDrops -> vtel
    int totalTiles -> aMWj
    int totalLiving -> IGSF
    int chunksLoaded -> dWBG
    int chunksUnloaded -> lwih
    surge.server.WorldMonitor worldMonitor -> MmRN
    surge.server.TPSMonitor tpsMonitor -> ktgI
    surge.server.MemoryMonitor memoryMonitor -> vAbA
    java.lang.StackTraceElement[] lockStack -> HClr
    org.cyberpwn.glang.GMap spikes -> NpJm
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> UQjY
    154:154:java.lang.String getTickName() -> oDbo
    159:159:org.cyberpwn.gmath.Average getTicksPerSecondL() -> UANY
    164:164:double getTicksPerSecond() -> SCNB
    169:169:double getTicksPerSecondRaw() -> hPsl
    174:174:boolean isRunning() -> isRunning
    179:179:surge.server.TPSMonitor getTpsMonitor() -> VTrO
    184:184:org.cyberpwn.gmath.Average getTickTimeL() -> PKQR
    189:189:double getTickTime() -> ssXG
    194:194:double getTickTimeRaw() -> VwUg
    199:199:double getTickUtilizationRaw() -> LOdy
    204:204:double getTickUtilization() -> OsAx
    209:209:double getLeftoverTickTime() -> NxQl
    214:214:surge.server.MemoryMonitor getMemoryMonitor() -> NxRN
    219:219:long getMemoryUse() -> OHPX
    224:224:long getMemoryAllocated() -> UJBM
    229:229:long getMemoryCollected() -> OYQu
    234:234:org.cyberpwn.gmath.Average getMahL() -> RPyC
    239:239:long getMahs() -> ytiE
    244:244:int getTotalChunks() -> NDla
    249:249:int getTotalEntities() -> XtnO
    254:254:int getTotalDrops() -> ArKd
    259:259:int getTotalTiles() -> xXVd
    264:264:int getTotalLiving() -> EmXK
    269:269:surge.server.WorldMonitor getWorldMonitor() -> WFuQ
    274:274:int getChunksLoaded() -> aCps
    279:279:int getChunksUnloaded() -> VLcQ
    284:285:void setTicksPerSecondL(org.cyberpwn.gmath.Average) -> STOt
    289:290:void setTickTimeL(org.cyberpwn.gmath.Average) -> fdWf
    294:295:void setMahL(org.cyberpwn.gmath.Average) -> RanD
    299:300:void setTicksPerSecond(double) -> fdWf
    304:305:void setTicksPerSecondRaw(double) -> SCNB
    309:310:void setTickTime(double) -> EKFb
    314:315:void setTickTimeRaw(double) -> CMRe
    319:320:void setRunning(boolean) -> PBUy
    324:325:void setTickUtilizationRaw(double) -> PBUD
    329:330:void setTickUtilization(double) -> MkoR
    334:335:void setLeftoverTickTime(double) -> KDFr
    339:340:void setMemoryUse(long) -> OrWq
    344:345:void setMemoryAllocated(long) -> paSp
    349:350:void setMemoryCollected(long) -> flhL
    354:355:void setMahs(long) -> pGaY
    359:360:void setTotalChunks(int) -> KThV
    364:365:void setTotalEntities(int) -> LXKt
    369:370:void setTotalDrops(int) -> miJx
    374:375:void setTotalTiles(int) -> OrVo
    379:380:void setTotalLiving(int) -> yQyd
    384:385:void setChunksLoaded(int) -> fRsw
    389:390:void setChunksUnloaded(int) -> RPnV
    394:395:void setWorldMonitor(surge.server.WorldMonitor) -> STOt
    399:400:void setTpsMonitor(surge.server.TPSMonitor) -> STOt
    404:405:void setMemoryMonitor(surge.server.MemoryMonitor) -> STOt
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> Cfnx
    419:419:org.cyberpwn.glang.GMap getSpikes() -> uplO
    31:31:void access$0(surge.server.SuperSampler,int) -> STOt
    33:33:void access$1(surge.server.SuperSampler,int) -> fdWf
    34:34:void access$2(surge.server.SuperSampler,int) -> RanD
    32:32:void access$3(surge.server.SuperSampler,int) -> UITd
    35:35:void access$4(surge.server.SuperSampler,int) -> EmKE
    36:36:void access$5(surge.server.SuperSampler,int) -> RsPS
    37:37:void access$6(surge.server.SuperSampler,int) -> GrpS
    19:19:void access$7(surge.server.SuperSampler,double) -> STOt
    21:21:void access$8(surge.server.SuperSampler,double) -> fdWf
    15:15:org.cyberpwn.gmath.Average access$9(surge.server.SuperSampler) -> STOt
    19:19:double access$10(surge.server.SuperSampler) -> fdWf
    16:16:org.cyberpwn.gmath.Average access$11(surge.server.SuperSampler) -> RanD
    21:21:double access$12(surge.server.SuperSampler) -> UITd
    18:18:void access$13(surge.server.SuperSampler,double) -> RanD
    20:20:void access$14(surge.server.SuperSampler,double) -> UITd
    24:24:void access$15(surge.server.SuperSampler,double) -> EmKE
    20:20:double access$16(surge.server.SuperSampler) -> EmKE
    25:25:void access$17(surge.server.SuperSampler,double) -> RsPS
    25:25:double access$18(surge.server.SuperSampler) -> RsPS
    26:26:void access$19(surge.server.SuperSampler,double) -> GrpS
    23:23:void access$20(surge.server.SuperSampler,boolean) -> STOt
    42:42:org.cyberpwn.glang.GMap access$21(surge.server.SuperSampler) -> GrpS
    27:27:void access$22(surge.server.SuperSampler,long) -> STOt
    28:28:void access$23(surge.server.SuperSampler,long) -> fdWf
    29:29:void access$24(surge.server.SuperSampler,long) -> RanD
    17:17:org.cyberpwn.gmath.Average access$25(surge.server.SuperSampler) -> ofad
    30:30:void access$26(surge.server.SuperSampler,long) -> UITd
surge.server.SuperSampler$1 -> TONE$1:
    surge.server.SuperSampler this$0 -> PLEj
    1:71:void <init>(surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> STOt
surge.server.SuperSampler$2 -> TONE$2:
    surge.server.SuperSampler this$0 -> PLEj
    1:86:void <init>(surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> fSaU
    106:107:void onSpike() -> WWwP
surge.server.SuperSampler$3 -> TONE$3:
    surge.server.SuperSampler this$0 -> PLEj
    1:110:void <init>(surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> CUlw
surge.server.TPSMonitor -> xyvc:
    double tickTimeMS -> Oasa
    double rawTicksPerSecond -> xXgx
    org.cyberpwn.gbench.Profiler tickProfiler -> esTm
    org.cyberpwn.gbench.Profiler tickTimeProfiler -> eQQk
    boolean ticked -> NWAe
    java.lang.Thread$State lastState -> Qgyo
    double actualTickTimeMS -> clmh
    double ltt -> QpkY
    long lastTick -> rqJd
    boolean frozen -> PSnY
    java.lang.StackTraceElement[] lockedStack -> VxKN
    22:38:void <init>() -> <init>
    void onTicked() -> fSaU
    void onSpike() -> WWwP
    47:103:void run() -> run
    107:135:void processState(java.lang.Thread$State) -> STOt
    139:139:double getTickTimeMS() -> VUTp
    144:144:double getRawTicksPerSecond() -> bqiW
    149:149:org.cyberpwn.gbench.Profiler getTickProfiler() -> LhyN
    154:154:boolean isTicked() -> PvFs
    159:160:void markTick() -> ESdL
    164:164:org.cyberpwn.gbench.Profiler getTickTimeProfiler() -> hPvU
    169:169:java.lang.Thread$State getLastState() -> bhxK
    174:174:double getActualTickTimeMS() -> YxPa
    179:179:double getLtt() -> EmVh
    184:184:long getLastTick() -> VCqw
    189:189:boolean isFrozen() -> isFrozen
    194:194:java.lang.StackTraceElement[] getLockedStack() -> FWGs
surge.server.WorldMonitor -> XSIl:
    boolean chunksChanged -> HoCH
    boolean dropChanged -> aoXm
    boolean tileChanged -> bPXl
    boolean livingChanged -> rVvW
    boolean totalChanged -> HDOH
    boolean updated -> Oruc
    int totalChunks -> rqLH
    int totalDrops -> vtel
    int totalTiles -> aMWj
    int totalLiving -> IGSF
    int totalEntities -> LYLl
    int chunksLoaded -> dWBG
    int chunksUnloaded -> lwih
    long ms -> fmRf
    25:44:void <init>() -> <init>
    49:64:void run() -> run
    void updated(int,int,int,int,int,int,int) -> STOt
    71:76:void on(org.bukkit.event.world.ChunkLoadEvent) -> STOt
    81:86:void on(org.bukkit.event.world.ChunkUnloadEvent) -> STOt
    91:92:void on(org.bukkit.event.entity.EntitySpawnEvent) -> STOt
    97:98:void on(org.bukkit.event.entity.EntityDeathEvent) -> STOt
    103:104:void on(org.bukkit.event.player.PlayerDropItemEvent) -> STOt
    109:110:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> STOt
    115:116:void on(org.bukkit.event.entity.EntityPickupItemEvent) -> STOt
    121:122:void on(org.bukkit.event.block.BlockPlaceEvent) -> STOt
    127:128:void on(org.bukkit.event.block.BlockBreakEvent) -> STOt
    132:133:void doUpdate() -> mFsf
    137:188:void sample() -> PJjl
    192:198:void sampleTotalCount() -> ooaU
    202:208:void sampleLivingCount() -> Kvyp
    212:221:void sampleTileCount() -> eXrJ
    225:231:void sampleDropCount() -> UbuW
    235:241:void sampleChunkCount() -> RkOD
surge.text.PhantomSpinner -> NfnH:
    surge.text.ProgressSpinner s -> PvYc
    surge.text.ProgressSpinner c -> JJTn
    15:19:void <init>(surge.util.C,surge.util.C,surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
surge.text.ProgressSpinner -> BtlB:
    java.lang.String[] chars -> YpSR
    int index -> index
    surge.text.ProgressSpinner DEFAULT -> DsWe
    surge.text.ProgressSpinner NETWORK -> PLGC
    surge.text.ProgressSpinner CIRCLES -> hlAN
    surge.text.ProgressSpinner RANDOMS -> AYOV
    surge.text.ProgressSpinner MERGERS -> FOLc
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> wMEl
    65:65:int getIndex() -> getIndex
surge.util.Anchor -> rpVE:
    int value() -> value
surge.util.Area -> cuKm:
    org.bukkit.Location location -> BKQB
    java.lang.Double radius -> fTXT
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> STOt
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:surge.util.Cuboid toCuboid() -> rgiR
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> EmKE
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> RsPS
    109:109:boolean isWithin(org.bukkit.Location) -> GrpS
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> UITd
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> STOt
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> DQDb
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> opBY
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> ofad
    257:257:java.lang.Double getRadius() -> aTub
    268:269:void setRadius(java.lang.Double) -> fdWf
    278:283:org.bukkit.Location random() -> yuOJ
surge.util.Axis -> jpnR:
    surge.util.Axis X -> WYNL
    surge.util.Axis Y -> Jchw
    surge.util.Axis Z -> sQmJ
    int x -> x
    int y -> y
    int z -> z
    surge.util.Axis[] ENUM$VALUES -> fdwy
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> bFwp
    29:29:org.bukkit.util.Vector negative() -> YxSq
    1:1:surge.util.Axis[] values() -> values
    1:1:surge.util.Axis valueOf(java.lang.String) -> valueOf
surge.util.BlastResistance -> imkT:
    surge.util.BlastResistance BARRIER -> slAB
    surge.util.BlastResistance BEDROCK -> MJpR
    surge.util.BlastResistance COMMAND -> scOG
    surge.util.BlastResistance ENDER_PORTAL -> dWCc
    surge.util.BlastResistance ENDER_PORTAL_FRAME -> iDPC
    surge.util.BlastResistance ANVIL -> CowJ
    surge.util.BlastResistance ENCHANTMENT_TABLE -> uWqf
    surge.util.BlastResistance OBSIDIAN -> DQVK
    surge.util.BlastResistance ENDER_CHEST -> pjeb
    surge.util.BlastResistance WATER -> pQSb
    surge.util.BlastResistance LAVA -> dMpP
    surge.util.BlastResistance STATIONARY_WATER -> Jtic
    surge.util.BlastResistance DRAGON_EGG -> QOJm
    surge.util.BlastResistance ENDER_STONE -> DQVQ
    surge.util.BlastResistance COAL_BLOCK -> AXoO
    surge.util.BlastResistance DIAMOND_BLOCK -> Xuag
    surge.util.BlastResistance EMERALD_BLOCK -> YVbG
    surge.util.BlastResistance GOLD_BLOCK -> jhtT
    surge.util.BlastResistance IRON_BLOCK -> vJSe
    surge.util.BlastResistance REDSTONE_BLOCK -> NxfP
    surge.util.BlastResistance BRICK -> nloS
    surge.util.BlastResistance BRICK_STAIRS -> kkvY
    surge.util.BlastResistance HARD_CLAY -> vRdO
    surge.util.BlastResistance STONE -> Pdxu
    surge.util.BlastResistance SMOOTH_BRICK -> Xlpm
    surge.util.BlastResistance SMOOTH_STAIRS -> DbXT
    surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> JIvP
    surge.util.BlastResistance STONE_SLAB2 -> GAMp
    surge.util.BlastResistance IRON_DOOR -> HTrD
    surge.util.BlastResistance IRON_DOOR_BLOCK -> JciM
    surge.util.BlastResistance IRON_TRAPDOOR -> ydan
    surge.util.BlastResistance MOB_SPAWNER -> uhux
    surge.util.BlastResistance WEB -> PnMv
    surge.util.BlastResistance DISPENSER -> BufP
    surge.util.BlastResistance DROPPER -> vAfP
    surge.util.BlastResistance FURNACE -> TXWW
    surge.util.BlastResistance BURNING_FURNACE -> FybT
    surge.util.BlastResistance BEACON -> YFEG
    surge.util.BlastResistance COAL_ORE -> Oryy
    surge.util.BlastResistance COCOA -> tCqA
    surge.util.BlastResistance DIAMOND_ORE -> fKiG
    surge.util.BlastResistance EMERALD_ORE -> xioS
    surge.util.BlastResistance FENCE -> dgfD
    surge.util.BlastResistance FENCE_GATE -> WYQJ
    surge.util.BlastResistance ACACIA_FENCE_GATE -> pkHp
    surge.util.BlastResistance BIRCH_FENCE_GATE -> kAfY
    surge.util.BlastResistance DARK_OAK_FENCE_GATE -> SMEF
    surge.util.BlastResistance SPRUCE_FENCE_GATE -> Iqhc
    surge.util.BlastResistance JUNGLE_FENCE_GATE -> oNSK
    surge.util.BlastResistance ACACIA_FENCE -> pYfM
    surge.util.BlastResistance BIRCH_FENCE -> LbAL
    surge.util.BlastResistance DARK_OAK_FENCE -> axOC
    surge.util.BlastResistance SPRUCE_FENCE -> dNSM
    surge.util.BlastResistance JUNGLE_FENCE -> wVKF
    surge.util.BlastResistance ACACIA_WOOD_STAIRS -> uXUM
    surge.util.BlastResistance BIRCH_WOOD_STAIRS -> ePuK
    surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> neAl
    surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> neBK
    surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> MTCL
    surge.util.BlastResistance QUARTZ_STAIRS -> DkJw
    surge.util.BlastResistance COBBLESTONE_STAIRS -> fSxd
    surge.util.BlastResistance SANDSTONE_STAIRS -> WXoL
    surge.util.BlastResistance NETHER_BRICK_STAIRS -> TFtR
    surge.util.BlastResistance WOOD_STAIRS -> BScT
    surge.util.BlastResistance RED_SANDSTONE_STAIRS -> YFCl
    surge.util.BlastResistance ACACIA_DOOR -> KwrI
    surge.util.BlastResistance BIRCH_DOOR -> cKRw
    surge.util.BlastResistance DARK_OAK_DOOR -> wfnQ
    surge.util.BlastResistance SPRUCE_DOOR -> GtVn
    surge.util.BlastResistance JUNGLE_DOOR -> oWFw
    surge.util.BlastResistance GOLD_ORE -> yJpr
    surge.util.BlastResistance HOPPER -> qnOK
    surge.util.BlastResistance IRON_ORE -> rNmi
    surge.util.BlastResistance LAPIS_BLOCK -> uOgH
    surge.util.BlastResistance LAPIS_ORE -> vckW
    surge.util.BlastResistance QUARTZ_ORE -> bQBO
    surge.util.BlastResistance REDSTONE_ORE -> sAPH
    surge.util.BlastResistance TRAP_DOOR -> ssrs
    surge.util.BlastResistance WOOD -> LGqP
    surge.util.BlastResistance CHEST -> pQYE
    surge.util.BlastResistance TRAPPED_CHEST -> XeFl
    surge.util.BlastResistance WORKBENCH -> CEeg
    surge.util.BlastResistance CAULDRON -> IaKq
    surge.util.BlastResistance LOG -> oMuE
    surge.util.BlastResistance LOG_2 -> AHQJ
    surge.util.BlastResistance BOOKSHELF -> iDSg
    surge.util.BlastResistance BANNER -> lgOF
    surge.util.BlastResistance STANDING_BANNER -> FNoG
    surge.util.BlastResistance WALL_BANNER -> VUmX
    surge.util.BlastResistance JACK_O_LANTERN -> PmnU
    surge.util.BlastResistance MELON_BLOCK -> dMtS
    surge.util.BlastResistance SKULL -> xion
    surge.util.BlastResistance PUMPKIN -> VDku
    surge.util.BlastResistance SIGN -> SnhD
    surge.util.BlastResistance SIGN_POST -> MvGt
    surge.util.BlastResistance WALL_SIGN -> dNUf
    surge.util.BlastResistance QUARTZ_BLOCK -> Waav
    surge.util.BlastResistance NOTE_BLOCK -> WjRp
    surge.util.BlastResistance RED_SANDSTONE -> HLdy
    surge.util.BlastResistance SANDSTONE -> AjTq
    surge.util.BlastResistance WOOL -> EKla
    surge.util.BlastResistance MONSTER_EGG -> Yowr
    surge.util.BlastResistance RAILS -> iTrq
    surge.util.BlastResistance ACTIVATOR_RAIL -> vcjH
    surge.util.BlastResistance DETECTOR_RAIL -> eYiH
    surge.util.BlastResistance POWERED_RAIL -> jOel
    surge.util.BlastResistance CLAY -> vSIT
    surge.util.BlastResistance DIRT -> TrLF
    surge.util.BlastResistance GRASS -> toFT
    surge.util.BlastResistance GRAVEL -> OHjv
    surge.util.BlastResistance SPONGE -> ghbr
    surge.util.BlastResistance BREWING_STAND -> dMvy
    surge.util.BlastResistance STONE_BUTTON -> macc
    surge.util.BlastResistance WOOD_BUTTON -> MmYe
    surge.util.BlastResistance CAKE_BLOCK -> AXtT
    surge.util.BlastResistance ICE -> afpl
    surge.util.BlastResistance PACKED_ICE -> rycv
    surge.util.BlastResistance LEVER -> CxnJ
    surge.util.BlastResistance MYCEL -> msFG
    surge.util.BlastResistance PISTON_BASE -> tvyD
    surge.util.BlastResistance PISTON_EXTENSION -> PKoM
    surge.util.BlastResistance PISTON_MOVING_PIECE -> apCe
    surge.util.BlastResistance PISTON_STICKY_BASE -> jaKE
    surge.util.BlastResistance GOLD_PLATE -> EnQk
    surge.util.BlastResistance IRON_PLATE -> Ngiv
    surge.util.BlastResistance STONE_PLATE -> jaKK
    surge.util.BlastResistance WOOD_PLATE -> aDls
    surge.util.BlastResistance SAND -> NNXd
    surge.util.BlastResistance SOUL_SAND -> gprb
    surge.util.BlastResistance CACTUS -> ceGG
    surge.util.BlastResistance LADDER -> KNAK
    surge.util.BlastResistance NETHERRACK -> xjRw
    surge.util.BlastResistance GLASS -> rycV
    surge.util.BlastResistance THIN_GLASS -> DIKv
    surge.util.BlastResistance STAINED_GLASS -> wDlE
    surge.util.BlastResistance STAINED_GLASS_PANE -> QyeP
    surge.util.BlastResistance GLOWSTONE -> MeHb
    surge.util.BlastResistance REDSTONE_LAMP_OFF -> oxil
    surge.util.BlastResistance REDSTONE_LAMP_ON -> MKVU
    surge.util.BlastResistance SEA_LANTERN -> PwCY
    surge.util.BlastResistance BED_BLOCK -> YNXW
    surge.util.BlastResistance DAYLIGHT_DETECTOR -> ejkx
    surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> GcVx
    surge.util.BlastResistance HUGE_MUSHROOM_1 -> XBgF
    surge.util.BlastResistance HUGE_MUSHROOM_2 -> BulW
    surge.util.BlastResistance LEAVES -> Tqnu
    surge.util.BlastResistance LEAVES_2 -> VpFX
    surge.util.BlastResistance SNOW -> wfrT
    int br -> yBdk
    surge.util.BlastResistance[] ENUM$VALUES -> ELRT
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> kJBi
    175:190:int get(org.bukkit.Material) -> STOt
    1:1:surge.util.BlastResistance[] values() -> values
    1:1:surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
surge.util.Blocks -> YVLd:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> RanD
surge.util.C -> nRgQ:
    surge.util.C BLACK -> XTHl
    surge.util.C DARK_BLUE -> LsIl
    surge.util.C DARK_GREEN -> WrhS
    surge.util.C DARK_AQUA -> oFHt
    surge.util.C DARK_RED -> vBMG
    surge.util.C DARK_PURPLE -> bagG
    surge.util.C GOLD -> urMt
    surge.util.C GRAY -> xXsV
    surge.util.C DARK_GRAY -> riDp
    surge.util.C BLUE -> qmqX
    surge.util.C GREEN -> Xukl
    surge.util.C AQUA -> ssxC
    surge.util.C RED -> hsxY
    surge.util.C LIGHT_PURPLE -> CWMx
    surge.util.C YELLOW -> Cgli
    surge.util.C WHITE -> BvMu
    surge.util.C MAGIC -> TqnU
    surge.util.C BOLD -> SCvf
    surge.util.C STRIKETHROUGH -> bYUI
    surge.util.C UNDERLINE -> MTHd
    surge.util.C ITALIC -> Bull
    surge.util.C RESET -> cTFu
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> cTHU
    char code -> apER
    boolean isFormat -> jPJg
    java.lang.String toString -> XTIH
    java.util.Map BY_ID -> BvMe
    java.util.Map BY_CHAR -> stVx
    java.util.Map dyeChatMap -> wxRs
    java.util.Map chatHexMap -> JSQC
    java.util.Map dyeHexMap -> nvIj
    int[] $SWITCH_TABLE$surge$util$C -> NMyy
    surge.util.C[] ENUM$VALUES -> OsaV
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> ryKQ
    378:378:java.lang.String hex() -> TORT
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:surge.util.C getByChar(char) -> ofad
    434:442:surge.util.C getByChar(java.lang.String) -> OrVo
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:surge.util.C dyeToChat(org.bukkit.DyeColor) -> fdWf
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> STOt
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> fdWf
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> RanD
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> yQyd
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> fRsw
    560:578:java.lang.String generateColorTable() -> URTs
    588:588:org.bukkit.ChatColor chatColor() -> hjjx
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:surge.util.C fromItemMeta(byte) -> STOt
    632:679:byte getItemMeta() -> EdgL
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:surge.util.C[] values() -> values
    1:1:surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> ryJS
surge.util.C$1 -> nRgQ$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$10 -> nRgQ$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$11 -> nRgQ$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$12 -> nRgQ$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$13 -> nRgQ$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$14 -> nRgQ$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$15 -> nRgQ$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$16 -> nRgQ$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$17 -> nRgQ$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$18 -> nRgQ$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$19 -> nRgQ$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$2 -> nRgQ$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$20 -> nRgQ$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$21 -> nRgQ$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$22 -> nRgQ$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$3 -> nRgQ$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$4 -> nRgQ$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$5 -> nRgQ$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$6 -> nRgQ$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$7 -> nRgQ$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$8 -> nRgQ$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$9 -> nRgQ$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.CDou -> cJXD:
    double number -> hIfv
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:surge.util.CDou set(double) -> JISy
    23:25:surge.util.CDou add(double) -> hakj
    30:32:surge.util.CDou sub(double) -> jgrN
    37:37:double get() -> get
    42:48:void circ() -> OHPy
surge.util.CMD -> kkaN:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> MTKi
    25:30:void <init>(java.lang.String) -> <init>
    39:40:surge.util.CMD virtual() -> CxTG
    51:53:void execute(org.bukkit.command.CommandSender) -> RanD
    60:77:void execute() -> execute
surge.util.CNum -> Ahxp:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:surge.util.CNum set(int) -> oVBn
    23:25:surge.util.CNum add(int) -> eqvw
    30:32:surge.util.CNum sub(int) -> ooUF
    37:37:int get() -> get
    42:48:void circ() -> OHPy
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> lThw
surge.util.Chunks -> nSFr:
    12:12:void <init>() -> <init>
    23:23:org.cyberpwn.glang.GList getLoadedChunks(org.bukkit.World) -> UITd
    33:40:org.cyberpwn.glang.GList getLoadedChunks() -> yAhR
    54:54:org.cyberpwn.glang.GList getRadius(org.bukkit.Chunk,int) -> fdWf
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> STOt
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> STOt
    98:98:boolean unload(org.bukkit.Chunk) -> VvkR
    114:124:int unload(org.cyberpwn.glang.GList,boolean,boolean) -> STOt
    138:138:int unload(org.cyberpwn.glang.GList,boolean) -> STOt
    150:150:int unload(org.cyberpwn.glang.GList) -> GrpS
    166:166:boolean isLoaded(java.lang.String,int,int) -> STOt
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> fdWf
    201:205:void load(org.cyberpwn.glang.GList) -> ofad
surge.util.Cuboid -> CUlw:
    java.lang.String worldName -> wVSi
    int x1 -> YgoJ
    int y1 -> mbHc
    int z1 -> dxof
    int x2 -> lofW
    int y2 -> RRYd
    int z2 -> qKqQ
    int[] $SWITCH_TABLE$surge$util$Axis -> xHTk
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> BvOJ
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(surge.util.Axis) -> STOt
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> RanD
    93:93:boolean hasPlayers() -> IGAS
    98:110:org.cyberpwn.glang.GList getPlayers() -> tLBv
    115:166:org.cyberpwn.glang.GList getEntities() -> UtWS
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:surge.util.Cuboid flatten(int) -> FMlI
    287:287:org.bukkit.Location getLowerNE() -> QNXK
    298:298:org.bukkit.Location getUpperSW() -> Jsva
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> XdMr
    348:348:int getSizeY() -> JARu
    358:358:int getSizeZ() -> SfAL
    368:368:int getLowerX() -> RHip
    378:378:int getLowerY() -> rWGL
    388:388:int getLowerZ() -> Hebg
    398:398:int getUpperX() -> qJuQ
    408:408:int getUpperY() -> OQFH
    418:418:int getUpperZ() -> hYln
    428:438:org.bukkit.block.Block[] corners() -> htAL
    454:469:surge.util.Cuboid expand(surge.util.Cuboid$CuboidDirection,int) -> STOt
    484:484:surge.util.Cuboid shift(surge.util.Cuboid$CuboidDirection,int) -> fdWf
    500:514:surge.util.Cuboid outset(surge.util.Cuboid$CuboidDirection,int) -> RanD
    530:530:surge.util.Cuboid inset(surge.util.Cuboid$CuboidDirection,int) -> UITd
    546:546:boolean contains(int,int,int) -> RanD
    558:558:boolean contains(org.bukkit.block.Block) -> UITd
    570:570:boolean contains(org.bukkit.Location) -> HvTS
    580:580:int volume() -> PTIR
    591:601:byte averageLightLevel() -> EulE
    612:612:surge.util.Cuboid contract() -> GcAN
    626:666:surge.util.Cuboid contract(surge.util.Cuboid$CuboidDirection) -> STOt
    680:695:surge.util.Cuboid getFace(surge.util.Cuboid$CuboidDirection) -> fdWf
    708:715:boolean containsOnly(org.bukkit.Material) -> fdWf
    727:739:surge.util.Cuboid getBoundingCuboid(surge.util.Cuboid) -> STOt
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> UITd
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> STOt
    786:800:java.util.List getChunks() -> padp
    815:819:void fill(int,byte) -> STOt
    843:843:java.util.Iterator iterator() -> iterator
    854:854:surge.util.Cuboid clone() -> rFHs
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> tfAl
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> WaMh
surge.util.Cuboid$1 -> CUlw$1:
    surge.util.Cuboid this$0 -> Snni
    1:98:void <init>(surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> PBUy
    1:1:java.lang.Object onAdapt(java.lang.Object) -> fdWf
surge.util.Cuboid$CuboidDirection -> CUlw$STOt:
    surge.util.Cuboid$CuboidDirection North -> UmEg
    surge.util.Cuboid$CuboidDirection East -> VUtp
    surge.util.Cuboid$CuboidDirection South -> Qyis
    surge.util.Cuboid$CuboidDirection West -> pkRC
    surge.util.Cuboid$CuboidDirection Up -> QOWU
    surge.util.Cuboid$CuboidDirection Down -> gOTw
    surge.util.Cuboid$CuboidDirection Horizontal -> aogL
    surge.util.Cuboid$CuboidDirection Vertical -> yTHe
    surge.util.Cuboid$CuboidDirection Both -> UdSO
    surge.util.Cuboid$CuboidDirection Unknown -> oWKx
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> BvOJ
    surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> Cxpd
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:surge.util.Cuboid$CuboidDirection opposite() -> TNsB
    1:1:surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> WaMh
surge.util.Cuboid$CuboidIterator -> CUlw$fdWf:
    org.bukkit.World w -> mYWF
    int baseX -> aVTC
    int baseY -> KNDj
    int baseZ -> HMLR
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> ORAF
    int sizeY -> DAAV
    int sizeZ -> wpEQ
    surge.util.Cuboid this$0 -> Snni
    875:885:void <init>(surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
surge.util.CuboidException -> YwmX:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
surge.util.D -> pjNd:
    org.cyberpwn.glang.GList buffer -> fwDu
    10:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    14:18:void flush() -> flush
    22:33:void log(java.lang.String,java.lang.String) -> fdWf
    37:38:void l(java.lang.Object,java.lang.String) -> STOt
    42:43:void s(java.lang.Object,java.lang.String) -> fdWf
    47:48:void v(java.lang.Object,java.lang.String) -> RanD
    52:53:void w(java.lang.Object,java.lang.String) -> UITd
    57:58:void f(java.lang.Object,java.lang.String) -> EmKE
    62:69:void l(java.lang.String) -> RPnV
    73:80:void s(java.lang.String) -> oVBn
    84:91:void v(java.lang.String) -> eqvw
    95:102:void w(java.lang.String) -> ooUF
    106:113:void f(java.lang.String) -> lThw
surge.util.DMSRequire -> tKgA:
    surge.util.DMSRequirement value() -> UJFh
surge.util.DMSRequirement -> WPEX:
    surge.util.DMSRequirement SQL -> Rkjd
    surge.util.DMSRequirement[] ENUM$VALUES -> vmAl
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.DMSRequirement[] values() -> values
    1:1:surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
surge.util.Depend -> CEMD:
    surge.util.Depend VAULT -> nKWb
    surge.util.Depend FAWE -> YyQB
    surge.util.Depend WORLDEDIT -> xHSo
    surge.util.Depend PROTOLIB -> mPdp
    surge.util.Depend CITIZENS -> WbIU
    java.lang.String name -> name
    surge.util.Depend[] ENUM$VALUES -> lpEn
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:surge.util.Depend[] values() -> values
    1:1:surge.util.Depend valueOf(java.lang.String) -> valueOf
surge.util.Dimension -> SKhQ:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:surge.util.DimensionFace getPane() -> pacv
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
surge.util.DimensionFace -> MRhR:
    surge.util.DimensionFace X -> EviY
    surge.util.DimensionFace Y -> HfaF
    surge.util.DimensionFace Z -> HxBs
    surge.util.DimensionFace[] ENUM$VALUES -> KMgE
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.DimensionFace[] values() -> values
    1:1:surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
surge.util.Direction -> VfSf:
    surge.util.Direction U -> rXGr
    surge.util.Direction D -> jaRR
    surge.util.Direction N -> NyTL
    surge.util.Direction S -> CVot
    surge.util.Direction E -> pbcP
    surge.util.Direction W -> OAAy
    int x -> x
    int y -> y
    int z -> z
    surge.util.Cuboid$CuboidDirection f -> FXKL
    int[] $SWITCH_TABLE$surge$util$Direction -> rFeX
    surge.util.Direction[] ENUM$VALUES -> ObeB
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:surge.util.Direction reverse() -> DXur
    61:61:int x() -> pXsP
    66:66:int y() -> Cftf
    71:71:int z() -> z
    76:76:surge.util.Cuboid$CuboidDirection f() -> DHUf
    81:81:org.cyberpwn.glang.GList news() -> lDVb
    86:86:org.cyberpwn.glang.GList udnews() -> SecB
    91:101:surge.util.Direction facing(org.bukkit.entity.Player) -> paSp
    115:147:surge.util.Direction fromByte(byte) -> fdWf
    158:176:byte byteValue() -> byteValue
    1:1:surge.util.Direction[] values() -> values
    1:1:surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> oobe
surge.util.DynamicConfiguration -> fmRf:
surge.util.DynamicTracker -> savF:
surge.util.Embedded -> JAOF:
    org.cyberpwn.glang.GList get() -> CUrG
    void add(java.lang.Object) -> add
surge.util.FU -> ytiE:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> STOt
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> fdWf
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> EmKE
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> RsPS
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
surge.util.Fingerprint -> UANY:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> FMlI
surge.util.Health -> hPsl:
    double hp -> HLoA
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> mrMu
    41:41:double getHearts() -> oEPG
    51:51:double getHalfHearts() -> cmBI
    61:61:int getFlatHalfHearts() -> YpCv
surge.util.IO -> VTrO:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
surge.util.Items -> PKQR:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> STOt
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> STOt
    55:55:boolean is(org.bukkit.inventory.ItemStack,surge.util.MaterialBlock) -> STOt
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> STOt
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> STOt
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> fdWf
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> RanD
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> UITd
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> STOt
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> STOt
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> STOt
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> STOt
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> EmKE
    216:221:surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> RsPS
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> GrpS
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> ofad
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> HvTS
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> STOt
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> VvkR
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> MImh
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> STOt
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> STOt
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> fdWf
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> STOt
surge.util.MSound -> ssXG:
    surge.util.MSound AMBIENCE_CAVE -> SgBM
    surge.util.MSound AMBIENCE_RAIN -> CEmq
    surge.util.MSound AMBIENCE_THUNDER -> URtT
    surge.util.MSound ANVIL_BREAK -> sJJA
    surge.util.MSound ANVIL_LAND -> cuoR
    surge.util.MSound ANVIL_USE -> Yxrh
    surge.util.MSound ARROW_HIT -> JJcE
    surge.util.MSound BURP -> Bupy
    surge.util.MSound CHEST_CLOSE -> VgWr
    surge.util.MSound CHEST_OPEN -> klcv
    surge.util.MSound CLICK -> aVVK
    surge.util.MSound DOOR_CLOSE -> wwwV
    surge.util.MSound DOOR_OPEN -> afup
    surge.util.MSound DRINK -> EegU
    surge.util.MSound EAT -> Arml
    surge.util.MSound EXPLODE -> inmi
    surge.util.MSound FALL_BIG -> sIgX
    surge.util.MSound FALL_SMALL -> BePW
    surge.util.MSound FIRE -> EKuE
    surge.util.MSound FIRE_IGNITE -> cunT
    surge.util.MSound FIZZ -> oxoi
    surge.util.MSound FUSE -> aEUF
    surge.util.MSound GLASS -> Pmvx
    surge.util.MSound HURT_FLESH -> MupF
    surge.util.MSound ITEM_BREAK -> xYWb
    surge.util.MSound ITEM_PICKUP -> xHVR
    surge.util.MSound LAVA -> qTcJ
    surge.util.MSound LAVA_POP -> QhjK
    surge.util.MSound LEVEL_UP -> VxYm
    surge.util.MSound MINECART_BASE -> KojB
    surge.util.MSound MINECART_INSIDE -> YyRg
    surge.util.MSound NOTE_BASS -> SgBu
    surge.util.MSound NOTE_PIANO -> fwKL
    surge.util.MSound NOTE_BASS_DRUM -> afyb
    surge.util.MSound NOTE_STICKS -> yvQS
    surge.util.MSound NOTE_BASS_GUITAR -> CxvI
    surge.util.MSound NOTE_SNARE_DRUM -> dyUG
    surge.util.MSound NOTE_PLING -> vcvG
    surge.util.MSound ORB_PICKUP -> TqvF
    surge.util.MSound PISTON_EXTEND -> CpfD
    surge.util.MSound PISTON_RETRACT -> VNJJ
    surge.util.MSound PORTAL -> dgsK
    surge.util.MSound PORTAL_TRAVEL -> oqCb
    surge.util.MSound PORTAL_TRIGGER -> XnBk
    surge.util.MSound SHOOT_ARROW -> bamF
    surge.util.MSound SPLASH -> cTOU
    surge.util.MSound SPLASH2 -> RdAL
    surge.util.MSound STEP_GRASS -> NEpr
    surge.util.MSound STEP_GRAVEL -> WPlJ
    surge.util.MSound STEP_LADDER -> wEVP
    surge.util.MSound STEP_SAND -> tMNI
    surge.util.MSound STEP_SNOW -> JSUm
    surge.util.MSound STEP_STONE -> WalO
    surge.util.MSound STEP_WOOD -> KNHl
    surge.util.MSound STEP_WOOL -> KDwE
    surge.util.MSound SWIM -> rXHu
    surge.util.MSound WATER -> HoRo
    surge.util.MSound WOOD_CLICK -> dxre
    surge.util.MSound BAT_DEATH -> yBjQ
    surge.util.MSound BAT_HURT -> CpeA
    surge.util.MSound BAT_IDLE -> pIRX
    surge.util.MSound BAT_LOOP -> bXyi
    surge.util.MSound BAT_TAKEOFF -> HxED
    surge.util.MSound BLAZE_BREATH -> SgBX
    surge.util.MSound BLAZE_DEATH -> txBW
    surge.util.MSound BLAZE_HIT -> OQdX
    surge.util.MSound CAT_HISS -> SxCp
    surge.util.MSound CAT_HIT -> aEVm
    surge.util.MSound CAT_MEOW -> IOsB
    surge.util.MSound CAT_PURR -> tLmA
    surge.util.MSound CAT_PURREOW -> LQMA
    surge.util.MSound CHICKEN_IDLE -> xYYc
    surge.util.MSound CHICKEN_HURT -> OADJ
    surge.util.MSound CHICKEN_EGG_POP -> JAsx
    surge.util.MSound CHICKEN_WALK -> iVCG
    surge.util.MSound COW_IDLE -> qUIY
    surge.util.MSound COW_HURT -> SoVA
    surge.util.MSound COW_WALK -> dqFe
    surge.util.MSound CREEPER_HISS -> NqHF
    surge.util.MSound CREEPER_DEATH -> wNIq
    surge.util.MSound ENDERDRAGON_DEATH -> XSpX
    surge.util.MSound ENDERDRAGON_GROWL -> LbPi
    surge.util.MSound ENDERDRAGON_HIT -> KDyo
    surge.util.MSound ENDERDRAGON_WINGS -> HVDe
    surge.util.MSound ENDERMAN_DEATH -> YErM
    surge.util.MSound ENDERMAN_HIT -> BLBC
    surge.util.MSound ENDERMAN_IDLE -> SMSS
    surge.util.MSound ENDERMAN_TELEPORT -> CgwP
    surge.util.MSound ENDERMAN_SCREAM -> ujFE
    surge.util.MSound ENDERMAN_STARE -> rhlM
    surge.util.MSound GHAST_SCREAM -> uHCD
    surge.util.MSound GHAST_SCREAM2 -> cCNY
    surge.util.MSound GHAST_CHARGE -> cdpW
    surge.util.MSound GHAST_DEATH -> cTPH
    surge.util.MSound GHAST_FIREBALL -> jOrc
    surge.util.MSound GHAST_MOAN -> lUxi
    surge.util.MSound IRONGOLEM_DEATH -> yCMS
    surge.util.MSound IRONGOLEM_HIT -> IPTx
    surge.util.MSound IRONGOLEM_THROW -> qfIq
    surge.util.MSound IRONGOLEM_WALK -> ixDm
    surge.util.MSound MAGMACUBE_WALK -> cBmS
    surge.util.MSound MAGMACUBE_WALK2 -> huAq
    surge.util.MSound MAGMACUBE_JUMP -> NxvT
    surge.util.MSound PIG_IDLE -> PThl
    surge.util.MSound PIG_DEATH -> YhUJ
    surge.util.MSound PIG_WALK -> sJKx
    surge.util.MSound SHEEP_IDLE -> lNHf
    surge.util.MSound SHEEP_SHEAR -> fmxt
    surge.util.MSound SHEEP_WALK -> pkWC
    surge.util.MSound SILVERFISH_HIT -> DAGT
    surge.util.MSound SILVERFISH_KILL -> USXJ
    surge.util.MSound SILVERFISH_IDLE -> hlPU
    surge.util.MSound SILVERFISH_WALK -> fUIO
    surge.util.MSound SKELETON_IDLE -> msNp
    surge.util.MSound SKELETON_DEATH -> IOtg
    surge.util.MSound SKELETON_HURT -> bbOA
    surge.util.MSound SKELETON_WALK -> jidr
    surge.util.MSound SLIME_ATTACK -> NNfJ
    surge.util.MSound SLIME_WALK -> HoXT
    surge.util.MSound SLIME_WALK2 -> pAGH
    surge.util.MSound SPIDER_IDLE -> NNfL
    surge.util.MSound SPIDER_DEATH -> AbRl
    surge.util.MSound SPIDER_WALK -> scbE
    surge.util.MSound WITHER_DEATH -> sJOj
    surge.util.MSound WITHER_HURT -> GuGC
    surge.util.MSound WITHER_IDLE -> MLDQ
    surge.util.MSound WITHER_SHOOT -> TjKD
    surge.util.MSound WITHER_SPAWN -> dqHa
    surge.util.MSound WOLF_BARK -> vJgo
    surge.util.MSound WOLF_DEATH -> vBWd
    surge.util.MSound WOLF_GROWL -> yCOp
    surge.util.MSound WOLF_HOWL -> xPlw
    surge.util.MSound WOLF_HURT -> QaAc
    surge.util.MSound WOLF_PANT -> suCd
    surge.util.MSound WOLF_SHAKE -> ioUs
    surge.util.MSound WOLF_WALK -> pYwQ
    surge.util.MSound WOLF_WHINE -> IPYM
    surge.util.MSound ZOMBIE_METAL -> baqG
    surge.util.MSound ZOMBIE_WOOD -> SfgN
    surge.util.MSound ZOMBIE_WOODBREAK -> ArsC
    surge.util.MSound ZOMBIE_IDLE -> eQfi
    surge.util.MSound ZOMBIE_DEATH -> TXfd
    surge.util.MSound ZOMBIE_HURT -> wpMf
    surge.util.MSound ZOMBIE_INFECT -> qKxP
    surge.util.MSound ZOMBIE_UNFECT -> neSQ
    surge.util.MSound ZOMBIE_REMEDY -> bPnK
    surge.util.MSound ZOMBIE_WALK -> oFSQ
    surge.util.MSound ZOMBIE_PIG_IDLE -> aonE
    surge.util.MSound ZOMBIE_PIG_ANGRY -> qTjD
    surge.util.MSound ZOMBIE_PIG_DEATH -> IrYx
    surge.util.MSound ZOMBIE_PIG_HURT -> Qhod
    surge.util.MSound DIG_WOOL -> YOEQ
    surge.util.MSound DIG_GRASS -> oyWl
    surge.util.MSound DIG_GRAVEL -> uPTt
    surge.util.MSound DIG_SAND -> aDxx
    surge.util.MSound DIG_SNOW -> sJOR
    surge.util.MSound DIG_STONE -> qvlL
    surge.util.MSound DIG_WOOD -> YhXC
    surge.util.MSound FIREWORK_BLAST -> nusN
    surge.util.MSound FIREWORK_BLAST2 -> dpfu
    surge.util.MSound FIREWORK_LARGE_BLAST -> TYGu
    surge.util.MSound FIREWORK_LARGE_BLAST2 -> XnEk
    surge.util.MSound FIREWORK_TWINKLE -> SoWM
    surge.util.MSound FIREWORK_TWINKLE2 -> OYxa
    surge.util.MSound FIREWORK_LAUNCH -> lolm
    surge.util.MSound SUCCESSFUL_HIT -> YNdn
    surge.util.MSound HORSE_ANGRY -> dVsw
    surge.util.MSound HORSE_ARMOR -> NWVj
    surge.util.MSound HORSE_BREATHE -> EfNf
    surge.util.MSound HORSE_DEATH -> rGKd
    surge.util.MSound HORSE_GALLOP -> IPXP
    surge.util.MSound HORSE_HIT -> vcws
    surge.util.MSound HORSE_IDLE -> oxvX
    surge.util.MSound HORSE_JUMP -> rqbX
    surge.util.MSound HORSE_LAND -> Lasb
    surge.util.MSound HORSE_SADDLE -> PnaF
    surge.util.MSound HORSE_SOFT -> XdvV
    surge.util.MSound HORSE_WOOD -> LHam
    surge.util.MSound DONKEY_ANGRY -> FrEg
    surge.util.MSound DONKEY_DEATH -> Kxcb
    surge.util.MSound DONKEY_HIT -> cKcy
    surge.util.MSound DONKEY_IDLE -> CVwq
    surge.util.MSound HORSE_SKELETON_DEATH -> hkss
    surge.util.MSound HORSE_SKELETON_HIT -> Enam
    surge.util.MSound HORSE_SKELETON_IDLE -> NOIX
    surge.util.MSound HORSE_ZOMBIE_DEATH -> GRds
    surge.util.MSound HORSE_ZOMBIE_HIT -> HxKy
    surge.util.MSound HORSE_ZOMBIE_IDLE -> HLwO
    surge.util.MSound VILLAGER_DEATH -> VorP
    surge.util.MSound VILLAGER_HAGGLE -> iVEi
    surge.util.MSound VILLAGER_HIT -> Ygwr
    surge.util.MSound VILLAGER_IDLE -> HoXr
    surge.util.MSound VILLAGER_NO -> LIAk
    surge.util.MSound VILLAGER_YES -> BTXA
    java.lang.String pre19sound -> PfOe
    java.lang.String post19sound -> felr
    org.bukkit.Sound resolvedSound -> cSsE
    surge.util.MSound[] ENUM$VALUES -> EwQl
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> FNYq
    1:1:surge.util.MSound[] values() -> values
    1:1:surge.util.MSound valueOf(java.lang.String) -> valueOf
surge.util.MaterialBlock -> VwUg:
    org.bukkit.Material material -> sdCj
    java.lang.Byte data -> jiih
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> DXuD
    79:80:void setData(java.lang.Byte) -> STOt
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
surge.util.P -> LOdy:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> tSpP
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> Iyeu
    68:68:boolean isAnyOnline() -> IFbI
    80:80:org.cyberpwn.glang.GList inWorld(org.bukkit.World) -> EmKE
    92:104:org.cyberpwn.glang.GList inChunk(org.bukkit.Chunk) -> MImh
    118:118:org.cyberpwn.glang.GList inArea(org.bukkit.Location,double) -> STOt
    132:132:org.cyberpwn.glang.GList inArea(org.bukkit.Location,int) -> STOt
    143:144:void disable(org.bukkit.entity.Player) -> flhL
    154:155:void enable(org.bukkit.entity.Player) -> pGaY
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> STOt
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> fdWf
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> gMhM
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> STOt
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> LFjh
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> RanD
    300:300:boolean canFindPlayer(java.lang.String) -> VTjN
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> ejGg
    338:345:org.cyberpwn.glang.GList onlinePlayers() -> Wqma
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> VDGm
    368:371:void clear(org.bukkit.entity.Player) -> HSqD
    381:385:void clearEffects(org.bukkit.entity.Player) -> gEWi
    398:399:void heal(org.bukkit.entity.Player,double) -> STOt
    409:410:void heal(org.bukkit.entity.Player) -> SCNB
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> EKFb
    432:433:void resetHunger(org.bukkit.entity.Player) -> CMRe
    443:444:void kill(org.bukkit.entity.Player) -> PBUD
    455:455:surge.util.Shape getShape(org.bukkit.entity.Player) -> MkoR
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> KDFr
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> STOt
surge.util.P$1 -> LOdy$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> PBUy
    1:1:java.lang.Object onAdapt(java.lang.Object) -> fdWf
surge.util.P$2 -> LOdy$2:
    java.lang.Double val$doff -> oyYS
    org.bukkit.entity.Player val$e -> OcMI
    org.bukkit.entity.Entity[] val$result -> xbQI
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> VvkR
surge.util.PE -> OsAx:
    surge.util.PE ABSORPTION -> BCTv
    surge.util.PE BLINDNESS -> dEtc
    surge.util.PE CONFUSION -> DAJn
    surge.util.PE DAMAGE_RESISTANCE -> WHby
    surge.util.PE FAST_DIGGING -> rqcx
    surge.util.PE FIRE_RESISTANCE -> GAdm
    surge.util.PE GLOWING -> APuC
    surge.util.PE HARM -> qnaW
    surge.util.PE HEAL -> Aauk
    surge.util.PE HEALTH_BOOST -> MLHQ
    surge.util.PE HUNGER -> Ljfq
    surge.util.PE INCREASE_DAMAGE -> yCSr
    surge.util.PE INVISIBILITY -> hlWV
    surge.util.PE JUMP -> jOyY
    surge.util.PE LEVITATION -> yeWX
    surge.util.PE LUCK -> gXSK
    surge.util.PE NIGHT_VISION -> NOKi
    surge.util.PE POISON -> EfTO
    surge.util.PE REGENERATION -> ArwI
    surge.util.PE SATURATION -> KNPm
    surge.util.PE SLOW -> cLFD
    surge.util.PE SLOW_DIGGING -> FaDq
    surge.util.PE SPEED -> nCTX
    surge.util.PE UNLUCK -> sJRs
    surge.util.PE WATER_BREATHING -> uHHm
    surge.util.PE WEAKNESS -> vJkP
    surge.util.PE WITHER -> bQRe
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> STOt
    144:144:surge.util.PE d(int) -> tSpP
    156:156:surge.util.PE a(int) -> VTjN
    166:166:org.bukkit.potion.PotionEffect c() -> wnha
    177:178:void c(org.bukkit.entity.LivingEntity) -> EmKE
    182:183:void crm(org.bukkit.entity.LivingEntity) -> RsPS
    187:188:void rm(org.bukkit.entity.LivingEntity) -> GrpS
surge.util.ParticleEffect -> NxQl:
    surge.util.ParticleEffect EXPLOSION_NORMAL -> rrDE
    surge.util.ParticleEffect EXPLOSION_LARGE -> EDOd
    surge.util.ParticleEffect EXPLOSION_HUGE -> lhAl
    surge.util.ParticleEffect FIREWORKS_SPARK -> nKcl
    surge.util.ParticleEffect WATER_BUBBLE -> SMWp
    surge.util.ParticleEffect WATER_SPLASH -> nBsE
    surge.util.ParticleEffect WATER_WAKE -> UKNI
    surge.util.ParticleEffect SUSPENDED -> Wjec
    surge.util.ParticleEffect SUSPENDED_DEPTH -> IHLE
    surge.util.ParticleEffect CRIT -> TimU
    surge.util.ParticleEffect CRIT_MAGIC -> EoDT
    surge.util.ParticleEffect SMOKE_NORMAL -> KpTm
    surge.util.ParticleEffect SMOKE_LARGE -> WYgM
    surge.util.ParticleEffect SPELL -> aEaj
    surge.util.ParticleEffect SPELL_INSTANT -> lpVB
    surge.util.ParticleEffect SPELL_MOB -> rGRn
    surge.util.ParticleEffect SPELL_MOB_AMBIENT -> IYPE
    surge.util.ParticleEffect SPELL_WITCH -> GuMJ
    surge.util.ParticleEffect DRIP_WATER -> cSwj
    surge.util.ParticleEffect DRIP_LAVA -> rOdB
    surge.util.ParticleEffect VILLAGER_ANGRY -> feqs
    surge.util.ParticleEffect VILLAGER_HAPPY -> USaK
    surge.util.ParticleEffect TOWN_AURA -> rWtI
    surge.util.ParticleEffect NOTE -> DcSD
    surge.util.ParticleEffect PORTAL -> jXmB
    surge.util.ParticleEffect ENCHANTMENT_TABLE -> oExb
    surge.util.ParticleEffect FLAME -> RBGj
    surge.util.ParticleEffect LAVA -> gPEC
    surge.util.ParticleEffect FOOTSTEP -> Okba
    surge.util.ParticleEffect CLOUD -> tfkB
    surge.util.ParticleEffect REDSTONE -> OssI
    surge.util.ParticleEffect SNOWBALL -> ryvH
    surge.util.ParticleEffect SNOW_SHOVEL -> lpUO
    surge.util.ParticleEffect SLIME -> KFBt
    surge.util.ParticleEffect HEART -> oqMf
    surge.util.ParticleEffect BARRIER -> dOKA
    surge.util.ParticleEffect ITEM_CRACK -> yuyH
    surge.util.ParticleEffect BLOCK_CRACK -> FiWi
    surge.util.ParticleEffect BLOCK_DUST -> lorv
    surge.util.ParticleEffect WATER_DROP -> nnJU
    surge.util.ParticleEffect ITEM_TAKE -> Kxft
    surge.util.ParticleEffect MOB_APPEARANCE -> Hwmy
    surge.util.ParticleEffect DRAGON_BREATH -> DANu
    surge.util.ParticleEffect END_ROD -> IGmK
    surge.util.ParticleEffect DAMAGE_INDICATOR -> eAPC
    surge.util.ParticleEffect SWEEP_ATTACK -> cmlo
    java.util.Map NAME_MAP -> bIHJ
    java.util.Map ID_MAP -> hJYL
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> YpqF
    java.util.List properties -> xjht
    surge.util.ParticleEffect[] ENUM$VALUES -> nmla
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> xaKS
    511:511:boolean hasProperty(surge.util.ParticleEffect$ParticleProperty) -> STOt
    521:525:boolean isSupported() -> isSupported
    537:545:surge.util.ParticleEffect fromName(java.lang.String) -> EmLn
    557:565:surge.util.ParticleEffect fromId(int) -> ejGg
    577:578:boolean isWater(org.bukkit.Location) -> MImh
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> STOt
    615:615:boolean isDataCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleData) -> STOt
    629:629:boolean isColorCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor) -> STOt
    665:681:void display(float,int,org.bukkit.Location,double) -> STOt
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> STOt
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> STOt
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> STOt
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> STOt
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> STOt
    899:912:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> STOt
    934:947:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> STOt
    968:969:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> STOt
    1004:1020:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> STOt
    1055:1068:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> STOt
    1102:1103:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> STOt
    1130:1143:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> STOt
    1169:1182:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> STOt
    1207:1208:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> STOt
    1:1:surge.util.ParticleEffect[] values() -> values
    1:1:surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
surge.util.ParticleEffect$BlockData -> NxQl$STOt:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$ItemData -> NxQl$fdWf:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$NoteColor -> NxQl$RanD:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> Xcnf
    1594:1594:float getValueY() -> kbuW
    1605:1605:float getValueZ() -> Cwtl
surge.util.ParticleEffect$OrdinaryColor -> NxQl$UITd:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> Xcnf
    1526:1526:float getValueY() -> kbuW
    1537:1537:float getValueZ() -> Cwtl
surge.util.ParticleEffect$ParticleColor -> NxQl$EmKE:
    1383:1383:void <init>() -> <init>
    float getValueX() -> Xcnf
    float getValueY() -> kbuW
    float getValueZ() -> Cwtl
surge.util.ParticleEffect$ParticleColorException -> NxQl$RsPS:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticleData -> NxQl$GrpS:
    org.bukkit.Material material -> sdCj
    byte data -> CiBd
    int[] packetData -> Pnfw
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> Thdf
    1309:1309:java.lang.String getPacketDataString() -> DagB
surge.util.ParticleEffect$ParticleDataException -> NxQl$ofad:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticlePacket -> NxQl$HvTS:
    int version -> version
    java.lang.Class enumParticle -> QrKY
    java.lang.reflect.Constructor packetConstructor -> rXVo
    java.lang.reflect.Method getHandle -> lyHs
    java.lang.reflect.Field playerConnection -> Evwp
    java.lang.reflect.Method sendPacket -> WQYB
    boolean initialized -> initialized
    surge.util.ParticleEffect effect -> vKQV
    float offsetX -> Ajjs
    float offsetY -> CNnS
    float offsetZ -> qneb
    float speed -> Npqd
    int amount -> twmq
    boolean longDistance -> Gtmt
    surge.util.ParticleEffect$ParticleData data -> mQVv
    java.lang.Object packet -> RRiy
    1745:1764:void <init>(surge.util.ParticleEffect,float,float,float,float,int,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> PBUy
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> STOt
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> fdWf
    2004:2018:void sendTo(org.bukkit.Location,double) -> fdWf
surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> NxQl$HvTS$STOt:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> NxQl$HvTS$fdWf:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> NxQl$HvTS$RanD:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticleProperty -> NxQl$VvkR:
    surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> VEdt
    surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> kudb
    surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> lMry
    surge.util.ParticleEffect$ParticleProperty COLORABLE -> stjq
    surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> wxfm
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
surge.util.ParticleEffect$ParticleVersionException -> NxQl$MImh:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
surge.util.Paste -> NxRN:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> jyXG
surge.util.Persist -> OHPX:
surge.util.PluginUtil -> UJBM:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> UITd
    81:85:void enableAll() -> mPIq
    95:99:void disable(org.bukkit.plugin.Plugin) -> EmKE
    106:110:void disableAll() -> XBLt
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> RsPS
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> STOt
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> IhWk
    169:172:java.util.List getPluginNames(boolean) -> jEoY
    184:187:java.lang.String getPluginVersion(java.lang.String) -> LiPh
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> GrpS
    237:316:java.util.List findByCommand(java.lang.String) -> qBUi
    337:338:void load(org.bukkit.plugin.Plugin) -> ofad
    342:364:java.lang.String getPluginFileName(java.lang.String) -> eaVx
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> STOt
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> HvTS
    480:484:void reloadAll() -> rglh
    496:622:void unload(org.bukkit.plugin.Plugin) -> VvkR
surge.util.PoolCount -> OYQu:
surge.util.PoolDescriber -> RPyC:
surge.util.PoolNanoThrottle -> NDla:
surge.util.PositionalSelector -> XtnO:
    org.cyberpwn.glang.GSet allowedChunks -> Wawx
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> YfuU
    39:40:void addChunk(org.bukkit.Chunk) -> PBUy
    44:44:org.cyberpwn.glang.GSet getAllowedChunks() -> ECJS
surge.util.Protocol -> ArKd:
    surge.util.Protocol LATEST -> rqfw
    surge.util.Protocol R1_12_2 -> aEbi
    surge.util.Protocol R1_12_2_PRE -> USac
    surge.util.Protocol R1_12_1 -> FPHD
    surge.util.Protocol R1_12 -> Irbd
    surge.util.Protocol R1_11_2 -> DlDg
    surge.util.Protocol R1_11_1 -> etSE
    surge.util.Protocol R1_11 -> nnMI
    surge.util.Protocol R1_10_2 -> IjSH
    surge.util.Protocol R1_10_1 -> hJVy
    surge.util.Protocol R1_10 -> FqjW
    surge.util.Protocol R1_9_4 -> VggK
    surge.util.Protocol R1_9_3 -> fUSV
    surge.util.Protocol R1_9_2 -> ptRX
    surge.util.Protocol R1_9_1 -> DcSs
    surge.util.Protocol R1_9 -> gXVT
    surge.util.Protocol R1_8_9 -> mjgv
    surge.util.Protocol R1_8_8 -> fvuT
    surge.util.Protocol R1_8_7 -> JufW
    surge.util.Protocol R1_8_6 -> TjQs
    surge.util.Protocol R1_8_5 -> FFww
    surge.util.Protocol R1_8_4 -> AjnD
    surge.util.Protocol R1_8_3 -> hBJb
    surge.util.Protocol R1_8_2 -> keGD
    surge.util.Protocol R1_8_1 -> nKlE
    surge.util.Protocol R1_8 -> oiBY
    surge.util.Protocol R1_7_10 -> nLME
    surge.util.Protocol R1_7_9 -> CXBf
    surge.util.Protocol R1_7_8 -> DIce
    surge.util.Protocol R1_7_7 -> rXYP
    surge.util.Protocol R1_7_6 -> eIbD
    surge.util.Protocol R1_7_5 -> KNXc
    surge.util.Protocol R1_7_4 -> hBKN
    surge.util.Protocol R1_7_3 -> sRjf
    surge.util.Protocol R1_7_2 -> hdNP
    surge.util.Protocol R1_7_1 -> AHiq
    surge.util.Protocol B1_6_4 -> uGnc
    surge.util.Protocol B1_6_3 -> vvGL
    surge.util.Protocol B1_6_2 -> UvIc
    surge.util.Protocol B1_6_1 -> rqjQ
    surge.util.Protocol B1_5_2 -> uGoB
    surge.util.Protocol B1_5_1 -> UTEv
    surge.util.Protocol B1_5 -> nByp
    surge.util.Protocol B1_4_7 -> JSeu
    surge.util.Protocol B1_4_6 -> twoy
    surge.util.Protocol B1_4_5 -> XLMn
    surge.util.Protocol B1_4_4 -> DQrg
    surge.util.Protocol B1_4_2 -> Tirb
    surge.util.Protocol B1_3_2 -> BnRb
    surge.util.Protocol B1_3_1 -> opqG
    surge.util.Protocol B1_2_5 -> LHhs
    surge.util.Protocol B1_2_4 -> mHhG
    surge.util.Protocol EARLIEST -> Evxr
    surge.util.Protocol UNKNOWN -> veEO
    int version -> version
    java.lang.String packageVersion -> qLbk
    java.lang.String versionName -> OsvI
    boolean netty -> IsEk
    surge.util.Protocol[] ENUM$VALUES -> KFHC
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> LOmu
    118:118:java.lang.String getPackageVersion() -> Tyhh
    124:124:java.lang.String toString() -> toString
    129:137:surge.util.Protocol getSupportedNMSVersion() -> Diya
    142:150:surge.util.Protocol getProtocolVersion() -> DQIJ
    155:155:surge.util.ProtocolRange to(surge.util.Protocol) -> fdWf
    160:160:boolean isServerVersion() -> vkhk
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> TOVR
    175:175:boolean isActualVersion() -> MmDy
    180:185:int getVersion() -> getVersion
    190:190:int getMetaVersion() -> eGuQ
    1:1:surge.util.Protocol[] values() -> values
    1:1:surge.util.Protocol valueOf(java.lang.String) -> valueOf
surge.util.ProtocolRange -> xXVd:
    surge.util.Protocol from -> DJDT
    surge.util.Protocol to -> kufJ
    8:12:void <init>(surge.util.Protocol,surge.util.Protocol) -> <init>
    16:16:surge.util.Protocol getFrom() -> vJEu
    21:21:surge.util.Protocol getTo() -> wDWn
    26:26:boolean contains(surge.util.Protocol) -> RanD
    32:32:java.lang.String toString() -> toString
surge.util.Range -> EmXK:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> cKAS
    70:70:int randomNextInt() -> pYVO
    80:80:long randomNextLong() -> GtEL
    92:92:boolean isWithin(double) -> jhRo
    104:104:boolean isWithin(int) -> EmLn
    116:116:boolean isWithin(long) -> gMhM
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> sQKL
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> DaVH
surge.util.RawEvent -> WFuQ:
surge.util.RayTrace -> aCps:
    org.bukkit.Location start -> yCYT
    org.bukkit.util.Vector direction -> qCqh
    java.lang.Double maxDistance -> Rcob
    java.lang.Double distanceCovered -> XmrH
    java.lang.Double step -> NiEk
    java.lang.Boolean stop -> ebvA
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> GtEM
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> VvkR
    89:89:org.bukkit.Location getStart() -> Eums
    94:95:void setStart(org.bukkit.Location) -> jEoY
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> brQX
    114:115:void setMaxDistance(java.lang.Double) -> RanD
    119:119:java.lang.Double getDistanceCovered() -> xOkK
    124:125:void setDistanceCovered(java.lang.Double) -> UITd
    129:129:java.lang.Double getStep() -> tKoL
    134:135:void setStep(java.lang.Double) -> EmKE
surge.util.ReflectionUtils -> VLcQ:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> STOt
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> STOt
    156:156:java.lang.Object instantiateObject(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> STOt
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> STOt
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> STOt
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> STOt
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> STOt
    359:359:java.lang.reflect.Field getField(java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> STOt
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> STOt
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> STOt
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> STOt
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> STOt
    508:509:void setValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> STOt
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> STOt
surge.util.ReflectionUtils$DataType -> VLcQ$STOt:
    surge.util.ReflectionUtils$DataType BYTE -> ETxq
    surge.util.ReflectionUtils$DataType SHORT -> diDf
    surge.util.ReflectionUtils$DataType INTEGER -> Chej
    surge.util.ReflectionUtils$DataType LONG -> HMbH
    surge.util.ReflectionUtils$DataType CHARACTER -> mYkx
    surge.util.ReflectionUtils$DataType FLOAT -> OtYb
    surge.util.ReflectionUtils$DataType DOUBLE -> sdOY
    surge.util.ReflectionUtils$DataType BOOLEAN -> Uuip
    java.util.Map CLASS_MAP -> cvbl
    java.lang.Class primitive -> Irgt
    java.lang.Class reference -> XwDb
    surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> hcmx
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> vJEe
    704:704:java.lang.Class getReference() -> BJbT
    716:716:surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> fdWf
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> RanD
    741:742:java.lang.Class getReference(java.lang.Class) -> UITd
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> STOt
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> fdWf
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> fdWf
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> RanD
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> STOt
    1:1:surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
surge.util.ReflectionUtils$PackageType -> VLcQ$fdWf:
    surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> HNBr
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> YNrP
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> RRoL
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> kmYF
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> oydd
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> WjoS
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> AtCO
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> KEhQ
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> KMwv
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> MnRQ
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> cwAw
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> TrfW
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> jbEE
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> mHif
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> DIdi
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> jPbV
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> HpEI
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> vJsX
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> pIam
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> fniE
    java.lang.String path -> path
    surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> yKlG
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
surge.util.Refreshable -> Cfnx:
    void refresh() -> refresh
surge.util.SQLOperation -> fSaU:
    surge.util.SQLOperation LOAD -> iDlv
    surge.util.SQLOperation SAVE -> wghY
    surge.util.SQLOperation[] ENUM$VALUES -> mjlS
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.SQLOperation[] values() -> values
    1:1:surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
surge.util.ServerState -> WWwP:
    surge.util.ServerState START -> uXqO
    surge.util.ServerState ENABLE -> Soce
    surge.util.ServerState DISABLE -> whJE
    surge.util.ServerState STOP -> YhdJ
    surge.util.ServerState RUNNING -> VhNg
    surge.util.ServerState[] ENUM$VALUES -> UTIn
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.ServerState[] values() -> values
    1:1:surge.util.ServerState valueOf(java.lang.String) -> valueOf
surge.util.Shape -> VUTp:
    org.bukkit.Location location -> BKQB
    org.bukkit.util.Vector offset -> RRpP
    org.bukkit.util.Vector size -> vBfK
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> VCgW
    90:94:org.bukkit.Location randomLocation() -> SwEb
    104:104:org.bukkit.Location randomSurface() -> pQDv
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> BBRI
    129:129:org.bukkit.util.Vector getSize() -> yBMV
surge.util.SnowLevel -> bqiW:
    byte level -> OQwb
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> QyOt
    51:52:void setLevel(byte) -> RanD
surge.util.SuperCaller -> LhyN:
    void run() -> run
surge.util.T -> PvFs:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> STOt
    32:35:void stop() -> stop
surge.util.TXT -> ESdL:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:org.cyberpwn.glang.GList wrap(java.lang.String,int) -> RsPS
    67:67:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> STOt
    85:85:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> STOt
    99:99:java.lang.String line(surge.util.C,int) -> STOt
    113:113:java.lang.String underline(surge.util.C,int) -> fdWf
    135:140:java.lang.String getLine(surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> STOt
surge.util.Tag -> hPvU:
    java.lang.String value() -> value
surge.util.Timer -> bhxK:
    long tns -> TjYQ
    long cns -> pRVq
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> kJFc
surge.util.VectorMath -> YxPa:
    int[] $SWITCH_TABLE$surge$util$Axis -> xHTk
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> wFIu
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(surge.util.Axis,org.bukkit.util.Vector,double) -> STOt
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> STOt
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> fdWf
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> RanD
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> STOt
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> fdWf
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> fdWf
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> RanD
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> UITd
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> EmKE
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> RsPS
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> GrpS
    111:111:double round(double,int) -> EmKE
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> STOt
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> STOt
    150:235:org.cyberpwn.glang.GList split(org.bukkit.block.BlockFace) -> STOt
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> UITd
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> EmKE
    268:268:org.bukkit.util.Vector toVector(float,float) -> STOt
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> STOt
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> STOt
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> ofad
    337:340:double getSpeed(org.bukkit.util.Vector) -> HvTS
    354:361:org.cyberpwn.glang.GList shift(org.bukkit.util.Vector,org.cyberpwn.glang.GList) -> STOt
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> VvkR
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> STOt
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> fdWf
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> RanD
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> UITd
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> MImh
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> tfAl
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> twDG
surge.util.VectorMath$1 -> YxPa$1:
    org.bukkit.util.Vector val$vector -> RAoK
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> PBUy
    1:1:java.lang.Object onAdapt(java.lang.Object) -> fdWf
surge.util.W -> EmVh:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> EmKE
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> STOt
    75:86:org.bukkit.entity.Entity getEntity(int) -> jyXG
    101:114:int count(org.bukkit.entity.Player,surge.util.MaterialBlock) -> STOt
    131:131:boolean has(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> STOt
    143:143:int getChunkX(org.bukkit.block.Block) -> RsPS
    155:155:int getChunkY(org.bukkit.block.Block) -> GrpS
    168:169:void dropXp(org.bukkit.Location,int) -> fdWf
    180:180:int getChunkZ(org.bukkit.block.Block) -> ofad
    196:203:void take(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> fdWf
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> STOt
    232:239:org.cyberpwn.glang.GList news(org.bukkit.Location) -> WGKY
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> STOt
    276:276:org.cyberpwn.glang.GList getBlocks(org.bukkit.Chunk) -> jEoY
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> RsPS
    300:300:org.bukkit.World toSync(org.bukkit.World) -> GrpS
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> HvTS
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> OrWq
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> VCgW
    352:419:surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> MSAq
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> STOt
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> STOt
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> STOt
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> STOt
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> STOt
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> STOt
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> STOt
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> STOt
    580:587:org.cyberpwn.glang.GList chunkFaces(org.bukkit.Chunk) -> WGKY
    599:608:org.cyberpwn.glang.GList blockFaces(org.bukkit.block.Block) -> VvkR
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> paSp
    648:660:org.cyberpwn.glang.GList chunkRadius(org.bukkit.Chunk,int) -> RanD
    674:686:org.cyberpwn.glang.GList blockRadius(org.bukkit.block.Block,int) -> STOt
    708:740:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> STOt
    758:765:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> STOt
    779:779:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> STOt
surge.util.W$1 -> EmVh$1:
    java.lang.Double val$doff -> oyYS
    org.bukkit.entity.Entity val$e -> CGDr
    org.bukkit.entity.Entity[] val$result -> xbQI
    1:721:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    726:737:void onTrace(org.bukkit.Location) -> VvkR
surge.util.Worlds -> VCqw:
    12:12:void <init>() -> <init>
    21:21:org.cyberpwn.glang.GList getWorlds() -> NVUC
    33:33:boolean hasWorld(java.lang.String) -> IFTh
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
surge.util.package-info -> FWGs:

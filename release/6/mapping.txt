react.Config -> ssNb:
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> ssNb
    java.lang.String A_ENTITYCACHE_INTERVAL -> DYFV
    java.lang.String A_DROPSTACK_RADIUS -> IWSm
    java.lang.String A_DROPSTACK_STACKDROPS -> OXeK
    java.lang.String A_DROPSTACK_USEDEFAULT -> YoSa
    java.lang.String A_DROPSTACK_SMOOTHSTACK -> jhSt
    java.lang.String A_POOL_MAXTHREADS -> BkpW
    java.lang.String A_POOL_SYNC_NANOS -> lCdp
    java.lang.String A_ENTITYCACHE_ENABLED -> nJLQ
    java.lang.String A_FASTLEAF_ENABLED -> vtFs
    java.lang.String A_FASTLEAF_ONDECAY -> EmLA
    java.lang.String A_FASTLEAF_INSTANT -> WGJn
    java.lang.String A_FASTLEAF_DECAYPERIOD -> TyVf
    java.lang.String A_DROPSTACK_MINAGE -> LGKl
    java.lang.String A_ENTITYSTACK_ENABLED -> ykmX
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> rwyd
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> hHYn
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> kQcX
    java.lang.String A_GLASS_SHOW_BLOCKS -> rMgK
    java.lang.String A_GLASS_SHOW_PARTICLES -> cIji
    java.lang.String A_ALLOW_CULL -> Cnru
    java.lang.String A_ALLOW_PURGE -> LWjo
    java.lang.String A_ALLOW_CACHE -> PuYf
    java.lang.String A_CULL_RULES -> TNbD
    int ENTITYCACHE_CHUNK_RADIUS -> LGKN
    int ENTITYCACHE_INTERVAL -> NUdB
    double DROPSTACK_RADIUS -> OOtu
    boolean DROPSTACK_STACKDROPS -> aLYV
    boolean DROPSTACK_USEDEFAULT -> Smci
    boolean DROPSTACK_SMOOTHSTACK -> oVCY
    int POOL_MAXTHREADS -> nImU
    long POOL_SYNC_NANOS -> KwOT
    boolean ENTITYCACHE_ENABLED -> KUKx
    boolean FASTLEAF_ENABLED -> avmQ
    boolean FASTLEAF_ONDECAY -> CMSR
    boolean FASTLEAF_INSTANT -> CoXE
    int FASTLEAF_DECAYPERIOD -> ftyu
    int DROPSTACK_MINAGE -> mXMK
    boolean ENTITYSTACK_ENABLED -> HBqU
    int ENTITYSTACK_MINIMUM_GROUP -> NxGC
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> GsQl
    int ENTITYSTACK_MAXIMUM_HEALTH -> DXfX
    boolean GLASS_SHOW_BLOCKS -> EmKi
    boolean GLASS_SHOW_PARTICLES -> ejGG
    react.glang.GList ALLOW_CULL -> TNcV
    react.glang.GList ALLOW_PURGE -> INcj
    react.glang.GList ALLOW_CACHE -> VCgr
    react.glang.GList CULL_RULES -> gEXv
    boolean hrld -> tvRU
    boolean rns -> dntE
    boolean rrl -> RbOr
    int[] $SWITCH_TABLE$org$bukkit$entity$EntityType -> KCiG
    111:225:void <clinit>() -> <clinit>
    34:34:void <init>() -> <init>
    230:247:void doTrack(org.bukkit.plugin.Plugin) -> ssNb
    252:274:void onRead(org.bukkit.plugin.Plugin) -> DYFV
    278:308:void read(java.io.File,boolean) -> ssNb
    313:418:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> ssNb
    423:460:react.surge.cluster.DataCluster defaultConfig(boolean) -> ssNb
    465:534:react.glang.GList getDefaultEntitiesForCaching() -> ssNb
    539:608:react.glang.GList getDefaultEntitiesForCulling() -> DYFV
    613:644:react.glang.GList getDefaultEntitiesForRemoval() -> IWSm
    649:678:react.glang.GList getDefaultCullRules() -> OXeK
    34:34:int[] $SWITCH_TABLE$org$bukkit$entity$EntityType() -> YoSa
react.Config$1 -> ssNb$1:
    java.io.File val$fConfig -> tdpC
    java.io.File val$fConfigExperimental -> PBWX
    org.bukkit.plugin.Plugin val$main -> hbNa
    1:233:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    238:242:void run() -> run
react.Config$2 -> ssNb$2:
    int[] $SwitchMap$org$bukkit$entity$EntityType -> gEYM
    469:469:void <clinit>() -> <clinit>
react.Gate -> DYFV:
    13:13:void <init>() -> <init>
    17:20:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> ssNb
    25:28:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> DYFV
    33:33:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> IWSm
    38:38:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> OXeK
    43:43:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> YoSa
    48:49:void unloadChunk(org.bukkit.Chunk) -> ssNb
    53:54:void unloadChunk(org.bukkit.World,int,int) -> ssNb
    58:64:void removeEntity(org.bukkit.entity.Entity) -> ssNb
    68:74:void purgeEntity(org.bukkit.entity.Entity) -> DYFV
    78:84:void cullEntity(org.bukkit.entity.Entity) -> IWSm
    88:94:void cachedEntity(org.bukkit.entity.Entity) -> OXeK
    98:109:void cacheEntity(org.bukkit.entity.Entity) -> YoSa
    113:113:int restoreEntities(org.bukkit.Chunk) -> DYFV
    119:123:void updateBlock(org.bukkit.block.Block) -> ssNb
    127:131:java.lang.String header(java.lang.String,react.surge.util.C) -> ssNb
    136:136:java.lang.String header(react.surge.util.C) -> ssNb
react.Info -> IWSm:
    java.lang.String SECRET_IS_GENUINE -> Aqbp
    java.lang.String SECRET_IS_GENUINE_VERBOSE -> KTmF
    java.lang.String SECRET_RESCAN -> bXOh
    java.lang.String SECRET_DELETE -> LGOT
    java.lang.String CORE_REACT_DOT -> Lhpt
    java.lang.String CORE_NAME -> uxwg
    java.lang.String CORE_CACHE -> HKdE
    java.lang.String CORE_DOTYML -> pqxh
    java.lang.String COMMAND_REACT -> GkDg
    java.lang.String COMMAND_RAI -> HKcf
    java.lang.String COMMAND_ACT_DESCRIPTION -> cRaV
    java.lang.String COMMAND_ACT -> GHaL
    java.lang.String COMMAND_ACT_ALIAS_1 -> OPXm
    java.lang.String COMMAND_ACT_ALIAS_2 -> sapB
    java.lang.String COMMAND_ACT_USAGE -> kYwm
    java.lang.String COMMAND_HELP_DESCRIPTION -> jyXs
    java.lang.String COMMAND_HELP -> uWVB
    java.lang.String COMMAND_HELP_ALIAS_1 -> HCSq
    java.lang.String COMMAND_HELP_ALIAS_2 -> OikN
    java.lang.String COMMAND_HELP_USAGE -> iSqp
    java.lang.String COMMAND_STATUS_DESCRIPTION -> YnwU
    java.lang.String COMMAND_STATUS -> owfl
    java.lang.String COMMAND_STATUS_ALIAS_1 -> kRIL
    java.lang.String COMMAND_STATUS_ALIAS_2 -> ejJV
    java.lang.String COMMAND_STATUS_USAGE -> UbkT
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> BBAa
    java.lang.String COMMAND_CPUSCORE -> YffC
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> HuvK
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> RkCQ
    java.lang.String COMMAND_CPUSCORE_USAGE -> mhnc
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> YDcD
    java.lang.String COMMAND_RELOAD -> WiQN
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> aCiR
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> YEBy
    java.lang.String COMMAND_RELOAD_USAGE -> oxGX
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> kAFo
    java.lang.String COMMAND_MONITOR -> tvSr
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> VfMm
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> fcyq
    java.lang.String COMMAND_MONITOR_USAGE -> RPon
    java.lang.String COMMAND_GLASS_DESCRIPTION -> YoWX
    java.lang.String COMMAND_GLASS -> wfLE
    java.lang.String COMMAND_GLASS_ALIAS_1 -> yuFb
    java.lang.String COMMAND_GLASS_ALIAS_2 -> wDLU
    java.lang.String COMMAND_GLASS_USAGE -> EvBS
    java.lang.String MSG_PERMISSION -> tCRu
    java.lang.String MSG_MONITORING_STARTED -> cAai
    java.lang.String MSG_MONITORING_STOPPED -> JRMO
    java.lang.String MSG_GLASS_STARTED -> WFpH
    java.lang.String MSG_GLASS_STOPPED -> tKcS
    org.bukkit.Color COLOR_HOPPER -> XthG
    org.bukkit.Color COLOR_BLOCK_UPDATE -> GIDW
    org.bukkit.Color COLOR_BLOCK_FROMTO -> YUgh
    org.bukkit.Color COLOR_BLOCK_BURN -> YDey
    org.bukkit.Color COLOR_BLOCK_DECAY -> tLCm
    org.bukkit.Color COLOR_BLOCK_FORM -> TOJM
    java.lang.String NAME_TICK -> uOFv
    java.lang.String NAME_MEMORY -> FFBA
    java.lang.String NAME_CHUNKS -> BuHU
    java.lang.String NAME_ENTITIES -> bqcB
    java.lang.String STATE_MONITORING_TAB -> kQhu
    java.lang.String STATE_MONITORING_ENABLED -> KeoU
    java.lang.String STATE_MAPPING_ENABLED -> dDce
    java.lang.String STATE_SOUND_PLAYS -> dMUO
    java.lang.String STATE_MONITORING_POSTED -> SuxL
    java.lang.String STATE_MONITORING_LASTTAB -> hjbe
    java.lang.String STATE_GLASSES_ENABLED -> hjbh
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> vIXT
    java.lang.String STATE_PLAYER_HOTBAR -> QhBc
    java.lang.String STATE_PLAYER_SHIFT -> Pubc
    java.lang.String STATE_PLAYER_SCROLL -> BBFe
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> xqeH
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> hYdh
    java.lang.String PERM_ACCESS -> tdxF
    java.lang.String PERM_MONITOR -> clWu
    java.lang.String PERM_MONITOR_TITLE -> dMWs
    java.lang.String PERM_MONITOR_MAP -> TFYr
    java.lang.String PERM_MONITOR_ENVIRONMENT -> ccgJ
    java.lang.String PERM_MONITOR_GLASSES -> GYgG
    java.lang.String PERM_ACT -> FNTA
    java.lang.String PERM_RAI -> aUPw
    java.lang.String PERM_RAI_CONTROL -> wfPa
    java.lang.String PERM_RAI_ACCESS -> EvEN
    java.lang.String PERM_RAI_MONITOR -> ktOu
    java.lang.String PERM_RELOAD -> FNSj
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> QyFw
    java.lang.String SAMPLER_REDSTONE_TICK -> Iplh
    java.lang.String SAMPLER_REDSTONE_SECOND -> bqeB
    java.lang.String SAMPLER_REDSTONE_TIME -> BIwL
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> KwTH
    java.lang.String SAMPLER_HOPPER_TICK -> VUOs
    java.lang.String SAMPLER_HOPPER_SECOND -> VCnE
    java.lang.String SAMPLER_HOPPER_TIME -> HdyI
    java.lang.String SAMPLER_TPS -> TOKE
    java.lang.String SAMPLER_TICK -> tLDs
    java.lang.String SAMPLER_TIU -> vslr
    java.lang.String SAMPLER_MEM -> HTYB
    java.lang.String SAMPLER_FREEMEM -> lCky
    java.lang.String SAMPLER_MAXMEM -> FouE
    java.lang.String SAMPLER_ALLOCMEM -> EucK
    java.lang.String SAMPLER_MAHS -> AOcy
    java.lang.String SAMPLER_CHK -> GkIA
    java.lang.String SAMPLER_CHKS -> YDfo
    java.lang.String SAMPLER_ENT -> dwji
    java.lang.String SAMPLER_ENTLIV -> QhEF
    java.lang.String SAMPLER_ENTDROP -> ogMI
    java.lang.String SAMPLER_ENTTILE -> VoFU
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> QVde
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> fTAa
    java.lang.String ACTION_CULL_ENTITIES_NAME -> WqhV
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> jOKx
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> OsCE
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> QyID
    java.lang.String ACTION_LOCK_HOPPER_NAME -> SKhs
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> WFtI
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> ntjb
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> AXWQ
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> LPFt
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> teYl
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> Rrym
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> NUkt
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> wfRd
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> JlDV
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> aDQd
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> bywp
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> KvwI
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> AFvO
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> SLHs
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> yReg
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> MAeq
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> gotc
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> JtRs
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> GbYK
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> Diox
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> nchO
    8:8:void <init>() -> <init>
    10:209:void <clinit>() -> <clinit>
react.Lang -> OXeK:
    3:3:void <init>() -> <init>
react.React -> YoSa:
    react.React instance -> gFBb
    java.lang.String hi -> Yfkw
    react.controller.SampleController sampleController -> sPsW
    react.controller.PlayerController playerController -> tLFo
    react.controller.MonitorController monitorController -> eHME
    react.controller.CommandController commandController -> mXSo
    react.controller.ActionController actionController -> rxda
    react.controller.EntityCacheController entityCacheController -> gotS
    react.controller.DropMergeController dropMergeController -> QMsU
    react.controller.FastDecayController fastDecayController -> GjjA
    react.controller.EntityStackController entityStackController -> vbnM
    react.controller.GlassController glassController -> JbqW
    react.controller.EntityCullController entityCullController -> YUkF
    react.controller.SpikeController spikeController -> fvCa
    react.controller.SecurityController securityController -> Rayq
    react.controller.RedstoneController redstoneController -> esCa
    react.controller.HopperController hopperController -> VCsR
    react.controller.PhysicsController physicsController -> GHiL
    react.controller.TickTimeController tickTimeController -> FEfL
    react.controller.RAIController raiController -> Vvwe
    35:35:void <clinit>() -> <clinit>
    30:30:void <init>() -> <init>
    95:95:void enable() -> enable
    101:101:void disable() -> disable
react.action.ActionCullEntities -> jhSt:
    long ms -> QFEs
    int lcd -> YEMO
    31:58:void <init>() -> <init>
    63:149:void enact(react.api.IActionSource,react.api.ISelector[]) -> ssNb
    153:155:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> ssNb
    26:26:void access$0(react.action.ActionCullEntities,long) -> ssNb
    27:27:int access$1(react.action.ActionCullEntities) -> ssNb
    26:26:long access$2(react.action.ActionCullEntities) -> DYFV
react.action.ActionCullEntities$1 -> jhSt$1:
    react.action.ActionCullEntities this$0 -> BAjC
    1:35:void <init>(react.action.ActionCullEntities) -> <init>
    40:43:react.api.ISelector get() -> jhSt
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> jhSt$2:
    react.action.ActionCullEntities this$0 -> BAjC
    1:47:void <init>(react.action.ActionCullEntities) -> <init>
    52:55:react.api.ISelector get() -> jhSt
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> jhSt$3:
    react.action.ActionCullEntities this$0 -> BAjC
    react.glang.FinalInteger val$completed -> byyi
    react.glang.FinalInteger val$total -> UtUW
    react.glang.FinalInteger val$totalCulled -> DYRf
    react.glang.FinalInteger val$totalChunked -> FyLC
    react.api.IActionSource val$source -> aLcY
    1:103:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    108:128:void run() -> run
react.action.ActionCullEntities$4 -> jhSt$4:
    react.action.ActionCullEntities this$0 -> BAjC
    react.api.IActionSource val$source -> aLcY
    react.glang.FinalInteger val$totalCulled -> DYRf
    react.glang.FinalInteger val$totalChunked -> FyLC
    1:135:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    140:146:void run() -> run
react.action.ActionLockHopper -> BkpW:
    int lcd -> YEMO
    25:52:void <init>() -> <init>
    57:102:void enact(react.api.IActionSource,react.api.ISelector[]) -> ssNb
react.action.ActionLockHopper$1 -> BkpW$1:
    react.action.ActionLockHopper this$0 -> rowT
    1:29:void <init>(react.action.ActionLockHopper) -> <init>
    34:37:react.api.ISelector get() -> jhSt
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> BkpW$2:
    react.action.ActionLockHopper this$0 -> rowT
    1:41:void <init>(react.action.ActionLockHopper) -> <init>
    46:49:react.api.ISelector get() -> jhSt
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> lCdp:
    int lcd -> YEMO
    25:52:void <init>() -> <init>
    57:101:void enact(react.api.IActionSource,react.api.ISelector[]) -> ssNb
react.action.ActionLockRedstone$1 -> lCdp$1:
    react.action.ActionLockRedstone this$0 -> YoaF
    1:29:void <init>(react.action.ActionLockRedstone) -> <init>
    34:37:react.api.ISelector get() -> jhSt
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> lCdp$2:
    react.action.ActionLockRedstone this$0 -> YoaF
    1:41:void <init>(react.action.ActionLockRedstone) -> <init>
    46:49:react.api.ISelector get() -> jhSt
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> nJLQ:
    long ms -> QFEs
    int lcd -> YEMO
    28:43:void <init>() -> <init>
    48:121:void enact(react.api.IActionSource,react.api.ISelector[]) -> ssNb
    125:137:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> DYFV
    21:21:long access$002(react.action.ActionPurgeChunks,long) -> ssNb
    21:21:int access$100(react.action.ActionPurgeChunks) -> ssNb
    21:21:long access$000(react.action.ActionPurgeChunks) -> DYFV
react.action.ActionPurgeChunks$1 -> nJLQ$1:
    react.action.ActionPurgeChunks this$0 -> kkcI
    33:33:void <init>(react.action.ActionPurgeChunks) -> <init>
    37:40:react.api.ISelector get() -> jhSt
    33:33:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> nJLQ$2:
    react.glang.FinalInteger val$completed -> byyi
    react.glang.FinalInteger val$total -> UtUW
    react.glang.FinalInteger val$totalCulled -> DYRf
    react.glang.FinalInteger val$totalChunked -> FyLC
    react.api.IActionSource val$source -> aLcY
    react.action.ActionPurgeChunks this$0 -> kkcI
    76:76:void <init>(react.action.ActionPurgeChunks,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    80:100:void run() -> run
react.action.ActionPurgeChunks$3 -> nJLQ$3:
    react.api.IActionSource val$source -> aLcY
    react.glang.FinalInteger val$completed -> byyi
    react.action.ActionPurgeChunks this$0 -> kkcI
    108:108:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger) -> <init>
    112:118:void run() -> run
react.action.ActionPurgeChunks$4 -> nJLQ$4:
    org.bukkit.Chunk val$chunk -> KMEw
    java.lang.Runnable val$cb -> dVMt
    react.action.ActionPurgeChunks this$0 -> kkcI
    126:126:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    130:135:void run() -> run
react.action.ActionPurgeEntities -> vtFs:
    long ms -> QFEs
    int lcd -> YEMO
    33:60:void <init>() -> <init>
    65:152:void enact(react.api.IActionSource,react.api.ISelector[]) -> ssNb
    156:199:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> DYFV
    26:26:long access$002(react.action.ActionPurgeEntities,long) -> ssNb
    26:26:int access$100(react.action.ActionPurgeEntities) -> ssNb
    26:26:long access$000(react.action.ActionPurgeEntities) -> DYFV
    26:26:int access$102(react.action.ActionPurgeEntities,int) -> ssNb
react.action.ActionPurgeEntities$1 -> vtFs$1:
    react.action.ActionPurgeEntities this$0 -> fKRe
    38:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    42:45:react.api.ISelector get() -> jhSt
    38:38:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> vtFs$2:
    react.action.ActionPurgeEntities this$0 -> fKRe
    50:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    54:57:react.api.ISelector get() -> jhSt
    50:50:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> vtFs$3:
    react.glang.FinalInteger val$completed -> byyi
    react.glang.FinalInteger val$total -> UtUW
    react.glang.FinalInteger val$totalCulled -> DYRf
    react.glang.FinalInteger val$totalChunked -> FyLC
    react.api.IActionSource val$source -> aLcY
    react.action.ActionPurgeEntities this$0 -> fKRe
    106:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    110:130:void run() -> run
react.action.ActionPurgeEntities$4 -> vtFs$4:
    react.api.IActionSource val$source -> aLcY
    react.glang.FinalInteger val$totalCulled -> DYRf
    react.glang.FinalInteger val$totalChunked -> FyLC
    react.action.ActionPurgeEntities this$0 -> fKRe
    138:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    143:149:void run() -> run
react.action.ActionPurgeEntities$5 -> vtFs$5:
    org.bukkit.entity.Entity val$i -> jqQR
    react.glang.FinalInteger val$cu -> Whxy
    int val$k -> wLbX
    org.bukkit.Chunk val$chunk -> KMEw
    java.lang.Runnable val$cb -> dVMt
    react.action.ActionPurgeEntities this$0 -> fKRe
    178:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    182:190:void run() -> run
react.action.ActionUnlockHopper -> EmLA:
    int lcd -> YEMO
    24:39:void <init>() -> <init>
    44:83:void enact(react.api.IActionSource,react.api.ISelector[]) -> ssNb
react.action.ActionUnlockHopper$1 -> EmLA$1:
    react.action.ActionUnlockHopper this$0 -> ndLE
    1:28:void <init>(react.action.ActionUnlockHopper) -> <init>
    33:36:react.api.ISelector get() -> jhSt
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> WGJn:
    int lcd -> YEMO
    24:39:void <init>() -> <init>
    44:83:void enact(react.api.IActionSource,react.api.ISelector[]) -> ssNb
react.action.ActionUnlockRedstone$1 -> WGJn$1:
    react.action.ActionUnlockRedstone this$0 -> IXBO
    1:28:void <init>(react.action.ActionUnlockRedstone) -> <init>
    33:36:react.api.ISelector get() -> jhSt
    1:1:java.lang.Object get() -> get
react.api.Action -> TyVf:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> roui
    java.lang.String[] nodes -> Pdcq
    react.api.ActionHandle handle -> dfmS
    react.api.ActionState state -> nBHO
    react.api.ActionTargetType target -> WaHe
    react.api.ActionType type -> qdbP
    react.api.IActionSource currentSource -> NUlw
    double progress -> lTrT
    react.glang.GMap defaultSelectors -> GkMB
    23:24:void <init>(react.api.ActionType) -> <init>
    27:39:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    44:59:react.api.ISelector[] biselect(react.api.ISelector[]) -> ssNb
    65:66:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> ssNb
    71:71:java.lang.String getName() -> getName
    77:77:java.lang.String getDescription() -> getDescription
    83:83:react.api.ActionHandle getHandleType() -> BkpW
    89:89:react.api.ActionState getState() -> lCdp
    95:95:java.lang.String getStatus() -> getStatus
    101:102:void setStatus(java.lang.String) -> ssNb
    107:107:double getProgress() -> getProgress
    113:114:void setProgress(double) -> setProgress
    119:119:react.api.ActionTargetType getTarget() -> nJLQ
    125:125:react.api.ActionType getType() -> vtFs
    131:131:react.glang.GMap getDefaultSelectors() -> EmLA
    137:146:void act(react.api.IActionSource,react.api.ISelector[]) -> DYFV
    151:152:void completeAction() -> WGJn
    157:157:react.api.IActionSource getCurrentSource() -> TyVf
    163:163:java.lang.String[] getNodes() -> LGKl
    169:170:void setNodes(java.lang.String[]) -> ssNb
    void enact(react.api.IActionSource,react.api.ISelector[]) -> ssNb
react.api.ActionAlreadyRunningException -> LGKl:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> ykmX:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> rwyd:
    react.api.ActionHandle AUTOMATIC -> aMCk
    react.api.ActionHandle MANUAL -> XSJd
    react.api.ActionHandle MUTEX -> kkap
    react.api.ActionHandle[] $VALUES -> gyID
    3:3:react.api.ActionHandle[] values() -> values
    3:3:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ActionNotRunningException -> hHYn:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> kQcX:
    react.api.ActionState IDLE -> kbqG
    react.api.ActionState RUNNING -> AWxc
    react.api.ActionState[] $VALUES -> lDTo
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> rMgK:
    react.api.ActionTargetType POSITIONAL -> FhLM
    react.api.ActionTargetType SYSTEM -> psDx
    react.api.ActionTargetType[] $VALUES -> DbEj
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> cIji:
    react.api.ActionType UNLOCK_HOPPER -> kQsA
    react.api.ActionType LOCK_HOPPER -> WaKm
    react.api.ActionType UNLOCK_REDSTONE -> UARh
    react.api.ActionType LOCK_REDSTONE -> KUXS
    react.api.ActionType CULL_ENTITIES -> FMwy
    react.api.ActionType PURGE_ENTITIES -> IWbc
    react.api.ActionType PURGE_CHUNKS -> gVhV
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> dfmS
    react.api.ActionTargetType target -> WaHe
    react.api.ActionType[] $VALUES -> mrKm
    5:5:react.api.ActionType[] values() -> values
    5:5:react.api.ActionType valueOf(java.lang.String) -> valueOf
    21:26:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    30:30:java.lang.String getName() -> getName
    35:35:java.lang.String getDescription() -> getDescription
    40:40:react.api.ActionHandle getHandle() -> ykmX
    45:45:react.api.ActionTargetType getTarget() -> nJLQ
    5:13:void <clinit>() -> <clinit>
react.api.Address -> Cnru:
    int value() -> value
react.api.Async -> LWjo:
react.api.CPUBenchmark -> PuYf:
    org.bukkit.command.CommandSender sender -> sender
    int score -> kcUD
    16:20:void <init>(org.bukkit.command.CommandSender) -> <init>
    25:57:void run() -> run
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> ssNb
    10:10:int access$100(react.api.CPUBenchmark) -> DYFV
react.api.CPUBenchmark$1 -> PuYf$1:
    react.api.CPUBenchmark this$0 -> wevJ
    26:26:void <init>(react.api.CPUBenchmark) -> <init>
    30:31:void run() -> run
react.api.CPUBenchmark$2 -> PuYf$2:
    react.api.CPUBenchmark this$0 -> wevJ
    49:49:void <init>(react.api.CPUBenchmark) -> <init>
    53:55:void run() -> run
react.api.CPUResult -> TNbD:
    react.api.CPUResult ULTRA_SLOW -> APKB
    react.api.CPUResult VERY_SLOW -> kstv
    react.api.CPUResult SLOW -> uNna
    react.api.CPUResult AVERAGE -> loHn
    react.api.CPUResult GOOD -> xhxl
    react.api.CPUResult FAST -> gWIG
    react.api.CPUResult VERY_FAST -> ydMI
    react.api.CPUResult ULTRA_FAST -> rpXo
    java.lang.String m -> loHX
    react.api.CPUResult[] $VALUES -> lnfu
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> ssNb
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> LGKN:
    react.glang.GMap cache -> vJAb
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> ssNb
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> DYFV
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> rwyd
    54:54:boolean has(java.lang.Object) -> IWSm
react.api.ChunkIssue -> NUdB:
    react.api.ChunkIssue ENTITY -> GHjQ
    react.api.ChunkIssue HOPPER -> maJO
    react.api.ChunkIssue REDSTONE -> pbBn
    react.api.ChunkIssue PHYSICS -> QNWg
    react.api.ChunkIssue[] $VALUES -> sHhL
    3:3:react.api.ChunkIssue[] values() -> values
    3:3:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.api.Clip -> OOtu:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> aLYV:
    org.bukkit.command.CommandSender sender -> sender
    12:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> DYFV
    30:31:void sendResponseSuccess(java.lang.String) -> IWSm
    36:37:void sendResponseError(java.lang.String) -> OXeK
    42:43:void sendResponseActing(java.lang.String) -> YoSa
react.api.ConsoleActionSource -> Smci:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> DYFV
    18:19:void sendResponseSuccess(java.lang.String) -> IWSm
    24:25:void sendResponseError(java.lang.String) -> OXeK
    30:31:void sendResponseActing(java.lang.String) -> YoSa
react.api.CullList -> oVCY:
    react.glang.GSet toCull -> BSOO
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> jhSt
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> hHYn
react.api.DTest -> nImU:
    3:3:void <init>() -> <init>
    7:58:int test() -> kQcX
react.api.EntityFlag -> KwOT:
    react.api.EntityFlag NAMED -> IWad
    react.api.EntityFlag TAMED -> miYd
    react.api.EntityFlag STACKED -> ETFk
    react.api.EntityFlag RIDDEN -> QWIV
    react.api.EntityFlag LEASHED -> lTsr
    java.lang.String m -> loHX
    react.api.EntityFlag[] $VALUES -> gowu
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> BkpW
    40:60:boolean is(org.bukkit.entity.Entity) -> lCdp
    66:66:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> KUKx:
    react.glang.GSet entityTypes -> MBKs
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> rMgK
react.api.EntitySample -> avmQ:
    react.glang.GMap counts -> UIbl
    react.glang.GMap sets -> hQYY
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> cIji
    45:45:react.glang.GList getTypes() -> Cnru
    50:57:int total() -> LWjo
    62:67:int get(org.bukkit.entity.EntityType) -> ssNb
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> DYFV
    84:96:void add(org.bukkit.entity.Entity) -> jhSt
react.api.Experimental -> CMSR:
react.api.IAction -> CoXE:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> BkpW
    void act(react.api.IActionSource,react.api.ISelector[]) -> DYFV
    void enact(react.api.IActionSource,react.api.ISelector[]) -> ssNb
    react.api.ActionState getState() -> lCdp
    react.api.ActionTargetType getTarget() -> nJLQ
    void setNodes(java.lang.String[]) -> ssNb
    java.lang.String[] getNodes() -> LGKl
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> ssNb
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> vtFs
    react.glang.GMap getDefaultSelectors() -> EmLA
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> ssNb
    react.api.ISelector[] biselect(react.api.ISelector[]) -> ssNb
    react.api.IActionSource getCurrentSource() -> TyVf
    void completeAction() -> WGJn
react.api.IActionSource -> ftyu:
    void sendResponse(java.lang.String) -> DYFV
    void sendResponseSuccess(java.lang.String) -> IWSm
    void sendResponseError(java.lang.String) -> OXeK
    void sendResponseActing(java.lang.String) -> YoSa
react.api.ICache -> mXMK:
    react.glang.GSet get(java.lang.Object) -> ssNb
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> DYFV
    void clear() -> clear
    boolean has(java.lang.Object) -> IWSm
    react.glang.GList k() -> rwyd
react.api.ICommand -> HBqU:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> PuYf
    java.lang.String[] getPermissions() -> TNbD
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    react.api.SideGate getSideGate() -> LGKN
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ssNb
react.api.IRecord -> NxGC:
    java.lang.String getRecordType() -> NUdB
    long getRecordTime() -> OOtu
    react.json.JSONObject toJSON() -> aLYV
    java.lang.Object getRecordObject() -> Smci
    void fromJSON(react.json.JSONObject) -> ssNb
react.api.IRecordBook -> GsQl:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> ssNb
    long getOldestRecordTime() -> oVCY
    void addRecord(react.api.IRecord) -> ssNb
    long getLatestRecordTime() -> nImU
    int countRecords(long,long) -> ssNb
    react.glang.GMap getRecords(long,long) -> DYFV
    int purgeRecordsBefore(long) -> DYFV
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> DXfX:
    java.lang.String getID() -> getID
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> KwOT
    react.surge.util.C getAltColor() -> KUKx
    void setColor(react.surge.util.C,react.surge.util.C) -> ssNb
    int getInterval() -> getInterval
    void setInterval(int) -> DYFV
    void sample() -> avmQ
    java.lang.String get() -> get
    void construct() -> CMSR
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> EmKi:
    react.api.SelectionMode getMode() -> CoXE
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> OXeK
    react.glang.GSet getList() -> ftyu
    react.glang.GSet getPossibilities() -> mXMK
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> jhSt
    java.lang.String getName() -> getName
react.api.Injection -> ejGG:
    react.api.InjectionMethod value() -> HBqU
react.api.InjectionMethod -> TNcV:
    react.api.InjectionMethod SWAP -> JbuU
    react.api.InjectionMethod SUBSTRATE -> RkNM
    react.api.InjectionMethod RELOAD -> vJEF
    react.api.InjectionMethod[] $VALUES -> Nodd
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> INcj:
    java.lang.String value() -> value
react.api.MSampler -> VCgr:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> NxGC
react.api.MonitorHeading -> gEXv:
    react.api.ISampler head -> JkiO
    react.glang.GList children -> pXtD
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> ssNb
    27:27:react.api.ISampler getHead() -> GsQl
    32:33:void setHead(react.api.ISampler) -> DYFV
    37:37:react.glang.GList getChildren() -> DXfX
    42:42:java.lang.String getHeadText() -> EmKi
    47:60:java.lang.String getChildText() -> ejGG
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> ssNb
react.api.NoiseGenerator -> tvRU:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> dntE:
    react.api.NoiseGenerator[] octaves -> ktXk
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> TNcV
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> RbOr:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> NgTe
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> INcj
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> KCiG:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> ssNb
react.api.Permissable -> tdpC:
    react.api.Permissable ACCESS -> vswA
    react.api.Permissable MONITOR -> yBLM
    react.api.Permissable MONITOR_TITLE -> IXEl
    react.api.Permissable MONITOR_MAP -> nRmP
    react.api.Permissable MONITOR_ENVIRONMENT -> uyeC
    react.api.Permissable MONITOR_GLASSES -> DsJQ
    react.api.Permissable RAI_MONITOR -> XdPy
    react.api.Permissable RAI_CONTROL -> FMxr
    react.api.Permissable RAI_ACCESS -> IXDX
    react.api.Permissable RAI -> LqnN
    react.api.Permissable ACT -> jXBg
    react.api.Permissable RELOAD -> CNCt
    java.lang.String node -> rgig
    react.api.Permissable[] $VALUES -> IygB
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    25:35:void <init>(java.lang.String,int,java.lang.String) -> <init>
    39:39:boolean has(org.bukkit.command.CommandSender) -> ssNb
    44:44:java.lang.String getNode() -> VCgr
    7:20:void <clinit>() -> <clinit>
react.api.PlayerActionSource -> PBWX:
    org.bukkit.entity.Player p -> JIdp
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> DYFV
    30:31:void sendResponseSuccess(java.lang.String) -> IWSm
    36:37:void sendResponseError(java.lang.String) -> OXeK
    42:43:void sendResponseActing(java.lang.String) -> YoSa
react.api.PluginSelfDeleter -> hbNa:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> aeww
    java.lang.Runnable r -> TNqe
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> ssNb
react.api.RAIActionSource -> gEYM:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> DYFV
    16:17:void sendResponseSuccess(java.lang.String) -> IWSm
    22:23:void sendResponseError(java.lang.String) -> OXeK
    28:29:void sendResponseActing(java.lang.String) -> YoSa
react.api.ReactCommand -> Aqbp:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> VoJs
    java.lang.String usage -> ktXM
    java.lang.String description -> description
    react.api.SideGate sideGate -> IFas
    13:15:void <init>() -> <init>
    20:20:java.lang.String getCommand() -> getCommand
    26:26:java.lang.String[] getAliases() -> PuYf
    32:32:java.lang.String[] getPermissions() -> TNbD
    38:38:java.lang.String getUsage() -> getUsage
    44:44:java.lang.String getDescription() -> getDescription
    50:50:react.api.SideGate getSideGate() -> LGKN
react.api.ReactException -> KTmF:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> bXOh:
    react.glang.GMap keystore -> qBdN
    boolean monitoring -> monitoring
    boolean glasses -> mrMJ
    boolean mapping -> bPKY
    int monitorSelection -> CpFK
    int plays -> imom
    boolean monitorPosted -> DrhM
    int monitorLastSelection -> PKWY
    int switchNotification -> GtBM
    int hotbarSlot -> nuPQ
    boolean shift -> OGsT
    int scroll -> wevr
    double lastHeight -> DQFV
    boolean heightMovement -> WFya
    org.bukkit.entity.Player p -> JIdp
    39:84:void <init>(org.bukkit.entity.Player) -> <init>
    90:97:void save() -> save
    103:110:void load() -> load
    114:114:boolean isMonitoring() -> gEXv
    119:119:boolean isMapping() -> tvRU
    124:124:org.bukkit.entity.Player getP() -> dntE
    129:130:void setMonitoring(boolean) -> DYFV
    134:135:void setMapping(boolean) -> IWSm
    139:139:int getMonitorSelection() -> RbOr
    144:145:void setMonitorSelection(int) -> IWSm
    149:149:int getHotbarSlot() -> KCiG
    154:155:void setHotbarSlot(int) -> OXeK
    159:159:boolean isShifting() -> tdpC
    164:165:void setShifting(boolean) -> OXeK
    169:169:boolean isShift() -> PBWX
    174:175:void setShift(boolean) -> YoSa
    179:179:int getScroll() -> hbNa
    184:185:void setScroll(int) -> YoSa
    189:189:int getMonitorLastSelection() -> gEYM
    194:195:void setMonitorLastSelection(int) -> jhSt
    199:200:void setP(org.bukkit.entity.Player) -> ssNb
    204:204:double getLastHeight() -> Aqbp
    209:210:void setLastHeight(double) -> ssNb
    214:214:boolean isHeightMovement() -> KTmF
    219:220:void setHeightMovement(boolean) -> jhSt
    224:224:int getSwitchNotification() -> bXOh
    229:230:void setSwitchNotification(int) -> BkpW
    234:234:boolean getMonitorPosted() -> LGOT
    239:240:void setMonitorPosted(boolean) -> BkpW
    244:244:int getPlays() -> Lhpt
    249:250:void setPlays(int) -> lCdp
    254:254:boolean isGlasses() -> uxwg
    259:260:void setGlasses(boolean) -> lCdp
    23:37:void <clinit>() -> <clinit>
react.api.Record -> LGOT:
    java.lang.String recordType -> jyhK
    long recordTime -> piwO
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> NUdB
    32:32:long getRecordTime() -> OOtu
    38:38:java.lang.Object getRecordObject() -> Smci
    react.json.JSONObject toJSON() -> aLYV
    void fromJSON(react.json.JSONObject) -> ssNb
react.api.RecordBook -> Lhpt:
    java.io.File recordFile -> rEii
    react.json.JSONObject js -> OrjV
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> ssNb
    79:87:react.api.IRecord getRecord(long) -> ssNb
    react.api.IRecord createDummyRecord(long,java.lang.String) -> ssNb
    95:107:long getOldestRecordTime() -> oVCY
    113:125:long getLatestRecordTime() -> nImU
    130:130:boolean within(long,long,long) -> ssNb
    136:144:int countRecords(long,long) -> ssNb
    150:162:react.glang.GMap getRecords(long,long) -> DYFV
    168:181:int purgeRecordsBefore(long) -> DYFV
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> uxwg:
react.api.SampledChunk -> HKdE:
    org.bukkit.Chunk c -> Oixf
    react.glang.GMap counts -> UIbl
    12:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> HKdE
    26:38:void hit(react.api.ChunkIssue,int) -> ssNb
    42:42:org.bukkit.Chunk getC() -> pqxh
    47:47:react.glang.GMap getCounts() -> GkDg
react.api.SampledType -> pqxh:
    react.api.SampledType REDSTONE_TICK_USAGE -> cuSa
    react.api.SampledType REDSTONE_TICK -> WqqP
    react.api.SampledType REDSTONE_SECOND -> gFKj
    react.api.SampledType REDSTONE_TIME -> ktYs
    react.api.SampledType HOPPER_TICK_USAGE -> qJwE
    react.api.SampledType HOPPER_TICK -> rWKg
    react.api.SampledType HOPPER_SECOND -> SKrK
    react.api.SampledType HOPPER_TIME -> dVTX
    react.api.SampledType TPS -> BAnt
    react.api.SampledType TICK -> qKWl
    react.api.SampledType TIU -> DajI
    react.api.SampledType MEM -> ePfK
    react.api.SampledType FREEMEM -> OiyY
    react.api.SampledType MAXMEM -> Rsag
    react.api.SampledType ALLOCMEM -> Hecg
    react.api.SampledType MAHS -> lDXV
    react.api.SampledType CHK -> FFKt
    react.api.SampledType CHKS -> ObHd
    react.api.SampledType ENT -> RsbV
    react.api.SampledType ENTLIV -> hHko
    react.api.SampledType ENTDROP -> JRXe
    react.api.SampledType ENTTILE -> kcXK
    java.lang.String node -> rgig
    react.api.SampledType[] $VALUES -> Eult
    5:5:react.api.SampledType[] values() -> values
    5:5:react.api.SampledType valueOf(java.lang.String) -> valueOf
    33:43:void <init>(java.lang.String,int,java.lang.String) -> <init>
    47:47:java.lang.String getNode() -> VCgr
    5:28:void <clinit>() -> <clinit>
react.api.Sampler -> GkDg:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> UlKG
    react.surge.util.C altColor -> tnSF
    int interval -> SfEN
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> KwOT
    49:49:react.surge.util.C getAltColor() -> KUKx
    55:55:int getInterval() -> getInterval
    void sample() -> avmQ
    void construct() -> CMSR
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> ssNb
    107:108:void setInterval(int) -> DYFV
react.api.Sector -> HKcf:
    int value() -> value
react.api.SelectionException -> cRaV:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> GHaL:
    react.api.SelectionMode WHITELIST -> qlxe
    react.api.SelectionMode BLACKLIST -> OjYY
    react.api.SelectionMode[] $VALUES -> URWs
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> OPXm:
    java.lang.Class objectType -> oxTu
    react.api.SelectionMode mode -> xOnL
    react.glang.GSet list -> SCcW
    react.glang.GSet possibilities -> VoQC
    int popoff -> vlLH
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> CoXE
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> OXeK
    43:43:react.glang.GSet getList() -> ftyu
    49:49:react.glang.GSet getPossibilities() -> mXMK
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> jhSt
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> BkpW
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> sapB:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> IWSm
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> jhSt
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> lCdp
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> kYwm:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> jyXs:
    16:17:void <init>() -> <init>
    21:22:void add(org.bukkit.Chunk) -> IWSm
    26:27:void add(org.bukkit.Chunk,int) -> ssNb
    31:35:void add(org.bukkit.World) -> ssNb
    39:43:void addAll() -> HKcf
    48:91:int parse(org.bukkit.command.CommandSender,java.lang.String) -> jhSt
    96:277:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> lCdp
    283:283:java.lang.String getName() -> getName
react.api.SelectorTime -> uWVB:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> jhSt
    87:87:java.lang.String getName() -> getName
react.api.Side -> HCSq:
    react.api.Side PLAYERS -> Tyjs
    react.api.Side CONSOLE -> ydSf
    java.lang.String ss -> cSRj
    react.api.Side[] $VALUES -> nRrG
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> cRaV
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> DYFV
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> OikN:
    react.api.SideGate PLAYERS_ONLY -> jWgW
    react.api.SideGate CONSOLES_ONLY -> OGxH
    react.api.SideGate ANYTHING -> LaRg
    react.api.SideGate[] $VALUES -> qBiS
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> ssNb
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> OikN$1:
    int[] $SwitchMap$react$api$SideGate -> Vnoo
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> iSqp:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> MBST
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> GHaL
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> YnwU:
    double wScale -> ifEk
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> ssNb
react.api.StackTraceList -> owfl:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> kRIL:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> aLYV
    38:49:void fromJSON(react.json.JSONObject) -> ssNb
react.api.StackTraceRecordBook -> ejJV:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> DYFV
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> ssNb
react.api.StackedEntity -> UbkT:
    org.bukkit.entity.LivingEntity entity -> BSSn
    int count -> count
    double rmx -> OsLy
    20:30:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    34:34:int getAbsoluteMaxCount() -> OPXm
    39:39:int getMaxCount(org.bukkit.entity.LivingEntity) -> ssNb
    44:46:void update() -> update
    50:56:void signalSize() -> sapB
    60:101:void updateHealth() -> kYwm
    105:106:void heal(double) -> DYFV
    110:111:void setHealth(double) -> setHealth
    115:115:int getEffectiveCount() -> jyXs
    120:120:int getEffectiveCount(double) -> IWSm
    125:125:double getEffectiveMaxHealth(int) -> nJLQ
    130:130:double getRealMaxHealth() -> uWVB
    135:135:double getHealth() -> getHealth
    140:146:void setMaxHealth(double) -> setMaxHealth
    150:150:double getMaxHealth() -> getMaxHealth
    155:155:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    160:160:int getCount() -> getCount
react.api.TitleMonitor -> BBAa:
    react.glang.GList headings -> RkTm
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> ssNb
    24:24:int getMaxSelection() -> HCSq
    29:37:int left(int) -> vtFs
    42:50:int right(int) -> EmLA
    55:55:react.api.MonitorHeading getHeadFor(int) -> WGJn
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> ssNb
    83:100:java.lang.String getHotbarFor(int,boolean) -> ssNb
react.api.Unused -> YffC:
react.cache.CachedEntity -> HuvK:
    java.util.UUID uid -> ssbd
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> GHqf
    double x -> x
    double y -> y
    double z -> z
    double vx -> dfwH
    double vy -> upwg
    double vz -> fSkO
    double dx -> tLRe
    double dy -> RkTB
    double dz -> YUuA
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> nJLQ
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> OikN
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> iSqp
    120:121:void setVx(double) -> OXeK
    125:125:double getVy() -> YnwU
    130:131:void setVy(double) -> YoSa
    135:135:double getVz() -> owfl
    140:141:void setVz(double) -> jhSt
    145:145:double getDx() -> kRIL
    150:151:void setDx(double) -> BkpW
    155:155:double getDy() -> ejJV
    160:161:void setDy(double) -> lCdp
    165:165:double getDz() -> UbkT
    170:171:void setDz(double) -> nJLQ
    175:175:java.util.UUID getUid() -> BBAa
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> RkCQ:
    int age -> MctC
    boolean ageLock -> ndRm
    boolean breed -> Mcsc
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> nJLQ
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> YffC
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> HuvK
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> mhnc:
    org.bukkit.DyeColor dye -> uOTo
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> nJLQ
    30:30:org.bukkit.DyeColor getDye() -> RkCQ
    35:36:void setDye(org.bukkit.DyeColor) -> ssNb
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> YDcD:
    react.glang.GList potionEffects -> ogUp
    boolean canPickupItems -> jGEc
    org.bukkit.inventory.ItemStack[] armorContents -> VoOY
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> dVUE
    double maxHealth -> maxHealth
    int maxAir -> BtwX
    int air -> bPOA
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> nJLQ
    63:63:react.glang.GList getPotionEffects() -> mhnc
    68:69:void setPotionEffects(react.glang.GList) -> DYFV
    73:73:boolean isCanPickupItems() -> YDcD
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> WiQN
    138:139:void setMaxAir(int) -> TyVf
    143:143:int getAir() -> aCiR
    148:149:void setAir(int) -> LGKl
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> WiQN:
    boolean sheared -> dogY
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> nJLQ
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> aCiR:
    org.bukkit.inventory.ItemStack is -> gEkj
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> nJLQ
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> YEBy:
    7:7:void <init>() -> <init>
react.command.CommandAct -> oxGX:
    28:36:void <init>() -> <init>
    41:128:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ssNb
react.command.CommandCPUScore -> kAFo:
    16:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ssNb
react.command.CommandFreeze -> tvSr:
    15:22:void <init>() -> <init>
    29:52:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ssNb
react.command.CommandGlasses -> VfMm:
    16:24:void <init>() -> <init>
    29:31:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ssNb
react.command.CommandHelp -> fcyq:
    15:22:void <init>() -> <init>
    27:28:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ssNb
react.command.CommandMonitor -> RPon:
    16:24:void <init>() -> <init>
    29:31:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ssNb
react.command.CommandReload -> YoWX:
    18:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ssNb
react.command.CommandStatus -> wfLE:
    26:34:void <init>() -> <init>
    39:47:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ssNb
    51:60:org.bukkit.inventory.ItemStack makeBook() -> YEBy
    65:91:void addSpikePages(react.glang.GList) -> IWSm
    95:105:void addStatusPages(react.glang.GList) -> OXeK
    109:126:int findSlot(org.bukkit.entity.Player) -> DYFV
react.controller.ActionController -> yuFb:
    int kiv -> qdiv
    react.glang.GMap actions -> YgWf
    react.glang.GMap pending -> fCIb
    18:18:void <init>() -> <init>
    27:67:void start() -> start
    71:72:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> ssNb
    76:97:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> DYFV
    102:102:react.api.IAction getAction(react.api.ActionType) -> ssNb
    107:108:void registerAction(react.api.IAction) -> ssNb
    114:114:void stop() -> stop
    119:133:void tick() -> tick
    137:137:react.glang.GList getActions() -> oxGX
    20:20:void <clinit>() -> <clinit>
react.controller.CommandController -> wDLU:
    react.glang.GList commands -> AXbM
    boolean k -> HTdw
    30:30:void <init>() -> <init>
    38:39:void start() -> start
    44:45:void stop() -> stop
    49:94:void begin() -> begin
    99:103:void tick() -> tick
    107:108:void msg(org.bukkit.command.CommandSender,java.lang.String) -> nJLQ
    112:113:void f(org.bukkit.command.CommandSender,java.lang.String) -> vtFs
    118:285:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
react.controller.DropMergeController -> EvBS:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:46:void on(org.bukkit.event.entity.ItemMergeEvent) -> ssNb
    51:116:void tick() -> tick
    120:195:void stack(org.bukkit.entity.Item,org.bukkit.entity.Item) -> ssNb
    199:275:void merge(org.bukkit.entity.Item,org.bukkit.entity.Item) -> DYFV
react.controller.DropMergeController$1 -> EvBS$1:
    org.bukkit.World val$i -> piwi
    react.controller.DropMergeController this$0 -> JkoN
    66:66:void <init>(react.controller.DropMergeController,org.bukkit.World) -> <init>
    70:107:void run() -> run
react.controller.EntityCacheController -> tCRu:
    react.glang.GMap caches -> sbdE
    int cachedEntities -> PvRY
    int cachedDrops -> EurP
    49:49:boolean enabled() -> enabled
    44:55:void <init>() -> <init>
    59:73:void push(org.bukkit.World) -> DYFV
    77:91:void pop(org.bukkit.Chunk) -> OXeK
    95:140:void pop(org.bukkit.entity.Entity) -> vtFs
    144:152:boolean hasUid(java.util.UUID,org.bukkit.Chunk) -> ssNb
    157:195:int push(org.bukkit.Chunk) -> YoSa
    200:204:void cworld(org.bukkit.World) -> IWSm
    209:215:void on(org.bukkit.event.world.WorldLoadEvent) -> ssNb
    220:226:void on(org.bukkit.event.world.ChunkUnloadEvent) -> ssNb
    231:238:void on(org.bukkit.event.world.WorldUnloadEvent) -> ssNb
    243:244:void start() -> start
    249:250:void stop() -> stop
    254:254:boolean isCached(org.bukkit.Chunk) -> jhSt
    260:269:void on(org.bukkit.event.entity.EntitySpawnEvent) -> ssNb
    274:344:void tick() -> tick
    348:348:react.glang.GMap getCaches() -> kAFo
    353:353:int getCachedEntities() -> tvSr
    358:358:int getCachedDrops() -> VfMm
    363:363:int getCachedTotals() -> fcyq
react.controller.EntityCullController -> cAai:
    react.glang.GSet flags -> KgBy
    react.glang.GSet defer -> YokS
    react.glang.GMap maxs -> MJeY
    18:18:void <init>() -> <init>
    27:31:void start() -> start
    37:37:void stop() -> stop
    43:43:void tick() -> tick
    47:167:void repopulateRules() -> RPon
    171:179:int cull(org.bukkit.Chunk) -> BkpW
    184:284:int partialCull(org.bukkit.Chunk) -> lCdp
react.controller.EntityStackController -> JRMO:
    react.glang.GList stacks -> vIhv
    18:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:52:void tick() -> tick
    56:83:void stack(react.glang.GList) -> YoSa
    87:92:boolean isStacked(org.bukkit.entity.LivingEntity) -> DYFV
    97:110:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> IWSm
    116:134:void on(org.bukkit.event.entity.EntityDamageEvent) -> ssNb
    138:153:void merge(react.api.StackedEntity,react.api.StackedEntity) -> ssNb
    157:208:void checkNear(org.bukkit.entity.LivingEntity) -> OXeK
    213:235:void on(org.bukkit.event.entity.EntitySpawnEvent) -> ssNb
react.controller.EntityStackController$1 -> JRMO$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> agAu
    react.controller.EntityStackController this$0 -> FqEs
    221:221:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    225:232:void run() -> run
react.controller.FastDecayController -> WFpH:
    18:18:void <init>() -> <init>
    23:24:void start() -> start
    29:30:void stop() -> stop
    35:41:void on(org.bukkit.event.block.BlockBreakEvent) -> ssNb
    45:121:void checkBreak(org.bukkit.block.Block) -> DYFV
    127:127:void tick() -> tick
react.controller.FastDecayController$1 -> WFpH$1:
    react.glang.GMap val$locs -> BSVJ
    react.controller.FastDecayController this$0 -> NDxA
    55:55:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    59:59:boolean isAllowedSplooge(org.bukkit.Location) -> ssNb
    65:65:boolean isAllowedSource(org.bukkit.Location) -> DYFV
    71:90:void clipped(org.bukkit.Location) -> IWSm
    95:118:void finished() -> finished
react.controller.FastDecayController$1$1 -> WFpH$1$1:
    int val$i -> ydUP
    react.controller.FastDecayController$1 this$1 -> Vwai
    100:100:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,int) -> <init>
    104:114:void run() -> run
react.controller.GlassController -> tKcS:
    react.glang.GMap q -> tnWQ
    react.glang.GList g -> Oajx
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:124:void tick() -> tick
    128:128:boolean isUsingGlasses(org.bukkit.entity.Player) -> IWSm
    133:133:boolean canUseGlasses(org.bukkit.entity.Player) -> OXeK
    138:154:void toggleGlasses(org.bukkit.entity.Player) -> YoSa
    159:164:void on(org.bukkit.event.block.BlockPhysicsEvent) -> ssNb
    169:174:void on(org.bukkit.event.block.BlockFromToEvent) -> ssNb
    179:184:void on(org.bukkit.event.block.BlockBurnEvent) -> ssNb
    189:194:void on(org.bukkit.event.block.BlockFormEvent) -> ssNb
    199:204:void on(org.bukkit.event.block.BlockFadeEvent) -> ssNb
    209:221:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> ssNb
    36:36:react.glang.GList access$0(react.controller.GlassController) -> ssNb
react.controller.GlassController$1 -> tKcS$1:
    react.controller.GlassController this$0 -> yRrK
    react.glang.GMap val$cc -> BKGQ
    1:79:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    84:122:void run() -> run
react.controller.GlassController$1$1 -> tKcS$1$1:
    react.controller.GlassController$1 this$1 -> ofwX
    org.bukkit.Location val$i -> aoQC
    org.bukkit.entity.Player val$j -> CDwg
    1:101:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    106:111:void run() -> run
react.controller.HopperController -> XthG:
    react.glang.GSet ignore -> GcEw
    int transfersPerTick -> GHsC
    int transfersPerSecond -> WrUT
    react.gmath.Average aHST -> LYCf
    react.gmath.Average aHSS -> oETd
    react.gmath.Average aHSMS -> YpKG
    boolean firstTickList -> JIlF
    long firstTick -> maRM
    long lastTick -> rhQD
    react.glang.GSet frozen -> Vwau
    react.glang.GMap queue -> cmJN
    react.glang.GMap freezeTimes -> Svko
    24:24:void <init>() -> <init>
    42:56:void start() -> start
    60:65:void releaseChunk(org.bukkit.Chunk) -> nJLQ
    69:77:void checkChunks() -> YoWX
    81:98:void checkChunk(org.bukkit.Chunk) -> vtFs
    102:108:void queue(org.bukkit.block.Block) -> IWSm
    112:112:boolean isFrozen(org.bukkit.Chunk) -> EmLA
    117:118:void freeze(org.bukkit.Chunk) -> WGJn
    122:143:void unfreeze(org.bukkit.Chunk) -> TyVf
    147:169:void freeze(org.bukkit.Chunk,long) -> ssNb
    174:175:void stop() -> stop
    180:186:void tick() -> tick
    190:199:void flushTickList() -> wfLE
    203:213:void tickNextTickList() -> yuFb
    218:237:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> ssNb
    241:241:react.glang.GSet getIgnore() -> wDLU
    246:246:int getTransfersPerTick() -> EvBS
    251:251:int getTransfersPerSecond() -> tCRu
    256:256:react.gmath.Average getaHST() -> cAai
    261:261:react.gmath.Average getaHSS() -> JRMO
    266:266:react.gmath.Average getaHSMS() -> WFpH
    271:271:boolean isFirstTickList() -> tKcS
    276:276:long getFirstTick() -> XthG
    281:281:long getLastTick() -> GIDW
    286:286:react.glang.GSet getFrozen() -> YUgh
    291:291:react.glang.GMap getQueue() -> YDey
    296:296:react.glang.GMap getFreezeTimes() -> tLCm
react.controller.HopperController$1 -> XthG$1:
    react.controller.HopperController this$0 -> eroQ
    org.bukkit.Chunk val$c -> uFhi
    1:129:void <init>(react.controller.HopperController,org.bukkit.Chunk) -> <init>
    134:141:void run() -> run
react.controller.HopperController$2 -> XthG$2:
    react.controller.HopperController this$0 -> eroQ
    org.bukkit.Chunk val$c -> uFhi
    long val$ms -> VweQ
    1:155:void <init>(react.controller.HopperController,org.bukkit.Chunk,long) -> <init>
    160:167:void run() -> run
react.controller.MonitorController -> GIDW:
    int maxCooldown -> mYEM
    react.api.TitleMonitor titleMonitor -> IXMc
    react.glang.GMap posts -> fCNW
    31:31:void <clinit>() -> <clinit>
    35:39:void <init>() -> <init>
    44:55:void start() -> start
    59:75:void toggleMonitoring(org.bukkit.entity.Player) -> jhSt
    80:82:void stop() -> stop
    86:105:void constructMonitor() -> TOJM
    109:114:float calcVolume(react.api.ReactPlayer) -> ssNb
    119:119:boolean canMonitor(org.bukkit.entity.Player) -> BkpW
    124:129:boolean isMonitoring(org.bukkit.entity.Player) -> lCdp
    134:138:void startMonitoring(org.bukkit.entity.Player) -> nJLQ
    142:153:void stopMonitoring(org.bukkit.entity.Player) -> vtFs
    159:159:void tick() -> tick
    163:166:void changePost(react.api.ReactPlayer) -> DYFV
    170:179:void processPlayer(react.api.ReactPlayer) -> IWSm
    183:207:void handleTriggers(react.api.ReactPlayer) -> OXeK
    211:250:void handleScrolling(react.api.ReactPlayer) -> YoSa
    254:282:void handleShifting(react.api.ReactPlayer) -> jhSt
    286:308:void handlePosting(react.api.ReactPlayer) -> BkpW
    312:330:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> ssNb
    335:349:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> ssNb
    354:361:void tickMonitor(react.api.ReactPlayer) -> lCdp
    365:365:react.api.TitleMonitor getTitleMonitor() -> uOFv
    371:375:void on(org.bukkit.event.player.PlayerJoinEvent) -> ssNb
    380:389:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> ssNb
    394:405:void onTick() -> FFBA
    410:410:java.lang.String getTickName() -> BuHU
react.controller.PhysicsController -> YUgh:
    react.glang.GMap samples -> ObOd
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> LGKl
    51:52:void onHopper(org.bukkit.Chunk) -> ykmX
    57:58:void on(org.bukkit.event.world.ChunkUnloadEvent) -> ssNb
    62:68:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> ssNb
    75:86:void onTick() -> FFBA
    91:91:java.lang.String getTickName() -> BuHU
    96:96:react.glang.GMap getSamples() -> bqcB
react.controller.PlayerController -> YDey:
    react.glang.GList players -> dNIb
    12:12:void <init>() -> <init>
    19:21:void start() -> start
    26:27:void stop() -> stop
    33:33:void tick() -> tick
    37:45:boolean has(org.bukkit.entity.Player) -> EmLA
    50:61:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> WGJn
    66:66:react.glang.GList getPlayers() -> kQhu
    72:77:void on(org.bukkit.event.player.PlayerQuitEvent) -> ssNb
react.controller.RAIController -> tLCm:
    react.rai.IRAI rai -> WXdi
    boolean raiEnabled -> vlPR
    14:14:void <init>() -> <init>
    22:31:void start() -> start
    36:37:void stop() -> stop
    42:46:void tick() -> tick
react.controller.RedstoneController -> TOJM:
    react.glang.GSet ignore -> GcEw
    react.glang.GSet frozen -> Vwau
    react.glang.GMap queue -> cmJN
    react.glang.GMap freezeTimes -> Svko
    int redstonePerTick -> VfdN
    int redstonePerSecond -> TiNm
    react.gmath.Average aRST -> KoUa
    react.gmath.Average aRSS -> mrUv
    react.gmath.Average aRSMS -> kIkt
    boolean firstTickList -> JIlF
    long firstTick -> maRM
    long lastTick -> rhQD
    26:26:void <init>() -> <init>
    44:74:void start() -> start
    79:85:void stop() -> stop
    89:94:void releaseChunk(org.bukkit.Chunk) -> nJLQ
    99:105:void tick() -> tick
    109:117:void checkChunks() -> YoWX
    121:138:void checkChunk(org.bukkit.Chunk) -> vtFs
    142:148:void queue(org.bukkit.block.Block) -> IWSm
    152:152:boolean isFrozen(org.bukkit.Chunk) -> EmLA
    157:158:void freeze(org.bukkit.Chunk) -> WGJn
    162:169:void flushTickList() -> wfLE
    173:183:void tickNextTickList() -> yuFb
    187:208:void unfreeze(org.bukkit.Chunk) -> TyVf
    212:234:void freeze(org.bukkit.Chunk,long) -> ssNb
    239:240:void on(org.bukkit.event.world.ChunkUnloadEvent) -> ssNb
    245:258:void on(org.bukkit.event.block.BlockPhysicsEvent) -> ssNb
    263:276:void on(org.bukkit.event.block.BlockFromToEvent) -> ssNb
    280:280:react.glang.GSet getIgnore() -> wDLU
    285:285:react.glang.GSet getFrozen() -> YUgh
    290:290:react.glang.GMap getQueue() -> YDey
    295:295:react.glang.GMap getFreezeTimes() -> tLCm
    300:300:int getRedstonePerTick() -> KeoU
    305:305:int getRedstonePerSecond() -> dDce
    310:310:react.gmath.Average getaRST() -> dMUO
    315:315:react.gmath.Average getaRSS() -> SuxL
    320:320:react.gmath.Average getaRSMS() -> hjbe
    325:325:boolean isFirstTickList() -> tKcS
    330:330:long getFirstTick() -> XthG
    335:335:long getLastTick() -> GIDW
react.controller.RedstoneController$1 -> TOJM$1:
    react.controller.RedstoneController this$0 -> HelD
    org.bukkit.Chunk val$c -> uFhi
    1:194:void <init>(react.controller.RedstoneController,org.bukkit.Chunk) -> <init>
    199:206:void run() -> run
react.controller.RedstoneController$2 -> TOJM$2:
    react.controller.RedstoneController this$0 -> HelD
    org.bukkit.Chunk val$c -> uFhi
    long val$ms -> VweQ
    1:220:void <init>(react.controller.RedstoneController,org.bukkit.Chunk,long) -> <init>
    225:232:void run() -> run
react.controller.SampleController -> uOFv:
    react.glang.GMap samplers -> bXeC
    react.surge.server.SuperSampler ss -> uOYl
    int cd -> cuYy
    25:30:void <init>() -> <init>
    34:35:void registerSampler(react.api.ISampler) -> IWSm
    39:39:react.api.ISampler getSampler(java.lang.String) -> jhSt
    44:87:void constructSamplers() -> hjbh
    92:95:void start() -> start
    100:103:void stop() -> stop
    109:109:void tick() -> tick
    113:113:react.surge.server.SuperSampler getSuperSampler() -> vIXT
    119:141:void onTick() -> FFBA
    146:146:java.lang.String getTickName() -> BuHU
react.controller.SecurityController -> FFBA:
    react.glang.GList failures -> uFha
    8:8:void <init>() -> <init>
    15:23:void start() -> start
    27:40:void scan(java.lang.Runnable) -> ssNb
    46:46:void stop() -> stop
    52:52:void tick() -> tick
    10:10:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> FFBA$1:
    react.controller.SecurityController this$0 -> Vfch
    16:16:void <init>(react.controller.SecurityController) -> <init>
    21:21:void run() -> run
react.controller.SpikeController -> BuHU:
    react.glang.GMap spikes -> oDvn
    23:25:void <init>() -> <init>
    30:57:void start() -> start
    62:63:void stop() -> stop
    69:98:void onTick() -> FFBA
    103:103:java.lang.String getTickName() -> BuHU
    111:111:void tick() -> tick
    115:115:react.glang.GMap getSpikes() -> QhBc
react.controller.SpikeController$1 -> BuHU$1:
    react.controller.SpikeController this$0 -> TiNq
    1:32:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    37:55:void run() -> run
react.controller.SpikeController$1$1 -> BuHU$1$1:
    react.controller.SpikeController$1 this$1 -> lwcK
    1:37:void <init>(react.controller.SpikeController$1) -> <init>
    42:53:void run() -> run
react.controller.SploogeCounter -> bqcB:
    react.glang.GList sources -> xPRO
    react.glang.GList splooge -> hRDm
    react.glang.GSet destroy -> xqsu
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> ssNb
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> DYFV
    void clipped(org.bukkit.Location) -> IWSm
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> ssNb
    boolean isAllowedSource(org.bukkit.Location) -> DYFV
    15:15:react.glang.GList access$000(react.controller.SploogeCounter) -> ssNb
    15:15:react.glang.GList access$100(react.controller.SploogeCounter) -> DYFV
    15:15:react.glang.GSet access$200(react.controller.SploogeCounter) -> IWSm
react.controller.SploogeCounter$1 -> bqcB$1:
    java.util.Iterator val$it -> GcHN
    org.bukkit.Location val$start -> RcFw
    int val$maxDistance -> iLVg
    react.controller.SploogeCounter this$0 -> AHEy
    32:32:void <init>(react.controller.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.controller.SploogeCounter$1$1 -> bqcB$1$1:
    react.controller.SploogeCounter$1 this$1 -> fmaU
    90:90:void <init>(react.controller.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.controller.TickTimeController -> kQhu:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.gbench.Profiler -> KeoU:
    long nanos -> vkmt
    long startNano -> UIlb
    long millis -> gxtb
    long startMillis -> yuXD
    double time -> WPTV
    boolean profiling -> GHuK
    15:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> ykmX
    78:78:double getTicks() -> Pubc
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> BBFe
    93:93:double getHours() -> xqeH
    98:98:double getMilliseconds() -> hYdh
    103:103:long getNanoseconds() -> tdxF
    108:108:long getNanos() -> clWu
    113:113:long getStartNano() -> dMWs
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> TFYr
    128:128:double getTime() -> ccgJ
    133:133:boolean isProfiling() -> GYgG
react.gconcurrent.A -> dDce:
    react.gconcurrent.ParallelPoolManager mgr -> jXKD
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> dDce$1:
    react.gconcurrent.A this$0 -> CMjg
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> dMUO:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> SuxL:
    react.gconcurrent.QueueMode mode -> UlQL
    react.glang.GList threads -> FFRq
    int next -> VDcA
    int threadCount -> lwep
    java.util.Queue squeue -> vdBG
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> vkqV
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> VUcj
    22:23:void syncQueue(react.gconcurrent.Execution) -> ssNb
    long getNanoGate() -> FNTA
    29:51:void tickSyncQueue() -> aUPw
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> wfPa
    102:109:int getTotalQueueSize() -> EvEN
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> DYFV
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> ktOu
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> FNSj
    161:188:void updateThreadInformation() -> QyFw
    192:224:react.gconcurrent.ParallelThread nextThread() -> Iplh
    229:235:void createThreads(int) -> rwyd
    239:239:react.gconcurrent.QueueMode getMode() -> bqeB
    244:244:int getNext() -> BIwL
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> KwTH
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> VUOs
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> VCnE
react.gconcurrent.ParallelThread -> hjbe:
    java.util.Queue queue -> Daqe
    react.gconcurrent.ThreadInformation info -> vkqV
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> vtFs
    63:70:void execute(react.gconcurrent.Execution) -> IWSm
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> DYFV
    92:92:java.util.Queue getQueue() -> HdyI
    97:97:react.gconcurrent.ThreadInformation getInfo() -> TOKE
react.gconcurrent.QueueMode -> hjbh:
    react.gconcurrent.QueueMode ROUND_ROBIN -> QgwU
    react.gconcurrent.QueueMode SMALLEST -> psQT
    react.gconcurrent.QueueMode[] ENUM$VALUES -> TiQM
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> vIXT:
    react.gconcurrent.ParallelPoolManager mgr -> jXKD
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> vIXT$1:
    react.gconcurrent.S this$0 -> RcJi
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> QhBc:
    long tick -> fLAr
    long atick -> EeUm
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> Pubc:
    double ticksPerSecond -> AGfG
    int queuedSize -> kuDH
    boolean processing -> brXy
    double utilization -> GQhA
    react.gmath.Average ticksPerSecondAverage -> iThr
    long tick -> fLAr
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> tLDs
    33:35:void setTicksPerSecond(double) -> EmLA
    39:39:int getQueuedSize() -> vslr
    44:45:void setQueuedSize(int) -> hHYn
    49:49:boolean isProcessing() -> HTYB
    54:55:void setProcessing(boolean) -> nJLQ
    59:59:double getUtilization() -> lCky
    64:65:void setUtilization(double) -> WGJn
    69:69:double getTicksPerSecondAverage() -> FouE
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> EucK
    89:89:int getId() -> getId
react.gformat.F -> BBFe:
    java.text.NumberFormat NF -> lLqG
    java.text.DecimalFormat DF -> WjHa
    java.lang.String[] NAMES -> migF
    java.math.BigInteger THOUSAND -> ivky
    java.util.NavigableMap MAP -> ntyl
    22:33:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    37:54:java.lang.String capitalize(java.lang.String) -> capitalize
    59:66:java.lang.String capitalizeWords(java.lang.String) -> BkpW
    71:86:java.lang.String time(double,int) -> ssNb
    91:111:java.lang.String timeLong(long,int) -> ssNb
    116:116:java.lang.String b(int) -> b
    121:121:java.lang.String b(long) -> IWSm
    126:126:java.lang.String b(double) -> TyVf
    131:148:java.lang.String b(java.math.BigInteger) -> ssNb
    153:157:void instantiate() -> AOcy
    169:169:java.lang.String fileSize(long) -> OXeK
    182:182:java.lang.String memSize(long) -> YoSa
    195:196:java.lang.String stamp(long) -> jhSt
    212:239:java.lang.String ofSize(long,int) -> DYFV
    253:258:java.lang.String trim(java.lang.String,int) -> ssNb
    271:291:java.lang.String cname(java.lang.String) -> lCdp
    305:317:java.lang.String repeat(java.lang.String,int) -> repeat
    329:336:java.lang.String mem(long) -> BkpW
    349:367:java.lang.String memx(long) -> lCdp
    381:382:java.lang.String f(long) -> nJLQ
    394:395:java.lang.String f(int) -> kQcX
    409:418:java.lang.String f(double,int) -> DYFV
    434:443:java.lang.String fd(double,int) -> IWSm
    457:466:java.lang.String f(float,int) -> ssNb
    477:477:java.lang.String f(double) -> LGKl
    488:488:java.lang.String f(float) -> ssNb
    503:503:java.lang.String pc(double,int) -> OXeK
    518:518:java.lang.String pc(float,int) -> DYFV
    531:531:java.lang.String pc(double) -> ykmX
    544:544:java.lang.String pc(float) -> DYFV
    560:560:java.lang.String pc(int,int,int) -> ssNb
    574:574:java.lang.String pc(int,int) -> ssNb
    590:590:java.lang.String pc(long,long,int) -> ssNb
    604:604:java.lang.String pc(long,long) -> IWSm
    616:616:java.lang.String msSeconds(long) -> vtFs
    630:630:java.lang.String msSeconds(long,int) -> IWSm
    642:642:java.lang.String nsMs(long) -> EmLA
    656:656:java.lang.String nsMs(long,int) -> OXeK
    670:670:java.lang.String nsMsd(long,int) -> YoSa
react.glang.AccessCallback -> xqeH:
    java.lang.Object get() -> get
react.glang.Adapter -> hYdh:
    java.lang.Object adapt(java.lang.Object) -> YoSa
    java.lang.Object onAdapt(java.lang.Object) -> jhSt
react.glang.Callback -> tdxF:
    java.lang.Object t -> lLpl
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> BkpW
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> clWu:
    double i -> FOFL
    19:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> rwyd
react.glang.FinalFloat -> dMWs:
    float i -> i
    19:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> IWSm
react.glang.FinalInteger -> TFYr:
    int i -> i
    19:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> rMgK
react.glang.FinalLong -> ccgJ:
    long i -> cmKY
    19:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> WGJn
react.glang.FinalString -> GYgG:
    java.lang.String string -> string
    19:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> FNTA:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> YoSa
    java.lang.Object onAdapt(java.lang.Object) -> jhSt
react.glang.GBiset -> aUPw:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> HemE
    java.lang.Object b -> cAun
    30:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> GkIA
    53:54:void setA(java.lang.Object) -> lCdp
    63:63:java.lang.Object getB() -> YDfo
    73:74:void setB(java.lang.Object) -> nJLQ
react.glang.GList -> wfPa:
    long serialVersionUID -> serialVersionUID
    29:30:void <init>() -> <init>
    40:46:void <init>(java.util.Set) -> <init>
    56:62:void <init>(java.util.Collection) -> <init>
    72:78:void <init>(java.util.Iterator) -> <init>
    88:90:void <init>(java.lang.Object[]) -> <init>
    101:109:void <init>(java.util.List) -> <init>
    118:145:java.lang.Object mostCommon() -> dwji
    155:157:react.glang.GList shuffleCopy() -> QhEF
    165:166:void shuffle() -> ogMI
    177:203:react.glang.GList split() -> VoFU
    215:215:boolean hasIndex(int) -> cIji
    225:226:java.lang.Object pickRandom() -> QVde
    237:244:react.glang.GList stringList() -> fTAa
    255:259:void forEach(react.glang.Callback) -> ssNb
    268:268:int last() -> last
    282:287:int getIndexOrLast(int) -> Cnru
    303:303:react.glang.GList cropFrom(int) -> LWjo
    308:340:react.glang.GList split(int) -> PuYf
    356:356:react.glang.GList cropTo(int) -> TNbD
    373:383:react.glang.GList crop(int,int) -> DYFV
    394:398:react.glang.GList removeDuplicates() -> WqhV
    409:413:void removeAll(java.lang.Object) -> vtFs
    422:422:boolean hasDuplicates() -> jOKx
    430:438:void sort() -> sort
    451:457:void push(java.lang.Object,int) -> ssNb
    468:472:void add(java.lang.Object[]) -> add
    483:484:react.glang.GList qadd(java.lang.Object) -> EmLA
    495:499:void add(java.util.List) -> ssNb
    511:543:java.lang.String toString(java.lang.String) -> toString
    553:555:react.glang.GList reverse() -> OsCE
    564:564:java.lang.String toString() -> toString
    574:581:react.glang.GList copy() -> QyID
    593:594:react.glang.GList qdel(java.lang.Object) -> WGJn
    604:611:java.lang.Object pop() -> pop
    616:625:java.lang.Object popRandom() -> SKhs
react.glang.GList$1 -> wfPa$1:
    react.glang.GList this$0 -> wnsJ
    431:431:void <init>(react.glang.GList) -> <init>
    435:435:int compare(java.lang.Object,java.lang.Object) -> compare
react.glang.GListAdapter -> EvEN:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> DYFV
    java.lang.Object onAdapt(java.lang.Object) -> jhSt
react.glang.GMap -> ktOu:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> WFtI
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> ssNb
    64:81:react.glang.GMap flip() -> ntjb
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> ssNb
    121:121:react.glang.GList k() -> rwyd
    131:131:react.glang.GSet kset() -> AXWQ
    141:141:react.glang.GList v() -> LPFt
    151:151:react.glang.GSet vset() -> teYl
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> DYFV
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> jhSt
    209:219:react.glang.GMap removeDuplicateValues() -> Rrym
    233:242:void put(react.glang.GList,react.glang.GList) -> ssNb
    251:267:react.glang.GList sortK() -> NUkt
    277:293:react.glang.GList sortV() -> wfRd
react.glang.GQuadraset -> FNSj:
    java.lang.Object a -> HemE
    java.lang.Object b -> cAun
    java.lang.Object c -> ssgo
    java.lang.Object d -> wLrt
    11:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> GkIA
    25:26:void setA(java.lang.Object) -> lCdp
    30:30:java.lang.Object getB() -> YDfo
    35:36:void setB(java.lang.Object) -> nJLQ
    40:40:java.lang.Object getC() -> JlDV
    45:46:void setC(java.lang.Object) -> TyVf
    50:50:java.lang.Object getD() -> aDQd
    55:56:void setD(java.lang.Object) -> LGKl
react.glang.GSet -> QyFw:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> Iplh:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> HemE
    java.lang.Object b -> cAun
    java.lang.Object c -> ssgo
    13:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> GkIA
    26:27:void setA(java.lang.Object) -> lCdp
    31:31:java.lang.Object getB() -> YDfo
    36:37:void setB(java.lang.Object) -> nJLQ
    41:41:java.lang.Object getC() -> JlDV
    46:47:void setC(java.lang.Object) -> TyVf
react.gmath.Average -> bqeB:
    double[] values -> sAGp
    double average -> DYbo
    boolean dirty -> uqac
    10:15:void <init>(int) -> <init>
    19:21:void put(double) -> hHYn
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> bywp
react.gmath.DoubleArrayUtils -> BIwL:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> ssNb
    17:19:void wrapRight(double[]) -> ssNb
    23:27:void fill(double[],double) -> fill
react.gmath.M -> KwTH:
    int precision -> tfMw
    int modulus -> HCle
    float[] sin -> mjJS
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> ssNb
    31:36:boolean r(java.lang.Double) -> ssNb
    51:51:double tps(long,int) -> jhSt
    63:63:double ticksFromNS(long) -> TyVf
    75:101:java.lang.String toRoman(int) -> LGKN
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> IWSm
    144:216:int fromRoman(java.lang.String) -> nJLQ
    226:226:long ns() -> KvwI
    236:236:long ms() -> AFvO
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> DYFV
    333:333:float sinLookup(int) -> NUdB
react.json.HTTP -> VUOs:
    java.lang.String CRLF -> WjKv
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> vtFs
    162:198:java.lang.String toString(react.json.JSONObject) -> DYFV
react.json.HTTPTokener -> VCnE:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> HdyI:
    java.util.ArrayList myArrayList -> ChCU
    94:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    167:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> ssNb
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> OOtu
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> aLYV
    394:399:react.json.JSONObject getJSONObject(int) -> Smci
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> EmLA
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> oVCY
    515:515:boolean optBoolean(int) -> nImU
    533:536:boolean optBoolean(int,boolean) -> DYFV
    551:551:double optDouble(int) -> KwOT
    569:572:double optDouble(int,double) -> ssNb
    587:587:int optInt(int) -> KUKx
    605:608:int optInt(int,int) -> OXeK
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> DYFV
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> ssNb
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> ssNb
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> ssNb
    722:723:react.json.JSONArray optJSONArray(int) -> avmQ
    737:738:react.json.JSONObject optJSONObject(int) -> CMSR
    752:752:long optLong(int) -> CoXE
    770:773:long optLong(int,long) -> ssNb
    788:788:java.lang.String optString(int) -> ftyu
    803:804:java.lang.String optString(int,java.lang.String) -> ssNb
    816:817:react.json.JSONArray put(boolean) -> vtFs
    830:831:react.json.JSONArray put(java.util.Collection) -> ssNb
    845:848:react.json.JSONArray put(double) -> kQcX
    860:861:react.json.JSONArray put(int) -> mXMK
    873:874:react.json.JSONArray put(long) -> LGKl
    887:888:react.json.JSONArray put(java.util.Map) -> ssNb
    902:903:react.json.JSONArray put(java.lang.Object) -> ykmX
    921:922:react.json.JSONArray put(int,boolean) -> IWSm
    939:940:react.json.JSONArray put(int,java.util.Collection) -> ssNb
    958:959:react.json.JSONArray put(int,double) -> DYFV
    977:978:react.json.JSONArray put(int,int) -> YoSa
    996:997:react.json.JSONArray put(int,long) -> DYFV
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> ssNb
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> ssNb
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> rwyd
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> ssNb
    1153:1156:java.lang.String toString() -> toString
    1174:1178:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> ssNb
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> ssNb
react.json.JSONException -> TOKE:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> Ngae
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> tLDs:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> ssNb
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> WGJn
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> ssNb
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> DYFV
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> vtFs
    379:456:java.lang.String toString(react.json.JSONArray) -> DYFV
    472:552:java.lang.String toString(react.json.JSONObject) -> DYFV
react.json.JSONObject -> vslr:
    java.util.Map map -> map
    java.lang.Object NULL -> woWM
    159:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    262:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> ssNb
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> DYFV
    480:499:java.lang.String doubleToString(double) -> rMgK
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> TyVf
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> LGKl
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> ykmX
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> IWSm
    751:767:java.lang.String[] getNames(java.lang.Object) -> hHYn
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> rwyd
    855:855:boolean isNull(java.lang.String) -> hHYn
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> SLHs
    917:937:java.lang.String numberToString(java.lang.Number) -> ssNb
    949:949:java.lang.Object opt(java.lang.String) -> kQcX
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> ssNb
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> ssNb
    1018:1018:boolean optBoolean(java.lang.String) -> rMgK
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> ssNb
    1054:1054:double optDouble(java.lang.String) -> cIji
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> ssNb
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> ssNb
    1116:1119:double optDouble(java.lang.String,double) -> ssNb
    1134:1134:int optInt(java.lang.String) -> Cnru
    1152:1155:int optInt(java.lang.String,int) -> DYFV
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> LWjo
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> PuYf
    1198:1198:long optLong(java.lang.String) -> TNbD
    1216:1219:long optLong(java.lang.String,long) -> ssNb
    1234:1234:java.lang.String optString(java.lang.String) -> LGKN
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> ssNb
    1255:1305:void populateMap(java.lang.Object) -> kQcX
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> DYFV
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> ssNb
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> DYFV
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> IWSm
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> DYFV
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> ssNb
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> IWSm
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> OXeK
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> YoSa
    1501:1512:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> ssNb
    1590:1590:java.lang.Object remove(java.lang.String) -> NUdB
    1605:1640:boolean similar(java.lang.Object) -> rwyd
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> rMgK
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> IWSm
    1779:1782:java.lang.String toString() -> toString
    1802:1806:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> ssNb
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> ssNb
    2000:2004:void indent(java.io.Writer,int) -> ssNb
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> ssNb
    153:153:void <clinit>() -> <clinit>
react.json.JSONObject$1 -> vslr$1:
react.json.JSONObject$Null -> vslr$ssNb:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$1) -> <init>
react.json.JSONString -> HTYB:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> lCky:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> FouE:
    long character -> gEtl
    boolean eof -> eof
    long index -> bYId
    long line -> NyCr
    char previous -> xrYW
    java.io.Reader reader -> reader
    boolean usePrevious -> IaBL
    60:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> yReg
    119:131:int dehexchar(char) -> ssNb
    136:136:boolean end() -> MAeq
    147:153:boolean more() -> gotc
    164:198:char next() -> next
    213:218:char next(char) -> DYFV
    233:250:java.lang.String next(int) -> HBqU
    263:268:char nextClean() -> JtRs
    287:334:java.lang.String nextString(char) -> IWSm
    349:362:java.lang.String nextTo(char) -> OXeK
    376:388:java.lang.String nextTo(java.lang.String) -> OOtu
    403:441:java.lang.Object nextValue() -> GbYK
    458:479:char skipTo(char) -> YoSa
    491:491:react.json.JSONException syntaxError(java.lang.String) -> aLYV
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> EucK:
    int maxdepth -> lLri
    boolean comma -> hQhU
    char mode -> uGML
    react.json.JSONObject[] stack -> GcLY
    int top -> top
    java.io.Writer writer -> writer
    98:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> Smci
    157:164:react.json.JSONWriter array() -> Diox
    180:193:react.json.JSONWriter end(char,char) -> ssNb
    206:206:react.json.JSONWriter endArray() -> nchO
    219:219:react.json.JSONWriter endObject() -> gFBb
    235:258:react.json.JSONWriter key(java.lang.String) -> oVCY
    274:285:react.json.JSONWriter object() -> Yfkw
    299:310:void pop(char) -> jhSt
    322:329:void push(react.json.JSONObject) -> OXeK
    342:342:react.json.JSONWriter value(boolean) -> EmLA
    356:356:react.json.JSONWriter value(double) -> cIji
    369:369:react.json.JSONWriter value(long) -> ykmX
    385:385:react.json.JSONWriter value(java.lang.Object) -> cIji
react.json.XML -> AOcy:
    java.lang.Character AMP -> oonj
    java.lang.Character APOS -> Euvn
    java.lang.Character BANG -> kdCe
    java.lang.Character EQ -> PeVM
    java.lang.Character GT -> Knwa
    java.lang.Character LT -> HCkc
    java.lang.Character QUEST -> UIpl
    java.lang.Character QUOT -> lMRy
    java.lang.Character SLASH -> rNdV
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> nImU
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> ssNb
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> vtFs
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
    40:64:void <clinit>() -> <clinit>
react.json.XMLTokener -> GkIA:
    java.util.HashMap entity -> mjHs
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> sPsW
    108:133:java.lang.Object nextContent() -> tLFo
    149:166:java.lang.Object nextEntity(char) -> BkpW
    186:239:java.lang.Object nextMeta() -> eHME
    261:334:java.lang.Object nextToken() -> mXSo
    354:420:boolean skipPast(java.lang.String) -> KwOT
    45:51:void <clinit>() -> <clinit>
react.papyrus.BufferedFrame -> YDfo:
    byte[][] frame -> TXPg
    8:11:void <init>() -> <init>
    18:25:void write(byte) -> ssNb
    29:30:void write(int,int,byte) -> ssNb
    34:51:void write(react.papyrus.BufferedFrame) -> ssNb
    55:55:byte[][] getRawFrame() -> rxda
react.papyrus.FrameColor -> dwji:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> IWSm
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> ssNb
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> QhEF:
    org.bukkit.map.MapView getView() -> gotS
    react.papyrus.BufferedFrame getFrameBuffer() -> QMsU
    void addRenderer(react.papyrus.IRenderer) -> ssNb
    void clearRenderers() -> GjjA
    react.glang.GList getRenderers() -> vbnM
    void removeRenderer(react.papyrus.IRenderer) -> DYFV
    void destroy() -> destroy
react.papyrus.IRenderer -> ogMI:
    void draw(react.papyrus.BufferedFrame) -> DYFV
react.papyrus.Papyrus -> VoFU:
    org.bukkit.map.MapView map -> LikI
    react.papyrus.BufferedFrame frameBuffer -> Cosh
    react.papyrus.BufferedFrame lastFrameBuffer -> vJRp
    react.glang.GList renderers -> dxbw
    20:32:void <init>(org.bukkit.World) -> <init>
    37:37:org.bukkit.map.MapView getView() -> gotS
    43:43:react.papyrus.BufferedFrame getFrameBuffer() -> QMsU
    49:50:void addRenderer(react.papyrus.IRenderer) -> ssNb
    55:56:void clearRenderers() -> GjjA
    61:61:react.glang.GList getRenderers() -> vbnM
    67:68:void removeRenderer(react.papyrus.IRenderer) -> DYFV
    74:106:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    112:112:void destroy() -> destroy
    12:12:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> ssNb
    12:12:react.glang.GList access$100(react.papyrus.Papyrus) -> DYFV
    12:12:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> IWSm
react.papyrus.Papyrus$1 -> VoFU$1:
    org.bukkit.map.MapCanvas val$c -> jqdS
    react.papyrus.Papyrus this$0 -> gWYa
    77:77:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas) -> <init>
    81:103:void run() -> run
react.rai.Goal -> QVde:
    react.glang.GList subgoals -> AjMy
    java.lang.String tag -> DsXU
    11:14:void <init>(java.lang.String) -> <init>
    19:19:react.glang.GList getSubgoals() -> JbqW
    25:36:void propigate() -> YUkF
    41:42:void addGoal(react.rai.IGoal) -> ssNb
    47:57:react.glang.GList getFailingSubgoals() -> fvCa
    63:63:boolean isFailing() -> Rayq
    69:69:java.lang.String getTag() -> getTag
    75:84:void update() -> update
    boolean onCheckFailing() -> esCa
    void onPropigated() -> VCsR
react.rai.IGoal -> fTAa:
    react.glang.GList getSubgoals() -> JbqW
    void propigate() -> YUkF
    void onPropigated() -> VCsR
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> fvCa
    boolean isFailing() -> Rayq
    boolean onCheckFailing() -> esCa
    void update() -> update
    void addGoal(react.rai.IGoal) -> ssNb
react.rai.IRAI -> WqhV:
    react.glang.GList getGoals() -> GHiL
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> ssNb
    react.glang.GList getEvents() -> FEfL
    void callEvent(react.rai.RAIEvent) -> ssNb
    react.glang.GList getListeners() -> Vvwe
react.rai.RAI -> jOKx:
    react.glang.GList goals -> vlUx
    react.glang.GList events -> IqfK
    react.glang.GList logEvents -> ifOs
    react.glang.GList listeners -> WjNV
    long since -> bOyg
    react.rai.RAI instance -> Nxdw
    23:31:void <init>() -> <init>
    36:36:react.glang.GList getGoals() -> GHiL
    42:43:void addGoal(react.rai.IGoal) -> ssNb
    48:62:void tick() -> tick
    67:67:react.glang.GList getEvents() -> FEfL
    73:80:void callEvent(react.rai.RAIEvent) -> ssNb
    85:85:react.glang.GList getListeners() -> Vvwe
react.rai.RAIEvent -> OsCE:
    react.rai.RAIEventType type -> fLFU
    java.lang.String[] pars -> eIBs
    java.lang.String ovt -> gFXK
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> QFEs
    29:29:java.lang.String[] getPars() -> YEMO
    34:34:java.lang.String getOvt() -> BAjC
react.rai.RAIEventType -> QyID:
    react.rai.RAIEventType FIRE_ACTION -> wEFA
    react.rai.RAIEventType NOTE_GOAL_FAILING -> BJoF
    react.rai.RAIEventType NOTE_GOAL_FIXED -> ggxj
    java.lang.String[] msgs -> qTTb
    react.rai.RAIEventType[] $VALUES -> PLFM
    3:3:react.rai.RAIEventType[] values() -> values
    3:3:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    12:14:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    18:18:int getSize() -> getSize
    23:23:int pickRandom() -> byyi
    28:39:java.lang.String formatFor(int,java.lang.String[]) -> ssNb
    3:7:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedChunkLoad -> SKhs:
    boolean failing -> rqJg
    22:25:void <init>() -> <init>
    29:29:int getChunkCountForView() -> UtUW
    34:34:int getMaxChunksForView() -> DYRf
    42:61:boolean onCheckFailing() -> esCa
    67:73:void onPropigated() -> VCsR
react.rai.goals.GoalReducedEntityCounts -> WFtI:
    boolean failing -> rqJg
    25:28:void <init>() -> <init>
    35:67:boolean onCheckFailing() -> esCa
    73:101:void onPropigated() -> VCsR
react.rai.goals.GoalStableHopperTime -> ntjb:
    boolean failing -> rqJg
    react.glang.GMap reocc -> JAcU
    28:32:void <init>() -> <init>
    37:66:void onPropigated() -> VCsR
    71:100:boolean onCheckFailing() -> esCa
react.rai.goals.GoalStableRedstoneTime -> AXWQ:
    boolean failing -> rqJg
    react.glang.GMap reocc -> JAcU
    28:32:void <init>() -> <init>
    37:66:void onPropigated() -> VCsR
    71:101:boolean onCheckFailing() -> esCa
react.rai.goals.GoalStableTickTime -> LPFt:
    boolean failing -> rqJg
    16:19:void <init>() -> <init>
    25:25:void onPropigated() -> VCsR
    30:47:boolean onCheckFailing() -> esCa
react.sampler.SampleChunksLoaded -> teYl:
    11:11:void <init>() -> <init>
    16:22:void construct() -> CMSR
    27:28:void sample() -> avmQ
    33:33:java.lang.String get() -> get
react.sampler.SampleChunksLoadedPerSecond -> Rrym:
    react.gmath.Average a -> anwm
    12:14:void <init>() -> <init>
    19:25:void construct() -> CMSR
    30:32:void sample() -> avmQ
    37:37:java.lang.String get() -> get
react.sampler.SampleEntitiesDrops -> NUkt:
    12:12:void <init>() -> <init>
    17:23:void construct() -> CMSR
    28:29:void sample() -> avmQ
    34:35:java.lang.String get() -> get
react.sampler.SampleEntitiesLiving -> wfRd:
    12:12:void <init>() -> <init>
    17:23:void construct() -> CMSR
    28:29:void sample() -> avmQ
    34:35:java.lang.String get() -> get
react.sampler.SampleEntitiesTiles -> JlDV:
    11:11:void <init>() -> <init>
    16:22:void construct() -> CMSR
    27:28:void sample() -> avmQ
    33:33:java.lang.String get() -> get
react.sampler.SampleEntitiesTotal -> aDQd:
    11:11:void <init>() -> <init>
    16:22:void construct() -> CMSR
    27:28:void sample() -> avmQ
    33:33:java.lang.String get() -> get
react.sampler.SampleHopperPerSecond -> bywp:
    12:12:void <init>() -> <init>
    17:23:void construct() -> CMSR
    28:29:void sample() -> avmQ
    34:34:java.lang.String get() -> get
react.sampler.SampleHopperPerTick -> KvwI:
    12:12:void <init>() -> <init>
    17:23:void construct() -> CMSR
    30:37:void sample() -> avmQ
    42:42:java.lang.String get() -> get
react.sampler.SampleHopperTickTime -> AFvO:
    12:12:void <init>() -> <init>
    17:23:void construct() -> CMSR
    28:29:void sample() -> avmQ
    34:34:java.lang.String get() -> get
react.sampler.SampleHopperTickUtilization -> SLHs:
    12:12:void <init>() -> <init>
    17:23:void construct() -> CMSR
    30:37:void sample() -> avmQ
    42:42:java.lang.String get() -> get
react.sampler.SampleMemoryAllocated -> yReg:
    11:11:void <init>() -> <init>
    16:22:void construct() -> CMSR
    27:28:void sample() -> avmQ
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryAllocationPerSecond -> MAeq:
    11:11:void <init>() -> <init>
    16:22:void construct() -> CMSR
    27:28:void sample() -> avmQ
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryFree -> gotc:
    11:11:void <init>() -> <init>
    16:22:void construct() -> CMSR
    27:28:void sample() -> avmQ
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryMax -> JtRs:
    11:11:void <init>() -> <init>
    16:22:void construct() -> CMSR
    27:28:void sample() -> avmQ
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryUse -> GbYK:
    11:11:void <init>() -> <init>
    16:22:void construct() -> CMSR
    27:28:void sample() -> avmQ
    33:33:java.lang.String get() -> get
react.sampler.SampleRedstonePerSecond -> Diox:
    12:12:void <init>() -> <init>
    17:23:void construct() -> CMSR
    28:29:void sample() -> avmQ
    34:34:java.lang.String get() -> get
react.sampler.SampleRedstonePerTick -> nchO:
    12:12:void <init>() -> <init>
    17:23:void construct() -> CMSR
    30:37:void sample() -> avmQ
    42:42:java.lang.String get() -> get
react.sampler.SampleRedstoneTickTime -> gFBb:
    12:12:void <init>() -> <init>
    17:23:void construct() -> CMSR
    28:29:void sample() -> avmQ
    34:34:java.lang.String get() -> get
react.sampler.SampleRedstoneTickUtilization -> Yfkw:
    12:12:void <init>() -> <init>
    17:23:void construct() -> CMSR
    30:37:void sample() -> avmQ
    42:42:java.lang.String get() -> get
react.sampler.SampleTickTime -> sPsW:
    react.gmath.Average aa -> fCSu
    12:14:void <init>() -> <init>
    19:25:void construct() -> CMSR
    30:32:void sample() -> avmQ
    37:37:java.lang.String get() -> get
react.sampler.SampleTickUtilization -> tLFo:
    react.gmath.Average aa -> fCSu
    12:14:void <init>() -> <init>
    19:25:void construct() -> CMSR
    30:32:void sample() -> avmQ
    37:37:java.lang.String get() -> get
react.sampler.SampleTicksPerSecond -> eHME:
    12:12:void <init>() -> <init>
    17:23:void construct() -> CMSR
    28:29:void sample() -> avmQ
    34:39:java.lang.String get() -> get
react.security.checkpoints.SecurityCheckpointAlpha -> mXSo:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> FyLC
    78:148:void doScan(java.lang.Runnable) -> DYFV
    152:181:byte[] readResource(java.io.File,java.lang.String) -> ssNb
    186:217:react.glang.GMap scan(java.io.File) -> DYFV
    33:33:byte[] access$000(java.io.File,java.lang.String) -> DYFV
react.security.checkpoints.SecurityCheckpointAlpha$1 -> mXSo$1:
    java.lang.Runnable val$r -> fuvg
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> mXSo$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> SfPt
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.locks.SecurityLockAlpha -> rxda:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> rxda$1:
    java.io.File val$f -> xiiX
    react.security.locks.SecurityLockAlpha this$0 -> Rsni
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.surge.Main -> gotS:
    react.glang.GList plugins -> DYeK
    react.glang.GMap pluginInstances -> vJQh
    react.glang.GList controllerSet -> fvWt
    react.glang.GMap anchors -> JIsq
    react.glang.GList classes -> RkaJ
    java.lang.reflect.Field nsField -> HLbB
    java.lang.reflect.Field thField -> HUSJ
    react.glang.GList tracks -> afjo
    long nsf -> CWDh
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> aLcY
    90:109:long getNanoSync() -> rowT
    114:115:void requestResetNanos() -> YoaF
    119:122:void requestReload() -> kkcI
    127:141:int getThreadCount() -> getThreadCount
    150:182:void onStart(react.surge.util.Protocol) -> ssNb
    189:206:void onStop() -> KMEw
    212:212:void onPostInit() -> dVMt
    218:218:void onPreInit() -> fKRe
    222:233:void shutDownAmps() -> jqQR
    237:446:void initializeAmps() -> Whxy
    451:484:void doScan() -> wLbX
    488:510:void scanForPoolDefiners() -> ndLE
    514:530:void scanForRawEvents() -> IXBO
    534:550:void scanForDynamicTrack() -> roui
    554:575:void scanForAmps() -> Pdcq
    580:591:void onTick() -> FFBA
react.surge.PluginAmp -> QMsU:
    react.surge.control.AmpedPlugin plugin -> MJoU
    boolean connected -> connected
    int masterTask -> HMCG
    17:21:void <init>(react.surge.control.AmpedPlugin) -> <init>
    25:25:react.surge.control.AmpedPlugin getPluginInstance() -> dfmS
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> nBHO
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> ssNb
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> ssNb
    113:114:void stopTask(int) -> NxGC
    57:57:void access$0(react.surge.PluginAmp) -> ssNb
react.surge.PluginAmp$1 -> QMsU$1:
    react.surge.PluginAmp this$0 -> RAMh
    1:37:void <init>(react.surge.PluginAmp) -> <init>
    42:44:void run() -> run
react.surge.PluginAmp$2 -> QMsU$2:
    react.surge.PluginAmp this$0 -> RAMh
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:53:void run() -> run
react.surge.Surge -> GjjA:
    react.surge.PluginAmp amp -> wUhb
    react.glang.GList tickComponents -> GtRr
    react.glang.GList atickComponents -> gExy
    react.surge.sched.TaskManager taskmgr -> UuKe
    react.surge.hotload.HotloadManager hotloadmgr -> pQSt
    java.lang.Thread mainThread -> lxMF
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> ssNb
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> KUKx
    44:44:java.io.File folder() -> WaHe
    49:51:java.io.File getPluginJarFile() -> qdbP
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> IWSm
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> NUlw
    74:74:react.glang.GList getTickComponents() -> lTrT
    79:79:react.glang.GList getAsyncTickComponents() -> GkMB
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> ssNb
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> DYFV
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> ssNb
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> aMCk
    126:126:boolean hasAmp() -> XSJd
    131:131:react.surge.PluginAmp getAmp() -> kkap
    136:136:react.surge.sched.TaskManager getTaskManager() -> gyID
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> kbqG
react.surge.cluster.Cluster -> vbnM:
    react.surge.cluster.ClusterType type -> TrIH
    java.lang.Object t -> lLpl
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> AWxc
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> JbqW:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> YUkF:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> fvCa:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> Rayq:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> esCa:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> VCsR:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> GHiL:
    react.surge.cluster.ClusterType INT -> Xlqt
    react.surge.cluster.ClusterType BOOLEAN -> JchQ
    react.surge.cluster.ClusterType STRING -> hsns
    react.surge.cluster.ClusterType STRING_LIST -> prvK
    react.surge.cluster.ClusterType DOUBLE -> ieqG
    react.surge.cluster.ClusterType LONG -> CWFN
    react.surge.cluster.ClusterType[] ENUM$VALUES -> jytv
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> FEfL:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> JBEs
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> ssNb
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> ssNb
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> lDTo
react.surge.cluster.ConfigurationDataOutput -> Vvwe:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> DYFV
react.surge.cluster.DataCluster -> QFEs:
    react.glang.GMap clusters -> neAA
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> FhLM
    29:33:void fromJson(react.json.JSONObject) -> YoSa
    37:44:react.json.JSONObject toJson() -> psDx
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> DbEj
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> ssNb
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> avmQ
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> jhSt
    194:195:void set(java.lang.String,int) -> OXeK
    199:200:void set(java.lang.String,boolean) -> IWSm
    204:205:void set(java.lang.String,double) -> IWSm
    209:210:void set(java.lang.String,long) -> IWSm
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> ssNb
react.surge.cluster.ICluster -> YEMO:
    react.surge.cluster.ClusterType getType() -> AWxc
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> BAjC:
react.surge.cluster.IDataInput -> byyi:
    react.surge.cluster.DataCluster read(java.io.File) -> IWSm
react.surge.cluster.IDataOutput -> UtUW:
    void write(react.surge.cluster.DataCluster,java.io.File) -> ssNb
react.surge.cluster.Key -> DYRf:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> FyLC:
    int value() -> value
react.surge.cluster.KeyStore -> aLcY:
react.surge.cluster.ReflectedConfigurationException -> rowT:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> YoaF:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> IWSm
react.surge.cluster.YamlDataOutput -> kkcI:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> ssNb
react.surge.collection.GSound -> KMEw:
    java.lang.String sound -> hcNi
    org.bukkit.Sound iSound -> xGiX
    java.lang.Float volume -> wDeq
    java.lang.Float pitch -> feWx
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> TyVf
    61:72:void play(org.bukkit.Location) -> OXeK
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> ssNb
    93:93:java.lang.String getSound() -> kQsA
    98:99:void setSound(java.lang.String) -> CMSR
    103:103:org.bukkit.Sound getiSound() -> WaKm
    108:109:void setiSound(org.bukkit.Sound) -> ssNb
    113:113:java.lang.Float getVolume() -> UARh
    118:119:void setVolume(java.lang.Float) -> ssNb
    123:123:java.lang.Float getPitch() -> KUXS
    128:129:void setPitch(java.lang.Float) -> DYFV
react.surge.control.AmpedPlugin -> dVMt:
    react.glang.GList controllers -> rNhP
    react.gconcurrent.ParallelPoolManager pp -> WGju
    react.surge.server.CoreTickThread ctt -> NNRd
    23:49:void <init>() -> <init>
    void doScan() -> wLbX
    long getNanoSync() -> rowT
    int getThreadCount() -> getThreadCount
    60:65:void onLoad() -> onLoad
    70:79:void onEnable() -> onEnable
    84:94:void onDisable() -> onDisable
    99:99:react.glang.GList getControllers() -> FMwy
    105:106:void registerController(react.surge.control.IController) -> ssNb
    111:122:void onTick() -> FFBA
    127:127:java.lang.String getTickName() -> BuHU
    133:133:react.gconcurrent.ParallelPoolManager getThreadPool() -> IWbc
    void onControllerRegistry() -> aLcY
    void onStart(react.surge.util.Protocol) -> ssNb
    void onStop() -> KMEw
    void onPostInit() -> dVMt
    void onPreInit() -> fKRe
react.surge.control.AmpedPlugin$1 -> dVMt$1:
    react.surge.control.AmpedPlugin this$0 -> rFXP
    1:37:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    42:42:long getNanoGate() -> FNTA
react.surge.control.Control -> fKRe:
react.surge.control.Controller -> jqQR:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> Whxy:
react.surge.control.Enable -> wLbX:
react.surge.control.IController -> ndLE:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> IXBO:
react.surge.control.Plugin -> roui:
react.surge.control.SurgePlugin -> Pdcq:
    void onStart(react.surge.util.Protocol) -> ssNb
    void onStop() -> KMEw
    void onPostInit() -> dVMt
    void onPreInit() -> fKRe
    void onControllerRegistry() -> aLcY
    void registerController(react.surge.control.IController) -> ssNb
    react.glang.GList getControllers() -> FMwy
    react.gconcurrent.ParallelPoolManager getThreadPool() -> IWbc
react.surge.hotload.HotloadManager -> dfmS:
    react.glang.GMap filemods -> eIDU
    react.glang.GMap filesizes -> jqdg
    react.glang.GMap fileacts -> Aioh
    16:21:void <init>() -> <init>
    25:29:void track(java.io.File,java.lang.Runnable) -> ssNb
    33:36:void untrack(java.io.File) -> OXeK
    40:43:void untrackall() -> gVhV
    48:72:void onTick() -> FFBA
    77:77:java.lang.String getTickName() -> BuHU
react.surge.nms.NMSClass -> nBHO:
    boolean init -> jqgp
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> BddX
    java.lang.Class IChatBaseComponent -> JAgx
    java.lang.Class ChatSerializer -> lgMk
    java.lang.Class PacketPlayOutPlayerInfo -> lwoC
    java.lang.Class PlayerInfoData -> DHgv
    java.lang.Class EnumPlayerInfoAction -> tDPa
    java.lang.Class GameProfile -> tCpA
    java.lang.Class EnumGamemode -> MBah
    java.lang.Class TileEntitySkull -> pPvA
    java.lang.Class LoadingCache -> Bdeb
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> WaHe:
    react.surge.nms.NMSX bountifulAPI -> aEJR
    boolean useOldMethods -> SwUw
    java.lang.String nmsver -> mGlB
    java.lang.Object eTimes -> URhN
    java.lang.Object eTitle -> XvDu
    java.lang.Object eSubtitle -> YNTN
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> ssNb
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> CoXE
    75:89:java.lang.Class getCBClass(java.lang.String) -> ftyu
    96:104:java.lang.Object serializeChat(java.lang.String) -> mXMK
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> ssNb
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> ssNb
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> mrKm
    151:151:java.lang.String craftPackage() -> kcUD
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> ssNb
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> ssNb
    197:207:java.lang.Class getNMSClass(java.lang.String) -> HBqU
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> ssNb
    279:280:void clearTitle(org.bukkit.entity.Player) -> LGKl
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> ssNb
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> ssNb
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> ssNb
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> NxGC
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> YoSa
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> EmLA
    434:447:int ping(org.bukkit.entity.Player) -> ykmX
react.surge.nms.NMSX$1 -> WaHe$1:
    org.bukkit.entity.Player val$player -> ogdh
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> WaHe$2:
    org.bukkit.entity.Player val$player -> ogdh
    java.lang.String val$message -> XTBG
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> qdbP:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> wevJ
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> ssNb
    68:82:void clearTitle(org.bukkit.entity.Player) -> LGKl
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> ssNb
react.surge.nms.PacketUtil$V -> qdbP$ssNb:
    react.surge.nms.PacketUtil$V R17 -> SLbW
    react.surge.nms.PacketUtil$V R18 -> CpWt
    react.surge.nms.PacketUtil$V R19 -> lDhl
    react.surge.nms.PacketUtil$V R111 -> IPGL
    react.surge.nms.PacketUtil$V R110 -> FiAO
    react.surge.nms.PacketUtil$V R112 -> yuao
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> JJXh
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> NUlw:
    java.lang.String title -> title
    java.lang.String subTitle -> FqPw
    java.lang.String action -> action
    java.lang.Integer fadeIn -> mHLW
    java.lang.Integer fadeOut -> vJUc
    java.lang.Integer stayTime -> DPxE
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> rwyd
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> APKB
    79:80:void setSubTitle(java.lang.String) -> GsQl
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> kstv
    99:100:void setFadeIn(java.lang.Integer) -> ssNb
    104:104:java.lang.Integer getFadeOut() -> uNna
    109:110:void setFadeOut(java.lang.Integer) -> DYFV
    114:114:java.lang.Integer getStayTime() -> loHn
    119:120:void setStayTime(java.lang.Integer) -> IWSm
react.surge.nms.VersionBukkit -> lTrT:
    react.surge.nms.VersionBukkit VU -> JBKU
    react.surge.nms.VersionBukkit V7 -> Nxje
    react.surge.nms.VersionBukkit V8 -> hRRY
    react.surge.nms.VersionBukkit V9 -> Fprl
    react.surge.nms.VersionBukkit V11 -> jOfu
    react.surge.nms.VersionBukkit V111 -> hAQN
    react.surge.nms.VersionBukkit V112 -> JBJv
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> MBbo
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> xhxl
    27:32:boolean uc() -> gWIG
    37:67:react.surge.nms.VersionBukkit get() -> ydMI
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> GkMB:
    void burst(java.lang.Object) -> Cnru
    void setTimeLock(double) -> Cnru
    double getEstimatedTimeUse() -> rpXo
    int flush() -> loHX
    int flush(react.gbench.Profiler) -> ssNb
    void queue(java.lang.Object) -> LWjo
    void queue(java.util.List) -> IWSm
    void queue(java.lang.Object[]) -> ssNb
react.surge.sched.ICancellable -> aMCk:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> XSJd:
    void onTick() -> FFBA
    java.lang.String getTickName() -> BuHU
react.surge.sched.ITask -> kkap:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> lnfu
    java.lang.String getName() -> getName
    double getComputeTime() -> vJAb
    double getTotalComputeTime() -> GHjQ
    double getActiveTime() -> maJO
    boolean hasCompleted() -> pbBn
react.surge.sched.Task -> gyID:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> kIxq
    double computeTime -> dEdk
    double totalComputeTime -> GtWO
    double activeTime -> VpAh
    boolean completed -> completed
    react.gbench.Profiler profiler -> AbCx
    react.gbench.Profiler activeProfiler -> clto
    int ticks -> skdK
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> OXeK
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> lnfu
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> vJAb
    150:150:boolean hasCompleted() -> pbBn
    156:156:double getTotalComputeTime() -> GHjQ
    162:162:double getActiveTime() -> maJO
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> ssNb
    15:15:void access$1(react.surge.sched.Task,boolean) -> ssNb
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> DYFV
    14:14:void access$3(react.surge.sched.Task,double) -> ssNb
    12:12:void access$4(react.surge.sched.Task,double) -> DYFV
    14:14:double access$5(react.surge.sched.Task) -> IWSm
    13:13:void access$6(react.surge.sched.Task,double) -> IWSm
    13:13:double access$7(react.surge.sched.Task) -> OXeK
    12:12:double access$8(react.surge.sched.Task) -> YoSa
react.surge.sched.Task$1 -> gyID$1:
    react.surge.sched.Task this$0 -> Rkdw
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> gyID$2:
    react.surge.sched.Task this$0 -> Rkdw
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> gyID$3:
    react.surge.sched.Task this$0 -> Rkdw
    int val$total -> biqo
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskManager -> kbqG:
    react.glang.GList tasks -> QXAc
    react.glang.GMap taskProfiles -> bHPg
    11:15:void <init>() -> <init>
    20:30:void onTick() -> FFBA
    34:35:void putFinishingTask(react.surge.sched.ITask) -> ssNb
    39:48:void putTask(react.surge.sched.ITask) -> DYFV
    53:53:java.lang.String getTickName() -> BuHU
react.surge.sched.TaskProfile -> AWxc:
    double activeTime -> VpAh
    double computeTickTime -> xXnu
    double computeTime -> dEdk
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> maJO
    23:24:void setActiveTime(double) -> LWjo
    28:28:double getComputeTickTime() -> QNWg
    33:34:void setComputeTickTime(double) -> PuYf
    38:38:double getComputeTime() -> vJAb
    43:44:void setComputeTime(double) -> TNbD
react.surge.server.AsyncTick -> lDTo:
react.surge.server.CPS -> FhLM:
    react.glang.GMap keys -> SLec
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> DXfX
    46:99:void scan() -> sHhL
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> IWSm
react.surge.server.CoreTickThread -> psDx:
    9:12:void <init>() -> <init>
    17:36:void run() -> run
react.surge.server.MemoryMonitor -> DbEj:
    long memoryFree -> ylsl
    long memoryUsed -> Rbss
    long memoryMax -> hstO
    long lastMemoryUsed -> ooxG
    long memoryUsedAfterGC -> YEek
    long allocated -> oxiO
    long collected -> NWHx
    long collections -> kIyJ
    long sms -> mXop
    long memoryAllocatedPerTick -> LGpq
    long memoryCollectedPerTick -> PLMk
    long memoryFullyAllocatedPerTick -> SoJF
    long mah -> iLcQ
    long mahs -> vRiD
    22:39:void <init>() -> <init>
    void onAllocationSet() -> BSOO
    46:93:void run() -> run
    97:97:long getMemoryFree() -> IWad
    102:102:long getMemoryUsed() -> getMemoryUsed
    107:107:long getMemoryMax() -> miYd
    112:112:long getLastMemoryUsed() -> ETFk
    117:117:long getMemoryUsedAfterGC() -> QWIV
    122:122:long getAllocated() -> getAllocated
    127:127:long getCollected() -> lTsr
    132:132:long getCollections() -> gowu
    137:137:long getSms() -> MBKs
    142:142:long getMemoryAllocatedPerTick() -> UIbl
    147:147:long getMemoryCollectedPerTick() -> hQYY
    152:152:long getMemoryFullyAllocatedPerTick() -> JbuU
    157:157:long getMah() -> RkNM
    162:162:long getMahs() -> vJEF
react.surge.server.SuperSampler -> kQsA:
    react.gmath.Average ticksPerSecondL -> oEcc
    react.gmath.Average tickTimeL -> ePvu
    react.gmath.Average mahL -> nmUK
    double ticksPerSecond -> AGfG
    double ticksPerSecondRaw -> wDix
    double tickTime -> stSo
    double tickTimeRaw -> LXpr
    boolean running -> running
    boolean frozen -> BJsu
    double tickUtilizationRaw -> aVMs
    double tickUtilization -> AjUU
    double leftoverTickTime -> stSS
    long memoryUse -> AadL
    long memoryAllocated -> cvGJ
    long memoryCollected -> KpBX
    long mahs -> vRiD
    int totalChunks -> giAG
    int totalEntities -> NhJL
    int totalDrops -> LGom
    int totalTiles -> DjmB
    int totalLiving -> KfpS
    int chunksLoaded -> XeEo
    int chunksUnloaded -> CFHE
    react.surge.server.WorldMonitor worldMonitor -> SDVk
    react.surge.server.TPSMonitor tpsMonitor -> TFyK
    react.surge.server.MemoryMonitor memoryMonitor -> JuQm
    java.lang.StackTraceElement[] lockStack -> QiDo
    react.glang.GMap spikes -> oDvn
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> FFBA
    154:154:java.lang.String getTickName() -> BuHU
    159:159:react.gmath.Average getTicksPerSecondL() -> Nodd
    164:164:double getTicksPerSecond() -> tLDs
    169:169:double getTicksPerSecondRaw() -> JkiO
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> pXtD
    184:184:react.gmath.Average getTickTimeL() -> ktXk
    189:189:double getTickTime() -> NgTe
    194:194:double getTickTimeRaw() -> vswA
    199:199:double getTickUtilizationRaw() -> yBLM
    204:204:double getTickUtilization() -> IXEl
    209:209:double getLeftoverTickTime() -> nRmP
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> uyeC
    219:219:long getMemoryUse() -> DsJQ
    224:224:long getMemoryAllocated() -> XdPy
    229:229:long getMemoryCollected() -> FMxr
    234:234:react.gmath.Average getMahL() -> IXDX
    239:239:long getMahs() -> vJEF
    244:244:int getTotalChunks() -> LqnN
    249:249:int getTotalEntities() -> jXBg
    254:254:int getTotalDrops() -> CNCt
    259:259:int getTotalTiles() -> rgig
    264:264:int getTotalLiving() -> IygB
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> JIdp
    274:274:int getChunksLoaded() -> aeww
    279:279:int getChunksUnloaded() -> TNqe
    284:285:void setTicksPerSecondL(react.gmath.Average) -> ssNb
    289:290:void setTickTimeL(react.gmath.Average) -> DYFV
    294:295:void setMahL(react.gmath.Average) -> IWSm
    299:300:void setTicksPerSecond(double) -> EmLA
    304:305:void setTicksPerSecondRaw(double) -> LGKN
    309:310:void setTickTime(double) -> NUdB
    314:315:void setTickTimeRaw(double) -> OOtu
    319:320:void setRunning(boolean) -> WGJn
    324:325:void setTickUtilizationRaw(double) -> aLYV
    329:330:void setTickUtilization(double) -> Smci
    334:335:void setLeftoverTickTime(double) -> oVCY
    339:340:void setMemoryUse(long) -> rwyd
    344:345:void setMemoryAllocated(long) -> hHYn
    349:350:void setMemoryCollected(long) -> kQcX
    354:355:void setMahs(long) -> rMgK
    359:360:void setTotalChunks(int) -> GsQl
    364:365:void setTotalEntities(int) -> DXfX
    369:370:void setTotalDrops(int) -> EmKi
    374:375:void setTotalTiles(int) -> ejGG
    379:380:void setTotalLiving(int) -> TNcV
    384:385:void setChunksLoaded(int) -> INcj
    389:390:void setChunksUnloaded(int) -> VCgr
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> ssNb
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> ssNb
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> ssNb
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> VoJs
    419:419:react.glang.GMap getSpikes() -> QhBc
    31:31:void access$0(react.surge.server.SuperSampler,int) -> ssNb
    33:33:void access$1(react.surge.server.SuperSampler,int) -> DYFV
    34:34:void access$2(react.surge.server.SuperSampler,int) -> IWSm
    32:32:void access$3(react.surge.server.SuperSampler,int) -> OXeK
    35:35:void access$4(react.surge.server.SuperSampler,int) -> YoSa
    36:36:void access$5(react.surge.server.SuperSampler,int) -> jhSt
    37:37:void access$6(react.surge.server.SuperSampler,int) -> BkpW
    19:19:void access$7(react.surge.server.SuperSampler,double) -> ssNb
    21:21:void access$8(react.surge.server.SuperSampler,double) -> DYFV
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> ssNb
    19:19:double access$10(react.surge.server.SuperSampler) -> DYFV
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> IWSm
    21:21:double access$12(react.surge.server.SuperSampler) -> OXeK
    18:18:void access$13(react.surge.server.SuperSampler,double) -> IWSm
    20:20:void access$14(react.surge.server.SuperSampler,double) -> OXeK
    24:24:void access$15(react.surge.server.SuperSampler,double) -> YoSa
    20:20:double access$16(react.surge.server.SuperSampler) -> YoSa
    25:25:void access$17(react.surge.server.SuperSampler,double) -> jhSt
    25:25:double access$18(react.surge.server.SuperSampler) -> jhSt
    26:26:void access$19(react.surge.server.SuperSampler,double) -> BkpW
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> ssNb
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> BkpW
    27:27:void access$22(react.surge.server.SuperSampler,long) -> ssNb
    28:28:void access$23(react.surge.server.SuperSampler,long) -> DYFV
    29:29:void access$24(react.surge.server.SuperSampler,long) -> IWSm
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> lCdp
    30:30:void access$26(react.surge.server.SuperSampler,long) -> OXeK
react.surge.server.SuperSampler$1 -> kQsA$1:
    react.surge.server.SuperSampler this$0 -> OjnV
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> ssNb
react.surge.server.SuperSampler$2 -> kQsA$2:
    react.surge.server.SuperSampler this$0 -> OjnV
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> ktXM
    106:107:void onSpike() -> IFas
react.surge.server.SuperSampler$3 -> kQsA$3:
    react.surge.server.SuperSampler this$0 -> OjnV
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> BSOO
react.surge.server.TPSMonitor -> WaKm:
    double tickTimeMS -> VDna
    double rawTicksPerSecond -> IOkM
    react.gbench.Profiler tickProfiler -> apBu
    react.gbench.Profiler tickTimeProfiler -> HLgq
    boolean ticked -> MujW
    java.lang.Thread$State lastState -> LPdR
    double actualTickTimeMS -> xGob
    double ltt -> RbvW
    long lastTick -> rhQD
    boolean frozen -> BJsu
    java.lang.StackTraceElement[] lockedStack -> lwrO
    22:38:void <init>() -> <init>
    void onTicked() -> ktXM
    void onSpike() -> IFas
    47:103:void run() -> run
    107:135:void processState(java.lang.Thread$State) -> ssNb
    139:139:double getTickTimeMS() -> qBdN
    144:144:double getRawTicksPerSecond() -> mrMJ
    149:149:react.gbench.Profiler getTickProfiler() -> bPKY
    154:154:boolean isTicked() -> CpFK
    159:160:void markTick() -> imom
    164:164:react.gbench.Profiler getTickTimeProfiler() -> DrhM
    169:169:java.lang.Thread$State getLastState() -> PKWY
    174:174:double getActualTickTimeMS() -> GtBM
    179:179:double getLtt() -> nuPQ
    184:184:long getLastTick() -> GIDW
    189:189:boolean isFrozen() -> isFrozen
    194:194:java.lang.StackTraceElement[] getLockedStack() -> OGsT
react.surge.server.WorldMonitor -> UARh:
    boolean chunksChanged -> oFFx
    boolean dropChanged -> lDnD
    boolean tileChanged -> msEn
    boolean livingChanged -> hbtg
    boolean totalChanged -> jqkp
    boolean updated -> KEPs
    int totalChunks -> giAG
    int totalDrops -> LGom
    int totalTiles -> DjmB
    int totalLiving -> KfpS
    int totalEntities -> NhJL
    int chunksLoaded -> XeEo
    int chunksUnloaded -> CFHE
    long ms -> QFEs
    25:44:void <init>() -> <init>
    49:64:void run() -> run
    void updated(int,int,int,int,int,int,int) -> ssNb
    71:76:void on(org.bukkit.event.world.ChunkLoadEvent) -> ssNb
    81:86:void on(org.bukkit.event.world.ChunkUnloadEvent) -> ssNb
    91:92:void on(org.bukkit.event.entity.EntitySpawnEvent) -> ssNb
    97:98:void on(org.bukkit.event.entity.EntityDeathEvent) -> ssNb
    103:104:void on(org.bukkit.event.player.PlayerDropItemEvent) -> ssNb
    109:110:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> ssNb
    115:116:void on(org.bukkit.event.entity.EntityPickupItemEvent) -> ssNb
    121:122:void on(org.bukkit.event.block.BlockPlaceEvent) -> ssNb
    127:128:void on(org.bukkit.event.block.BlockBreakEvent) -> ssNb
    132:133:void doUpdate() -> wevr
    137:188:void sample() -> avmQ
    192:198:void sampleTotalCount() -> DQFV
    202:208:void sampleLivingCount() -> WFya
    212:221:void sampleTileCount() -> jyhK
    225:231:void sampleDropCount() -> piwO
    235:241:void sampleChunkCount() -> rEii
react.surge.text.PhantomSpinner -> KUXS:
    react.surge.text.ProgressSpinner s -> YyKt
    react.surge.text.ProgressSpinner c -> APeP
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> FMwy:
    java.lang.String[] chars -> ydeV
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> ymWA
    react.surge.text.ProgressSpinner NETWORK -> vcko
    react.surge.text.ProgressSpinner CIRCLES -> QOQT
    react.surge.text.ProgressSpinner RANDOMS -> WPbI
    react.surge.text.ProgressSpinner MERGERS -> cBcK
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> OrjV
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> IWbc:
    int value() -> value
react.surge.util.Area -> gVhV:
    org.bukkit.Location location -> WHQb
    java.lang.Double radius -> BKXC
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> ssNb
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> Oixf
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> YoSa
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> jhSt
    109:109:boolean isWithin(org.bukkit.Location) -> BkpW
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> OXeK
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> ssNb
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> cuSa
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> WqqP
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> lCdp
    257:257:java.lang.Double getRadius() -> gFKj
    268:269:void setRadius(java.lang.Double) -> DYFV
    278:283:org.bukkit.Location random() -> ktYs
react.surge.util.Axis -> mrKm:
    react.surge.util.Axis X -> bisQ
    react.surge.util.Axis Y -> lgQT
    react.surge.util.Axis Z -> GkgO
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> FOQy
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> qJwE
    29:29:org.bukkit.util.Vector negative() -> rWKg
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> kcUD:
    react.surge.util.BlastResistance BARRIER -> uGWL
    react.surge.util.BlastResistance BEDROCK -> ChLY
    react.surge.util.BlastResistance COMMAND -> bjTh
    react.surge.util.BlastResistance ENDER_PORTAL -> NFIB
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> rXAH
    react.surge.util.BlastResistance ANVIL -> MTFw
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> lVOT
    react.surge.util.BlastResistance OBSIDIAN -> RRVx
    react.surge.util.BlastResistance ENDER_CHEST -> cmYx
    react.surge.util.BlastResistance WATER -> OcAO
    react.surge.util.BlastResistance LAVA -> WsHl
    react.surge.util.BlastResistance STATIONARY_WATER -> tMIO
    react.surge.util.BlastResistance DRAGON_EGG -> CWLm
    react.surge.util.BlastResistance ENDER_STONE -> vSNm
    react.surge.util.BlastResistance COAL_BLOCK -> IPMo
    react.surge.util.BlastResistance DIAMOND_BLOCK -> hRVg
    react.surge.util.BlastResistance EMERALD_BLOCK -> CWLj
    react.surge.util.BlastResistance GOLD_BLOCK -> bHSp
    react.surge.util.BlastResistance IRON_BLOCK -> qvbw
    react.surge.util.BlastResistance REDSTONE_BLOCK -> uaLf
    react.surge.util.BlastResistance BRICK -> dgmH
    react.surge.util.BlastResistance BRICK_STAIRS -> AsJF
    react.surge.util.BlastResistance HARD_CLAY -> JAnj
    react.surge.util.BlastResistance STONE -> cKXL
    react.surge.util.BlastResistance SMOOTH_BRICK -> EUCe
    react.surge.util.BlastResistance SMOOTH_STAIRS -> mYUP
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> PfDa
    react.surge.util.BlastResistance STONE_SLAB2 -> wfrC
    react.surge.util.BlastResistance IRON_DOOR -> FXFm
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> vBLm
    react.surge.util.BlastResistance IRON_TRAPDOOR -> FXGQ
    react.surge.util.BlastResistance MOB_SPAWNER -> VpFa
    react.surge.util.BlastResistance WEB -> tTxC
    react.surge.util.BlastResistance DISPENSER -> dxnK
    react.surge.util.BlastResistance DROPPER -> febT
    react.surge.util.BlastResistance FURNACE -> YglH
    react.surge.util.BlastResistance BURNING_FURNACE -> kBMH
    react.surge.util.BlastResistance BEACON -> hJDu
    react.surge.util.BlastResistance COAL_ORE -> BSip
    react.surge.util.BlastResistance COCOA -> tUXU
    react.surge.util.BlastResistance DIAMOND_ORE -> xadO
    react.surge.util.BlastResistance EMERALD_ORE -> QGCU
    react.surge.util.BlastResistance FENCE -> DHmV
    react.surge.util.BlastResistance FENCE_GATE -> fLOJ
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> XKWJ
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> HoLr
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> bsGu
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> UuRl
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> pjly
    react.surge.util.BlastResistance ACACIA_FENCE -> jqmH
    react.surge.util.BlastResistance BIRCH_FENCE -> gqTm
    react.surge.util.BlastResistance DARK_OAK_FENCE -> UAls
    react.surge.util.BlastResistance SPRUCE_FENCE -> WjXA
    react.surge.util.BlastResistance JUNGLE_FENCE -> Gbwu
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> Ojor
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> slGX
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> DHpM
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> lfuK
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> ejqX
    react.surge.util.BlastResistance QUARTZ_STAIRS -> AGwN
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> cJwx
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> XeLc
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> BSjf
    react.surge.util.BlastResistance WOOD_STAIRS -> sJGQ
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> OkTH
    react.surge.util.BlastResistance ACACIA_DOOR -> qvdk
    react.surge.util.BlastResistance BIRCH_DOOR -> WQIA
    react.surge.util.BlastResistance DARK_OAK_DOOR -> jPNR
    react.surge.util.BlastResistance SPRUCE_DOOR -> gXGD
    react.surge.util.BlastResistance JUNGLE_DOOR -> DQas
    react.surge.util.BlastResistance GOLD_ORE -> CFMJ
    react.surge.util.BlastResistance HOPPER -> ekPy
    react.surge.util.BlastResistance IRON_ORE -> OYpK
    react.surge.util.BlastResistance LAPIS_BLOCK -> mivm
    react.surge.util.BlastResistance LAPIS_ORE -> bsJH
    react.surge.util.BlastResistance QUARTZ_ORE -> Pect
    react.surge.util.BlastResistance REDSTONE_ORE -> xjWb
    react.surge.util.BlastResistance TRAP_DOOR -> yJwC
    react.surge.util.BlastResistance WOOD -> skhc
    react.surge.util.BlastResistance CHEST -> FiIO
    react.surge.util.BlastResistance TRAPPED_CHEST -> BvPQ
    react.surge.util.BlastResistance WORKBENCH -> pjpU
    react.surge.util.BlastResistance CAULDRON -> xXuP
    react.surge.util.BlastResistance LOG -> UdSI
    react.surge.util.BlastResistance LOG_2 -> xHSj
    react.surge.util.BlastResistance BOOKSHELF -> uFym
    react.surge.util.BlastResistance BANNER -> NWMt
    react.surge.util.BlastResistance STANDING_BANNER -> VNDj
    react.surge.util.BlastResistance WALL_BANNER -> nKXF
    react.surge.util.BlastResistance JACK_O_LANTERN -> WGtv
    react.surge.util.BlastResistance MELON_BLOCK -> XBgt
    react.surge.util.BlastResistance SKULL -> Snmk
    react.surge.util.BlastResistance PUMPKIN -> toKx
    react.surge.util.BlastResistance SIGN -> FGIK
    react.surge.util.BlastResistance SIGN_POST -> LPil
    react.surge.util.BlastResistance WALL_SIGN -> IrTu
    react.surge.util.BlastResistance QUARTZ_BLOCK -> YxrV
    react.surge.util.BlastResistance NOTE_BLOCK -> ETgA
    react.surge.util.BlastResistance RED_SANDSTONE -> ydlR
    react.surge.util.BlastResistance SANDSTONE -> QFhB
    react.surge.util.BlastResistance WOOL -> FFgr
    react.surge.util.BlastResistance MONSTER_EGG -> hQyl
    react.surge.util.BlastResistance RAILS -> iMMe
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> vmEU
    react.surge.util.BlastResistance DETECTOR_RAIL -> QNwp
    react.surge.util.BlastResistance POWERED_RAIL -> oxpm
    react.surge.util.BlastResistance CLAY -> wUsw
    react.surge.util.BlastResistance DIRT -> oqBA
    react.surge.util.BlastResistance GRASS -> sJIU
    react.surge.util.BlastResistance GRAVEL -> HMPD
    react.surge.util.BlastResistance SPONGE -> gykD
    react.surge.util.BlastResistance BREWING_STAND -> EwKV
    react.surge.util.BlastResistance STONE_BUTTON -> pRAg
    react.surge.util.BlastResistance WOOD_BUTTON -> qfEy
    react.surge.util.BlastResistance CAKE_BLOCK -> uaPo
    react.surge.util.BlastResistance ICE -> GJJg
    react.surge.util.BlastResistance PACKED_ICE -> LPhk
    react.surge.util.BlastResistance LEVER -> EKsr
    react.surge.util.BlastResistance MYCEL -> KpIj
    react.surge.util.BlastResistance PISTON_BASE -> dhPV
    react.surge.util.BlastResistance PISTON_EXTENSION -> ekRu
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> kSSB
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> ghiA
    react.surge.util.BlastResistance GOLD_PLATE -> NpbO
    react.surge.util.BlastResistance IRON_PLATE -> Cgpx
    react.surge.util.BlastResistance STONE_PLATE -> lVTp
    react.surge.util.BlastResistance WOOD_PLATE -> rqWy
    react.surge.util.BlastResistance SAND -> yeLN
    react.surge.util.BlastResistance SOUL_SAND -> IqtA
    react.surge.util.BlastResistance CACTUS -> kmEM
    react.surge.util.BlastResistance LADDER -> SMNR
    react.surge.util.BlastResistance NETHERRACK -> IqtG
    react.surge.util.BlastResistance GLASS -> MCKs
    react.surge.util.BlastResistance THIN_GLASS -> mYXU
    react.surge.util.BlastResistance STAINED_GLASS -> AbMO
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> Pefl
    react.surge.util.BlastResistance GLOWSTONE -> xrlj
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> PDFv
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> vKEE
    react.surge.util.BlastResistance SEA_LANTERN -> IHDF
    react.surge.util.BlastResistance BED_BLOCK -> IXdV
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> PLWa
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> vtvk
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> Gkop
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> ujEA
    react.surge.util.BlastResistance LEAVES -> MvSV
    react.surge.util.BlastResistance LEAVES_2 -> ixCm
    react.surge.util.BlastResistance SNOW -> WQKs
    int br -> IaVL
    react.surge.util.BlastResistance[] ENUM$VALUES -> ydmw
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> SKrK
    175:190:int get(org.bukkit.Material) -> ssNb
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> wevJ:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> OXeK
react.surge.util.C -> APKB:
    react.surge.util.C BLACK -> ydmy
    react.surge.util.C DARK_BLUE -> rylJ
    react.surge.util.C DARK_GREEN -> Evkp
    react.surge.util.C DARK_AQUA -> JAtw
    react.surge.util.C DARK_RED -> kBSe
    react.surge.util.C DARK_PURPLE -> XeQX
    react.surge.util.C GOLD -> AkAV
    react.surge.util.C GRAY -> BmcV
    react.surge.util.C DARK_GRAY -> RlNu
    react.surge.util.C BLUE -> GkoS
    react.surge.util.C GREEN -> riKR
    react.surge.util.C AQUA -> uibk
    react.surge.util.C RED -> OHsC
    react.surge.util.C LIGHT_PURPLE -> lUwM
    react.surge.util.C YELLOW -> PwKL
    react.surge.util.C WHITE -> fCeG
    react.surge.util.C MAGIC -> YpdF
    react.surge.util.C BOLD -> gGIE
    react.surge.util.C STRIKETHROUGH -> SoRh
    react.surge.util.C UNDERLINE -> wNEp
    react.surge.util.C ITALIC -> WQKp
    react.surge.util.C RESET -> dhSG
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> AQMc
    char code -> OYuJ
    boolean isFormat -> mrkn
    java.lang.String toString -> vtvD
    java.util.Map BY_ID -> FynU
    java.util.Map BY_CHAR -> QOYt
    java.util.Map dyeChatMap -> kKFv
    java.util.Map chatHexMap -> jXeG
    java.util.Map dyeHexMap -> PCgx
    int[] $SWITCH_TABLE$surge$util$C -> qCgJ
    react.surge.util.C[] ENUM$VALUES -> FGLm
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> dVTX
    378:378:java.lang.String hex() -> BAnt
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> lCdp
    434:442:react.surge.util.C getByChar(java.lang.String) -> EmKi
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> DYFV
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> ssNb
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> DYFV
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> IWSm
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> ejGG
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> TNcV
    560:578:java.lang.String generateColorTable() -> qKWl
    588:588:org.bukkit.ChatColor chatColor() -> DajI
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> DYFV
    632:679:byte getItemMeta() -> ePfK
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> OiyY
react.surge.util.C$1 -> APKB$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> APKB$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> APKB$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> APKB$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> APKB$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> APKB$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> APKB$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> APKB$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> APKB$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> APKB$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> APKB$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> APKB$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> APKB$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> APKB$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> APKB$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> APKB$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> APKB$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> APKB$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> APKB$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> APKB$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> APKB$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> APKB$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> kstv:
    double number -> NqGg
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> nImU
    23:25:react.surge.util.CDou add(double) -> KwOT
    30:32:react.surge.util.CDou sub(double) -> KUKx
    37:37:double get() -> get
    42:48:void circ() -> Rsag
react.surge.util.CMD -> uNna:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> bPmJ
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> Hecg
    51:53:void execute(org.bukkit.command.CommandSender) -> IWSm
    60:77:void execute() -> execute
react.surge.util.CNum -> loHn:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> gEXv
    23:25:react.surge.util.CNum add(int) -> tvRU
    30:32:react.surge.util.CNum sub(int) -> dntE
    37:37:int get() -> get
    42:48:void circ() -> Rsag
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> RbOr
react.surge.util.Chunks -> xhxl:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> OXeK
    33:40:react.glang.GList getLoadedChunks() -> lDXV
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> DYFV
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> ssNb
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> ssNb
    98:98:boolean unload(org.bukkit.Chunk) -> rwyd
    114:124:int unload(react.glang.GList,boolean,boolean) -> ssNb
    138:138:int unload(react.glang.GList,boolean) -> ssNb
    150:150:int unload(react.glang.GList) -> BkpW
    166:166:boolean isLoaded(java.lang.String,int,int) -> ssNb
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> DYFV
    201:205:void load(react.glang.GList) -> lCdp
react.surge.util.Cuboid -> gWIG:
    java.lang.String worldName -> NODf
    int x1 -> yCMw
    int y1 -> WsPy
    int z1 -> JmKw
    int x2 -> VMiy
    int y2 -> pRFH
    int z2 -> vcvn
    int[] $SWITCH_TABLE$surge$util$Axis -> mrno
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> EKyi
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> ssNb
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> IWSm
    93:93:boolean hasPlayers() -> FFKt
    98:110:react.glang.GList getPlayers() -> kQhu
    115:166:react.glang.GList getEntities() -> ObHd
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> KCiG
    287:287:org.bukkit.Location getLowerNE() -> RsbV
    298:298:org.bukkit.Location getUpperSW() -> hHko
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> JRXe
    348:348:int getSizeY() -> kcXK
    358:358:int getSizeZ() -> Eult
    368:368:int getLowerX() -> UlKG
    378:378:int getLowerY() -> tnSF
    388:388:int getLowerZ() -> SfEN
    398:398:int getUpperX() -> qlxe
    408:408:int getUpperY() -> OjYY
    418:418:int getUpperZ() -> URWs
    428:438:org.bukkit.block.Block[] corners() -> oxTu
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> ssNb
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> DYFV
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> IWSm
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> OXeK
    546:546:boolean contains(int,int,int) -> OXeK
    558:558:boolean contains(org.bukkit.block.Block) -> YoSa
    570:570:boolean contains(org.bukkit.Location) -> nJLQ
    580:580:int volume() -> xOnL
    591:601:byte averageLightLevel() -> SCcW
    612:612:react.surge.util.Cuboid contract() -> VoQC
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> ssNb
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> DYFV
    708:715:boolean containsOnly(org.bukkit.Material) -> DYFV
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> ssNb
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> YoSa
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> ssNb
    786:800:java.util.List getChunks() -> vlLH
    815:819:void fill(int,byte) -> ssNb
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> Tyjs
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> ydSf
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> cSRj
react.surge.util.Cuboid$1 -> gWIG$1:
    react.surge.util.Cuboid this$0 -> qeiX
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> WGJn
    1:1:java.lang.Object onAdapt(java.lang.Object) -> jhSt
react.surge.util.Cuboid$CuboidDirection -> gWIG$ssNb:
    react.surge.util.Cuboid$CuboidDirection North -> lpMN
    react.surge.util.Cuboid$CuboidDirection East -> kmJS
    react.surge.util.Cuboid$CuboidDirection South -> jOsX
    react.surge.util.Cuboid$CuboidDirection West -> lEYN
    react.surge.util.Cuboid$CuboidDirection Up -> msOw
    react.surge.util.Cuboid$CuboidDirection Down -> pQdX
    react.surge.util.Cuboid$CuboidDirection Horizontal -> rGJK
    react.surge.util.Cuboid$CuboidDirection Vertical -> aMiL
    react.surge.util.Cuboid$CuboidDirection Both -> fvjl
    react.surge.util.Cuboid$CuboidDirection Unknown -> iUaG
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> EKyi
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> iVAf
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> nRrG
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> cSRj
react.surge.util.Cuboid$CuboidIterator -> gWIG$DYFV:
    org.bukkit.World w -> ArrX
    int baseX -> rWkD
    int baseY -> RJOD
    int baseZ -> yBlX
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> BKbH
    int sizeY -> nCLy
    int sizeZ -> oyUQ
    react.surge.util.Cuboid this$0 -> qeiX
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> ydMI:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> rpXo:
    react.glang.GList buffer -> Jcxo
    10:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    14:18:void flush() -> flush
    22:33:void log(java.lang.String,java.lang.String) -> DYFV
    37:38:void l(java.lang.Object,java.lang.String) -> ssNb
    42:43:void s(java.lang.Object,java.lang.String) -> DYFV
    47:48:void v(java.lang.Object,java.lang.String) -> IWSm
    52:53:void w(java.lang.Object,java.lang.String) -> OXeK
    57:58:void f(java.lang.Object,java.lang.String) -> YoSa
    62:69:void l(java.lang.String) -> INcj
    73:80:void s(java.lang.String) -> VCgr
    84:91:void v(java.lang.String) -> gEXv
    95:102:void w(java.lang.String) -> tvRU
    106:113:void f(java.lang.String) -> dntE
react.surge.util.DMSRequire -> loHX:
    react.surge.util.DMSRequirement value() -> jWgW
react.surge.util.DMSRequirement -> lnfu:
    react.surge.util.DMSRequirement SQL -> jHCJ
    react.surge.util.DMSRequirement[] ENUM$VALUES -> YEqa
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> vJAb:
    react.surge.util.Depend VAULT -> ynAL
    react.surge.util.Depend FAWE -> XTPd
    react.surge.util.Depend WORLDEDIT -> OtJd
    react.surge.util.Depend PROTOLIB -> MvTc
    react.surge.util.Depend CITIZENS -> FiPL
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> ELYq
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> GHjQ:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> OGxH
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> maJO:
    react.surge.util.DimensionFace X -> OQhj
    react.surge.util.DimensionFace Y -> iwfj
    react.surge.util.DimensionFace Z -> xPmi
    react.surge.util.DimensionFace[] ENUM$VALUES -> NqJM
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> pbBn:
    react.surge.util.Direction U -> aMlN
    react.surge.util.Direction D -> AbSM
    react.surge.util.Direction N -> GktW
    react.surge.util.Direction S -> DQie
    react.surge.util.Direction E -> dEsY
    react.surge.util.Direction W -> SoWi
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> qfMV
    int[] $SWITCH_TABLE$surge$util$Direction -> EvpJ
    react.surge.util.Direction[] ENUM$VALUES -> BvVu
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> LaRg
    61:61:int x() -> qBiS
    66:66:int y() -> Vnoo
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> MBST
    81:81:react.glang.GList news() -> ifEk
    86:86:react.glang.GList udnews() -> BSSn
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> hHYn
    115:147:react.surge.util.Direction fromByte(byte) -> IWSm
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> OsLy
react.surge.util.DynamicConfiguration -> QNWg:
react.surge.util.DynamicTracker -> sHhL:
react.surge.util.Embedded -> BSOO:
    react.glang.GList get() -> RkTm
    void add(java.lang.Object) -> add
react.surge.util.FU -> IWad:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> ssNb
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> DYFV
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> YoSa
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> jhSt
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> miYd:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> RbOr
react.surge.util.Health -> ETFk:
    double hp -> LIAQ
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> ssbd
    41:41:double getHearts() -> GHqf
    51:51:double getHalfHearts() -> dfwH
    61:61:int getFlatHalfHearts() -> upwg
react.surge.util.IO -> QWIV:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> lTsr:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> ssNb
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> ssNb
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> ssNb
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> ssNb
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> ssNb
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> DYFV
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> IWSm
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> OXeK
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> ssNb
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> ssNb
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> ssNb
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> ssNb
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> YoSa
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> jhSt
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> BkpW
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> lCdp
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> nJLQ
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> ssNb
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> vtFs
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> EmLA
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> ssNb
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> ssNb
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> DYFV
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> ssNb
react.surge.util.MSound -> gowu:
    react.surge.util.MSound AMBIENCE_CAVE -> giOm
    react.surge.util.MSound AMBIENCE_RAIN -> WarA
    react.surge.util.MSound AMBIENCE_THUNDER -> igFK
    react.surge.util.MSound ANVIL_BREAK -> sdBR
    react.surge.util.MSound ANVIL_LAND -> JlnB
    react.surge.util.MSound ANVIL_USE -> SnwM
    react.surge.util.MSound ARROW_HIT -> SnwL
    react.surge.util.MSound BURP -> uaWY
    react.surge.util.MSound CHEST_CLOSE -> pIWJ
    react.surge.util.MSound CHEST_OPEN -> mrps
    react.surge.util.MSound CLICK -> UKKO
    react.surge.util.MSound DOOR_CLOSE -> GceG
    react.surge.util.MSound DOOR_OPEN -> NqIK
    react.surge.util.MSound DRINK -> IiiI
    react.surge.util.MSound EAT -> pjwt
    react.surge.util.MSound EXPLODE -> rWkv
    react.surge.util.MSound FALL_BIG -> NqII
    react.surge.util.MSound FALL_SMALL -> AQQw
    react.surge.util.MSound FIRE -> ekYS
    react.surge.util.MSound FIRE_IGNITE -> pshi
    react.surge.util.MSound FIZZ -> FXPO
    react.surge.util.MSound FUSE -> esix
    react.surge.util.MSound GLASS -> gFki
    react.surge.util.MSound HURT_FLESH -> eYxA
    react.surge.util.MSound ITEM_BREAK -> SVEV
    react.surge.util.MSound ITEM_PICKUP -> Hnvd
    react.surge.util.MSound LAVA -> bkBM
    react.surge.util.MSound LAVA_POP -> XBox
    react.surge.util.MSound LEVEL_UP -> qTht
    react.surge.util.MSound MINECART_BASE -> lMiw
    react.surge.util.MSound MINECART_INSIDE -> HVFU
    react.surge.util.MSound NOTE_BASS -> pHwt
    react.surge.util.MSound NOTE_PIANO -> MnIH
    react.surge.util.MSound NOTE_BASS_DRUM -> EvrF
    react.surge.util.MSound NOTE_STICKS -> XCSw
    react.surge.util.MSound NOTE_BASS_GUITAR -> esle
    react.surge.util.MSound NOTE_SNARE_DRUM -> xaqY
    react.surge.util.MSound NOTE_PLING -> oqKH
    react.surge.util.MSound ORB_PICKUP -> IXkH
    react.surge.util.MSound PISTON_EXTEND -> FXSQ
    react.surge.util.MSound PISTON_RETRACT -> cStc
    react.surge.util.MSound PORTAL -> LsVe
    react.surge.util.MSound PORTAL_TRAVEL -> XCTd
    react.surge.util.MSound PORTAL_TRIGGER -> ayDK
    react.surge.util.MSound SHOOT_ARROW -> SxJy
    react.surge.util.MSound SPLASH -> Ljec
    react.surge.util.MSound SPLASH2 -> ORLf
    react.surge.util.MSound STEP_GRASS -> DtPY
    react.surge.util.MSound STEP_GRAVEL -> QiTY
    react.surge.util.MSound STEP_LADDER -> BCTU
    react.surge.util.MSound STEP_SAND -> toXH
    react.surge.util.MSound STEP_SNOW -> OAJr
    react.surge.util.MSound STEP_STONE -> Gcdi
    react.surge.util.MSound STEP_WOOD -> XStC
    react.surge.util.MSound STEP_WOOL -> uOum
    react.surge.util.MSound SWIM -> tnvO
    react.surge.util.MSound WATER -> Swhf
    react.surge.util.MSound WOOD_CLICK -> hRam
    react.surge.util.MSound BAT_DEATH -> kBXw
    react.surge.util.MSound BAT_HURT -> VopY
    react.surge.util.MSound BAT_IDLE -> MKcm
    react.surge.util.MSound BAT_LOOP -> iUdu
    react.surge.util.MSound BAT_TAKEOFF -> iVEw
    react.surge.util.MSound BLAZE_BREATH -> UlnO
    react.surge.util.MSound BLAZE_DEATH -> UmOP
    react.surge.util.MSound BLAZE_HIT -> dNev
    react.surge.util.MSound CAT_HISS -> XBsE
    react.surge.util.MSound CAT_HIT -> uqyG
    react.surge.util.MSound CAT_MEOW -> Hnxn
    react.surge.util.MSound CAT_PURR -> barC
    react.surge.util.MSound CAT_PURREOW -> Bdvu
    react.surge.util.MSound CHICKEN_IDLE -> Ulpb
    react.surge.util.MSound CHICKEN_HURT -> iUgn
    react.surge.util.MSound CHICKEN_EGG_POP -> RcgX
    react.surge.util.MSound CHICKEN_WALK -> MSwT
    react.surge.util.MSound COW_IDLE -> Rkwi
    react.surge.util.MSound COW_HURT -> LbWU
    react.surge.util.MSound COW_WALK -> Laup
    react.surge.util.MSound CREEPER_HISS -> BdyB
    react.surge.util.MSound CREEPER_DEATH -> GRgP
    react.surge.util.MSound ENDERDRAGON_DEATH -> pRKk
    react.surge.util.MSound ENDERDRAGON_GROWL -> oFXE
    react.surge.util.MSound ENDERDRAGON_HIT -> sdFW
    react.surge.util.MSound ENDERDRAGON_WINGS -> BLHF
    react.surge.util.MSound ENDERMAN_DEATH -> RJUw
    react.surge.util.MSound ENDERMAN_HIT -> JvDW
    react.surge.util.MSound ENDERMAN_IDLE -> xasP
    react.surge.util.MSound ENDERMAN_TELEPORT -> OQme
    react.surge.util.MSound ENDERMAN_SCREAM -> KMqk
    react.surge.util.MSound ENDERMAN_STARE -> pHxt
    react.surge.util.MSound GHAST_SCREAM -> Evrc
    react.surge.util.MSound GHAST_SCREAM2 -> FaDk
    react.surge.util.MSound GHAST_CHARGE -> wxas
    react.surge.util.MSound GHAST_DEATH -> kmOc
    react.surge.util.MSound GHAST_FIREBALL -> qeoK
    react.surge.util.MSound GHAST_MOAN -> VxdP
    react.surge.util.MSound IRONGOLEM_DEATH -> GBEQ
    react.surge.util.MSound IRONGOLEM_HIT -> pAIl
    react.surge.util.MSound IRONGOLEM_THROW -> BnKw
    react.surge.util.MSound IRONGOLEM_WALK -> xPph
    react.surge.util.MSound MAGMACUBE_WALK -> Korw
    react.surge.util.MSound MAGMACUBE_WALK2 -> RdHM
    react.surge.util.MSound MAGMACUBE_JUMP -> WrvV
    react.surge.util.MSound PIG_IDLE -> lyBv
    react.surge.util.MSound PIG_DEATH -> uXhg
    react.surge.util.MSound PIG_WALK -> VFAM
    react.surge.util.MSound SHEEP_IDLE -> YFXh
    react.surge.util.MSound SHEEP_SHEAR -> Fqeo
    react.surge.util.MSound SHEEP_WALK -> PoCW
    react.surge.util.MSound SILVERFISH_HIT -> fepI
    react.surge.util.MSound SILVERFISH_KILL -> nvWx
    react.surge.util.MSound SILVERFISH_IDLE -> ecMa
    react.surge.util.MSound SILVERFISH_WALK -> riRf
    react.surge.util.MSound SKELETON_IDLE -> Mmid
    react.surge.util.MSound SKELETON_DEATH -> AYfO
    react.surge.util.MSound SKELETON_HURT -> jYNO
    react.surge.util.MSound SKELETON_WALK -> SxNm
    react.surge.util.MSound SLIME_ATTACK -> EwWL
    react.surge.util.MSound SLIME_WALK -> GAfu
    react.surge.util.MSound SLIME_WALK2 -> BKhu
    react.surge.util.MSound SPIDER_IDLE -> Qywx
    react.surge.util.MSound SPIDER_DEATH -> IjRD
    react.surge.util.MSound SPIDER_WALK -> VFCd
    react.surge.util.MSound WITHER_DEATH -> esqV
    react.surge.util.MSound WITHER_HURT -> cTYX
    react.surge.util.MSound WITHER_IDLE -> wMqD
    react.surge.util.MSound WITHER_SHOOT -> xYcy
    react.surge.util.MSound WITHER_SPAWN -> GJVv
    react.surge.util.MSound WOLF_BARK -> grGO
    react.surge.util.MSound WOLF_DEATH -> QWso
    react.surge.util.MSound WOLF_GROWL -> ELab
    react.surge.util.MSound WOLF_HOWL -> FPEf
    react.surge.util.MSound WOLF_HURT -> rOcD
    react.surge.util.MSound WOLF_PANT -> fepu
    react.surge.util.MSound WOLF_SHAKE -> vKMr
    react.surge.util.MSound WOLF_WALK -> Waup
    react.surge.util.MSound WOLF_WHINE -> BLKO
    react.surge.util.MSound ZOMBIE_METAL -> nCUa
    react.surge.util.MSound ZOMBIE_WOOD -> txKk
    react.surge.util.MSound ZOMBIE_WOODBREAK -> txLJ
    react.surge.util.MSound ZOMBIE_IDLE -> uHJe
    react.surge.util.MSound ZOMBIE_DEATH -> HgNG
    react.surge.util.MSound ZOMBIE_HURT -> XmkK
    react.surge.util.MSound ZOMBIE_INFECT -> TYOD
    react.surge.util.MSound ZOMBIE_UNFECT -> Udag
    react.surge.util.MSound ZOMBIE_REMEDY -> hJVC
    react.surge.util.MSound ZOMBIE_WALK -> kJqC
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> IbCJ
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> QXXQ
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> kSap
    react.surge.util.MSound ZOMBIE_PIG_HURT -> XLJy
    react.surge.util.MSound DIG_WOOL -> sRhg
    react.surge.util.MSound DIG_GRASS -> WYiM
    react.surge.util.MSound DIG_GRAVEL -> DlEl
    react.surge.util.MSound DIG_SAND -> apWj
    react.surge.util.MSound DIG_SNOW -> EMFN
    react.surge.util.MSound DIG_STONE -> LYin
    react.surge.util.MSound DIG_WOOD -> FPIR
    react.surge.util.MSound FIREWORK_BLAST -> aFDw
    react.surge.util.MSound FIREWORK_BLAST2 -> VVgF
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> MLMJ
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> mkJV
    react.surge.util.MSound FIREWORK_TWINKLE -> sJWo
    react.surge.util.MSound FIREWORK_TWINKLE2 -> TXqJ
    react.surge.util.MSound FIREWORK_LAUNCH -> IQBS
    react.surge.util.MSound SUCCESSFUL_HIT -> QPHd
    react.surge.util.MSound HORSE_ANGRY -> bHfs
    react.surge.util.MSound HORSE_ARMOR -> baxG
    react.surge.util.MSound HORSE_BREATHE -> Eety
    react.surge.util.MSound HORSE_DEATH -> qncv
    react.surge.util.MSound HORSE_GALLOP -> jGmF
    react.surge.util.MSound HORSE_HIT -> UueG
    react.surge.util.MSound HORSE_IDLE -> DtTn
    react.surge.util.MSound HORSE_JUMP -> jGmK
    react.surge.util.MSound HORSE_LAND -> Eeua
    react.surge.util.MSound HORSE_SADDLE -> EfVd
    react.surge.util.MSound HORSE_SOFT -> xHeM
    react.surge.util.MSound HORSE_WOOD -> gXVd
    react.surge.util.MSound DONKEY_ANGRY -> NqRE
    react.surge.util.MSound DONKEY_DEATH -> qUQm
    react.surge.util.MSound DONKEY_HIT -> QOfd
    react.surge.util.MSound DONKEY_IDLE -> HgOh
    react.surge.util.MSound HORSE_SKELETON_DEATH -> lWDa
    react.surge.util.MSound HORSE_SKELETON_HIT -> WkJj
    react.surge.util.MSound HORSE_SKELETON_IDLE -> mrxa
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> SpCM
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> xayj
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> vmUr
    react.surge.util.MSound VILLAGER_DEATH -> JBcq
    react.surge.util.MSound VILLAGER_HAGGLE -> QOiL
    react.surge.util.MSound VILLAGER_HIT -> eRRl
    react.surge.util.MSound VILLAGER_IDLE -> raIv
    react.surge.util.MSound VILLAGER_NO -> SEOJ
    react.surge.util.MSound VILLAGER_YES -> VWIK
    java.lang.String pre19sound -> eQqi
    java.lang.String post19sound -> dOOi
    org.bukkit.Sound resolvedSound -> UmWc
    react.surge.util.MSound[] ENUM$VALUES -> fUUi
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> fSkO
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> MBKs:
    org.bukkit.Material material -> gaKP
    java.lang.Byte data -> pAQC
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> tLRe
    79:80:void setData(java.lang.Byte) -> ssNb
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> UIbl:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> KCiG
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> RkTB
    68:68:boolean isAnyOnline() -> YUuA
    80:80:react.glang.GList inWorld(org.bukkit.World) -> YoSa
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> hHYn
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> ssNb
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> ssNb
    143:144:void disable(org.bukkit.entity.Player) -> kQcX
    154:155:void enable(org.bukkit.entity.Player) -> rMgK
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> ssNb
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> DYFV
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> cIji
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> ssNb
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> Cnru
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> IWSm
    300:300:boolean canFindPlayer(java.lang.String) -> tdpC
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> PBWX
    338:345:react.glang.GList onlinePlayers() -> MctC
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> LWjo
    368:371:void clear(org.bukkit.entity.Player) -> PuYf
    381:385:void clearEffects(org.bukkit.entity.Player) -> TNbD
    398:399:void heal(org.bukkit.entity.Player,double) -> ssNb
    409:410:void heal(org.bukkit.entity.Player) -> LGKN
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> NUdB
    432:433:void resetHunger(org.bukkit.entity.Player) -> OOtu
    443:444:void kill(org.bukkit.entity.Player) -> aLYV
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> Smci
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> oVCY
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> ssNb
react.surge.util.P$1 -> UIbl$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> WGJn
    1:1:java.lang.Object onAdapt(java.lang.Object) -> jhSt
react.surge.util.P$2 -> UIbl$2:
    java.lang.Double val$doff -> uHPD
    org.bukkit.entity.Player val$e -> UuiC
    org.bukkit.entity.Entity[] val$result -> QWyh
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> vtFs
react.surge.util.PE -> hQYY:
    react.surge.util.PE ABSORPTION -> aVhD
    react.surge.util.PE BLINDNESS -> SEOX
    react.surge.util.PE CONFUSION -> rFuU
    react.surge.util.PE DAMAGE_RESISTANCE -> wowT
    react.surge.util.PE FAST_DIGGING -> Obsm
    react.surge.util.PE FIRE_RESISTANCE -> Wayp
    react.surge.util.PE GLOWING -> mPwo
    react.surge.util.PE HARM -> mjkF
    react.surge.util.PE HEAL -> FrLl
    react.surge.util.PE HEALTH_BOOST -> CGBN
    react.surge.util.PE HUNGER -> UCDM
    react.surge.util.PE INCREASE_DAMAGE -> TYSB
    react.surge.util.PE INVISIBILITY -> TrdY
    react.surge.util.PE JUMP -> GAkE
    react.surge.util.PE LEVITATION -> rWvQ
    react.surge.util.PE LUCK -> KVgq
    react.surge.util.PE NIGHT_VISION -> Jdfg
    react.surge.util.PE POISON -> IbDe
    react.surge.util.PE REGENERATION -> QqlK
    react.surge.util.PE SATURATION -> gXWp
    react.surge.util.PE SLOW -> PTup
    react.surge.util.PE SLOW_DIGGING -> COQi
    react.surge.util.PE SPEED -> CWbQ
    react.surge.util.PE UNLUCK -> qUSw
    react.surge.util.PE WATER_BREATHING -> eRQv
    react.surge.util.PE WEAKNESS -> OlFa
    react.surge.util.PE WITHER -> FrNA
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> ssNb
    144:144:react.surge.util.PE d(int) -> tdpC
    156:156:react.surge.util.PE a(int) -> PBWX
    166:166:org.bukkit.potion.PotionEffect c() -> ndRm
    177:178:void c(org.bukkit.entity.LivingEntity) -> YoSa
    182:183:void crm(org.bukkit.entity.LivingEntity) -> jhSt
    187:188:void rm(org.bukkit.entity.LivingEntity) -> BkpW
react.surge.util.ParticleEffect -> JbuU:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> vueO
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> Nyfb
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> ayMc
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> vKTt
    react.surge.util.ParticleEffect WATER_BUBBLE -> diDj
    react.surge.util.ParticleEffect WATER_SPLASH -> QFyg
    react.surge.util.ParticleEffect WATER_WAKE -> EMIi
    react.surge.util.ParticleEffect SUSPENDED -> VMyE
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> RAlj
    react.surge.util.ParticleEffect CRIT -> fMHD
    react.surge.util.ParticleEffect CRIT_MAGIC -> wgis
    react.surge.util.ParticleEffect SMOKE_NORMAL -> OlHu
    react.surge.util.ParticleEffect SMOKE_LARGE -> DJFr
    react.surge.util.ParticleEffect SPELL -> hcmt
    react.surge.util.ParticleEffect SPELL_INSTANT -> OtYj
    react.surge.util.ParticleEffect SPELL_MOB -> pkeq
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> GcqI
    react.surge.util.ParticleEffect SPELL_WITCH -> aMxd
    react.surge.util.ParticleEffect DRIP_WATER -> pbuE
    react.surge.util.ParticleEffect DRIP_LAVA -> CyhI
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> IiwR
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> hcoB
    react.surge.util.ParticleEffect TOWN_AURA -> IYWD
    react.surge.util.ParticleEffect NOTE -> ELga
    react.surge.util.ParticleEffect PORTAL -> wNWV
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> BUBm
    react.surge.util.ParticleEffect FLAME -> oprh
    react.surge.util.ParticleEffect LAVA -> BKpb
    react.surge.util.ParticleEffect FOOTSTEP -> ELgd
    react.surge.util.ParticleEffect CLOUD -> urdX
    react.surge.util.ParticleEffect REDSTONE -> MfAt
    react.surge.util.ParticleEffect SNOWBALL -> jPas
    react.surge.util.ParticleEffect SNOW_SHOVEL -> TrfV
    react.surge.util.ParticleEffect SLIME -> ywAX
    react.surge.util.ParticleEffect HEART -> CpuW
    react.surge.util.ParticleEffect BARRIER -> Treo
    react.surge.util.ParticleEffect ITEM_CRACK -> bkNc
    react.surge.util.ParticleEffect BLOCK_CRACK -> VNYY
    react.surge.util.ParticleEffect BLOCK_DUST -> GuQv
    react.surge.util.ParticleEffect WATER_DROP -> IPdM
    react.surge.util.ParticleEffect ITEM_TAKE -> jPbI
    react.surge.util.ParticleEffect MOB_APPEARANCE -> fexK
    react.surge.util.ParticleEffect DRAGON_BREATH -> sBNT
    react.surge.util.ParticleEffect END_ROD -> Enmg
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> BUCl
    react.surge.util.ParticleEffect SWEEP_ATTACK -> kvLV
    java.util.Map NAME_MAP -> SERo
    java.util.Map ID_MAP -> pJFd
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> aVkV
    java.util.List properties -> MCaU
    react.surge.util.ParticleEffect[] ENUM$VALUES -> BKpx
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> Mcsc
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> ssNb
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> hbNa
    557:565:react.surge.util.ParticleEffect fromId(int) -> hbNa
    577:578:boolean isWater(org.bukkit.Location) -> EmLA
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> ssNb
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> ssNb
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> ssNb
    665:681:void display(float,int,org.bukkit.Location,double) -> ssNb
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> ssNb
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> ssNb
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> ssNb
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> ssNb
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> ssNb
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> ssNb
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> ssNb
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> ssNb
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> ssNb
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> ssNb
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> ssNb
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> ssNb
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> ssNb
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> ssNb
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> JbuU$ssNb:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> JbuU$DYFV:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> JbuU$IWSm:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> uOTo
    1594:1594:float getValueY() -> ogUp
    1605:1605:float getValueZ() -> jGEc
react.surge.util.ParticleEffect$OrdinaryColor -> JbuU$OXeK:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> uOTo
    1526:1526:float getValueY() -> ogUp
    1537:1537:float getValueZ() -> jGEc
react.surge.util.ParticleEffect$ParticleColor -> JbuU$YoSa:
    1383:1383:void <init>() -> <init>
    float getValueX() -> uOTo
    float getValueY() -> ogUp
    float getValueZ() -> jGEc
react.surge.util.ParticleEffect$ParticleColorException -> JbuU$jhSt:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> JbuU$BkpW:
    org.bukkit.Material material -> gaKP
    byte data -> rrNs
    int[] packetData -> Fqpw
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> VoOY
    1309:1309:java.lang.String getPacketDataString() -> dVUE
react.surge.util.ParticleEffect$ParticleDataException -> JbuU$lCdp:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> JbuU$nJLQ:
    int version -> version
    java.lang.Class enumParticle -> pQuT
    java.lang.reflect.Constructor packetConstructor -> qCve
    java.lang.reflect.Method getHandle -> tEPa
    java.lang.reflect.Field playerConnection -> foLj
    java.lang.reflect.Method sendPacket -> MCbI
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> VhOQ
    float offsetX -> iwuT
    float offsetY -> jYVU
    float offsetZ -> LbbG
    float speed -> LINS
    int amount -> cmqq
    boolean longDistance -> DRWm
    react.surge.util.ParticleEffect$ParticleData data -> bILm
    java.lang.Object packet -> fDXB
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> WGJn
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> ssNb
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> DYFV
    2004:2018:void sendTo(org.bukkit.Location,double) -> DYFV
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> JbuU$nJLQ$ssNb:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> JbuU$nJLQ$DYFV:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> JbuU$nJLQ$IWSm:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> JbuU$vtFs:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> JKYC
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> RlbT
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> yLNn
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> YXDj
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> fTwl
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> JbuU$EmLA:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> RkNM:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> gEYM
react.surge.util.Persist -> vJEF:
react.surge.util.PluginUtil -> Nodd:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> OXeK
    81:85:void enableAll() -> BtwX
    95:99:void disable(org.bukkit.plugin.Plugin) -> YoSa
    106:110:void disableAll() -> bPOA
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> jhSt
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> ssNb
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> Aqbp
    169:172:java.util.List getPluginNames(boolean) -> TyVf
    184:187:java.lang.String getPluginVersion(java.lang.String) -> KTmF
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> BkpW
    237:316:java.util.List findByCommand(java.lang.String) -> bXOh
    337:338:void load(org.bukkit.plugin.Plugin) -> lCdp
    342:364:java.lang.String getPluginFileName(java.lang.String) -> LGOT
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> ssNb
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> nJLQ
    480:484:void reloadAll() -> dogY
    496:622:void unload(org.bukkit.plugin.Plugin) -> vtFs
react.surge.util.PoolCount -> JkiO:
react.surge.util.PoolDescriber -> pXtD:
react.surge.util.PoolNanoThrottle -> ktXk:
react.surge.util.PositionalSelector -> NgTe:
    react.glang.GSet allowedChunks -> Xvcj
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> gEkj
    39:40:void addChunk(org.bukkit.Chunk) -> kQcX
    44:44:react.glang.GSet getAllowedChunks() -> qdiv
react.surge.util.Protocol -> vswA:
    react.surge.util.Protocol LATEST -> UKWi
    react.surge.util.Protocol R1_12_2 -> gqoD
    react.surge.util.Protocol R1_12_2_PRE -> sBMB
    react.surge.util.Protocol R1_12_1 -> GdRj
    react.surge.util.Protocol R1_12 -> EoNX
    react.surge.util.Protocol R1_11_2 -> BLRp
    react.surge.util.Protocol R1_11_1 -> qfYp
    react.surge.util.Protocol R1_11 -> kKWD
    react.surge.util.Protocol R1_10_2 -> bHkv
    react.surge.util.Protocol R1_10_1 -> ayOG
    react.surge.util.Protocol R1_10 -> NWeW
    react.surge.util.Protocol R1_9_4 -> ekjr
    react.surge.util.Protocol R1_9_3 -> oyiT
    react.surge.util.Protocol R1_9_2 -> SVUv
    react.surge.util.Protocol R1_9_1 -> BLUC
    react.surge.util.Protocol R1_9 -> GJcF
    react.surge.util.Protocol R1_8_9 -> FOoo
    react.surge.util.Protocol R1_8_8 -> ChjN
    react.surge.util.Protocol R1_8_7 -> HMfN
    react.surge.util.Protocol R1_8_6 -> RctL
    react.surge.util.Protocol R1_8_5 -> plKO
    react.surge.util.Protocol R1_8_4 -> KFNi
    react.surge.util.Protocol R1_8_3 -> ARBY
    react.surge.util.Protocol R1_8_2 -> cKrb
    react.surge.util.Protocol R1_8_1 -> yUBt
    react.surge.util.Protocol R1_8 -> GlfX
    react.surge.util.Protocol R1_7_10 -> MnXJ
    react.surge.util.Protocol R1_7_9 -> fCyt
    react.surge.util.Protocol R1_7_8 -> twwC
    react.surge.util.Protocol R1_7_7 -> htso
    react.surge.util.Protocol R1_7_6 -> RdVC
    react.surge.util.Protocol R1_7_5 -> msbe
    react.surge.util.Protocol R1_7_4 -> Ascu
    react.surge.util.Protocol R1_7_3 -> QOoj
    react.surge.util.Protocol R1_7_2 -> tNCs
    react.surge.util.Protocol R1_7_1 -> kdjc
    react.surge.util.Protocol B1_6_4 -> NWfb
    react.surge.util.Protocol B1_6_3 -> YhhB
    react.surge.util.Protocol B1_6_2 -> YqYO
    react.surge.util.Protocol B1_6_1 -> pkjB
    react.surge.util.Protocol B1_5_2 -> RdSo
    react.surge.util.Protocol B1_5_1 -> fCxa
    react.surge.util.Protocol B1_5 -> qoNL
    react.surge.util.Protocol B1_4_7 -> XnUa
    react.surge.util.Protocol B1_4_6 -> whMw
    react.surge.util.Protocol B1_4_5 -> VElA
    react.surge.util.Protocol B1_4_4 -> YXGO
    react.surge.util.Protocol B1_4_2 -> uGtI
    react.surge.util.Protocol B1_3_2 -> wgmB
    react.surge.util.Protocol B1_3_1 -> dyiL
    react.surge.util.Protocol B1_2_5 -> jixD
    react.surge.util.Protocol B1_2_4 -> tNBw
    react.surge.util.Protocol EARLIEST -> XKqs
    react.surge.util.Protocol UNKNOWN -> HxYe
    int version -> version
    java.lang.String packageVersion -> kTLt
    java.lang.String versionName -> GlhC
    boolean netty -> igXj
    react.surge.util.Protocol[] ENUM$VALUES -> EfbD
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> YgWf
    118:118:java.lang.String getPackageVersion() -> fCIb
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> AXbM
    142:150:react.surge.util.Protocol getProtocolVersion() -> HTdw
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> DYFV
    160:160:boolean isServerVersion() -> piwi
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> JkoN
    175:175:boolean isActualVersion() -> sbdE
    180:185:int getVersion() -> getVersion
    190:190:int getMetaVersion() -> PvRY
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> yBLM:
    react.surge.util.Protocol from -> jbKe
    react.surge.util.Protocol to -> XLUn
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> EurP
    21:21:react.surge.util.Protocol getTo() -> KgBy
    26:26:boolean contains(react.surge.util.Protocol) -> IWSm
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> IXEl:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> YokS
    70:70:int randomNextInt() -> MJeY
    80:80:long randomNextLong() -> vIhv
    92:92:boolean isWithin(double) -> avmQ
    104:104:boolean isWithin(int) -> gEYM
    116:116:boolean isWithin(long) -> cIji
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> CMSR
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> CoXE
react.surge.util.RawEvent -> nRmP:
react.surge.util.RayTrace -> uyeC:
    org.bukkit.Location start -> nwHu
    org.bukkit.util.Vector direction -> IbMX
    java.lang.Double maxDistance -> GSVS
    java.lang.Double distanceCovered -> lEnP
    java.lang.Double step -> hSTe
    java.lang.Boolean stop -> xIQE
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> agAu
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> vtFs
    89:89:org.bukkit.Location getStart() -> FqEs
    94:95:void setStart(org.bukkit.Location) -> TyVf
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> BSVJ
    114:115:void setMaxDistance(java.lang.Double) -> IWSm
    119:119:java.lang.Double getDistanceCovered() -> NDxA
    124:125:void setDistanceCovered(java.lang.Double) -> OXeK
    129:129:java.lang.Double getStep() -> ydUP
    134:135:void setStep(java.lang.Double) -> YoSa
react.surge.util.ReflectionUtils -> DsJQ:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> ssNb
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> ssNb
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> ssNb
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> ssNb
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> ssNb
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> ssNb
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> ssNb
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> ssNb
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> ssNb
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> ssNb
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> ssNb
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> ssNb
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> ssNb
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> ssNb
react.surge.util.ReflectionUtils$DataType -> DsJQ$ssNb:
    react.surge.util.ReflectionUtils$DataType BYTE -> tETj
    react.surge.util.ReflectionUtils$DataType SHORT -> cmwj
    react.surge.util.ReflectionUtils$DataType INTEGER -> IQLY
    react.surge.util.ReflectionUtils$DataType LONG -> FGax
    react.surge.util.ReflectionUtils$DataType CHARACTER -> nfFw
    react.surge.util.ReflectionUtils$DataType FLOAT -> hAqb
    react.surge.util.ReflectionUtils$DataType DOUBLE -> bABY
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> xAAA
    java.util.Map CLASS_MAP -> yfEp
    java.lang.Class primitive -> EwbS
    java.lang.Class reference -> bkSu
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> QrTV
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> Vwai
    704:704:java.lang.Class getReference() -> tnWQ
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> DYFV
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> IWSm
    741:742:java.lang.Class getReference(java.lang.Class) -> OXeK
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> ssNb
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> DYFV
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> DYFV
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> IWSm
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> ssNb
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> DsJQ$DYFV:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> hldv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> KWQJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> KxsJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> gaQn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> QOqA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> GdVb
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> htub
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> WQah
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> FGaJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> THXq
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> ARFJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> GSTt
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> agpJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> EgBO
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> yvep
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> kvNf
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> WkTx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> WRDC
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> jaiT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> foPO
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> JBkm
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> XdPy:
    void refresh() -> refresh
react.surge.util.SQLOperation -> FMxr:
    react.surge.util.SQLOperation LOAD -> iVUp
    react.surge.util.SQLOperation SAVE -> neeV
    react.surge.util.SQLOperation[] ENUM$VALUES -> XLTt
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> IXDX:
    react.surge.util.ServerState START -> qCyr
    react.surge.util.ServerState ENABLE -> yUHH
    react.surge.util.ServerState DISABLE -> UBmo
    react.surge.util.ServerState STOP -> iVYf
    react.surge.util.ServerState RUNNING -> HNJp
    react.surge.util.ServerState[] ENUM$VALUES -> eIlI
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> LqnN:
    org.bukkit.Location location -> WHQb
    org.bukkit.util.Vector offset -> FYFb
    org.bukkit.util.Vector size -> UBmw
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> LGKl
    90:94:org.bukkit.Location randomLocation() -> Oajx
    104:104:org.bukkit.Location randomSurface() -> yRrK
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> BKGQ
    129:129:org.bukkit.util.Vector getSize() -> ofwX
react.surge.util.SnowLevel -> jXBg:
    byte level -> KNcS
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> aoQC
    51:52:void setLevel(byte) -> OXeK
react.surge.util.SuperCaller -> CNCt:
    void run() -> run
react.surge.util.T -> rgig:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> ssNb
    32:35:void stop() -> stop
react.surge.util.TXT -> IygB:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> jhSt
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> ssNb
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> ssNb
    99:99:java.lang.String line(react.surge.util.C,int) -> ssNb
    113:113:java.lang.String underline(react.surge.util.C,int) -> DYFV
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> ssNb
react.surge.util.Tag -> JIdp:
    java.lang.String value() -> value
react.surge.util.Timer -> aeww:
    long tns -> PxFT
    long cns -> bIUL
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> CDwg
react.surge.util.VectorMath -> TNqe:
    int[] $SWITCH_TABLE$surge$util$Axis -> mrno
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> CXLb
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> ssNb
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> ssNb
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> DYFV
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> IWSm
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> ssNb
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> DYFV
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> DYFV
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> IWSm
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> OXeK
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> YoSa
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> jhSt
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> BkpW
    111:111:double round(double,int) -> YoSa
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> ssNb
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> ssNb
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> ssNb
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> OXeK
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> YoSa
    268:268:org.bukkit.util.Vector toVector(float,float) -> ssNb
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> ssNb
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> ssNb
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> lCdp
    337:340:double getSpeed(org.bukkit.util.Vector) -> nJLQ
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> ssNb
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> vtFs
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> ssNb
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> DYFV
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> IWSm
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> OXeK
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> EmLA
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> ydSf
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> GcEw
react.surge.util.VectorMath$1 -> TNqe$1:
    org.bukkit.util.Vector val$vector -> MfKo
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> WGJn
    1:1:java.lang.Object onAdapt(java.lang.Object) -> jhSt
react.surge.util.W -> VoJs:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> jhSt
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> ssNb
    75:86:org.bukkit.entity.Entity getEntity(int) -> Aqbp
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> ssNb
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> ssNb
    143:143:int getChunkX(org.bukkit.block.Block) -> BkpW
    155:155:int getChunkY(org.bukkit.block.Block) -> lCdp
    168:169:void dropXp(org.bukkit.Location,int) -> DYFV
    180:180:int getChunkZ(org.bukkit.block.Block) -> nJLQ
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> DYFV
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> ssNb
    232:239:react.glang.GList news(org.bukkit.Location) -> ykmX
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> ssNb
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> rMgK
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> jhSt
    300:300:org.bukkit.World toSync(org.bukkit.World) -> BkpW
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> vtFs
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> rwyd
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> cIji
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> Lhpt
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> ssNb
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> ssNb
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> ssNb
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> ssNb
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> ssNb
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> ssNb
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> ssNb
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> ssNb
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> Cnru
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> EmLA
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> hHYn
    648:660:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> IWSm
    674:686:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> ssNb
    708:740:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> ssNb
    758:765:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> ssNb
    779:779:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> ssNb
react.surge.util.W$1 -> VoJs$1:
    java.lang.Double val$doff -> uHPD
    org.bukkit.entity.Entity val$e -> grUt
    org.bukkit.entity.Entity[] val$result -> QWyh
    1:721:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    726:737:void onTrace(org.bukkit.Location) -> vtFs
react.surge.util.Worlds -> ktXM:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> GHsC
    33:33:boolean hasWorld(java.lang.String) -> uxwg
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> IFas:

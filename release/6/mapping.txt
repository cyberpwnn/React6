org.cyberpwn.gbench.Profiler -> mXJp:
    long nanos -> mXJp
    long startNano -> ksfs
    long millis -> yJLL
    long startMillis -> SnBs
    double time -> qdWJ
    boolean profiling -> JRFt
    15:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> mXJp
    78:78:double getTicks() -> mXJp
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> ksfs
    93:93:double getHours() -> yJLL
    98:98:double getMilliseconds() -> SnBs
    103:103:long getNanoseconds() -> qdWJ
    108:108:long getNanos() -> JRFt
    113:113:long getStartNano() -> halY
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> ssMm
    128:128:double getTime() -> yIkI
    133:133:boolean isProfiling() -> CVAs
org.cyberpwn.gconcurrent.A -> ksfs:
    org.cyberpwn.gconcurrent.ParallelPoolManager mgr -> halY
    7:17:void <init>() -> <init>
org.cyberpwn.gconcurrent.A$1 -> ksfs$1:
    org.cyberpwn.gconcurrent.A this$0 -> ssMm
    1:9:void <init>(org.cyberpwn.gconcurrent.A) -> <init>
    14:15:void run() -> run
org.cyberpwn.gconcurrent.Execution -> yJLL:
    4:4:void <init>() -> <init>
org.cyberpwn.gconcurrent.ParallelPoolManager -> SnBs:
    org.cyberpwn.gconcurrent.QueueMode mode -> yIkI
    org.cyberpwn.glang.GList threads -> CVAs
    int next -> qAsQ
    int threadCount -> gUxV
    java.util.Queue squeue -> yIkA
    java.lang.String key -> key
    org.cyberpwn.gconcurrent.ThreadInformation info -> qArm
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> Fomb
    22:23:void syncQueue(org.cyberpwn.gconcurrent.Execution) -> mXJp
    long getNanoGate() -> qAsQ
    29:42:void tickSyncQueue() -> gUxV
    46:48:void <init>(java.lang.String,int,org.cyberpwn.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,org.cyberpwn.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> yIkA
    93:94:void start() -> start
    98:102:void shutdown() -> shutdown
    106:107:void <init>(int) -> <init>
    111:112:void queue(org.cyberpwn.gconcurrent.Execution) -> ksfs
    116:116:int getSize() -> getSize
    121:128:int getQueueSize() -> qArm
    133:133:org.cyberpwn.gconcurrent.ParallelThread[] getThreads() -> Fomb
    140:167:void updateThreadInformation() -> Ralc
    171:203:org.cyberpwn.gconcurrent.ParallelThread nextThread() -> SnAm
    208:214:void createThreads(int) -> ksfs
    218:218:org.cyberpwn.gconcurrent.QueueMode getMode() -> SBla
    223:223:int getNext() -> gois
    228:228:int getThreadCount() -> getThreadCount
    233:233:java.util.Queue getSqueue() -> JjvV
    238:238:java.lang.String getKey() -> getKey
    243:243:org.cyberpwn.gconcurrent.ThreadInformation getAverageInfo() -> PBUD
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> ePQp
org.cyberpwn.gconcurrent.ParallelThread -> qdWJ:
    java.util.Queue queue -> Ralc
    org.cyberpwn.gconcurrent.ThreadInformation info -> qArm
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> mXJp
    68:75:void execute(org.cyberpwn.gconcurrent.Execution) -> yJLL
    79:89:void execute() -> execute
    93:94:void queue(org.cyberpwn.gconcurrent.Execution) -> ksfs
    98:98:java.util.Queue getQueue() -> aKuV
    103:103:org.cyberpwn.gconcurrent.ThreadInformation getInfo() -> KDGY
org.cyberpwn.gconcurrent.QueueMode -> JRFt:
    org.cyberpwn.gconcurrent.QueueMode ROUND_ROBIN -> SnAm
    org.cyberpwn.gconcurrent.QueueMode SMALLEST -> SBla
    org.cyberpwn.gconcurrent.QueueMode[] ENUM$VALUES -> gois
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:org.cyberpwn.gconcurrent.QueueMode[] values() -> values
    1:1:org.cyberpwn.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
org.cyberpwn.gconcurrent.S -> halY:
    org.cyberpwn.gconcurrent.ParallelPoolManager mgr -> halY
    7:17:void <init>() -> <init>
org.cyberpwn.gconcurrent.S$1 -> halY$1:
    org.cyberpwn.gconcurrent.S this$0 -> JjvV
    1:9:void <init>(org.cyberpwn.gconcurrent.S) -> <init>
    14:15:void run() -> run
org.cyberpwn.gconcurrent.TICK -> ssMm:
    long tick -> PBUD
    5:5:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
org.cyberpwn.gconcurrent.ThreadInformation -> yIkI:
    double ticksPerSecond -> ePQp
    int queuedSize -> aKuV
    boolean processing -> KDGY
    double utilization -> hGxw
    org.cyberpwn.gmath.Average ticksPerSecondAverage -> eYCP
    long tick -> PBUD
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> hGxw
    33:35:void setTicksPerSecond(double) -> ksfs
    39:39:int getQueuedSize() -> eYCP
    44:45:void setQueuedSize(int) -> yJLL
    49:49:boolean isProcessing() -> dMNe
    54:55:void setProcessing(boolean) -> mXJp
    59:59:double getUtilization() -> jVod
    64:65:void setUtilization(double) -> yJLL
    69:69:double getTicksPerSecondAverage() -> wnXH
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> qKCn
    89:89:int getId() -> getId
org.cyberpwn.gformat.F -> CVAs:
    java.text.NumberFormat NF -> dMNe
    java.text.DecimalFormat DF -> jVod
    java.lang.String[] NAMES -> wnXH
    java.math.BigInteger THOUSAND -> qKCn
    java.util.NavigableMap MAP -> HdqI
    22:33:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    37:54:java.lang.String capitalize(java.lang.String) -> capitalize
    59:66:java.lang.String capitalizeWords(java.lang.String) -> mXJp
    71:86:java.lang.String time(double,int) -> mXJp
    91:91:java.lang.String b(int) -> b
    96:96:java.lang.String b(long) -> mXJp
    101:101:java.lang.String b(double) -> SnBs
    106:123:java.lang.String b(java.math.BigInteger) -> mXJp
    128:132:void instantiate() -> HdqI
    144:144:java.lang.String fileSize(long) -> ksfs
    157:157:java.lang.String memSize(long) -> yJLL
    170:171:java.lang.String stamp(long) -> SnBs
    187:214:java.lang.String ofSize(long,int) -> mXJp
    228:233:java.lang.String trim(java.lang.String,int) -> mXJp
    246:266:java.lang.String cname(java.lang.String) -> ksfs
    280:292:java.lang.String repeat(java.lang.String,int) -> repeat
    304:311:java.lang.String mem(long) -> qdWJ
    324:342:java.lang.String memx(long) -> JRFt
    356:357:java.lang.String f(long) -> halY
    369:370:java.lang.String f(int) -> SnBs
    384:393:java.lang.String f(double,int) -> ksfs
    409:418:java.lang.String fd(double,int) -> yJLL
    432:441:java.lang.String f(float,int) -> mXJp
    452:452:java.lang.String f(double) -> qdWJ
    463:463:java.lang.String f(float) -> mXJp
    478:478:java.lang.String pc(double,int) -> SnBs
    493:493:java.lang.String pc(float,int) -> ksfs
    506:506:java.lang.String pc(double) -> JRFt
    519:519:java.lang.String pc(float) -> ksfs
    535:535:java.lang.String pc(int,int,int) -> mXJp
    549:549:java.lang.String pc(int,int) -> mXJp
    565:565:java.lang.String pc(long,long,int) -> mXJp
    579:579:java.lang.String pc(long,long) -> mXJp
    591:591:java.lang.String msSeconds(long) -> ssMm
    605:605:java.lang.String msSeconds(long,int) -> ksfs
    617:617:java.lang.String nsMs(long) -> yIkI
    631:631:java.lang.String nsMs(long,int) -> yJLL
    645:645:java.lang.String nsMsd(long,int) -> SnBs
org.cyberpwn.glang.AccessCallback -> qAsQ:
    java.lang.Object get() -> get
org.cyberpwn.glang.Adapter -> gUxV:
    java.lang.Object adapt(java.lang.Object) -> mXJp
    java.lang.Object onAdapt(java.lang.Object) -> ksfs
org.cyberpwn.glang.Callback -> yIkA:
    java.lang.Object t -> vHqM
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> yJLL
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
org.cyberpwn.glang.FinalDouble -> qArm:
    double i -> Bkpl
    19:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> halY
org.cyberpwn.glang.FinalFloat -> Fomb:
    float i -> i
    19:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> yJLL
org.cyberpwn.glang.FinalInteger -> Ralc:
    int i -> i
    19:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> qdWJ
org.cyberpwn.glang.FinalLong -> SnAm:
    long i -> WNxt
    19:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> CVAs
org.cyberpwn.glang.FinalString -> SBla:
    java.lang.String string -> string
    19:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
org.cyberpwn.glang.GAdapter -> gois:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> mXJp
    java.lang.Object onAdapt(java.lang.Object) -> ksfs
org.cyberpwn.glang.GBiset -> JjvV:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> jhSC
    java.lang.Object b -> tTQG
    30:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> vHqM
    53:54:void setA(java.lang.Object) -> SnBs
    63:63:java.lang.Object getB() -> Bkpl
    73:74:void setB(java.lang.Object) -> qdWJ
org.cyberpwn.glang.GList -> PBUD:
    long serialVersionUID -> serialVersionUID
    29:30:void <init>() -> <init>
    40:46:void <init>(java.util.Set) -> <init>
    56:62:void <init>(java.util.Collection) -> <init>
    72:78:void <init>(java.util.Iterator) -> <init>
    88:90:void <init>(java.lang.Object[]) -> <init>
    101:109:void <init>(java.util.List) -> <init>
    118:145:java.lang.Object mostCommon() -> WNxt
    155:157:org.cyberpwn.glang.GList shuffleCopy() -> jhSC
    165:166:void shuffle() -> tTQG
    177:203:org.cyberpwn.glang.GList split() -> jErH
    215:215:boolean hasIndex(int) -> JRFt
    225:226:java.lang.Object pickRandom() -> RjaO
    237:244:org.cyberpwn.glang.GList stringList() -> mhmm
    255:259:void forEach(org.cyberpwn.glang.Callback) -> mXJp
    268:268:int last() -> last
    282:287:int getIndexOrLast(int) -> halY
    303:303:org.cyberpwn.glang.GList cropFrom(int) -> ssMm
    308:340:org.cyberpwn.glang.GList split(int) -> yIkI
    356:356:org.cyberpwn.glang.GList cropTo(int) -> CVAs
    373:383:org.cyberpwn.glang.GList crop(int,int) -> ksfs
    394:398:org.cyberpwn.glang.GList removeDuplicates() -> MtdI
    409:413:void removeAll(java.lang.Object) -> JRFt
    422:422:boolean hasDuplicates() -> jEqq
    430:438:void sort() -> sort
    451:457:void push(java.lang.Object,int) -> mXJp
    468:472:void add(java.lang.Object[]) -> add
    483:484:org.cyberpwn.glang.GList qadd(java.lang.Object) -> halY
    495:499:void add(java.util.List) -> mXJp
    511:543:java.lang.String toString(java.lang.String) -> toString
    553:555:org.cyberpwn.glang.GList reverse() -> lUIx
    564:564:java.lang.String toString() -> toString
    574:581:org.cyberpwn.glang.GList copy() -> WXMo
    593:594:org.cyberpwn.glang.GList qdel(java.lang.Object) -> ssMm
    604:611:java.lang.Object pop() -> pop
    616:625:java.lang.Object popRandom() -> NLsD
org.cyberpwn.glang.GList$1 -> PBUD$1:
    org.cyberpwn.glang.GList this$0 -> jErH
    431:431:void <init>(org.cyberpwn.glang.GList) -> <init>
    435:435:int compare(java.lang.Object,java.lang.Object) -> compare
org.cyberpwn.glang.GListAdapter -> ePQp:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> ksfs
    java.lang.Object onAdapt(java.lang.Object) -> ksfs
org.cyberpwn.glang.GMap -> aKuV:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:org.cyberpwn.glang.GMap copy() -> CLqw
    53:54:org.cyberpwn.glang.GMap qput(java.lang.Object,java.lang.Object) -> mXJp
    64:81:org.cyberpwn.glang.GMap flip() -> vsgm
    87:94:java.lang.String toString() -> toString
    106:111:org.cyberpwn.glang.GMap append(org.cyberpwn.glang.GMap) -> mXJp
    121:121:org.cyberpwn.glang.GList k() -> inDC
    131:131:org.cyberpwn.glang.GSet kset() -> ePUd
    141:141:org.cyberpwn.glang.GList v() -> TEsR
    151:151:org.cyberpwn.glang.GSet vset() -> Ynto
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> ksfs
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:org.cyberpwn.glang.GList get(org.cyberpwn.glang.GList) -> mXJp
    209:219:org.cyberpwn.glang.GMap removeDuplicateValues() -> uFRK
    233:242:void put(org.cyberpwn.glang.GList,org.cyberpwn.glang.GList) -> mXJp
    251:267:org.cyberpwn.glang.GList sortK() -> Lhol
    277:293:org.cyberpwn.glang.GList sortV() -> LFmP
org.cyberpwn.glang.GQuadraset -> KDGY:
    java.lang.Object a -> jhSC
    java.lang.Object b -> tTQG
    java.lang.Object c -> RjaO
    java.lang.Object d -> mhmm
    11:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> vHqM
    25:26:void setA(java.lang.Object) -> SnBs
    30:30:java.lang.Object getB() -> Bkpl
    35:36:void setB(java.lang.Object) -> qdWJ
    40:40:java.lang.Object getC() -> SCOk
    45:46:void setC(java.lang.Object) -> yIkI
    50:50:java.lang.Object getD() -> GapC
    55:56:void setD(java.lang.Object) -> CVAs
org.cyberpwn.glang.GSet -> hGxw:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
org.cyberpwn.glang.GTriset -> eYCP:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> jhSC
    java.lang.Object b -> tTQG
    java.lang.Object c -> RjaO
    13:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> vHqM
    26:27:void setA(java.lang.Object) -> SnBs
    31:31:java.lang.Object getB() -> Bkpl
    36:37:void setB(java.lang.Object) -> qdWJ
    41:41:java.lang.Object getC() -> SCOk
    46:47:void setC(java.lang.Object) -> yIkI
org.cyberpwn.gmath.Average -> dMNe:
    double[] values -> MtdI
    double average -> jEqq
    boolean dirty -> lUIx
    10:15:void <init>(int) -> <init>
    19:21:void put(double) -> ssMm
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> vsgc
org.cyberpwn.gmath.DoubleArrayUtils -> jVod:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> mXJp
    17:19:void wrapRight(double[]) -> mXJp
    23:27:void fill(double[],double) -> fill
org.cyberpwn.gmath.M -> wnXH:
    int precision -> WXMo
    int modulus -> NLsD
    float[] sin -> CLqw
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> mXJp
    31:36:boolean r(java.lang.Double) -> mXJp
    51:51:double tps(long,int) -> qdWJ
    63:63:double ticksFromNS(long) -> qAsQ
    75:101:java.lang.String toRoman(int) -> qAsQ
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> yJLL
    144:216:int fromRoman(java.lang.String) -> yJLL
    226:226:long ns() -> erWK
    236:236:long ms() -> MIoJ
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> ksfs
    333:333:float sinLookup(int) -> gUxV
org.cyberpwn.json.HTTP -> qKCn:
    java.lang.String CRLF -> vsgm
    35:35:void <init>() -> <init>
    93:127:org.cyberpwn.json.JSONObject toJSONObject(java.lang.String) -> SnBs
    162:198:java.lang.String toString(org.cyberpwn.json.JSONObject) -> mXJp
org.cyberpwn.json.HTTPTokener -> HdqI:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
org.cyberpwn.json.JSONArray -> vHqM:
    java.util.ArrayList myArrayList -> inDC
    94:96:void <init>() -> <init>
    108:143:void <init>(org.cyberpwn.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    167:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> mXJp
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> yIkA
    352:358:int getInt(int) -> getInt
    374:379:org.cyberpwn.json.JSONArray getJSONArray(int) -> qArm
    394:399:org.cyberpwn.json.JSONObject getJSONObject(int) -> Fomb
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> qdWJ
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> Ralc
    515:515:boolean optBoolean(int) -> SnAm
    533:536:boolean optBoolean(int,boolean) -> mXJp
    551:551:double optDouble(int) -> SBla
    569:572:double optDouble(int,double) -> mXJp
    587:587:int optInt(int) -> gois
    605:608:int optInt(int,int) -> SnBs
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> ksfs
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> mXJp
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> mXJp
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> mXJp
    722:723:org.cyberpwn.json.JSONArray optJSONArray(int) -> JjvV
    737:738:org.cyberpwn.json.JSONObject optJSONObject(int) -> PBUD
    752:752:long optLong(int) -> ePQp
    770:773:long optLong(int,long) -> mXJp
    788:788:java.lang.String optString(int) -> aKuV
    803:804:java.lang.String optString(int,java.lang.String) -> mXJp
    816:817:org.cyberpwn.json.JSONArray put(boolean) -> ksfs
    830:831:org.cyberpwn.json.JSONArray put(java.util.Collection) -> mXJp
    845:848:org.cyberpwn.json.JSONArray put(double) -> yIkI
    860:861:org.cyberpwn.json.JSONArray put(int) -> KDGY
    873:874:org.cyberpwn.json.JSONArray put(long) -> gUxV
    887:888:org.cyberpwn.json.JSONArray put(java.util.Map) -> mXJp
    902:903:org.cyberpwn.json.JSONArray put(java.lang.Object) -> qAsQ
    921:922:org.cyberpwn.json.JSONArray put(int,boolean) -> ksfs
    939:940:org.cyberpwn.json.JSONArray put(int,java.util.Collection) -> mXJp
    958:959:org.cyberpwn.json.JSONArray put(int,double) -> ksfs
    977:978:org.cyberpwn.json.JSONArray put(int,int) -> qdWJ
    996:997:org.cyberpwn.json.JSONArray put(int,long) -> ksfs
    1015:1016:org.cyberpwn.json.JSONArray put(int,java.util.Map) -> mXJp
    1037:1053:org.cyberpwn.json.JSONArray put(int,java.lang.Object) -> mXJp
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> gUxV
    1126:1135:org.cyberpwn.json.JSONObject toJSONObject(org.cyberpwn.json.JSONArray) -> mXJp
    1153:1156:java.lang.String toString() -> toString
    1174:1178:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> mXJp
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> mXJp
org.cyberpwn.json.JSONException -> Bkpl:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> ePUd
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
org.cyberpwn.json.JSONML -> WNxt:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(org.cyberpwn.json.XMLTokener,boolean,org.cyberpwn.json.JSONArray) -> mXJp
    301:301:org.cyberpwn.json.JSONArray toJSONArray(java.lang.String) -> JRFt
    320:320:org.cyberpwn.json.JSONArray toJSONArray(org.cyberpwn.json.XMLTokener) -> mXJp
    340:340:org.cyberpwn.json.JSONObject toJSONObject(org.cyberpwn.json.XMLTokener) -> ksfs
    360:360:org.cyberpwn.json.JSONObject toJSONObject(java.lang.String) -> SnBs
    379:456:java.lang.String toString(org.cyberpwn.json.JSONArray) -> ksfs
    472:552:java.lang.String toString(org.cyberpwn.json.JSONObject) -> mXJp
org.cyberpwn.json.JSONObject -> jhSC:
    java.util.Map map -> map
    java.lang.Object NULL -> TEsR
    159:161:void <init>() -> <init>
    179:189:void <init>(org.cyberpwn.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(org.cyberpwn.json.JSONTokener) -> <init>
    262:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:org.cyberpwn.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> mXJp
    455:467:org.cyberpwn.json.JSONObject append(java.lang.String,java.lang.Object) -> ksfs
    480:499:java.lang.String doubleToString(double) -> CVAs
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> halY
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:org.cyberpwn.json.JSONArray getJSONArray(java.lang.String) -> ssMm
    691:696:org.cyberpwn.json.JSONObject getJSONObject(java.lang.String) -> yIkI
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(org.cyberpwn.json.JSONObject) -> ksfs
    751:767:java.lang.String[] getNames(java.lang.Object) -> yIkA
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:org.cyberpwn.json.JSONObject increment(java.lang.String) -> CVAs
    855:855:boolean isNull(java.lang.String) -> qAsQ
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:org.cyberpwn.json.JSONArray names() -> VvmI
    917:937:java.lang.String numberToString(java.lang.Number) -> mXJp
    949:949:java.lang.Object opt(java.lang.String) -> gUxV
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> mXJp
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> mXJp
    1018:1018:boolean optBoolean(java.lang.String) -> yIkA
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> mXJp
    1054:1054:double optDouble(java.lang.String) -> qArm
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> mXJp
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> mXJp
    1116:1119:double optDouble(java.lang.String,double) -> mXJp
    1134:1134:int optInt(java.lang.String) -> Fomb
    1152:1155:int optInt(java.lang.String,int) -> ksfs
    1169:1170:org.cyberpwn.json.JSONArray optJSONArray(java.lang.String) -> Ralc
    1183:1184:org.cyberpwn.json.JSONObject optJSONObject(java.lang.String) -> SnAm
    1198:1198:long optLong(java.lang.String) -> SBla
    1216:1219:long optLong(java.lang.String,long) -> mXJp
    1234:1234:java.lang.String optString(java.lang.String) -> gois
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> mXJp
    1255:1305:void populateMap(java.lang.Object) -> qArm
    1320:1321:org.cyberpwn.json.JSONObject put(java.lang.String,boolean) -> ksfs
    1337:1338:org.cyberpwn.json.JSONObject put(java.lang.String,java.util.Collection) -> mXJp
    1354:1355:org.cyberpwn.json.JSONObject put(java.lang.String,double) -> ksfs
    1371:1372:org.cyberpwn.json.JSONObject put(java.lang.String,int) -> yJLL
    1388:1389:org.cyberpwn.json.JSONObject put(java.lang.String,long) -> ksfs
    1405:1406:org.cyberpwn.json.JSONObject put(java.lang.String,java.util.Map) -> mXJp
    1425:1437:org.cyberpwn.json.JSONObject put(java.lang.String,java.lang.Object) -> yJLL
    1455:1463:org.cyberpwn.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> SnBs
    1482:1486:org.cyberpwn.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> qdWJ
    1501:1512:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> mXJp
    1590:1590:java.lang.Object remove(java.lang.String) -> JjvV
    1605:1640:boolean similar(java.lang.Object) -> gUxV
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> Fomb
    1751:1760:org.cyberpwn.json.JSONArray toJSONArray(org.cyberpwn.json.JSONArray) -> yJLL
    1779:1782:java.lang.String toString() -> toString
    1802:1806:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> mXJp
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> mXJp
    2000:2004:void indent(java.io.Writer,int) -> mXJp
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> mXJp
    153:153:void <clinit>() -> <clinit>
org.cyberpwn.json.JSONObject$1 -> jhSC$1:
org.cyberpwn.json.JSONObject$Null -> jhSC$mXJp:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(org.cyberpwn.json.JSONObject$1) -> <init>
org.cyberpwn.json.JSONString -> tTQG:
    java.lang.String toJSONString() -> toJSONString
org.cyberpwn.json.JSONStringer -> jErH:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
org.cyberpwn.json.JSONTokener -> RjaO:
    long character -> Ynto
    boolean eof -> eof
    long index -> uFRK
    long line -> Lhol
    char previous -> LFmP
    java.io.Reader reader -> reader
    boolean usePrevious -> SCOk
    60:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> VfLY
    119:131:int dehexchar(char) -> mXJp
    136:136:boolean end() -> BIor
    147:153:boolean more() -> SvTc
    164:198:char next() -> next
    213:218:char next(char) -> ksfs
    233:250:java.lang.String next(int) -> hGxw
    263:268:char nextClean() -> PJgj
    287:334:java.lang.String nextString(char) -> yJLL
    349:362:java.lang.String nextTo(char) -> SnBs
    376:388:java.lang.String nextTo(java.lang.String) -> PBUD
    403:441:java.lang.Object nextValue() -> kYtq
    458:479:char skipTo(char) -> qdWJ
    491:491:org.cyberpwn.json.JSONException syntaxError(java.lang.String) -> ePQp
    501:501:java.lang.String toString() -> toString
org.cyberpwn.json.JSONWriter -> mhmm:
    int maxdepth -> GapC
    boolean comma -> vsgc
    char mode -> erWK
    org.cyberpwn.json.JSONObject[] stack -> MIoJ
    int top -> top
    java.io.Writer writer -> writer
    98:104:void <init>(java.io.Writer) -> <init>
    117:141:org.cyberpwn.json.JSONWriter append(java.lang.String) -> aKuV
    157:164:org.cyberpwn.json.JSONWriter array() -> YoUO
    180:193:org.cyberpwn.json.JSONWriter end(char,char) -> mXJp
    206:206:org.cyberpwn.json.JSONWriter endArray() -> kITa
    219:219:org.cyberpwn.json.JSONWriter endObject() -> WWmD
    235:258:org.cyberpwn.json.JSONWriter key(java.lang.String) -> KDGY
    274:285:org.cyberpwn.json.JSONWriter object() -> LFlN
    299:310:void pop(char) -> JRFt
    322:329:void push(org.cyberpwn.json.JSONObject) -> yJLL
    342:342:org.cyberpwn.json.JSONWriter value(boolean) -> yJLL
    356:356:org.cyberpwn.json.JSONWriter value(double) -> qAsQ
    369:369:org.cyberpwn.json.JSONWriter value(long) -> yIkA
    385:385:org.cyberpwn.json.JSONWriter value(java.lang.Object) -> Ralc
org.cyberpwn.json.XML -> MtdI:
    java.lang.Character AMP -> VvmI
    java.lang.Character APOS -> VfLY
    java.lang.Character BANG -> BIor
    java.lang.Character EQ -> SvTc
    java.lang.Character GT -> PJgj
    java.lang.Character LT -> kYtq
    java.lang.Character QUEST -> YoUO
    java.lang.Character QUOT -> kITa
    java.lang.Character SLASH -> WWmD
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> hGxw
    150:339:boolean parse(org.cyberpwn.json.XMLTokener,org.cyberpwn.json.JSONObject,java.lang.String) -> mXJp
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:org.cyberpwn.json.JSONObject toJSONObject(java.lang.String) -> SnBs
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
    40:64:void <clinit>() -> <clinit>
org.cyberpwn.json.XMLTokener -> jEqq:
    java.util.HashMap entity -> LFlN
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> Ahqh
    108:133:java.lang.Object nextContent() -> WFnH
    149:166:java.lang.Object nextEntity(char) -> halY
    186:239:java.lang.Object nextMeta() -> AXPu
    261:334:java.lang.Object nextToken() -> XktK
    354:420:boolean skipPast(java.lang.String) -> eYCP
    45:51:void <clinit>() -> <clinit>
react.Config -> lUIx:
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> Ahqh
    java.lang.String A_ENTITYCACHE_INTERVAL -> WFnH
    java.lang.String A_DROPSTACK_RADIUS -> AXPu
    java.lang.String A_DROPSTACK_STACKDROPS -> XktK
    java.lang.String A_DROPSTACK_USEDEFAULT -> FpQi
    java.lang.String A_DROPSTACK_SMOOTHSTACK -> NxIh
    java.lang.String A_POOL_MAXTHREADS -> NVFg
    java.lang.String A_POOL_SYNC_NANOS -> EJkS
    java.lang.String A_ENTITYCACHE_ENABLED -> AaAq
    java.lang.String A_FASTLEAF_ENABLED -> CLtX
    java.lang.String A_FASTLEAF_ONDECAY -> DGgy
    java.lang.String A_FASTLEAF_INSTANT -> nSBH
    java.lang.String A_FASTLEAF_DECAYPERIOD -> wUJy
    java.lang.String A_DROPSTACK_MINAGE -> cdDX
    java.lang.String A_ENTITYSTACK_ENABLED -> onuL
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> aelV
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> Cnvn
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> qSYN
    java.lang.String A_GLASS_SHOW_BLOCKS -> bWnA
    java.lang.String A_GLASS_SHOW_PARTICLES -> rpOD
    java.lang.String A_ALLOW_CULL -> AFpD
    java.lang.String A_ALLOW_PURGE -> DijM
    java.lang.String A_ALLOW_CACHE -> fJhK
    java.lang.String A_CULL_RULES -> kkYw
    int ENTITYCACHE_CHUNK_RADIUS -> Foor
    int ENTITYCACHE_INTERVAL -> Hdte
    double DROPSTACK_RADIUS -> UtMF
    boolean DROPSTACK_STACKDROPS -> xFjc
    boolean DROPSTACK_USEDEFAULT -> qKGr
    boolean DROPSTACK_SMOOTHSTACK -> pOsy
    int POOL_MAXTHREADS -> lekR
    long POOL_SYNC_NANOS -> VCjX
    boolean ENTITYCACHE_ENABLED -> aela
    boolean FASTLEAF_ENABLED -> WqbE
    boolean FASTLEAF_ONDECAY -> JAHk
    boolean FASTLEAF_INSTANT -> bWml
    int FASTLEAF_DECAYPERIOD -> hbQB
    int DROPSTACK_MINAGE -> SeWl
    boolean ENTITYSTACK_ENABLED -> JtPF
    int ENTITYSTACK_MINIMUM_GROUP -> hHaT
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> GsWV
    int ENTITYSTACK_MAXIMUM_HEALTH -> MItN
    boolean GLASS_SHOW_BLOCKS -> BkvY
    boolean GLASS_SHOW_PARTICLES -> CUga
    org.cyberpwn.glang.GList ALLOW_CULL -> XuIH
    org.cyberpwn.glang.GList ALLOW_PURGE -> YnyV
    org.cyberpwn.glang.GList ALLOW_CACHE -> IFYW
    org.cyberpwn.glang.GList CULL_RULES -> yIpb
    boolean hrld -> NgJp
    boolean rns -> nteg
    boolean rrl -> Jsoe
    34:34:void <init>() -> <init>
    230:247:void doTrack(org.bukkit.plugin.Plugin) -> mXJp
    252:274:void onRead(org.bukkit.plugin.Plugin) -> ksfs
    278:308:void read(java.io.File,boolean) -> mXJp
    313:432:surge.cluster.DataCluster read(surge.cluster.DataCluster,boolean) -> mXJp
    437:474:surge.cluster.DataCluster defaultConfig(boolean) -> SnBs
    479:548:org.cyberpwn.glang.GList getDefaultEntitiesForCaching() -> FpQi
    553:624:org.cyberpwn.glang.GList getDefaultEntitiesForCulling() -> NxIh
    629:662:org.cyberpwn.glang.GList getDefaultEntitiesForRemoval() -> NVFg
    667:691:org.cyberpwn.glang.GList getDefaultCullRules() -> EJkS
    111:225:void <clinit>() -> <clinit>
react.Config$1 -> lUIx$1:
    java.io.File val$fConfig -> avqL
    java.io.File val$fConfigExperimental -> CDfF
    org.bukkit.plugin.Plugin val$main -> HSvh
    234:234:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    238:242:void run() -> run
react.Config$2 -> lUIx$2:
    int[] $SwitchMap$org$bukkit$entity$EntityType -> HKdb
    483:483:void <clinit>() -> <clinit>
react.Gate -> WXMo:
    12:12:void <init>() -> <init>
    16:19:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> mXJp
    24:24:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> ksfs
    29:29:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> yJLL
    34:34:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> SnBs
    39:40:void unloadChunk(org.bukkit.Chunk) -> mXJp
    44:45:void unloadChunk(org.bukkit.World,int,int) -> mXJp
    49:55:void removeEntity(org.bukkit.entity.Entity) -> mXJp
    59:65:void purgeEntity(org.bukkit.entity.Entity) -> ksfs
    69:75:void cullEntity(org.bukkit.entity.Entity) -> yJLL
    79:85:void cachedEntity(org.bukkit.entity.Entity) -> SnBs
    89:100:void cacheEntity(org.bukkit.entity.Entity) -> qdWJ
    104:104:int restoreEntities(org.bukkit.Chunk) -> ksfs
react.Info -> NLsD:
    java.lang.String CORE_REACT_DOT -> Nwie
    java.lang.String CORE_NAME -> VUMv
    java.lang.String CORE_CACHE -> lfOH
    java.lang.String CORE_DOTYML -> ydCs
    java.lang.String COMMAND_REACT -> bFnS
    java.lang.String COMMAND_ACT_DESCRIPTION -> RkDm
    java.lang.String COMMAND_ACT -> rNNN
    java.lang.String COMMAND_ACT_ALIAS_1 -> jOFy
    java.lang.String COMMAND_ACT_ALIAS_2 -> jqKB
    java.lang.String COMMAND_ACT_USAGE -> Mkul
    java.lang.String COMMAND_HELP_DESCRIPTION -> qllW
    java.lang.String COMMAND_HELP -> wwNq
    java.lang.String COMMAND_HELP_ALIAS_1 -> HBtO
    java.lang.String COMMAND_HELP_ALIAS_2 -> fmNM
    java.lang.String COMMAND_HELP_USAGE -> LaDA
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> lTkh
    java.lang.String COMMAND_CPUSCORE -> MlWV
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> biSA
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> uVvB
    java.lang.String COMMAND_CPUSCORE_USAGE -> MJTO
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> vtKx
    java.lang.String COMMAND_RELOAD -> Cfid
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> kHxI
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> FyDo
    java.lang.String COMMAND_RELOAD_USAGE -> YfkF
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> UlAU
    java.lang.String COMMAND_MONITOR -> LiVY
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> nSEv
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> VTqA
    java.lang.String COMMAND_MONITOR_USAGE -> rorh
    java.lang.String COMMAND_GLASS_DESCRIPTION -> ssVr
    java.lang.String COMMAND_GLASS -> AWsr
    java.lang.String COMMAND_GLASS_ALIAS_1 -> LrGi
    java.lang.String COMMAND_GLASS_ALIAS_2 -> tLGH
    java.lang.String COMMAND_GLASS_USAGE -> XSFr
    java.lang.String MSG_PERMISSION -> fvCQ
    java.lang.String MSG_MONITORING_STARTED -> vRMJ
    java.lang.String MSG_MONITORING_STOPPED -> JbpD
    java.lang.String MSG_GLASS_STARTED -> VfRi
    java.lang.String MSG_GLASS_STOPPED -> WrGR
    org.bukkit.Color COLOR_HOPPER -> xrET
    org.bukkit.Color COLOR_BLOCK_UPDATE -> oUhC
    org.bukkit.Color COLOR_BLOCK_FROMTO -> FpWB
    org.bukkit.Color COLOR_BLOCK_BURN -> Vvsp
    org.bukkit.Color COLOR_BLOCK_DECAY -> PJoH
    org.bukkit.Color COLOR_BLOCK_FORM -> rpTB
    java.lang.String NAME_TICK -> OHMP
    java.lang.String NAME_MEMORY -> JAMu
    java.lang.String NAME_CHUNKS -> leqD
    java.lang.String NAME_ENTITIES -> upkX
    java.lang.String STATE_MONITORING_TAB -> hruy
    java.lang.String STATE_MONITORING_ENABLED -> qloI
    java.lang.String STATE_MAPPING_ENABLED -> rpSI
    java.lang.String STATE_SOUND_PLAYS -> AqhT
    java.lang.String STATE_MONITORING_POSTED -> Wyua
    java.lang.String STATE_MONITORING_LASTTAB -> STXE
    java.lang.String STATE_GLASSES_ENABLED -> aCmQ
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> XJTi
    java.lang.String STATE_PLAYER_HOTBAR -> YMXK
    java.lang.String STATE_PLAYER_SHIFT -> eimG
    java.lang.String STATE_PLAYER_SCROLL -> xWpV
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> NVIs
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> HBur
    java.lang.String PERM_ACCESS -> Ahus
    java.lang.String PERM_MONITOR -> xGPN
    java.lang.String PERM_MONITOR_TITLE -> hruU
    java.lang.String PERM_MONITOR_MAP -> wncc
    java.lang.String PERM_MONITOR_ENVIRONMENT -> FNTl
    java.lang.String PERM_MONITOR_GLASSES -> QFCu
    java.lang.String PERM_ACT -> BIwj
    java.lang.String PERM_RELOAD -> VetS
    java.lang.String SAMPLER_TPS -> bqhA
    java.lang.String SAMPLER_TICK -> pinh
    java.lang.String SAMPLER_TIU -> lfSt
    java.lang.String SAMPLER_MEM -> NUlR
    java.lang.String SAMPLER_FREEMEM -> INmP
    java.lang.String SAMPLER_MAXMEM -> rotp
    java.lang.String SAMPLER_ALLOCMEM -> LhxG
    java.lang.String SAMPLER_MAHS -> qTAY
    java.lang.String SAMPLER_CHK -> tLIK
    java.lang.String SAMPLER_CHKS -> RIGg
    java.lang.String SAMPLER_ENT -> AWvK
    java.lang.String SAMPLER_ENTLIV -> tSwX
    java.lang.String SAMPLER_ENTDROP -> JlDW
    java.lang.String SAMPLER_ENTTILE -> ydHl
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> GbYt
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> PeEO
    java.lang.String ACTION_CULL_ENTITIES_NAME -> lndQ
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> mXUV
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> FVfT
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> dgLy
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> yBDs
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> Xchh
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> fvDH
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> tBtv
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> aTpg
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> ogLP
    6:6:void <init>() -> <init>
    8:119:void <clinit>() -> <clinit>
react.React -> CLqw:
    react.React instance -> dgKn
    react.controller.SampleController sampleController -> BIyH
    react.controller.PlayerController playerController -> qmRN
    react.controller.MonitorController monitorController -> GkJR
    react.controller.CommandController commandController -> Ukac
    react.controller.ActionController actionController -> wTnx
    react.controller.EntityCacheController entityCacheController -> RQVi
    react.controller.DropMergeController dropMergeController -> xGQd
    react.controller.FastDecayController fastDecayController -> cAfA
    react.controller.EntityStackController entityStackController -> Jsrc
    react.controller.GlassController glassController -> XAel
    react.controller.NMSController nmsController -> Gryi
    react.controller.EntityCullController entityCullController -> KTsB
    24:24:void <init>() -> <init>
    69:69:void enable() -> enable
    75:75:void disable() -> disable
react.action.ActionCullEntities -> vsgm:
    long ms -> OGmN
    int lcd -> Mcik
    31:58:void <init>() -> <init>
    63:149:void enact(react.api.IActionSource,react.api.ISelector[]) -> mXJp
    153:155:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> mXJp
    24:24:long access$002(react.action.ActionCullEntities,long) -> mXJp
    24:24:int access$100(react.action.ActionCullEntities) -> mXJp
    24:24:long access$000(react.action.ActionCullEntities) -> ksfs
react.action.ActionCullEntities$1 -> vsgm$1:
    react.action.ActionCullEntities this$0 -> nlYH
    36:36:void <init>(react.action.ActionCullEntities) -> <init>
    40:43:react.api.ISelector get() -> AaAq
    36:36:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> vsgm$2:
    react.action.ActionCullEntities this$0 -> nlYH
    48:48:void <init>(react.action.ActionCullEntities) -> <init>
    52:55:react.api.ISelector get() -> AaAq
    48:48:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> vsgm$3:
    org.cyberpwn.glang.FinalInteger val$completed -> nBIE
    org.cyberpwn.glang.FinalInteger val$total -> fuej
    org.cyberpwn.glang.FinalInteger val$totalCulled -> WhyT
    org.cyberpwn.glang.FinalInteger val$totalChunked -> IqSO
    react.api.IActionSource val$source -> vbqV
    react.action.ActionCullEntities this$0 -> nlYH
    104:104:void <init>(react.action.ActionCullEntities,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,react.api.IActionSource) -> <init>
    108:128:void run() -> run
react.action.ActionCullEntities$4 -> vsgm$4:
    react.api.IActionSource val$source -> vbqV
    org.cyberpwn.glang.FinalInteger val$totalCulled -> WhyT
    org.cyberpwn.glang.FinalInteger val$totalChunked -> IqSO
    react.action.ActionCullEntities this$0 -> nlYH
    136:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger) -> <init>
    140:146:void run() -> run
react.action.ActionPurgeChunks -> inDC:
    long ms -> OGmN
    int lcd -> Mcik
    28:43:void <init>() -> <init>
    48:121:void enact(react.api.IActionSource,react.api.ISelector[]) -> mXJp
    125:137:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> ksfs
    21:21:long access$002(react.action.ActionPurgeChunks,long) -> mXJp
    21:21:int access$100(react.action.ActionPurgeChunks) -> mXJp
    21:21:long access$000(react.action.ActionPurgeChunks) -> ksfs
react.action.ActionPurgeChunks$1 -> inDC$1:
    react.action.ActionPurgeChunks this$0 -> YpAW
    33:33:void <init>(react.action.ActionPurgeChunks) -> <init>
    37:40:react.api.ISelector get() -> AaAq
    33:33:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> inDC$2:
    org.cyberpwn.glang.FinalInteger val$completed -> nBIE
    org.cyberpwn.glang.FinalInteger val$total -> fuej
    org.cyberpwn.glang.FinalInteger val$totalCulled -> WhyT
    org.cyberpwn.glang.FinalInteger val$totalChunked -> IqSO
    react.api.IActionSource val$source -> vbqV
    react.action.ActionPurgeChunks this$0 -> YpAW
    76:76:void <init>(react.action.ActionPurgeChunks,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,react.api.IActionSource) -> <init>
    80:100:void run() -> run
react.action.ActionPurgeChunks$3 -> inDC$3:
    react.api.IActionSource val$source -> vbqV
    org.cyberpwn.glang.FinalInteger val$completed -> nBIE
    react.action.ActionPurgeChunks this$0 -> YpAW
    108:108:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,org.cyberpwn.glang.FinalInteger) -> <init>
    112:118:void run() -> run
react.action.ActionPurgeChunks$4 -> inDC$4:
    org.bukkit.Chunk val$chunk -> bFtu
    java.lang.Runnable val$cb -> oDkQ
    react.action.ActionPurgeChunks this$0 -> YpAW
    126:126:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    130:135:void run() -> run
react.action.ActionPurgeEntities -> ePUd:
    long ms -> OGmN
    int lcd -> Mcik
    33:60:void <init>() -> <init>
    65:152:void enact(react.api.IActionSource,react.api.ISelector[]) -> mXJp
    156:199:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> ksfs
    26:26:long access$002(react.action.ActionPurgeEntities,long) -> mXJp
    26:26:int access$100(react.action.ActionPurgeEntities) -> mXJp
    26:26:long access$000(react.action.ActionPurgeEntities) -> ksfs
    26:26:int access$102(react.action.ActionPurgeEntities,int) -> mXJp
react.action.ActionPurgeEntities$1 -> ePUd$1:
    react.action.ActionPurgeEntities this$0 -> cBHm
    38:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    42:45:react.api.ISelector get() -> AaAq
    38:38:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> ePUd$2:
    react.action.ActionPurgeEntities this$0 -> cBHm
    50:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    54:57:react.api.ISelector get() -> AaAq
    50:50:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> ePUd$3:
    org.cyberpwn.glang.FinalInteger val$completed -> nBIE
    org.cyberpwn.glang.FinalInteger val$total -> fuej
    org.cyberpwn.glang.FinalInteger val$totalCulled -> WhyT
    org.cyberpwn.glang.FinalInteger val$totalChunked -> IqSO
    react.api.IActionSource val$source -> vbqV
    react.action.ActionPurgeEntities this$0 -> cBHm
    106:106:void <init>(react.action.ActionPurgeEntities,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,react.api.IActionSource) -> <init>
    110:130:void run() -> run
react.action.ActionPurgeEntities$4 -> ePUd$4:
    react.api.IActionSource val$source -> vbqV
    org.cyberpwn.glang.FinalInteger val$totalCulled -> WhyT
    org.cyberpwn.glang.FinalInteger val$totalChunked -> IqSO
    react.action.ActionPurgeEntities this$0 -> cBHm
    138:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger) -> <init>
    143:149:void run() -> run
react.action.ActionPurgeEntities$5 -> ePUd$5:
    org.bukkit.entity.Entity val$i -> vcRa
    org.cyberpwn.glang.FinalInteger val$cu -> xyyN
    int val$k -> rNTr
    org.bukkit.Chunk val$chunk -> bFtu
    java.lang.Runnable val$cb -> oDkQ
    react.action.ActionPurgeEntities this$0 -> cBHm
    178:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,org.cyberpwn.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    182:190:void run() -> run
react.api.Action -> TEsR:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> IydG
    java.lang.String[] nodes -> tnMY
    react.api.ActionHandle handle -> myxn
    react.api.ActionState state -> hjil
    react.api.ActionTargetType target -> BclT
    react.api.ActionType type -> VvxM
    react.api.IActionSource currentSource -> qdcE
    double progress -> DrcY
    org.cyberpwn.glang.GMap defaultSelectors -> jqQA
    23:24:void <init>(react.api.ActionType) -> <init>
    27:39:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    44:59:react.api.ISelector[] biselect(react.api.ISelector[]) -> mXJp
    65:66:void setDefaultSelector(java.lang.Class,org.cyberpwn.glang.AccessCallback) -> mXJp
    71:71:java.lang.String getName() -> getName
    77:77:java.lang.String getDescription() -> getDescription
    83:83:react.api.ActionHandle getHandleType() -> CLtX
    89:89:react.api.ActionState getState() -> DGgy
    95:95:java.lang.String getStatus() -> getStatus
    101:102:void setStatus(java.lang.String) -> dMNe
    107:107:double getProgress() -> getProgress
    113:114:void setProgress(double) -> setProgress
    119:119:react.api.ActionTargetType getTarget() -> nSBH
    125:125:react.api.ActionType getType() -> wUJy
    131:131:org.cyberpwn.glang.GMap getDefaultSelectors() -> cdDX
    137:146:void act(react.api.IActionSource,react.api.ISelector[]) -> ksfs
    151:152:void completeAction() -> onuL
    157:157:react.api.IActionSource getCurrentSource() -> aelV
    163:163:java.lang.String[] getNodes() -> Cnvn
    169:170:void setNodes(java.lang.String[]) -> mXJp
    void enact(react.api.IActionSource,react.api.ISelector[]) -> mXJp
react.api.ActionAlreadyRunningException -> Ynto:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> uFRK:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> Lhol:
    react.api.ActionHandle AUTOMATIC -> tLId
    react.api.ActionHandle MANUAL -> rxfr
    react.api.ActionHandle MUTEX -> dUlA
    react.api.ActionHandle[] $VALUES -> DGnt
    3:3:react.api.ActionHandle[] values() -> values
    3:3:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ActionNotRunningException -> LFmP:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> SCOk:
    react.api.ActionState IDLE -> WaIA
    react.api.ActionState RUNNING -> myyE
    react.api.ActionState[] $VALUES -> NVMo
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> GapC:
    react.api.ActionTargetType POSITIONAL -> vkaS
    react.api.ActionTargetType SYSTEM -> myxM
    react.api.ActionTargetType[] $VALUES -> FNWD
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> vsgc:
    react.api.ActionType CULL_ENTITIES -> KLcy
    react.api.ActionType PURGE_ENTITIES -> Jkcx
    react.api.ActionType PURGE_CHUNKS -> Wyys
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> myxn
    react.api.ActionTargetType target -> BclT
    react.api.ActionType[] $VALUES -> gNSr
    5:5:react.api.ActionType[] values() -> values
    5:5:react.api.ActionType valueOf(java.lang.String) -> valueOf
    17:22:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    26:26:java.lang.String getName() -> getName
    31:31:java.lang.String getDescription() -> getDescription
    36:36:react.api.ActionHandle getHandle() -> qSYN
    41:41:react.api.ActionTargetType getTarget() -> nSBH
    5:9:void <clinit>() -> <clinit>
react.api.Address -> erWK:
    int value() -> value
react.api.CPUBenchmark -> MIoJ:
    org.bukkit.command.CommandSender sender -> sender
    int score -> LWxB
    org.cyberpwn.gmath.Average roll -> wDPq
    20:25:void <init>(org.bukkit.command.CommandSender) -> <init>
    30:68:void run() -> run
    13:13:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> mXJp
    13:13:int access$100(react.api.CPUBenchmark) -> ksfs
    13:13:org.cyberpwn.gmath.Average access$200(react.api.CPUBenchmark) -> yJLL
react.api.CPUBenchmark$1 -> MIoJ$1:
    react.api.CPUBenchmark this$0 -> lvtr
    60:60:void <init>(react.api.CPUBenchmark) -> <init>
    64:66:void run() -> run
react.api.CPUResult -> VvmI:
    react.api.CPUResult ULTRA_SLOW -> JtUd
    react.api.CPUResult VERY_SLOW -> TNnN
    react.api.CPUResult SLOW -> ryHL
    react.api.CPUResult AVERAGE -> bOfK
    react.api.CPUResult GOOD -> xrLK
    react.api.CPUResult FAST -> xWxN
    react.api.CPUResult VERY_FAST -> pacH
    react.api.CPUResult ULTRA_FAST -> OsFn
    java.lang.String m -> rNVu
    react.api.CPUResult[] $VALUES -> LPKY
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> eYCP
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> VfLY:
    org.cyberpwn.glang.GMap cache -> KUXe
    12:14:void <init>() -> <init>
    19:19:org.cyberpwn.glang.GSet get(java.lang.Object) -> SnAm
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> SBla
    42:43:void clear() -> clear
    48:48:org.cyberpwn.glang.GList k() -> inDC
    54:54:boolean has(java.lang.Object) -> gois
react.api.Clip -> BIor:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> SvTc:
    org.bukkit.command.CommandSender sender -> sender
    12:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> jVod
    30:31:void sendResponseSuccess(java.lang.String) -> wnXH
    36:37:void sendResponseError(java.lang.String) -> qKCn
    42:43:void sendResponseActing(java.lang.String) -> HdqI
react.api.ConsoleActionSource -> PJgj:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> jVod
    18:19:void sendResponseSuccess(java.lang.String) -> wnXH
    24:25:void sendResponseError(java.lang.String) -> qKCn
    30:31:void sendResponseActing(java.lang.String) -> HdqI
react.api.CullList -> kYtq:
    org.cyberpwn.glang.GSet toCull -> dobQ
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> JRFt
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> bWnA
react.api.EntityFlag -> YoUO:
    react.api.EntityFlag NAMED -> maJd
    react.api.EntityFlag TAMED -> gghu
    react.api.EntityFlag STACKED -> yIxn
    react.api.EntityFlag RIDDEN -> FVjY
    react.api.EntityFlag LEASHED -> EeJI
    java.lang.String m -> rNVu
    react.api.EntityFlag[] $VALUES -> UkeY
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:org.cyberpwn.glang.GSet getFlags(org.bukkit.entity.Entity) -> halY
    40:60:boolean is(org.bukkit.entity.Entity) -> ssMm
    66:66:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> kITa:
    org.cyberpwn.glang.GSet entityTypes -> XAia
    11:13:void <init>() -> <init>
    17:17:org.cyberpwn.glang.GSet getEntityTypes() -> rpOD
react.api.EntitySample -> WWmD:
    org.cyberpwn.glang.GMap counts -> wUTr
    org.cyberpwn.glang.GMap sets -> APKn
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:org.cyberpwn.glang.GList getAll() -> AFpD
    45:45:org.cyberpwn.glang.GList getTypes() -> DijM
    50:57:int total() -> fJhK
    62:67:int get(org.bukkit.entity.EntityType) -> mXJp
    72:79:org.cyberpwn.glang.GSet getSet(org.bukkit.entity.EntityType) -> ksfs
    84:96:void add(org.bukkit.entity.Entity) -> JRFt
react.api.Experimental -> LFlN:
react.api.IAction -> Ahqh:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> CLtX
    void act(react.api.IActionSource,react.api.ISelector[]) -> ksfs
    void enact(react.api.IActionSource,react.api.ISelector[]) -> mXJp
    react.api.ActionState getState() -> DGgy
    react.api.ActionTargetType getTarget() -> nSBH
    void setNodes(java.lang.String[]) -> mXJp
    java.lang.String[] getNodes() -> Cnvn
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> dMNe
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> wUJy
    org.cyberpwn.glang.GMap getDefaultSelectors() -> cdDX
    void setDefaultSelector(java.lang.Class,org.cyberpwn.glang.AccessCallback) -> mXJp
    react.api.ISelector[] biselect(react.api.ISelector[]) -> mXJp
    react.api.IActionSource getCurrentSource() -> aelV
    void completeAction() -> onuL
react.api.IActionSource -> WFnH:
    void sendResponse(java.lang.String) -> jVod
    void sendResponseSuccess(java.lang.String) -> wnXH
    void sendResponseError(java.lang.String) -> qKCn
    void sendResponseActing(java.lang.String) -> HdqI
react.api.ICache -> AXPu:
    org.cyberpwn.glang.GSet get(java.lang.Object) -> SnAm
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> SBla
    void clear() -> clear
    boolean has(java.lang.Object) -> gois
    org.cyberpwn.glang.GList k() -> inDC
react.api.ICommand -> XktK:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> kkYw
    java.lang.String[] getPermissions() -> Foor
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    react.api.SideGate getSideGate() -> Hdte
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> mXJp
react.api.ISampler -> FpQi:
    java.lang.String getID() -> getID
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    surge.util.C getColor() -> UtMF
    surge.util.C getAltColor() -> xFjc
    void setColor(surge.util.C,surge.util.C) -> mXJp
    int getInterval() -> getInterval
    void setInterval(int) -> dMNe
    void sample() -> qKGr
    java.lang.String get() -> get
    void construct() -> pOsy
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> NxIh:
    react.api.SelectionMode getMode() -> lekR
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> JjvV
    org.cyberpwn.glang.GSet getList() -> VCjX
    org.cyberpwn.glang.GSet getPossibilities() -> aela
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> qdWJ
    java.lang.String getName() -> getName
react.api.Injection -> NVFg:
    react.api.InjectionMethod value() -> WqbE
react.api.InjectionMethod -> EJkS:
    react.api.InjectionMethod SWAP -> hQYl
    react.api.InjectionMethod SUBSTRATE -> XSKv
    react.api.InjectionMethod RELOAD -> ejSm
    react.api.InjectionMethod[] $VALUES -> owol
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Lang -> AaAq:
    java.lang.String value() -> value
react.api.MSampler -> CLtX:
    6:6:void <init>() -> <init>
    10:10:surge.server.SuperSampler ss() -> JAHk
react.api.MonitorHeading -> DGgy:
    react.api.ISampler head -> eGpJ
    org.cyberpwn.glang.GList children -> MRlW
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> mXJp
    27:27:react.api.ISampler getHead() -> bWml
    32:33:void setHead(react.api.ISampler) -> ksfs
    37:37:org.cyberpwn.glang.GList getChildren() -> hbQB
    42:42:java.lang.String getHeadText() -> SeWl
    47:60:java.lang.String getChildText() -> JtPF
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(org.cyberpwn.glang.GList) -> ksfs
react.api.Permissable -> nSBH:
    react.api.Permissable ACCESS -> gowt
    react.api.Permissable MONITOR -> TOQG
    react.api.Permissable MONITOR_TITLE -> DPcO
    react.api.Permissable MONITOR_MAP -> DrfS
    react.api.Permissable MONITOR_ENVIRONMENT -> dDmB
    react.api.Permissable MONITOR_GLASSES -> pirH
    react.api.Permissable ACT -> GHjf
    react.api.Permissable RELOAD -> PmXT
    java.lang.String node -> qluD
    react.api.Permissable[] $VALUES -> JsyR
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    21:31:void <init>(java.lang.String,int,java.lang.String) -> <init>
    35:35:boolean has(org.bukkit.command.CommandSender) -> mXJp
    40:40:java.lang.String getNode() -> hHaT
    7:16:void <clinit>() -> <clinit>
react.api.PlayerActionSource -> wUJy:
    org.bukkit.entity.Player p -> JJGJ
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> jVod
    30:31:void sendResponseSuccess(java.lang.String) -> wnXH
    36:37:void sendResponseError(java.lang.String) -> qKCn
    42:43:void sendResponseActing(java.lang.String) -> HdqI
react.api.ReactActionSource -> cdDX:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> jVod
    16:17:void sendResponseSuccess(java.lang.String) -> wnXH
    22:23:void sendResponseError(java.lang.String) -> qKCn
    28:29:void sendResponseActing(java.lang.String) -> HdqI
react.api.ReactCommand -> onuL:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> HUBV
    java.lang.String usage -> fKUx
    java.lang.String description -> description
    react.api.SideGate sideGate -> owtH
    13:15:void <init>() -> <init>
    20:20:java.lang.String getCommand() -> getCommand
    26:26:java.lang.String[] getAliases() -> kkYw
    32:32:java.lang.String[] getPermissions() -> Foor
    38:38:java.lang.String getUsage() -> getUsage
    44:44:java.lang.String getDescription() -> getDescription
    50:50:react.api.SideGate getSideGate() -> Hdte
react.api.ReactException -> aelV:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> Cnvn:
    org.cyberpwn.glang.GMap keystore -> PeJa
    boolean monitoring -> monitoring
    boolean glasses -> JJGR
    boolean mapping -> imrM
    int monitorSelection -> OQFN
    int plays -> QVjy
    boolean monitorPosted -> nuQK
    int monitorLastSelection -> SfCd
    int switchNotification -> JRXG
    int hotbarSlot -> VTyX
    boolean shift -> INtC
    int scroll -> Xcpd
    double lastHeight -> tnRF
    boolean heightMovement -> XuRe
    org.bukkit.entity.Player p -> JJGJ
    39:84:void <init>(org.bukkit.entity.Player) -> <init>
    90:97:void save() -> save
    103:110:void load() -> load
    114:114:boolean isMonitoring() -> GsWV
    119:119:boolean isMapping() -> MItN
    124:124:org.bukkit.entity.Player getP() -> BkvY
    129:130:void setMonitoring(boolean) -> qdWJ
    134:135:void setMapping(boolean) -> JRFt
    139:139:int getMonitorSelection() -> CUga
    144:145:void setMonitorSelection(int) -> jVod
    149:149:int getHotbarSlot() -> XuIH
    154:155:void setHotbarSlot(int) -> wnXH
    159:159:boolean isShifting() -> YnyV
    164:165:void setShifting(boolean) -> halY
    169:169:boolean isShift() -> IFYW
    174:175:void setShift(boolean) -> ssMm
    179:179:int getScroll() -> yIpb
    184:185:void setScroll(int) -> qKCn
    189:189:int getMonitorLastSelection() -> NgJp
    194:195:void setMonitorLastSelection(int) -> HdqI
    199:200:void setP(org.bukkit.entity.Player) -> mXJp
    204:204:double getLastHeight() -> nteg
    209:210:void setLastHeight(double) -> gUxV
    214:214:boolean isHeightMovement() -> Jsoe
    219:220:void setHeightMovement(boolean) -> yIkI
    224:224:int getSwitchNotification() -> avqL
    229:230:void setSwitchNotification(int) -> vHqM
    234:234:boolean getMonitorPosted() -> CDfF
    239:240:void setMonitorPosted(boolean) -> CVAs
    244:244:int getPlays() -> HSvh
    249:250:void setPlays(int) -> Bkpl
    254:254:boolean isGlasses() -> HKdb
    259:260:void setGlasses(boolean) -> qAsQ
    23:37:void <clinit>() -> <clinit>
react.api.SampledType -> qSYN:
    react.api.SampledType TPS -> CVRb
    react.api.SampledType TICK -> UJGJ
    react.api.SampledType TIU -> rVgx
    react.api.SampledType MEM -> qCDb
    react.api.SampledType FREEMEM -> cAju
    react.api.SampledType MAXMEM -> PJvK
    react.api.SampledType ALLOCMEM -> vlGM
    react.api.SampledType MAHS -> ejUT
    react.api.SampledType CHK -> BlcL
    react.api.SampledType CHKS -> hjnK
    react.api.SampledType ENT -> UcVo
    react.api.SampledType ENTLIV -> ccoN
    react.api.SampledType ENTDROP -> erfT
    react.api.SampledType ENTTILE -> ETIQ
    java.lang.String node -> qluD
    react.api.SampledType[] $VALUES -> Aqoe
    5:5:react.api.SampledType[] values() -> values
    5:5:react.api.SampledType valueOf(java.lang.String) -> valueOf
    25:35:void <init>(java.lang.String,int,java.lang.String) -> <init>
    39:39:java.lang.String getNode() -> hHaT
    5:20:void <clinit>() -> <clinit>
react.api.Sampler -> bWnA:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    surge.util.C color -> qKUH
    surge.util.C altColor -> hjls
    int interval -> rhKA
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:surge.util.C getColor() -> UtMF
    49:49:surge.util.C getAltColor() -> xFjc
    55:55:int getInterval() -> getInterval
    void sample() -> qKGr
    void construct() -> pOsy
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(surge.util.C,surge.util.C) -> mXJp
    107:108:void setInterval(int) -> dMNe
react.api.Sector -> rpOD:
    int value() -> value
react.api.SelectionException -> AFpD:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> DijM:
    react.api.SelectionMode WHITELIST -> rgjC
    react.api.SelectionMode BLACKLIST -> IWcn
    react.api.SelectionMode[] $VALUES -> BdRR
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> fJhK:
    java.lang.Class objectType -> PlyU
    react.api.SelectionMode mode -> HnTK
    org.cyberpwn.glang.GSet list -> cKAG
    org.cyberpwn.glang.GSet possibilities -> YESR
    int popoff -> YEST
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> lekR
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> JjvV
    43:43:org.cyberpwn.glang.GSet getList() -> VCjX
    49:49:org.cyberpwn.glang.GSet getPossibilities() -> aela
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> qdWJ
    57:88:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> JRFt
    93:95:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> kkYw:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> yJLL
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> qdWJ
    65:113:org.cyberpwn.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> halY
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> Foor:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> Hdte:
    16:17:void <init>() -> <init>
    21:22:void add(org.bukkit.Chunk) -> yJLL
    26:27:void add(org.bukkit.Chunk,int) -> mXJp
    31:35:void add(org.bukkit.World) -> mXJp
    39:43:void addAll() -> Nwie
    48:91:int parse(org.bukkit.command.CommandSender,java.lang.String) -> qdWJ
    96:277:org.cyberpwn.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> halY
    283:283:java.lang.String getName() -> getName
react.api.Side -> UtMF:
    react.api.Side PLAYERS -> fSiD
    react.api.Side CONSOLE -> IiHr
    java.lang.String ss -> priD
    react.api.Side[] $VALUES -> Cwwo
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> VUMv
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> ksfs
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> xFjc:
    react.api.SideGate PLAYERS_ONLY -> jpwO
    react.api.SideGate CONSOLES_ONLY -> NVVB
    react.api.SideGate ANYTHING -> klIi
    react.api.SideGate[] $VALUES -> EunR
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> mXJp
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> xFjc$1:
    int[] $SwitchMap$react$api$SideGate -> HLTG
    13:13:void <clinit>() -> <clinit>
react.api.StackedEntity -> qKGr:
    org.bukkit.entity.LivingEntity entity -> dxVy
    int count -> count
    double rmx -> woMD
    20:30:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    34:34:int getAbsoluteMaxCount() -> lfOH
    39:39:int getMaxCount(org.bukkit.entity.LivingEntity) -> mXJp
    44:46:void update() -> update
    50:56:void signalSize() -> ydCs
    60:101:void updateHealth() -> bFnS
    105:106:void heal(double) -> yIkA
    110:111:void setHealth(double) -> setHealth
    115:115:int getEffectiveCount() -> RkDm
    120:120:int getEffectiveCount(double) -> qArm
    125:125:double getEffectiveMaxHealth(int) -> WNxt
    130:130:double getRealMaxHealth() -> rNNN
    135:135:double getHealth() -> getHealth
    140:146:void setMaxHealth(double) -> setMaxHealth
    150:150:double getMaxHealth() -> getMaxHealth
    155:155:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    160:160:int getCount() -> getCount
react.api.TitleMonitor -> pOsy:
    org.cyberpwn.glang.GList headings -> TGFR
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> mXJp
    24:24:int getMaxSelection() -> jOFy
    29:37:int left(int) -> jhSC
    42:50:int right(int) -> tTQG
    55:55:react.api.MonitorHeading getHeadFor(int) -> jErH
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> mXJp
    83:100:java.lang.String getHotbarFor(int,boolean) -> yJLL
react.cache.CachedEntity -> lekR:
    java.util.UUID uid -> eiwi
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> PunF
    double x -> x
    double y -> y
    double z -> z
    double vx -> vbvu
    double vy -> Xlcc
    double vz -> dESE
    double dx -> IhgI
    double dy -> pHSr
    double dz -> Jkin
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> yIkI
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> jqKB
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> Mkul
    120:121:void setVx(double) -> Fomb
    125:125:double getVy() -> qllW
    130:131:void setVy(double) -> Ralc
    135:135:double getVz() -> wwNq
    140:141:void setVz(double) -> SnAm
    145:145:double getDx() -> HBtO
    150:151:void setDx(double) -> SBla
    155:155:double getDy() -> fmNM
    160:161:void setDy(double) -> gois
    165:165:double getDz() -> LaDA
    170:171:void setDz(double) -> JjvV
    175:175:java.util.UUID getUid() -> lTkh
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> VCjX:
    int age -> HKpq
    boolean ageLock -> KDYk
    boolean breed -> MBPH
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> yIkI
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> MlWV
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> biSA
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> aela:
    org.bukkit.DyeColor dye -> CUuW
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> yIkI
    30:30:org.bukkit.DyeColor getDye() -> uVvB
    35:36:void setDye(org.bukkit.DyeColor) -> mXJp
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> WqbE:
    org.cyberpwn.glang.GList potionEffects -> hINH
    boolean canPickupItems -> hcAC
    org.bukkit.inventory.ItemStack[] armorContents -> wCvd
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> oMbA
    double maxHealth -> maxHealth
    int maxAir -> FWMk
    int air -> sjoR
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> yIkI
    63:63:org.cyberpwn.glang.GList getPotionEffects() -> MJTO
    68:69:void setPotionEffects(org.cyberpwn.glang.GList) -> yJLL
    73:73:boolean isCanPickupItems() -> vtKx
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> Cfid
    138:139:void setMaxAir(int) -> RjaO
    143:143:int getAir() -> kHxI
    148:149:void setAir(int) -> mhmm
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> JAHk:
    boolean sheared -> CNFI
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> yIkI
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> bWml:
    org.bukkit.inventory.ItemStack is -> uXDE
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> yIkI
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> hbQB:
    7:7:void <init>() -> <init>
react.command.CommandAct -> SeWl:
    29:36:void <init>() -> <init>
    41:128:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> mXJp
react.command.CommandCPUScore -> JtPF:
    17:24:void <init>() -> <init>
    29:31:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> mXJp
react.command.CommandGlasses -> hHaT:
    17:24:void <init>() -> <init>
    29:31:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> mXJp
react.command.CommandHelp -> GsWV:
    15:22:void <init>() -> <init>
    27:28:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> mXJp
react.command.CommandMonitor -> MItN:
    17:24:void <init>() -> <init>
    29:31:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> mXJp
react.command.CommandReload -> BkvY:
    18:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> mXJp
react.controller.ActionController -> CUga:
    int kiv -> rVil
    org.cyberpwn.glang.GMap actions -> MmCy
    org.cyberpwn.glang.GMap pending -> rVis
    18:18:void <init>() -> <init>
    27:67:void start() -> start
    71:72:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> mXJp
    76:97:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> ksfs
    102:102:react.api.IAction getAction(react.api.ActionType) -> mXJp
    107:108:void registerAction(react.api.IAction) -> mXJp
    114:114:void stop() -> stop
    119:133:void tick() -> tick
    137:137:org.cyberpwn.glang.GList getActions() -> FyDo
    20:20:void <clinit>() -> <clinit>
react.controller.CommandController -> XuIH:
    org.cyberpwn.glang.GList commands -> QFLR
    boolean k -> aCwg
    25:25:void <init>() -> <init>
    33:34:void start() -> start
    39:40:void stop() -> stop
    44:88:void begin() -> begin
    93:97:void tick() -> tick
    101:102:void msg(org.bukkit.command.CommandSender,java.lang.String) -> ssMm
    106:107:void f(org.bukkit.command.CommandSender,java.lang.String) -> yIkI
    112:196:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
react.controller.DropMergeController -> YnyV:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:46:void on(org.bukkit.event.entity.ItemMergeEvent) -> mXJp
    51:106:void tick() -> tick
    110:185:void stack(org.bukkit.entity.Item,org.bukkit.entity.Item) -> mXJp
    189:265:void merge(org.bukkit.entity.Item,org.bukkit.entity.Item) -> ksfs
react.controller.DropMergeController$1 -> YnyV$1:
    org.bukkit.World val$i -> nuVB
    react.controller.DropMergeController this$0 -> Libg
    64:64:void <init>(react.controller.DropMergeController,org.bukkit.World) -> <init>
    70:103:void run() -> run
react.controller.EntityCacheController -> IFYW:
    org.cyberpwn.glang.GMap caches -> xPOH
    int cachedEntities -> HTfE
    int cachedDrops -> axAQ
    49:49:boolean enabled() -> enabled
    44:55:void <init>() -> <init>
    59:73:void push(org.bukkit.World) -> ksfs
    77:91:void pop(org.bukkit.Chunk) -> SnBs
    95:140:void pop(org.bukkit.entity.Entity) -> CVAs
    144:152:boolean hasUid(java.util.UUID,org.bukkit.Chunk) -> mXJp
    157:195:int push(org.bukkit.Chunk) -> qdWJ
    200:204:void cworld(org.bukkit.World) -> yJLL
    209:215:void on(org.bukkit.event.world.WorldLoadEvent) -> mXJp
    220:226:void on(org.bukkit.event.world.ChunkUnloadEvent) -> mXJp
    231:238:void on(org.bukkit.event.world.WorldUnloadEvent) -> mXJp
    243:244:void start() -> start
    249:250:void stop() -> stop
    254:254:boolean isCached(org.bukkit.Chunk) -> JRFt
    260:269:void on(org.bukkit.event.entity.EntitySpawnEvent) -> mXJp
    274:344:void tick() -> tick
    348:348:org.cyberpwn.glang.GMap getCaches() -> YfkF
    353:353:int getCachedEntities() -> UlAU
    358:358:int getCachedDrops() -> LiVY
    363:363:int getCachedTotals() -> nSEv
react.controller.EntityCullController -> yIpb:
    org.cyberpwn.glang.GSet flags -> cBQW
    org.cyberpwn.glang.GSet defer -> Svgo
    org.cyberpwn.glang.GMap maxs -> YfwP
    18:18:void <init>() -> <init>
    27:31:void start() -> start
    37:37:void stop() -> stop
    43:43:void tick() -> tick
    47:167:void repopulateRules() -> VTqA
    171:179:int cull(org.bukkit.Chunk) -> halY
    184:284:int partialCull(org.bukkit.Chunk) -> ssMm
react.controller.EntityStackController -> NgJp:
    org.cyberpwn.glang.GList stacks -> XBRM
    18:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:52:void tick() -> tick
    56:83:void stack(org.cyberpwn.glang.GList) -> SnBs
    87:92:boolean isStacked(org.bukkit.entity.LivingEntity) -> ksfs
    97:110:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> yJLL
    116:134:void on(org.bukkit.event.entity.EntityDamageEvent) -> mXJp
    138:153:void merge(react.api.StackedEntity,react.api.StackedEntity) -> mXJp
    157:203:void checkNear(org.bukkit.entity.LivingEntity) -> SnBs
    208:230:void on(org.bukkit.event.entity.EntitySpawnEvent) -> mXJp
react.controller.EntityStackController$1 -> NgJp$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> skRu
    react.controller.EntityStackController this$0 -> YEUP
    216:216:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    220:227:void run() -> run
react.controller.FastDecayController -> nteg:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> mXJp
    48:54:void on(org.bukkit.event.block.BlockBurnEvent) -> mXJp
    59:65:void on(org.bukkit.event.block.LeavesDecayEvent) -> mXJp
    69:145:void checkBreak(org.bukkit.block.Block) -> mXJp
    151:151:void tick() -> tick
react.controller.FastDecayController$1 -> nteg$1:
    org.cyberpwn.glang.GMap val$locs -> BBRb
    react.controller.FastDecayController this$0 -> Thil
    79:79:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,org.cyberpwn.glang.GMap) -> <init>
    83:83:boolean isAllowedSplooge(org.bukkit.Location) -> mXJp
    89:89:boolean isAllowedSource(org.bukkit.Location) -> ksfs
    95:114:void clipped(org.bukkit.Location) -> yJLL
    119:142:void finished() -> finished
react.controller.FastDecayController$1$1 -> nteg$1$1:
    int val$i -> FVoq
    react.controller.FastDecayController$1 this$1 -> mjBL
    124:124:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,int) -> <init>
    128:138:void run() -> run
react.controller.GlassController -> Jsoe:
    org.cyberpwn.glang.GMap q -> cdTn
    org.cyberpwn.glang.GList g -> mrQw
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:124:void tick() -> tick
    128:128:boolean isUsingGlasses(org.bukkit.entity.Player) -> ksfs
    133:133:boolean canUseGlasses(org.bukkit.entity.Player) -> yJLL
    138:154:void toggleGlasses(org.bukkit.entity.Player) -> SnBs
    159:164:void on(org.bukkit.event.block.BlockPhysicsEvent) -> mXJp
    169:174:void on(org.bukkit.event.block.BlockFromToEvent) -> mXJp
    179:184:void on(org.bukkit.event.block.BlockBurnEvent) -> mXJp
    189:194:void on(org.bukkit.event.block.BlockFormEvent) -> mXJp
    199:204:void on(org.bukkit.event.block.BlockFadeEvent) -> mXJp
    209:221:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> mXJp
    33:33:org.cyberpwn.glang.GList access$000(react.controller.GlassController) -> mXJp
react.controller.GlassController$1 -> Jsoe$1:
    org.cyberpwn.glang.GMap val$cc -> hcCR
    react.controller.GlassController this$0 -> XldY
    80:80:void <init>(react.controller.GlassController,org.cyberpwn.glang.GMap) -> <init>
    84:122:void run() -> run
react.controller.GlassController$1$1 -> Jsoe$1$1:
    org.bukkit.Location val$i -> HfFj
    org.bukkit.entity.Player val$j -> PvNo
    react.controller.GlassController$1 this$1 -> pGuT
    102:102:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    106:111:void run() -> run
react.controller.MonitorController -> avqL:
    int maxCooldown -> AGaX
    react.api.TitleMonitor titleMonitor -> tnTk
    org.cyberpwn.glang.GMap posts -> Orji
    36:39:void <init>() -> <init>
    44:55:void start() -> start
    59:75:void toggleMonitoring(org.bukkit.entity.Player) -> qdWJ
    80:82:void stop() -> stop
    86:105:void constructMonitor() -> rorh
    109:114:float calcVolume(react.api.ReactPlayer) -> mXJp
    119:119:boolean canMonitor(org.bukkit.entity.Player) -> JRFt
    124:129:boolean isMonitoring(org.bukkit.entity.Player) -> halY
    134:138:void startMonitoring(org.bukkit.entity.Player) -> ssMm
    142:153:void stopMonitoring(org.bukkit.entity.Player) -> yIkI
    159:159:void tick() -> tick
    163:166:void changePost(react.api.ReactPlayer) -> ksfs
    170:179:void processPlayer(react.api.ReactPlayer) -> yJLL
    183:207:void handleTriggers(react.api.ReactPlayer) -> SnBs
    211:250:void handleScrolling(react.api.ReactPlayer) -> qdWJ
    254:282:void handleShifting(react.api.ReactPlayer) -> JRFt
    286:308:void handlePosting(react.api.ReactPlayer) -> halY
    312:330:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> mXJp
    335:349:java.lang.String prefixForSub(react.api.ReactPlayer,surge.util.C,int) -> mXJp
    354:361:void tickMonitor(react.api.ReactPlayer) -> ssMm
    365:365:react.api.TitleMonitor getTitleMonitor() -> ssVr
    371:375:void on(org.bukkit.event.player.PlayerJoinEvent) -> mXJp
    380:389:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> mXJp
    394:405:void onTick() -> AWsr
    410:410:java.lang.String getTickName() -> LrGi
    31:31:void <clinit>() -> <clinit>
react.controller.NMSController -> CDfF:
    react.core.IFeatureSet core -> JlMO
    18:28:void <init>() -> <init>
    32:61:void handleNMS() -> tLGH
    65:95:react.core.IFeatureSet findCore(java.lang.String) -> vHqM
    103:103:void start() -> start
    110:110:void stop() -> stop
    117:117:void tick() -> tick
    15:15:void <clinit>() -> <clinit>
react.controller.PlayerController -> HSvh:
    org.cyberpwn.glang.GList players -> kJIE
    12:12:void <init>() -> <init>
    19:21:void start() -> start
    26:27:void stop() -> stop
    33:33:void tick() -> tick
    37:45:boolean has(org.bukkit.entity.Player) -> CVAs
    50:61:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> qAsQ
    66:66:org.cyberpwn.glang.GList getPlayers() -> XSFr
    72:77:void on(org.bukkit.event.player.PlayerQuitEvent) -> mXJp
react.controller.SampleController -> HKdb:
    org.cyberpwn.glang.GMap samplers -> ieeF
    surge.server.SuperSampler ss -> gFLN
    24:28:void <init>() -> <init>
    32:33:void registerSampler(react.api.ISampler) -> yJLL
    37:37:react.api.ISampler getSampler(java.lang.String) -> Bkpl
    42:85:void constructSamplers() -> fvCQ
    90:93:void start() -> start
    98:101:void stop() -> stop
    107:107:void tick() -> tick
    111:111:surge.server.SuperSampler getSuperSampler() -> vRMJ
    117:133:void onTick() -> AWsr
    138:138:java.lang.String getTickName() -> LrGi
react.controller.SploogeCounter -> Nwie:
    org.cyberpwn.glang.GList sources -> uWdh
    org.cyberpwn.glang.GList splooge -> GQam
    org.cyberpwn.glang.GSet destroy -> QElt
    22:96:void <init>(int,int,org.bukkit.Location) -> <init>
    100:147:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> mXJp
    152:152:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> ksfs
    void clipped(org.bukkit.Location) -> yJLL
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> mXJp
    boolean isAllowedSource(org.bukkit.Location) -> ksfs
    15:15:org.cyberpwn.glang.GList access$000(react.controller.SploogeCounter) -> mXJp
    15:15:org.cyberpwn.glang.GList access$100(react.controller.SploogeCounter) -> ksfs
    15:15:org.cyberpwn.glang.GSet access$200(react.controller.SploogeCounter) -> yJLL
react.controller.SploogeCounter$1 -> Nwie$1:
    java.util.Iterator val$it -> oVSt
    org.bukkit.Location val$start -> Yogf
    int val$maxDistance -> rVob
    react.controller.SploogeCounter this$0 -> cdWC
    32:32:void <init>(react.controller.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:94:void run() -> run
react.controller.SploogeCounter$1$1 -> Nwie$1$1:
    react.controller.SploogeCounter$1 this$1 -> fBjy
    82:82:void <init>(react.controller.SploogeCounter$1) -> <init>
    86:92:void run() -> run
react.core.FeatureSet -> VUMv:
    3:3:void <init>() -> <init>
react.core.FeatureType -> lfOH:
    react.core.FeatureType WORLD -> RABt
    react.core.FeatureType[] $VALUES -> awao
    3:3:react.core.FeatureType[] values() -> values
    3:3:react.core.FeatureType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:5:void <clinit>() -> <clinit>
react.core.IEssentialsFeature -> ydCs:
react.core.IFeature -> bFnS:
react.core.IFeatureSet -> RkDm:
    react.core.IFeatureWorld getWorldFeature() -> JbpD
react.core.IFeatureWorld -> rNNN:
    org.cyberpwn.glang.GList getDirtyChunks() -> VfRi
    void setBlockFast(org.bukkit.Location,surge.util.MaterialBlock) -> mXJp
    void refreshChunk(org.bukkit.Chunk) -> yIkI
react.core.Support -> jOFy:
    react.core.FeatureType value() -> WrGR
react.core.v1_12R1.FeatureWorld -> jqKB:
    org.cyberpwn.glang.GList dirty -> bHAb
    19:21:void <init>() -> <init>
    27:34:void setBlockFast(org.bukkit.Location,surge.util.MaterialBlock) -> mXJp
    40:41:void refreshChunk(org.bukkit.Chunk) -> yIkI
    46:46:org.cyberpwn.glang.GList getDirtyChunks() -> VfRi
react.core.v1_12R1.V1_12R1 -> Mkul:
    react.core.v1_12R1.FeatureWorld featureWorld -> qBjw
    15:27:void <init>() -> <init>
    32:32:react.core.IFeatureWorld getWorldFeature() -> JbpD
react.core.v1_12R1.V1_12R1$1 -> Mkul$1:
    react.core.v1_12R1.V1_12R1 this$0 -> PvQs
    17:17:void <init>(react.core.v1_12R1.V1_12R1,java.lang.String,int) -> <init>
    21:25:void run() -> run
react.sampler.SampleChunksLoaded -> qllW:
    11:11:void <init>() -> <init>
    16:22:void construct() -> pOsy
    27:28:void sample() -> qKGr
    33:33:java.lang.String get() -> get
react.sampler.SampleChunksLoadedPerSecond -> wwNq:
    org.cyberpwn.gmath.Average a -> kJKL
    12:14:void <init>() -> <init>
    19:25:void construct() -> pOsy
    30:32:void sample() -> qKGr
    37:37:java.lang.String get() -> get
react.sampler.SampleEntitiesDrops -> HBtO:
    12:12:void <init>() -> <init>
    17:23:void construct() -> pOsy
    28:29:void sample() -> qKGr
    34:35:java.lang.String get() -> get
react.sampler.SampleEntitiesLiving -> fmNM:
    12:12:void <init>() -> <init>
    17:23:void construct() -> pOsy
    28:29:void sample() -> qKGr
    34:35:java.lang.String get() -> get
react.sampler.SampleEntitiesTiles -> LaDA:
    11:11:void <init>() -> <init>
    16:22:void construct() -> pOsy
    27:28:void sample() -> qKGr
    33:33:java.lang.String get() -> get
react.sampler.SampleEntitiesTotal -> lTkh:
    11:11:void <init>() -> <init>
    16:22:void construct() -> pOsy
    27:28:void sample() -> qKGr
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryAllocated -> MlWV:
    11:11:void <init>() -> <init>
    16:22:void construct() -> pOsy
    27:28:void sample() -> qKGr
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryAllocationPerSecond -> biSA:
    11:11:void <init>() -> <init>
    16:22:void construct() -> pOsy
    27:28:void sample() -> qKGr
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryFree -> uVvB:
    11:11:void <init>() -> <init>
    16:22:void construct() -> pOsy
    27:28:void sample() -> qKGr
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryMax -> MJTO:
    11:11:void <init>() -> <init>
    16:22:void construct() -> pOsy
    27:28:void sample() -> qKGr
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryUse -> vtKx:
    11:11:void <init>() -> <init>
    16:22:void construct() -> pOsy
    27:28:void sample() -> qKGr
    33:33:java.lang.String get() -> get
react.sampler.SampleTickTime -> Cfid:
    11:11:void <init>() -> <init>
    16:22:void construct() -> pOsy
    27:28:void sample() -> qKGr
    33:33:java.lang.String get() -> get
react.sampler.SampleTickUtilization -> kHxI:
    11:11:void <init>() -> <init>
    16:22:void construct() -> pOsy
    27:28:void sample() -> qKGr
    33:33:java.lang.String get() -> get
react.sampler.SampleTicksPerSecond -> FyDo:
    12:12:void <init>() -> <init>
    17:23:void construct() -> pOsy
    28:29:void sample() -> qKGr
    34:39:java.lang.String get() -> get
surge.Main -> YfkF:
    org.cyberpwn.glang.GList plugins -> kIjU
    org.cyberpwn.glang.GMap pluginInstances -> hbdS
    org.cyberpwn.glang.GList controllerSet -> EnBq
    org.cyberpwn.glang.GMap anchors -> dpKS
    org.cyberpwn.glang.GList classes -> Bcwu
    java.lang.reflect.Field nsField -> Rseh
    java.lang.reflect.Field thField -> yRrW
    org.cyberpwn.glang.GList tracks -> nuWK
    long nsf -> HLUy
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> xrET
    90:109:long getNanoSync() -> oUhC
    114:115:void requestResetNanos() -> FpWB
    119:122:void requestReload() -> Vvsp
    127:141:int getThreadCount() -> getThreadCount
    150:182:void onStart(surge.util.Protocol) -> mXJp
    189:206:void onStop() -> PJoH
    212:212:void onPostInit() -> rpTB
    218:218:void onPreInit() -> OHMP
    222:233:void shutDownAmps() -> JAMu
    237:446:void initializeAmps() -> leqD
    451:484:void doScan() -> upkX
    488:510:void scanForPoolDefiners() -> hruy
    514:530:void scanForRawEvents() -> qloI
    534:550:void scanForDynamicTrack() -> rpSI
    554:575:void scanForAmps() -> AqhT
    580:591:void onTick() -> AWsr
surge.PluginAmp -> UlAU:
    surge.control.AmpedPlugin plugin -> IXJf
    boolean connected -> connected
    int masterTask -> hIRK
    17:21:void <init>(surge.control.AmpedPlugin) -> <init>
    25:25:surge.control.AmpedPlugin getPluginInstance() -> Wyua
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> STXE
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> mXJp
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> mXJp
    113:114:void stopTask(int) -> MtdI
    57:57:void access$0(surge.PluginAmp) -> mXJp
surge.PluginAmp$1 -> UlAU$1:
    surge.PluginAmp this$0 -> CDxK
    1:37:void <init>(surge.PluginAmp) -> <init>
    42:44:void run() -> run
surge.PluginAmp$2 -> UlAU$2:
    surge.PluginAmp this$0 -> CDxK
    1:47:void <init>(surge.PluginAmp) -> <init>
    52:53:void run() -> run
surge.Surge -> LiVY:
    surge.PluginAmp amp -> FNaF
    org.cyberpwn.glang.GList tickComponents -> nmFf
    org.cyberpwn.glang.GList atickComponents -> Cfye
    surge.sched.TaskManager taskmgr -> SnXt
    surge.hotload.HotloadManager hotloadmgr -> ivfy
    java.lang.Thread mainThread -> cdVQ
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> mXJp
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> WNxt
    44:44:java.io.File folder() -> aCmQ
    49:51:java.io.File getPluginJarFile() -> XJTi
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> yJLL
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> YMXK
    74:74:org.cyberpwn.glang.GList getTickComponents() -> eimG
    79:79:org.cyberpwn.glang.GList getAsyncTickComponents() -> xWpV
    84:91:void registerTicked(surge.sched.IMasterTickComponent) -> mXJp
    95:102:void unregisterTicked(surge.sched.IMasterTickComponent) -> ksfs
    106:111:surge.PluginAmp createAmp(surge.control.AmpedPlugin) -> mXJp
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> NVIs
    126:126:boolean hasAmp() -> HBur
    131:131:surge.PluginAmp getAmp() -> Ahus
    136:136:surge.sched.TaskManager getTaskManager() -> xGPN
    141:141:surge.hotload.HotloadManager getHotloadManager() -> hruU
surge.cluster.Cluster -> nSEv:
    surge.cluster.ClusterType type -> AjFh
    java.lang.Object t -> vHqM
    8:12:void <init>(surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:surge.cluster.ClusterType getType() -> wncc
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
surge.cluster.ClusterBoolean -> VTqA:
    7:8:void <init>(java.lang.Boolean) -> <init>
surge.cluster.ClusterDouble -> rorh:
    7:8:void <init>(java.lang.Double) -> <init>
surge.cluster.ClusterInt -> ssVr:
    7:8:void <init>(java.lang.Integer) -> <init>
surge.cluster.ClusterLong -> AWsr:
    7:8:void <init>(java.lang.Long) -> <init>
surge.cluster.ClusterString -> LrGi:
    7:8:void <init>(java.lang.String) -> <init>
surge.cluster.ClusterStringList -> tLGH:
    9:10:void <init>(java.util.List) -> <init>
surge.cluster.ClusterType -> XSFr:
    surge.cluster.ClusterType INT -> VoQu
    surge.cluster.ClusterType BOOLEAN -> GQcp
    surge.cluster.ClusterType STRING -> BSVh
    surge.cluster.ClusterType STRING_LIST -> yKBT
    surge.cluster.ClusterType DOUBLE -> GcGG
    surge.cluster.ClusterType LONG -> DbPS
    surge.cluster.ClusterType[] ENUM$VALUES -> cBVF
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.cluster.ClusterType[] values() -> values
    1:1:surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
surge.cluster.ConfigurationDataInput -> fvCQ:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> DsQc
    12:12:void <init>() -> <init>
    17:127:void read(surge.cluster.IConfigurable,java.io.File) -> mXJp
    132:257:surge.cluster.DataCluster fillDefaults(surge.cluster.IConfigurable) -> mXJp
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> FNTl
surge.cluster.ConfigurationDataOutput -> vRMJ:
    12:12:void <init>() -> <init>
    17:143:void write(surge.cluster.IConfigurable,java.io.File) -> ksfs
surge.cluster.DataCluster -> JbpD:
    org.cyberpwn.glang.GMap clusters -> McyH
    17:20:void <init>() -> <init>
    24:24:org.cyberpwn.glang.GList keys() -> QFCu
    29:33:void fromJson(org.cyberpwn.json.JSONObject) -> SnBs
    37:44:org.cyberpwn.json.JSONObject toJson() -> BIwj
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> VetS
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> mXJp
    104:104:boolean contains(java.lang.String) -> contains
    109:109:surge.cluster.ClusterType getType(java.lang.String) -> jhSC
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> JRFt
    194:195:void set(java.lang.String,int) -> SnBs
    199:200:void set(java.lang.String,boolean) -> yJLL
    204:205:void set(java.lang.String,double) -> yJLL
    209:210:void set(java.lang.String,long) -> yJLL
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> mXJp
surge.cluster.ICluster -> VfRi:
    surge.cluster.ClusterType getType() -> wncc
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
surge.cluster.IConfigurable -> WrGR:
surge.cluster.IDataInput -> xrET:
    surge.cluster.DataCluster read(java.io.File) -> mXJp
surge.cluster.IDataOutput -> oUhC:
    void write(surge.cluster.DataCluster,java.io.File) -> mXJp
surge.cluster.Key -> FpWB:
    java.lang.String value() -> value
surge.cluster.KeyPointer -> Vvsp:
    int value() -> value
surge.cluster.KeyStore -> PJoH:
surge.cluster.ReflectedConfigurationException -> rpTB:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
surge.cluster.YamlDataInput -> OHMP:
    8:8:void <init>() -> <init>
    13:27:surge.cluster.DataCluster read(java.io.File) -> mXJp
surge.cluster.YamlDataOutput -> JAMu:
    6:6:void <init>() -> <init>
    13:20:void write(surge.cluster.DataCluster,java.io.File) -> mXJp
surge.collection.GSound -> leqD:
    java.lang.String sound -> agDG
    org.bukkit.Sound iSound -> iLXI
    java.lang.Float volume -> QhVA
    java.lang.Float pitch -> WYFR
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> gUxV
    61:72:void play(org.bukkit.Location) -> SnBs
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> mXJp
    93:93:java.lang.String getSound() -> bqhA
    98:99:void setSound(java.lang.String) -> tTQG
    103:103:org.bukkit.Sound getiSound() -> pinh
    108:109:void setiSound(org.bukkit.Sound) -> mXJp
    113:113:java.lang.Float getVolume() -> lfSt
    118:119:void setVolume(java.lang.Float) -> mXJp
    123:123:java.lang.Float getPitch() -> NUlR
    128:129:void setPitch(java.lang.Float) -> ksfs
surge.control.AmpedPlugin -> upkX:
    org.cyberpwn.glang.GList controllers -> wgCQ
    org.cyberpwn.gconcurrent.ParallelPoolManager pp -> agDE
    surge.server.CoreTickThread ctt -> awcs
    23:49:void <init>() -> <init>
    void doScan() -> upkX
    long getNanoSync() -> oUhC
    int getThreadCount() -> getThreadCount
    60:65:void onLoad() -> onLoad
    70:79:void onEnable() -> onEnable
    84:94:void onDisable() -> onDisable
    99:99:org.cyberpwn.glang.GList getControllers() -> INmP
    105:106:void registerController(surge.control.IController) -> mXJp
    111:122:void onTick() -> AWsr
    127:127:java.lang.String getTickName() -> LrGi
    133:133:org.cyberpwn.gconcurrent.ParallelPoolManager getThreadPool() -> rotp
    void onControllerRegistry() -> xrET
    void onStart(surge.util.Protocol) -> mXJp
    void onStop() -> PJoH
    void onPostInit() -> rpTB
    void onPreInit() -> OHMP
surge.control.AmpedPlugin$1 -> upkX$1:
    surge.control.AmpedPlugin this$0 -> yRuF
    1:37:void <init>(surge.control.AmpedPlugin,java.lang.String,int,org.cyberpwn.gconcurrent.QueueMode) -> <init>
    42:42:long getNanoGate() -> qAsQ
surge.control.Control -> hruy:
surge.control.Controller -> qloI:
    7:10:void <init>() -> <init>
surge.control.Disable -> rpSI:
surge.control.Enable -> AqhT:
surge.control.IController -> Wyua:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
surge.control.Instance -> STXE:
surge.control.Plugin -> aCmQ:
surge.control.SurgePlugin -> XJTi:
    void onStart(surge.util.Protocol) -> mXJp
    void onStop() -> PJoH
    void onPostInit() -> rpTB
    void onPreInit() -> OHMP
    void onControllerRegistry() -> xrET
    void registerController(surge.control.IController) -> mXJp
    org.cyberpwn.glang.GList getControllers() -> INmP
    org.cyberpwn.gconcurrent.ParallelPoolManager getThreadPool() -> rotp
surge.hotload.HotloadManager -> YMXK:
    org.cyberpwn.glang.GMap filemods -> tKvE
    org.cyberpwn.glang.GMap filesizes -> brXB
    org.cyberpwn.glang.GMap fileacts -> VMRM
    16:21:void <init>() -> <init>
    25:29:void track(java.io.File,java.lang.Runnable) -> mXJp
    33:36:void untrack(java.io.File) -> ksfs
    40:43:void untrackall() -> LhxG
    48:72:void onTick() -> AWsr
    77:77:java.lang.String getTickName() -> LrGi
surge.nms.NMSClass -> eimG:
    boolean init -> sjug
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> ifIy
    java.lang.Class IChatBaseComponent -> OPlR
    java.lang.Class ChatSerializer -> rVpb
    java.lang.Class PacketPlayOutPlayerInfo -> TGJW
    java.lang.Class PlayerInfoData -> vJKh
    java.lang.Class EnumPlayerInfoAction -> MSWT
    java.lang.Class GameProfile -> tUHF
    java.lang.Class EnumGamemode -> Lqux
    java.lang.Class TileEntitySkull -> BJhR
    java.lang.Class LoadingCache -> tfIO
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
surge.nms.NMSX -> xWpV:
    surge.nms.NMSX bountifulAPI -> YNIm
    boolean useOldMethods -> ccvt
    java.lang.String nmsver -> QyWF
    java.lang.Object eTimes -> awdF
    java.lang.Object eTitle -> KVBr
    java.lang.Object eSubtitle -> wnqH
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> mXJp
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> jErH
    75:89:java.lang.Class getCBClass(java.lang.String) -> RjaO
    96:104:java.lang.Object serializeChat(java.lang.String) -> mhmm
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> mXJp
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> mXJp
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> qTAY
    151:151:java.lang.String craftPackage() -> tLIK
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> mXJp
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> mXJp
    197:207:java.lang.Class getNMSClass(java.lang.String) -> MtdI
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> mXJp
    279:280:void clearTitle(org.bukkit.entity.Player) -> yIkA
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> mXJp
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> mXJp
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> mXJp
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> jEqq
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> qdWJ
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> qAsQ
    434:447:int ping(org.bukkit.entity.Player) -> qArm
surge.nms.NMSX$1 -> xWpV$1:
    org.bukkit.entity.Player val$player -> jhjw
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
surge.nms.NMSX$2 -> xWpV$2:
    org.bukkit.entity.Player val$player -> jhjw
    java.lang.String val$message -> IGMq
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
surge.nms.PacketUtil -> NVIs:
    6:6:void <init>() -> <init>
    20:45:surge.nms.PacketUtil$V getVersion() -> RIGg
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> mXJp
    68:82:void clearTitle(org.bukkit.entity.Player) -> yIkA
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> mXJp
surge.nms.PacketUtil$V -> NVIs$mXJp:
    surge.nms.PacketUtil$V R17 -> mYGN
    surge.nms.PacketUtil$V R18 -> VUdO
    surge.nms.PacketUtil$V R19 -> DsTI
    surge.nms.PacketUtil$V R111 -> cmKl
    surge.nms.PacketUtil$V R110 -> ghVm
    surge.nms.PacketUtil$V R112 -> vtbb
    surge.nms.PacketUtil$V[] ENUM$VALUES -> SCie
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:surge.nms.PacketUtil$V[] values() -> values
    1:1:surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
surge.nms.Title -> HBur:
    java.lang.String title -> title
    java.lang.String subTitle -> EnFj
    java.lang.String action -> action
    java.lang.Integer fadeIn -> gqHA
    java.lang.Integer fadeOut -> ivle
    java.lang.Integer stayTime -> yBVM
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> Fomb
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> AWvK
    79:80:void setSubTitle(java.lang.String) -> lUIx
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> tSwX
    99:100:void setFadeIn(java.lang.Integer) -> mXJp
    104:104:java.lang.Integer getFadeOut() -> JlDW
    109:110:void setFadeOut(java.lang.Integer) -> ksfs
    114:114:java.lang.Integer getStayTime() -> ydHl
    119:120:void setStayTime(java.lang.Integer) -> yJLL
surge.nms.VersionBukkit -> Ahus:
    surge.nms.VersionBukkit VU -> WGef
    surge.nms.VersionBukkit V7 -> gWUP
    surge.nms.VersionBukkit V8 -> GcLL
    surge.nms.VersionBukkit V9 -> tKwh
    surge.nms.VersionBukkit V11 -> UlSs
    surge.nms.VersionBukkit V111 -> YpNa
    surge.nms.VersionBukkit V112 -> wLoo
    surge.nms.VersionBukkit[] ENUM$VALUES -> xqvX
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> GbYt
    27:32:boolean uc() -> PeEO
    37:67:surge.nms.VersionBukkit get() -> lndQ
    1:1:surge.nms.VersionBukkit[] values() -> values
    1:1:surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
surge.sched.IBursterator -> xGPN:
    void burst(java.lang.Object) -> PBUD
    void setTimeLock(double) -> PBUD
    double getEstimatedTimeUse() -> mXUV
    int flush() -> FVfT
    int flush(org.cyberpwn.gbench.Profiler) -> mXJp
    void queue(java.lang.Object) -> ePQp
    void queue(java.util.List) -> yJLL
    void queue(java.lang.Object[]) -> mXJp
surge.sched.ICancellable -> hruU:
    void cancel() -> cancel
surge.sched.IMasterTickComponent -> wncc:
    void onTick() -> AWsr
    java.lang.String getTickName() -> LrGi
surge.sched.ITask -> FNTl:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> dgLy
    java.lang.String getName() -> getName
    double getComputeTime() -> yBDs
    double getTotalComputeTime() -> Xchh
    double getActiveTime() -> fvDH
    boolean hasCompleted() -> tBtv
surge.sched.Task -> QFCu:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> GQgb
    double computeTime -> DrrM
    double totalComputeTime -> IWmq
    double activeTime -> IrBO
    boolean completed -> completed
    org.cyberpwn.gbench.Profiler profiler -> agEX
    org.cyberpwn.gbench.Profiler activeProfiler -> ymJE
    int ticks -> bXed
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> SnBs
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> dgLy
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> yBDs
    150:150:boolean hasCompleted() -> tBtv
    156:156:double getTotalComputeTime() -> Xchh
    162:162:double getActiveTime() -> fvDH
    17:17:org.cyberpwn.gbench.Profiler access$0(surge.sched.Task) -> mXJp
    15:15:void access$1(surge.sched.Task,boolean) -> mXJp
    16:16:org.cyberpwn.gbench.Profiler access$2(surge.sched.Task) -> ksfs
    14:14:void access$3(surge.sched.Task,double) -> mXJp
    12:12:void access$4(surge.sched.Task,double) -> ksfs
    14:14:double access$5(surge.sched.Task) -> yJLL
    13:13:void access$6(surge.sched.Task,double) -> yJLL
    13:13:double access$7(surge.sched.Task) -> SnBs
    12:12:double access$8(surge.sched.Task) -> qdWJ
surge.sched.Task$1 -> QFCu$1:
    surge.sched.Task this$0 -> bHDr
    1:25:void <init>(surge.sched.Task) -> <init>
    30:40:void run() -> run
surge.sched.Task$2 -> QFCu$2:
    surge.sched.Task this$0 -> bHDr
    1:49:void <init>(surge.sched.Task) -> <init>
    54:65:void run() -> run
surge.sched.Task$3 -> QFCu$3:
    surge.sched.Task this$0 -> bHDr
    int val$total -> SCiU
    1:74:void <init>(surge.sched.Task,int) -> <init>
    79:95:void run() -> run
surge.sched.TaskManager -> BIwj:
    org.cyberpwn.glang.GList tasks -> IiPh
    org.cyberpwn.glang.GMap taskProfiles -> LHGG
    11:15:void <init>() -> <init>
    20:30:void onTick() -> AWsr
    34:35:void putFinishingTask(surge.sched.ITask) -> mXJp
    39:48:void putTask(surge.sched.ITask) -> ksfs
    53:53:java.lang.String getTickName() -> LrGi
surge.sched.TaskProfile -> VetS:
    double activeTime -> IrBO
    double computeTickTime -> hbkB
    double computeTime -> DrrM
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> fvDH
    23:24:void setActiveTime(double) -> ePQp
    28:28:double getComputeTickTime() -> aTpg
    33:34:void setComputeTickTime(double) -> aKuV
    38:38:double getComputeTime() -> yBDs
    43:44:void setComputeTime(double) -> KDGY
surge.server.AsyncTick -> bqhA:
surge.server.CoreTickThread -> pinh:
    9:12:void <init>() -> <init>
    17:36:void run() -> run
surge.server.MemoryMonitor -> lfSt:
    long memoryFree -> VVFp
    long memoryUsed -> YxbK
    long memoryMax -> Henx
    long lastMemoryUsed -> VgHd
    long memoryUsedAfterGC -> WjKg
    long allocated -> lUeV
    long collected -> WYIg
    long collections -> JRdG
    long sms -> USDT
    long memoryAllocatedPerTick -> LXjQ
    long memoryCollectedPerTick -> VDdo
    long memoryFullyAllocatedPerTick -> qdtG
    long mah -> ECTi
    long mahs -> EKeR
    22:39:void <init>() -> <init>
    void onAllocationSet() -> ogLP
    46:93:void run() -> run
    97:97:long getMemoryFree() -> dgKn
    102:102:long getMemoryUsed() -> getMemoryUsed
    107:107:long getMemoryMax() -> BIyH
    112:112:long getLastMemoryUsed() -> qmRN
    117:117:long getMemoryUsedAfterGC() -> GkJR
    122:122:long getAllocated() -> getAllocated
    127:127:long getCollected() -> Ukac
    132:132:long getCollections() -> wTnx
    137:137:long getSms() -> RQVi
    142:142:long getMemoryAllocatedPerTick() -> xGQd
    147:147:long getMemoryCollectedPerTick() -> cAfA
    152:152:long getMemoryFullyAllocatedPerTick() -> Jsrc
    157:157:long getMah() -> XAel
    162:162:long getMahs() -> Gryi
surge.server.SuperSampler -> NUlR:
    org.cyberpwn.gmath.Average ticksPerSecondL -> mOut
    org.cyberpwn.gmath.Average tickTimeL -> sjyd
    org.cyberpwn.gmath.Average mahL -> EvYa
    double ticksPerSecond -> ePQp
    double ticksPerSecondRaw -> UtfX
    double tickTime -> VLuQ
    double tickTimeRaw -> Jkul
    boolean running -> running
    double tickUtilizationRaw -> UAbR
    double tickUtilization -> bGgX
    double leftoverTickTime -> gphl
    long memoryUse -> hIXG
    long memoryAllocated -> VVFP
    long memoryCollected -> eaqA
    long mahs -> EKeR
    int totalChunks -> XAwx
    int totalEntities -> CVaH
    int totalDrops -> sbiY
    int totalTiles -> FWXQ
    int totalLiving -> QNfQ
    int chunksLoaded -> hjxw
    int chunksUnloaded -> Qgwt
    surge.server.WorldMonitor worldMonitor -> nljq
    surge.server.TPSMonitor tpsMonitor -> iCiV
    surge.server.MemoryMonitor memoryMonitor -> xYGU
    32:106:void <init>() -> <init>
    110:115:void start() -> start
    119:124:void stop() -> stop
    129:133:void onTick() -> AWsr
    138:138:java.lang.String getTickName() -> LrGi
    143:143:org.cyberpwn.gmath.Average getTicksPerSecondL() -> KTsB
    148:148:double getTicksPerSecond() -> hGxw
    153:153:double getTicksPerSecondRaw() -> OGmN
    158:158:boolean isRunning() -> isRunning
    163:163:surge.server.TPSMonitor getTpsMonitor() -> Mcik
    168:168:org.cyberpwn.gmath.Average getTickTimeL() -> nlYH
    173:173:double getTickTime() -> nBIE
    178:178:double getTickTimeRaw() -> fuej
    183:183:double getTickUtilizationRaw() -> WhyT
    188:188:double getTickUtilization() -> IqSO
    193:193:double getLeftoverTickTime() -> vbqV
    198:198:surge.server.MemoryMonitor getMemoryMonitor() -> YpAW
    203:203:long getMemoryUse() -> bFtu
    208:208:long getMemoryAllocated() -> oDkQ
    213:213:long getMemoryCollected() -> cBHm
    218:218:org.cyberpwn.gmath.Average getMahL() -> vcRa
    223:223:long getMahs() -> Gryi
    228:228:int getTotalChunks() -> xyyN
    233:233:int getTotalEntities() -> rNTr
    238:238:int getTotalDrops() -> IydG
    243:243:int getTotalTiles() -> tnMY
    248:248:int getTotalLiving() -> myxn
    253:253:surge.server.WorldMonitor getWorldMonitor() -> hjil
    258:258:int getChunksLoaded() -> BclT
    263:263:int getChunksUnloaded() -> VvxM
    268:269:void setTicksPerSecondL(org.cyberpwn.gmath.Average) -> mXJp
    273:274:void setTickTimeL(org.cyberpwn.gmath.Average) -> ksfs
    278:279:void setMahL(org.cyberpwn.gmath.Average) -> yJLL
    283:284:void setTicksPerSecond(double) -> ksfs
    288:289:void setTicksPerSecondRaw(double) -> hGxw
    293:294:void setTickTime(double) -> eYCP
    298:299:void setTickTimeRaw(double) -> dMNe
    303:304:void setRunning(boolean) -> gUxV
    308:309:void setTickUtilizationRaw(double) -> jVod
    313:314:void setTickUtilization(double) -> wnXH
    318:319:void setLeftoverTickTime(double) -> qKCn
    323:324:void setMemoryUse(long) -> qArm
    328:329:void setMemoryAllocated(long) -> Fomb
    333:334:void setMemoryCollected(long) -> Ralc
    338:339:void setMahs(long) -> SnAm
    343:344:void setTotalChunks(int) -> jEqq
    348:349:void setTotalEntities(int) -> lUIx
    353:354:void setTotalDrops(int) -> WXMo
    358:359:void setTotalTiles(int) -> NLsD
    363:364:void setTotalLiving(int) -> CLqw
    368:369:void setChunksLoaded(int) -> vsgm
    373:374:void setChunksUnloaded(int) -> inDC
    378:379:void setWorldMonitor(surge.server.WorldMonitor) -> mXJp
    383:384:void setTpsMonitor(surge.server.TPSMonitor) -> mXJp
    388:389:void setMemoryMonitor(surge.server.MemoryMonitor) -> mXJp
    27:27:void access$0(surge.server.SuperSampler,int) -> mXJp
    29:29:void access$1(surge.server.SuperSampler,int) -> ksfs
    30:30:void access$2(surge.server.SuperSampler,int) -> yJLL
    28:28:void access$3(surge.server.SuperSampler,int) -> SnBs
    31:31:void access$4(surge.server.SuperSampler,int) -> qdWJ
    32:32:void access$5(surge.server.SuperSampler,int) -> JRFt
    33:33:void access$6(surge.server.SuperSampler,int) -> halY
    16:16:void access$7(surge.server.SuperSampler,double) -> mXJp
    18:18:void access$8(surge.server.SuperSampler,double) -> ksfs
    12:12:org.cyberpwn.gmath.Average access$9(surge.server.SuperSampler) -> mXJp
    16:16:double access$10(surge.server.SuperSampler) -> ksfs
    13:13:org.cyberpwn.gmath.Average access$11(surge.server.SuperSampler) -> yJLL
    18:18:double access$12(surge.server.SuperSampler) -> SnBs
    15:15:void access$13(surge.server.SuperSampler,double) -> yJLL
    17:17:void access$14(surge.server.SuperSampler,double) -> SnBs
    20:20:void access$15(surge.server.SuperSampler,double) -> qdWJ
    17:17:double access$16(surge.server.SuperSampler) -> qdWJ
    21:21:void access$17(surge.server.SuperSampler,double) -> JRFt
    21:21:double access$18(surge.server.SuperSampler) -> JRFt
    22:22:void access$19(surge.server.SuperSampler,double) -> halY
    23:23:void access$20(surge.server.SuperSampler,long) -> mXJp
    24:24:void access$21(surge.server.SuperSampler,long) -> ksfs
    25:25:void access$22(surge.server.SuperSampler,long) -> yJLL
    14:14:org.cyberpwn.gmath.Average access$23(surge.server.SuperSampler) -> halY
    26:26:void access$24(surge.server.SuperSampler,long) -> SnBs
surge.server.SuperSampler$1 -> NUlR$1:
    surge.server.SuperSampler this$0 -> xrYE
    1:62:void <init>(surge.server.SuperSampler) -> <init>
    67:74:void updated(int,int,int,int,int,int,int) -> mXJp
surge.server.SuperSampler$2 -> NUlR$2:
    surge.server.SuperSampler this$0 -> xrYE
    1:77:void <init>(surge.server.SuperSampler) -> <init>
    82:91:void onTicked() -> qdcE
surge.server.SuperSampler$3 -> NUlR$3:
    surge.server.SuperSampler this$0 -> xrYE
    1:94:void <init>(surge.server.SuperSampler) -> <init>
    99:104:void onAllocationSet() -> ogLP
surge.server.TPSMonitor -> INmP:
    double tickTimeMS -> MJls
    double rawTicksPerSecond -> JdGm
    org.cyberpwn.gbench.Profiler tickProfiler -> KVJF
    org.cyberpwn.gbench.Profiler tickTimeProfiler -> WYKv
    boolean ticked -> Jkwa
    java.lang.Thread$State lastState -> sQkJ
    double actualTickTimeMS -> mOyR
    double ltt -> GRNN
    long lastTick -> kcek
    20:33:void <init>() -> <init>
    void onTicked() -> qdcE
    40:84:void run() -> run
    88:116:void processState(java.lang.Thread$State) -> mXJp
    120:120:double getTickTimeMS() -> DrcY
    125:125:double getRawTicksPerSecond() -> jqQA
    130:130:org.cyberpwn.gbench.Profiler getTickProfiler() -> tLId
    135:135:boolean isTicked() -> rxfr
    140:141:void markTick() -> dUlA
    145:145:org.cyberpwn.gbench.Profiler getTickTimeProfiler() -> DGnt
    150:150:java.lang.Thread$State getLastState() -> WaIA
    155:155:double getActualTickTimeMS() -> myyE
surge.server.WorldMonitor -> rotp:
    boolean chunksChanged -> dxcP
    boolean dropChanged -> kBCM
    boolean tileChanged -> Ukvx
    boolean livingChanged -> ohBM
    boolean totalChanged -> wMVG
    boolean updated -> IXTW
    int totalChunks -> XAwx
    int totalDrops -> sbiY
    int totalTiles -> FWXQ
    int totalLiving -> QNfQ
    int totalEntities -> CVaH
    int chunksLoaded -> hjxw
    int chunksUnloaded -> Qgwt
    long ms -> OGmN
    25:44:void <init>() -> <init>
    49:64:void run() -> run
    void updated(int,int,int,int,int,int,int) -> mXJp
    71:76:void on(org.bukkit.event.world.ChunkLoadEvent) -> mXJp
    81:86:void on(org.bukkit.event.world.ChunkUnloadEvent) -> mXJp
    91:92:void on(org.bukkit.event.entity.EntitySpawnEvent) -> mXJp
    97:98:void on(org.bukkit.event.entity.EntityDeathEvent) -> mXJp
    103:104:void on(org.bukkit.event.player.PlayerDropItemEvent) -> mXJp
    109:110:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> mXJp
    115:116:void on(org.bukkit.event.entity.EntityPickupItemEvent) -> mXJp
    121:122:void on(org.bukkit.event.block.BlockPlaceEvent) -> mXJp
    127:128:void on(org.bukkit.event.block.BlockBreakEvent) -> mXJp
    132:133:void doUpdate() -> NVMo
    137:188:void sample() -> qKGr
    192:198:void sampleTotalCount() -> vkaS
    202:208:void sampleLivingCount() -> myxM
    212:221:void sampleTileCount() -> FNWD
    225:231:void sampleDropCount() -> KLcy
    235:241:void sampleChunkCount() -> Jkcx
surge.text.PhantomSpinner -> LhxG:
    surge.text.ProgressSpinner s -> gEwU
    surge.text.ProgressSpinner c -> kuGc
    15:19:void <init>(surge.util.C,surge.util.C,surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
surge.text.ProgressSpinner -> qTAY:
    java.lang.String[] chars -> twQP
    int index -> index
    surge.text.ProgressSpinner DEFAULT -> Yorx
    surge.text.ProgressSpinner NETWORK -> vuFg
    surge.text.ProgressSpinner CIRCLES -> psUU
    surge.text.ProgressSpinner RANDOMS -> pjdW
    surge.text.ProgressSpinner MERGERS -> ejeU
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> Wyys
    65:65:int getIndex() -> getIndex
surge.util.Anchor -> tLIK:
    int value() -> value
surge.util.Area -> RIGg:
    org.bukkit.Location location -> WjNN
    java.lang.Double radius -> lwjM
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> mXJp
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:surge.util.Cuboid toCuboid() -> gNSr
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> qdWJ
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> JRFt
    109:109:boolean isWithin(org.bukkit.Location) -> halY
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> SnBs
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> mXJp
    176:200:org.bukkit.entity.Entity[] getNearbyEntities() -> LWxB
    211:221:org.bukkit.entity.Player[] getNearbyPlayers() -> wDPq
    231:231:org.bukkit.Location getLocation() -> getLocation
    242:243:void setLocation(org.bukkit.Location) -> ssMm
    252:252:java.lang.Double getRadius() -> lvtr
    263:264:void setRadius(java.lang.Double) -> ksfs
    273:278:org.bukkit.Location random() -> JtUd
surge.util.Axis -> AWvK:
    surge.util.Axis X -> ejdr
    surge.util.Axis Y -> HMAX
    surge.util.Axis Z -> bHIs
    int x -> x
    int y -> y
    int z -> z
    surge.util.Axis[] ENUM$VALUES -> sYyg
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> TNnN
    29:29:org.bukkit.util.Vector negative() -> ryHL
    1:1:surge.util.Axis[] values() -> values
    1:1:surge.util.Axis valueOf(java.lang.String) -> valueOf
surge.util.BlastResistance -> tSwX:
    surge.util.BlastResistance BARRIER -> USEK
    surge.util.BlastResistance BEDROCK -> sAIL
    surge.util.BlastResistance COMMAND -> URcg
    surge.util.BlastResistance ENDER_PORTAL -> MuaG
    surge.util.BlastResistance ENDER_PORTAL_FRAME -> sQjD
    surge.util.BlastResistance ANVIL -> cJlA
    surge.util.BlastResistance ENCHANTMENT_TABLE -> fCSq
    surge.util.BlastResistance OBSIDIAN -> KwkU
    surge.util.BlastResistance ENDER_CHEST -> iCkX
    surge.util.BlastResistance WATER -> SoCF
    surge.util.BlastResistance LAVA -> OkGG
    surge.util.BlastResistance STATIONARY_WATER -> rFVO
    surge.util.BlastResistance DRAGON_EGG -> RtOh
    surge.util.BlastResistance ENDER_STONE -> vlTh
    surge.util.BlastResistance COAL_BLOCK -> clmt
    surge.util.BlastResistance DIAMOND_BLOCK -> fSvw
    surge.util.BlastResistance EMERALD_BLOCK -> NVdB
    surge.util.BlastResistance GOLD_BLOCK -> nlpi
    surge.util.BlastResistance IRON_BLOCK -> eHdK
    surge.util.BlastResistance REDSTONE_BLOCK -> iCoL
    surge.util.BlastResistance BRICK -> jiUl
    surge.util.BlastResistance BRICK_STAIRS -> jaFE
    surge.util.BlastResistance HARD_CLAY -> dgdH
    surge.util.BlastResistance STONE -> vdHV
    surge.util.BlastResistance SMOOTH_BRICK -> cdaB
    surge.util.BlastResistance SMOOTH_STAIRS -> oMpq
    surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> FqPT
    surge.util.BlastResistance STONE_SLAB2 -> esXK
    surge.util.BlastResistance IRON_DOOR -> UciB
    surge.util.BlastResistance IRON_DOOR_BLOCK -> JcjA
    surge.util.BlastResistance IRON_TRAPDOOR -> fSxF
    surge.util.BlastResistance MOB_SPAWNER -> HDRJ
    surge.util.BlastResistance WEB -> VDiM
    surge.util.BlastResistance DISPENSER -> vBEE
    surge.util.BlastResistance DROPPER -> pHcY
    surge.util.BlastResistance FURNACE -> Tywf
    surge.util.BlastResistance BURNING_FURNACE -> BvCr
    surge.util.BlastResistance BEACON -> PTYm
    surge.util.BlastResistance COAL_ORE -> Jcin
    surge.util.BlastResistance COCOA -> ObYA
    surge.util.BlastResistance DIAMOND_ORE -> TOeC
    surge.util.BlastResistance EMERALD_ORE -> vSFQ
    surge.util.BlastResistance FENCE -> IiUw
    surge.util.BlastResistance FENCE_GATE -> eauG
    surge.util.BlastResistance ACACIA_FENCE_GATE -> iToT
    surge.util.BlastResistance BIRCH_FENCE_GATE -> IFrV
    surge.util.BlastResistance DARK_OAK_FENCE_GATE -> neAA
    surge.util.BlastResistance SPRUCE_FENCE_GATE -> PTXU
    surge.util.BlastResistance JUNGLE_FENCE_GATE -> fmhv
    surge.util.BlastResistance ACACIA_FENCE -> scNP
    surge.util.BlastResistance BIRCH_FENCE -> ePsO
    surge.util.BlastResistance DARK_OAK_FENCE -> JuKJ
    surge.util.BlastResistance SPRUCE_FENCE -> UAeB
    surge.util.BlastResistance JUNGLE_FENCE -> bHKG
    surge.util.BlastResistance ACACIA_WOOD_STAIRS -> rqKq
    surge.util.BlastResistance BIRCH_WOOD_STAIRS -> ifPx
    surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> ChFV
    surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> fTXD
    surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> TWtB
    surge.util.BlastResistance QUARTZ_STAIRS -> NNSF
    surge.util.BlastResistance COBBLESTONE_STAIRS -> sRKy
    surge.util.BlastResistance SANDSTONE_STAIRS -> pasp
    surge.util.BlastResistance NETHER_BRICK_STAIRS -> AsAs
    surge.util.BlastResistance WOOD_STAIRS -> QpnG
    surge.util.BlastResistance RED_SANDSTONE_STAIRS -> Rspg
    surge.util.BlastResistance ACACIA_DOOR -> vJWX
    surge.util.BlastResistance BIRCH_DOOR -> awoB
    surge.util.BlastResistance DARK_OAK_DOOR -> Hnff
    surge.util.BlastResistance SPRUCE_DOOR -> Cxhy
    surge.util.BlastResistance JUNGLE_DOOR -> Yovb
    surge.util.BlastResistance GOLD_ORE -> BSbg
    surge.util.BlastResistance HOPPER -> TOfX
    surge.util.BlastResistance IRON_ORE -> bjQI
    surge.util.BlastResistance LAPIS_BLOCK -> Hnfp
    surge.util.BlastResistance LAPIS_ORE -> jXUn
    surge.util.BlastResistance QUARTZ_ORE -> sROS
    surge.util.BlastResistance REDSTONE_ORE -> dowE
    surge.util.BlastResistance TRAP_DOOR -> tvta
    surge.util.BlastResistance WOOD -> MmUs
    surge.util.BlastResistance CHEST -> CFDf
    surge.util.BlastResistance TRAPPED_CHEST -> UAgw
    surge.util.BlastResistance WORKBENCH -> iDQc
    surge.util.BlastResistance CAULDRON -> YhHM
    surge.util.BlastResistance LOG -> sALs
    surge.util.BlastResistance LOG_2 -> GssI
    surge.util.BlastResistance BOOKSHELF -> wwlb
    surge.util.BlastResistance BANNER -> mXlw
    surge.util.BlastResistance STANDING_BANNER -> erwq
    surge.util.BlastResistance WALL_BANNER -> Bufh
    surge.util.BlastResistance JACK_O_LANTERN -> aMYn
    surge.util.BlastResistance MELON_BLOCK -> Fpor
    surge.util.BlastResistance SKULL -> IiXf
    surge.util.BlastResistance PUMPKIN -> Xday
    surge.util.BlastResistance SIGN -> jaEn
    surge.util.BlastResistance SIGN_POST -> YxhD
    surge.util.BlastResistance WALL_SIGN -> cJob
    surge.util.BlastResistance QUARTZ_BLOCK -> fBvt
    surge.util.BlastResistance NOTE_BLOCK -> jywO
    surge.util.BlastResistance RED_SANDSTONE -> Yxgd
    surge.util.BlastResistance SANDSTONE -> SLcF
    surge.util.BlastResistance WOOL -> iDQB
    surge.util.BlastResistance MONSTER_EGG -> aDiW
    surge.util.BlastResistance RAILS -> cKPX
    surge.util.BlastResistance ACTIVATOR_RAIL -> Vfls
    surge.util.BlastResistance DETECTOR_RAIL -> XKTJ
    surge.util.BlastResistance POWERED_RAIL -> Qpqw
    surge.util.BlastResistance CLAY -> YpYe
    surge.util.BlastResistance DIRT -> UBKK
    surge.util.BlastResistance GRASS -> iDTT
    surge.util.BlastResistance GRAVEL -> RcTk
    surge.util.BlastResistance SPONGE -> MvHi
    surge.util.BlastResistance BREWING_STAND -> mbAm
    surge.util.BlastResistance STONE_BUTTON -> YhIx
    surge.util.BlastResistance WOOD_BUTTON -> qnNR
    surge.util.BlastResistance CAKE_BLOCK -> VobG
    surge.util.BlastResistance ICE -> neDq
    surge.util.BlastResistance PACKED_ICE -> ChLD
    surge.util.BlastResistance LEVER -> mHPA
    surge.util.BlastResistance MYCEL -> aELW
    surge.util.BlastResistance PISTON_BASE -> BTFq
    surge.util.BlastResistance PISTON_EXTENSION -> Laas
    surge.util.BlastResistance PISTON_MOVING_PIECE -> JRkD
    surge.util.BlastResistance PISTON_STICKY_BASE -> lEKf
    surge.util.BlastResistance GOLD_PLATE -> QiAw
    surge.util.BlastResistance IRON_PLATE -> VgOa
    surge.util.BlastResistance STONE_PLATE -> axOx
    surge.util.BlastResistance WOOD_PLATE -> GIbN
    surge.util.BlastResistance SAND -> TPID
    surge.util.BlastResistance SOUL_SAND -> BCER
    surge.util.BlastResistance CACTUS -> skbN
    surge.util.BlastResistance LADDER -> nmSu
    surge.util.BlastResistance NETHERRACK -> cSbo
    surge.util.BlastResistance GLASS -> xjQA
    surge.util.BlastResistance THIN_GLASS -> Aach
    surge.util.BlastResistance STAINED_GLASS -> MTDx
    surge.util.BlastResistance STAINED_GLASS_PANE -> slCT
    surge.util.BlastResistance GLOWSTONE -> iCuK
    surge.util.BlastResistance REDSTONE_LAMP_OFF -> xQCA
    surge.util.BlastResistance REDSTONE_LAMP_ON -> riDD
    surge.util.BlastResistance SEA_LANTERN -> awsL
    surge.util.BlastResistance BED_BLOCK -> MBeW
    surge.util.BlastResistance DAYLIGHT_DETECTOR -> rqSj
    surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> oVgp
    surge.util.BlastResistance HUGE_MUSHROOM_1 -> ghbt
    surge.util.BlastResistance HUGE_MUSHROOM_2 -> Heyb
    surge.util.BlastResistance LEAVES -> bjUV
    surge.util.BlastResistance LEAVES_2 -> XJtp
    surge.util.BlastResistance SNOW -> gptI
    int br -> CFHv
    surge.util.BlastResistance[] ENUM$VALUES -> nJst
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> bOfK
    175:190:int get(org.bukkit.Material) -> mXJp
    1:1:surge.util.BlastResistance[] values() -> values
    1:1:surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
surge.util.Blocks -> JlDW:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> ksfs
surge.util.C -> ydHl:
    surge.util.C BLACK -> hIca
    surge.util.C DARK_BLUE -> YhLW
    surge.util.C DARK_GREEN -> lDmW
    surge.util.C DARK_AQUA -> EKnx
    surge.util.C DARK_RED -> rprX
    surge.util.C DARK_PURPLE -> GAUK
    surge.util.C GOLD -> CFIO
    surge.util.C GRAY -> RtYG
    surge.util.C DARK_GRAY -> mXrL
    surge.util.C BLUE -> AHRk
    surge.util.C GREEN -> DING
    surge.util.C AQUA -> apCB
    surge.util.C RED -> KDmy
    surge.util.C LIGHT_PURPLE -> KUoo
    surge.util.C YELLOW -> doxs
    surge.util.C WHITE -> XJsf
    surge.util.C MAGIC -> uOgg
    surge.util.C BOLD -> UtoU
    surge.util.C STRIKETHROUGH -> XKUH
    surge.util.C UNDERLINE -> OYku
    surge.util.C ITALIC -> HMHU
    surge.util.C RESET -> fnPR
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> FFdD
    char code -> Xdif
    boolean isFormat -> ceJS
    java.lang.String toString -> APfN
    java.util.Map BY_ID -> hsyH
    java.util.Map BY_CHAR -> etAU
    java.util.Map dyeChatMap -> GIgU
    java.util.Map chatHexMap -> RRXL
    java.util.Map dyeHexMap -> Nxnu
    int[] $SWITCH_TABLE$surge$util$C -> fmqq
    surge.util.C[] ENUM$VALUES -> YhMn
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> xrLK
    378:378:java.lang.String hex() -> xWxN
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:surge.util.C getByChar(char) -> ssMm
    434:442:surge.util.C getByChar(java.lang.String) -> WXMo
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:surge.util.C dyeToChat(org.bukkit.DyeColor) -> ksfs
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> mXJp
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> ksfs
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> yJLL
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> NLsD
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> CLqw
    560:578:java.lang.String generateColorTable() -> pacH
    588:588:org.bukkit.ChatColor chatColor() -> OsFn
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:surge.util.C fromItemMeta(byte) -> mXJp
    632:679:byte getItemMeta() -> rNVu
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:surge.util.C[] values() -> values
    1:1:surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> LPKY
surge.util.C$1 -> ydHl$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$10 -> ydHl$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$11 -> ydHl$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$12 -> ydHl$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$13 -> ydHl$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$14 -> ydHl$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$15 -> ydHl$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$16 -> ydHl$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$17 -> ydHl$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$18 -> ydHl$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$19 -> ydHl$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$2 -> ydHl$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$20 -> ydHl$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$21 -> ydHl$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$22 -> ydHl$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$3 -> ydHl$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$4 -> ydHl$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$5 -> ydHl$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$6 -> ydHl$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$7 -> ydHl$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$8 -> ydHl$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$9 -> ydHl$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.CDou -> GbYt:
    double number -> SoNN
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:surge.util.CDou set(double) -> HdqI
    23:25:surge.util.CDou add(double) -> vHqM
    30:32:surge.util.CDou sub(double) -> Bkpl
    37:37:double get() -> get
    42:48:void circ() -> KUXe
surge.util.CMD -> PeEO:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> vdNw
    25:30:void <init>(java.lang.String) -> <init>
    39:40:surge.util.CMD virtual() -> dobQ
    51:53:void execute(org.bukkit.command.CommandSender) -> yJLL
    60:77:void execute() -> execute
surge.util.CNum -> lndQ:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:surge.util.CNum set(int) -> ePUd
    23:25:surge.util.CNum add(int) -> TEsR
    30:32:surge.util.CNum sub(int) -> Ynto
    37:37:int get() -> get
    42:48:void circ() -> KUXe
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> uFRK
surge.util.Chunks -> mXUV:
    12:12:void <init>() -> <init>
    23:23:org.cyberpwn.glang.GList getLoadedChunks(org.bukkit.World) -> SnBs
    33:40:org.cyberpwn.glang.GList getLoadedChunks() -> maJd
    54:54:org.cyberpwn.glang.GList getRadius(org.bukkit.Chunk,int) -> ksfs
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> mXJp
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> mXJp
    98:98:boolean unload(org.bukkit.Chunk) -> CVAs
    114:124:int unload(org.cyberpwn.glang.GList,boolean,boolean) -> mXJp
    138:138:int unload(org.cyberpwn.glang.GList,boolean) -> mXJp
    150:150:int unload(org.cyberpwn.glang.GList) -> qdWJ
    166:166:boolean isLoaded(java.lang.String,int,int) -> mXJp
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> ksfs
    201:205:void load(org.cyberpwn.glang.GList) -> JRFt
surge.util.Cuboid -> FVfT:
    java.lang.String worldName -> CElH
    int x1 -> lNAV
    int y1 -> cJtv
    int z1 -> XKVq
    int x2 -> AYWx
    int y2 -> BSjN
    int z2 -> iMGi
    int[] $SWITCH_TABLE$surge$util$Axis -> afrc
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> pYkk
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(surge.util.Axis) -> mXJp
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> yJLL
    93:93:boolean hasPlayers() -> gghu
    98:110:org.cyberpwn.glang.GList getPlayers() -> XSFr
    115:166:org.cyberpwn.glang.GList getEntities() -> yIxn
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:surge.util.Cuboid flatten(int) -> Lhol
    287:287:org.bukkit.Location getLowerNE() -> FVjY
    298:298:org.bukkit.Location getUpperSW() -> EeJI
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> UkeY
    348:348:int getSizeY() -> XAia
    358:358:int getSizeZ() -> wUTr
    368:368:int getLowerX() -> APKn
    378:378:int getLowerY() -> hQYl
    388:388:int getLowerZ() -> XSKv
    398:398:int getUpperX() -> ejSm
    408:408:int getUpperY() -> owol
    418:418:int getUpperZ() -> eGpJ
    428:438:org.bukkit.block.Block[] corners() -> MRlW
    454:469:surge.util.Cuboid expand(surge.util.Cuboid$CuboidDirection,int) -> mXJp
    484:484:surge.util.Cuboid shift(surge.util.Cuboid$CuboidDirection,int) -> ksfs
    500:514:surge.util.Cuboid outset(surge.util.Cuboid$CuboidDirection,int) -> yJLL
    530:530:surge.util.Cuboid inset(surge.util.Cuboid$CuboidDirection,int) -> SnBs
    546:546:boolean contains(int,int,int) -> yJLL
    558:558:boolean contains(org.bukkit.block.Block) -> yJLL
    570:570:boolean contains(org.bukkit.Location) -> yIkI
    580:580:int volume() -> gowt
    591:601:byte averageLightLevel() -> TOQG
    612:612:surge.util.Cuboid contract() -> DPcO
    626:666:surge.util.Cuboid contract(surge.util.Cuboid$CuboidDirection) -> mXJp
    680:695:surge.util.Cuboid getFace(surge.util.Cuboid$CuboidDirection) -> ksfs
    708:715:boolean containsOnly(org.bukkit.Material) -> ksfs
    727:739:surge.util.Cuboid getBoundingCuboid(surge.util.Cuboid) -> mXJp
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> SnBs
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> mXJp
    786:800:java.util.List getChunks() -> DrfS
    815:819:void fill(int,byte) -> mXJp
    843:843:java.util.Iterator iterator() -> iterator
    854:854:surge.util.Cuboid clone() -> dDmB
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> pirH
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> GHjf
surge.util.Cuboid$1 -> FVfT$1:
    surge.util.Cuboid this$0 -> WYVI
    1:98:void <init>(surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> gUxV
    1:1:java.lang.Object onAdapt(java.lang.Object) -> ksfs
surge.util.Cuboid$CuboidDirection -> FVfT$mXJp:
    surge.util.Cuboid$CuboidDirection North -> IaOS
    surge.util.Cuboid$CuboidDirection East -> mHRd
    surge.util.Cuboid$CuboidDirection South -> jaPJ
    surge.util.Cuboid$CuboidDirection West -> psbT
    surge.util.Cuboid$CuboidDirection Up -> qCaF
    surge.util.Cuboid$CuboidDirection Down -> XJxu
    surge.util.Cuboid$CuboidDirection Horizontal -> eYoa
    surge.util.Cuboid$CuboidDirection Vertical -> Hnns
    surge.util.Cuboid$CuboidDirection Both -> WjYf
    surge.util.Cuboid$CuboidDirection Unknown -> WPgQ
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> pYkk
    surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> uOll
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:surge.util.Cuboid$CuboidDirection opposite() -> PmXT
    1:1:surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> GHjf
surge.util.Cuboid$CuboidIterator -> FVfT$ksfs:
    org.bukkit.World w -> EefV
    int baseX -> RQxp
    int baseY -> urPW
    int baseZ -> UleI
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> cCIa
    int sizeY -> xGsd
    int sizeZ -> YxqD
    surge.util.Cuboid this$0 -> WYVI
    875:885:void <init>(surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
surge.util.CuboidException -> dgLy:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
surge.util.D -> yBDs:
    org.cyberpwn.glang.GList buffer -> UtuF
    10:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    14:18:void flush() -> flush
    22:33:void log(java.lang.String,java.lang.String) -> ksfs
    37:38:void l(java.lang.Object,java.lang.String) -> mXJp
    42:43:void s(java.lang.Object,java.lang.String) -> ksfs
    47:48:void v(java.lang.Object,java.lang.String) -> yJLL
    52:53:void w(java.lang.Object,java.lang.String) -> SnBs
    57:58:void f(java.lang.Object,java.lang.String) -> qdWJ
    62:69:void l(java.lang.String) -> vsgm
    73:80:void s(java.lang.String) -> inDC
    84:91:void v(java.lang.String) -> ePUd
    95:102:void w(java.lang.String) -> TEsR
    106:113:void f(java.lang.String) -> Ynto
surge.util.DMSRequire -> Xchh:
    surge.util.DMSRequirement value() -> qluD
surge.util.DMSRequirement -> fvDH:
    surge.util.DMSRequirement SQL -> YElP
    surge.util.DMSRequirement[] ENUM$VALUES -> fTbe
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.DMSRequirement[] values() -> values
    1:1:surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
surge.util.Depend -> tBtv:
    surge.util.Depend VAULT -> dVmK
    surge.util.Depend FAWE -> hlIu
    surge.util.Depend WORLDEDIT -> oWKt
    surge.util.Depend PROTOLIB -> IOnN
    surge.util.Depend CITIZENS -> nukY
    java.lang.String name -> name
    surge.util.Depend[] ENUM$VALUES -> WjYI
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:surge.util.Depend[] values() -> values
    1:1:surge.util.Depend valueOf(java.lang.String) -> valueOf
surge.util.Dimension -> aTpg:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:surge.util.DimensionFace getPane() -> JsyR
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
surge.util.DimensionFace -> ogLP:
    surge.util.DimensionFace X -> mXvC
    surge.util.DimensionFace Y -> DbbT
    surge.util.DimensionFace Z -> APiI
    surge.util.DimensionFace[] ENUM$VALUES -> WiyF
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.DimensionFace[] values() -> values
    1:1:surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
surge.util.Direction -> dgKn:
    surge.util.Direction U -> XvNO
    surge.util.Direction D -> DYps
    surge.util.Direction N -> gWda
    surge.util.Direction S -> iDXj
    surge.util.Direction E -> fwHh
    surge.util.Direction W -> wNFC
    int x -> x
    int y -> y
    int z -> z
    surge.util.Cuboid$CuboidDirection f -> PwJF
    int[] $SWITCH_TABLE$surge$util$Direction -> SoPu
    surge.util.Direction[] ENUM$VALUES -> TaSU
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:surge.util.Direction reverse() -> JJGJ
    61:61:int x() -> HUBV
    66:66:int y() -> fKUx
    71:71:int z() -> z
    76:76:surge.util.Cuboid$CuboidDirection f() -> owtH
    81:81:org.cyberpwn.glang.GList news() -> PeJa
    86:86:org.cyberpwn.glang.GList udnews() -> JJGR
    91:101:surge.util.Direction facing(org.bukkit.entity.Player) -> Ralc
    115:147:surge.util.Direction fromByte(byte) -> ksfs
    158:176:byte byteValue() -> byteValue
    1:1:surge.util.Direction[] values() -> values
    1:1:surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> imrM
surge.util.DynamicConfiguration -> BIyH:
surge.util.DynamicTracker -> qmRN:
surge.util.Embedded -> GkJR:
    org.cyberpwn.glang.GList get() -> OQFN
    void add(java.lang.Object) -> add
surge.util.FU -> Ukac:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> mXJp
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> ksfs
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> yJLL
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> SnBs
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
surge.util.Fingerprint -> wTnx:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> uFRK
surge.util.Health -> RQVi:
    double hp -> oySG
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> QVjy
    41:41:double getHearts() -> nuQK
    51:51:double getHalfHearts() -> SfCd
    61:61:int getFlatHalfHearts() -> JRXG
surge.util.IO -> xGQd:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
surge.util.Items -> cAfA:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> mXJp
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> mXJp
    55:55:boolean is(org.bukkit.inventory.ItemStack,surge.util.MaterialBlock) -> mXJp
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> mXJp
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> mXJp
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> ksfs
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> yJLL
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> SnBs
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> mXJp
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> mXJp
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> mXJp
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> mXJp
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> qdWJ
    216:221:surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> JRFt
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> halY
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> ssMm
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> yIkI
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> mXJp
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> CVAs
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> qAsQ
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> mXJp
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> mXJp
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> ksfs
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> mXJp
surge.util.MSound -> Jsrc:
    surge.util.MSound AMBIENCE_CAVE -> kBQy
    surge.util.MSound AMBIENCE_RAIN -> XupK
    surge.util.MSound AMBIENCE_THUNDER -> WsMi
    surge.util.MSound ANVIL_BREAK -> EDFY
    surge.util.MSound ANVIL_LAND -> SgBA
    surge.util.MSound ANVIL_USE -> HoSC
    surge.util.MSound ARROW_HIT -> OHrI
    surge.util.MSound BURP -> KVXb
    surge.util.MSound CHEST_CLOSE -> dhQf
    surge.util.MSound CHEST_OPEN -> qeeS
    surge.util.MSound CLICK -> ktuQ
    surge.util.MSound DOOR_CLOSE -> ghiO
    surge.util.MSound DOOR_OPEN -> HwcN
    surge.util.MSound DRINK -> LsOE
    surge.util.MSound EAT -> cSlO
    surge.util.MSound EXPLODE -> VNHF
    surge.util.MSound FALL_BIG -> BdnL
    surge.util.MSound FALL_SMALL -> WHWo
    surge.util.MSound FIRE -> PCbs
    surge.util.MSound FIRE_IGNITE -> qeda
    surge.util.MSound FIZZ -> LXyR
    surge.util.MSound FUSE -> YgpO
    surge.util.MSound GLASS -> feeN
    surge.util.MSound HURT_FLESH -> OIRG
    surge.util.MSound ITEM_BREAK -> ndkr
    surge.util.MSound ITEM_PICKUP -> xbIU
    surge.util.MSound LAVA -> bYYD
    surge.util.MSound LAVA_POP -> nBiQ
    surge.util.MSound LEVEL_UP -> jPNi
    surge.util.MSound MINECART_BASE -> SoPk
    surge.util.MSound MINECART_INSIDE -> Pmvp
    surge.util.MSound NOTE_BASS -> QykV
    surge.util.MSound NOTE_PIANO -> dqAn
    surge.util.MSound NOTE_BASS_DRUM -> afvi
    surge.util.MSound NOTE_STICKS -> lxXS
    surge.util.MSound NOTE_BASS_GUITAR -> xXuv
    surge.util.MSound NOTE_SNARE_DRUM -> pYor
    surge.util.MSound NOTE_PLING -> DkUf
    surge.util.MSound ORB_PICKUP -> VETv
    surge.util.MSound PISTON_EXTEND -> FWiU
    surge.util.MSound PISTON_RETRACT -> vmCv
    surge.util.MSound PORTAL -> KojC
    surge.util.MSound PORTAL_TRAVEL -> vuXP
    surge.util.MSound PORTAL_TRIGGER -> jidU
    surge.util.MSound SHOOT_ARROW -> IYDu
    surge.util.MSound SPLASH -> OREc
    surge.util.MSound SPLASH2 -> wEUx
    surge.util.MSound STEP_GRASS -> kSUc
    surge.util.MSound STEP_GRAVEL -> OshQ
    surge.util.MSound STEP_LADDER -> gWiu
    surge.util.MSound STEP_SAND -> IXeD
    surge.util.MSound STEP_SNOW -> GlQX
    surge.util.MSound STEP_STONE -> ekUq
    surge.util.MSound STEP_WOOD -> TYES
    surge.util.MSound STEP_WOOL -> twbA
    surge.util.MSound SWIM -> IaUs
    surge.util.MSound WATER -> TGba
    surge.util.MSound WOOD_CLICK -> nBkb
    surge.util.MSound BAT_DEATH -> klgP
    surge.util.MSound BAT_HURT -> vAqs
    surge.util.MSound BAT_IDLE -> jaSf
    surge.util.MSound BAT_LOOP -> Mmba
    surge.util.MSound BAT_TAKEOFF -> kJdS
    surge.util.MSound BLAZE_BREATH -> FWiy
    surge.util.MSound BLAZE_DEATH -> LrnL
    surge.util.MSound BLAZE_HIT -> gylK
    surge.util.MSound CAT_HISS -> pbdI
    surge.util.MSound CAT_HIT -> QWic
    surge.util.MSound CAT_MEOW -> Kfyc
    surge.util.MSound CAT_PURR -> CNbn
    surge.util.MSound CAT_PURREOW -> mPjA
    surge.util.MSound CHICKEN_IDLE -> GlOr
    surge.util.MSound CHICKEN_HURT -> ChTX
    surge.util.MSound CHICKEN_EGG_POP -> HnrU
    surge.util.MSound CHICKEN_WALK -> ujCi
    surge.util.MSound COW_IDLE -> fvhw
    surge.util.MSound COW_HURT -> PTfv
    surge.util.MSound COW_WALK -> rhhx
    surge.util.MSound CREEPER_HISS -> JRuc
    surge.util.MSound CREEPER_DEATH -> lDtc
    surge.util.MSound ENDERDRAGON_DEATH -> wohR
    surge.util.MSound ENDERDRAGON_GROWL -> DHsh
    surge.util.MSound ENDERDRAGON_HIT -> TGak
    surge.util.MSound ENDERDRAGON_WINGS -> XBlU
    surge.util.MSound ENDERMAN_DEATH -> pHqB
    surge.util.MSound ENDERMAN_HIT -> Qhkl
    surge.util.MSound ENDERMAN_IDLE -> YVsa
    surge.util.MSound ENDERMAN_TELEPORT -> gGKW
    surge.util.MSound ENDERMAN_SCREAM -> uaTx
    surge.util.MSound ENDERMAN_STARE -> uqui
    surge.util.MSound GHAST_SCREAM -> vliC
    surge.util.MSound GHAST_SCREAM2 -> bQNI
    surge.util.MSound GHAST_CHARGE -> Snth
    surge.util.MSound GHAST_DEATH -> QXMt
    surge.util.MSound GHAST_FIREBALL -> nvTG
    surge.util.MSound GHAST_MOAN -> kSWn
    surge.util.MSound IRONGOLEM_DEATH -> fvlB
    surge.util.MSound IRONGOLEM_HIT -> nSoU
    surge.util.MSound IRONGOLEM_THROW -> cvSw
    surge.util.MSound IRONGOLEM_WALK -> MBpX
    surge.util.MSound MAGMACUBE_WALK -> dWRm
    surge.util.MSound MAGMACUBE_WALK2 -> YFRM
    surge.util.MSound MAGMACUBE_JUMP -> YyWB
    surge.util.MSound PIG_IDLE -> NVsT
    surge.util.MSound PIG_DEATH -> XusN
    surge.util.MSound PIG_WALK -> Mmbr
    surge.util.MSound SHEEP_IDLE -> XSos
    surge.util.MSound SHEEP_SHEAR -> HoUc
    surge.util.MSound SHEEP_WALK -> bsOw
    surge.util.MSound SILVERFISH_HIT -> Sfco
    surge.util.MSound SILVERFISH_KILL -> opdO
    surge.util.MSound SILVERFISH_IDLE -> Vold
    surge.util.MSound SILVERFISH_WALK -> VpNI
    surge.util.MSound SKELETON_IDLE -> ogsF
    surge.util.MSound SKELETON_DEATH -> uOtq
    surge.util.MSound SKELETON_HURT -> CNes
    surge.util.MSound SKELETON_WALK -> oFSq
    surge.util.MSound SLIME_ATTACK -> IjJn
    surge.util.MSound SLIME_WALK -> XCRH
    surge.util.MSound SLIME_WALK2 -> Ypgr
    surge.util.MSound SPIDER_IDLE -> CNeo
    surge.util.MSound SPIDER_DEATH -> cdrv
    surge.util.MSound SPIDER_WALK -> eYwd
    surge.util.MSound WITHER_DEATH -> TGfj
    surge.util.MSound WITHER_HURT -> NFVS
    surge.util.MSound WITHER_IDLE -> klji
    surge.util.MSound WITHER_SHOOT -> ydqq
    surge.util.MSound WITHER_SPAWN -> cnFU
    surge.util.MSound WOLF_BARK -> iLqt
    surge.util.MSound WOLF_DEATH -> SgHR
    surge.util.MSound WOLF_GROWL -> Qyri
    surge.util.MSound WOLF_HOWL -> aonp
    surge.util.MSound WOLF_HURT -> UKIY
    surge.util.MSound WOLF_PANT -> Rcaw
    surge.util.MSound WOLF_SHAKE -> FqaX
    surge.util.MSound WOLF_WALK -> aNKi
    surge.util.MSound WOLF_WHINE -> CgwY
    surge.util.MSound ZOMBIE_METAL -> fDHs
    surge.util.MSound ZOMBIE_WOOD -> JBYK
    surge.util.MSound ZOMBIE_WOODBREAK -> dVsg
    surge.util.MSound ZOMBIE_IDLE -> jrYI
    surge.util.MSound ZOMBIE_DEATH -> wpMr
    surge.util.MSound ZOMBIE_HURT -> MnEl
    surge.util.MSound ZOMBIE_INFECT -> PDKK
    surge.util.MSound ZOMBIE_UNFECT -> dOEV
    surge.util.MSound ZOMBIE_REMEDY -> iUbX
    surge.util.MSound ZOMBIE_WALK -> AjdG
    surge.util.MSound ZOMBIE_PIG_IDLE -> WPoR
    surge.util.MSound ZOMBIE_PIG_ANGRY -> hImq
    surge.util.MSound ZOMBIE_PIG_DEATH -> PCif
    surge.util.MSound ZOMBIE_PIG_HURT -> fDJF
    surge.util.MSound DIG_WOOL -> YgwF
    surge.util.MSound DIG_GRASS -> HLtK
    surge.util.MSound DIG_GRAVEL -> YqIA
    surge.util.MSound DIG_SAND -> ryoV
    surge.util.MSound DIG_SNOW -> EwOw
    surge.util.MSound DIG_STONE -> DcKh
    surge.util.MSound DIG_WOOD -> KyBQ
    surge.util.MSound FIREWORK_BLAST -> yBnK
    surge.util.MSound FIREWORK_BLAST2 -> hRbh
    surge.util.MSound FIREWORK_LARGE_BLAST -> MBsc
    surge.util.MSound FIREWORK_LARGE_BLAST2 -> bkDg
    surge.util.MSound FIREWORK_TWINKLE -> ixIm
    surge.util.MSound FIREWORK_TWINKLE2 -> wpPk
    surge.util.MSound FIREWORK_LAUNCH -> gWpT
    surge.util.MSound SUCCESSFUL_HIT -> ecLY
    surge.util.MSound HORSE_ANGRY -> sksn
    surge.util.MSound HORSE_ARMOR -> tnwN
    surge.util.MSound HORSE_BREATHE -> hSDR
    surge.util.MSound HORSE_DEATH -> FaDQ
    surge.util.MSound HORSE_GALLOP -> KyEA
    surge.util.MSound HORSE_HIT -> gXPx
    surge.util.MSound HORSE_IDLE -> uYJB
    surge.util.MSound HORSE_JUMP -> WHaT
    surge.util.MSound HORSE_LAND -> cSsf
    surge.util.MSound HORSE_SADDLE -> Npjp
    surge.util.MSound HORSE_SOFT -> KgbY
    surge.util.MSound HORSE_WOOD -> dFVr
    surge.util.MSound DONKEY_ANGRY -> EwRw
    surge.util.MSound DONKEY_DEATH -> bark
    surge.util.MSound DONKEY_HIT -> tLsg
    surge.util.MSound DONKEY_IDLE -> marM
    surge.util.MSound HORSE_SKELETON_DEATH -> LYcu
    surge.util.MSound HORSE_SKELETON_HIT -> AbSt
    surge.util.MSound HORSE_SKELETON_IDLE -> uaXt
    surge.util.MSound HORSE_ZOMBIE_DEATH -> EvqA
    surge.util.MSound HORSE_ZOMBIE_HIT -> uGei
    surge.util.MSound HORSE_ZOMBIE_IDLE -> xkCI
    surge.util.MSound VILLAGER_DEATH -> Qhqa
    surge.util.MSound VILLAGER_HAGGLE -> BSwC
    surge.util.MSound VILLAGER_HIT -> rrAw
    surge.util.MSound VILLAGER_IDLE -> GceK
    surge.util.MSound VILLAGER_NO -> CExQ
    surge.util.MSound VILLAGER_YES -> ptKw
    java.lang.String pre19sound -> yKbM
    java.lang.String post19sound -> NWXQ
    org.bukkit.Sound resolvedSound -> cCQt
    surge.util.MSound[] ENUM$VALUES -> uHGL
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> VTyX
    1:1:surge.util.MSound[] values() -> values
    1:1:surge.util.MSound valueOf(java.lang.String) -> valueOf
surge.util.MaterialBlock -> XAel:
    org.bukkit.Material material -> QiRp
    java.lang.Byte data -> AsWT
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> INtC
    79:80:void setData(java.lang.Byte) -> mXJp
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
surge.util.P -> Gryi:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> Lhol
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> Xcpd
    68:68:boolean isAnyOnline() -> tnRF
    80:80:org.cyberpwn.glang.GList inWorld(org.bukkit.World) -> qdWJ
    92:104:org.cyberpwn.glang.GList inChunk(org.bukkit.Chunk) -> qAsQ
    118:118:org.cyberpwn.glang.GList inArea(org.bukkit.Location,double) -> mXJp
    132:132:org.cyberpwn.glang.GList inArea(org.bukkit.Location,int) -> mXJp
    143:144:void disable(org.bukkit.entity.Player) -> SnAm
    154:155:void enable(org.bukkit.entity.Player) -> SBla
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> mXJp
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> ksfs
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> gois
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> mXJp
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> JjvV
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> yJLL
    300:300:boolean canFindPlayer(java.lang.String) -> LFmP
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> SCOk
    338:345:org.cyberpwn.glang.GList onlinePlayers() -> XuRe
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> PBUD
    368:371:void clear(org.bukkit.entity.Player) -> ePQp
    381:385:void clearEffects(org.bukkit.entity.Player) -> aKuV
    398:399:void heal(org.bukkit.entity.Player,double) -> mXJp
    409:410:void heal(org.bukkit.entity.Player) -> KDGY
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> hGxw
    432:433:void resetHunger(org.bukkit.entity.Player) -> eYCP
    443:444:void kill(org.bukkit.entity.Player) -> dMNe
    455:455:surge.util.Shape getShape(org.bukkit.entity.Player) -> jVod
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> wnXH
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> mXJp
surge.util.P$1 -> Gryi$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> gUxV
    1:1:java.lang.Object onAdapt(java.lang.Object) -> ksfs
surge.util.P$2 -> Gryi$2:
    java.lang.Double val$doff -> Wara
    org.bukkit.entity.Player val$e -> txHK
    org.bukkit.entity.Entity[] val$result -> SfhJ
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> CVAs
surge.util.PE -> KTsB:
    surge.util.PE ABSORPTION -> Hwik
    surge.util.PE BLINDNESS -> ySrC
    surge.util.PE CONFUSION -> eskx
    surge.util.PE DAMAGE_RESISTANCE -> YOGo
    surge.util.PE FAST_DIGGING -> YhXy
    surge.util.PE FIRE_RESISTANCE -> pIXN
    surge.util.PE GLOWING -> vvAW
    surge.util.PE HARM -> hReM
    surge.util.PE HEAL -> LPtW
    surge.util.PE HEALTH_BOOST -> tfiJ
    surge.util.PE HUNGER -> xYbr
    surge.util.PE INCREASE_DAMAGE -> aWBV
    surge.util.PE INVISIBILITY -> xPqv
    surge.util.PE JUMP -> apSj
    surge.util.PE LEVITATION -> mPrm
    surge.util.PE LUCK -> VWBg
    surge.util.PE NIGHT_VISION -> FiVa
    surge.util.PE POISON -> cSwC
    surge.util.PE REGENERATION -> klnn
    surge.util.PE SATURATION -> EvtX
    surge.util.PE SLOW -> KyGN
    surge.util.PE SLOW_DIGGING -> wpQy
    surge.util.PE SPEED -> gqeA
    surge.util.PE UNLUCK -> cKfT
    surge.util.PE WATER_BREATHING -> TYMg
    surge.util.PE WEAKNESS -> WPsl
    surge.util.PE WITHER -> esnu
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> mXJp
    144:144:surge.util.PE d(int) -> LFmP
    156:156:surge.util.PE a(int) -> SCOk
    166:166:org.bukkit.potion.PotionEffect c() -> CVRb
    177:178:void c(org.bukkit.entity.LivingEntity) -> qdWJ
    182:183:void crm(org.bukkit.entity.LivingEntity) -> JRFt
    187:188:void rm(org.bukkit.entity.LivingEntity) -> halY
surge.util.ParticleEffect -> OGmN:
    surge.util.ParticleEffect EXPLOSION_NORMAL -> MLHb
    surge.util.ParticleEffect EXPLOSION_LARGE -> VWCX
    surge.util.ParticleEffect EXPLOSION_HUGE -> iVGl
    surge.util.ParticleEffect FIREWORKS_SPARK -> vJjh
    surge.util.ParticleEffect WATER_BUBBLE -> fwRW
    surge.util.ParticleEffect WATER_SPLASH -> Kgbk
    surge.util.ParticleEffect WATER_WAKE -> uPXn
    surge.util.ParticleEffect SUSPENDED -> AYfg
    surge.util.ParticleEffect SUSPENDED_DEPTH -> fClV
    surge.util.ParticleEffect CRIT -> ebkr
    surge.util.ParticleEffect CRIT_MAGIC -> hJTP
    surge.util.ParticleEffect SMOKE_NORMAL -> bHaw
    surge.util.ParticleEffect SMOKE_LARGE -> Ypkm
    surge.util.ParticleEffect SPELL -> uHGt
    surge.util.ParticleEffect SPELL_INSTANT -> WPri
    surge.util.ParticleEffect SPELL_MOB -> dNgt
    surge.util.ParticleEffect SPELL_MOB_AMBIENT -> qvos
    surge.util.ParticleEffect SPELL_WITCH -> AYfP
    surge.util.ParticleEffect DRIP_WATER -> iMWA
    surge.util.ParticleEffect DRIP_LAVA -> eQjo
    surge.util.ParticleEffect VILLAGER_ANGRY -> louD
    surge.util.ParticleEffect VILLAGER_HAPPY -> PURq
    surge.util.ParticleEffect TOWN_AURA -> cTYW
    surge.util.ParticleEffect NOTE -> OROs
    surge.util.ParticleEffect PORTAL -> foDo
    surge.util.ParticleEffect ENCHANTMENT_TABLE -> vlqM
    surge.util.ParticleEffect FLAME -> FXVk
    surge.util.ParticleEffect LAVA -> kdbD
    surge.util.ParticleEffect FOOTSTEP -> OkbU
    surge.util.ParticleEffect CLOUD -> YEyp
    surge.util.ParticleEffect REDSTONE -> JvFH
    surge.util.ParticleEffect SNOWBALL -> bkIA
    surge.util.ParticleEffect SNOW_SHOVEL -> DbrD
    surge.util.ParticleEffect SLIME -> eAMp
    surge.util.ParticleEffect HEART -> AQWQ
    surge.util.ParticleEffect BARRIER -> uilx
    surge.util.ParticleEffect ITEM_CRACK -> MSyf
    surge.util.ParticleEffect BLOCK_CRACK -> fwTm
    surge.util.ParticleEffect BLOCK_DUST -> iwmL
    surge.util.ParticleEffect WATER_DROP -> wpUG
    surge.util.ParticleEffect ITEM_TAKE -> aMqT
    surge.util.ParticleEffect MOB_APPEARANCE -> wgbe
    surge.util.ParticleEffect DRAGON_BREATH -> aWCU
    surge.util.ParticleEffect END_ROD -> ujMv
    surge.util.ParticleEffect DAMAGE_INDICATOR -> kuar
    surge.util.ParticleEffect SWEEP_ATTACK -> pbnU
    java.util.Map NAME_MAP -> dqNC
    java.util.Map ID_MAP -> pbnV
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> JTBN
    java.util.List properties -> nBuF
    surge.util.ParticleEffect[] ENUM$VALUES -> Gtjw
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> UJGJ
    511:511:boolean hasProperty(surge.util.ParticleEffect$ParticleProperty) -> mXJp
    521:525:boolean isSupported() -> isSupported
    537:545:surge.util.ParticleEffect fromName(java.lang.String) -> GapC
    557:565:surge.util.ParticleEffect fromId(int) -> GapC
    577:578:boolean isWater(org.bukkit.Location) -> qAsQ
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> mXJp
    615:615:boolean isDataCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleData) -> mXJp
    629:629:boolean isColorCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor) -> mXJp
    665:681:void display(float,int,org.bukkit.Location,double) -> mXJp
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> mXJp
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> mXJp
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> mXJp
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> mXJp
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> mXJp
    899:912:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> mXJp
    934:947:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> mXJp
    968:969:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> mXJp
    1004:1020:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> mXJp
    1055:1068:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> mXJp
    1102:1103:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> mXJp
    1130:1143:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> mXJp
    1169:1182:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> mXJp
    1207:1208:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> mXJp
    1:1:surge.util.ParticleEffect[] values() -> values
    1:1:surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
surge.util.ParticleEffect$BlockData -> OGmN$mXJp:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$ItemData -> OGmN$ksfs:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$NoteColor -> OGmN$yJLL:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> rVgx
    1594:1594:float getValueY() -> qCDb
    1605:1605:float getValueZ() -> cAju
surge.util.ParticleEffect$OrdinaryColor -> OGmN$SnBs:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> rVgx
    1526:1526:float getValueY() -> qCDb
    1537:1537:float getValueZ() -> cAju
surge.util.ParticleEffect$ParticleColor -> OGmN$qdWJ:
    1383:1383:void <init>() -> <init>
    float getValueX() -> rVgx
    float getValueY() -> qCDb
    float getValueZ() -> cAju
surge.util.ParticleEffect$ParticleColorException -> OGmN$JRFt:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticleData -> OGmN$halY:
    org.bukkit.Material material -> QiRp
    byte data -> SVLH
    int[] packetData -> Ajib
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> PJvK
    1309:1309:java.lang.String getPacketDataString() -> vlGM
surge.util.ParticleEffect$ParticleDataException -> OGmN$ssMm:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticlePacket -> OGmN$yIkI:
    int version -> version
    java.lang.Class enumParticle -> MnLd
    java.lang.reflect.Constructor packetConstructor -> Gtjy
    java.lang.reflect.Method getHandle -> TGlR
    java.lang.reflect.Field playerConnection -> QGWF
    java.lang.reflect.Method sendPacket -> veDG
    boolean initialized -> initialized
    surge.util.ParticleEffect effect -> Yppe
    float offsetX -> cKig
    float offsetY -> BByo
    float offsetZ -> UvFi
    float speed -> rrJE
    int amount -> AYjA
    boolean longDistance -> ySxh
    surge.util.ParticleEffect$ParticleData data -> txOO
    java.lang.Object packet -> jiot
    1745:1764:void <init>(surge.util.ParticleEffect,float,float,float,float,int,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> gUxV
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> mXJp
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> ksfs
    2004:2018:void sendTo(org.bukkit.Location,double) -> ksfs
surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> OGmN$yIkI$mXJp:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> OGmN$yIkI$ksfs:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> OGmN$yIkI$yJLL:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticleProperty -> OGmN$CVAs:
    surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> XnNw
    surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> SDlK
    surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> ecRj
    surge.util.ParticleEffect$ParticleProperty COLORABLE -> XLKj
    surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> uXnS
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
surge.util.ParticleEffect$ParticleVersionException -> OGmN$qAsQ:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
surge.util.Paste -> Mcik:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> vsgc
surge.util.Persist -> nlYH:
surge.util.PluginUtil -> nBIE:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> SnBs
    81:85:void enableAll() -> ejUT
    95:99:void disable(org.bukkit.plugin.Plugin) -> qdWJ
    106:110:void disableAll() -> BlcL
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> JRFt
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> mXJp
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> erWK
    169:172:java.util.List getPluginNames(boolean) -> yIkA
    184:187:java.lang.String getPluginVersion(java.lang.String) -> MIoJ
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> halY
    237:316:java.util.List findByCommand(java.lang.String) -> VvmI
    337:338:void load(org.bukkit.plugin.Plugin) -> ssMm
    342:364:java.lang.String getPluginFileName(java.lang.String) -> VfLY
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> mXJp
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> yIkI
    480:484:void reloadAll() -> hjnK
    496:622:void unload(org.bukkit.plugin.Plugin) -> CVAs
surge.util.PoolCount -> fuej:
surge.util.PoolDescriber -> WhyT:
surge.util.PoolNanoThrottle -> IqSO:
surge.util.PositionalSelector -> vbqV:
    org.cyberpwn.glang.GSet allowedChunks -> JeGI
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> UcVo
    39:40:void addChunk(org.bukkit.Chunk) -> gUxV
    44:44:org.cyberpwn.glang.GSet getAllowedChunks() -> ccoN
surge.util.Protocol -> YpAW:
    surge.util.Protocol LATEST -> QOej
    surge.util.Protocol R1_12_2 -> htkV
    surge.util.Protocol R1_12_2_PRE -> IrcC
    surge.util.Protocol R1_12_1 -> QPGS
    surge.util.Protocol R1_12 -> pQoG
    surge.util.Protocol R1_11_2 -> KggX
    surge.util.Protocol R1_11_1 -> cCYX
    surge.util.Protocol R1_11 -> PCrV
    surge.util.Protocol R1_10_2 -> RBHk
    surge.util.Protocol R1_10_1 -> htkJ
    surge.util.Protocol R1_10 -> THOU
    surge.util.Protocol R1_9_4 -> ptRX
    surge.util.Protocol R1_9_3 -> NqQh
    surge.util.Protocol R1_9_2 -> qCrv
    surge.util.Protocol R1_9_1 -> jHQE
    surge.util.Protocol R1_9 -> rFuq
    surge.util.Protocol R1_8_9 -> TXqy
    surge.util.Protocol R1_8_8 -> tEMU
    surge.util.Protocol R1_8_7 -> DbvD
    surge.util.Protocol R1_8_6 -> PoJS
    surge.util.Protocol R1_8_5 -> tDku
    surge.util.Protocol R1_8_4 -> YiCX
    surge.util.Protocol R1_8_3 -> RuPU
    surge.util.Protocol R1_8_2 -> fvyH
    surge.util.Protocol R1_8_1 -> iUnB
    surge.util.Protocol R1_8 -> oNnQ
    surge.util.Protocol R1_7_10 -> pIaH
    surge.util.Protocol R1_7_9 -> fwYM
    surge.util.Protocol R1_7_8 -> gFwQ
    surge.util.Protocol R1_7_7 -> vTDT
    surge.util.Protocol R1_7_6 -> XvaS
    surge.util.Protocol R1_7_5 -> fLdr
    surge.util.Protocol R1_7_4 -> WIJk
    surge.util.Protocol R1_7_3 -> qMEQ
    surge.util.Protocol R1_7_2 -> tfne
    surge.util.Protocol R1_7_1 -> vmUU
    surge.util.Protocol B1_6_4 -> ObtE
    surge.util.Protocol B1_6_3 -> OcTa
    surge.util.Protocol B1_6_2 -> RRkL
    surge.util.Protocol B1_6_1 -> WHgw
    surge.util.Protocol B1_5_2 -> YiAr
    surge.util.Protocol B1_5_1 -> uYPR
    surge.util.Protocol B1_5 -> SENR
    surge.util.Protocol B1_4_7 -> RtoB
    surge.util.Protocol B1_4_6 -> fwXM
    surge.util.Protocol B1_4_5 -> RBKY
    surge.util.Protocol B1_4_4 -> sRmC
    surge.util.Protocol B1_4_2 -> UujR
    surge.util.Protocol B1_3_2 -> oyeR
    surge.util.Protocol B1_3_1 -> xjlk
    surge.util.Protocol B1_2_5 -> ECxE
    surge.util.Protocol B1_2_4 -> kdgj
    surge.util.Protocol EARLIEST -> Udhr
    surge.util.Protocol UNKNOWN -> jbEP
    int version -> version
    java.lang.String packageVersion -> aMxe
    java.lang.String versionName -> iDnX
    boolean netty -> lNYE
    surge.util.Protocol[] ENUM$VALUES -> XmrS
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> erfT
    118:118:java.lang.String getPackageVersion() -> ETIQ
    124:124:java.lang.String toString() -> toString
    129:137:surge.util.Protocol getSupportedNMSVersion() -> Aqoe
    142:150:surge.util.Protocol getProtocolVersion() -> qKUH
    155:155:surge.util.ProtocolRange to(surge.util.Protocol) -> ksfs
    160:160:boolean isServerVersion() -> hjls
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> rhKA
    175:175:boolean isActualVersion() -> rgjC
    180:185:int getVersion() -> getVersion
    190:190:int getMetaVersion() -> IWcn
    1:1:surge.util.Protocol[] values() -> values
    1:1:surge.util.Protocol valueOf(java.lang.String) -> valueOf
surge.util.ProtocolRange -> bFtu:
    surge.util.Protocol from -> lNXF
    surge.util.Protocol to -> XvbN
    8:12:void <init>(surge.util.Protocol,surge.util.Protocol) -> <init>
    16:16:surge.util.Protocol getFrom() -> BdRR
    21:21:surge.util.Protocol getTo() -> PlyU
    26:26:boolean contains(surge.util.Protocol) -> yJLL
    32:32:java.lang.String toString() -> toString
surge.util.Range -> oDkQ:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> HnTK
    70:70:int randomNextInt() -> cKAG
    80:80:long randomNextLong() -> YESR
    92:92:boolean isWithin(double) -> WNxt
    104:104:boolean isWithin(int) -> vsgc
    116:116:boolean isWithin(long) -> SBla
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> jhSC
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> tTQG
surge.util.RawEvent -> cBHm:
surge.util.RayTrace -> vcRa:
    org.bukkit.Location start -> YOQh
    org.bukkit.util.Vector direction -> jYRw
    java.lang.Double maxDistance -> TadY
    java.lang.Double distanceCovered -> AtBh
    java.lang.Double step -> bkNM
    java.lang.Boolean stop -> sBJm
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> YEST
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> CVAs
    89:89:org.bukkit.Location getStart() -> fSiD
    94:95:void setStart(org.bukkit.Location) -> yIkA
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> IiHr
    114:115:void setMaxDistance(java.lang.Double) -> yJLL
    119:119:java.lang.Double getDistanceCovered() -> priD
    124:125:void setDistanceCovered(java.lang.Double) -> SnBs
    129:129:java.lang.Double getStep() -> Cwwo
    134:135:void setStep(java.lang.Double) -> qdWJ
surge.util.ReflectionUtils -> xyyN:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> mXJp
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> mXJp
    156:156:java.lang.Object instantiateObject(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> mXJp
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> mXJp
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> mXJp
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> mXJp
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> mXJp
    359:359:java.lang.reflect.Field getField(java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> mXJp
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> mXJp
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> mXJp
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> mXJp
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> mXJp
    508:509:void setValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> mXJp
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> mXJp
surge.util.ReflectionUtils$DataType -> xyyN$mXJp:
    surge.util.ReflectionUtils$DataType BYTE -> SwsO
    surge.util.ReflectionUtils$DataType SHORT -> GuQn
    surge.util.ReflectionUtils$DataType INTEGER -> MnQx
    surge.util.ReflectionUtils$DataType LONG -> Rtox
    surge.util.ReflectionUtils$DataType CHARACTER -> IjWE
    surge.util.ReflectionUtils$DataType FLOAT -> EMIO
    surge.util.ReflectionUtils$DataType DOUBLE -> xHhp
    surge.util.ReflectionUtils$DataType BOOLEAN -> TGrV
    java.util.Map CLASS_MAP -> mkMQ
    java.lang.Class primitive -> ELgs
    java.lang.Class reference -> NqUc
    surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> UJtq
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> jpwO
    704:704:java.lang.Class getReference() -> NVVB
    716:716:surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> ksfs
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> yJLL
    741:742:java.lang.Class getReference(java.lang.Class) -> SnBs
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> mXJp
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> ksfs
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> ksfs
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> yJLL
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> mXJp
    1:1:surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
surge.util.ReflectionUtils$PackageType -> xyyN$ksfs:
    surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> BLQP
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> lghq
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> wVfh
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> lxjf
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> fewj
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> hcpe
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> eIfQ
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> kKXI
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> WsbN
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> eIfP
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> vJvT
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> AYoo
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> YFcV
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> fUYp
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> XecY
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> kdho
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> Lsbq
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> DJIU
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> ahNe
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> RttC
    java.lang.String path -> path
    surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> BUBw
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
surge.util.Refreshable -> rNTr:
    void refresh() -> refresh
surge.util.SQLOperation -> IydG:
    surge.util.SQLOperation LOAD -> lglV
    surge.util.SQLOperation SAVE -> JJyN
    surge.util.SQLOperation[] ENUM$VALUES -> Ypvq
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.SQLOperation[] values() -> values
    1:1:surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
surge.util.ServerState -> tnMY:
    surge.util.ServerState START -> eQwA
    surge.util.ServerState ENABLE -> BwFW
    surge.util.ServerState DISABLE -> KEkk
    surge.util.ServerState STOP -> iodi
    surge.util.ServerState RUNNING -> MnUs
    surge.util.ServerState[] ENUM$VALUES -> RdRE
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.ServerState[] values() -> values
    1:1:surge.util.ServerState valueOf(java.lang.String) -> valueOf
surge.util.Shape -> myxn:
    org.bukkit.Location location -> WjNN
    org.bukkit.util.Vector offset -> OcXe
    org.bukkit.util.Vector size -> JCGt
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> qArm
    90:94:org.bukkit.Location randomLocation() -> klIi
    104:104:org.bukkit.Location randomSurface() -> EunR
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> HLTG
    129:129:org.bukkit.util.Vector getSize() -> dxVy
surge.util.SnowLevel -> hjil:
    byte level -> klxp
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> woMD
    51:52:void setLevel(byte) -> yJLL
surge.util.T -> BclT:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> mXJp
    32:35:void stop() -> stop
surge.util.TXT -> VvxM:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:org.cyberpwn.glang.GList wrap(java.lang.String,int) -> JRFt
    67:67:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> mXJp
    85:85:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> mXJp
    99:99:java.lang.String line(surge.util.C,int) -> mXJp
    113:113:java.lang.String underline(surge.util.C,int) -> ksfs
    135:140:java.lang.String getLine(surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> mXJp
surge.util.Tag -> qdcE:
    java.lang.String value() -> value
surge.util.Timer -> DrcY:
    long tns -> GtsO
    long cns -> vBdr
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> TGFR
surge.util.VectorMath -> jqQA:
    int[] $SWITCH_TABLE$surge$util$Axis -> afrc
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> HESB
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(surge.util.Axis,org.bukkit.util.Vector,double) -> mXJp
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> mXJp
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> ksfs
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> yJLL
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> mXJp
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> ksfs
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> ksfs
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> yJLL
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> SnBs
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> qdWJ
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> JRFt
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> halY
    111:111:double round(double,int) -> qdWJ
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> mXJp
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> mXJp
    150:235:org.cyberpwn.glang.GList split(org.bukkit.block.BlockFace) -> mXJp
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> SnBs
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> qdWJ
    268:268:org.bukkit.util.Vector toVector(float,float) -> mXJp
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> mXJp
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> mXJp
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> ssMm
    337:340:double getSpeed(org.bukkit.util.Vector) -> yIkI
    354:361:org.cyberpwn.glang.GList shift(org.bukkit.util.Vector,org.cyberpwn.glang.GList) -> mXJp
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> CVAs
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> mXJp
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> ksfs
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> yJLL
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> SnBs
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> qAsQ
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> pirH
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> eiwi
surge.util.VectorMath$1 -> jqQA$1:
    org.bukkit.util.Vector val$vector -> stqH
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> gUxV
    1:1:java.lang.Object onAdapt(java.lang.Object) -> ksfs
surge.util.W -> tLId:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> SnBs
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> mXJp
    75:86:org.bukkit.entity.Entity getEntity(int) -> erWK
    101:114:int count(org.bukkit.entity.Player,surge.util.MaterialBlock) -> mXJp
    131:131:boolean has(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> mXJp
    143:143:int getChunkX(org.bukkit.block.Block) -> qdWJ
    155:155:int getChunkY(org.bukkit.block.Block) -> JRFt
    168:169:void dropXp(org.bukkit.Location,int) -> ksfs
    180:180:int getChunkZ(org.bukkit.block.Block) -> halY
    196:203:void take(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> ksfs
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> mXJp
    232:239:org.cyberpwn.glang.GList news(org.bukkit.Location) -> Fomb
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> mXJp
    276:276:org.cyberpwn.glang.GList getBlocks(org.bukkit.Chunk) -> yIkA
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> JRFt
    300:300:org.bukkit.World toSync(org.bukkit.World) -> halY
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> ssMm
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> Ralc
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> qArm
    352:419:surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> BIor
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> mXJp
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> mXJp
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> mXJp
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> mXJp
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> mXJp
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> mXJp
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> mXJp
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> mXJp
    580:587:org.cyberpwn.glang.GList chunkFaces(org.bukkit.Chunk) -> Fomb
    599:608:org.cyberpwn.glang.GList blockFaces(org.bukkit.block.Block) -> yIkI
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> SnAm
    648:660:org.cyberpwn.glang.GList chunkRadius(org.bukkit.Chunk,int) -> yJLL
    674:686:org.cyberpwn.glang.GList blockRadius(org.bukkit.block.Block,int) -> mXJp
    708:740:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> mXJp
    758:765:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> mXJp
    779:779:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> mXJp
surge.util.W$1 -> tLId$1:
    java.lang.Double val$doff -> Wara
    org.bukkit.entity.Entity val$e -> Vglb
    org.bukkit.entity.Entity[] val$result -> SfhJ
    1:721:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    726:737:void onTrace(org.bukkit.Location) -> CVAs
surge.util.Worlds -> rxfr:
    12:12:void <init>() -> <init>
    21:21:org.cyberpwn.glang.GList getWorlds() -> PunF
    33:33:boolean hasWorld(java.lang.String) -> SvTc
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
surge.util.package-info -> dUlA:

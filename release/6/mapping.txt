com.volmit.react.React -> com.volmit.react.Lorem:
    void <init>() -> <init>
    void onControllerRegistry() -> Lorem
    void onStart(surge.util.Protocol) -> Lorem
    void onStop() -> ipsum
    void onPostInit() -> dolor
    void onPreInit() -> sit
surge.PluginAmp -> com.volmit.react.ipsum:
    surge.control.AmpedPlugin plugin -> Lorem
    boolean connected -> connected
    int masterTask -> ipsum
    void <init>(surge.control.AmpedPlugin) -> <init>
    surge.control.AmpedPlugin getPluginInstance() -> amet
    boolean isConnected() -> isConnected
    void connect() -> connect
    void masterTick() -> consectetur
    void disconnect() -> disconnect
    int startTask(int,java.lang.Runnable) -> Lorem
    int startRepeatingTask(int,int,java.lang.Runnable) -> Lorem
    void stopTask(int) -> Lorem
    void access$000(surge.PluginAmp) -> Lorem
surge.PluginAmp$1 -> com.volmit.react.dolor:
    surge.PluginAmp this$0 -> dolor
    void <init>(surge.PluginAmp) -> <init>
    void run() -> run
surge.PluginAmp$2 -> com.volmit.react.sit:
    surge.PluginAmp this$0 -> dolor
    void <init>(surge.PluginAmp) -> <init>
    void run() -> run
surge.ShittyController -> com.volmit.react.amet:
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
surge.Surge -> com.volmit.react.consectetur:
    surge.PluginAmp amp -> sit
    surge.collection.GList tickComponents -> amet
    surge.sched.TaskManager taskmgr -> consectetur
    surge.hotload.HotloadManager hotloadmgr -> adipiscing
    java.lang.Thread mainThread -> elit
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.io.File getPluginJarFile() -> adipiscing
    void startup() -> startup
    java.lang.Thread getServerThread() -> elit
    surge.collection.GList getTickComponents() -> Sed
    void registerTicked(surge.sched.IMasterTickComponent) -> Lorem
    void unregisterTicked(surge.sched.IMasterTickComponent) -> ipsum
    surge.PluginAmp createAmp(surge.control.AmpedPlugin) -> Lorem
    boolean isMainThread() -> isMainThread
    void stopAmp() -> vel
    boolean hasAmp() -> nibh
    surge.PluginAmp getAmp() -> quis
    surge.sched.TaskManager getTaskManager() -> auctor
    surge.hotload.HotloadManager getHotloadManager() -> rhoncus
surge.TestController -> com.volmit.react.adipiscing:
    surge.server.SuperSampler ss -> Sed
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
surge.TestPlugin -> com.volmit.react.elit:
    surge.TestController testController -> vel
    void <init>() -> <init>
    void onStart(surge.util.Protocol) -> Lorem
    void onStop() -> ipsum
    void onPreInit() -> sit
    void onPostInit() -> dolor
    void onControllerRegistry() -> Lorem
surge.cluster.Cluster -> com.volmit.react.Sed:
    surge.cluster.ClusterType type -> nibh
    java.lang.Object t -> quis
    void <init>(surge.cluster.ClusterType,java.lang.Object) -> <init>
    surge.cluster.ClusterType getType() -> eu
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
surge.cluster.ClusterBoolean -> com.volmit.react.vel:
    void <init>(java.lang.Boolean) -> <init>
surge.cluster.ClusterDouble -> com.volmit.react.nibh:
    void <init>(java.lang.Double) -> <init>
surge.cluster.ClusterInt -> com.volmit.react.quis:
    void <init>(java.lang.Integer) -> <init>
surge.cluster.ClusterLong -> com.volmit.react.auctor:
    void <init>(java.lang.Long) -> <init>
surge.cluster.ClusterString -> com.volmit.react.rhoncus:
    void <init>(java.lang.String) -> <init>
surge.cluster.ClusterStringList -> com.volmit.react.eu:
    void <init>(java.util.List) -> <init>
surge.cluster.ClusterType -> com.volmit.react.nec:
    surge.cluster.ClusterType INT -> auctor
    surge.cluster.ClusterType BOOLEAN -> rhoncus
    surge.cluster.ClusterType STRING -> eu
    surge.cluster.ClusterType STRING_LIST -> nec
    surge.cluster.ClusterType DOUBLE -> est
    surge.cluster.ClusterType LONG -> Aliquam
    surge.cluster.ClusterType[] $VALUES -> posuere
    surge.cluster.ClusterType[] values() -> values
    surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
surge.cluster.DataCluster -> com.volmit.react.est:
    surge.collection.GMap clusters -> diam
    void <init>() -> <init>
    surge.collection.GList keys() -> nec
    void fromJson(surge.json.JSONObject) -> Lorem
    surge.json.JSONObject toJson() -> est
    org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> Aliquam
    void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> Lorem
    boolean contains(java.lang.String) -> contains
    surge.cluster.ClusterType getType(java.lang.String) -> Lorem
    int getInt(java.lang.String) -> getInt
    java.lang.Object get(java.lang.String) -> get
    long getLong(java.lang.String) -> getLong
    java.lang.String getString(java.lang.String) -> getString
    double getDouble(java.lang.String) -> getDouble
    boolean getBoolean(java.lang.String) -> getBoolean
    java.util.List getStringList(java.lang.String) -> getStringList
    void trySet(java.lang.String,java.lang.Object) -> Lorem
    void set(java.lang.String,int) -> Lorem
    void set(java.lang.String,boolean) -> Lorem
    void set(java.lang.String,double) -> Lorem
    void set(java.lang.String,long) -> Lorem
    void set(java.lang.String,java.lang.String) -> set
    void set(java.lang.String,java.util.List) -> Lorem
surge.cluster.ICluster -> com.volmit.react.Aliquam:
    surge.cluster.ClusterType getType() -> eu
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
surge.collection.GBiset -> com.volmit.react.posuere:
    java.lang.Object a -> erat
    java.lang.Object b -> at
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getA() -> posuere
    void setA(java.lang.Object) -> Lorem
    java.lang.Object getB() -> diam
    void setB(java.lang.Object) -> ipsum
surge.collection.GList -> com.volmit.react.diam:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.lang.Object[]) -> <init>
    void <init>(java.util.List) -> <init>
    java.lang.Object mostCommon() -> erat
    void remove(surge.collection.GList) -> Lorem
    surge.collection.GList shuffle() -> at
    surge.collection.GList split() -> laoreet
    boolean hasIndex(int) -> ipsum
    java.lang.Object pickRandom() -> leo
    void <init>(java.util.Set) -> <init>
    void <init>(java.util.Collection) -> <init>
    void <init>(surge.collection.GList) -> <init>
    surge.collection.GList stringList() -> congue
    surge.collection.GList removeDuplicates() -> Class
    boolean hasDuplicates() -> aptent
    void sort() -> sort
    void push(java.lang.Object,int) -> Lorem
    void addFirst(java.lang.Object) -> addFirst
    void add(java.lang.Object[]) -> add
    surge.collection.GList qadd(java.lang.Object) -> dolor
    void add(java.util.List) -> Lorem
    java.lang.String toString(java.lang.String) -> toString
    surge.collection.GList reverse() -> taciti
    java.lang.String toString() -> toString
    surge.collection.GList copy() -> sociosqu
    surge.collection.GList qdel(java.lang.Object) -> sit
    java.lang.Object pop() -> pop
surge.collection.GList$1 -> com.volmit.react.erat:
    surge.collection.GList this$0 -> laoreet
    void <init>(surge.collection.GList) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
surge.collection.GMap -> com.volmit.react.at:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    surge.collection.GMap copy() -> ad
    java.lang.Object findKey(java.lang.Object) -> amet
    surge.collection.GMap qput(java.lang.Object,java.lang.Object) -> Lorem
    surge.collection.GMap flip() -> litora
    java.lang.String toString() -> toString
    surge.collection.GMap append(surge.collection.GMap) -> Lorem
    surge.collection.GList k() -> torquent
    surge.collection.GList v() -> per
    void putNVD(java.lang.Object,java.lang.Object) -> ipsum
    surge.collection.GList get(surge.collection.GList) -> ipsum
    surge.collection.GMap removeDuplicateKeys() -> conubia
    surge.collection.GMap removeDuplicateValues() -> nostra
    void put(surge.collection.GList,surge.collection.GList) -> Lorem
    void put(surge.collection.GMap) -> ipsum
surge.collection.GQuadraset -> com.volmit.react.laoreet:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> erat
    java.lang.Object b -> at
    java.lang.Object c -> leo
    java.lang.Object d -> congue
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getA() -> posuere
    void setA(java.lang.Object) -> Lorem
    java.lang.Object getB() -> diam
    void setB(java.lang.Object) -> ipsum
    java.lang.Object getC() -> inceptos
    void setC(java.lang.Object) -> consectetur
    java.lang.Object getD() -> himenaeos
    void setD(java.lang.Object) -> adipiscing
surge.collection.GSound -> com.volmit.react.leo:
    java.lang.String sound -> Class
    org.bukkit.Sound iSound -> aptent
    java.lang.Float volume -> taciti
    java.lang.Float pitch -> sociosqu
    void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    void <init>(org.bukkit.Sound) -> <init>
    void play(org.bukkit.entity.Player) -> Lorem
    void play(org.bukkit.Location) -> Lorem
    void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> Lorem
    java.lang.String getSound() -> Aenean
    void setSound(java.lang.String) -> ipsum
    org.bukkit.Sound getiSound() -> quam
    void setiSound(org.bukkit.Sound) -> Lorem
    java.lang.Float getVolume() -> vestibulum
    void setVolume(java.lang.Float) -> Lorem
    java.lang.Float getPitch() -> lorem
    void setPitch(java.lang.Float) -> ipsum
surge.collection.GTriset -> com.volmit.react.congue:
    java.lang.Object a -> erat
    java.lang.Object b -> at
    java.lang.Object c -> leo
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getA() -> posuere
    void setA(java.lang.Object) -> Lorem
    java.lang.Object getB() -> diam
    void setB(java.lang.Object) -> ipsum
    java.lang.Object getC() -> inceptos
    void setC(java.lang.Object) -> consectetur
surge.control.AmpedPlugin -> com.volmit.react.Class:
    surge.collection.GList controllers -> ad
    surge.pool.ParallelPoolManager pp -> litora
    void <init>() -> <init>
    void onLoad() -> onLoad
    void onEnable() -> onEnable
    void onDisable() -> onDisable
    surge.collection.GList getControllers() -> scelerisque
    void registerController(surge.control.IController) -> Lorem
    void onTick() -> sollicitudin
    java.lang.String getTickName() -> lacus
    surge.pool.ParallelPoolManager getThreadPool() -> Vestibulum
    void onControllerRegistry() -> Lorem
    void onStart(surge.util.Protocol) -> Lorem
    void onStop() -> ipsum
    void onPostInit() -> dolor
    void onPreInit() -> sit
surge.control.Controller -> com.volmit.react.aptent:
    void <init>() -> <init>
surge.control.IController -> com.volmit.react.taciti:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
surge.control.SurgePlugin -> com.volmit.react.sociosqu:
    void onStart(surge.util.Protocol) -> Lorem
    void onStop() -> ipsum
    void onPostInit() -> dolor
    void onPreInit() -> sit
    void onControllerRegistry() -> Lorem
    void registerController(surge.control.IController) -> Lorem
    surge.collection.GList getControllers() -> scelerisque
    surge.pool.ParallelPoolManager getThreadPool() -> Vestibulum
surge.hotload.HotloadManager -> com.volmit.react.ad:
    surge.collection.GMap filemods -> torquent
    surge.collection.GMap filesizes -> per
    surge.collection.GMap fileacts -> conubia
    void <init>() -> <init>
    void track(java.io.File,java.lang.Runnable) -> Lorem
    void untrack(java.io.File) -> Lorem
    void untrackall() -> turpis
    void onTick() -> sollicitudin
    java.lang.String getTickName() -> lacus
surge.json.HTTP -> com.volmit.react.litora:
    java.lang.String CRLF -> nostra
    void <init>() -> <init>
    surge.json.JSONObject toJSONObject(java.lang.String) -> dolor
    java.lang.String toString(surge.json.JSONObject) -> ipsum
surge.json.HTTPTokener -> com.volmit.react.torquent:
    void <init>(java.lang.String) -> <init>
    java.lang.String nextToken() -> nextToken
surge.json.JSONArray -> com.volmit.react.per:
    java.util.ArrayList myArrayList -> inceptos
    void <init>() -> <init>
    void <init>(surge.json.JSONTokener) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.util.Collection) -> <init>
    void <init>(java.lang.Object) -> <init>
    java.util.Iterator iterator() -> iterator
    java.lang.Object get(int) -> get
    boolean getBoolean(int) -> getBoolean
    double getDouble(int) -> getDouble
    java.lang.Enum getEnum(java.lang.Class,int) -> Lorem
    java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    java.math.BigInteger getBigInteger(int) -> dolor
    int getInt(int) -> getInt
    surge.json.JSONArray getJSONArray(int) -> sit
    surge.json.JSONObject getJSONObject(int) -> amet
    long getLong(int) -> getLong
    java.lang.String getString(int) -> getString
    boolean isNull(int) -> isNull
    java.lang.String join(java.lang.String) -> sit
    int length() -> length
    java.lang.Object opt(int) -> consectetur
    boolean optBoolean(int) -> adipiscing
    boolean optBoolean(int,boolean) -> Lorem
    double optDouble(int) -> elit
    double optDouble(int,double) -> Lorem
    int optInt(int) -> Sed
    int optInt(int,int) -> Lorem
    java.lang.Enum optEnum(java.lang.Class,int) -> ipsum
    java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> Lorem
    java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> Lorem
    java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> Lorem
    surge.json.JSONArray optJSONArray(int) -> vel
    surge.json.JSONObject optJSONObject(int) -> nibh
    long optLong(int) -> quis
    long optLong(int,long) -> Lorem
    java.lang.String optString(int) -> auctor
    java.lang.String optString(int,java.lang.String) -> Lorem
    surge.json.JSONArray put(boolean) -> Lorem
    surge.json.JSONArray put(java.util.Collection) -> Lorem
    surge.json.JSONArray put(double) -> Lorem
    surge.json.JSONArray put(int) -> rhoncus
    surge.json.JSONArray put(long) -> Lorem
    surge.json.JSONArray put(java.util.Map) -> Lorem
    surge.json.JSONArray put(java.lang.Object) -> elit
    surge.json.JSONArray put(int,boolean) -> ipsum
    surge.json.JSONArray put(int,java.util.Collection) -> Lorem
    surge.json.JSONArray put(int,double) -> ipsum
    surge.json.JSONArray put(int,int) -> ipsum
    surge.json.JSONArray put(int,long) -> ipsum
    surge.json.JSONArray put(int,java.util.Map) -> Lorem
    surge.json.JSONArray put(int,java.lang.Object) -> Lorem
    java.lang.Object remove(int) -> remove
    boolean similar(java.lang.Object) -> Sed
    surge.json.JSONObject toJSONObject(surge.json.JSONArray) -> Lorem
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    java.io.Writer write(java.io.Writer) -> Lorem
    java.io.Writer write(java.io.Writer,int,int) -> Lorem
surge.json.JSONException -> com.volmit.react.conubia:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> himenaeos
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    java.lang.Throwable getCause() -> getCause
surge.json.JSONML -> com.volmit.react.nostra:
    void <init>() -> <init>
    java.lang.Object parse(surge.json.XMLTokener,boolean,surge.json.JSONArray) -> Lorem
    surge.json.JSONArray toJSONArray(java.lang.String) -> amet
    surge.json.JSONArray toJSONArray(surge.json.XMLTokener) -> Lorem
    surge.json.JSONObject toJSONObject(surge.json.XMLTokener) -> ipsum
    surge.json.JSONObject toJSONObject(java.lang.String) -> dolor
    java.lang.String toString(surge.json.JSONArray) -> ipsum
    java.lang.String toString(surge.json.JSONObject) -> ipsum
surge.json.JSONObject -> com.volmit.react.inceptos:
    java.util.Map map -> map
    java.lang.Object NULL -> Aenean
    void <init>() -> <init>
    void <init>(surge.json.JSONObject,java.lang.String[]) -> <init>
    void <init>(surge.json.JSONTokener) -> <init>
    void <init>(java.util.Map) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,java.lang.String[]) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.util.Locale) -> <init>
    surge.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> ipsum
    surge.json.JSONObject append(java.lang.String,java.lang.Object) -> dolor
    java.lang.String doubleToString(double) -> ipsum
    java.lang.Object get(java.lang.String) -> get
    java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    boolean getBoolean(java.lang.String) -> getBoolean
    java.math.BigInteger getBigInteger(java.lang.String) -> consectetur
    java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    double getDouble(java.lang.String) -> getDouble
    int getInt(java.lang.String) -> getInt
    surge.json.JSONArray getJSONArray(java.lang.String) -> adipiscing
    surge.json.JSONObject getJSONObject(java.lang.String) -> elit
    long getLong(java.lang.String) -> getLong
    java.lang.String[] getNames(surge.json.JSONObject) -> dolor
    java.lang.String[] getNames(java.lang.Object) -> vel
    java.lang.String getString(java.lang.String) -> getString
    boolean has(java.lang.String) -> has
    surge.json.JSONObject increment(java.lang.String) -> Sed
    boolean isNull(java.lang.String) -> vel
    java.util.Iterator keys() -> keys
    java.util.Set keySet() -> keySet
    int length() -> length
    surge.json.JSONArray names() -> mattis
    java.lang.String numberToString(java.lang.Number) -> Lorem
    java.lang.Object opt(java.lang.String) -> nibh
    java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> Lorem
    java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> Lorem
    boolean optBoolean(java.lang.String) -> quis
    boolean optBoolean(java.lang.String,boolean) -> ipsum
    double optDouble(java.lang.String) -> auctor
    java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> Lorem
    java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> Lorem
    double optDouble(java.lang.String,double) -> ipsum
    int optInt(java.lang.String) -> rhoncus
    int optInt(java.lang.String,int) -> ipsum
    surge.json.JSONArray optJSONArray(java.lang.String) -> eu
    surge.json.JSONObject optJSONObject(java.lang.String) -> nec
    long optLong(java.lang.String) -> est
    long optLong(java.lang.String,long) -> ipsum
    java.lang.String optString(java.lang.String) -> Aliquam
    java.lang.String optString(java.lang.String,java.lang.String) -> Lorem
    void populateMap(java.lang.Object) -> nibh
    surge.json.JSONObject put(java.lang.String,boolean) -> dolor
    surge.json.JSONObject put(java.lang.String,java.util.Collection) -> Lorem
    surge.json.JSONObject put(java.lang.String,double) -> dolor
    surge.json.JSONObject put(java.lang.String,int) -> dolor
    surge.json.JSONObject put(java.lang.String,long) -> dolor
    surge.json.JSONObject put(java.lang.String,java.util.Map) -> Lorem
    surge.json.JSONObject put(java.lang.String,java.lang.Object) -> sit
    surge.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> amet
    surge.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> consectetur
    java.lang.String quote(java.lang.String) -> quote
    java.io.Writer quote(java.lang.String,java.io.Writer) -> Lorem
    java.lang.Object remove(java.lang.String) -> posuere
    boolean similar(java.lang.Object) -> Sed
    java.lang.Object stringToValue(java.lang.String) -> stringToValue
    void testValidity(java.lang.Object) -> quis
    surge.json.JSONArray toJSONArray(surge.json.JSONArray) -> dolor
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    java.lang.String valueToString(java.lang.Object) -> valueToString
    java.lang.Object wrap(java.lang.Object) -> wrap
    java.io.Writer write(java.io.Writer) -> Lorem
    java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> Lorem
    void indent(java.io.Writer,int) -> Lorem
    java.io.Writer write(java.io.Writer,int,int) -> Lorem
    void <clinit>() -> <clinit>
surge.json.JSONObject$1 -> com.volmit.react.himenaeos:
surge.json.JSONObject$Null -> com.volmit.react.Aenean:
    void <init>() -> <init>
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <init>(surge.json.JSONObject$1) -> <init>
surge.json.JSONString -> com.volmit.react.quam:
    java.lang.String toJSONString() -> toJSONString
surge.json.JSONStringer -> com.volmit.react.vestibulum:
    void <init>() -> <init>
    java.lang.String toString() -> toString
surge.json.JSONTokener -> com.volmit.react.lorem:
    long character -> quam
    boolean eof -> eof
    long index -> vestibulum
    long line -> lorem
    char previous -> scelerisque
    java.io.Reader reader -> reader
    boolean usePrevious -> sollicitudin
    void <init>(java.io.Reader) -> <init>
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.lang.String) -> <init>
    void back() -> mollis
    int dehexchar(char) -> Lorem
    boolean end() -> nisl
    boolean more() -> purus
    char next() -> next
    char next(char) -> ipsum
    java.lang.String next(int) -> eu
    char nextClean() -> malesuada
    java.lang.String nextString(char) -> dolor
    java.lang.String nextTo(char) -> sit
    java.lang.String nextTo(java.lang.String) -> diam
    java.lang.Object nextValue() -> dui
    char skipTo(char) -> amet
    surge.json.JSONException syntaxError(java.lang.String) -> erat
    java.lang.String toString() -> toString
surge.json.JSONWriter -> com.volmit.react.scelerisque:
    int maxdepth -> lacus
    boolean comma -> Vestibulum
    char mode -> turpis
    surge.json.JSONObject[] stack -> mattis
    int top -> top
    java.io.Writer writer -> writer
    void <init>(java.io.Writer) -> <init>
    surge.json.JSONWriter append(java.lang.String) -> at
    surge.json.JSONWriter array() -> facilisis
    surge.json.JSONWriter end(char,char) -> Lorem
    surge.json.JSONWriter endArray() -> suscipit
    surge.json.JSONWriter endObject() -> sapien
    surge.json.JSONWriter key(java.lang.String) -> laoreet
    surge.json.JSONWriter object() -> et
    void pop(char) -> consectetur
    void push(surge.json.JSONObject) -> sit
    surge.json.JSONWriter value(boolean) -> ipsum
    surge.json.JSONWriter value(double) -> dolor
    surge.json.JSONWriter value(long) -> ipsum
    surge.json.JSONWriter value(java.lang.Object) -> auctor
surge.json.XML -> com.volmit.react.sollicitudin:
    java.lang.Character AMP -> mollis
    java.lang.Character APOS -> nisl
    java.lang.Character BANG -> purus
    java.lang.Character EQ -> malesuada
    java.lang.Character GT -> dui
    java.lang.Character LT -> facilisis
    java.lang.Character QUEST -> suscipit
    java.lang.Character QUOT -> sapien
    java.lang.Character SLASH -> et
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.String escape(java.lang.String) -> escape
    void noSpace(java.lang.String) -> leo
    boolean parse(surge.json.XMLTokener,surge.json.JSONObject,java.lang.String) -> Lorem
    java.lang.Object stringToValue(java.lang.String) -> stringToValue
    surge.json.JSONObject toJSONObject(java.lang.String) -> dolor
    java.lang.String toString(java.lang.Object) -> toString
    java.lang.String toString(java.lang.Object,java.lang.String) -> toString
surge.json.XMLTokener -> com.volmit.react.lacus:
    java.util.HashMap entity -> Nam
    void <clinit>() -> <clinit>
    void <init>(java.lang.String) -> <init>
    java.lang.String nextCDATA() -> Nam
    java.lang.Object nextContent() -> enim
    java.lang.Object nextEntity(char) -> adipiscing
    java.lang.Object nextMeta() -> sed
    java.lang.Object nextToken() -> libero
    boolean skipPast(java.lang.String) -> congue
surge.math.ArrayUtils -> com.volmit.react.Vestibulum:
    void <init>() -> <init>
    void shiftRight(double[],double) -> Lorem
    void wrapRight(double[]) -> Lorem
    void fill(double[],double) -> fill
surge.math.Average -> com.volmit.react.turpis:
    double[] values -> enim
    double average -> sed
    boolean dirty -> libero
    void <init>(int) -> <init>
    void put(double) -> sit
    double getAverage() -> getAverage
    void calculateAverage() -> lobortis
surge.math.M -> com.volmit.react.mattis:
    void <init>() -> <init>
    double maxSafeRadius(org.bukkit.Location) -> ipsum
    double clip(double,double,double) -> Lorem
    double maxSafeRadius(org.bukkit.Location,double,double) -> Lorem
    boolean isLoaded(org.bukkit.Location,double) -> Lorem
    surge.collection.GList cradShift(org.bukkit.Location,double) -> ipsum
    int chunkShift(int) -> nec
    boolean isLoaded(org.bukkit.World,int,int) -> Lorem
    boolean isLoaded(org.bukkit.Location) -> dolor
    double dof(double,double) -> Lorem
    double tps(long,int) -> Lorem
    int ticksFromNS(long) -> dolor
    long ns() -> accumsan
    long ms() -> In
    double avg(surge.collection.GList) -> dolor
    void lim(surge.collection.GList,int) -> Lorem
    surge.collection.GList getChunks(org.bukkit.Chunk,int) -> Lorem
surge.math.Profiler -> com.volmit.react.mollis:
    long nanos -> lobortis
    long startNano -> accumsan
    long millis -> In
    long startMillis -> non
    double time -> felis
    boolean profiling -> mi
    void <init>() -> <init>
    void begin() -> begin
    void end() -> end
    void reset() -> reset
    java.lang.String getTime(int) -> est
    double getTicks() -> non
    double getSeconds() -> getSeconds
    double getMinutes() -> felis
    double getHours() -> id
    double getMilliseconds() -> mi
    long getNanoseconds() -> lacinia
    long getNanos() -> semper
    long getStartNano() -> sagittis
    long getMillis() -> getMillis
    long getStartMillis() -> euismod
    double getTime() -> justo
    boolean isProfiling() -> in
surge.nms.NMSClass -> com.volmit.react.nisl:
    boolean init -> lacinia
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> semper
    java.lang.Class IChatBaseComponent -> sagittis
    java.lang.Class ChatSerializer -> euismod
    java.lang.Class PacketPlayOutPlayerInfo -> justo
    java.lang.Class PlayerInfoData -> in
    java.lang.Class EnumPlayerInfoAction -> Curabitur
    java.lang.Class GameProfile -> porttitor
    java.lang.Class EnumGamemode -> velit
    java.lang.Class TileEntitySkull -> interdum
    java.lang.Class LoadingCache -> Nullam
    void <clinit>() -> <clinit>
    void <init>() -> <init>
surge.nms.NMSX -> com.volmit.react.purus:
    surge.nms.NMSX bountifulAPI -> mauris
    boolean useOldMethods -> vitae
    java.lang.String nmsver -> aliquet
    java.lang.Object eTimes -> Cras
    java.lang.Object eTitle -> pretium
    java.lang.Object eSubtitle -> faucibus
    void <init>() -> <init>
    java.lang.String getVersion() -> getVersion
    void setAi(org.bukkit.entity.LivingEntity,boolean) -> Lorem
    java.lang.Class getCBNMSClass(java.lang.String) -> Class
    java.lang.Class getCBClass(java.lang.String) -> aptent
    java.lang.Object serializeChat(java.lang.String) -> taciti
    java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> Lorem
    java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> Lorem
    java.lang.String getBukkitVersion() -> getBukkitVersion
    java.lang.String nmsPackage() -> Curabitur
    java.lang.String craftPackage() -> porttitor
    void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> Lorem
    void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> Lorem
    java.lang.Class getNMSClass(java.lang.String) -> sociosqu
    void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> Lorem
    void clearTitle(org.bukkit.entity.Player) -> ipsum
    void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> Lorem
    void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> Lorem
    void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> Lorem
    void sendActionBarToAllPlayers(java.lang.String) -> ad
    void sendActionBarToAllPlayers(java.lang.String,int) -> sit
    java.lang.String getEntityName(org.bukkit.entity.Entity) -> Lorem
    int ping(org.bukkit.entity.Player) -> dolor
    void <clinit>() -> <clinit>
surge.nms.NMSX$1 -> com.volmit.react.malesuada:
    org.bukkit.entity.Player val$player -> aliquam
    void <init>(org.bukkit.entity.Player) -> <init>
    void run() -> run
surge.nms.NMSX$2 -> com.volmit.react.dui:
    org.bukkit.entity.Player val$player -> aliquam
    java.lang.String val$message -> iaculis
    void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    void run() -> run
surge.nms.PacketUtil -> com.volmit.react.facilisis:
    void <init>() -> <init>
    surge.nms.PacketUtil$V getVersion() -> velit
    void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> Lorem
    void clearTitle(org.bukkit.entity.Player) -> ipsum
    void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> Lorem
surge.nms.PacketUtil$V -> com.volmit.react.suscipit:
    surge.nms.PacketUtil$V R17 -> eget
    surge.nms.PacketUtil$V R18 -> dictum
    surge.nms.PacketUtil$V R19 -> orci
    surge.nms.PacketUtil$V R111 -> eros
    surge.nms.PacketUtil$V R110 -> imperdiet
    surge.nms.PacketUtil$V R112 -> venenatis
    surge.nms.PacketUtil$V[] ENUM$VALUES -> ex
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    surge.nms.PacketUtil$V[] values() -> values
    surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
surge.nms.Title -> com.volmit.react.sapien:
    java.lang.String title -> title
    java.lang.String subTitle -> Etiam
    java.lang.String action -> action
    java.lang.Integer fadeIn -> a
    java.lang.Integer fadeOut -> tincidunt
    java.lang.Integer stayTime -> nulla
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    void send(org.bukkit.entity.Player) -> sit
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    java.lang.String getSubTitle() -> interdum
    void setSubTitle(java.lang.String) -> litora
    java.lang.String getAction() -> getAction
    void setAction(java.lang.String) -> setAction
    java.lang.Integer getFadeIn() -> Nullam
    void setFadeIn(java.lang.Integer) -> Lorem
    java.lang.Integer getFadeOut() -> mauris
    void setFadeOut(java.lang.Integer) -> ipsum
    java.lang.Integer getStayTime() -> vitae
    void setStayTime(java.lang.Integer) -> dolor
surge.nms.VersionBukkit -> com.volmit.react.et:
    surge.nms.VersionBukkit VU -> tellus
    surge.nms.VersionBukkit V7 -> Nulla
    surge.nms.VersionBukkit V8 -> ac
    surge.nms.VersionBukkit V9 -> ut
    surge.nms.VersionBukkit V11 -> tortor
    surge.nms.VersionBukkit V111 -> tristique
    surge.nms.VersionBukkit V112 -> bibendum
    surge.nms.VersionBukkit[] ENUM$VALUES -> commodo
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    boolean tc() -> aliquet
    boolean uc() -> Cras
    surge.nms.VersionBukkit get() -> pretium
    surge.nms.VersionBukkit[] values() -> values
    surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
surge.pool.A -> com.volmit.react.Nam:
    void <init>() -> <init>
surge.pool.A$1 -> com.volmit.react.enim:
    surge.pool.A this$0 -> convallis
    void <init>(surge.pool.A) -> <init>
    void run() -> run
surge.pool.Execution -> com.volmit.react.sed:
    void <init>() -> <init>
surge.pool.ParallelPoolManager -> com.volmit.react.libero:
    surge.pool.QueueMode mode -> pulvinar
    surge.collection.GList threads -> eleifend
    int next -> Mauris
    int threadCount -> massa
    java.util.Queue squeue -> vulputate
    java.lang.String key -> key
    surge.pool.ThreadInformation info -> Nunc
    void syncQueue(surge.pool.Execution) -> Lorem
    void tickSyncQueue() -> faucibus
    void <init>(java.lang.String,int,surge.pool.QueueMode) -> <init>
    void <init>(int,surge.pool.QueueMode) -> <init>
    long lock() -> aliquam
    void start() -> start
    void shutdown() -> shutdown
    void <init>(int) -> <init>
    void queue(surge.pool.Execution) -> ipsum
    int getSize() -> getSize
    int getQueueSize() -> iaculis
    surge.pool.ParallelThread[] getThreads() -> eget
    void updateThreadInformation() -> dictum
    surge.pool.ParallelThread nextThread() -> orci
    void createThreads(int) -> Aliquam
    surge.pool.QueueMode getMode() -> eros
    int getNext() -> imperdiet
    int getThreadCount() -> getThreadCount
    java.util.Queue getSqueue() -> venenatis
    java.lang.String getKey() -> getKey
    surge.pool.ThreadInformation getAverageInfo() -> ex
surge.pool.ParallelPoolManager$1 -> com.volmit.react.lobortis:
    int[] $SwitchMap$surge$pool$QueueMode -> fermentum
    void <clinit>() -> <clinit>
surge.pool.ParallelThread -> com.volmit.react.accumsan:
    java.util.Queue queue -> elementum
    surge.pool.ThreadInformation info -> Nunc
    void <init>(java.lang.String,int) -> <init>
    void run() -> run
    void conditionallySleep(double) -> amet
    void execute(surge.pool.Execution) -> dolor
    void execute() -> execute
    void queue(surge.pool.Execution) -> ipsum
    java.util.Queue getQueue() -> Etiam
    surge.pool.ThreadInformation getInfo() -> a
surge.pool.QueueMode -> com.volmit.react.In:
    surge.pool.QueueMode ROUND_ROBIN -> Fusce
    surge.pool.QueueMode SMALLEST -> ornare
    surge.pool.QueueMode[] $VALUES -> metus
    surge.pool.QueueMode[] values() -> values
    surge.pool.QueueMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
surge.pool.ThreadInformation -> com.volmit.react.non:
    double ticksPerSecond -> Suspendisse
    int queuedSize -> augue
    boolean processing -> pharetra
    double utilization -> ullamcorper
    surge.math.Average ticksPerSecondAverage -> Integer
    long tick -> vehicula
    int id -> id
    void <init>(int) -> <init>
    double getTicksPerSecond() -> tincidunt
    void setTicksPerSecond(double) -> consectetur
    int getQueuedSize() -> nulla
    void setQueuedSize(int) -> posuere
    boolean isProcessing() -> tellus
    void setProcessing(boolean) -> dolor
    double getUtilization() -> Nulla
    void setUtilization(double) -> adipiscing
    double getTicksPerSecondAverage() -> ac
    long getTick() -> getTick
    void setTick(long) -> setTick
    long getTickLag() -> ut
    int getId() -> getId
surge.sched.IBursterator -> com.volmit.react.felis:
    void burst(java.lang.Object) -> rhoncus
    void setTimeLock(double) -> elit
    double getEstimatedTimeUse() -> tortor
    int flush() -> tristique
    int flush(surge.math.Profiler) -> Lorem
    void queue(java.lang.Object) -> eu
    void queue(java.util.List) -> ipsum
    void queue(java.lang.Object[]) -> Lorem
surge.sched.ICancellable -> com.volmit.react.id:
    void cancel() -> cancel
surge.sched.IMasterTickComponent -> com.volmit.react.mi:
    void onTick() -> sollicitudin
    java.lang.String getTickName() -> lacus
surge.sched.ITask -> com.volmit.react.lacinia:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> bibendum
    java.lang.String getName() -> getName
    double getComputeTime() -> commodo
    double getTotalComputeTime() -> convallis
    double getActiveTime() -> pulvinar
    boolean hasCompleted() -> eleifend
surge.sched.TICK -> com.volmit.react.semper:
    long tick -> vehicula
    void <init>() -> <init>
    void <clinit>() -> <clinit>
surge.sched.Task -> com.volmit.react.sagittis:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> risus
    double computeTime -> blandit
    double totalComputeTime -> ante
    double activeTime -> dapibus
    boolean completed -> completed
    surge.math.Profiler profiler -> consequat
    surge.math.Profiler activeProfiler -> Duis
    int ticks -> ligula
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,int) -> <init>
    void setup(java.lang.String,boolean) -> sit
    void cancel() -> cancel
    int getId() -> getId
    boolean isRepeating() -> bibendum
    java.lang.String getName() -> getName
    double getComputeTime() -> commodo
    boolean hasCompleted() -> eleifend
    double getTotalComputeTime() -> convallis
    double getActiveTime() -> pulvinar
    surge.math.Profiler access$000(surge.sched.Task) -> Lorem
    boolean access$102(surge.sched.Task,boolean) -> Lorem
    surge.math.Profiler access$200(surge.sched.Task) -> ipsum
    double access$302(surge.sched.Task,double) -> Lorem
    double access$402(surge.sched.Task,double) -> ipsum
    double access$502(surge.sched.Task,double) -> dolor
    double access$300(surge.sched.Task) -> dolor
    int access$608(surge.sched.Task) -> sit
    double access$500(surge.sched.Task) -> amet
    double access$400(surge.sched.Task) -> consectetur
    int access$600(surge.sched.Task) -> adipiscing
surge.sched.Task$1 -> com.volmit.react.euismod:
    surge.sched.Task this$0 -> volutpat
    void <init>(surge.sched.Task) -> <init>
    void run() -> run
surge.sched.Task$2 -> com.volmit.react.justo:
    surge.sched.Task this$0 -> volutpat
    void <init>(surge.sched.Task) -> <init>
    void run() -> run
surge.sched.Task$3 -> com.volmit.react.in:
    int val$total -> tempor
    surge.sched.Task this$0 -> volutpat
    void <init>(surge.sched.Task,int) -> <init>
    void run() -> run
surge.sched.TaskManager -> com.volmit.react.Curabitur:
    surge.collection.GList tasks -> nunc
    surge.collection.GMap taskProfiles -> odio
    void <init>() -> <init>
    void onTick() -> sollicitudin
    void putFinishingTask(surge.sched.ITask) -> Lorem
    void putTask(surge.sched.ITask) -> ipsum
    java.lang.String getTickName() -> lacus
surge.sched.TaskProfile -> com.volmit.react.porttitor:
    double activeTime -> dapibus
    double computeTickTime -> Quisque
    double computeTime -> blandit
    void <init>() -> <init>
    double getActiveTime() -> pulvinar
    void setActiveTime(double) -> Sed
    double getComputeTickTime() -> Mauris
    void setComputeTickTime(double) -> vel
    double getComputeTime() -> commodo
    void setComputeTime(double) -> nibh
surge.server.MemoryMonitor -> com.volmit.react.velit:
    long memoryFree -> Praesent
    long memoryUsed -> arcu
    long memoryMax -> maximus
    long lastMemoryUsed -> ultricies
    long memoryUsedAfterGC -> feugiat
    long allocated -> molestie
    long collected -> Vivamus
    long collections -> Ut
    long sms -> ultrices
    long memoryAllocatedPerTick -> Donec
    long memoryCollectedPerTick -> neque
    long memoryFullyAllocatedPerTick -> egestas
    long mah -> primis
    long mahs -> luctus
    void <init>() -> <init>
    void onAllocationSet() -> massa
    void run() -> run
    long getMemoryFree() -> vulputate
    long getMemoryUsed() -> getMemoryUsed
    long getMemoryMax() -> Nunc
    long getLastMemoryUsed() -> fermentum
    long getMemoryUsedAfterGC() -> elementum
    long getAllocated() -> getAllocated
    long getCollected() -> Fusce
    long getCollections() -> ornare
    long getSms() -> metus
    long getMemoryAllocatedPerTick() -> Suspendisse
    long getMemoryCollectedPerTick() -> augue
    long getMemoryFullyAllocatedPerTick() -> pharetra
    long getMah() -> ullamcorper
    long getMahs() -> Integer
surge.server.SuperSampler -> com.volmit.react.interdum:
    surge.math.Average ticksPerSecondL -> cubilia
    surge.math.Average tickTimeL -> Curae
    surge.math.Average mahL -> Phasellus
    double ticksPerSecond -> Suspendisse
    double ticksPerSecondRaw -> dignissim
    double tickTime -> sodales
    double tickTimeRaw -> urna
    boolean running -> running
    double tickUtilizationRaw -> finibus
    double tickUtilization -> Pellentesque
    double leftoverTickTime -> magna
    long memoryUse -> fringilla
    long memoryAllocated -> tempus
    long memoryCollected -> sem
    long mahs -> luctus
    surge.server.TPSMonitor tpsMonitor -> efficitur
    surge.server.MemoryMonitor memoryMonitor -> condimentum
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void onTick() -> sollicitudin
    java.lang.String getTickName() -> lacus
    surge.math.Average getTicksPerSecondL() -> vehicula
    double getTicksPerSecond() -> tincidunt
    double getTicksPerSecondRaw() -> risus
    boolean isRunning() -> isRunning
    surge.server.TPSMonitor getTpsMonitor() -> blandit
    surge.math.Average getTickTimeL() -> ante
    double getTickTime() -> dapibus
    double getTickTimeRaw() -> consequat
    double getTickUtilizationRaw() -> Duis
    double getTickUtilization() -> ligula
    double getLeftoverTickTime() -> volutpat
    surge.server.MemoryMonitor getMemoryMonitor() -> tempor
    long getMemoryUse() -> nunc
    long getMemoryAllocated() -> odio
    long getMemoryCollected() -> Quisque
    surge.math.Average getMahL() -> Praesent
    long getMahs() -> Integer
    double access$002(surge.server.SuperSampler,double) -> Lorem
    double access$102(surge.server.SuperSampler,double) -> ipsum
    double access$000(surge.server.SuperSampler) -> Lorem
    surge.math.Average access$200(surge.server.SuperSampler) -> ipsum
    double access$100(surge.server.SuperSampler) -> dolor
    surge.math.Average access$300(surge.server.SuperSampler) -> sit
    double access$402(surge.server.SuperSampler,double) -> dolor
    double access$502(surge.server.SuperSampler,double) -> sit
    double access$602(surge.server.SuperSampler,double) -> amet
    double access$702(surge.server.SuperSampler,double) -> consectetur
    double access$500(surge.server.SuperSampler) -> amet
    double access$400(surge.server.SuperSampler) -> consectetur
    double access$802(surge.server.SuperSampler,double) -> adipiscing
    double access$700(surge.server.SuperSampler) -> adipiscing
    long access$902(surge.server.SuperSampler,long) -> Lorem
    long access$1002(surge.server.SuperSampler,long) -> ipsum
    long access$1102(surge.server.SuperSampler,long) -> dolor
    surge.math.Average access$1200(surge.server.SuperSampler) -> elit
    long access$1302(surge.server.SuperSampler,long) -> sit
surge.server.SuperSampler$1 -> com.volmit.react.Nullam:
    surge.server.SuperSampler this$0 -> potenti
    void <init>(surge.server.SuperSampler) -> <init>
    void onTicked() -> arcu
surge.server.SuperSampler$2 -> com.volmit.react.mauris:
    surge.server.SuperSampler this$0 -> potenti
    void <init>(surge.server.SuperSampler) -> <init>
    void onAllocationSet() -> massa
surge.server.TPSMonitor -> com.volmit.react.vitae:
    double tickTimeMS -> gravida
    double rawTicksPerSecond -> hac
    surge.math.Profiler tickProfiler -> habitasse
    surge.math.Profiler tickTimeProfiler -> platea
    boolean ticked -> dictumst
    java.lang.Thread$State lastState -> placerat
    double actualTickTimeMS -> Maecenas
    double ltt -> rutrum
    void <init>() -> <init>
    void onTicked() -> arcu
    void run() -> run
    void processState(java.lang.Thread$State) -> Lorem
    double getTickTimeMS() -> maximus
    double getRawTicksPerSecond() -> ultricies
    surge.math.Profiler getTickProfiler() -> feugiat
    boolean isTicked() -> molestie
    void markTick() -> Vivamus
    surge.math.Profiler getTickTimeProfiler() -> Ut
    java.lang.Thread$State getLastState() -> ultrices
    double getActualTickTimeMS() -> Donec
surge.util.Adapter -> com.volmit.react.aliquet:
    java.lang.Object adapt(java.lang.Object) -> nec
    java.lang.Object onAdapt(java.lang.Object) -> est
surge.util.Area -> com.volmit.react.Cras:
    org.bukkit.Location location -> pellentesque
    java.lang.Double radius -> Proin
    boolean within(org.bukkit.Location,org.bukkit.Location,double) -> Lorem
    void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    surge.util.Cuboid toCuboid() -> neque
    void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    java.lang.Double distance(org.bukkit.Location) -> sit
    java.lang.Double slowDistance(org.bukkit.Location) -> amet
    boolean isWithin(org.bukkit.Location) -> consectetur
    boolean hasEntities() -> hasEntities
    org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> Lorem
    org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> Lorem
    org.bukkit.entity.Entity[] getNearbyEntities() -> egestas
    org.bukkit.entity.Player[] getNearbyPlayers() -> primis
    org.bukkit.Location getLocation() -> getLocation
    void setLocation(org.bukkit.Location) -> adipiscing
    java.lang.Double getRadius() -> luctus
    void setRadius(java.lang.Double) -> Lorem
    org.bukkit.Location random() -> cubilia
surge.util.Axis -> com.volmit.react.pretium:
    surge.util.Axis X -> nisi
    surge.util.Axis Y -> porta
    surge.util.Axis Z -> Interdum
    int x -> x
    int y -> y
    int z -> z
    surge.util.Axis[] $VALUES -> fames
    surge.util.Axis[] values() -> values
    surge.util.Axis valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int,int) -> <init>
    org.bukkit.util.Vector positive() -> Curae
    org.bukkit.util.Vector negative() -> Phasellus
    void <clinit>() -> <clinit>
surge.util.C -> com.volmit.react.faucibus:
    surge.util.C BLACK -> varius
    surge.util.C DARK_BLUE -> hendrerit
    surge.util.C DARK_GREEN -> lectus
    surge.util.C DARK_AQUA -> viverra
    surge.util.C DARK_RED -> cursus
    surge.util.C DARK_PURPLE -> Morbi
    surge.util.C GOLD -> Orci
    surge.util.C GRAY -> natoque
    surge.util.C DARK_GRAY -> penatibus
    surge.util.C BLUE -> magnis
    surge.util.C GREEN -> dis
    surge.util.C AQUA -> parturient
    surge.util.C RED -> montes
    surge.util.C LIGHT_PURPLE -> nascetur
    surge.util.C YELLOW -> ridiculus
    surge.util.C WHITE -> mus
    surge.util.C MAGIC -> habitant
    surge.util.C BOLD -> morbi
    surge.util.C STRIKETHROUGH -> senectus
    surge.util.C UNDERLINE -> netus
    surge.util.C ITALIC -> facilisi
    surge.util.C RESET -> b
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> c
    char code -> d
    boolean isFormat -> e
    java.lang.String toString -> f
    java.util.Map BY_ID -> g
    java.util.Map BY_CHAR -> h
    java.util.Map dyeChatMap -> i
    java.util.Map chatHexMap -> j
    java.util.Map dyeHexMap -> k
    int[] $SWITCH_TABLE$surge$util$C -> l
    surge.util.C[] ENUM$VALUES -> m
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,char,int) -> <init>
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    char getChar() -> getChar
    java.lang.String toString() -> toString
    org.bukkit.DyeColor dye() -> dignissim
    java.lang.String hex() -> sodales
    boolean isFormat() -> isFormat
    boolean isColor() -> isColor
    surge.util.C getByChar(char) -> elit
    surge.util.C getByChar(java.lang.String) -> torquent
    java.lang.String stripColor(java.lang.String) -> stripColor
    surge.util.C dyeToChat(org.bukkit.DyeColor) -> Lorem
    org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> Lorem
    java.lang.String chatToHex(org.bukkit.ChatColor) -> ipsum
    java.lang.String dyeToHex(org.bukkit.DyeColor) -> ipsum
    org.bukkit.Color hexToColor(java.lang.String) -> per
    org.bukkit.Color rgbToColor(java.lang.String) -> conubia
    java.lang.String generateColorTable() -> urna
    org.bukkit.ChatColor chatColor() -> finibus
    java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    surge.util.C fromItemMeta(byte) -> Lorem
    byte getItemMeta() -> Pellentesque
    java.lang.String getLastColors(java.lang.String) -> getLastColors
    surge.util.C[] values() -> values
    surge.util.C valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,char,int,surge.util.C) -> <init>
    void <init>(java.lang.String,int,char,int,boolean,surge.util.C) -> <init>
    int[] $SWITCH_TABLE$surge$util$C() -> magna
surge.util.C$1 -> com.volmit.react.aliquam:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$10 -> com.volmit.react.iaculis:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$11 -> com.volmit.react.eget:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$12 -> com.volmit.react.dictum:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$13 -> com.volmit.react.orci:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$14 -> com.volmit.react.eros:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$15 -> com.volmit.react.imperdiet:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$16 -> com.volmit.react.venenatis:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$17 -> com.volmit.react.ex:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$18 -> com.volmit.react.Etiam:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$19 -> com.volmit.react.a:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$2 -> com.volmit.react.tincidunt:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$20 -> com.volmit.react.nulla:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$21 -> com.volmit.react.tellus:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$22 -> com.volmit.react.Nulla:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$3 -> com.volmit.react.ac:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$4 -> com.volmit.react.ut:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$5 -> com.volmit.react.tortor:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$6 -> com.volmit.react.tristique:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$7 -> com.volmit.react.bibendum:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$8 -> com.volmit.react.commodo:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$9 -> com.volmit.react.convallis:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.CDou -> com.volmit.react.pulvinar:
    double number -> n
    double max -> max
    void <init>(double) -> <init>
    surge.util.CDou set(double) -> quis
    surge.util.CDou add(double) -> auctor
    surge.util.CDou sub(double) -> rhoncus
    double get() -> get
    void circ() -> fringilla
surge.util.CNum -> com.volmit.react.eleifend:
    int number -> number
    int max -> max
    void <init>(int) -> <init>
    surge.util.CNum set(int) -> diam
    surge.util.CNum add(int) -> erat
    surge.util.CNum sub(int) -> at
    int get() -> get
    void circ() -> fringilla
    int getMax() -> getMax
    void setMax(int) -> laoreet
surge.util.Cuboid -> com.volmit.react.Mauris:
    java.lang.String worldName -> o
    int x1 -> p
    int y1 -> q
    int z1 -> r
    int x2 -> s
    int y2 -> t
    int z2 -> u
    void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    int depth(surge.util.Axis) -> Lorem
    void set(org.bukkit.Location,org.bukkit.Location) -> Lorem
    boolean hasPlayers() -> tempus
    surge.collection.GList getPlayers() -> sem
    surge.collection.GList getEntities() -> efficitur
    void <init>(org.bukkit.Location) -> <init>
    void <init>(surge.util.Cuboid) -> <init>
    void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    void <init>(java.util.Map) -> <init>
    java.util.Map serialize() -> serialize
    surge.util.Cuboid flatten(int) -> leo
    org.bukkit.Location getLowerNE() -> condimentum
    org.bukkit.Location getUpperSW() -> potenti
    org.bukkit.Location getCenter() -> getCenter
    org.bukkit.World getWorld() -> getWorld
    int getSizeX() -> gravida
    int getSizeY() -> hac
    int getSizeZ() -> habitasse
    int getLowerX() -> platea
    int getLowerY() -> dictumst
    int getLowerZ() -> placerat
    int getUpperX() -> Maecenas
    int getUpperY() -> rutrum
    int getUpperZ() -> pellentesque
    org.bukkit.block.Block[] corners() -> Proin
    surge.util.Cuboid expand(surge.util.Cuboid$CuboidDirection,int) -> Lorem
    surge.util.Cuboid shift(surge.util.Cuboid$CuboidDirection,int) -> ipsum
    surge.util.Cuboid outset(surge.util.Cuboid$CuboidDirection,int) -> dolor
    surge.util.Cuboid inset(surge.util.Cuboid$CuboidDirection,int) -> sit
    boolean contains(int,int,int) -> Lorem
    boolean contains(org.bukkit.block.Block) -> Lorem
    boolean contains(org.bukkit.Location) -> elit
    int volume() -> nisi
    byte averageLightLevel() -> porta
    surge.util.Cuboid contract() -> Interdum
    surge.util.Cuboid contract(surge.util.Cuboid$CuboidDirection) -> Lorem
    surge.util.Cuboid getFace(surge.util.Cuboid$CuboidDirection) -> ipsum
    boolean containsOnly(org.bukkit.Material) -> Lorem
    surge.util.Cuboid getBoundingCuboid(surge.util.Cuboid) -> Lorem
    org.bukkit.block.Block getRelativeBlock(int,int,int) -> ipsum
    org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> Lorem
    java.util.List getChunks() -> fames
    void fill(int,byte) -> Lorem
    java.util.Iterator iterator() -> iterator
    surge.util.Cuboid clone() -> varius
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object clone() -> clone
surge.util.Cuboid$1 -> com.volmit.react.massa:
    surge.util.Cuboid this$0 -> v
    void <init>(surge.util.Cuboid) -> <init>
    org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> ipsum
    java.lang.Object onAdapt(java.lang.Object) -> est
surge.util.Cuboid$2 -> com.volmit.react.vulputate:
    int[] $SwitchMap$surge$util$Axis -> w
    int[] $SwitchMap$surge$util$Cuboid$CuboidDirection -> A
    void <clinit>() -> <clinit>
surge.util.Cuboid$CuboidDirection -> com.volmit.react.Nunc:
    surge.util.Cuboid$CuboidDirection North -> B
    surge.util.Cuboid$CuboidDirection East -> C
    surge.util.Cuboid$CuboidDirection South -> D
    surge.util.Cuboid$CuboidDirection West -> E
    surge.util.Cuboid$CuboidDirection Up -> F
    surge.util.Cuboid$CuboidDirection Down -> G
    surge.util.Cuboid$CuboidDirection Horizontal -> H
    surge.util.Cuboid$CuboidDirection Vertical -> I
    surge.util.Cuboid$CuboidDirection Both -> J
    surge.util.Cuboid$CuboidDirection Unknown -> K
    surge.util.Cuboid$CuboidDirection[] $VALUES -> L
    surge.util.Cuboid$CuboidDirection[] values() -> values
    surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    surge.util.Cuboid$CuboidDirection opposite() -> hendrerit
    void <clinit>() -> <clinit>
surge.util.Cuboid$CuboidIterator -> com.volmit.react.fermentum:
    org.bukkit.World w -> M
    int baseX -> N
    int baseY -> O
    int baseZ -> P
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> Q
    int sizeY -> R
    int sizeZ -> S
    surge.util.Cuboid this$0 -> v
    void <init>(surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    boolean hasNext() -> hasNext
    org.bukkit.block.Block next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
surge.util.CuboidException -> com.volmit.react.elementum:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
surge.util.D -> com.volmit.react.Fusce:
    surge.collection.GList buffer -> T
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void flush() -> flush
    void log(java.lang.String,java.lang.String) -> ipsum
    void l(java.lang.Object,java.lang.String) -> Lorem
    void s(java.lang.Object,java.lang.String) -> ipsum
    void v(java.lang.Object,java.lang.String) -> dolor
    void w(java.lang.Object,java.lang.String) -> sit
    void f(java.lang.Object,java.lang.String) -> amet
    void l(java.lang.String) -> nostra
    void s(java.lang.String) -> inceptos
    void v(java.lang.String) -> himenaeos
    void w(java.lang.String) -> Aenean
    void f(java.lang.String) -> quam
surge.util.F -> com.volmit.react.ornare:
    java.text.NumberFormat NF -> U
    java.text.DecimalFormat DF -> V
    java.lang.String[] NAMES -> W
    java.math.BigInteger THOUSAND -> X
    java.util.NavigableMap MAP -> Y
    void <init>() -> <init>
    java.lang.String time(double,int) -> Lorem
    java.lang.String b(int) -> b
    java.lang.String b(long) -> sit
    java.lang.String b(double) -> eu
    java.lang.String b(java.math.BigInteger) -> Lorem
    void instantiate() -> lectus
    java.lang.String color(java.lang.String) -> vestibulum
    java.lang.String fileSize(long) -> amet
    java.lang.String memSize(long) -> consectetur
    java.lang.String stamp(long) -> adipiscing
    java.lang.String stamp() -> viverra
    java.lang.String ofSize(long,int) -> ipsum
    surge.collection.GList wrap(java.lang.String) -> lorem
    surge.collection.GList wrap(java.lang.String,int) -> amet
    java.lang.String trim(java.lang.String,int) -> consectetur
    java.lang.String cname(java.lang.String) -> scelerisque
    surge.collection.GList getParameters(java.lang.String,char) -> Lorem
    java.lang.String repeat(java.lang.String,int) -> repeat
    java.lang.String mem(long) -> elit
    java.lang.String memx(long) -> Sed
    java.lang.String f(long) -> vel
    java.lang.String f(int) -> congue
    java.lang.String f(double,int) -> ipsum
    java.lang.String fd(double,int) -> dolor
    java.lang.String f(float,int) -> Lorem
    java.lang.String f(double) -> nec
    java.lang.String f(float) -> Lorem
    java.lang.String pc(double,int) -> sit
    java.lang.String pc(float,int) -> ipsum
    java.lang.String pc(double) -> est
    java.lang.String pc(float) -> ipsum
    java.lang.String pc(int,int,int) -> dolor
    java.lang.String pc(int,int) -> dolor
    java.lang.String pc(long,long,int) -> Lorem
    java.lang.String pc(long,long) -> Lorem
    java.lang.String msSeconds(long) -> nibh
    java.lang.String msSeconds(long,int) -> dolor
    java.lang.String nsMs(long) -> quis
    java.lang.String nsMs(long,int) -> sit
    java.lang.String nsMsd(long,int) -> amet
    surge.collection.GList color(java.util.List) -> dolor
    void <clinit>() -> <clinit>
surge.util.GListAdapter -> com.volmit.react.metus:
    void <init>() -> <init>
    java.util.List adapt(java.util.List) -> sit
    java.lang.Object onAdapt(java.lang.Object) -> est
surge.util.P -> com.volmit.react.Suspendisse:
    void <init>() -> <init>
    boolean isOnline(java.lang.String) -> sollicitudin
    org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    org.bukkit.entity.Player getAnyPlayer() -> cursus
    boolean isAnyOnline() -> Morbi
    surge.collection.GList inWorld(org.bukkit.World) -> Lorem
    surge.collection.GList inChunk(org.bukkit.Chunk) -> Lorem
    surge.collection.GList inArea(org.bukkit.Location,double) -> dolor
    surge.collection.GList inArea(org.bukkit.Location,int) -> Lorem
    void disable(org.bukkit.entity.Player) -> amet
    void enable(org.bukkit.entity.Player) -> consectetur
    org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> Lorem
    org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> ipsum
    boolean hasInventoryOpen(org.bukkit.entity.Player) -> adipiscing
    org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> Lorem
    int getTotalExperience(org.bukkit.entity.Player) -> elit
    void setTotalExperience(org.bukkit.entity.Player,int) -> dolor
    boolean canFindPlayer(java.lang.String) -> lacus
    org.bukkit.entity.Player findPlayer(java.lang.String) -> Vestibulum
    surge.collection.GList onlinePlayers() -> Orci
    org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> Sed
    void clear(org.bukkit.entity.Player) -> vel
    void clearEffects(org.bukkit.entity.Player) -> nibh
    void heal(org.bukkit.entity.Player,double) -> Lorem
    void heal(org.bukkit.entity.Player) -> quis
    void resetMaxHeath(org.bukkit.entity.Player) -> auctor
    void resetHunger(org.bukkit.entity.Player) -> rhoncus
    void kill(org.bukkit.entity.Player) -> eu
    surge.util.Shape getShape(org.bukkit.entity.Player) -> nec
    org.bukkit.Location getHand(org.bukkit.entity.Player) -> est
    org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> Lorem
surge.util.P$1 -> com.volmit.react.augue:
    void <init>() -> <init>
    org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> ipsum
    java.lang.Object onAdapt(java.lang.Object) -> est
surge.util.P$2 -> com.volmit.react.pharetra:
    java.lang.Double val$doff -> Z
    org.bukkit.entity.Player val$e -> aa
    org.bukkit.entity.Entity[] val$result -> ab
    void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    void onTrace(org.bukkit.Location) -> Sed
surge.util.PE -> com.volmit.react.ullamcorper:
    surge.util.PE ABSORPTION -> ae
    surge.util.PE BLINDNESS -> af
    surge.util.PE CONFUSION -> ag
    surge.util.PE DAMAGE_RESISTANCE -> ah
    surge.util.PE FAST_DIGGING -> ai
    surge.util.PE FIRE_RESISTANCE -> aj
    surge.util.PE GLOWING -> ak
    surge.util.PE HARM -> al
    surge.util.PE HEAL -> am
    surge.util.PE HEALTH_BOOST -> an
    surge.util.PE HUNGER -> ao
    surge.util.PE INCREASE_DAMAGE -> ap
    surge.util.PE INVISIBILITY -> aq
    surge.util.PE JUMP -> ar
    surge.util.PE LEVITATION -> as
    surge.util.PE LUCK -> au
    surge.util.PE NIGHT_VISION -> av
    surge.util.PE POISON -> aw
    surge.util.PE REGENERATION -> ax
    surge.util.PE SATURATION -> ay
    surge.util.PE SLOW -> az
    surge.util.PE SLOW_DIGGING -> aA
    surge.util.PE SPEED -> aB
    surge.util.PE UNLUCK -> aC
    surge.util.PE WATER_BREATHING -> aD
    surge.util.PE WEAKNESS -> aE
    surge.util.PE WITHER -> aF
    void <init>(java.util.Map) -> <init>
    void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    java.util.Map serialize() -> serialize
    boolean apply(org.bukkit.entity.LivingEntity) -> apply
    boolean equals(java.lang.Object) -> equals
    int getAmplifier() -> getAmplifier
    int getDuration() -> getDuration
    org.bukkit.potion.PotionEffectType getType() -> getType
    boolean isAmbient() -> isAmbient
    boolean hasParticles() -> hasParticles
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> Lorem
    surge.util.PE d(int) -> Class
    surge.util.PE a(int) -> aptent
    org.bukkit.potion.PotionEffect c() -> natoque
    void c(org.bukkit.entity.LivingEntity) -> Lorem
    void crm(org.bukkit.entity.LivingEntity) -> ipsum
    void rm(org.bukkit.entity.LivingEntity) -> dolor
    void <clinit>() -> <clinit>
surge.util.PluginUtil -> com.volmit.react.Integer:
    void <init>() -> <init>
    void enable(org.bukkit.plugin.Plugin) -> Lorem
    void enableAll() -> penatibus
    void disable(org.bukkit.plugin.Plugin) -> ipsum
    void disableAll() -> magnis
    java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> dolor
    java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> Lorem
    org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> turpis
    java.util.List getPluginNames(boolean) -> sit
    java.lang.String getPluginVersion(java.lang.String) -> mattis
    java.lang.String getUsages(org.bukkit.plugin.Plugin) -> sit
    java.util.List findByCommand(java.lang.String) -> mollis
    void load(org.bukkit.plugin.Plugin) -> amet
    java.lang.String getPluginFileName(java.lang.String) -> nisl
    void load(java.lang.String) -> load
    void reload(org.bukkit.plugin.Plugin) -> consectetur
    void reloadAll() -> dis
    void unload(org.bukkit.plugin.Plugin) -> adipiscing
surge.util.Protocol -> com.volmit.react.vehicula:
    surge.util.Protocol LATEST -> aG
    surge.util.Protocol R1_12_2 -> aH
    surge.util.Protocol R1_12_2_PRE -> aI
    surge.util.Protocol R1_12_1 -> aJ
    surge.util.Protocol R1_12 -> aK
    surge.util.Protocol R1_11_2 -> aL
    surge.util.Protocol R1_11_1 -> aM
    surge.util.Protocol R1_11 -> aN
    surge.util.Protocol R1_10_2 -> aO
    surge.util.Protocol R1_10_1 -> aP
    surge.util.Protocol R1_10 -> aQ
    surge.util.Protocol R1_9_4 -> aR
    surge.util.Protocol R1_9_3 -> aS
    surge.util.Protocol R1_9_2 -> aT
    surge.util.Protocol R1_9_1 -> aU
    surge.util.Protocol R1_9 -> aV
    surge.util.Protocol R1_8_9 -> aW
    surge.util.Protocol R1_8_8 -> aX
    surge.util.Protocol R1_8_7 -> aY
    surge.util.Protocol R1_8_6 -> aZ
    surge.util.Protocol R1_8_5 -> ba
    surge.util.Protocol R1_8_4 -> bb
    surge.util.Protocol R1_8_3 -> bc
    surge.util.Protocol R1_8_2 -> bd
    surge.util.Protocol R1_8_1 -> be
    surge.util.Protocol R1_8 -> bf
    surge.util.Protocol R1_7_10 -> bg
    surge.util.Protocol R1_7_9 -> bh
    surge.util.Protocol R1_7_8 -> bi
    surge.util.Protocol R1_7_7 -> bj
    surge.util.Protocol R1_7_6 -> bk
    surge.util.Protocol R1_7_5 -> bl
    surge.util.Protocol R1_7_4 -> bm
    surge.util.Protocol R1_7_3 -> bn
    surge.util.Protocol R1_7_2 -> bo
    surge.util.Protocol R1_7_1 -> bp
    surge.util.Protocol B1_6_4 -> bq
    surge.util.Protocol B1_6_3 -> br
    surge.util.Protocol B1_6_2 -> bs
    surge.util.Protocol B1_6_1 -> bt
    surge.util.Protocol B1_5_2 -> bu
    surge.util.Protocol B1_5_1 -> bv
    surge.util.Protocol B1_5 -> bw
    surge.util.Protocol B1_4_7 -> bx
    surge.util.Protocol B1_4_6 -> by
    surge.util.Protocol B1_4_5 -> bz
    surge.util.Protocol B1_4_4 -> bA
    surge.util.Protocol B1_4_2 -> bB
    surge.util.Protocol B1_3_2 -> bC
    surge.util.Protocol B1_3_1 -> bD
    surge.util.Protocol B1_2_5 -> bE
    surge.util.Protocol B1_2_4 -> bF
    surge.util.Protocol EARLIEST -> bG
    surge.util.Protocol UNKNOWN -> bH
    int version -> version
    java.lang.String search -> bI
    surge.util.Protocol[] $VALUES -> bJ
    surge.util.Protocol[] values() -> values
    surge.util.Protocol valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    surge.util.Protocol getProtocolVersion() -> parturient
    surge.util.ProtocolRange to(surge.util.Protocol) -> ipsum
    boolean isServerVersion() -> montes
    java.lang.String getVersionString() -> getVersionString
    boolean isNettySupported() -> nascetur
    boolean isActualVersion() -> ridiculus
    int getVersion() -> getVersion
    int getMetaVersion() -> mus
    void <clinit>() -> <clinit>
surge.util.ProtocolRange -> com.volmit.react.risus:
    surge.util.Protocol from -> bK
    surge.util.Protocol to -> bL
    void <init>(surge.util.Protocol,surge.util.Protocol) -> <init>
    surge.util.Protocol getFrom() -> habitant
    surge.util.Protocol getTo() -> morbi
    boolean contains(surge.util.Protocol) -> dolor
    java.lang.String toString() -> toString
surge.util.RayTrace -> com.volmit.react.blandit:
    org.bukkit.Location start -> bM
    org.bukkit.util.Vector direction -> bN
    java.lang.Double maxDistance -> bO
    java.lang.Double distanceCovered -> bP
    java.lang.Double step -> bQ
    java.lang.Boolean stop -> bR
    void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    void trace() -> senectus
    void stop() -> stop
    void onTrace(org.bukkit.Location) -> Sed
    org.bukkit.Location getStart() -> netus
    void setStart(org.bukkit.Location) -> vel
    org.bukkit.util.Vector getDirection() -> getDirection
    void setDirection(org.bukkit.util.Vector) -> setDirection
    java.lang.Double getMaxDistance() -> facilisi
    void setMaxDistance(java.lang.Double) -> ipsum
    java.lang.Double getDistanceCovered() -> b
    void setDistanceCovered(java.lang.Double) -> dolor
    java.lang.Double getStep() -> c
    void setStep(java.lang.Double) -> sit
surge.util.Shape -> com.volmit.react.ante:
    org.bukkit.Location location -> pellentesque
    org.bukkit.util.Vector offset -> bS
    org.bukkit.util.Vector size -> bT
    void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    void <init>(org.bukkit.Location) -> <init>
    boolean isWithinShape(org.bukkit.Location) -> nibh
    org.bukkit.Location randomLocation() -> d
    org.bukkit.Location randomSurface() -> e
    org.bukkit.Location getCenter() -> getCenter
    org.bukkit.Location getLocation() -> getLocation
    org.bukkit.util.Vector getOffset() -> f
    org.bukkit.util.Vector getSize() -> g
surge.util.VectorMath -> com.volmit.react.dapibus:
    int[] $SWITCH_TABLE$surge$util$Axis -> bU
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> bV
    void <init>() -> <init>
    org.bukkit.util.Vector scaleStatic(surge.util.Axis,org.bukkit.util.Vector,double) -> Lorem
    org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> Lorem
    org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> ipsum
    org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> dolor
    org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> Lorem
    boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> ipsum
    org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> ipsum
    org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> dolor
    org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> sit
    org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> amet
    org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> consectetur
    org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> adipiscing
    double round(double,int) -> amet
    org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> Lorem
    org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> Lorem
    surge.collection.GList split(org.bukkit.block.BlockFace) -> Lorem
    org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> ipsum
    org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> dolor
    org.bukkit.util.Vector toVector(float,float) -> Lorem
    void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> Lorem
    void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> Lorem
    org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> elit
    double getSpeed(org.bukkit.util.Vector) -> Sed
    surge.collection.GList shift(org.bukkit.util.Vector,surge.collection.GList) -> Lorem
    org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> vel
    org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> Lorem
    org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> ipsum
    org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> dolor
    org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> sit
    org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> nibh
    int[] $SWITCH_TABLE$surge$util$Axis() -> h
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> i
surge.util.VectorMath$1 -> com.volmit.react.consequat:
    org.bukkit.util.Vector val$vector -> bW
    void <init>(org.bukkit.util.Vector) -> <init>
    org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> quis
    java.lang.Object onAdapt(java.lang.Object) -> est

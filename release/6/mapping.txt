org.cyberpwn.gbench.Profiler -> FomE:
    long nanos -> FomE
    long startNano -> Ipea
    long millis -> pXbq
    long startMillis -> Suqr
    double time -> tBkn
    boolean profiling -> DOtN
    15:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> FomE
    78:78:double getTicks() -> FomE
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> Ipea
    93:93:double getHours() -> pXbq
    98:98:double getMilliseconds() -> Suqr
    103:103:long getNanoseconds() -> tBkn
    108:108:long getNanos() -> DOtN
    113:113:long getStartNano() -> qtxH
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> BtbI
    128:128:double getTime() -> tBlP
    133:133:boolean isProfiling() -> fBUA
org.cyberpwn.gconcurrent.A -> Ipea:
    org.cyberpwn.gconcurrent.ParallelPoolManager mgr -> qtxH
    8:17:void <init>() -> <init>
org.cyberpwn.gconcurrent.A$1 -> Ipea$1:
    org.cyberpwn.gconcurrent.A this$0 -> BtbI
    10:10:void <init>(org.cyberpwn.gconcurrent.A) -> <init>
    14:15:void run() -> run
org.cyberpwn.gconcurrent.Execution -> pXbq:
    4:4:void <init>() -> <init>
org.cyberpwn.gconcurrent.ParallelPoolManager -> Suqr:
    org.cyberpwn.gconcurrent.QueueMode mode -> tBlP
    org.cyberpwn.glang.GList threads -> fBUA
    int next -> HusQ
    int threadCount -> TOBu
    java.util.Queue squeue -> qdXB
    java.lang.String key -> key
    org.cyberpwn.gconcurrent.ThreadInformation info -> leiK
    22:23:void syncQueue(org.cyberpwn.gconcurrent.Execution) -> FomE
    long getNanoGate() -> HusQ
    29:42:void tickSyncQueue() -> TOBu
    46:48:void <init>(java.lang.String,int,org.cyberpwn.gconcurrent.QueueMode) -> <init>
    51:69:void <init>(int,org.cyberpwn.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> qdXB
    93:94:void start() -> start
    98:102:void shutdown() -> shutdown
    106:107:void <init>(int) -> <init>
    111:112:void queue(org.cyberpwn.gconcurrent.Execution) -> Ipea
    116:116:int getSize() -> getSize
    121:128:int getQueueSize() -> leiK
    133:133:org.cyberpwn.gconcurrent.ParallelThread[] getThreads() -> LFiw
    140:167:void updateThreadInformation() -> oMOi
    171:203:org.cyberpwn.gconcurrent.ParallelThread nextThread() -> tupi
    208:214:void createThreads(int) -> Ipea
    218:218:org.cyberpwn.gconcurrent.QueueMode getMode() -> tvQj
    223:223:int getNext() -> OGbr
    228:228:int getThreadCount() -> getThreadCount
    233:233:java.util.Queue getSqueue() -> LyoK
    238:238:java.lang.String getKey() -> getKey
    243:243:org.cyberpwn.gconcurrent.ThreadInformation getAverageInfo() -> EBVh
org.cyberpwn.gconcurrent.ParallelPoolManager$1 -> Suqr$1:
    int[] $SwitchMap$org$cyberpwn$gconcurrent$QueueMode -> LFiw
    180:180:void <clinit>() -> <clinit>
org.cyberpwn.gconcurrent.ParallelThread -> tBkn:
    java.util.Queue queue -> oMOi
    org.cyberpwn.gconcurrent.ThreadInformation info -> leiK
    12:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> FomE
    68:75:void execute(org.cyberpwn.gconcurrent.Execution) -> pXbq
    79:89:void execute() -> execute
    93:94:void queue(org.cyberpwn.gconcurrent.Execution) -> Ipea
    98:98:java.util.Queue getQueue() -> HBnd
    103:103:org.cyberpwn.gconcurrent.ThreadInformation getInfo() -> nJLP
org.cyberpwn.gconcurrent.QueueMode -> DOtN:
    org.cyberpwn.gconcurrent.QueueMode ROUND_ROBIN -> tupi
    org.cyberpwn.gconcurrent.QueueMode SMALLEST -> tvQj
    org.cyberpwn.gconcurrent.QueueMode[] $VALUES -> OGbr
    4:4:org.cyberpwn.gconcurrent.QueueMode[] values() -> values
    4:4:org.cyberpwn.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
    4:4:void <init>(java.lang.String,int) -> <init>
    4:7:void <clinit>() -> <clinit>
org.cyberpwn.gconcurrent.S -> qtxH:
    org.cyberpwn.gconcurrent.ParallelPoolManager mgr -> qtxH
    8:17:void <init>() -> <init>
org.cyberpwn.gconcurrent.S$1 -> qtxH$1:
    org.cyberpwn.gconcurrent.S this$0 -> LyoK
    10:10:void <init>(org.cyberpwn.gconcurrent.S) -> <init>
    14:15:void run() -> run
org.cyberpwn.gconcurrent.TICK -> BtbI:
    long tick -> EBVh
    3:3:void <init>() -> <init>
    5:5:void <clinit>() -> <clinit>
org.cyberpwn.gconcurrent.ThreadInformation -> tBlP:
    double ticksPerSecond -> HBnd
    int queuedSize -> nJLP
    boolean processing -> afKD
    double utilization -> FDyO
    org.cyberpwn.gmath.Average ticksPerSecondAverage -> UcHM
    long tick -> EBVh
    int id -> id
    16:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> afKD
    33:35:void setTicksPerSecond(double) -> Ipea
    39:39:int getQueuedSize() -> FDyO
    44:45:void setQueuedSize(int) -> pXbq
    49:49:boolean isProcessing() -> UcHM
    54:55:void setProcessing(boolean) -> FomE
    59:59:double getUtilization() -> wviU
    64:65:void setUtilization(double) -> pXbq
    69:69:double getTicksPerSecondAverage() -> WhmS
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> QMif
    89:89:int getId() -> getId
org.cyberpwn.gformat.F -> fBUA:
    java.text.NumberFormat NF -> wviU
    java.text.DecimalFormat DF -> WhmS
    java.lang.String[] NAMES -> QMif
    java.math.BigInteger THOUSAND -> tvQX
    java.util.NavigableMap MAP -> CMRg
    22:33:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    37:52:java.lang.String time(double,int) -> FomE
    57:57:java.lang.String b(int) -> b
    62:62:java.lang.String b(long) -> FomE
    67:67:java.lang.String b(double) -> Suqr
    72:89:java.lang.String b(java.math.BigInteger) -> FomE
    94:98:void instantiate() -> tvQX
    110:110:java.lang.String fileSize(long) -> Ipea
    123:123:java.lang.String memSize(long) -> pXbq
    136:137:java.lang.String stamp(long) -> Suqr
    153:180:java.lang.String ofSize(long,int) -> FomE
    194:199:java.lang.String trim(java.lang.String,int) -> FomE
    212:232:java.lang.String cname(java.lang.String) -> FomE
    246:258:java.lang.String repeat(java.lang.String,int) -> repeat
    270:277:java.lang.String mem(long) -> tBkn
    290:308:java.lang.String memx(long) -> DOtN
    322:323:java.lang.String f(long) -> qtxH
    335:336:java.lang.String f(int) -> Suqr
    350:359:java.lang.String f(double,int) -> Ipea
    375:384:java.lang.String fd(double,int) -> pXbq
    398:407:java.lang.String f(float,int) -> FomE
    418:418:java.lang.String f(double) -> tBkn
    429:429:java.lang.String f(float) -> FomE
    444:444:java.lang.String pc(double,int) -> Suqr
    459:459:java.lang.String pc(float,int) -> Ipea
    472:472:java.lang.String pc(double) -> DOtN
    485:485:java.lang.String pc(float) -> Ipea
    501:501:java.lang.String pc(int,int,int) -> FomE
    515:515:java.lang.String pc(int,int) -> FomE
    531:531:java.lang.String pc(long,long,int) -> FomE
    545:545:java.lang.String pc(long,long) -> FomE
    557:557:java.lang.String msSeconds(long) -> BtbI
    571:571:java.lang.String msSeconds(long,int) -> Ipea
    583:583:java.lang.String nsMs(long) -> tBlP
    597:597:java.lang.String nsMs(long,int) -> pXbq
    611:611:java.lang.String nsMsd(long,int) -> Suqr
org.cyberpwn.glang.AccessCallback -> HusQ:
    java.lang.Object get() -> get
org.cyberpwn.glang.Adapter -> TOBu:
    java.lang.Object adapt(java.lang.Object) -> FomE
    java.lang.Object onAdapt(java.lang.Object) -> Ipea
org.cyberpwn.glang.Callback -> qdXB:
    java.lang.Object t -> kQbo
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> pXbq
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
org.cyberpwn.glang.FinalDouble -> leiK:
    double i -> sPib
    19:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> qtxH
org.cyberpwn.glang.FinalFloat -> LFiw:
    float i -> i
    19:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> pXbq
org.cyberpwn.glang.FinalInteger -> oMOi:
    int i -> i
    19:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> tBkn
org.cyberpwn.glang.FinalLong -> tupi:
    long i -> PdXJ
    19:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> fBUA
org.cyberpwn.glang.FinalString -> tvQj:
    java.lang.String string -> string
    19:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
org.cyberpwn.glang.GAdapter -> OGbr:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> FomE
    java.lang.Object onAdapt(java.lang.Object) -> Ipea
org.cyberpwn.glang.GBiset -> LyoK:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> DXdT
    java.lang.Object b -> KfJU
    30:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> CMRg
    53:54:void setA(java.lang.Object) -> Suqr
    63:63:java.lang.Object getB() -> kQbo
    73:74:void setB(java.lang.Object) -> tBkn
org.cyberpwn.glang.GList -> EBVh:
    long serialVersionUID -> serialVersionUID
    29:30:void <init>() -> <init>
    40:46:void <init>(java.util.Set) -> <init>
    56:62:void <init>(java.util.Collection) -> <init>
    72:78:void <init>(java.util.Iterator) -> <init>
    88:90:void <init>(java.lang.Object[]) -> <init>
    101:109:void <init>(java.util.List) -> <init>
    118:145:java.lang.Object mostCommon() -> sPib
    155:157:org.cyberpwn.glang.GList shuffleCopy() -> PdXJ
    165:166:void shuffle() -> DXdT
    177:203:org.cyberpwn.glang.GList split() -> KfJU
    215:215:boolean hasIndex(int) -> DOtN
    225:226:java.lang.Object pickRandom() -> AhoA
    237:244:org.cyberpwn.glang.GList stringList() -> JYtj
    255:259:void forEach(org.cyberpwn.glang.Callback) -> FomE
    268:268:int last() -> last
    282:287:int getIndexOrLast(int) -> qtxH
    303:303:org.cyberpwn.glang.GList cropFrom(int) -> BtbI
    308:340:org.cyberpwn.glang.GList split(int) -> tBlP
    356:356:org.cyberpwn.glang.GList cropTo(int) -> fBUA
    373:383:org.cyberpwn.glang.GList crop(int,int) -> Ipea
    394:398:org.cyberpwn.glang.GList removeDuplicates() -> vIRO
    409:413:void removeAll(java.lang.Object) -> DOtN
    422:422:boolean hasDuplicates() -> yJJi
    430:438:void sort() -> sort
    451:457:void push(java.lang.Object,int) -> FomE
    468:472:void add(java.lang.Object[]) -> add
    483:484:org.cyberpwn.glang.GList qadd(java.lang.Object) -> qtxH
    495:499:void add(java.util.List) -> FomE
    511:543:java.lang.String toString(java.lang.String) -> toString
    553:555:org.cyberpwn.glang.GList reverse() -> SBmJ
    564:564:java.lang.String toString() -> toString
    574:581:org.cyberpwn.glang.GList copy() -> JtHg
    593:594:org.cyberpwn.glang.GList qdel(java.lang.Object) -> BtbI
    604:611:java.lang.Object pop() -> pop
    616:625:java.lang.Object popRandom() -> RsOY
org.cyberpwn.glang.GList$1 -> EBVh$1:
    org.cyberpwn.glang.GList this$0 -> AhoA
    431:431:void <init>(org.cyberpwn.glang.GList) -> <init>
    435:435:int compare(java.lang.Object,java.lang.Object) -> compare
org.cyberpwn.glang.GListAdapter -> HBnd:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> Ipea
    java.lang.Object onAdapt(java.lang.Object) -> Ipea
org.cyberpwn.glang.GMap -> nJLP:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:org.cyberpwn.glang.GMap copy() -> iBko
    53:54:org.cyberpwn.glang.GMap qput(java.lang.Object,java.lang.Object) -> FomE
    64:81:org.cyberpwn.glang.GMap flip() -> lnYS
    87:94:java.lang.String toString() -> toString
    106:111:org.cyberpwn.glang.GMap append(org.cyberpwn.glang.GMap) -> FomE
    121:121:org.cyberpwn.glang.GList k() -> oxBt
    131:131:org.cyberpwn.glang.GSet kset() -> OHCT
    141:141:org.cyberpwn.glang.GList v() -> UYuI
    151:151:org.cyberpwn.glang.GSet vset() -> HdqE
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> Ipea
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:org.cyberpwn.glang.GList get(org.cyberpwn.glang.GList) -> FomE
    209:219:org.cyberpwn.glang.GMap removeDuplicateValues() -> avjS
    233:242:void put(org.cyberpwn.glang.GList,org.cyberpwn.glang.GList) -> FomE
    251:267:org.cyberpwn.glang.GList sortK() -> lTeb
    277:293:org.cyberpwn.glang.GList sortV() -> TxuP
org.cyberpwn.glang.GQuadraset -> afKD:
    java.lang.Object a -> DXdT
    java.lang.Object b -> KfJU
    java.lang.Object c -> JYtj
    java.lang.Object d -> vIRO
    11:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> CMRg
    25:26:void setA(java.lang.Object) -> Suqr
    30:30:java.lang.Object getB() -> kQbo
    35:36:void setB(java.lang.Object) -> tBkn
    40:40:java.lang.Object getC() -> XJMN
    45:46:void setC(java.lang.Object) -> tBlP
    50:50:java.lang.Object getD() -> hPim
    55:56:void setD(java.lang.Object) -> fBUA
org.cyberpwn.glang.GSet -> FDyO:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
org.cyberpwn.glang.GTriset -> UcHM:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> DXdT
    java.lang.Object b -> KfJU
    java.lang.Object c -> JYtj
    13:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> CMRg
    26:27:void setA(java.lang.Object) -> Suqr
    31:31:java.lang.Object getB() -> kQbo
    36:37:void setB(java.lang.Object) -> tBkn
    41:41:java.lang.Object getC() -> XJMN
    46:47:void setC(java.lang.Object) -> tBlP
org.cyberpwn.gmath.Average -> wviU:
    double[] values -> yJJi
    double average -> SBmJ
    boolean dirty -> JtHg
    10:15:void <init>(int) -> <init>
    19:21:void put(double) -> BtbI
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> idrH
org.cyberpwn.gmath.DoubleArrayUtils -> WhmS:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> FomE
    17:19:void wrapRight(double[]) -> FomE
    23:27:void fill(double[],double) -> fill
org.cyberpwn.gmath.M -> QMif:
    int precision -> RsOY
    int modulus -> iBko
    float[] sin -> lnYS
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> FomE
    31:36:boolean r(java.lang.Double) -> FomE
    51:51:double tps(long,int) -> tBkn
    63:63:double ticksFromNS(long) -> HusQ
    75:101:java.lang.String toRoman(int) -> HusQ
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> pXbq
    144:216:int fromRoman(java.lang.String) -> Ipea
    226:226:long ns() -> iBne
    236:236:long ms() -> ckqW
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> Ipea
    333:333:float sinLookup(int) -> TOBu
org.cyberpwn.json.HTTP -> tvQX:
    java.lang.String CRLF -> oxBt
    35:35:void <init>() -> <init>
    93:127:org.cyberpwn.json.JSONObject toJSONObject(java.lang.String) -> pXbq
    162:198:java.lang.String toString(org.cyberpwn.json.JSONObject) -> FomE
org.cyberpwn.json.HTTPTokener -> CMRg:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
org.cyberpwn.json.JSONArray -> kQbo:
    java.util.ArrayList myArrayList -> OHCT
    94:96:void <init>() -> <init>
    108:143:void <init>(org.cyberpwn.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    167:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> FomE
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> qdXB
    352:358:int getInt(int) -> getInt
    374:379:org.cyberpwn.json.JSONArray getJSONArray(int) -> leiK
    394:399:org.cyberpwn.json.JSONObject getJSONObject(int) -> LFiw
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> Suqr
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> oMOi
    515:515:boolean optBoolean(int) -> tupi
    533:536:boolean optBoolean(int,boolean) -> FomE
    551:551:double optDouble(int) -> tvQj
    569:572:double optDouble(int,double) -> FomE
    587:587:int optInt(int) -> OGbr
    605:608:int optInt(int,int) -> Suqr
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> Ipea
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> FomE
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> FomE
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> FomE
    722:723:org.cyberpwn.json.JSONArray optJSONArray(int) -> LyoK
    737:738:org.cyberpwn.json.JSONObject optJSONObject(int) -> EBVh
    752:752:long optLong(int) -> HBnd
    770:773:long optLong(int,long) -> FomE
    788:788:java.lang.String optString(int) -> nJLP
    803:804:java.lang.String optString(int,java.lang.String) -> FomE
    816:817:org.cyberpwn.json.JSONArray put(boolean) -> Ipea
    830:831:org.cyberpwn.json.JSONArray put(java.util.Collection) -> FomE
    845:848:org.cyberpwn.json.JSONArray put(double) -> tBlP
    860:861:org.cyberpwn.json.JSONArray put(int) -> afKD
    873:874:org.cyberpwn.json.JSONArray put(long) -> TOBu
    887:888:org.cyberpwn.json.JSONArray put(java.util.Map) -> FomE
    902:903:org.cyberpwn.json.JSONArray put(java.lang.Object) -> HusQ
    921:922:org.cyberpwn.json.JSONArray put(int,boolean) -> Ipea
    939:940:org.cyberpwn.json.JSONArray put(int,java.util.Collection) -> FomE
    958:959:org.cyberpwn.json.JSONArray put(int,double) -> Ipea
    977:978:org.cyberpwn.json.JSONArray put(int,int) -> tBkn
    996:997:org.cyberpwn.json.JSONArray put(int,long) -> Ipea
    1015:1016:org.cyberpwn.json.JSONArray put(int,java.util.Map) -> FomE
    1037:1053:org.cyberpwn.json.JSONArray put(int,java.lang.Object) -> FomE
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> TOBu
    1126:1135:org.cyberpwn.json.JSONObject toJSONObject(org.cyberpwn.json.JSONArray) -> FomE
    1153:1156:java.lang.String toString() -> toString
    1174:1178:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> FomE
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> FomE
org.cyberpwn.json.JSONException -> sPib:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> UYuI
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
org.cyberpwn.json.JSONML -> PdXJ:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(org.cyberpwn.json.XMLTokener,boolean,org.cyberpwn.json.JSONArray) -> FomE
    301:301:org.cyberpwn.json.JSONArray toJSONArray(java.lang.String) -> tBkn
    320:320:org.cyberpwn.json.JSONArray toJSONArray(org.cyberpwn.json.XMLTokener) -> FomE
    340:340:org.cyberpwn.json.JSONObject toJSONObject(org.cyberpwn.json.XMLTokener) -> Ipea
    360:360:org.cyberpwn.json.JSONObject toJSONObject(java.lang.String) -> pXbq
    379:456:java.lang.String toString(org.cyberpwn.json.JSONArray) -> Ipea
    472:552:java.lang.String toString(org.cyberpwn.json.JSONObject) -> FomE
org.cyberpwn.json.JSONObject -> DXdT:
    java.util.Map map -> map
    java.lang.Object NULL -> HdqE
    159:161:void <init>() -> <init>
    179:189:void <init>(org.cyberpwn.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(org.cyberpwn.json.JSONTokener) -> <init>
    262:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:org.cyberpwn.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> FomE
    455:467:org.cyberpwn.json.JSONObject append(java.lang.String,java.lang.Object) -> Ipea
    480:499:java.lang.String doubleToString(double) -> fBUA
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> DOtN
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:org.cyberpwn.json.JSONArray getJSONArray(java.lang.String) -> qtxH
    691:696:org.cyberpwn.json.JSONObject getJSONObject(java.lang.String) -> BtbI
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(org.cyberpwn.json.JSONObject) -> Ipea
    751:767:java.lang.String[] getNames(java.lang.Object) -> qdXB
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:org.cyberpwn.json.JSONObject increment(java.lang.String) -> tBlP
    855:855:boolean isNull(java.lang.String) -> fBUA
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:org.cyberpwn.json.JSONArray names() -> SeTH
    917:937:java.lang.String numberToString(java.lang.Number) -> FomE
    949:949:java.lang.Object opt(java.lang.String) -> HusQ
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> FomE
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> FomE
    1018:1018:boolean optBoolean(java.lang.String) -> TOBu
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> FomE
    1054:1054:double optDouble(java.lang.String) -> qdXB
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> FomE
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> FomE
    1116:1119:double optDouble(java.lang.String,double) -> FomE
    1134:1134:int optInt(java.lang.String) -> leiK
    1152:1155:int optInt(java.lang.String,int) -> Ipea
    1169:1170:org.cyberpwn.json.JSONArray optJSONArray(java.lang.String) -> LFiw
    1183:1184:org.cyberpwn.json.JSONObject optJSONObject(java.lang.String) -> oMOi
    1198:1198:long optLong(java.lang.String) -> tupi
    1216:1219:long optLong(java.lang.String,long) -> FomE
    1234:1234:java.lang.String optString(java.lang.String) -> tvQj
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> FomE
    1255:1305:void populateMap(java.lang.Object) -> leiK
    1320:1321:org.cyberpwn.json.JSONObject put(java.lang.String,boolean) -> Ipea
    1337:1338:org.cyberpwn.json.JSONObject put(java.lang.String,java.util.Collection) -> FomE
    1354:1355:org.cyberpwn.json.JSONObject put(java.lang.String,double) -> Ipea
    1371:1372:org.cyberpwn.json.JSONObject put(java.lang.String,int) -> pXbq
    1388:1389:org.cyberpwn.json.JSONObject put(java.lang.String,long) -> Ipea
    1405:1406:org.cyberpwn.json.JSONObject put(java.lang.String,java.util.Map) -> FomE
    1425:1437:org.cyberpwn.json.JSONObject put(java.lang.String,java.lang.Object) -> pXbq
    1455:1463:org.cyberpwn.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> Suqr
    1482:1486:org.cyberpwn.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> tBkn
    1501:1512:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> FomE
    1590:1590:java.lang.Object remove(java.lang.String) -> OGbr
    1605:1640:boolean similar(java.lang.Object) -> TOBu
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> LFiw
    1751:1760:org.cyberpwn.json.JSONArray toJSONArray(org.cyberpwn.json.JSONArray) -> pXbq
    1779:1782:java.lang.String toString() -> toString
    1802:1806:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> FomE
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> FomE
    2000:2004:void indent(java.io.Writer,int) -> FomE
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> FomE
    153:153:void <clinit>() -> <clinit>
org.cyberpwn.json.JSONObject$1 -> DXdT$1:
org.cyberpwn.json.JSONObject$Null -> DXdT$FomE:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(org.cyberpwn.json.JSONObject$1) -> <init>
org.cyberpwn.json.JSONString -> KfJU:
    java.lang.String toJSONString() -> toJSONString
org.cyberpwn.json.JSONStringer -> AhoA:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
org.cyberpwn.json.JSONTokener -> JYtj:
    long character -> avjS
    boolean eof -> eof
    long index -> lTeb
    long line -> TxuP
    char previous -> XJMN
    java.io.Reader reader -> reader
    boolean usePrevious -> hPim
    60:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> RQNv
    119:131:int dehexchar(char) -> FomE
    136:136:boolean end() -> TqGo
    147:153:boolean more() -> Wyow
    164:198:char next() -> next
    213:218:char next(char) -> Ipea
    233:250:java.lang.String next(int) -> FDyO
    263:268:char nextClean() -> fAvG
    287:334:java.lang.String nextString(char) -> pXbq
    349:362:java.lang.String nextTo(char) -> Suqr
    376:388:java.lang.String nextTo(java.lang.String) -> LyoK
    403:441:java.lang.Object nextValue() -> cJNt
    458:479:char skipTo(char) -> tBkn
    491:491:org.cyberpwn.json.JSONException syntaxError(java.lang.String) -> EBVh
    501:501:java.lang.String toString() -> toString
org.cyberpwn.json.JSONWriter -> vIRO:
    int maxdepth -> idrH
    boolean comma -> iBne
    char mode -> ckqW
    org.cyberpwn.json.JSONObject[] stack -> SeTH
    int top -> top
    java.io.Writer writer -> writer
    98:104:void <init>(java.io.Writer) -> <init>
    117:141:org.cyberpwn.json.JSONWriter append(java.lang.String) -> HBnd
    157:164:org.cyberpwn.json.JSONWriter array() -> dfdN
    180:193:org.cyberpwn.json.JSONWriter end(char,char) -> FomE
    206:206:org.cyberpwn.json.JSONWriter endArray() -> jFSK
    219:219:org.cyberpwn.json.JSONWriter endObject() -> AqaK
    235:258:org.cyberpwn.json.JSONWriter key(java.lang.String) -> nJLP
    274:285:org.cyberpwn.json.JSONWriter object() -> jEqo
    299:310:void pop(char) -> DOtN
    322:329:void push(org.cyberpwn.json.JSONObject) -> pXbq
    342:342:org.cyberpwn.json.JSONWriter value(boolean) -> pXbq
    356:356:org.cyberpwn.json.JSONWriter value(double) -> HusQ
    369:369:org.cyberpwn.json.JSONWriter value(long) -> qdXB
    385:385:org.cyberpwn.json.JSONWriter value(java.lang.Object) -> oMOi
org.cyberpwn.json.XML -> yJJi:
    java.lang.Character AMP -> RQNv
    java.lang.Character APOS -> TqGo
    java.lang.Character BANG -> Wyow
    java.lang.Character EQ -> fAvG
    java.lang.Character GT -> cJNt
    java.lang.Character LT -> dfdN
    java.lang.Character QUEST -> jFSK
    java.lang.Character QUOT -> AqaK
    java.lang.Character SLASH -> jEqo
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> afKD
    150:339:boolean parse(org.cyberpwn.json.XMLTokener,org.cyberpwn.json.JSONObject,java.lang.String) -> FomE
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:org.cyberpwn.json.JSONObject toJSONObject(java.lang.String) -> pXbq
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
    40:64:void <clinit>() -> <clinit>
org.cyberpwn.json.XMLTokener -> SBmJ:
    java.util.HashMap entity -> tSpN
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> tSpN
    108:133:java.lang.Object nextContent() -> tCOY
    149:166:java.lang.Object nextEntity(char) -> qtxH
    186:239:java.lang.Object nextMeta() -> OHFU
    261:334:java.lang.Object nextToken() -> avky
    354:420:boolean skipPast(java.lang.String) -> FDyO
    45:51:void <clinit>() -> <clinit>
react.Config -> JtHg:
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> tCOY
    java.lang.String A_ENTITYCACHE_INTERVAL -> OHFU
    java.lang.String A_DROPSTACK_RADIUS -> avky
    java.lang.String A_DROPSTACK_STACKDROPS -> Keld
    java.lang.String A_DROPSTACK_USEDEFAULT -> WWnJ
    java.lang.String A_DROPSTACK_SMOOTHSTACK -> RQPC
    java.lang.String A_POOL_MAXTHREADS -> flig
    java.lang.String A_POOL_SYNC_NANOS -> jpee
    java.lang.String A_ENTITYCACHE_ENABLED -> ctbj
    java.lang.String A_FASTLEAF_ENABLED -> Xkqq
    java.lang.String A_FASTLEAF_ONDECAY -> Vekq
    java.lang.String A_FASTLEAF_INSTANT -> ogDU
    java.lang.String A_FASTLEAF_DECAYPERIOD -> tnCQ
    java.lang.String A_DROPSTACK_MINAGE -> ERyk
    java.lang.String A_ENTITYSTACK_ENABLED -> ksgq
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> EmLD
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> BSBo
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> DjID
    int ENTITYCACHE_CHUNK_RADIUS -> Pliq
    int ENTITYCACHE_INTERVAL -> Cntl
    double DROPSTACK_RADIUS -> CVFN
    boolean DROPSTACK_STACKDROPS -> wmxt
    boolean DROPSTACK_USEDEFAULT -> qcvu
    boolean DROPSTACK_SMOOTHSTACK -> nlPh
    int POOL_MAXTHREADS -> JcHt
    long POOL_SYNC_NANOS -> vsgg
    boolean ENTITYCACHE_ENABLED -> equl
    boolean FASTLEAF_ENABLED -> nIlm
    boolean FASTLEAF_ONDECAY -> kQeB
    boolean FASTLEAF_INSTANT -> JtJp
    int FASTLEAF_DECAYPERIOD -> AaAJ
    int DROPSTACK_MINAGE -> LiPF
    boolean ENTITYSTACK_ENABLED -> VTjK
    int ENTITYSTACK_MINIMUM_GROUP -> flhj
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> fKFw
    int ENTITYSTACK_MAXIMUM_HEALTH -> iTOq
    boolean hrld -> RkBA
    boolean rns -> VCgp
    boolean rrl -> Yfck
    30:30:void <init>() -> <init>
    182:199:void doTrack(org.bukkit.plugin.Plugin) -> FomE
    204:226:void onRead(org.bukkit.plugin.Plugin) -> Ipea
    230:260:void read(java.io.File,boolean) -> FomE
    264:369:surge.cluster.DataCluster read(surge.cluster.DataCluster,boolean) -> FomE
    374:411:surge.cluster.DataCluster defaultConfig(boolean) -> Suqr
    89:177:void <clinit>() -> <clinit>
react.Config$1 -> JtHg$1:
    java.io.File val$fConfig -> INgB
    java.io.File val$fConfigExperimental -> PAxn
    org.bukkit.plugin.Plugin val$main -> UQiY
    186:186:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    190:194:void run() -> run
react.Info -> RsOY:
    java.lang.String CORE_REACT_DOT -> tTSP
    java.lang.String CORE_NAME -> jgvY
    java.lang.String CORE_CACHE -> ssRY
    java.lang.String CORE_DOTYML -> lDIt
    java.lang.String COMMAND_ACT_DESCRIPTION -> PlnB
    java.lang.String COMMAND_ACT -> tuss
    java.lang.String COMMAND_ACT_ALIAS_1 -> eHFy
    java.lang.String COMMAND_ACT_ALIAS_2 -> wCiI
    java.lang.String COMMAND_ACT_USAGE -> cRad
    java.lang.String COMMAND_HELP_DESCRIPTION -> Igxx
    java.lang.String COMMAND_HELP -> JtNb
    java.lang.String COMMAND_HELP_ALIAS_1 -> AFnL
    java.lang.String COMMAND_HELP_ALIAS_2 -> dxHe
    java.lang.String COMMAND_HELP_USAGE -> LGPR
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> Whog
    java.lang.String COMMAND_MONITOR -> gpOX
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> ncac
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> Xkrk
    java.lang.String COMMAND_MONITOR_USAGE -> JcJv
    java.lang.String COMMAND_REACT -> sPmb
    java.lang.String MSG_PERMISSION -> DPWr
    java.lang.String MSG_MONITORING_STARTED -> MSBi
    java.lang.String MSG_MONITORING_STOPPED -> KenC
    java.lang.String NAME_TICK -> qKIH
    java.lang.String NAME_MEMORY -> bWmt
    java.lang.String NAME_CHUNKS -> GjcP
    java.lang.String NAME_ENTITIES -> KfNe
    java.lang.String STATE_MONITORING_TAB -> EJjV
    java.lang.String STATE_MONITORING_ENABLED -> qBWL
    java.lang.String STATE_MAPPING_ENABLED -> clTH
    java.lang.String STATE_SOUND_PLAYS -> IVwA
    java.lang.String STATE_MONITORING_POSTED -> uFSB
    java.lang.String STATE_MONITORING_LASTTAB -> rEYr
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> gMkM
    java.lang.String STATE_PLAYER_HOTBAR -> CwiM
    java.lang.String STATE_PLAYER_SHIFT -> uErO
    java.lang.String STATE_PLAYER_SCROLL -> CoXh
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> nJPC
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> lTjP
    java.lang.String PERM_ACCESS -> aTjg
    java.lang.String PERM_MONITOR -> Aqdr
    java.lang.String PERM_MONITOR_TITLE -> fmPE
    java.lang.String PERM_MONITOR_MAP -> Uble
    java.lang.String PERM_MONITOR_ENVIRONMENT -> hbTY
    java.lang.String PERM_ACT -> QVaR
    java.lang.String PERM_RELOAD -> ugxL
    java.lang.String SAMPLER_TPS -> xFmc
    java.lang.String SAMPLER_TICK -> rhAK
    java.lang.String SAMPLER_TIU -> JQlY
    java.lang.String SAMPLER_MEM -> clVc
    java.lang.String SAMPLER_FREEMEM -> uWWa
    java.lang.String SAMPLER_MAXMEM -> iKdN
    java.lang.String SAMPLER_ALLOCMEM -> SSvQ
    java.lang.String SAMPLER_MAHS -> tBrO
    java.lang.String SAMPLER_CHK -> iCSg
    java.lang.String SAMPLER_CHKS -> iStX
    java.lang.String SAMPLER_ENT -> DYMW
    java.lang.String SAMPLER_ENTLIV -> mrCQ
    java.lang.String SAMPLER_ENTDROP -> SdvK
    java.lang.String SAMPLER_ENTTILE -> RYcC
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> kIXl
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> tCRY
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> nuFO
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> tCRT
    8:8:void <init>() -> <init>
    12:13:void msg(org.bukkit.command.CommandSender,java.lang.String) -> FomE
    15:87:void <clinit>() -> <clinit>
react.React -> iBko:
    react.React instance -> Ipjn
    react.controller.SampleController sampleController -> Ynwb
    react.controller.PlayerController playerController -> hrsc
    react.controller.MonitorController monitorController -> mXQD
    react.controller.CommandController commandController -> wwOj
    react.controller.ActionController actionController -> UAIg
    react.controller.EntityCacheController entityCacheController -> dnwO
    react.controller.DropMergeController dropMergeController -> QWAF
    react.controller.FastDecayController fastDecayController -> HTUu
    react.controller.EntityStackController entityStackController -> GQSX
    21:21:void <init>() -> <init>
    57:57:void enable() -> enable
    63:63:void disable() -> disable
react.action.ActionPurgeEntities -> lnYS:
    long ms -> bhqL
    int lcd -> OYKK
    34:61:void <init>() -> <init>
    66:153:void enact(react.api.IActionSource,react.api.ISelector[]) -> FomE
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> FomE
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> FomE
    27:27:int access$100(react.action.ActionPurgeEntities) -> FomE
    27:27:long access$000(react.action.ActionPurgeEntities) -> Ipea
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> FomE
react.action.ActionPurgeEntities$1 -> lnYS$1:
    react.action.ActionPurgeEntities this$0 -> IFWj
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> Keld
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> lnYS$2:
    react.action.ActionPurgeEntities this$0 -> IFWj
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> Keld
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> lnYS$3:
    org.cyberpwn.glang.FinalInteger val$completed -> oxIF
    org.cyberpwn.glang.FinalInteger val$total -> jqJG
    org.cyberpwn.glang.FinalInteger val$totalCulled -> pXhM
    org.cyberpwn.glang.FinalInteger val$totalChunked -> YEFJ
    react.api.IActionSource val$source -> bWpL
    react.action.ActionPurgeEntities this$0 -> IFWj
    107:107:void <init>(react.action.ActionPurgeEntities,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,react.api.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> lnYS$4:
    react.api.IActionSource val$source -> bWpL
    org.cyberpwn.glang.FinalInteger val$totalCulled -> pXhM
    org.cyberpwn.glang.FinalInteger val$totalChunked -> YEFJ
    react.action.ActionPurgeEntities this$0 -> IFWj
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> lnYS$5:
    org.bukkit.entity.Entity val$i -> uOEu
    org.cyberpwn.glang.FinalInteger val$cu -> PvAS
    int val$k -> ooWb
    org.bukkit.Chunk val$chunk -> jFYO
    java.lang.Runnable val$cb -> hbUq
    react.action.ActionPurgeEntities this$0 -> IFWj
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,org.cyberpwn.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.api.Action -> oxBt:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> rNQH
    java.lang.String[] nodes -> NxMp
    react.api.ActionHandle handle -> QxfK
    react.api.ActionState state -> fKNK
    react.api.ActionTargetType target -> EudC
    react.api.ActionType type -> qJln
    react.api.IActionSource currentSource -> DjOy
    double progress -> Uspl
    org.cyberpwn.glang.GMap defaultSelectors -> ivYq
    23:24:void <init>(react.api.ActionType) -> <init>
    27:39:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    44:59:react.api.ISelector[] biselect(react.api.ISelector[]) -> FomE
    65:66:void setDefaultSelector(java.lang.Class,org.cyberpwn.glang.AccessCallback) -> FomE
    71:71:java.lang.String getName() -> getName
    77:77:java.lang.String getDescription() -> getDescription
    83:83:react.api.ActionHandle getHandleType() -> WWnJ
    89:89:react.api.ActionState getState() -> RQPC
    95:95:java.lang.String getStatus() -> getStatus
    101:102:void setStatus(java.lang.String) -> UcHM
    107:107:double getProgress() -> getProgress
    113:114:void setProgress(double) -> setProgress
    119:119:react.api.ActionTargetType getTarget() -> flig
    125:125:react.api.ActionType getType() -> jpee
    131:131:org.cyberpwn.glang.GMap getDefaultSelectors() -> ctbj
    137:146:void act(react.api.IActionSource,react.api.ISelector[]) -> Ipea
    151:152:void completeAction() -> Xkqq
    157:157:react.api.IActionSource getCurrentSource() -> Vekq
    163:163:java.lang.String[] getNodes() -> ogDU
    169:170:void setNodes(java.lang.String[]) -> FomE
    void enact(react.api.IActionSource,react.api.ISelector[]) -> FomE
react.api.ActionAlreadyRunningException -> OHCT:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> UYuI:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> HdqE:
    react.api.ActionHandle AUTOMATIC -> ycej
    react.api.ActionHandle MANUAL -> lwSR
    react.api.ActionHandle MUTEX -> aerB
    react.api.ActionHandle[] $VALUES -> VDOt
    3:3:react.api.ActionHandle[] values() -> values
    3:3:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ActionNotRunningException -> avjS:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> lTeb:
    react.api.ActionState IDLE -> CLwq
    react.api.ActionState RUNNING -> mGPi
    react.api.ActionState[] $VALUES -> eilU
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> TxuP:
    react.api.ActionTargetType POSITIONAL -> clVy
    react.api.ActionTargetType SYSTEM -> ntgQ
    react.api.ActionTargetType[] $VALUES -> oUfp
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> XJMN:
    react.api.ActionType PURGE_ENTITIES -> mrEW
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> QxfK
    react.api.ActionTargetType target -> EudC
    react.api.ActionType[] $VALUES -> aToD
    5:5:react.api.ActionType[] values() -> values
    5:5:react.api.ActionType valueOf(java.lang.String) -> valueOf
    15:20:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    24:24:java.lang.String getName() -> getName
    29:29:java.lang.String getDescription() -> getDescription
    34:34:react.api.ActionHandle getHandle() -> tnCQ
    39:39:react.api.ActionTargetType getTarget() -> flig
    5:7:void <clinit>() -> <clinit>
react.api.Address -> hPim:
    int value() -> value
react.api.CacheBase -> idrH:
    org.cyberpwn.glang.GMap cache -> vAIn
    12:14:void <init>() -> <init>
    19:19:org.cyberpwn.glang.GSet get(java.lang.Object) -> tupi
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> tvQj
    42:43:void clear() -> clear
    48:48:org.cyberpwn.glang.GList k() -> oxBt
    54:54:boolean has(java.lang.Object) -> OGbr
react.api.Clip -> iBne:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> ckqW:
    org.bukkit.command.CommandSender sender -> sender
    12:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> wviU
react.api.ConsoleActionSource -> SeTH:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> wviU
react.api.Experimental -> RQNv:
react.api.Gate -> TqGo:
    9:9:void <init>() -> <init>
    13:19:void removeEntity(org.bukkit.entity.Entity) -> FomE
    23:29:void cacheEntity(org.bukkit.entity.Entity) -> Ipea
    33:33:int restoreEntities(org.bukkit.Chunk) -> FomE
react.api.IAction -> Wyow:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> WWnJ
    void act(react.api.IActionSource,react.api.ISelector[]) -> Ipea
    void enact(react.api.IActionSource,react.api.ISelector[]) -> FomE
    react.api.ActionState getState() -> RQPC
    react.api.ActionTargetType getTarget() -> flig
    void setNodes(java.lang.String[]) -> FomE
    java.lang.String[] getNodes() -> ogDU
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> UcHM
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> jpee
    org.cyberpwn.glang.GMap getDefaultSelectors() -> ctbj
    void setDefaultSelector(java.lang.Class,org.cyberpwn.glang.AccessCallback) -> FomE
    react.api.ISelector[] biselect(react.api.ISelector[]) -> FomE
    react.api.IActionSource getCurrentSource() -> Vekq
    void completeAction() -> Xkqq
react.api.IActionSource -> fAvG:
    void sendResponse(java.lang.String) -> wviU
react.api.ICache -> cJNt:
    org.cyberpwn.glang.GSet get(java.lang.Object) -> tupi
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> tvQj
    void clear() -> clear
    boolean has(java.lang.Object) -> OGbr
    org.cyberpwn.glang.GList k() -> oxBt
react.api.ICommand -> dfdN:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> ERyk
    java.lang.String[] getPermissions() -> ksgq
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    react.api.SideGate getSideGate() -> EmLD
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FomE
react.api.ISampler -> jFSK:
    java.lang.String getID() -> getID
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    surge.util.C getColor() -> BSBo
    surge.util.C getAltColor() -> DjID
    void setColor(surge.util.C,surge.util.C) -> FomE
    int getInterval() -> getInterval
    void setInterval(int) -> UcHM
    void sample() -> Pliq
    java.lang.String get() -> get
    void construct() -> Cntl
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> AqaK:
    react.api.SelectionMode getMode() -> CVFN
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> LyoK
    org.cyberpwn.glang.GSet getList() -> wmxt
    org.cyberpwn.glang.GSet getPossibilities() -> qcvu
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> Ipea
    java.lang.String getName() -> getName
react.api.Injection -> jEqo:
    react.api.InjectionMethod value() -> nlPh
react.api.InjectionMethod -> tSpN:
    react.api.InjectionMethod SWAP -> mPAs
    react.api.InjectionMethod SUBSTRATE -> teXE
    react.api.InjectionMethod RELOAD -> avqa
    react.api.InjectionMethod[] $VALUES -> PJmb
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Lang -> tCOY:
    java.lang.String value() -> value
react.api.MSampler -> OHFU:
    6:6:void <init>() -> <init>
    10:10:surge.server.SuperSampler ss() -> JcHt
react.api.MonitorHeading -> avky:
    react.api.ISampler head -> yAbP
    org.cyberpwn.glang.GList children -> nJSt
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> FomE
    27:27:react.api.ISampler getHead() -> vsgg
    32:33:void setHead(react.api.ISampler) -> Ipea
    37:37:org.cyberpwn.glang.GList getChildren() -> equl
    42:42:java.lang.String getHeadText() -> nIlm
    47:60:java.lang.String getChildText() -> kQeB
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(org.cyberpwn.glang.GList) -> Ipea
react.api.Permissable -> Keld:
    react.api.Permissable ACCESS -> yBBp
    react.api.Permissable MONITOR -> MRet
    react.api.Permissable MONITOR_TITLE -> ggag
    react.api.Permissable MONITOR_MAP -> HCVt
    react.api.Permissable MONITOR_ENVIRONMENT -> GbWW
    react.api.Permissable ACT -> KerP
    react.api.Permissable RELOAD -> bqeK
    java.lang.String node -> NVKB
    react.api.Permissable[] $VALUES -> mqcm
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    20:30:void <init>(java.lang.String,int,java.lang.String) -> <init>
    34:34:boolean has(org.bukkit.command.CommandSender) -> FomE
    39:39:java.lang.String getNode() -> JtJp
    7:15:void <clinit>() -> <clinit>
react.api.PlayerActionSource -> WWnJ:
    org.bukkit.entity.Player p -> ryDH
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> wviU
react.api.ReactActionSource -> RQPC:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> wviU
react.api.ReactCommand -> flig:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> dwmi
    java.lang.String usage -> OYOi
    java.lang.String description -> description
    react.api.SideGate sideGate -> hawQ
    13:15:void <init>() -> <init>
    20:20:java.lang.String getCommand() -> getCommand
    26:26:java.lang.String[] getAliases() -> ERyk
    32:32:java.lang.String[] getPermissions() -> ksgq
    38:38:java.lang.String getUsage() -> getUsage
    44:44:java.lang.String getDescription() -> getDescription
    50:50:react.api.SideGate getSideGate() -> EmLD
react.api.ReactException -> jpee:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> ctbj:
    org.cyberpwn.glang.GMap keystore -> FMsp
    boolean monitoring -> monitoring
    boolean mapping -> oMYp
    int monitorSelection -> cJVw
    int plays -> wndF
    boolean monitorPosted -> FMuA
    int monitorLastSelection -> FNUb
    int switchNotification -> KfVQ
    int hotbarSlot -> maEu
    boolean shift -> NUkw
    int scroll -> ETDL
    double lastHeight -> YDiq
    boolean heightMovement -> iSwx
    org.bukkit.entity.Player p -> ryDH
    38:80:void <init>(org.bukkit.entity.Player) -> <init>
    86:93:void save() -> save
    99:106:void load() -> load
    110:110:boolean isMonitoring() -> AaAJ
    115:115:boolean isMapping() -> LiPF
    120:120:org.bukkit.entity.Player getP() -> VTjK
    125:126:void setMonitoring(boolean) -> tBkn
    130:131:void setMapping(boolean) -> DOtN
    135:135:int getMonitorSelection() -> flhj
    140:141:void setMonitorSelection(int) -> wviU
    145:145:int getHotbarSlot() -> fKFw
    150:151:void setHotbarSlot(int) -> WhmS
    155:155:boolean isShifting() -> iTOq
    160:161:void setShifting(boolean) -> qtxH
    165:165:boolean isShift() -> RkBA
    170:171:void setShift(boolean) -> BtbI
    175:175:int getScroll() -> VCgp
    180:181:void setScroll(int) -> QMif
    185:185:int getMonitorLastSelection() -> Yfck
    190:191:void setMonitorLastSelection(int) -> tvQX
    195:196:void setP(org.bukkit.entity.Player) -> FomE
    200:200:double getLastHeight() -> INgB
    205:206:void setLastHeight(double) -> TOBu
    210:210:boolean isHeightMovement() -> PAxn
    215:216:void setHeightMovement(boolean) -> tBlP
    220:220:int getSwitchNotification() -> UQiY
    225:226:void setSwitchNotification(int) -> CMRg
    230:230:boolean getMonitorPosted() -> tTSP
    235:236:void setMonitorPosted(boolean) -> fBUA
    240:240:int getPlays() -> jgvY
    245:246:void setPlays(int) -> kQbo
    23:36:void <clinit>() -> <clinit>
react.api.SampledType -> Xkqq:
    react.api.SampledType TPS -> jqNr
    react.api.SampledType TICK -> hawJ
    react.api.SampledType TIU -> JlBa
    react.api.SampledType MEM -> ydGv
    react.api.SampledType FREEMEM -> HnLg
    react.api.SampledType MAXMEM -> awUH
    react.api.SampledType ALLOCMEM -> mPDX
    react.api.SampledType MAHS -> vQmB
    react.api.SampledType CHK -> FEbi
    react.api.SampledType CHKS -> YMYs
    react.api.SampledType ENT -> dDhO
    react.api.SampledType ENTLIV -> LFsh
    react.api.SampledType ENTDROP -> KTqw
    react.api.SampledType ENTTILE -> dwky
    java.lang.String node -> NVKB
    react.api.SampledType[] $VALUES -> tKfi
    5:5:react.api.SampledType[] values() -> values
    5:5:react.api.SampledType valueOf(java.lang.String) -> valueOf
    25:35:void <init>(java.lang.String,int,java.lang.String) -> <init>
    39:39:java.lang.String getNode() -> JtJp
    5:20:void <clinit>() -> <clinit>
react.api.Sampler -> Vekq:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    surge.util.C color -> cAfG
    surge.util.C altColor -> QovO
    int interval -> gxeU
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:surge.util.C getColor() -> BSBo
    49:49:surge.util.C getAltColor() -> DjID
    55:55:int getInterval() -> getInterval
    void sample() -> Pliq
    void construct() -> Cntl
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(surge.util.C,surge.util.C) -> FomE
    107:108:void setInterval(int) -> UcHM
react.api.Sector -> ogDU:
    int value() -> value
react.api.SelectionException -> tnCQ:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> ERyk:
    react.api.SelectionMode WHITELIST -> gxdu
    react.api.SelectionMode BLACKLIST -> MRgr
    react.api.SelectionMode[] $VALUES -> LaHF
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> ksgq:
    java.lang.Class objectType -> KDQs
    react.api.SelectionMode mode -> qeAY
    org.cyberpwn.glang.GSet list -> NEKQ
    org.cyberpwn.glang.GSet possibilities -> cIvG
    int popoff -> cJVd
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> CVFN
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> LyoK
    43:43:org.cyberpwn.glang.GSet getList() -> wmxt
    49:49:org.cyberpwn.glang.GSet getPossibilities() -> qcvu
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> Ipea
    57:88:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> pXbq
    93:95:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> EmLD:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> FomE
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> Ipea
    65:113:org.cyberpwn.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> Suqr
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> BSBo:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> DjID:
    16:17:void <init>() -> <init>
    21:22:void add(org.bukkit.Chunk) -> Ipea
    26:27:void add(org.bukkit.Chunk,int) -> FomE
    31:35:void add(org.bukkit.World) -> FomE
    39:43:void addAll() -> ssRY
    48:91:int parse(org.bukkit.command.CommandSender,java.lang.String) -> Ipea
    96:277:org.cyberpwn.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> Suqr
    283:283:java.lang.String getName() -> getName
react.api.Side -> Pliq:
    react.api.Side PLAYERS -> lfRa
    react.api.Side CONSOLE -> PlsR
    java.lang.String ss -> kcPD
    react.api.Side[] $VALUES -> ThaT
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> lDIt
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> Ipea
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> Cntl:
    react.api.SideGate PLAYERS_ONLY -> sQWm
    react.api.SideGate CONSOLES_ONLY -> JRRj
    react.api.SideGate ANYTHING -> cSKB
    react.api.SideGate[] $VALUES -> NVOU
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> FomE
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> Cntl$1:
    int[] $SwitchMap$react$api$SideGate -> YUlu
    13:13:void <clinit>() -> <clinit>
react.api.StackedEntity -> CVFN:
    org.bukkit.entity.LivingEntity entity -> LqkP
    int count -> count
    double rmx -> JcTh
    20:30:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    34:34:int getAbsoluteMaxCount() -> PlnB
    39:39:int getMaxCount(org.bukkit.entity.LivingEntity) -> FomE
    44:46:void update() -> update
    50:56:void signalSize() -> tuss
    60:101:void updateHealth() -> eHFy
    105:106:void heal(double) -> qdXB
    110:111:void setHealth(double) -> setHealth
    115:115:int getEffectiveCount() -> wCiI
    120:120:int getEffectiveCount(double) -> leiK
    125:125:double getEffectiveMaxHealth(int) -> sPib
    130:130:double getRealMaxHealth() -> cRad
    135:135:double getHealth() -> getHealth
    140:146:void setMaxHealth(double) -> setMaxHealth
    150:150:double getMaxHealth() -> getMaxHealth
    155:155:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    160:160:int getCount() -> getCount
react.api.TitleMonitor -> wmxt:
    org.cyberpwn.glang.GList headings -> APIH
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> FomE
    24:24:int getMaxSelection() -> Igxx
    29:37:int left(int) -> PdXJ
    42:50:int right(int) -> DXdT
    55:55:react.api.MonitorHeading getHeadFor(int) -> KfJU
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> FomE
    83:100:java.lang.String getHotbarFor(int,boolean) -> pXbq
react.cache.CachedEntity -> qcvu:
    java.util.UUID uid -> Fxjh
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> VwXp
    double x -> x
    double y -> y
    double z -> z
    double vx -> qTBd
    double vy -> hkKK
    double vz -> FMvc
    double dx -> BSLD
    double dy -> EeGa
    double dz -> NDlo
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> pXbq
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> JtNb
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> AFnL
    120:121:void setVx(double) -> LFiw
    125:125:double getVy() -> dxHe
    130:131:void setVy(double) -> oMOi
    135:135:double getVz() -> LGPR
    140:141:void setVz(double) -> tupi
    145:145:double getDx() -> Whog
    150:151:void setDx(double) -> tvQj
    155:155:double getDy() -> gpOX
    160:161:void setDy(double) -> OGbr
    165:165:double getDz() -> ncac
    170:171:void setDz(double) -> LyoK
    175:175:java.util.UUID getUid() -> Xkrk
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> nlPh:
    int age -> nIwN
    boolean ageLock -> nRhU
    boolean breed -> FNUo
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> pXbq
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> JcJv
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> sPmb
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> JcHt:
    org.bukkit.DyeColor dye -> Ywny
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> pXbq
    30:30:org.bukkit.DyeColor getDye() -> DPWr
    35:36:void setDye(org.bukkit.DyeColor) -> FomE
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> vsgg:
    org.cyberpwn.glang.GList potionEffects -> WiYT
    boolean canPickupItems -> SKjT
    org.bukkit.inventory.ItemStack[] armorContents -> ECBj
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> Fggl
    double maxHealth -> maxHealth
    int maxAir -> Wyye
    int air -> EeEp
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> pXbq
    63:63:org.cyberpwn.glang.GList getPotionEffects() -> MSBi
    68:69:void setPotionEffects(org.cyberpwn.glang.GList) -> pXbq
    73:73:boolean isCanPickupItems() -> KenC
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> qKIH
    138:139:void setMaxAir(int) -> AhoA
    143:143:int getAir() -> bWmt
    148:149:void setAir(int) -> JYtj
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> equl:
    boolean sheared -> VfVJ
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> pXbq
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> nIlm:
    org.bukkit.inventory.ItemStack is -> HnOX
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> pXbq
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> kQeB:
    7:7:void <init>() -> <init>
react.command.CommandAct -> JtJp:
    27:34:void <init>() -> <init>
    39:120:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FomE
react.command.CommandHelp -> AaAJ:
    15:22:void <init>() -> <init>
    27:28:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FomE
react.command.CommandMonitor -> LiPF:
    17:24:void <init>() -> <init>
    29:31:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FomE
react.controller.ActionController -> VTjK:
    int kiv -> upnk
    org.cyberpwn.glang.GMap actions -> YVNL
    org.cyberpwn.glang.GMap pending -> govQ
    18:18:void <init>() -> <init>
    27:67:void start() -> start
    71:72:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> FomE
    76:97:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> Ipea
    102:102:react.api.IAction getAction(react.api.ActionType) -> FomE
    107:108:void registerAction(react.api.IAction) -> FomE
    114:114:void stop() -> stop
    119:133:void tick() -> tick
    137:137:org.cyberpwn.glang.GList getActions() -> GjcP
    20:20:void <clinit>() -> <clinit>
react.controller.CommandController -> flhj:
    org.cyberpwn.glang.GList commands -> tKhR
    boolean k -> KMDx
    24:24:void <init>() -> <init>
    32:33:void start() -> start
    38:39:void stop() -> stop
    43:87:void begin() -> begin
    92:96:void tick() -> tick
    100:101:void msg(org.bukkit.command.CommandSender,java.lang.String) -> FomE
    105:106:void f(org.bukkit.command.CommandSender,java.lang.String) -> tBkn
    111:195:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
react.controller.DropMergeController -> fKFw:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:46:void on(org.bukkit.event.entity.ItemMergeEvent) -> FomE
    51:106:void tick() -> tick
    110:185:void stack(org.bukkit.entity.Item,org.bukkit.entity.Item) -> FomE
    189:265:void merge(org.bukkit.entity.Item,org.bukkit.entity.Item) -> Ipea
react.controller.DropMergeController$1 -> fKFw$1:
    org.bukkit.World val$i -> MIxn
    react.controller.DropMergeController this$0 -> hQVt
    64:64:void <init>(react.controller.DropMergeController,org.bukkit.World) -> <init>
    70:103:void run() -> run
react.controller.EntityCacheController -> iTOq:
    org.cyberpwn.glang.GMap caches -> vcQD
    int cachedEntities -> QpYS
    int cachedDrops -> Dito
    49:49:boolean enabled() -> enabled
    44:55:void <init>() -> <init>
    59:73:void push(org.bukkit.World) -> Ipea
    77:91:void pop(org.bukkit.Chunk) -> pXbq
    95:140:void pop(org.bukkit.entity.Entity) -> Suqr
    144:152:boolean hasUid(java.util.UUID,org.bukkit.Chunk) -> FomE
    157:190:int push(org.bukkit.Chunk) -> Suqr
    195:199:void cworld(org.bukkit.World) -> pXbq
    204:210:void on(org.bukkit.event.world.WorldLoadEvent) -> FomE
    215:221:void on(org.bukkit.event.world.ChunkUnloadEvent) -> FomE
    226:233:void on(org.bukkit.event.world.WorldUnloadEvent) -> FomE
    238:239:void start() -> start
    244:245:void stop() -> stop
    249:249:boolean isCached(org.bukkit.Chunk) -> tBkn
    255:264:void on(org.bukkit.event.entity.EntitySpawnEvent) -> FomE
    269:339:void tick() -> tick
    343:343:org.cyberpwn.glang.GMap getCaches() -> KfNe
    348:348:int getCachedEntities() -> EJjV
    353:353:int getCachedDrops() -> qBWL
    358:358:int getCachedTotals() -> clTH
react.controller.EntityStackController -> RkBA:
    org.cyberpwn.glang.GList stacks -> uXAS
    18:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:52:void tick() -> tick
    56:83:void stack(org.cyberpwn.glang.GList) -> Suqr
    87:92:boolean isStacked(org.bukkit.entity.LivingEntity) -> Ipea
    97:110:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> pXbq
    116:134:void on(org.bukkit.event.entity.EntityDamageEvent) -> FomE
    138:153:void merge(react.api.StackedEntity,react.api.StackedEntity) -> FomE
    157:203:void checkNear(org.bukkit.entity.LivingEntity) -> Suqr
    208:230:void on(org.bukkit.event.entity.EntitySpawnEvent) -> FomE
react.controller.EntityStackController$1 -> RkBA$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> kQrc
    react.controller.EntityStackController this$0 -> LqmK
    216:216:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    220:227:void run() -> run
react.controller.FastDecayController -> VCgp:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> FomE
    48:54:void on(org.bukkit.event.block.BlockBurnEvent) -> FomE
    59:65:void on(org.bukkit.event.block.LeavesDecayEvent) -> FomE
    69:145:void checkBreak(org.bukkit.block.Block) -> FomE
    151:151:void tick() -> tick
react.controller.FastDecayController$1 -> VCgp$1:
    org.cyberpwn.glang.GMap val$locs -> gWIP
    react.controller.FastDecayController this$0 -> vsuR
    79:79:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,org.cyberpwn.glang.GMap) -> <init>
    83:83:boolean isAllowedSplooge(org.bukkit.Location) -> FomE
    89:89:boolean isAllowedSource(org.bukkit.Location) -> Ipea
    95:114:void clipped(org.bukkit.Location) -> pXbq
    119:142:void finished() -> finished
react.controller.FastDecayController$1$1 -> VCgp$1$1:
    int val$i -> XSLx
    react.controller.FastDecayController$1 this$1 -> OPbk
    124:124:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,int) -> <init>
    128:138:void run() -> run
react.controller.MonitorController -> Yfck:
    int maxCooldown -> OiuO
    react.api.TitleMonitor titleMonitor -> EmYc
    org.cyberpwn.glang.GMap posts -> MuQY
    35:38:void <init>() -> <init>
    43:54:void start() -> start
    58:74:void toggleMonitoring(org.bukkit.entity.Player) -> Ipea
    79:81:void stop() -> stop
    85:104:void constructMonitor() -> IVwA
    108:113:float calcVolume(react.api.ReactPlayer) -> FomE
    118:118:boolean canMonitor(org.bukkit.entity.Player) -> pXbq
    123:128:boolean isMonitoring(org.bukkit.entity.Player) -> Suqr
    133:137:void startMonitoring(org.bukkit.entity.Player) -> tBkn
    141:152:void stopMonitoring(org.bukkit.entity.Player) -> DOtN
    158:158:void tick() -> tick
    162:165:void changePost(react.api.ReactPlayer) -> Ipea
    169:178:void processPlayer(react.api.ReactPlayer) -> pXbq
    182:206:void handleTriggers(react.api.ReactPlayer) -> Suqr
    210:249:void handleScrolling(react.api.ReactPlayer) -> tBkn
    253:281:void handleShifting(react.api.ReactPlayer) -> DOtN
    285:307:void handlePosting(react.api.ReactPlayer) -> qtxH
    311:329:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> FomE
    334:348:java.lang.String prefixForSub(react.api.ReactPlayer,surge.util.C,int) -> FomE
    353:360:void tickMonitor(react.api.ReactPlayer) -> BtbI
    364:364:react.api.TitleMonitor getTitleMonitor() -> uFSB
    370:374:void on(org.bukkit.event.player.PlayerJoinEvent) -> FomE
    379:388:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> FomE
    393:404:void onTick() -> rEYr
    409:409:java.lang.String getTickName() -> gMkM
    30:30:void <clinit>() -> <clinit>
react.controller.PlayerController -> INgB:
    org.cyberpwn.glang.GList players -> HwCk
    12:12:void <init>() -> <init>
    19:21:void start() -> start
    26:27:void stop() -> stop
    33:33:void tick() -> tick
    37:45:boolean has(org.bukkit.entity.Player) -> qtxH
    50:61:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> BtbI
    66:66:org.cyberpwn.glang.GList getPlayers() -> CwiM
    72:77:void on(org.bukkit.event.player.PlayerQuitEvent) -> FomE
react.controller.SampleController -> PAxn:
    org.cyberpwn.glang.GMap samplers -> MAlJ
    surge.server.SuperSampler ss -> WaMB
    24:28:void <init>() -> <init>
    32:33:void registerSampler(react.api.ISampler) -> pXbq
    37:37:react.api.ISampler getSampler(java.lang.String) -> WhmS
    42:85:void constructSamplers() -> uErO
    90:93:void start() -> start
    98:101:void stop() -> stop
    107:107:void tick() -> tick
    111:111:surge.server.SuperSampler getSuperSampler() -> CoXh
    117:133:void onTick() -> rEYr
    138:138:java.lang.String getTickName() -> gMkM
react.controller.SploogeCounter -> UQiY:
    org.cyberpwn.glang.GList sources -> oENC
    org.cyberpwn.glang.GList splooge -> fuhE
    org.cyberpwn.glang.GSet destroy -> tBys
    22:96:void <init>(int,int,org.bukkit.Location) -> <init>
    100:147:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> FomE
    152:152:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> Ipea
    void clipped(org.bukkit.Location) -> pXbq
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> FomE
    boolean isAllowedSource(org.bukkit.Location) -> Ipea
    15:15:org.cyberpwn.glang.GList access$000(react.controller.SploogeCounter) -> FomE
    15:15:org.cyberpwn.glang.GList access$100(react.controller.SploogeCounter) -> Ipea
    15:15:org.cyberpwn.glang.GSet access$200(react.controller.SploogeCounter) -> pXbq
react.controller.SploogeCounter$1 -> UQiY$1:
    java.util.Iterator val$it -> XBLV
    org.bukkit.Location val$start -> yJYm
    int val$maxDistance -> prdM
    react.controller.SploogeCounter this$0 -> aoIG
    32:32:void <init>(react.controller.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:94:void run() -> run
react.controller.SploogeCounter$1$1 -> UQiY$1$1:
    react.controller.SploogeCounter$1 this$1 -> QVgg
    82:82:void <init>(react.controller.SploogeCounter$1) -> <init>
    86:92:void run() -> run
react.sampler.SampleChunksLoaded -> tTSP:
    11:11:void <init>() -> <init>
    16:22:void construct() -> Cntl
    27:28:void sample() -> Pliq
    33:33:java.lang.String get() -> get
react.sampler.SampleChunksLoadedPerSecond -> jgvY:
    org.cyberpwn.gmath.Average a -> NVOg
    12:14:void <init>() -> <init>
    19:25:void construct() -> Cntl
    30:32:void sample() -> Pliq
    37:37:java.lang.String get() -> get
react.sampler.SampleEntitiesDrops -> ssRY:
    12:12:void <init>() -> <init>
    17:23:void construct() -> Cntl
    28:29:void sample() -> Pliq
    34:35:java.lang.String get() -> get
react.sampler.SampleEntitiesLiving -> lDIt:
    12:12:void <init>() -> <init>
    17:23:void construct() -> Cntl
    28:29:void sample() -> Pliq
    34:35:java.lang.String get() -> get
react.sampler.SampleEntitiesTiles -> PlnB:
    11:11:void <init>() -> <init>
    16:22:void construct() -> Cntl
    27:28:void sample() -> Pliq
    33:33:java.lang.String get() -> get
react.sampler.SampleEntitiesTotal -> tuss:
    11:11:void <init>() -> <init>
    16:22:void construct() -> Cntl
    27:28:void sample() -> Pliq
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryAllocated -> eHFy:
    11:11:void <init>() -> <init>
    16:22:void construct() -> Cntl
    27:28:void sample() -> Pliq
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryAllocationPerSecond -> wCiI:
    11:11:void <init>() -> <init>
    16:22:void construct() -> Cntl
    27:28:void sample() -> Pliq
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryFree -> cRad:
    11:11:void <init>() -> <init>
    16:22:void construct() -> Cntl
    27:28:void sample() -> Pliq
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryMax -> Igxx:
    11:11:void <init>() -> <init>
    16:22:void construct() -> Cntl
    27:28:void sample() -> Pliq
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryUse -> JtNb:
    11:11:void <init>() -> <init>
    16:22:void construct() -> Cntl
    27:28:void sample() -> Pliq
    33:33:java.lang.String get() -> get
react.sampler.SampleTickTime -> AFnL:
    11:11:void <init>() -> <init>
    16:22:void construct() -> Cntl
    27:28:void sample() -> Pliq
    33:33:java.lang.String get() -> get
react.sampler.SampleTickUtilization -> dxHe:
    11:11:void <init>() -> <init>
    16:22:void construct() -> Cntl
    27:28:void sample() -> Pliq
    33:33:java.lang.String get() -> get
react.sampler.SampleTicksPerSecond -> LGPR:
    12:12:void <init>() -> <init>
    17:23:void construct() -> Cntl
    28:29:void sample() -> Pliq
    34:39:java.lang.String get() -> get
surge.Main -> Whog:
    org.cyberpwn.glang.GList plugins -> KTvS
    org.cyberpwn.glang.GMap pluginInstances -> ndLq
    org.cyberpwn.glang.GList controllerSet -> ccko
    org.cyberpwn.glang.GMap anchors -> fJrS
    org.cyberpwn.glang.GList classes -> XRjr
    java.lang.reflect.Field nsField -> nclO
    java.lang.reflect.Field thField -> mWxL
    org.cyberpwn.glang.GList tracks -> iLMF
    long nsf -> owpa
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> nJPC
    90:109:long getNanoSync() -> lTjP
    114:115:void requestResetNanos() -> aTjg
    119:122:void requestReload() -> Aqdr
    127:141:int getThreadCount() -> getThreadCount
    150:182:void onStart(surge.util.Protocol) -> FomE
    189:206:void onStop() -> fmPE
    212:212:void onPostInit() -> Uble
    218:218:void onPreInit() -> hbTY
    222:233:void shutDownAmps() -> QVaR
    237:446:void initializeAmps() -> ugxL
    451:484:void doScan() -> xFmc
    488:510:void scanForPoolDefiners() -> rhAK
    514:530:void scanForRawEvents() -> JQlY
    534:550:void scanForDynamicTrack() -> clVc
    554:575:void scanForAmps() -> uWWa
    580:591:void onTick() -> rEYr
surge.PluginAmp -> gpOX:
    surge.control.AmpedPlugin plugin -> BlaI
    boolean connected -> connected
    int masterTask -> vstQ
    18:21:void <init>(surge.control.AmpedPlugin) -> <init>
    25:25:surge.control.AmpedPlugin getPluginInstance() -> iKdN
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> SSvQ
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> FomE
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> FomE
    113:114:void stopTask(int) -> vIRO
    11:11:void access$000(surge.PluginAmp) -> FomE
surge.PluginAmp$1 -> gpOX$1:
    surge.PluginAmp this$0 -> XRjw
    38:38:void <init>(surge.PluginAmp) -> <init>
    42:44:void run() -> run
surge.PluginAmp$2 -> gpOX$2:
    surge.PluginAmp this$0 -> XRjw
    48:48:void <init>(surge.PluginAmp) -> <init>
    52:53:void run() -> run
surge.Surge -> ncac:
    surge.PluginAmp amp -> jhab
    org.cyberpwn.glang.GList tickComponents -> aLeY
    org.cyberpwn.glang.GList atickComponents -> gggj
    surge.sched.TaskManager taskmgr -> CUqK
    surge.hotload.HotloadManager hotloadmgr -> McnI
    java.lang.Thread mainThread -> xyxw
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> FomE
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> QMif
    44:44:java.io.File folder() -> tBrO
    49:51:java.io.File getPluginJarFile() -> iCSg
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> pXbq
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> iStX
    74:74:org.cyberpwn.glang.GList getTickComponents() -> DYMW
    79:79:org.cyberpwn.glang.GList getAsyncTickComponents() -> mrCQ
    84:91:void registerTicked(surge.sched.IMasterTickComponent) -> FomE
    95:102:void unregisterTicked(surge.sched.IMasterTickComponent) -> Ipea
    106:111:surge.PluginAmp createAmp(surge.control.AmpedPlugin) -> FomE
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> SdvK
    126:126:boolean hasAmp() -> RYcC
    131:131:surge.PluginAmp getAmp() -> kIXl
    136:136:surge.sched.TaskManager getTaskManager() -> tCRY
    141:141:surge.hotload.HotloadManager getHotloadManager() -> nuFO
surge.cluster.Cluster -> Xkrk:
    surge.cluster.ClusterType type -> cSLR
    java.lang.Object t -> kQbo
    9:12:void <init>(surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:surge.cluster.ClusterType getType() -> tCRT
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
surge.cluster.ClusterBoolean -> JcJv:
    7:8:void <init>(java.lang.Boolean) -> <init>
surge.cluster.ClusterDouble -> sPmb:
    7:8:void <init>(java.lang.Double) -> <init>
surge.cluster.ClusterInt -> DPWr:
    7:8:void <init>(java.lang.Integer) -> <init>
surge.cluster.ClusterLong -> MSBi:
    7:8:void <init>(java.lang.Long) -> <init>
surge.cluster.ClusterString -> KenC:
    7:8:void <init>(java.lang.String) -> <init>
surge.cluster.ClusterStringList -> qKIH:
    9:10:void <init>(java.util.List) -> <init>
surge.cluster.ClusterType -> bWmt:
    surge.cluster.ClusterType INT -> eHQD
    surge.cluster.ClusterType BOOLEAN -> nclA
    surge.cluster.ClusterType STRING -> Whyx
    surge.cluster.ClusterType STRING_LIST -> pirG
    surge.cluster.ClusterType DOUBLE -> nuNO
    surge.cluster.ClusterType LONG -> awYT
    surge.cluster.ClusterType[] $VALUES -> rpXd
    3:3:surge.cluster.ClusterType[] values() -> values
    3:3:surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:5:void <clinit>() -> <clinit>
surge.cluster.ConfigurationDataInput -> GjcP:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> CwvC
    12:12:void <init>() -> <init>
    17:127:void read(surge.cluster.IConfigurable,java.io.File) -> FomE
    132:257:surge.cluster.DataCluster fillDefaults(surge.cluster.IConfigurable) -> FomE
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> Ipjn
surge.cluster.ConfigurationDataOutput -> KfNe:
    12:12:void <init>() -> <init>
    17:143:void write(surge.cluster.IConfigurable,java.io.File) -> Ipea
surge.cluster.DataCluster -> EJjV:
    org.cyberpwn.glang.GMap clusters -> gEhW
    17:20:void <init>() -> <init>
    24:24:org.cyberpwn.glang.GList keys() -> Ynwb
    29:33:void fromJson(org.cyberpwn.json.JSONObject) -> Suqr
    37:44:org.cyberpwn.json.JSONObject toJson() -> hrsc
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> mXQD
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> FomE
    104:104:boolean contains(java.lang.String) -> contains
    109:109:surge.cluster.ClusterType getType(java.lang.String) -> tvQX
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> DOtN
    194:195:void set(java.lang.String,int) -> Suqr
    199:200:void set(java.lang.String,boolean) -> pXbq
    204:205:void set(java.lang.String,double) -> pXbq
    209:210:void set(java.lang.String,long) -> pXbq
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> FomE
surge.cluster.ICluster -> qBWL:
    surge.cluster.ClusterType getType() -> tCRT
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
surge.cluster.IConfigurable -> clTH:
surge.cluster.IDataInput -> IVwA:
    surge.cluster.DataCluster read(java.io.File) -> FomE
surge.cluster.IDataOutput -> uFSB:
    void write(surge.cluster.DataCluster,java.io.File) -> FomE
surge.cluster.Key -> rEYr:
    java.lang.String value() -> value
surge.cluster.KeyPointer -> gMkM:
    int value() -> value
surge.cluster.KeyStore -> CwiM:
surge.cluster.ReflectedConfigurationException -> uErO:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
surge.cluster.YamlDataInput -> CoXh:
    8:8:void <init>() -> <init>
    13:27:surge.cluster.DataCluster read(java.io.File) -> FomE
surge.cluster.YamlDataOutput -> nJPC:
    6:6:void <init>() -> <init>
    13:20:void write(surge.cluster.DataCluster,java.io.File) -> FomE
surge.collection.GSound -> lTjP:
    java.lang.String sound -> kRUa
    org.bukkit.Sound iSound -> IFbf
    java.lang.Float volume -> RHkw
    java.lang.Float pitch -> JbxE
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> tBlP
    61:72:void play(org.bukkit.Location) -> Suqr
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> FomE
    93:93:java.lang.String getSound() -> wwOj
    98:99:void setSound(java.lang.String) -> CMRg
    103:103:org.bukkit.Sound getiSound() -> UAIg
    108:109:void setiSound(org.bukkit.Sound) -> FomE
    113:113:java.lang.Float getVolume() -> dnwO
    118:119:void setVolume(java.lang.Float) -> FomE
    123:123:java.lang.Float getPitch() -> QWAF
    128:129:void setPitch(java.lang.Float) -> Ipea
surge.control.AmpedPlugin -> aTjg:
    org.cyberpwn.glang.GList controllers -> SUAn
    org.cyberpwn.gconcurrent.ParallelPoolManager pp -> eaeK
    surge.server.CoreTickThread ctt -> ofrV
    24:49:void <init>() -> <init>
    void doScan() -> xFmc
    long getNanoSync() -> lTjP
    int getThreadCount() -> getThreadCount
    60:65:void onLoad() -> onLoad
    70:79:void onEnable() -> onEnable
    84:94:void onDisable() -> onDisable
    99:99:org.cyberpwn.glang.GList getControllers() -> HTUu
    105:106:void registerController(surge.control.IController) -> FomE
    111:122:void onTick() -> rEYr
    127:127:java.lang.String getTickName() -> gMkM
    133:133:org.cyberpwn.gconcurrent.ParallelPoolManager getThreadPool() -> GQSX
    void onControllerRegistry() -> nJPC
    void onStart(surge.util.Protocol) -> FomE
    void onStop() -> fmPE
    void onPostInit() -> Uble
    void onPreInit() -> hbTY
surge.control.AmpedPlugin$1 -> aTjg$1:
    surge.control.AmpedPlugin this$0 -> jptl
    38:38:void <init>(surge.control.AmpedPlugin,java.lang.String,int,org.cyberpwn.gconcurrent.QueueMode) -> <init>
    42:42:long getNanoGate() -> HusQ
surge.control.Control -> Aqdr:
surge.control.Controller -> fmPE:
    7:10:void <init>() -> <init>
surge.control.Disable -> Uble:
surge.control.Enable -> hbTY:
surge.control.IController -> QVaR:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
surge.control.Instance -> ugxL:
surge.control.Plugin -> xFmc:
surge.control.SurgePlugin -> rhAK:
    void onStart(surge.util.Protocol) -> FomE
    void onStop() -> fmPE
    void onPostInit() -> Uble
    void onPreInit() -> hbTY
    void onControllerRegistry() -> nJPC
    void registerController(surge.control.IController) -> FomE
    org.cyberpwn.glang.GList getControllers() -> HTUu
    org.cyberpwn.gconcurrent.ParallelPoolManager getThreadPool() -> GQSX
surge.hotload.HotloadManager -> JQlY:
    org.cyberpwn.glang.GMap filemods -> UtYa
    org.cyberpwn.glang.GMap filesizes -> lCua
    org.cyberpwn.glang.GMap fileacts -> yBKm
    16:21:void <init>() -> <init>
    25:29:void track(java.io.File,java.lang.Runnable) -> FomE
    33:36:void untrack(java.io.File) -> Ipea
    40:43:void untrackall() -> bhqL
    48:72:void onTick() -> rEYr
    77:77:java.lang.String getTickName() -> gMkM
surge.nms.NMSClass -> clVc:
    boolean init -> SvdS
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> FgnA
    java.lang.Class IChatBaseComponent -> cdQK
    java.lang.Class ChatSerializer -> hjnT
    java.lang.Class PacketPlayOutPlayerInfo -> ESht
    java.lang.Class PlayerInfoData -> NVTK
    java.lang.Class EnumPlayerInfoAction -> PCHM
    java.lang.Class GameProfile -> loJW
    java.lang.Class EnumGamemode -> Qgjt
    java.lang.Class TileEntitySkull -> vtWI
    java.lang.Class LoadingCache -> OGsH
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
surge.nms.NMSX -> uWWa:
    surge.nms.NMSX bountifulAPI -> ryMC
    boolean useOldMethods -> sjlr
    java.lang.String nmsver -> xFwh
    java.lang.Object eTimes -> IiFP
    java.lang.Object eTitle -> bOjA
    java.lang.Object eSubtitle -> cSMa
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> FomE
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> kQbo
    75:89:java.lang.Class getCBClass(java.lang.String) -> sPib
    96:104:java.lang.Object serializeChat(java.lang.String) -> PdXJ
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> FomE
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> FomE
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> OYKK
    151:151:java.lang.String craftPackage() -> IFWj
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> FomE
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> FomE
    197:207:java.lang.Class getNMSClass(java.lang.String) -> DXdT
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> FomE
    279:280:void clearTitle(org.bukkit.entity.Player) -> fBUA
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> FomE
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> FomE
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> FomE
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> KfJU
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> tBkn
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> tBkn
    434:447:int ping(org.bukkit.entity.Player) -> HusQ
surge.nms.NMSX$1 -> uWWa$1:
    org.bukkit.entity.Player val$player -> fmYL
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
surge.nms.NMSX$2 -> uWWa$2:
    org.bukkit.entity.Player val$player -> fmYL
    java.lang.String val$message -> DXtk
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
surge.nms.PacketUtil -> iKdN:
    6:6:void <init>() -> <init>
    20:45:surge.nms.PacketUtil$V getVersion() -> oxIF
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> FomE
    68:82:void clearTitle(org.bukkit.entity.Player) -> fBUA
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> FomE
surge.nms.PacketUtil$V -> iKdN$FomE:
    surge.nms.PacketUtil$V R17 -> NUqR
    surge.nms.PacketUtil$V R18 -> lMGb
    surge.nms.PacketUtil$V R19 -> fSeX
    surge.nms.PacketUtil$V R111 -> fBdH
    surge.nms.PacketUtil$V R110 -> pPah
    surge.nms.PacketUtil$V R112 -> mrLg
    surge.nms.PacketUtil$V[] ENUM$VALUES -> qvHd
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:surge.nms.PacketUtil$V[] values() -> values
    1:1:surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
surge.nms.Title -> SSvQ:
    java.lang.String title -> title
    java.lang.String subTitle -> BRpJ
    java.lang.String action -> action
    java.lang.Integer fadeIn -> ArPh
    java.lang.Integer fadeOut -> SmrW
    java.lang.Integer stayTime -> ofqI
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> TOBu
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> jqJG
    79:80:void setSubTitle(java.lang.String) -> AhoA
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> pXhM
    99:100:void setFadeIn(java.lang.Integer) -> FomE
    104:104:java.lang.Integer getFadeOut() -> YEFJ
    109:110:void setFadeOut(java.lang.Integer) -> Ipea
    114:114:java.lang.Integer getStayTime() -> bWpL
    119:120:void setStayTime(java.lang.Integer) -> pXbq
surge.nms.VersionBukkit -> tBrO:
    surge.nms.VersionBukkit VU -> Jbvv
    surge.nms.VersionBukkit V7 -> inQX
    surge.nms.VersionBukkit V8 -> wLdx
    surge.nms.VersionBukkit V9 -> GINJ
    surge.nms.VersionBukkit V11 -> brMn
    surge.nms.VersionBukkit V111 -> jOTd
    surge.nms.VersionBukkit V112 -> pbGq
    surge.nms.VersionBukkit[] ENUM$VALUES -> cBNv
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> uOEu
    27:32:boolean uc() -> PvAS
    37:67:surge.nms.VersionBukkit get() -> ooWb
    1:1:surge.nms.VersionBukkit[] values() -> values
    1:1:surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
surge.sched.IBursterator -> iCSg:
    void burst(java.lang.Object) -> EBVh
    void setTimeLock(double) -> EBVh
    double getEstimatedTimeUse() -> jFYO
    int flush() -> hbUq
    int flush(org.cyberpwn.gbench.Profiler) -> FomE
    void queue(java.lang.Object) -> HBnd
    void queue(java.util.List) -> pXbq
    void queue(java.lang.Object[]) -> FomE
surge.sched.ICancellable -> iStX:
    void cancel() -> cancel
surge.sched.IMasterTickComponent -> DYMW:
    void onTick() -> rEYr
    java.lang.String getTickName() -> gMkM
surge.sched.ITask -> mrCQ:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> rNQH
    java.lang.String getName() -> getName
    double getComputeTime() -> NxMp
    double getTotalComputeTime() -> QxfK
    double getActiveTime() -> fKNK
    boolean hasCompleted() -> EudC
surge.sched.Task -> SdvK:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> cAmt
    double computeTime -> pGtV
    double totalComputeTime -> XBPM
    double activeTime -> lnmH
    boolean completed -> completed
    org.cyberpwn.gbench.Profiler profiler -> cBOQ
    org.cyberpwn.gbench.Profiler activeProfiler -> oxVQ
    int ticks -> Wqpo
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> Suqr
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> rNQH
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> NxMp
    150:150:boolean hasCompleted() -> EudC
    156:156:double getTotalComputeTime() -> QxfK
    162:162:double getActiveTime() -> fKNK
    17:17:org.cyberpwn.gbench.Profiler access$0(surge.sched.Task) -> FomE
    15:15:void access$1(surge.sched.Task,boolean) -> FomE
    16:16:org.cyberpwn.gbench.Profiler access$2(surge.sched.Task) -> Ipea
    14:14:void access$3(surge.sched.Task,double) -> FomE
    12:12:void access$4(surge.sched.Task,double) -> Ipea
    14:14:double access$5(surge.sched.Task) -> pXbq
    13:13:void access$6(surge.sched.Task,double) -> pXbq
    13:13:double access$7(surge.sched.Task) -> Suqr
    12:12:double access$8(surge.sched.Task) -> tBkn
surge.sched.Task$1 -> SdvK$1:
    surge.sched.Task this$0 -> Xcra
    1:25:void <init>(surge.sched.Task) -> <init>
    30:40:void run() -> run
surge.sched.Task$2 -> SdvK$2:
    surge.sched.Task this$0 -> Xcra
    1:49:void <init>(surge.sched.Task) -> <init>
    54:65:void run() -> run
surge.sched.Task$3 -> SdvK$3:
    surge.sched.Task this$0 -> Xcra
    int val$total -> xOkW
    1:74:void <init>(surge.sched.Task,int) -> <init>
    79:95:void run() -> run
surge.sched.TaskManager -> RYcC:
    org.cyberpwn.glang.GList tasks -> FgpG
    org.cyberpwn.glang.GMap taskProfiles -> KLlE
    11:15:void <init>() -> <init>
    20:30:void onTick() -> rEYr
    34:35:void putFinishingTask(surge.sched.ITask) -> FomE
    39:48:void putTask(surge.sched.ITask) -> Ipea
    53:53:java.lang.String getTickName() -> gMkM
surge.sched.TaskProfile -> kIXl:
    double activeTime -> lnmH
    double computeTickTime -> HfGF
    double computeTime -> pGtV
    10:14:void <init>() -> <init>
    18:18:double getActiveTime() -> fKNK
    23:24:void setActiveTime(double) -> HBnd
    28:28:double getComputeTickTime() -> qJln
    33:34:void setComputeTickTime(double) -> nJLP
    38:38:double getComputeTime() -> NxMp
    43:44:void setComputeTime(double) -> afKD
surge.server.AsyncTick -> tCRY:
surge.server.CoreTickThread -> nuFO:
    10:12:void <init>() -> <init>
    17:36:void run() -> run
surge.server.MemoryMonitor -> tCRT:
    long memoryFree -> Aiaw
    long memoryUsed -> GHml
    long memoryMax -> QVkf
    long lastMemoryUsed -> qeJR
    long memoryUsedAfterGC -> gMyl
    long allocated -> aLiD
    long collected -> tmqu
    long collections -> yRmg
    long sms -> OXvU
    long memoryAllocatedPerTick -> lnjh
    long memoryCollectedPerTick -> YUrt
    long memoryFullyAllocatedPerTick -> BtuH
    long mah -> TpwU
    long mahs -> STeK
    23:39:void <init>() -> <init>
    void onAllocationSet() -> DjOy
    46:93:void run() -> run
    97:97:long getMemoryFree() -> Uspl
    102:102:long getMemoryUsed() -> getMemoryUsed
    107:107:long getMemoryMax() -> ivYq
    112:112:long getLastMemoryUsed() -> ycej
    117:117:long getMemoryUsedAfterGC() -> lwSR
    122:122:long getAllocated() -> getAllocated
    127:127:long getCollected() -> aerB
    132:132:long getCollections() -> VDOt
    137:137:long getSms() -> CLwq
    142:142:long getMemoryAllocatedPerTick() -> mGPi
    147:147:long getMemoryCollectedPerTick() -> eilU
    152:152:long getMemoryFullyAllocatedPerTick() -> clVy
    157:157:long getMah() -> ntgQ
    162:162:long getMahs() -> oUfp
surge.server.SuperSampler -> Ipjn:
    org.cyberpwn.gmath.Average ticksPerSecondL -> aLkl
    org.cyberpwn.gmath.Average tickTimeL -> XSTD
    org.cyberpwn.gmath.Average mahL -> hIPa
    double ticksPerSecond -> HBnd
    double ticksPerSecondRaw -> mYAI
    double tickTime -> nuUc
    double tickTimeRaw -> BBRj
    boolean running -> running
    double tickUtilizationRaw -> vlKe
    double tickUtilization -> vlKt
    double leftoverTickTime -> YxXy
    long memoryUse -> iCbd
    long memoryAllocated -> NgXg
    long memoryCollected -> xPOP
    long mahs -> STeK
    int totalChunks -> dETq
    int totalEntities -> GRDI
    int totalDrops -> jNtr
    int totalTiles -> YUuv
    int totalLiving -> TiKH
    int chunksLoaded -> qdkd
    int chunksUnloaded -> INwk
    surge.server.WorldMonitor worldMonitor -> yBOj
    surge.server.TPSMonitor tpsMonitor -> Hmwp
    surge.server.MemoryMonitor memoryMonitor -> BApr
    32:106:void <init>() -> <init>
    110:115:void start() -> start
    119:124:void stop() -> stop
    129:133:void onTick() -> rEYr
    138:138:java.lang.String getTickName() -> gMkM
    143:143:org.cyberpwn.gmath.Average getTicksPerSecondL() -> mrEW
    148:148:double getTicksPerSecond() -> afKD
    153:153:double getTicksPerSecondRaw() -> aToD
    158:158:boolean isRunning() -> isRunning
    163:163:surge.server.TPSMonitor getTpsMonitor() -> vAIn
    168:168:org.cyberpwn.gmath.Average getTickTimeL() -> mPAs
    173:173:double getTickTime() -> teXE
    178:178:double getTickTimeRaw() -> avqa
    183:183:double getTickUtilizationRaw() -> PJmb
    188:188:double getTickUtilization() -> yAbP
    193:193:double getLeftoverTickTime() -> nJSt
    198:198:surge.server.MemoryMonitor getMemoryMonitor() -> yBBp
    203:203:long getMemoryUse() -> MRet
    208:208:long getMemoryAllocated() -> ggag
    213:213:long getMemoryCollected() -> HCVt
    218:218:org.cyberpwn.gmath.Average getMahL() -> GbWW
    223:223:long getMahs() -> oUfp
    228:228:int getTotalChunks() -> KerP
    233:233:int getTotalEntities() -> bqeK
    238:238:int getTotalDrops() -> NVKB
    243:243:int getTotalTiles() -> mqcm
    248:248:int getTotalLiving() -> ryDH
    253:253:surge.server.WorldMonitor getWorldMonitor() -> dwmi
    258:258:int getChunksLoaded() -> OYOi
    263:263:int getChunksUnloaded() -> hawQ
    268:269:void setTicksPerSecondL(org.cyberpwn.gmath.Average) -> FomE
    273:274:void setTickTimeL(org.cyberpwn.gmath.Average) -> Ipea
    278:279:void setMahL(org.cyberpwn.gmath.Average) -> pXbq
    283:284:void setTicksPerSecond(double) -> Ipea
    288:289:void setTicksPerSecondRaw(double) -> FDyO
    293:294:void setTickTime(double) -> UcHM
    298:299:void setTickTimeRaw(double) -> wviU
    303:304:void setRunning(boolean) -> HusQ
    308:309:void setTickUtilizationRaw(double) -> WhmS
    313:314:void setTickUtilization(double) -> QMif
    318:319:void setLeftoverTickTime(double) -> tvQX
    323:324:void setMemoryUse(long) -> leiK
    328:329:void setMemoryAllocated(long) -> LFiw
    333:334:void setMemoryCollected(long) -> oMOi
    338:339:void setMahs(long) -> tupi
    343:344:void setTotalChunks(int) -> yJJi
    348:349:void setTotalEntities(int) -> SBmJ
    353:354:void setTotalDrops(int) -> JtHg
    358:359:void setTotalTiles(int) -> RsOY
    363:364:void setTotalLiving(int) -> iBko
    368:369:void setChunksLoaded(int) -> lnYS
    373:374:void setChunksUnloaded(int) -> oxBt
    378:379:void setWorldMonitor(surge.server.WorldMonitor) -> FomE
    383:384:void setTpsMonitor(surge.server.TPSMonitor) -> FomE
    388:389:void setMemoryMonitor(surge.server.MemoryMonitor) -> FomE
    27:27:void access$0(surge.server.SuperSampler,int) -> FomE
    29:29:void access$1(surge.server.SuperSampler,int) -> Ipea
    30:30:void access$2(surge.server.SuperSampler,int) -> pXbq
    28:28:void access$3(surge.server.SuperSampler,int) -> Suqr
    31:31:void access$4(surge.server.SuperSampler,int) -> tBkn
    32:32:void access$5(surge.server.SuperSampler,int) -> DOtN
    33:33:void access$6(surge.server.SuperSampler,int) -> qtxH
    16:16:void access$7(surge.server.SuperSampler,double) -> FomE
    18:18:void access$8(surge.server.SuperSampler,double) -> Ipea
    12:12:org.cyberpwn.gmath.Average access$9(surge.server.SuperSampler) -> FomE
    16:16:double access$10(surge.server.SuperSampler) -> Ipea
    13:13:org.cyberpwn.gmath.Average access$11(surge.server.SuperSampler) -> pXbq
    18:18:double access$12(surge.server.SuperSampler) -> Suqr
    15:15:void access$13(surge.server.SuperSampler,double) -> pXbq
    17:17:void access$14(surge.server.SuperSampler,double) -> Suqr
    20:20:void access$15(surge.server.SuperSampler,double) -> tBkn
    17:17:double access$16(surge.server.SuperSampler) -> tBkn
    21:21:void access$17(surge.server.SuperSampler,double) -> DOtN
    21:21:double access$18(surge.server.SuperSampler) -> DOtN
    22:22:void access$19(surge.server.SuperSampler,double) -> qtxH
    23:23:void access$20(surge.server.SuperSampler,long) -> FomE
    24:24:void access$21(surge.server.SuperSampler,long) -> Ipea
    25:25:void access$22(surge.server.SuperSampler,long) -> pXbq
    14:14:org.cyberpwn.gmath.Average access$23(surge.server.SuperSampler) -> qtxH
    26:26:void access$24(surge.server.SuperSampler,long) -> Suqr
surge.server.SuperSampler$1 -> Ipjn$1:
    surge.server.SuperSampler this$0 -> ryPt
    1:62:void <init>(surge.server.SuperSampler) -> <init>
    67:74:void updated(int,int,int,int,int,int,int) -> FomE
surge.server.SuperSampler$2 -> Ipjn$2:
    surge.server.SuperSampler this$0 -> ryPt
    1:77:void <init>(surge.server.SuperSampler) -> <init>
    82:91:void onTicked() -> FMsp
surge.server.SuperSampler$3 -> Ipjn$3:
    surge.server.SuperSampler this$0 -> ryPt
    1:94:void <init>(surge.server.SuperSampler) -> <init>
    99:104:void onAllocationSet() -> DjOy
surge.server.TPSMonitor -> Ynwb:
    double tickTimeMS -> RYqO
    double rawTicksPerSecond -> JJIn
    org.cyberpwn.gbench.Profiler tickProfiler -> UQyL
    org.cyberpwn.gbench.Profiler tickTimeProfiler -> sYpI
    boolean ticked -> uFcl
    java.lang.Thread$State lastState -> dgUu
    double actualTickTimeMS -> rhOQ
    double ltt -> cttD
    long lastTick -> cdTQ
    20:33:void <init>() -> <init>
    void onTicked() -> FMsp
    40:84:void run() -> run
    88:116:void processState(java.lang.Thread$State) -> FomE
    120:120:double getTickTimeMS() -> oMYp
    125:125:double getRawTicksPerSecond() -> cJVw
    130:130:org.cyberpwn.gbench.Profiler getTickProfiler() -> wndF
    135:135:boolean isTicked() -> FMuA
    140:141:void markTick() -> FNUb
    145:145:org.cyberpwn.gbench.Profiler getTickTimeProfiler() -> KfVQ
    150:150:java.lang.Thread$State getLastState() -> maEu
    155:155:double getActualTickTimeMS() -> NUkw
surge.server.WorldMonitor -> hrsc:
    boolean chunksChanged -> YpIL
    boolean dropChanged -> vlJX
    boolean tileChanged -> XAqD
    boolean livingChanged -> wLiU
    boolean totalChanged -> pjXl
    boolean updated -> RHou
    int totalChunks -> dETq
    int totalDrops -> jNtr
    int totalTiles -> YUuv
    int totalLiving -> TiKH
    int totalEntities -> GRDI
    int chunksLoaded -> qdkd
    int chunksUnloaded -> INwk
    long ms -> bhqL
    25:44:void <init>() -> <init>
    49:64:void run() -> run
    void updated(int,int,int,int,int,int,int) -> FomE
    71:76:void on(org.bukkit.event.world.ChunkLoadEvent) -> FomE
    81:86:void on(org.bukkit.event.world.ChunkUnloadEvent) -> FomE
    91:92:void on(org.bukkit.event.entity.EntitySpawnEvent) -> FomE
    97:98:void on(org.bukkit.event.entity.EntityDeathEvent) -> FomE
    103:104:void on(org.bukkit.event.player.PlayerDropItemEvent) -> FomE
    109:110:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> FomE
    115:116:void on(org.bukkit.event.entity.EntityPickupItemEvent) -> FomE
    121:122:void on(org.bukkit.event.block.BlockPlaceEvent) -> FomE
    127:128:void on(org.bukkit.event.block.BlockBreakEvent) -> FomE
    132:133:void doUpdate() -> ETDL
    137:188:void sample() -> Pliq
    192:198:void sampleTotalCount() -> YDiq
    202:208:void sampleLivingCount() -> iSwx
    212:221:void sampleTileCount() -> jqNr
    225:231:void sampleDropCount() -> hawJ
    235:241:void sampleChunkCount() -> JlBa
surge.text.PhantomSpinner -> mXQD:
    surge.text.ProgressSpinner s -> IiJb
    surge.text.ProgressSpinner c -> Tpxw
    15:19:void <init>(surge.util.C,surge.util.C,surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
surge.text.ProgressSpinner -> wwOj:
    java.lang.String[] chars -> iTcE
    int index -> index
    surge.text.ProgressSpinner DEFAULT -> jWfF
    surge.text.ProgressSpinner NETWORK -> OajQ
    surge.text.ProgressSpinner CIRCLES -> TqYt
    surge.text.ProgressSpinner RANDOMS -> LaQw
    surge.text.ProgressSpinner MERGERS -> MBUD
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> ydGv
    65:65:int getIndex() -> getIndex
surge.util.Anchor -> UAIg:
    int value() -> value
surge.util.Area -> dnwO:
    org.bukkit.Location location -> nJcY
    java.lang.Double radius -> AOsA
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> FomE
    38:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:surge.util.Cuboid toCuboid() -> HnLg
    58:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> tBkn
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> DOtN
    109:109:boolean isWithin(org.bukkit.Location) -> qtxH
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> Ipea
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> FomE
    176:200:org.bukkit.entity.Entity[] getNearbyEntities() -> awUH
    211:221:org.bukkit.entity.Player[] getNearbyPlayers() -> mPDX
    231:231:org.bukkit.Location getLocation() -> getLocation
    242:243:void setLocation(org.bukkit.Location) -> BtbI
    252:252:java.lang.Double getRadius() -> vQmB
    263:264:void setRadius(java.lang.Double) -> Ipea
    273:278:org.bukkit.Location random() -> FEbi
surge.util.Axis -> QWAF:
    surge.util.Axis X -> nKDW
    surge.util.Axis Y -> gVpV
    surge.util.Axis Z -> nRtK
    int x -> x
    int y -> y
    int z -> z
    surge.util.Axis[] $VALUES -> esNE
    5:5:surge.util.Axis[] values() -> values
    5:5:surge.util.Axis valueOf(java.lang.String) -> valueOf
    16:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> YMYs
    29:29:org.bukkit.util.Vector negative() -> dDhO
    5:9:void <clinit>() -> <clinit>
surge.util.BlastResistance -> HTUu:
    surge.util.BlastResistance BARRIER -> ccuX
    surge.util.BlastResistance BEDROCK -> gFNp
    surge.util.BlastResistance COMMAND -> JuBD
    surge.util.BlastResistance ENDER_PORTAL -> htFy
    surge.util.BlastResistance ENDER_PORTAL_FRAME -> Qgre
    surge.util.BlastResistance ANVIL -> LPTG
    surge.util.BlastResistance ENCHANTMENT_TABLE -> CpMU
    surge.util.BlastResistance OBSIDIAN -> NEXR
    surge.util.BlastResistance ENDER_CHEST -> JImC
    surge.util.BlastResistance WATER -> tCdB
    surge.util.BlastResistance LAVA -> fdoH
    surge.util.BlastResistance STATIONARY_WATER -> sHqJ
    surge.util.BlastResistance DRAGON_EGG -> aLnY
    surge.util.BlastResistance ENDER_STONE -> eGxh
    surge.util.BlastResistance COAL_BLOCK -> SnYw
    surge.util.BlastResistance DIAMOND_BLOCK -> ESpA
    surge.util.BlastResistance EMERALD_BLOCK -> ncsp
    surge.util.BlastResistance GOLD_BLOCK -> yBQb
    surge.util.BlastResistance IRON_BLOCK -> ydTe
    surge.util.BlastResistance REDSTONE_BLOCK -> woPU
    surge.util.BlastResistance BRICK -> Yfwn
    surge.util.BlastResistance BRICK_STAIRS -> klNJ
    surge.util.BlastResistance HARD_CLAY -> sAAM
    surge.util.BlastResistance STONE -> CUxu
    surge.util.BlastResistance SMOOTH_BRICK -> nJag
    surge.util.BlastResistance SMOOTH_STAIRS -> UJKk
    surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> mPPN
    surge.util.BlastResistance STONE_SLAB2 -> uhhW
    surge.util.BlastResistance IRON_DOOR -> APTM
    surge.util.BlastResistance IRON_DOOR_BLOCK -> HLWJ
    surge.util.BlastResistance IRON_TRAPDOOR -> AOrj
    surge.util.BlastResistance MOB_SPAWNER -> bOoy
    surge.util.BlastResistance WEB -> NpKg
    surge.util.BlastResistance DISPENSER -> sQaL
    surge.util.BlastResistance DROPPER -> WHBF
    surge.util.BlastResistance FURNACE -> VoUF
    surge.util.BlastResistance BURNING_FURNACE -> sHrt
    surge.util.BlastResistance BEACON -> EeRu
    surge.util.BlastResistance COAL_ORE -> ycwI
    surge.util.BlastResistance COCOA -> HTic
    surge.util.BlastResistance DIAMOND_ORE -> vJLj
    surge.util.BlastResistance EMERALD_ORE -> bGcF
    surge.util.BlastResistance FENCE -> KEAl
    surge.util.BlastResistance FENCE_GATE -> RtJH
    surge.util.BlastResistance ACACIA_FENCE_GATE -> lMQK
    surge.util.BlastResistance BIRCH_FENCE_GATE -> KgER
    surge.util.BlastResistance DARK_OAK_FENCE_GATE -> GYwP
    surge.util.BlastResistance SPRUCE_FENCE_GATE -> eamU
    surge.util.BlastResistance JUNGLE_FENCE_GATE -> uOYx
    surge.util.BlastResistance ACACIA_FENCE -> FErc
    surge.util.BlastResistance BIRCH_FENCE -> nlhM
    surge.util.BlastResistance DARK_OAK_FENCE -> EmdL
    surge.util.BlastResistance SPRUCE_FENCE -> ofyh
    surge.util.BlastResistance JUNGLE_FENCE -> JuDO
    surge.util.BlastResistance ACACIA_WOOD_STAIRS -> XJgT
    surge.util.BlastResistance BIRCH_WOOD_STAIRS -> FOEW
    surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> RRHE
    surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> KVDQ
    surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> bqvW
    surge.util.BlastResistance QUARTZ_STAIRS -> dMhI
    surge.util.BlastResistance COBBLESTONE_STAIRS -> fnAm
    surge.util.BlastResistance SANDSTONE_STAIRS -> hADA
    surge.util.BlastResistance NETHER_BRICK_STAIRS -> xrUM
    surge.util.BlastResistance WOOD_STAIRS -> NNJS
    surge.util.BlastResistance RED_SANDSTONE_STAIRS -> GkXe
    surge.util.BlastResistance ACACIA_DOOR -> hISS
    surge.util.BlastResistance BIRCH_DOOR -> LYFJ
    surge.util.BlastResistance DARK_OAK_DOOR -> BSYU
    surge.util.BlastResistance SPRUCE_DOOR -> XJem
    surge.util.BlastResistance JUNGLE_DOOR -> YDxJ
    surge.util.BlastResistance GOLD_ORE -> QFRM
    surge.util.BlastResistance HOPPER -> aUaE
    surge.util.BlastResistance IRON_ORE -> rWPx
    surge.util.BlastResistance LAPIS_BLOCK -> TFiv
    surge.util.BlastResistance LAPIS_ORE -> rqCo
    surge.util.BlastResistance QUARTZ_ORE -> Danp
    surge.util.BlastResistance REDSTONE_ORE -> DkAY
    surge.util.BlastResistance TRAP_DOOR -> ObQc
    surge.util.BlastResistance WOOD -> jWlp
    surge.util.BlastResistance CHEST -> kIoA
    surge.util.BlastResistance TRAPPED_CHEST -> cmKm
    surge.util.BlastResistance WORKBENCH -> fTQn
    surge.util.BlastResistance CAULDRON -> KDbn
    surge.util.BlastResistance LOG -> KLrv
    surge.util.BlastResistance LOG_2 -> FqJH
    surge.util.BlastResistance BOOKSHELF -> cljf
    surge.util.BlastResistance BANNER -> yJfi
    surge.util.BlastResistance STANDING_BANNER -> ETSt
    surge.util.BlastResistance WALL_BANNER -> LXhO
    surge.util.BlastResistance JACK_O_LANTERN -> UdDO
    surge.util.BlastResistance MELON_BLOCK -> GIYL
    surge.util.BlastResistance SKULL -> jGLX
    surge.util.BlastResistance PUMPKIN -> gqGg
    surge.util.BlastResistance SIGN -> CNME
    surge.util.BlastResistance SIGN_POST -> HDKk
    surge.util.BlastResistance WALL_SIGN -> hIWE
    surge.util.BlastResistance QUARTZ_BLOCK -> VLsT
    surge.util.BlastResistance NOTE_BLOCK -> hsiO
    surge.util.BlastResistance RED_SANDSTONE -> oDxU
    surge.util.BlastResistance SANDSTONE -> GYwi
    surge.util.BlastResistance WOOL -> GQgd
    surge.util.BlastResistance MONSTER_EGG -> jynt
    surge.util.BlastResistance RAILS -> afdD
    surge.util.BlastResistance ACTIVATOR_RAIL -> qSoe
    surge.util.BlastResistance DETECTOR_RAIL -> PdsI
    surge.util.BlastResistance POWERED_RAIL -> wnsT
    surge.util.BlastResistance CLAY -> RAGJ
    surge.util.BlastResistance DIRT -> bqxD
    surge.util.BlastResistance GRASS -> IhpE
    surge.util.BlastResistance GRAVEL -> QqGx
    surge.util.BlastResistance SPONGE -> VfeT
    surge.util.BlastResistance BREWING_STAND -> UlSL
    surge.util.BlastResistance STONE_BUTTON -> ebOi
    surge.util.BlastResistance WOOD_BUTTON -> eQNV
    surge.util.BlastResistance CAKE_BLOCK -> qdqG
    surge.util.BlastResistance ICE -> vJNB
    surge.util.BlastResistance PACKED_ICE -> Jkrm
    surge.util.BlastResistance LEVER -> PvXY
    surge.util.BlastResistance MYCEL -> ivoT
    surge.util.BlastResistance PISTON_BASE -> fmes
    surge.util.BlastResistance PISTON_EXTENSION -> MmNp
    surge.util.BlastResistance PISTON_MOVING_PIECE -> CpRk
    surge.util.BlastResistance PISTON_STICKY_BASE -> OIAi
    surge.util.BlastResistance GOLD_PLATE -> LGhX
    surge.util.BlastResistance IRON_PLATE -> EKeI
    surge.util.BlastResistance STONE_PLATE -> tUMH
    surge.util.BlastResistance WOOD_PLATE -> RcMD
    surge.util.BlastResistance SAND -> kSBy
    surge.util.BlastResistance SOUL_SAND -> feVV
    surge.util.BlastResistance CACTUS -> FqKr
    surge.util.BlastResistance LADDER -> sQgk
    surge.util.BlastResistance NETHERRACK -> kRad
    surge.util.BlastResistance GLASS -> gyYs
    surge.util.BlastResistance THIN_GLASS -> FFWt
    surge.util.BlastResistance STAINED_GLASS -> uFmG
    surge.util.BlastResistance STAINED_GLASS_PANE -> GtNC
    surge.util.BlastResistance GLOWSTONE -> feUD
    surge.util.BlastResistance REDSTONE_LAMP_OFF -> CWBJ
    surge.util.BlastResistance REDSTONE_LAMP_ON -> LaYk
    surge.util.BlastResistance SEA_LANTERN -> MRyw
    surge.util.BlastResistance BED_BLOCK -> CyBu
    surge.util.BlastResistance DAYLIGHT_DETECTOR -> EStP
    surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> WGfY
    surge.util.BlastResistance HUGE_MUSHROOM_1 -> lMSp
    surge.util.BlastResistance HUGE_MUSHROOM_2 -> PLCr
    surge.util.BlastResistance LEAVES -> FNgM
    surge.util.BlastResistance LEAVES_2 -> TWns
    surge.util.BlastResistance SNOW -> IXPs
    int br -> CgaM
    surge.util.BlastResistance[] $VALUES -> Djcp
    10:10:surge.util.BlastResistance[] values() -> values
    10:10:surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
    164:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> LFsh
    175:190:int get(org.bukkit.Material) -> FomE
    10:159:void <clinit>() -> <clinit>
surge.util.Blocks -> GQSX:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> Ipea
surge.util.C -> bhqL:
    surge.util.C BLACK -> TGON
    surge.util.C DARK_BLUE -> fuuK
    surge.util.C DARK_GREEN -> PuwB
    surge.util.C DARK_AQUA -> ejbT
    surge.util.C DARK_RED -> vlSI
    surge.util.C DARK_PURPLE -> LOws
    surge.util.C GOLD -> UdDj
    surge.util.C GRAY -> HwTG
    surge.util.C DARK_GRAY -> OauH
    surge.util.C BLUE -> aMWW
    surge.util.C GREEN -> TXSS
    surge.util.C AQUA -> KVIm
    surge.util.C RED -> WYKo
    surge.util.C LIGHT_PURPLE -> DPsv
    surge.util.C YELLOW -> pHaM
    surge.util.C WHITE -> DQUY
    surge.util.C MAGIC -> prtX
    surge.util.C BOLD -> rqKR
    surge.util.C STRIKETHROUGH -> vlUa
    surge.util.C UNDERLINE -> iClY
    surge.util.C ITALIC -> tCki
    surge.util.C RESET -> NxeY
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> Corf
    char code -> IGQV
    boolean isFormat -> dhBL
    java.lang.String toString -> NMnt
    java.util.Map BY_ID -> YWAN
    java.util.Map BY_CHAR -> jWow
    java.util.Map dyeChatMap -> Noqq
    java.util.Map chatHexMap -> Iqdb
    java.util.Map dyeHexMap -> EmiF
    int[] $SWITCH_TABLE$surge$util$C -> TaBu
    surge.util.C[] ENUM$VALUES -> Gblw
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> KTqw
    378:378:java.lang.String hex() -> dwky
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:surge.util.C getByChar(char) -> BtbI
    434:442:surge.util.C getByChar(java.lang.String) -> JYtj
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:surge.util.C dyeToChat(org.bukkit.DyeColor) -> Ipea
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> FomE
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> Ipea
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> pXbq
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> vIRO
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> yJJi
    560:578:java.lang.String generateColorTable() -> tKfi
    588:588:org.bukkit.ChatColor chatColor() -> cAfG
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:surge.util.C fromItemMeta(byte) -> FomE
    632:679:byte getItemMeta() -> QovO
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:surge.util.C[] values() -> values
    1:1:surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> gxeU
surge.util.C$1 -> bhqL$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$10 -> bhqL$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$11 -> bhqL$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$12 -> bhqL$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$13 -> bhqL$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$14 -> bhqL$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$15 -> bhqL$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$16 -> bhqL$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$17 -> bhqL$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$18 -> bhqL$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$19 -> bhqL$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$2 -> bhqL$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$20 -> bhqL$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$21 -> bhqL$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$22 -> bhqL$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$3 -> bhqL$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$4 -> bhqL$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$5 -> bhqL$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$6 -> bhqL$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$7 -> bhqL$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$8 -> bhqL$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$9 -> bhqL$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.CDou -> OYKK:
    double number -> dpRM
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:surge.util.CDou set(double) -> CMRg
    23:25:surge.util.CDou add(double) -> kQbo
    30:32:surge.util.CDou sub(double) -> sPib
    37:37:double get() -> get
    42:48:void circ() -> gxdu
surge.util.CMD -> IFWj:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> sbjs
    25:30:void <init>(java.lang.String) -> <init>
    39:40:surge.util.CMD virtual() -> MRgr
    51:53:void execute(org.bukkit.command.CommandSender) -> pXbq
    60:77:void execute() -> execute
surge.util.CNum -> oxIF:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:surge.util.CNum set(int) -> OHCT
    23:25:surge.util.CNum add(int) -> UYuI
    30:32:surge.util.CNum sub(int) -> HdqE
    37:37:int get() -> get
    42:48:void circ() -> gxdu
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> avjS
surge.util.Chunks -> jqJG:
    12:12:void <init>() -> <init>
    23:23:org.cyberpwn.glang.GList getLoadedChunks(org.bukkit.World) -> Suqr
    33:40:org.cyberpwn.glang.GList getLoadedChunks() -> LaHF
    54:54:org.cyberpwn.glang.GList getRadius(org.bukkit.Chunk,int) -> Ipea
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> FomE
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> FomE
    98:98:boolean unload(org.bukkit.Chunk) -> DOtN
    114:124:int unload(org.cyberpwn.glang.GList,boolean,boolean) -> FomE
    138:138:int unload(org.cyberpwn.glang.GList,boolean) -> FomE
    150:150:int unload(org.cyberpwn.glang.GList) -> tBkn
    166:166:boolean isLoaded(java.lang.String,int,int) -> FomE
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> FomE
    201:205:void load(org.cyberpwn.glang.GList) -> DOtN
surge.util.Cuboid -> pXhM:
    java.lang.String worldName -> TPAn
    int x1 -> kBBj
    int y1 -> Vfhp
    int z1 -> DHbo
    int x2 -> NyDi
    int y2 -> JdGc
    int z2 -> vuEu
    43:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(surge.util.Axis) -> FomE
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> pXbq
    93:93:boolean hasPlayers() -> KDQs
    98:110:org.cyberpwn.glang.GList getPlayers() -> CwiM
    115:166:org.cyberpwn.glang.GList getEntities() -> qeAY
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(surge.util.Cuboid) -> <init>
    210:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    239:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    250:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:surge.util.Cuboid flatten(int) -> lTeb
    287:287:org.bukkit.Location getLowerNE() -> NEKQ
    298:298:org.bukkit.Location getUpperSW() -> cIvG
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> cJVd
    348:348:int getSizeY() -> lfRa
    358:358:int getSizeZ() -> PlsR
    368:368:int getLowerX() -> kcPD
    378:378:int getLowerY() -> ThaT
    388:388:int getLowerZ() -> sQWm
    398:398:int getUpperX() -> JRRj
    408:408:int getUpperY() -> cSKB
    418:418:int getUpperZ() -> NVOU
    428:438:org.bukkit.block.Block[] corners() -> YUlu
    454:469:surge.util.Cuboid expand(surge.util.Cuboid$CuboidDirection,int) -> FomE
    484:484:surge.util.Cuboid shift(surge.util.Cuboid$CuboidDirection,int) -> Ipea
    500:514:surge.util.Cuboid outset(surge.util.Cuboid$CuboidDirection,int) -> pXbq
    530:530:surge.util.Cuboid inset(surge.util.Cuboid$CuboidDirection,int) -> Suqr
    546:546:boolean contains(int,int,int) -> pXbq
    558:558:boolean contains(org.bukkit.block.Block) -> pXbq
    570:570:boolean contains(org.bukkit.Location) -> tBlP
    580:580:int volume() -> LqkP
    591:601:byte averageLightLevel() -> JcTh
    612:612:surge.util.Cuboid contract() -> APIH
    626:666:surge.util.Cuboid contract(surge.util.Cuboid$CuboidDirection) -> FomE
    680:695:surge.util.Cuboid getFace(surge.util.Cuboid$CuboidDirection) -> Ipea
    708:715:boolean containsOnly(org.bukkit.Material) -> Ipea
    727:739:surge.util.Cuboid getBoundingCuboid(surge.util.Cuboid) -> FomE
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> Suqr
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> FomE
    786:800:java.util.List getChunks() -> Fxjh
    815:819:void fill(int,byte) -> FomE
    843:843:java.util.Iterator iterator() -> iterator
    854:854:surge.util.Cuboid clone() -> VwXp
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    27:27:java.lang.Object clone() -> clone
surge.util.Cuboid$1 -> pXhM$1:
    surge.util.Cuboid this$0 -> hHyB
    99:99:void <init>(surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> DOtN
    99:99:java.lang.Object onAdapt(java.lang.Object) -> Ipea
surge.util.Cuboid$2 -> pXhM$2:
    int[] $SwitchMap$surge$util$Axis -> DkFx
    int[] $SwitchMap$surge$util$Cuboid$CuboidDirection -> AjNh
    60:454:void <clinit>() -> <clinit>
surge.util.Cuboid$CuboidDirection -> pXhM$FomE:
    surge.util.Cuboid$CuboidDirection North -> CWBo
    surge.util.Cuboid$CuboidDirection East -> Iyua
    surge.util.Cuboid$CuboidDirection South -> JSEy
    surge.util.Cuboid$CuboidDirection West -> Blrf
    surge.util.Cuboid$CuboidDirection Up -> inbo
    surge.util.Cuboid$CuboidDirection Down -> ebWA
    surge.util.Cuboid$CuboidDirection Horizontal -> AXnM
    surge.util.Cuboid$CuboidDirection Vertical -> UlYd
    surge.util.Cuboid$CuboidDirection Both -> LraI
    surge.util.Cuboid$CuboidDirection Unknown -> IWuV
    surge.util.Cuboid$CuboidDirection[] $VALUES -> eIDa
    916:916:surge.util.Cuboid$CuboidDirection[] values() -> values
    916:916:surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:surge.util.Cuboid$CuboidDirection opposite() -> qTBd
    916:928:void <clinit>() -> <clinit>
surge.util.Cuboid$CuboidIterator -> pXhM$Ipea:
    org.bukkit.World w -> fKfa
    int baseX -> tCmx
    int baseY -> gplg
    int baseZ -> TWtn
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> Xdag
    int sizeY -> cvDF
    int sizeZ -> xOym
    surge.util.Cuboid this$0 -> hHyB
    876:885:void <init>(surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    868:868:java.lang.Object next() -> next
surge.util.CuboidException -> YEFJ:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
surge.util.D -> bWpL:
    org.cyberpwn.glang.GList buffer -> nubI
    10:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    14:18:void flush() -> flush
    22:33:void log(java.lang.String,java.lang.String) -> Ipea
    37:38:void l(java.lang.Object,java.lang.String) -> FomE
    42:43:void s(java.lang.Object,java.lang.String) -> Ipea
    47:48:void v(java.lang.Object,java.lang.String) -> pXbq
    52:53:void w(java.lang.Object,java.lang.String) -> Suqr
    57:58:void f(java.lang.Object,java.lang.String) -> tBkn
    62:69:void l(java.lang.String) -> SBmJ
    73:80:void s(java.lang.String) -> JtHg
    84:91:void v(java.lang.String) -> RsOY
    95:102:void w(java.lang.String) -> iBko
    106:113:void f(java.lang.String) -> lnYS
surge.util.DMSRequire -> uOEu:
    surge.util.DMSRequirement value() -> hkKK
surge.util.DMSRequirement -> PvAS:
    surge.util.DMSRequirement SQL -> jGRF
    surge.util.DMSRequirement[] ENUM$VALUES -> iToW
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.DMSRequirement[] values() -> values
    1:1:surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
surge.util.Depend -> ooWb:
    surge.util.Depend VAULT -> HMAa
    surge.util.Depend FAWE -> IPEB
    surge.util.Depend WORLDEDIT -> PSvv
    surge.util.Depend PROTOLIB -> OkGw
    surge.util.Depend CITIZENS -> TaEf
    java.lang.String name -> name
    surge.util.Depend[] ENUM$VALUES -> LXln
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:surge.util.Depend[] values() -> values
    1:1:surge.util.Depend valueOf(java.lang.String) -> valueOf
surge.util.Dimension -> jFYO:
    int width -> width
    int height -> height
    int depth -> depth
    25:29:void <init>(int,int,int) -> <init>
    40:44:void <init>(int,int) -> <init>
    53:68:surge.util.DimensionFace getPane() -> FMvc
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
surge.util.DimensionFace -> hbUq:
    surge.util.DimensionFace X -> vIrf
    surge.util.DimensionFace Y -> EKgs
    surge.util.DimensionFace Z -> yJki
    surge.util.DimensionFace[] $VALUES -> DsYc
    8:8:surge.util.DimensionFace[] values() -> values
    8:8:surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
    8:8:void <init>(java.lang.String,int) -> <init>
    8:23:void <clinit>() -> <clinit>
surge.util.Direction -> rNQH:
    surge.util.Direction U -> HfTN
    surge.util.Direction D -> NxfU
    surge.util.Direction N -> uqcq
    surge.util.Direction S -> xGhc
    surge.util.Direction E -> iUPR
    surge.util.Direction W -> AHOd
    int x -> x
    int y -> y
    int z -> z
    surge.util.Cuboid$CuboidDirection f -> cJou
    int[] $SWITCH_TABLE$surge$util$Direction -> URiO
    surge.util.Direction[] ENUM$VALUES -> SLcL
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:surge.util.Direction reverse() -> BSLD
    61:61:int x() -> EeGa
    66:66:int y() -> NDlo
    71:71:int z() -> z
    76:76:surge.util.Cuboid$CuboidDirection f() -> nIwN
    81:81:org.cyberpwn.glang.GList news() -> nRhU
    86:86:org.cyberpwn.glang.GList udnews() -> FNUo
    91:101:surge.util.Direction facing(org.bukkit.entity.Player) -> qdXB
    115:147:surge.util.Direction fromByte(byte) -> Ipea
    158:176:byte byteValue() -> byteValue
    1:1:surge.util.Direction[] values() -> values
    1:1:surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> Ywny
surge.util.DynamicConfiguration -> NxMp:
surge.util.DynamicTracker -> QxfK:
surge.util.Embedded -> fKNK:
    org.cyberpwn.glang.GList get() -> WiYT
    void add(java.lang.Object) -> add
surge.util.FU -> EudC:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> FomE
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> Ipea
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> pXbq
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> Suqr
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
surge.util.Fingerprint -> qJln:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> oxBt
surge.util.Health -> DjOy:
    double hp -> HwWn
    20:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> SKjT
    41:41:double getHearts() -> ECBj
    51:51:double getHalfHearts() -> Fggl
    61:61:int getFlatHalfHearts() -> Wyye
surge.util.IO -> Uspl:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
surge.util.Items -> ivYq:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> FomE
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> FomE
    55:55:boolean is(org.bukkit.inventory.ItemStack,surge.util.MaterialBlock) -> FomE
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> FomE
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> FomE
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> Ipea
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> pXbq
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> Suqr
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> FomE
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> FomE
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> FomE
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> FomE
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> tBkn
    216:221:surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> DOtN
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> qtxH
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> BtbI
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> tBlP
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> FomE
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> fBUA
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> HusQ
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> FomE
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> FomE
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> Ipea
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> FomE
surge.util.MSound -> ycej:
    surge.util.MSound AMBIENCE_CAVE -> TiYG
    surge.util.MSound AMBIENCE_RAIN -> TqiN
    surge.util.MSound AMBIENCE_THUNDER -> UBIJ
    surge.util.MSound ANVIL_BREAK -> eYgX
    surge.util.MSound ANVIL_LAND -> cJom
    surge.util.MSound ANVIL_USE -> yuby
    surge.util.MSound ARROW_HIT -> KDjy
    surge.util.MSound BURP -> Heuf
    surge.util.MSound CHEST_CLOSE -> Gkcn
    surge.util.MSound CHEST_OPEN -> rNkj
    surge.util.MSound CLICK -> TqiT
    surge.util.MSound DOOR_CLOSE -> VDjv
    surge.util.MSound DOOR_OPEN -> eaxW
    surge.util.MSound DRINK -> WsCc
    surge.util.MSound EAT -> bHOC
    surge.util.MSound EXPLODE -> Budx
    surge.util.MSound FALL_BIG -> DPyF
    surge.util.MSound FALL_SMALL -> qBvt
    surge.util.MSound FIRE -> YFCa
    surge.util.MSound FIRE_IGNITE -> JJWw
    surge.util.MSound FIZZ -> IyyI
    surge.util.MSound FUSE -> kdJB
    surge.util.MSound GLASS -> pHdc
    surge.util.MSound HURT_FLESH -> twTc
    surge.util.MSound ITEM_BREAK -> DPvo
    surge.util.MSound ITEM_PICKUP -> Covo
    surge.util.MSound LAVA -> YNSm
    surge.util.MSound LAVA_POP -> aEJP
    surge.util.MSound LEVEL_UP -> WGmL
    surge.util.MSound MINECART_BASE -> dFCG
    surge.util.MSound MINECART_INSIDE -> JuLl
    surge.util.MSound NOTE_BASS -> LsCH
    surge.util.MSound NOTE_PIANO -> pjhL
    surge.util.MSound NOTE_BASS_DRUM -> IyyR
    surge.util.MSound NOTE_STICKS -> SfUO
    surge.util.MSound NOTE_BASS_GUITAR -> YWEM
    surge.util.MSound NOTE_SNARE_DRUM -> mYNH
    surge.util.MSound NOTE_PLING -> OQWf
    surge.util.MSound ORB_PICKUP -> ChHY
    surge.util.MSound PISTON_EXTEND -> lwlk
    surge.util.MSound PISTON_RETRACT -> fBwQ
    surge.util.MSound PORTAL -> LaaI
    surge.util.MSound PORTAL_TRAVEL -> ylqB
    surge.util.MSound PORTAL_TRIGGER -> IaJs
    surge.util.MSound SHOOT_ARROW -> IOhh
    surge.util.MSound SPLASH -> XmVn
    surge.util.MSound SPLASH2 -> bYRC
    surge.util.MSound STEP_GRASS -> gpqa
    surge.util.MSound STEP_GRAVEL -> miqn
    surge.util.MSound STEP_LADDER -> Fprr
    surge.util.MSound STEP_SAND -> FiCo
    surge.util.MSound STEP_SNOW -> bjRk
    surge.util.MSound STEP_STONE -> toFr
    surge.util.MSound STEP_WOOD -> cluh
    surge.util.MSound STEP_WOOL -> VoaY
    surge.util.MSound SWIM -> jhxe
    surge.util.MSound WATER -> jWvs
    surge.util.MSound WOOD_CLICK -> AHPi
    surge.util.MSound BAT_DEATH -> XvHa
    surge.util.MSound BAT_HURT -> ioGo
    surge.util.MSound BAT_IDLE -> dVgF
    surge.util.MSound BAT_LOOP -> ryaO
    surge.util.MSound BAT_TAKEOFF -> wDjR
    surge.util.MSound BLAZE_BREATH -> EnPJ
    surge.util.MSound BLAZE_DEATH -> eQWv
    surge.util.MSound BLAZE_HIT -> iCrL
    surge.util.MSound CAT_HISS -> TqjO
    surge.util.MSound CAT_HIT -> RIaJ
    surge.util.MSound CAT_MEOW -> tfVB
    surge.util.MSound CAT_PURR -> uOfJ
    surge.util.MSound CAT_PURREOW -> wxPM
    surge.util.MSound CHICKEN_IDLE -> AYTS
    surge.util.MSound CHICKEN_HURT -> pHgM
    surge.util.MSound CHICKEN_EGG_POP -> GkeL
    surge.util.MSound CHICKEN_WALK -> MvGm
    surge.util.MSound COW_IDLE -> afmn
    surge.util.MSound COW_HURT -> uyyO
    surge.util.MSound COW_WALK -> cvEu
    surge.util.MSound CREEPER_HISS -> iUUG
    surge.util.MSound CREEPER_DEATH -> DkLu
    surge.util.MSound ENDERDRAGON_DEATH -> ydaw
    surge.util.MSound ENDERDRAGON_GROWL -> NNWU
    surge.util.MSound ENDERDRAGON_HIT -> MScv
    surge.util.MSound ENDERDRAGON_WINGS -> HCst
    surge.util.MSound ENDERMAN_DEATH -> nKRB
    surge.util.MSound ENDERMAN_HIT -> mHQg
    surge.util.MSound ENDERMAN_IDLE -> kdOM
    surge.util.MSound ENDERMAN_TELEPORT -> QNqU
    surge.util.MSound ENDERMAN_SCREAM -> HCwB
    surge.util.MSound ENDERMAN_STARE -> iDUs
    surge.util.MSound GHAST_SCREAM -> OtAD
    surge.util.MSound GHAST_SCREAM2 -> Tqlw
    surge.util.MSound GHAST_CHARGE -> APdF
    surge.util.MSound GHAST_DEATH -> Yxkq
    surge.util.MSound GHAST_FIREBALL -> macQ
    surge.util.MSound GHAST_MOAN -> kuPI
    surge.util.MSound IRONGOLEM_DEATH -> MlyO
    surge.util.MSound IRONGOLEM_HIT -> kBKT
    surge.util.MSound IRONGOLEM_THROW -> VxUL
    surge.util.MSound IRONGOLEM_WALK -> nSdc
    surge.util.MSound MAGMACUBE_WALK -> EKpB
    surge.util.MSound MAGMACUBE_WALK2 -> URnP
    surge.util.MSound MAGMACUBE_JUMP -> XCFK
    surge.util.MSound PIG_IDLE -> wpBW
    surge.util.MSound PIG_DEATH -> fnPq
    surge.util.MSound PIG_WALK -> Wadl
    surge.util.MSound SHEEP_IDLE -> jFxF
    surge.util.MSound SHEEP_SHEAR -> bbDy
    surge.util.MSound SHEEP_WALK -> OkPM
    surge.util.MSound SILVERFISH_HIT -> RQtp
    surge.util.MSound SILVERFISH_KILL -> yufb
    surge.util.MSound SILVERFISH_IDLE -> QXCC
    surge.util.MSound SILVERFISH_WALK -> ELOI
    surge.util.MSound SKELETON_IDLE -> YMvo
    surge.util.MSound SKELETON_DEATH -> qmnb
    surge.util.MSound SKELETON_HURT -> ooyJ
    surge.util.MSound SKELETON_WALK -> DILM
    surge.util.MSound SLIME_ATTACK -> oghb
    surge.util.MSound SLIME_WALK -> VDmn
    surge.util.MSound SLIME_WALK2 -> XTFO
    surge.util.MSound SPIDER_IDLE -> APdg
    surge.util.MSound SPIDER_DEATH -> hARU
    surge.util.MSound SPIDER_WALK -> gOPe
    surge.util.MSound WITHER_DEATH -> aENg
    surge.util.MSound WITHER_HURT -> yluJ
    surge.util.MSound WITHER_IDLE -> cugq
    surge.util.MSound WITHER_SHOOT -> kuNj
    surge.util.MSound WITHER_SPAWN -> bHRF
    surge.util.MSound WOLF_BARK -> vIxo
    surge.util.MSound WOLF_DEATH -> axSO
    surge.util.MSound WOLF_GROWL -> gyfi
    surge.util.MSound WOLF_HOWL -> oMxp
    surge.util.MSound WOLF_HURT -> tnjc
    surge.util.MSound WOLF_PANT -> WGsq
    surge.util.MSound WOLF_SHAKE -> stYH
    surge.util.MSound WOLF_WALK -> sbvd
    surge.util.MSound WOLF_WHINE -> sbwD
    surge.util.MSound ZOMBIE_METAL -> MTJQ
    surge.util.MSound ZOMBIE_WOOD -> ymXv
    surge.util.MSound ZOMBIE_WOODBREAK -> GJGn
    surge.util.MSound ZOMBIE_IDLE -> GkjT
    surge.util.MSound ZOMBIE_DEATH -> kRnH
    surge.util.MSound ZOMBIE_HURT -> scWN
    surge.util.MSound ZOMBIE_INFECT -> Evei
    surge.util.MSound ZOMBIE_UNFECT -> UuSo
    surge.util.MSound ZOMBIE_REMEDY -> qfBO
    surge.util.MSound ZOMBIE_WALK -> kSON
    surge.util.MSound ZOMBIE_PIG_IDLE -> JBPV
    surge.util.MSound ZOMBIE_PIG_ANGRY -> mivH
    surge.util.MSound ZOMBIE_PIG_DEATH -> lMaO
    surge.util.MSound ZOMBIE_PIG_HURT -> PebQ
    surge.util.MSound DIG_WOOL -> Jtqh
    surge.util.MSound DIG_GRASS -> hkgW
    surge.util.MSound DIG_GRAVEL -> jFxq
    surge.util.MSound DIG_SAND -> DtBY
    surge.util.MSound DIG_SNOW -> vuQB
    surge.util.MSound DIG_STONE -> NWKn
    surge.util.MSound DIG_WOOD -> jPKa
    surge.util.MSound FIREWORK_BLAST -> QGBw
    surge.util.MSound FIREWORK_BLAST2 -> jaMU
    surge.util.MSound FIREWORK_LARGE_BLAST -> Kodr
    surge.util.MSound FIREWORK_LARGE_BLAST2 -> fnQm
    surge.util.MSound FIREWORK_TWINKLE -> Nxmt
    surge.util.MSound FIREWORK_TWINKLE2 -> YWLJ
    surge.util.MSound FIREWORK_LAUNCH -> PDAJ
    surge.util.MSound SUCCESSFUL_HIT -> cuin
    surge.util.MSound HORSE_ANGRY -> jrNN
    surge.util.MSound HORSE_ARMOR -> AjXt
    surge.util.MSound HORSE_BREATHE -> apDh
    surge.util.MSound HORSE_DEATH -> Eeee
    surge.util.MSound HORSE_GALLOP -> PKqw
    surge.util.MSound HORSE_HIT -> Rkjt
    surge.util.MSound HORSE_IDLE -> rhfb
    surge.util.MSound HORSE_JUMP -> bGuU
    surge.util.MSound HORSE_LAND -> uqpR
    surge.util.MSound HORSE_SADDLE -> OkSc
    surge.util.MSound HORSE_SOFT -> ydio
    surge.util.MSound HORSE_WOOD -> XBiA
    surge.util.MSound DONKEY_ANGRY -> wpFT
    surge.util.MSound DONKEY_DEATH -> dhPJ
    surge.util.MSound DONKEY_HIT -> URrJ
    surge.util.MSound DONKEY_IDLE -> GIhx
    surge.util.MSound HORSE_SKELETON_DEATH -> aUtY
    surge.util.MSound HORSE_SKELETON_HIT -> yCGj
    surge.util.MSound HORSE_SKELETON_IDLE -> esbh
    surge.util.MSound HORSE_ZOMBIE_DEATH -> KoiC
    surge.util.MSound HORSE_ZOMBIE_HIT -> FOXN
    surge.util.MSound HORSE_ZOMBIE_IDLE -> nTIp
    surge.util.MSound VILLAGER_DEATH -> RJHV
    surge.util.MSound VILLAGER_HAGGLE -> lftL
    surge.util.MSound VILLAGER_HIT -> lUqy
    surge.util.MSound VILLAGER_IDLE -> Lixb
    surge.util.MSound VILLAGER_NO -> ObaQ
    surge.util.MSound VILLAGER_YES -> sAUd
    java.lang.String pre19sound -> jPMb
    java.lang.String post19sound -> lVTC
    org.bukkit.Sound resolvedSound -> IrQq
    surge.util.MSound[] ENUM$VALUES -> cSgy
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> EeEp
    1:1:surge.util.MSound[] values() -> values
    1:1:surge.util.MSound valueOf(java.lang.String) -> valueOf
surge.util.MaterialBlock -> lwSR:
    org.bukkit.Material material -> KogV
    java.lang.Byte data -> EfEt
    28:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    34:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    45:48:void <init>(org.bukkit.block.BlockState) -> <init>
    51:54:void <init>(org.bukkit.block.Block) -> <init>
    57:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> VfVJ
    79:80:void setData(java.lang.Byte) -> FomE
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
surge.util.P -> aerB:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> OHCT
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> HnOX
    68:68:boolean isAnyOnline() -> upnk
    80:80:org.cyberpwn.glang.GList inWorld(org.bukkit.World) -> tBkn
    92:104:org.cyberpwn.glang.GList inChunk(org.bukkit.Chunk) -> qtxH
    118:118:org.cyberpwn.glang.GList inArea(org.bukkit.Location,double) -> FomE
    132:132:org.cyberpwn.glang.GList inArea(org.bukkit.Location,int) -> FomE
    143:144:void disable(org.bukkit.entity.Player) -> leiK
    154:155:void enable(org.bukkit.entity.Player) -> LFiw
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> FomE
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> Ipea
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> oMOi
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> FomE
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> tupi
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> pXbq
    300:300:boolean canFindPlayer(java.lang.String) -> UYuI
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> HdqE
    338:345:org.cyberpwn.glang.GList onlinePlayers() -> YVNL
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> tvQj
    368:371:void clear(org.bukkit.entity.Player) -> OGbr
    381:385:void clearEffects(org.bukkit.entity.Player) -> LyoK
    398:399:void heal(org.bukkit.entity.Player,double) -> FomE
    409:410:void heal(org.bukkit.entity.Player) -> EBVh
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> HBnd
    432:433:void resetHunger(org.bukkit.entity.Player) -> nJLP
    443:444:void kill(org.bukkit.entity.Player) -> afKD
    455:455:surge.util.Shape getShape(org.bukkit.entity.Player) -> FDyO
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> UcHM
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> FomE
surge.util.P$1 -> aerB$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> DOtN
    1:1:java.lang.Object onAdapt(java.lang.Object) -> Ipea
surge.util.P$2 -> aerB$2:
    java.lang.Double val$doff -> EfEv
    org.bukkit.entity.Player val$e -> QNtk
    org.bukkit.entity.Entity[] val$result -> LPgS
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> fBUA
surge.util.PE -> VDOt:
    surge.util.PE ABSORPTION -> OYpV
    surge.util.PE BLINDNESS -> jqnn
    surge.util.PE CONFUSION -> qTaJ
    surge.util.PE DAMAGE_RESISTANCE -> KohB
    surge.util.PE FAST_DIGGING -> Wags
    surge.util.PE FIRE_RESISTANCE -> DcFJ
    surge.util.PE GLOWING -> lgXQ
    surge.util.PE HARM -> LsMt
    surge.util.PE HEAL -> aVXB
    surge.util.PE HEALTH_BOOST -> YqDE
    surge.util.PE HUNGER -> hkkr
    surge.util.PE INCREASE_DAMAGE -> vmDy
    surge.util.PE INVISIBILITY -> XSmD
    surge.util.PE JUMP -> aoiL
    surge.util.PE LEVITATION -> xYYB
    surge.util.PE LUCK -> ySjV
    surge.util.PE NIGHT_VISION -> GJMH
    surge.util.PE POISON -> iLlX
    surge.util.PE REGENERATION -> DcGG
    surge.util.PE SATURATION -> NgrS
    surge.util.PE SLOW -> TYBu
    surge.util.PE SLOW_DIGGING -> rGFH
    surge.util.PE SPEED -> LsMH
    surge.util.PE UNLUCK -> XTLP
    surge.util.PE WATER_BREATHING -> XCKC
    surge.util.PE WEAKNESS -> ohPO
    surge.util.PE WITHER -> ktti
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> FomE
    144:144:surge.util.PE d(int) -> TxuP
    156:156:surge.util.PE a(int) -> XJMN
    166:166:org.bukkit.potion.PotionEffect c() -> govQ
    177:178:void c(org.bukkit.entity.LivingEntity) -> tBkn
    182:183:void crm(org.bukkit.entity.LivingEntity) -> DOtN
    187:188:void rm(org.bukkit.entity.LivingEntity) -> qtxH
surge.util.ParticleEffect -> CLwq:
    surge.util.ParticleEffect EXPLOSION_NORMAL -> FGHU
    surge.util.ParticleEffect EXPLOSION_LARGE -> UmFf
    surge.util.ParticleEffect EXPLOSION_HUGE -> qfEU
    surge.util.ParticleEffect FIREWORKS_SPARK -> QWgu
    surge.util.ParticleEffect WATER_BUBBLE -> xrhy
    surge.util.ParticleEffect WATER_SPLASH -> OHpm
    surge.util.ParticleEffect WATER_WAKE -> inmm
    surge.util.ParticleEffect SUSPENDED -> OkUJ
    surge.util.ParticleEffect SUSPENDED_DEPTH -> lVUR
    surge.util.ParticleEffect CRIT -> IaRn
    surge.util.ParticleEffect CRIT_MAGIC -> EwIn
    surge.util.ParticleEffect SMOKE_NORMAL -> NhQj
    surge.util.ParticleEffect SMOKE_LARGE -> lVTr
    surge.util.ParticleEffect SPELL -> GJLC
    surge.util.ParticleEffect SPELL_INSTANT -> UmFb
    surge.util.ParticleEffect SPELL_MOB -> IHBA
    surge.util.ParticleEffect SPELL_MOB_AMBIENT -> HxBp
    surge.util.ParticleEffect SPELL_WITCH -> EviT
    surge.util.ParticleEffect DRIP_WATER -> DsfV
    surge.util.ParticleEffect DRIP_LAVA -> woih
    surge.util.ParticleEffect VILLAGER_ANGRY -> lEWN
    surge.util.ParticleEffect VILLAGER_HAPPY -> qnXl
    surge.util.ParticleEffect TOWN_AURA -> BSoY
    surge.util.ParticleEffect NOTE -> vRtJ
    surge.util.ParticleEffect PORTAL -> ekUy
    surge.util.ParticleEffect ENCHANTMENT_TABLE -> JBVC
    surge.util.ParticleEffect FLAME -> JBUh
    surge.util.ParticleEffect LAVA -> IrVx
    surge.util.ParticleEffect FOOTSTEP -> PUIS
    surge.util.ParticleEffect CLOUD -> cSnA
    surge.util.ParticleEffect REDSTONE -> SgCW
    surge.util.ParticleEffect SNOWBALL -> apKx
    surge.util.ParticleEffect SNOW_SHOVEL -> aNIX
    surge.util.ParticleEffect SLIME -> FXLl
    surge.util.ParticleEffect HEART -> IYFG
    surge.util.ParticleEffect BARRIER -> pABX
    surge.util.ParticleEffect ITEM_CRACK -> xGwj
    surge.util.ParticleEffect BLOCK_CRACK -> DRFm
    surge.util.ParticleEffect BLOCK_DUST -> qwIf
    surge.util.ParticleEffect WATER_DROP -> Qhle
    surge.util.ParticleEffect ITEM_TAKE -> qDEU
    surge.util.ParticleEffect MOB_APPEARANCE -> uibo
    surge.util.ParticleEffect DRAGON_BREATH -> kcuf
    surge.util.ParticleEffect END_ROD -> kJcp
    surge.util.ParticleEffect DAMAGE_INDICATOR -> YpeC
    surge.util.ParticleEffect SWEEP_ATTACK -> mrky
    java.util.Map NAME_MAP -> wNFf
    java.util.Map ID_MAP -> eQbY
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> Qylv
    java.util.List properties -> lMeh
    surge.util.ParticleEffect[] $VALUES -> PwJs
    51:51:surge.util.ParticleEffect[] values() -> values
    51:51:surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
    467:472:void <init>(java.lang.String,int,java.lang.String,int,int,surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> tKhR
    511:511:boolean hasProperty(surge.util.ParticleEffect$ParticleProperty) -> FomE
    521:525:boolean isSupported() -> isSupported
    537:545:surge.util.ParticleEffect fromName(java.lang.String) -> avjS
    557:565:surge.util.ParticleEffect fromId(int) -> hPim
    577:578:boolean isWater(org.bukkit.Location) -> HusQ
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> FomE
    615:615:boolean isDataCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleData) -> FomE
    629:629:boolean isColorCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor) -> FomE
    665:681:void display(float,int,org.bukkit.Location,double) -> FomE
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> FomE
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> FomE
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> FomE
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> FomE
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> FomE
    899:912:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> FomE
    934:947:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> FomE
    968:969:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> FomE
    1004:1020:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> FomE
    1055:1068:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> FomE
    1102:1103:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> FomE
    1130:1143:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> FomE
    1169:1182:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> FomE
    1207:1208:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> FomE
    51:452:void <clinit>() -> <clinit>
surge.util.ParticleEffect$BlockData -> CLwq$FomE:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$ItemData -> CLwq$Ipea:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$NoteColor -> CLwq$pXbq:
    int note -> note
    1563:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> KMDx
    1594:1594:float getValueY() -> MIxn
    1605:1605:float getValueZ() -> hQVt
surge.util.ParticleEffect$OrdinaryColor -> CLwq$Suqr:
    int red -> red
    int green -> green
    int blue -> blue
    1436:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> KMDx
    1526:1526:float getValueY() -> MIxn
    1537:1537:float getValueZ() -> hQVt
surge.util.ParticleEffect$ParticleColor -> CLwq$tBkn:
    1383:1383:void <init>() -> <init>
    float getValueX() -> KMDx
    float getValueY() -> MIxn
    float getValueZ() -> hQVt
surge.util.ParticleEffect$ParticleColorException -> CLwq$DOtN:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticleData -> CLwq$qtxH:
    org.bukkit.Material material -> KogV
    byte data -> mHYB
    int[] packetData -> txAk
    1266:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> vcQD
    1309:1309:java.lang.String getPacketDataString() -> QpYS
surge.util.ParticleEffect$ParticleDataException -> CLwq$BtbI:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticlePacket -> CLwq$tBlP:
    int version -> version
    java.lang.Class enumParticle -> jPPr
    java.lang.reflect.Constructor packetConstructor -> DkWo
    java.lang.reflect.Method getHandle -> JKIJ
    java.lang.reflect.Field playerConnection -> fDGr
    java.lang.reflect.Method sendPacket -> IqxT
    boolean initialized -> initialized
    surge.util.ParticleEffect effect -> qUJE
    float offsetX -> SLqc
    float offsetY -> ymbE
    float offsetZ -> uOsR
    float speed -> Swei
    int amount -> lNJH
    boolean longDistance -> ejxM
    surge.util.ParticleEffect$ParticleData data -> gWlA
    java.lang.Object packet -> MCQN
    1746:1764:void <init>(surge.util.ParticleEffect,float,float,float,float,int,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> TOBu
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> FomE
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> Ipea
    2004:2018:void sendTo(org.bukkit.Location,double) -> Ipea
surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> CLwq$tBlP$FomE:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> CLwq$tBlP$Ipea:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> CLwq$tBlP$pXbq:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticleProperty -> CLwq$fBUA:
    surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> kuYw
    surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> fvke
    surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> LkBb
    surge.util.ParticleEffect$ParticleProperty COLORABLE -> toSe
    surge.util.ParticleEffect$ParticleProperty[] $VALUES -> SnuT
    1219:1219:surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1219:1219:surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1219:1236:void <clinit>() -> <clinit>
surge.util.ParticleEffect$ParticleVersionException -> CLwq$HusQ:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
surge.util.Paste -> mGPi:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> lTeb
surge.util.Persist -> eilU:
surge.util.PluginUtil -> clVy:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> Suqr
    81:85:void enableAll() -> Dito
    95:99:void disable(org.bukkit.plugin.Plugin) -> tBkn
    106:110:void disableAll() -> uXAS
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> DOtN
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> FomE
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> TxuP
    169:172:java.util.List getPluginNames(boolean) -> TOBu
    184:187:java.lang.String getPluginVersion(java.lang.String) -> XJMN
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> qtxH
    237:316:java.util.List findByCommand(java.lang.String) -> hPim
    337:338:void load(org.bukkit.plugin.Plugin) -> BtbI
    342:364:java.lang.String getPluginFileName(java.lang.String) -> idrH
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> FomE
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> tBlP
    480:484:void reloadAll() -> kQrc
    496:622:void unload(org.bukkit.plugin.Plugin) -> fBUA
surge.util.PoolCount -> ntgQ:
surge.util.PoolDescriber -> oUfp:
surge.util.PoolNanoThrottle -> mrEW:
surge.util.PositionalSelector -> aToD:
    org.cyberpwn.glang.GSet allowedChunks -> OkYx
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> LqmK
    39:40:void addChunk(org.bukkit.Chunk) -> BtbI
    44:44:org.cyberpwn.glang.GSet getAllowedChunks() -> gWIP
surge.util.Protocol -> vAIn:
    surge.util.Protocol LATEST -> CVua
    surge.util.Protocol R1_12_2 -> ixEI
    surge.util.Protocol R1_12_2_PRE -> Gtat
    surge.util.Protocol R1_12_1 -> WbON
    surge.util.Protocol R1_12 -> TYFE
    surge.util.Protocol R1_11_2 -> mGyt
    surge.util.Protocol R1_11_1 -> DRGa
    surge.util.Protocol R1_11 -> QFkC
    surge.util.Protocol R1_10_2 -> GlQw
    surge.util.Protocol R1_10_1 -> FypH
    surge.util.Protocol R1_10 -> MdrI
    surge.util.Protocol R1_9_4 -> FWle
    surge.util.Protocol R1_9_3 -> Wrny
    surge.util.Protocol R1_9_2 -> ArrP
    surge.util.Protocol R1_9_1 -> dNbV
    surge.util.Protocol R1_9 -> YyWO
    surge.util.Protocol R1_8_9 -> jHBf
    surge.util.Protocol R1_8_8 -> HxGN
    surge.util.Protocol R1_8_7 -> CxwY
    surge.util.Protocol R1_8_6 -> kdXI
    surge.util.Protocol R1_8_5 -> XCOT
    surge.util.Protocol R1_8_4 -> JBVy
    surge.util.Protocol R1_8_3 -> pISg
    surge.util.Protocol R1_8_2 -> nCNC
    surge.util.Protocol R1_8_1 -> ySlt
    surge.util.Protocol R1_8 -> uYDJ
    surge.util.Protocol R1_7_10 -> PLYV
    surge.util.Protocol R1_7_9 -> HwfV
    surge.util.Protocol R1_7_8 -> ohSc
    surge.util.Protocol R1_7_7 -> jaUL
    surge.util.Protocol R1_7_6 -> IOvs
    surge.util.Protocol R1_7_5 -> MduD
    surge.util.Protocol R1_7_4 -> vRwp
    surge.util.Protocol R1_7_3 -> dWUl
    surge.util.Protocol R1_7_2 -> tVCs
    surge.util.Protocol R1_7_1 -> ChXy
    surge.util.Protocol B1_6_4 -> RJRH
    surge.util.Protocol B1_6_3 -> ghoh
    surge.util.Protocol B1_6_2 -> ORIu
    surge.util.Protocol B1_6_1 -> ghpI
    surge.util.Protocol B1_5_2 -> bsSG
    surge.util.Protocol B1_5_1 -> MuvV
    surge.util.Protocol B1_5 -> yLAc
    surge.util.Protocol B1_4_7 -> qekq
    surge.util.Protocol B1_4_6 -> vAwE
    surge.util.Protocol B1_4_5 -> gFlM
    surge.util.Protocol B1_4_4 -> yCOm
    surge.util.Protocol B1_4_2 -> tfdV
    surge.util.Protocol B1_3_2 -> nusl
    surge.util.Protocol B1_3_1 -> nuss
    surge.util.Protocol B1_2_5 -> nvTq
    surge.util.Protocol B1_2_4 -> yTQW
    surge.util.Protocol EARLIEST -> BuvH
    surge.util.Protocol UNKNOWN -> yCOh
    int version -> version
    java.lang.String search -> GSCq
    surge.util.Protocol[] $VALUES -> MmgF
    5:5:surge.util.Protocol[] values() -> values
    5:5:surge.util.Protocol valueOf(java.lang.String) -> valueOf
    66:74:void <init>(java.lang.String,int,int) -> <init>
    78:86:surge.util.Protocol getProtocolVersion() -> vsuR
    91:91:surge.util.ProtocolRange to(surge.util.Protocol) -> Ipea
    96:96:boolean isServerVersion() -> XSLx
    101:101:java.lang.String getVersionString() -> getVersionString
    106:106:boolean isNettySupported() -> OPbk
    111:111:boolean isActualVersion() -> OiuO
    116:121:int getVersion() -> getVersion
    126:126:int getMetaVersion() -> EmYc
    5:60:void <clinit>() -> <clinit>
surge.util.ProtocolRange -> mPAs:
    surge.util.Protocol from -> HnxP
    surge.util.Protocol to -> pAFd
    9:12:void <init>(surge.util.Protocol,surge.util.Protocol) -> <init>
    16:16:surge.util.Protocol getFrom() -> MuQY
    21:21:surge.util.Protocol getTo() -> HwCk
    26:26:boolean contains(surge.util.Protocol) -> pXbq
    32:32:java.lang.String toString() -> toString
surge.util.Range -> teXE:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> MAlJ
    70:70:int randomNextInt() -> WaMB
    80:80:long randomNextLong() -> oENC
    92:92:boolean isWithin(double) -> PdXJ
    104:104:boolean isWithin(int) -> idrH
    116:116:boolean isWithin(long) -> tvQj
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> DXdT
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> KfJU
surge.util.RawEvent -> avqa:
surge.util.RayTrace -> PJmb:
    org.bukkit.Location start -> riOa
    org.bukkit.util.Vector direction -> hSBD
    java.lang.Double maxDistance -> HxHY
    java.lang.Double distanceCovered -> LQPR
    java.lang.Double step -> EDKS
    java.lang.Boolean stop -> vlic
    37:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> fuhE
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> fBUA
    89:89:org.bukkit.Location getStart() -> tBys
    94:95:void setStart(org.bukkit.Location) -> qdXB
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> XBLV
    114:115:void setMaxDistance(java.lang.Double) -> pXbq
    119:119:java.lang.Double getDistanceCovered() -> yJYm
    124:125:void setDistanceCovered(java.lang.Double) -> Suqr
    129:129:java.lang.Double getStep() -> prdM
    134:135:void setStep(java.lang.Double) -> tBkn
surge.util.ReflectionUtils -> yAbP:
    35:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> FomE
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> FomE
    156:156:java.lang.Object instantiateObject(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> FomE
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> FomE
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> FomE
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> FomE
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> FomE
    359:359:java.lang.reflect.Field getField(java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> FomE
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> FomE
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> FomE
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> FomE
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> FomE
    508:509:void setValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> FomE
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> FomE
surge.util.ReflectionUtils$DataType -> yAbP$FomE:
    surge.util.ReflectionUtils$DataType BYTE -> tgDb
    surge.util.ReflectionUtils$DataType SHORT -> rWmE
    surge.util.ReflectionUtils$DataType INTEGER -> LbQd
    surge.util.ReflectionUtils$DataType LONG -> NWVa
    surge.util.ReflectionUtils$DataType CHARACTER -> jjHL
    surge.util.ReflectionUtils$DataType FLOAT -> HVEq
    surge.util.ReflectionUtils$DataType DOUBLE -> YyYL
    surge.util.ReflectionUtils$DataType BOOLEAN -> hlRW
    java.util.Map CLASS_MAP -> WsRf
    java.lang.Class primitive -> CpiX
    java.lang.Class reference -> bapD
    surge.util.ReflectionUtils$DataType[] $VALUES -> IYIV
    648:648:surge.util.ReflectionUtils$DataType[] values() -> values
    648:648:surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
    682:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> aoIG
    704:704:java.lang.Class getReference() -> QVgg
    716:716:surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> Ipea
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> pXbq
    741:742:java.lang.Class getReference(java.lang.Class) -> Suqr
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> FomE
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> Ipea
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> Ipea
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> pXbq
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> FomE
    648:671:void <clinit>() -> <clinit>
surge.util.ReflectionUtils$PackageType -> yAbP$Ipea:
    surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> qLXh
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> huCd
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> tfgK
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> SgHx
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> bsUN
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> MKdf
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> GAcN
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> LkFT
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> kmNd
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> qDKw
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> eIYW
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> GSEj
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> nCRa
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> feoH
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> etMu
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> gqcB
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> toWh
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> CNhA
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> KhDE
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> qfMl
    java.lang.String path -> path
    surge.util.ReflectionUtils$PackageType[] $VALUES -> Wjby
    547:547:surge.util.ReflectionUtils$PackageType[] values() -> values
    547:547:surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
    579:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    547:568:void <clinit>() -> <clinit>
surge.util.Refreshable -> nJSt:
    void refresh() -> refresh
surge.util.SQLOperation -> yBBp:
    surge.util.SQLOperation LOAD -> lyAj
    surge.util.SQLOperation SAVE -> EwRE
    surge.util.SQLOperation[] ENUM$VALUES -> DsnD
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.SQLOperation[] values() -> values
    1:1:surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
surge.util.ServerState -> MRet:
    surge.util.ServerState START -> ujJH
    surge.util.ServerState ENABLE -> yvVI
    surge.util.ServerState DISABLE -> xaow
    surge.util.ServerState STOP -> iwhR
    surge.util.ServerState RUNNING -> msTG
    surge.util.ServerState[] ENUM$VALUES -> eQha
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.ServerState[] values() -> values
    1:1:surge.util.ServerState valueOf(java.lang.String) -> valueOf
surge.util.Shape -> ggag:
    org.bukkit.Location location -> nJcY
    org.bukkit.util.Vector offset -> GtgI
    org.bukkit.util.Vector size -> sksS
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> leiK
    90:94:org.bukkit.Location randomLocation() -> NVOg
    104:104:org.bukkit.Location randomSurface() -> KTvS
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> ndLq
    129:129:org.bukkit.util.Vector getSize() -> ccko
surge.util.SnowLevel -> HCVt:
    byte level -> ynFF
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> fJrS
    51:52:void setLevel(byte) -> pXbq
surge.util.T -> GbWW:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> FomE
    32:35:void stop() -> stop
surge.util.TXT -> KerP:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:org.cyberpwn.glang.GList wrap(java.lang.String,int) -> DOtN
    67:67:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> FomE
    85:85:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> FomE
    99:99:java.lang.String line(surge.util.C,int) -> FomE
    113:113:java.lang.String underline(surge.util.C,int) -> Ipea
    135:140:java.lang.String getLine(surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> FomE
surge.util.Tag -> bqeK:
    java.lang.String value() -> value
surge.util.Timer -> NVKB:
    long tns -> aopB
    long cns -> hIpn
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> XRjr
surge.util.VectorMath -> mqcm:
    int[] $SWITCH_TABLE$surge$util$Axis -> ptLL
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> HLvB
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(surge.util.Axis,org.bukkit.util.Vector,double) -> FomE
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> FomE
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> Ipea
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> pXbq
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> FomE
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> Ipea
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> Ipea
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> pXbq
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> Suqr
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> tBkn
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> DOtN
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> qtxH
    111:111:double round(double,int) -> tBkn
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> FomE
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> FomE
    150:235:org.cyberpwn.glang.GList split(org.bukkit.block.BlockFace) -> FomE
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> Suqr
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> tBkn
    268:268:org.bukkit.util.Vector toVector(float,float) -> FomE
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> FomE
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> FomE
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> BtbI
    337:340:double getSpeed(org.bukkit.util.Vector) -> tBlP
    354:361:org.cyberpwn.glang.GList shift(org.bukkit.util.Vector,org.cyberpwn.glang.GList) -> FomE
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> fBUA
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> FomE
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> Ipea
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> pXbq
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> Suqr
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> HusQ
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> nclO
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> mWxL
surge.util.VectorMath$1 -> mqcm$1:
    org.bukkit.util.Vector val$vector -> xrrA
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> TOBu
    1:1:java.lang.Object onAdapt(java.lang.Object) -> Ipea
surge.util.W -> ryDH:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> Suqr
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> FomE
    75:86:org.bukkit.entity.Entity getEntity(int) -> iBne
    101:114:int count(org.bukkit.entity.Player,surge.util.MaterialBlock) -> FomE
    131:131:boolean has(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> FomE
    143:143:int getChunkX(org.bukkit.block.Block) -> tBkn
    155:155:int getChunkY(org.bukkit.block.Block) -> DOtN
    168:169:void dropXp(org.bukkit.Location,int) -> Ipea
    180:180:int getChunkZ(org.bukkit.block.Block) -> qtxH
    196:203:void take(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> Ipea
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> FomE
    232:239:org.cyberpwn.glang.GList news(org.bukkit.Location) -> LFiw
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> FomE
    276:276:org.cyberpwn.glang.GList getBlocks(org.bukkit.Chunk) -> tBlP
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> DOtN
    300:300:org.bukkit.World toSync(org.bukkit.World) -> qtxH
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> BtbI
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> oMOi
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> fBUA
    352:419:surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> iBne
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> FomE
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> FomE
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> FomE
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> FomE
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> FomE
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> FomE
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> FomE
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> FomE
    580:587:org.cyberpwn.glang.GList chunkFaces(org.bukkit.Chunk) -> HusQ
    599:608:org.cyberpwn.glang.GList blockFaces(org.bukkit.block.Block) -> tBlP
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> tupi
    648:660:org.cyberpwn.glang.GList chunkRadius(org.bukkit.Chunk,int) -> pXbq
    674:686:org.cyberpwn.glang.GList blockRadius(org.bukkit.block.Block,int) -> FomE
    708:740:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> FomE
    758:765:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> FomE
    779:779:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> FomE
surge.util.W$1 -> ryDH$1:
    java.lang.Double val$doff -> EfEv
    org.bukkit.entity.Entity val$e -> IXjN
    org.bukkit.entity.Entity[] val$result -> LPgS
    722:722:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    726:737:void onTrace(org.bukkit.Location) -> fBUA
surge.util.Worlds -> dwmi:
    12:12:void <init>() -> <init>
    21:21:org.cyberpwn.glang.GList getWorlds() -> iLMF
    33:33:boolean hasWorld(java.lang.String) -> ckqW
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
surge.util.package-info -> OYOi:

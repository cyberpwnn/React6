react.Config -> Whld:
    react.glang.GMap worldConfigs -> Whld
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> LNyy
    java.lang.String A_REDSTONE_DYNAMIC_CLOCK -> ssNb
    java.lang.String A_COMMANDOVERRIDE_TPS -> XuBO
    java.lang.String A_REACT_REMOTE_PORT -> xNws
    java.lang.String A_REACT_REMOTE_ENABLED -> LGKV
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> dLof
    java.lang.String A_POOL_MAXTHREADS -> CgDt
    java.lang.String A_POOL_SYNC_NANOS -> ugrC
    java.lang.String A_CULLING_ENABLED -> pGaV
    java.lang.String A_FASTLEAF_ENABLED -> HnCx
    java.lang.String A_FASTLEAF_ONDECAY -> Veil
    java.lang.String A_FASTLEAF_INSTANT -> qdVr
    java.lang.String A_FASTLEAF_DECAYPERIOD -> eaTj
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> Oqvn
    java.lang.String A_ENTITYSTACK_ENABLED -> lLWD
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> xNvw
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> YwcS
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> WNxp
    java.lang.String A_GLASS_SHOW_BLOCKS -> TFPk
    java.lang.String A_GLASS_SHOW_PARTICLES -> tSlj
    java.lang.String A_ALLOW_CULL -> IWSS
    java.lang.String A_ALLOW_PURGE -> ylMp
    java.lang.String A_ALLOW_STACKING -> wwIa
    java.lang.String A_CULL_RULES -> clOe
    java.lang.String A_RAI_TPS_HIGH_TICK -> lfGn
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> NMQN
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> CDaF
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> rMfW
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> oxCI
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> WynA
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> HvVJ
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> KLYx
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> Bkra
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> jqFx
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> LXOM
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> dweX
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> idrQ
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> GPoP
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> uODB
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> dfcb
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> DHFs
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> XtdC
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> jxug
    java.lang.String A_RAI_FLUID_TIME_CEIL -> UIVu
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> NVDm
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> MRaN
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> srnp
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> NVDx
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> oVBe
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> vHtN
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> Bcac
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> XcbK
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> wKwK
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> onrj
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> FNKh
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> aLXU
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> fRus
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> nkpG
    java.lang.String A_USE_WORLD_CONFIGS -> VUIj
    java.lang.String A_ENTITY_STACKER_SHOW_PARTICLES -> MlSA
    java.lang.String A_ENTITY_STACKER_SHOW_NAMETAG -> BSCG
    java.lang.String A_LANGUAGE -> inBx
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> BdCu
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> CUdf
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> IFSd
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> OYGF
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> yJLo
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> ERxY
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> upda
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> fJea
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> lvkD
    java.lang.String A_RAI_ENTITY_PROPIGATE -> XtcB
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> clRA
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> ssOO
    java.lang.String A_ENTITY_STACKER_NAME_TAG_FORMAT -> mhlU
    double MAX_EXPLOSION_MS -> tBll
    boolean REDSTONE_DYNAMIC_CLOCK -> EBXV
    boolean COMMANDOVERRIDES_TPS -> WFjq
    int REACT_REMOTE_PORT -> gUxx
    boolean REACT_REMOTE_ENABLED -> CDeC
    int ENTITY_STACK_MAX_COUNT -> Mccr
    int POOL_MAXTHREADS -> AXQT
    long POOL_SYNC_NANOS -> SLCm
    boolean CULLING_ENABLED -> OGfq
    boolean FASTLEAF_ENABLED -> uyYS
    boolean FASTLEAF_ONDECAY -> KvpO
    boolean FASTLEAF_INSTANT -> dECf
    int FASTLEAF_DECAYPERIOD -> XuFK
    boolean COMMANDOVERRIDES_MEMORY -> ctcw
    boolean ENTITYSTACK_ENABLED -> jhVy
    int ENTITYSTACK_MINIMUM_GROUP -> iTRg
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> HeWJ
    int ENTITYSTACK_MAXIMUM_HEALTH -> SeVX
    boolean GLASS_SHOW_BLOCKS -> JRJs
    boolean GLASS_SHOW_PARTICLES -> avoR
    react.glang.GList ALLOW_CULL -> MJSH
    react.glang.GList ALLOW_PURGE -> xiPM
    react.glang.GList ALLOW_STACKING -> wKxd
    react.glang.GList CULL_RULES -> ieUA
    double RAI_TPS_HIGH_TICK -> BlTk
    long RAI_REDSTONE_TIME_FLOOR -> cdDS
    long RAI_REDSTONE_TIME_CEIL -> MdFI
    long RAI_REDSTONE_TIME_MUDDING -> VDLT
    double RAI_REDSTONE_TIME_FUNCTION -> MJQX
    double RAI_REDSTONE_TIME_OVERBLEED -> fRwx
    int RAI_REDSTONE_TIME_RADIUS -> nJPJ
    int RAI_REDSTONE_TIME_PROPIGATION -> BIre
    long RAI_HOPPER_TIME_FLOOR -> rMjb
    long RAI_HOPPER_TIME_CEIL -> HmfK
    long RAI_HOPPER_TIME_MUDDING -> kAFh
    double RAI_HOPPER_TIME_FUNCTION -> UtKm
    double RAI_HOPPER_TIME_OVERBLEED -> NxHj
    int RAI_HOPPER_TIME_RADIUS -> Cffo
    int RAI_HOPPER_TIME_PROPIGATION -> Nwgg
    int RAI_ENTITY_CHUNK_MULTIPLIER -> HeUd
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> cdBa
    int RAI_ENTITY_CHUNK_RADIUS -> MSBp
    long RAI_FLUID_TIME_FLOOR -> MuEs
    long RAI_FLUID_TIME_CEIL -> WWni
    long RAI_FLUID_TIME_MUDDING -> pGcs
    double RAI_FLUID_TIME_FUNCTION -> kAEs
    double RAI_FLUID_TIME_OVERBLEED -> hsRM
    int RAI_FLUID_TIME_RADIUS -> onta
    int RAI_FLUID_TIME_PROPIGATION -> SuvQ
    double SMEAR_TICK_ENTITIES_MAX_TICK -> iutT
    double SMEAR_TICK_TILES_MAX_TICK -> GPsJ
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> dEEs
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> SSuU
    double SMEAR_TICK_ENTITIES_AMOUNT -> HdxF
    double SMEAR_TICK_TILES_AMOUNT -> dEFL
    boolean SMEAR_TICK_ENTITIES_ENABLE -> cdFJ
    boolean SMEAR_TICK_TILES_ENABLE -> RHau
    boolean HOPPER_OVERTICK_ENABLE -> KCnC
    boolean USE_WORLD_CONFIGS -> AyuN
    boolean ENTITY_STACKER_SHOW_PARTICLES -> xWoi
    boolean ENTITY_STACKER_SHOW_NAME_TAG -> bqcU
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> TVxg
    long RAI_CHUNK_TIME_CEIL -> BkvU
    long RAI_CHUNK_TIME_MUDDING -> QFAK
    double RAI_CHUNK_TIME_FUNCTION -> FNQg
    double RAI_CHUNK_TIME_OVERBLEED -> bGNx
    int RAI_CHUNK_TIME_RADIUS -> RIAo
    int RAI_CHUNK_TIME_PROPIGATION -> URJq
    boolean RAI_CHUNK_TIME_PROPIGATE -> oDce
    boolean RAI_FLUID_TIME_PROPIGATE -> kskx
    boolean RAI_ENTITY_PROPIGATE -> XAaY
    boolean RAI_HOPPER_TIME_PROPIGATE -> Hmgk
    boolean RAI_REDSTONE_TIME_PROPIGATE -> ycbm
    java.lang.String ENTITY_STACKER_NAME_TAG_FORMAT -> jphc
    boolean hrld -> TNhD
    boolean rns -> xXNs
    boolean rrl -> LPAm
    39:667:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    672:689:void doTrack(org.bukkit.plugin.Plugin) -> Whld
    694:716:void onRead(org.bukkit.plugin.Plugin) -> LNyy
    720:750:void read(java.io.File,boolean) -> Whld
    754:771:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> Whld
    776:784:void closeWorldConfig(org.bukkit.World) -> LNyy
    789:902:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> Whld
    907:944:react.surge.cluster.DataCluster defaultConfig(boolean) -> Whld
    949:1028:react.glang.GList getDefaultEntitiesForStacking() -> Whld
    1033:1052:react.glang.GList getDefaultEntitiesForCulling() -> LNyy
    1057:1094:react.glang.GList getDefaultEntitiesForRemoval() -> ssNb
    1099:1140:react.glang.GList getDefaultCullRules() -> XuBO
react.Config$1 -> Whld$1:
    java.io.File val$fConfig -> vYxW
    java.io.File val$fConfigExperimental -> RYbk
    org.bukkit.plugin.Plugin val$main -> bhrA
    1:675:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    680:684:void run() -> run
react.Config$2 -> Whld$2:
    react.api.WorldConfig val$wc -> NVGw
    org.bukkit.World val$w -> bWoj
    1:761:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    766:767:void run() -> run
react.Gate -> LNyy:
    react.glang.GMap defaultSettings -> CgKD
    react.glang.GSet refresh -> cuFe
    react.glang.GSet destroy -> vsoI
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> ryDs
    45:47:void <clinit>() -> <clinit>
    43:43:void <init>() -> <init>
    51:141:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> Whld
    147:178:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> Whld
    183:183:int getChunkCountForView() -> xNws
    188:188:int getMaxChunksForView() -> LGKV
    193:193:boolean hasFawe() -> dLof
    198:219:void tickEntityNextTickListTick(org.bukkit.World) -> ssNb
    223:227:void resetEntityMaxTick(org.bukkit.World) -> XuBO
    231:231:int getEntityTickMax(org.bukkit.World) -> xNws
    236:236:int getTileTickMax(org.bukkit.World) -> LGKV
    241:259:void tweakEntityTickMax(org.bukkit.World,int) -> Whld
    263:280:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> Whld
    285:289:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> Whld
    293:305:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> Whld
    310:314:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> LNyy
    318:336:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> Whld
    340:344:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> dLof
    349:352:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> Whld
    357:360:java.lang.String msg(react.api.ReactPlayer,react.notification.Notification) -> Whld
    365:368:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> LNyy
    373:373:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> ssNb
    378:378:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> XuBO
    383:383:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> xNws
    388:388:boolean isBadForUnloading() -> CgDt
    393:393:boolean canUnload(org.bukkit.World,int,int) -> Whld
    400:416:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    422:433:void unloadChunk(org.bukkit.World,int,int) -> LNyy
    437:453:void removeEntity(org.bukkit.entity.Entity) -> Whld
    457:473:void purgeEntity(org.bukkit.entity.Entity) -> LNyy
    477:498:void cullEntity(org.bukkit.entity.Entity) -> ssNb
    503:520:void updateBlock(org.bukkit.block.Block) -> Whld
    524:528:java.lang.String header(java.lang.String,react.surge.util.C) -> Whld
    533:533:java.lang.String header(react.surge.util.C) -> Whld
    539:543:void updateFluid(org.bukkit.block.Block) -> LNyy
    547:548:void refresh(org.bukkit.Chunk) -> LNyy
    553:572:void refreshChunks() -> ugrC
    576:577:void sendBlockChange(org.bukkit.Location) -> Whld
    43:43:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> pGaV
react.Gate$1 -> LNyy$1:
    react.api.SelectorPosition val$sel -> YLwn
    react.glang.Callback val$prog -> LGRw
    react.glang.Callback val$cb -> wTnd
    1:51:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    56:139:void run() -> run
react.Gate$1$1 -> LNyy$1$1:
    react.Gate$1 this$1 -> Hmjl
    java.lang.Object val$o -> oxKt
    java.lang.reflect.Constructor val$vectorConstruct -> LPDe
    java.lang.reflect.Constructor val$cuboidConstruct -> iBuS
    java.lang.reflect.Method val$faweFixMethod -> aDNp
    java.lang.Integer[] val$total -> Lhub
    java.lang.Integer[] val$sof -> EvDd
    react.glang.Callback val$prog -> LGRw
    java.lang.Integer val$tot -> fvBR
    1:83:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    90:108:void run() -> run
react.Gate$1$2 -> LNyy$1$2:
    react.Gate$1 this$1 -> Hmjl
    react.glang.Callback val$prog -> LGRw
    react.glang.Callback val$cb -> wTnd
    java.lang.Integer[] val$total -> Lhub
    1:112:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    119:127:void run() -> run
react.Info -> ssNb:
    java.lang.String CORE_REACT_DOT -> nuIC
    java.lang.String CORE_NAME -> vcMc
    java.lang.String CORE_CACHE -> cBEa
    java.lang.String WORLD_CONFIGS -> vcNC
    java.lang.String CORE_DOTYML -> GawQ
    java.lang.String COMMAND_REACT -> oMXD
    java.lang.String COMMAND_RAI -> Rrws
    java.lang.String COMMAND_ACT_DESCRIPTION -> VUQg
    java.lang.String COMMAND_ACT -> SKhK
    java.lang.String COMMAND_ACT_ALIAS_1 -> uNgd
    java.lang.String COMMAND_ACT_ALIAS_2 -> Mcft
    java.lang.String COMMAND_ACT_USAGE -> ncek
    java.lang.String COMMAND_HELP_DESCRIPTION -> HCWG
    java.lang.String COMMAND_HELP -> vQjl
    java.lang.String COMMAND_HELP_ALIAS_1 -> mPBX
    java.lang.String COMMAND_HELP_ALIAS_2 -> gxdR
    java.lang.String COMMAND_HELP_USAGE -> sPqX
    java.lang.String COMMAND_STATUS_DESCRIPTION -> VMAC
    java.lang.String COMMAND_STATUS -> wCkc
    java.lang.String COMMAND_STATUS_ALIAS_1 -> Hdxm
    java.lang.String COMMAND_STATUS_ALIAS_2 -> vcMD
    java.lang.String COMMAND_STATUS_USAGE -> nBBu
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> NEIC
    java.lang.String COMMAND_CPUSCORE -> VfSA
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> roqV
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> Jbnp
    java.lang.String COMMAND_CPUSCORE_USAGE -> Vvrc
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> rpRc
    java.lang.String COMMAND_RELOAD -> rNPB
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> ghCM
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> uhYp
    java.lang.String COMMAND_RELOAD_USAGE -> JALt
    java.lang.String COMMAND_CTP_DESCRIPTION -> pXik
    java.lang.String COMMAND_CTP -> WGQx
    java.lang.String COMMAND_CTP_ALIAS_1 -> BdLF
    java.lang.String COMMAND_CTP_ALIAS_2 -> FyHy
    java.lang.String COMMAND_CTP_USAGE -> xWtT
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> ylYX
    java.lang.String COMMAND_MONITOR -> ArJN
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> kQoD
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> AyyV
    java.lang.String COMMAND_MONITOR_USAGE -> aDQQ
    java.lang.String COMMAND_ENV_DESCRIPTION -> fSaP
    java.lang.String COMMAND_ENV -> FggX
    java.lang.String COMMAND_ENV_ALIAS_1 -> UQpF
    java.lang.String COMMAND_ENV_ALIAS_2 -> xOcL
    java.lang.String COMMAND_ENV_USAGE -> rMrD
    java.lang.String COMMAND_VERSION_DESCRIPTION -> WaGm
    java.lang.String COMMAND_VERSION -> WiWu
    java.lang.String COMMAND_VERSION_ALIAS_1 -> TppR
    java.lang.String COMMAND_VERSION_ALIAS_2 -> AXVf
    java.lang.String COMMAND_VERSION_USAGE -> lvsq
    java.lang.String COMMAND_MAP_DESCRIPTION -> QFEO
    java.lang.String COMMAND_MAP -> ECCB
    java.lang.String COMMAND_MAP_ALIAS_1 -> XdKV
    java.lang.String COMMAND_MAP_ALIAS_2 -> nBEa
    java.lang.String COMMAND_MAP_USAGE -> NVKc
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> uOKA
    java.lang.String COMMAND_TOPCHUNK -> XBFj
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> lDOl
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> SLIQ
    java.lang.String COMMAND_TOPCHUNK_USAGE -> WFsS
    java.lang.String COMMAND_GLASS_DESCRIPTION -> ntiW
    java.lang.String COMMAND_GLASS -> kboM
    java.lang.String COMMAND_GLASS_ALIAS_1 -> tKgL
    java.lang.String COMMAND_GLASS_ALIAS_2 -> BuMn
    java.lang.String COMMAND_GLASS_USAGE -> Sdys
    java.lang.String COMMAND_SUB_DESCRIPTION -> wDOI
    java.lang.String COMMAND_SUB -> uFXn
    java.lang.String COMMAND_SUB_ALIAS_1 -> PeCd
    java.lang.String COMMAND_SUB_ALIAS_2 -> imjK
    java.lang.String COMMAND_SUB_USAGE -> DsCM
    java.lang.String COMMAND_USUB_DESCRIPTION -> CgQN
    java.lang.String COMMAND_USUB -> baHu
    java.lang.String COMMAND_USUB_ALIAS_1 -> anfb
    java.lang.String COMMAND_USUB_ALIAS_2 -> hayU
    java.lang.String COMMAND_USUB_USAGE -> VfVs
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> iByU
    java.lang.String COMMAND_CBLAME -> CwrD
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> wUSs
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> LGXJ
    java.lang.String COMMAND_CBLAME_USAGE -> YpAb
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> Oiri
    java.lang.String COMMAND_ACTIONLOG -> BIyW
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> dgPB
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> AXXd
    java.lang.String COMMAND_ACTIONLOG_USAGE -> sryP
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> xywo
    java.lang.String COMMAND_CAPABILITIES -> LiYa
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> UlCx
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> EeEo
    java.lang.String COMMAND_CAPABILITIES_USAGE -> jqPc
    java.lang.String MSG_PERMISSION -> oDiq
    java.lang.String MSG_MONITORING_STARTED -> Rjjh
    java.lang.String MSG_MONITORING_STOPPED -> KngT
    java.lang.String MSG_ACTIONLOGGING_STARTED -> pXme
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> jpoN
    java.lang.String MSG_GLASS_STARTED -> rEap
    java.lang.String MSG_GLASS_STOPPED -> PmVJ
    org.bukkit.Color COLOR_HOPPER -> Cwpt
    org.bukkit.Color COLOR_BLOCK_UPDATE -> WaHn
    org.bukkit.Color COLOR_BLOCK_FROMTO -> XIwy
    org.bukkit.Color COLOR_BLOCK_BURN -> OabN
    org.bukkit.Color COLOR_BLOCK_DECAY -> Keux
    org.bukkit.Color COLOR_BLOCK_FORM -> mFtG
    java.lang.String NAME_TICK -> cSMG
    java.lang.String NAME_MEMORY -> VfYU
    java.lang.String NAME_CHUNKS -> vRSH
    java.lang.String NAME_ENTITIES -> IqTq
    java.lang.String STATE_MONITORING_TAB -> TNqF
    java.lang.String STATE_MONITORING_ENABLED -> psEa
    java.lang.String STATE_MONITORING_HIGH -> JJES
    java.lang.String STATE_CHANNELS -> HwCc
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> RYlY
    java.lang.String STATE_MAPPING_ENABLED -> PKVK
    java.lang.String STATE_SOUND_PLAYS -> ghJN
    java.lang.String STATE_MONITORING_POSTED -> KfYr
    java.lang.String STATE_MONITORING_LASTTAB -> PSfU
    java.lang.String STATE_GLASSES_ENABLED -> eGqG
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> jqSU
    java.lang.String STATE_PLAYER_HOTBAR -> cdOA
    java.lang.String STATE_PLAYER_SHIFT -> eXqp
    java.lang.String STATE_PLAYER_SCROLL -> DQBv
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> KniK
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> MuOs
    java.lang.String PERM_ACCESS -> AOjl
    java.lang.String PERM_TELEPORT -> FyLj
    java.lang.String PERM_MONITOR -> Kewo
    java.lang.String PERM_MONITOR_TITLE -> VMFi
    java.lang.String PERM_MONITOR_ACTIONLOG -> Rjlf
    java.lang.String PERM_MONITOR_MAP -> KCuT
    java.lang.String PERM_MONITOR_ENVIRONMENT -> kQps
    java.lang.String PERM_MONITOR_GLASSES -> TqSu
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> PJtX
    java.lang.String PERM_ACT -> HvbS
    java.lang.String PERM_RAI -> IOQj
    java.lang.String PERM_RAI_CONTROL -> yJXm
    java.lang.String PERM_RAI_ACCESS -> opAJ
    java.lang.String PERM_RAI_MONITOR -> jiBR
    java.lang.String PERM_RELOAD -> HwBp
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> ghHv
    java.lang.String SAMPLER_REDSTONE_TICK -> CNCW
    java.lang.String SAMPLER_ENTITY_TIME -> xPKI
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> twCT
    java.lang.String SAMPLER_TILE_TIME_LOCK -> Oaet
    java.lang.String SAMPLER_TILE_TIME -> FFJo
    java.lang.String SAMPLER_TILE_DROPTICK -> CERH
    java.lang.String SAMPLER_ENTITY_DROPTICK -> ndOm
    java.lang.String SAMPLER_REDSTONE_SECOND -> GjpU
    java.lang.String SAMPLER_REDSTONE_TIME -> Dafs
    java.lang.String SAMPLER_PHYSICS_TIME -> GcAR
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> iLPJ
    java.lang.String SAMPLER_HOPPER_TICK -> DXuo
    java.lang.String SAMPLER_HOPPER_SECOND -> ryNA
    java.lang.String SAMPLER_HOPPER_TIME -> rEfy
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> lMHM
    java.lang.String SAMPLER_FLUID_TICK -> Pdie
    java.lang.String SAMPLER_FLUID_SECOND -> mOiq
    java.lang.String SAMPLER_FLUID_TIME -> CEPr
    java.lang.String SAMPLER_TPS -> skNd
    java.lang.String SAMPLER_TICK -> WaNY
    java.lang.String SAMPLER_TIU -> PBgN
    java.lang.String SAMPLER_MEM -> YUqi
    java.lang.String SAMPLER_FREEMEM -> AFyt
    java.lang.String SAMPLER_MAXMEM -> BmBW
    java.lang.String SAMPLER_ALLOCMEM -> VfYs
    java.lang.String SAMPLER_MAHS -> gxlN
    java.lang.String SAMPLER_CHK -> NVQl
    java.lang.String SAMPLER_ATASK -> kRTc
    java.lang.String SAMPLER_STASK -> qKUY
    java.lang.String SAMPLER_CHK_TIME -> pHQr
    java.lang.String SAMPLER_EXPLOSION_TIME -> Smqa
    java.lang.String SAMPLER_CHKS -> UcVn
    java.lang.String SAMPLER_ENT -> eGqP
    java.lang.String SAMPLER_ENTLIV -> mPKE
    java.lang.String SAMPLER_ENTDROP -> TXCg
    java.lang.String SAMPLER_ENTTILE -> cdPM
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> UbwE
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> PCGE
    java.lang.String ACTION_CULL_ENTITIES_NAME -> PdiF
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> xFwL
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> hPyv
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> VnkD
    java.lang.String ACTION_UPDATE_FLUID_NAME -> UcVy
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> Divm
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> IWdU
    java.lang.String ACTION_LOCK_FLUID_STATUS -> ooeY
    java.lang.String ACTION_LOCK_FLUID_NAME -> oERN
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> DaiN
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> Secu
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> Hmtu
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> gyOr
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> rgli
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> FVmc
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> rVkf
    java.lang.String ACTION_LOCK_HOPPER_NAME -> hcBB
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> EvNj
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> mPNI
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> jWds
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> jGDG
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> wMHv
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> FEld
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> XSQi
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> IOWP
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> kIfV
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> YMce
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> fCGY
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> oUqa
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> BctM
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> RtCP
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> MRoy
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> iKpI
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> XSOy
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> dxVa
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> UAWA
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> KoMy
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> VMKO
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> CMeE
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> CDry
    java.lang.String ACTION_FIX_LIGHTING_NAME -> nBMd
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> CxXb
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> SmwD
    java.lang.String ACTION_COLLECT_GARBAGE -> RkUC
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> uNtr
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> oogX
    8:267:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> XuBO:
    java.lang.String BUNDLE_NAME -> GQcB
    java.util.ResourceBundle RESOURCE_BUNDLE -> xqqK
    java.util.ResourceBundle PRIMARY_BUNDLE -> htDu
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> xNws:
    react.React instance -> MdUg
    react.controller.SampleController sampleController -> tnUt
    react.controller.PlayerController playerController -> lMMI
    react.controller.MonitorController monitorController -> cRra
    react.controller.CommandController commandController -> vbxr
    react.controller.ActionController actionController -> pYWt
    react.controller.FastDecayController fastDecayController -> XuVv
    react.controller.EntityStackController entityStackController -> oETE
    react.controller.GlassController glassController -> nttU
    react.controller.EntityCullController entityCullController -> yRpd
    react.controller.SpikeController spikeController -> IFge
    react.controller.SecurityController securityController -> OPjD
    react.controller.RedstoneController redstoneController -> rWMr
    react.controller.HopperController hopperController -> RtEE
    react.controller.PhysicsController physicsController -> WOnc
    react.controller.TickTimeController tickTimeController -> pagi
    react.controller.RAIController raiController -> ObJe
    react.controller.FluidController fluidController -> kIgf
    react.controller.ChunkController chunkController -> Drki
    react.controller.GraphController graphController -> brRE
    react.controller.ChronophyFluidController fluidChronophyController -> qCIQ
    react.controller.EventController eventController -> rWMb
    react.controller.SmearTickController smearTickController -> ESlP
    react.controller.FeatureController featureController -> wMIx
    react.controller.HopperOvertickController hopperPlungeController -> uWeE
    react.controller.LanguageController languageController -> nmCi
    react.controller.RemoteController remoteController -> qKXa
    react.controller.ExplosiveController explosiveController -> ytrY
    react.controller.WorldController worldController -> MAqV
    react.controller.MessageController messageController -> uygl
    43:43:void <init>() -> <init>
    138:146:void enable() -> enable
    152:152:void disable() -> disable
react.React$1 -> xNws$1:
    react.React this$0 -> IiJg
    1:138:void <init>(react.React) -> <init>
    143:144:void run() -> run
react.action.ActionCollectGarbage -> LGKV:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
react.action.ActionCollectGarbage$1 -> LGKV$1:
    react.action.ActionCollectGarbage this$0 -> Dalo
    react.action.source.IActionSource val$source -> LaTf
    1:29:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> Whld
react.action.ActionCollectGarbage$1$1 -> LGKV$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> nBSO
    long val$mbnex -> dMfg
    long val$mbmem -> xicO
    react.action.source.IActionSource val$source -> LaTf
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.action.source.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> dLof:
    long ms -> LGbM
    int lcd -> kIkC
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> Whld
    27:27:void access$0(react.action.ActionCullEntities,long) -> Whld
    28:28:int access$1(react.action.ActionCullEntities) -> Whld
    27:27:long access$2(react.action.ActionCullEntities) -> LNyy
react.action.ActionCullEntities$1 -> dLof$1:
    react.action.ActionCullEntities this$0 -> Oali
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> dLof$2:
    react.action.ActionCullEntities this$0 -> Oali
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> dLof$3:
    react.action.ActionCullEntities this$0 -> Oali
    react.glang.FinalInteger val$completed -> bOqE
    react.glang.FinalInteger val$total -> CNIO
    react.glang.FinalInteger val$totalCulled -> XRuS
    react.glang.FinalInteger val$totalChunked -> GQdm
    react.action.source.IActionSource val$source -> LaTf
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> dLof$4:
    react.action.ActionCullEntities this$0 -> Oali
    react.action.source.IActionSource val$source -> LaTf
    react.glang.FinalInteger val$totalCulled -> XRuS
    react.glang.FinalInteger val$totalChunked -> GQdm
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> CgDt:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
react.action.ActionFixLighting$1 -> CgDt$1:
    react.action.ActionFixLighting this$0 -> IGKD
    1:28:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> CgDt$2:
    react.action.ActionFixLighting this$0 -> IGKD
    react.action.source.IActionSource val$source -> LaTf
    int val$ch -> doiv
    1:77:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> Whld
    1:1:void run(java.lang.Object) -> Whld
react.action.ActionFixLighting$3 -> CgDt$3:
    react.action.ActionFixLighting this$0 -> IGKD
    1:88:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> Whld
    1:1:void run(java.lang.Object) -> Whld
react.action.ActionLockFluid -> ugrC:
    int lcd -> kIkC
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
react.action.ActionLockFluid$1 -> ugrC$1:
    react.action.ActionLockFluid this$0 -> clgT
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> ugrC$2:
    react.action.ActionLockFluid this$0 -> clgT
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> pGaV:
    int lcd -> kIkC
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
react.action.ActionLockHopper$1 -> pGaV$1:
    react.action.ActionLockHopper this$0 -> DQLx
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> pGaV$2:
    react.action.ActionLockHopper this$0 -> DQLx
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> HnCx:
    int lcd -> kIkC
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
react.action.ActionLockRedstone$1 -> HnCx$1:
    react.action.ActionLockRedstone this$0 -> bGaS
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> HnCx$2:
    react.action.ActionLockRedstone this$0 -> bGaS
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> Veil:
    long ms -> LGbM
    int lcd -> kIkC
    boolean fail -> ECNm
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> LNyy
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> Whld
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> Whld
    26:26:int access$2(react.action.ActionPurgeChunks) -> LNyy
    25:25:long access$3(react.action.ActionPurgeChunks) -> ssNb
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> Whld
react.action.ActionPurgeChunks$1 -> Veil$1:
    react.action.ActionPurgeChunks this$0 -> SLWY
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> Veil$2:
    react.action.ActionPurgeChunks this$0 -> SLWY
    int val$dk -> GbgK
    java.lang.Object val$j -> xOnk
    react.action.source.IActionSource val$source -> LaTf
    react.api.ISelector[] val$selectors -> RtFe
    react.glang.FinalInteger val$acompleted -> EuqH
    react.glang.FinalInteger val$completed -> bOqE
    react.glang.FinalInteger val$total -> CNIO
    react.glang.FinalInteger val$totalCulled -> XRuS
    react.glang.FinalInteger val$totalChunked -> GQdm
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.action.source.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> Whld
react.action.ActionPurgeChunks$2$1 -> Veil$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> VwbP
    react.glang.FinalInteger val$acompleted -> EuqH
    react.glang.FinalInteger val$completed -> bOqE
    react.glang.FinalInteger val$total -> CNIO
    react.glang.FinalInteger val$totalCulled -> XRuS
    react.glang.FinalInteger val$totalChunked -> GQdm
    react.action.source.IActionSource val$source -> LaTf
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> Veil$3:
    react.action.ActionPurgeChunks this$0 -> SLWY
    react.action.source.IActionSource val$source -> LaTf
    react.glang.FinalInteger val$acompleted -> EuqH
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> Veil$4:
    react.action.ActionPurgeChunks this$0 -> SLWY
    org.bukkit.Chunk val$chunk -> jiKE
    java.lang.Runnable val$cb -> AYEa
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> qdVr:
    long ms -> LGbM
    int lcd -> kIkC
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> LNyy
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> Whld
    30:30:int access$1(react.action.ActionPurgeEntities) -> Whld
    29:29:long access$2(react.action.ActionPurgeEntities) -> LNyy
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> Whld
react.action.ActionPurgeEntities$1 -> qdVr$1:
    react.action.ActionPurgeEntities this$0 -> SKtf
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> qdVr$2:
    react.action.ActionPurgeEntities this$0 -> SKtf
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> qdVr$3:
    react.action.ActionPurgeEntities this$0 -> SKtf
    react.glang.FinalInteger val$completed -> bOqE
    react.glang.FinalInteger val$total -> CNIO
    react.glang.FinalInteger val$totalCulled -> XRuS
    react.glang.FinalInteger val$totalChunked -> GQdm
    react.action.source.IActionSource val$source -> LaTf
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> qdVr$4:
    react.action.ActionPurgeEntities this$0 -> SKtf
    react.action.source.IActionSource val$source -> LaTf
    react.glang.FinalInteger val$totalCulled -> XRuS
    react.glang.FinalInteger val$totalChunked -> GQdm
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> qdVr$5:
    react.action.ActionPurgeEntities this$0 -> SKtf
    org.bukkit.entity.Entity val$i -> STel
    react.glang.FinalInteger val$cu -> ncsa
    int val$k -> jOVq
    org.bukkit.Chunk val$chunk -> jiKE
    java.lang.Runnable val$cb -> AYEa
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> eaTj:
    int lcd -> kIkC
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
react.action.ActionUnlockFluid$1 -> eaTj$1:
    react.action.ActionUnlockFluid this$0 -> ArWR
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> Oqvn:
    int lcd -> kIkC
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
react.action.ActionUnlockHopper$1 -> Oqvn$1:
    react.action.ActionUnlockHopper this$0 -> ytte
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> lLWD:
    int lcd -> kIkC
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
react.action.ActionUnlockRedstone$1 -> lLWD$1:
    react.action.ActionUnlockRedstone this$0 -> ssdD
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> HnCx
    1:1:java.lang.Object get() -> get
react.action.source.AccessActionSource -> xNvw:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> Whld
    26:33:void sendResponseSuccess(java.lang.String) -> LNyy
    38:45:void sendResponseError(java.lang.String) -> ssNb
    50:57:void sendResponseActing(java.lang.String) -> XuBO
react.action.source.ActionHandle -> YwcS:
    react.action.source.ActionHandle AUTOMATIC -> ebKf
    react.action.source.ActionHandle MANUAL -> LHAy
    react.action.source.ActionHandle MUTEX -> oDsh
    react.action.source.ActionHandle[] ENUM$VALUES -> WHBD
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.action.source.ActionHandle[] values() -> values
    1:1:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
react.action.source.ConsoleActionSource -> WNxp:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> Whld
    18:19:void sendResponseSuccess(java.lang.String) -> LNyy
    24:25:void sendResponseError(java.lang.String) -> ssNb
    30:31:void sendResponseActing(java.lang.String) -> XuBO
react.action.source.EmptyActionSource -> TFPk:
    3:3:void <init>() -> <init>
    9:9:void sendResponse(java.lang.String) -> Whld
    15:15:void sendResponseSuccess(java.lang.String) -> LNyy
    21:21:void sendResponseError(java.lang.String) -> ssNb
    27:27:void sendResponseActing(java.lang.String) -> XuBO
react.action.source.IActionSource -> tSlj:
    void sendResponse(java.lang.String) -> Whld
    void sendResponseSuccess(java.lang.String) -> LNyy
    void sendResponseError(java.lang.String) -> ssNb
    void sendResponseActing(java.lang.String) -> XuBO
react.action.source.PlayerActionSource -> IWSS:
    org.bukkit.entity.Player p -> gqCG
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> Whld
    30:31:void sendResponseSuccess(java.lang.String) -> LNyy
    36:37:void sendResponseError(java.lang.String) -> ssNb
    42:43:void sendResponseActing(java.lang.String) -> XuBO
react.action.source.RAIActionSource -> ylMp:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> Whld
    16:17:void sendResponseSuccess(java.lang.String) -> LNyy
    22:23:void sendResponseError(java.lang.String) -> ssNb
    28:29:void sendResponseActing(java.lang.String) -> XuBO
react.api.Action -> wwIa:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> AOrd
    java.lang.String[] nodes -> sjvT
    react.action.source.ActionHandle handle -> sADK
    react.api.ActionState state -> RRGJ
    react.api.ActionTargetType target -> Qpef
    react.api.ActionType type -> ELBE
    react.action.source.IActionSource currentSource -> TFje
    double progress -> LjHS
    react.glang.GMap defaultSelectors -> xaTa
    28:29:void <init>(react.api.ActionType) -> <init>
    31:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> Whld
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> Whld
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> Veil
    94:94:react.api.ActionState getState() -> qdVr
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> xNws
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> eaTj
    130:130:react.api.ActionType getType() -> Oqvn
    136:136:react.glang.GMap getDefaultSelectors() -> lLWD
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> LNyy
    189:190:void completeAction() -> xNvw
    195:195:react.action.source.IActionSource getCurrentSource() -> YwcS
    201:201:java.lang.String[] getNodes() -> WNxp
    207:208:void setNodes(java.lang.String[]) -> Whld
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
react.api.ActionAlreadyRunningException -> clOe:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> lfGn:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> NMQN:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> CDaF:
    react.api.ActionState IDLE -> PeSI
    react.api.ActionState RUNNING -> BmKM
    react.api.ActionState[] ENUM$VALUES -> FOEP
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> rMfW:
    react.api.ActionTargetType POSITIONAL -> FyXY
    react.api.ActionTargetType SYSTEM -> fCNf
    react.api.ActionTargetType[] ENUM$VALUES -> EnEV
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> oxCI:
    react.api.ActionType FIX_LIGHTING -> rpcm
    react.api.ActionType UNLOCK_FLUID -> feRD
    react.api.ActionType LOCK_FLUID -> sREP
    react.api.ActionType UNLOCK_HOPPER -> WjGj
    react.api.ActionType LOCK_HOPPER -> dokO
    react.api.ActionType UNLOCK_REDSTONE -> VoTC
    react.api.ActionType LOCK_REDSTONE -> VUaK
    react.api.ActionType CULL_ENTITIES -> tCdi
    react.api.ActionType COLLECT_GARBAGE -> dDwB
    react.api.ActionType PURGE_ENTITIES -> Mtxs
    react.api.ActionType PURGE_CHUNKS -> gVqY
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> sADK
    react.api.ActionTargetType target -> Qpef
    react.api.ActionType[] ENUM$VALUES -> esOH
    6:18:void <clinit>() -> <clinit>
    25:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> TFPk
    50:50:react.api.ActionTargetType getTarget() -> eaTj
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> WynA:
    react.api.ActivationRangeType ANIMALS -> Vfav
    react.api.ActivationRangeType MONSTERS -> ELAK
    react.api.ActivationRangeType MISC -> PCNl
    react.api.ActivationRangeType[] ENUM$VALUES -> gFPi
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> HvVJ:
    int value() -> value
react.api.Async -> KLYx:
react.api.CPUBenchmark -> Bkra:
    org.bukkit.command.CommandSender sender -> sender
    int score -> nSTy
    java.lang.Runnable onFinish -> nAri
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> tSlj
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> Whld
    13:13:int access$1(react.api.CPUBenchmark) -> LNyy
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> ssNb
react.api.CPUBenchmark$1 -> Bkra$1:
    react.api.CPUBenchmark this$0 -> uOYL
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> Bkra$2:
    react.api.CPUBenchmark this$0 -> uOYL
    1:77:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> jqFx:
    react.api.CPUResult ULTRA_SLOW -> IGKf
    react.api.CPUResult VERY_SLOW -> ECOn
    react.api.CPUResult SLOW -> iehX
    react.api.CPUResult AVERAGE -> quos
    react.api.CPUResult GOOD -> RjwW
    react.api.CPUResult FAST -> aDag
    react.api.CPUResult VERY_FAST -> nRxH
    react.api.CPUResult ULTRA_FAST -> AHGT
    java.lang.String m -> pQNl
    react.api.CPUResult[] ENUM$VALUES -> BmLt
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> Whld
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> LXOM:
    react.glang.GMap cache -> gWVB
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> LNyy
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> ssNb
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> IWSS
    54:54:boolean has(java.lang.Object) -> XuBO
react.api.Capability -> dweX:
    react.api.Capability DUAL_WEILD -> jFkl
    react.api.Capability SCOREBOARD -> mqxR
    react.api.Capability SCOREBOARD_ADVANCED -> GYyS
    react.api.Capability HOPPER -> WOvD
    react.api.Capability ENTITY_ATTRIBUTES -> Thoc
    react.api.Capability ENTITY_AI -> SUMA
    react.api.Capability ACTION_BAR -> nmJm
    react.api.Capability ENTITY_NAMES -> KLsc
    react.api.Capability TITLE_BAR -> yBUv
    react.api.Capability CHUNK_RELIGHTING -> wVCG
    react.api.Capability MONITOR_SUBMISSIVENESS -> TiPm
    react.api.Capability ACCELERATED_PING -> Hvnt
    react.api.Capability ENTITY_THROTTLING -> RslJ
    react.api.Capability TILE_THROTTLING -> WOut
    react.api.Capability PASSENGERS -> wLpR
    react.glang.GList capabilities -> Drqh
    react.surge.util.Protocol version -> SwNK
    react.api.Flavor flavor -> twLY
    java.lang.String plugin -> uhmK
    java.lang.String name -> name
    14:48:void <clinit>() -> <clinit>
    55:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> ylMp
    100:100:boolean isFlavorCapable() -> wwIa
    105:105:boolean isVersionCapable() -> clOe
    110:110:boolean isCapable() -> lfGn
    115:115:react.surge.util.Protocol getVersion() -> NMQN
    120:120:react.api.Flavor getFlavor() -> CDaF
    125:125:java.lang.String getPlugin() -> rMfW
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> Whld
    153:167:void sendNotCapable(react.action.source.IActionSource) -> Whld
react.api.CapabilityBasis -> idrQ:
    react.api.CapabilityBasis VERSION -> gOCs
    react.api.CapabilityBasis FLAVOR -> Fxwn
    react.api.CapabilityBasis PLUGIN -> SCiH
    react.api.CapabilityBasis[] ENUM$VALUES -> bigG
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.CapabilityBasis[] values() -> values
    1:1:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> GPoP:
    react.api.ChunkIssue ENTITY -> JSBA
    react.api.ChunkIssue HOPPER -> Jcav
    react.api.ChunkIssue TNT -> PLAp
    react.api.ChunkIssue REDSTONE -> VoVD
    react.api.ChunkIssue FLUID -> ycvt
    react.api.ChunkIssue PHYSICS -> nSWT
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> ncxN
    react.api.ChunkIssue[] ENUM$VALUES -> KoVp
    3:10:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    14:32:double getMS() -> oxCI
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> WynA
react.api.Clip -> uODB:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> dfcb:
    org.bukkit.command.CommandSender sender -> sender
    12:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> Whld
    31:32:void sendResponseSuccess(java.lang.String) -> LNyy
    37:38:void sendResponseError(java.lang.String) -> ssNb
    43:44:void sendResponseActing(java.lang.String) -> XuBO
react.api.CullList -> DHFs:
    react.glang.GSet toCull -> OQOe
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> XuBO
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> HvVJ
react.api.DTest -> XtdC:
    6:6:void <init>() -> <init>
    11:62:int test() -> KLYx
react.api.EntityFlag -> jxug:
    react.api.EntityFlag NAMED -> nAxW
    react.api.EntityFlag TAMED -> tCij
    react.api.EntityFlag STACKED -> uiPm
    react.api.EntityFlag RIDDEN -> USCe
    react.api.EntityFlag LIVING -> PBrn
    react.api.EntityFlag NON_LIVING -> VwiM
    react.api.EntityFlag PASSIVE -> DICO
    react.api.EntityFlag HOSTILE -> yAvx
    react.api.EntityFlag MATURE -> HwRT
    react.api.EntityFlag YOUNG -> jGNS
    react.api.EntityFlag UNDERWATER -> wECY
    react.api.EntityFlag GROUNDED -> FEwL
    react.api.EntityFlag AIRBORNE -> DQTA
    react.api.EntityFlag PROJECTILES -> WjKl
    react.api.EntityFlag CAVES -> jFlb
    react.api.EntityFlag NEARBY -> CxbR
    react.api.EntityFlag LIT -> dMkm
    react.api.EntityFlag LEASHED -> RAHY
    java.lang.String m -> pQNl
    react.api.EntityFlag[] ENUM$VALUES -> Yony
    12:31:void <clinit>() -> <clinit>
    35:38:void <init>(java.lang.String,int,java.lang.String) -> <init>
    42:52:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> xNws
    57:152:boolean is(org.bukkit.entity.Entity) -> LGKV
    158:158:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> UIVu:
    react.glang.GSet entityTypes -> fmeY
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> Bkra
react.api.EntitySample -> NVDm:
    react.glang.GMap counts -> fvWD
    react.glang.GMap sets -> LPYB
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> jqFx
    45:45:react.glang.GList getTypes() -> LXOM
    50:57:int total() -> dweX
    62:67:int get(org.bukkit.entity.EntityType) -> Whld
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> LNyy
    84:96:void add(org.bukkit.entity.Entity) -> XuBO
react.api.Experimental -> MRaN:
react.api.Flavor -> srnp:
    react.api.Flavor ANY -> lffH
    react.api.Flavor SAFE_MODE -> EvXU
    react.api.Flavor CRAFT_BUKKIT -> QpjB
    react.api.Flavor BUKKIT -> QOGY
    react.api.Flavor SPIGOT -> IrCr
    react.api.Flavor SOGGY_SPIGOT -> iwOL
    react.api.Flavor PAPER_SPIGOT -> ghWa
    react.api.Flavor TACO_SPIGOT -> tfLd
    react.api.Flavor TORCH_SPIGOT -> TysC
    react.api.Flavor FORGE_HACK -> MJjh
    react.api.Flavor SPONGE_HACK -> lnxi
    react.api.Flavor[] ENUM$VALUES -> Emih
    6:18:void <clinit>() -> <clinit>
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> idrQ
    74:79:boolean compatableWith(react.api.Flavor) -> Whld
    84:84:java.lang.String fancyName() -> GPoP
    1:1:react.api.Flavor[] values() -> values
    1:1:react.api.Flavor valueOf(java.lang.String) -> valueOf
react.api.IAction -> NVDx:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> Veil
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> LNyy
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Whld
    react.api.ActionState getState() -> qdVr
    react.api.ActionTargetType getTarget() -> eaTj
    void setNodes(java.lang.String[]) -> Whld
    java.lang.String[] getNodes() -> WNxp
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> xNws
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> Oqvn
    react.glang.GMap getDefaultSelectors() -> lLWD
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> Whld
    react.api.ISelector[] biselect(react.api.ISelector[]) -> Whld
    react.action.source.IActionSource getCurrentSource() -> YwcS
    void completeAction() -> xNvw
react.api.ICache -> oVBe:
    react.glang.GSet get(java.lang.Object) -> LNyy
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> ssNb
    void clear() -> clear
    boolean has(java.lang.Object) -> XuBO
    react.glang.GList k() -> IWSS
react.api.ICommand -> vHtN:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> uODB
    java.lang.String[] getPermissions() -> dfcb
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> LGKV
    react.api.SideGate getSideGate() -> DHFs
    void registerParameterDescription(java.lang.String,java.lang.String) -> Whld
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.api.IRecord -> Bcac:
    java.lang.String getRecordType() -> XtdC
    long getRecordTime() -> jxug
    react.json.JSONObject toJSON() -> UIVu
    java.lang.Object getRecordObject() -> NVDm
    void fromJSON(react.json.JSONObject) -> Whld
react.api.IRecordBook -> XcbK:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> Whld
    long getOldestRecordTime() -> MRaN
    void addRecord(react.api.IRecord) -> Whld
    long getLatestRecordTime() -> srnp
    int countRecords(long,long) -> Whld
    react.glang.GMap getRecords(long,long) -> LNyy
    int purgeRecordsBefore(long) -> LNyy
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> wKwK:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> NVDx
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> oVBe
    react.surge.util.C getAltColor() -> vHtN
    void setColor(react.surge.util.C,react.surge.util.C) -> Whld
    int getInterval() -> getInterval
    void setInterval(int) -> LNyy
    void sample() -> Bcac
    java.lang.String get() -> get
    void construct() -> XcbK
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> onrj:
    react.api.SelectionMode getMode() -> wKwK
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> xNws
    react.glang.GSet getList() -> onrj
    react.glang.GSet getPossibilities() -> FNKh
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> LGKV
    java.lang.String getName() -> getName
react.api.Injection -> FNKh:
    react.api.InjectionMethod value() -> aLXU
react.api.InjectionMethod -> aLXU:
    react.api.InjectionMethod SWAP -> JSGB
    react.api.InjectionMethod SUBSTRATE -> uGOn
    react.api.InjectionMethod RELOAD -> SCmk
    react.api.InjectionMethod[] ENUM$VALUES -> ePqk
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> fRus:
    java.lang.String value() -> value
react.api.MSampler -> nkpG:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> fRus
react.api.MonitorHeading -> VUIj:
    react.api.ISampler head -> mjLl
    react.glang.GList children -> nloM
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> Whld
    27:27:react.api.ISampler getHead() -> nkpG
    32:33:void setHead(react.api.ISampler) -> LNyy
    37:37:react.glang.GList getChildren() -> VUIj
    42:42:java.lang.String getHeadText() -> MlSA
    47:60:java.lang.String getChildText() -> BSCG
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> Whld
react.api.NoiseGenerator -> MlSA:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> BSCG:
    react.api.NoiseGenerator[] octaves -> YMpT
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> inBx
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> inBx:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> FpmS
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> BdCu
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> BdCu:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> Whld
react.api.Permissable -> CUdf:
    react.api.Permissable ACCESS -> rWWr
    react.api.Permissable TELEPORT -> BvBX
    react.api.Permissable MONITOR -> OQTe
    react.api.Permissable MONITOR_TITLE -> MvCW
    react.api.Permissable MONITOR_ACTIONLOG -> OsXS
    react.api.Permissable MONITOR_MAP -> lgHu
    react.api.Permissable MONITOR_ENVIRONMENT -> VMXT
    react.api.Permissable MONITOR_GLASSES -> xHHd
    react.api.Permissable MONITOR_CHUNK_BLAME -> uiRh
    react.api.Permissable RAI_MONITOR -> TrGA
    react.api.Permissable RAI_CONTROL -> gWXY
    react.api.Permissable RAI_ACCESS -> Bubi
    react.api.Permissable RAI -> pQQb
    react.api.Permissable ACT -> DkFi
    react.api.Permissable RELOAD -> feUy
    java.lang.String node -> IiTa
    react.api.Permissable[] ENUM$VALUES -> BeBM
    7:23:void <clinit>() -> <clinit>
    27:38:void <init>(java.lang.String,int,java.lang.String) -> <init>
    42:42:boolean has(org.bukkit.command.CommandSender) -> Whld
    47:47:java.lang.String getNode() -> CUdf
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PluginSelfDeleter -> IFSd:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> qSru
    java.lang.Runnable r -> DPry
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> Whld
react.api.ReactCommand -> OYGF:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> hYyk
    java.lang.String usage -> EeXn
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> QFYC
    react.api.SideGate sideGate -> lfgY
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> LGKV
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> Whld
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> uODB
    47:47:java.lang.String[] getPermissions() -> dfcb
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> DHFs
react.api.ReactException -> yJLo:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> ERxY:
    react.glang.GMap keystore -> hslo
    boolean monitoring -> monitoring
    boolean highMonitor -> VDen
    boolean actionlogging -> feVg
    boolean glasses -> GcPt
    boolean mapping -> iTpX
    int monitorSelection -> ohDg
    int plays -> VxMk
    boolean monitorPosted -> FqPM
    int monitorLastSelection -> dxeW
    int switchNotification -> nmRR
    int hotbarSlot -> sQmG
    boolean shift -> hcNv
    int scroll -> iwSi
    double lastHeight -> LXnW
    react.glang.GList channels -> FyaD
    boolean heightMovement -> oWBb
    org.bukkit.entity.Player p -> gqCG
    25:42:void <clinit>() -> <clinit>
    45:98:void <init>(org.bukkit.entity.Player) -> <init>
    102:102:boolean hasChannel(java.lang.String) -> dLof
    109:116:void save() -> save
    122:129:void load() -> load
    133:133:boolean isMonitoring() -> IFSd
    138:138:boolean isMapping() -> OYGF
    143:143:org.bukkit.entity.Player getP() -> yJLo
    148:150:void addChannel(java.lang.String) -> addChannel
    154:156:void removeChannel(java.lang.String) -> removeChannel
    160:162:void removeAllChannels() -> ERxY
    166:168:void setMonitoring(boolean) -> LNyy
    172:174:void setMapping(boolean) -> ssNb
    178:178:int getMonitorSelection() -> upda
    183:185:void setMonitorSelection(int) -> ssNb
    189:189:int getHotbarSlot() -> fJea
    194:196:void setHotbarSlot(int) -> XuBO
    200:200:boolean isShifting() -> lvkD
    205:207:void setShifting(boolean) -> XuBO
    211:211:boolean isShift() -> XtcB
    216:218:void setShift(boolean) -> xNws
    222:222:int getScroll() -> clRA
    227:229:void setScroll(int) -> xNws
    233:233:int getMonitorLastSelection() -> ssOO
    238:240:void setMonitorLastSelection(int) -> LGKV
    244:245:void setP(org.bukkit.entity.Player) -> LNyy
    249:249:double getLastHeight() -> mhlU
    254:256:void setLastHeight(double) -> Whld
    260:260:boolean isHeightMovement() -> tBll
    265:267:void setHeightMovement(boolean) -> LGKV
    271:271:int getSwitchNotification() -> EBXV
    276:278:void setSwitchNotification(int) -> dLof
    282:282:boolean getMonitorPosted() -> WFjq
    287:289:void setMonitorPosted(boolean) -> dLof
    293:293:int getPlays() -> gUxx
    298:300:void setPlays(int) -> CgDt
    304:304:boolean isGlasses() -> CDeC
    309:311:void setGlasses(boolean) -> CgDt
    315:315:boolean isActionlogging() -> Mccr
    320:322:void setActionlogging(boolean) -> ugrC
react.api.Record -> upda:
    java.lang.String recordType -> MudU
    long recordTime -> Sndc
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> XtdC
    32:32:long getRecordTime() -> jxug
    38:38:java.lang.Object getRecordObject() -> NVDm
    react.json.JSONObject toJSON() -> UIVu
    void fromJSON(react.json.JSONObject) -> Whld
react.api.RecordBook -> fJea:
    java.io.File recordFile -> AGlI
    react.json.JSONObject js -> KLyu
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> Whld
    79:87:react.api.IRecord getRecord(long) -> Whld
    react.api.IRecord createDummyRecord(long,java.lang.String) -> Whld
    95:107:long getOldestRecordTime() -> MRaN
    113:125:long getLatestRecordTime() -> srnp
    130:130:boolean within(long,long,long) -> Whld
    136:144:int countRecords(long,long) -> Whld
    150:162:react.glang.GMap getRecords(long,long) -> LNyy
    168:181:int purgeRecordsBefore(long) -> LNyy
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> lvkD:
react.api.SampledChunk -> XtcB:
    org.bukkit.Chunk c -> cKOW
    react.glang.GMap counts -> fvWD
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> AXQT
    26:38:void hit(react.api.ChunkIssue,int) -> Whld
    42:42:org.bukkit.Chunk getC() -> SLCm
    47:47:react.glang.GMap getCounts() -> OGfq
react.api.SampledType -> clRA:
    react.api.SampledType ENTITY_TIME_LOCK -> vcfP
    react.api.SampledType TILE_TIME_LOCK -> ioBl
    react.api.SampledType ENTITY_TIME -> iDNe
    react.api.SampledType TILE_TIME -> PSxA
    react.api.SampledType ENTITY_DROPTICK -> esVk
    react.api.SampledType TILE_DROPTICK -> lMWu
    react.api.SampledType REDSTONE_TICK_USAGE -> gqMb
    react.api.SampledType REDSTONE_TICK -> jiTX
    react.api.SampledType REDSTONE_SECOND -> axMT
    react.api.SampledType REDSTONE_TIME -> jyti
    react.api.SampledType PHYSICS_TIME -> wwij
    react.api.SampledType HOPPER_TICK_USAGE -> AjPj
    react.api.SampledType HOPPER_TICK -> TiYI
    react.api.SampledType HOPPER_SECOND -> LGnY
    react.api.SampledType HOPPER_TIME -> ELLM
    react.api.SampledType FLUID_TICK_USAGE -> Muej
    react.api.SampledType FLUID_TICK -> Djjm
    react.api.SampledType FLUID_SECOND -> pHfG
    react.api.SampledType FLUID_TIME -> JSJp
    react.api.SampledType TPS -> ogfI
    react.api.SampledType TICK -> tTpv
    react.api.SampledType TIU -> ierw
    react.api.SampledType MEM -> JAiE
    react.api.SampledType FREEMEM -> vtip
    react.api.SampledType MAXMEM -> IPHR
    react.api.SampledType ALLOCMEM -> cTBi
    react.api.SampledType MAHS -> SLdJ
    react.api.SampledType CHK_TIME -> Emna
    react.api.SampledType EXPLOSION_TIME -> aflx
    react.api.SampledType CHK -> AGmi
    react.api.SampledType ATASK -> XeDk
    react.api.SampledType STASK -> Arcp
    react.api.SampledType CHKS -> vlYX
    react.api.SampledType ENT -> aVKd
    react.api.SampledType ENTLIV -> kJWM
    react.api.SampledType ENTDROP -> psXg
    react.api.SampledType ENTTILE -> Tywr
    java.lang.String node -> IiTa
    react.api.SampledType[] ENUM$VALUES -> yKOP
    6:44:void <clinit>() -> <clinit>
    50:50:react.api.ISampler get() -> uyYS
    56:56:java.lang.String toString() -> toString
    59:70:void <init>(java.lang.String,int,java.lang.String) -> <init>
    74:74:java.lang.String getNode() -> CUdf
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> ssOO:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> nmSR
    react.surge.util.C altColor -> iMAa
    int interval -> Jcjh
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> oVBe
    49:49:react.surge.util.C getAltColor() -> vHtN
    55:55:int getInterval() -> getInterval
    void sample() -> Bcac
    void construct() -> XcbK
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> Whld
    107:108:void setInterval(int) -> LNyy
react.api.Sector -> mhlU:
    int value() -> value
react.api.SelectionException -> tBll:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> EBXV:
    react.api.SelectionMode WHITELIST -> afmB
    react.api.SelectionMode BLACKLIST -> XdcG
    react.api.SelectionMode[] ENUM$VALUES -> AabG
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> WFjq:
    java.lang.Class objectType -> Mdck
    react.api.SelectionMode mode -> LjQr
    react.glang.GSet list -> Emmb
    react.glang.GSet possibilities -> ierc
    int popoff -> kAhi
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> wKwK
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> xNws
    43:43:react.glang.GSet getList() -> onrj
    49:49:react.glang.GSet getPossibilities() -> FNKh
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> LGKV
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> dLof
    98:100:int pop() -> pop
react.api.SelectorEntityType -> gUxx:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> ssNb
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> LGKV
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> CgDt
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> CDeC:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> Mccr:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> ssNb
    29:30:void add(org.bukkit.Chunk,int) -> Whld
    34:38:void add(org.bukkit.World) -> CgDt
    42:46:void addAll() -> KvpO
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> LGKV
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> CgDt
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> AXQT:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> LGKV
    87:87:java.lang.String getName() -> getName
react.api.Side -> SLCm:
    react.api.Side PLAYERS -> RkeV
    react.api.Side CONSOLE -> Hvxy
    java.lang.String ss -> afoi
    react.api.Side[] ENUM$VALUES -> scRc
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> dECf
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> LNyy
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> OGfq:
    react.api.SideGate PLAYERS_ONLY -> RcUT
    react.api.SideGate CONSOLES_ONLY -> jWvp
    react.api.SideGate ANYTHING -> QXAy
    int[] $SWITCH_TABLE$react$api$SideGate -> xiqB
    react.api.SideGate[] ENUM$VALUES -> KUpE
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> Whld
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> XuFK
react.api.SimplexNoiseGenerator -> uyYS:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> jPHQ
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> ctcw
react.api.SimplexOctaveGenerator -> KvpO:
    double wScale -> GRRm
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> Whld
react.api.SpecializedTickLimiter -> dECf:
    double rMaxTime -> BlxE
    long rStartTime -> MJra
    double rLastTime -> tCrA
    long rMark -> BBdX
    double tMaxTime -> HwXv
    react.gmath.Average atimes -> tvty
    react.gmath.Average adropped -> CMwW
    int droppedTicks -> GtWA
    boolean entityTick -> eaxv
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> XuFK:
    react.glang.GList sources -> jaHX
    react.glang.GList splooge -> KEMn
    react.glang.GSet destroy -> vsoI
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> Whld
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> LNyy
    void clipped(org.bukkit.Location) -> LNyy
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> ssNb
    boolean isAllowedSource(org.bukkit.Location) -> XuBO
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> Whld
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> LNyy
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> ssNb
react.api.SploogeCounter$1 -> XuFK$1:
    react.api.SploogeCounter this$0 -> wgMg
    java.util.Iterator val$it -> YMuW
    org.bukkit.Location val$start -> vdNU
    int val$maxDistance -> RcVi
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> Whld
react.api.SploogeCounter$1$1 -> XuFK$1$1:
    react.api.SploogeCounter$1 this$1 -> Iqmk
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> ctcw:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> jhVy:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> UIVu
    38:49:void fromJSON(react.json.JSONObject) -> Whld
react.api.StackTraceRecordBook -> iTRg:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> LNyy
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> Whld
react.api.StackedEntity -> HeWJ:
    org.bukkit.entity.LivingEntity entity -> MBdp
    int count -> count
    double rmx -> NWKD
    org.bukkit.entity.Entity damager -> pjle
    24:36:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    41:46:double getMaxHealth(org.bukkit.entity.LivingEntity) -> Whld
    51:51:int getAbsoluteMaxCount() -> jhVy
    56:56:int getMaxCount(org.bukkit.entity.LivingEntity) -> LNyy
    61:63:void update() -> update
    67:72:void destroy() -> destroy
    76:103:void signalSize() -> iTRg
    107:107:java.lang.String color(java.lang.String) -> CgDt
    112:113:void setDamager(org.bukkit.entity.Entity) -> dLof
    117:177:void updateHealth() -> HeWJ
    181:182:void heal(double) -> LNyy
    186:187:void setHealth(double) -> setHealth
    191:191:int getEffectiveCount() -> SeVX
    196:196:int getEffectiveCount(double) -> ssNb
    201:201:double getEffectiveMaxHealth(int) -> ugrC
    206:206:double getRealMaxHealth() -> JRJs
    211:211:double getHealth() -> getHealth
    216:222:void setMaxHealth(double) -> setMaxHealth
    227:236:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> Whld
    240:240:double getMaxHealth() -> getMaxHealth
    245:245:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    250:250:int getCount() -> getCount
react.api.TitleMonitor -> SeVX:
    react.glang.GList headings -> Buim
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> Whld
    24:24:int getMaxSelection() -> avoR
    29:37:int left(int) -> pGaV
    42:50:int right(int) -> HnCx
    55:55:react.api.MonitorHeading getHeadFor(int) -> Veil
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> Whld
    83:100:java.lang.String getHotbarFor(int,boolean) -> Whld
react.api.Unused -> JRJs:
react.api.WorldConfig -> avoR:
    boolean allowRai -> xisR
    boolean allowActions -> bYTA
    boolean allowRelighting -> QNrD
    boolean allowTileThrottling -> YhKb
    boolean allowEntityThrottling -> WYTW
    boolean allowFastLeafDecay -> lUob
    java.util.List assumeNoSideEffectsEntities -> kuPc
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> ugrC
    48:62:void save(org.bukkit.World) -> pGaV
    66:80:void load(org.bukkit.World) -> HnCx
react.cache.CachedEntity -> MJSH:
    java.util.UUID uid -> VNAP
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> sARK
    double x -> x
    double y -> y
    double z -> z
    double vx -> CxnM
    double vy -> XSfg
    double vz -> KEPl
    double dx -> ylvD
    double dy -> bbDy
    double dz -> xirf
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> CgDt
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> MJSH
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> xiPM
    120:121:void setVx(double) -> XuBO
    125:125:double getVy() -> wKxd
    130:131:void setVy(double) -> xNws
    135:135:double getVz() -> ieUA
    140:141:void setVz(double) -> LGKV
    145:145:double getDx() -> BlTk
    150:151:void setDx(double) -> dLof
    155:155:double getDy() -> cdDS
    160:161:void setDy(double) -> CgDt
    165:165:double getDz() -> MdFI
    170:171:void setDz(double) -> ugrC
    175:175:java.util.UUID getUid() -> VDLT
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> xiPM:
    int age -> SUYO
    boolean ageLock -> lxST
    boolean breed -> xXpf
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> CgDt
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> MJQX
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> fRwx
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> wKxd:
    org.bukkit.DyeColor dye -> mrco
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> CgDt
    30:30:org.bukkit.DyeColor getDye() -> nJPJ
    35:36:void setDye(org.bukkit.DyeColor) -> Whld
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> ieUA:
    react.glang.GList potionEffects -> Xugt
    boolean canPickupItems -> FiDe
    org.bukkit.inventory.ItemStack[] armorContents -> MBdR
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> Fhcj
    double maxHealth -> maxHealth
    int maxAir -> rqRp
    int air -> misQ
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> CgDt
    63:63:react.glang.GList getPotionEffects() -> BIre
    68:69:void setPotionEffects(react.glang.GList) -> LNyy
    73:73:boolean isCanPickupItems() -> rMjb
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> HmfK
    138:139:void setMaxAir(int) -> qdVr
    143:143:int getAir() -> kAFh
    148:149:void setAir(int) -> eaTj
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> BlTk:
    boolean sheared -> PKnB
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> CgDt
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> cdDS:
    org.bukkit.inventory.ItemStack is -> nScw
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> CgDt
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> MdFI:
    7:7:void <init>() -> <init>
react.command.CommandAct -> VDLT:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> Whld
    186:192:react.text.RTX getBeginningRTX() -> UtKm
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> Whld
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> LNyy
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> ssNb
    331:346:react.glang.GList getSortedCommands() -> NxHj
    351:358:int getPageSize(int) -> Oqvn
    363:363:boolean isValidPage(int,int) -> Whld
    368:377:react.glang.GList getPage(int,int) -> LNyy
react.command.CommandActionLog -> MJQX:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandBoom -> fRwx:
    16:24:void <init>() -> <init>
    29:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandCPUScore -> nJPJ:
    16:24:void <init>() -> <init>
    29:39:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandCapabilities -> BIre:
    19:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandChunkBlame -> rMjb:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandChunkBlame$1 -> rMjb$1:
    react.command.CommandChunkBlame this$0 -> CyNC
    org.bukkit.command.CommandSender val$sender -> scUC
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> rMjb$1$1:
    react.command.CommandChunkBlame$1 this$1 -> TFwp
    org.bukkit.command.CommandSender val$sender -> scUC
    java.lang.String val$i -> UcnF
    react.glang.GMap val$top -> yddp
    int val$totalx -> yvGa
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandChunkTP -> HmfK:
    18:26:void <init>() -> <init>
    33:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandEnvironment -> kAFh:
    24:32:void <init>() -> <init>
    37:74:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandGlasses -> UtKm:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandHelp -> NxHj:
    28:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> Whld
    81:87:react.text.RTX getBeginningRTX() -> UtKm
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> Whld
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> LNyy
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> ssNb
    208:215:react.glang.GList getSortedCommands() -> NxHj
    220:227:int getPageSize(int) -> Oqvn
    232:232:boolean isValidPage(int,int) -> Whld
    237:246:react.glang.GList getPage(int,int) -> LNyy
react.command.CommandHighMonitor -> Cffo:
    16:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandMap -> Nwgg:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandMonitor -> HeUd:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandReload -> cdBa:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandReload$1 -> cdBa$1:
    react.command.CommandReload this$0 -> TrMb
    org.bukkit.command.CommandSender val$sender -> scUC
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> cdBa$1$1:
    react.command.CommandReload$1 this$1 -> ymVN
    org.bukkit.command.CommandSender val$sender -> scUC
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> MSBp:
    28:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
    54:63:org.bukkit.inventory.ItemStack makeBook() -> Cffo
    68:94:void addSpikePages(react.glang.GList) -> ssNb
    98:108:void addStatusPages(react.glang.GList) -> XuBO
    112:129:int findSlot(org.bukkit.entity.Player) -> ssNb
react.command.CommandSubscribe -> MuEs:
    18:27:void <init>() -> <init>
    32:63:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandTopChunk -> WWni:
    28:36:void <init>() -> <init>
    41:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandUnsubscribe -> pGcs:
    18:27:void <init>() -> <init>
    32:63:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.command.CommandVersion -> kAEs:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Whld
react.controller.ActionController -> hsRM:
    int kiv -> Wref
    react.glang.GMap actions -> MlxJ
    react.glang.GMap pending -> lwpi
    react.glang.GList tasks -> JBMI
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> Whld
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> LNyy
    141:141:react.api.IAction getAction(react.api.ActionType) -> Whld
    146:147:void registerAction(react.api.IAction) -> Whld
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> Nwgg
    241:248:react.glang.GList getActionNames() -> HeUd
react.controller.ChronophyFluidController -> onta:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> SuvQ:
    boolean firstTickList -> wxQP
    long firstTick -> OHjn
    long lastTick -> scSo
    react.gmath.Average aCSMS -> tDTP
    react.glang.GMap pluginLoads -> hcUE
    react.glang.GMap playerLoads -> mQAf
    int serverLoads -> dWHg
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> cdBa
    63:73:void tickNextTickList() -> MSBp
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> Whld
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> Whld
    171:171:boolean isFirstTickList() -> MuEs
    176:176:long getFirstTick() -> WWni
    181:181:long getLastTick() -> pGcs
    186:186:react.gmath.Average getaCSMS() -> kAEs
    191:191:react.glang.GMap getPluginLoads() -> hsRM
    196:196:react.glang.GMap getPlayerLoads() -> onta
    201:201:int getServerLoads() -> SuvQ
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> Whld
    29:29:int access$1(react.controller.ChunkController) -> LNyy
    29:29:void access$2(react.controller.ChunkController,int) -> Whld
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> ssNb
react.controller.ChunkController$1 -> SuvQ$1:
    react.controller.ChunkController this$0 -> nBed
    org.bukkit.event.world.ChunkLoadEvent val$e -> tTwm
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> ssNb
    1:1:void run(java.lang.Object) -> Whld
react.controller.CommandController -> iutT:
    react.glang.GList commands -> qwCq
    boolean k -> JdRY
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> ugrC
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> pGaV
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> Whld
    317:317:react.glang.GList getCommands() -> iutT
    322:323:void setCommands(react.glang.GList) -> xNws
    327:327:boolean isK() -> GPsJ
    332:333:void setK(boolean) -> pGaV
react.controller.EntityCullController -> GPsJ:
    react.glang.GSet flags -> qmrF
    react.glang.GSet defer -> OYnq
    react.glang.GSet prefer -> XukU
    react.glang.GMap maxs -> JSQT
    19:19:void <init>() -> <init>
    29:34:void start() -> start
    40:40:void stop() -> stop
    46:46:void tick() -> tick
    50:200:void repopulateRules() -> dEEs
    204:217:int cull(org.bukkit.Chunk) -> XuBO
    222:346:int partialCull(org.bukkit.Chunk) -> xNws
react.controller.EntityStackController -> dEEs:
    react.glang.GList stacks -> bbGG
    21:23:void <init>() -> <init>
    28:29:void start() -> start
    34:40:void stop() -> stop
    45:60:void tick() -> tick
    65:118:void stack(react.glang.GList) -> LGKV
    122:127:boolean isStacked(org.bukkit.entity.LivingEntity) -> ssNb
    132:145:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> XuBO
    151:169:void on(org.bukkit.event.entity.EntityDamageEvent) -> Whld
    174:193:void on(org.bukkit.event.entity.EntityDamageByEntityEvent) -> Whld
    197:212:void merge(react.api.StackedEntity,react.api.StackedEntity) -> Whld
    216:282:void checkNear(org.bukkit.entity.LivingEntity) -> xNws
    287:327:void on(org.bukkit.event.entity.EntitySpawnEvent) -> Whld
react.controller.EntityStackController$1 -> dEEs$1:
    react.controller.EntityStackController this$0 -> jOjh
    org.bukkit.event.entity.EntitySpawnEvent val$e -> JdSJ
    1:294:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    299:324:void run() -> run
react.controller.EventController -> SSuU:
    react.lagmap.LagMap map -> EvfG
    react.glang.GMap slots -> tDWH
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> Whld
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Whld
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> Whld
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> Whld
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> Whld
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> Whld
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> Whld
react.controller.ExplosiveController -> HdxF:
    boolean firstTickList -> wxQP
    long firstTick -> OHjn
    long lastTick -> scSo
    react.gmath.Average aCSMS -> tDTP
    15:15:void <init>() -> <init>
    25:30:void start() -> start
    34:47:void flushTickList() -> cdBa
    51:61:void tickNextTickList() -> MSBp
    66:67:void stop() -> stop
    73:74:void tick() -> tick
    79:88:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> LNyy
    93:94:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> Whld
    98:98:boolean isFirstTickList() -> MuEs
    103:103:long getFirstTick() -> WWni
    108:108:long getLastTick() -> pGcs
    113:113:react.gmath.Average getaCSMS() -> kAEs
react.controller.FastDecayController -> dEFL:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> ceKC
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> Whld
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> Whld
    74:155:void checkBreak(org.bukkit.block.Block) -> ssNb
    159:190:void decay(org.bukkit.block.Block) -> XuBO
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> xNws
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> SSuU
react.controller.FastDecayController$1 -> dEFL$1:
    react.controller.FastDecayController this$0 -> htXp
    react.glang.GMap val$locs -> IPNb
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> ssNb
    99:99:boolean isAllowedSource(org.bukkit.Location) -> XuBO
    105:124:void clipped(org.bukkit.Location) -> LNyy
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> Whld
react.controller.FastDecayController$1$1 -> dEFL$1$1:
    react.controller.FastDecayController$1 this$1 -> gGBw
    react.glang.GMap val$locs -> IPNb
    int val$i -> KgVR
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> dEFL$2:
    react.controller.FastDecayController this$0 -> htXp
    org.bukkit.block.Block val$b -> Djqg
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FeatureController -> cdFJ:
    react.feature.INMSBinding trueBinding -> BeKJ
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> HdxF
    85:85:java.lang.String getPackageVersion() -> dEFL
    90:90:boolean hasBinding() -> cdFJ
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Whld
react.controller.FluidController -> RHau:
    react.glang.GSet ignore -> hJET
    int flowsPerTick -> kRmY
    int flowsPerSecond -> hASm
    react.gmath.Average aFST -> oWJV
    react.gmath.Average aFSS -> teyG
    react.gmath.Average aFSMS -> brew
    boolean firstTickList -> wxQP
    long firstTick -> OHjn
    long lastTick -> scSo
    react.glang.GSet frozen -> fKnK
    react.glang.GMap queue -> XvJs
    react.glang.GMap freezeTimes -> gXBr
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> LGKV
    68:76:void checkChunks() -> RHau
    80:97:void checkChunk(org.bukkit.Chunk) -> dLof
    101:107:void queue(org.bukkit.block.Block) -> LGKV
    111:111:boolean isFrozen(org.bukkit.Chunk) -> CgDt
    116:117:void freeze(org.bukkit.Chunk) -> ugrC
    121:127:void unfreeze(org.bukkit.Chunk) -> pGaV
    131:138:void freeze(org.bukkit.Chunk,long) -> Whld
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> cdBa
    172:182:void tickNextTickList() -> MSBp
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Whld
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> Whld
    248:248:react.glang.GSet getIgnore() -> KCnC
    253:253:int getTransfersPerTick() -> AyuN
    258:258:int getTransfersPerSecond() -> xWoi
    263:263:react.gmath.Average getaFST() -> bqcU
    268:268:react.gmath.Average getaFSS() -> TVxg
    273:273:react.gmath.Average getaFSMS() -> BkvU
    278:278:boolean isFirstTickList() -> MuEs
    283:283:long getFirstTick() -> WWni
    288:288:long getLastTick() -> pGcs
    293:293:react.glang.GSet getFrozen() -> QFAK
    298:298:react.glang.GMap getQueue() -> FNQg
    303:303:react.glang.GMap getFreezeTimes() -> bGNx
react.controller.GlassController -> KCnC:
    react.glang.GMap q -> VVRl
    react.glang.GList g -> KNCQ
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:137:void tick() -> tick
    141:141:boolean isUsingGlasses(org.bukkit.entity.Player) -> XuBO
    146:146:boolean canUseGlasses(org.bukkit.entity.Player) -> xNws
    151:167:void toggleGlasses(org.bukkit.entity.Player) -> LGKV
    172:177:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Whld
    182:187:void on(org.bukkit.event.block.BlockFromToEvent) -> Whld
    192:197:void on(org.bukkit.event.block.BlockBurnEvent) -> Whld
    202:207:void on(org.bukkit.event.block.BlockFormEvent) -> Whld
    212:217:void on(org.bukkit.event.block.BlockFadeEvent) -> Whld
    222:234:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> Whld
    36:36:react.glang.GList access$0(react.controller.GlassController) -> Whld
react.controller.GlassController$1 -> KCnC$1:
    react.controller.GlassController this$0 -> PUBS
    react.glang.GMap val$cc -> CWNC
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:135:void run() -> run
react.controller.GlassController$1$1 -> KCnC$1$1:
    react.controller.GlassController$1 this$1 -> BvNC
    org.bukkit.Location val$i -> Lrgy
    org.bukkit.entity.Player val$j -> Bdji
    1:108:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    113:118:void run() -> run
react.controller.GraphController -> AyuN:
    react.glang.GMap g -> pkQm
    react.glang.GMap gr -> PvgF
    react.glang.GMap gra -> pYoW
    41:41:void <init>() -> <init>
    50:85:void start() -> start
    90:96:void stop() -> stop
    101:128:void tick() -> tick
    133:150:void on(org.bukkit.event.player.PlayerJoinEvent) -> Whld
    154:176:void createGraphs(react.graph.GraphMode,org.bukkit.entity.Player,react.glang.GList) -> Whld
    180:183:void addSystem(org.bukkit.entity.Player,react.glang.GList) -> Whld
    187:191:void addTick(org.bukkit.entity.Player,react.glang.GList) -> LNyy
    195:199:void addMemory(org.bukkit.entity.Player,react.glang.GList) -> ssNb
    203:204:void addEod(org.bukkit.entity.Player,react.glang.GList) -> XuBO
    208:217:void addPhysics(org.bukkit.entity.Player,react.glang.GList) -> xNws
    221:224:void addReact(org.bukkit.entity.Player,react.glang.GList) -> LGKV
    228:274:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> Whld
    279:319:void on(org.bukkit.event.player.PlayerMoveEvent) -> Whld
    325:325:void on(react.event.ReactScrollEvent) -> Whld
    329:360:void toggleMapping(org.bukkit.entity.Player) -> dLof
    364:396:void toggleMappingEod(org.bukkit.entity.Player) -> CgDt
    400:400:react.glang.GMap getG() -> RIAo
    405:405:react.glang.GMap getGr() -> URJq
    44:44:react.glang.GMap access$0(react.controller.GraphController) -> Whld
    43:43:react.glang.GMap access$1(react.controller.GraphController) -> LNyy
react.controller.GraphController$1 -> AyuN$1:
    react.controller.GraphController this$0 -> Pedo
    1:65:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    70:83:void run() -> run
react.controller.GraphController$2 -> AyuN$2:
    react.controller.GraphController this$0 -> Pedo
    1:101:void <init>(react.controller.GraphController) -> <init>
    106:110:void run() -> run
react.controller.GraphController$3 -> AyuN$3:
    react.controller.GraphController this$0 -> Pedo
    org.bukkit.event.player.PlayerJoinEvent val$e -> hQxE
    1:133:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    138:148:void run() -> run
react.controller.HopperController -> xWoi:
    react.glang.GSet ignore -> hJET
    int transfersPerTick -> Xdkn
    int transfersPerSecond -> bYWj
    react.gmath.Average aHST -> JtuV
    react.gmath.Average aHSS -> tCxf
    react.gmath.Average aHSMS -> toNM
    boolean firstTickList -> wxQP
    long firstTick -> OHjn
    long lastTick -> scSo
    react.glang.GSet frozen -> fKnK
    react.glang.GMap queue -> XvJs
    react.glang.GMap freezeTimes -> gXBr
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> LGKV
    65:73:void checkChunks() -> RHau
    77:94:void checkChunk(org.bukkit.Chunk) -> dLof
    98:104:void queue(org.bukkit.block.Block) -> LGKV
    108:108:boolean isFrozen(org.bukkit.Chunk) -> CgDt
    113:114:void freeze(org.bukkit.Chunk) -> ugrC
    118:124:void unfreeze(org.bukkit.Chunk) -> pGaV
    128:135:void freeze(org.bukkit.Chunk,long) -> Whld
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> cdBa
    169:179:void tickNextTickList() -> MSBp
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> Whld
    207:207:react.glang.GSet getIgnore() -> KCnC
    212:212:int getTransfersPerTick() -> AyuN
    217:217:int getTransfersPerSecond() -> xWoi
    222:222:react.gmath.Average getaHST() -> oDce
    227:227:react.gmath.Average getaHSS() -> kskx
    232:232:react.gmath.Average getaHSMS() -> XAaY
    237:237:boolean isFirstTickList() -> MuEs
    242:242:long getFirstTick() -> WWni
    247:247:long getLastTick() -> pGcs
    252:252:react.glang.GSet getFrozen() -> QFAK
    257:257:react.glang.GMap getQueue() -> FNQg
    262:262:react.glang.GMap getFreezeTimes() -> bGNx
react.controller.HopperOvertickController -> bqcU:
    react.glang.GList possiblePlunge -> LGwK
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> Whld
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> Whld
react.controller.LanguageController -> TVxg:
    java.io.File languageFolder -> nTKC
    int oldVersion -> bahI
    java.io.File dlf -> wNCd
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> Hmgk
    160:221:void downloadAll(boolean) -> HnCx
    225:261:void downloadLanguage(java.lang.String) -> ugrC
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> pGaV
    315:315:java.io.File getFileForLanguage(java.lang.String) -> HnCx
    320:332:void writeDefaults() -> ycbm
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> Whld
    263:263:void access$1(react.controller.LanguageController) -> Whld
react.controller.LanguageController$1 -> TVxg$1:
    react.controller.LanguageController this$0 -> iMKH
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> TVxg$2:
    react.controller.LanguageController this$0 -> iMKH
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> Whld
react.controller.LanguageController$2$1 -> TVxg$2$1:
    react.controller.LanguageController$2 this$1 -> DYqn
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> Whld
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> Whld
    121:121:void onDownloadStarted(react.gnet.download.Download) -> Whld
    126:128:void onDownloadFinished(react.gnet.download.Download) -> LNyy
    134:134:void onDownloadFailed(react.gnet.download.Download) -> ssNb
react.controller.LanguageController$3 -> TVxg$3:
    react.controller.LanguageController this$0 -> iMKH
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> TVxg$3$1:
    react.controller.LanguageController$3 this$1 -> vuSX
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> TVxg$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> KDsj
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> TVxg$4:
    react.controller.LanguageController this$0 -> iMKH
    java.io.File val$dld -> rXEe
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> Whld
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> Whld
    245:245:void onDownloadStarted(react.gnet.download.Download) -> Whld
    250:251:void onDownloadFinished(react.gnet.download.Download) -> LNyy
    257:257:void onDownloadFailed(react.gnet.download.Download) -> ssNb
react.controller.MessageController -> BkvU:
    react.glang.GList notes -> aofv
    17:17:void <init>() -> <init>
    23:24:void queue(react.notification.Notification) -> Whld
    29:39:void start() -> start
    44:46:void stop() -> stop
    51:57:void tick() -> tick
    61:77:void subscribe(org.bukkit.entity.Player,react.notification.Note) -> Whld
    81:97:void unsubscribe(org.bukkit.entity.Player,react.notification.Note) -> LNyy
    101:121:react.glang.GList getSubscriptions(org.bukkit.entity.Player) -> ugrC
    126:131:boolean isSubscribed(org.bukkit.entity.Player,react.notification.Note) -> ssNb
    136:146:void unsubscribeAll(org.bukkit.entity.Player) -> pGaV
    150:163:void subscribeAll(org.bukkit.entity.Player) -> HnCx
    167:174:void process(react.notification.Notification) -> LNyy
    19:19:react.glang.GList access$0(react.controller.MessageController) -> Whld
react.controller.MessageController$1 -> BkvU$1:
    react.controller.MessageController this$0 -> TYAO
    1:31:void <init>(react.controller.MessageController) -> <init>
    36:37:void run(java.lang.String) -> Veil
    1:1:void run(java.lang.Object) -> Whld
react.controller.MonitorController -> QFAK:
    int maxCooldown -> iMKL
    react.api.TitleMonitor titleMonitor -> wgTf
    react.glang.GMap posts -> NElg
    react.slate.PhantomSlate sb -> mQGK
    boolean ready -> LsLd
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> jphc
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> Veil
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> qdVr
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> TNhD
    179:184:float calcVolume(react.api.ReactPlayer) -> Whld
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> eaTj
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> Oqvn
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> lLWD
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> xNvw
    219:223:void startMonitoring(org.bukkit.entity.Player) -> YwcS
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> WNxp
    242:247:void startActionLogging(org.bukkit.entity.Player) -> TFPk
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> tSlj
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> LNyy
    279:291:void processPlayer(react.api.ReactPlayer) -> ssNb
    296:296:void handleActionLog(org.bukkit.entity.Player) -> IWSS
    300:324:void handleTriggers(react.api.ReactPlayer) -> XuBO
    328:367:void handleScrolling(react.api.ReactPlayer) -> xNws
    371:399:void handleShifting(react.api.ReactPlayer) -> LGKV
    403:425:void handlePosting(react.api.ReactPlayer) -> dLof
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> Whld
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> Whld
    471:501:void tickMonitor(react.api.ReactPlayer) -> CgDt
    505:505:react.api.TitleMonitor getTitleMonitor() -> xXNs
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> Whld
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> Whld
    539:552:void onTick() -> LPAm
    556:578:void updateActionBoard() -> vYxW
    583:583:java.lang.String getTickName() -> RYbk
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> Whld
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> Whld
    41:41:void access$2(react.controller.MonitorController,boolean) -> Whld
    41:41:boolean access$3(react.controller.MonitorController) -> LNyy
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> ssNb
react.controller.MonitorController$1 -> QFAK$1:
    react.controller.MonitorController this$0 -> AjYs
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> QFAK$2:
    react.controller.MonitorController this$0 -> AjYs
    1:556:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> FNQg:
    react.glang.GMap samples -> fvfD
    int redstonePerTick -> axWI
    int redstonePerSecond -> CgoO
    boolean firstTickList -> wxQP
    long firstTick -> OHjn
    long lastTick -> scSo
    react.gmath.Average aRSMS -> kAnL
    react.gmath.Average aRST -> bHTs
    react.gmath.Average aRSS -> cKXW
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Whld
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> Whld
    72:79:void flushTickList() -> cdBa
    83:93:void tickNextTickList() -> MSBp
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> HnCx
    121:122:void onPhysics(org.bukkit.Chunk) -> Veil
    126:127:void onHopper(org.bukkit.Chunk) -> qdVr
    131:132:void onFluid(org.bukkit.Chunk) -> eaTj
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> Whld
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> Whld
    156:176:void onTick() -> LPAm
    181:181:java.lang.String getTickName() -> RYbk
    186:186:react.glang.GMap getSamples() -> bhrA
    191:191:int getRedstonePerTick() -> NVGw
    196:196:int getRedstonePerSecond() -> bWoj
    201:201:boolean isFirstTickList() -> MuEs
    206:206:long getFirstTick() -> WWni
    211:211:long getLastTick() -> pGcs
    216:216:react.gmath.Average getaRSMS() -> CgKD
    221:221:react.gmath.Average getaRST() -> cuFe
    226:226:react.gmath.Average getaRSS() -> vsoI
react.controller.PhysicsController$1 -> FNQg$1:
    react.controller.PhysicsController this$0 -> IOmp
    1:168:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> bGNx:
    react.glang.GList players -> bjXS
    react.glang.GSet save -> qUBX
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> ylMp
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> Whld
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> wwIa
    113:113:react.glang.GList getPlayers() -> ryDs
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> Whld
react.controller.PlayerController$1 -> bGNx$1:
    react.controller.PlayerController this$0 -> CyRJ
    react.glang.GList val$toSave -> rGCi
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> RIAo:
    react.rai.IRAI rai -> OjrA
    boolean raiEnabled -> WXwO
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    19:19:react.rai.IRAI access$0(react.controller.RAIController) -> Whld
react.controller.RAIController$1 -> RIAo$1:
    react.controller.RAIController this$0 -> qwEF
    1:46:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> URJq:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> ssNb
react.controller.ReactServerInfo -> oDce:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> YLwn
    27:27:int dgetGameProtocol() -> LGRw
    33:33:java.lang.String dgetGameVersion() -> wTnd
    39:39:java.lang.String dgetReactVersion() -> Hmjl
    45:45:int dgetMaxPlayers() -> oxKt
    51:58:react.glang.GList dgetConnectedPlayers() -> LPDe
    64:64:int dgetViewDistance() -> iBuS
    70:70:int dgetGamePort() -> aDNp
    76:76:java.lang.String dgetGameAddress() -> Lhub
    82:89:react.glang.GList dgetRemotePlugins() -> EvDd
    95:102:react.glang.GList dgetWorlds() -> fvBR
    108:108:react.glang.GList dgetActions() -> nuIC
    114:114:react.glang.GList dgetSamplers() -> vcMc
react.controller.RedstoneController -> kskx:
    react.glang.GSet ignore -> hJET
    react.glang.GSet frozen -> fKnK
    react.glang.GMap queue -> XvJs
    react.glang.GMap freezeTimes -> gXBr
    int redstonePerTick -> axWI
    int redstonePerSecond -> CgoO
    react.gmath.Average aRST -> bHTs
    react.gmath.Average aRSS -> cKXW
    react.gmath.Average aRSMS -> kAnL
    boolean firstTickList -> wxQP
    long firstTick -> OHjn
    long lastTick -> scSo
    react.glang.GMap trackers -> HnnY
    27:27:void <init>() -> <init>
    46:82:void start() -> start
    87:88:void on(org.bukkit.event.world.WorldLoadEvent) -> Whld
    93:95:void on(org.bukkit.event.world.WorldUnloadEvent) -> Whld
    100:106:void stop() -> stop
    110:115:void releaseChunk(org.bukkit.Chunk) -> LGKV
    120:126:void tick() -> tick
    130:138:void checkChunks() -> RHau
    142:159:void checkChunk(org.bukkit.Chunk) -> dLof
    163:169:void queue(org.bukkit.block.Block) -> LGKV
    173:173:boolean isFrozen(org.bukkit.Chunk) -> CgDt
    178:179:void freeze(org.bukkit.Chunk) -> ugrC
    183:190:void flushTickList() -> cdBa
    194:204:void tickNextTickList() -> MSBp
    208:214:void unfreeze(org.bukkit.Chunk) -> pGaV
    218:225:void freeze(org.bukkit.Chunk,long) -> Whld
    230:231:void on(org.bukkit.event.world.ChunkUnloadEvent) -> Whld
    236:249:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Whld
    254:267:void on(org.bukkit.event.block.BlockFromToEvent) -> Whld
    271:271:react.glang.GSet getIgnore() -> KCnC
    276:276:react.glang.GSet getFrozen() -> QFAK
    281:281:react.glang.GMap getQueue() -> FNQg
    286:286:react.glang.GMap getFreezeTimes() -> bGNx
    291:291:int getRedstonePerTick() -> NVGw
    296:296:int getRedstonePerSecond() -> bWoj
    301:301:react.gmath.Average getaRST() -> cuFe
    306:306:react.gmath.Average getaRSS() -> vsoI
    311:311:react.gmath.Average getaRSMS() -> CgKD
    316:316:boolean isFirstTickList() -> MuEs
    321:321:long getFirstTick() -> WWni
    326:326:long getLastTick() -> pGcs
react.controller.RemoteController -> XAaY:
    react.remote.server.RemoteServer remoteServer -> uFyh
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> cBEa
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> Whld
react.controller.RemoteController$1 -> XAaY$1:
    react.controller.RemoteController this$0 -> wDoc
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> XAaY$2:
    react.controller.RemoteController this$0 -> wDoc
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> vcNC
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> GawQ
react.controller.SampleController -> Hmgk:
    react.glang.GMap samplers -> dEkC
    react.surge.server.SuperSampler ss -> HoPC
    int cd -> qLQB
    27:33:void <init>() -> <init>
    37:63:boolean checkThreads() -> oMXD
    68:73:void restartSuperSampler() -> Rrws
    77:78:void registerSampler(react.api.ISampler) -> ssNb
    82:82:react.api.ISampler getSampler(java.lang.String) -> qdVr
    87:130:void constructSamplers() -> VUQg
    135:138:void start() -> start
    143:146:void stop() -> stop
    152:152:void tick() -> tick
    156:156:react.surge.server.SuperSampler getSuperSampler() -> SKhK
    162:184:void onTick() -> LPAm
    189:189:java.lang.String getTickName() -> RYbk
    194:194:react.glang.GMap getSamplers() -> uNgd
    199:199:react.surge.server.SuperSampler getSs() -> Mcft
    204:204:int getCd() -> ncek
    209:216:react.glang.GList getSamplerNames() -> HCWG
react.controller.SecurityController -> ycbm:
    java.lang.String ipa -> mrhN
    react.glang.GList failures -> ecAW
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> eaTj
    41:74:void checkForIP() -> vQjl
    78:91:void scan(java.lang.Runnable) -> Whld
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> ycbm$1:
    react.controller.SecurityController this$0 -> klan
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> ycbm$2:
    java.lang.String val$ip -> hcYL
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> ycbm$3:
    java.lang.Thread val$t -> YyPe
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> jphc:
    react.glang.GMap etl -> pQaV
    react.glang.GMap ttl -> VVXC
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> Whld
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> Whld
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> Veil
    143:160:void releaseWorld(org.bukkit.World) -> qdVr
    164:181:double getUniversalEntityTick() -> mPBX
    186:203:double getUniversalEntityLimit() -> gxdR
    208:225:double getUniversalTileLimit() -> sPqX
    230:247:double getUniversalTileTick() -> VMAC
    252:264:double getUniversalEntityDroppedTicks() -> wCkc
    269:281:double getUniversalTileDroppedTicks() -> Hdxm
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> Whld
    301:312:void setTileTickLimit(org.bukkit.World,double) -> LNyy
    316:321:double getEntityTickLimit(org.bukkit.World) -> eaTj
    326:331:double getTileTickLimit(org.bukkit.World) -> Oqvn
    336:341:double getLastEntityTick(org.bukkit.World) -> lLWD
    346:351:double getLastTileTick(org.bukkit.World) -> xNvw
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> YwcS
    366:371:double getTileDroppedTicks(org.bukkit.World) -> WNxp
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> Whld
react.controller.SpikeController -> TNhD:
    react.glang.GMap spikes -> Jtvr
    26:28:void <init>() -> <init>
    33:60:void start() -> start
    65:66:void stop() -> stop
    72:108:void onTick() -> LPAm
    113:113:java.lang.String getTickName() -> RYbk
    121:121:void tick() -> tick
    125:125:react.glang.GMap getSpikes() -> vcMD
    130:167:void whoFuckingDidThis(react.glang.Callback) -> Whld
    28:28:react.glang.GMap access$0(react.controller.SpikeController) -> Whld
react.controller.SpikeController$1 -> TNhD$1:
    react.controller.SpikeController this$0 -> PfHU
    1:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    40:58:void run() -> run
react.controller.SpikeController$1$1 -> TNhD$1$1:
    react.controller.SpikeController$1 this$1 -> Rkma
    1:40:void <init>(react.controller.SpikeController$1) -> <init>
    45:56:void run() -> run
react.controller.SpikeController$2 -> TNhD$2:
    react.controller.SpikeController this$0 -> PfHU
    react.glang.GMap val$vv -> gOWl
    1:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    80:106:void run() -> run
react.controller.SpikeController$3 -> TNhD$3:
    react.controller.SpikeController this$0 -> PfHU
    java.lang.Thread val$t -> YyPe
    react.glang.Callback val$callback -> LGxj
    1:132:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    137:165:void run() -> run
react.controller.TickTimeController -> xXNs:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> LPAm:
    16:16:void <init>() -> <init>
    21:27:void start() -> start
    32:38:void stop() -> stop
    43:55:void tick() -> tick
    60:61:void on(org.bukkit.event.world.WorldUnloadEvent) -> Whld
react.event.ReactEvent -> vYxW:
    org.bukkit.event.HandlerList handlers -> hkmH
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> RYbk:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> bhrA:
    react.event.ScrollDirection direction -> PmxD
    boolean cancellled -> fvgW
    int amount -> FWih
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> nBBu
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> NEIC
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> NVGw:
    react.event.ScrollDirection DOWN -> VgYc
    react.event.ScrollDirection UP -> IquC
    react.event.ScrollDirection[] ENUM$VALUES -> ogoW
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.feature.INMSBinding -> bWoj:
    java.lang.String getPackageVersion() -> dEFL
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Whld
react.feature.NMSBinding -> CgKD:
    java.lang.String packageVersion -> XupR
    7:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> dEFL
react.feature.NMSBinding10 -> cuFe:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Whld
react.feature.NMSBinding11 -> vsoI:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Whld
react.feature.NMSBinding12 -> ryDs:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Whld
react.feature.NMSBinding8 -> YLwn:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Whld
react.feature.NMSBinding9 -> LGRw:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Whld
react.gbench.Profiler -> wTnd:
    long nanos -> kdUA
    long startNano -> kAqA
    long millis -> Pmww
    long startMillis -> rXGk
    double time -> jjAt
    boolean profiling -> LPiF
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> lLWD
    78:78:double getTicks() -> VfSA
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> roqV
    93:93:double getHours() -> Jbnp
    98:98:double getMilliseconds() -> Vvrc
    103:103:long getNanoseconds() -> rpRc
    108:108:long getNanos() -> rNPB
    113:113:long getStartNano() -> ghCM
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> uhYp
    128:128:double getTime() -> JALt
    133:133:boolean isProfiling() -> pXik
react.gconcurrent.A -> Hmjl:
    react.gconcurrent.ParallelPoolManager mgr -> lxXb
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> Hmjl$1:
    react.gconcurrent.A this$0 -> rhhC
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> oxKt:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> LPDe:
    react.gconcurrent.QueueMode mode -> slLC
    react.glang.GList threads -> skjn
    int next -> aDrs
    int threadCount -> BBmA
    java.util.Queue squeue -> kRqf
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> PCce
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> gyiX
    22:23:void syncQueue(react.gconcurrent.Execution) -> Whld
    long getNanoGate() -> WGQx
    29:42:void tickSyncQueue() -> BdLF
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> FyHy
    93:100:int getTotalQueueSize() -> xWtT
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> LNyy
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> ylYX
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> ArJN
    152:179:void updateThreadInformation() -> kQoD
    183:215:react.gconcurrent.ParallelThread nextThread() -> AyyV
    220:226:void createThreads(int) -> xNvw
    230:230:react.gconcurrent.QueueMode getMode() -> aDQQ
    235:235:int getNext() -> fSaP
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> FggX
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> UQpF
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> xOcL
react.gconcurrent.ParallelThread -> iBuS:
    java.util.Queue queue -> vmCp
    react.gconcurrent.ThreadInformation info -> PCce
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> pGaV
    68:75:void execute(react.gconcurrent.Execution) -> ssNb
    79:88:void execute() -> execute
    92:93:void queue(react.gconcurrent.Execution) -> LNyy
    97:97:java.util.Queue getQueue() -> rMrD
    102:102:react.gconcurrent.ThreadInformation getInfo() -> WaGm
react.gconcurrent.QueueMode -> aDNp:
    react.gconcurrent.QueueMode ROUND_ROBIN -> RAXy
    react.gconcurrent.QueueMode SMALLEST -> gOUu
    react.gconcurrent.QueueMode[] ENUM$VALUES -> miyG
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> Lhub:
    react.gconcurrent.ParallelPoolManager mgr -> lxXb
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> Lhub$1:
    react.gconcurrent.S this$0 -> pYpO
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> EvDd:
    long tick -> lxWy
    long atick -> DIUP
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> fvBR:
    double ticksPerSecond -> HnsO
    int queuedSize -> TOqy
    boolean processing -> AbOI
    double utilization -> toRG
    react.gmath.Average ticksPerSecondAverage -> VUxg
    long tick -> lxWy
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> WiWu
    33:35:void setTicksPerSecond(double) -> HnCx
    39:39:int getQueuedSize() -> TppR
    44:45:void setQueuedSize(int) -> YwcS
    49:49:boolean isProcessing() -> AXVf
    54:55:void setProcessing(boolean) -> Veil
    59:59:double getUtilization() -> lvsq
    64:65:void setUtilization(double) -> Veil
    69:69:double getTicksPerSecondAverage() -> QFEO
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> ECCB
    89:89:int getId() -> getId
react.gformat.F -> nuIC:
    java.text.NumberFormat NF -> fegq
    java.text.DecimalFormat DF -> qmxN
    java.lang.String[] NAMES -> dFPW
    java.math.BigInteger THOUSAND -> wfyI
    java.util.NavigableMap MAP -> ndoR
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> Oqvn
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> Whld
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> Whld
    201:221:java.lang.String timeLong(long,int) -> Whld
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> ssNb
    236:236:java.lang.String b(double) -> qdVr
    241:258:java.lang.String b(java.math.BigInteger) -> Whld
    263:267:void instantiate() -> XdKV
    279:279:java.lang.String fileSize(long) -> XuBO
    292:292:java.lang.String memSize(long) -> xNws
    297:297:java.lang.String memSize(long,int) -> LNyy
    310:311:java.lang.String stamp(long) -> LGKV
    327:361:java.lang.String ofSize(long,int) -> ssNb
    367:394:java.lang.String ofSize(long,int,int) -> Whld
    408:413:java.lang.String trim(java.lang.String,int) -> LNyy
    426:446:java.lang.String cname(java.lang.String) -> lLWD
    460:472:java.lang.String repeat(java.lang.String,int) -> repeat
    484:491:java.lang.String mem(long) -> dLof
    504:522:java.lang.String memx(long) -> CgDt
    536:537:java.lang.String f(long) -> ugrC
    549:550:java.lang.String f(int) -> WNxp
    564:573:java.lang.String f(double,int) -> LNyy
    589:598:java.lang.String fd(double,int) -> ssNb
    612:621:java.lang.String f(float,int) -> Whld
    632:632:java.lang.String f(double) -> eaTj
    643:643:java.lang.String f(float) -> Whld
    658:658:java.lang.String pc(double,int) -> XuBO
    673:673:java.lang.String pc(float,int) -> LNyy
    686:686:java.lang.String pc(double) -> Oqvn
    699:699:java.lang.String pc(float) -> LNyy
    715:715:java.lang.String pc(int,int,int) -> Whld
    729:729:java.lang.String pc(int,int) -> ssNb
    745:745:java.lang.String pc(long,long,int) -> Whld
    759:759:java.lang.String pc(long,long) -> XuBO
    771:771:java.lang.String msSeconds(long) -> pGaV
    785:785:java.lang.String msSeconds(long,int) -> XuBO
    797:797:java.lang.String nsMs(long) -> HnCx
    811:811:java.lang.String nsMs(long,int) -> xNws
    825:825:java.lang.String nsMsd(long,int) -> LGKV
react.glang.AccessCallback -> vcMc:
    java.lang.Object get() -> get
react.glang.Adapter -> cBEa:
    java.lang.Object adapt(java.lang.Object) -> LGKV
    java.lang.Object onAdapt(java.lang.Object) -> dLof
react.glang.Callback -> vcNC:
    java.lang.Object t -> OIUI
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> Whld
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> GawQ:
    double i -> kuYH
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> lLWD
react.glang.FinalFloat -> oMXD:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> ssNb
react.glang.FinalInteger -> Rrws:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> TFPk
react.glang.FinalLong -> VUQg:
    long i -> igBb
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> Veil
react.glang.FinalString -> SKhK:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> uNgd:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> LGKV
    java.lang.Object onAdapt(java.lang.Object) -> dLof
react.glang.GBiset -> Mcft:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> WPlO
    java.lang.Object b -> QhmQ
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> nBEa
    53:54:void setA(java.lang.Object) -> CgDt
    63:63:java.lang.Object getB() -> NVKc
    73:74:void setB(java.lang.Object) -> ugrC
react.glang.GList -> ncek:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> XuBO
    45:52:react.glang.GList grepDistance(int,int) -> xNws
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> LNyy
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> uOKA
    188:190:react.glang.GList shuffleCopy() -> XBFj
    198:199:void shuffle() -> lDOl
    210:236:react.glang.GList split() -> SLIQ
    248:248:boolean hasIndex(int) -> tSlj
    258:259:java.lang.Object pickRandom() -> WFsS
    270:277:react.glang.GList stringList() -> ntiW
    288:292:void forEach(react.glang.Callback) -> LNyy
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> IWSS
    336:336:react.glang.GList cropFrom(int) -> ylMp
    341:373:react.glang.GList split(int) -> wwIa
    389:389:react.glang.GList cropTo(int) -> clOe
    406:416:react.glang.GList crop(int,int) -> LGKV
    427:431:react.glang.GList removeDuplicates() -> kboM
    442:446:void removeAll(java.lang.Object) -> pGaV
    455:455:boolean hasDuplicates() -> tKgL
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> BuMn
    484:490:void push(java.lang.Object,int) -> Whld
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> HnCx
    528:532:void add(java.util.List) -> Whld
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> Sdys
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> wDOI
    626:627:react.glang.GList qdel(java.lang.Object) -> Veil
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> uFXn
    662:669:java.lang.Object popLast() -> PeCd
    674:683:java.lang.Object popRandom() -> imjK
react.glang.GListAdapter -> HCWG:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> LNyy
    java.lang.Object onAdapt(java.lang.Object) -> dLof
react.glang.GMap -> vQjl:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> DsCM
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> Whld
    64:81:react.glang.GMap flip() -> CgQN
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> Whld
    121:121:react.glang.GList k() -> IWSS
    131:131:react.glang.GSet kset() -> baHu
    141:141:react.glang.GList v() -> anfb
    151:151:react.glang.GSet vset() -> hayU
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> LNyy
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> dLof
    209:219:react.glang.GMap removeDuplicateValues() -> VfVs
    233:242:void put(react.glang.GList,react.glang.GList) -> Whld
    251:267:react.glang.GList sortK() -> iByU
    277:293:react.glang.GList sortV() -> CwrD
react.glang.GQuadraset -> mPBX:
    java.lang.Object a -> WPlO
    java.lang.Object b -> QhmQ
    java.lang.Object c -> wfxR
    java.lang.Object d -> MBmr
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> nBEa
    25:26:void setA(java.lang.Object) -> CgDt
    30:30:java.lang.Object getB() -> NVKc
    35:36:void setB(java.lang.Object) -> ugrC
    40:40:java.lang.Object getC() -> wUSs
    45:46:void setC(java.lang.Object) -> qdVr
    50:50:java.lang.Object getD() -> LGXJ
    55:56:void setD(java.lang.Object) -> eaTj
react.glang.GSet -> gxdR:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> sPqX:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> WPlO
    java.lang.Object b -> QhmQ
    java.lang.Object c -> wfxR
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> nBEa
    26:27:void setA(java.lang.Object) -> CgDt
    31:31:java.lang.Object getB() -> NVKc
    36:37:void setB(java.lang.Object) -> ugrC
    41:41:java.lang.Object getC() -> wUSs
    46:47:void setC(java.lang.Object) -> qdVr
react.gmath.Average -> VMAC:
    double[] values -> pHqM
    double average -> FOYq
    boolean dirty -> DREW
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> xNvw
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> YpAb
react.gmath.DoubleArrayUtils -> wCkc:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> Whld
    17:19:void wrapRight(double[]) -> Whld
    23:27:void fill(double[],double) -> fill
react.gmath.M -> Hdxm:
    int precision -> JSVQ
    int modulus -> MCMY
    float[] sin -> kuXH
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> Whld
    31:36:boolean r(java.lang.Double) -> LNyy
    51:51:double tps(long,int) -> dLof
    63:63:double ticksFromNS(long) -> qdVr
    75:101:java.lang.String toRoman(int) -> lfGn
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> dLof
    144:216:int fromRoman(java.lang.String) -> xNvw
    226:226:long ns() -> Oiri
    236:236:long ms() -> BIyW
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> LNyy
    333:333:float sinLookup(int) -> NMQN
react.gnet.client.Client -> vcMD:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> oVpB
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> Whld
    74:74:react.gnet.packet.PacketHandler getHandler() -> dgPB
react.gnet.client.IClient -> nBBu:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> Whld
    react.gnet.packet.PacketHandler getHandler() -> dgPB
react.gnet.download.Download -> NEIC:
    react.gnet.download.DownloadState state -> kAqu
    react.gnet.download.DownloadType type -> mQKC
    react.gnet.download.DownloadStatus status -> wfwM
    react.gnet.download.DownloadMonitor monitor -> dxry
    java.net.URL url -> url
    java.io.File file -> ujCQ
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    24:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> AXXd
    92:92:react.gnet.download.DownloadType getType() -> sryP
    97:97:react.gnet.download.DownloadStatus getStatus() -> xywo
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> LiYa
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> VfSA:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> Whld
    void onDownloadStarted(react.gnet.download.Download) -> Whld
    void onDownloadFinished(react.gnet.download.Download) -> LNyy
    void onDownloadFailed(react.gnet.download.Download) -> ssNb
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> Whld
react.gnet.download.DownloadState -> roqV:
    react.gnet.download.DownloadState IDLE -> dOAN
    react.gnet.download.DownloadState DOWNLOADING -> xiyw
    react.gnet.download.DownloadState FAILED -> DYtv
    react.gnet.download.DownloadState FINISHED -> cSmS
    react.gnet.download.DownloadState[] ENUM$VALUES -> txAj
    3:8:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadState[] values() -> values
    1:1:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
react.gnet.download.DownloadStatus -> Jbnp:
    long bytesDownloaded -> AbOO
    long bytesTotal -> IifB
    long bytesPerSecond -> SoVA
    long timeElapsed -> wUxp
    10:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> UlCx
    25:25:long getBytesDownloaded() -> EeEo
    30:31:void setBytesDownloaded(long) -> eaTj
    35:35:long getBytesTotal() -> jqPc
    40:41:void setBytesTotal(long) -> Oqvn
    45:45:long getBytesPerSecond() -> oDiq
    50:51:void setBytesPerSecond(long) -> lLWD
    55:55:long getTimeElapsed() -> Rjjh
    60:61:void setTimeElapsed(long) -> xNvw
react.gnet.download.DownloadType -> Vvrc:
    react.gnet.download.DownloadType DETERMINATE -> MvTr
    react.gnet.download.DownloadType INDETERMINATE -> mPmA
    react.gnet.download.DownloadType[] ENUM$VALUES -> xsPT
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadType[] values() -> values
    1:1:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
react.gnet.packet.IPacket -> rpRc:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> KngT
    java.lang.String getPacketName() -> pXme
react.gnet.packet.IncompatablePacketException -> rNPB:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> ghCM:
    react.gnet.packet.PacketBinding SERVER_BOUND -> nurf
    react.gnet.packet.PacketBinding CLIENT_BOUND -> FWmd
    react.gnet.packet.PacketBinding[] ENUM$VALUES -> wUyV
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.packet.PacketBinding[] values() -> values
    1:1:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
react.gnet.packet.PacketException -> uhYp:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> JALt:
    react.glang.GList accept -> esiX
    react.gnet.packet.PacketBinding side -> lVYo
    react.gnet.streams.OSS out -> HxHI
    react.gnet.streams.ISS in -> TrYN
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> Whld
    28:34:void accept(react.gnet.packet.IPacket) -> LNyy
    38:46:react.gnet.packet.IPacket findPacket(int) -> CDaF
    51:66:react.gnet.packet.IPacket read() -> jpoN
    71:77:void write(react.gnet.packet.IPacket) -> ssNb
react.gnet.packet.UnhandledPacketException -> pXik:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> WGQx:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> dgPB
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> XuBO
react.gnet.server.Server -> BdLF:
    int port -> port
    java.net.ServerSocket socket -> CEqw
    react.gnet.packet.PacketHandler handler -> oVpB
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> dgPB
    37:84:void run() -> run
    88:91:void pstart() -> rEap
    95:96:void pstop() -> PmVJ
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> XuBO
react.gnet.streams.ISS -> FyHy:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> XvUI
    boolean built -> Aanq
    byte[] readBuffer -> NVte
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> rMfW
    64:72:react.glang.GList readStringList() -> Cwpt
    77:85:react.glang.GList readDoubleList() -> WaHn
    90:98:react.glang.GList readLongList() -> XIwy
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> Whld
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> Whld
    136:137:react.gnet.streams.ISS gzip() -> OabN
    142:147:void build() -> Keux
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> LNyy
    435:436:void close() -> close
react.gnet.streams.OSS -> xWtT:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> EfMi
    react.gnet.streams.StreamBuilder bu -> XvUI
    boolean built -> Aanq
    byte[] writeBuffer -> Hfcf
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> oxCI
    41:42:react.gnet.streams.OSS gzip(int) -> WynA
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> LNyy
    53:58:void build() -> Keux
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> CgDt
    102:108:void writeDoubleList(react.glang.GList) -> ugrC
    112:118:void writeLongList(react.glang.GList) -> pGaV
    122:128:void writeStreamableList(react.glang.GList) -> HnCx
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> mFtG
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> ssNb
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> ylYX:
    react.glang.GList constructors -> kSVe
    18:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> Whld
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> Whld
    49:50:void bind(react.gnet.streams.StreamConstructor) -> Whld
    54:55:void bindGZIP(int) -> HvVJ
    59:60:void bindGZIP() -> cSMG
    64:65:void bindCipher(javax.crypto.Cipher) -> ssNb
    69:70:void bindBuffer(int) -> KLYx
    74:75:void bindBuffer() -> VfYU
react.gnet.streams.StreamConstructor -> ArJN:
    java.io.InputStream constructInput(java.io.InputStream) -> Whld
    java.io.OutputStream constructOutput(java.io.OutputStream) -> Whld
react.gnet.streams.constructors.BufferedStreamConstructor -> kQoD:
    int bufferSize -> bufferSize
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> LNyy
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> LNyy
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> Whld
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> Whld
react.gnet.streams.constructors.CipherStreamConstructor -> AyyV:
    javax.crypto.Cipher cipher -> TaUh
    17:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> ssNb
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> ssNb
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> Whld
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> Whld
react.gnet.streams.constructors.GZipStreamConstructor -> aDQQ:
    int compressionLevel -> tgCA
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> XuBO
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> XuBO
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> Whld
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> Whld
react.gnet.streams.overlays.CGZIPInputStream -> fSaP:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> FggX:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> UQpF:
    void toBytes(react.gnet.streams.OSS) -> Whld
    void fromBytes(react.gnet.streams.ISS) -> Whld
react.graph.ColossalView -> xOcL:
    react.papyrus.BufferedFrame view -> bGyy
    react.glang.GMap buffers -> uPSV
    react.glang.GMap graphs -> JRvy
    double level -> uaTg
    double targetLevel -> MTPw
    int maxX -> BBpc
    int maxY -> NVsT
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> vRSH
    51:77:void render() -> IqTq
    81:98:void scroll(int) -> Bkra
    102:112:void recompile() -> TNqF
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> Whld
    122:122:react.papyrus.BufferedFrame getView() -> psEa
    127:127:react.glang.GMap getBuffers() -> JJES
    132:132:react.glang.GMap getGraphs() -> HwCc
    137:137:double getLevel() -> RYlY
    142:142:double getTargetLevel() -> PKVK
    147:147:int getMaxX() -> ghJN
    152:152:int getMaxY() -> KfYr
react.graph.ColossalView$Builder -> xOcL$Whld:
    react.glang.GList graphs -> JBWK
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> Whld
    171:191:react.graph.ColossalView compute() -> PSfU
react.graph.CubicleIterator -> rMrD:
    int[][] mapping -> VMik
    int xCubes -> cmas
    int yCubes -> kmHf
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> jqFx
    47:130:void insert(react.graph.GraphSize,int) -> Whld
    134:145:void print() -> print
react.graph.Graph2D -> WaGm:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> Whld
react.graph.GraphCPUArc -> WiWu:
    byte fontColor -> Utyu
    byte backgroundColor -> DQfp
    double pct -> cBnF
    react.gmath.Average aax -> pYtY
    react.gmath.Average aay -> bPlU
    react.gmath.Average aaz -> IrXl
    long msx -> vRxN
    26:38:void <init>(byte) -> <init>
    42:47:void sample() -> Bcac
    52:90:void onRender(react.papyrus.BufferedFrame) -> Whld
    94:94:byte getFontColor() -> eGqG
    99:100:void setFontColor(byte) -> Whld
    104:104:byte getBackgroundColor() -> jqSU
    109:110:void setBackgroundColor(byte) -> LNyy
react.graph.GraphLagMap -> TppR:
    int grid -> NxyQ
    org.bukkit.entity.Player viewer -> IjJs
    org.bukkit.util.Vector lastVector -> ceSx
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> ncxN
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> cdOA
    49:55:void zoomOut() -> eXqp
    60:164:void onRender(react.papyrus.BufferedFrame) -> Whld
    21:21:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> WynA
react.graph.GraphMemoryArc -> AXVf:
    byte fontColor -> Utyu
    byte backgroundColor -> DQfp
    double pct -> cBnF
    react.gmath.Average aax -> pYtY
    long msx -> vRxN
    long of -> OQhu
    26:37:void <init>(byte) -> <init>
    41:47:void sample() -> Bcac
    52:79:void onRender(react.papyrus.BufferedFrame) -> Whld
    83:83:byte getFontColor() -> eGqG
    88:89:void setFontColor(byte) -> Whld
    93:93:byte getBackgroundColor() -> jqSU
    98:99:void setBackgroundColor(byte) -> LNyy
react.graph.GraphMode -> lvsq:
    react.graph.GraphMode NORMAL -> XBpk
    react.graph.GraphMode ITEMFRAME -> dEsR
    react.graph.GraphMode EOD -> MmfP
    react.graph.GraphMode[] ENUM$VALUES -> mkBE
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.GraphMode[] values() -> values
    1:1:react.graph.GraphMode valueOf(java.lang.String) -> valueOf
react.graph.GraphSampleLine -> QFEO:
    double lx -> DcMB
    double ly -> FrCk
    react.api.ISampler sampler -> wEYy
    react.graph.IFormatter formatter -> bsRs
    byte graphColor -> FPAT
    byte backgroundColor -> DQfp
    byte borderColor -> AkBy
    byte textColor -> LQPN
    int ticksLeftTitle -> dWUL
    int ticksOutTitle -> GccL
    double nextPoint -> XuuF
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> Bcac
    51:183:void onRender(react.papyrus.BufferedFrame) -> Whld
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> LNyy
    226:254:int getHue(int,int,int) -> ssNb
    259:281:void scaleFor(react.glang.GList) -> Veil
    285:285:react.graph.IFormatter getFormatter() -> NVDx
    290:291:void setFormatter(react.graph.IFormatter) -> Whld
    295:295:byte getGraphColor() -> DQBv
    300:301:void setGraphColor(byte) -> ssNb
    305:305:byte getBackgroundColor() -> jqSU
    310:311:void setBackgroundColor(byte) -> LNyy
    315:315:byte getBorderColor() -> KniK
    320:321:void setBorderColor(byte) -> XuBO
    325:325:byte getTextColor() -> MuOs
    330:331:void setTextColor(byte) -> xNws
    335:335:react.api.ISampler getSampler() -> AOjl
react.graph.GraphSize -> ECCB:
    react.graph.GraphSize WIDE -> eIUy
    react.graph.GraphSize FULL -> gGKr
    react.graph.GraphSize SQUARE -> gWmW
    int[] $SWITCH_TABLE$react$graph$GraphSize -> Tihi
    react.graph.GraphSize[] ENUM$VALUES -> oVrm
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> FyLj
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> Kewo
react.graph.GraphText -> XdKV:
    java.lang.String text -> text
    byte fontColor -> Utyu
    byte backgroundColor -> DQfp
    boolean wrote -> JRya
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> Whld
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> eGqG
    68:69:void setFontColor(byte) -> Whld
    73:73:byte getBackgroundColor() -> jqSU
    78:79:void setBackgroundColor(byte) -> LNyy
react.graph.GraphingInstance -> nBEa:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> JBWK
    react.graph.ColossalView view -> vdYL
    react.papyrus.Papyrus papyrus -> EULt
    react.papyrus.IRenderer renderer -> NWWK
    boolean mapping -> iTpX
    react.glang.GList msgs -> BduV
    react.surge.sched.Task waiter -> urXF
    react.surge.sched.Task waiter2 -> eHuc
    int shift -> oxuv
    int iv -> brqR
    boolean notif -> aMnO
    boolean doScrolling -> pHxU
    49:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> VMFi
    127:128:void setDoScrolling(boolean) -> qdVr
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> Whld
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> Whld
    151:155:void send(java.lang.String) -> YwcS
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> Whld
    166:205:void on(react.event.ReactScrollEvent) -> Whld
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> Whld
    219:227:void destroy() -> destroy
    231:240:void toggle() -> Rjlf
    244:245:void setGraphs(react.glang.GList) -> qdVr
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> KCuT
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> kQps
    298:298:react.graph.ColossalView getView() -> TqSu
    303:303:react.papyrus.Papyrus getPapyrus() -> PJtX
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> Whld
    323:324:void setPapyrus(react.papyrus.Papyrus) -> Whld
    328:329:void setRenderer(react.papyrus.IRenderer) -> Whld
    333:334:void setMapping(boolean) -> ssNb
    338:339:void setMsgs(react.glang.GList) -> eaTj
    343:344:void setWaiter(react.surge.sched.Task) -> Whld
    348:349:void setWaiter2(react.surge.sched.Task) -> LNyy
    353:354:void setShift(int) -> LXOM
    358:359:void setNotif(boolean) -> eaTj
    363:363:react.papyrus.IRenderer getRenderer() -> HvbS
    368:368:boolean isMapping() -> OYGF
    373:373:react.glang.GList getMsgs() -> IOQj
    378:378:react.surge.sched.Task getWaiter() -> yJXm
    383:383:react.surge.sched.Task getWaiter2() -> opAJ
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> jiBR
    398:414:void compile() -> HwBp
    418:433:void enableSly() -> ghHv
    437:445:void disableSly() -> CNCW
    40:40:boolean access$0(react.graph.GraphingInstance) -> Whld
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> LNyy
    46:46:boolean access$2(react.graph.GraphingInstance) -> ssNb
    46:46:void access$3(react.graph.GraphingInstance,boolean) -> Whld
    44:44:int access$4(react.graph.GraphingInstance) -> XuBO
    44:44:void access$5(react.graph.GraphingInstance,int) -> Whld
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> xNws
react.graph.GraphingInstance$1 -> nBEa$1:
    react.graph.GraphingInstance this$0 -> bIAb
    org.bukkit.entity.Player val$player -> BCUN
    1:54:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> nBEa$2:
    react.graph.GraphingInstance this$0 -> bIAb
    1:79:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> nBEa$3:
    react.graph.GraphingInstance this$0 -> bIAb
    1:109:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> Whld
react.graph.IFormatter -> NVKc:
    java.lang.String from(double) -> YwcS
react.graph.IGraph -> uOKA:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> xPKI
    long getTimeViewport() -> twCT
    void render(react.papyrus.BufferedFrame) -> ssNb
    double getMax() -> getMax
    void setMax(double) -> WNxp
react.graph.NormalGraph -> XBFj:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> xapw
    long timeViewport -> rysK
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> xPKI
    35:35:long getTimeViewport() -> twCT
    41:42:void render(react.papyrus.BufferedFrame) -> ssNb
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> WNxp
    void onRender(react.papyrus.BufferedFrame) -> Whld
react.graph.PlotBoard -> lDOl:
    react.glang.GMap plots -> RuHO
    int maxRecordings -> QFon
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> Oaet
    33:33:long getAccurateTimeSpan() -> FFJo
    38:50:long getMedian(long,long) -> xNws
    55:55:long getMinimumAccuracyRange() -> CERH
    60:70:double getMaxValue() -> ndOm
    75:85:double getMinValue() -> GjpU
    90:90:react.glang.GList sort(react.glang.GMap) -> LNyy
    95:105:long earilestRecording() -> Dafs
    110:120:long latestRecording() -> GcAR
    125:126:void reduceBefore(long) -> YwcS
    130:156:void reduceBetween(long,long) -> LGKV
    160:160:boolean before(long,long) -> dLof
    165:165:boolean after(long,long) -> CgDt
    170:170:boolean within(long,long,long) -> Whld
    175:193:react.glang.GMap getBetween(long,long) -> ugrC
    198:200:void plot(long,double) -> Whld
    204:204:boolean hasAt(long) -> WNxp
    209:209:double getAt(long) -> TFPk
    214:214:int getSize() -> getSize
react.graph.Point -> SLIQ:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> WFsS:
    int iid -> CFWb
    react.graph.IGraph graph -> FObL
    react.graph.GraphSize size -> nmem
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> iLPJ
    24:25:void setGraph(react.graph.IGraph) -> Whld
    29:29:react.graph.GraphSize getSize() -> DXuo
    34:35:void setSize(react.graph.GraphSize) -> Whld
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> ntiW:
    react.graph.RenderMaxType UNLIMITED -> FOaq
    react.graph.RenderMaxType LIMITED -> pcKe
    react.graph.RenderMaxType[] ENUM$VALUES -> gaAp
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> kboM:
    java.lang.String CRLF -> WsUl
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> WNxp
    162:198:java.lang.String toString(react.json.JSONObject) -> LNyy
react.json.HTTPTokener -> tKgL:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> BuMn:
    java.util.ArrayList myArrayList -> nvWW
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> Whld
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> dweX
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> idrQ
    394:399:react.json.JSONObject getJSONObject(int) -> GPoP
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> TFPk
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> uODB
    515:515:boolean optBoolean(int) -> dfcb
    533:536:boolean optBoolean(int,boolean) -> LNyy
    551:551:double optDouble(int) -> DHFs
    569:572:double optDouble(int,double) -> Whld
    587:587:int optInt(int) -> XtdC
    605:608:int optInt(int,int) -> CgDt
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> LNyy
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> Whld
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> Whld
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> Whld
    722:723:react.json.JSONArray optJSONArray(int) -> jxug
    737:738:react.json.JSONObject optJSONObject(int) -> UIVu
    752:752:long optLong(int) -> NVDm
    770:773:long optLong(int,long) -> Whld
    788:788:java.lang.String optString(int) -> MRaN
    803:804:java.lang.String optString(int,java.lang.String) -> Whld
    816:817:react.json.JSONArray put(boolean) -> Oqvn
    830:831:react.json.JSONArray put(java.util.Collection) -> Whld
    845:848:react.json.JSONArray put(double) -> TFPk
    860:861:react.json.JSONArray put(int) -> srnp
    873:874:react.json.JSONArray put(long) -> tSlj
    887:888:react.json.JSONArray put(java.util.Map) -> Whld
    902:903:react.json.JSONArray put(java.lang.Object) -> Oqvn
    921:922:react.json.JSONArray put(int,boolean) -> ssNb
    939:940:react.json.JSONArray put(int,java.util.Collection) -> Whld
    958:959:react.json.JSONArray put(int,double) -> LNyy
    977:978:react.json.JSONArray put(int,int) -> ugrC
    996:997:react.json.JSONArray put(int,long) -> LNyy
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> Whld
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> Whld
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> lLWD
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> Whld
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> Whld
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> Whld
react.json.JSONException -> Sdys:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> vAxW
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> wDOI:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> Whld
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> tSlj
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> Whld
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> LNyy
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> WNxp
    379:456:java.lang.String toString(react.json.JSONArray) -> LNyy
    472:552:java.lang.String toString(react.json.JSONObject) -> LNyy
react.json.JSONObject -> uFXn:
    java.util.Map map -> map
    java.lang.Object NULL -> AasU
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> Whld
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> LNyy
    480:499:java.lang.String doubleToString(double) -> tSlj
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> IWSS
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> ylMp
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> wwIa
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> ssNb
    751:767:java.lang.String[] getNames(java.lang.Object) -> xNvw
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> clOe
    855:855:boolean isNull(java.lang.String) -> lfGn
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> ryNA
    917:937:java.lang.String numberToString(java.lang.Number) -> Whld
    949:949:java.lang.Object opt(java.lang.String) -> NMQN
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> Whld
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> Whld
    1018:1018:boolean optBoolean(java.lang.String) -> CDaF
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> Whld
    1054:1054:double optDouble(java.lang.String) -> rMfW
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> Whld
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> Whld
    1116:1119:double optDouble(java.lang.String,double) -> Whld
    1134:1134:int optInt(java.lang.String) -> oxCI
    1152:1155:int optInt(java.lang.String,int) -> ssNb
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> WynA
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> HvVJ
    1198:1198:long optLong(java.lang.String) -> KLYx
    1216:1219:long optLong(java.lang.String,long) -> Whld
    1234:1234:java.lang.String optString(java.lang.String) -> Bkra
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> LNyy
    1255:1305:void populateMap(java.lang.Object) -> YwcS
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> LNyy
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> Whld
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> LNyy
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> XuBO
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> LNyy
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> Whld
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> ssNb
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> XuBO
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> xNws
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> Whld
    1590:1590:java.lang.Object remove(java.lang.String) -> jqFx
    1605:1640:boolean similar(java.lang.Object) -> lLWD
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> WNxp
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> ssNb
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> Whld
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> Whld
    2000:2004:void indent(java.io.Writer,int) -> Whld
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> Whld
react.json.JSONObject$Null -> uFXn$Whld:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> PeCd:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> imjK:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> DsCM:
    long character -> vAww
    boolean eof -> eof
    long index -> vmMM
    long line -> gWnq
    char previous -> OblH
    java.io.Reader reader -> reader
    boolean usePrevious -> AsVy
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> rEfy
    119:131:int dehexchar(char) -> Whld
    136:136:boolean end() -> lMHM
    147:153:boolean more() -> Pdie
    164:198:char next() -> next
    213:218:char next(char) -> LNyy
    233:250:java.lang.String next(int) -> NVDx
    263:266:char nextClean() -> mOiq
    287:334:java.lang.String nextString(char) -> ssNb
    349:361:java.lang.String nextTo(char) -> XuBO
    376:388:java.lang.String nextTo(java.lang.String) -> LXOM
    403:441:java.lang.Object nextValue() -> CEPr
    458:479:char skipTo(char) -> xNws
    491:491:react.json.JSONException syntaxError(java.lang.String) -> dweX
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> CgQN:
    int maxdepth -> pcKP
    boolean comma -> tEDN
    char mode -> TPXe
    react.json.JSONObject[] stack -> sRaG
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> idrQ
    157:164:react.json.JSONWriter array() -> skNd
    180:193:react.json.JSONWriter end(char,char) -> Whld
    206:206:react.json.JSONWriter endArray() -> WaNY
    219:219:react.json.JSONWriter endObject() -> PBgN
    235:258:react.json.JSONWriter key(java.lang.String) -> GPoP
    274:285:react.json.JSONWriter object() -> YUqi
    299:310:void pop(char) -> LGKV
    322:329:void push(react.json.JSONObject) -> XuBO
    342:342:react.json.JSONWriter value(boolean) -> lLWD
    356:356:react.json.JSONWriter value(double) -> IWSS
    369:369:react.json.JSONWriter value(long) -> IWSS
    385:385:react.json.JSONWriter value(java.lang.Object) -> TFPk
react.json.XML -> baHu:
    java.lang.Character AMP -> EwRP
    java.lang.Character APOS -> hlSs
    java.lang.Character BANG -> YpjQ
    java.lang.Character EQ -> FWpt
    java.lang.Character GT -> RAbF
    java.lang.Character LT -> GSEO
    java.lang.Character QUEST -> XmgC
    java.lang.Character QUOT -> Aasy
    java.lang.Character SLASH -> jaYJ
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> uODB
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> Whld
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> WNxp
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> anfb:
    java.util.HashMap entity -> Qysj
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> AFyt
    108:133:java.lang.Object nextContent() -> BmBW
    149:166:java.lang.Object nextEntity(char) -> dLof
    186:239:java.lang.Object nextMeta() -> VfYs
    261:334:java.lang.Object nextToken() -> gxlN
    354:420:boolean skipPast(java.lang.String) -> dfcb
react.lagmap.LagMap -> hayU:
    react.glang.GMap chunks -> YWXL
    13:16:void <init>() -> <init>
    20:27:react.glang.GMap getGrandTotalMilliseconds() -> NVQl
    32:47:react.glang.GMap getGrandTotal() -> kRTc
    52:61:void pump() -> qKUY
    65:71:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> Whld
    75:81:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> Whld
    85:85:react.glang.GMap getChunks() -> pHQr
react.lagmap.LagMapChunk -> VfVs:
    react.glang.GMap hits -> kAwn
    org.bukkit.Chunk c -> cKOW
    15:19:void <init>(org.bukkit.Chunk) -> <init>
    23:37:react.glang.GMap getMS() -> Smqa
    42:66:double totalMS() -> UcVn
    71:78:double getMS(react.api.ChunkIssue) -> Whld
    83:89:void hit(react.api.ChunkIssue,double) -> Whld
    93:94:void hit(react.api.ChunkIssue) -> LNyy
    98:98:int getX() -> getX
    103:103:int getZ() -> getZ
    108:115:double totalScore() -> eGqP
    120:120:react.glang.GMap getHits() -> mPKE
    125:134:void pump() -> qKUY
    139:139:int compareTo(react.lagmap.LagMapChunk) -> Whld
    144:144:org.bukkit.Chunk getC() -> SLCm
    149:149:org.bukkit.World getWorld() -> getWorld
    1:1:int compareTo(java.lang.Object) -> compareTo
react.notification.Note -> iByU:
    react.notification.Note RAI -> FPAs
    react.notification.Note VERBOSE -> Wrsl
    react.notification.Note SPIKES -> Vxdk
    react.notification.Note GC -> PToq
    react.notification.Note[] ENUM$VALUES -> GAdn
    5:10:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    14:15:void bake(java.lang.String) -> DHFs
    1:1:react.notification.Note[] values() -> values
    1:1:react.notification.Note valueOf(java.lang.String) -> valueOf
react.notification.Notification -> CwrD:
    react.notification.Note type -> MCVc
    java.lang.String message -> message
    8:12:void <init>(react.notification.Note,java.lang.String) -> <init>
    16:16:react.notification.Note getType() -> TXCg
    21:22:void setType(react.notification.Note) -> Whld
    26:26:java.lang.String getMessage() -> getMessage
    31:32:void setMessage(java.lang.String) -> setMessage
react.papyrus.BufferedFrame -> wUSs:
    byte[][] frame -> mQSd
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> Whld
    90:97:void write(byte) -> LGKV
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> Whld
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> Whld
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> Whld
    153:167:java.awt.image.BufferedImage toBufferedImage() -> cdPM
    175:182:void writeRainbowMul() -> UbwE
    189:196:void writeRainbowAdd() -> PCGE
    203:213:void writeSparks() -> PdiF
    217:223:boolean write(int,int,byte) -> Whld
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> Whld
    255:272:void write(react.papyrus.BufferedFrame) -> XuBO
    276:276:byte[][] getRawFrame() -> xFwL
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> LGXJ:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> XuBO
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> Whld
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> YpAb:
    org.bukkit.map.MapView getView() -> hPyv
    react.papyrus.BufferedFrame getFrameBuffer() -> VnkD
    void addRenderer(react.papyrus.IRenderer) -> LNyy
    void clearRenderers() -> UcVy
    react.glang.GList getRenderers() -> Divm
    void removeRenderer(react.papyrus.IRenderer) -> ssNb
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> IWdU
react.papyrus.IRenderer -> Oiri:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> Whld
react.papyrus.Papyrus -> BIyW:
    org.bukkit.map.MapView map -> Gkwy
    react.papyrus.BufferedFrame frameBuffer -> hdGc
    react.papyrus.BufferedFrame lastFrameBuffer -> MBum
    react.glang.GList renderers -> KgdQ
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> hPyv
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> VnkD
    51:52:void addRenderer(react.papyrus.IRenderer) -> LNyy
    57:58:void clearRenderers() -> UcVy
    63:63:react.glang.GList getRenderers() -> Divm
    69:70:void removeRenderer(react.papyrus.IRenderer) -> ssNb
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> IWdU
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> LNyy
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> ssNb
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> XuBO
react.papyrus.Papyrus$1 -> BIyW$1:
    react.papyrus.Papyrus this$0 -> RuIr
    org.bukkit.map.MapCanvas val$c -> LsYA
    org.bukkit.map.MapView val$v -> nTVo
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> dgPB:
    int spaceSize -> ecNn
    java.lang.String fontChars -> COJi
    int[][] fontData -> twii
    react.papyrus.ReactFont Font -> lorT
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> AXXd:
    react.glang.GList subgoals -> YNjF
    java.lang.String tag -> uHJF
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> ooeY
    26:44:void propigate() -> oERN
    49:50:void addGoal(react.rai.IGoal) -> Whld
    55:65:react.glang.GList getFailingSubgoals() -> DaiN
    71:71:boolean isFailing() -> Secu
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> Hmtu
    void onPropigated() -> gyOr
react.rai.Goal$1 -> AXXd$1:
    react.rai.Goal this$0 -> KyFq
    react.rai.IGoal val$i -> nvXy
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> sryP:
    react.glang.GList getSubgoals() -> ooeY
    void propigate() -> oERN
    void onPropigated() -> gyOr
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> DaiN
    boolean isFailing() -> Secu
    boolean onCheckFailing() -> Hmtu
    void update() -> update
    void addGoal(react.rai.IGoal) -> Whld
react.rai.IRAI -> xywo:
    react.glang.GList getGoals() -> rgli
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> Whld
    react.glang.GList getEvents() -> FVmc
    void callEvent(react.rai.RAIEvent) -> Whld
    react.glang.GList getListeners() -> rVkf
react.rai.RAI -> LiYa:
    react.glang.GList goals -> giUB
    react.glang.GList events -> FhtS
    react.glang.GList logEvents -> MeXe
    react.glang.GList listeners -> oVwb
    long since -> PvrQ
    react.rai.RAI instance -> qeoL
    22:31:void <init>() -> <init>
    36:36:react.glang.GList getGoals() -> rgli
    42:43:void addGoal(react.rai.IGoal) -> Whld
    48:83:void tick() -> tick
    88:88:react.glang.GList getEvents() -> FVmc
    94:101:void callEvent(react.rai.RAIEvent) -> Whld
    106:106:react.glang.GList getListeners() -> rVkf
react.rai.RAIEvent -> UlCx:
    react.rai.RAIEventType type -> tVGb
    java.lang.String[] pars -> oEvX
    java.lang.String ovt -> DQll
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> hcBB
    29:29:java.lang.String[] getPars() -> EvNj
    34:34:java.lang.String getOvt() -> mPNI
react.rai.RAIEventType -> EeEo:
    react.rai.RAIEventType FIRE_ACTION -> nKdd
    react.rai.RAIEventType NOTE_GOAL_FAILING -> mPqj
    react.rai.RAIEventType NOTE_GOAL_FIXED -> whAh
    java.lang.String[] msgs -> cCSt
    react.rai.RAIEventType[] ENUM$VALUES -> xrtB
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> jWds
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> Whld
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedEntityCounts -> jqPc:
    boolean failing -> psln
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> Hmtu
    91:134:void onPropigated() -> gyOr
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> Whld
react.rai.goals.GoalReducedEntityCounts$1 -> jqPc$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> lNOP
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> jqPc$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> lNOP
    org.bukkit.Chunk val$lx -> ydtt
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> oDiq:
    boolean failing -> psln
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> Hmtu
    72:76:void onPropigated() -> gyOr
react.rai.goals.GoalStableChunkTime$1 -> oDiq$1:
    react.rai.goals.GoalStableChunkTime this$0 -> hcdn
    1:48:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> Rjjh:
    boolean failing -> psln
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> gyOr
    35:35:void letUp() -> jGDG
    40:77:boolean onCheckFailing() -> Hmtu
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> Whld
react.rai.goals.GoalStableEntityTime$1 -> Rjjh$1:
    react.rai.goals.GoalStableEntityTime this$0 -> axcf
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> KngT:
    boolean failing -> psln
    react.glang.GMap reocc -> FyvY
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> gyOr
    88:125:boolean onCheckFailing() -> Hmtu
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> Whld
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> LNyy
react.rai.goals.GoalStableFluidTime$1 -> KngT$1:
    react.rai.goals.GoalStableFluidTime this$0 -> grDa
    org.bukkit.Chunk val$lx -> ydtt
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> KngT$2:
    react.rai.goals.GoalStableFluidTime this$0 -> grDa
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> pXme:
    boolean failing -> psln
    react.glang.GMap reocc -> FyvY
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> gyOr
    89:125:boolean onCheckFailing() -> Hmtu
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> Whld
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> LNyy
react.rai.goals.GoalStableHopperTime$1 -> pXme$1:
    react.rai.goals.GoalStableHopperTime this$0 -> dEvl
    org.bukkit.Chunk val$lx -> ydtt
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> pXme$2:
    react.rai.goals.GoalStableHopperTime this$0 -> dEvl
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> jpoN:
    int d -> d
    boolean failing -> psln
    react.glang.GMap reocc -> FyvY
    32:37:void <init>() -> <init>
    42:86:void onPropigated() -> gyOr
    91:128:boolean onCheckFailing() -> Hmtu
    28:28:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> Whld
    27:27:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> LNyy
react.rai.goals.GoalStableRedstoneTime$1 -> jpoN$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> agbN
    org.bukkit.Chunk val$lx -> ydtt
    1:68:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    73:83:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> jpoN$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> agbN
    1:110:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    115:124:void run() -> run
react.rai.goals.GoalStableTickTime -> rEap:
    boolean failing -> psln
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> gyOr
    34:58:boolean onCheckFailing() -> Hmtu
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> Whld
react.rai.goals.GoalStableTickTime$1 -> rEap$1:
    react.rai.goals.GoalStableTickTime this$0 -> PfTe
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.redstone.RedstoneEvent -> PmVJ:
    react.surge.util.MaterialBlock block -> tfjm
    org.bukkit.util.Vector vector -> DssI
    byte from -> JKPv
    byte to -> fMBD
    16:22:void <init>(org.bukkit.event.block.BlockRedstoneEvent) -> <init>
    26:26:react.surge.util.MaterialBlock getBlock() -> wMHv
    31:32:void setBlock(react.surge.util.MaterialBlock) -> Whld
    36:36:org.bukkit.util.Vector getVector() -> FEld
    41:42:void setVector(org.bukkit.util.Vector) -> Whld
    46:46:byte getFrom() -> XSQi
    51:52:void setFrom(byte) -> dLof
    56:56:byte getTo() -> IOWP
    61:62:void setTo(byte) -> CgDt
react.redstone.RedstoneTracker -> Cwpt:
    org.bukkit.World world -> world
    react.controller.FeatureController fc -> UTAc
    react.glang.GList events -> FhtS
    boolean ticking -> ELba
    react.surge.sched.Task task -> JeDS
    boolean nms -> GtlJ
    int tr -> raEt
    react.gmath.Average aav -> YOLX
    boolean handleTicking -> AjiS
    33:55:void <init>(org.bukkit.World) -> <init>
    59:61:void close() -> close
    65:98:void tick() -> tick
    103:127:void set(org.bukkit.Location,react.surge.util.MaterialBlock) -> LNyy
    131:152:void enact(react.redstone.RedstoneEvent) -> Whld
    157:184:void on(org.bukkit.event.block.BlockRedstoneEvent) -> Whld
react.redstone.RedstoneTracker$1 -> Cwpt$1:
    react.redstone.RedstoneTracker this$0 -> gaFi
    1:47:void <init>(react.redstone.RedstoneTracker,java.lang.String,int) -> <init>
    52:53:void run() -> run
react.remote.client.RemoteClient -> WaHn:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> LjiT
    boolean authenticated -> dpmb
    react.remote.server.ServerInfo info -> FFuC
    react.glang.GMap frems -> EMDM
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> oVBe
    51:51:react.glang.GMap getFrames() -> kIfV
    56:75:int computeFrames() -> YMce
    80:92:boolean clearToken() -> fCGY
    97:110:boolean updateServerInfo() -> oUqa
    115:129:boolean refreshToken() -> BctM
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> ssNb
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> RtCP
    165:165:boolean isAuthenticated() -> MRoy
    170:170:react.remote.server.ServerInfo getInfo() -> iKpI
react.remote.client.packet.CPacketClearToken -> XIwy:
    java.lang.String token -> LjiT
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Whld
    33:34:void fromBytes(react.gnet.streams.ISS) -> Whld
    38:38:java.lang.String getToken() -> RtCP
    43:44:void setToken(java.lang.String) -> XtdC
react.remote.client.packet.CPacketComputeFrames -> OabN:
    java.lang.String token -> LjiT
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Whld
    33:34:void fromBytes(react.gnet.streams.ISS) -> Whld
    38:38:java.lang.String getToken() -> RtCP
    43:44:void setToken(java.lang.String) -> XtdC
react.remote.client.packet.CPacketGetInfo -> Keux:
    java.lang.String token -> LjiT
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Whld
    33:34:void fromBytes(react.gnet.streams.ISS) -> Whld
    38:38:java.lang.String getToken() -> RtCP
    43:44:void setToken(java.lang.String) -> XtdC
react.remote.client.packet.CPacketGetToken -> mFtG:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> Whld
    36:38:void fromBytes(react.gnet.streams.ISS) -> Whld
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> cSMG:
    java.lang.String token -> LjiT
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Whld
    33:34:void fromBytes(react.gnet.streams.ISS) -> Whld
    38:38:java.lang.String getToken() -> RtCP
    43:44:void setToken(java.lang.String) -> XtdC
react.remote.client.packet.ClientPacket -> VfYU:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> Whld
    void fromBytes(react.gnet.streams.ISS) -> Whld
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> KngT
    42:42:java.lang.String getPacketName() -> pXme
react.remote.client.packet.ClientPacketType -> vRSH:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> ndyD
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> KFCy
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> PvvB
    react.remote.client.packet.ClientPacketType GET_INFO -> UCAF
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> bIEv
    react.remote.client.packet.ClientPacketType[] $VALUES -> TjQY
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> IqTq:
    react.glang.GMap compute(long,long) -> ssNb
react.remote.server.KnownUser -> TNqF:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> psEa:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> Whld
    38:41:void fromBytes(react.gnet.streams.ISS) -> Whld
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> JJES:
    react.glang.GList users -> tEHc
    react.glang.GMap session -> UdcH
    react.glang.GMap lastCompute -> IjRM
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> vcNC
    44:45:void registerUser(react.remote.server.KnownUser) -> Whld
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> LNyy
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> jxug
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> XuBO
    react.remote.server.IFrameComputer getFrameComputer() -> GawQ
    170:171:void markLastCompute(react.remote.server.KnownUser) -> ssNb
    175:180:long getLastCompute(react.remote.server.KnownUser) -> XuBO
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> Whld
    190:191:void deleteSession(react.remote.server.KnownUser) -> xNws
    195:195:java.lang.String createToken() -> XSOy
react.remote.server.ServerInfo -> HwCc:
    java.lang.String motd -> vvCK
    int gameProtocol -> RJWx
    java.lang.String gameVersion -> GlYt
    java.lang.String reactVersion -> LkIQ
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> slWq
    int viewDistance -> viewDistance
    int gamePort -> OsqY
    java.lang.String gameAddress -> bjgC
    react.glang.GList remotePlugins -> qDNs
    react.glang.GList worlds -> Mdyl
    react.glang.GList actions -> gywD
    react.glang.GList samplers -> ifim
    26:26:react.remote.server.ServerInfo empty() -> dxVa
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> Whld
    146:159:void fromBytes(react.gnet.streams.ISS) -> Whld
    java.lang.String dgetMotd() -> YLwn
    int dgetGameProtocol() -> LGRw
    java.lang.String dgetGameVersion() -> wTnd
    java.lang.String dgetReactVersion() -> Hmjl
    int dgetMaxPlayers() -> oxKt
    react.glang.GList dgetConnectedPlayers() -> LPDe
    int dgetViewDistance() -> iBuS
    int dgetGamePort() -> aDNp
    java.lang.String dgetGameAddress() -> Lhub
    react.glang.GList dgetRemotePlugins() -> EvDd
    react.glang.GList dgetWorlds() -> fvBR
    react.glang.GList dgetActions() -> nuIC
    react.glang.GList dgetSamplers() -> vcMc
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> UAWA
    199:199:java.lang.String getGameVersion() -> KoMy
    204:204:java.lang.String getReactVersion() -> VMKO
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> CMeE
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> CDry
    229:229:java.lang.String getGameAddress() -> nBMd
    234:234:react.glang.GList getRemotePlugins() -> CxXb
    239:239:react.glang.GList getWorlds() -> SmwD
    244:244:react.glang.GList getActions() -> Nwgg
    249:249:react.glang.GList getSamplers() -> RkUC
react.remote.server.ServerInfo$1 -> HwCc$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> fvBR
    37:37:int dgetViewDistance() -> iBuS
    43:43:react.glang.GList dgetRemotePlugins() -> EvDd
    49:49:java.lang.String dgetReactVersion() -> Hmjl
    55:55:java.lang.String dgetMotd() -> YLwn
    61:61:int dgetMaxPlayers() -> oxKt
    67:67:java.lang.String dgetGameVersion() -> wTnd
    73:73:int dgetGameProtocol() -> LGRw
    79:79:int dgetGamePort() -> aDNp
    85:85:java.lang.String dgetGameAddress() -> Lhub
    91:91:react.glang.GList dgetConnectedPlayers() -> LPDe
    97:97:react.glang.GList dgetActions() -> nuIC
    103:103:react.glang.GList dgetSamplers() -> vcMc
react.remote.server.packet.ComputedFrame -> RYlY:
    react.glang.GMap values -> LPuc
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> Whld
    28:36:void fromBytes(react.gnet.streams.ISS) -> Whld
    40:40:react.glang.GMap getValues() -> uNtr
    45:46:void setValues(react.glang.GMap) -> ssNb
react.remote.server.packet.SPacketOk -> PKVK:
    boolean ok -> xbTy
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Whld
    33:34:void fromBytes(react.gnet.streams.ISS) -> Whld
    38:38:boolean isOk() -> oogX
    43:44:void setOk(boolean) -> xNvw
react.remote.server.packet.SPacketSendFrames -> ghJN:
    react.glang.GMap frames -> IGli
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> Whld
    36:44:void fromBytes(react.gnet.streams.ISS) -> Whld
    48:48:react.glang.GMap getFrames() -> kIfV
    53:54:void setFrames(react.glang.GMap) -> XuBO
react.remote.server.packet.SPacketSendInfo -> KfYr:
    react.remote.server.ServerInfo info -> FFuC
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Whld
    33:34:void fromBytes(react.gnet.streams.ISS) -> Whld
    38:38:react.remote.server.ServerInfo getInfo() -> iKpI
    43:44:void setInfo(react.remote.server.ServerInfo) -> Whld
react.remote.server.packet.SPacketSendToken -> PSfU:
    java.lang.String token -> LjiT
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Whld
    33:34:void fromBytes(react.gnet.streams.ISS) -> Whld
    38:38:java.lang.String getToken() -> RtCP
    43:44:void setToken(java.lang.String) -> XtdC
react.remote.server.packet.ServerPacket -> eGqG:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> Whld
    void fromBytes(react.gnet.streams.ISS) -> Whld
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> KngT
    42:42:java.lang.String getPacketName() -> pXme
react.remote.server.packet.ServerPacketType -> jqSU:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> rFqK
    react.remote.server.packet.ServerPacketType SEND_INFO -> IGlg
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> HDjL
    react.remote.server.packet.ServerPacketType OK -> qUPW
    react.remote.server.packet.ServerPacketType[] $VALUES -> qTrd
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> cdOA:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleAsyncQueue$1 -> cdOA$1:
    react.sampler.SampleAsyncQueue this$0 -> OstW
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleChunkTime -> eXqp:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleChunkTime$1 -> eXqp$1:
    react.sampler.SampleChunkTime this$0 -> FqkC
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleChunksLoaded -> DQBv:
    react.graph.IFormatter formatter -> bsRs
    17:27:void <init>() -> <init>
    32:38:void construct() -> XcbK
    43:44:void sample() -> Bcac
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleChunksLoaded$1 -> DQBv$1:
    react.sampler.SampleChunksLoaded this$0 -> JdeK
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> YwcS
react.sampler.SampleChunksLoadedPerSecond -> KniK:
    react.gmath.Average a -> kltJ
    react.graph.IFormatter formatter -> bsRs
    16:29:void <init>() -> <init>
    34:40:void construct() -> XcbK
    45:47:void sample() -> Bcac
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleChunksLoadedPerSecond$1 -> KniK$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> PwWp
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> YwcS
react.sampler.SampleEntitiesDrops -> MuOs:
    react.graph.IFormatter formatter -> bsRs
    17:27:void <init>() -> <init>
    32:38:void construct() -> XcbK
    43:44:void sample() -> Bcac
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleEntitiesDrops$1 -> MuOs$1:
    react.sampler.SampleEntitiesDrops this$0 -> jjRL
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> YwcS
react.sampler.SampleEntitiesLiving -> AOjl:
    react.graph.IFormatter formatter -> bsRs
    17:27:void <init>() -> <init>
    32:38:void construct() -> XcbK
    43:44:void sample() -> Bcac
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleEntitiesLiving$1 -> AOjl$1:
    react.sampler.SampleEntitiesLiving this$0 -> uHNX
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> YwcS
react.sampler.SampleEntitiesTiles -> FyLj:
    react.graph.IFormatter formatter -> bsRs
    17:27:void <init>() -> <init>
    32:38:void construct() -> XcbK
    43:44:void sample() -> Bcac
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleEntitiesTiles$1 -> FyLj$1:
    react.sampler.SampleEntitiesTiles this$0 -> Waxr
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> YwcS
react.sampler.SampleEntitiesTotal -> Kewo:
    react.graph.IFormatter formatter -> bsRs
    17:27:void <init>() -> <init>
    32:38:void construct() -> XcbK
    43:44:void sample() -> Bcac
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleEntitiesTotal$1 -> Kewo$1:
    react.sampler.SampleEntitiesTotal this$0 -> uHNV
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> YwcS
react.sampler.SampleEntityDroppedTicks -> VMFi:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleEntityDroppedTicks$1 -> VMFi$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> uYPD
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleEntityTime -> Rjlf:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleEntityTime$1 -> Rjlf$1:
    react.sampler.SampleEntityTime this$0 -> TrcN
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleEntityTimeLock -> KCuT:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleEntityTimeLock$1 -> KCuT$1:
    react.sampler.SampleEntityTimeLock this$0 -> Iaau
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleExplosionTime -> kQps:
    react.graph.IFormatter formatter -> bsRs
    17:27:void <init>() -> <init>
    32:38:void construct() -> XcbK
    43:44:void sample() -> Bcac
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleExplosionTime$1 -> kQps$1:
    react.sampler.SampleExplosionTime this$0 -> uYOR
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> YwcS
react.sampler.SampleFluidPerSecond -> TqSu:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleFluidPerSecond$1 -> TqSu$1:
    react.sampler.SampleFluidPerSecond this$0 -> pkal
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleFluidPerTick -> PJtX:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    46:53:void sample() -> Bcac
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleFluidPerTick$1 -> PJtX$1:
    react.sampler.SampleFluidPerTick this$0 -> FWxY
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleFluidTickTime -> HvbS:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleFluidTickTime$1 -> HvbS$1:
    react.sampler.SampleFluidTickTime this$0 -> jYPC
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleFluidTickUtilization -> IOQj:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    46:53:void sample() -> Bcac
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleFluidTickUtilization$1 -> IOQj$1:
    react.sampler.SampleFluidTickUtilization this$0 -> hSIc
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleHopperPerSecond -> yJXm:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleHopperPerSecond$1 -> yJXm$1:
    react.sampler.SampleHopperPerSecond this$0 -> kTBd
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleHopperPerTick -> opAJ:
    react.graph.IFormatter formatter -> bsRs
    18:29:void <init>() -> <init>
    34:40:void construct() -> XcbK
    47:54:void sample() -> Bcac
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleHopperPerTick$1 -> opAJ$1:
    react.sampler.SampleHopperPerTick this$0 -> hRhm
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleHopperTickTime -> jiBR:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleHopperTickTime$1 -> jiBR$1:
    react.sampler.SampleHopperTickTime this$0 -> BLKa
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleHopperTickUtilization -> HwBp:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    46:53:void sample() -> Bcac
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleHopperTickUtilization$1 -> HwBp$1:
    react.sampler.SampleHopperTickUtilization this$0 -> wgdk
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleMemoryAllocated -> ghHv:
    react.graph.IFormatter formatter -> bsRs
    17:27:void <init>() -> <init>
    32:38:void construct() -> XcbK
    43:44:void sample() -> Bcac
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleMemoryAllocated$1 -> ghHv$1:
    react.sampler.SampleMemoryAllocated this$0 -> bawf
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> YwcS
react.sampler.SampleMemoryAllocationPerSecond -> CNCW:
    react.graph.IFormatter formatter -> bsRs
    17:27:void <init>() -> <init>
    32:38:void construct() -> XcbK
    43:44:void sample() -> Bcac
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleMemoryAllocationPerSecond$1 -> CNCW$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> KMtT
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> YwcS
react.sampler.SampleMemoryFree -> xPKI:
    react.graph.IFormatter formatter -> bsRs
    17:27:void <init>() -> <init>
    32:38:void construct() -> XcbK
    43:44:void sample() -> Bcac
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleMemoryFree$1 -> xPKI$1:
    react.sampler.SampleMemoryFree this$0 -> ORQT
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> YwcS
react.sampler.SampleMemoryMax -> twCT:
    react.graph.IFormatter formatter -> bsRs
    17:27:void <init>() -> <init>
    32:38:void construct() -> XcbK
    43:44:void sample() -> Bcac
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleMemoryMax$1 -> twCT$1:
    react.sampler.SampleMemoryMax this$0 -> cmlL
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> YwcS
react.sampler.SampleMemoryUse -> Oaet:
    react.graph.IFormatter formatter -> bsRs
    17:27:void <init>() -> <init>
    32:38:void construct() -> XcbK
    43:44:void sample() -> Bcac
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleMemoryUse$1 -> Oaet$1:
    react.sampler.SampleMemoryUse this$0 -> IHOT
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> YwcS
react.sampler.SamplePhysicsTickTime -> FFJo:
    react.graph.IFormatter formatter -> bsRs
    17:27:void <init>() -> <init>
    32:38:void construct() -> XcbK
    43:44:void sample() -> Bcac
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SamplePhysicsTickTime$1 -> FFJo$1:
    react.sampler.SamplePhysicsTickTime this$0 -> ObrB
    1:19:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> YwcS
react.sampler.SampleRedstonePerSecond -> CERH:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleRedstonePerSecond$1 -> CERH$1:
    react.sampler.SampleRedstonePerSecond this$0 -> tVJy
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleRedstonePerTick -> ndOm:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    46:53:void sample() -> Bcac
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleRedstonePerTick$1 -> ndOm$1:
    react.sampler.SampleRedstonePerTick this$0 -> whEd
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleRedstoneTickTime -> GjpU:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleRedstoneTickTime$1 -> GjpU$1:
    react.sampler.SampleRedstoneTickTime this$0 -> fURi
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleRedstoneTickUtilization -> Dafs:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    46:53:void sample() -> Bcac
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleRedstoneTickUtilization$1 -> Dafs$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> whFR
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleSyncQueue -> GcAR:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleSyncQueue$1 -> GcAR$1:
    react.sampler.SampleSyncQueue this$0 -> qerv
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleTickTime -> iLPJ:
    react.graph.IFormatter formatter -> bsRs
    react.gmath.Average aa -> RRiR
    17:29:void <init>() -> <init>
    34:40:void construct() -> XcbK
    45:47:void sample() -> Bcac
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleTickTime$1 -> iLPJ$1:
    react.sampler.SampleTickTime this$0 -> WjjP
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> YwcS
react.sampler.SampleTickUtilization -> DXuo:
    react.graph.IFormatter formatter -> bsRs
    react.gmath.Average aa -> RRiR
    17:29:void <init>() -> <init>
    34:40:void construct() -> XcbK
    45:47:void sample() -> Bcac
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleTickUtilization$1 -> DXuo$1:
    react.sampler.SampleTickUtilization this$0 -> hIvW
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> YwcS
react.sampler.SampleTicksPerSecond -> ryNA:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleTicksPerSecond$1 -> ryNA$1:
    react.sampler.SampleTicksPerSecond this$0 -> rhvG
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleTileDroppedTicks -> rEfy:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleTileDroppedTicks$1 -> rEfy$1:
    react.sampler.SampleTileDroppedTicks this$0 -> QFuR
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleTileTime -> lMHM:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleTileTime$1 -> lMHM$1:
    react.sampler.SampleTileTime this$0 -> QPHH
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.sampler.SampleTileTimeLock -> Pdie:
    react.graph.IFormatter formatter -> bsRs
    18:28:void <init>() -> <init>
    33:39:void construct() -> XcbK
    44:45:void sample() -> Bcac
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NVDx
react.sampler.SampleTileTimeLock$1 -> Pdie$1:
    react.sampler.SampleTileTimeLock this$0 -> Vovp
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> YwcS
react.security.checkpoints.SecurityCheckpointAlpha -> mOiq:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> GQcB
    78:148:void doScan(java.lang.Runnable) -> LNyy
    152:181:byte[] readResource(java.io.File,java.lang.String) -> Whld
    186:217:react.glang.GMap scan(java.io.File) -> LNyy
    150:150:byte[] access$0(java.io.File,java.lang.String) -> LNyy
react.security.checkpoints.SecurityCheckpointAlpha$1 -> mOiq$1:
    java.lang.Runnable val$r -> QPHD
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> mOiq$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> rXTx
    java.lang.Runnable val$r -> QPHD
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> CEPr:
    java.lang.String ip -> DIdA
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> skNd:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> skNd$1:
    react.security.locks.SecurityLockAlpha this$0 -> SUoR
    java.io.File val$f -> DRUI
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> WaNY:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> clOe
react.slate.PhantomSlate -> PBgN:
    react.glang.GList lines -> Sfpa
    react.glang.GList viewers -> veEh
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> vCBt
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> xqqK
    44:45:void set(int,java.lang.String) -> LNyy
    50:51:void setLines(react.glang.GList) -> Oqvn
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> Keux
    91:95:void addViewer(org.bukkit.entity.Player) -> clOe
    100:102:void removeViewer(org.bukkit.entity.Player) -> lfGn
    107:107:react.glang.GList getViewers() -> htDu
    113:113:boolean isViewing(org.bukkit.entity.Player) -> NMQN
    119:120:void addLine(java.lang.String) -> UIVu
    125:126:void clearLines() -> MdUg
react.slate.Slate -> YUqi:
    void build() -> Keux
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> xqqK
    void set(int,java.lang.String) -> LNyy
    void setLines(react.glang.GList) -> Oqvn
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> clOe
    void addLine(java.lang.String) -> UIVu
    void clearLines() -> MdUg
    void removeViewer(org.bukkit.entity.Player) -> lfGn
    react.glang.GList getViewers() -> htDu
    boolean isViewing(org.bukkit.entity.Player) -> NMQN
    void update() -> update
react.slate.SlateUtil -> AFyt:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> tnUt
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> lMMI
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> Whld
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> LNyy
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> ssNb
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> Whld
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> Whld
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> LNyy
    186:196:java.lang.String convertJSON(java.lang.String) -> NVDm
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> LNyy
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> Whld
react.surge.Main -> BmBW:
    react.glang.GList plugins -> qCry
    react.glang.GMap pluginInstances -> qMEc
    react.glang.GList controllerSet -> hJYy
    react.glang.GMap anchors -> pIaO
    react.glang.GList classes -> stmQ
    java.lang.reflect.Field nsField -> rPGo
    java.lang.reflect.Field thField -> FaMG
    react.glang.GList tracks -> cvaI
    long nsf -> EnjX
    42:46:void <clinit>() -> <clinit>
    48:51:void <init>() -> <init>
    57:57:void onControllerRegistry() -> cRra
    62:81:long getNanoSync() -> vbxr
    86:87:void requestResetNanos() -> pYWt
    91:99:void requestReload() -> XuVv
    105:114:void requestReload(java.lang.Runnable) -> ssNb
    119:133:int getThreadCount() -> getThreadCount
    144:202:void onStart(react.surge.util.Protocol) -> Whld
    210:252:void onStop() -> oETE
    258:258:void onPostInit() -> nttU
    264:264:void onPreInit() -> yRpd
    268:279:void shutDownAmps() -> IFge
    283:492:void initializeAmps() -> OPjD
    497:538:void doScan() -> rWMr
    542:564:void scanForPoolDefiners() -> RtEE
    568:584:void scanForRawEvents() -> WOnc
    588:604:void scanForDynamicTrack() -> pagi
    608:629:void scanForAmps() -> ObJe
    634:645:void onTick() -> LPAm
react.surge.Main$1 -> BmBW$1:
    1:91:void <init>() -> <init>
    97:97:void run() -> run
react.surge.PluginAmp -> VfYs:
    react.surge.control.AmpedPlugin plugin -> Kgji
    boolean connected -> connected
    int masterTask -> aEeu
    java.lang.Runnable onReload -> PoKK
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> kIgf
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> Drki
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> Whld
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> Whld
    123:124:void stopTask(int) -> vHtN
    128:128:react.surge.control.AmpedPlugin getPlugin() -> brRE
    133:133:int getMasterTask() -> qCIQ
    138:138:java.lang.Runnable getOnReload() -> rWMb
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> Whld
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> Bcac
    158:159:void setOnReload(java.lang.Runnable) -> XuBO
    67:67:void access$0(react.surge.PluginAmp) -> Whld
react.surge.PluginAmp$1 -> VfYs$1:
    react.surge.PluginAmp this$0 -> Wjlk
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> VfYs$2:
    react.surge.PluginAmp this$0 -> Wjlk
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> VfYs$3:
    react.surge.PluginAmp this$0 -> Wjlk
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> gxlN:
    react.surge.PluginAmp amp -> stmT
    react.glang.GList tickComponents -> raHn
    react.glang.GList atickComponents -> oyak
    react.surge.sched.TaskManager taskmgr -> etTq
    react.surge.hotload.HotloadManager hotloadmgr -> nnNc
    java.lang.Thread mainThread -> jYQX
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> Whld
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> MRaN
    44:44:java.io.File folder() -> ESlP
    49:51:java.io.File getPluginJarFile() -> wMIx
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> XuBO
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> uWeE
    74:74:react.glang.GList getTickComponents() -> nmCi
    79:79:react.glang.GList getAsyncTickComponents() -> qKXa
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> Whld
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> LNyy
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> LNyy
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> ytrY
    126:126:boolean hasAmp() -> MAqV
    131:131:react.surge.PluginAmp getAmp() -> uygl
    136:136:react.surge.sched.TaskManager getTaskManager() -> IiJg
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> Dalo
react.surge.cluster.Cluster -> NVQl:
    react.surge.cluster.ClusterType type -> mkLH
    java.lang.Object t -> OIUI
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> LaTf
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> kRTc:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> qKUY:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> pHQr:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> Smqa:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> UcVn:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> eGqP:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> mPKE:
    react.surge.cluster.ClusterType INT -> QPIS
    react.surge.cluster.ClusterType BOOLEAN -> UBcM
    react.surge.cluster.ClusterType STRING -> lEdM
    react.surge.cluster.ClusterType STRING_LIST -> YqRt
    react.surge.cluster.ClusterType DOUBLE -> JTFL
    react.surge.cluster.ClusterType LONG -> aVfj
    react.surge.cluster.ClusterType[] ENUM$VALUES -> VEet
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> TXCg:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> wVeG
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> Whld
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> Whld
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> nBSO
react.surge.cluster.ConfigurationDataOutput -> cdPM:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> LNyy
react.surge.cluster.DataCluster -> UbwE:
    react.glang.GMap clusters -> IQCP
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> dMfg
    29:33:void fromJson(react.json.JSONObject) -> xNws
    37:44:react.json.JSONObject toJson() -> xicO
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> LGbM
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> Whld
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> srnp
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> LGKV
    194:195:void set(java.lang.String,int) -> xNws
    199:200:void set(java.lang.String,boolean) -> ssNb
    204:205:void set(java.lang.String,double) -> ssNb
    209:210:void set(java.lang.String,long) -> ssNb
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> Whld
react.surge.cluster.ICluster -> PCGE:
    react.surge.cluster.ClusterType getType() -> LaTf
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> PdiF:
react.surge.cluster.IDataInput -> xFwL:
    react.surge.cluster.DataCluster read(java.io.File) -> ssNb
react.surge.cluster.IDataOutput -> hPyv:
    void write(react.surge.cluster.DataCluster,java.io.File) -> Whld
react.surge.cluster.Key -> VnkD:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> UcVy:
    int value() -> value
react.surge.cluster.KeyStore -> Divm:
react.surge.cluster.ReflectedConfigurationException -> IWdU:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> ooeY:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> ssNb
react.surge.cluster.YamlDataOutput -> oERN:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> Whld
react.surge.collection.GSound -> DaiN:
    java.lang.String sound -> cwAB
    org.bukkit.Sound iSound -> qoGT
    java.lang.Float volume -> Xvbl
    java.lang.Float pitch -> MfBo
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> CDaF
    61:72:void play(org.bukkit.Location) -> xNws
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> Whld
    93:93:java.lang.String getSound() -> kIkC
    98:99:void setSound(java.lang.String) -> NVDx
    103:103:org.bukkit.Sound getiSound() -> Oali
    108:109:void setiSound(org.bukkit.Sound) -> Whld
    113:113:java.lang.Float getVolume() -> bOqE
    118:119:void setVolume(java.lang.Float) -> Whld
    123:123:java.lang.Float getPitch() -> CNIO
    128:129:void setPitch(java.lang.Float) -> LNyy
react.surge.control.AmpedPlugin -> Secu:
    react.glang.GList controllers -> SUqS
    react.gconcurrent.ParallelPoolManager pp -> KhLv
    react.surge.server.CoreTickThread ctt -> TPcj
    24:27:void <init>() -> <init>
    void doScan() -> rWMr
    long getNanoSync() -> vbxr
    int getThreadCount() -> getThreadCount
    39:39:void onLoad() -> onLoad
    46:85:void onEnable() -> onEnable
    90:96:void onDisable() -> onDisable
    101:101:react.glang.GList getControllers() -> XRuS
    107:108:void registerController(react.surge.control.IController) -> Whld
    113:124:void onTick() -> LPAm
    129:129:java.lang.String getTickName() -> RYbk
    135:135:react.gconcurrent.ParallelPoolManager getThreadPool() -> GQdm
    141:256:void destroyOldThreads() -> IGKD
    void onControllerRegistry() -> cRra
    void onStart(react.surge.util.Protocol) -> Whld
    void onStop() -> oETE
    void onPostInit() -> nttU
    void onPreInit() -> yRpd
react.surge.control.AmpedPlugin$1 -> Secu$1:
    react.surge.control.AmpedPlugin this$0 -> VglH
    1:56:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    61:61:long getNanoGate() -> WGQx
react.surge.control.AmpedPlugin$2 -> Secu$2:
    react.surge.control.AmpedPlugin this$0 -> VglH
    1:154:void <init>(react.surge.control.AmpedPlugin) -> <init>
    159:249:void run() -> run
react.surge.control.Control -> Hmtu:
react.surge.control.Controller -> gyOr:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> rgli:
react.surge.control.Enable -> FVmc:
react.surge.control.IController -> rVkf:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> hcBB:
react.surge.control.Plugin -> EvNj:
react.surge.control.SurgePlugin -> mPNI:
    void onStart(react.surge.util.Protocol) -> Whld
    void onStop() -> oETE
    void onPostInit() -> nttU
    void onPreInit() -> yRpd
    void onControllerRegistry() -> cRra
    void registerController(react.surge.control.IController) -> Whld
    react.glang.GList getControllers() -> XRuS
    react.gconcurrent.ParallelPoolManager getThreadPool() -> GQdm
react.surge.hotload.HotloadManager -> jWds:
    react.glang.GMap filemods -> jYTY
    react.glang.GMap filesizes -> jQCt
    react.glang.GMap fileacts -> TbGE
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> Whld
    35:38:void untrack(java.io.File) -> XuBO
    42:45:void untrackall() -> doiv
    50:86:void onTick() -> LPAm
    91:91:java.lang.String getTickName() -> RYbk
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> Whld
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> LNyy
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> ssNb
react.surge.hotload.HotloadManager$1 -> jWds$1:
    react.surge.hotload.HotloadManager this$0 -> ebty
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> jGDG:
    boolean init -> txTI
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> WYnF
    java.lang.Class IChatBaseComponent -> lyLf
    java.lang.Class ChatSerializer -> Okhh
    java.lang.Class PacketPlayOutPlayerInfo -> GdQl
    java.lang.Class PlayerInfoData -> NpvS
    java.lang.Class EnumPlayerInfoAction -> stnw
    java.lang.Class GameProfile -> DcXu
    java.lang.Class EnumGamemode -> eJDq
    java.lang.Class TileEntitySkull -> UJux
    java.lang.Class LoadingCache -> AjqF
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> wMHv:
    react.surge.nms.NMSX bountifulAPI -> jXqs
    boolean useOldMethods -> xQYu
    java.lang.String nmsver -> qewY
    java.lang.Object eTimes -> Ajpa
    java.lang.Object eTitle -> cfAI
    java.lang.Object eSubtitle -> jPav
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> Whld
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> oVBe
    75:89:java.lang.Class getCBClass(java.lang.String) -> vHtN
    96:104:java.lang.Object serializeChat(java.lang.String) -> Bcac
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> Whld
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> Whld
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> clgT
    151:151:java.lang.String craftPackage() -> DQLx
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> Whld
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> Whld
    197:207:java.lang.Class getNMSClass(java.lang.String) -> XcbK
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> Whld
    279:280:void clearTitle(org.bukkit.entity.Player) -> rMfW
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> LNyy
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> Whld
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> Whld
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> wKwK
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> LGKV
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> ugrC
    434:447:int ping(org.bukkit.entity.Player) -> oxCI
react.surge.nms.NMSX$1 -> wMHv$1:
    org.bukkit.entity.Player val$player -> BCUN
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> wMHv$2:
    org.bukkit.entity.Player val$player -> BCUN
    java.lang.String val$message -> Yhbs
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> FEld:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> bGaS
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> Whld
    68:82:void clearTitle(org.bukkit.entity.Player) -> rMfW
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> Whld
react.surge.nms.PacketUtil$V -> FEld$Whld:
    react.surge.nms.PacketUtil$V R17 -> ifqO
    react.surge.nms.PacketUtil$V R18 -> SUoy
    react.surge.nms.PacketUtil$V R19 -> AsbA
    react.surge.nms.PacketUtil$V R111 -> GuRP
    react.surge.nms.PacketUtil$V R110 -> CqUv
    react.surge.nms.PacketUtil$V R112 -> agkA
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> gFwv
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> XSQi:
    java.lang.String title -> title
    java.lang.String subTitle -> YhdN
    java.lang.String action -> action
    java.lang.Integer fadeIn -> WILW
    java.lang.Integer fadeOut -> fDVO
    java.lang.Integer stayTime -> ECwR
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> WynA
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> ECNm
    79:80:void setSubTitle(java.lang.String) -> onrj
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> SLWY
    99:100:void setFadeIn(java.lang.Integer) -> ssNb
    104:104:java.lang.Integer getFadeOut() -> GbgK
    109:110:void setFadeOut(java.lang.Integer) -> XuBO
    114:114:java.lang.Integer getStayTime() -> xOnk
    119:120:void setStayTime(java.lang.Integer) -> xNws
react.surge.nms.VersionBukkit -> IOWP:
    react.surge.nms.VersionBukkit VU -> DQub
    react.surge.nms.VersionBukkit V7 -> IHTS
    react.surge.nms.VersionBukkit V8 -> AYmw
    react.surge.nms.VersionBukkit V9 -> aWJE
    react.surge.nms.VersionBukkit V11 -> bkNX
    react.surge.nms.VersionBukkit V111 -> PLhG
    react.surge.nms.VersionBukkit V112 -> MvcT
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> JvNE
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> RtFe
    27:32:boolean uc() -> EuqH
    37:67:react.surge.nms.VersionBukkit get() -> VwbP
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> kIfV:
    void burst(java.lang.Object) -> tSlj
    void setTimeLock(double) -> ylMp
    double getEstimatedTimeUse() -> jiKE
    int flush() -> AYEa
    int flush(react.gbench.Profiler) -> Whld
    void queue(java.lang.Object) -> IWSS
    void queue(java.util.List) -> ssNb
    void queue(java.lang.Object[]) -> Whld
react.surge.sched.ICancellable -> YMce:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> fCGY:
    void onTick() -> LPAm
    java.lang.String getTickName() -> RYbk
react.surge.sched.ITask -> oUqa:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> SKtf
    java.lang.String getName() -> getName
    double getComputeTime() -> STel
    double getTotalComputeTime() -> ncsa
    double getActiveTime() -> jOVq
    boolean hasCompleted() -> ArWR
react.surge.sched.Task -> BctM:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> nwEN
    double computeTime -> oqWJ
    double totalComputeTime -> VVkv
    double activeTime -> Kgmq
    boolean completed -> completed
    react.gbench.Profiler profiler -> lyNw
    react.gbench.Profiler activeProfiler -> FiaE
    int ticks -> lMym
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> XuBO
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> SKtf
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> STel
    150:150:boolean hasCompleted() -> ArWR
    156:156:double getTotalComputeTime() -> ncsa
    162:162:double getActiveTime() -> jOVq
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> ssNb
    15:15:void access$1(react.surge.sched.Task,boolean) -> Whld
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> XuBO
    14:14:void access$3(react.surge.sched.Task,double) -> Whld
    12:12:void access$4(react.surge.sched.Task,double) -> LNyy
    14:14:double access$5(react.surge.sched.Task) -> xNws
    13:13:void access$6(react.surge.sched.Task,double) -> ssNb
    13:13:double access$7(react.surge.sched.Task) -> LGKV
    12:12:double access$8(react.surge.sched.Task) -> dLof
react.surge.sched.Task$1 -> BctM$1:
    react.surge.sched.Task this$0 -> XTah
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> BctM$2:
    react.surge.sched.Task this$0 -> XTah
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> BctM$3:
    react.surge.sched.Task this$0 -> XTah
    int val$total -> uYUn
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> RtCP:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> nwEN
    double computeTime -> oqWJ
    double totalComputeTime -> VVkv
    double activeTime -> Kgmq
    boolean completed -> completed
    react.gbench.Profiler profiler -> lyNw
    react.gbench.Profiler activeProfiler -> FiaE
    int ticks -> lMym
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> XuBO
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> SKtf
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> STel
    101:101:boolean hasCompleted() -> ArWR
    107:107:double getTotalComputeTime() -> ncsa
    113:113:double getActiveTime() -> jOVq
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> Whld
    12:12:void access$1(react.surge.sched.TaskLater,double) -> Whld
    13:13:double access$2(react.surge.sched.TaskLater) -> LNyy
    12:12:double access$3(react.surge.sched.TaskLater) -> ssNb
    13:13:void access$4(react.surge.sched.TaskLater,double) -> LNyy
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> XuBO
    14:14:double access$6(react.surge.sched.TaskLater) -> xNws
    14:14:void access$7(react.surge.sched.TaskLater,double) -> ssNb
react.surge.sched.TaskLater$1 -> RtCP$1:
    react.surge.sched.TaskLater this$0 -> XTai
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> MRoy:
    react.glang.GList tasks -> JBMI
    react.glang.GMap taskProfiles -> UvLp
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> Whld
    25:35:void onTick() -> LPAm
    39:40:void putFinishingTask(react.surge.sched.ITask) -> LNyy
    44:53:void putTask(react.surge.sched.ITask) -> ssNb
    58:58:java.lang.String getTickName() -> RYbk
    63:63:react.glang.GList getTasks() -> ytte
    68:68:react.glang.GMap getTaskProfiles() -> ssdD
react.surge.sched.TaskProfile -> iKpI:
    double activeTime -> Kgmq
    double computeTickTime -> jGsu
    double computeTime -> oqWJ
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> jOVq
    23:24:void setActiveTime(double) -> wwIa
    28:28:double getComputeTickTime() -> ebKf
    33:34:void setComputeTickTime(double) -> clOe
    38:38:double getComputeTime() -> STel
    43:44:void setComputeTime(double) -> lfGn
react.surge.server.AsyncTick -> XSOy:
react.surge.server.CPS -> dxVa:
    react.glang.GMap keys -> CqXy
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> FNKh
    46:99:void scan() -> LHAy
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> ssNb
react.surge.server.CoreTickThread -> UAWA:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> KoMy:
    long memoryFree -> Vgmu
    long memoryUsed -> wMxd
    long memoryMax -> NpxH
    long lastMemoryUsed -> yfBd
    long memoryUsedAfterGC -> diFs
    long allocated -> IiyU
    long collected -> eIfR
    long collections -> Hwui
    long sms -> lxlp
    long memoryAllocatedPerTick -> kTGq
    long memoryCollectedPerTick -> whLP
    long memoryFullyAllocatedPerTick -> oWbj
    long mah -> kdiF
    long mahs -> oqVE
    22:39:void <init>() -> <init>
    void onAllocationSet() -> oDsh
    46:107:void run() -> run
    111:111:long getMemoryFree() -> WHBD
    116:116:long getMemoryUsed() -> getMemoryUsed
    121:121:long getMemoryMax() -> gqCG
    126:126:long getLastMemoryUsed() -> AOrd
    131:131:long getMemoryUsedAfterGC() -> sjvT
    136:136:long getAllocated() -> getAllocated
    141:141:long getCollected() -> sADK
    146:146:long getCollections() -> RRGJ
    151:151:long getSms() -> Qpef
    156:156:long getMemoryAllocatedPerTick() -> ELBE
    161:161:long getMemoryCollectedPerTick() -> TFje
    166:166:long getMemoryFullyAllocatedPerTick() -> LjHS
    171:171:long getMah() -> xaTa
    176:176:long getMahs() -> PeSI
react.surge.server.SuperSampler -> VMKO:
    react.gmath.Average ticksPerSecondL -> Obwg
    react.gmath.Average tickTimeL -> IXvQ
    react.gmath.Average mahL -> oiFI
    double ticksPerSecond -> HnsO
    double ticksPerSecondRaw -> bIMF
    double tickTime -> RcqH
    double tickTimeRaw -> RRnv
    boolean running -> running
    boolean frozen -> OJFu
    double tickUtilizationRaw -> bjpF
    double tickUtilization -> rqmU
    double leftoverTickTime -> VyOf
    long memoryUse -> oNpx
    long memoryAllocated -> oOQx
    long memoryCollected -> wWJM
    long mahs -> oqVE
    int totalChunks -> NqWd
    int totalEntities -> SxVb
    int totalDrops -> grOM
    int totalTiles -> ecWn
    int totalLiving -> Yyfw
    int chunksLoaded -> NFdE
    int chunksUnloaded -> AcCC
    react.surge.server.WorldMonitor worldMonitor -> ubHq
    react.surge.server.TPSMonitor tpsMonitor -> MTdd
    react.surge.server.MemoryMonitor memoryMonitor -> tDqt
    java.lang.StackTraceElement[] lockStack -> QibJ
    react.glang.GMap spikes -> Jtvr
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> LPAm
    154:154:java.lang.String getTickName() -> RYbk
    159:159:react.gmath.Average getTicksPerSecondL() -> BmKM
    164:164:double getTicksPerSecond() -> WiWu
    169:169:double getTicksPerSecondRaw() -> FOEP
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> FyXY
    184:184:react.gmath.Average getTickTimeL() -> fCNf
    189:189:double getTickTime() -> EnEV
    194:194:double getTickTimeRaw() -> rpcm
    199:199:double getTickUtilizationRaw() -> feRD
    204:204:double getTickUtilization() -> sREP
    209:209:double getLeftoverTickTime() -> WjGj
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> dokO
    219:219:long getMemoryUse() -> VoTC
    224:224:long getMemoryAllocated() -> VUaK
    229:229:long getMemoryCollected() -> tCdi
    234:234:react.gmath.Average getMahL() -> dDwB
    239:239:long getMahs() -> PeSI
    244:244:int getTotalChunks() -> Mtxs
    249:249:int getTotalEntities() -> gVqY
    254:254:int getTotalDrops() -> esOH
    259:259:int getTotalTiles() -> Vfav
    264:264:int getTotalLiving() -> ELAK
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> PCNl
    274:274:int getChunksLoaded() -> gFPi
    279:279:int getChunksUnloaded() -> nSTy
    284:285:void setTicksPerSecondL(react.gmath.Average) -> Whld
    289:290:void setTickTimeL(react.gmath.Average) -> LNyy
    294:295:void setMahL(react.gmath.Average) -> ssNb
    299:300:void setTicksPerSecond(double) -> HnCx
    304:305:void setTicksPerSecondRaw(double) -> NMQN
    309:310:void setTickTime(double) -> CDaF
    314:315:void setTickTimeRaw(double) -> rMfW
    319:320:void setRunning(boolean) -> YwcS
    324:325:void setTickUtilizationRaw(double) -> oxCI
    329:330:void setTickUtilization(double) -> WynA
    334:335:void setLeftoverTickTime(double) -> HvVJ
    339:340:void setMemoryUse(long) -> ylMp
    344:345:void setMemoryAllocated(long) -> wwIa
    349:350:void setMemoryCollected(long) -> clOe
    354:355:void setMahs(long) -> lfGn
    359:360:void setTotalChunks(int) -> XcbK
    364:365:void setTotalEntities(int) -> wKwK
    369:370:void setTotalDrops(int) -> onrj
    374:375:void setTotalTiles(int) -> FNKh
    379:380:void setTotalLiving(int) -> aLXU
    384:385:void setChunksLoaded(int) -> fRus
    389:390:void setChunksUnloaded(int) -> nkpG
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> Whld
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> Whld
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> Whld
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> nAri
    419:419:react.glang.GMap getSpikes() -> vcMD
    31:31:void access$0(react.surge.server.SuperSampler,int) -> Whld
    33:33:void access$1(react.surge.server.SuperSampler,int) -> LNyy
    34:34:void access$2(react.surge.server.SuperSampler,int) -> ssNb
    32:32:void access$3(react.surge.server.SuperSampler,int) -> XuBO
    35:35:void access$4(react.surge.server.SuperSampler,int) -> xNws
    36:36:void access$5(react.surge.server.SuperSampler,int) -> LGKV
    37:37:void access$6(react.surge.server.SuperSampler,int) -> dLof
    19:19:void access$7(react.surge.server.SuperSampler,double) -> Whld
    21:21:void access$8(react.surge.server.SuperSampler,double) -> LNyy
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> Whld
    19:19:double access$10(react.surge.server.SuperSampler) -> LNyy
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> ssNb
    21:21:double access$12(react.surge.server.SuperSampler) -> XuBO
    18:18:void access$13(react.surge.server.SuperSampler,double) -> ssNb
    20:20:void access$14(react.surge.server.SuperSampler,double) -> XuBO
    24:24:void access$15(react.surge.server.SuperSampler,double) -> xNws
    20:20:double access$16(react.surge.server.SuperSampler) -> xNws
    25:25:void access$17(react.surge.server.SuperSampler,double) -> LGKV
    25:25:double access$18(react.surge.server.SuperSampler) -> LGKV
    26:26:void access$19(react.surge.server.SuperSampler,double) -> dLof
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> Whld
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> dLof
    27:27:void access$22(react.surge.server.SuperSampler,long) -> Whld
    28:28:void access$23(react.surge.server.SuperSampler,long) -> LNyy
    29:29:void access$24(react.surge.server.SuperSampler,long) -> ssNb
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> CgDt
    30:30:void access$26(react.surge.server.SuperSampler,long) -> XuBO
react.surge.server.SuperSampler$1 -> VMKO$1:
    react.surge.server.SuperSampler this$0 -> kSjY
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> Whld
react.surge.server.SuperSampler$2 -> VMKO$2:
    react.surge.server.SuperSampler this$0 -> kSjY
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> uOYL
    106:107:void onSpike() -> IGKf
react.surge.server.SuperSampler$3 -> VMKO$3:
    react.surge.server.SuperSampler this$0 -> kSjY
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> oDsh
react.surge.server.TPSMonitor -> CMeE:
    double tickTimeMS -> neeB
    double rawTicksPerSecond -> MfFp
    react.gbench.Profiler tickProfiler -> cmtq
    react.gbench.Profiler tickTimeProfiler -> wVmF
    boolean ticked -> TGvk
    java.lang.Thread$State lastState -> CFfQ
    double actualTickTimeMS -> jsJa
    double ltt -> plJt
    long lastTick -> scSo
    boolean frozen -> OJFu
    java.lang.StackTraceElement[] lockedStack -> bsdM
    double lmsx -> bYqR
    23:40:void <init>() -> <init>
    void onTicked() -> uOYL
    void onSpike() -> IGKf
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> Whld
    160:160:double getTickTimeMS() -> ECOn
    165:165:double getRawTicksPerSecond() -> iehX
    170:170:react.gbench.Profiler getTickProfiler() -> quos
    175:175:boolean isTicked() -> RjwW
    180:181:void markTick() -> aDag
    185:185:react.gbench.Profiler getTickTimeProfiler() -> nRxH
    190:190:java.lang.Thread$State getLastState() -> AHGT
    195:195:double getActualTickTimeMS() -> pQNl
    200:200:double getLtt() -> BmLt
    205:205:long getLastTick() -> pGcs
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> gWVB
react.surge.server.WorldMonitor -> CDry:
    boolean chunksChanged -> LseQ
    boolean dropChanged -> HUwB
    boolean tileChanged -> VhPq
    boolean livingChanged -> mkRF
    boolean totalChanged -> YyiQ
    boolean updated -> Wsbp
    int totalChunks -> NqWd
    int totalDrops -> grOM
    int totalTiles -> ecWn
    int totalLiving -> Yyfw
    int totalEntities -> SxVb
    int chunksLoaded -> NFdE
    int chunksUnloaded -> AcCC
    long ms -> LGbM
    24:43:void <init>() -> <init>
    48:73:void run() -> run
    void updated(int,int,int,int,int,int,int) -> Whld
    80:85:void on(org.bukkit.event.world.ChunkLoadEvent) -> LNyy
    90:95:void on(org.bukkit.event.world.ChunkUnloadEvent) -> Whld
    100:101:void on(org.bukkit.event.entity.EntitySpawnEvent) -> Whld
    106:107:void on(org.bukkit.event.entity.EntityDeathEvent) -> Whld
    112:113:void on(org.bukkit.event.player.PlayerDropItemEvent) -> Whld
    118:119:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> Whld
    124:125:void on(org.bukkit.event.block.BlockPlaceEvent) -> Whld
    130:131:void on(org.bukkit.event.block.BlockBreakEvent) -> Whld
    135:136:void doUpdate() -> jFkl
    140:191:void sample() -> Bcac
    195:201:void sampleTotalCount() -> mqxR
    205:211:void sampleLivingCount() -> GYyS
    215:251:void sampleTileCount() -> WOvD
    255:261:void sampleDropCount() -> Thoc
    265:271:void sampleChunkCount() -> SUMA
react.surge.text.PhantomSpinner -> nBMd:
    react.surge.text.ProgressSpinner s -> UJyH
    react.surge.text.ProgressSpinner c -> ORYW
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> CxXb:
    java.lang.String[] chars -> qLia
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> MDCO
    react.surge.text.ProgressSpinner NETWORK -> XedW
    react.surge.text.ProgressSpinner CIRCLES -> TQGx
    react.surge.text.ProgressSpinner RANDOMS -> vBfy
    react.surge.text.ProgressSpinner MERGERS -> LRAe
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> nmJm
    65:65:int getIndex() -> getIndex
react.surge.util.Amounts -> SmwD:
    react.surge.util.Amounts SINGLE -> HwxU
    react.surge.util.Amounts DUAL -> rjAC
    react.surge.util.Amounts TRI -> KyRP
    react.surge.util.Amounts QUAD -> dpwi
    react.surge.util.Amounts HEX -> UvOH
    react.surge.util.Amounts OCTA -> GJaq
    int a -> a
    react.surge.util.Amounts[] ENUM$VALUES -> jQGC
    5:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:23:int a() -> a
    29:37:java.lang.String to(int) -> VUIj
    1:1:react.surge.util.Amounts[] values() -> values
    1:1:react.surge.util.Amounts valueOf(java.lang.String) -> valueOf
react.surge.util.Anchor -> RkUC:
    int value() -> value
react.surge.util.Area -> uNtr:
    org.bukkit.Location location -> HUtw
    java.lang.Double radius -> MwGo
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> Whld
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> KLsc
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> LGKV
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> dLof
    109:109:boolean isWithin(org.bukkit.Location) -> CgDt
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> XuBO
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> Whld
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> yBUv
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> wVCG
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> ugrC
    257:257:java.lang.Double getRadius() -> TiPm
    268:269:void setRadius(java.lang.Double) -> ssNb
    278:283:org.bukkit.Location random() -> Hvnt
react.surge.util.Axis -> oogX:
    react.surge.util.Axis X -> tNCK
    react.surge.util.Axis Y -> LIQH
    react.surge.util.Axis Z -> Wsbv
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> yKpA
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> RslJ
    29:29:org.bukkit.util.Vector negative() -> WOut
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> GQcB:
    react.surge.util.BlastResistance BARRIER -> dyiD
    react.surge.util.BlastResistance BEDROCK -> xIQV
    react.surge.util.BlastResistance COMMAND -> oFgF
    react.surge.util.BlastResistance ENDER_PORTAL -> WYtA
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> DJLm
    react.surge.util.BlastResistance ANVIL -> PVAH
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> plMn
    react.surge.util.BlastResistance OBSIDIAN -> SDup
    react.surge.util.BlastResistance ENDER_CHEST -> Sfxr
    react.surge.util.BlastResistance WATER -> Bmxa
    react.surge.util.BlastResistance LAVA -> NGHx
    react.surge.util.BlastResistance STATIONARY_WATER -> XUGQ
    react.surge.util.BlastResistance DRAGON_EGG -> iUui
    react.surge.util.BlastResistance ENDER_STONE -> Efar
    react.surge.util.BlastResistance COAL_BLOCK -> EfbT
    react.surge.util.BlastResistance DIAMOND_BLOCK -> YGHv
    react.surge.util.BlastResistance EMERALD_BLOCK -> gOpR
    react.surge.util.BlastResistance GOLD_BLOCK -> TQLI
    react.surge.util.BlastResistance IRON_BLOCK -> MUGD
    react.surge.util.BlastResistance REDSTONE_BLOCK -> AAED
    react.surge.util.BlastResistance BRICK -> Oklv
    react.surge.util.BlastResistance BRICK_STAIRS -> rOoH
    react.surge.util.BlastResistance HARD_CLAY -> CWjq
    react.surge.util.BlastResistance STONE -> whOq
    react.surge.util.BlastResistance SMOOTH_BRICK -> XwHu
    react.surge.util.BlastResistance SMOOTH_STAIRS -> dOVq
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> dWfx
    react.surge.util.BlastResistance STONE_SLAB2 -> DlNs
    react.surge.util.BlastResistance IRON_DOOR -> mbbP
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> ywFq
    react.surge.util.BlastResistance IRON_TRAPDOOR -> HojS
    react.surge.util.BlastResistance MOB_SPAWNER -> kTKd
    react.surge.util.BlastResistance WEB -> gOoJ
    react.surge.util.BlastResistance DISPENSER -> Irlt
    react.surge.util.BlastResistance DROPPER -> KEoK
    react.surge.util.BlastResistance FURNACE -> iVVP
    react.surge.util.BlastResistance BURNING_FURNACE -> uQHL
    react.surge.util.BlastResistance BEACON -> VxsD
    react.surge.util.BlastResistance COAL_ORE -> KWRE
    react.surge.util.BlastResistance COCOA -> lFNB
    react.surge.util.BlastResistance DIAMOND_ORE -> GSVG
    react.surge.util.BlastResistance EMERALD_ORE -> lqBI
    react.surge.util.BlastResistance FENCE -> PLmk
    react.surge.util.BlastResistance FENCE_GATE -> jalh
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> TanA
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> Ashg
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> hSUj
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> AcGq
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> rPQs
    react.surge.util.BlastResistance ACACIA_FENCE -> lNaD
    react.surge.util.BlastResistance BIRCH_FENCE -> lpcd
    react.surge.util.BlastResistance DARK_OAK_FENCE -> OJNp
    react.surge.util.BlastResistance SPRUCE_FENCE -> JSqG
    react.surge.util.BlastResistance JUNGLE_FENCE -> kdoH
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> cwJd
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> KxuJ
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> UeQK
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> rqtK
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> aFPT
    react.surge.util.BlastResistance QUARTZ_STAIRS -> XmyI
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> VEof
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> AcIW
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> vdmw
    react.surge.util.BlastResistance WOOD_STAIRS -> BDHt
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> XDGV
    react.surge.util.BlastResistance ACACIA_DOOR -> usMT
    react.surge.util.BlastResistance BIRCH_DOOR -> htvo
    react.surge.util.BlastResistance DARK_OAK_DOOR -> cmyJ
    react.surge.util.BlastResistance SPRUCE_DOOR -> PLoe
    react.surge.util.BlastResistance JUNGLE_DOOR -> YGIn
    react.surge.util.BlastResistance GOLD_ORE -> ioim
    react.surge.util.BlastResistance HOPPER -> XLWU
    react.surge.util.BlastResistance IRON_ORE -> vBkI
    react.surge.util.BlastResistance LAPIS_BLOCK -> Nhlj
    react.surge.util.BlastResistance LAPIS_ORE -> vSoh
    react.surge.util.BlastResistance QUARTZ_ORE -> FGed
    react.surge.util.BlastResistance REDSTONE_ORE -> wVsI
    react.surge.util.BlastResistance TRAP_DOOR -> mAFG
    react.surge.util.BlastResistance WOOD -> ayWc
    react.surge.util.BlastResistance CHEST -> uPlk
    react.surge.util.BlastResistance TRAPPED_CHEST -> YXNT
    react.surge.util.BlastResistance WORKBENCH -> iMjc
    react.surge.util.BlastResistance CAULDRON -> XwMt
    react.surge.util.BlastResistance LOG -> plRQ
    react.surge.util.BlastResistance LOG_2 -> mcGs
    react.surge.util.BlastResistance BOOKSHELF -> wgsh
    react.surge.util.BlastResistance BANNER -> PEDE
    react.surge.util.BlastResistance STANDING_BANNER -> HpOx
    react.surge.util.BlastResistance WALL_BANNER -> Nhom
    react.surge.util.BlastResistance JACK_O_LANTERN -> lxvY
    react.surge.util.BlastResistance MELON_BLOCK -> kdrE
    react.surge.util.BlastResistance SKULL -> EEDc
    react.surge.util.BlastResistance PUMPKIN -> DJQj
    react.surge.util.BlastResistance SIGN -> EUcS
    react.surge.util.BlastResistance SIGN_POST -> keQg
    react.surge.util.BlastResistance WALL_SIGN -> EDad
    react.surge.util.BlastResistance QUARTZ_BLOCK -> DJPL
    react.surge.util.BlastResistance NOTE_BLOCK -> HpOG
    react.surge.util.BlastResistance RED_SANDSTONE -> wFPu
    react.surge.util.BlastResistance SANDSTONE -> IQNl
    react.surge.util.BlastResistance WOOL -> nKwU
    react.surge.util.BlastResistance MONSTER_EGG -> OIna
    react.surge.util.BlastResistance RAILS -> sAuF
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> fUaV
    react.surge.util.BlastResistance DETECTOR_RAIL -> QrYE
    react.surge.util.BlastResistance POWERED_RAIL -> bQeW
    react.surge.util.BlastResistance CLAY -> wyUm
    react.surge.util.BlastResistance DIRT -> gjGa
    react.surge.util.BlastResistance GRASS -> WkYL
    react.surge.util.BlastResistance GRAVEL -> fMQh
    react.surge.util.BlastResistance SPONGE -> AcKW
    react.surge.util.BlastResistance BREWING_STAND -> slhU
    react.surge.util.BlastResistance STONE_BUTTON -> qwcc
    react.surge.util.BlastResistance WOOD_BUTTON -> iDxA
    react.surge.util.BlastResistance CAKE_BLOCK -> pkns
    react.surge.util.BlastResistance ICE -> jQLl
    react.surge.util.BlastResistance PACKED_ICE -> Okqg
    react.surge.util.BlastResistance LEVER -> aEqa
    react.surge.util.BlastResistance MYCEL -> bjxB
    react.surge.util.BlastResistance PISTON_BASE -> AAHK
    react.surge.util.BlastResistance PISTON_EXTENSION -> SyBb
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> wWVL
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> EVFy
    react.surge.util.BlastResistance GOLD_PLATE -> UTSw
    react.surge.util.BlastResistance IRON_PLATE -> BeoF
    react.surge.util.BlastResistance STONE_PLATE -> oiQH
    react.surge.util.BlastResistance WOOD_PLATE -> SNNS
    react.surge.util.BlastResistance SAND -> DJST
    react.surge.util.BlastResistance SOUL_SAND -> wFTd
    react.surge.util.BlastResistance CACTUS -> lxxg
    react.surge.util.BlastResistance LADDER -> JKcj
    react.surge.util.BlastResistance NETHERRACK -> PVFn
    react.surge.util.BlastResistance GLASS -> edCg
    react.surge.util.BlastResistance THIN_GLASS -> rrYq
    react.surge.util.BlastResistance STAINED_GLASS -> fxIT
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> cemL
    react.surge.util.BlastResistance GLOWSTONE -> yTiv
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> xHvM
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> raXN
    react.surge.util.BlastResistance SEA_LANTERN -> EVHH
    react.surge.util.BlastResistance BED_BLOCK -> PVFs
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> wVtU
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> aFVE
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> xIWQ
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> MfPQ
    react.surge.util.BlastResistance LEAVES -> GmPI
    react.surge.util.BlastResistance LEAVES_2 -> AcMi
    react.surge.util.BlastResistance SNOW -> GlmK
    int br -> Iapy
    react.surge.util.BlastResistance[] ENUM$VALUES -> bskG
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> wLpR
    175:190:int get(org.bukkit.Material) -> Whld
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> xqqK:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> dLof
react.surge.util.C -> htDu:
    react.surge.util.C BLACK -> ywMl
    react.surge.util.C DARK_BLUE -> SNLt
    react.surge.util.C DARK_GREEN -> mAFf
    react.surge.util.C DARK_AQUA -> EoWs
    react.surge.util.C DARK_RED -> aWUd
    react.surge.util.C DARK_PURPLE -> AsnP
    react.surge.util.C GOLD -> NXOm
    react.surge.util.C GRAY -> sAvO
    react.surge.util.C DARK_GRAY -> hljh
    react.surge.util.C BLUE -> lWUU
    react.surge.util.C GREEN -> aFUG
    react.surge.util.C AQUA -> veSQ
    react.surge.util.C RED -> WYxk
    react.surge.util.C LIGHT_PURPLE -> bbiY
    react.surge.util.C YELLOW -> gHFV
    react.surge.util.C WHITE -> wxym
    react.surge.util.C MAGIC -> HpTS
    react.surge.util.C BOLD -> YiTS
    react.surge.util.C STRIKETHROUGH -> PfiV
    react.surge.util.C UNDERLINE -> VOIR
    react.surge.util.C ITALIC -> AtOq
    react.surge.util.C RESET -> lVxL
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> XTnV
    char code -> wEua
    boolean isFormat -> aWXe
    java.lang.String toString -> tyBv
    java.util.Map BY_ID -> EDgX
    java.util.Map BY_CHAR -> aFWq
    java.util.Map dyeChatMap -> mtNG
    java.util.Map chatHexMap -> whXi
    java.util.Map dyeHexMap -> TYcn
    int[] $SWITCH_TABLE$surge$util$C -> bQkP
    react.surge.util.C[] ENUM$VALUES -> apjk
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> Drqh
    378:378:java.lang.String hex() -> SwNK
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> CgDt
    434:442:react.surge.util.C getByChar(java.lang.String) -> aLXU
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> LNyy
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> Whld
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> LNyy
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> ssNb
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> fRus
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> nkpG
    560:578:java.lang.String generateColorTable() -> twLY
    588:588:org.bukkit.ChatColor chatColor() -> uhmK
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> ugrC
    632:679:byte getItemMeta() -> gOCs
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> Fxwn
react.surge.util.C$1 -> htDu$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> htDu$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> htDu$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> htDu$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> htDu$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> htDu$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> htDu$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> htDu$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> htDu$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> htDu$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> htDu$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> htDu$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> htDu$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> htDu$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> htDu$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> htDu$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> htDu$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> htDu$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> htDu$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> htDu$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> htDu$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> htDu$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> MdUg:
    double number -> LQmD
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> KLYx
    23:25:react.surge.util.CDou add(double) -> Bkra
    30:32:react.surge.util.CDou sub(double) -> jqFx
    37:37:double get() -> get
    42:48:void circ() -> SCiH
react.surge.util.CMD -> tnUt:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> GKLh
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> bigG
    51:53:void execute(org.bukkit.command.CommandSender) -> ssNb
    60:77:void execute() -> execute
react.surge.util.CNum -> lMMI:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> MlSA
    23:25:react.surge.util.CNum add(int) -> BSCG
    30:32:react.surge.util.CNum sub(int) -> inBx
    37:37:int get() -> get
    42:48:void circ() -> SCiH
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> BdCu
react.surge.util.Chunks -> cRra:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> TFPk
    33:40:react.glang.GList getLoadedChunks() -> JSBA
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> LNyy
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> Whld
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> Whld
    98:98:boolean unload(org.bukkit.Chunk) -> Oqvn
    114:124:int unload(react.glang.GList,boolean,boolean) -> Whld
    138:138:int unload(react.glang.GList,boolean) -> Whld
    150:150:int unload(react.glang.GList) -> lLWD
    166:166:boolean isLoaded(java.lang.String,int,int) -> Whld
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> ssNb
    201:205:void load(react.glang.GList) -> xNvw
react.surge.util.Cuboid -> vbxr:
    java.lang.String worldName -> aNgH
    int x1 -> pIpj
    int y1 -> Iase
    int z1 -> gHHM
    int x2 -> ubRa
    int y2 -> QYKO
    int z2 -> ukDG
    int[] $SWITCH_TABLE$surge$util$Axis -> eteu
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> oFmX
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> Whld
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> ssNb
    93:93:boolean hasPlayers() -> Jcav
    98:110:react.glang.GList getPlayers() -> ryDs
    115:166:react.glang.GList getEntities() -> PLAp
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> CUdf
    287:287:org.bukkit.Location getLowerNE() -> VoVD
    298:298:org.bukkit.Location getUpperSW() -> ycvt
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> nSWT
    348:348:int getSizeY() -> ncxN
    358:358:int getSizeZ() -> KoVp
    368:368:int getLowerX() -> OQOe
    378:378:int getLowerY() -> nAxW
    388:388:int getLowerZ() -> tCij
    398:398:int getUpperX() -> uiPm
    408:408:int getUpperY() -> USCe
    418:418:int getUpperZ() -> PBrn
    428:438:org.bukkit.block.Block[] corners() -> VwiM
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> Whld
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> LNyy
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> ssNb
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> XuBO
    546:546:boolean contains(int,int,int) -> xNws
    558:558:boolean contains(org.bukkit.block.Block) -> CgDt
    570:570:boolean contains(org.bukkit.Location) -> pGaV
    580:580:int volume() -> DICO
    591:601:byte averageLightLevel() -> yAvx
    612:612:react.surge.util.Cuboid contract() -> HwRT
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> Whld
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> LNyy
    708:715:boolean containsOnly(org.bukkit.Material) -> LNyy
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> Whld
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> LGKV
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> Whld
    786:800:java.util.List getChunks() -> jGNS
    815:819:void fill(int,byte) -> Whld
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> wECY
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> FEwL
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> DQTA
react.surge.util.Cuboid$1 -> vbxr$1:
    react.surge.util.Cuboid this$0 -> rYHh
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> pGaV
    1:1:java.lang.Object onAdapt(java.lang.Object) -> dLof
react.surge.util.Cuboid$CuboidDirection -> vbxr$Whld:
    react.surge.util.Cuboid$CuboidDirection North -> rGep
    react.surge.util.Cuboid$CuboidDirection East -> IHax
    react.surge.util.Cuboid$CuboidDirection South -> SorH
    react.surge.util.Cuboid$CuboidDirection West -> TbTX
    react.surge.util.Cuboid$CuboidDirection Up -> Yysp
    react.surge.util.Cuboid$CuboidDirection Down -> KqLa
    react.surge.util.Cuboid$CuboidDirection Horizontal -> kduG
    react.surge.util.Cuboid$CuboidDirection Vertical -> wVvB
    react.surge.util.Cuboid$CuboidDirection Both -> axyr
    react.surge.util.Cuboid$CuboidDirection Unknown -> xIWo
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> oFmX
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> BeqN
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> WjKl
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> DQTA
react.surge.util.Cuboid$CuboidIterator -> vbxr$LNyy:
    org.bukkit.World w -> ELxq
    int baseX -> qwkV
    int baseY -> JCXC
    int baseZ -> noBv
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> BwTw
    int sizeY -> DlYy
    int sizeZ -> ukGM
    react.surge.util.Cuboid this$0 -> rYHh
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> pYWt:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> XuVv:
    react.glang.GList buffer -> oWrf
    boolean dbg -> DJXA
    int kf -> oWrQ
    react.glang.Callback scall -> yeop
    13:16:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    20:24:void flush() -> flush
    28:39:void log(java.lang.String,java.lang.String) -> XuBO
    43:51:void l(java.lang.Object,java.lang.String) -> LNyy
    55:56:void s(java.lang.Object,java.lang.String) -> ssNb
    60:71:void cdb() -> jFlb
    75:86:void v(java.lang.Object,java.lang.String) -> XuBO
    90:91:void w(java.lang.Object,java.lang.String) -> xNws
    95:96:void f(java.lang.Object,java.lang.String) -> LGKV
    100:113:void l(java.lang.String) -> VUIj
    117:124:void s(java.lang.String) -> MlSA
    128:142:void v(java.lang.String) -> BSCG
    146:153:void w(java.lang.String) -> inBx
    157:164:void f(java.lang.String) -> BdCu
react.surge.util.DMSRequire -> oETE:
    react.surge.util.DMSRequirement value() -> CxbR
react.surge.util.DMSRequirement -> nttU:
    react.surge.util.DMSRequirement SQL -> JCWu
    react.surge.util.DMSRequirement[] ENUM$VALUES -> wVwy
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> yRpd:
    react.surge.util.Depend VAULT -> fDhA
    react.surge.util.Depend FAWE -> FsAo
    react.surge.util.Depend WORLDEDIT -> MfTS
    react.surge.util.Depend PROTOLIB -> Lsqc
    react.surge.util.Depend CITIZENS -> AkbW
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> Uuya
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> IFge:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> dMkm
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> OPjD:
    react.surge.util.DimensionFace X -> yvqN
    react.surge.util.DimensionFace Y -> nepP
    react.surge.util.DimensionFace Z -> yepC
    react.surge.util.DimensionFace[] ENUM$VALUES -> qUgV
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> rWMr:
    react.surge.util.Direction U -> NWsX
    react.surge.util.Direction D -> WbnG
    react.surge.util.Direction N -> RvBg
    react.surge.util.Direction S -> elWP
    react.surge.util.Direction E -> pSEF
    react.surge.util.Direction W -> TIEF
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> CiVa
    int[] $SWITCH_TABLE$surge$util$Direction -> pAap
    react.surge.util.Direction[] ENUM$VALUES -> pAbX
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> RAHY
    61:61:int x() -> Yony
    66:66:int y() -> fmeY
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> fvWD
    81:81:react.glang.GList news() -> LPYB
    86:86:react.glang.GList udnews() -> lffH
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> HvVJ
    115:147:react.surge.util.Direction fromByte(byte) -> pGaV
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> EvXU
react.surge.util.DynamicConfiguration -> RtEE:
react.surge.util.DynamicTracker -> WOnc:
react.surge.util.Embedded -> pagi:
    react.glang.GList get() -> QpjB
    void add(java.lang.Object) -> add
react.surge.util.FU -> ObJe:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> Whld
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> LNyy
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> xNws
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> LGKV
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> kIgf:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> CUdf
react.surge.util.Health -> Drki:
    double hp -> ethS
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> QOGY
    41:41:double getHearts() -> IrCr
    51:51:double getHalfHearts() -> iwOL
    61:61:int getFlatHalfHearts() -> ghWa
react.surge.util.IO -> brRE:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> qCIQ:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> Whld
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> Whld
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> Whld
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> Whld
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> Whld
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> LNyy
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> ssNb
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> XuBO
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> Whld
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> Whld
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> Whld
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> Whld
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> xNws
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> LGKV
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> dLof
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> CgDt
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> ugrC
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> Whld
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> pGaV
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> HnCx
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> Whld
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> Whld
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> LNyy
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> Whld
react.surge.util.MSound -> rWMb:
    react.surge.util.MSound AMBIENCE_CAVE -> bRMW
    react.surge.util.MSound AMBIENCE_RAIN -> lNgj
    react.surge.util.MSound AMBIENCE_THUNDER -> eSFO
    react.surge.util.MSound ANVIL_BREAK -> ioqt
    react.surge.util.MSound ANVIL_LAND -> HNRe
    react.surge.util.MSound ANVIL_USE -> WALT
    react.surge.util.MSound ARROW_HIT -> Mnca
    react.surge.util.MSound BURP -> wWXa
    react.surge.util.MSound CHEST_CLOSE -> wNgX
    react.surge.util.MSound CHEST_OPEN -> UnKI
    react.surge.util.MSound CLICK -> fwml
    react.surge.util.MSound DOOR_CLOSE -> JLJk
    react.surge.util.MSound DOOR_OPEN -> jYgM
    react.surge.util.MSound DRINK -> lEyt
    react.surge.util.MSound EAT -> yfTE
    react.surge.util.MSound EXPLODE -> COfS
    react.surge.util.MSound FALL_BIG -> mlBW
    react.surge.util.MSound FALL_SMALL -> pdIq
    react.surge.util.MSound FIRE -> daGN
    react.surge.util.MSound FIRE_IGNITE -> iVdT
    react.surge.util.MSound FIZZ -> IYiE
    react.surge.util.MSound FUSE -> eBGK
    react.surge.util.MSound GLASS -> DBGy
    react.surge.util.MSound HURT_FLESH -> ULJh
    react.surge.util.MSound ITEM_BREAK -> fgNH
    react.surge.util.MSound ITEM_PICKUP -> IPxG
    react.surge.util.MSound LAVA -> OJXm
    react.surge.util.MSound LAVA_POP -> IHgb
    react.surge.util.MSound LEVEL_UP -> HFFA
    react.surge.util.MSound MINECART_BASE -> ReDp
    react.surge.util.MSound MINECART_INSIDE -> QXoe
    react.surge.util.MSound NOTE_BASS -> fLyf
    react.surge.util.MSound NOTE_PIANO -> knJw
    react.surge.util.MSound NOTE_BASS_DRUM -> ShFS
    react.surge.util.MSound NOTE_STICKS -> OAeu
    react.surge.util.MSound NOTE_BASS_GUITAR -> UnLa
    react.surge.util.MSound NOTE_SNARE_DRUM -> FXnb
    react.surge.util.MSound NOTE_PLING -> Cyxo
    react.surge.util.MSound ORB_PICKUP -> wFYb
    react.surge.util.MSound PISTON_EXTEND -> HWFJ
    react.surge.util.MSound PISTON_RETRACT -> DAgv
    react.surge.util.MSound PORTAL -> iMqP
    react.surge.util.MSound PORTAL_TRAVEL -> TkJG
    react.surge.util.MSound PORTAL_TRIGGER -> wqMT
    react.surge.util.MSound SHOOT_ARROW -> jIDo
    react.surge.util.MSound SPLASH -> vdwt
    react.surge.util.MSound SPLASH2 -> HMvR
    react.surge.util.MSound STEP_GRASS -> KXAW
    react.surge.util.MSound STEP_GRAVEL -> Asua
    react.surge.util.MSound STEP_LADDER -> HVgY
    react.surge.util.MSound STEP_SAND -> dqjJ
    react.surge.util.MSound STEP_SNOW -> vnNJ
    react.surge.util.MSound STEP_STONE -> bRRL
    react.surge.util.MSound STEP_WOOD -> RvGr
    react.surge.util.MSound STEP_WOOL -> qVNG
    react.surge.util.MSound SWIM -> cwXH
    react.surge.util.MSound WATER -> iMtm
    react.surge.util.MSound WOOD_CLICK -> ipXm
    react.surge.util.MSound BAT_DEATH -> hKSO
    react.surge.util.MSound BAT_HURT -> ffmm
    react.surge.util.MSound BAT_IDLE -> SVgY
    react.surge.util.MSound BAT_LOOP -> nwWO
    react.surge.util.MSound BAT_TAKEOFF -> WtVX
    react.surge.util.MSound BLAZE_BREATH -> KqSg
    react.surge.util.MSound BLAZE_DEATH -> qxOw
    react.surge.util.MSound BLAZE_HIT -> pRiU
    react.surge.util.MSound CAT_HISS -> cfWI
    react.surge.util.MSound CAT_HIT -> tNTe
    react.surge.util.MSound CAT_MEOW -> rHNc
    react.surge.util.MSound CAT_PURR -> yCpm
    react.surge.util.MSound CAT_PURREOW -> ixhL
    react.surge.util.MSound CHICKEN_IDLE -> nMBt
    react.surge.util.MSound CHICKEN_HURT -> KNmp
    react.surge.util.MSound CHICKEN_EGG_POP -> JBye
    react.surge.util.MSound CHICKEN_WALK -> vSxk
    react.surge.util.MSound COW_IDLE -> PwpV
    react.surge.util.MSound COW_HURT -> AcUf
    react.surge.util.MSound COW_WALK -> HWGf
    react.surge.util.MSound CREEPER_HISS -> MUTv
    react.surge.util.MSound CREEPER_DEATH -> GSdI
    react.surge.util.MSound ENDERDRAGON_DEATH -> Cqjm
    react.surge.util.MSound ENDERDRAGON_GROWL -> xtSA
    react.surge.util.MSound ENDERDRAGON_HIT -> tWDf
    react.surge.util.MSound ENDERDRAGON_WINGS -> WkdO
    react.surge.util.MSound ENDERMAN_DEATH -> QsDR
    react.surge.util.MSound ENDERMAN_HIT -> WlDm
    react.surge.util.MSound ENDERMAN_IDLE -> Lstj
    react.surge.util.MSound ENDERMAN_TELEPORT -> knLx
    react.surge.util.MSound ENDERMAN_SCREAM -> OIyY
    react.surge.util.MSound ENDERMAN_STARE -> eSML
    react.surge.util.MSound GHAST_SCREAM -> GeIO
    react.surge.util.MSound GHAST_SCREAM2 -> LATD
    react.surge.util.MSound GHAST_CHARGE -> drMB
    react.surge.util.MSound GHAST_DEATH -> AJDj
    react.surge.util.MSound GHAST_FIREBALL -> VOQs
    react.surge.util.MSound GHAST_MOAN -> SNYQ
    react.surge.util.MSound IRONGOLEM_DEATH -> Lswb
    react.surge.util.MSound IRONGOLEM_HIT -> tWHQ
    react.surge.util.MSound IRONGOLEM_THROW -> EodU
    react.surge.util.MSound IRONGOLEM_WALK -> KNrN
    react.surge.util.MSound MAGMACUBE_WALK -> ohyj
    react.surge.util.MSound MAGMACUBE_WALK2 -> hSeI
    react.surge.util.MSound MAGMACUBE_JUMP -> yCsP
    react.surge.util.MSound PIG_IDLE -> XfWr
    react.surge.util.MSound PIG_DEATH -> rsCv
    react.surge.util.MSound PIG_WALK -> yMEL
    react.surge.util.MSound SHEEP_IDLE -> dXYM
    react.surge.util.MSound SHEEP_SHEAR -> cMFD
    react.surge.util.MSound SHEEP_WALK -> iNWI
    react.surge.util.MSound SILVERFISH_HIT -> vnNr
    react.surge.util.MSound SILVERFISH_KILL -> OAjc
    react.surge.util.MSound SILVERFISH_IDLE -> OuQB
    react.surge.util.MSound SILVERFISH_WALK -> GeHd
    react.surge.util.MSound SKELETON_IDLE -> HWJT
    react.surge.util.MSound SKELETON_DEATH -> QbEO
    react.surge.util.MSound SKELETON_HURT -> aOPU
    react.surge.util.MSound SKELETON_WALK -> OdQc
    react.surge.util.MSound SLIME_ATTACK -> VXEO
    react.surge.util.MSound SLIME_WALK -> aptm
    react.surge.util.MSound SLIME_WALK2 -> aFbG
    react.surge.util.MSound SPIDER_IDLE -> KFcR
    react.surge.util.MSound SPIDER_DEATH -> yTwO
    react.surge.util.MSound SPIDER_WALK -> aptf
    react.surge.util.MSound WITHER_DEATH -> rGrU
    react.surge.util.MSound WITHER_HURT -> TkPd
    react.surge.util.MSound WITHER_IDLE -> QYUv
    react.surge.util.MSound WITHER_SHOOT -> oGYc
    react.surge.util.MSound WITHER_SPAWN -> HWLn
    react.surge.util.MSound WOLF_BARK -> BCwa
    react.surge.util.MSound WOLF_DEATH -> VOTW
    react.surge.util.MSound WOLF_GROWL -> XnlU
    react.surge.util.MSound WOLF_HOWL -> DmDR
    react.surge.util.MSound WOLF_HURT -> qwry
    react.surge.util.MSound WOLF_PANT -> Jmsj
    react.surge.util.MSound WOLF_SHAKE -> jjnY
    react.surge.util.MSound WOLF_WALK -> Kygw
    react.surge.util.MSound WOLF_WHINE -> mkgW
    react.surge.util.MSound ZOMBIE_METAL -> pSMu
    react.surge.util.MSound ZOMBIE_WOOD -> MLhO
    react.surge.util.MSound ZOMBIE_WOODBREAK -> JLPN
    react.surge.util.MSound ZOMBIE_IDLE -> WbvW
    react.surge.util.MSound ZOMBIE_DEATH -> kmqD
    react.surge.util.MSound ZOMBIE_HURT -> hvJU
    react.surge.util.MSound ZOMBIE_INFECT -> gsGT
    react.surge.util.MSound ZOMBIE_UNFECT -> FrhD
    react.surge.util.MSound ZOMBIE_REMEDY -> pcmx
    react.surge.util.MSound ZOMBIE_WALK -> Xniu
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> QXtX
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> NqnU
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> CaPB
    react.surge.util.MSound ZOMBIE_PIG_HURT -> VqVV
    react.surge.util.MSound DIG_WOOL -> RJvQ
    react.surge.util.MSound DIG_GRASS -> FbGa
    react.surge.util.MSound DIG_GRAVEL -> yLeT
    react.surge.util.MSound DIG_SAND -> AkjE
    react.surge.util.MSound DIG_SNOW -> euPs
    react.surge.util.MSound DIG_STONE -> SFIo
    react.surge.util.MSound DIG_WOOD -> VNte
    react.surge.util.MSound FIREWORK_BLAST -> DdTV
    react.surge.util.MSound FIREWORK_BLAST2 -> dPNM
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> elcD
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> SWMx
    react.surge.util.MSound FIREWORK_TWINKLE -> pRol
    react.surge.util.MSound FIREWORK_TWINKLE2 -> knTo
    react.surge.util.MSound FIREWORK_LAUNCH -> UKrD
    react.surge.util.MSound SUCCESSFUL_HIT -> jkQQ
    react.surge.util.MSound HORSE_ANGRY -> ShPP
    react.surge.util.MSound HORSE_ARMOR -> XnnU
    react.surge.util.MSound HORSE_BREATHE -> HqAn
    react.surge.util.MSound HORSE_DEATH -> sShI
    react.surge.util.MSound HORSE_GALLOP -> bbxr
    react.surge.util.MSound HORSE_HIT -> gbHS
    react.surge.util.MSound HORSE_IDLE -> bbyR
    react.surge.util.MSound HORSE_JUMP -> IjsG
    react.surge.util.MSound HORSE_LAND -> Cias
    react.surge.util.MSound HORSE_SADDLE -> fftd
    react.surge.util.MSound HORSE_SOFT -> DdTs
    react.surge.util.MSound HORSE_WOOD -> CPOB
    react.surge.util.MSound DONKEY_ANGRY -> EVUE
    react.surge.util.MSound DONKEY_DEATH -> LIgP
    react.surge.util.MSound DONKEY_HIT -> bIfG
    react.surge.util.MSound DONKEY_IDLE -> kLPe
    react.surge.util.MSound HORSE_SKELETON_DEATH -> Wkht
    react.surge.util.MSound HORSE_SKELETON_HIT -> hSgu
    react.surge.util.MSound HORSE_SKELETON_IDLE -> fEPv
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> ItDE
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> wqVC
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> kebN
    react.surge.util.MSound VILLAGER_DEATH -> HElE
    react.surge.util.MSound VILLAGER_HAGGLE -> FrjT
    react.surge.util.MSound VILLAGER_HIT -> fftK
    react.surge.util.MSound VILLAGER_IDLE -> KXGX
    react.surge.util.MSound VILLAGER_NO -> TYqs
    react.surge.util.MSound VILLAGER_YES -> ORrs
    java.lang.String pre19sound -> NYBY
    java.lang.String post19sound -> IHpu
    org.bukkit.Sound resolvedSound -> THqK
    react.surge.util.MSound[] ENUM$VALUES -> IRDF
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> tfLd
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> ESlP:
    org.bukkit.Material material -> Mwae
    java.lang.Byte data -> DRsy
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> TysC
    79:80:void setData(java.lang.Byte) -> Whld
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> wMIx:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> IFSd
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> MJjh
    68:68:boolean isAnyOnline() -> lnxi
    80:80:react.glang.GList inWorld(org.bukkit.World) -> tSlj
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> lLWD
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> Whld
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> Whld
    143:144:void disable(org.bukkit.entity.Player) -> KLYx
    154:155:void enable(org.bukkit.entity.Player) -> Bkra
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> Whld
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> LNyy
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> jqFx
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> Whld
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> LXOM
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> ssNb
    300:300:boolean canFindPlayer(java.lang.String) -> OYGF
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> yJLo
    338:345:react.glang.GList onlinePlayers() -> Emih
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> dweX
    368:371:void clear(org.bukkit.entity.Player) -> idrQ
    381:385:void clearEffects(org.bukkit.entity.Player) -> GPoP
    398:399:void heal(org.bukkit.entity.Player,double) -> Whld
    409:410:void heal(org.bukkit.entity.Player) -> uODB
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> dfcb
    432:433:void resetHunger(org.bukkit.entity.Player) -> DHFs
    443:444:void kill(org.bukkit.entity.Player) -> XtdC
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> jxug
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> UIVu
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> Whld
react.surge.util.P$1 -> wMIx$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> pGaV
    1:1:java.lang.Object onAdapt(java.lang.Object) -> dLof
react.surge.util.P$2 -> wMIx$2:
    java.lang.Double val$doff -> IACA
    org.bukkit.entity.Player val$e -> mlLS
    org.bukkit.entity.Entity[] val$result -> BLlk
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> HnCx
react.surge.util.PE -> uWeE:
    react.surge.util.PE ABSORPTION -> bAXm
    react.surge.util.PE BLINDNESS -> YOok
    react.surge.util.PE CONFUSION -> PNHB
    react.surge.util.PE DAMAGE_RESISTANCE -> lXGh
    react.surge.util.PE FAST_DIGGING -> ffub
    react.surge.util.PE FIRE_RESISTANCE -> rXva
    react.surge.util.PE GLOWING -> mRXj
    react.surge.util.PE HARM -> eKAd
    react.surge.util.PE HEAL -> UvgU
    react.surge.util.PE HEALTH_BOOST -> mlLG
    react.surge.util.PE HUNGER -> wOTy
    react.surge.util.PE INCREASE_DAMAGE -> XLjx
    react.surge.util.PE INVISIBILITY -> gahi
    react.surge.util.PE JUMP -> xkjK
    react.surge.util.PE LEVITATION -> BLmu
    react.surge.util.PE LUCK -> gXwF
    react.surge.util.PE NIGHT_VISION -> aiJA
    react.surge.util.PE POISON -> JKsb
    react.surge.util.PE REGENERATION -> UnWX
    react.surge.util.PE SATURATION -> jYob
    react.surge.util.PE SLOW -> PVWG
    react.surge.util.PE SLOW_DIGGING -> JTeQ
    react.surge.util.PE SPEED -> MxAs
    react.surge.util.PE UNLUCK -> UfFh
    react.surge.util.PE WATER_BREATHING -> gjYb
    react.surge.util.PE WEAKNESS -> IYra
    react.surge.util.PE WITHER -> FGxT
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> Whld
    144:144:react.surge.util.PE d(int) -> IFSd
    156:156:react.surge.util.PE a(int) -> OYGF
    166:166:org.bukkit.potion.PotionEffect c() -> JSGB
    177:178:void c(org.bukkit.entity.LivingEntity) -> LGKV
    182:183:void crm(org.bukkit.entity.LivingEntity) -> dLof
    187:188:void rm(org.bukkit.entity.LivingEntity) -> CgDt
react.surge.util.ParticleEffect -> nmCi:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> MoPh
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> oqow
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> DBRt
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> oaST
    react.surge.util.ParticleEffect WATER_BUBBLE -> VFha
    react.surge.util.ParticleEffect WATER_SPLASH -> AJNB
    react.surge.util.ParticleEffect WATER_WAKE -> CjGG
    react.surge.util.ParticleEffect SUSPENDED -> xIjS
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> JwLL
    react.surge.util.ParticleEffect CRIT -> Bfam
    react.surge.util.ParticleEffect CRIT_MAGIC -> PEXW
    react.surge.util.ParticleEffect SMOKE_NORMAL -> VXLD
    react.surge.util.ParticleEffect SMOKE_LARGE -> WIlU
    react.surge.util.ParticleEffect SPELL -> DJfT
    react.surge.util.ParticleEffect SPELL_INSTANT -> YHBc
    react.surge.util.ParticleEffect SPELL_MOB -> RSoH
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> rrlU
    react.surge.util.ParticleEffect SPELL_WITCH -> Gurc
    react.surge.util.ParticleEffect DRIP_WATER -> FanO
    react.surge.util.ParticleEffect DRIP_LAVA -> lGGy
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> nxBL
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> iqBs
    react.surge.util.ParticleEffect TOWN_AURA -> kLUO
    react.surge.util.ParticleEffect NOTE -> BxFD
    react.surge.util.ParticleEffect PORTAL -> NYDD
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> Rdnq
    react.surge.util.ParticleEffect FLAME -> nLkm
    react.surge.util.ParticleEffect LAVA -> KGId
    react.surge.util.ParticleEffect FOOTSTEP -> OArp
    react.surge.util.ParticleEffect CLOUD -> lyjd
    react.surge.util.ParticleEffect REDSTONE -> oiai
    react.surge.util.ParticleEffect SNOWBALL -> pJas
    react.surge.util.ParticleEffect SNOW_SHOVEL -> ukSj
    react.surge.util.ParticleEffect SLIME -> CPSh
    react.surge.util.ParticleEffect HEART -> ujrf
    react.surge.util.ParticleEffect BARRIER -> kwKq
    react.surge.util.ParticleEffect ITEM_CRACK -> iNam
    react.surge.util.ParticleEffect BLOCK_CRACK -> DRxM
    react.surge.util.ParticleEffect BLOCK_DUST -> heQh
    react.surge.util.ParticleEffect WATER_DROP -> WuBp
    react.surge.util.ParticleEffect ITEM_TAKE -> vfIj
    react.surge.util.ParticleEffect MOB_APPEARANCE -> ynrM
    react.surge.util.ParticleEffect DRAGON_BREATH -> NXeh
    react.surge.util.ParticleEffect END_ROD -> HhWB
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> dXdW
    react.surge.util.ParticleEffect SWEEP_ATTACK -> nLpO
    java.util.Map NAME_MAP -> tEpY
    java.util.Map ID_MAP -> fMjB
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> COsu
    java.util.List properties -> qpLQ
    react.surge.util.ParticleEffect[] ENUM$VALUES -> SErU
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> uGOn
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> Whld
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> ERxY
    557:565:react.surge.util.ParticleEffect fromId(int) -> yJLo
    577:578:boolean isWater(org.bukkit.Location) -> Veil
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> Whld
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> Whld
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> Whld
    665:681:void display(float,int,org.bukkit.Location,double) -> Whld
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> Whld
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> Whld
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> Whld
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> Whld
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> Whld
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> Whld
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> Whld
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> Whld
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> Whld
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> Whld
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> Whld
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> Whld
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> Whld
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> Whld
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> nmCi$Whld:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> nmCi$LNyy:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> nmCi$ssNb:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> SCmk
    1594:1594:float getValueY() -> ePqk
    1605:1605:float getValueZ() -> mjLl
react.surge.util.ParticleEffect$OrdinaryColor -> nmCi$XuBO:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> SCmk
    1526:1526:float getValueY() -> ePqk
    1537:1537:float getValueZ() -> mjLl
react.surge.util.ParticleEffect$ParticleColor -> nmCi$xNws:
    1383:1383:void <init>() -> <init>
    float getValueX() -> SCmk
    float getValueY() -> ePqk
    float getValueZ() -> mjLl
react.surge.util.ParticleEffect$ParticleColorException -> nmCi$LGKV:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> nmCi$dLof:
    org.bukkit.Material material -> Mwae
    byte data -> aXLm
    int[] packetData -> oGao
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> nloM
    1309:1309:java.lang.String getPacketDataString() -> YMpT
react.surge.util.ParticleEffect$ParticleDataException -> nmCi$CgDt:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> nmCi$ugrC:
    int version -> version
    java.lang.Class enumParticle -> UfKx
    java.lang.reflect.Constructor packetConstructor -> ygAt
    java.lang.reflect.Method getHandle -> RKaD
    java.lang.reflect.Field playerConnection -> NPUm
    java.lang.reflect.Method sendPacket -> RmdA
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> btbA
    float offsetX -> EEYY
    float offsetY -> CPWI
    float offsetZ -> seOq
    float speed -> XVBO
    int amount -> FWih
    boolean longDistance -> YqvG
    react.surge.util.ParticleEffect$ParticleData data -> aOYs
    java.lang.Object packet -> RnCJ
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> qdVr
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> Whld
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> LNyy
    2004:2018:void sendTo(org.bukkit.Location,double) -> LNyy
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> nmCi$ugrC$Whld:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> nmCi$ugrC$LNyy:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> nmCi$ugrC$ssNb:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> nmCi$pGaV:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> jITL
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> Rdpl
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> GTPk
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> NrWb
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> Bwff
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> nmCi$HnCx:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> qKXa:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> upda
react.surge.util.Persist -> ytrY:
react.surge.util.Platform -> MAqV:
    boolean ENABLE -> KhnC
    double PROC_CPU -> Gmbo
    11:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    253:258:java.lang.String getVersion() -> getVersion
    263:268:java.lang.String getName() -> getName
    273:273:com.sun.management.OperatingSystemMXBean getSystem() -> FpmS
    271:271:com.sun.management.OperatingSystemMXBean access$0() -> rWWr
react.surge.util.Platform$CPU -> MAqV$Whld:
    198:198:void <init>() -> <init>
    202:207:int getAvailableProcessors() -> getAvailableProcessors
    212:217:double getCPULoad() -> BvBX
    222:227:double getProcessCPULoad() -> OQTe
    232:237:double getLiveProcessCPULoad() -> MvCW
    242:247:java.lang.String getArchitecture() -> OsXS
react.surge.util.Platform$ENVIRONMENT -> MAqV$LNyy:
    14:14:void <init>() -> <init>
    18:18:boolean canRunBatch() -> lgHu
    23:28:java.lang.String getJavaHome() -> VMXT
    33:38:java.lang.String getJavaVendor() -> xHHd
    43:48:java.lang.String getJavaVersion() -> uiRh
react.surge.util.Platform$MEMORY -> MAqV$ssNb:
    119:119:void <init>() -> <init>
react.surge.util.Platform$MEMORY$PHYSICAL -> MAqV$ssNb$Whld:
    121:121:void <init>() -> <init>
    125:130:long getTotalMemory() -> TrGA
    135:140:long getFreeMemory() -> gWXY
    145:150:long getUsedMemory() -> Bubi
react.surge.util.Platform$MEMORY$VIRTUAL -> MAqV$ssNb$LNyy:
    154:154:void <init>() -> <init>
    158:163:long getTotalMemory() -> TrGA
    168:173:long getFreeMemory() -> gWXY
    178:183:long getUsedMemory() -> Bubi
    188:193:long getCommittedVirtualMemory() -> pQQb
react.surge.util.Platform$STORAGE -> MAqV$XuBO:
    52:52:void <init>() -> <init>
    56:63:long getAbsoluteTotalSpace() -> DkFi
    68:68:long getTotalSpace() -> getTotalSpace
    73:73:long getTotalSpace(java.io.File) -> dLof
    78:85:long getAbsoluteFreeSpace() -> feUy
    90:90:long getFreeSpace() -> getFreeSpace
    95:95:long getFreeSpace(java.io.File) -> CgDt
    100:100:long getUsedSpace() -> IiTa
    105:105:long getUsedSpace(java.io.File) -> ugrC
    110:110:long getAbsoluteUsedSpace() -> BeBM
    115:115:java.io.File[] getRoots() -> getRoots
react.surge.util.PluginUtil -> uygl:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> xNws
    78:88:void enable(java.lang.String) -> fJea
    95:99:void enableAll() -> qSru
    109:113:void disable(org.bukkit.plugin.Plugin) -> LGKV
    120:124:void disableAll() -> DPry
    135:135:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> dLof
    149:156:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> Whld
    168:173:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> lvkD
    183:186:java.util.List getPluginNames(boolean) -> WNxp
    198:201:java.lang.String getPluginVersion(java.lang.String) -> XtcB
    214:236:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> CgDt
    251:330:java.util.List findByCommand(java.lang.String) -> clRA
    351:352:void load(org.bukkit.plugin.Plugin) -> ugrC
    356:378:java.lang.String getPluginFileName(java.lang.String) -> ssOO
    383:405:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> Whld
    418:470:void load(java.lang.String) -> load
    482:487:void reload(org.bukkit.plugin.Plugin) -> pGaV
    494:498:void reloadAll() -> hYyk
    510:636:void unload(org.bukkit.plugin.Plugin) -> HnCx
react.surge.util.PoolCount -> IiJg:
react.surge.util.PoolDescriber -> Dalo:
react.surge.util.PoolNanoThrottle -> LaTf:
react.surge.util.PositionalSelector -> nBSO:
    react.glang.GSet allowedChunks -> DmJt
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> EeXn
    39:40:void addChunk(org.bukkit.Chunk) -> xNvw
    44:44:react.glang.GSet getAllowedChunks() -> QFYC
react.surge.util.Protocol -> dMfg:
    react.surge.util.Protocol LATEST -> UvlI
    react.surge.util.Protocol R1_12_2 -> MEBI
    react.surge.util.Protocol R1_12_2_PRE -> qpJt
    react.surge.util.Protocol R1_12_1 -> XMPp
    react.surge.util.Protocol R1_12 -> UCgS
    react.surge.util.Protocol R1_11_2 -> cgBq
    react.surge.util.Protocol R1_11_1 -> Acaa
    react.surge.util.Protocol R1_11 -> Rdpv
    react.surge.util.Protocol R1_10_2 -> UwMB
    react.surge.util.Protocol R1_10_1 -> uIUw
    react.surge.util.Protocol R1_10 -> Nihq
    react.surge.util.Protocol R1_9_4 -> qNKc
    react.surge.util.Protocol R1_9_3 -> dOuW
    react.surge.util.Protocol R1_9_2 -> jcJE
    react.surge.util.Protocol R1_9_1 -> Frrj
    react.surge.util.Protocol R1_9 -> RKbL
    react.surge.util.Protocol R1_8_9 -> DJii
    react.surge.util.Protocol R1_8_8 -> WksN
    react.surge.util.Protocol R1_8_7 -> WlSl
    react.surge.util.Protocol R1_8_6 -> XDav
    react.surge.util.Protocol R1_8_5 -> RLCX
    react.surge.util.Protocol R1_8_4 -> blRm
    react.surge.util.Protocol R1_8_3 -> XoWE
    react.surge.util.Protocol R1_8_2 -> igus
    react.surge.util.Protocol R1_8_1 -> noUr
    react.surge.util.Protocol R1_8 -> BxIE
    react.surge.util.Protocol R1_7_10 -> tEqx
    react.surge.util.Protocol R1_7_9 -> EpPt
    react.surge.util.Protocol R1_7_8 -> kChn
    react.surge.util.Protocol R1_7_7 -> RCRX
    react.surge.util.Protocol R1_7_6 -> Ltdn
    react.surge.util.Protocol R1_7_5 -> IslV
    react.surge.util.Protocol R1_7_4 -> WBAU
    react.surge.util.Protocol R1_7_3 -> KaAc
    react.surge.util.Protocol R1_7_2 -> MMUN
    react.surge.util.Protocol R1_7_1 -> vChF
    react.surge.util.Protocol B1_6_4 -> PpPk
    react.surge.util.Protocol B1_6_3 -> yoTd
    react.surge.util.Protocol B1_6_2 -> ENNc
    react.surge.util.Protocol B1_6_1 -> vDHc
    react.surge.util.Protocol B1_5_2 -> iNbm
    react.surge.util.Protocol B1_5_1 -> WSAO
    react.surge.util.Protocol B1_5 -> fDxc
    react.surge.util.Protocol B1_4_7 -> hutB
    react.surge.util.Protocol B1_4_6 -> CiiP
    react.surge.util.Protocol B1_4_5 -> HOFN
    react.surge.util.Protocol B1_4_4 -> HNdl
    react.surge.util.Protocol B1_4_2 -> hurf
    react.surge.util.Protocol B1_3_2 -> KiQE
    react.surge.util.Protocol B1_3_1 -> tFRG
    react.surge.util.Protocol B1_2_5 -> oOry
    react.surge.util.Protocol B1_2_4 -> iyVj
    react.surge.util.Protocol EARLIEST -> qMiO
    react.surge.util.Protocol UNKNOWN -> QkBg
    int version -> version
    java.lang.String packageVersion -> XupR
    java.lang.String versionName -> jbfv
    boolean netty -> uITm
    react.surge.util.Protocol[] ENUM$VALUES -> CHGe
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> lfgY
    118:118:java.lang.String getPackageVersion() -> dEFL
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> hslo
    142:150:react.surge.util.Protocol getProtocolVersion() -> VDen
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> LNyy
    160:160:boolean isServerVersion() -> feVg
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> GcPt
    175:175:boolean isActualVersion() -> iTpX
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> ohDg
    200:200:int getMetaVersion() -> VxMk
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> xicO:
    react.surge.util.Protocol from -> XEFA
    react.surge.util.Protocol to -> HOIE
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> FqPM
    21:21:react.surge.util.Protocol getTo() -> dxeW
    26:26:boolean contains(react.surge.util.Protocol) -> ssNb
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> LGbM:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> nmRR
    70:70:int randomNextInt() -> sQmG
    80:80:long randomNextLong() -> hcNv
    92:92:boolean isWithin(double) -> LXOM
    104:104:boolean isWithin(int) -> ERxY
    116:116:boolean isWithin(long) -> NMQN
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> dweX
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> WNxp
react.surge.util.RawEvent -> kIkC:
react.surge.util.RayTrace -> Oali:
    org.bukkit.Location start -> Sgxh
    org.bukkit.util.Vector direction -> Yijc
    java.lang.Double maxDistance -> YjLD
    java.lang.Double distanceCovered -> lGNd
    java.lang.Double step -> QjdK
    java.lang.Boolean stop -> HqKg
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> iwSi
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> HnCx
    89:89:org.bukkit.Location getStart() -> LXnW
    94:95:void setStart(org.bukkit.Location) -> eaTj
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> FyaD
    114:115:void setMaxDistance(java.lang.Double) -> XuBO
    119:119:java.lang.Double getDistanceCovered() -> oWBb
    124:125:void setDistanceCovered(java.lang.Double) -> xNws
    129:129:java.lang.Double getStep() -> MudU
    134:135:void setStep(java.lang.Double) -> LGKV
react.surge.util.ReflectionUtils -> bOqE:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> Whld
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> Whld
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> Whld
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> Whld
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> Whld
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> Whld
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> Whld
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> Whld
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> Whld
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> Whld
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> Whld
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> Whld
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> Whld
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> Whld
react.surge.util.ReflectionUtils$DataType -> bOqE$Whld:
    react.surge.util.ReflectionUtils$DataType BYTE -> Jvph
    react.surge.util.ReflectionUtils$DataType SHORT -> XLuB
    react.surge.util.ReflectionUtils$DataType INTEGER -> Spiw
    react.surge.util.ReflectionUtils$DataType LONG -> BDeT
    react.surge.util.ReflectionUtils$DataType CHARACTER -> UeoF
    react.surge.util.ReflectionUtils$DataType FLOAT -> HEvj
    react.surge.util.ReflectionUtils$DataType DOUBLE -> xkri
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> Qarw
    java.util.Map CLASS_MAP -> LSDs
    java.lang.Class primitive -> nDcR
    java.lang.Class reference -> VrCx
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> XoYT
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> Sndc
    704:704:java.lang.Class getReference() -> AGlI
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> LNyy
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> ssNb
    741:742:java.lang.Class getReference(java.lang.Class) -> XuBO
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> Whld
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> LNyy
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> LNyy
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> ssNb
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> Whld
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> bOqE$LNyy:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> yxGn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> Guxg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> LSDB
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> bIpT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> QYah
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> Hxyq
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> kemL
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> DmOQ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> CHIx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> UenB
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> Kyrr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> lhpS
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> RTTh
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> xuCn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> HNfp
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> SWWd
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> utKM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> HqJv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> SVwR
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> qMkX
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> CjLc
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> CNIO:
    void refresh() -> refresh
react.surge.util.SQLOperation -> XRuS:
    react.surge.util.SQLOperation LOAD -> BxMT
    react.surge.util.SQLOperation SAVE -> kepG
    react.surge.util.SQLOperation[] ENUM$VALUES -> ygHv
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> GQdm:
    react.surge.util.ServerState START -> OJlr
    react.surge.util.ServerState ENABLE -> JwSl
    react.surge.util.ServerState DISABLE -> yVFy
    react.surge.util.ServerState STOP -> cDfL
    react.surge.util.ServerState RUNNING -> FHcm
    react.surge.util.ServerState[] ENUM$VALUES -> emPH
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> IGKD:
    org.bukkit.Location location -> HUtw
    org.bukkit.util.Vector offset -> rYbu
    org.bukkit.util.Vector size -> rPqX
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> Oqvn
    90:94:org.bukkit.Location randomLocation() -> KLyu
    104:104:org.bukkit.Location randomSurface() -> cKOW
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> vcfP
    129:129:org.bukkit.util.Vector getSize() -> ioBl
react.surge.util.SnowLevel -> doiv:
    byte level -> SNib
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> iDNe
    51:52:void setLevel(byte) -> HnCx
react.surge.util.SuperCaller -> clgT:
    void run() -> run
react.surge.util.T -> DQLx:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> LNyy
    32:35:void stop() -> stop
react.surge.util.TXT -> bGaS:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> dLof
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> Whld
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> Whld
    99:99:java.lang.String line(react.surge.util.C,int) -> Whld
    113:113:java.lang.String underline(react.surge.util.C,int) -> LNyy
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> Whld
react.surge.util.Tag -> ECNm:
    java.lang.String value() -> value
react.surge.util.Timer -> SLWY:
    long tns -> JoDP
    long cns -> wysV
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> PSxA
react.surge.util.VectorMath -> GbgK:
    int[] $SWITCH_TABLE$surge$util$Axis -> eteu
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> RnJa
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> Whld
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> Whld
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> LNyy
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> ssNb
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> LNyy
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> LNyy
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> ssNb
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> XuBO
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> xNws
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> LGKV
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> dLof
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> CgDt
    111:111:double round(double,int) -> xNws
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> Whld
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> Whld
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> Whld
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> XuBO
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> xNws
    268:268:org.bukkit.util.Vector toVector(float,float) -> Whld
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> Whld
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> Whld
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> ugrC
    337:340:double getSpeed(org.bukkit.util.Vector) -> pGaV
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> Whld
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> HnCx
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> Whld
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> LNyy
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> ssNb
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> XuBO
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> Veil
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> FEwL
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> esVk
react.surge.util.VectorMath$1 -> GbgK$1:
    org.bukkit.util.Vector val$vector -> smfy
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> qdVr
    1:1:java.lang.Object onAdapt(java.lang.Object) -> dLof
react.surge.util.W -> xOnk:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> ugrC
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> Whld
    75:86:org.bukkit.entity.Entity getEntity(int) -> upda
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> Whld
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> Whld
    143:143:int getChunkX(org.bukkit.block.Block) -> pGaV
    155:155:int getChunkY(org.bukkit.block.Block) -> HnCx
    168:169:void dropXp(org.bukkit.Location,int) -> LNyy
    180:180:int getChunkZ(org.bukkit.block.Block) -> Veil
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> LNyy
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> Whld
    232:239:react.glang.GList news(org.bukkit.Location) -> lLWD
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> Whld
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> YwcS
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> IWSS
    300:300:org.bukkit.World toSync(org.bukkit.World) -> ylMp
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> qdVr
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> xNvw
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> WNxp
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> mhlU
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> Whld
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> Whld
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> Whld
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> Whld
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> Whld
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> Whld
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> Whld
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> Whld
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> TFPk
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> eaTj
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> YwcS
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> ssNb
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> Whld
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> Whld
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> Whld
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> Whld
react.surge.util.W$1 -> xOnk$1:
    java.lang.Double val$doff -> IACA
    org.bukkit.entity.Entity val$e -> gsUu
    org.bukkit.entity.Entity[] val$result -> BLlk
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> HnCx
react.surge.util.Worlds -> RtFe:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> SmwD
    33:33:boolean hasWorld(java.lang.String) -> tBll
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> EuqH:
react.text.ColoredString -> VwbP:
    react.surge.util.C c -> Qjfg
    java.lang.String s -> JDPR
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> lMWu
    42:43:void setC(react.surge.util.C) -> LNyy
    47:47:java.lang.String getS() -> gqMb
    52:53:void setS(java.lang.String) -> EBXV
react.text.RTEX -> jiKE:
    react.glang.GList extras -> RmjG
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> jiTX
    44:58:react.json.JSONObject toJSON() -> UIVu
react.text.RTX -> AYEa:
    react.json.JSONArray base -> ItRD
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> LGKV
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> LNyy
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> Whld
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> Whld
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> LNyy
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> ssNb
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> Whld
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> LNyy
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> ssNb
    265:265:react.json.JSONArray toJSON() -> axMT
    276:277:void tellRawTo(org.bukkit.entity.Player) -> NVDm
react.text.RawText -> SKtf:
    java.lang.String COLOR_BLACK -> sCSX
    java.lang.String COLOR_DARK_BLUE -> rsTh
    java.lang.String COLOR_DARK_GREEN -> QHaq
    java.lang.String COLOR_DARK_AQUA -> RSuV
    java.lang.String COLOR_DARK_RED -> cfhM
    java.lang.String COLOR_DARK_PURPLE -> KObH
    java.lang.String COLOR_GOLD -> ItOo
    java.lang.String COLOR_GRAY -> GTVu
    java.lang.String COLOR_DARK_GRAY -> VXQt
    java.lang.String COLOR_BLUE -> Vqco
    java.lang.String COLOR_GREEN -> CXmG
    java.lang.String COLOR_AQUA -> bcfC
    java.lang.String COLOR_RED -> GeXk
    java.lang.String COLOR_LIGHT_PURPLE -> BEHp
    java.lang.String COLOR_YELLOW -> sduQ
    java.lang.String COLOR_WHITE -> wiRL
    java.lang.String COLOR_NONE -> XoYw
    java.lang.String HEAD_TEXT -> RTWM
    java.lang.String HEAD_COLOR -> LcgK
    java.lang.String HEAD_BOLD -> UMBQ
    java.lang.String HEAD_ITALIC -> waER
    java.lang.String HEAD_UNDERLINED -> XDiE
    java.lang.String HEAD_STRIKETHROUGH -> uQmE
    java.lang.String HEAD_OBFUSCATED -> nwlT
    java.lang.String HEAD_CLICK_EVENT -> fFAm
    java.lang.String HEAD_HOVER_EVENT -> pJmf
    java.lang.String HEAD_ACTION -> xdGk
    java.lang.String HEAD_VALUE -> IcRG
    java.lang.String HEAD_EXTRA -> rQTo
    java.lang.String HEAD_ACTION_SHOW_TEXT -> Xwmg
    java.lang.String HEAD_ACTION_COMMAND -> HyaG
    java.util.ArrayList components -> XxOK
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> WFjq
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> xNws
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> Whld
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> Whld
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> Whld
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> Whld
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> Whld
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> Whld
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> Whld
    307:313:java.lang.String compile() -> jyti
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> Whld

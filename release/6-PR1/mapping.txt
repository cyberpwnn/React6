react.BStats -> org.cyberpwn.react.aehq:
    int B_STATS_VERSION -> B_STATS_VERSION
    java.lang.String URL -> URL
    boolean logFailedRequests -> aehq
    java.lang.String serverUUID -> CUak
    org.bukkit.plugin.java.JavaPlugin plugin -> HnDD
    java.util.List charts -> bNyW
    55:125:void <init>(org.bukkit.plugin.java.JavaPlugin) -> <init>
    135:140:void addCustomChart(react.BStats$CustomChart) -> aehq
    147:177:void startSubmitting() -> aehq
    187:207:org.json.simple.JSONObject getPluginData() -> CUak
    225:257:org.json.simple.JSONObject getServerData() -> HnDD
    266:315:void submitData() -> bNyW
    327:357:void sendData(org.json.simple.JSONObject) -> aehq
    370:378:byte[] compress(java.lang.String) -> aehq
    37:37:org.bukkit.plugin.java.JavaPlugin access$000(react.BStats) -> aehq
    37:37:void access$100(react.BStats) -> CUak
    37:37:void access$300(org.json.simple.JSONObject) -> CUak
    37:37:boolean access$400() -> xGHx
react.BStats$1 -> org.cyberpwn.react.aehq$1:
    java.util.Timer val$timer -> xGHx
    react.BStats this$0 -> uOBF
    149:149:void <init>(react.BStats,java.util.Timer) -> <init>
    153:170:void run() -> run
react.BStats$1$1 -> org.cyberpwn.react.aehq$1$1:
    react.BStats$1 this$1 -> KvlK
    163:163:void <init>(react.BStats$1) -> <init>
    167:168:void run() -> run
react.BStats$2 -> org.cyberpwn.react.aehq$2:
    org.json.simple.JSONObject val$data -> TOCT
    react.BStats this$0 -> uOBF
    296:296:void <init>(react.BStats,org.json.simple.JSONObject) -> <init>
    303:313:void run() -> run
react.BStats$AdvancedBarChart -> org.cyberpwn.react.aehq$aehq:
    java.util.concurrent.Callable callable -> HvTU
    745:747:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    753:782:org.json.simple.JSONObject getChartData() -> uOBF
react.BStats$AdvancedPie -> org.cyberpwn.react.aehq$CUak:
    java.util.concurrent.Callable callable -> HvTU
    491:493:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    499:523:org.json.simple.JSONObject getChartData() -> uOBF
react.BStats$CustomChart -> org.cyberpwn.react.aehq$HnDD:
    java.lang.String chartId -> XIlb
    397:403:void <init>(java.lang.String) -> <init>
    408:428:org.json.simple.JSONObject getRequestJsonObject() -> KvlK
    org.json.simple.JSONObject getChartData() -> uOBF
    384:384:org.json.simple.JSONObject access$200(react.BStats$CustomChart) -> CUak
react.BStats$DrilldownPie -> org.cyberpwn.react.aehq$bNyW:
    java.util.concurrent.Callable callable -> HvTU
    545:547:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    553:583:org.json.simple.JSONObject getChartData() -> uOBF
react.BStats$MultiLineChart -> org.cyberpwn.react.aehq$xGHx:
    java.util.concurrent.Callable callable -> HvTU
    644:646:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    652:676:org.json.simple.JSONObject getChartData() -> uOBF
react.BStats$SimpleBarChart -> org.cyberpwn.react.aehq$uOBF:
    java.util.concurrent.Callable callable -> HvTU
    699:701:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    707:722:org.json.simple.JSONObject getChartData() -> uOBF
react.BStats$SimplePie -> org.cyberpwn.react.aehq$KvlK:
    java.util.concurrent.Callable callable -> HvTU
    453:455:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    461:469:org.json.simple.JSONObject getChartData() -> uOBF
react.BStats$SingleLineChart -> org.cyberpwn.react.aehq$TOCT:
    java.util.concurrent.Callable callable -> HvTU
    605:607:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    613:621:org.json.simple.JSONObject getChartData() -> uOBF
react.Config -> org.cyberpwn.react.CUak:
    react.glang.GMap worldConfigs -> IODN
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> Txum
    java.lang.String A_REDSTONE_DYNAMIC_CLOCK -> qcud
    java.lang.String A_COMMANDOVERRIDE_TPS -> VLWr
    java.lang.String A_SAMPLE_VIEWPORT -> YMQO
    java.lang.String A_RAI -> JAEj
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> ssNC
    java.lang.String A_POOL_MAXTHREADS -> owbJ
    java.lang.String A_POOL_SYNC_NANOS -> iCLi
    java.lang.String A_CULLING_ENABLED -> onqO
    java.lang.String A_FASTLEAF_ENABLED -> Usfk
    java.lang.String A_FASTLEAF_ONDECAY -> DaVD
    java.lang.String A_FASTLEAF_INSTANT -> xGGs
    java.lang.String A_FASTLEAF_DECAYPERIOD -> wUFa
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> jWQb
    java.lang.String A_ENTITYSTACK_ENABLED -> Vehq
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> EKFp
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> wUEt
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> PKGE
    java.lang.String A_GLASS_SHOW_BLOCKS -> CDaB
    java.lang.String A_GLASS_SHOW_PARTICLES -> inAK
    java.lang.String A_ALLOW_CULL -> awND
    java.lang.String A_ALLOW_PURGE -> qmKF
    java.lang.String A_ALLOW_STACKING -> TWTu
    java.lang.String A_CULL_RULES -> mWlX
    java.lang.String A_RAI_TPS_HIGH_TICK -> YwfW
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> KelX
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> Pljn
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> roll
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> bGLN
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> LXNo
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> iCPU
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> tmcC
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> qSWY
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> qAti
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> vQdn
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> JIXO
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> eqwe
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> uyVS
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> DPXC
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> bXNR
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> vbey
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> JYyE
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> uWRf
    java.lang.String A_RAI_FLUID_TIME_CEIL -> VwMV
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> Ushu
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> HTRL
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> QUyv
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> HvTo
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> aDHK
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> ieRS
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> lejP
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> hQNB
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> WXLq
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> ogCe
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> xiLr
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> VvmG
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> CgFT
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> uVqT
    java.lang.String A_USE_WORLD_CONFIGS -> Nfdb
    java.lang.String A_ENTITY_STACKER_SHOW_PARTICLES -> BlSs
    java.lang.String A_ENTITY_STACKER_SHOW_NAMETAG -> EKIY
    java.lang.String A_LANGUAGE -> qlgy
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> jgtA
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> bWlH
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> Oigg
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> TqHC
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> eaYL
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> Ixyp
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> EmNl
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> DGhM
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> tSqq
    java.lang.String A_RAI_ENTITY_PROPIGATE -> kbip
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> OjJw
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> iSrd
    java.lang.String A_ENTITY_STACKER_NAME_TAG_FORMAT -> LrCg
    java.lang.String A_FAST_LEAF_MAX_MS -> LaAv
    java.lang.String A_NMS_CHUNK_UPDATE_INTERVAL -> vbht
    java.lang.String A_THROTTLE_EXPLOSIONS -> mFlV
    java.lang.String A_THROTTLED_RATIO -> PmOB
    java.lang.String A_FAST_GROWTH -> uqGl
    java.lang.String A_FAST_EXPLOSIONS -> YDcv
    java.lang.String A_DROPS_INSTADROP -> DXjR
    java.lang.String A_SKIP_ORBS -> OPXr
    java.lang.String A_FAST_ORB_PICKUP -> oEBx
    java.lang.String A_DROPS_TELEPORT -> hjaS
    java.lang.String A_DESPAWN_USELESS_ARROWS -> fKHl
    java.lang.String A_FACTIONS -> jgvP
    java.lang.String A_PURGE_INTERVAL -> avnC
    java.lang.String A_PURGE -> TEsp
    java.lang.String A_SOUNDS -> uVsn
    java.lang.String A_ALLOW_TEMPACCESS -> tvTl
    java.lang.String A_FAST_LEAF_FAST_UPDATE -> WXNq
    double MAX_EXPLOSION_MS -> ArDf
    boolean REDSTONE_DYNAMIC_CLOCK -> oxGX
    boolean COMMANDOVERRIDES_TPS -> biQH
    int SAMPLE_VIEWPORT -> NVFS
    boolean RAI -> Whoy
    int ENTITY_STACK_MAX_COUNT -> XBAR
    int POOL_MAXTHREADS -> teRe
    long POOL_SYNC_NANOS -> wKwg
    boolean CULLING_ENABLED -> WrBa
    boolean FASTLEAF_ENABLED -> avmr
    boolean FASTLEAF_ONDECAY -> vsiU
    boolean FASTLEAF_INSTANT -> JAIO
    int FASTLEAF_DECAYPERIOD -> HLGC
    boolean COMMANDOVERRIDES_MEMORY -> Cwjx
    boolean ENTITYSTACK_ENABLED -> LXSN
    int ENTITYSTACK_MINIMUM_GROUP -> PJkr
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> yRbf
    int ENTITYSTACK_MAXIMUM_HEALTH -> nRcY
    boolean GLASS_SHOW_BLOCKS -> ePXq
    boolean GLASS_SHOW_PARTICLES -> gyCm
    react.glang.GList ALLOW_CULL -> VUNv
    react.glang.GList ALLOW_PURGE -> jpjE
    react.glang.GList ALLOW_STACKING -> KDNf
    react.glang.GList CULL_RULES -> hIAb
    double RAI_TPS_HIGH_TICK -> rpPy
    long RAI_REDSTONE_TIME_FLOOR -> PKNJ
    long RAI_REDSTONE_TIME_CEIL -> jqJh
    long RAI_REDSTONE_TIME_MUDDING -> sPor
    double RAI_REDSTONE_TIME_FUNCTION -> WaCx
    double RAI_REDSTONE_TIME_OVERBLEED -> tKbn
    int RAI_REDSTONE_TIME_RADIUS -> CMVt
    int RAI_REDSTONE_TIME_PROPIGATION -> SCUc
    long RAI_HOPPER_TIME_FLOOR -> pPYF
    long RAI_HOPPER_TIME_CEIL -> TFYD
    long RAI_HOPPER_TIME_MUDDING -> YEGN
    double RAI_HOPPER_TIME_FUNCTION -> CxLr
    double RAI_HOPPER_TIME_OVERBLEED -> LXTG
    int RAI_HOPPER_TIME_RADIUS -> CUfv
    int RAI_HOPPER_TIME_PROPIGATION -> jNgO
    int RAI_ENTITY_CHUNK_MULTIPLIER -> FxeR
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> XJSJ
    int RAI_ENTITY_CHUNK_RADIUS -> TgyL
    long RAI_FLUID_TIME_FLOOR -> JQjf
    long RAI_FLUID_TIME_CEIL -> paXw
    long RAI_FLUID_TIME_MUDDING -> oEDd
    double RAI_FLUID_TIME_FUNCTION -> jNfY
    double RAI_FLUID_TIME_OVERBLEED -> AGRc
    int RAI_FLUID_TIME_RADIUS -> dVFX
    int RAI_FLUID_TIME_PROPIGATION -> vtLk
    double SMEAR_TICK_ENTITIES_MAX_TICK -> Smfw
    double SMEAR_TICK_TILES_MAX_TICK -> QyCc
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> JRLV
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> afPH
    double SMEAR_TICK_ENTITIES_AMOUNT -> GPqx
    double SMEAR_TICK_TILES_AMOUNT -> maAS
    boolean SMEAR_TICK_ENTITIES_ENABLE -> HeXU
    boolean SMEAR_TICK_TILES_ENABLE -> QyCu
    boolean HOPPER_OVERTICK_ENABLE -> BcgG
    boolean USE_WORLD_CONFIGS -> iLCn
    boolean ENTITY_STACKER_SHOW_PARTICLES -> lTkp
    boolean ENTITY_STACKER_SHOW_NAME_TAG -> rorj
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> LGSY
    long RAI_CHUNK_TIME_CEIL -> srvL
    long RAI_CHUNK_TIME_MUDDING -> oxKs
    double RAI_CHUNK_TIME_FUNCTION -> yuIJ
    double RAI_CHUNK_TIME_OVERBLEED -> AFsE
    int RAI_CHUNK_TIME_RADIUS -> CflS
    int RAI_CHUNK_TIME_PROPIGATION -> AWtR
    boolean RAI_CHUNK_TIME_PROPIGATE -> wUOm
    boolean RAI_FLUID_TIME_PROPIGATE -> mhsw
    boolean RAI_ENTITY_PROPIGATE -> dDfh
    boolean RAI_HOPPER_TIME_PROPIGATE -> iKfD
    boolean RAI_REDSTONE_TIME_PROPIGATE -> OGlH
    java.lang.String ENTITY_STACKER_NAME_TAG_FORMAT -> upjv
    double FAST_LEAF_MAX_MS -> sbUG
    int NMS_CHUNK_UPDATE_INTERVAL -> pilT
    boolean THROTTLE_EXPLOSIONS -> LhvL
    double THROTTLED_RATIO -> BJUv
    boolean FAST_GROWTH -> dDhA
    boolean FAST_EXPLOSIONS -> KURc
    boolean DROPS_INSTADROP -> sQSa
    boolean SKIP_ORBS -> tTVe
    boolean FAST_ORB_PICKUP -> JlBX
    boolean DROPS_TELEPORT -> GsYf
    boolean DESPAWN_USELESS_ARROWS -> cAdX
    boolean FACTIONS -> lfRG
    int PURGE_INTERVAL -> hYeB
    boolean PURGE -> CMYO
    boolean SOUNDS -> ydEt
    boolean ALLOW_TEMPACCESS -> FWCT
    boolean FAST_LEAF_NMS -> VoBt
    boolean hrld -> pYJx
    boolean rns -> aDMu
    boolean rrl -> ofiD
    surge.cluster.DataCluster defaultMain -> RPsV
    surge.cluster.DataCluster defaultExp -> MIuE
    37:37:void <init>() -> <init>
    790:792:void setup() -> setup
    796:799:void resetConfigs() -> TOCT
    803:810:void doSave() -> HvTU
    815:832:void doTrack(org.bukkit.plugin.Plugin) -> aehq
    837:859:void onRead(org.bukkit.plugin.Plugin) -> CUak
    863:893:void read(java.io.File,boolean) -> aehq
    897:914:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> aehq
    919:927:void closeWorldConfig(org.bukkit.World) -> CUak
    932:1045:surge.cluster.DataCluster read(surge.cluster.DataCluster,boolean) -> aehq
    1050:1087:surge.cluster.DataCluster defaultConfig(boolean) -> aehq
    1092:1171:react.glang.GList getDefaultEntitiesForStacking() -> XIlb
    1176:1195:react.glang.GList getDefaultEntitiesForCulling() -> IODN
    1200:1237:react.glang.GList getDefaultEntitiesForRemoval() -> Txum
    1242:1283:react.glang.GList getDefaultCullRules() -> qcud
    39:1297:void <clinit>() -> <clinit>
react.Config$1 -> org.cyberpwn.react.CUak$1:
    java.io.File val$fConfig -> LiVE
    java.io.File val$fConfigExperimental -> wTnN
    org.bukkit.plugin.Plugin val$main -> FotW
    819:819:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    823:827:void run() -> run
react.Config$2 -> org.cyberpwn.react.CUak$2:
    react.api.WorldConfig val$wc -> CLya
    org.bukkit.World val$w -> nAaq
    905:905:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    909:910:void run() -> run
react.Gate -> org.cyberpwn.react.HnDD:
    int snd -> QVbQ
    react.glang.GMap defaultSettings -> PeBD
    react.glang.GSet refresh -> LaFH
    react.glang.GSet destroy -> tCTK
    int cd -> KerS
    47:47:void <init>() -> <init>
    57:57:boolean factions() -> VLWr
    62:155:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> aehq
    161:192:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> aehq
    197:197:int getChunkCountForView() -> YMQO
    202:202:int getMaxChunksForView() -> JAEj
    207:207:boolean hasFawe() -> ssNC
    212:233:void tickEntityNextTickListTick(org.bukkit.World) -> HnDD
    237:241:void resetEntityMaxTick(org.bukkit.World) -> bNyW
    245:245:int getEntityTickMax(org.bukkit.World) -> xGHx
    250:250:int getTileTickMax(org.bukkit.World) -> uOBF
    255:273:void tweakEntityTickMax(org.bukkit.World,int) -> aehq
    277:294:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> aehq
    299:303:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> aehq
    307:319:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> aehq
    324:328:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> CUak
    332:350:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> aehq
    354:358:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> KvlK
    363:366:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> aehq
    371:374:java.lang.String msg(react.api.ReactPlayer,react.notification.Notification) -> aehq
    379:382:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> CUak
    387:396:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> HnDD
    401:410:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> bNyW
    415:424:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> xGHx
    429:429:boolean isBadForUnloading() -> owbJ
    434:434:boolean canUnload(org.bukkit.World,int,int) -> aehq
    441:460:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    466:477:void unloadChunk(org.bukkit.World,int,int) -> CUak
    481:497:void removeEntity(org.bukkit.entity.Entity) -> aehq
    501:502:void purgeEntity(org.bukkit.entity.Entity) -> CUak
    506:535:void purgeEntity(org.bukkit.entity.Entity,boolean) -> aehq
    539:560:void cullEntity(org.bukkit.entity.Entity) -> HnDD
    565:609:void updateBlock(org.bukkit.block.Block) -> aehq
    613:617:java.lang.String header(java.lang.String,surge.util.C) -> aehq
    622:622:java.lang.String header(surge.util.C) -> aehq
    628:632:void updateFluid(org.bukkit.block.Block) -> CUak
    636:636:void refresh(org.bukkit.Chunk) -> CUak
    641:658:void refreshChunks() -> iCLi
    662:663:void sendBlockChange(org.bukkit.Location) -> aehq
    49:53:void <clinit>() -> <clinit>
react.Gate$1 -> org.cyberpwn.react.HnDD$1:
    react.api.SelectorPosition val$sel -> cIsd
    react.glang.Callback val$prog -> FouJ
    react.glang.Callback val$cb -> Kvul
    63:63:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    67:153:void run() -> run
react.Gate$1$1 -> org.cyberpwn.react.HnDD$1$1:
    java.lang.Object val$o -> aCoy
    java.lang.reflect.Constructor val$vectorConstruct -> GjjI
    java.lang.reflect.Constructor val$cuboidConstruct -> WOeY
    java.lang.reflect.Method val$faweFixMethod -> VfUR
    java.lang.Integer[] val$total -> lMAw
    java.lang.Integer[] val$sof -> klBU
    java.lang.Integer val$tot -> MRhf
    react.Gate$1 this$0 -> DGnS
    96:96:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],java.lang.Integer) -> <init>
    102:120:void run() -> run
react.Gate$1$2 -> org.cyberpwn.react.HnDD$1$2:
    java.lang.Integer[] val$total -> lMAw
    react.Gate$1 this$0 -> DGnS
    125:125:void <init>(react.Gate$1,java.lang.String,int,java.lang.Integer[]) -> <init>
    131:139:void run() -> run
react.Gate$2 -> org.cyberpwn.react.HnDD$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> PJpe
    307:307:void <clinit>() -> <clinit>
react.Info -> org.cyberpwn.react.bNyW:
    java.lang.String CORE_REACT_DOT -> SCXt
    java.lang.String CORE_NAME -> sbXG
    java.lang.String CORE_CACHE -> HKjS
    java.lang.String WORLD_CONFIGS -> vsox
    java.lang.String CORE_DOTYML -> HByO
    java.lang.String COMMAND_REACT -> xFrI
    java.lang.String COMMAND_RAI -> vcPH
    java.lang.String COMMAND_ACT_DESCRIPTION -> BdJp
    java.lang.String COMMAND_ACT -> HmnC
    java.lang.String COMMAND_ACT_ALIAS_1 -> YxPD
    java.lang.String COMMAND_ACT_ALIAS_2 -> DYQU
    java.lang.String COMMAND_ACT_USAGE -> TNmP
    java.lang.String COMMAND_HELP_DESCRIPTION -> JcSS
    java.lang.String COMMAND_HELP -> Ywnf
    java.lang.String COMMAND_HELP_ALIAS_1 -> hYfb
    java.lang.String COMMAND_HELP_ALIAS_2 -> fTAe
    java.lang.String COMMAND_HELP_USAGE -> gFBt
    java.lang.String COMMAND_PING_DESCRIPTION -> oLwp
    java.lang.String COMMAND_PING -> Diop
    java.lang.String COMMAND_PING_ALIAS_1 -> WFsD
    java.lang.String COMMAND_PING_ALIAS_2 -> nlYU
    java.lang.String COMMAND_PING_USAGE -> WiVf
    java.lang.String COMMAND_STATUS_DESCRIPTION -> KDQg
    java.lang.String COMMAND_STATUS -> sHdG
    java.lang.String COMMAND_STATUS_ALIAS_1 -> AFua
    java.lang.String COMMAND_STATUS_ALIAS_2 -> BuMi
    java.lang.String COMMAND_STATUS_USAGE -> dVKW
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> ogJx
    java.lang.String COMMAND_CPUSCORE -> ykwP
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> WFtB
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> yBEK
    java.lang.String COMMAND_CPUSCORE_USAGE -> vAKm
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> brGi
    java.lang.String COMMAND_RELOAD -> QEbg
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> Xkxy
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> dVKL
    java.lang.String COMMAND_RELOAD_USAGE -> SKhk
    java.lang.String COMMAND_FEATURE_DESCRIPTION -> SByp
    java.lang.String COMMAND_FEATURE -> qKRI
    java.lang.String COMMAND_FEATURE_ALIAS_1 -> GIIn
    java.lang.String COMMAND_FEATURE_ALIAS_2 -> FVhA
    java.lang.String COMMAND_FEATURE_USAGE -> PmVe
    java.lang.String COMMAND_CTP_DESCRIPTION -> miXt
    java.lang.String COMMAND_CTP -> mXXI
    java.lang.String COMMAND_CTP_ALIAS_1 -> Fxji
    java.lang.String COMMAND_CTP_ALIAS_2 -> xiWo
    java.lang.String COMMAND_CTP_USAGE -> PCCb
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> dVMq
    java.lang.String COMMAND_MONITOR -> miYG
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> miXd
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> WqkC
    java.lang.String COMMAND_MONITOR_USAGE -> kkcQ
    java.lang.String COMMAND_ENV_DESCRIPTION -> CEOK
    java.lang.String COMMAND_ENV -> MSKJ
    java.lang.String COMMAND_ENV_ALIAS_1 -> tnMJ
    java.lang.String COMMAND_ENV_ALIAS_2 -> klCX
    java.lang.String COMMAND_ENV_USAGE -> nJWq
    java.lang.String COMMAND_FIX_DESCRIPTION -> VUTb
    java.lang.String COMMAND_FIX -> wMCG
    java.lang.String COMMAND_FIX_ALIAS_1 -> ntkK
    java.lang.String COMMAND_FIX_ALIAS_2 -> uOLU
    java.lang.String COMMAND_FIX_USAGE -> FpYe
    java.lang.String COMMAND_VERSION_DESCRIPTION -> CUnb
    java.lang.String COMMAND_VERSION -> aTsQ
    java.lang.String COMMAND_VERSION_ALIAS_1 -> mPEq
    java.lang.String COMMAND_VERSION_ALIAS_2 -> ETDs
    java.lang.String COMMAND_VERSION_USAGE -> KMGf
    java.lang.String COMMAND_MAP_DESCRIPTION -> pirp
    java.lang.String COMMAND_MAP -> HKnO
    java.lang.String COMMAND_MAP_ALIAS_1 -> lvyC
    java.lang.String COMMAND_MAP_ALIAS_2 -> BmAN
    java.lang.String COMMAND_MAP_USAGE -> Jsvx
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> lLfA
    java.lang.String COMMAND_TOPCHUNK -> ktVf
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> GkNy
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> jqSM
    java.lang.String COMMAND_TOPCHUNK_USAGE -> mOgk
    java.lang.String COMMAND_GLASS_DESCRIPTION -> gpYu
    java.lang.String COMMAND_GLASS -> mhyb
    java.lang.String COMMAND_GLASS_ALIAS_1 -> KCvR
    java.lang.String COMMAND_GLASS_ALIAS_2 -> dwqv
    java.lang.String COMMAND_GLASS_USAGE -> CDms
    java.lang.String COMMAND_SUB_DESCRIPTION -> WrND
    java.lang.String COMMAND_SUB -> qlub
    java.lang.String COMMAND_SUB_ALIAS_1 -> MuQb
    java.lang.String COMMAND_SUB_ALIAS_2 -> xyyp
    java.lang.String COMMAND_SUB_USAGE -> ofoM
    java.lang.String COMMAND_USUB_DESCRIPTION -> ryIx
    java.lang.String COMMAND_USUB -> HnPp
    java.lang.String COMMAND_USUB_ALIAS_1 -> EdgN
    java.lang.String COMMAND_USUB_ALIAS_2 -> JlGJ
    java.lang.String COMMAND_USUB_USAGE -> KfXa
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> AqnS
    java.lang.String COMMAND_CBLAME -> bOhB
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> LFwe
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> Vngs
    java.lang.String COMMAND_CBLAME_USAGE -> CNBJ
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> VDTl
    java.lang.String COMMAND_ACTIONLOG -> WOiL
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> aevm
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> SnQG
    java.lang.String COMMAND_ACTIONLOG_USAGE -> xGVG
    java.lang.String COMMAND_TEMPACCESS_DESCRIPTION -> gMtx
    java.lang.String COMMAND_TEMPACCESS -> sPwh
    java.lang.String COMMAND_TEMPACCESS_ALIAS_1 -> JRUF
    java.lang.String COMMAND_TEMPACCESS_ALIAS_2 -> JRTk
    java.lang.String COMMAND_TEMPACCESS_USAGE -> uXBu
    java.lang.String COMMAND_ACCEPT_DESCRIPTION -> KUYq
    java.lang.String COMMAND_ACCEPT -> Qxmi
    java.lang.String COMMAND_ACCEPT_ALIAS_1 -> rxkx
    java.lang.String COMMAND_ACCEPT_ALIAS_2 -> YUpu
    java.lang.String COMMAND_ACCEPT_USAGE -> cSOE
    java.lang.String COMMAND_REVOKE_DESCRIPTION -> KDXi
    java.lang.String COMMAND_REVOKE -> jXCq
    java.lang.String COMMAND_REVOKE_ALIAS_1 -> VMIq
    java.lang.String COMMAND_REVOKE_ALIAS_2 -> ogRh
    java.lang.String COMMAND_REVOKE_USAGE -> WOlK
    java.lang.String COMMAND_REQUESTS_DESCRIPTION -> mqmU
    java.lang.String COMMAND_REQUESTS -> opDN
    java.lang.String COMMAND_REQUESTS_ALIAS_1 -> KoKj
    java.lang.String COMMAND_REQUESTS_ALIAS_2 -> TiEV
    java.lang.String COMMAND_REQUESTS_USAGE -> uXAr
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> pGpo
    java.lang.String COMMAND_CAPABILITIES -> esFd
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> IqUn
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> EeIn
    java.lang.String COMMAND_CAPABILITIES_USAGE -> vARW
    java.lang.String MSG_PERMISSION -> flxK
    java.lang.String MSG_MONITORING_STARTED -> NpER
    java.lang.String MSG_MONITORING_STOPPED -> qlvy
    java.lang.String MSG_ACTIONLOGGING_STARTED -> leww
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> Keyn
    java.lang.String MSG_GLASS_STARTED -> vIbi
    java.lang.String MSG_GLASS_STOPPED -> YodI
    org.bukkit.Color COLOR_HOPPER -> BSQI
    org.bukkit.Color COLOR_BLOCK_UPDATE -> afYn
    org.bukkit.Color COLOR_BLOCK_FROMTO -> ndOC
    org.bukkit.Color COLOR_BLOCK_BURN -> uNob
    org.bukkit.Color COLOR_BLOCK_DECAY -> IhfC
    org.bukkit.Color COLOR_BLOCK_FORM -> EeKI
    java.lang.String NAME_TICK -> CDrp
    java.lang.String NAME_MEMORY -> fTJG
    java.lang.String NAME_CHUNKS -> Aqpy
    java.lang.String NAME_ENTITIES -> Gbal
    java.lang.String NAME_BANDWIDTH -> fuks
    java.lang.String STATE_MONITORING_TAB -> BcsG
    java.lang.String STATE_MONITORING_ENABLED -> maNs
    java.lang.String STATE_MONITORING_HIGH -> vIfN
    java.lang.String STATE_CHANNELS -> DsKj
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> ifCg
    java.lang.String STATE_MAPPING_ENABLED -> Tpwq
    java.lang.String STATE_SOUND_PLAYS -> Thgi
    java.lang.String STATE_MONITORING_POSTED -> GRAh
    java.lang.String STATE_MONITORING_LASTTAB -> Ywvv
    java.lang.String STATE_MONITORING_SWT -> OQGx
    java.lang.String STATE_GLASSES_ENABLED -> eHUi
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> dwuy
    java.lang.String STATE_PLAYER_HOTBAR -> lMIs
    java.lang.String STATE_PLAYER_SHIFT -> RcCL
    java.lang.String STATE_PLAYER_SCROLL -> PTLA
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> YUsk
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> VDXr
    java.lang.String PERM_ACCESS -> DGuR
    java.lang.String PERM_TELEPORT -> xPKh
    java.lang.String PERM_PING -> NpFd
    java.lang.String PERM_PING_OTHERS -> qujb
    java.lang.String PERM_MONITOR -> pbGT
    java.lang.String PERM_MONITOR_TITLE -> hHlh
    java.lang.String PERM_MONITOR_ACTIONLOG -> WqpN
    java.lang.String PERM_MONITOR_MAP -> aLhy
    java.lang.String PERM_MONITOR_ENVIRONMENT -> MdRr
    java.lang.String PERM_MONITOR_GLASSES -> qeIU
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> VnmQ
    java.lang.String PERM_ACT -> ktYT
    java.lang.String PERM_RAI -> loLN
    java.lang.String PERM_RAI_CONTROL -> HTcL
    java.lang.String PERM_RAI_ACCESS -> xOjb
    java.lang.String PERM_RAI_MONITOR -> oDpF
    java.lang.String PERM_RELOAD -> SnTu
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> YpFe
    java.lang.String SAMPLER_REDSTONE_TICK -> Thfl
    java.lang.String SAMPLER_ENTITY_TIME -> pixs
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> YwyC
    java.lang.String SAMPLER_TILE_TIME_LOCK -> gVnR
    java.lang.String SAMPLER_TILE_TIME -> maPp
    java.lang.String SAMPLER_TILE_DROPTICK -> mOoK
    java.lang.String SAMPLER_ENTITY_DROPTICK -> YMdw
    java.lang.String SAMPLER_REDSTONE_SECOND -> GkVA
    java.lang.String SAMPLER_REDSTONE_TIME -> HKuA
    java.lang.String SAMPLER_PHYSICS_TIME -> BdVB
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> pHWD
    java.lang.String SAMPLER_HOPPER_TICK -> kkjm
    java.lang.String SAMPLER_HOPPER_SECOND -> dDtP
    java.lang.String SAMPLER_HOPPER_TIME -> nmEL
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> FhSH
    java.lang.String SAMPLER_FLUID_TICK -> LrUM
    java.lang.String SAMPLER_FLUID_SECOND -> gqBD
    java.lang.String SAMPLER_FLUID_TIME -> oxXW
    java.lang.String SAMPLER_TPS -> ogWH
    java.lang.String SAMPLER_TICK -> nRpx
    java.lang.String SAMPLER_CPU -> CNHU
    java.lang.String SAMPLER_PPS -> gWMv
    java.lang.String SAMPLER_BANDWIDTH -> ObKG
    java.lang.String SAMPLER_BANDWIDTH_UP -> PdmA
    java.lang.String SAMPLER_BANDWIDTH_DOWN -> miaA
    java.lang.String SAMPLER_TIU -> CMfj
    java.lang.String SAMPLER_MEM -> uhfW
    java.lang.String SAMPLER_FREEMEM -> imsq
    java.lang.String SAMPLER_MAXMEM -> mrQR
    java.lang.String SAMPLER_ALLOCMEM -> xPMW
    java.lang.String SAMPLER_MAHS -> bYAB
    java.lang.String SAMPLER_CHK -> vlIt
    java.lang.String SAMPLER_ATASK -> tDAT
    java.lang.String SAMPLER_STASK -> sHly
    java.lang.String SAMPLER_CHK_TIME -> MBRY
    java.lang.String SAMPLER_EXPLOSION_TIME -> Knof
    java.lang.String SAMPLER_GROWTH_TIME -> uXFR
    java.lang.String SAMPLER_CHKS -> brRS
    java.lang.String SAMPLER_ENT -> INyT
    java.lang.String SAMPLER_ENTLIV -> agAi
    java.lang.String SAMPLER_ENTDROP -> Lidn
    java.lang.String SAMPLER_ENTTILE -> AHBv
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> MBTl
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> tfHU
    java.lang.String ACTION_CULL_ENTITIES_NAME -> YpJy
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> NMhR
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> nSTk
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> AHBh
    java.lang.String ACTION_UPDATE_FLUID_NAME -> AXcT
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> twIG
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> jhiv
    java.lang.String ACTION_LOCK_FLUID_STATUS -> rhQi
    java.lang.String ACTION_LOCK_FLUID_NAME -> VnrN
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> nctl
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> PdpW
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> iDEY
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> jNwH
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> inXG
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> bqrn
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> yuUw
    java.lang.String ACTION_LOCK_HOPPER_NAME -> Vwan
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> WPPy
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> Orls
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> DGye
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> eXyc
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> pXwv
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> Fpck
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> SCeH
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> feOJ
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> Ywyw
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> IFiF
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> SKuY
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> UJLS
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> HvjU
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> dpJQ
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> tnWH
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> HeiI
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> hHsd
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> KoUR
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> lnra
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> WYEn
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> ccwd
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> DsQf
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> xOqv
    java.lang.String ACTION_FIX_LIGHTING_NAME -> dNJE
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> BJfr
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> nSWQ
    java.lang.String ACTION_COLLECT_GARBAGE -> fnBw
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> rhTB
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> ESpu
    6:6:void <init>() -> <init>
    8:319:void <clinit>() -> <clinit>
react.Lang -> org.cyberpwn.react.xGHx:
    java.lang.String BUNDLE_NAME -> bqwE
    java.util.ResourceBundle RESOURCE_BUNDLE -> CpOU
    java.util.ResourceBundle PRIMARY_BUNDLE -> aweJ
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> org.cyberpwn.react.uOBF:
    react.React instance -> xPRg
    react.controller.SampleController sampleController -> VMRQ
    react.controller.PlayerController playerController -> MuYu
    react.controller.MonitorController monitorController -> sjuR
    react.controller.CommandController commandController -> woQm
    react.controller.ActionController actionController -> mYDI
    react.controller.FastDecayController fastDecayController -> hYsy
    react.controller.EntityStackController entityStackController -> Vfau
    react.controller.GlassController glassController -> BJhR
    react.controller.EntityCullController entityCullController -> uNxX
    react.controller.SpikeController spikeController -> gEpP
    react.controller.SecurityController securityController -> bYDl
    react.controller.RedstoneController redstoneController -> yRse
    react.controller.HopperController hopperController -> ESpV
    react.controller.PhysicsController physicsController -> prll
    react.controller.TickTimeController tickTimeController -> wgAR
    react.controller.RAIController raiController -> MmJg
    react.controller.FluidController fluidController -> gFPe
    react.controller.ChunkController chunkController -> gqEI
    react.controller.GraphController graphController -> BKIA
    react.controller.EventController eventController -> DPpD
    react.controller.SmearTickController smearTickController -> tLXt
    react.controller.FeatureController featureController -> MSYy
    react.controller.HopperOvertickController hopperPlungeController -> gpgU
    react.controller.LanguageController languageController -> RbjH
    react.controller.ExplosiveController explosiveController -> TGNJ
    react.controller.WorldController worldController -> ryWo
    react.controller.MessageController messageController -> jFlK
    react.controller.MetricsController metricsController -> mXfS
    react.controller.FeatureSetController featureSetController -> kJPO
    react.controller.FastGrowthController fastGrowthController -> ielN
    react.controller.CrashController crashController -> Qxxg
    react.controller.InstantDropController InstantDropController -> jhnQ
    react.controller.ProtocolController protocolController -> ETTV
    react.controller.FixController fixController -> WGen
    49:49:void <init>() -> <init>
    159:173:void enable() -> enable
    179:179:void disable() -> disable
react.React$1 -> org.cyberpwn.react.uOBF$1:
    react.React this$0 -> RAHN
    160:160:void <init>(react.React) -> <init>
    164:165:void run() -> run
react.action.ActionCollectGarbage -> org.cyberpwn.react.KvlK:
    20:23:void <init>() -> <init>
    28:62:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    67:67:java.lang.String getNode() -> getNode
react.action.ActionCollectGarbage$1 -> org.cyberpwn.react.KvlK$1:
    react.action.source.IActionSource val$source -> NNMd
    react.action.ActionCollectGarbage this$0 -> iTib
    31:31:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    36:60:void run() -> run
react.action.ActionCollectGarbage$1$1 -> org.cyberpwn.react.KvlK$1$1:
    long val$mbnex -> JJQh
    long val$mbmem -> jXMe
    react.action.ActionCollectGarbage$1 this$1 -> uXLw
    41:41:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    45:58:void run() -> run
react.action.ActionCullEntities -> org.cyberpwn.react.TOCT:
    long ms -> SCiv
    int lcd -> KoWo
    33:60:void <init>() -> <init>
    65:151:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    155:164:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    169:169:java.lang.String getNode() -> getNode
    26:26:long access$002(react.action.ActionCullEntities,long) -> aehq
    26:26:int access$100(react.action.ActionCullEntities) -> aehq
    26:26:long access$000(react.action.ActionCullEntities) -> CUak
    26:26:int access$102(react.action.ActionCullEntities,int) -> aehq
react.action.ActionCullEntities$1 -> org.cyberpwn.react.TOCT$1:
    react.action.ActionCullEntities this$0 -> WXel
    38:38:void <init>(react.action.ActionCullEntities) -> <init>
    42:45:react.api.ISelector get() -> onqO
    38:38:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> org.cyberpwn.react.TOCT$2:
    react.action.ActionCullEntities this$0 -> WXel
    50:50:void <init>(react.action.ActionCullEntities) -> <init>
    54:57:react.api.ISelector get() -> onqO
    50:50:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> org.cyberpwn.react.TOCT$3:
    react.glang.FinalInteger val$completed -> vlPq
    react.glang.FinalInteger val$total -> Eutg
    react.glang.FinalInteger val$totalCulled -> mOtF
    react.glang.FinalInteger val$totalChunked -> sHsq
    react.action.source.IActionSource val$source -> NNMd
    react.action.ActionCullEntities this$0 -> WXel
    106:106:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    110:130:void run() -> run
react.action.ActionCullEntities$4 -> org.cyberpwn.react.TOCT$4:
    react.action.source.IActionSource val$source -> NNMd
    react.glang.FinalInteger val$totalCulled -> mOtF
    react.glang.FinalInteger val$totalChunked -> sHsq
    react.action.ActionCullEntities this$0 -> WXel
    138:138:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    142:148:void run() -> run
react.action.ActionCullEntities$5 -> org.cyberpwn.react.TOCT$5:
    org.bukkit.Chunk val$chunk -> Qgun
    java.lang.Runnable val$cb -> Djad
    react.action.ActionCullEntities this$0 -> WXel
    156:156:void <init>(react.action.ActionCullEntities,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    160:162:void run() -> run
react.action.ActionFixLighting -> org.cyberpwn.react.HvTU:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    108:108:java.lang.String getNode() -> getNode
react.action.ActionFixLighting$1 -> org.cyberpwn.react.HvTU$1:
    react.action.ActionFixLighting this$0 -> bqvl
    29:29:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> onqO
    29:29:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> org.cyberpwn.react.HvTU$2:
    react.action.source.IActionSource val$source -> NNMd
    int val$ch -> xifI
    react.action.ActionFixLighting this$0 -> bqvl
    78:78:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> aehq
    78:78:void run(java.lang.Object) -> run
react.action.ActionFixLighting$3 -> org.cyberpwn.react.HvTU$3:
    react.action.ActionFixLighting this$0 -> bqvl
    89:89:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> aehq
    89:89:void run(java.lang.Object) -> run
react.action.ActionLockFluid -> org.cyberpwn.react.XIlb:
    int lcd -> KoWo
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    108:108:java.lang.String getNode() -> getNode
react.action.ActionLockFluid$1 -> org.cyberpwn.react.XIlb$1:
    react.action.ActionLockFluid this$0 -> FFTa
    31:31:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> onqO
    31:31:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> org.cyberpwn.react.XIlb$2:
    react.action.ActionLockFluid this$0 -> FFTa
    43:43:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> onqO
    43:43:java.lang.Object get() -> get
react.action.ActionLockHopper -> org.cyberpwn.react.IODN:
    int lcd -> KoWo
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    108:108:java.lang.String getNode() -> getNode
react.action.ActionLockHopper$1 -> org.cyberpwn.react.IODN$1:
    react.action.ActionLockHopper this$0 -> rOCa
    31:31:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> onqO
    31:31:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> org.cyberpwn.react.IODN$2:
    react.action.ActionLockHopper this$0 -> rOCa
    43:43:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> onqO
    43:43:java.lang.Object get() -> get
react.action.ActionLockRedstone -> org.cyberpwn.react.Txum:
    int lcd -> KoWo
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    107:107:java.lang.String getNode() -> getNode
react.action.ActionLockRedstone$1 -> org.cyberpwn.react.Txum$1:
    react.action.ActionLockRedstone this$0 -> axGL
    31:31:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> onqO
    31:31:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> org.cyberpwn.react.Txum$2:
    react.action.ActionLockRedstone this$0 -> axGL
    43:43:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> onqO
    43:43:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> org.cyberpwn.react.qcud:
    long ms -> SCiv
    int lcd -> KoWo
    boolean fail -> xque
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> CUak
    169:169:java.lang.String getNode() -> getNode
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> aehq
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> aehq
    23:23:int access$200(react.action.ActionPurgeChunks) -> CUak
    23:23:long access$100(react.action.ActionPurgeChunks) -> HnDD
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> aehq
react.action.ActionPurgeChunks$1 -> org.cyberpwn.react.qcud$1:
    react.action.ActionPurgeChunks this$0 -> GcJc
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> onqO
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> org.cyberpwn.react.qcud$2:
    int val$dk -> UJPM
    java.lang.Object val$j -> GYwy
    react.glang.FinalInteger val$acompleted -> LGfC
    react.glang.FinalInteger val$completed -> vlPq
    react.glang.FinalInteger val$total -> Eutg
    react.glang.FinalInteger val$totalCulled -> mOtF
    react.glang.FinalInteger val$totalChunked -> sHsq
    react.action.source.IActionSource val$source -> NNMd
    react.api.ISelector[] val$selectors -> rhTl
    react.action.ActionPurgeChunks this$0 -> GcJc
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> org.cyberpwn.react.qcud$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> EnEx
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> org.cyberpwn.react.qcud$3:
    react.action.source.IActionSource val$source -> NNMd
    react.glang.FinalInteger val$acompleted -> LGfC
    react.action.ActionPurgeChunks this$0 -> GcJc
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> org.cyberpwn.react.qcud$4:
    org.bukkit.Chunk val$chunk -> Qgun
    java.lang.Runnable val$cb -> Djad
    react.action.ActionPurgeChunks this$0 -> GcJc
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> org.cyberpwn.react.VLWr:
    long ms -> SCiv
    int lcd -> KoWo
    34:61:void <init>() -> <init>
    66:151:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    155:198:void purge(boolean,org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    203:203:java.lang.String getNode() -> getNode
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> aehq
    27:27:int access$100(react.action.ActionPurgeEntities) -> aehq
    27:27:long access$000(react.action.ActionPurgeEntities) -> CUak
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> aehq
react.action.ActionPurgeEntities$1 -> org.cyberpwn.react.VLWr$1:
    react.action.ActionPurgeEntities this$0 -> bHDp
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> onqO
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> org.cyberpwn.react.VLWr$2:
    react.action.ActionPurgeEntities this$0 -> bHDp
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> onqO
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> org.cyberpwn.react.VLWr$3:
    react.glang.FinalInteger val$completed -> vlPq
    react.glang.FinalInteger val$total -> Eutg
    react.glang.FinalInteger val$totalCulled -> mOtF
    react.glang.FinalInteger val$totalChunked -> sHsq
    react.action.source.IActionSource val$source -> NNMd
    react.action.ActionPurgeEntities this$0 -> bHDp
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> org.cyberpwn.react.VLWr$4:
    react.action.source.IActionSource val$source -> NNMd
    react.glang.FinalInteger val$totalCulled -> mOtF
    react.glang.FinalInteger val$totalChunked -> sHsq
    react.action.ActionPurgeEntities this$0 -> bHDp
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    143:149:void run() -> run
react.action.ActionPurgeEntities$5 -> org.cyberpwn.react.VLWr$5:
    org.bukkit.entity.Entity val$i -> hIXi
    boolean val$force -> Puvt
    react.glang.FinalInteger val$cu -> PdvE
    int val$k -> FqLH
    org.bukkit.Chunk val$chunk -> Qgun
    java.lang.Runnable val$cb -> Djad
    react.action.ActionPurgeEntities this$0 -> bHDp
    177:177:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,boolean,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    181:189:void run() -> run
react.action.ActionUnlockFluid -> org.cyberpwn.react.YMQO:
    int lcd -> KoWo
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    89:89:java.lang.String getNode() -> getNode
react.action.ActionUnlockFluid$1 -> org.cyberpwn.react.YMQO$1:
    react.action.ActionUnlockFluid this$0 -> PLDj
    30:30:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> onqO
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> org.cyberpwn.react.JAEj:
    int lcd -> KoWo
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    89:89:java.lang.String getNode() -> getNode
react.action.ActionUnlockHopper$1 -> org.cyberpwn.react.JAEj$1:
    react.action.ActionUnlockHopper this$0 -> iCjh
    30:30:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> onqO
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> org.cyberpwn.react.ssNC:
    int lcd -> KoWo
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    89:89:java.lang.String getNode() -> getNode
react.action.ActionUnlockRedstone$1 -> org.cyberpwn.react.ssNC$1:
    react.action.ActionUnlockRedstone this$0 -> kcce
    30:30:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> onqO
    30:30:java.lang.Object get() -> get
react.action.source.AccessActionSource -> org.cyberpwn.react.owbJ:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> CUak
    26:33:void sendResponseSuccess(java.lang.String) -> HnDD
    38:45:void sendResponseError(java.lang.String) -> bNyW
    50:57:void sendResponseActing(java.lang.String) -> xGHx
react.action.source.ActionHandle -> org.cyberpwn.react.iCLi:
    react.action.source.ActionHandle AUTOMATIC -> sslK
    react.action.source.ActionHandle MANUAL -> lDcc
    react.action.source.ActionHandle MUTEX -> BKKw
    react.action.source.ActionHandle[] $VALUES -> uqbC
    3:3:react.action.source.ActionHandle[] values() -> values
    3:3:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.action.source.ConsoleActionSource -> org.cyberpwn.react.onqO:
    8:8:void <init>() -> <init>
    13:14:void sendResponse(java.lang.String) -> CUak
    19:20:void sendResponseSuccess(java.lang.String) -> HnDD
    25:26:void sendResponseError(java.lang.String) -> bNyW
    31:32:void sendResponseActing(java.lang.String) -> xGHx
    37:37:java.lang.String toString() -> toString
react.action.source.EmptyActionSource -> org.cyberpwn.react.Usfk:
    5:5:void <init>() -> <init>
    11:11:void sendResponse(java.lang.String) -> CUak
    17:17:void sendResponseSuccess(java.lang.String) -> HnDD
    23:23:void sendResponseError(java.lang.String) -> bNyW
    29:29:void sendResponseActing(java.lang.String) -> xGHx
    34:34:java.lang.String toString() -> toString
react.action.source.IActionSource -> org.cyberpwn.react.DaVD:
    void sendResponse(java.lang.String) -> CUak
    void sendResponseSuccess(java.lang.String) -> HnDD
    void sendResponseError(java.lang.String) -> bNyW
    void sendResponseActing(java.lang.String) -> xGHx
react.action.source.PlayerActionSource -> org.cyberpwn.react.xGGs:
    org.bukkit.entity.Player p -> kuEt
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> CUak
    30:31:void sendResponseSuccess(java.lang.String) -> HnDD
    36:37:void sendResponseError(java.lang.String) -> bNyW
    42:43:void sendResponseActing(java.lang.String) -> xGHx
    48:48:java.lang.String toString() -> toString
react.action.source.RAIActionSource -> org.cyberpwn.react.wUFa:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> CUak
    16:17:void sendResponseSuccess(java.lang.String) -> HnDD
    22:23:void sendResponseError(java.lang.String) -> bNyW
    28:29:void sendResponseActing(java.lang.String) -> xGHx
    34:34:java.lang.String toString() -> toString
react.api.Action -> org.cyberpwn.react.jWQb:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> IWpq
    java.lang.String[] nodes -> yKJO
    react.action.source.ActionHandle handle -> TFnr
    react.api.ActionState state -> WGhR
    react.api.ActionTargetType target -> fnFa
    react.api.ActionType type -> xqxm
    react.action.source.IActionSource currentSource -> tUKk
    double progress -> oyAd
    boolean forceful -> xaWp
    react.glang.GMap defaultSelectors -> wwgQ
    30:31:void <init>(react.api.ActionType) -> <init>
    34:47:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    51:51:boolean isForceful() -> Usfk
    56:57:void setForceful(boolean) -> CUak
    java.lang.String getNode() -> getNode
    64:79:react.api.ISelector[] biselect(react.api.ISelector[]) -> aehq
    85:86:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> aehq
    91:91:java.lang.String getName() -> getName
    97:97:java.lang.String getDescription() -> getDescription
    103:103:react.action.source.ActionHandle getHandleType() -> DaVD
    109:109:react.api.ActionState getState() -> xGGs
    115:115:java.lang.String getStatus() -> getStatus
    121:122:void setStatus(java.lang.String) -> uOBF
    127:127:double getProgress() -> getProgress
    133:134:void setProgress(double) -> setProgress
    139:139:react.api.ActionTargetType getTarget() -> wUFa
    145:145:react.api.ActionType getType() -> jWQb
    151:151:react.glang.GMap getDefaultSelectors() -> Vehq
    157:200:void act(react.action.source.IActionSource,react.api.ISelector[]) -> CUak
    205:206:void completeAction() -> EKFp
    211:211:react.action.source.IActionSource getCurrentSource() -> wUEt
    217:217:java.lang.String[] getNodes() -> PKGE
    223:224:void setNodes(java.lang.String[]) -> aehq
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
react.api.ActionAlreadyRunningException -> org.cyberpwn.react.Vehq:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> org.cyberpwn.react.EKFp:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> org.cyberpwn.react.wUEt:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> org.cyberpwn.react.PKGE:
    react.api.ActionState IDLE -> QpkG
    react.api.ActionState RUNNING -> biiL
    react.api.ActionState[] $VALUES -> qLBX
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> org.cyberpwn.react.CDaB:
    react.api.ActionTargetType POSITIONAL -> cllJ
    react.api.ActionTargetType SYSTEM -> SwPX
    react.api.ActionTargetType[] $VALUES -> OarI
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> org.cyberpwn.react.inAK:
    react.api.ActionType FIX_LIGHTING -> QqJU
    react.api.ActionType UNLOCK_FLUID -> rVst
    react.api.ActionType LOCK_FLUID -> sIWF
    react.api.ActionType UNLOCK_HOPPER -> FgyH
    react.api.ActionType LOCK_HOPPER -> JSCn
    react.api.ActionType UNLOCK_REDSTONE -> BKML
    react.api.ActionType LOCK_REDSTONE -> KgIH
    react.api.ActionType CULL_ENTITIES -> tDIe
    react.api.ActionType COLLECT_GARBAGE -> SwPi
    react.api.ActionType PURGE_ENTITIES -> sAFf
    react.api.ActionType PURGE_CHUNKS -> feUJ
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> TFnr
    react.api.ActionTargetType target -> fnFa
    react.api.ActionType[] $VALUES -> jrAf
    6:6:react.api.ActionType[] values() -> values
    6:6:react.api.ActionType valueOf(java.lang.String) -> valueOf
    26:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> CDaB
    50:50:react.api.ActionTargetType getTarget() -> wUFa
    6:18:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> org.cyberpwn.react.awND:
    react.api.ActivationRangeType ANIMALS -> hAKB
    react.api.ActivationRangeType MONSTERS -> AYMT
    react.api.ActivationRangeType MISC -> xHIN
    react.api.ActivationRangeType[] $VALUES -> Jcfm
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> org.cyberpwn.react.qmKF:
    int value() -> value
react.api.Async -> org.cyberpwn.react.TWTu:
react.api.CPUBenchmark -> org.cyberpwn.react.mWlX:
    org.bukkit.command.CommandSender sender -> sender
    int score -> WYLV
    java.lang.Runnable onFinish -> USEj
    int low -> low
    int high -> high
    22:28:void <init>(org.bukkit.command.CommandSender) -> <init>
    32:34:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    39:134:void run() -> run
    138:138:org.bukkit.command.CommandSender getSender() -> getSender
    143:143:int getScore() -> getScore
    148:148:java.lang.Runnable getOnFinish() -> inAK
    13:13:int access$000(react.api.CPUBenchmark) -> aehq
    13:13:java.lang.Runnable access$100(react.api.CPUBenchmark) -> CUak
    18:19:void <clinit>() -> <clinit>
react.api.CPUBenchmark$1 -> org.cyberpwn.react.mWlX$1:
    react.api.CPUBenchmark this$0 -> hRKv
    40:40:void <init>(react.api.CPUBenchmark) -> <init>
    44:55:void run() -> run
react.api.CPUBenchmark$2 -> org.cyberpwn.react.mWlX$2:
    react.api.CPUBenchmark this$0 -> hRKv
    110:110:void <init>(react.api.CPUBenchmark) -> <init>
    114:132:void run() -> run
react.api.CPUResult -> org.cyberpwn.react.YwfW:
    react.api.CPUResult ULTRA_SLOW -> hHyn
    react.api.CPUResult VERY_SLOW -> JJUd
    react.api.CPUResult SLOW -> rpkG
    react.api.CPUResult AVERAGE -> PCVM
    react.api.CPUResult GOOD -> UuJC
    react.api.CPUResult FAST -> pIAo
    react.api.CPUResult VERY_FAST -> rWXS
    react.api.CPUResult ULTRA_FAST -> QNij
    java.lang.String m -> m
    react.api.CPUResult[] $VALUES -> hsnN
    6:6:react.api.CPUResult[] values() -> values
    6:6:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    20:22:void <init>(java.lang.String,int,java.lang.String) -> <init>
    27:27:java.lang.String toString() -> toString
    32:69:java.lang.String c(int) -> c
    6:15:void <clinit>() -> <clinit>
react.api.CacheBase -> org.cyberpwn.react.KelX:
    react.glang.GMap cache -> TrGD
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> aehq
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> CUak
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> awND
    54:54:boolean has(java.lang.Object) -> HnDD
react.api.Capability -> org.cyberpwn.react.Pljn:
    react.api.Capability DUAL_WEILD -> pQQy
    react.api.Capability SCOREBOARD -> RRNG
    react.api.Capability SCOREBOARD_ADVANCED -> Qplf
    react.api.Capability HOPPER -> sbjp
    react.api.Capability ENTITY_ATTRIBUTES -> xOwW
    react.api.Capability ENTITY_AI -> jWor
    react.api.Capability ACTION_BAR -> Euxk
    react.api.Capability ENTITY_NAMES -> NpSX
    react.api.Capability TITLE_BAR -> NNPS
    react.api.Capability CHUNK_RELIGHTING -> pbTA
    react.api.Capability MONITOR_SUBMISSIVENESS -> lEEk
    react.api.Capability ACCELERATED_PING -> DICk
    react.api.Capability STREAM_PROFILING -> HDOA
    react.api.Capability ENTITY_THROTTLING -> TyuH
    react.api.Capability TILE_THROTTLING -> uiRB
    react.api.Capability PASSENGERS -> pPop
    react.api.Capability FAST_MAPPING -> Ucet
    react.glang.GList capabilities -> pIAJ
    surge.util.Protocol version -> qLDU
    react.api.Flavor flavor -> qmfS
    java.lang.String plugin -> tULt
    java.lang.String name -> name
    60:65:void <init>(java.lang.String,surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    69:70:void <init>(java.lang.String,surge.util.Protocol,react.api.Flavor) -> <init>
    74:75:void <init>(java.lang.String,surge.util.Protocol,java.lang.String) -> <init>
    79:80:void <init>(java.lang.String,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,react.api.Flavor) -> <init>
    89:90:void <init>(java.lang.String,surge.util.Protocol) -> <init>
    94:99:boolean isPluginCapable() -> qmKF
    104:104:boolean isFlavorCapable() -> TWTu
    109:109:boolean isVersionCapable() -> mWlX
    114:114:boolean isCapable() -> YwfW
    119:119:surge.util.Protocol getVersion() -> KelX
    124:124:react.api.Flavor getFlavor() -> Pljn
    129:129:java.lang.String getPlugin() -> roll
    134:134:java.lang.String getName() -> getName
    139:153:void sendNotCapable(org.bukkit.command.CommandSender) -> aehq
    157:171:void sendNotCapable(react.action.source.IActionSource) -> aehq
    15:52:void <clinit>() -> <clinit>
react.api.CapabilityBasis -> org.cyberpwn.react.roll:
    react.api.CapabilityBasis VERSION -> nJmd
    react.api.CapabilityBasis FLAVOR -> NhEo
    react.api.CapabilityBasis PLUGIN -> JciQ
    react.api.CapabilityBasis[] $VALUES -> IWuH
    3:3:react.api.CapabilityBasis[] values() -> values
    3:3:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ChunkIssue -> org.cyberpwn.react.bGLN:
    react.api.ChunkIssue ENTITY -> xilx
    react.api.ChunkIssue HOPPER -> wfiw
    react.api.ChunkIssue TNT -> gpnB
    react.api.ChunkIssue REDSTONE -> kBFK
    react.api.ChunkIssue FLUID -> Thuk
    react.api.ChunkIssue PHYSICS -> oNRO
    react.api.ChunkIssue[] $VALUES -> rFXh
    3:3:react.api.ChunkIssue[] values() -> values
    3:3:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    14:32:double getMS() -> bGLN
    3:10:void <clinit>() -> <clinit>
react.api.ChunkIssue$1 -> org.cyberpwn.react.bGLN$1:
    int[] $SwitchMap$react$api$ChunkIssue -> hALS
    14:14:void <clinit>() -> <clinit>
react.api.Clip -> org.cyberpwn.react.LXNo:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> org.cyberpwn.react.iCPU:
    org.bukkit.command.CommandSender sender -> sender
    13:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> CUak
    31:32:void sendResponseSuccess(java.lang.String) -> HnDD
    37:38:void sendResponseError(java.lang.String) -> bNyW
    43:44:void sendResponseActing(java.lang.String) -> xGHx
react.api.CullList -> org.cyberpwn.react.tmcC:
    react.glang.GSet toCull -> CEal
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> bNyW
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> LXNo
react.api.DTest -> org.cyberpwn.react.qSWY:
    6:6:void <init>() -> <init>
    11:62:int test() -> iCPU
react.api.EntityFlag -> org.cyberpwn.react.qAti:
    react.api.EntityFlag NAMED -> iUQJ
    react.api.EntityFlag TAMED -> oFAP
    react.api.EntityFlag STACKED -> inba
    react.api.EntityFlag RIDDEN -> AYNa
    react.api.EntityFlag LIVING -> bYNR
    react.api.EntityFlag NON_LIVING -> kBEW
    react.api.EntityFlag PASSIVE -> kSGG
    react.api.EntityFlag HOSTILE -> MeCh
    react.api.EntityFlag MATURE -> wUgt
    react.api.EntityFlag YOUNG -> yKLr
    react.api.EntityFlag UNDERWATER -> patX
    react.api.EntityFlag GROUNDED -> rOIb
    react.api.EntityFlag AIRBORNE -> kRdo
    react.api.EntityFlag PROJECTILES -> Hvsf
    react.api.EntityFlag CAVES -> WXkv
    react.api.EntityFlag NEARBY -> tUPN
    react.api.EntityFlag LIT -> ekFe
    react.api.EntityFlag LEASHED -> AjPy
    java.lang.String m -> m
    react.api.EntityFlag[] $VALUES -> jiTq
    13:13:react.api.EntityFlag[] values() -> values
    13:13:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    37:39:void <init>(java.lang.String,int,java.lang.String) -> <init>
    43:53:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> xGHx
    58:156:boolean is(org.bukkit.entity.Entity) -> uOBF
    162:162:java.lang.String toString() -> toString
    13:32:void <clinit>() -> <clinit>
react.api.EntityGroup -> org.cyberpwn.react.vQdn:
    react.glang.GSet entityTypes -> axLW
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> tmcC
react.api.EntitySample -> org.cyberpwn.react.JIXO:
    react.glang.GMap counts -> wMWF
    react.glang.GMap sets -> wVHN
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> qSWY
    45:45:react.glang.GList getTypes() -> qAti
    50:57:int total() -> vQdn
    62:67:int get(org.bukkit.entity.EntityType) -> aehq
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> CUak
    84:96:void add(org.bukkit.entity.Entity) -> bNyW
react.api.Experimental -> org.cyberpwn.react.eqwe:
react.api.Flavor -> org.cyberpwn.react.uyVS:
    react.api.Flavor ANY -> TFqr
    react.api.Flavor SAFE_MODE -> CxgF
    react.api.Flavor CRAFT_BUKKIT -> tepA
    react.api.Flavor BUKKIT -> nloV
    react.api.Flavor SPIGOT -> CVcw
    react.api.Flavor SOGGY_SPIGOT -> aLwb
    react.api.Flavor PAPER_SPIGOT -> lEGW
    react.api.Flavor TACO_SPIGOT -> EKkG
    react.api.Flavor TORCH_SPIGOT -> DjkJ
    react.api.Flavor FORGE_HACK -> ObYi
    react.api.Flavor SPONGE_HACK -> Nxhj
    react.api.Flavor[] $VALUES -> HngL
    6:6:react.api.Flavor[] values() -> values
    6:6:react.api.Flavor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> JIXO
    74:79:boolean compatableWith(react.api.Flavor) -> aehq
    84:84:java.lang.String fancyName() -> eqwe
    6:18:void <clinit>() -> <clinit>
react.api.IAction -> org.cyberpwn.react.DPXC:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> DaVD
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> CUak
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    react.api.ActionState getState() -> xGGs
    react.api.ActionTargetType getTarget() -> wUFa
    void setNodes(java.lang.String[]) -> aehq
    java.lang.String[] getNodes() -> PKGE
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> uOBF
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> jWQb
    react.glang.GMap getDefaultSelectors() -> Vehq
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> aehq
    react.api.ISelector[] biselect(react.api.ISelector[]) -> aehq
    react.action.source.IActionSource getCurrentSource() -> wUEt
    void completeAction() -> EKFp
react.api.ICache -> org.cyberpwn.react.bXNR:
    react.glang.GSet get(java.lang.Object) -> aehq
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> CUak
    void clear() -> clear
    boolean has(java.lang.Object) -> HnDD
    react.glang.GList k() -> awND
react.api.ICommand -> org.cyberpwn.react.vbey:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> uyVS
    java.lang.String[] getPermissions() -> getPermissions
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> KvlK
    react.api.SideGate getSideGate() -> DPXC
    void registerParameterDescription(java.lang.String,java.lang.String) -> aehq
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.api.IFix -> org.cyberpwn.react.JYyE:
    java.lang.String getId() -> getId
    java.lang.String[] getAliases() -> uyVS
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    java.lang.String getUsage() -> getUsage
    void run(org.bukkit.command.CommandSender,java.lang.String[]) -> CUak
react.api.IRecord -> org.cyberpwn.react.uWRf:
    java.lang.String getRecordType() -> bXNR
    long getRecordTime() -> vbey
    react.json.JSONObject toJSON() -> JYyE
    java.lang.Object getRecordObject() -> uWRf
    void fromJSON(react.json.JSONObject) -> aehq
react.api.IRecordBook -> org.cyberpwn.react.VwMV:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> aehq
    long getOldestRecordTime() -> VwMV
    void addRecord(react.api.IRecord) -> aehq
    long getLatestRecordTime() -> Ushu
    int countRecords(long,long) -> aehq
    react.glang.GMap getRecords(long,long) -> CUak
    int purgeRecordsBefore(long) -> CUak
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> org.cyberpwn.react.Ushu:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> HTRL
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    surge.util.C getColor() -> QUyv
    surge.util.C getAltColor() -> HvTo
    void setColor(surge.util.C,surge.util.C) -> aehq
    int getInterval() -> getInterval
    void setInterval(int) -> setInterval
    void sample() -> aDHK
    java.lang.String get() -> get
    void construct() -> ieRS
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> org.cyberpwn.react.HTRL:
    react.api.SelectionMode getMode() -> lejP
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> bNyW
    react.glang.GSet getList() -> hQNB
    react.glang.GSet getPossibilities() -> WXLq
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> uOBF
    java.lang.String getName() -> getName
react.api.Injection -> org.cyberpwn.react.QUyv:
    react.api.InjectionMethod value() -> ogCe
react.api.InjectionMethod -> org.cyberpwn.react.HvTo:
    react.api.InjectionMethod SWAP -> xioP
    react.api.InjectionMethod SUBSTRATE -> eIGD
    react.api.InjectionMethod RELOAD -> nKQP
    react.api.InjectionMethod[] $VALUES -> CMtY
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> org.cyberpwn.react.aDHK:
    java.lang.String value() -> value
react.api.MSampler -> org.cyberpwn.react.ieRS:
    6:6:void <init>() -> <init>
    10:10:surge.server.SuperSampler ss() -> xiLr
react.api.MonitorHeading -> org.cyberpwn.react.lejP:
    react.api.ISampler head -> GtTy
    react.glang.GList children -> NMtj
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> aehq
    27:27:react.api.ISampler getHead() -> VvmG
    32:33:void setHead(react.api.ISampler) -> CUak
    37:37:react.glang.GList getChildren() -> CgFT
    42:42:java.lang.String getHeadText() -> uVqT
    47:60:java.lang.String getChildText() -> Nfdb
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> aehq
react.api.NoiseGenerator -> org.cyberpwn.react.hQNB:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> org.cyberpwn.react.WXLq:
    react.api.NoiseGenerator[] octaves -> ooty
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> BlSs
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> org.cyberpwn.react.ogCe:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> oxfc
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> EKIY
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> org.cyberpwn.react.xiLr:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> aehq
react.api.Permissable -> org.cyberpwn.react.VvmG:
    react.api.Permissable ACCESS -> Fybb
    react.api.Permissable TELEPORT -> aDkA
    react.api.Permissable MONITOR -> nudC
    react.api.Permissable MONITOR_TITLE -> LHOn
    react.api.Permissable MONITOR_ACTIONLOG -> HfWW
    react.api.Permissable MONITOR_MAP -> EByx
    react.api.Permissable MONITOR_ENVIRONMENT -> VDkR
    react.api.Permissable MONITOR_GLASSES -> AXnw
    react.api.Permissable MONITOR_CHUNK_BLAME -> RlEC
    react.api.Permissable RAI_MONITOR -> aDiy
    react.api.Permissable RAI_CONTROL -> FqRe
    react.api.Permissable RAI_ACCESS -> TFsh
    react.api.Permissable PING -> VfmF
    react.api.Permissable PING_OTHERS -> HUSi
    react.api.Permissable RAI -> ceBm
    react.api.Permissable ACT -> Tqgm
    react.api.Permissable RELOAD -> jGSm
    java.lang.String node -> GRPk
    react.glang.GList accessors -> oyFx
    react.api.Permissable[] $VALUES -> UAfh
    10:10:react.api.Permissable[] values() -> values
    10:10:react.api.Permissable valueOf(java.lang.String) -> valueOf
    34:44:void <init>(java.lang.String,int,java.lang.String) -> <init>
    48:53:void addAccessor(react.api.TemporaryAccessor) -> aehq
    57:68:void removeAccesssor(org.bukkit.entity.Player) -> aehq
    72:80:boolean isAccessor(org.bukkit.entity.Player) -> CUak
    85:101:boolean has(org.bukkit.command.CommandSender) -> CUak
    106:106:java.lang.String getNode() -> getNode
    10:31:void <clinit>() -> <clinit>
react.api.PluginSelfDeleter -> org.cyberpwn.react.CgFT:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> aVLR
    java.lang.Runnable r -> qTWw
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> aehq
react.api.ReactCommand -> org.cyberpwn.react.uVqT:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> XvEX
    java.lang.String usage -> Djja
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> BScS
    react.api.SideGate sideGate -> uaEa
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> KvlK
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> aehq
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> uyVS
    47:47:java.lang.String[] getPermissions() -> getPermissions
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> DPXC
react.api.ReactException -> org.cyberpwn.react.Nfdb:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> org.cyberpwn.react.BlSs:
    react.glang.GMap keystore -> MJqN
    boolean monitoring -> monitoring
    int lastSwt -> HDRt
    boolean highMonitor -> BCCB
    boolean actionlogging -> iCsJ
    boolean glasses -> xbBV
    boolean mapping -> iwXc
    int monitorSelection -> PmpB
    int plays -> IqlM
    boolean monitorPosted -> xXpJ
    int monitorLastSelection -> cues
    int switchNotification -> OYjj
    int hotbarSlot -> htUg
    boolean shift -> MuhT
    int scroll -> hQqI
    double lastHeight -> qKiu
    java.util.List channels -> lxQE
    boolean heightMovement -> gyas
    org.bukkit.entity.Player p -> kuEt
    46:103:void <init>(org.bukkit.entity.Player) -> <init>
    107:107:boolean hasChannel(java.lang.String) -> TOCT
    114:121:void save() -> save
    127:134:void load() -> load
    138:138:boolean isMonitoring() -> qlgy
    143:143:boolean isMapping() -> jgtA
    148:148:org.bukkit.entity.Player getP() -> bWlH
    153:155:void addChannel(java.lang.String) -> addChannel
    159:165:void removeChannel(java.lang.String) -> removeChannel
    169:171:void removeAllChannels() -> Oigg
    175:177:void setMonitoring(boolean) -> HnDD
    181:183:void setMapping(boolean) -> bNyW
    187:187:int getMonitorSelection() -> TqHC
    192:194:void setMonitorSelection(int) -> aehq
    198:198:int getHotbarSlot() -> eaYL
    203:205:void setHotbarSlot(int) -> CUak
    209:209:boolean isShifting() -> Ixyp
    214:216:void setShifting(boolean) -> xGHx
    220:220:boolean isShift() -> EmNl
    225:227:void setShift(boolean) -> uOBF
    231:231:int getScroll() -> DGhM
    236:238:void setScroll(int) -> HnDD
    242:242:int getMonitorLastSelection() -> tSqq
    247:249:void setMonitorLastSelection(int) -> bNyW
    253:254:void setP(org.bukkit.entity.Player) -> HnDD
    258:258:double getLastHeight() -> kbip
    263:265:void setLastHeight(double) -> aehq
    269:269:boolean isHeightMovement() -> OjJw
    274:276:void setHeightMovement(boolean) -> KvlK
    280:280:int getSwitchNotification() -> iSrd
    285:287:void setSwitchNotification(int) -> xGHx
    291:291:boolean getMonitorPosted() -> LrCg
    296:298:void setMonitorPosted(boolean) -> TOCT
    302:302:int getPlays() -> LaAv
    307:309:void setPlays(int) -> uOBF
    313:313:boolean isGlasses() -> vbht
    318:320:void setGlasses(boolean) -> HvTU
    324:324:react.glang.GMap getKeystore() -> mFlV
    329:330:void setKeystore(react.glang.GMap) -> aehq
    334:334:int getLastSwt() -> PmOB
    339:340:void setLastSwt(int) -> KvlK
    344:344:boolean isHighMonitor() -> uqGl
    349:350:void setHighMonitor(boolean) -> XIlb
    354:354:java.util.List getChannels() -> YDcv
    359:360:void setChannels(java.util.List) -> aehq
    364:364:boolean isActionlogging() -> DXjR
    369:371:void setActionlogging(boolean) -> IODN
    26:44:void <clinit>() -> <clinit>
react.api.Record -> org.cyberpwn.react.EKIY:
    java.lang.String recordType -> mrcE
    long recordTime -> jaHu
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> bXNR
    32:32:long getRecordTime() -> vbey
    38:38:java.lang.Object getRecordObject() -> uWRf
    react.json.JSONObject toJSON() -> JYyE
    void fromJSON(react.json.JSONObject) -> aehq
react.api.RecordBook -> org.cyberpwn.react.qlgy:
    java.io.File recordFile -> lwpO
    react.json.JSONObject js -> CWHX
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> aehq
    79:87:react.api.IRecord getRecord(long) -> aehq
    react.api.IRecord createDummyRecord(long,java.lang.String) -> aehq
    95:107:long getOldestRecordTime() -> VwMV
    113:125:long getLatestRecordTime() -> Ushu
    130:130:boolean within(long,long,long) -> aehq
    136:144:int countRecords(long,long) -> aehq
    150:162:react.glang.GMap getRecords(long,long) -> CUak
    168:181:int purgeRecordsBefore(long) -> CUak
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> org.cyberpwn.react.jgtA:
react.api.SampledChunk -> org.cyberpwn.react.bWlH:
    org.bukkit.Chunk c -> Xluv
    react.glang.GMap counts -> wMWF
    12:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> OPXr
    26:38:void hit(react.api.ChunkIssue,int) -> aehq
    42:42:org.bukkit.Chunk getC() -> oEBx
    47:47:react.glang.GMap getCounts() -> hjaS
react.api.SampledType -> org.cyberpwn.react.Oigg:
    react.api.SampledType ENTITY_TIME_LOCK -> UdNT
    react.api.SampledType TILE_TIME_LOCK -> hJAm
    react.api.SampledType ENTITY_TIME -> giBO
    react.api.SampledType TILE_TIME -> bbAm
    react.api.SampledType ENTITY_DROPTICK -> CViR
    react.api.SampledType TILE_DROPTICK -> PKjr
    react.api.SampledType REDSTONE_TICK_USAGE -> UuNO
    react.api.SampledType REDSTONE_TICK -> tvvS
    react.api.SampledType REDSTONE_SECOND -> nCBF
    react.api.SampledType REDSTONE_TIME -> HTuR
    react.api.SampledType PHYSICS_TIME -> KUnL
    react.api.SampledType HOPPER_TICK_USAGE -> PnOg
    react.api.SampledType HOPPER_TICK -> SLdb
    react.api.SampledType HOPPER_SECOND -> XTEA
    react.api.SampledType HOPPER_TIME -> cTDR
    react.api.SampledType FLUID_TICK_USAGE -> yKQK
    react.api.SampledType FLUID_TICK -> mYPJ
    react.api.SampledType FLUID_SECOND -> FXBI
    react.api.SampledType FLUID_TIME -> ymSa
    react.api.SampledType TPS -> oVde
    react.api.SampledType TICK -> tfUP
    react.api.SampledType CPU -> RRSP
    react.api.SampledType TIU -> XCCM
    react.api.SampledType MEM -> kdLB
    react.api.SampledType FREEMEM -> sRTJ
    react.api.SampledType BANDWIDTH -> twYk
    react.api.SampledType PPS -> jGYQ
    react.api.SampledType BANDWIDTH_DOWN -> FWbw
    react.api.SampledType BANDWIDTH_UP -> WQED
    react.api.SampledType MAXMEM -> mGpY
    react.api.SampledType ALLOCMEM -> yvGw
    react.api.SampledType MAHS -> OIME
    react.api.SampledType CHK_TIME -> VwtG
    react.api.SampledType EXPLOSION_TIME -> eYlJ
    react.api.SampledType GROWTH_TIME -> RIeI
    react.api.SampledType CHK -> vdNI
    react.api.SampledType ATASK -> jqks
    react.api.SampledType STASK -> cCCq
    react.api.SampledType CHKS -> mGpH
    react.api.SampledType ENT -> Jtoh
    react.api.SampledType ENTLIV -> pYiu
    react.api.SampledType ENTDROP -> rhbB
    react.api.SampledType ENTTILE -> MeGp
    java.lang.String node -> GRPk
    react.api.SampledType[] $VALUES -> nugT
    6:6:react.api.SampledType[] values() -> values
    6:6:react.api.SampledType valueOf(java.lang.String) -> valueOf
    56:56:react.api.ISampler get() -> fKHl
    62:62:java.lang.String toString() -> toString
    66:76:void <init>(java.lang.String,int,java.lang.String) -> <init>
    80:80:java.lang.String getNode() -> getNode
    6:50:void <clinit>() -> <clinit>
react.api.Sampler -> org.cyberpwn.react.TqHC:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    surge.util.C color -> UAkI
    surge.util.C altColor -> kuPC
    int interval -> TWyl
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:surge.util.C getColor() -> QUyv
    49:49:surge.util.C getAltColor() -> HvTo
    55:55:int getInterval() -> getInterval
    void sample() -> aDHK
    void construct() -> ieRS
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(surge.util.C,surge.util.C) -> aehq
    107:108:void setInterval(int) -> setInterval
react.api.Sector -> org.cyberpwn.react.eaYL:
    int value() -> value
react.api.SelectionException -> org.cyberpwn.react.Ixyp:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> org.cyberpwn.react.EmNl:
    react.api.SelectionMode WHITELIST -> URmF
    react.api.SelectionMode BLACKLIST -> TaKs
    react.api.SelectionMode[] $VALUES -> Wacs
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> org.cyberpwn.react.DGhM:
    java.lang.Class objectType -> OYlX
    react.api.SelectionMode mode -> JmAS
    react.glang.GSet list -> yltc
    react.glang.GSet possibilities -> LYTe
    int popoff -> NhLM
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> lejP
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> bNyW
    43:43:react.glang.GSet getList() -> hQNB
    49:49:react.glang.GSet getPossibilities() -> WXLq
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> uOBF
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> KvlK
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> org.cyberpwn.react.tSqq:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> HnDD
    27:59:int parse(org.bukkit.command.CommandSender,java.lang.String) -> uOBF
    64:112:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> TOCT
    118:118:java.lang.String getName() -> getName
react.api.SelectorParseException -> org.cyberpwn.react.kbip:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> org.cyberpwn.react.OjJw:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> HnDD
    29:30:void add(org.bukkit.Chunk,int) -> aehq
    34:38:void add(org.bukkit.World) -> TOCT
    42:46:void addAll() -> jgvP
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> uOBF
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> TOCT
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> org.cyberpwn.react.iSrd:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> uOBF
    87:87:java.lang.String getName() -> getName
react.api.Side -> org.cyberpwn.react.LrCg:
    react.api.Side PLAYERS -> pays
    react.api.Side CONSOLE -> YMvx
    java.lang.String ss -> WXvB
    react.api.Side[] $VALUES -> kuRb
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> avnC
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> HnDD
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> org.cyberpwn.react.LaAv:
    react.api.SideGate PLAYERS_ONLY -> LPfL
    react.api.SideGate CONSOLES_ONLY -> cdhl
    react.api.SideGate ANYTHING -> CEiy
    react.api.SideGate[] $VALUES -> xadq
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> aehq
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> org.cyberpwn.react.LaAv$1:
    int[] $SwitchMap$react$api$SideGate -> QFdD
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> org.cyberpwn.react.vbht:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> lfrX
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> TEsp
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> org.cyberpwn.react.mFlV:
    double wScale -> qfBT
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> aehq
react.api.SpecializedTickLimiter -> org.cyberpwn.react.PmOB:
    double rMaxTime -> mjVb
    long rStartTime -> yvIq
    double rLastTime -> gheS
    long rMark -> YWLd
    double tMaxTime -> ELPj
    react.gmath.Average atimes -> cvKE
    react.gmath.Average adropped -> jGYq
    int droppedTicks -> GtYp
    boolean entityTick -> nKUm
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> org.cyberpwn.react.uqGl:
    react.glang.GList sources -> Eebh
    react.glang.GList splooge -> FOTR
    react.glang.GSet destroy -> tCTK
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> aehq
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> CUak
    void clipped(org.bukkit.Location) -> CUak
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> HnDD
    boolean isAllowedSource(org.bukkit.Location) -> bNyW
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> aehq
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> CUak
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> HnDD
react.api.SploogeCounter$1 -> org.cyberpwn.react.uqGl$1:
    java.util.Iterator val$it -> feaH
    org.bukkit.Location val$start -> QWci
    int val$maxDistance -> lgRu
    react.api.SploogeCounter this$0 -> eILI
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> org.cyberpwn.react.uqGl$1$1:
    react.api.SploogeCounter$1 this$1 -> QhfF
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> org.cyberpwn.react.YDcv:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> org.cyberpwn.react.DXjR:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> JYyE
    38:49:void fromJSON(react.json.JSONObject) -> aehq
react.api.StackTraceRecordBook -> org.cyberpwn.react.OPXr:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> CUak
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> aehq
react.api.StackedEntity -> org.cyberpwn.react.oEBx:
    org.bukkit.entity.LivingEntity entity -> gptM
    int count -> count
    double rmx -> GIfV
    org.bukkit.entity.Entity damager -> MSgx
    25:36:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    41:46:double getMaxHealth(org.bukkit.entity.LivingEntity) -> aehq
    51:51:int getAbsoluteMaxCount() -> uVsn
    56:56:int getMaxCount(org.bukkit.entity.LivingEntity) -> CUak
    61:63:void update() -> update
    67:72:void destroy() -> destroy
    76:103:void signalSize() -> tvTl
    107:107:java.lang.String color(java.lang.String) -> color
    112:113:void setDamager(org.bukkit.entity.Entity) -> KvlK
    117:177:void updateHealth() -> WXNq
    181:182:void heal(double) -> CUak
    186:187:void setHealth(double) -> setHealth
    191:191:int getEffectiveCount() -> ArDf
    196:196:int getEffectiveCount(double) -> HnDD
    201:201:double getEffectiveMaxHealth(int) -> TOCT
    206:206:double getRealMaxHealth() -> oxGX
    211:211:double getHealth() -> getHealth
    216:222:void setMaxHealth(double) -> setMaxHealth
    227:236:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> aehq
    240:240:double getMaxHealth() -> getMaxHealth
    245:245:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    250:250:int getCount() -> getCount
react.api.TemporaryAccessor -> org.cyberpwn.react.hjaS:
    org.bukkit.entity.Player player -> player
    react.glang.GSet permissions -> aVQt
    12:15:void <init>(org.bukkit.entity.Player) -> <init>
    19:19:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:24:react.glang.GSet getPermissions() -> biQH
    29:30:void addPermission(react.api.Permissable) -> aehq
    34:38:void addAll() -> jgvP
react.api.TitleMonitor -> org.cyberpwn.react.fKHl:
    react.glang.GList headings -> gqUR
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> aehq
    24:24:int getMaxSelection() -> NVFS
    29:37:int left(int) -> HvTU
    42:50:int right(int) -> XIlb
    55:55:react.api.MonitorHeading getHeadFor(int) -> IODN
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> aehq
    83:100:java.lang.String getHotbarFor(int,boolean) -> aehq
react.api.Unused -> org.cyberpwn.react.jgvP:
react.api.WorldConfig -> org.cyberpwn.react.avnC:
    boolean allowRai -> mGrB
    boolean allowActions -> Evdk
    boolean allowRelighting -> kBMA
    boolean allowTileThrottling -> ifYf
    boolean allowEntityThrottling -> IrQA
    boolean allowFastLeafDecay -> lUpU
    java.util.List assumeNoSideEffectsEntities -> RQvR
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> HvTU
    48:62:void save(org.bukkit.World) -> XIlb
    66:80:void load(org.bukkit.World) -> IODN
react.cache.CachedEntity -> org.cyberpwn.react.TEsp:
    java.util.UUID uid -> wDnK
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> world
    double x -> x
    double y -> y
    double z -> z
    double vx -> ETbQ
    double vy -> dhNx
    double vz -> kAnm
    double dx -> QWgC
    double dy -> NgoV
    double dz -> slKB
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> TOCT
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> getWorld
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> Whoy
    120:121:void setVx(double) -> bNyW
    125:125:double getVy() -> XBAR
    130:131:void setVy(double) -> xGHx
    135:135:double getVz() -> teRe
    140:141:void setVz(double) -> uOBF
    145:145:double getDx() -> wKwg
    150:151:void setDx(double) -> KvlK
    155:155:double getDy() -> WrBa
    160:161:void setDy(double) -> TOCT
    165:165:double getDz() -> avmr
    170:171:void setDz(double) -> HvTU
    175:175:java.util.UUID getUid() -> vsiU
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> org.cyberpwn.react.uVsn:
    int age -> gGEK
    boolean ageLock -> KUuT
    boolean breed -> BSkN
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> TOCT
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> JAIO
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> HLGC
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> org.cyberpwn.react.tvTl:
    org.bukkit.DyeColor dye -> jaPV
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> TOCT
    30:30:org.bukkit.DyeColor getDye() -> Cwjx
    35:36:void setDye(org.bukkit.DyeColor) -> aehq
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> org.cyberpwn.react.WXNq:
    react.glang.GList potionEffects -> sbxb
    boolean canPickupItems -> LQHq
    org.bukkit.inventory.ItemStack[] armorContents -> bQHV
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> EfGY
    double maxHealth -> maxHealth
    int maxAir -> mYWR
    int air -> UdTW
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> TOCT
    63:63:react.glang.GList getPotionEffects() -> LXSN
    68:69:void setPotionEffects(react.glang.GList) -> CUak
    73:73:boolean isCanPickupItems() -> PJkr
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> yRbf
    138:139:void setMaxAir(int) -> Txum
    143:143:int getAir() -> nRcY
    148:149:void setAir(int) -> qcud
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> org.cyberpwn.react.ArDf:
    boolean sheared -> kRos
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> TOCT
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> org.cyberpwn.react.oxGX:
    org.bukkit.inventory.ItemStack is -> BBiM
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> TOCT
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> org.cyberpwn.react.biQH:
    7:7:void <init>() -> <init>
react.command.CommandAccept -> org.cyberpwn.react.NVFS:
    21:28:void <init>() -> <init>
    33:90:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandAccess -> org.cyberpwn.react.Whoy:
    react.glang.GMap last -> jPMq
    react.glang.GSet req -> XvLv
    26:34:void <init>() -> <init>
    39:86:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
    23:23:void <clinit>() -> <clinit>
react.command.CommandAct -> org.cyberpwn.react.XBAR:
    42:52:void <init>() -> <init>
    57:177:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
    181:200:void sendPage(org.bukkit.command.CommandSender,int,int) -> aehq
    204:210:react.text.RTX getBeginningRTX() -> ePXq
    215:298:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> aehq
    302:312:void sendHeader(org.bukkit.command.CommandSender,int,int) -> CUak
    316:345:void sendFooter(org.bukkit.command.CommandSender,int,int) -> HnDD
    349:364:react.glang.GList getSortedCommands() -> gyCm
    369:376:int getPageSize(int) -> VLWr
    381:381:boolean isValidPage(int,int) -> aehq
    386:395:react.glang.GList getPage(int,int) -> CUak
    400:401:void f(org.bukkit.command.CommandSender,java.lang.String) -> HvTU
react.command.CommandActionLog -> org.cyberpwn.react.teRe:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandCPUScore -> org.cyberpwn.react.wKwg:
    17:24:void <init>() -> <init>
    29:39:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandCapabilities -> org.cyberpwn.react.WrBa:
    20:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandChunkBlame -> org.cyberpwn.react.avmr:
    24:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandChunkBlame$1 -> org.cyberpwn.react.avmr$1:
    org.bukkit.command.CommandSender val$sender -> wUqg
    react.command.CommandChunkBlame this$0 -> Vftr
    37:37:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> org.cyberpwn.react.avmr$1$1:
    java.lang.String val$i -> GlKm
    react.glang.GMap val$top -> Kwvn
    int val$totalx -> wNBf
    react.command.CommandChunkBlame$1 this$1 -> wfsJ
    66:66:void <init>(react.command.CommandChunkBlame$1,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandChunkTP -> org.cyberpwn.react.vsiU:
    20:31:void <init>() -> <init>
    38:49:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandEnvironment -> org.cyberpwn.react.JAIO:
    25:32:void <init>() -> <init>
    37:74:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandFeature -> org.cyberpwn.react.HLGC:
    27:34:void <init>() -> <init>
    39:172:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandFeature$1 -> org.cyberpwn.react.HLGC$1:
    react.feature.IOption val$j -> aMbn
    org.bukkit.command.CommandSender val$sender -> wUqg
    java.lang.String[] val$args -> qnSX
    react.feature.IFeature val$i -> SLjm
    react.command.CommandFeature this$0 -> Xdjt
    73:73:void <init>(react.command.CommandFeature,org.bukkit.entity.Player,react.feature.IOption,org.bukkit.command.CommandSender,java.lang.String[],react.feature.IFeature) -> <init>
    77:80:void onMessage(java.lang.String) -> HvTU
react.command.CommandFeature$2 -> org.cyberpwn.react.HLGC$2:
    react.feature.IOption val$j -> aMbn
    org.bukkit.command.CommandSender val$sender -> wUqg
    java.lang.String[] val$args -> qnSX
    react.feature.IFeature val$i -> SLjm
    react.command.CommandFeature this$0 -> Xdjt
    88:88:void <init>(react.command.CommandFeature,org.bukkit.entity.Player,react.feature.IOption,org.bukkit.command.CommandSender,java.lang.String[],react.feature.IFeature) -> <init>
    94:104:void onMessage(java.lang.String) -> HvTU
react.command.CommandFeature$3 -> org.cyberpwn.react.HLGC$3:
    react.feature.IOption val$j -> aMbn
    org.bukkit.command.CommandSender val$sender -> wUqg
    java.lang.String[] val$args -> qnSX
    react.feature.IFeature val$i -> SLjm
    react.command.CommandFeature this$0 -> Xdjt
    112:112:void <init>(react.command.CommandFeature,org.bukkit.entity.Player,react.feature.IOption,org.bukkit.command.CommandSender,java.lang.String[],react.feature.IFeature) -> <init>
    118:128:void onMessage(java.lang.String) -> HvTU
react.command.CommandFeature$4 -> org.cyberpwn.react.HLGC$4:
    react.feature.IOption val$j -> aMbn
    org.bukkit.command.CommandSender val$sender -> wUqg
    java.lang.String[] val$args -> qnSX
    react.feature.IFeature val$i -> SLjm
    react.command.CommandFeature this$0 -> Xdjt
    136:136:void <init>(react.command.CommandFeature,org.bukkit.entity.Player,react.feature.IOption,org.bukkit.command.CommandSender,java.lang.String[],react.feature.IFeature) -> <init>
    142:152:void onMessage(java.lang.String) -> HvTU
react.command.CommandFix -> org.cyberpwn.react.Cwjx:
    20:27:void <init>() -> <init>
    32:49:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandFreeze -> org.cyberpwn.react.LXSN:
    16:23:void <init>() -> <init>
    28:56:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandGlasses -> org.cyberpwn.react.PJkr:
    17:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandHelp -> org.cyberpwn.react.yRbf:
    29:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> aehq
    81:87:react.text.RTX getBeginningRTX() -> ePXq
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> aehq
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> CUak
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> HnDD
    208:215:react.glang.GList getSortedCommands() -> gyCm
    220:227:int getPageSize(int) -> VLWr
    232:232:boolean isValidPage(int,int) -> aehq
    237:246:react.glang.GList getPage(int,int) -> CUak
react.command.CommandMap -> org.cyberpwn.react.nRcY:
    17:26:void <init>() -> <init>
    31:34:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandMonitor -> org.cyberpwn.react.ePXq:
    19:28:void <init>() -> <init>
    33:56:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandPing -> org.cyberpwn.react.gyCm:
    28:37:void <init>() -> <init>
    42:138:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandReload -> org.cyberpwn.react.VUNv:
    22:30:void <init>() -> <init>
    35:66:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandRequests -> org.cyberpwn.react.jpjE:
    20:27:void <init>() -> <init>
    32:51:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandRevoke -> org.cyberpwn.react.KDNf:
    19:26:void <init>() -> <init>
    31:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandStatus -> org.cyberpwn.react.hIAb:
    29:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
    54:63:org.bukkit.inventory.ItemStack makeBook() -> VUNv
    68:94:void addSpikePages(react.glang.GList) -> HnDD
    98:108:void addStatusPages(react.glang.GList) -> bNyW
    112:129:int findSlot(org.bukkit.entity.Player) -> bNyW
react.command.CommandSubscribe -> org.cyberpwn.react.rpPy:
    20:36:void <init>() -> <init>
    41:87:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandTopChunk -> org.cyberpwn.react.PKNJ:
    29:36:void <init>() -> <init>
    41:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandUnsubscribe -> org.cyberpwn.react.jqJh:
    19:27:void <init>() -> <init>
    32:63:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.command.CommandVersion -> org.cyberpwn.react.sPor:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> aehq
react.controller.ActionController -> org.cyberpwn.react.WaCx:
    int kiv -> IXbU
    react.glang.GMap actions -> qUDt
    react.glang.GMap pending -> PUFh
    react.glang.GList tasks -> TjDR
    react.glang.GMap rans -> lNEy
    26:26:void <init>() -> <init>
    38:80:void start() -> start
    84:85:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> aehq
    89:142:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> CUak
    147:147:react.api.IAction getAction(react.api.ActionType) -> aehq
    152:153:void registerAction(react.api.IAction) -> aehq
    159:159:void stop() -> stop
    164:276:void tick() -> tick
    280:280:react.glang.GList getActions() -> jpjE
    285:292:react.glang.GList getActionNames() -> KDNf
    28:28:void <clinit>() -> <clinit>
react.controller.ChunkController -> org.cyberpwn.react.tKbn:
    boolean firstTickList -> wMeB
    long firstTick -> ohQJ
    long lastTick -> pscr
    react.gmath.Average aCSMS -> YVoa
    react.glang.GMap pluginLoads -> JdWA
    react.glang.GMap playerLoads -> VEVV
    int serverLoads -> MCLc
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> hIAb
    63:73:void tickNextTickList() -> rpPy
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> aehq
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> aehq
    171:171:boolean isFirstTickList() -> PKNJ
    176:176:long getFirstTick() -> jqJh
    181:181:long getLastTick() -> sPor
    186:186:react.gmath.Average getaCSMS() -> WaCx
    191:191:react.glang.GMap getPluginLoads() -> tKbn
    196:196:react.glang.GMap getPlayerLoads() -> CMVt
    201:201:int getServerLoads() -> SCUc
    21:21:react.glang.GMap access$000(react.controller.ChunkController) -> aehq
    21:21:int access$108(react.controller.ChunkController) -> CUak
    21:21:react.glang.GMap access$200(react.controller.ChunkController) -> HnDD
react.controller.ChunkController$1 -> org.cyberpwn.react.tKbn$1:
    org.bukkit.event.world.ChunkLoadEvent val$e -> cSlC
    react.controller.ChunkController this$0 -> cJyv
    131:131:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> HnDD
    131:131:void run(java.lang.Object) -> run
react.controller.CommandController -> org.cyberpwn.react.CMVt:
    react.glang.GList commands -> Swaj
    boolean k -> k
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> XIlb
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> HvTU
    123:308:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    314:331:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> aehq
    335:335:react.glang.GList getCommands() -> pPYF
    340:341:void setCommands(react.glang.GList) -> xGHx
    345:345:boolean isK() -> TFYD
    350:351:void setK(boolean) -> Txum
react.controller.CrashController -> org.cyberpwn.react.SCUc:
    long lastTick -> pscr
    java.lang.Thread crashThread -> Mdne
    14:14:void <init>() -> <init>
    22:26:void start() -> start
    31:33:void stop() -> stop
    38:39:void tick() -> tick
    44:128:void run() -> run
    132:132:java.lang.String fcf(java.lang.String) -> XIlb
react.controller.EntityCullController -> org.cyberpwn.react.pPYF:
    react.glang.GSet flags -> vmEk
    react.glang.GSet defer -> ghid
    react.glang.GSet prefer -> etEX
    react.glang.GMap maxs -> WQJW
    19:19:void <init>() -> <init>
    29:34:void start() -> start
    40:40:void stop() -> stop
    46:46:void tick() -> tick
    50:200:void repopulateRules() -> YEGN
    204:209:int cull(org.bukkit.Chunk) -> bNyW
    214:343:int partialCull(org.bukkit.Chunk) -> xGHx
react.controller.EntityStackController -> org.cyberpwn.react.TFYD:
    react.glang.GList stacks -> JArr
    22:24:void <init>() -> <init>
    29:30:void start() -> start
    35:41:void stop() -> stop
    46:61:void tick() -> tick
    66:119:void stack(react.glang.GList) -> uOBF
    123:128:boolean isStacked(org.bukkit.entity.LivingEntity) -> HnDD
    133:146:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> bNyW
    152:170:void on(org.bukkit.event.entity.EntityDamageEvent) -> aehq
    175:194:void on(org.bukkit.event.entity.EntityDamageByEntityEvent) -> aehq
    198:213:void merge(react.api.StackedEntity,react.api.StackedEntity) -> aehq
    217:283:void checkNear(org.bukkit.entity.LivingEntity) -> xGHx
    288:330:void on(org.bukkit.event.entity.EntitySpawnEvent) -> aehq
react.controller.EntityStackController$1 -> org.cyberpwn.react.TFYD$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> BCKs
    react.controller.EntityStackController this$0 -> DQco
    298:298:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    302:327:void run() -> run
react.controller.EventController -> org.cyberpwn.react.YEGN:
    react.lagmap.LagMap map -> mGwE
    react.glang.GMap slots -> OHqq
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> aehq
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> aehq
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> aehq
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> aehq
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> aehq
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> aehq
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> aehq
react.controller.ExplosiveController -> org.cyberpwn.react.CxLr:
    boolean firstTickList -> wMeB
    long firstTick -> ohQJ
    long lastTick -> pscr
    react.gmath.Average aCSMS -> YVoa
    react.glang.GSet locs -> DRET
    24:24:void <init>() -> <init>
    35:41:void start() -> start
    45:58:void flushTickList() -> hIAb
    62:72:void tickNextTickList() -> rpPy
    77:78:void stop() -> stop
    84:103:void tick() -> tick
    108:142:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> CUak
    147:148:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> aehq
    152:152:boolean isFirstTickList() -> PKNJ
    157:157:long getFirstTick() -> jqJh
    162:162:long getLastTick() -> sPor
    167:167:react.gmath.Average getaCSMS() -> WaCx
react.controller.FastDecayController -> org.cyberpwn.react.LXTG:
    react.glang.GList leaves -> JBSw
    react.glang.GList logs -> kmDt
    react.glang.GList queue -> dFLy
    32:32:void <init>() -> <init>
    41:49:void start() -> start
    54:55:void stop() -> stop
    60:66:void on(org.bukkit.event.block.BlockBreakEvent) -> aehq
    71:77:void on(org.bukkit.event.block.LeavesDecayEvent) -> aehq
    81:123:void checkBreak(org.bukkit.block.Block) -> HnDD
    127:128:void decay(org.bukkit.block.Block) -> bNyW
    133:183:void doDecay(org.bukkit.block.Block) -> xGHx
    188:245:react.glang.GList getDrops(org.bukkit.block.Block) -> uOBF
    251:262:void tick() -> tick
    32:32:react.glang.GList access$000(react.controller.FastDecayController) -> aehq
    32:32:react.glang.GList access$100(react.controller.FastDecayController) -> CUak
react.controller.FastDecayController$1 -> org.cyberpwn.react.LXTG$1:
    org.bukkit.block.Block val$source -> bsLC
    react.controller.FastDecayController this$0 -> bGvX
    82:82:void <init>(react.controller.FastDecayController,java.lang.String,int,org.bukkit.block.Block) -> <init>
    86:121:void run() -> run
react.controller.FastDecayController$1$1 -> org.cyberpwn.react.LXTG$1$1:
    org.bukkit.block.Block val$i -> VUtx
    react.controller.FastDecayController$1 this$1 -> dgoP
    110:110:void <init>(react.controller.FastDecayController$1,java.lang.String,int,org.bukkit.block.Block) -> <init>
    114:115:void run() -> run
react.controller.FastDecayController$2 -> org.cyberpwn.react.LXTG$2:
    int[] $SwitchMap$org$bukkit$TreeSpecies -> ohOu
    194:194:void <clinit>() -> <clinit>
react.controller.FastGrowthController -> org.cyberpwn.react.CUfv:
    boolean firstTickList -> wMeB
    long firstTick -> ohQJ
    long lastTick -> pscr
    react.gmath.Average aCSMS -> YVoa
    react.glang.GMap changes -> logb
    20:20:void <init>() -> <init>
    31:37:void start() -> start
    41:54:void flushTickList() -> hIAb
    58:68:void tickNextTickList() -> rpPy
    73:74:void stop() -> stop
    80:91:void tick() -> tick
    96:98:void on(org.bukkit.event.block.BlockGrowEvent) -> aehq
    103:111:void fastApply(org.bukkit.event.block.BlockGrowEvent) -> CUak
    115:115:boolean isFirstTickList() -> PKNJ
    120:120:long getFirstTick() -> jqJh
    125:125:long getLastTick() -> sPor
    130:130:react.gmath.Average getaCSMS() -> WaCx
react.controller.FeatureController -> org.cyberpwn.react.jNgO:
    react.nms.INMSBinding trueBinding -> DYsK
    19:19:void <init>() -> <init>
    26:70:void start() -> start
    75:76:void stop() -> stop
    82:82:void tick() -> tick
    86:86:java.lang.String findPackageVersion() -> CxLr
    92:92:java.lang.String getPackageVersion() -> getPackageVersion
    97:97:boolean hasBinding() -> LXTG
    104:122:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> aehq
react.controller.FeatureSetController -> org.cyberpwn.react.FxeR:
    react.feature.FeatureSet f -> mQIA
    22:22:void <init>() -> <init>
    29:31:void start() -> start
    35:72:void constructFeatureSet() -> CUfv
    76:123:void sendPage(org.bukkit.entity.Player,java.lang.String) -> aehq
    127:157:void toggle(org.bukkit.entity.Player,java.lang.String) -> CUak
    161:208:void toggleElement(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> aehq
    212:241:void sendMain(org.bukkit.entity.Player) -> xGHx
    245:245:react.feature.FeatureSet getF() -> jNgO
    251:252:void stop() -> stop
    259:259:void tick() -> tick
react.controller.FixController -> org.cyberpwn.react.XJSJ:
    react.glang.GList fixes -> lUsl
    15:15:void <init>() -> <init>
    22:38:void start() -> start
    42:42:react.glang.GList getFixes() -> FxeR
    47:69:void runFix(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[]) -> aehq
    74:75:void stop() -> stop
    81:81:void tick() -> tick
react.controller.FluidController -> org.cyberpwn.react.TgyL:
    react.glang.GSet ignore -> LbLJ
    int flowsPerTick -> gOUo
    int flowsPerSecond -> etDq
    react.gmath.Average aFST -> ELVB
    react.gmath.Average aFSS -> SoQS
    react.gmath.Average aFSMS -> YVoD
    boolean firstTickList -> wMeB
    long firstTick -> ohQJ
    long lastTick -> pscr
    react.glang.GSet frozen -> ioNt
    react.glang.GMap queue -> lxWw
    react.glang.GMap freezeTimes -> yulW
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> uOBF
    68:76:void checkChunks() -> XJSJ
    80:97:void checkChunk(org.bukkit.Chunk) -> KvlK
    101:107:void queue(org.bukkit.block.Block) -> KvlK
    111:111:boolean isFrozen(org.bukkit.Chunk) -> TOCT
    116:117:void freeze(org.bukkit.Chunk) -> HvTU
    121:127:void unfreeze(org.bukkit.Chunk) -> XIlb
    131:138:void freeze(org.bukkit.Chunk,long) -> aehq
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> hIAb
    172:182:void tickNextTickList() -> rpPy
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> aehq
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> aehq
    248:248:react.glang.GSet getIgnore() -> TgyL
    253:253:int getTransfersPerTick() -> JQjf
    258:258:int getTransfersPerSecond() -> paXw
    263:263:react.gmath.Average getaFST() -> oEDd
    268:268:react.gmath.Average getaFSS() -> jNfY
    273:273:react.gmath.Average getaFSMS() -> AGRc
    278:278:boolean isFirstTickList() -> PKNJ
    283:283:long getFirstTick() -> jqJh
    288:288:long getLastTick() -> sPor
    293:293:react.glang.GSet getFrozen() -> dVFX
    298:298:react.glang.GMap getQueue() -> vtLk
    303:303:react.glang.GMap getFreezeTimes() -> Smfw
react.controller.GlassController -> org.cyberpwn.react.JQjf:
    react.glang.GMap q -> Hfbg
    react.glang.GList g -> DcHK
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:137:void tick() -> tick
    141:141:boolean isUsingGlasses(org.bukkit.entity.Player) -> uOBF
    146:146:boolean canUseGlasses(org.bukkit.entity.Player) -> KvlK
    151:167:void toggleGlasses(org.bukkit.entity.Player) -> TOCT
    172:177:void on(org.bukkit.event.block.BlockPhysicsEvent) -> aehq
    182:187:void on(org.bukkit.event.block.BlockFromToEvent) -> aehq
    192:197:void on(org.bukkit.event.block.BlockBurnEvent) -> aehq
    202:207:void on(org.bukkit.event.block.BlockFormEvent) -> aehq
    212:217:void on(org.bukkit.event.block.BlockFadeEvent) -> aehq
    222:234:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> aehq
    33:33:react.glang.GList access$000(react.controller.GlassController) -> aehq
react.controller.GlassController$1 -> org.cyberpwn.react.JQjf$1:
    react.glang.GMap val$cc -> MurP
    react.controller.GlassController this$0 -> MSoO
    85:85:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:135:void run() -> run
react.controller.GlassController$1$1 -> org.cyberpwn.react.JQjf$1$1:
    org.bukkit.Location val$i -> Tids
    org.bukkit.entity.Player val$j -> pRDY
    react.controller.GlassController$1 this$1 -> YyUc
    109:109:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    113:118:void run() -> run
react.controller.GraphController -> org.cyberpwn.react.paXw:
    react.glang.GMap g -> gOYi
    react.glang.GMap gr -> oxsf
    react.glang.GMap gra -> FhmS
    42:42:void <init>() -> <init>
    51:86:void start() -> start
    91:97:void stop() -> stop
    102:129:void tick() -> tick
    134:151:void on(org.bukkit.event.player.PlayerJoinEvent) -> aehq
    155:187:void createGraphs(react.graph.GraphMode,org.bukkit.entity.Player,react.glang.GList) -> aehq
    191:194:void addSystem(org.bukkit.entity.Player,react.glang.GList) -> aehq
    198:202:void addTick(org.bukkit.entity.Player,react.glang.GList) -> CUak
    206:210:void addMemory(org.bukkit.entity.Player,react.glang.GList) -> HnDD
    214:215:void addEod(org.bukkit.entity.Player,react.glang.GList) -> bNyW
    219:229:void addPhysics(org.bukkit.entity.Player,react.glang.GList) -> xGHx
    233:236:void addReact(org.bukkit.entity.Player,react.glang.GList) -> uOBF
    240:245:void addNetworking(org.bukkit.entity.Player,react.glang.GList) -> KvlK
    249:302:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> aehq
    307:347:void on(org.bukkit.event.player.PlayerMoveEvent) -> aehq
    353:353:void on(react.event.ReactScrollEvent) -> aehq
    357:362:void stopMapping(org.bukkit.entity.Player) -> HvTU
    366:397:void toggleMapping(org.bukkit.entity.Player) -> XIlb
    401:433:void toggleMappingEod(org.bukkit.entity.Player) -> IODN
    437:437:react.glang.GMap getG() -> QyCc
    442:442:react.glang.GMap getGr() -> JRLV
    42:42:react.glang.GMap access$000(react.controller.GraphController) -> aehq
    42:42:react.glang.GMap access$100(react.controller.GraphController) -> CUak
react.controller.GraphController$1 -> org.cyberpwn.react.paXw$1:
    react.controller.GraphController this$0 -> xXyw
    67:67:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    71:84:void run() -> run
react.controller.GraphController$2 -> org.cyberpwn.react.paXw$2:
    react.controller.GraphController this$0 -> xXyw
    103:103:void <init>(react.controller.GraphController) -> <init>
    107:111:void run() -> run
react.controller.GraphController$3 -> org.cyberpwn.react.paXw$3:
    org.bukkit.event.player.PlayerJoinEvent val$e -> XnAk
    react.controller.GraphController this$0 -> xXyw
    135:135:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    139:149:void run() -> run
react.controller.HopperController -> org.cyberpwn.react.oEDd:
    react.glang.GSet ignore -> LbLJ
    int transfersPerTick -> KUyX
    int transfersPerSecond -> OkWi
    react.gmath.Average aHST -> toRQ
    react.gmath.Average aHSS -> OkXE
    react.gmath.Average aHSMS -> SgCf
    boolean firstTickList -> wMeB
    long firstTick -> ohQJ
    long lastTick -> pscr
    react.glang.GSet frozen -> ioNt
    react.glang.GMap queue -> lxWw
    react.glang.GMap freezeTimes -> yulW
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> uOBF
    65:73:void checkChunks() -> XJSJ
    77:94:void checkChunk(org.bukkit.Chunk) -> KvlK
    98:104:void queue(org.bukkit.block.Block) -> KvlK
    108:108:boolean isFrozen(org.bukkit.Chunk) -> TOCT
    113:114:void freeze(org.bukkit.Chunk) -> HvTU
    118:124:void unfreeze(org.bukkit.Chunk) -> XIlb
    128:135:void freeze(org.bukkit.Chunk,long) -> aehq
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> hIAb
    169:179:void tickNextTickList() -> rpPy
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> aehq
    207:207:react.glang.GSet getIgnore() -> TgyL
    212:212:int getTransfersPerTick() -> JQjf
    217:217:int getTransfersPerSecond() -> paXw
    222:222:react.gmath.Average getaHST() -> afPH
    227:227:react.gmath.Average getaHSS() -> GPqx
    232:232:react.gmath.Average getaHSMS() -> maAS
    237:237:boolean isFirstTickList() -> PKNJ
    242:242:long getFirstTick() -> jqJh
    247:247:long getLastTick() -> sPor
    252:252:react.glang.GSet getFrozen() -> dVFX
    257:257:react.glang.GMap getQueue() -> vtLk
    262:262:react.glang.GMap getFreezeTimes() -> Smfw
react.controller.HopperOvertickController -> org.cyberpwn.react.jNfY:
    react.glang.GList possiblePlunge -> USVk
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> aehq
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> aehq
react.controller.InstantDropController -> org.cyberpwn.react.AGRc:
    react.glang.GList ignore -> uXam
    26:26:void <init>() -> <init>
    33:35:void start() -> start
    40:41:void stop() -> stop
    46:59:void on(org.bukkit.event.block.BlockBreakEvent) -> aehq
    64:70:void on(org.bukkit.event.player.PlayerDropItemEvent) -> aehq
    75:85:void on(org.bukkit.event.entity.EntityDeathEvent) -> aehq
    90:108:void on(org.bukkit.event.player.PlayerMoveEvent) -> aehq
    113:134:void on(org.bukkit.event.entity.ProjectileHitEvent) -> aehq
    139:180:void on(org.bukkit.event.entity.ItemSpawnEvent) -> aehq
    186:186:void tick() -> tick
react.controller.InstantDropController$1 -> org.cyberpwn.react.AGRc$1:
    org.bukkit.entity.Arrow val$a -> uaSV
    react.controller.InstantDropController this$0 -> tMOE
    123:123:void <init>(react.controller.InstantDropController,org.bukkit.entity.Arrow) -> <init>
    127:131:void run() -> run
react.controller.InstantDropController$2 -> org.cyberpwn.react.AGRc$2:
    org.bukkit.event.entity.ItemSpawnEvent val$e -> UKFk
    org.bukkit.entity.Player val$f -> hlNw
    react.controller.InstantDropController this$0 -> tMOE
    171:171:void <init>(react.controller.InstantDropController,org.bukkit.event.entity.ItemSpawnEvent,org.bukkit.entity.Player) -> <init>
    175:176:void run() -> run
react.controller.LanguageController -> org.cyberpwn.react.dVFX:
    java.io.File languageFolder -> rOXf
    int oldVersion -> jqsc
    java.io.File dlf -> Iidh
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> HeXU
    160:221:void downloadAll(boolean) -> qcud
    225:261:void downloadLanguage(java.lang.String) -> IODN
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> Txum
    315:315:java.io.File getFileForLanguage(java.lang.String) -> qcud
    320:332:void writeDefaults() -> QyCu
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    31:31:int access$002(react.controller.LanguageController,int) -> aehq
    31:31:void access$100(react.controller.LanguageController) -> aehq
react.controller.LanguageController$1 -> org.cyberpwn.react.dVFX$1:
    react.controller.LanguageController this$0 -> dhRT
    67:67:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> org.cyberpwn.react.dVFX$2:
    react.controller.LanguageController this$0 -> dhRT
    81:81:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
react.controller.LanguageController$2$1 -> org.cyberpwn.react.dVFX$2$1:
    react.controller.LanguageController$2 this$1 -> QXKS
    104:104:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> aehq
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> aehq
    121:121:void onDownloadStarted(react.gnet.download.Download) -> aehq
    126:128:void onDownloadFinished(react.gnet.download.Download) -> CUak
    134:134:void onDownloadFailed(react.gnet.download.Download) -> HnDD
react.controller.LanguageController$3 -> org.cyberpwn.react.dVFX$3:
    react.controller.LanguageController this$0 -> dhRT
    194:194:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> org.cyberpwn.react.dVFX$3$1:
    react.controller.LanguageController$3 this$1 -> gXIq
    199:199:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> org.cyberpwn.react.dVFX$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> Dber
    207:207:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> org.cyberpwn.react.dVFX$4:
    java.io.File val$dld -> aDtw
    react.controller.LanguageController this$0 -> dhRT
    228:228:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> aehq
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> aehq
    245:245:void onDownloadStarted(react.gnet.download.Download) -> aehq
    250:251:void onDownloadFinished(react.gnet.download.Download) -> CUak
    257:257:void onDownloadFailed(react.gnet.download.Download) -> HnDD
react.controller.MessageController -> org.cyberpwn.react.vtLk:
    react.glang.GList notes -> OACY
    17:17:void <init>() -> <init>
    23:24:void queue(react.notification.Notification) -> aehq
    29:39:void start() -> start
    44:46:void stop() -> stop
    51:57:void tick() -> tick
    61:77:void subscribe(org.bukkit.entity.Player,react.notification.Note) -> aehq
    81:97:void unsubscribe(org.bukkit.entity.Player,react.notification.Note) -> CUak
    101:121:react.glang.GList getSubscriptions(org.bukkit.entity.Player) -> Txum
    126:131:boolean isSubscribed(org.bukkit.entity.Player,react.notification.Note) -> HnDD
    136:146:void unsubscribeAll(org.bukkit.entity.Player) -> qcud
    150:163:void subscribeAll(org.bukkit.entity.Player) -> VLWr
    167:174:void process(react.notification.Notification) -> CUak
    17:17:react.glang.GList access$000(react.controller.MessageController) -> aehq
react.controller.MessageController$1 -> org.cyberpwn.react.vtLk$1:
    react.controller.MessageController this$0 -> DcGU
    32:32:void <init>(react.controller.MessageController) -> <init>
    36:37:void run(java.lang.String) -> VLWr
    32:32:void run(java.lang.Object) -> run
react.controller.MetricsController -> org.cyberpwn.react.Smfw:
    react.BStats stats -> qDDk
    14:14:void <init>() -> <init>
    21:49:void start() -> start
    55:55:void stop() -> stop
    62:62:void tick() -> tick
react.controller.MetricsController$1 -> org.cyberpwn.react.Smfw$1:
    react.controller.MetricsController this$0 -> pABN
    24:24:void <init>(react.controller.MetricsController) -> <init>
    28:28:java.lang.String call() -> call
    24:24:java.lang.Object call() -> call
react.controller.MetricsController$2 -> org.cyberpwn.react.Smfw$2:
    react.controller.MetricsController this$0 -> pABN
    33:33:void <init>(react.controller.MetricsController) -> <init>
    37:37:java.lang.String call() -> call
    33:33:java.lang.Object call() -> call
react.controller.MetricsController$3 -> org.cyberpwn.react.Smfw$3:
    react.controller.MetricsController this$0 -> pABN
    42:42:void <init>(react.controller.MetricsController) -> <init>
    46:46:java.lang.String call() -> call
    42:42:java.lang.Object call() -> call
react.controller.MonitorController -> org.cyberpwn.react.QyCc:
    int maxCooldown -> APmN
    react.api.TitleMonitor titleMonitor -> XmaE
    react.glang.GMap posts -> YNaF
    react.slate.PhantomSlate sb -> oqBg
    boolean ready -> dhSJ
    47:51:void <init>() -> <init>
    56:105:void start() -> start
    109:109:react.slate.PhantomSlate constructActionLogBoard() -> BcgG
    114:132:void toggleActionLog(org.bukkit.entity.Player) -> YMQO
    136:154:void toggleMonitoring(org.bukkit.entity.Player) -> JAEj
    159:169:void stop() -> stop
    173:200:void constructMonitor() -> iLCn
    204:209:float calcVolume(react.api.ReactPlayer) -> aehq
    214:214:boolean canMonitor(org.bukkit.entity.Player) -> ssNC
    219:219:boolean canActionLog(org.bukkit.entity.Player) -> owbJ
    224:229:boolean isMonitoring(org.bukkit.entity.Player) -> iCLi
    234:239:boolean isActionLogging(org.bukkit.entity.Player) -> onqO
    244:248:void startMonitoring(org.bukkit.entity.Player) -> Usfk
    252:263:void stopMonitoring(org.bukkit.entity.Player) -> DaVD
    267:272:void startActionLogging(org.bukkit.entity.Player) -> xGGs
    276:287:void stopActionLogging(org.bukkit.entity.Player) -> wUFa
    293:293:void tick() -> tick
    297:314:void changePost(react.api.ReactPlayer) -> CUak
    318:330:void processPlayer(react.api.ReactPlayer) -> HnDD
    335:335:void handleActionLog(org.bukkit.entity.Player) -> jWQb
    339:368:void handleTriggers(react.api.ReactPlayer) -> bNyW
    372:411:void handleScrolling(react.api.ReactPlayer) -> xGHx
    415:457:void handleShifting(react.api.ReactPlayer) -> uOBF
    461:483:void handlePosting(react.api.ReactPlayer) -> KvlK
    487:505:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> aehq
    510:524:java.lang.String prefixForSub(react.api.ReactPlayer,surge.util.C,int) -> aehq
    529:604:void tickMonitor(react.api.ReactPlayer) -> TOCT
    608:608:react.api.TitleMonitor getTitleMonitor() -> lTkp
    614:623:void on(org.bukkit.event.player.PlayerJoinEvent) -> aehq
    628:637:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> aehq
    642:699:void onTick() -> rorj
    703:725:void updateActionBoard() -> LGSY
    730:730:java.lang.String getTickName() -> srvL
    38:38:react.slate.PhantomSlate access$002(react.controller.MonitorController,react.slate.PhantomSlate) -> aehq
    38:38:react.slate.PhantomSlate access$100(react.controller.MonitorController) -> aehq
    38:38:boolean access$202(react.controller.MonitorController,boolean) -> aehq
    38:38:boolean access$200(react.controller.MonitorController) -> CUak
    38:38:react.slate.PhantomSlate access$000(react.controller.MonitorController) -> HnDD
    40:40:void <clinit>() -> <clinit>
react.controller.MonitorController$1 -> org.cyberpwn.react.QyCc$1:
    react.controller.MonitorController this$0 -> EwLN
    86:86:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    90:103:void run() -> run
react.controller.MonitorController$2 -> org.cyberpwn.react.QyCc$2:
    react.api.ReactPlayer val$i -> wogp
    react.controller.MonitorController this$0 -> EwLN
    660:660:void <init>(react.controller.MonitorController,react.api.ReactPlayer) -> <init>
    664:665:void run() -> run
react.controller.MonitorController$3 -> org.cyberpwn.react.QyCc$3:
    react.api.ReactPlayer val$i -> wogp
    react.controller.MonitorController this$0 -> EwLN
    674:674:void <init>(react.controller.MonitorController,react.api.ReactPlayer) -> <init>
    679:680:void run() -> run
react.controller.MonitorController$4 -> org.cyberpwn.react.QyCc$4:
    react.api.ReactPlayer val$i -> wogp
    react.controller.MonitorController this$0 -> EwLN
    689:689:void <init>(react.controller.MonitorController,react.api.ReactPlayer) -> <init>
    693:694:void run() -> run
react.controller.MonitorController$5 -> org.cyberpwn.react.QyCc$5:
    react.controller.MonitorController this$0 -> EwLN
    704:704:void <init>(react.controller.MonitorController) -> <init>
    708:723:void run() -> run
react.controller.PhysicsController -> org.cyberpwn.react.JRLV:
    react.glang.GMap samples -> WPkQ
    int redstonePerTick -> vSRv
    int redstonePerSecond -> TYDO
    boolean firstTickList -> wMeB
    long firstTick -> ohQJ
    long lastTick -> pscr
    react.gmath.Average aRSMS -> VMhA
    react.gmath.Average aRST -> qwHn
    react.gmath.Average aRSS -> lVWX
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> aehq
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> aehq
    72:79:void flushTickList() -> hIAb
    83:93:void tickNextTickList() -> rpPy
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> IODN
    121:122:void onPhysics(org.bukkit.Chunk) -> Txum
    126:127:void onHopper(org.bukkit.Chunk) -> qcud
    131:132:void onFluid(org.bukkit.Chunk) -> VLWr
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> aehq
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> aehq
    156:176:void onTick() -> rorj
    181:181:java.lang.String getTickName() -> srvL
    186:186:react.glang.GMap getSamples() -> oxKs
    191:191:int getRedstonePerTick() -> yuIJ
    196:196:int getRedstonePerSecond() -> AFsE
    201:201:boolean isFirstTickList() -> PKNJ
    206:206:long getFirstTick() -> jqJh
    211:211:long getLastTick() -> sPor
    216:216:react.gmath.Average getaRSMS() -> CflS
    221:221:react.gmath.Average getaRST() -> AWtR
    226:226:react.gmath.Average getaRSS() -> wUOm
react.controller.PhysicsController$1 -> org.cyberpwn.react.JRLV$1:
    react.controller.PhysicsController this$0 -> XvRF
    169:169:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> org.cyberpwn.react.afPH:
    react.glang.GList players -> rGKJ
    react.glang.GSet save -> pRFU
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> Vehq
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> aehq
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> EKFp
    113:113:react.glang.GList getPlayers() -> mhsw
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> aehq
react.controller.PlayerController$1 -> org.cyberpwn.react.afPH$1:
    react.glang.GList val$toSave -> qeif
    react.controller.PlayerController this$0 -> QGKw
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.ProtocolController -> org.cyberpwn.react.GPqx:
    boolean safe -> safe
    react.protocol.ProtocolAdapter proto -> LkAn
    12:12:void <init>() -> <init>
    20:27:void start() -> start
    32:36:void stop() -> stop
    41:45:void tick() -> tick
    49:49:double getAvgPing() -> dDfh
    54:54:double ping(org.bukkit.entity.Player) -> wUEt
    59:59:long ago(org.bukkit.entity.Player) -> PKGE
    64:64:boolean isSafe() -> isSafe
    69:69:boolean isLongs() -> iKfD
    74:74:react.glang.GMap getPings() -> OGlH
    79:79:react.glang.GMap getAgo() -> upjv
    84:84:react.glang.GMap getTimes() -> sbUG
react.controller.RAIController -> org.cyberpwn.react.maAS:
    react.rai.IRAI rai -> AQOV
    boolean raiEnabled -> cSof
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    58:58:react.rai.IRAI getRai() -> pilT
    17:17:react.rai.IRAI access$000(react.controller.RAIController) -> aehq
react.controller.RAIController$1 -> org.cyberpwn.react.maAS$1:
    react.controller.RAIController this$0 -> wVYw
    47:47:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.RedstoneController -> org.cyberpwn.react.HeXU:
    react.glang.GSet ignore -> LbLJ
    react.glang.GSet frozen -> ioNt
    react.glang.GMap queue -> lxWw
    react.glang.GMap freezeTimes -> yulW
    int redstonePerTick -> vSRv
    int redstonePerSecond -> TYDO
    react.gmath.Average aRST -> qwHn
    react.gmath.Average aRSS -> lVWX
    react.gmath.Average aRSMS -> VMhA
    boolean firstTickList -> wMeB
    long firstTick -> ohQJ
    long lastTick -> pscr
    react.glang.GMap trackers -> hImf
    26:26:void <init>() -> <init>
    45:81:void start() -> start
    86:87:void on(org.bukkit.event.world.WorldLoadEvent) -> aehq
    92:94:void on(org.bukkit.event.world.WorldUnloadEvent) -> aehq
    99:105:void stop() -> stop
    109:114:void releaseChunk(org.bukkit.Chunk) -> uOBF
    119:125:void tick() -> tick
    129:137:void checkChunks() -> XJSJ
    141:158:void checkChunk(org.bukkit.Chunk) -> KvlK
    162:168:void queue(org.bukkit.block.Block) -> KvlK
    172:172:boolean isFrozen(org.bukkit.Chunk) -> TOCT
    177:178:void freeze(org.bukkit.Chunk) -> HvTU
    182:189:void flushTickList() -> hIAb
    193:203:void tickNextTickList() -> rpPy
    207:213:void unfreeze(org.bukkit.Chunk) -> XIlb
    217:224:void freeze(org.bukkit.Chunk,long) -> aehq
    229:230:void on(org.bukkit.event.world.ChunkUnloadEvent) -> aehq
    235:248:void on(org.bukkit.event.block.BlockPhysicsEvent) -> aehq
    252:252:react.glang.GSet getIgnore() -> TgyL
    257:257:react.glang.GSet getFrozen() -> dVFX
    262:262:react.glang.GMap getQueue() -> vtLk
    267:267:react.glang.GMap getFreezeTimes() -> Smfw
    272:272:int getRedstonePerTick() -> yuIJ
    277:277:int getRedstonePerSecond() -> AFsE
    282:282:react.gmath.Average getaRST() -> AWtR
    287:287:react.gmath.Average getaRSS() -> wUOm
    292:292:react.gmath.Average getaRSMS() -> CflS
    297:297:boolean isFirstTickList() -> PKNJ
    302:302:long getFirstTick() -> jqJh
    307:307:long getLastTick() -> sPor
react.controller.SampleController -> org.cyberpwn.react.QyCu:
    react.glang.GMap samplers -> Cpge
    int cd -> KerS
    int sct -> gFil
    27:32:void <init>() -> <init>
    36:62:boolean checkThreads() -> LhvL
    67:68:void registerSampler(react.api.ISampler) -> HnDD
    72:72:react.api.ISampler getSampler(java.lang.String) -> YMQO
    77:120:void constructSamplers() -> BJUv
    125:127:void start() -> start
    132:134:void stop() -> stop
    139:154:void tick() -> tick
    158:158:surge.server.SuperSampler getSuperSampler() -> dDhA
    164:190:void onTick() -> rorj
    195:195:java.lang.String getTickName() -> srvL
    200:200:react.glang.GMap getSamplers() -> KURc
    205:205:surge.server.SuperSampler getSs() -> sQSa
    210:210:int getCd() -> tTVe
    215:222:react.glang.GList getSamplerNames() -> JlBX
react.controller.SecurityController -> org.cyberpwn.react.BcgG:
    java.lang.String ipa -> bbNo
    react.glang.GList failures -> suBF
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> JAEj
    41:74:void checkForIP() -> GsYf
    78:91:void scan(java.lang.Runnable) -> aehq
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> org.cyberpwn.react.BcgG$1:
    react.controller.SecurityController this$0 -> kKGG
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> org.cyberpwn.react.BcgG$2:
    java.lang.String val$ip -> DIWe
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> org.cyberpwn.react.BcgG$3:
    java.lang.Thread val$t -> jjFj
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> org.cyberpwn.react.iLCn:
    react.glang.GMap etl -> MSqh
    react.glang.GMap ttl -> Rkqt
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> aehq
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> aehq
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> Txum
    143:160:void releaseWorld(org.bukkit.World) -> qcud
    164:181:double getUniversalEntityTick() -> cAdX
    186:203:double getUniversalEntityLimit() -> lfRG
    208:225:double getUniversalTileLimit() -> hYeB
    230:247:double getUniversalTileTick() -> CMYO
    252:264:double getUniversalEntityDroppedTicks() -> ydEt
    269:281:double getUniversalTileDroppedTicks() -> FWCT
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> aehq
    301:312:void setTileTickLimit(org.bukkit.World,double) -> CUak
    316:321:double getEntityTickLimit(org.bukkit.World) -> VLWr
    326:331:double getTileTickLimit(org.bukkit.World) -> YMQO
    336:341:double getLastEntityTick(org.bukkit.World) -> JAEj
    346:351:double getLastTileTick(org.bukkit.World) -> ssNC
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> owbJ
    366:371:double getTileDroppedTicks(org.bukkit.World) -> iCLi
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> aehq
react.controller.SpikeController -> org.cyberpwn.react.lTkp:
    react.glang.GMap spikes -> GdCa
    26:28:void <init>() -> <init>
    33:60:void start() -> start
    65:66:void stop() -> stop
    72:108:void onTick() -> rorj
    113:113:java.lang.String getTickName() -> srvL
    121:121:void tick() -> tick
    125:125:react.glang.GMap getSpikes() -> VoBt
    130:167:void whoFuckingDidThis(react.glang.Callback) -> aehq
    26:26:react.glang.GMap access$000(react.controller.SpikeController) -> aehq
react.controller.SpikeController$1 -> org.cyberpwn.react.lTkp$1:
    react.controller.SpikeController this$0 -> RIno
    36:36:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    40:58:void run() -> run
react.controller.SpikeController$1$1 -> org.cyberpwn.react.lTkp$1$1:
    react.controller.SpikeController$1 this$1 -> WbNm
    41:41:void <init>(react.controller.SpikeController$1) -> <init>
    45:56:void run() -> run
react.controller.SpikeController$2 -> org.cyberpwn.react.lTkp$2:
    react.glang.GMap val$vv -> UJes
    react.controller.SpikeController this$0 -> RIno
    76:76:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    80:106:void run() -> run
react.controller.SpikeController$3 -> org.cyberpwn.react.lTkp$3:
    java.lang.Thread val$t -> jjFj
    react.glang.Callback val$callback -> rNxm
    react.controller.SpikeController this$0 -> RIno
    133:133:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    137:165:void run() -> run
react.controller.TickTimeController -> org.cyberpwn.react.rorj:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> org.cyberpwn.react.LGSY:
    boolean aboutToWipe -> rNxo
    18:18:void <init>() -> <init>
    25:32:void start() -> start
    37:53:void stop() -> stop
    58:70:void tick() -> tick
    75:76:void on(org.bukkit.event.world.WorldUnloadEvent) -> aehq
    80:81:void wipe() -> pYJx
react.event.ReactEvent -> org.cyberpwn.react.srvL:
    org.bukkit.event.HandlerList handlers -> BTSY
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> org.cyberpwn.react.oxKs:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> org.cyberpwn.react.yuIJ:
    react.event.ScrollDirection direction -> ceQU
    boolean cancellled -> qnYx
    int amount -> AaqG
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> aDMu
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> ofiD
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> org.cyberpwn.react.AFsE:
    react.event.ScrollDirection DOWN -> eISt
    react.event.ScrollDirection UP -> WQLu
    react.event.ScrollDirection[] $VALUES -> AkCJ
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.feature.BasicBooleanOption -> org.cyberpwn.react.CflS:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
    14:15:void <init>(java.lang.String,java.lang.String,int) -> <init>
react.feature.BasicConfigurationOption -> org.cyberpwn.react.AWtR:
    java.lang.String description -> description
    java.lang.String name -> name
    java.lang.reflect.Field configurationField -> tgCI
    15:29:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
    32:57:void <init>(java.lang.String,java.lang.String,int) -> <init>
    62:62:java.lang.String getDescription() -> getDescription
    68:68:java.lang.String getName() -> getName
    77:85:java.lang.Object getValue() -> getValue
    93:100:void setValue(java.lang.Object) -> setValue
    105:105:java.lang.String getID() -> getID
react.feature.BasicDoubleOption -> org.cyberpwn.react.wUOm:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
react.feature.BasicIntegerOption -> org.cyberpwn.react.mhsw:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
    14:15:void <init>(java.lang.String,java.lang.String,int) -> <init>
react.feature.BasicLongOption -> org.cyberpwn.react.dDfh:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
react.feature.BasicStringOption -> org.cyberpwn.react.iKfD:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
react.feature.FeatureSet -> org.cyberpwn.react.OGlH:
    react.glang.GList features -> GJPF
    10:12:void <init>() -> <init>
    16:17:void addFeature(react.feature.IFeature) -> aehq
    21:21:react.glang.GList getFeatures() -> RPsV
react.feature.IBooleanOption -> org.cyberpwn.react.upjv:
react.feature.IDoubleOption -> org.cyberpwn.react.sbUG:
react.feature.IFeature -> org.cyberpwn.react.pilT:
    java.lang.String getName() -> getName
    react.feature.IBooleanOption getToggle() -> MIuE
    react.glang.GList getOptions() -> LiVE
    java.lang.String getID() -> getID
    void addFeatureOption(react.feature.IOption) -> aehq
react.feature.IIntegerOption -> org.cyberpwn.react.LhvL:
react.feature.ILongOption -> org.cyberpwn.react.BJUv:
react.feature.IOption -> org.cyberpwn.react.dDhA:
    java.lang.String getDescription() -> getDescription
    java.lang.String getName() -> getName
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    java.lang.String getID() -> getID
react.feature.IStringOption -> org.cyberpwn.react.KURc:
react.feature.ReactFeature -> org.cyberpwn.react.sQSa:
    java.lang.String name -> name
    react.feature.IBooleanOption toggle -> jHCM
    react.glang.GList options -> kAsg
    12:16:void <init>(java.lang.String,react.feature.IBooleanOption) -> <init>
    21:22:void addFeatureOption(react.feature.IOption) -> aehq
    27:27:java.lang.String getName() -> getName
    33:33:react.feature.IBooleanOption getToggle() -> MIuE
    39:39:react.glang.GList getOptions() -> LiVE
    45:45:java.lang.String getID() -> getID
react.fix.Fix -> org.cyberpwn.react.tTVe:
    java.lang.String id -> id
    java.lang.String[] aliases -> aliases
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String usage -> Djja
    14:20:void <init>() -> <init>
    24:25:void setId(java.lang.String) -> setId
    29:30:void setAliases(java.lang.String[]) -> CUak
    34:35:void setName(java.lang.String) -> setName
    39:40:void setDescription(java.lang.String) -> setDescription
    44:45:void setUsage(java.lang.String) -> ssNC
    50:50:java.lang.String getId() -> getId
    56:56:java.lang.String[] getAliases() -> uyVS
    62:62:java.lang.String getName() -> getName
    68:68:java.lang.String getDescription() -> getDescription
    74:74:java.lang.String getUsage() -> getUsage
react.fix.FixEntityAI -> org.cyberpwn.react.JlBX:
    18:24:void <init>() -> <init>
    29:53:void run(org.bukkit.command.CommandSender,java.lang.String[]) -> CUak
react.fix.FixInvisibleChunk -> org.cyberpwn.react.GsYf:
    boolean running -> running
    23:30:void <init>() -> <init>
    36:74:void run(org.bukkit.command.CommandSender,java.lang.String[]) -> CUak
react.fix.FixInvisibleChunk$1 -> org.cyberpwn.react.GsYf$1:
    org.bukkit.Chunk val$ch -> ifbR
    org.bukkit.entity.Player val$p -> qDJM
    org.bukkit.command.CommandSender val$sender -> wUqg
    react.fix.FixInvisibleChunk this$0 -> XCQr
    58:58:void <init>(react.fix.FixInvisibleChunk,java.lang.String,int,org.bukkit.Chunk,org.bukkit.entity.Player,org.bukkit.command.CommandSender) -> <init>
    62:66:void run() -> run
react.gbench.Profiler -> org.cyberpwn.react.cAdX:
    long nanos -> qCiJ
    long startNano -> uYGT
    long millis -> jHFa
    long startMillis -> eAFl
    double time -> Hffw
    boolean profiling -> jqxm
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> YMQO
    78:78:double getTicks() -> wTnN
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> FotW
    93:93:double getHours() -> CLya
    98:98:double getMilliseconds() -> nAaq
    103:103:long getNanoseconds() -> QVbQ
    108:108:long getNanos() -> PeBD
    113:113:long getStartNano() -> LaFH
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> tCTK
    128:128:double getTime() -> KerS
    133:133:boolean isProfiling() -> isProfiling
react.gconcurrent.A -> org.cyberpwn.react.lfRG:
    react.gconcurrent.ParallelPoolManager mgr -> OAIA
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> org.cyberpwn.react.lfRG$1:
    react.gconcurrent.A this$0 -> JAxn
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> org.cyberpwn.react.hYeB:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> org.cyberpwn.react.CMYO:
    react.gconcurrent.QueueMode mode -> AkDI
    react.glang.GList threads -> qvln
    int next -> YEuC
    int threadCount -> AjcD
    java.util.Queue squeue -> Laqn
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> DcME
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> TXgs
    22:23:void syncQueue(react.gconcurrent.Execution) -> aehq
    long getNanoGate() -> cIsd
    29:42:void tickSyncQueue() -> FouJ
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> Kvul
    93:100:int getTotalQueueSize() -> aCoy
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> CUak
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> GjjI
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> WOeY
    152:179:void updateThreadInformation() -> VfUR
    183:215:react.gconcurrent.ParallelThread nextThread() -> lMAw
    220:226:void createThreads(int) -> JAEj
    230:230:react.gconcurrent.QueueMode getMode() -> klBU
    235:235:int getNext() -> MRhf
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> DGnS
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> PJpe
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> SCXt
react.gconcurrent.ParallelThread -> org.cyberpwn.react.ydEt:
    java.util.Queue queue -> CWVj
    react.gconcurrent.ThreadInformation info -> DcME
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> XIlb
    68:75:void execute(react.gconcurrent.Execution) -> HnDD
    79:88:void execute() -> execute
    92:93:void queue(react.gconcurrent.Execution) -> CUak
    97:97:java.util.Queue getQueue() -> sbXG
    102:102:react.gconcurrent.ThreadInformation getInfo() -> HKjS
react.gconcurrent.QueueMode -> org.cyberpwn.react.FWCT:
    react.gconcurrent.QueueMode ROUND_ROBIN -> GdFB
    react.gconcurrent.QueueMode SMALLEST -> CqJt
    react.gconcurrent.QueueMode[] ENUM$VALUES -> Gtes
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> org.cyberpwn.react.VoBt:
    react.gconcurrent.ParallelPoolManager mgr -> OAIA
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> org.cyberpwn.react.VoBt$1:
    react.gconcurrent.S this$0 -> DblJ
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> org.cyberpwn.react.pYJx:
    long tick -> WQQL
    long atick -> SoWt
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> org.cyberpwn.react.aDMu:
    double ticksPerSecond -> vRwd
    int queuedSize -> Arra
    boolean processing -> yvTP
    double utilization -> DcJl
    react.gmath.Average ticksPerSecondAverage -> AIBU
    long tick -> WQQL
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> vsox
    33:35:void setTicksPerSecond(double) -> IODN
    39:39:int getQueuedSize() -> HByO
    44:45:void setQueuedSize(int) -> ssNC
    49:49:boolean isProcessing() -> xFrI
    54:55:void setProcessing(boolean) -> VLWr
    59:59:double getUtilization() -> vcPH
    64:65:void setUtilization(double) -> Txum
    69:69:double getTicksPerSecondAverage() -> BdJp
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> HmnC
    89:89:int getId() -> getId
react.gformat.F -> org.cyberpwn.react.ofiD:
    java.text.NumberFormat NF -> YyXd
    java.text.DecimalFormat DF -> opfa
    java.lang.String[] NAMES -> MKbP
    java.math.BigInteger THOUSAND -> Eelt
    java.util.NavigableMap MAP -> SLre
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> owbJ
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> aehq
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> aehq
    181:196:java.lang.String time(double,int) -> aehq
    201:221:java.lang.String timeLong(long,int) -> aehq
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> HnDD
    236:236:java.lang.String b(double) -> qcud
    241:258:java.lang.String b(java.math.BigInteger) -> aehq
    263:267:void instantiate() -> YxPD
    279:279:java.lang.String fileSize(long) -> bNyW
    292:292:java.lang.String memSize(long) -> xGHx
    297:297:java.lang.String memSize(long,int) -> CUak
    310:311:java.lang.String stamp(long) -> uOBF
    327:361:java.lang.String ofSize(long,int) -> HnDD
    367:394:java.lang.String ofSize(long,int,int) -> aehq
    408:413:java.lang.String trim(java.lang.String,int) -> CUak
    426:446:java.lang.String cname(java.lang.String) -> iCLi
    460:472:java.lang.String repeat(java.lang.String,int) -> repeat
    484:491:java.lang.String mem(long) -> KvlK
    504:522:java.lang.String memx(long) -> TOCT
    536:537:java.lang.String f(long) -> HvTU
    549:550:java.lang.String f(int) -> owbJ
    564:573:java.lang.String f(double,int) -> CUak
    589:598:java.lang.String fd(double,int) -> HnDD
    612:621:java.lang.String f(float,int) -> aehq
    632:632:java.lang.String f(double) -> VLWr
    643:643:java.lang.String f(float) -> aehq
    658:658:java.lang.String pc(double,int) -> bNyW
    673:673:java.lang.String pc(float,int) -> CUak
    686:686:java.lang.String pc(double) -> YMQO
    699:699:java.lang.String pc(float) -> CUak
    715:715:java.lang.String pc(int,int,int) -> aehq
    729:729:java.lang.String pc(int,int) -> HnDD
    745:745:java.lang.String pc(long,long,int) -> aehq
    759:759:java.lang.String pc(long,long) -> HnDD
    771:771:java.lang.String msSeconds(long) -> XIlb
    785:785:java.lang.String msSeconds(long,int) -> bNyW
    797:797:java.lang.String nsMs(long) -> IODN
    811:811:java.lang.String nsMs(long,int) -> xGHx
    825:825:java.lang.String nsMsd(long,int) -> uOBF
react.glang.AccessCallback -> org.cyberpwn.react.RPsV:
    java.lang.Object get() -> get
react.glang.Adapter -> org.cyberpwn.react.MIuE:
    java.lang.Object adapt(java.lang.Object) -> xGHx
    java.lang.Object onAdapt(java.lang.Object) -> uOBF
react.glang.Callback -> org.cyberpwn.react.LiVE:
    java.lang.Object t -> qfKu
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> run
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> org.cyberpwn.react.wTnN:
    double i -> mkBB
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> JAEj
react.glang.FinalFloat -> org.cyberpwn.react.FotW:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> HnDD
react.glang.FinalInteger -> org.cyberpwn.react.CLya:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> iCLi
react.glang.FinalLong -> org.cyberpwn.react.nAaq:
    long i -> hkrM
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> Txum
react.glang.FinalString -> org.cyberpwn.react.QVbQ:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> org.cyberpwn.react.PeBD:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> xGHx
    java.lang.Object onAdapt(java.lang.Object) -> uOBF
react.glang.GBiset -> org.cyberpwn.react.LaFH:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> hkqO
    java.lang.Object b -> QrBV
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> DYQU
    53:54:void setA(java.lang.Object) -> KvlK
    63:63:java.lang.Object getB() -> TNmP
    73:74:void setB(java.lang.Object) -> TOCT
react.glang.GList -> org.cyberpwn.react.tCTK:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> bNyW
    45:52:react.glang.GList grepDistance(int,int) -> xGHx
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> CUak
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> JcSS
    188:190:react.glang.GList shuffleCopy() -> Ywnf
    198:199:void shuffle() -> hYfb
    210:236:react.glang.GList split() -> fTAe
    248:248:boolean hasIndex(int) -> hasIndex
    258:259:java.lang.Object pickRandom() -> gFBt
    270:277:react.glang.GList stringList() -> oLwp
    288:292:void forEach(react.glang.Callback) -> CUak
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> onqO
    336:336:react.glang.GList cropFrom(int) -> Usfk
    341:373:react.glang.GList split(int) -> DaVD
    389:389:react.glang.GList cropTo(int) -> xGGs
    406:416:react.glang.GList crop(int,int) -> uOBF
    427:431:react.glang.GList removeDuplicates() -> Diop
    442:446:void removeAll(java.lang.Object) -> HvTU
    455:455:boolean hasDuplicates() -> WFsD
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> nlYU
    484:490:void push(java.lang.Object,int) -> aehq
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> XIlb
    528:532:void add(java.util.List) -> CUak
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> WiVf
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> KDQg
    626:627:react.glang.GList qdel(java.lang.Object) -> IODN
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> sHdG
    662:669:java.lang.Object popLast() -> AFua
    674:683:java.lang.Object popRandom() -> BuMi
react.glang.GListAdapter -> org.cyberpwn.react.KerS:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> HnDD
    java.lang.Object onAdapt(java.lang.Object) -> uOBF
react.glang.GMap -> org.cyberpwn.react.cIsd:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> dVKW
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> aehq
    64:81:react.glang.GMap flip() -> ogJx
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> CUak
    121:121:react.glang.GList k() -> awND
    131:131:react.glang.GSet kset() -> ykwP
    141:141:react.glang.GList v() -> WFtB
    151:151:react.glang.GSet vset() -> yBEK
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> CUak
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> KvlK
    209:219:react.glang.GMap removeDuplicateValues() -> vAKm
    233:242:void put(react.glang.GList,react.glang.GList) -> aehq
    251:267:react.glang.GList sortK() -> brGi
    277:293:react.glang.GList sortV() -> QEbg
react.glang.GQuadraset -> org.cyberpwn.react.FouJ:
    java.lang.Object a -> hkqO
    java.lang.Object b -> QrBV
    java.lang.Object c -> dgui
    java.lang.Object d -> Aaqw
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> DYQU
    25:26:void setA(java.lang.Object) -> KvlK
    30:30:java.lang.Object getB() -> TNmP
    35:36:void setB(java.lang.Object) -> TOCT
    40:40:java.lang.Object getC() -> Xkxy
    45:46:void setC(java.lang.Object) -> Txum
    50:50:java.lang.Object getD() -> dVKL
    55:56:void setD(java.lang.Object) -> qcud
react.glang.GSet -> org.cyberpwn.react.Kvul:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> org.cyberpwn.react.aCoy:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> hkqO
    java.lang.Object b -> QrBV
    java.lang.Object c -> dgui
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> DYQU
    26:27:void setA(java.lang.Object) -> KvlK
    31:31:java.lang.Object getB() -> TNmP
    36:37:void setB(java.lang.Object) -> TOCT
    41:41:java.lang.Object getC() -> Xkxy
    46:47:void setC(java.lang.Object) -> Txum
react.gmath.Average -> org.cyberpwn.react.GjjI:
    double[] values -> CVvd
    double average -> GRau
    boolean dirty -> oNey
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> ssNC
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> SKhk
react.gmath.DoubleArrayUtils -> org.cyberpwn.react.WOeY:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> aehq
    17:19:void wrapRight(double[]) -> aehq
    23:27:void fill(double[],double) -> fill
react.gmath.M -> org.cyberpwn.react.VfUR:
    int precision -> XTVG
    int modulus -> BBtN
    float[] sin -> QGQC
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> aehq
    31:36:boolean r(java.lang.Double) -> CUak
    51:51:double tps(long,int) -> KvlK
    63:63:double ticksFromNS(long) -> qcud
    75:101:java.lang.String toRoman(int) -> wUFa
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> KvlK
    144:216:int fromRoman(java.lang.String) -> onqO
    226:226:long ns() -> SByp
    236:236:long ms() -> qKRI
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> CUak
    333:333:float sinLookup(int) -> jWQb
react.gnet.client.Client -> org.cyberpwn.react.lMAw:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> IGiW
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> aehq
    74:74:react.gnet.packet.PacketHandler getHandler() -> GIIn
react.gnet.client.IClient -> org.cyberpwn.react.klBU:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> aehq
    react.gnet.packet.PacketHandler getHandler() -> GIIn
react.gnet.download.Download -> org.cyberpwn.react.MRhf:
    react.gnet.download.DownloadState state -> EUPN
    react.gnet.download.DownloadType type -> pcLT
    react.gnet.download.DownloadStatus status -> GJTb
    react.gnet.download.DownloadMonitor monitor -> fClM
    java.net.URL url -> url
    java.io.File file -> file
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    24:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> FVhA
    92:92:react.gnet.download.DownloadType getType() -> PmVe
    97:97:react.gnet.download.DownloadStatus getStatus() -> miXt
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> mXXI
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> org.cyberpwn.react.DGnS:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> aehq
    void onDownloadStarted(react.gnet.download.Download) -> aehq
    void onDownloadFinished(react.gnet.download.Download) -> CUak
    void onDownloadFailed(react.gnet.download.Download) -> HnDD
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> aehq
react.gnet.download.DownloadState -> org.cyberpwn.react.PJpe:
    react.gnet.download.DownloadState IDLE -> RRcu
    react.gnet.download.DownloadState DOWNLOADING -> LjeY
    react.gnet.download.DownloadState FAILED -> SxLD
    react.gnet.download.DownloadState FINISHED -> uHGa
    react.gnet.download.DownloadState[] ENUM$VALUES -> RBCm
    3:8:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadState[] values() -> values
    1:1:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
react.gnet.download.DownloadStatus -> org.cyberpwn.react.SCXt:
    long bytesDownloaded -> KyEU
    long bytesTotal -> dqJo
    long bytesPerSecond -> FyvA
    long timeElapsed -> Bmhy
    10:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> Fxji
    25:25:long getBytesDownloaded() -> xiWo
    30:31:void setBytesDownloaded(long) -> VLWr
    35:35:long getBytesTotal() -> PCCb
    40:41:void setBytesTotal(long) -> YMQO
    45:45:long getBytesPerSecond() -> dVMq
    50:51:void setBytesPerSecond(long) -> JAEj
    55:55:long getTimeElapsed() -> miYG
    60:61:void setTimeElapsed(long) -> ssNC
react.gnet.download.DownloadType -> org.cyberpwn.react.sbXG:
    react.gnet.download.DownloadType DETERMINATE -> kAxT
    react.gnet.download.DownloadType INDETERMINATE -> riPo
    react.gnet.download.DownloadType[] ENUM$VALUES -> KNOQ
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadType[] values() -> values
    1:1:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
react.gnet.packet.IPacket -> org.cyberpwn.react.HKjS:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> miXd
    java.lang.String getPacketName() -> getPacketName
react.gnet.packet.IncompatablePacketException -> org.cyberpwn.react.vsox:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> org.cyberpwn.react.HByO:
    react.gnet.packet.PacketBinding SERVER_BOUND -> lyBJ
    react.gnet.packet.PacketBinding CLIENT_BOUND -> LkDm
    react.gnet.packet.PacketBinding[] ENUM$VALUES -> YpiV
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.packet.PacketBinding[] values() -> values
    1:1:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
react.gnet.packet.PacketException -> org.cyberpwn.react.xFrI:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> org.cyberpwn.react.vcPH:
    react.glang.GList accept -> CFXe
    react.gnet.packet.PacketBinding side -> sSAf
    react.gnet.streams.OSS out -> XnGi
    react.gnet.streams.ISS in -> VpRQ
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> aehq
    28:34:void accept(react.gnet.packet.IPacket) -> CUak
    38:46:react.gnet.packet.IPacket findPacket(int) -> Vehq
    51:66:react.gnet.packet.IPacket read() -> WqkC
    71:77:void write(react.gnet.packet.IPacket) -> HnDD
react.gnet.packet.UnhandledPacketException -> org.cyberpwn.react.BdJp:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> org.cyberpwn.react.HmnC:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> GIIn
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> bNyW
react.gnet.server.Server -> org.cyberpwn.react.YxPD:
    int port -> port
    java.net.ServerSocket socket -> fDKf
    react.gnet.packet.PacketHandler handler -> IGiW
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> GIIn
    37:84:void run() -> run
    88:91:void pstart() -> kkcQ
    95:96:void pstop() -> CEOK
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> bNyW
react.gnet.streams.ISS -> org.cyberpwn.react.DYQU:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> WIAn
    boolean built -> RJSL
    byte[] readBuffer -> hdDQ
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> EKFp
    64:72:react.glang.GList readStringList() -> MSKJ
    77:85:react.glang.GList readDoubleList() -> tnMJ
    90:98:react.glang.GList readLongList() -> klCX
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> aehq
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> aehq
    136:137:react.gnet.streams.ISS gzip() -> nJWq
    142:147:void build() -> build
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> CUak
    435:436:void close() -> close
react.gnet.streams.OSS -> org.cyberpwn.react.TNmP:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> uaXX
    react.gnet.streams.StreamBuilder bu -> WIAn
    boolean built -> RJSL
    byte[] writeBuffer -> nmeN
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> wUEt
    41:42:react.gnet.streams.OSS gzip(int) -> PKGE
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> CUak
    53:58:void build() -> build
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> TOCT
    102:108:void writeDoubleList(react.glang.GList) -> HvTU
    112:118:void writeLongList(react.glang.GList) -> XIlb
    122:128:void writeStreamableList(react.glang.GList) -> IODN
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> db
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> HnDD
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> org.cyberpwn.react.JcSS:
    react.glang.GList constructors -> KxcN
    18:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> aehq
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> aehq
    49:50:void bind(react.gnet.streams.StreamConstructor) -> aehq
    54:55:void bindGZIP(int) -> CDaB
    59:60:void bindGZIP() -> VUTb
    64:65:void bindCipher(javax.crypto.Cipher) -> HnDD
    69:70:void bindBuffer(int) -> inAK
    74:75:void bindBuffer() -> wMCG
react.gnet.streams.StreamConstructor -> org.cyberpwn.react.Ywnf:
    java.io.InputStream constructInput(java.io.InputStream) -> aehq
    java.io.OutputStream constructOutput(java.io.OutputStream) -> aehq
react.gnet.streams.constructors.BufferedStreamConstructor -> org.cyberpwn.react.hYfb:
    int bufferSize -> bufferSize
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> CUak
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> CUak
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> aehq
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> aehq
react.gnet.streams.constructors.CipherStreamConstructor -> org.cyberpwn.react.fTAe:
    javax.crypto.Cipher cipher -> jGeu
    17:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> HnDD
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> HnDD
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> aehq
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> aehq
react.gnet.streams.constructors.GZipStreamConstructor -> org.cyberpwn.react.gFBt:
    int compressionLevel -> oOFT
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> bNyW
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> bNyW
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> aehq
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> aehq
react.gnet.streams.overlays.CGZIPInputStream -> org.cyberpwn.react.oLwp:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> org.cyberpwn.react.Diop:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> org.cyberpwn.react.WFsD:
    void toBytes(react.gnet.streams.OSS) -> aehq
    void fromBytes(react.gnet.streams.ISS) -> aehq
react.graph.ColossalView -> org.cyberpwn.react.nlYU:
    react.papyrus.BufferedFrame view -> KgbD
    react.glang.GMap buffers -> gyqn
    react.glang.GMap graphs -> bPos
    double level -> iLve
    double targetLevel -> scfL
    int maxX -> maxX
    int maxY -> maxY
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> ntkK
    51:77:void render() -> uOLU
    81:98:void scroll(int) -> awND
    102:112:void recompile() -> FpYe
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> aehq
    122:122:react.papyrus.BufferedFrame getView() -> CUnb
    127:127:react.glang.GMap getBuffers() -> aTsQ
    132:132:react.glang.GMap getGraphs() -> mPEq
    137:137:double getLevel() -> ETDs
    142:142:double getTargetLevel() -> KMGf
    147:147:int getMaxX() -> getMaxX
    152:152:int getMaxY() -> getMaxY
react.graph.ColossalView$Builder -> org.cyberpwn.react.nlYU$aehq:
    react.glang.GList graphs -> EerU
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> aehq
    171:191:react.graph.ColossalView compute() -> pirp
react.graph.CubicleIterator -> org.cyberpwn.react.WiVf:
    int[][] mapping -> sAbd
    int xCubes -> YqNC
    int yCubes -> Dbnx
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> qmKF
    47:130:void insert(react.graph.GraphSize,int) -> aehq
    134:145:void print() -> print
react.graph.Graph2D -> org.cyberpwn.react.KDQg:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> aehq
react.graph.GraphCPUArc -> org.cyberpwn.react.sHdG:
    byte fontColor -> mPsH
    byte backgroundColor -> WHcW
    double pct -> ujLo
    react.gmath.Average aax -> qwSH
    react.gmath.Average aay -> BTXM
    react.gmath.Average aaz -> IHMI
    long msx -> ifhw
    22:34:void <init>(byte) -> <init>
    38:43:void sample() -> aDHK
    48:66:void onRender(react.papyrus.BufferedFrame) -> aehq
    70:70:byte getFontColor() -> HKnO
    75:76:void setFontColor(byte) -> aehq
    80:80:byte getBackgroundColor() -> lvyC
    85:86:void setBackgroundColor(byte) -> CUak
react.graph.GraphLagMap -> org.cyberpwn.react.AFua:
    int grid -> PTpd
    org.bukkit.entity.Player viewer -> gXSP
    org.bukkit.util.Vector lastVector -> gXRo
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> BmAN
    49:55:void zoomOut() -> Jsvx
    60:164:void onRender(react.papyrus.BufferedFrame) -> aehq
react.graph.GraphLagMap$1 -> org.cyberpwn.react.AFua$1:
    int[] $SwitchMap$react$api$ChunkIssue -> hALS
    107:107:void <clinit>() -> <clinit>
react.graph.GraphMemoryArc -> org.cyberpwn.react.BuMi:
    byte fontColor -> mPsH
    byte backgroundColor -> WHcW
    double pct -> ujLo
    react.gmath.Average aax -> qwSH
    long msx -> ifhw
    long of -> SVHl
    22:33:void <init>(byte) -> <init>
    37:43:void sample() -> aDHK
    48:67:void onRender(react.papyrus.BufferedFrame) -> aehq
    71:71:byte getFontColor() -> HKnO
    76:77:void setFontColor(byte) -> aehq
    81:81:byte getBackgroundColor() -> lvyC
    86:87:void setBackgroundColor(byte) -> CUak
react.graph.GraphMode -> org.cyberpwn.react.dVKW:
    react.graph.GraphMode NORMAL -> jYKM
    react.graph.GraphMode ITEMFRAME -> RRdi
    react.graph.GraphMode EOD -> ioYi
    react.graph.GraphMode[] $VALUES -> mbSy
    3:3:react.graph.GraphMode[] values() -> values
    3:3:react.graph.GraphMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSampleLine -> org.cyberpwn.react.ogJx:
    double lx -> GcgT
    double ly -> QFqH
    react.api.ISampler sampler -> DQli
    react.graph.IFormatter formatter -> NOJX
    byte graphColor -> ndvX
    byte backgroundColor -> WHcW
    byte borderColor -> sAal
    byte textColor -> Dsom
    int ticksLeftTitle -> yLEI
    int ticksOutTitle -> BCWd
    double nextPoint -> rPAI
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> aDHK
    51:183:void onRender(react.papyrus.BufferedFrame) -> aehq
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> CUak
    226:254:int getHue(int,int,int) -> HnDD
    259:281:void scaleFor(react.glang.GList) -> Txum
    285:285:react.graph.IFormatter getFormatter() -> HTRL
    290:291:void setFormatter(react.graph.IFormatter) -> aehq
    295:295:byte getGraphColor() -> lLfA
    300:301:void setGraphColor(byte) -> HnDD
    305:305:byte getBackgroundColor() -> lvyC
    310:311:void setBackgroundColor(byte) -> CUak
    315:315:byte getBorderColor() -> ktVf
    320:321:void setBorderColor(byte) -> bNyW
    325:325:byte getTextColor() -> GkNy
    330:331:void setTextColor(byte) -> xGHx
    335:335:react.api.ISampler getSampler() -> jqSM
react.graph.GraphSize -> org.cyberpwn.react.ykwP:
    react.graph.GraphSize WIDE -> HLxI
    react.graph.GraphSize FULL -> hBBl
    react.graph.GraphSize SQUARE -> AIFF
    react.graph.GraphSize[] $VALUES -> raAu
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> mOgk
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> org.cyberpwn.react.ykwP$1:
    int[] $SwitchMap$react$graph$GraphSize -> HLwk
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> org.cyberpwn.react.WFtB:
    java.lang.String text -> text
    byte fontColor -> mPsH
    byte backgroundColor -> WHcW
    boolean wrote -> tEEc
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> aehq
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> HKnO
    68:69:void setFontColor(byte) -> aehq
    73:73:byte getBackgroundColor() -> lvyC
    78:79:void setBackgroundColor(byte) -> CUak
react.graph.GraphingInstance -> org.cyberpwn.react.yBEK:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> EerU
    react.graph.ColossalView view -> PTpJ
    react.papyrus.Papyrus papyrus -> txIn
    react.papyrus.IRenderer renderer -> DtTE
    boolean mapping -> iwXc
    react.glang.GList msgs -> slYS
    surge.sched.Task waiter -> plAa
    surge.sched.Task waiter2 -> OQoX
    int shift -> lNRm
    int iv -> ECrD
    boolean notif -> wgbu
    boolean doScrolling -> hBFQ
    53:121:void <init>(org.bukkit.entity.Player) -> <init>
    125:125:boolean isDoScrolling() -> gpYu
    130:131:void setDoScrolling(boolean) -> YMQO
    136:141:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> aehq
    146:150:void on(org.bukkit.event.player.PlayerQuitEvent) -> aehq
    154:158:void send(java.lang.String) -> Usfk
    164:164:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> aehq
    169:213:void on(react.event.ReactScrollEvent) -> aehq
    218:223:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> aehq
    227:235:void destroy() -> destroy
    239:248:void toggle() -> mhyb
    252:253:void setGraphs(react.glang.GList) -> qcud
    257:270:void enable() -> enable
    274:274:org.bukkit.inventory.ItemStack getItem() -> getItem
    279:284:void disable() -> disable
    288:292:void disableNoSave() -> KCvR
    296:296:org.bukkit.entity.Player getPlayer() -> getPlayer
    301:301:react.glang.GList getGraphs() -> dwqv
    306:306:react.graph.ColossalView getView() -> CDms
    311:311:react.papyrus.Papyrus getPapyrus() -> WrND
    316:317:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    321:322:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    326:327:void setView(react.graph.ColossalView) -> aehq
    331:332:void setPapyrus(react.papyrus.Papyrus) -> aehq
    336:337:void setRenderer(react.papyrus.IRenderer) -> aehq
    341:342:void setMapping(boolean) -> bNyW
    346:347:void setMsgs(react.glang.GList) -> VLWr
    351:352:void setWaiter(surge.sched.Task) -> aehq
    356:357:void setWaiter2(surge.sched.Task) -> CUak
    361:362:void setShift(int) -> TWTu
    366:367:void setNotif(boolean) -> JAEj
    371:371:react.papyrus.IRenderer getRenderer() -> qlub
    376:376:boolean isMapping() -> jgtA
    381:381:react.glang.GList getMsgs() -> MuQb
    386:386:surge.sched.Task getWaiter() -> xyyp
    391:391:surge.sched.Task getWaiter2() -> ofoM
    396:396:int getShift() -> getShift
    401:401:boolean isNotif() -> ryIx
    406:422:void compile() -> HnPp
    426:441:void enableSly() -> EdgN
    445:453:void disableSly() -> JlGJ
    35:35:boolean access$000(react.graph.GraphingInstance) -> aehq
    35:35:react.glang.GList access$100(react.graph.GraphingInstance) -> CUak
    35:35:boolean access$200(react.graph.GraphingInstance) -> HnDD
    35:35:boolean access$202(react.graph.GraphingInstance,boolean) -> aehq
    35:35:int access$300(react.graph.GraphingInstance) -> bNyW
    35:35:int access$310(react.graph.GraphingInstance) -> xGHx
    35:35:int access$302(react.graph.GraphingInstance,int) -> aehq
    35:35:react.graph.ColossalView access$400(react.graph.GraphingInstance) -> uOBF
react.graph.GraphingInstance$1 -> org.cyberpwn.react.yBEK$1:
    org.bukkit.entity.Player val$player -> QXWC
    react.graph.GraphingInstance this$0 -> fLaS
    58:58:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    62:79:void run() -> run
react.graph.GraphingInstance$2 -> org.cyberpwn.react.yBEK$2:
    react.graph.GraphingInstance this$0 -> fLaS
    83:83:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    87:106:void run() -> run
react.graph.GraphingInstance$3 -> org.cyberpwn.react.yBEK$3:
    react.graph.GraphingInstance this$0 -> fLaS
    113:113:void <init>(react.graph.GraphingInstance) -> <init>
    117:119:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> aehq
react.graph.IFormatter -> org.cyberpwn.react.vAKm:
    java.lang.String from(double) -> owbJ
react.graph.IGraph -> org.cyberpwn.react.brGi:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> KfXa
    long getTimeViewport() -> AqnS
    void render(react.papyrus.BufferedFrame) -> HnDD
    double getMax() -> getMax
    void setMax(double) -> iCLi
react.graph.NormalGraph -> org.cyberpwn.react.QEbg:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> fvsj
    long timeViewport -> THMv
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> KfXa
    35:35:long getTimeViewport() -> AqnS
    41:42:void render(react.papyrus.BufferedFrame) -> HnDD
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> iCLi
    void onRender(react.papyrus.BufferedFrame) -> aehq
react.graph.PlotBoard -> org.cyberpwn.react.Xkxy:
    react.glang.GMap plots -> rObs
    int maxRecordings -> HfnI
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> bOhB
    33:33:long getAccurateTimeSpan() -> LFwe
    38:50:long getMedian(long,long) -> bNyW
    55:55:long getMinimumAccuracyRange() -> Vngs
    60:70:double getMaxValue() -> CNBJ
    75:85:double getMinValue() -> VDTl
    90:90:react.glang.GList sort(react.glang.GMap) -> HnDD
    95:105:long earilestRecording() -> WOiL
    110:120:long latestRecording() -> aevm
    125:126:void reduceBefore(long) -> owbJ
    130:156:void reduceBetween(long,long) -> xGHx
    160:160:boolean before(long,long) -> uOBF
    165:165:boolean after(long,long) -> KvlK
    170:170:boolean within(long,long,long) -> aehq
    175:193:react.glang.GMap getBetween(long,long) -> TOCT
    198:200:void plot(long,double) -> aehq
    204:204:boolean hasAt(long) -> iCLi
    209:209:double getAt(long) -> onqO
    214:214:int getSize() -> getSize
react.graph.Point -> org.cyberpwn.react.dVKL:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> org.cyberpwn.react.SKhk:
    int iid -> EUTa
    react.graph.IGraph graph -> qoDP
    react.graph.GraphSize size -> gOcL
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> SnQG
    24:25:void setGraph(react.graph.IGraph) -> aehq
    29:29:react.graph.GraphSize getSize() -> xGVG
    34:35:void setSize(react.graph.GraphSize) -> aehq
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> org.cyberpwn.react.SByp:
    react.graph.RenderMaxType UNLIMITED -> Rkxf
    react.graph.RenderMaxType LIMITED -> mHcY
    react.graph.RenderMaxType[] $VALUES -> EfSx
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> org.cyberpwn.react.qKRI:
    java.lang.String CRLF -> hBFB
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> DaVD
    162:198:java.lang.String toString(react.json.JSONObject) -> CUak
react.json.HTTPTokener -> org.cyberpwn.react.GIIn:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> org.cyberpwn.react.FVhA:
    java.util.ArrayList myArrayList -> cSwO
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> aehq
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> mWlX
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> YwfW
    394:399:react.json.JSONObject getJSONObject(int) -> KelX
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> xGGs
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> Pljn
    515:515:boolean optBoolean(int) -> roll
    533:536:boolean optBoolean(int,boolean) -> CUak
    551:551:double optDouble(int) -> bGLN
    569:572:double optDouble(int,double) -> aehq
    587:587:int optInt(int) -> LXNo
    605:608:int optInt(int,int) -> TOCT
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> CUak
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> aehq
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> aehq
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> aehq
    722:723:react.json.JSONArray optJSONArray(int) -> iCPU
    737:738:react.json.JSONObject optJSONObject(int) -> tmcC
    752:752:long optLong(int) -> qSWY
    770:773:long optLong(int,long) -> aehq
    788:788:java.lang.String optString(int) -> qAti
    803:804:java.lang.String optString(int,java.lang.String) -> aehq
    816:817:react.json.JSONArray put(boolean) -> ssNC
    830:831:react.json.JSONArray put(java.util.Collection) -> aehq
    845:848:react.json.JSONArray put(double) -> onqO
    860:861:react.json.JSONArray put(int) -> vQdn
    873:874:react.json.JSONArray put(long) -> Usfk
    887:888:react.json.JSONArray put(java.util.Map) -> aehq
    902:903:react.json.JSONArray put(java.lang.Object) -> VLWr
    921:922:react.json.JSONArray put(int,boolean) -> HnDD
    939:940:react.json.JSONArray put(int,java.util.Collection) -> aehq
    958:959:react.json.JSONArray put(int,double) -> CUak
    977:978:react.json.JSONArray put(int,int) -> HvTU
    996:997:react.json.JSONArray put(int,long) -> CUak
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> aehq
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> aehq
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> YMQO
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> aehq
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> aehq
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> aehq
react.json.JSONException -> org.cyberpwn.react.PmVe:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> RSGp
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> org.cyberpwn.react.miXt:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> aehq
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> wUFa
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> aehq
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> CUak
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> DaVD
    379:456:java.lang.String toString(react.json.JSONArray) -> CUak
    472:552:java.lang.String toString(react.json.JSONObject) -> CUak
react.json.JSONObject -> org.cyberpwn.react.mXXI:
    java.util.Map map -> map
    java.lang.Object NULL -> mYeU
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> aehq
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> CUak
    480:499:java.lang.String doubleToString(double) -> Usfk
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> jWQb
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> Vehq
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> EKFp
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> HnDD
    751:767:java.lang.String[] getNames(java.lang.Object) -> JAEj
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> wUEt
    855:855:boolean isNull(java.lang.String) -> isNull
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> gMtx
    917:937:java.lang.String numberToString(java.lang.Number) -> aehq
    949:949:java.lang.Object opt(java.lang.String) -> PKGE
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> aehq
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> aehq
    1018:1018:boolean optBoolean(java.lang.String) -> CDaB
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> aehq
    1054:1054:double optDouble(java.lang.String) -> inAK
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> aehq
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> aehq
    1116:1119:double optDouble(java.lang.String,double) -> aehq
    1134:1134:int optInt(java.lang.String) -> awND
    1152:1155:int optInt(java.lang.String,int) -> HnDD
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> qmKF
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> TWTu
    1198:1198:long optLong(java.lang.String) -> mWlX
    1216:1219:long optLong(java.lang.String,long) -> aehq
    1234:1234:java.lang.String optString(java.lang.String) -> YwfW
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> CUak
    1255:1305:void populateMap(java.lang.Object) -> ssNC
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> CUak
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> aehq
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> CUak
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> bNyW
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> CUak
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> aehq
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> HnDD
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> bNyW
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> xGHx
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> aehq
    1590:1590:java.lang.Object remove(java.lang.String) -> remove
    1605:1640:boolean similar(java.lang.Object) -> YMQO
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> owbJ
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> HnDD
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> aehq
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> aehq
    2000:2004:void indent(java.io.Writer,int) -> aehq
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> aehq
react.json.JSONObject$Null -> org.cyberpwn.react.mXXI$aehq:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> org.cyberpwn.react.Fxji:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> org.cyberpwn.react.xiWo:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> org.cyberpwn.react.PCCb:
    long character -> yKfJ
    boolean eof -> eof
    long index -> ymiL
    long line -> opmG
    char previous -> qvrR
    java.io.Reader reader -> reader
    boolean usePrevious -> pQlP
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> back
    119:131:int dehexchar(char) -> aehq
    136:136:boolean end() -> sPwh
    147:153:boolean more() -> JRUF
    164:198:char next() -> next
    213:218:char next(char) -> CUak
    233:250:java.lang.String next(int) -> JIXO
    263:266:char nextClean() -> JRTk
    287:334:java.lang.String nextString(char) -> HnDD
    349:361:java.lang.String nextTo(char) -> bNyW
    376:388:java.lang.String nextTo(java.lang.String) -> KelX
    403:441:java.lang.Object nextValue() -> uXBu
    458:479:char skipTo(char) -> xGHx
    491:491:react.json.JSONException syntaxError(java.lang.String) -> Pljn
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> org.cyberpwn.react.dVMq:
    int maxdepth -> ObpS
    boolean comma -> ELao
    char mode -> sAbw
    react.json.JSONObject[] stack -> DRPY
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> roll
    157:164:react.json.JSONWriter array() -> KUYq
    180:193:react.json.JSONWriter end(char,char) -> aehq
    206:206:react.json.JSONWriter endArray() -> Qxmi
    219:219:react.json.JSONWriter endObject() -> rxkx
    235:258:react.json.JSONWriter key(java.lang.String) -> bGLN
    274:285:react.json.JSONWriter object() -> YUpu
    299:310:void pop(char) -> uOBF
    322:329:void push(react.json.JSONObject) -> bNyW
    342:342:react.json.JSONWriter value(boolean) -> owbJ
    356:356:react.json.JSONWriter value(double) -> DaVD
    369:369:react.json.JSONWriter value(long) -> DaVD
    385:385:react.json.JSONWriter value(java.lang.Object) -> iCLi
react.json.XML -> org.cyberpwn.react.miYG:
    java.lang.Character AMP -> WQVL
    java.lang.Character APOS -> wWAn
    java.lang.Character BANG -> Bmlf
    java.lang.Character EQ -> lyFH
    java.lang.Character GT -> uHKC
    java.lang.Character LT -> TYNb
    java.lang.Character QUEST -> lNTd
    java.lang.Character QUOT -> HxQa
    java.lang.Character SLASH -> JeEk
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> LXNo
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> aehq
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> DaVD
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> org.cyberpwn.react.miXd:
    java.util.HashMap entity -> IsDa
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> cSOE
    108:133:java.lang.Object nextContent() -> KDXi
    149:166:java.lang.Object nextEntity(char) -> KvlK
    186:239:java.lang.Object nextMeta() -> jXCq
    261:334:java.lang.Object nextToken() -> VMIq
    354:420:boolean skipPast(java.lang.String) -> iCPU
react.lagmap.LagMap -> org.cyberpwn.react.WqkC:
    react.glang.GMap chunks -> ekcG
    14:16:void <init>() -> <init>
    20:27:react.glang.GMap getGrandTotalMilliseconds() -> ogRh
    32:47:react.glang.GMap getGrandTotal() -> WOlK
    52:80:void pump() -> mqmU
    84:90:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> aehq
    94:100:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> aehq
    104:104:react.glang.GMap getChunks() -> opDN
react.lagmap.LagMapChunk -> org.cyberpwn.react.kkcQ:
    react.glang.GMap hits -> HoaE
    org.bukkit.Chunk c -> Xluv
    16:19:void <init>(org.bukkit.Chunk) -> <init>
    23:37:react.glang.GMap getMS() -> KoKj
    42:66:double totalMS() -> TiEV
    71:78:double getMS(react.api.ChunkIssue) -> aehq
    83:89:void hit(react.api.ChunkIssue,double) -> aehq
    93:94:void hit(react.api.ChunkIssue) -> CUak
    98:98:int getX() -> getX
    103:103:int getZ() -> getZ
    108:115:double totalScore() -> uXAr
    120:120:react.glang.GMap getHits() -> pGpo
    125:134:void pump() -> mqmU
    139:139:int compareTo(react.lagmap.LagMapChunk) -> aehq
    144:144:org.bukkit.Chunk getC() -> oEBx
    149:149:org.bukkit.World getWorld() -> getWorld
    10:10:int compareTo(java.lang.Object) -> compareTo
react.nms.INMSBinding -> org.cyberpwn.react.CEOK:
    java.lang.String getPackageVersion() -> getPackageVersion
    void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> aehq
react.nms.NMSBinding -> org.cyberpwn.react.MSKJ:
    java.lang.String packageVersion -> YqPx
    8:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> getPackageVersion
react.nms.NMSBinding10 -> org.cyberpwn.react.tnMJ:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> aehq
react.nms.NMSBinding11 -> org.cyberpwn.react.klCX:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> aehq
react.nms.NMSBinding12 -> org.cyberpwn.react.nJWq:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> aehq
react.nms.NMSBinding8 -> org.cyberpwn.react.VUTb:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> aehq
react.nms.NMSBinding92 -> org.cyberpwn.react.wMCG:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> aehq
react.nms.NMSBinding94 -> org.cyberpwn.react.ntkK:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> aehq
react.notification.Note -> org.cyberpwn.react.uOLU:
    react.notification.Note RAI -> fvvd
    react.notification.Note VERBOSE -> NOOY
    react.notification.Note SPIKES -> RuNa
    react.notification.Note ACTION -> yCWw
    react.notification.Note GC -> iEJp
    react.notification.Note[] $VALUES -> lMry
    5:5:react.notification.Note[] values() -> values
    5:5:react.notification.Note valueOf(java.lang.String) -> valueOf
    5:5:void <init>(java.lang.String,int) -> <init>
    15:16:void bake(java.lang.String) -> tmcC
    5:11:void <clinit>() -> <clinit>
react.notification.Notification -> org.cyberpwn.react.FpYe:
    react.notification.Note type -> IisL
    java.lang.String message -> message
    9:12:void <init>(react.notification.Note,java.lang.String) -> <init>
    16:16:react.notification.Note getType() -> esFd
    21:22:void setType(react.notification.Note) -> aehq
    26:26:java.lang.String getMessage() -> getMessage
    31:32:void setMessage(java.lang.String) -> setMessage
react.papyrus.BufferedFrame -> org.cyberpwn.react.CUnb:
    byte[][] frame -> Ircs
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> aehq
    90:97:void write(byte) -> write
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> aehq
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> aehq
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> aehq
    153:167:java.awt.image.BufferedImage toBufferedImage() -> IqUn
    175:182:void writeRainbowMul() -> EeIn
    189:196:void writeRainbowAdd() -> vARW
    203:213:void writeSparks() -> flxK
    217:223:boolean write(int,int,byte) -> aehq
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> aehq
    255:272:void write(react.papyrus.BufferedFrame) -> bNyW
    276:276:byte[][] getRawFrame() -> NpER
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> org.cyberpwn.react.aTsQ:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> bNyW
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> aehq
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> org.cyberpwn.react.mPEq:
    org.bukkit.map.MapView getView() -> qlvy
    react.papyrus.BufferedFrame getFrameBuffer() -> leww
    void addRenderer(react.papyrus.IRenderer) -> CUak
    void clearRenderers() -> Keyn
    react.glang.GList getRenderers() -> vIbi
    void removeRenderer(react.papyrus.IRenderer) -> HnDD
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> YodI
react.papyrus.IRenderer -> org.cyberpwn.react.ETDs:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> aehq
react.papyrus.Papyrus -> org.cyberpwn.react.KMGf:
    org.bukkit.map.MapView map -> gGVJ
    react.papyrus.BufferedFrame frameBuffer -> QWwn
    react.papyrus.BufferedFrame lastFrameBuffer -> SpBA
    react.glang.GList renderers -> hIwc
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> qlvy
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> leww
    51:52:void addRenderer(react.papyrus.IRenderer) -> CUak
    57:58:void clearRenderers() -> Keyn
    63:63:react.glang.GList getRenderers() -> vIbi
    69:70:void removeRenderer(react.papyrus.IRenderer) -> HnDD
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> YodI
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> CUak
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> HnDD
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> bNyW
react.papyrus.Papyrus$1 -> org.cyberpwn.react.KMGf$1:
    org.bukkit.map.MapCanvas val$c -> LPxp
    org.bukkit.map.MapView val$v -> nnLx
    react.papyrus.Papyrus this$0 -> bawd
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> org.cyberpwn.react.pirp:
    int spaceSize -> sJWQ
    java.lang.String fontChars -> eAMy
    int[][] fontData -> hSHs
    react.papyrus.ReactFont Font -> VVeS
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.protocol.PacketStreamHandler -> org.cyberpwn.react.HKnO:
    long wrote -> EoHE
    react.glang.GMap avgPacketSize -> uioL
    15:16:void <clinit>() -> <clinit>
    13:13:void <init>() -> <init>
    21:21:com.comphenix.protocol.events.ListenerPriority getPriority() -> getPriority
    27:27:org.bukkit.plugin.Plugin getPlugin() -> getPlugin
    33:35:byte[] handle(com.comphenix.protocol.events.PacketEvent,byte[]) -> handle
react.protocol.ProtocolAdapter -> org.cyberpwn.react.lvyC:
    boolean longs -> mjhf
    react.protocol.PacketStreamHandler packetOutputHandler -> GRih
    react.glang.GMap pings -> GSKN
    react.glang.GMap ago -> TGmb
    react.glang.GMap times -> Tipc
    double avgPing -> rOcj
    int tppsOUT -> UeER
    int tppsIN -> tLyD
    int ppsOUT -> COOh
    int ppsIN -> pbol
    long tbpsIN -> DJAv
    long bpsOUT -> VNTp
    long bpsIN -> Dbrq
    28:28:void <init>() -> <init>
    46:57:void start() -> start
    61:77:void trackBandwidth(react.glang.GList) -> YMQO
    81:116:void trackPing() -> BSQI
    122:184:void trackPackets(react.glang.GList) -> JAEj
    188:208:void tick() -> tick
    213:216:void on(org.bukkit.event.player.PlayerQuitEvent) -> aehq
    220:222:void stop() -> stop
    226:226:double getAvgPing() -> dDfh
    231:236:double ping(org.bukkit.entity.Player) -> wUEt
    241:246:long ago(org.bukkit.entity.Player) -> PKGE
    251:251:boolean isLongs() -> iKfD
    256:256:react.glang.GMap getPings() -> OGlH
    261:261:react.glang.GMap getAgo() -> upjv
    266:266:react.glang.GMap getTimes() -> sbUG
    31:31:react.protocol.PacketStreamHandler access$0(react.protocol.ProtocolAdapter) -> aehq
    30:30:boolean access$1(react.protocol.ProtocolAdapter) -> CUak
    34:34:react.glang.GMap access$2(react.protocol.ProtocolAdapter) -> HnDD
    32:32:react.glang.GMap access$3(react.protocol.ProtocolAdapter) -> bNyW
    33:33:react.glang.GMap access$4(react.protocol.ProtocolAdapter) -> xGHx
react.protocol.ProtocolAdapter$1 -> org.cyberpwn.react.lvyC$1:
    react.protocol.ProtocolAdapter this$0 -> BnRE
    1:61:void <init>(react.protocol.ProtocolAdapter,org.bukkit.plugin.Plugin,com.comphenix.protocol.events.ListenerPriority,java.lang.Iterable,com.comphenix.protocol.events.ListenerOptions[]) -> <init>
    66:68:void onPacketReceiving(com.comphenix.protocol.events.PacketEvent) -> onPacketReceiving
    73:75:void onPacketSending(com.comphenix.protocol.events.PacketEvent) -> onPacketSending
react.protocol.ProtocolAdapter$2 -> org.cyberpwn.react.lvyC$2:
    react.protocol.ProtocolAdapter this$0 -> BnRE
    1:81:void <init>(react.protocol.ProtocolAdapter,org.bukkit.plugin.Plugin,com.comphenix.protocol.PacketType[]) -> <init>
    87:87:void onPacketReceiving(com.comphenix.protocol.events.PacketEvent) -> onPacketReceiving
    92:94:void onPacketSending(com.comphenix.protocol.events.PacketEvent) -> onPacketSending
react.protocol.ProtocolAdapter$3 -> org.cyberpwn.react.lvyC$3:
    react.protocol.ProtocolAdapter this$0 -> BnRE
    1:97:void <init>(react.protocol.ProtocolAdapter,org.bukkit.plugin.Plugin,com.comphenix.protocol.PacketType[]) -> <init>
    102:114:void onPacketReceiving(com.comphenix.protocol.events.PacketEvent) -> onPacketReceiving
react.protocol.wrapper.AbstractPacket -> org.cyberpwn.react.BmAN:
    com.comphenix.protocol.events.PacketContainer handle -> kJrc
    39:51:void <init>(com.comphenix.protocol.events.PacketContainer,com.comphenix.protocol.PacketType) -> <init>
    60:60:com.comphenix.protocol.events.PacketContainer getHandle() -> afYn
    75:82:void sendPacket(org.bukkit.entity.Player) -> CDaB
    99:105:void recievePacket(org.bukkit.entity.Player) -> inAK
    119:125:void receivePacket(org.bukkit.entity.Player) -> awND
react.protocol.wrapper.AbstractPacket18 -> org.cyberpwn.react.Jsvx:
    com.comphenix.protocol.events.PacketContainer handle -> kJrc
    39:47:void <init>(com.comphenix.protocol.events.PacketContainer,com.comphenix.protocol.PacketType) -> <init>
    54:54:com.comphenix.protocol.events.PacketContainer getHandle() -> afYn
    64:68:void sendPacket(org.bukkit.entity.Player) -> CDaB
    80:84:void recievePacket(org.bukkit.entity.Player) -> inAK
    93:97:void receivePacket(org.bukkit.entity.Player) -> awND
react.protocol.wrapper.Legacy -> org.cyberpwn.react.lLfA:
react.protocol.wrapper.PacketWrapper18 -> org.cyberpwn.react.ktVf:
    23:23:void <init>() -> <init>
    27:27:void onEnable() -> onEnable
react.protocol.wrapper.WrapperHandshakingClientSetProtocol -> org.cyberpwn.react.GkNy:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:int getProtocolVersion() -> getProtocolVersion
    57:58:void setProtocolVersion(int) -> setProtocolVersion
    69:69:java.lang.String getServerAddressHostnameOrIp() -> ndOC
    80:81:void setServerAddressHostnameOrIp(java.lang.String) -> qSWY
    92:92:int getServerPort() -> getServerPort
    103:104:void setServerPort(int) -> eqwe
    115:115:com.comphenix.protocol.PacketType$Protocol getNextState() -> uNob
    126:127:void setNextState(com.comphenix.protocol.PacketType$Protocol) -> aehq
    24:24:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperHandshakingClientSetProtocol18 -> org.cyberpwn.react.jqSM:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getProtocolVersion() -> getProtocolVersion
    52:53:void setProtocolVersion(int) -> setProtocolVersion
    62:62:java.lang.String getServerAddressHostnameOrIp() -> ndOC
    70:71:void setServerAddressHostnameOrIp(java.lang.String) -> qSWY
    80:80:int getServerPort() -> getServerPort
    88:89:void setServerPort(int) -> eqwe
    98:98:com.comphenix.protocol.PacketType$Protocol getNextState() -> uNob
    106:107:void setNextState(com.comphenix.protocol.PacketType$Protocol) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperLoginClientEncryptionBegin -> org.cyberpwn.react.mOgk:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    27:29:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:byte[] getSharedSecret() -> IhfC
    54:55:void setSharedSecret(byte[]) -> aehq
    64:64:byte[] getVerifyToken() -> EeKI
    75:76:void setVerifyToken(byte[]) -> CUak
    23:23:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperLoginClientEncryptionBegin18 -> org.cyberpwn.react.gpYu:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    41:41:byte[] getSharedSecret() -> IhfC
    49:50:void setSharedSecret(byte[]) -> aehq
    57:57:byte[] getVerifyToken() -> EeKI
    65:66:void setVerifyToken(byte[]) -> CUak
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperLoginClientStart -> org.cyberpwn.react.mhyb:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:com.comphenix.protocol.wrappers.WrappedGameProfile getProfile() -> getProfile
    55:56:void setProfile(com.comphenix.protocol.wrappers.WrappedGameProfile) -> aehq
    24:24:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperLoginClientStart18 -> org.cyberpwn.react.KCvR:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:com.comphenix.protocol.wrappers.WrappedGameProfile getProfile() -> getProfile
    50:51:void setProfile(com.comphenix.protocol.wrappers.WrappedGameProfile) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperLoginServerDisconnect -> org.cyberpwn.react.dwqv:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:com.comphenix.protocol.wrappers.WrappedChatComponent getReason() -> CDrp
    50:50:com.comphenix.protocol.wrappers.WrappedChatComponent getJsonData() -> fTJG
    61:62:void setReason(com.comphenix.protocol.wrappers.WrappedChatComponent) -> aehq
    67:68:void setJsonData(com.comphenix.protocol.wrappers.WrappedChatComponent) -> CUak
    24:24:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperLoginServerDisconnect18 -> org.cyberpwn.react.CDms:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:com.comphenix.protocol.wrappers.WrappedChatComponent getReason() -> CDrp
    47:47:com.comphenix.protocol.wrappers.WrappedChatComponent getJsonData() -> fTJG
    55:56:void setReason(com.comphenix.protocol.wrappers.WrappedChatComponent) -> aehq
    60:61:void setJsonData(com.comphenix.protocol.wrappers.WrappedChatComponent) -> CUak
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperLoginServerEncryptionBegin -> org.cyberpwn.react.WrND:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:java.lang.String getServerId() -> getServerId
    57:58:void setServerId(java.lang.String) -> qAti
    67:67:java.security.PublicKey getPublicKey() -> getPublicKey
    78:79:void setPublicKey(java.security.PublicKey) -> setPublicKey
    88:88:byte[] getVerifyToken() -> EeKI
    99:100:void setVerifyToken(byte[]) -> CUak
    24:24:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperLoginServerEncryptionBegin18 -> org.cyberpwn.react.qlub:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:java.lang.String getServerId() -> getServerId
    53:54:void setServerId(java.lang.String) -> qAti
    61:61:java.security.PublicKey getPublicKey() -> getPublicKey
    69:70:void setPublicKey(java.security.PublicKey) -> setPublicKey
    77:77:byte[] getVerifyToken() -> EeKI
    85:86:void setVerifyToken(byte[]) -> CUak
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperLoginServerSetCompression -> org.cyberpwn.react.MuQb:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    27:29:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:int getThreshold() -> getThreshold
    56:57:void setThreshold(int) -> uyVS
    23:23:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperLoginServerSetCompression18 -> org.cyberpwn.react.xyyp:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getThreshold() -> getThreshold
    51:52:void setThreshold(int) -> uyVS
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperLoginServerSuccess -> org.cyberpwn.react.ofoM:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:com.comphenix.protocol.wrappers.WrappedGameProfile getProfile() -> getProfile
    52:53:void setProfile(com.comphenix.protocol.wrappers.WrappedGameProfile) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperLoginServerSuccess18 -> org.cyberpwn.react.ryIx:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:com.comphenix.protocol.wrappers.WrappedGameProfile getProfile() -> getProfile
    50:51:void setProfile(com.comphenix.protocol.wrappers.WrappedGameProfile) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientAbilities -> org.cyberpwn.react.HnPp:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    37:37:boolean isInvulnurable() -> Aqpy
    41:42:void setInvulnurable(boolean) -> iCLi
    45:45:boolean isFlying() -> isFlying
    49:50:void setFlying(boolean) -> setFlying
    53:53:boolean canFly() -> Gbal
    57:58:void setCanFly(boolean) -> onqO
    61:61:boolean canInstantlyBuild() -> fuks
    65:66:void setCanInstantlyBuild(boolean) -> Usfk
    69:69:float getFlyingSpeed() -> BcsG
    73:74:void setFlyingSpeed(float) -> bNyW
    77:77:float getWalkingSpeed() -> maNs
    81:82:void setWalkingSpeed(float) -> xGHx
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientAbilities18 -> org.cyberpwn.react.EdgN:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    37:37:boolean isInvulnurable() -> Aqpy
    41:42:void setInvulnurable(boolean) -> iCLi
    45:45:boolean isFlying() -> isFlying
    49:50:void setFlying(boolean) -> setFlying
    53:53:boolean canFly() -> Gbal
    57:58:void setCanFly(boolean) -> onqO
    61:61:boolean canInstantlyBuild() -> fuks
    65:66:void setCanInstantlyBuild(boolean) -> Usfk
    69:69:float getFlyingSpeed() -> BcsG
    73:74:void setFlyingSpeed(float) -> bNyW
    77:77:float getWalkingSpeed() -> maNs
    81:82:void setWalkingSpeed(float) -> xGHx
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientArmAnimation -> org.cyberpwn.react.JlGJ:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientArmAnimation18 -> org.cyberpwn.react.KfXa:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientBlockDig -> org.cyberpwn.react.AqnS:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    56:57:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    60:60:com.comphenix.protocol.wrappers.EnumWrappers$Direction getDirection() -> DsKj
    64:65:void setDirection(com.comphenix.protocol.wrappers.EnumWrappers$Direction) -> aehq
    75:75:com.comphenix.protocol.wrappers.EnumWrappers$PlayerDigType getStatus() -> ifCg
    84:85:void setStatus(com.comphenix.protocol.wrappers.EnumWrappers$PlayerDigType) -> aehq
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientBlockDig18 -> org.cyberpwn.react.bOhB:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:com.comphenix.protocol.wrappers.EnumWrappers$PlayerDigType getStatus() -> ifCg
    53:54:void setStatus(com.comphenix.protocol.wrappers.EnumWrappers$PlayerDigType) -> aehq
    63:63:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    71:72:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientBlockPlace -> org.cyberpwn.react.LFwe:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    38:38:com.comphenix.protocol.wrappers.EnumWrappers$Hand getHand() -> Tpwq
    42:43:void setHand(com.comphenix.protocol.wrappers.EnumWrappers$Hand) -> aehq
    46:46:long getTimestamp() -> getTimestamp
    50:51:void setTimestamp(long) -> xGGs
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientBlockPlace18 -> org.cyberpwn.react.Vngs:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    54:55:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    64:64:int getFace() -> getFace
    72:73:void setFace(int) -> DPXC
    80:80:org.bukkit.inventory.ItemStack getHeldItem() -> Thgi
    88:89:void setHeldItem(org.bukkit.inventory.ItemStack) -> aehq
    98:98:float getCursorPositionX() -> GRAh
    106:107:void setCursorPositionX(float) -> uOBF
    114:114:float getCursorPositionY() -> Ywvv
    122:123:void setCursorPositionY(float) -> KvlK
    130:130:float getCursorPositionZ() -> OQGx
    138:139:void setCursorPositionZ(float) -> TOCT
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientBoatMove -> org.cyberpwn.react.CNBJ:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    38:38:boolean getLeftOar() -> eHUi
    42:43:void setLeftOar(boolean) -> DaVD
    46:46:boolean getRightOar() -> dwuy
    50:51:void setRightOar(boolean) -> xGGs
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientChat -> org.cyberpwn.react.VDTl:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:java.lang.String getMessage() -> getMessage
    51:52:void setMessage(java.lang.String) -> setMessage
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientChat18 -> org.cyberpwn.react.WOiL:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    41:41:java.lang.String getMessage() -> getMessage
    49:50:void setMessage(java.lang.String) -> setMessage
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientClientCommand -> org.cyberpwn.react.aevm:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:com.comphenix.protocol.wrappers.EnumWrappers$ClientCommand getAction() -> lMIs
    54:55:void setAction(com.comphenix.protocol.wrappers.EnumWrappers$ClientCommand) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientClientCommand18 -> org.cyberpwn.react.SnQG:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:com.comphenix.protocol.wrappers.EnumWrappers$ClientCommand getAction() -> lMIs
    52:53:void setAction(com.comphenix.protocol.wrappers.EnumWrappers$ClientCommand) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientCloseWindow -> org.cyberpwn.react.xGVG:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getWindowId() -> RcCL
    53:54:void setWindowId(int) -> bXNR
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientCloseWindow18 -> org.cyberpwn.react.gMtx:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getWindowId() -> RcCL
    51:52:void setWindowId(int) -> bXNR
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientCustomPayload -> org.cyberpwn.react.sPwh:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:java.lang.String getChannel() -> getChannel
    56:57:void setChannel(java.lang.String) -> vQdn
    65:65:io.netty.buffer.ByteBuf getContentsBuffer() -> PTLA
    74:77:byte[] getContents() -> YUsk
    86:92:void setContentsBuffer(io.netty.buffer.ByteBuf) -> aehq
    100:101:void setContents(byte[]) -> HnDD
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientCustomPayload18 -> org.cyberpwn.react.JRUF:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:java.lang.String getChannel() -> getChannel
    54:55:void setChannel(java.lang.String) -> vQdn
    63:63:io.netty.buffer.ByteBuf getContentsBuffer() -> PTLA
    72:72:byte[] getContents() -> YUsk
    81:82:void setContentsBuffer(io.netty.buffer.ByteBuf) -> aehq
    90:91:void setContents(byte[]) -> HnDD
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientEnchantItem -> org.cyberpwn.react.JRTk:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getWindowId() -> RcCL
    53:54:void setWindowId(byte) -> uOBF
    65:65:int getEnchantment() -> VDXr
    74:75:void setEnchantment(int) -> vbey
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientEnchantItem18 -> org.cyberpwn.react.uXBu:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getWindowId() -> RcCL
    51:52:void setWindowId(byte) -> uOBF
    61:61:int getEnchantment() -> VDXr
    69:70:void setEnchantment(int) -> vbey
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientEntityAction -> org.cyberpwn.react.KUYq:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    49:49:int getEntityID() -> DGuR
    58:59:void setEntityID(int) -> JYyE
    68:68:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    78:78:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    89:89:com.comphenix.protocol.wrappers.EnumWrappers$PlayerAction getAction() -> xPKh
    98:99:void setAction(com.comphenix.protocol.wrappers.EnumWrappers$PlayerAction) -> aehq
    109:109:int getJumpBoost() -> NpFd
    118:119:void setJumpBoost(int) -> uWRf
    30:30:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientEntityAction18 -> org.cyberpwn.react.Qxmi:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getEntityID() -> DGuR
    56:57:void setEntityID(int) -> JYyE
    65:65:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    74:74:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    84:84:com.comphenix.protocol.wrappers.EnumWrappers$PlayerAction getAction() -> xPKh
    92:93:void setAction(com.comphenix.protocol.wrappers.EnumWrappers$PlayerAction) -> aehq
    102:102:int getJumpBoost() -> NpFd
    110:111:void setJumpBoost(int) -> uWRf
    30:30:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientFlying -> org.cyberpwn.react.rxkx:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:boolean getOnGround() -> qujb
    53:54:void setOnGround(boolean) -> wUFa
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientFlying18 -> org.cyberpwn.react.YUpu:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:boolean getOnGround() -> qujb
    51:52:void setOnGround(boolean) -> wUFa
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientHeldItemSlot -> org.cyberpwn.react.cSOE:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getSlot() -> getSlot
    53:54:void setSlot(int) -> VwMV
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientHeldItemSlot18 -> org.cyberpwn.react.KDXi:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getSlot() -> getSlot
    51:52:void setSlot(int) -> VwMV
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientKeepAlive -> org.cyberpwn.react.jXCq:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:int getKeepAliveId() -> pbGT
    51:52:void setKeepAliveId(int) -> Ushu
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientKeepAlive18 -> org.cyberpwn.react.VMIq:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    41:41:int getKeepAliveId() -> pbGT
    49:50:void setKeepAliveId(int) -> Ushu
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientLook -> org.cyberpwn.react.ogRh:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:float getYaw() -> getYaw
    53:54:void setYaw(float) -> setYaw
    64:64:float getPitch() -> getPitch
    73:74:void setPitch(float) -> setPitch
    84:84:boolean getOnGround() -> qujb
    93:94:void setOnGround(boolean) -> wUFa
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientLook18 -> org.cyberpwn.react.WOlK:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:float getYaw() -> getYaw
    51:52:void setYaw(float) -> setYaw
    61:61:float getPitch() -> getPitch
    69:70:void setPitch(float) -> setPitch
    79:79:boolean getOnGround() -> qujb
    87:88:void setOnGround(boolean) -> wUFa
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientPosition -> org.cyberpwn.react.mqmU:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:double getX() -> getX
    53:54:void setX(double) -> setX
    65:65:double getY() -> getY
    74:75:void setY(double) -> setY
    85:85:double getZ() -> getZ
    94:95:void setZ(double) -> setZ
    105:105:boolean getOnGround() -> qujb
    114:115:void setOnGround(boolean) -> wUFa
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientPosition18 -> org.cyberpwn.react.opDN:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:double getX() -> getX
    51:52:void setX(double) -> setX
    61:61:double getY() -> getY
    69:70:void setY(double) -> setY
    79:79:double getZ() -> getZ
    87:88:void setZ(double) -> setZ
    97:97:boolean getOnGround() -> qujb
    105:106:void setOnGround(boolean) -> wUFa
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientPositionLook -> org.cyberpwn.react.KoKj:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:double getX() -> getX
    53:54:void setX(double) -> setX
    65:65:double getY() -> getY
    74:75:void setY(double) -> setY
    85:85:double getZ() -> getZ
    94:95:void setZ(double) -> setZ
    105:105:float getYaw() -> getYaw
    114:115:void setYaw(float) -> setYaw
    125:125:float getPitch() -> getPitch
    134:135:void setPitch(float) -> setPitch
    145:145:boolean getOnGround() -> qujb
    154:155:void setOnGround(boolean) -> wUFa
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientPositionLook18 -> org.cyberpwn.react.TiEV:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:double getX() -> getX
    51:52:void setX(double) -> setX
    61:61:double getY() -> getY
    69:70:void setY(double) -> setY
    79:79:double getZ() -> getZ
    87:88:void setZ(double) -> setZ
    97:97:float getYaw() -> getYaw
    105:106:void setYaw(float) -> setYaw
    115:115:float getPitch() -> getPitch
    123:124:void setPitch(float) -> setPitch
    133:133:boolean getOnGround() -> qujb
    141:142:void setOnGround(boolean) -> wUFa
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientResourcePackStatus -> org.cyberpwn.react.uXAr:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:com.comphenix.protocol.wrappers.EnumWrappers$ResourcePackStatus getResult() -> hHlh
    56:57:void setResult(com.comphenix.protocol.wrappers.EnumWrappers$ResourcePackStatus) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientResourcePackStatus18 -> org.cyberpwn.react.pGpo:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:java.lang.String getHash() -> getHash
    52:53:void setHash(java.lang.String) -> JIXO
    62:62:com.comphenix.protocol.wrappers.EnumWrappers$ResourcePackStatus getResult() -> hHlh
    70:71:void setResult(com.comphenix.protocol.wrappers.EnumWrappers$ResourcePackStatus) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientSetCreativeSlot -> org.cyberpwn.react.esFd:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getSlot() -> getSlot
    56:57:void setSlot(int) -> VwMV
    65:65:org.bukkit.inventory.ItemStack getClickedItem() -> WqpN
    74:75:void setClickedItem(org.bukkit.inventory.ItemStack) -> CUak
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientSetCreativeSlot18 -> org.cyberpwn.react.IqUn:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:int getSlot() -> getSlot
    53:54:void setSlot(int) -> VwMV
    61:61:org.bukkit.inventory.ItemStack getClickedItem() -> WqpN
    69:70:void setClickedItem(org.bukkit.inventory.ItemStack) -> CUak
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientSettings -> org.cyberpwn.react.EeIn:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:java.lang.String getLocale() -> getLocale
    54:55:void setLocale(java.lang.String) -> eqwe
    65:65:int getViewDistance() -> getViewDistance
    74:75:void setViewDistance(byte) -> KvlK
    85:85:com.comphenix.protocol.wrappers.EnumWrappers$ChatVisibility getChatFlags() -> aLhy
    94:95:void setChatFlags(com.comphenix.protocol.wrappers.EnumWrappers$ChatVisibility) -> aehq
    105:105:boolean getChatColours() -> MdRr
    114:115:void setChatColours(boolean) -> jWQb
    125:125:int getDisplayedSkinParts() -> qeIU
    134:135:void setDisplayedSkinParts(int) -> HTRL
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientSettings18 -> org.cyberpwn.react.vARW:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:java.lang.String getLocale() -> getLocale
    52:53:void setLocale(java.lang.String) -> eqwe
    62:62:int getViewDistance() -> getViewDistance
    70:71:void setViewDistance(byte) -> KvlK
    80:80:com.comphenix.protocol.wrappers.EnumWrappers$ChatVisibility getChatFlags() -> aLhy
    88:89:void setChatFlags(com.comphenix.protocol.wrappers.EnumWrappers$ChatVisibility) -> aehq
    98:98:boolean getChatColours() -> MdRr
    106:107:void setChatColours(boolean) -> jWQb
    116:116:int getDisplayedSkinParts() -> qeIU
    124:125:void setDisplayedSkinParts(int) -> HTRL
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientSpectate -> org.cyberpwn.react.flxK:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:java.util.UUID getTargetPlayer() -> VnmQ
    53:54:void setTargetPlayer(java.util.UUID) -> aehq
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientSpectate18 -> org.cyberpwn.react.NpER:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:java.util.UUID getTargetPlayer() -> VnmQ
    51:52:void setTargetPlayer(java.util.UUID) -> aehq
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientSteerVehicle -> org.cyberpwn.react.qlvy:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:float getSideways() -> ktYT
    53:54:void setSideways(float) -> HvTU
    64:64:float getForward() -> loLN
    73:74:void setForward(float) -> XIlb
    77:77:boolean isJump() -> HTcL
    81:82:void setJump(boolean) -> Vehq
    85:85:boolean isUnmount() -> xOjb
    89:90:void setUnmount(boolean) -> EKFp
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientSteerVehicle18 -> org.cyberpwn.react.leww:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:float getSideways() -> ktYT
    51:52:void setSideways(float) -> HvTU
    61:61:float getForward() -> loLN
    69:70:void setForward(float) -> XIlb
    73:73:boolean isJump() -> HTcL
    77:78:void setJump(boolean) -> Vehq
    81:81:boolean isUnmount() -> xOjb
    85:86:void setUnmount(boolean) -> EKFp
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientTabComplete -> org.cyberpwn.react.Keyn:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:java.lang.String getText() -> getText
    52:53:void setText(java.lang.String) -> setText
    61:61:com.comphenix.protocol.wrappers.BlockPosition getHasPosition() -> oDpF
    70:71:void setHasPosition(com.comphenix.protocol.wrappers.BlockPosition) -> CUak
    82:82:com.comphenix.protocol.wrappers.BlockPosition getLookedAtBlock() -> SnTu
    91:92:void setLookedAtBlock(com.comphenix.protocol.wrappers.BlockPosition) -> HnDD
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientTabComplete18 -> org.cyberpwn.react.vIbi:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:java.lang.String getText() -> getText
    50:51:void setText(java.lang.String) -> setText
    58:58:com.comphenix.protocol.wrappers.BlockPosition getHasPosition() -> oDpF
    66:67:void setHasPosition(com.comphenix.protocol.wrappers.BlockPosition) -> CUak
    76:76:com.comphenix.protocol.wrappers.BlockPosition getLookedAtBlock() -> SnTu
    84:85:void setLookedAtBlock(com.comphenix.protocol.wrappers.BlockPosition) -> HnDD
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientTeleportAccept -> org.cyberpwn.react.YodI:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:int getTeleportId() -> YpFe
    55:56:void setTeleportId(int) -> QUyv
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientTransaction -> org.cyberpwn.react.BSQI:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getWindowId() -> RcCL
    53:54:void setWindowId(byte) -> uOBF
    65:65:short getActionNumber() -> Thfl
    74:75:void setActionNumber(short) -> aehq
    85:85:boolean getAccepted() -> pixs
    94:95:void setAccepted(boolean) -> wUEt
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientTransaction18 -> org.cyberpwn.react.afYn:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getWindowId() -> RcCL
    51:52:void setWindowId(byte) -> uOBF
    61:61:short getActionNumber() -> Thfl
    69:70:void setActionNumber(short) -> aehq
    79:79:boolean getAccepted() -> pixs
    87:88:void setAccepted(boolean) -> wUEt
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientUpdateSign -> org.cyberpwn.react.ndOC:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    54:55:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    63:63:java.lang.String[] getLines() -> getLines
    72:78:void setLines(java.lang.String[]) -> HnDD
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientUpdateSign18 -> org.cyberpwn.react.uNob:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    53:54:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    61:61:com.comphenix.protocol.wrappers.WrappedChatComponent[] getLines() -> YwyC
    69:75:void setLines(com.comphenix.protocol.wrappers.WrappedChatComponent[]) -> aehq
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientUseEntity -> org.cyberpwn.react.IhfC:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    34:36:void <init>() -> <init>
    39:40:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getTargetID() -> gVnR
    58:58:org.bukkit.entity.Entity getTarget(org.bukkit.World) -> Usfk
    68:68:org.bukkit.entity.Entity getTarget(com.comphenix.protocol.events.PacketEvent) -> CUak
    77:78:void setTargetID(int) -> HvTo
    86:86:com.comphenix.protocol.wrappers.EnumWrappers$EntityUseAction getType() -> maPp
    95:96:void setType(com.comphenix.protocol.wrappers.EnumWrappers$EntityUseAction) -> aehq
    106:106:org.bukkit.util.Vector getTargetVector() -> mOoK
    115:116:void setTargetVector(org.bukkit.util.Vector) -> aehq
    31:31:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientUseEntity18 -> org.cyberpwn.react.EeKI:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    34:36:void <init>() -> <init>
    39:40:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getTargetID() -> gVnR
    56:56:org.bukkit.entity.Entity getTarget(org.bukkit.World) -> Usfk
    65:65:org.bukkit.entity.Entity getTarget(com.comphenix.protocol.events.PacketEvent) -> CUak
    73:74:void setTargetID(int) -> HvTo
    81:81:com.comphenix.protocol.wrappers.EnumWrappers$EntityUseAction getType() -> maPp
    89:90:void setType(com.comphenix.protocol.wrappers.EnumWrappers$EntityUseAction) -> aehq
    100:100:org.bukkit.util.Vector getTargetVector() -> mOoK
    108:109:void setTargetVector(org.bukkit.util.Vector) -> aehq
    31:31:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientUseItem -> org.cyberpwn.react.CDrp:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    57:58:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    61:61:com.comphenix.protocol.wrappers.EnumWrappers$Direction getFace() -> YMdw
    65:66:void setFace(com.comphenix.protocol.wrappers.EnumWrappers$Direction) -> CUak
    69:69:com.comphenix.protocol.wrappers.EnumWrappers$Hand getHand() -> Tpwq
    73:74:void setHand(com.comphenix.protocol.wrappers.EnumWrappers$Hand) -> aehq
    85:85:float getCursorPositionX() -> GRAh
    94:95:void setCursorPositionX(float) -> uOBF
    106:106:float getCursorPositionY() -> Ywvv
    115:116:void setCursorPositionY(float) -> KvlK
    127:127:float getCursorPositionZ() -> OQGx
    136:137:void setCursorPositionZ(float) -> TOCT
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientVehicleMove -> org.cyberpwn.react.fTJG:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:double getX() -> getX
    54:55:void setX(double) -> setX
    65:65:double getY() -> getY
    74:75:void setY(double) -> setY
    85:85:double getZ() -> getZ
    94:95:void setZ(double) -> setZ
    105:105:float getYaw() -> getYaw
    114:115:void setYaw(float) -> setYaw
    125:125:float getPitch() -> getPitch
    134:135:void setPitch(float) -> setPitch
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientWindowClick -> org.cyberpwn.react.Aqpy:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:int getWindowId() -> RcCL
    55:56:void setWindowId(int) -> bXNR
    66:66:int getSlot() -> getSlot
    75:76:void setSlot(int) -> VwMV
    86:86:int getButton() -> getButton
    95:96:void setButton(int) -> aDHK
    107:107:short getActionNumber() -> Thfl
    116:117:void setActionNumber(short) -> aehq
    125:125:org.bukkit.inventory.ItemStack getClickedItem() -> WqpN
    134:135:void setClickedItem(org.bukkit.inventory.ItemStack) -> CUak
    138:138:react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType getShift() -> GkVA
    142:143:void setShift(react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType) -> aehq
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType -> org.cyberpwn.react.Aqpy$aehq:
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType PICKUP -> fnhT
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType QUICK_MOVE -> wEdh
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType SWAP -> SVOm
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType CLONE -> wowp
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType THROW -> DIcf
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType QUICK_CRAFT -> CWac
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType PICKUP_ALL -> DRTq
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType[] $VALUES -> tgPW
    145:145:react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType[] values() -> values
    145:145:react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType valueOf(java.lang.String) -> valueOf
    145:145:void <init>(java.lang.String,int) -> <init>
    145:146:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayClientWindowClick18 -> org.cyberpwn.react.Gbal:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:int getWindowId() -> RcCL
    53:54:void setWindowId(int) -> bXNR
    63:63:int getSlot() -> getSlot
    71:72:void setSlot(int) -> VwMV
    81:81:int getButton() -> getButton
    89:90:void setButton(int) -> aDHK
    99:99:short getActionNumber() -> Thfl
    107:108:void setActionNumber(short) -> aehq
    117:117:int getMode() -> getMode
    125:126:void setMode(int) -> setMode
    133:133:org.bukkit.inventory.ItemStack getClickedItem() -> WqpN
    141:142:void setClickedItem(org.bukkit.inventory.ItemStack) -> CUak
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerAbilities -> org.cyberpwn.react.fuks:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    37:37:boolean isInvulnurable() -> Aqpy
    41:42:void setInvulnurable(boolean) -> iCLi
    45:45:boolean isFlying() -> isFlying
    49:50:void setFlying(boolean) -> setFlying
    53:53:boolean canFly() -> Gbal
    57:58:void setCanFly(boolean) -> onqO
    61:61:boolean canInstantlyBuild() -> fuks
    65:66:void setCanInstantlyBuild(boolean) -> Usfk
    69:69:float getFlyingSpeed() -> BcsG
    73:74:void setFlyingSpeed(float) -> bNyW
    77:77:float getWalkingSpeed() -> maNs
    81:82:void setWalkingSpeed(float) -> xGHx
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerAbilities18 -> org.cyberpwn.react.BcsG:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    37:37:boolean isInvulnurable() -> Aqpy
    41:42:void setInvulnurable(boolean) -> iCLi
    45:45:boolean isFlying() -> isFlying
    49:50:void setFlying(boolean) -> setFlying
    53:53:boolean canFly() -> Gbal
    57:58:void setCanFly(boolean) -> onqO
    61:61:boolean canInstantlyBuild() -> fuks
    65:66:void setCanInstantlyBuild(boolean) -> Usfk
    69:69:float getFlyingSpeed() -> BcsG
    73:74:void setFlyingSpeed(float) -> bNyW
    77:77:float getWalkingSpeed() -> maNs
    81:82:void setWalkingSpeed(float) -> xGHx
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerAnimation -> org.cyberpwn.react.maNs:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getEntityID() -> DGuR
    57:58:void setEntityID(int) -> JYyE
    67:67:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    77:77:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    88:88:int getAnimation() -> HKuA
    97:98:void setAnimation(int) -> ieRS
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerAnimation18 -> org.cyberpwn.react.vIfN:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    55:56:void setEntityID(int) -> JYyE
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    73:73:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    83:83:int getAnimation() -> HKuA
    91:92:void setAnimation(int) -> ieRS
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerAttachEntity -> org.cyberpwn.react.DsKj:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getEntityID() -> DGuR
    57:58:void setEntityID(int) -> JYyE
    67:67:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    77:77:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    88:88:int getVehicleId() -> BdVB
    97:98:void setVehicleId(int) -> lejP
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerAttachEntity18 -> org.cyberpwn.react.ifCg:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    55:56:void setEntityID(int) -> JYyE
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    73:73:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    83:83:int getVehicleId() -> BdVB
    91:92:void setVehicleId(int) -> lejP
    99:99:boolean getLeash() -> pHWD
    107:108:void setLeash(boolean) -> PKGE
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerBed -> org.cyberpwn.react.Tpwq:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    49:49:int getEntityID() -> DGuR
    58:59:void setEntityID(int) -> JYyE
    68:68:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    78:78:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    89:89:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    98:99:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    30:30:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerBed18 -> org.cyberpwn.react.Thgi:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getEntityID() -> DGuR
    56:57:void setEntityID(int) -> JYyE
    65:65:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    74:74:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    84:84:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    92:93:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    30:30:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerBlockAction -> org.cyberpwn.react.GRAh:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    56:57:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    67:67:int getByte1() -> kkjm
    76:77:void setByte1(int) -> hQNB
    87:87:int getByte2() -> dDtP
    96:97:void setByte2(int) -> WXLq
    107:107:org.bukkit.Material getBlockType() -> nmEL
    116:117:void setBlockType(org.bukkit.Material) -> aehq
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerBlockAction18 -> org.cyberpwn.react.Ywvv:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    54:55:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    64:64:int getByte1() -> kkjm
    72:73:void setByte1(int) -> hQNB
    82:82:int getByte2() -> dDtP
    90:91:void setByte2(int) -> WXLq
    100:100:org.bukkit.Material getBlockType() -> nmEL
    108:109:void setBlockType(org.bukkit.Material) -> aehq
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerBlockBreakAnimation -> org.cyberpwn.react.OQGx:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    34:36:void <init>() -> <init>
    39:40:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    50:50:int getEntityID() -> DGuR
    59:60:void setEntityID(int) -> JYyE
    69:69:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    79:79:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    90:90:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    99:100:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    110:110:int getDestroyStage() -> FhSH
    119:120:void setDestroyStage(int) -> ogCe
    30:30:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerBlockBreakAnimation18 -> org.cyberpwn.react.eHUi:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getEntityID() -> DGuR
    56:57:void setEntityID(int) -> JYyE
    65:65:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    74:74:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    84:84:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    92:93:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    102:102:int getDestroyStage() -> FhSH
    110:111:void setDestroyStage(int) -> ogCe
    30:30:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerBlockChange -> org.cyberpwn.react.dwuy:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    49:49:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    58:59:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    68:68:org.bukkit.Location getBukkitLocation(org.bukkit.World) -> DaVD
    77:77:com.comphenix.protocol.wrappers.WrappedBlockData getBlockData() -> LrUM
    86:87:void setBlockData(com.comphenix.protocol.wrappers.WrappedBlockData) -> aehq
    30:30:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerBlockChange18 -> org.cyberpwn.react.lMIs:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    56:57:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    65:65:org.bukkit.Location getBukkitLocation(org.bukkit.World) -> DaVD
    73:73:com.comphenix.protocol.wrappers.WrappedBlockData getBlockData() -> LrUM
    81:82:void setBlockData(com.comphenix.protocol.wrappers.WrappedBlockData) -> aehq
    30:30:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCamera -> org.cyberpwn.react.RcCL:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:int getCameraId() -> gqBD
    51:52:void setCameraId(int) -> xiLr
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCamera18 -> org.cyberpwn.react.PTLA:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    41:41:int getCameraId() -> gqBD
    49:50:void setCameraId(int) -> xiLr
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerChat -> org.cyberpwn.react.YUsk:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:com.comphenix.protocol.wrappers.WrappedChatComponent getMessage() -> oxXW
    53:53:com.comphenix.protocol.wrappers.WrappedChatComponent getJsonData() -> fTJG
    62:63:void setMessage(com.comphenix.protocol.wrappers.WrappedChatComponent) -> HnDD
    70:71:void setJsonData(com.comphenix.protocol.wrappers.WrappedChatComponent) -> CUak
    82:82:byte getPosition() -> ogWH
    91:92:void setPosition(byte) -> TOCT
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerChat18 -> org.cyberpwn.react.VDXr:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:com.comphenix.protocol.wrappers.WrappedChatComponent getMessage() -> oxXW
    52:52:com.comphenix.protocol.wrappers.WrappedChatComponent getJsonData() -> fTJG
    60:61:void setMessage(com.comphenix.protocol.wrappers.WrappedChatComponent) -> HnDD
    68:69:void setJsonData(com.comphenix.protocol.wrappers.WrappedChatComponent) -> CUak
    78:78:byte getPosition() -> ogWH
    86:87:void setPosition(byte) -> TOCT
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCloseWindow -> org.cyberpwn.react.DGuR:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getWindowId() -> RcCL
    53:54:void setWindowId(int) -> bXNR
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCloseWindow18 -> org.cyberpwn.react.xPKh:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getWindowId() -> RcCL
    51:52:void setWindowId(int) -> bXNR
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCollect -> org.cyberpwn.react.NpFd:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:int getCollectedEntityId() -> nRpx
    51:52:void setCollectedEntityId(int) -> VvmG
    60:60:int getCollectorEntityId() -> CNHU
    69:70:void setCollectorEntityId(int) -> CgFT
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCollect18 -> org.cyberpwn.react.qujb:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    41:41:int getCollectedEntityId() -> nRpx
    49:50:void setCollectedEntityId(int) -> VvmG
    57:57:int getCollectorEntityId() -> CNHU
    65:66:void setCollectorEntityId(int) -> CgFT
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCombatEvent -> org.cyberpwn.react.pbGT:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:com.comphenix.protocol.wrappers.EnumWrappers$CombatEventType getEvent() -> gWMv
    56:57:void setEvent(com.comphenix.protocol.wrappers.EnumWrappers$CombatEventType) -> aehq
    62:66:int getDuration() -> getDuration
    70:75:void setDuration(int) -> setDuration
    80:84:int getPlayerID() -> ObKG
    88:93:void setPlayerId(int) -> uVqT
    96:102:int getEntityID() -> DGuR
    109:115:void setEntityId(int) -> Nfdb
    122:126:java.lang.String getMessage() -> getMessage
    130:135:void setMessage(java.lang.String) -> setMessage
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCombatEvent$1 -> org.cyberpwn.react.pbGT$1:
    int[] $SwitchMap$com$comphenix$protocol$wrappers$EnumWrappers$CombatEventType -> ffVv
    97:97:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCombatEvent18 -> org.cyberpwn.react.hHlh:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:com.comphenix.protocol.wrappers.EnumWrappers$CombatEventType getEvent() -> gWMv
    56:57:void setEvent(com.comphenix.protocol.wrappers.EnumWrappers$CombatEventType) -> aehq
    62:65:int getDuration() -> getDuration
    69:73:void setDuration(int) -> setDuration
    78:81:int getPlayerID() -> ObKG
    85:89:void setPlayerId(int) -> uVqT
    92:98:int getEntityID() -> DGuR
    104:110:void setEntityId(int) -> Nfdb
    116:119:java.lang.String getMessage() -> getMessage
    123:127:void setMessage(java.lang.String) -> setMessage
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCombatEvent18$1 -> org.cyberpwn.react.hHlh$1:
    int[] $SwitchMap$com$comphenix$protocol$wrappers$EnumWrappers$CombatEventType -> ffVv
    93:93:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCraftProgressBar18 -> org.cyberpwn.react.WqpN:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:int getWindowId() -> RcCL
    57:58:void setWindowId(int) -> bXNR
    69:69:int getProperty() -> PdmA
    80:81:void setProperty(int) -> BlSs
    92:92:int getValue() -> getValue
    103:104:void setValue(int) -> setValue
    24:24:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCustomPayload -> org.cyberpwn.react.aLhy:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:java.lang.String getChannel() -> getChannel
    56:57:void setChannel(java.lang.String) -> vQdn
    65:65:io.netty.buffer.ByteBuf getContentsBuffer() -> PTLA
    74:77:byte[] getContents() -> YUsk
    86:92:void setContentsBuffer(io.netty.buffer.ByteBuf) -> aehq
    100:101:void setContents(byte[]) -> HnDD
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCustomPayload18 -> org.cyberpwn.react.MdRr:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:java.lang.String getChannel() -> getChannel
    54:55:void setChannel(java.lang.String) -> vQdn
    63:63:io.netty.buffer.ByteBuf getContentsBuffer() -> PTLA
    72:72:byte[] getContents() -> YUsk
    81:82:void setContentsBuffer(io.netty.buffer.ByteBuf) -> aehq
    90:91:void setContents(byte[]) -> HnDD
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerCustomSoundEffect -> org.cyberpwn.react.qeIU:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:java.lang.String getSoundName() -> miaA
    56:57:void setSoundName(java.lang.String) -> uyVS
    68:68:com.comphenix.protocol.wrappers.EnumWrappers$SoundCategory getSoundCategory() -> CMfj
    77:78:void setSoundCategory(com.comphenix.protocol.wrappers.EnumWrappers$SoundCategory) -> aehq
    89:89:int getX() -> getX
    98:99:void setX(int) -> setX
    110:110:int getY() -> getY
    119:120:void setY(int) -> setY
    131:131:int getZ() -> getZ
    140:141:void setZ(int) -> setZ
    151:151:float getVolume() -> uhfW
    160:161:void setVolume(float) -> IODN
    171:171:float getPitch() -> getPitch
    180:181:void setPitch(float) -> setPitch
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntity -> org.cyberpwn.react.VnmQ:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getEntityID() -> DGuR
    57:58:void setEntityID(int) -> JYyE
    67:67:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    77:77:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntity18 -> org.cyberpwn.react.ktYT:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    55:56:void setEntityID(int) -> JYyE
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    73:73:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityDestroy -> org.cyberpwn.react.loLN:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getCount() -> getCount
    55:55:int[] getEntityIDs() -> imsq
    64:65:void setEntityIds(int[]) -> aehq
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityDestroy18 -> org.cyberpwn.react.HTcL:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getCount() -> getCount
    53:53:int[] getEntityIDs() -> imsq
    61:62:void setEntityIds(int[]) -> aehq
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityEffect -> org.cyberpwn.react.xOjb:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getEntityID() -> DGuR
    57:58:void setEntityID(int) -> JYyE
    67:67:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    77:77:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    88:88:byte getEffectID() -> mrQR
    97:98:void setEffectID(byte) -> HvTU
    106:106:byte getAmplifier() -> xPMW
    115:116:void setAmplifier(byte) -> XIlb
    124:124:int getDuration() -> getDuration
    133:134:void setDuration(int) -> setDuration
    142:142:boolean getHideParticles() -> bYAB
    151:152:void setHideParticles(boolean) -> CDaB
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityEffect18 -> org.cyberpwn.react.oDpF:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    55:56:void setEntityID(int) -> JYyE
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    73:73:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    83:83:byte getEffectID() -> mrQR
    91:92:void setEffectID(byte) -> HvTU
    99:99:byte getAmplifier() -> xPMW
    107:108:void setAmplifier(byte) -> XIlb
    115:115:int getDuration() -> getDuration
    123:124:void setDuration(int) -> setDuration
    131:131:boolean getHideParticles() -> bYAB
    139:140:void setHideParticles(boolean) -> CDaB
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityEquipment -> org.cyberpwn.react.SnTu:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    35:37:void <init>() -> <init>
    40:41:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    51:51:int getEntityID() -> DGuR
    60:61:void setEntityID(int) -> JYyE
    70:70:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    80:80:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    84:84:com.comphenix.protocol.wrappers.EnumWrappers$ItemSlot getSlot() -> vlIt
    88:89:void setSlot(com.comphenix.protocol.wrappers.EnumWrappers$ItemSlot) -> aehq
    99:99:org.bukkit.inventory.ItemStack getItem() -> getItem
    108:109:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    31:31:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityEquipment18 -> org.cyberpwn.react.YpFe:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getEntityID() -> DGuR
    56:57:void setEntityID(int) -> JYyE
    65:65:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    74:74:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    84:84:int getSlot() -> getSlot
    92:93:void setSlot(int) -> VwMV
    102:102:org.bukkit.inventory.ItemStack getItem() -> getItem
    110:111:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    30:30:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityHeadRotation -> org.cyberpwn.react.Thfl:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    49:49:int getEntityID() -> DGuR
    58:59:void setEntityID(int) -> JYyE
    68:68:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    78:78:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    89:89:byte getHeadYaw() -> tDAT
    98:99:void setHeadYaw(byte) -> IODN
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityHeadRotation18 -> org.cyberpwn.react.pixs:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    55:56:void setEntityID(int) -> JYyE
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    73:73:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    83:83:byte getHeadYaw() -> tDAT
    91:92:void setHeadYaw(byte) -> IODN
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityLook -> org.cyberpwn.react.YwyC:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getEntityID() -> DGuR
    57:58:void setEntityID(int) -> JYyE
    67:67:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    77:77:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    86:86:float getYaw() -> getYaw
    95:96:void setYaw(float) -> setYaw
    104:104:float getPitch() -> getPitch
    113:114:void setPitch(float) -> setPitch
    122:122:boolean getOnGround() -> qujb
    131:132:void setOnGround(boolean) -> wUFa
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityLook18 -> org.cyberpwn.react.gVnR:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    55:56:void setEntityID(int) -> JYyE
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    73:73:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    81:81:float getYaw() -> getYaw
    89:90:void setYaw(float) -> setYaw
    97:97:float getPitch() -> getPitch
    105:106:void setPitch(float) -> setPitch
    113:113:boolean getOnGround() -> qujb
    121:122:void setOnGround(boolean) -> wUFa
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityMetadata -> org.cyberpwn.react.maPp:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    36:38:void <init>() -> <init>
    41:42:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    52:52:int getEntityID() -> DGuR
    61:62:void setEntityID(int) -> JYyE
    71:71:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    81:81:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    90:90:java.util.List getMetadata() -> getMetadata
    99:100:void setMetadata(java.util.List) -> setMetadata
    32:32:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityMetadata18 -> org.cyberpwn.react.mOoK:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    35:37:void <init>() -> <init>
    40:41:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    50:50:int getEntityID() -> DGuR
    58:59:void setEntityID(int) -> JYyE
    67:67:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    76:76:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    84:84:java.util.List getMetadata() -> getMetadata
    92:93:void setMetadata(java.util.List) -> setMetadata
    32:32:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityMoveLook18 -> org.cyberpwn.react.YMdw:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    49:49:int getEntityID() -> DGuR
    60:61:void setEntityID(int) -> JYyE
    72:72:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    84:84:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    94:94:double getDx() -> wKwg
    105:106:void setDx(double) -> KvlK
    115:115:double getDy() -> WrBa
    126:127:void setDy(double) -> TOCT
    136:136:double getDz() -> avmr
    147:148:void setDz(double) -> HvTU
    157:157:float getYaw() -> getYaw
    168:169:void setYaw(float) -> setYaw
    178:178:float getPitch() -> getPitch
    189:190:void setPitch(float) -> setPitch
    199:199:boolean getOnGround() -> qujb
    210:211:void setOnGround(boolean) -> wUFa
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityStatus -> org.cyberpwn.react.GkVA:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getEntityID() -> DGuR
    57:58:void setEntityID(int) -> JYyE
    67:67:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    77:77:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    88:88:byte getEntityStatus() -> sHly
    97:98:void setEntityStatus(byte) -> Txum
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityStatus18 -> org.cyberpwn.react.HKuA:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    55:56:void setEntityID(int) -> JYyE
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    73:73:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    83:83:byte getEntityStatus() -> sHly
    91:92:void setEntityStatus(byte) -> Txum
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityTeleport -> org.cyberpwn.react.BdVB:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    56:57:void setEntityID(int) -> JYyE
    66:66:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    76:76:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    80:80:double getX() -> getX
    84:85:void setX(double) -> setX
    88:88:double getY() -> getY
    92:93:void setY(double) -> setY
    96:96:double getZ() -> getZ
    100:101:void setZ(double) -> setZ
    109:109:float getYaw() -> getYaw
    118:119:void setYaw(float) -> setYaw
    127:127:float getPitch() -> getPitch
    136:137:void setPitch(float) -> setPitch
    140:140:boolean getOnGround() -> qujb
    144:145:void setOnGround(boolean) -> wUFa
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityTeleport18 -> org.cyberpwn.react.pHWD:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:int getEntityID() -> DGuR
    53:54:void setEntityID(int) -> JYyE
    62:62:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    71:71:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    81:81:double getX() -> getX
    89:90:void setX(double) -> setX
    99:99:double getY() -> getY
    107:108:void setY(double) -> setY
    117:117:double getZ() -> getZ
    125:126:void setZ(double) -> setZ
    133:133:float getYaw() -> getYaw
    141:142:void setYaw(float) -> setYaw
    149:149:float getPitch() -> getPitch
    157:158:void setPitch(float) -> setPitch
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityVelocity -> org.cyberpwn.react.kkjm:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    49:49:int getEntityID() -> DGuR
    58:59:void setEntityID(int) -> JYyE
    68:68:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    78:78:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    87:87:double getVelocityX() -> MBRY
    96:97:void setVelocityX(double) -> xGGs
    105:105:double getVelocityY() -> Knof
    114:115:void setVelocityY(double) -> wUFa
    123:123:double getVelocityZ() -> uXFR
    132:133:void setVelocityZ(double) -> jWQb
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerEntityVelocity18 -> org.cyberpwn.react.dDtP:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    55:56:void setEntityID(int) -> JYyE
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    73:73:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    81:81:double getVelocityX() -> MBRY
    89:90:void setVelocityX(double) -> xGGs
    97:97:double getVelocityY() -> Knof
    105:106:void setVelocityY(double) -> wUFa
    113:113:double getVelocityZ() -> uXFR
    121:122:void setVelocityZ(double) -> jWQb
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerExperience -> org.cyberpwn.react.nmEL:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:float getExperienceBar() -> brRS
    53:54:void setExperienceBar(float) -> Txum
    62:62:int getLevel() -> getLevel
    71:72:void setLevel(int) -> setLevel
    80:80:int getTotalExperience() -> getTotalExperience
    89:90:void setTotalExperience(int) -> setTotalExperience
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerExperience18 -> org.cyberpwn.react.FhSH:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:float getExperienceBar() -> brRS
    51:52:void setExperienceBar(float) -> Txum
    59:59:int getLevel() -> getLevel
    67:68:void setLevel(int) -> setLevel
    75:75:int getTotalExperience() -> getTotalExperience
    83:84:void setTotalExperience(int) -> setTotalExperience
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerExplosion -> org.cyberpwn.react.LrUM:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:double getX() -> getX
    54:55:void setX(double) -> setX
    63:63:double getY() -> getY
    72:73:void setY(double) -> setY
    81:81:double getZ() -> getZ
    90:91:void setZ(double) -> setZ
    101:101:float getRadius() -> getRadius
    110:111:void setRadius(float) -> setRadius
    121:121:java.util.List getRecors() -> INyT
    130:131:void setRecords(java.util.List) -> bNyW
    134:134:float getPlayerVelocityX() -> agAi
    138:139:void setPlayerVelocityX(float) -> qcud
    142:142:float getPlayerVelocityY() -> Lidn
    146:147:void setPlayerVelocityY(float) -> VLWr
    150:150:float getPlayerVelocityZ() -> AHBv
    154:155:void setPlayerVelocityZ(float) -> YMQO
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerExplosion18 -> org.cyberpwn.react.gqBD:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:double getX() -> getX
    52:53:void setX(double) -> setX
    60:60:double getY() -> getY
    68:69:void setY(double) -> setY
    76:76:double getZ() -> getZ
    84:85:void setZ(double) -> setZ
    94:94:float getRadius() -> getRadius
    102:103:void setRadius(float) -> setRadius
    112:112:java.util.List getRecors() -> INyT
    120:121:void setRecords(java.util.List) -> bNyW
    124:124:float getPlayerVelocityX() -> agAi
    128:129:void setPlayerVelocityX(float) -> qcud
    132:132:float getPlayerVelocityY() -> Lidn
    136:137:void setPlayerVelocityY(float) -> VLWr
    140:140:float getPlayerVelocityZ() -> AHBv
    144:145:void setPlayerVelocityZ(float) -> YMQO
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerGameStateChange -> org.cyberpwn.react.oxXW:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getReason() -> getReason
    52:53:void setReason(int) -> EKIY
    63:63:float getValue() -> getValue
    72:73:void setValue(float) -> setValue
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerGameStateChange18 -> org.cyberpwn.react.ogWH:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    41:41:int getReason() -> getReason
    49:50:void setReason(int) -> EKIY
    59:59:float getValue() -> getValue
    67:68:void setValue(float) -> setValue
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerHeldItemSlot -> org.cyberpwn.react.nRpx:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getSlot() -> getSlot
    53:54:void setSlot(int) -> VwMV
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerHeldItemSlot18 -> org.cyberpwn.react.CNHU:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getSlot() -> getSlot
    51:52:void setSlot(int) -> VwMV
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerKeepAlive -> org.cyberpwn.react.gWMv:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:int getKeepAliveId() -> pbGT
    51:52:void setKeepAliveId(int) -> Ushu
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerKeepAlive18 -> org.cyberpwn.react.ObKG:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    41:41:int getKeepAliveId() -> pbGT
    49:50:void setKeepAliveId(int) -> Ushu
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerKickDisconnect -> org.cyberpwn.react.PdmA:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:com.comphenix.protocol.wrappers.WrappedChatComponent getReason() -> CDrp
    56:57:void setReason(com.comphenix.protocol.wrappers.WrappedChatComponent) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerKickDisconnect18 -> org.cyberpwn.react.miaA:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:com.comphenix.protocol.wrappers.WrappedChatComponent getReason() -> CDrp
    52:53:void setReason(com.comphenix.protocol.wrappers.WrappedChatComponent) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerLogin -> org.cyberpwn.react.CMfj:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    35:37:void <init>() -> <init>
    40:41:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    51:51:int getEntityID() -> DGuR
    60:61:void setEntityID(int) -> JYyE
    70:70:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    80:80:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    92:92:com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode getGamemode() -> MBTl
    101:102:void setGamemode(com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode) -> aehq
    112:112:int getDimension() -> getDimension
    121:122:void setDimension(int) -> setDimension
    132:132:com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> tfHU
    141:142:void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> aehq
    152:152:int getMaxPlayers() -> getMaxPlayers
    161:162:void setMaxPlayers(int) -> setMaxPlayers
    172:172:org.bukkit.WorldType getLevelType() -> YpJy
    181:182:void setLevelType(org.bukkit.WorldType) -> aehq
    190:190:boolean getReducedDebugInfo() -> NMhR
    199:200:void setReducedDebugInfo(boolean) -> inAK
    32:32:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerLogin18 -> org.cyberpwn.react.uhfW:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    35:37:void <init>() -> <init>
    40:41:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    50:50:int getEntityID() -> DGuR
    58:59:void setEntityID(int) -> JYyE
    67:67:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    76:76:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    86:86:com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode getGamemode() -> MBTl
    94:95:void setGamemode(com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode) -> aehq
    104:104:int getDimension() -> getDimension
    112:113:void setDimension(int) -> setDimension
    122:122:com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> tfHU
    130:131:void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> aehq
    140:140:int getMaxPlayers() -> getMaxPlayers
    148:149:void setMaxPlayers(int) -> setMaxPlayers
    158:158:org.bukkit.WorldType getLevelType() -> YpJy
    166:167:void setLevelType(org.bukkit.WorldType) -> aehq
    174:174:boolean getReducedDebugInfo() -> NMhR
    182:183:void setReducedDebugInfo(boolean) -> inAK
    32:32:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerMap -> org.cyberpwn.react.imsq:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getItemDamage() -> nSTk
    53:54:void setItemDamage(int) -> qlgy
    62:62:byte getScale() -> AHBh
    71:72:void setScale(byte) -> qcud
    75:75:boolean getTrackingPosition() -> AXcT
    79:80:void setTrackingPosition(boolean) -> awND
    83:83:java.lang.Object[] getMapIcons() -> twIG
    87:88:void setMapIcons(java.lang.Object[]) -> aehq
    91:91:int getColumns() -> getColumns
    95:96:void setColumns(int) -> setColumns
    99:99:int getRows() -> getRows
    103:104:void setRows(int) -> setRows
    107:107:int getX() -> getX
    111:112:void setX(int) -> setX
    115:115:int getZ() -> getZ
    119:120:void setZ(int) -> setZ
    123:123:byte[] getData() -> getData
    127:128:void setData(byte[]) -> setData
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerMap18 -> org.cyberpwn.react.mrQR:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getItemDamage() -> nSTk
    51:52:void setItemDamage(int) -> qlgy
    59:59:byte getScale() -> AHBh
    67:68:void setScale(byte) -> qcud
    71:71:java.lang.Object[] getMapIcons() -> twIG
    75:76:void setMapIcons(java.lang.Object[]) -> aehq
    79:79:int getColumns() -> getColumns
    83:84:void setColumns(int) -> setColumns
    87:87:int getRows() -> getRows
    91:92:void setRows(int) -> setRows
    95:95:int getX() -> getX
    99:100:void setX(int) -> setX
    103:103:int getZ() -> getZ
    107:108:void setZ(int) -> setZ
    111:111:byte[] getData() -> getData
    115:116:void setData(byte[]) -> setData
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerMapChunk -> org.cyberpwn.react.xPMW:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getChunkX() -> getChunkX
    53:54:void setChunkX(int) -> jgtA
    64:64:int getChunkZ() -> getChunkZ
    73:74:void setChunkZ(int) -> bWlH
    77:77:java.lang.Object getChunkMap() -> jhiv
    81:82:void setChunkMap(java.lang.Object) -> onqO
    94:94:boolean getGroundUpContinuous() -> rhQi
    103:104:void setGroundUpContinuous(boolean) -> qmKF
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerMapChunk18 -> org.cyberpwn.react.bYAB:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getChunkX() -> getChunkX
    51:52:void setChunkX(int) -> jgtA
    61:61:int getChunkZ() -> getChunkZ
    69:70:void setChunkZ(int) -> bWlH
    73:73:java.lang.Object getChunkMap() -> jhiv
    77:78:void setChunkMap(java.lang.Object) -> onqO
    87:87:boolean getGroundUpContinuous() -> rhQi
    95:96:void setGroundUpContinuous(boolean) -> qmKF
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerMapChunkBulk18 -> org.cyberpwn.react.vlIt:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int[] getChunksX() -> VnrN
    55:56:void setChunksX(int[]) -> CUak
    65:65:int[] getChunksZ() -> nctl
    76:77:void setChunksZ(int[]) -> HnDD
    81:81:java.lang.Object[] getChunks() -> PdpW
    86:87:void setChunks(java.lang.Object[]) -> CUak
    99:99:boolean isSkyLightSent() -> iDEY
    110:111:void setSkyLightSent(boolean) -> TWTu
    24:24:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerMount -> org.cyberpwn.react.tDAT:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    38:40:void <init>() -> <init>
    43:44:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    54:54:int getEntityID() -> DGuR
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    74:74:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    83:84:void setEntityID(int) -> JYyE
    87:87:int[] getPassengerIds() -> jNwH
    91:92:void setPassengerIds(int[]) -> bNyW
    95:95:java.util.List getPassengers(com.comphenix.protocol.events.PacketEvent) -> HnDD
    99:110:java.util.List getPassengers(org.bukkit.World) -> xGGs
    114:120:void setPassengers(java.util.List) -> xGHx
    35:35:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerMultiBlockChange -> org.cyberpwn.react.sHly:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:com.comphenix.protocol.wrappers.ChunkCoordIntPair getChunk() -> getChunk
    54:55:void setChunk(com.comphenix.protocol.wrappers.ChunkCoordIntPair) -> aehq
    63:63:com.comphenix.protocol.wrappers.MultiBlockChangeInfo[] getRecords() -> inXG
    72:73:void setRecords(com.comphenix.protocol.wrappers.MultiBlockChangeInfo[]) -> aehq
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerMultiBlockChange18 -> org.cyberpwn.react.MBRY:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:com.comphenix.protocol.wrappers.ChunkCoordIntPair getChunk() -> getChunk
    51:52:void setChunk(com.comphenix.protocol.wrappers.ChunkCoordIntPair) -> aehq
    59:59:com.comphenix.protocol.wrappers.MultiBlockChangeInfo[] getRecords() -> inXG
    67:68:void setRecords(com.comphenix.protocol.wrappers.MultiBlockChangeInfo[]) -> aehq
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerNamedEntitySpawn -> org.cyberpwn.react.Knof:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    37:39:void <init>() -> <init>
    42:43:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    53:53:int getEntityID() -> DGuR
    62:63:void setEntityID(int) -> JYyE
    72:72:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    82:82:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    93:93:java.util.UUID getPlayerUUID() -> bqrn
    102:103:void setPlayerUUID(java.util.UUID) -> CUak
    111:111:org.bukkit.util.Vector getPosition() -> yuUw
    120:123:void setPosition(org.bukkit.util.Vector) -> CUak
    126:126:double getX() -> getX
    130:131:void setX(double) -> setX
    134:134:double getY() -> getY
    138:139:void setY(double) -> setY
    142:142:double getZ() -> getZ
    146:147:void setZ(double) -> setZ
    155:155:float getYaw() -> getYaw
    164:165:void setYaw(float) -> setYaw
    173:173:float getPitch() -> getPitch
    182:183:void setPitch(float) -> setPitch
    193:193:com.comphenix.protocol.wrappers.WrappedDataWatcher getMetadata() -> Vwan
    202:203:void setMetadata(com.comphenix.protocol.wrappers.WrappedDataWatcher) -> aehq
    33:33:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerNamedEntitySpawn18 -> org.cyberpwn.react.uXFR:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    36:38:void <init>() -> <init>
    41:42:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    51:51:int getEntityID() -> DGuR
    59:60:void setEntityID(int) -> JYyE
    68:68:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    77:77:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    87:87:java.util.UUID getPlayerUUID() -> bqrn
    95:96:void setPlayerUUID(java.util.UUID) -> CUak
    103:103:org.bukkit.util.Vector getPosition() -> yuUw
    111:114:void setPosition(org.bukkit.util.Vector) -> CUak
    123:123:double getX() -> getX
    131:132:void setX(double) -> setX
    141:141:double getY() -> getY
    149:150:void setY(double) -> setY
    159:159:double getZ() -> getZ
    167:168:void setZ(double) -> setZ
    175:175:float getYaw() -> getYaw
    183:184:void setYaw(float) -> setYaw
    191:191:float getPitch() -> getPitch
    199:200:void setPitch(float) -> setPitch
    209:209:int getCurrentItem() -> WPPy
    217:218:void setCurrentItem(int) -> Oigg
    227:227:com.comphenix.protocol.wrappers.WrappedDataWatcher getMetadata() -> Vwan
    235:236:void setMetadata(com.comphenix.protocol.wrappers.WrappedDataWatcher) -> aehq
    33:33:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerNamedSoundEffect -> org.cyberpwn.react.brRS:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    41:41:org.bukkit.Sound getSoundEffect() -> Orls
    45:46:void setSoundEffect(org.bukkit.Sound) -> aehq
    49:49:com.comphenix.protocol.wrappers.EnumWrappers$SoundCategory getSoundCategory() -> CMfj
    53:54:void setSoundCategory(com.comphenix.protocol.wrappers.EnumWrappers$SoundCategory) -> aehq
    64:64:int getEffectPositionX() -> DGye
    73:74:void setEffectPositionX(int) -> TqHC
    84:84:int getEffectPositionY() -> eXyc
    93:94:void setEffectPositionY(int) -> eaYL
    104:104:int getEffectPositionZ() -> pXwv
    113:114:void setEffectPositionZ(int) -> Ixyp
    124:124:float getVolume() -> uhfW
    133:134:void setVolume(float) -> IODN
    144:144:float getPitch() -> getPitch
    153:154:void setPitch(float) -> setPitch
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerNamedSoundEffect18 -> org.cyberpwn.react.INyT:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    41:41:java.lang.String getSoundName() -> miaA
    49:50:void setSoundName(java.lang.String) -> uyVS
    59:59:int getEffectPositionX() -> DGye
    67:68:void setEffectPositionX(int) -> TqHC
    77:77:int getEffectPositionY() -> eXyc
    85:86:void setEffectPositionY(int) -> eaYL
    95:95:int getEffectPositionZ() -> pXwv
    103:104:void setEffectPositionZ(int) -> Ixyp
    113:113:float getVolume() -> uhfW
    121:122:void setVolume(float) -> IODN
    131:131:int getPitch() -> Fpck
    139:140:void setPitch(byte) -> VLWr
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerOpenSignEditor -> org.cyberpwn.react.agAi:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    54:55:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerOpenSignEntity18 -> org.cyberpwn.react.Lidn:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    58:59:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerOpenWindow -> org.cyberpwn.react.AHBv:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    50:50:int getWindowID() -> SCeH
    59:60:void setWindowID(int) -> EmNl
    70:70:java.lang.String getInventoryType() -> feOJ
    79:80:void setInventoryType(java.lang.String) -> DPXC
    90:90:com.comphenix.protocol.wrappers.WrappedChatComponent getWindowTitle() -> Ywyw
    99:100:void setWindowTitle(com.comphenix.protocol.wrappers.WrappedChatComponent) -> bNyW
    111:111:int getNumberOfSlots() -> IFiF
    120:121:void setNumberOfSlots(int) -> DGhM
    131:131:int getEntityID() -> DGuR
    140:141:void setEntityID(int) -> JYyE
    150:150:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    160:160:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    30:30:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerOpenWindow18 -> org.cyberpwn.react.MBTl:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getWindowID() -> SCeH
    56:57:void setWindowID(int) -> EmNl
    66:66:java.lang.String getInventoryType() -> feOJ
    74:75:void setInventoryType(java.lang.String) -> DPXC
    84:84:com.comphenix.protocol.wrappers.WrappedChatComponent getWindowTitle() -> Ywyw
    92:93:void setWindowTitle(com.comphenix.protocol.wrappers.WrappedChatComponent) -> bNyW
    102:102:int getNumberOfSlots() -> IFiF
    110:111:void setNumberOfSlots(int) -> DGhM
    120:120:int getEntityID() -> DGuR
    128:129:void setEntityID(int) -> JYyE
    137:137:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    146:146:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    30:30:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerPlayerInfo -> org.cyberpwn.react.tfHU:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    41:41:com.comphenix.protocol.wrappers.EnumWrappers$PlayerInfoAction getAction() -> SKuY
    45:46:void setAction(com.comphenix.protocol.wrappers.EnumWrappers$PlayerInfoAction) -> aehq
    49:49:java.util.List getData() -> UJLS
    53:54:void setData(java.util.List) -> uOBF
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerPlayerInfo18 -> org.cyberpwn.react.YpJy:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    41:41:com.comphenix.protocol.wrappers.EnumWrappers$PlayerInfoAction getAction() -> SKuY
    45:46:void setAction(com.comphenix.protocol.wrappers.EnumWrappers$PlayerInfoAction) -> aehq
    49:49:java.util.List getData() -> UJLS
    53:54:void setData(java.util.List) -> uOBF
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerPlayerListHeaderFooter -> org.cyberpwn.react.NMhR:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:com.comphenix.protocol.wrappers.WrappedChatComponent getHeader() -> HvjU
    53:54:void setHeader(com.comphenix.protocol.wrappers.WrappedChatComponent) -> xGHx
    62:62:com.comphenix.protocol.wrappers.WrappedChatComponent getFooter() -> dpJQ
    71:72:void setFooter(com.comphenix.protocol.wrappers.WrappedChatComponent) -> uOBF
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerPlayerListHeaderFooter18 -> org.cyberpwn.react.nSTk:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:com.comphenix.protocol.wrappers.WrappedChatComponent getHeader() -> HvjU
    50:51:void setHeader(com.comphenix.protocol.wrappers.WrappedChatComponent) -> xGHx
    58:58:com.comphenix.protocol.wrappers.WrappedChatComponent getFooter() -> dpJQ
    66:67:void setFooter(com.comphenix.protocol.wrappers.WrappedChatComponent) -> uOBF
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerPosition -> org.cyberpwn.react.AHBh:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    java.lang.Class FLAGS_CLASS -> rqje
    34:36:void <init>() -> <init>
    39:40:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    50:50:double getX() -> getX
    59:60:void setX(double) -> setX
    70:70:double getY() -> getY
    79:80:void setY(double) -> setY
    90:90:double getZ() -> getZ
    99:100:void setZ(double) -> setZ
    110:110:float getYaw() -> getYaw
    119:120:void setYaw(float) -> setYaw
    130:130:float getPitch() -> getPitch
    139:140:void setPitch(float) -> setPitch
    151:154:com.comphenix.protocol.reflect.StructureModifier getFlagsModifier() -> tnWH
    158:158:java.util.Set getFlags() -> HeiI
    162:163:void setFlags(java.util.Set) -> aehq
    31:143:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag -> org.cyberpwn.react.AHBh$aehq:
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag X -> EMHR
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag Y -> HUos
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag Z -> ekeY
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag Y_ROT -> pQqR
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag X_ROT -> hAhv
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag[] $VALUES -> xIHb
    146:146:react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag[] values() -> values
    146:146:react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag valueOf(java.lang.String) -> valueOf
    146:146:void <init>(java.lang.String,int) -> <init>
    146:147:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerPosition18 -> org.cyberpwn.react.AXcT:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    java.lang.Class FLAGS_CLASS -> rqje
    34:36:void <init>() -> <init>
    39:40:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    49:49:double getX() -> getX
    57:58:void setX(double) -> setX
    67:67:double getY() -> getY
    75:76:void setY(double) -> setY
    85:85:double getZ() -> getZ
    93:94:void setZ(double) -> setZ
    103:103:float getYaw() -> getYaw
    111:112:void setYaw(float) -> setYaw
    121:121:float getPitch() -> getPitch
    129:130:void setPitch(float) -> setPitch
    144:145:com.comphenix.protocol.reflect.StructureModifier getFlagsModifier() -> tnWH
    149:149:java.util.Set getFlags() -> HeiI
    153:154:void setFlags(java.util.Set) -> aehq
    31:132:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag -> org.cyberpwn.react.AXcT$aehq:
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag X -> THRV
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag Y -> PoIO
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag Z -> GBJs
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag Y_ROT -> qets
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag X_ROT -> qTsn
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag[] $VALUES -> mYiU
    135:135:react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag[] values() -> values
    135:135:react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag valueOf(java.lang.String) -> valueOf
    135:135:void <init>(java.lang.String,int) -> <init>
    135:140:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerRelEntityMove -> org.cyberpwn.react.twIG:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    49:49:int getEntityID() -> DGuR
    58:59:void setEntityID(int) -> JYyE
    68:68:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    78:78:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    82:82:int getDx() -> hHsd
    86:87:void setDx(int) -> tSqq
    90:90:int getDy() -> KoUR
    94:95:void setDy(int) -> kbip
    98:98:int getDz() -> lnra
    102:103:void setDz(int) -> OjJw
    111:111:boolean getOnGround() -> qujb
    120:121:void setOnGround(boolean) -> wUFa
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerRelEntityMove18 -> org.cyberpwn.react.jhiv:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    55:56:void setEntityID(int) -> JYyE
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    73:73:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    81:81:double getDx() -> wKwg
    89:90:void setDx(double) -> KvlK
    97:97:double getDy() -> WrBa
    105:106:void setDy(double) -> TOCT
    113:113:double getDz() -> avmr
    121:122:void setDz(double) -> HvTU
    129:129:boolean getOnGround() -> qujb
    137:138:void setOnGround(boolean) -> wUFa
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerRelEntityMoveLook -> org.cyberpwn.react.rhQi:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getEntityID() -> DGuR
    59:60:void setEntityID(int) -> JYyE
    71:71:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    83:83:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    93:93:double getDx() -> wKwg
    104:105:void setDx(double) -> KvlK
    114:114:double getDy() -> WrBa
    125:126:void setDy(double) -> TOCT
    135:135:double getDz() -> avmr
    146:147:void setDz(double) -> HvTU
    156:156:float getYaw() -> getYaw
    167:168:void setYaw(float) -> setYaw
    177:177:float getPitch() -> getPitch
    188:189:void setPitch(float) -> setPitch
    198:198:boolean getOnGround() -> qujb
    209:210:void setOnGround(boolean) -> wUFa
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerRemoveEntityEffect -> org.cyberpwn.react.VnrN:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    34:36:void <init>() -> <init>
    39:40:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    50:50:int getEntityID() -> DGuR
    59:60:void setEntityID(int) -> JYyE
    69:69:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    79:79:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    83:83:org.bukkit.potion.PotionEffectType getEffect() -> WYEn
    87:88:void setEffect(org.bukkit.potion.PotionEffectType) -> aehq
    30:30:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerRemoveEntityEffect18 -> org.cyberpwn.react.nctl:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    55:56:void setEntityID(int) -> JYyE
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    73:73:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    81:81:int getEffectId() -> getEffectId
    89:90:void setEffectId(int) -> iSrd
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerResourcePackSend -> org.cyberpwn.react.PdpW:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:java.lang.String getUrl() -> getUrl
    54:55:void setUrl(java.lang.String) -> setUrl
    69:69:java.lang.String getHash() -> getHash
    78:79:void setHash(java.lang.String) -> JIXO
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerResourcePackSend18 -> org.cyberpwn.react.iDEY:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:java.lang.String getUrl() -> getUrl
    51:52:void setUrl(java.lang.String) -> setUrl
    61:61:java.lang.String getHash() -> getHash
    69:70:void setHash(java.lang.String) -> JIXO
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerRespawn -> org.cyberpwn.react.jNwH:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:int getDimension() -> getDimension
    57:58:void setDimension(int) -> setDimension
    68:68:com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> tfHU
    77:78:void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> aehq
    89:89:com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode getGamemode() -> MBTl
    98:99:void setGamemode(com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode) -> aehq
    109:109:org.bukkit.WorldType getLevelType() -> YpJy
    118:119:void setLevelType(org.bukkit.WorldType) -> aehq
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerRespawn18 -> org.cyberpwn.react.inXG:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getDimension() -> getDimension
    55:56:void setDimension(int) -> setDimension
    65:65:com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> tfHU
    73:74:void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> aehq
    83:83:com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode getGamemode() -> MBTl
    91:92:void setGamemode(com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode) -> aehq
    101:101:org.bukkit.WorldType getLevelType() -> YpJy
    109:110:void setLevelType(org.bukkit.WorldType) -> aehq
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardDisplayObjective -> org.cyberpwn.react.bqrn:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:int getPosition() -> getPosition
    55:56:void setPosition(int) -> setPosition
    66:66:java.lang.String getScoreName() -> ccwd
    75:76:void setScoreName(java.lang.String) -> bXNR
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardDisplayObjective18 -> org.cyberpwn.react.yuUw:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getPosition() -> getPosition
    51:52:void setPosition(int) -> setPosition
    61:61:java.lang.String getScoreName() -> ccwd
    69:70:void setScoreName(java.lang.String) -> bXNR
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardObjective -> org.cyberpwn.react.Vwan:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    63:63:java.lang.String getName() -> getName
    72:73:void setName(java.lang.String) -> setName
    83:83:java.lang.String getDisplayName() -> getDisplayName
    92:93:void setDisplayName(java.lang.String) -> setDisplayName
    103:103:react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay getHealthDisplay() -> DsQf
    113:114:void setHealthDisplay(react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay) -> aehq
    125:125:int getMode() -> getMode
    134:135:void setMode(int) -> setMode
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay -> org.cyberpwn.react.Vwan$aehq:
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay INTEGER -> VVgL
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay HEARTS -> Nprc
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay[] $VALUES -> fLdT
    137:137:react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay[] values() -> values
    137:137:react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay valueOf(java.lang.String) -> valueOf
    137:137:void <init>(java.lang.String,int) -> <init>
    137:138:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardObjective$Mode -> org.cyberpwn.react.Vwan$CUak:
    int ADD_OBJECTIVE -> gWwP
    int REMOVE_OBJECTIVE -> ETwG
    int UPDATE_VALUE -> yKmS
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective$Mode INSTANCE -> diEO
    43:43:void <init>() -> <init>
    51:51:react.protocol.wrapper.WrapperPlayServerScoreboardObjective$Mode getInstance() -> xOqv
    48:48:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardObjective18 -> org.cyberpwn.react.WPPy:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    61:61:java.lang.String getName() -> getName
    69:70:void setName(java.lang.String) -> setName
    79:79:java.lang.String getDisplayName() -> getDisplayName
    87:88:void setDisplayName(java.lang.String) -> setDisplayName
    97:97:java.lang.String getHealthDisplay() -> dNJE
    107:110:void setHealthDisplay(java.lang.String) -> vbey
    119:119:int getMode() -> getMode
    127:128:void setMode(int) -> setMode
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardObjective18$Mode -> org.cyberpwn.react.WPPy$aehq:
    int ADD_OBJECTIVE -> gWwP
    int REMOVE_OBJECTIVE -> ETwG
    int UPDATE_VALUE -> yKmS
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective18$Mode INSTANCE -> IYUh
    42:42:void <init>() -> <init>
    50:50:react.protocol.wrapper.WrapperPlayServerScoreboardObjective18$Mode getInstance() -> BJfr
    47:47:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardScore -> org.cyberpwn.react.Orls:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:java.lang.String getScoreName() -> ccwd
    55:56:void setScoreName(java.lang.String) -> bXNR
    66:66:java.lang.String getObjectiveName() -> nSWQ
    75:76:void setObjectiveName(java.lang.String) -> JYyE
    87:87:int getValue() -> getValue
    96:97:void setValue(int) -> setValue
    100:100:com.comphenix.protocol.wrappers.EnumWrappers$ScoreboardAction getAction() -> fnBw
    104:105:void setScoreboardAction(com.comphenix.protocol.wrappers.EnumWrappers$ScoreboardAction) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardScore18 -> org.cyberpwn.react.DGye:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:java.lang.String getScoreName() -> ccwd
    52:53:void setScoreName(java.lang.String) -> bXNR
    62:62:java.lang.String getObjectiveName() -> nSWQ
    70:71:void setObjectiveName(java.lang.String) -> JYyE
    80:80:int getValue() -> getValue
    88:89:void setValue(int) -> setValue
    92:92:com.comphenix.protocol.wrappers.EnumWrappers$ScoreboardAction getAction() -> fnBw
    96:97:void setScoreboardAction(com.comphenix.protocol.wrappers.EnumWrappers$ScoreboardAction) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardTeam -> org.cyberpwn.react.eXyc:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    68:68:java.lang.String getName() -> getName
    77:78:void setName(java.lang.String) -> setName
    88:88:java.lang.String getDisplayName() -> getDisplayName
    97:98:void setDisplayName(java.lang.String) -> setDisplayName
    109:109:java.lang.String getPrefix() -> getPrefix
    118:119:void setPrefix(java.lang.String) -> setPrefix
    130:130:java.lang.String getSuffix() -> getSuffix
    139:140:void setSuffix(java.lang.String) -> setSuffix
    151:151:java.lang.String getNameTagVisibility() -> rhTB
    160:161:void setNameTagVisibility(java.lang.String) -> uWRf
    171:171:int getColor() -> getColor
    180:181:void setColor(int) -> setColor
    189:189:java.lang.String getCollisionRule() -> ESpu
    197:198:void setCollisionRule(java.lang.String) -> VwMV
    210:211:java.util.List getPlayers() -> getPlayers
    220:221:void setPlayers(java.util.List) -> KvlK
    233:233:int getMode() -> getMode
    242:243:void setMode(int) -> setMode
    263:263:int getPackOptionData() -> bqwE
    273:274:void setPackOptionData(int) -> LrCg
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardTeam$Mode -> org.cyberpwn.react.eXyc$aehq:
    int TEAM_CREATED -> RlaN
    int TEAM_REMOVED -> veHK
    int TEAM_UPDATED -> TsHK
    int PLAYERS_ADDED -> vdfw
    int PLAYERS_REMOVED -> ORWA
    react.protocol.wrapper.WrapperPlayServerScoreboardTeam$Mode INSTANCE -> esvh
    46:46:void <init>() -> <init>
    56:56:react.protocol.wrapper.WrapperPlayServerScoreboardTeam$Mode getInstance() -> CpOU
    53:53:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardTeam18 -> org.cyberpwn.react.pXwv:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    65:65:java.lang.String getName() -> getName
    73:74:void setName(java.lang.String) -> setName
    83:83:java.lang.String getDisplayName() -> getDisplayName
    91:92:void setDisplayName(java.lang.String) -> setDisplayName
    101:101:java.lang.String getPrefix() -> getPrefix
    109:110:void setPrefix(java.lang.String) -> setPrefix
    119:119:java.lang.String getSuffix() -> getSuffix
    127:128:void setSuffix(java.lang.String) -> setSuffix
    137:137:java.lang.String getNameTagVisibility() -> rhTB
    145:146:void setNameTagVisibility(java.lang.String) -> uWRf
    155:155:int getColor() -> getColor
    163:164:void setColor(int) -> setColor
    174:174:java.util.List getPlayers() -> getPlayers
    182:183:void setPlayers(java.util.List) -> KvlK
    192:192:int getMode() -> getMode
    200:201:void setMode(int) -> setMode
    217:217:int getPackOptionData() -> bqwE
    226:227:void setPackOptionData(int) -> LrCg
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardTeam18$Mode -> org.cyberpwn.react.pXwv$aehq:
    int TEAM_CREATED -> RlaN
    int TEAM_REMOVED -> veHK
    int TEAM_UPDATED -> TsHK
    int PLAYERS_ADDED -> vdfw
    int PLAYERS_REMOVED -> ORWA
    react.protocol.wrapper.WrapperPlayServerScoreboardTeam18$Mode INSTANCE -> PCvw
    44:44:void <init>() -> <init>
    54:54:react.protocol.wrapper.WrapperPlayServerScoreboardTeam18$Mode getInstance() -> aweJ
    51:51:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerServerDifficulty -> org.cyberpwn.react.Fpck:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> tfHU
    55:56:void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerServerDifficulty18 -> org.cyberpwn.react.SCeH:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> tfHU
    52:53:void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSetCompression18 -> org.cyberpwn.react.feOJ:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    46:46:int getThreshold() -> getThreshold
    57:58:void setThreshold(int) -> uyVS
    24:24:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSetCooldown -> org.cyberpwn.react.Ywyw:
    java.lang.Class ITEM_CLASS -> HDqE
    com.comphenix.protocol.PacketType TYPE -> WkNG
    36:38:void <init>() -> <init>
    41:42:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:46:org.bukkit.Material getItem() -> xPRg
    50:53:void setItem(org.bukkit.Material) -> CUak
    56:56:int getTicks() -> VMRQ
    60:61:void setTicks(int) -> LaAv
    30:30:java.lang.Class access$100() -> MuYu
    31:33:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSetCooldown$1 -> org.cyberpwn.react.Ywyw$1:
react.protocol.wrapper.WrapperPlayServerSetCooldown$ItemConverter -> org.cyberpwn.react.Ywyw$aehq:
    com.comphenix.protocol.reflect.accessors.MethodAccessor getMaterial -> qDUd
    com.comphenix.protocol.reflect.accessors.MethodAccessor getItem -> DQwA
    63:63:void <init>() -> <init>
    69:76:org.bukkit.Material getSpecific(java.lang.Object) -> Usfk
    81:88:java.lang.Object getGeneric(java.lang.Class,org.bukkit.Material) -> aehq
    93:93:java.lang.Class getSpecificType() -> getSpecificType
    63:63:java.lang.Object getGeneric(java.lang.Class,java.lang.Object) -> getGeneric
    63:63:java.lang.Object getSpecific(java.lang.Object) -> getSpecific
    63:63:void <init>(react.protocol.wrapper.WrapperPlayServerSetCooldown$1) -> <init>
    64:65:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSetSlot -> org.cyberpwn.react.IFiF:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    51:51:int getWindowId() -> RcCL
    60:61:void setWindowId(int) -> bXNR
    71:71:int getSlot() -> getSlot
    80:81:void setSlot(int) -> VwMV
    89:89:org.bukkit.inventory.ItemStack getSlotData() -> sjuR
    98:99:void setSlotData(org.bukkit.inventory.ItemStack) -> HnDD
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSetSlot18 -> org.cyberpwn.react.SKuY:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:int getWindowId() -> RcCL
    53:54:void setWindowId(int) -> bXNR
    63:63:int getSlot() -> getSlot
    71:72:void setSlot(int) -> VwMV
    79:79:org.bukkit.inventory.ItemStack getSlotData() -> sjuR
    87:88:void setSlotData(org.bukkit.inventory.ItemStack) -> HnDD
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntity -> org.cyberpwn.react.UJLS:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    com.comphenix.protocol.injector.PacketConstructor entityConstructor -> QrPM
    86:88:void <init>() -> <init>
    91:92:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    95:96:void <init>(org.bukkit.entity.Entity,int,int) -> <init>
    101:106:com.comphenix.protocol.events.PacketContainer fromEntity(org.bukkit.entity.Entity,int,int) -> aehq
    115:115:int getEntityID() -> DGuR
    125:125:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    135:135:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    144:145:void setEntityID(int) -> JYyE
    148:148:java.util.UUID getUniqueId() -> getUniqueId
    152:153:void setUniqueId(java.util.UUID) -> HnDD
    163:163:double getX() -> getX
    172:173:void setX(double) -> setX
    183:183:double getY() -> getY
    192:193:void setY(double) -> setY
    203:203:double getZ() -> getZ
    212:213:void setZ(double) -> setZ
    223:223:double getOptionalSpeedX() -> woQm
    232:233:void setOptionalSpeedX(double) -> Vehq
    243:243:double getOptionalSpeedY() -> mYDI
    252:253:void setOptionalSpeedY(double) -> EKFp
    263:263:double getOptionalSpeedZ() -> hYsy
    272:273:void setOptionalSpeedZ(double) -> wUEt
    281:281:float getPitch() -> getPitch
    290:291:void setPitch(float) -> setPitch
    299:299:float getYaw() -> getYaw
    308:309:void setYaw(float) -> setYaw
    317:317:int getType() -> getType
    326:327:void setType(int) -> setType
    364:364:int getObjectData() -> Vfau
    376:377:void setObjectData(int) -> vbht
    34:34:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntity$ObjectTypes -> org.cyberpwn.react.UJLS$aehq:
    int BOAT -> qoIy
    int ITEM_STACK -> cLNu
    int AREA_EFFECT_CLOUD -> SVRh
    int MINECART -> SxSu
    int ACTIVATED_TNT -> aEgQ
    int ENDER_CRYSTAL -> OcVh
    int TIPPED_ARROW_PROJECTILE -> VWJU
    int SNOWBALL_PROJECTILE -> NqUS
    int EGG_PROJECTILE -> Obuc
    int GHAST_FIREBALL -> gPJX
    int BLAZE_FIREBALL -> Irfh
    int THROWN_ENDERPEARL -> FrNm
    int WITHER_SKULL_PROJECTILE -> IQEM
    int SHULKER_BULLET -> QaLo
    int FALLING_BLOCK -> usDf
    int ITEM_FRAME -> eIbw
    int EYE_OF_ENDER -> ECvp
    int THROWN_POTION -> YWbT
    int THROWN_EXP_BOTTLE -> gXYu
    int FIREWORK_ROCKET -> FaNO
    int LEASH_KNOT -> hdOA
    int ARMORSTAND -> MKnk
    int FISHING_FLOAT -> HwwJ
    int SPECTRAL_ARROW -> UvLs
    int DRAGON_FIREBALL -> wFIo
    react.protocol.wrapper.WrapperPlayServerSpawnEntity$ObjectTypes INSTANCE -> kukR
    43:43:void <init>() -> <init>
    81:81:react.protocol.wrapper.WrapperPlayServerSpawnEntity$ObjectTypes getInstance() -> BJhR
    73:73:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntity18 -> org.cyberpwn.react.HvjU:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    com.comphenix.protocol.injector.PacketConstructor entityConstructor -> QrPM
    80:82:void <init>() -> <init>
    85:86:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    89:90:void <init>(org.bukkit.entity.Entity,int,int) -> <init>
    94:96:com.comphenix.protocol.events.PacketContainer fromEntity(org.bukkit.entity.Entity,int,int) -> aehq
    104:104:int getEntityID() -> DGuR
    113:113:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    122:122:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    130:131:void setEntityID(int) -> JYyE
    138:138:int getType() -> getType
    146:147:void setType(int) -> setType
    156:156:double getX() -> getX
    164:165:void setX(double) -> setX
    174:174:double getY() -> getY
    182:183:void setY(double) -> setY
    192:192:double getZ() -> getZ
    200:201:void setZ(double) -> setZ
    210:210:double getOptionalSpeedX() -> woQm
    218:219:void setOptionalSpeedX(double) -> Vehq
    228:228:double getOptionalSpeedY() -> mYDI
    236:237:void setOptionalSpeedY(double) -> EKFp
    246:246:double getOptionalSpeedZ() -> hYsy
    254:255:void setOptionalSpeedZ(double) -> wUEt
    262:262:float getYaw() -> getYaw
    270:271:void setYaw(float) -> setYaw
    278:278:float getPitch() -> getPitch
    286:287:void setPitch(float) -> setPitch
    323:323:int getObjectData() -> Vfau
    333:334:void setObjectData(int) -> vbht
    32:32:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntity18$ObjectTypes -> org.cyberpwn.react.HvjU$aehq:
    int BOAT -> qoIy
    int ITEM_STACK -> cLNu
    int MINECART -> SxSu
    int MINECART_STORAGE -> lEid
    int MINECART_POWERED -> CGDw
    int ACTIVATED_TNT -> aEgQ
    int ENDER_CRYSTAL -> OcVh
    int ARROW_PROJECTILE -> smBd
    int SNOWBALL_PROJECTILE -> NqUS
    int EGG_PROJECTILE -> Obuc
    int FIRE_BALL_GHAST -> uaes
    int FIRE_BALL_BLAZE -> vuje
    int THROWN_ENDERPEARL -> FrNm
    int WITHER_SKULL -> GKAl
    int FALLING_BLOCK -> usDf
    int ITEM_FRAME -> eIbw
    int EYE_OF_ENDER -> ECvp
    int THROWN_POTION -> YWbT
    int FALLING_DRAGON_EGG -> cTaQ
    int THROWN_EXP_BOTTLE -> gXYu
    int FIREWORK -> xYnE
    int FISHING_FLOAT -> HwwJ
    react.protocol.wrapper.WrapperPlayServerSpawnEntity18$ObjectTypes INSTANCE -> BKpv
    41:41:void <init>() -> <init>
    75:75:react.protocol.wrapper.WrapperPlayServerSpawnEntity18$ObjectTypes getInstance() -> uNxX
    68:68:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntityExperienceOrb -> org.cyberpwn.react.dpJQ:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    49:49:int getEntityID() -> DGuR
    58:59:void setEntityID(int) -> JYyE
    68:68:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    78:78:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    89:89:double getX() -> getX
    98:99:void setX(double) -> setX
    109:109:double getY() -> getY
    118:119:void setY(double) -> setY
    129:129:double getZ() -> getZ
    138:139:void setZ(double) -> setZ
    149:149:int getCount() -> getCount
    158:159:void setCount(int) -> setCount
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntityExperienceOrb18 -> org.cyberpwn.react.tnWH:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    55:56:void setEntityID(int) -> JYyE
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    73:73:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    83:83:int getX() -> getX
    91:92:void setX(int) -> setX
    101:101:int getY() -> getY
    109:110:void setY(int) -> setY
    119:119:int getZ() -> getZ
    127:128:void setZ(int) -> setZ
    137:137:int getCount() -> getCount
    145:146:void setCount(int) -> setCount
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntityLiving -> org.cyberpwn.react.HeiI:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    com.comphenix.protocol.injector.PacketConstructor entityConstructor -> QrPM
    41:43:void <init>() -> <init>
    46:47:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    50:51:void <init>(org.bukkit.entity.Entity) -> <init>
    55:59:com.comphenix.protocol.events.PacketContainer fromEntity(org.bukkit.entity.Entity) -> HvTU
    68:68:int getEntityID() -> DGuR
    78:78:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    88:88:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    92:92:java.util.UUID getUniqueId() -> getUniqueId
    96:97:void setUniqueId(java.util.UUID) -> HnDD
    105:106:void setEntityID(int) -> JYyE
    115:115:org.bukkit.entity.EntityType getType() -> getType
    125:126:void setType(org.bukkit.entity.EntityType) -> bNyW
    136:136:double getX() -> getX
    145:146:void setX(double) -> setX
    156:156:double getY() -> getY
    165:166:void setY(double) -> setY
    176:176:double getZ() -> getZ
    185:186:void setZ(double) -> setZ
    194:194:float getYaw() -> getYaw
    203:204:void setYaw(float) -> setYaw
    212:212:float getPitch() -> getPitch
    221:222:void setPitch(float) -> setPitch
    230:230:float getHeadPitch() -> gEpP
    239:240:void setHeadPitch(float) -> JAEj
    248:248:double getVelocityX() -> MBRY
    257:258:void setVelocityX(double) -> xGGs
    266:266:double getVelocityY() -> Knof
    275:276:void setVelocityY(double) -> wUFa
    284:284:double getVelocityZ() -> uXFR
    293:294:void setVelocityZ(double) -> jWQb
    304:304:com.comphenix.protocol.wrappers.WrappedDataWatcher getMetadata() -> Vwan
    313:314:void setMetadata(com.comphenix.protocol.wrappers.WrappedDataWatcher) -> aehq
    35:35:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntityLiving18 -> org.cyberpwn.react.hHsd:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    com.comphenix.protocol.injector.PacketConstructor entityConstructor -> QrPM
    38:40:void <init>() -> <init>
    43:44:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:48:void <init>(org.bukkit.entity.Entity) -> <init>
    52:54:com.comphenix.protocol.events.PacketContainer fromEntity(org.bukkit.entity.Entity) -> HvTU
    62:62:int getEntityID() -> DGuR
    71:71:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    80:80:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    88:89:void setEntityID(int) -> JYyE
    97:97:org.bukkit.entity.EntityType getType() -> getType
    106:107:void setType(org.bukkit.entity.EntityType) -> bNyW
    116:116:double getX() -> getX
    124:125:void setX(double) -> setX
    134:134:double getY() -> getY
    142:143:void setY(double) -> setY
    152:152:double getZ() -> getZ
    160:161:void setZ(double) -> setZ
    168:168:float getYaw() -> getYaw
    176:177:void setYaw(float) -> setYaw
    184:184:float getHeadPitch() -> gEpP
    192:193:void setHeadPitch(float) -> JAEj
    200:200:float getHeadYaw() -> bYDl
    208:209:void setHeadYaw(float) -> ssNC
    216:216:double getVelocityX() -> MBRY
    224:225:void setVelocityX(double) -> xGGs
    232:232:double getVelocityY() -> Knof
    240:241:void setVelocityY(double) -> wUFa
    248:248:double getVelocityZ() -> uXFR
    256:257:void setVelocityZ(double) -> jWQb
    266:266:com.comphenix.protocol.wrappers.WrappedDataWatcher getMetadata() -> Vwan
    274:275:void setMetadata(com.comphenix.protocol.wrappers.WrappedDataWatcher) -> aehq
    33:33:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting -> org.cyberpwn.react.KoUR:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    35:37:void <init>() -> <init>
    40:41:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    51:51:int getEntityID() -> DGuR
    60:61:void setEntityID(int) -> JYyE
    70:70:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    80:80:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    91:91:java.lang.String getTitle() -> getTitle
    100:101:void setTitle(java.lang.String) -> setTitle
    111:111:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    120:121:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    124:124:com.comphenix.protocol.wrappers.EnumWrappers$Direction getDirection() -> DsKj
    128:129:void setDirection(com.comphenix.protocol.wrappers.EnumWrappers$Direction) -> aehq
    31:31:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18 -> org.cyberpwn.react.lnra:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    java.lang.Class DIRECTION_CLASS -> agmd
    36:38:void <init>() -> <init>
    41:42:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    51:51:int getEntityID() -> DGuR
    59:60:void setEntityID(int) -> JYyE
    68:68:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    77:77:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    87:87:java.lang.String getTitle() -> getTitle
    95:96:void setTitle(java.lang.String) -> setTitle
    105:105:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    113:114:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    128:128:com.comphenix.protocol.reflect.StructureModifier getDirections() -> getDirections
    132:132:react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction getDirection() -> yRse
    136:137:void setDirection(react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction) -> aehq
    33:116:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction -> org.cyberpwn.react.lnra$aehq:
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction DOWN -> fMJb
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction UP -> IsJq
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction NORTH -> pJEk
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction SOUTH -> MKrD
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction WEST -> COUS
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction EAST -> fnki
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction[] $VALUES -> QOnA
    118:118:react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction[] values() -> values
    118:118:react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction valueOf(java.lang.String) -> valueOf
    118:118:void <init>(java.lang.String,int) -> <init>
    118:124:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntityWeather -> org.cyberpwn.react.WYEn:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    33:35:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    49:49:int getEntityID() -> DGuR
    58:59:void setEntityID(int) -> JYyE
    68:68:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    78:78:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    89:89:int getType() -> getType
    98:99:void setType(int) -> setType
    109:109:double getX() -> getX
    118:119:void setX(double) -> setX
    129:129:double getY() -> getY
    138:139:void setY(double) -> setY
    149:149:double getZ() -> getZ
    158:159:void setZ(double) -> setZ
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntityWeather18 -> org.cyberpwn.react.ccwd:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:int getEntityID() -> DGuR
    55:56:void setEntityID(int) -> JYyE
    64:64:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    73:73:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    83:83:int getType() -> getType
    91:92:void setType(int) -> setType
    101:101:int getX() -> getX
    109:110:void setX(int) -> setX
    119:119:int getY() -> getY
    127:128:void setY(int) -> setY
    137:137:int getZ() -> getZ
    145:146:void setZ(int) -> setZ
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnPosition -> org.cyberpwn.react.DsQf:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    54:55:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnPosition18 -> org.cyberpwn.react.xOqv:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    52:53:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerStatistic -> org.cyberpwn.react.dNJE:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    40:40:java.util.Map getStatistics() -> getStatistics
    44:45:void setStatistics(java.util.Map) -> CUak
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerStatistics18 -> org.cyberpwn.react.BJfr:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:java.util.Map getStatistics() -> getStatistics
    47:48:void setStatistics(java.util.Map) -> CUak
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerTabComplete -> org.cyberpwn.react.nSWQ:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getCount() -> getCount
    56:56:java.lang.String[] getMatches() -> ESpV
    65:66:void setMatches(java.lang.String[]) -> bNyW
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerTabComplete18 -> org.cyberpwn.react.fnBw:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getCount() -> getCount
    53:53:java.lang.String[] getMatches() -> ESpV
    61:62:void setMatches(java.lang.String[]) -> bNyW
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerTileEntityData -> org.cyberpwn.react.rhTB:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    31:33:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    54:55:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    65:65:int getAction() -> getAction
    74:75:void setAction(int) -> setAction
    85:85:com.comphenix.protocol.wrappers.nbt.NbtBase getNbtData() -> prll
    94:95:void setNbtData(com.comphenix.protocol.wrappers.nbt.NbtBase) -> aehq
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerTileEntityData18 -> org.cyberpwn.react.ESpu:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    51:52:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    61:61:int getAction() -> getAction
    69:70:void setAction(int) -> setAction
    79:79:com.comphenix.protocol.wrappers.nbt.NbtBase getNbtData() -> prll
    87:88:void setNbtData(com.comphenix.protocol.wrappers.nbt.NbtBase) -> aehq
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerTitle -> org.cyberpwn.react.bqwE:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:com.comphenix.protocol.wrappers.EnumWrappers$TitleAction getAction() -> wgAR
    53:54:void setAction(com.comphenix.protocol.wrappers.EnumWrappers$TitleAction) -> aehq
    64:64:com.comphenix.protocol.wrappers.WrappedChatComponent getTitle() -> MmJg
    73:74:void setTitle(com.comphenix.protocol.wrappers.WrappedChatComponent) -> KvlK
    84:84:int getFadeIn() -> gFPe
    93:94:void setFadeIn(int) -> mFlV
    102:102:int getStay() -> gqEI
    111:112:void setStay(int) -> PmOB
    120:120:int getFadeOut() -> BKIA
    129:130:void setFadeOut(int) -> uqGl
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerTitle18 -> org.cyberpwn.react.CpOU:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:com.comphenix.protocol.wrappers.EnumWrappers$TitleAction getAction() -> wgAR
    51:52:void setAction(com.comphenix.protocol.wrappers.EnumWrappers$TitleAction) -> aehq
    61:61:com.comphenix.protocol.wrappers.WrappedChatComponent getTitle() -> MmJg
    69:70:void setTitle(com.comphenix.protocol.wrappers.WrappedChatComponent) -> KvlK
    79:79:int getFadeIn() -> gFPe
    87:88:void setFadeIn(int) -> mFlV
    95:95:int getStay() -> gqEI
    103:104:void setStay(int) -> PmOB
    111:111:int getFadeOut() -> BKIA
    119:120:void setFadeOut(int) -> uqGl
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerTransaction -> org.cyberpwn.react.aweJ:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getWindowId() -> RcCL
    53:54:void setWindowId(int) -> bXNR
    65:65:short getActionNumber() -> Thfl
    74:75:void setActionNumber(short) -> aehq
    85:85:boolean getAccepted() -> pixs
    94:95:void setAccepted(boolean) -> wUEt
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerTransaction18 -> org.cyberpwn.react.xPRg:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:int getWindowId() -> RcCL
    51:52:void setWindowId(int) -> bXNR
    61:61:short getActionNumber() -> Thfl
    69:70:void setActionNumber(short) -> aehq
    79:79:boolean getAccepted() -> pixs
    87:88:void setAccepted(boolean) -> wUEt
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerUnloadChunk -> org.cyberpwn.react.VMRQ:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:int getChunkX() -> getChunkX
    54:55:void setChunkX(int) -> jgtA
    65:65:int getChunkZ() -> getChunkZ
    74:75:void setChunkZ(int) -> bWlH
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerUpdateAttributes -> org.cyberpwn.react.MuYu:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    36:38:void <init>() -> <init>
    41:42:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    52:52:int getEntityID() -> DGuR
    61:62:void setEntityID(int) -> JYyE
    71:71:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    81:81:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    90:90:java.util.List getAttributes() -> getAttributes
    99:100:void setAttributes(java.util.List) -> setAttributes
    32:32:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerUpdateAttributes18 -> org.cyberpwn.react.sjuR:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    35:37:void <init>() -> <init>
    40:41:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    50:50:int getEntityID() -> DGuR
    58:59:void setEntityID(int) -> JYyE
    67:67:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    76:76:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    84:84:java.util.List getAttributes() -> getAttributes
    92:93:void setAttributes(java.util.List) -> setAttributes
    32:32:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerUpdateEntityNbt18 -> org.cyberpwn.react.woQm:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    38:39:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    50:50:int getEntityID() -> DGuR
    61:62:void setEntityID(int) -> JYyE
    73:73:org.bukkit.entity.Entity getEntity(org.bukkit.World) -> onqO
    85:85:org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> aehq
    95:95:com.comphenix.protocol.wrappers.nbt.NbtBase getTag() -> DPpD
    106:107:void setTag(com.comphenix.protocol.wrappers.nbt.NbtBase) -> CUak
    28:28:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerUpdateHealth -> org.cyberpwn.react.mYDI:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:float getHealth() -> getHealth
    53:54:void setHealth(float) -> setHealth
    64:64:int getFood() -> tLXt
    73:74:void setFood(int) -> YDcv
    84:84:float getFoodSaturation() -> MSYy
    93:94:void setFoodSaturation(float) -> owbJ
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerUpdateHealth18 -> org.cyberpwn.react.hYsy:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:float getHealth() -> getHealth
    51:52:void setHealth(float) -> setHealth
    61:61:int getFood() -> tLXt
    69:70:void setFood(int) -> YDcv
    79:79:float getFoodSaturation() -> MSYy
    87:88:void setFoodSaturation(float) -> owbJ
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerUpdateSign18 -> org.cyberpwn.react.Vfau:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    36:37:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    48:48:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    59:60:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    69:69:com.comphenix.protocol.wrappers.WrappedChatComponent[] getLines() -> YwyC
    80:90:void setLines(com.comphenix.protocol.wrappers.WrappedChatComponent[]) -> aehq
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerUpdateTime -> org.cyberpwn.react.BJhR:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:long getAgeOfTheWorld() -> gpgU
    53:54:void setAgeOfTheWorld(long) -> wUFa
    65:65:long getTimeOfDay() -> getTimeOfDay
    74:75:void setTimeOfDay(long) -> setTimeOfDay
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerUpdateTime18 -> org.cyberpwn.react.uNxX:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    43:43:long getAgeOfTheWorld() -> gpgU
    51:52:void setAgeOfTheWorld(long) -> wUFa
    61:61:long getTimeOfDay() -> getTimeOfDay
    69:70:void setTimeOfDay(long) -> setTimeOfDay
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerVehicleMove -> org.cyberpwn.react.gEpP:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:double getX() -> getX
    54:55:void setX(double) -> setX
    65:65:double getY() -> getY
    74:75:void setY(double) -> setY
    85:85:double getZ() -> getZ
    94:95:void setZ(double) -> setZ
    105:105:float getYaw() -> getYaw
    114:115:void setYaw(float) -> setYaw
    125:125:float getPitch() -> getPitch
    134:135:void setPitch(float) -> setPitch
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerWindowData -> org.cyberpwn.react.bYDl:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getWindowId() -> RcCL
    53:54:void setWindowId(int) -> bXNR
    64:64:int getProperty() -> PdmA
    73:74:void setProperty(int) -> BlSs
    84:84:int getValue() -> getValue
    93:94:void setValue(int) -> setValue
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerWindowItems -> org.cyberpwn.react.yRse:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    32:34:void <init>() -> <init>
    37:38:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    49:49:int getWindowId() -> RcCL
    58:59:void setWindowId(int) -> bXNR
    67:67:java.util.List getSlotData() -> RbjH
    76:77:void setSlotData(java.util.List) -> TOCT
    29:29:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerWindowItems18 -> org.cyberpwn.react.ESpV:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:int getWindowId() -> RcCL
    53:54:void setWindowId(int) -> bXNR
    61:61:org.bukkit.inventory.ItemStack[] getSlotData() -> TGNJ
    69:70:void setSlotData(org.bukkit.inventory.ItemStack[]) -> aehq
    27:27:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerWorldBorder -> org.cyberpwn.react.prll:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    38:38:com.comphenix.protocol.wrappers.EnumWrappers$WorldBorderAction getAction() -> ryWo
    42:43:void setAction(com.comphenix.protocol.wrappers.EnumWrappers$WorldBorderAction) -> aehq
    46:46:int getPortalTeleportBoundary() -> jFlK
    50:51:void setPortalTeleportBoundary(int) -> DXjR
    54:54:double getCenterX() -> getCenterX
    58:59:void setCenterX(double) -> PKGE
    62:62:double getCenterZ() -> getCenterZ
    66:67:void setCenterZ(double) -> CDaB
    70:70:double getOldRadius() -> mXfS
    74:75:void setOldRadius(double) -> inAK
    78:78:double getRadius() -> kJPO
    82:83:void setRadius(double) -> awND
    86:86:long getSpeed() -> ielN
    90:91:void setSpeed(long) -> jWQb
    94:94:int getWarningTime() -> getWarningTime
    98:99:void setWarningTime(int) -> setWarningTime
    102:102:int getWarningDistance() -> getWarningDistance
    106:107:void setWarningDistance(int) -> setWarningDistance
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerWorldBorder18 -> org.cyberpwn.react.wgAR:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    38:38:com.comphenix.protocol.wrappers.EnumWrappers$WorldBorderAction getAction() -> ryWo
    42:43:void setAction(com.comphenix.protocol.wrappers.EnumWrappers$WorldBorderAction) -> aehq
    46:46:int getPortalTeleportBoundary() -> jFlK
    50:51:void setPortalTeleportBoundary(int) -> DXjR
    54:54:double getCenterX() -> getCenterX
    58:59:void setCenterX(double) -> PKGE
    62:62:double getCenterZ() -> getCenterZ
    66:67:void setCenterZ(double) -> CDaB
    70:70:double getOldRadius() -> mXfS
    74:75:void setOldRadius(double) -> inAK
    78:78:double getRadius() -> kJPO
    82:83:void setRadius(double) -> awND
    86:86:long getSpeed() -> ielN
    90:91:void setSpeed(long) -> jWQb
    94:94:int getWarningTime() -> getWarningTime
    98:99:void setWarningTime(int) -> setWarningTime
    102:102:int getWarningDistance() -> getWarningDistance
    106:107:void setWarningDistance(int) -> setWarningDistance
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerWorldEvent -> org.cyberpwn.react.MmJg:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:int getEffectId() -> getEffectId
    54:55:void setEffectId(int) -> iSrd
    65:65:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    74:75:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    85:85:int getData() -> getData
    94:95:void setData(int) -> setData
    105:105:boolean getDisableRelativeVolume() -> Qxxg
    114:115:void setDisableRelativeVolume(boolean) -> mWlX
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerWorldEvent18 -> org.cyberpwn.react.gFPe:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:int getEffectId() -> getEffectId
    52:53:void setEffectId(int) -> iSrd
    62:62:com.comphenix.protocol.wrappers.BlockPosition getLocation() -> vIfN
    70:71:void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> aehq
    80:80:int getData() -> getData
    88:89:void setData(int) -> setData
    98:98:boolean getDisableRelativeVolume() -> Qxxg
    106:107:void setDisableRelativeVolume(boolean) -> mWlX
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerWorldParticles -> org.cyberpwn.react.gqEI:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    30:32:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:com.comphenix.protocol.wrappers.EnumWrappers$Particle getParticleType() -> jhnQ
    53:54:void setParticleType(com.comphenix.protocol.wrappers.EnumWrappers$Particle) -> aehq
    64:64:float getX() -> getX
    73:74:void setX(float) -> iCLi
    84:84:float getY() -> getY
    93:94:void setY(float) -> onqO
    104:104:float getZ() -> getZ
    113:114:void setZ(float) -> Usfk
    125:125:float getOffsetX() -> ETTV
    134:135:void setOffsetX(float) -> DaVD
    146:146:float getOffsetY() -> WGen
    155:156:void setOffsetY(float) -> xGGs
    167:167:float getOffsetZ() -> RAHN
    176:177:void setOffsetZ(float) -> wUFa
    187:187:float getParticleData() -> NNMd
    196:197:void setParticleData(float) -> jWQb
    207:207:int getNumberOfParticles() -> iTib
    216:217:void setNumberOfParticles(int) -> OPXr
    227:227:boolean getLongDistance() -> JJQh
    236:237:void setLongDistance(boolean) -> YwfW
    249:249:int[] getData() -> getData
    258:259:void setData(int[]) -> xGHx
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerWorldParticles18 -> org.cyberpwn.react.BKIA:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:com.comphenix.protocol.wrappers.EnumWrappers$Particle getParticleType() -> jhnQ
    50:51:void setParticleType(com.comphenix.protocol.wrappers.EnumWrappers$Particle) -> aehq
    60:60:float getX() -> getX
    68:69:void setX(float) -> iCLi
    78:78:float getY() -> getY
    86:87:void setY(float) -> onqO
    96:96:float getZ() -> getZ
    104:105:void setZ(float) -> Usfk
    114:114:float getOffsetX() -> ETTV
    122:123:void setOffsetX(float) -> DaVD
    132:132:float getOffsetY() -> WGen
    140:141:void setOffsetY(float) -> xGGs
    150:150:float getOffsetZ() -> RAHN
    158:159:void setOffsetZ(float) -> wUFa
    168:168:float getParticleData() -> NNMd
    176:177:void setParticleData(float) -> jWQb
    186:186:int getNumberOfParticles() -> iTib
    194:195:void setNumberOfParticles(int) -> OPXr
    204:204:boolean getLongDistance() -> JJQh
    212:213:void setLongDistance(boolean) -> YwfW
    223:223:int[] getData() -> getData
    231:232:void setData(int[]) -> xGHx
    26:26:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperStatusClientPing -> org.cyberpwn.react.DPpD:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    42:42:long getTime() -> getTime
    51:52:void setTime(long) -> setTime
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperStatusClientStart -> org.cyberpwn.react.tLXt:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperStatusServerOutServerInfo18 -> org.cyberpwn.react.MSYy:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    35:36:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    47:47:com.comphenix.protocol.wrappers.WrappedServerPing getJsonResponse() -> jXMe
    58:59:void setJsonResponse(com.comphenix.protocol.wrappers.WrappedServerPing) -> aehq
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperStatusServerPong -> org.cyberpwn.react.gpgU:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    28:30:void <init>() -> <init>
    33:34:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    44:44:long getTime() -> getTime
    53:54:void setTime(long) -> setTime
    25:25:void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperStatusServerServerInfo -> org.cyberpwn.react.RbjH:
    com.comphenix.protocol.PacketType TYPE -> WkNG
    29:31:void <init>() -> <init>
    34:35:void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    45:45:com.comphenix.protocol.wrappers.WrappedServerPing getJsonResponse() -> jXMe
    54:55:void setJsonResponse(com.comphenix.protocol.wrappers.WrappedServerPing) -> aehq
    26:26:void <clinit>() -> <clinit>
react.rai.Goal -> org.cyberpwn.react.TGNJ:
    react.glang.GList subgoals -> ptYX
    java.lang.String tag -> YGDf
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> uXLw
    26:44:void propigate() -> SCiv
    49:50:void addGoal(react.rai.IGoal) -> aehq
    55:65:react.glang.GList getFailingSubgoals() -> KoWo
    71:71:boolean isFailing() -> WXel
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> vlPq
    void onPropigated() -> Eutg
react.rai.Goal$1 -> org.cyberpwn.react.TGNJ$1:
    react.rai.IGoal val$i -> MnVS
    react.rai.Goal this$0 -> Asaq
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> org.cyberpwn.react.ryWo:
    react.glang.GList getSubgoals() -> uXLw
    void propigate() -> SCiv
    void onPropigated() -> Eutg
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> KoWo
    boolean isFailing() -> WXel
    boolean onCheckFailing() -> vlPq
    void update() -> update
    void addGoal(react.rai.IGoal) -> aehq
react.rai.IRAI -> org.cyberpwn.react.jFlK:
    react.glang.GList getGoals() -> mOtF
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> aehq
    react.glang.GList getEvents() -> sHsq
    void callEvent(react.rai.RAIEvent) -> aehq
    react.glang.GList getListeners() -> Qgun
react.rai.RAI -> org.cyberpwn.react.mXfS:
    react.glang.GList goals -> TbIU
    react.glang.GList events -> CXEq
    react.glang.GList logEvents -> TjXG
    react.glang.GList listeners -> IXvM
    long since -> twsc
    react.rai.RAI instance -> rOkJ
    24:32:void <init>() -> <init>
    37:37:react.glang.GList getGoals() -> mOtF
    43:44:void addGoal(react.rai.IGoal) -> aehq
    49:89:void tick() -> tick
    94:94:react.glang.GList getEvents() -> sHsq
    100:117:void callEvent(react.rai.RAIEvent) -> aehq
    122:122:react.glang.GList getListeners() -> Qgun
react.rai.RAIEvent -> org.cyberpwn.react.kJPO:
    react.rai.RAIEventType type -> WtAf
    java.lang.String[] pars -> dGCE
    java.lang.String ovt -> GuSq
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> Djad
    29:29:java.lang.String[] getPars() -> bqvl
    34:34:java.lang.String getOvt() -> xifI
react.rai.RAIEventType -> org.cyberpwn.react.ielN:
    react.rai.RAIEventType FIRE_ACTION -> gFyx
    react.rai.RAIEventType NOTE_GOAL_FAILING -> iDnu
    react.rai.RAIEventType NOTE_GOAL_FIXED -> rrMp
    java.lang.String[] msgs -> AYqB
    react.rai.RAIEventType[] $VALUES -> yLOK
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> FFTa
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> aehq
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedEntityCounts -> org.cyberpwn.react.Qxxg:
    int spawned -> fTyB
    boolean failing -> tEOk
    double cd -> ixUN
    double ad -> qoJx
    30:34:void <init>() -> <init>
    39:94:boolean onCheckFailing() -> vlPq
    100:150:void onPropigated() -> Eutg
    21:21:boolean access$000(react.rai.goals.GoalReducedEntityCounts) -> aehq
    23:23:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedEntityCounts$1 -> org.cyberpwn.react.Qxxg$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> RSQM
    77:77:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    81:90:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> org.cyberpwn.react.Qxxg$2:
    org.bukkit.Chunk val$lx -> vuiT
    react.rai.goals.GoalReducedEntityCounts this$0 -> RSQM
    135:135:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    139:147:void run() -> run
react.rai.goals.GoalStableChunkTime -> org.cyberpwn.react.jhnQ:
    boolean failing -> tEOk
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> vlPq
    72:76:void onPropigated() -> Eutg
react.rai.goals.GoalStableChunkTime$1 -> org.cyberpwn.react.jhnQ$1:
    react.rai.goals.GoalStableChunkTime this$0 -> rGYn
    49:49:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> org.cyberpwn.react.ETTV:
    boolean failing -> tEOk
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> Eutg
    35:35:void letUp() -> rOCa
    40:77:boolean onCheckFailing() -> vlPq
    15:15:boolean access$000(react.rai.goals.GoalStableEntityTime) -> aehq
react.rai.goals.GoalStableEntityTime$1 -> org.cyberpwn.react.ETTV$1:
    react.rai.goals.GoalStableEntityTime this$0 -> stow
    60:60:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> org.cyberpwn.react.WGen:
    boolean failing -> tEOk
    react.glang.GMap reocc -> DkkC
    32:36:void <init>() -> <init>
    41:107:void onPropigated() -> Eutg
    112:149:boolean onCheckFailing() -> vlPq
    25:25:react.glang.GMap access$000(react.rai.goals.GoalStableFluidTime) -> aehq
    25:25:boolean access$100(react.rai.goals.GoalStableFluidTime) -> CUak
react.rai.goals.GoalStableFluidTime$1 -> org.cyberpwn.react.WGen$1:
    org.bukkit.Chunk val$lx -> vuiT
    react.glang.GList val$otherLaggiest -> huUY
    react.rai.goals.GoalStableFluidTime this$0 -> kBhb
    85:85:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk,react.glang.GList) -> <init>
    89:104:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> org.cyberpwn.react.WGen$2:
    react.rai.goals.GoalStableFluidTime this$0 -> kBhb
    132:132:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    136:145:void run() -> run
react.rai.goals.GoalStableHopperTime -> org.cyberpwn.react.RAHN:
    boolean failing -> tEOk
    react.glang.GMap reocc -> DkkC
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> Eutg
    89:125:boolean onCheckFailing() -> vlPq
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableHopperTime) -> aehq
    24:24:boolean access$100(react.rai.goals.GoalStableHopperTime) -> CUak
react.rai.goals.GoalStableHopperTime$1 -> org.cyberpwn.react.RAHN$1:
    org.bukkit.Chunk val$lx -> vuiT
    react.rai.goals.GoalStableHopperTime this$0 -> ekkQ
    67:67:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> org.cyberpwn.react.RAHN$2:
    react.rai.goals.GoalStableHopperTime this$0 -> ekkQ
    108:108:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> org.cyberpwn.react.NNMd:
    int d -> d
    boolean failing -> tEOk
    react.glang.GMap reocc -> DkkC
    38:43:void <init>() -> <init>
    48:92:void onPropigated() -> Eutg
    97:153:boolean onCheckFailing() -> vlPq
    30:30:react.glang.GMap access$000(react.rai.goals.GoalStableRedstoneTime) -> aehq
    30:30:boolean access$100(react.rai.goals.GoalStableRedstoneTime) -> CUak
react.rai.goals.GoalStableRedstoneTime$1 -> org.cyberpwn.react.NNMd$1:
    org.bukkit.Chunk val$lx -> vuiT
    react.rai.goals.GoalStableRedstoneTime this$0 -> BKtG
    75:75:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    79:89:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> org.cyberpwn.react.NNMd$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> BKtG
    118:118:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    122:131:void run() -> run
react.rai.goals.GoalStableTickTime -> org.cyberpwn.react.iTib:
    boolean failing -> tEOk
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> Eutg
    34:58:boolean onCheckFailing() -> vlPq
    14:14:boolean access$000(react.rai.goals.GoalStableTickTime) -> aehq
react.rai.goals.GoalStableTickTime$1 -> org.cyberpwn.react.iTib$1:
    react.rai.goals.GoalStableTickTime this$0 -> LAAS
    41:41:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.redstone.RedstoneEvent -> org.cyberpwn.react.JJQh:
    surge.util.MaterialBlock block -> GRsO
    org.bukkit.util.Vector vector -> ohhL
    byte from -> KqCJ
    byte to -> UvNs
    17:22:void <init>(org.bukkit.event.block.BlockRedstoneEvent) -> <init>
    26:26:surge.util.MaterialBlock getBlock() -> axGL
    31:32:void setBlock(surge.util.MaterialBlock) -> aehq
    36:36:org.bukkit.util.Vector getVector() -> xque
    41:42:void setVector(org.bukkit.util.Vector) -> HnDD
    46:46:byte getFrom() -> GcJc
    51:52:void setFrom(byte) -> YMQO
    56:56:byte getTo() -> UJPM
    61:62:void setTo(byte) -> JAEj
react.redstone.RedstoneTracker -> org.cyberpwn.react.jXMe:
    org.bukkit.World world -> world
    react.controller.FeatureController fc -> tUrs
    react.glang.GList events -> CXEq
    boolean ticking -> rjAI
    surge.sched.Task task -> JBjf
    boolean nms -> MKsg
    int tr -> BmvR
    react.gmath.Average aav -> Hoia
    boolean handleTicking -> aWOI
    33:55:void <init>(org.bukkit.World) -> <init>
    59:61:void close() -> close
    65:98:void tick() -> tick
    103:127:void set(org.bukkit.Location,surge.util.MaterialBlock) -> CUak
    131:152:void enact(react.redstone.RedstoneEvent) -> aehq
    157:184:void on(org.bukkit.event.block.BlockRedstoneEvent) -> aehq
react.redstone.RedstoneTracker$1 -> org.cyberpwn.react.jXMe$1:
    react.redstone.RedstoneTracker this$0 -> FqtE
    48:48:void <init>(react.redstone.RedstoneTracker,java.lang.String,int) -> <init>
    52:53:void run() -> run
react.sampler.SampleAsyncQueue -> org.cyberpwn.react.uXLw:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleAsyncQueue$1 -> org.cyberpwn.react.uXLw$1:
    react.sampler.SampleAsyncQueue this$0 -> jGvG
    21:21:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleBandwidth -> org.cyberpwn.react.SCiv:
    react.graph.IFormatter formatter -> NOJX
    long u -> FPRF
    long d -> d
    react.gmath.Average aa -> ELkd
    17:33:void <init>() -> <init>
    38:44:void construct() -> ieRS
    49:53:void sample() -> aDHK
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleBandwidth$1 -> org.cyberpwn.react.SCiv$1:
    react.sampler.SampleBandwidth this$0 -> nvdm
    1:25:void <init>(react.sampler.SampleBandwidth) -> <init>
    30:30:java.lang.String from(double) -> owbJ
react.sampler.SampleBandwidthDown -> org.cyberpwn.react.KoWo:
    react.gmath.Average aa -> ELkd
    react.graph.IFormatter formatter -> NOJX
    19:31:void <init>() -> <init>
    36:42:void construct() -> ieRS
    47:49:void sample() -> aDHK
    54:54:java.lang.String get() -> get
    60:60:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleBandwidthDown$1 -> org.cyberpwn.react.KoWo$1:
    react.sampler.SampleBandwidthDown this$0 -> LbbS
    1:23:void <init>(react.sampler.SampleBandwidthDown) -> <init>
    28:28:java.lang.String from(double) -> owbJ
react.sampler.SampleBandwidthUp -> org.cyberpwn.react.WXel:
    react.gmath.Average aa -> ELkd
    react.graph.IFormatter formatter -> NOJX
    19:31:void <init>() -> <init>
    36:42:void construct() -> ieRS
    47:49:void sample() -> aDHK
    54:54:java.lang.String get() -> get
    60:60:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleBandwidthUp$1 -> org.cyberpwn.react.WXel$1:
    react.sampler.SampleBandwidthUp this$0 -> xtBd
    1:23:void <init>(react.sampler.SampleBandwidthUp) -> <init>
    28:28:java.lang.String from(double) -> owbJ
react.sampler.SampleCPU -> org.cyberpwn.react.vlPq:
    react.graph.IFormatter formatter -> NOJX
    react.gmath.Average aa -> ELkd
    18:30:void <init>() -> <init>
    35:41:void construct() -> ieRS
    46:55:void sample() -> aDHK
    60:60:java.lang.String get() -> get
    66:66:react.graph.IFormatter getFormatter() -> HTRL
    15:15:react.gmath.Average access$000(react.sampler.SampleCPU) -> aehq
react.sampler.SampleCPU$1 -> org.cyberpwn.react.vlPq$1:
    react.sampler.SampleCPU this$0 -> QOmo
    23:23:void <init>(react.sampler.SampleCPU) -> <init>
    27:27:java.lang.String from(double) -> owbJ
react.sampler.SampleCPU$2 -> org.cyberpwn.react.vlPq$2:
    react.sampler.SampleCPU this$0 -> QOmo
    47:47:void <init>(react.sampler.SampleCPU) -> <init>
    51:53:void run() -> run
react.sampler.SampleChunkTime -> org.cyberpwn.react.Eutg:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleChunkTime$1 -> org.cyberpwn.react.Eutg$1:
    react.sampler.SampleChunkTime this$0 -> PxAG
    21:21:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleChunksLoaded -> org.cyberpwn.react.mOtF:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleChunksLoaded$1 -> org.cyberpwn.react.mOtF$1:
    react.sampler.SampleChunksLoaded this$0 -> nKpm
    20:20:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SampleChunksLoadedPerSecond -> org.cyberpwn.react.sHsq:
    react.gmath.Average a -> uXuq
    react.graph.IFormatter formatter -> NOJX
    16:29:void <init>() -> <init>
    34:40:void construct() -> ieRS
    45:47:void sample() -> aDHK
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleChunksLoadedPerSecond$1 -> org.cyberpwn.react.sHsq$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> jagm
    22:22:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> owbJ
react.sampler.SampleEntitiesDrops -> org.cyberpwn.react.Qgun:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleEntitiesDrops$1 -> org.cyberpwn.react.Qgun$1:
    react.sampler.SampleEntitiesDrops this$0 -> Cyje
    20:20:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SampleEntitiesLiving -> org.cyberpwn.react.Djad:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleEntitiesLiving$1 -> org.cyberpwn.react.Djad$1:
    react.sampler.SampleEntitiesLiving this$0 -> SVVG
    20:20:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SampleEntitiesTiles -> org.cyberpwn.react.bqvl:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleEntitiesTiles$1 -> org.cyberpwn.react.bqvl$1:
    react.sampler.SampleEntitiesTiles this$0 -> ujWb
    20:20:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SampleEntitiesTotal -> org.cyberpwn.react.xifI:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleEntitiesTotal$1 -> org.cyberpwn.react.xifI$1:
    react.sampler.SampleEntitiesTotal this$0 -> WsdG
    20:20:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SampleEntityDroppedTicks -> org.cyberpwn.react.FFTa:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleEntityDroppedTicks$1 -> org.cyberpwn.react.FFTa$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> kTIf
    21:21:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleEntityTime -> org.cyberpwn.react.rOCa:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleEntityTime$1 -> org.cyberpwn.react.rOCa$1:
    react.sampler.SampleEntityTime this$0 -> TXxO
    21:21:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleEntityTimeLock -> org.cyberpwn.react.axGL:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleEntityTimeLock$1 -> org.cyberpwn.react.axGL$1:
    react.sampler.SampleEntityTimeLock this$0 -> RSRk
    21:21:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleExplosionTime -> org.cyberpwn.react.xque:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleExplosionTime$1 -> org.cyberpwn.react.xque$1:
    react.sampler.SampleExplosionTime this$0 -> SUuN
    20:20:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SampleFluidPerSecond -> org.cyberpwn.react.GcJc:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleFluidPerSecond$1 -> org.cyberpwn.react.GcJc$1:
    react.sampler.SampleFluidPerSecond this$0 -> AHpl
    21:21:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleFluidPerTick -> org.cyberpwn.react.UJPM:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    46:53:void sample() -> aDHK
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleFluidPerTick$1 -> org.cyberpwn.react.UJPM$1:
    react.sampler.SampleFluidPerTick this$0 -> MCbe
    21:21:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleFluidTickTime -> org.cyberpwn.react.GYwy:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleFluidTickTime$1 -> org.cyberpwn.react.GYwy$1:
    react.sampler.SampleFluidTickTime this$0 -> LAAI
    21:21:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleFluidTickUtilization -> org.cyberpwn.react.LGfC:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    46:53:void sample() -> aDHK
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleFluidTickUtilization$1 -> org.cyberpwn.react.LGfC$1:
    react.sampler.SampleFluidTickUtilization this$0 -> PoOi
    21:21:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleGrowthTime -> org.cyberpwn.react.rhTl:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleGrowthTime$1 -> org.cyberpwn.react.rhTl$1:
    react.sampler.SampleGrowthTime this$0 -> Okmv
    20:20:void <init>(react.sampler.SampleGrowthTime) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SampleHopperPerSecond -> org.cyberpwn.react.EnEx:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleHopperPerSecond$1 -> org.cyberpwn.react.EnEx$1:
    react.sampler.SampleHopperPerSecond this$0 -> FOqj
    21:21:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleHopperPerTick -> org.cyberpwn.react.bHDp:
    react.graph.IFormatter formatter -> NOJX
    19:29:void <init>() -> <init>
    34:40:void construct() -> ieRS
    47:54:void sample() -> aDHK
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleHopperPerTick$1 -> org.cyberpwn.react.bHDp$1:
    react.sampler.SampleHopperPerTick this$0 -> rPPc
    21:21:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleHopperTickTime -> org.cyberpwn.react.hIXi:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleHopperTickTime$1 -> org.cyberpwn.react.hIXi$1:
    react.sampler.SampleHopperTickTime this$0 -> tETt
    21:21:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleHopperTickUtilization -> org.cyberpwn.react.Puvt:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    46:53:void sample() -> aDHK
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleHopperTickUtilization$1 -> org.cyberpwn.react.Puvt$1:
    react.sampler.SampleHopperTickUtilization this$0 -> WsfW
    21:21:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleMemoryAllocated -> org.cyberpwn.react.PdvE:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleMemoryAllocated$1 -> org.cyberpwn.react.PdvE$1:
    react.sampler.SampleMemoryAllocated this$0 -> jHYR
    20:20:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SampleMemoryAllocationPerSecond -> org.cyberpwn.react.FqLH:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleMemoryAllocationPerSecond$1 -> org.cyberpwn.react.FqLH$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> iDtr
    20:20:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SampleMemoryFree -> org.cyberpwn.react.PLDj:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleMemoryFree$1 -> org.cyberpwn.react.PLDj$1:
    react.sampler.SampleMemoryFree this$0 -> dXHt
    20:20:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SampleMemoryMax -> org.cyberpwn.react.iCjh:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleMemoryMax$1 -> org.cyberpwn.react.iCjh$1:
    react.sampler.SampleMemoryMax this$0 -> KgsH
    20:20:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SampleMemoryUse -> org.cyberpwn.react.kcce:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleMemoryUse$1 -> org.cyberpwn.react.kcce$1:
    react.sampler.SampleMemoryUse this$0 -> wWOQ
    20:20:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SamplePacketsPerSecond -> org.cyberpwn.react.sslK:
    react.gmath.Average aa -> ELkd
    react.graph.IFormatter formatter -> NOJX
    long u -> FPRF
    long d -> d
    18:33:void <init>() -> <init>
    38:44:void construct() -> ieRS
    49:53:void sample() -> aDHK
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SamplePacketsPerSecond$1 -> org.cyberpwn.react.sslK$1:
    react.sampler.SamplePacketsPerSecond this$0 -> rPPU
    1:25:void <init>(react.sampler.SamplePacketsPerSecond) -> <init>
    30:30:java.lang.String from(double) -> owbJ
react.sampler.SamplePhysicsTickTime -> org.cyberpwn.react.lDcc:
    react.graph.IFormatter formatter -> NOJX
    18:27:void <init>() -> <init>
    32:38:void construct() -> ieRS
    43:44:void sample() -> aDHK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SamplePhysicsTickTime$1 -> org.cyberpwn.react.lDcc$1:
    react.sampler.SamplePhysicsTickTime this$0 -> kSlK
    20:20:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> owbJ
react.sampler.SampleRedstonePerSecond -> org.cyberpwn.react.BKKw:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleRedstonePerSecond$1 -> org.cyberpwn.react.BKKw$1:
    react.sampler.SampleRedstonePerSecond this$0 -> KWSB
    21:21:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleRedstonePerTick -> org.cyberpwn.react.uqbC:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    46:53:void sample() -> aDHK
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleRedstonePerTick$1 -> org.cyberpwn.react.uqbC$1:
    react.sampler.SampleRedstonePerTick this$0 -> txYc
    21:21:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleRedstoneTickTime -> org.cyberpwn.react.kuEt:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleRedstoneTickTime$1 -> org.cyberpwn.react.kuEt$1:
    react.sampler.SampleRedstoneTickTime this$0 -> sldy
    21:21:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleRedstoneTickUtilization -> org.cyberpwn.react.IWpq:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    46:53:void sample() -> aDHK
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleRedstoneTickUtilization$1 -> org.cyberpwn.react.IWpq$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> smFW
    21:21:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleSyncQueue -> org.cyberpwn.react.yKJO:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleSyncQueue$1 -> org.cyberpwn.react.yKJO$1:
    react.sampler.SampleSyncQueue this$0 -> UeOv
    21:21:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleTickTime -> org.cyberpwn.react.TFnr:
    react.graph.IFormatter formatter -> NOJX
    react.gmath.Average aa -> ELkd
    17:29:void <init>() -> <init>
    34:40:void construct() -> ieRS
    45:47:void sample() -> aDHK
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleTickTime$1 -> org.cyberpwn.react.TFnr$1:
    react.sampler.SampleTickTime this$0 -> GmGe
    22:22:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> owbJ
react.sampler.SampleTickUtilization -> org.cyberpwn.react.WGhR:
    react.graph.IFormatter formatter -> NOJX
    react.gmath.Average aa -> ELkd
    17:29:void <init>() -> <init>
    34:40:void construct() -> ieRS
    45:47:void sample() -> aDHK
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleTickUtilization$1 -> org.cyberpwn.react.WGhR$1:
    react.sampler.SampleTickUtilization this$0 -> dNvT
    22:22:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> owbJ
react.sampler.SampleTicksPerSecond -> org.cyberpwn.react.fnFa:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleTicksPerSecond$1 -> org.cyberpwn.react.fnFa$1:
    react.sampler.SampleTicksPerSecond this$0 -> urjk
    21:21:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleTileDroppedTicks -> org.cyberpwn.react.xqxm:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleTileDroppedTicks$1 -> org.cyberpwn.react.xqxm$1:
    react.sampler.SampleTileDroppedTicks this$0 -> xQaE
    21:21:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleTileTime -> org.cyberpwn.react.tUKk:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleTileTime$1 -> org.cyberpwn.react.tUKk$1:
    react.sampler.SampleTileTime this$0 -> MUGM
    21:21:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.sampler.SampleTileTimeLock -> org.cyberpwn.react.oyAd:
    react.graph.IFormatter formatter -> NOJX
    19:28:void <init>() -> <init>
    33:39:void construct() -> ieRS
    44:45:void sample() -> aDHK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HTRL
react.sampler.SampleTileTimeLock$1 -> org.cyberpwn.react.oyAd$1:
    react.sampler.SampleTileTimeLock this$0 -> JePA
    21:21:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> owbJ
react.security.IPSecAlpha -> org.cyberpwn.react.xaWp:
    java.lang.String ip -> SUvj
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.IPSecBravo -> org.cyberpwn.react.wwgQ:
    java.lang.String ip -> SUvj
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.IPSecCharlie -> org.cyberpwn.react.QpkG:
    java.lang.String ip -> SUvj
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.IPSecDelta -> org.cyberpwn.react.biiL:
    java.lang.String ip -> SUvj
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.IPSecEcho -> org.cyberpwn.react.qLBX:
    java.lang.String ip -> SUvj
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.IPSecFoxtrot -> org.cyberpwn.react.cllJ:
    java.lang.String ip -> SUvj
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.SecurityCheckpointAlpha -> org.cyberpwn.react.SwPX:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> GYwy
    77:141:void doScan(java.lang.Runnable) -> CUak
    145:174:byte[] readResource(java.io.File,java.lang.String) -> aehq
    179:210:react.glang.GMap scan(java.io.File) -> CUak
    32:32:byte[] access$000(java.io.File,java.lang.String) -> CUak
react.security.SecurityCheckpointAlpha$1 -> org.cyberpwn.react.SwPX$1:
    java.lang.Runnable val$r -> XTfB
    78:78:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.SecurityCheckpointAlpha$1$1 -> org.cyberpwn.react.SwPX$1$1:
    react.security.SecurityCheckpointAlpha$1 this$0 -> hSSI
    131:131:void <init>(react.security.SecurityCheckpointAlpha$1) -> <init>
    135:137:void run() -> run
react.security.SecurityCheckpointBravo -> org.cyberpwn.react.OarI:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> GYwy
    77:141:void doScan(java.lang.Runnable) -> CUak
    145:174:byte[] readResource(java.io.File,java.lang.String) -> aehq
    179:210:react.glang.GMap scan(java.io.File) -> CUak
    32:32:byte[] access$000(java.io.File,java.lang.String) -> CUak
react.security.SecurityCheckpointBravo$1 -> org.cyberpwn.react.OarI$1:
    java.lang.Runnable val$r -> XTfB
    78:78:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.SecurityCheckpointBravo$1$1 -> org.cyberpwn.react.OarI$1$1:
    react.security.SecurityCheckpointBravo$1 this$0 -> CFhr
    131:131:void <init>(react.security.SecurityCheckpointBravo$1) -> <init>
    135:137:void run() -> run
react.security.SecurityCheckpointCharlie -> org.cyberpwn.react.QqJU:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> GYwy
    77:141:void doScan(java.lang.Runnable) -> CUak
    145:174:byte[] readResource(java.io.File,java.lang.String) -> aehq
    179:210:react.glang.GMap scan(java.io.File) -> CUak
    32:32:byte[] access$000(java.io.File,java.lang.String) -> CUak
react.security.SecurityCheckpointCharlie$1 -> org.cyberpwn.react.QqJU$1:
    java.lang.Runnable val$r -> XTfB
    78:78:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.SecurityCheckpointCharlie$1$1 -> org.cyberpwn.react.QqJU$1$1:
    react.security.SecurityCheckpointCharlie$1 this$0 -> yedc
    131:131:void <init>(react.security.SecurityCheckpointCharlie$1) -> <init>
    135:137:void run() -> run
react.security.SecurityCheckpointDelta -> org.cyberpwn.react.rVst:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> GYwy
    77:141:void doScan(java.lang.Runnable) -> CUak
    145:174:byte[] readResource(java.io.File,java.lang.String) -> aehq
    179:210:react.glang.GMap scan(java.io.File) -> CUak
    32:32:byte[] access$000(java.io.File,java.lang.String) -> CUak
react.security.SecurityCheckpointDelta$1 -> org.cyberpwn.react.rVst$1:
    java.lang.Runnable val$r -> XTfB
    78:78:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.SecurityCheckpointDelta$1$1 -> org.cyberpwn.react.rVst$1$1:
    react.security.SecurityCheckpointDelta$1 this$0 -> SUvg
    131:131:void <init>(react.security.SecurityCheckpointDelta$1) -> <init>
    135:137:void run() -> run
react.security.SecurityCheckpointEcho -> org.cyberpwn.react.sIWF:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> GYwy
    77:141:void doScan(java.lang.Runnable) -> CUak
    145:174:byte[] readResource(java.io.File,java.lang.String) -> aehq
    179:210:react.glang.GMap scan(java.io.File) -> CUak
    32:32:byte[] access$000(java.io.File,java.lang.String) -> CUak
react.security.SecurityCheckpointEcho$1 -> org.cyberpwn.react.sIWF$1:
    java.lang.Runnable val$r -> XTfB
    78:78:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.SecurityCheckpointEcho$1$1 -> org.cyberpwn.react.sIWF$1$1:
    react.security.SecurityCheckpointEcho$1 this$0 -> ipIF
    131:131:void <init>(react.security.SecurityCheckpointEcho$1) -> <init>
    135:137:void run() -> run
react.security.SecurityCheckpointFoxtrot -> org.cyberpwn.react.FgyH:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> GYwy
    77:141:void doScan(java.lang.Runnable) -> CUak
    145:174:byte[] readResource(java.io.File,java.lang.String) -> aehq
    179:210:react.glang.GMap scan(java.io.File) -> CUak
    32:32:byte[] access$000(java.io.File,java.lang.String) -> CUak
react.security.SecurityCheckpointFoxtrot$1 -> org.cyberpwn.react.FgyH$1:
    java.lang.Runnable val$r -> XTfB
    78:78:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.SecurityCheckpointFoxtrot$1$1 -> org.cyberpwn.react.FgyH$1$1:
    react.security.SecurityCheckpointFoxtrot$1 this$0 -> sApD
    131:131:void <init>(react.security.SecurityCheckpointFoxtrot$1) -> <init>
    135:137:void run() -> run
react.security.SecurityLockAlpha -> org.cyberpwn.react.JSCn:
    16:49:void <init>() -> <init>
react.security.SecurityLockAlpha$1 -> org.cyberpwn.react.JSCn$1:
    java.io.File val$f -> wFLl
    react.security.SecurityLockAlpha this$0 -> agoy
    23:23:void <init>(react.security.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.security.SecurityLockBravo -> org.cyberpwn.react.BKML:
    16:49:void <init>() -> <init>
react.security.SecurityLockBravo$1 -> org.cyberpwn.react.BKML$1:
    java.io.File val$f -> wFLl
    react.security.SecurityLockBravo this$0 -> jHXF
    23:23:void <init>(react.security.SecurityLockBravo,java.io.File) -> <init>
    27:40:void run() -> run
react.security.SecurityLockCharlie -> org.cyberpwn.react.KgIH:
    16:49:void <init>() -> <init>
react.security.SecurityLockCharlie$1 -> org.cyberpwn.react.KgIH$1:
    java.io.File val$f -> wFLl
    react.security.SecurityLockCharlie this$0 -> ExDM
    23:23:void <init>(react.security.SecurityLockCharlie,java.io.File) -> <init>
    27:40:void run() -> run
react.security.SecurityLockDelta -> org.cyberpwn.react.tDIe:
    16:49:void <init>() -> <init>
react.security.SecurityLockDelta$1 -> org.cyberpwn.react.tDIe$1:
    java.io.File val$f -> wFLl
    react.security.SecurityLockDelta this$0 -> FjFA
    23:23:void <init>(react.security.SecurityLockDelta,java.io.File) -> <init>
    27:40:void run() -> run
react.security.SecurityLockFoxtrot -> org.cyberpwn.react.SwPi:
    16:49:void <init>() -> <init>
react.security.SecurityLockFoxtrot$1 -> org.cyberpwn.react.SwPi$1:
    java.io.File val$f -> wFLl
    react.security.SecurityLockFoxtrot this$0 -> kTLQ
    23:23:void <init>(react.security.SecurityLockFoxtrot,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> org.cyberpwn.react.sAFf:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> qmKF
react.slate.PhantomSlate -> org.cyberpwn.react.feUJ:
    react.glang.GList lines -> PEAQ
    react.glang.GList viewers -> ExEr
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> bkVw
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> LGfC
    44:45:void set(int,java.lang.String) -> CUak
    50:51:void setLines(react.glang.GList) -> ssNC
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> build
    91:95:void addViewer(org.bukkit.entity.Player) -> qmKF
    100:102:void removeViewer(org.bukkit.entity.Player) -> TWTu
    107:107:react.glang.GList getViewers() -> rhTl
    113:113:boolean isViewing(org.bukkit.entity.Player) -> mWlX
    119:120:void addLine(java.lang.String) -> Ushu
    125:126:void clearLines() -> EnEx
react.slate.Slate -> org.cyberpwn.react.jrAf:
    void build() -> build
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> LGfC
    void set(int,java.lang.String) -> CUak
    void setLines(react.glang.GList) -> ssNC
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> qmKF
    void addLine(java.lang.String) -> Ushu
    void clearLines() -> EnEx
    void removeViewer(org.bukkit.entity.Player) -> TWTu
    react.glang.GList getViewers() -> rhTl
    boolean isViewing(org.bukkit.entity.Player) -> mWlX
    void update() -> update
react.slate.SlateUtil -> org.cyberpwn.react.hAKB:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> bHDp
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> hIXi
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> aehq
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> CUak
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> HnDD
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> aehq
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> aehq
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> CUak
    186:196:java.lang.String convertJSON(java.lang.String) -> HTRL
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> xGHx
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> CUak
react.text.ColoredString -> org.cyberpwn.react.AYMT:
    surge.util.C c -> YGKI
    java.lang.String s -> s
    24:27:void <init>(surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:surge.util.C getC() -> Puvt
    42:43:void setC(surge.util.C) -> CUak
    47:47:java.lang.String getS() -> PdvE
    52:53:void setS(java.lang.String) -> QUyv
react.text.RTEX -> org.cyberpwn.react.xHIN:
    react.glang.GList extras -> bcFn
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> FqLH
    44:58:react.json.JSONObject toJSON() -> JYyE
react.text.RTX -> org.cyberpwn.react.Jcfm:
    react.json.JSONArray base -> nehl
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> xGHx
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,surge.util.C) -> CUak
    81:90:void addTextHover(java.lang.String,react.text.RTEX,surge.util.C) -> aehq
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,surge.util.C) -> aehq
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,surge.util.C) -> CUak
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,surge.util.C) -> HnDD
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,surge.util.C) -> aehq
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,surge.util.C) -> CUak
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,surge.util.C) -> HnDD
    265:265:react.json.JSONArray toJSON() -> PLDj
    276:277:void tellRawTo(org.bukkit.entity.Player) -> YwfW
react.text.RawText -> org.cyberpwn.react.WYLV:
    java.lang.String COLOR_BLACK -> tpLL
    java.lang.String COLOR_DARK_BLUE -> bjur
    java.lang.String COLOR_DARK_GREEN -> mYtd
    java.lang.String COLOR_DARK_AQUA -> UvRx
    java.lang.String COLOR_DARK_RED -> HNJt
    java.lang.String COLOR_DARK_PURPLE -> aNbT
    java.lang.String COLOR_GOLD -> Ajvy
    java.lang.String COLOR_GRAY -> sAsF
    java.lang.String COLOR_DARK_GRAY -> xsew
    java.lang.String COLOR_BLUE -> OlRH
    java.lang.String COLOR_GREEN -> UvSb
    java.lang.String COLOR_AQUA -> aqEj
    java.lang.String COLOR_RED -> Pfci
    java.lang.String COLOR_LIGHT_PURPLE -> bADY
    java.lang.String COLOR_YELLOW -> vdnl
    java.lang.String COLOR_WHITE -> SMjK
    java.lang.String COLOR_NONE -> mQck
    java.lang.String HEAD_TEXT -> eIkS
    java.lang.String HEAD_COLOR -> yegV
    java.lang.String HEAD_BOLD -> lhSM
    java.lang.String HEAD_ITALIC -> uGxY
    java.lang.String HEAD_UNDERLINED -> VpdX
    java.lang.String HEAD_STRIKETHROUGH -> EMQU
    java.lang.String HEAD_OBFUSCATED -> plOL
    java.lang.String HEAD_CLICK_EVENT -> rXbW
    java.lang.String HEAD_HOVER_EVENT -> dykv
    java.lang.String HEAD_ACTION -> jsOD
    java.lang.String HEAD_VALUE -> pIjQ
    java.lang.String HEAD_EXTRA -> wqBj
    java.lang.String HEAD_ACTION_SHOW_TEXT -> sArF
    java.lang.String HEAD_ACTION_COMMAND -> wgqP
    java.util.ArrayList components -> XLWT
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> HvTo
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> HnDD
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> aehq
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> aehq
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> aehq
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> aehq
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> aehq
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> aehq
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> aehq
    307:313:java.lang.String compile() -> iCjh
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> aehq
surge.Main -> org.cyberpwn.react.USEj:
    react.glang.GList plugins -> Ajwt
    react.glang.GMap pluginInstances -> tMew
    react.glang.GList controllerSet -> hBVl
    react.glang.GMap anchors -> tolg
    react.glang.GList classes -> bsjE
    java.lang.reflect.Field nsField -> lNcR
    java.lang.reflect.Field thField -> IbPx
    react.glang.GList tracks -> wxvI
    long nsf -> LAGX
    surge.server.SuperSampler ssx -> ukAI
    38:38:void <init>() -> <init>
    55:55:void onControllerRegistry() -> kcce
    59:63:void reload() -> reload
    68:87:long getNanoSync() -> sslK
    92:93:void requestResetNanos() -> lDcc
    98:112:int getThreadCount() -> getThreadCount
    123:143:void onStart(surge.util.Protocol) -> aehq
    150:163:void onStop() -> BKKw
    169:169:void onPostInit() -> uqbC
    175:175:void onPreInit() -> kuEt
    179:190:void shutDownAmps() -> IWpq
    194:403:void initializeAmps() -> yKJO
    408:449:void doScan() -> TFnr
    453:475:void scanForPoolDefiners() -> WGhR
    479:495:void scanForRawEvents() -> fnFa
    499:515:void scanForDynamicTrack() -> xqxm
    519:540:void scanForAmps() -> tUKk
    545:564:void onTick() -> rorj
    568:568:surge.server.SuperSampler getSuperSampler() -> dDhA
    44:48:void <clinit>() -> <clinit>
surge.PluginAmp -> org.cyberpwn.react.hRKv:
    surge.control.AmpedPlugin plugin -> RAwW
    boolean connected -> connected
    int masterTask -> IaqH
    java.lang.Runnable onReload -> Pnun
    18:30:void <init>(surge.control.AmpedPlugin) -> <init>
    34:34:surge.control.AmpedPlugin getPluginInstance() -> oyAd
    39:39:boolean isConnected() -> isConnected
    44:64:void connect() -> connect
    68:80:void masterTick() -> xaWp
    84:88:void disconnect() -> disconnect
    92:102:int startTask(int,java.lang.Runnable) -> aehq
    107:117:int startRepeatingTask(int,int,java.lang.Runnable) -> aehq
    122:123:void stopTask(int) -> oEBx
    127:127:surge.control.AmpedPlugin getPlugin() -> wwgQ
    132:132:int getMasterTask() -> QpkG
    137:137:java.lang.Runnable getOnReload() -> biiL
    142:143:void setPlugin(surge.control.AmpedPlugin) -> aehq
    147:148:void setConnected(boolean) -> setConnected
    152:153:void setMasterTask(int) -> hjaS
    157:158:void setOnReload(java.lang.Runnable) -> HnDD
    10:10:void access$000(surge.PluginAmp) -> aehq
surge.PluginAmp$1 -> org.cyberpwn.react.hRKv$1:
    surge.PluginAmp this$0 -> VWVO
    23:23:void <init>(surge.PluginAmp) -> <init>
    28:28:void run() -> run
surge.PluginAmp$2 -> org.cyberpwn.react.hRKv$2:
    surge.PluginAmp this$0 -> VWVO
    47:47:void <init>(surge.PluginAmp) -> <init>
    51:53:void run() -> run
surge.PluginAmp$3 -> org.cyberpwn.react.hRKv$3:
    surge.PluginAmp this$0 -> VWVO
    57:57:void <init>(surge.PluginAmp) -> <init>
    61:62:void run() -> run
surge.Surge -> org.cyberpwn.react.hHyn:
    surge.PluginAmp amp -> mRFk
    react.glang.GList tickComponents -> xRFY
    react.glang.GList atickComponents -> qxEg
    surge.sched.TaskManager taskmgr -> wNat
    surge.hotload.HotloadManager hotloadmgr -> cDHU
    java.lang.Thread mainThread -> kCOH
    18:18:void <init>() -> <init>
    29:29:boolean isObfuscated() -> isObfuscated
    34:35:void register(org.bukkit.event.Listener) -> aehq
    39:40:void unregister(org.bukkit.event.Listener) -> unregister
    44:44:java.io.File folder(java.lang.String) -> aDHK
    49:49:java.io.File folder() -> qLBX
    54:56:java.io.File getPluginJarFile() -> cllJ
    61:63:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> bNyW
    68:70:void startup() -> startup
    74:74:java.lang.Thread getServerThread() -> SwPX
    79:79:react.glang.GList getTickComponents() -> OarI
    84:84:react.glang.GList getAsyncTickComponents() -> QqJU
    89:96:void registerTicked(surge.sched.IMasterTickComponent) -> aehq
    100:107:void unregisterTicked(surge.sched.IMasterTickComponent) -> CUak
    111:116:surge.PluginAmp createAmp(surge.control.AmpedPlugin) -> CUak
    121:121:boolean isMainThread() -> isMainThread
    126:127:void stopAmp() -> rVst
    131:131:boolean hasAmp() -> sIWF
    136:136:surge.PluginAmp getAmp() -> FgyH
    141:141:surge.sched.TaskManager getTaskManager() -> JSCn
    146:146:surge.hotload.HotloadManager getHotloadManager() -> BKML
    20:152:void <clinit>() -> <clinit>
surge.cluster.Cluster -> org.cyberpwn.react.JJUd:
    surge.cluster.ClusterType type -> NGKw
    java.lang.Object t -> qfKu
    9:12:void <init>(surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:surge.cluster.ClusterType getType() -> KgIH
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
surge.cluster.ClusterBoolean -> org.cyberpwn.react.rpkG:
    7:8:void <init>(java.lang.Boolean) -> <init>
surge.cluster.ClusterDouble -> org.cyberpwn.react.PCVM:
    7:8:void <init>(java.lang.Double) -> <init>
surge.cluster.ClusterInt -> org.cyberpwn.react.UuJC:
    7:8:void <init>(java.lang.Integer) -> <init>
surge.cluster.ClusterLong -> org.cyberpwn.react.pIAo:
    7:8:void <init>(java.lang.Long) -> <init>
surge.cluster.ClusterString -> org.cyberpwn.react.rWXS:
    7:8:void <init>(java.lang.String) -> <init>
surge.cluster.ClusterStringList -> org.cyberpwn.react.QNij:
    9:10:void <init>(java.util.List) -> <init>
surge.cluster.ClusterType -> org.cyberpwn.react.hsnN:
    surge.cluster.ClusterType INT -> RKGu
    surge.cluster.ClusterType BOOLEAN -> uPko
    surge.cluster.ClusterType STRING -> MvmL
    surge.cluster.ClusterType STRING_LIST -> bkWp
    surge.cluster.ClusterType DOUBLE -> cCff
    surge.cluster.ClusterType LONG -> eJOI
    surge.cluster.ClusterType[] $VALUES -> RKIG
    3:3:surge.cluster.ClusterType[] values() -> values
    3:3:surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:5:void <clinit>() -> <clinit>
surge.cluster.ConfigurationDataInput -> org.cyberpwn.react.TrGD:
    12:12:void <init>() -> <init>
    17:127:void read(surge.cluster.IConfigurable,java.io.File) -> aehq
    132:257:surge.cluster.DataCluster fillDefaults(surge.cluster.IConfigurable) -> aehq
surge.cluster.ConfigurationDataInput$1 -> org.cyberpwn.react.TrGD$1:
    int[] $SwitchMap$surge$cluster$ClusterType -> mbfS
    44:44:void <clinit>() -> <clinit>
surge.cluster.ConfigurationDataOutput -> org.cyberpwn.react.pQQy:
    12:12:void <init>() -> <init>
    17:143:void write(surge.cluster.IConfigurable,java.io.File) -> CUak
surge.cluster.DataCluster -> org.cyberpwn.react.RRNG:
    react.glang.GMap clusters -> hKFh
    18:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> tDIe
    29:33:void fromJson(react.json.JSONObject) -> uOBF
    37:44:react.json.JSONObject toJson() -> SwPi
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> sAFf
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> aehq
    104:104:boolean contains(java.lang.String) -> contains
    109:109:surge.cluster.ClusterType getType(java.lang.String) -> ieRS
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> uOBF
    194:195:void set(java.lang.String,int) -> xGHx
    199:200:void set(java.lang.String,boolean) -> HnDD
    204:205:void set(java.lang.String,double) -> HnDD
    209:210:void set(java.lang.String,long) -> HnDD
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> aehq
surge.cluster.ICluster -> org.cyberpwn.react.Qplf:
    surge.cluster.ClusterType getType() -> KgIH
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
surge.cluster.IConfigurable -> org.cyberpwn.react.sbjp:
surge.cluster.IDataInput -> org.cyberpwn.react.xOwW:
    surge.cluster.DataCluster read(java.io.File) -> HnDD
surge.cluster.IDataOutput -> org.cyberpwn.react.jWor:
    void write(surge.cluster.DataCluster,java.io.File) -> aehq
surge.cluster.Key -> org.cyberpwn.react.Euxk:
    java.lang.String value() -> value
surge.cluster.KeyPointer -> org.cyberpwn.react.NpSX:
    int value() -> value
surge.cluster.KeyStore -> org.cyberpwn.react.NNPS:
surge.cluster.ReflectedConfigurationException -> org.cyberpwn.react.pbTA:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
surge.cluster.YamlDataInput -> org.cyberpwn.react.lEEk:
    8:8:void <init>() -> <init>
    13:27:surge.cluster.DataCluster read(java.io.File) -> HnDD
surge.cluster.YamlDataOutput -> org.cyberpwn.react.DICk:
    6:6:void <init>() -> <init>
    13:20:void write(surge.cluster.DataCluster,java.io.File) -> aehq
surge.collection.GSound -> org.cyberpwn.react.HDOA:
    java.lang.String sound -> Hona
    org.bukkit.Sound iSound -> Pntr
    java.lang.Float volume -> JuuG
    java.lang.Float pitch -> JuuF
    17:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    24:28:void <init>(java.lang.String) -> <init>
    31:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    38:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> KelX
    61:72:void play(org.bukkit.Location) -> xGHx
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> aehq
    93:93:java.lang.String getSound() -> feUJ
    98:99:void setSound(java.lang.String) -> lejP
    103:103:org.bukkit.Sound getiSound() -> jrAf
    108:109:void setiSound(org.bukkit.Sound) -> CUak
    113:113:java.lang.Float getVolume() -> hAKB
    118:119:void setVolume(java.lang.Float) -> aehq
    123:123:java.lang.Float getPitch() -> AYMT
    128:129:void setPitch(java.lang.Float) -> CUak
surge.control.AmpedPlugin -> org.cyberpwn.react.TyuH:
    react.glang.GList controllers -> nvnY
    react.gconcurrent.ParallelPoolManager pp -> Efgh
    surge.server.CoreTickThread ctt -> UBrH
    java.util.UUID idx -> Sxak
    20:20:void <init>() -> <init>
    void doScan() -> TFnr
    long getNanoSync() -> sslK
    int getThreadCount() -> getThreadCount
    36:36:void onReload() -> xHIN
    41:88:void onEnable() -> onEnable
    92:97:void moveLegacy() -> Jcfm
    101:128:boolean checkForLegacy() -> WYLV
    134:145:void onDisable() -> onDisable
    150:150:react.glang.GList getControllers() -> USEj
    156:157:void registerController(surge.control.IController) -> aehq
    162:173:void onTick() -> rorj
    178:178:java.lang.String getTickName() -> srvL
    184:184:react.gconcurrent.ParallelPoolManager getThreadPool() -> hRKv
    189:246:void destroyOldThreads() -> hHyn
    void onControllerRegistry() -> kcce
    void onStart(surge.util.Protocol) -> aehq
    void onStop() -> BKKw
    void onPostInit() -> uqbC
    void onPreInit() -> kuEt
surge.control.AmpedPlugin$1 -> org.cyberpwn.react.TyuH$1:
    surge.control.AmpedPlugin this$0 -> QPXh
    62:62:void <init>(surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    66:66:long getNanoGate() -> cIsd
surge.control.AmpedPlugin$2 -> org.cyberpwn.react.TyuH$2:
    surge.control.AmpedPlugin this$0 -> QPXh
    203:203:void <init>(surge.control.AmpedPlugin) -> <init>
    207:239:void run() -> run
surge.control.Control -> org.cyberpwn.react.uiRB:
surge.control.Controller -> org.cyberpwn.react.pPop:
    8:10:void <init>() -> <init>
surge.control.Disable -> org.cyberpwn.react.Ucet:
surge.control.Enable -> org.cyberpwn.react.pIAJ:
surge.control.IController -> org.cyberpwn.react.qLDU:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
surge.control.Instance -> org.cyberpwn.react.qmfS:
surge.control.Plugin -> org.cyberpwn.react.tULt:
surge.control.SurgePlugin -> org.cyberpwn.react.nJmd:
    void onStart(surge.util.Protocol) -> aehq
    void onStop() -> BKKw
    void onPostInit() -> uqbC
    void onPreInit() -> kuEt
    void onControllerRegistry() -> kcce
    void registerController(surge.control.IController) -> aehq
    react.glang.GList getControllers() -> USEj
    react.gconcurrent.ParallelPoolManager getThreadPool() -> hRKv
surge.hotload.HotloadManager -> org.cyberpwn.react.NhEo:
    react.glang.GMap filemods -> lyYd
    react.glang.GMap filesizes -> Vgwm
    react.glang.GMap fileacts -> vnEe
    19:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> aehq
    35:38:void untrack(java.io.File) -> bNyW
    42:45:void untrackall() -> JJUd
    50:86:void onTick() -> rorj
    91:91:java.lang.String getTickName() -> srvL
    12:12:react.glang.GMap access$000(surge.hotload.HotloadManager) -> aehq
    12:12:react.glang.GMap access$100(surge.hotload.HotloadManager) -> CUak
    12:12:react.glang.GMap access$200(surge.hotload.HotloadManager) -> HnDD
surge.hotload.HotloadManager$1 -> org.cyberpwn.react.NhEo$1:
    surge.hotload.HotloadManager this$0 -> veSj
    56:56:void <init>(surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
surge.nms.NMSClass -> org.cyberpwn.react.JciQ:
    boolean init -> iNMK
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> YXQQ
    java.lang.Class IChatBaseComponent -> drCN
    java.lang.Class ChatSerializer -> LcLt
    java.lang.Class PacketPlayOutPlayerInfo -> vBon
    java.lang.Class PlayerInfoData -> jsRx
    java.lang.Class EnumPlayerInfoAction -> qxFt
    java.lang.Class GameProfile -> AbmJ
    java.lang.Class EnumGamemode -> Vpgn
    java.lang.Class TileEntitySkull -> vnDf
    java.lang.Class LoadingCache -> bbhh
    3:3:void <init>() -> <init>
    6:131:void <clinit>() -> <clinit>
surge.nms.NMSX -> org.cyberpwn.react.IWuH:
    surge.nms.NMSX bountifulAPI -> Dtec
    boolean useOldMethods -> NqbT
    java.lang.String nmsver -> lqHC
    java.lang.Object eTimes -> oyol
    java.lang.Object eTitle -> AtOH
    java.lang.Object eSubtitle -> CrCh
    17:17:void <init>() -> <init>
    28:30:java.lang.String getVersion() -> getVersion
    37:47:void setAi(org.bukkit.entity.LivingEntity,boolean) -> aehq
    58:72:java.lang.Class getCBNMSClass(java.lang.String) -> hQNB
    77:91:java.lang.Class getCBClass(java.lang.String) -> WXLq
    98:106:java.lang.Object serializeChat(java.lang.String) -> ogCe
    111:116:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> aehq
    121:123:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> aehq
    133:133:java.lang.String getBukkitVersion() -> getBukkitVersion
    143:143:java.lang.String nmsPackage() -> rpkG
    153:153:java.lang.String craftPackage() -> PCVM
    168:180:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> aehq
    186:195:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> aehq
    199:209:java.lang.Class getNMSClass(java.lang.String) -> xiLr
    219:277:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> aehq
    281:282:void clearTitle(org.bukkit.entity.Player) -> Pljn
    286:318:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> HnDD
    322:382:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> HnDD
    386:412:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> aehq
    416:417:void sendActionBarToAllPlayers(java.lang.String) -> VvmG
    421:425:void sendActionBarToAllPlayers(java.lang.String,int) -> uOBF
    429:434:java.lang.String getEntityName(org.bukkit.entity.Entity) -> XIlb
    441:454:int ping(org.bukkit.entity.Player) -> roll
    22:466:void <clinit>() -> <clinit>
surge.nms.NMSX$1 -> org.cyberpwn.react.IWuH$1:
    org.bukkit.entity.Player val$player -> QXWC
    390:390:void <init>(org.bukkit.entity.Player) -> <init>
    394:395:void run() -> run
surge.nms.NMSX$2 -> org.cyberpwn.react.IWuH$2:
    org.bukkit.entity.Player val$player -> QXWC
    java.lang.String val$message -> CFoT
    403:403:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    408:409:void run() -> run
surge.nms.PacketUtil -> org.cyberpwn.react.xilx:
    6:6:void <init>() -> <init>
    20:45:surge.nms.PacketUtil$V getVersion() -> UuJC
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> aehq
    68:82:void clearTitle(org.bukkit.entity.Player) -> Pljn
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> HnDD
surge.nms.PacketUtil$V -> org.cyberpwn.react.xilx$aehq:
    surge.nms.PacketUtil$V R17 -> hRwt
    surge.nms.PacketUtil$V R18 -> KWXK
    surge.nms.PacketUtil$V R19 -> IPpg
    surge.nms.PacketUtil$V R111 -> agvc
    surge.nms.PacketUtil$V R110 -> EUgw
    surge.nms.PacketUtil$V R112 -> edFS
    surge.nms.PacketUtil$V[] $VALUES -> NFow
    8:8:surge.nms.PacketUtil$V[] values() -> values
    8:8:surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
    8:8:void <init>(java.lang.String,int) -> <init>
    8:15:void <clinit>() -> <clinit>
surge.nms.Title -> org.cyberpwn.react.wfiw:
    java.lang.String title -> title
    java.lang.String subTitle -> kvXc
    java.lang.String action -> action
    java.lang.Integer fadeIn -> JSvS
    java.lang.Integer fadeOut -> lpkB
    java.lang.Integer stayTime -> fEEl
    15:19:void <init>() -> <init>
    22:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    32:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    41:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> bGLN
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> pIAo
    79:80:void setSubTitle(java.lang.String) -> CgFT
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> rWXS
    99:100:void setFadeIn(java.lang.Integer) -> HnDD
    104:104:java.lang.Integer getFadeOut() -> QNij
    109:110:void setFadeOut(java.lang.Integer) -> bNyW
    114:114:java.lang.Integer getStayTime() -> hsnN
    119:120:void setStayTime(java.lang.Integer) -> xGHx
surge.nms.VersionBukkit -> org.cyberpwn.react.gpnB:
    surge.nms.VersionBukkit VU -> JTVt
    surge.nms.VersionBukkit V7 -> UnHq
    surge.nms.VersionBukkit V8 -> ubTD
    surge.nms.VersionBukkit V9 -> LRMV
    surge.nms.VersionBukkit V11 -> Dthd
    surge.nms.VersionBukkit V111 -> lWYM
    surge.nms.VersionBukkit V112 -> IPsY
    surge.nms.VersionBukkit[] $VALUES -> eAbG
    5:5:surge.nms.VersionBukkit[] values() -> values
    5:5:surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> TrGD
    27:32:boolean uc() -> pQQy
    37:67:surge.nms.VersionBukkit get() -> RRNG
    5:13:void <clinit>() -> <clinit>
surge.sched.IBursterator -> org.cyberpwn.react.kBFK:
    void burst(java.lang.Object) -> DaVD
    void setTimeLock(double) -> qmKF
    double getEstimatedTimeUse() -> Qplf
    int flush() -> sbjp
    int flush(react.gbench.Profiler) -> aehq
    void queue(java.lang.Object) -> xGGs
    void queue(java.util.List) -> HvTU
    void queue(java.lang.Object[]) -> HnDD
surge.sched.ICancellable -> org.cyberpwn.react.Thuk:
    void cancel() -> cancel
surge.sched.IMasterTickComponent -> org.cyberpwn.react.oNRO:
    void onTick() -> rorj
    java.lang.String getTickName() -> srvL
surge.sched.ITask -> org.cyberpwn.react.rFXh:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> xOwW
    java.lang.String getName() -> getName
    double getComputeTime() -> jWor
    double getTotalComputeTime() -> Euxk
    double getActiveTime() -> NpSX
    boolean hasCompleted() -> NNPS
surge.sched.Task -> org.cyberpwn.react.hALS:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> smMw
    double computeTime -> nvpJ
    double totalComputeTime -> sBYp
    double activeTime -> Hgby
    boolean completed -> completed
    react.gbench.Profiler profiler -> SNQI
    react.gbench.Profiler activeProfiler -> ELwj
    int ticks -> PgJr
    21:42:void <init>(java.lang.String) -> <init>
    45:67:void <init>(java.lang.String,int) -> <init>
    70:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> bNyW
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> xOwW
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> jWor
    150:150:boolean hasCompleted() -> NNPS
    156:156:double getTotalComputeTime() -> Euxk
    162:162:double getActiveTime() -> NpSX
    7:7:react.gbench.Profiler access$000(surge.sched.Task) -> HnDD
    7:7:boolean access$102(surge.sched.Task,boolean) -> aehq
    7:7:react.gbench.Profiler access$200(surge.sched.Task) -> bNyW
    7:7:double access$302(surge.sched.Task,double) -> aehq
    7:7:double access$402(surge.sched.Task,double) -> CUak
    7:7:double access$502(surge.sched.Task,double) -> HnDD
    7:7:double access$300(surge.sched.Task) -> xGHx
    7:7:double access$500(surge.sched.Task) -> uOBF
    7:7:double access$400(surge.sched.Task) -> KvlK
surge.sched.Task$1 -> org.cyberpwn.react.hALS$1:
    surge.sched.Task this$0 -> TsVs
    26:26:void <init>(surge.sched.Task) -> <init>
    30:40:void run() -> run
surge.sched.Task$2 -> org.cyberpwn.react.hALS$2:
    surge.sched.Task this$0 -> TsVs
    50:50:void <init>(surge.sched.Task) -> <init>
    54:65:void run() -> run
surge.sched.Task$3 -> org.cyberpwn.react.hALS$3:
    int val$total -> UnGx
    surge.sched.Task this$0 -> TsVs
    75:75:void <init>(surge.sched.Task,int) -> <init>
    79:95:void run() -> run
surge.sched.TaskLater -> org.cyberpwn.react.CEal:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> smMw
    double computeTime -> nvpJ
    double totalComputeTime -> sBYp
    double activeTime -> Hgby
    boolean completed -> completed
    react.gbench.Profiler profiler -> SNQI
    react.gbench.Profiler activeProfiler -> ELwj
    int ticks -> PgJr
    23:24:void <init>(java.lang.String) -> <init>
    27:57:void <init>(java.lang.String,int) -> <init>
    61:70:void setup(java.lang.String,boolean) -> bNyW
    75:81:void cancel() -> cancel
    86:86:int getId() -> getId
    92:92:boolean isRepeating() -> xOwW
    98:98:java.lang.String getName() -> getName
    104:104:double getComputeTime() -> jWor
    110:110:boolean hasCompleted() -> NNPS
    116:116:double getTotalComputeTime() -> Euxk
    122:122:double getActiveTime() -> NpSX
    8:8:react.gbench.Profiler access$000(surge.sched.TaskLater) -> aehq
    8:8:double access$102(surge.sched.TaskLater,double) -> aehq
    8:8:double access$200(surge.sched.TaskLater) -> CUak
    8:8:double access$202(surge.sched.TaskLater,double) -> CUak
    8:8:double access$100(surge.sched.TaskLater) -> HnDD
    8:8:react.gbench.Profiler access$300(surge.sched.TaskLater) -> bNyW
    8:8:double access$400(surge.sched.TaskLater) -> xGHx
    8:8:double access$402(surge.sched.TaskLater,double) -> HnDD
    8:8:int access$500(surge.sched.TaskLater) -> uOBF
surge.sched.TaskLater$1 -> org.cyberpwn.react.CEal$1:
    surge.sched.TaskLater this$0 -> cCjt
    32:32:void <init>(surge.sched.TaskLater) -> <init>
    38:55:void run() -> run
surge.sched.TaskManager -> org.cyberpwn.react.iUQJ:
    react.glang.GList tasks -> TjDR
    react.glang.GMap taskProfiles -> kmex
    12:15:void <init>() -> <init>
    19:20:void add(surge.sched.ITask) -> aehq
    25:35:void onTick() -> rorj
    39:40:void putFinishingTask(surge.sched.ITask) -> CUak
    44:53:void putTask(surge.sched.ITask) -> HnDD
    58:58:java.lang.String getTickName() -> srvL
    63:63:react.glang.GList getTasks() -> pbTA
    68:68:react.glang.GMap getTaskProfiles() -> lEEk
surge.sched.TaskProfile -> org.cyberpwn.react.oFAP:
    double activeTime -> Hgby
    double computeTickTime -> IsUu
    double computeTime -> nvpJ
    10:14:void <init>() -> <init>
    18:18:double getActiveTime() -> NpSX
    23:24:void setActiveTime(double) -> TWTu
    28:28:double getComputeTickTime() -> DICk
    33:34:void setComputeTickTime(double) -> mWlX
    38:38:double getComputeTime() -> jWor
    43:44:void setComputeTime(double) -> YwfW
surge.server.AsyncTick -> org.cyberpwn.react.inba:
surge.server.CPS -> org.cyberpwn.react.AYNa:
    react.glang.GMap keys -> dhps
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> uVqT
    46:99:void scan() -> HDOA
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> HnDD
    23:23:void <clinit>() -> <clinit>
surge.server.CoreTickThread -> org.cyberpwn.react.bYNR:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:71:void run() -> run
surge.server.Cuboid -> org.cyberpwn.react.kBEW:
    java.lang.String worldName -> wNfK
    int x1 -> GKLt
    int y1 -> IatH
    int z1 -> yemW
    int x2 -> GuaF
    int y2 -> WtNi
    int z2 -> mskg
    45:58:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    62:72:int depth(surge.util.Axis) -> aehq
    85:91:void set(org.bukkit.Location,org.bukkit.Location) -> HnDD
    95:95:boolean hasPlayers() -> TyuH
    100:112:react.glang.GList getPlayers() -> mhsw
    117:168:react.glang.GList getEntities() -> uiRB
    179:180:void <init>(org.bukkit.Location) -> <init>
    190:191:void <init>(surge.server.Cuboid) -> <init>
    212:220:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    241:249:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    252:260:void <init>(java.util.Map) -> <init>
    265:273:java.util.Map serialize() -> serialize
    278:278:surge.server.Cuboid flatten(int) -> fKHl
    289:289:org.bukkit.Location getLowerNE() -> pPop
    300:300:org.bukkit.Location getUpperSW() -> Ucet
    310:313:org.bukkit.Location getCenter() -> getCenter
    325:330:org.bukkit.World getWorld() -> getWorld
    340:340:int getSizeX() -> pIAJ
    350:350:int getSizeY() -> qLDU
    360:360:int getSizeZ() -> qmfS
    370:370:int getLowerX() -> tULt
    380:380:int getLowerY() -> nJmd
    390:390:int getLowerZ() -> NhEo
    400:400:int getUpperX() -> JciQ
    410:410:int getUpperY() -> IWuH
    420:420:int getUpperZ() -> xilx
    430:440:org.bukkit.block.Block[] corners() -> wfiw
    456:471:surge.server.Cuboid expand(surge.server.Cuboid$CuboidDirection,int) -> aehq
    486:486:surge.server.Cuboid shift(surge.server.Cuboid$CuboidDirection,int) -> CUak
    502:516:surge.server.Cuboid outset(surge.server.Cuboid$CuboidDirection,int) -> HnDD
    532:532:surge.server.Cuboid inset(surge.server.Cuboid$CuboidDirection,int) -> bNyW
    548:548:boolean contains(int,int,int) -> contains
    560:560:boolean contains(org.bukkit.block.Block) -> TOCT
    572:572:boolean contains(org.bukkit.Location) -> uOBF
    582:582:int volume() -> gpnB
    593:603:byte averageLightLevel() -> kBFK
    614:614:surge.server.Cuboid contract() -> Thuk
    628:668:surge.server.Cuboid contract(surge.server.Cuboid$CuboidDirection) -> aehq
    682:697:surge.server.Cuboid getFace(surge.server.Cuboid$CuboidDirection) -> CUak
    710:717:boolean containsOnly(org.bukkit.Material) -> HnDD
    729:741:surge.server.Cuboid getBoundingCuboid(surge.server.Cuboid) -> aehq
    757:757:org.bukkit.block.Block getRelativeBlock(int,int,int) -> xGHx
    777:777:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> aehq
    788:802:java.util.List getChunks() -> getChunks
    817:821:void fill(int,byte) -> fill
    845:845:java.util.Iterator iterator() -> iterator
    856:856:surge.server.Cuboid clone() -> oNRO
    867:867:java.lang.String toString() -> toString
    963:972:int hashCode() -> hashCode
    978:1038:boolean equals(java.lang.Object) -> equals
    29:29:java.lang.Object clone() -> clone
surge.server.Cuboid$1 -> org.cyberpwn.react.kBEW$1:
    surge.server.Cuboid this$0 -> TruI
    101:101:void <init>(surge.server.Cuboid) -> <init>
    105:110:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> IODN
    101:101:java.lang.Object onAdapt(java.lang.Object) -> uOBF
surge.server.Cuboid$2 -> org.cyberpwn.react.kBEW$2:
    int[] $SwitchMap$surge$util$Axis -> MTmx
    int[] $SwitchMap$surge$server$Cuboid$CuboidDirection -> kSrq
    62:456:void <clinit>() -> <clinit>
surge.server.Cuboid$CuboidDirection -> org.cyberpwn.react.kBEW$aehq:
    surge.server.Cuboid$CuboidDirection North -> wFTf
    surge.server.Cuboid$CuboidDirection East -> RKLr
    surge.server.Cuboid$CuboidDirection South -> vvWC
    surge.server.Cuboid$CuboidDirection West -> aFVg
    surge.server.Cuboid$CuboidDirection Up -> Iasy
    surge.server.Cuboid$CuboidDirection Down -> CaGG
    surge.server.Cuboid$CuboidDirection Horizontal -> ptgx
    surge.server.Cuboid$CuboidDirection Vertical -> CGTL
    surge.server.Cuboid$CuboidDirection Both -> pJUR
    surge.server.Cuboid$CuboidDirection Unknown -> pSFS
    surge.server.Cuboid$CuboidDirection[] $VALUES -> Glqp
    918:918:surge.server.Cuboid$CuboidDirection[] values() -> values
    918:918:surge.server.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    918:918:void <init>(java.lang.String,int) -> <init>
    934:955:surge.server.Cuboid$CuboidDirection opposite() -> rFXh
    918:930:void <clinit>() -> <clinit>
surge.server.Cuboid$CuboidIterator -> org.cyberpwn.react.kBEW$CUak:
    org.bukkit.World w -> neqP
    int baseX -> DIvW
    int baseY -> eRfB
    int baseZ -> eJUX
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> kdwx
    int sizeY -> YXTV
    int sizeZ -> tMop
    surge.server.Cuboid this$0 -> TruI
    878:887:void <init>(surge.server.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    892:892:boolean hasNext() -> hasNext
    898:908:org.bukkit.block.Block next() -> next
    915:915:void remove() -> remove
    870:870:java.lang.Object next() -> next
surge.server.MemoryMonitor -> org.cyberpwn.react.kSGG:
    long memoryFree -> GTAe
    long memoryUsed -> NFsK
    long memoryMax -> BDOw
    long lastMemoryUsed -> diVJ
    long memoryUsedAfterGC -> YWtU
    long allocated -> MndU
    long collected -> cUPt
    long collections -> wgyv
    long sms -> EVKw
    long memoryAllocatedPerTick -> uIBy
    long memoryCollectedPerTick -> lgyq
    long memoryFullyAllocatedPerTick -> THcS
    long mah -> CGUL
    long mahs -> eAcR
    23:39:void <init>() -> <init>
    void onAllocationSet() -> hALS
    46:107:void run() -> run
    111:111:long getMemoryFree() -> CEal
    116:116:long getMemoryUsed() -> getMemoryUsed
    121:121:long getMemoryMax() -> iUQJ
    126:126:long getLastMemoryUsed() -> oFAP
    131:131:long getMemoryUsedAfterGC() -> inba
    136:136:long getAllocated() -> getAllocated
    141:141:long getCollected() -> AYNa
    146:146:long getCollections() -> bYNR
    151:151:long getSms() -> kBEW
    156:156:long getMemoryAllocatedPerTick() -> kSGG
    161:161:long getMemoryCollectedPerTick() -> MeCh
    166:166:long getMemoryFullyAllocatedPerTick() -> wUgt
    171:171:long getMah() -> yKLr
    176:176:long getMahs() -> patX
surge.server.SuperSampler -> org.cyberpwn.react.MeCh:
    react.gmath.Average ticksPerSecondL -> XoBw
    react.gmath.Average tickTimeL -> sloS
    react.gmath.Average mahL -> kdwY
    double ticksPerSecond -> vRwd
    double ticksPerSecondRaw -> Yytt
    double tickTime -> dhsS
    double tickTimeRaw -> bAKO
    boolean running -> running
    boolean frozen -> gHKH
    double tickUtilizationRaw -> OBEh
    double tickUtilization -> PEHc
    double leftoverTickTime -> Xvrp
    long memoryUse -> BTqi
    long memoryAllocated -> uIBN
    long memoryCollected -> vKco
    long mahs -> eAcR
    int totalChunks -> YyvH
    int totalEntities -> BCpU
    int totalDrops -> AQoF
    int totalTiles -> jruX
    int totalLiving -> nTmo
    int chunksLoaded -> bbnC
    int chunksUnloaded -> ihEv
    surge.server.WorldMonitor worldMonitor -> TYge
    surge.server.TPSMonitor tpsMonitor -> PgMv
    surge.server.MemoryMonitor memoryMonitor -> tNRk
    java.lang.StackTraceElement[] lockStack -> cvuJ
    react.glang.GMap spikes -> GdCa
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> rorj
    154:154:java.lang.String getTickName() -> srvL
    159:159:react.gmath.Average getTicksPerSecondL() -> rOIb
    164:164:double getTicksPerSecond() -> vsox
    169:169:double getTicksPerSecondRaw() -> kRdo
    174:174:boolean isRunning() -> isRunning
    179:179:surge.server.TPSMonitor getTpsMonitor() -> Hvsf
    184:184:react.gmath.Average getTickTimeL() -> WXkv
    189:189:double getTickTime() -> tUPN
    194:194:double getTickTimeRaw() -> ekFe
    199:199:double getTickUtilizationRaw() -> AjPy
    204:204:double getTickUtilization() -> jiTq
    209:209:double getLeftoverTickTime() -> axLW
    214:214:surge.server.MemoryMonitor getMemoryMonitor() -> wMWF
    219:219:long getMemoryUse() -> wVHN
    224:224:long getMemoryAllocated() -> TFqr
    229:229:long getMemoryCollected() -> CxgF
    234:234:react.gmath.Average getMahL() -> tepA
    239:239:long getMahs() -> patX
    244:244:int getTotalChunks() -> nloV
    249:249:int getTotalEntities() -> CVcw
    254:254:int getTotalDrops() -> aLwb
    259:259:int getTotalTiles() -> lEGW
    264:264:int getTotalLiving() -> EKkG
    269:269:surge.server.WorldMonitor getWorldMonitor() -> DjkJ
    274:274:int getChunksLoaded() -> ObYi
    279:279:int getChunksUnloaded() -> Nxhj
    284:285:void setTicksPerSecondL(react.gmath.Average) -> aehq
    289:290:void setTickTimeL(react.gmath.Average) -> CUak
    294:295:void setMahL(react.gmath.Average) -> HnDD
    299:300:void setTicksPerSecond(double) -> IODN
    304:305:void setTicksPerSecondRaw(double) -> KelX
    309:310:void setTickTime(double) -> Pljn
    314:315:void setTickTimeRaw(double) -> roll
    319:320:void setRunning(boolean) -> KelX
    324:325:void setTickUtilizationRaw(double) -> bGLN
    329:330:void setTickUtilization(double) -> LXNo
    334:335:void setLeftoverTickTime(double) -> iCPU
    339:340:void setMemoryUse(long) -> Vehq
    344:345:void setMemoryAllocated(long) -> EKFp
    349:350:void setMemoryCollected(long) -> wUEt
    354:355:void setMahs(long) -> PKGE
    359:360:void setTotalChunks(int) -> jgvP
    364:365:void setTotalEntities(int) -> avnC
    369:370:void setTotalDrops(int) -> TEsp
    374:375:void setTotalTiles(int) -> uVsn
    379:380:void setTotalLiving(int) -> tvTl
    384:385:void setChunksLoaded(int) -> WXNq
    389:390:void setChunksUnloaded(int) -> ArDf
    394:395:void setWorldMonitor(surge.server.WorldMonitor) -> aehq
    399:400:void setTpsMonitor(surge.server.TPSMonitor) -> aehq
    404:405:void setMemoryMonitor(surge.server.MemoryMonitor) -> aehq
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> HngL
    419:419:react.glang.GMap getSpikes() -> VoBt
    13:13:int access$002(surge.server.SuperSampler,int) -> aehq
    13:13:int access$102(surge.server.SuperSampler,int) -> CUak
    13:13:int access$202(surge.server.SuperSampler,int) -> HnDD
    13:13:int access$302(surge.server.SuperSampler,int) -> bNyW
    13:13:int access$402(surge.server.SuperSampler,int) -> xGHx
    13:13:int access$502(surge.server.SuperSampler,int) -> uOBF
    13:13:int access$602(surge.server.SuperSampler,int) -> KvlK
    13:13:double access$702(surge.server.SuperSampler,double) -> aehq
    13:13:double access$802(surge.server.SuperSampler,double) -> CUak
    13:13:double access$700(surge.server.SuperSampler) -> aehq
    13:13:react.gmath.Average access$900(surge.server.SuperSampler) -> CUak
    13:13:double access$800(surge.server.SuperSampler) -> HnDD
    13:13:react.gmath.Average access$1000(surge.server.SuperSampler) -> bNyW
    13:13:double access$1102(surge.server.SuperSampler,double) -> HnDD
    13:13:double access$1202(surge.server.SuperSampler,double) -> bNyW
    13:13:double access$1302(surge.server.SuperSampler,double) -> xGHx
    13:13:double access$1402(surge.server.SuperSampler,double) -> uOBF
    13:13:double access$1200(surge.server.SuperSampler) -> xGHx
    13:13:double access$1502(surge.server.SuperSampler,double) -> KvlK
    13:13:double access$1400(surge.server.SuperSampler) -> uOBF
    13:13:boolean access$1602(surge.server.SuperSampler,boolean) -> aehq
    13:13:react.glang.GMap access$1700(surge.server.SuperSampler) -> KvlK
    13:13:long access$1802(surge.server.SuperSampler,long) -> aehq
    13:13:long access$1902(surge.server.SuperSampler,long) -> CUak
    13:13:long access$2002(surge.server.SuperSampler,long) -> HnDD
    13:13:react.gmath.Average access$2100(surge.server.SuperSampler) -> TOCT
    13:13:long access$2202(surge.server.SuperSampler,long) -> bNyW
surge.server.SuperSampler$1 -> org.cyberpwn.react.MeCh$1:
    surge.server.SuperSampler this$0 -> jbXV
    72:72:void <init>(surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> aehq
surge.server.SuperSampler$2 -> org.cyberpwn.react.MeCh$2:
    surge.server.SuperSampler this$0 -> jbXV
    87:87:void <init>(surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> xioP
    106:107:void onSpike() -> eIGD
surge.server.SuperSampler$3 -> org.cyberpwn.react.MeCh$3:
    surge.server.SuperSampler this$0 -> jbXV
    111:111:void <init>(surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> hALS
surge.server.TPSMonitor -> org.cyberpwn.react.wUgt:
    double tickTimeMS -> COfP
    double rawTicksPerSecond -> XMCP
    react.gbench.Profiler tickProfiler -> jkJC
    react.gbench.Profiler tickTimeProfiler -> uPtv
    boolean ticked -> Abqc
    java.lang.Thread$State lastState -> jPuk
    double actualTickTimeMS -> GJpy
    double ltt -> mlAd
    long lastTick -> pscr
    boolean frozen -> gHKH
    java.lang.StackTraceElement[] lockedStack -> mkaE
    double lmsx -> WRQQ
    24:40:void <init>() -> <init>
    void onTicked() -> xioP
    void onSpike() -> eIGD
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> aehq
    160:160:double getTickTimeMS() -> nKQP
    165:165:double getRawTicksPerSecond() -> CMtY
    170:170:react.gbench.Profiler getTickProfiler() -> GtTy
    175:175:boolean isTicked() -> NMtj
    180:181:void markTick() -> ooty
    185:185:react.gbench.Profiler getTickTimeProfiler() -> oxfc
    190:190:java.lang.Thread$State getLastState() -> Fybb
    195:195:double getActualTickTimeMS() -> aDkA
    200:200:double getLtt() -> nudC
    205:205:long getLastTick() -> sPor
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> LHOn
surge.server.WorldMonitor -> org.cyberpwn.react.yKLr:
    boolean chunksChanged -> rHMC
    boolean dropChanged -> YrJA
    boolean tileChanged -> DRiu
    boolean livingChanged -> TQXV
    boolean totalChanged -> PgOP
    boolean updated -> etkM
    int totalChunks -> YyvH
    int totalDrops -> AQoF
    int totalTiles -> jruX
    int totalLiving -> nTmo
    int totalEntities -> BCpU
    int chunksLoaded -> bbnC
    int chunksUnloaded -> ihEv
    long ms -> SCiv
    24:43:void <init>() -> <init>
    48:73:void run() -> run
    void updated(int,int,int,int,int,int,int) -> aehq
    80:85:void on(org.bukkit.event.world.ChunkLoadEvent) -> CUak
    90:95:void on(org.bukkit.event.world.ChunkUnloadEvent) -> aehq
    100:101:void on(org.bukkit.event.entity.EntitySpawnEvent) -> aehq
    106:107:void on(org.bukkit.event.entity.EntityDeathEvent) -> aehq
    112:113:void on(org.bukkit.event.player.PlayerDropItemEvent) -> aehq
    118:119:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> aehq
    124:125:void on(org.bukkit.event.block.BlockPlaceEvent) -> aehq
    130:131:void on(org.bukkit.event.block.BlockBreakEvent) -> aehq
    135:136:void doUpdate() -> HfWW
    140:191:void sample() -> aDHK
    195:201:void sampleTotalCount() -> EByx
    205:211:void sampleLivingCount() -> VDkR
    215:251:void sampleTileCount() -> AXnw
    255:261:void sampleDropCount() -> RlEC
    265:271:void sampleChunkCount() -> aDiy
surge.text.PhantomSpinner -> org.cyberpwn.react.patX:
    surge.text.ProgressSpinner s -> cCqB
    surge.text.ProgressSpinner c -> GeFF
    16:19:void <init>(surge.util.C,surge.util.C,surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
surge.text.ProgressSpinner -> org.cyberpwn.react.rOIb:
    java.lang.String[] chars -> ORgh
    int index -> index
    surge.text.ProgressSpinner DEFAULT -> qgKk
    surge.text.ProgressSpinner NETWORK -> HMrp
    surge.text.ProgressSpinner CIRCLES -> xRNE
    surge.text.ProgressSpinner RANDOMS -> MwVN
    surge.text.ProgressSpinner MERGERS -> CyyK
    26:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> FqRe
    65:65:int getIndex() -> getIndex
    70:75:void <clinit>() -> <clinit>
surge.util.Amounts -> org.cyberpwn.react.kRdo:
    surge.util.Amounts SINGLE -> cTqG
    surge.util.Amounts DUAL -> Iawj
    surge.util.Amounts TRI -> MCpg
    surge.util.Amounts QUAD -> mlBA
    surge.util.Amounts HEX -> rinO
    surge.util.Amounts OCTA -> NGUG
    int a -> a
    surge.util.Amounts[] $VALUES -> tVbD
    5:5:surge.util.Amounts[] values() -> values
    5:5:surge.util.Amounts valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,int) -> <init>
    23:23:int a() -> a
    29:37:java.lang.String to(int) -> oxGX
    5:12:void <clinit>() -> <clinit>
surge.util.Anchor -> org.cyberpwn.react.Hvsf:
    int value() -> value
surge.util.Area -> org.cyberpwn.react.WXkv:
    org.bukkit.Location location -> EVMO
    java.lang.Double radius -> LcQj
    27:27:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> aehq
    40:43:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    47:47:surge.server.Cuboid toCuboid() -> TFsh
    60:63:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    77:85:java.lang.Double distance(org.bukkit.Location) -> KvlK
    99:99:java.lang.Double slowDistance(org.bukkit.Location) -> TOCT
    111:111:boolean isWithin(org.bukkit.Location) -> HvTU
    121:121:boolean hasEntities() -> hasEntities
    133:143:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> xGHx
    155:165:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> aehq
    178:207:org.bukkit.entity.Entity[] getNearbyEntities() -> VfmF
    218:228:org.bukkit.entity.Player[] getNearbyPlayers() -> HUSi
    238:238:org.bukkit.Location getLocation() -> getLocation
    249:250:void setLocation(org.bukkit.Location) -> setLocation
    259:259:java.lang.Double getRadius() -> ceBm
    270:271:void setRadius(java.lang.Double) -> HnDD
    280:285:org.bukkit.Location random() -> Tqgm
surge.util.Axis -> org.cyberpwn.react.tUPN:
    surge.util.Axis X -> vBuK
    surge.util.Axis Y -> AtUL
    surge.util.Axis Z -> xQkt
    int x -> x
    int y -> y
    int z -> z
    surge.util.Axis[] $VALUES -> vTVy
    5:5:surge.util.Axis[] values() -> values
    5:5:surge.util.Axis valueOf(java.lang.String) -> valueOf
    16:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> jGSm
    29:29:org.bukkit.util.Vector negative() -> GRPk
    5:9:void <clinit>() -> <clinit>
surge.util.BlastResistance -> org.cyberpwn.react.ekFe:
    surge.util.BlastResistance BARRIER -> eIug
    surge.util.BlastResistance BEDROCK -> nUQV
    surge.util.BlastResistance COMMAND -> vnNL
    surge.util.BlastResistance ENDER_PORTAL -> edKy
    surge.util.BlastResistance ENDER_PORTAL_FRAME -> KOOk
    surge.util.BlastResistance ANVIL -> Dclq
    surge.util.BlastResistance ENCHANTMENT_TABLE -> VqQv
    surge.util.BlastResistance OBSIDIAN -> OdMd
    surge.util.BlastResistance ENDER_CHEST -> pSKF
    surge.util.BlastResistance WATER -> KiCN
    surge.util.BlastResistance LAVA -> FYRl
    surge.util.BlastResistance STATIONARY_WATER -> ViBS
    surge.util.BlastResistance DRAGON_EGG -> KiBr
    surge.util.BlastResistance ENDER_STONE -> OBJb
    surge.util.BlastResistance COAL_BLOCK -> nMCf
    surge.util.BlastResistance DIAMOND_BLOCK -> oqiL
    surge.util.BlastResistance EMERALD_BLOCK -> oaHX
    surge.util.BlastResistance GOLD_BLOCK -> Rdeh
    surge.util.BlastResistance IRON_BLOCK -> XLdl
    surge.util.BlastResistance REDSTONE_BLOCK -> iEdM
    surge.util.BlastResistance BRICK -> lqPo
    surge.util.BlastResistance BRICK_STAIRS -> tgfT
    surge.util.BlastResistance HARD_CLAY -> mtSp
    surge.util.BlastResistance STONE -> ihGn
    surge.util.BlastResistance SMOOTH_BRICK -> cTtY
    surge.util.BlastResistance SMOOTH_STAIRS -> smUH
    surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> QjTS
    surge.util.BlastResistance STONE_SLAB2 -> SWFi
    surge.util.BlastResistance IRON_DOOR -> CFxS
    surge.util.BlastResistance IRON_DOOR_BLOCK -> HNVS
    surge.util.BlastResistance IRON_TRAPDOOR -> btTO
    surge.util.BlastResistance MOB_SPAWNER -> XwWf
    surge.util.BlastResistance WEB -> QsDN
    surge.util.BlastResistance DISPENSER -> ipXK
    surge.util.BlastResistance DROPPER -> Pwou
    surge.util.BlastResistance FURNACE -> tgek
    surge.util.BlastResistance BURNING_FURNACE -> NGWS
    surge.util.BlastResistance BEACON -> MTtb
    surge.util.BlastResistance COAL_ORE -> oiXE
    surge.util.BlastResistance COCOA -> nwUu
    surge.util.BlastResistance DIAMOND_ORE -> hlsY
    surge.util.BlastResistance EMERALD_ORE -> EgPi
    surge.util.BlastResistance FENCE -> LIab
    surge.util.BlastResistance FENCE_GATE -> nLbQ
    surge.util.BlastResistance ACACIA_FENCE_GATE -> ViBF
    surge.util.BlastResistance BIRCH_FENCE_GATE -> cvyT
    surge.util.BlastResistance DARK_OAK_FENCE_GATE -> YGXr
    surge.util.BlastResistance SPRUCE_FENCE_GATE -> yewD
    surge.util.BlastResistance JUNGLE_FENCE_GATE -> xstt
    surge.util.BlastResistance ACACIA_FENCE -> THjY
    surge.util.BlastResistance BIRCH_FENCE -> dWyN
    surge.util.BlastResistance DARK_OAK_FENCE -> xkdp
    surge.util.BlastResistance SPRUCE_FENCE -> gjUL
    surge.util.BlastResistance JUNGLE_FENCE -> xQrT
    surge.util.BlastResistance ACACIA_WOOD_STAIRS -> smVu
    surge.util.BlastResistance BIRCH_WOOD_STAIRS -> QsGN
    surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> tMvD
    surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> ywYI
    surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> OmBA
    surge.util.BlastResistance QUARTZ_STAIRS -> EfsL
    surge.util.BlastResistance COBBLESTONE_STAIRS -> JwCr
    surge.util.BlastResistance SANDSTONE_STAIRS -> nMDx
    surge.util.BlastResistance NETHER_BRICK_STAIRS -> oiYu
    surge.util.BlastResistance WOOD_STAIRS -> PpCQ
    surge.util.BlastResistance RED_SANDSTONE_STAIRS -> aNnf
    surge.util.BlastResistance ACACIA_DOOR -> Yhym
    surge.util.BlastResistance BIRCH_DOOR -> fVOD
    surge.util.BlastResistance DARK_OAK_DOOR -> hdfD
    surge.util.BlastResistance SPRUCE_DOOR -> VWaB
    surge.util.BlastResistance JUNGLE_DOOR -> pBJV
    surge.util.BlastResistance GOLD_ORE -> GdgY
    surge.util.BlastResistance HOPPER -> blEw
    surge.util.BlastResistance IRON_ORE -> GlxJ
    surge.util.BlastResistance LAPIS_BLOCK -> ywVx
    surge.util.BlastResistance LAPIS_ORE -> KNqH
    surge.util.BlastResistance QUARTZ_ORE -> Dcni
    surge.util.BlastResistance REDSTONE_ORE -> bkdo
    surge.util.BlastResistance TRAP_DOOR -> IkNj
    surge.util.BlastResistance WOOD -> gYUT
    surge.util.BlastResistance CHEST -> Podj
    surge.util.BlastResistance TRAPPED_CHEST -> fwsw
    surge.util.BlastResistance WORKBENCH -> TsaC
    surge.util.BlastResistance CAULDRON -> yLfc
    surge.util.BlastResistance LOG -> hdiE
    surge.util.BlastResistance LOG_2 -> grgU
    surge.util.BlastResistance BOOKSHELF -> pmBC
    surge.util.BlastResistance BANNER -> YaMg
    surge.util.BlastResistance STANDING_BANNER -> KGCv
    surge.util.BlastResistance WALL_BANNER -> mIci
    surge.util.BlastResistance JACK_O_LANTERN -> DKAM
    surge.util.BlastResistance MELON_BLOCK -> OAnS
    surge.util.BlastResistance SKULL -> HhNe
    surge.util.BlastResistance PUMPKIN -> UfDQ
    surge.util.BlastResistance SIGN -> gXtI
    surge.util.BlastResistance SIGN_POST -> FsIt
    surge.util.BlastResistance WALL_SIGN -> cMIV
    surge.util.BlastResistance QUARTZ_BLOCK -> AIfB
    surge.util.BlastResistance NOTE_BLOCK -> ENCu
    surge.util.BlastResistance RED_SANDSTONE -> bAUF
    surge.util.BlastResistance SANDSTONE -> ecpC
    surge.util.BlastResistance WOOL -> KFcd
    surge.util.BlastResistance MONSTER_EGG -> FXtg
    surge.util.BlastResistance RAILS -> mRTi
    surge.util.BlastResistance ACTIVATOR_RAIL -> sTFa
    surge.util.BlastResistance DETECTOR_RAIL -> HhLw
    surge.util.BlastResistance POWERED_RAIL -> eRmD
    surge.util.BlastResistance CLAY -> lGAb
    surge.util.BlastResistance DIRT -> rYRo
    surge.util.BlastResistance GRASS -> ihKL
    surge.util.BlastResistance GRAVEL -> giss
    surge.util.BlastResistance SPONGE -> LQug
    surge.util.BlastResistance BREWING_STAND -> hKUX
    surge.util.BlastResistance STONE_BUTTON -> HFKC
    surge.util.BlastResistance WOOD_BUTTON -> xkeR
    surge.util.BlastResistance CAKE_BLOCK -> LcWx
    surge.util.BlastResistance ICE -> MnlD
    surge.util.BlastResistance PACKED_ICE -> oGXl
    surge.util.BlastResistance LEVER -> SMxw
    surge.util.BlastResistance MYCEL -> NjBJ
    surge.util.BlastResistance PISTON_BASE -> kLQc
    surge.util.BlastResistance PISTON_EXTENSION -> hBhD
    surge.util.BlastResistance PISTON_MOVING_PIECE -> oqoi
    surge.util.BlastResistance PISTON_STICKY_BASE -> edRY
    surge.util.BlastResistance GOLD_PLATE -> ahgF
    surge.util.BlastResistance IRON_PLATE -> Ewwr
    surge.util.BlastResistance STONE_PLATE -> kKqO
    surge.util.BlastResistance WOOD_PLATE -> HFNA
    surge.util.BlastResistance SAND -> AQwv
    surge.util.BlastResistance SOUL_SAND -> KNvE
    surge.util.BlastResistance CACTUS -> kfDJ
    surge.util.BlastResistance LADDER -> plag
    surge.util.BlastResistance NETHERRACK -> KFed
    surge.util.BlastResistance GLASS -> ecrJ
    surge.util.BlastResistance THIN_GLASS -> HyRY
    surge.util.BlastResistance STAINED_GLASS -> SWNe
    surge.util.BlastResistance STAINED_GLASS_PANE -> SFLq
    surge.util.BlastResistance GLOWSTONE -> JKrn
    surge.util.BlastResistance REDSTONE_LAMP_OFF -> lXDi
    surge.util.BlastResistance REDSTONE_LAMP_ON -> xbwI
    surge.util.BlastResistance SEA_LANTERN -> etql
    surge.util.BlastResistance BED_BLOCK -> LIfn
    surge.util.BlastResistance DAYLIGHT_DETECTOR -> qwuL
    surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> JwGE
    surge.util.BlastResistance HUGE_MUSHROOM_1 -> ShNe
    surge.util.BlastResistance HUGE_MUSHROOM_2 -> lXDq
    surge.util.BlastResistance LEAVES -> jjon
    surge.util.BlastResistance LEAVES_2 -> sKVa
    surge.util.BlastResistance SNOW -> svJh
    int br -> UfEF
    surge.util.BlastResistance[] $VALUES -> QXvk
    10:10:surge.util.BlastResistance[] values() -> values
    10:10:surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
    164:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> oyFx
    175:190:int get(org.bukkit.Material) -> bNyW
    10:159:void <clinit>() -> <clinit>
surge.util.BlockFinder -> org.cyberpwn.react.AjPy:
    10:10:void <init>() -> <init>
    14:22:boolean follow(org.bukkit.block.Block,react.glang.GList,react.glang.GList,int) -> aehq
    27:48:boolean tail(surge.server.Cuboid,org.bukkit.block.Block,react.glang.GList,react.glang.GList,int) -> aehq
surge.util.Blocks -> org.cyberpwn.react.jiTq:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> HvTU
surge.util.C -> org.cyberpwn.react.axLW:
    surge.util.C BLACK -> KWeq
    surge.util.C DARK_BLUE -> VGEJ
    surge.util.C DARK_GREEN -> jtBF
    surge.util.C DARK_AQUA -> MoPu
    surge.util.C DARK_RED -> Vyjs
    surge.util.C DARK_PURPLE -> uHoO
    surge.util.C GOLD -> CYCC
    surge.util.C GRAY -> IAAt
    surge.util.C DARK_GRAY -> fDsV
    surge.util.C BLUE -> UnXW
    surge.util.C GREEN -> eRsB
    surge.util.C AQUA -> BLll
    surge.util.C RED -> qfvI
    surge.util.C LIGHT_PURPLE -> xIhB
    surge.util.C YELLOW -> eldp
    surge.util.C WHITE -> lyih
    surge.util.C MAGIC -> eJaJ
    surge.util.C BOLD -> uINq
    surge.util.C STRIKETHROUGH -> djBI
    surge.util.C UNDERLINE -> kvfQ
    surge.util.C ITALIC -> YaPu
    surge.util.C RESET -> sKYQ
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> gjYk
    char code -> RSju
    boolean isFormat -> kvfS
    java.lang.String toString -> AIjw
    java.util.Map BY_ID -> IbcY
    java.util.Map BY_CHAR -> Qiyi
    java.util.Map dyeChatMap -> jcBh
    java.util.Map chatHexMap -> nDYe
    java.util.Map dyeHexMap -> lqXS
    surge.util.C[] $VALUES -> HWPR
    17:17:surge.util.C[] values() -> values
    17:17:surge.util.C valueOf(java.lang.String) -> valueOf
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    338:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> UAfh
    378:378:java.lang.String hex() -> aVLR
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:surge.util.C getByChar(char) -> TOCT
    434:442:surge.util.C getByChar(java.lang.String) -> Nfdb
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:surge.util.C dyeToChat(org.bukkit.DyeColor) -> CUak
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> aehq
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> CUak
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> HnDD
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> BlSs
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> EKIY
    560:578:java.lang.String generateColorTable() -> qTWw
    588:588:org.bukkit.ChatColor chatColor() -> XvEX
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:surge.util.C fromItemMeta(byte) -> ssNC
    632:679:byte getItemMeta() -> Djja
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    17:17:void <init>(java.lang.String,int,char,int,surge.util.C$1) -> <init>
    17:17:void <init>(java.lang.String,int,char,int,boolean,surge.util.C$1) -> <init>
    17:727:void <clinit>() -> <clinit>
surge.util.C$1 -> org.cyberpwn.react.axLW$1:
    22:22:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$10 -> org.cyberpwn.react.axLW$2:
    121:121:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$11 -> org.cyberpwn.react.axLW$3:
    132:132:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$12 -> org.cyberpwn.react.axLW$4:
    143:143:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$13 -> org.cyberpwn.react.axLW$5:
    154:154:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$14 -> org.cyberpwn.react.axLW$6:
    165:165:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$15 -> org.cyberpwn.react.axLW$7:
    176:176:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$16 -> org.cyberpwn.react.axLW$8:
    187:187:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$17 -> org.cyberpwn.react.axLW$9:
    198:198:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$18 -> org.cyberpwn.react.axLW$10:
    209:209:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$19 -> org.cyberpwn.react.axLW$11:
    220:220:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$2 -> org.cyberpwn.react.axLW$12:
    33:33:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$20 -> org.cyberpwn.react.axLW$13:
    231:231:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$21 -> org.cyberpwn.react.axLW$14:
    242:242:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$22 -> org.cyberpwn.react.axLW$15:
    254:254:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$23 -> org.cyberpwn.react.axLW$16:
    int[] $SwitchMap$surge$util$C -> gQHC
    632:632:void <clinit>() -> <clinit>
surge.util.C$3 -> org.cyberpwn.react.axLW$17:
    44:44:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$4 -> org.cyberpwn.react.axLW$18:
    55:55:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$5 -> org.cyberpwn.react.axLW$19:
    66:66:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$6 -> org.cyberpwn.react.axLW$20:
    77:77:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$7 -> org.cyberpwn.react.axLW$21:
    88:88:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$8 -> org.cyberpwn.react.axLW$22:
    99:99:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$9 -> org.cyberpwn.react.axLW$23:
    110:110:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.CDou -> org.cyberpwn.react.wMWF:
    double number -> qNCh
    double max -> max
    9:12:void <init>(double) -> <init>
    16:18:surge.util.CDou set(double) -> tmcC
    23:25:surge.util.CDou add(double) -> qSWY
    30:32:surge.util.CDou sub(double) -> qAti
    37:37:double get() -> get
    42:48:void circ() -> BScS
surge.util.CMD -> org.cyberpwn.react.wVHN:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> tVlK
    26:30:void <init>(java.lang.String) -> <init>
    39:40:surge.util.CMD virtual() -> uaEa
    51:53:void execute(org.bukkit.command.CommandSender) -> bNyW
    60:77:void execute() -> execute
surge.util.CNum -> org.cyberpwn.react.TFqr:
    int number -> number
    int max -> max
    9:12:void <init>(int) -> <init>
    16:18:surge.util.CNum set(int) -> biQH
    23:25:surge.util.CNum add(int) -> NVFS
    30:32:surge.util.CNum sub(int) -> Whoy
    37:37:int get() -> get
    42:48:void circ() -> BScS
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> XBAR
surge.util.Chunks -> org.cyberpwn.react.CxgF:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> wUFa
    33:40:react.glang.GList getLoadedChunks() -> MJqN
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> CUak
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> aehq
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> aehq
    98:98:boolean unload(org.bukkit.Chunk) -> YMQO
    114:124:int unload(react.glang.GList,boolean,boolean) -> aehq
    138:138:int unload(react.glang.GList,boolean) -> aehq
    150:150:int unload(react.glang.GList) -> owbJ
    166:166:boolean isLoaded(java.lang.String,int,int) -> aehq
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> HnDD
    201:205:void load(react.glang.GList) -> iCLi
surge.util.CuboidException -> org.cyberpwn.react.tepA:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
surge.util.D -> org.cyberpwn.react.nloV:
    react.glang.GList buffer -> kDBT
    boolean dbg -> iWMi
    int kf -> Bnpg
    react.glang.Callback scall -> WJIj
    11:11:void <init>() -> <init>
    20:24:void flush() -> flush
    28:39:void log(java.lang.String,java.lang.String) -> log
    43:56:void l(java.lang.Object,java.lang.String) -> CUak
    60:66:void s(java.lang.Object,java.lang.String) -> HnDD
    70:81:void cdb() -> HDRt
    85:96:void v(java.lang.Object,java.lang.String) -> bNyW
    100:106:void w(java.lang.Object,java.lang.String) -> xGHx
    110:116:void f(java.lang.Object,java.lang.String) -> uOBF
    120:138:void l(java.lang.String) -> qlgy
    142:154:void s(java.lang.String) -> jgtA
    158:177:void v(java.lang.String) -> bWlH
    181:193:void w(java.lang.String) -> Oigg
    197:209:void f(java.lang.String) -> TqHC
    13:16:void <clinit>() -> <clinit>
surge.util.DMSRequire -> org.cyberpwn.react.CVcw:
    surge.util.DMSRequirement value() -> BCCB
surge.util.DMSRequirement -> org.cyberpwn.react.aLwb:
    surge.util.DMSRequirement SQL -> UKru
    surge.util.DMSRequirement[] $VALUES -> GBjm
    3:3:surge.util.DMSRequirement[] values() -> values
    3:3:surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:5:void <clinit>() -> <clinit>
surge.util.Depend -> org.cyberpwn.react.lEGW:
    surge.util.Depend VAULT -> AkpE
    surge.util.Depend FAWE -> Tjue
    surge.util.Depend WORLDEDIT -> Umxk
    surge.util.Depend PROTOLIB -> ViME
    surge.util.Depend CITIZENS -> TtHK
    java.lang.String name -> name
    surge.util.Depend[] $VALUES -> OdXL
    5:5:surge.util.Depend[] values() -> values
    5:5:surge.util.Depend valueOf(java.lang.String) -> valueOf
    16:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    5:11:void <clinit>() -> <clinit>
surge.util.Dimension -> org.cyberpwn.react.EKkG:
    int width -> width
    int height -> height
    int depth -> depth
    25:29:void <init>(int,int,int) -> <init>
    40:44:void <init>(int,int) -> <init>
    53:68:surge.util.DimensionFace getPane() -> iCsJ
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
surge.util.DimensionFace -> org.cyberpwn.react.DjkJ:
    surge.util.DimensionFace X -> jcEk
    surge.util.DimensionFace Y -> plfe
    surge.util.DimensionFace Z -> vUGA
    surge.util.DimensionFace[] $VALUES -> wiKQ
    8:8:surge.util.DimensionFace[] values() -> values
    8:8:surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
    8:8:void <init>(java.lang.String,int) -> <init>
    8:23:void <clinit>() -> <clinit>
surge.util.Direction -> org.cyberpwn.react.ObYi:
    surge.util.Direction U -> HgtH
    surge.util.Direction D -> HFQc
    surge.util.Direction N -> qUvS
    surge.util.Direction S -> AlPO
    surge.util.Direction E -> Otxf
    surge.util.Direction W -> MVAu
    int x -> x
    int y -> y
    int z -> z
    surge.server.Cuboid$CuboidDirection f -> fMgU
    surge.util.Direction[] $VALUES -> bkmv
    14:14:surge.util.Direction[] values() -> values
    14:14:surge.util.Direction valueOf(java.lang.String) -> valueOf
    29:34:void <init>(java.lang.String,int,int,int,int,surge.server.Cuboid$CuboidDirection) -> <init>
    38:56:surge.util.Direction reverse() -> xbBV
    61:61:int x() -> iwXc
    66:66:int y() -> PmpB
    71:71:int z() -> z
    76:76:surge.server.Cuboid$CuboidDirection f() -> IqlM
    81:81:react.glang.GList news() -> xXpJ
    86:86:react.glang.GList udnews() -> cues
    91:101:surge.util.Direction facing(org.bukkit.entity.Player) -> LXNo
    115:147:surge.util.Direction fromByte(byte) -> owbJ
    158:176:byte byteValue() -> byteValue
    14:21:void <clinit>() -> <clinit>
surge.util.Direction$1 -> org.cyberpwn.react.ObYi$1:
    int[] $SwitchMap$surge$util$Direction -> wWgp
    38:38:void <clinit>() -> <clinit>
surge.util.DynamicConfiguration -> org.cyberpwn.react.Nxhj:
surge.util.DynamicTracker -> org.cyberpwn.react.HngL:
surge.util.Embedded -> org.cyberpwn.react.xioP:
    react.glang.GList get() -> OYjj
    void add(java.lang.Object) -> add
surge.util.FU -> org.cyberpwn.react.eIGD:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> aehq
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> CUak
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:806:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:830:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:862:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> xGHx
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> uOBF
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
    95:95:void <clinit>() -> <clinit>
surge.util.Fingerprint -> org.cyberpwn.react.nKQP:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> eaYL
surge.util.Health -> org.cyberpwn.react.CMtY:
    double hp -> MxET
    20:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> htUg
    41:41:double getHearts() -> MuhT
    51:51:double getHalfHearts() -> hQqI
    61:61:int getFlatHalfHearts() -> qKiu
surge.util.IO -> org.cyberpwn.react.GtTy:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
    97:117:void <clinit>() -> <clinit>
surge.util.Items -> org.cyberpwn.react.NMtj:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> bNyW
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> aehq
    55:55:boolean is(org.bukkit.inventory.ItemStack,surge.util.MaterialBlock) -> aehq
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> aehq
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> aehq
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> xGHx
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> uOBF
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> KvlK
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> aehq
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> aehq
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> aehq
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> aehq
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> TOCT
    216:221:surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> HvTU
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> XIlb
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> IODN
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> Txum
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> aehq
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> qcud
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> VLWr
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> aehq
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> aehq
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> CUak
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> aehq
surge.util.MSound -> org.cyberpwn.react.ooty:
    surge.util.MSound AMBIENCE_CAVE -> blNS
    surge.util.MSound AMBIENCE_RAIN -> AJOC
    surge.util.MSound AMBIENCE_THUNDER -> DJeC
    surge.util.MSound ANVIL_BREAK -> aGHJ
    surge.util.MSound ANVIL_LAND -> HEoV
    surge.util.MSound ANVIL_USE -> jIQf
    surge.util.MSound ARROW_HIT -> JnXy
    surge.util.MSound BURP -> ecsy
    surge.util.MSound CHEST_CLOSE -> OlgS
    surge.util.MSound CHEST_OPEN -> hupA
    surge.util.MSound CLICK -> daQu
    surge.util.MSound DOOR_CLOSE -> sJyc
    surge.util.MSound DOOR_OPEN -> iySR
    surge.util.MSound DRINK -> GvTg
    surge.util.MSound EAT -> aXMB
    surge.util.MSound EXPLODE -> Polt
    surge.util.MSound FALL_BIG -> Cqwl
    surge.util.MSound FALL_SMALL -> pAsx
    surge.util.MSound FIRE -> gbNj
    surge.util.MSound FIRE_IGNITE -> VFiy
    surge.util.MSound FIZZ -> cEAA
    surge.util.MSound FUSE -> hdqQ
    surge.util.MSound GLASS -> YXeK
    surge.util.MSound HURT_FLESH -> oHDH
    surge.util.MSound ITEM_BREAK -> OAvO
    surge.util.MSound ITEM_PICKUP -> DJhR
    surge.util.MSound LAVA -> AlQs
    surge.util.MSound LAVA_POP -> jtIB
    surge.util.MSound LEVEL_UP -> jkVw
    surge.util.MSound MINECART_BASE -> RCPQ
    surge.util.MSound MINECART_INSIDE -> NPUc
    surge.util.MSound NOTE_BASS -> SFRq
    surge.util.MSound NOTE_PIANO -> rQLN
    surge.util.MSound NOTE_BASS_DRUM -> tOAf
    surge.util.MSound NOTE_STICKS -> cUbK
    surge.util.MSound NOTE_BASS_GUITAR -> mlOu
    surge.util.MSound NOTE_SNARE_DRUM -> pRtu
    surge.util.MSound NOTE_PLING -> pAsk
    surge.util.MSound ORB_PICKUP -> cVCA
    surge.util.MSound PISTON_EXTEND -> PpOH
    surge.util.MSound PISTON_RETRACT -> xJKo
    surge.util.MSound PORTAL -> cMPS
    surge.util.MSound PORTAL_TRAVEL -> yfaQ
    surge.util.MSound PORTAL_TRIGGER -> kLWL
    surge.util.MSound SHOOT_ARROW -> MxEg
    surge.util.MSound SPLASH -> MUah
    surge.util.MSound SPLASH2 -> ucFP
    surge.util.MSound STEP_GRASS -> GBoB
    surge.util.MSound STEP_GRAVEL -> NYFF
    surge.util.MSound STEP_LADDER -> OSWg
    surge.util.MSound STEP_SAND -> dYEL
    surge.util.MSound STEP_SNOW -> JKxG
    surge.util.MSound STEP_STONE -> NYEq
    surge.util.MSound STEP_WOOD -> EMiv
    surge.util.MSound STEP_WOOL -> LuBq
    surge.util.MSound SWIM -> MLpk
    surge.util.MSound WATER -> BgEa
    surge.util.MSound WOOD_CLICK -> ucIP
    surge.util.MSound BAT_DEATH -> dqwv
    surge.util.MSound BAT_HURT -> LteD
    surge.util.MSound BAT_IDLE -> kfMH
    surge.util.MSound BAT_LOOP -> TRIK
    surge.util.MSound BAT_TAKEOFF -> WccE
    surge.util.MSound BLAZE_BREATH -> nfdg
    surge.util.MSound BLAZE_DEATH -> jQfw
    surge.util.MSound BLAZE_HIT -> nfdf
    surge.util.MSound CAT_HISS -> pSXs
    surge.util.MSound CAT_HIT -> NYIG
    surge.util.MSound CAT_MEOW -> FbRd
    surge.util.MSound CAT_PURR -> hnEB
    surge.util.MSound CAT_PURREOW -> tgtc
    surge.util.MSound CHICKEN_IDLE -> XxHf
    surge.util.MSound CHICKEN_HURT -> pcxq
    surge.util.MSound CHICKEN_EGG_POP -> fMjx
    surge.util.MSound CHICKEN_WALK -> NGgH
    surge.util.MSound COW_IDLE -> hdrd
    surge.util.MSound COW_HURT -> iguH
    surge.util.MSound COW_WALK -> GuuM
    surge.util.MSound CREEPER_HISS -> ubgJ
    surge.util.MSound CREEPER_DEATH -> dGch
    surge.util.MSound ENDERDRAGON_DEATH -> MnvA
    surge.util.MSound ENDERDRAGON_GROWL -> JULK
    surge.util.MSound ENDERDRAGON_HIT -> GSqo
    surge.util.MSound ENDERDRAGON_WINGS -> GCRC
    surge.util.MSound ENDERMAN_DEATH -> Xfdo
    surge.util.MSound ENDERMAN_HIT -> ViPU
    surge.util.MSound ENDERMAN_IDLE -> TskB
    surge.util.MSound ENDERMAN_TELEPORT -> ihUY
    surge.util.MSound ENDERMAN_SCREAM -> nLor
    surge.util.MSound ENDERMAN_STARE -> SgvU
    surge.util.MSound GHAST_SCREAM -> rrnq
    surge.util.MSound GHAST_SCREAM2 -> cVDI
    surge.util.MSound GHAST_CHARGE -> KFmM
    surge.util.MSound GHAST_DEATH -> HNeW
    surge.util.MSound GHAST_FIREBALL -> djGs
    surge.util.MSound GHAST_MOAN -> SEsY
    surge.util.MSound IRONGOLEM_DEATH -> suqx
    surge.util.MSound IRONGOLEM_HIT -> yxIB
    surge.util.MSound IRONGOLEM_THROW -> lGNo
    surge.util.MSound IRONGOLEM_WALK -> hTSi
    surge.util.MSound MAGMACUBE_WALK -> xdCW
    surge.util.MSound MAGMACUBE_WALK2 -> nDbv
    surge.util.MSound MAGMACUBE_JUMP -> liQc
    surge.util.MSound PIG_IDLE -> BDdc
    surge.util.MSound PIG_DEATH -> XUdo
    surge.util.MSound PIG_WALK -> vfMN
    surge.util.MSound SHEEP_IDLE -> HEua
    surge.util.MSound SHEEP_SHEAR -> YGfY
    surge.util.MSound SHEEP_WALK -> bccI
    surge.util.MSound SILVERFISH_HIT -> rkCI
    surge.util.MSound SILVERFISH_KILL -> XVEl
    surge.util.MSound SILVERFISH_IDLE -> NijX
    surge.util.MSound SILVERFISH_WALK -> oihf
    surge.util.MSound SKELETON_IDLE -> WlUD
    surge.util.MSound SKELETON_DEATH -> pAwI
    surge.util.MSound SKELETON_HURT -> HEuh
    surge.util.MSound SKELETON_WALK -> fpOh
    surge.util.MSound SLIME_ATTACK -> yUcG
    surge.util.MSound SLIME_WALK -> QPqQ
    surge.util.MSound SLIME_WALK2 -> dGev
    surge.util.MSound SPIDER_IDLE -> Mwhx
    surge.util.MSound SPIDER_DEATH -> BVIs
    surge.util.MSound SPIDER_WALK -> OJlx
    surge.util.MSound WITHER_DEATH -> pmOi
    surge.util.MSound WITHER_HURT -> WJUO
    surge.util.MSound WITHER_IDLE -> xBCV
    surge.util.MSound WITHER_SHOOT -> hdwV
    surge.util.MSound WITHER_SPAWN -> LSFq
    surge.util.MSound WOLF_BARK -> fVaO
    surge.util.MSound WOLF_DEATH -> lhqx
    surge.util.MSound WOLF_GROWL -> foql
    surge.util.MSound WOLF_HOWL -> tOGl
    surge.util.MSound WOLF_HURT -> gbUA
    surge.util.MSound WOLF_PANT -> PpTe
    surge.util.MSound WOLF_SHAKE -> CjOa
    surge.util.MSound WOLF_WALK -> xJRn
    surge.util.MSound WOLF_WHINE -> ynwe
    surge.util.MSound ZOMBIE_METAL -> FavX
    surge.util.MSound ZOMBIE_WOOD -> VFpv
    surge.util.MSound ZOMBIE_WOODBREAK -> lFob
    surge.util.MSound ZOMBIE_IDLE -> dHHp
    surge.util.MSound ZOMBIE_DEATH -> Yikj
    surge.util.MSound ZOMBIE_HURT -> GuyR
    surge.util.MSound ZOMBIE_INFECT -> noXl
    surge.util.MSound ZOMBIE_UNFECT -> pKKc
    surge.util.MSound ZOMBIE_REMEDY -> aFoO
    surge.util.MSound ZOMBIE_WALK -> UfQA
    surge.util.MSound ZOMBIE_PIG_IDLE -> cgIJ
    surge.util.MSound ZOMBIE_PIG_ANGRY -> eJji
    surge.util.MSound ZOMBIE_PIG_DEATH -> lGPS
    surge.util.MSound ZOMBIE_PIG_HURT -> HNiO
    surge.util.MSound DIG_WOOL -> SOIV
    surge.util.MSound DIG_GRASS -> jQjD
    surge.util.MSound DIG_GRAVEL -> wFme
    surge.util.MSound DIG_SAND -> dYKS
    surge.util.MSound DIG_SNOW -> ABEn
    surge.util.MSound DIG_STONE -> oXhj
    surge.util.MSound DIG_WOOD -> yLtB
    surge.util.MSound FIREWORK_BLAST -> mIqd
    surge.util.MSound FIREWORK_BLAST2 -> BLyn
    surge.util.MSound FIREWORK_LARGE_BLAST -> rbUy
    surge.util.MSound FIREWORK_LARGE_BLAST2 -> QQUy
    surge.util.MSound FIREWORK_TWINKLE -> Fjhf
    surge.util.MSound FIREWORK_TWINKLE2 -> plqE
    surge.util.MSound FIREWORK_LAUNCH -> OlrV
    surge.util.MSound SUCCESSFUL_HIT -> NHLs
    surge.util.MSound HORSE_ANGRY -> ENTQ
    surge.util.MSound HORSE_ARMOR -> AJXH
    surge.util.MSound HORSE_BREATHE -> OvDj
    surge.util.MSound HORSE_DEATH -> UDPo
    surge.util.MSound HORSE_GALLOP -> XUjP
    surge.util.MSound HORSE_HIT -> MwnR
    surge.util.MSound HORSE_IDLE -> aOcX
    surge.util.MSound HORSE_JUMP -> Fawk
    surge.util.MSound HORSE_LAND -> LIve
    surge.util.MSound HORSE_SADDLE -> plqP
    surge.util.MSound HORSE_SOFT -> VaFs
    surge.util.MSound HORSE_WOOD -> jbmv
    surge.util.MSound DONKEY_ANGRY -> pJmY
    surge.util.MSound DONKEY_DEATH -> WtkI
    surge.util.MSound DONKEY_HIT -> WJWb
    surge.util.MSound DONKEY_IDLE -> KaGk
    surge.util.MSound HORSE_SKELETON_DEATH -> vCml
    surge.util.MSound HORSE_SKELETON_HIT -> tEwq
    surge.util.MSound HORSE_SKELETON_IDLE -> KXTj
    surge.util.MSound HORSE_ZOMBIE_DEATH -> JvtI
    surge.util.MSound HORSE_ZOMBIE_HIT -> LuKD
    surge.util.MSound HORSE_ZOMBIE_IDLE -> Ducc
    surge.util.MSound VILLAGER_DEATH -> KWsw
    surge.util.MSound VILLAGER_HAGGLE -> VaEw
    surge.util.MSound VILLAGER_HIT -> aXTU
    surge.util.MSound VILLAGER_IDLE -> NHLd
    surge.util.MSound VILLAGER_NO -> FPua
    surge.util.MSound VILLAGER_YES -> LJVl
    java.lang.String pre19sound -> KXVC
    java.lang.String post19sound -> oXkL
    org.bukkit.Sound resolvedSound -> iVyW
    surge.util.MSound[] $VALUES -> gjfQ
    8:8:surge.util.MSound[] values() -> values
    8:8:surge.util.MSound valueOf(java.lang.String) -> valueOf
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> lxQE
    8:203:void <clinit>() -> <clinit>
surge.util.MaterialBlock -> org.cyberpwn.react.oxfc:
    org.bukkit.Material material -> YXlc
    java.lang.Byte data -> data
    28:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    34:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    45:48:void <init>(org.bukkit.block.BlockState) -> <init>
    51:54:void <init>(org.bukkit.block.Block) -> <init>
    57:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> gyas
    79:80:void setData(java.lang.Byte) -> aehq
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
surge.util.P -> org.cyberpwn.react.Fybb:
    25:25:void <init>() -> <init>
    29:32:boolean isWithinViewDistance(org.bukkit.entity.Player,org.bukkit.Chunk) -> aehq
    37:45:boolean isWithinViewDistance(org.bukkit.Chunk) -> JAEj
    57:57:boolean isOnline(java.lang.String) -> Ixyp
    69:69:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    79:79:org.bukkit.entity.Player getAnyPlayer() -> mrcE
    89:89:boolean isAnyOnline() -> jaHu
    101:101:react.glang.GList inWorld(org.bukkit.World) -> jWQb
    113:125:react.glang.GList inChunk(org.bukkit.Chunk) -> ssNC
    139:139:react.glang.GList inArea(org.bukkit.Location,double) -> aehq
    153:153:react.glang.GList inArea(org.bukkit.Location,int) -> aehq
    164:165:void disable(org.bukkit.entity.Player) -> iCPU
    175:176:void enable(org.bukkit.entity.Player) -> tmcC
    189:189:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> aehq
    203:203:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> CUak
    215:216:boolean hasInventoryOpen(org.bukkit.entity.Player) -> qSWY
    232:264:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> aehq
    278:287:int getTotalExperience(org.bukkit.entity.Player) -> qAti
    302:310:void setTotalExperience(org.bukkit.entity.Player,int) -> HnDD
    321:321:boolean canFindPlayer(java.lang.String) -> EmNl
    333:349:org.bukkit.entity.Player findPlayer(java.lang.String) -> DGhM
    359:366:react.glang.GList onlinePlayers() -> lwpO
    378:378:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> vQdn
    389:392:void clear(org.bukkit.entity.Player) -> JIXO
    402:406:void clearEffects(org.bukkit.entity.Player) -> eqwe
    419:420:void heal(org.bukkit.entity.Player,double) -> aehq
    430:431:void heal(org.bukkit.entity.Player) -> uyVS
    442:443:void resetMaxHeath(org.bukkit.entity.Player) -> DPXC
    453:454:void resetHunger(org.bukkit.entity.Player) -> bXNR
    464:465:void kill(org.bukkit.entity.Player) -> vbey
    476:476:surge.util.Shape getShape(org.bukkit.entity.Player) -> JYyE
    488:488:org.bukkit.Location getHand(org.bukkit.entity.Player) -> uWRf
    504:513:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> aehq
surge.util.P$1 -> org.cyberpwn.react.Fybb$1:
    114:114:void <init>() -> <init>
    118:123:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> IODN
    114:114:java.lang.Object onAdapt(java.lang.Object) -> uOBF
surge.util.P$2 -> org.cyberpwn.react.Fybb$2:
    java.lang.Double val$doff -> kepc
    org.bukkit.entity.Player val$e -> pdbb
    org.bukkit.entity.Entity[] val$result -> JwWl
    246:246:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    250:261:void onTrace(org.bukkit.Location) -> XIlb
surge.util.PE -> org.cyberpwn.react.aDkA:
    surge.util.PE ABSORPTION -> CXpV
    surge.util.PE BLINDNESS -> gPvc
    surge.util.PE CONFUSION -> WdLN
    surge.util.PE DAMAGE_RESISTANCE -> usqq
    surge.util.PE FAST_DIGGING -> IcSa
    surge.util.PE FIRE_RESISTANCE -> JMEP
    surge.util.PE GLOWING -> MVMo
    surge.util.PE HARM -> LdLg
    surge.util.PE HEAL -> rIFR
    surge.util.PE HEALTH_BOOST -> osBA
    surge.util.PE HUNGER -> pJnw
    surge.util.PE INCREASE_DAMAGE -> kesd
    surge.util.PE INVISIBILITY -> Niqu
    surge.util.PE JUMP -> IbsR
    surge.util.PE LEVITATION -> yUiq
    surge.util.PE LUCK -> VOfa
    surge.util.PE NIGHT_VISION -> OvGX
    surge.util.PE POISON -> PxhE
    surge.util.PE REGENERATION -> rQVG
    surge.util.PE SATURATION -> XgNM
    surge.util.PE SLOW -> IbrC
    surge.util.PE SLOW_DIGGING -> aWtc
    surge.util.PE SPEED -> OSbG
    surge.util.PE UNLUCK -> dXmY
    surge.util.PE WATER_BREATHING -> VOeR
    surge.util.PE WEAKNESS -> SqQJ
    surge.util.PE WITHER -> jboW
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> CUak
    144:144:surge.util.PE d(int) -> teRe
    156:156:surge.util.PE a(int) -> wKwg
    166:166:org.bukkit.potion.PotionEffect c() -> CWHX
    177:178:void c(org.bukkit.entity.LivingEntity) -> uOBF
    182:183:void crm(org.bukkit.entity.LivingEntity) -> KvlK
    187:188:void rm(org.bukkit.entity.LivingEntity) -> TOCT
    192:215:void <clinit>() -> <clinit>
surge.util.ParticleEffect -> org.cyberpwn.react.nudC:
    surge.util.ParticleEffect EXPLOSION_NORMAL -> jsqK
    surge.util.ParticleEffect EXPLOSION_LARGE -> vwSw
    surge.util.ParticleEffect EXPLOSION_HUGE -> Spof
    surge.util.ParticleEffect FIREWORKS_SPARK -> muKJ
    surge.util.ParticleEffect WATER_BUBBLE -> aiXI
    surge.util.ParticleEffect WATER_SPLASH -> EWGJ
    surge.util.ParticleEffect WATER_WAKE -> XUkm
    surge.util.ParticleEffect SUSPENDED -> DJqb
    surge.util.ParticleEffect SUSPENDED_DEPTH -> Exhn
    surge.util.ParticleEffect CRIT -> uROA
    surge.util.ParticleEffect CRIT_MAGIC -> TcSA
    surge.util.ParticleEffect SMOKE_NORMAL -> UvvH
    surge.util.ParticleEffect SMOKE_LARGE -> CQAV
    surge.util.ParticleEffect SPELL -> cLya
    surge.util.ParticleEffect SPELL_INSTANT -> BgQk
    surge.util.ParticleEffect SPELL_MOB -> fhHp
    surge.util.ParticleEffect SPELL_MOB_AMBIENT -> tyal
    surge.util.ParticleEffect SPELL_WITCH -> nVMy
    surge.util.ParticleEffect DRIP_WATER -> CGpd
    surge.util.ParticleEffect DRIP_LAVA -> ENXV
    surge.util.ParticleEffect VILLAGER_ANGRY -> rkLP
    surge.util.ParticleEffect VILLAGER_HAPPY -> UoIV
    surge.util.ParticleEffect TOWN_AURA -> vDRj
    surge.util.ParticleEffect NOTE -> GLMx
    surge.util.ParticleEffect PORTAL -> uRPw
    surge.util.ParticleEffect ENCHANTMENT_TABLE -> cfpI
    surge.util.ParticleEffect FLAME -> TAQv
    surge.util.ParticleEffect LAVA -> npAE
    surge.util.ParticleEffect FOOTSTEP -> WtoQ
    surge.util.ParticleEffect CLOUD -> CXrD
    surge.util.ParticleEffect REDSTONE -> UniA
    surge.util.ParticleEffect SNOWBALL -> SiCk
    surge.util.ParticleEffect SNOW_SHOVEL -> jbre
    surge.util.ParticleEffect SLIME -> muNU
    surge.util.ParticleEffect HEART -> NPax
    surge.util.ParticleEffect BARRIER -> LdNp
    surge.util.ParticleEffect ITEM_CRACK -> JTuM
    surge.util.ParticleEffect BLOCK_CRACK -> nwnv
    surge.util.ParticleEffect BLOCK_DUST -> btmH
    surge.util.ParticleEffect WATER_DROP -> EVfy
    surge.util.ParticleEffect ITEM_TAKE -> CXsW
    surge.util.ParticleEffect MOB_APPEARANCE -> xIvv
    surge.util.ParticleEffect DRAGON_BREATH -> FjlP
    surge.util.ParticleEffect END_ROD -> pdcl
    surge.util.ParticleEffect DAMAGE_INDICATOR -> wrIk
    surge.util.ParticleEffect SWEEP_ATTACK -> Ibsh
    java.util.Map NAME_MAP -> nUld
    java.util.Map ID_MAP -> QIJI
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> bSJx
    java.util.List properties -> xRgq
    surge.util.ParticleEffect[] $VALUES -> pdcR
    51:51:surge.util.ParticleEffect[] values() -> values
    51:51:surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
    467:472:void <init>(java.lang.String,int,java.lang.String,int,int,surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> Xluv
    511:511:boolean hasProperty(surge.util.ParticleEffect$ParticleProperty) -> aehq
    521:525:boolean isSupported() -> isSupported
    537:545:surge.util.ParticleEffect fromName(java.lang.String) -> tSqq
    557:565:surge.util.ParticleEffect fromId(int) -> WrBa
    577:578:boolean isWater(org.bukkit.Location) -> IODN
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> aehq
    615:615:boolean isDataCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleData) -> aehq
    629:629:boolean isColorCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor) -> aehq
    665:681:void display(float,int,org.bukkit.Location,double) -> aehq
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> aehq
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> aehq
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> aehq
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> aehq
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> aehq
    899:912:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> aehq
    934:947:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> aehq
    968:969:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> aehq
    1004:1020:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> aehq
    1055:1068:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> aehq
    1102:1103:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> aehq
    1130:1143:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> aehq
    1169:1182:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> aehq
    1207:1208:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> aehq
    51:452:void <clinit>() -> <clinit>
surge.util.ParticleEffect$BlockData -> org.cyberpwn.react.nudC$aehq:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$ItemData -> org.cyberpwn.react.nudC$CUak:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$NoteColor -> org.cyberpwn.react.nudC$HnDD:
    int note -> note
    1563:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> UdNT
    1594:1594:float getValueY() -> hJAm
    1605:1605:float getValueZ() -> giBO
surge.util.ParticleEffect$OrdinaryColor -> org.cyberpwn.react.nudC$bNyW:
    int red -> red
    int green -> green
    int blue -> blue
    1436:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> UdNT
    1526:1526:float getValueY() -> hJAm
    1537:1537:float getValueZ() -> giBO
surge.util.ParticleEffect$ParticleColor -> org.cyberpwn.react.nudC$xGHx:
    1383:1383:void <init>() -> <init>
    float getValueX() -> UdNT
    float getValueY() -> hJAm
    float getValueZ() -> giBO
surge.util.ParticleEffect$ParticleColorException -> org.cyberpwn.react.nudC$uOBF:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticleData -> org.cyberpwn.react.nudC$KvlK:
    org.bukkit.Material material -> YXlc
    byte data -> data
    int[] packetData -> UTtt
    1266:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> bbAm
    1309:1309:java.lang.String getPacketDataString() -> CViR
surge.util.ParticleEffect$ParticleDataException -> org.cyberpwn.react.nudC$TOCT:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticlePacket -> org.cyberpwn.react.nudC$HvTU:
    int version -> version
    java.lang.Class enumParticle -> WuNa
    java.lang.reflect.Constructor packetConstructor -> pmTa
    java.lang.reflect.Method getHandle -> gaxl
    java.lang.reflect.Field playerConnection -> YHRl
    java.lang.reflect.Method sendPacket -> EEiI
    boolean initialized -> initialized
    surge.util.ParticleEffect effect -> EhLk
    float offsetX -> dGqY
    float offsetY -> dHRR
    float offsetZ -> PVin
    float speed -> kMHD
    int amount -> AaqG
    boolean longDistance -> XxSy
    surge.util.ParticleEffect$ParticleData data -> SGCD
    java.lang.Object packet -> oHPw
    1746:1764:void <init>(surge.util.ParticleEffect,float,float,float,float,int,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> Txum
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> aehq
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> CUak
    2004:2018:void sendTo(org.bukkit.Location,double) -> CUak
surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> org.cyberpwn.react.nudC$HvTU$aehq:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> org.cyberpwn.react.nudC$HvTU$CUak:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> org.cyberpwn.react.nudC$HvTU$HnDD:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticleProperty -> org.cyberpwn.react.nudC$XIlb:
    surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> jQrr
    surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> gYlA
    surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> tpsE
    surge.util.ParticleEffect$ParticleProperty COLORABLE -> NjVr
    surge.util.ParticleEffect$ParticleProperty[] $VALUES -> XpDc
    1219:1219:surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1219:1219:surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1219:1236:void <clinit>() -> <clinit>
surge.util.ParticleEffect$ParticleVersionException -> org.cyberpwn.react.nudC$IODN:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
surge.util.Paste -> org.cyberpwn.react.LHOn:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> kbip
surge.util.Persist -> org.cyberpwn.react.HfWW:
surge.util.Platform -> org.cyberpwn.react.EByx:
    boolean ENABLE -> kDUM
    double PROC_CPU -> AAnM
    9:9:void <init>() -> <init>
    253:258:java.lang.String getVersion() -> getVersion
    263:268:java.lang.String getName() -> getName
    273:273:com.sun.management.OperatingSystemMXBean getSystem() -> PKjr
    9:9:com.sun.management.OperatingSystemMXBean access$000() -> UuNO
    11:12:void <clinit>() -> <clinit>
surge.util.Platform$CPU -> org.cyberpwn.react.EByx$aehq:
    198:198:void <init>() -> <init>
    202:207:int getAvailableProcessors() -> getAvailableProcessors
    212:217:double getCPULoad() -> tvvS
    222:227:double getProcessCPULoad() -> nCBF
    232:237:double getLiveProcessCPULoad() -> HTuR
    242:247:java.lang.String getArchitecture() -> KUnL
surge.util.Platform$ENVIRONMENT -> org.cyberpwn.react.EByx$CUak:
    14:14:void <init>() -> <init>
    18:18:boolean canRunBatch() -> PnOg
    23:28:java.lang.String getJavaHome() -> SLdb
    33:38:java.lang.String getJavaVendor() -> XTEA
    43:48:java.lang.String getJavaVersion() -> cTDR
surge.util.Platform$MEMORY -> org.cyberpwn.react.EByx$HnDD:
    119:119:void <init>() -> <init>
surge.util.Platform$MEMORY$PHYSICAL -> org.cyberpwn.react.EByx$HnDD$aehq:
    121:121:void <init>() -> <init>
    125:130:long getTotalMemory() -> yKQK
    135:140:long getFreeMemory() -> mYPJ
    145:150:long getUsedMemory() -> FXBI
surge.util.Platform$MEMORY$VIRTUAL -> org.cyberpwn.react.EByx$HnDD$CUak:
    154:154:void <init>() -> <init>
    158:163:long getTotalMemory() -> yKQK
    168:173:long getFreeMemory() -> mYPJ
    178:183:long getUsedMemory() -> FXBI
    188:193:long getCommittedVirtualMemory() -> ymSa
surge.util.Platform$STORAGE -> org.cyberpwn.react.EByx$bNyW:
    52:52:void <init>() -> <init>
    56:63:long getAbsoluteTotalSpace() -> oVde
    68:68:long getTotalSpace() -> getTotalSpace
    73:73:long getTotalSpace(java.io.File) -> KvlK
    78:85:long getAbsoluteFreeSpace() -> tfUP
    90:90:long getFreeSpace() -> getFreeSpace
    95:95:long getFreeSpace(java.io.File) -> TOCT
    100:100:long getUsedSpace() -> RRSP
    105:105:long getUsedSpace(java.io.File) -> HvTU
    110:110:long getAbsoluteUsedSpace() -> XCCM
    115:115:java.io.File[] getRoots() -> getRoots
surge.util.PluginUtil -> org.cyberpwn.react.VDkR:
    62:62:void <init>() -> <init>
    73:75:void enable(org.bukkit.plugin.Plugin) -> xGHx
    79:89:void enable(java.lang.String) -> OjJw
    96:100:void enableAll() -> kdLB
    110:114:void disable(org.bukkit.plugin.Plugin) -> uOBF
    121:125:void disableAll() -> sRTJ
    136:136:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> KvlK
    150:157:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> aehq
    169:174:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> iSrd
    184:187:java.util.List getPluginNames(boolean) -> Pljn
    199:202:java.lang.String getPluginVersion(java.lang.String) -> LrCg
    215:237:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> TOCT
    252:331:java.util.List findByCommand(java.lang.String) -> LaAv
    352:353:void load(org.bukkit.plugin.Plugin) -> HvTU
    357:379:java.lang.String getPluginFileName(java.lang.String) -> vbht
    384:406:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> aehq
    419:471:void load(java.lang.String) -> load
    476:507:void load(java.io.File) -> load
    518:523:void reload(org.bukkit.plugin.Plugin) -> XIlb
    530:534:void reloadAll() -> twYk
    546:648:void unload(org.bukkit.plugin.Plugin) -> IODN
    654:776:void unloadForce(org.bukkit.plugin.Plugin) -> Txum
    781:783:void reloadSoft(surge.control.AmpedPlugin) -> HnDD
surge.util.PoolCount -> org.cyberpwn.react.AXnw:
surge.util.PoolDescriber -> org.cyberpwn.react.RlEC:
surge.util.PoolNanoThrottle -> org.cyberpwn.react.aDiy:
surge.util.PositionalSelector -> org.cyberpwn.react.FqRe:
    react.glang.GSet allowedChunks -> qNVo
    12:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    23:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> jGYQ
    39:40:void addChunk(org.bukkit.Chunk) -> owbJ
    44:44:react.glang.GSet getAllowedChunks() -> FWbw
surge.util.Protocol -> org.cyberpwn.react.TFsh:
    surge.util.Protocol LATEST -> wWwl
    surge.util.Protocol R1_12_2 -> HOQl
    surge.util.Protocol R1_12_2_PRE -> HXCY
    surge.util.Protocol R1_12_1 -> Uvyf
    surge.util.Protocol R1_12 -> qgho
    surge.util.Protocol R1_11_2 -> OTFm
    surge.util.Protocol R1_11_1 -> SWaj
    surge.util.Protocol R1_11 -> wFum
    surge.util.Protocol R1_10_2 -> IATR
    surge.util.Protocol R1_10_1 -> AmCA
    surge.util.Protocol R1_10 -> MUoy
    surge.util.Protocol R1_9_4 -> snOc
    surge.util.Protocol R1_9_3 -> dXqr
    surge.util.Protocol R1_9_2 -> RKmn
    surge.util.Protocol R1_9_1 -> xSKY
    surge.util.Protocol R1_9 -> fyNm
    surge.util.Protocol R1_8_9 -> vMHe
    surge.util.Protocol R1_8_8 -> dYUm
    surge.util.Protocol R1_8_7 -> iOSa
    surge.util.Protocol R1_8_6 -> laNP
    surge.util.Protocol R1_8_5 -> obFg
    surge.util.Protocol R1_8_4 -> mAmQ
    surge.util.Protocol R1_8_3 -> mcor
    surge.util.Protocol R1_8_2 -> qWKd
    surge.util.Protocol R1_8_1 -> swCy
    surge.util.Protocol R1_8 -> jQuk
    surge.util.Protocol R1_7_10 -> OSiM
    surge.util.Protocol R1_7_9 -> wqnN
    surge.util.Protocol R1_7_8 -> DumI
    surge.util.Protocol R1_7_7 -> ARoo
    surge.util.Protocol R1_7_6 -> plyX
    surge.util.Protocol R1_7_5 -> DJyB
    surge.util.Protocol R1_7_4 -> NXwB
    surge.util.Protocol R1_7_3 -> CiyH
    surge.util.Protocol R1_7_2 -> uQtY
    surge.util.Protocol R1_7_1 -> iyfb
    surge.util.Protocol B1_6_4 -> qNYe
    surge.util.Protocol B1_6_3 -> yxSy
    surge.util.Protocol B1_6_2 -> kMIV
    surge.util.Protocol B1_6_1 -> MDqu
    surge.util.Protocol B1_5_2 -> yocG
    surge.util.Protocol B1_5_1 -> FsaV
    surge.util.Protocol B1_5 -> rkNf
    surge.util.Protocol B1_4_7 -> GnSq
    surge.util.Protocol B1_4_6 -> MMbC
    surge.util.Protocol B1_4_5 -> GnTV
    surge.util.Protocol B1_4_4 -> DShc
    surge.util.Protocol B1_4_2 -> RUAk
    surge.util.Protocol B1_3_2 -> IJGT
    surge.util.Protocol B1_3_1 -> NrhM
    surge.util.Protocol B1_2_5 -> JCxK
    surge.util.Protocol B1_2_4 -> JLiX
    surge.util.Protocol EARLIEST -> BgUy
    surge.util.Protocol UNKNOWN -> jlGl
    int version -> version
    java.lang.String packageVersion -> YqPx
    java.lang.String versionName -> ARph
    boolean netty -> XgUD
    surge.util.Protocol[] $VALUES -> GLQe
    5:5:surge.util.Protocol[] values() -> values
    5:5:surge.util.Protocol valueOf(java.lang.String) -> valueOf
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    88:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> WQED
    118:118:java.lang.String getPackageVersion() -> getPackageVersion
    124:124:java.lang.String toString() -> toString
    129:137:surge.util.Protocol getSupportedNMSVersion() -> mGpY
    142:150:surge.util.Protocol getProtocolVersion() -> yvGw
    155:155:surge.util.ProtocolRange to(surge.util.Protocol) -> CUak
    160:160:boolean isServerVersion() -> OIME
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> VwtG
    175:175:boolean isActualVersion() -> eYlJ
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> RIeI
    200:200:int getMetaVersion() -> vdNI
    5:60:void <clinit>() -> <clinit>
surge.util.ProtocolRange -> org.cyberpwn.react.VfmF:
    surge.util.Protocol from -> yUoT
    surge.util.Protocol to -> iORV
    9:12:void <init>(surge.util.Protocol,surge.util.Protocol) -> <init>
    16:16:surge.util.Protocol getFrom() -> jqks
    21:21:surge.util.Protocol getTo() -> cCCq
    26:26:boolean contains(surge.util.Protocol) -> HnDD
    32:32:java.lang.String toString() -> toString
surge.util.Query -> org.cyberpwn.react.HUSi:
    org.bukkit.entity.Player p -> kuEt
    18:21:void <init>(org.bukkit.entity.Player) -> <init>
    25:26:void close() -> close
    void onMessage(java.lang.String) -> HvTU
    33:37:void on(org.bukkit.event.player.PlayerQuitEvent) -> aehq
    42:46:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> aehq
    51:65:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> aehq
surge.util.Query$1 -> org.cyberpwn.react.HUSi$1:
    org.bukkit.event.player.AsyncPlayerChatEvent val$e -> osFp
    surge.util.Query this$0 -> lGYg
    54:54:void <init>(surge.util.Query,org.bukkit.event.player.AsyncPlayerChatEvent) -> <init>
    58:60:void run() -> run
surge.util.Range -> org.cyberpwn.react.ceBm:
    double min -> min
    double max -> max
    22:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> mGpH
    70:70:int randomNextInt() -> Jtoh
    80:80:long randomNextLong() -> pYiu
    92:92:boolean isWithin(double) -> vQdn
    104:104:boolean isWithin(int) -> avmr
    116:116:boolean isWithin(long) -> CDaB
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> JIXO
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> iCLi
surge.util.RawEvent -> org.cyberpwn.react.Tqgm:
surge.util.RayTrace -> org.cyberpwn.react.jGSm:
    org.bukkit.Location start -> fVjL
    org.bukkit.util.Vector direction -> fxmI
    java.lang.Double maxDistance -> BETp
    java.lang.Double distanceCovered -> xRpK
    java.lang.Double step -> Pgnx
    java.lang.Boolean stop -> FkTT
    37:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> rhbB
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> XIlb
    89:89:org.bukkit.Location getStart() -> MeGp
    94:95:void setStart(org.bukkit.Location) -> qcud
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> nugT
    114:115:void setMaxDistance(java.lang.Double) -> bNyW
    119:119:java.lang.Double getDistanceCovered() -> UAkI
    124:125:void setDistanceCovered(java.lang.Double) -> xGHx
    129:129:java.lang.Double getStep() -> kuPC
    134:135:void setStep(java.lang.Double) -> uOBF
surge.util.ReflectionUtils -> org.cyberpwn.react.GRPk:
    35:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> aehq
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> aehq
    156:156:java.lang.Object instantiateObject(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> aehq
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> aehq
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> aehq
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> aehq
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> aehq
    359:359:java.lang.reflect.Field getField(java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> aehq
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> aehq
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> aehq
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> aehq
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> aehq
    508:509:void setValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> aehq
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> aehq
surge.util.ReflectionUtils$DataType -> org.cyberpwn.react.GRPk$aehq:
    surge.util.ReflectionUtils$DataType BYTE -> tWdt
    surge.util.ReflectionUtils$DataType SHORT -> iyho
    surge.util.ReflectionUtils$DataType INTEGER -> KaRA
    surge.util.ReflectionUtils$DataType LONG -> KOoS
    surge.util.ReflectionUtils$DataType CHARACTER -> gjql
    surge.util.ReflectionUtils$DataType FLOAT -> qgnR
    surge.util.ReflectionUtils$DataType DOUBLE -> rIOS
    surge.util.ReflectionUtils$DataType BOOLEAN -> WmEh
    java.util.Map CLASS_MAP -> Bogg
    java.lang.Class primitive -> hnTq
    java.lang.Class reference -> GTeJ
    surge.util.ReflectionUtils$DataType[] $VALUES -> nVTR
    648:648:surge.util.ReflectionUtils$DataType[] values() -> values
    648:648:surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
    682:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> TWyl
    704:704:java.lang.Class getReference() -> URmF
    716:716:surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> CUak
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> HnDD
    741:742:java.lang.Class getReference(java.lang.Class) -> bNyW
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> aehq
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> CUak
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> bNyW
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> xGHx
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> aehq
    648:671:void <clinit>() -> <clinit>
surge.util.ReflectionUtils$PackageType -> org.cyberpwn.react.GRPk$CUak:
    surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> hfDl
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> SqYk
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> DeOF
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> NYYj
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> Bwwh
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> XxXj
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> hnUA
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> xcot
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> LdTH
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> PyQU
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> DTLH
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> gHlk
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> uIeX
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> SXGX
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> hLQQ
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> YQGk
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> mmCH
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> EqAk
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> MESw
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> BoiC
    java.lang.String path -> path
    surge.util.ReflectionUtils$PackageType[] $VALUES -> vLha
    547:547:surge.util.ReflectionUtils$PackageType[] values() -> values
    547:547:surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
    579:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    547:568:void <clinit>() -> <clinit>
surge.util.Refreshable -> org.cyberpwn.react.oyFx:
    void refresh() -> refresh
surge.util.SQLOperation -> org.cyberpwn.react.UAfh:
    surge.util.SQLOperation LOAD -> Acsv
    surge.util.SQLOperation SAVE -> lOlR
    surge.util.SQLOperation[] $VALUES -> Qjqs
    3:3:surge.util.SQLOperation[] values() -> values
    3:3:surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:5:void <clinit>() -> <clinit>
surge.util.ServerState -> org.cyberpwn.react.aVLR:
    surge.util.ServerState START -> GefD
    surge.util.ServerState ENABLE -> pTKw
    surge.util.ServerState DISABLE -> btul
    surge.util.ServerState STOP -> OCME
    surge.util.ServerState RUNNING -> gQbP
    surge.util.ServerState[] $VALUES -> POAO
    3:3:surge.util.ServerState[] values() -> values
    3:3:surge.util.ServerState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:37:void <clinit>() -> <clinit>
surge.util.Shape -> org.cyberpwn.react.qTWw:
    org.bukkit.Location location -> EVMO
    org.bukkit.util.Vector offset -> mdTx
    org.bukkit.util.Vector size -> MDvM
    28:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> VLWr
    90:94:org.bukkit.Location randomLocation() -> TaKs
    104:104:org.bukkit.Location randomSurface() -> Wacs
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> OYlX
    129:129:org.bukkit.util.Vector getSize() -> JmAS
surge.util.SnowLevel -> org.cyberpwn.react.XvEX:
    byte level -> uAYG
    19:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> yltc
    51:52:void setLevel(byte) -> iCLi
surge.util.SuperCaller -> org.cyberpwn.react.Djja:
    void run() -> run
surge.util.T -> org.cyberpwn.react.BScS:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> CUak
    32:35:void stop() -> stop
surge.util.TXT -> org.cyberpwn.react.uaEa:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> KvlK
    67:67:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> aehq
    85:85:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> aehq
    99:99:java.lang.String line(surge.util.C,int) -> aehq
    113:113:java.lang.String underline(surge.util.C,int) -> CUak
    135:140:java.lang.String getLine(surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> aehq
surge.util.Tag -> org.cyberpwn.react.MJqN:
    java.lang.String value() -> value
surge.util.Timer -> org.cyberpwn.react.HDRt:
    long tns -> EOAc
    long cns -> DSmk
    20:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> LYTe
surge.util.VectorMath -> org.cyberpwn.react.BCCB:
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(surge.util.Axis,org.bukkit.util.Vector,double) -> aehq
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> aehq
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> CUak
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> HnDD
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> bNyW
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> CUak
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> xGHx
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> uOBF
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> KvlK
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> TOCT
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> HvTU
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> XIlb
    111:111:double round(double,int) -> xGHx
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> aehq
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> aehq
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> aehq
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> bNyW
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> xGHx
    268:268:org.bukkit.util.Vector toVector(float,float) -> aehq
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> aehq
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> aehq
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> IODN
    337:340:double getSpeed(org.bukkit.util.Vector) -> Txum
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> aehq
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> qcud
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> aehq
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> CUak
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> HnDD
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> bNyW
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> VLWr
surge.util.VectorMath$1 -> org.cyberpwn.react.BCCB$1:
    org.bukkit.util.Vector val$vector -> LBSj
    355:355:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> YMQO
    355:355:java.lang.Object onAdapt(java.lang.Object) -> uOBF
surge.util.VectorMath$2 -> org.cyberpwn.react.BCCB$2:
    int[] $SwitchMap$surge$util$Axis -> MTmx
    int[] $SwitchMap$org$bukkit$block$BlockFace -> ygVp
    21:152:void <clinit>() -> <clinit>
surge.util.W -> org.cyberpwn.react.iCsJ:
    31:31:void <init>() -> <init>
    42:50:boolean visible(org.bukkit.block.Block) -> XIlb
    63:66:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> aehq
    77:88:org.bukkit.entity.Entity getEntity(int) -> vsiU
    103:116:int count(org.bukkit.entity.Player,surge.util.MaterialBlock) -> aehq
    133:133:boolean has(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> aehq
    145:145:int getChunkX(org.bukkit.block.Block) -> IODN
    157:157:int getChunkY(org.bukkit.block.Block) -> Txum
    170:171:void dropXp(org.bukkit.Location,int) -> CUak
    182:182:int getChunkZ(org.bukkit.block.Block) -> qcud
    198:205:void take(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> CUak
    221:229:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> aehq
    234:241:react.glang.GList news(org.bukkit.Location) -> YMQO
    258:266:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> aehq
    278:278:react.glang.GList getBlocks(org.bukkit.Chunk) -> iCLi
    290:290:org.bukkit.World getSyncWorld(org.bukkit.World) -> Vehq
    302:302:org.bukkit.World toSync(org.bukkit.World) -> EKFp
    314:314:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> VLWr
    326:326:org.bukkit.Location toSync(org.bukkit.Location) -> JAEj
    338:338:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> onqO
    354:421:surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> mFlV
    435:447:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> aehq
    462:463:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> aehq
    480:481:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> aehq
    495:496:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> aehq
    513:514:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> aehq
    527:528:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> aehq
    543:544:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> aehq
    560:570:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> aehq
    582:589:react.glang.GList chunkFaces(org.bukkit.Chunk) -> Usfk
    601:610:react.glang.GList blockFaces(org.bukkit.block.Block) -> YMQO
    622:636:org.bukkit.Location simulateFall(org.bukkit.Location) -> ssNC
    650:665:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> HnDD
    679:691:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> aehq
    713:745:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> aehq
    763:770:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> aehq
    784:784:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> aehq
surge.util.W$1 -> org.cyberpwn.react.iCsJ$1:
    java.lang.Double val$doff -> kepc
    org.bukkit.entity.Entity val$e -> uRYc
    org.bukkit.entity.Entity[] val$result -> JwWl
    727:727:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    731:742:void onTrace(org.bukkit.Location) -> XIlb
surge.util.Worlds -> org.cyberpwn.react.xbBV:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> NhLM
    33:33:boolean hasWorld(java.lang.String) -> PmOB
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
surge.util.package-info -> org.cyberpwn.react.iwXc:

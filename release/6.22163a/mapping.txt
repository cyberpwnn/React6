react.Config -> Btan:
    react.glang.GMap worldConfigs -> Btan
    java.lang.String A_COMMANDOVERRIDE_TPS -> QDwh
    java.lang.String A_REACT_REMOTE_PORT -> CgEC
    java.lang.String A_REACT_REMOTE_ENABLED -> OrWU
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> xFgk
    java.lang.String A_POOL_MAXTHREADS -> rUxE
    java.lang.String A_POOL_SYNC_NANOS -> eGah
    java.lang.String A_FASTLEAF_ENABLED -> QDxG
    java.lang.String A_FASTLEAF_ONDECAY -> vHrQ
    java.lang.String A_FASTLEAF_INSTANT -> IVsP
    java.lang.String A_FASTLEAF_DECAYPERIOD -> YfbV
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> SvRw
    java.lang.String A_ENTITYSTACK_ENABLED -> RsQG
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> xhkE
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> pHBK
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> EAvS
    java.lang.String A_GLASS_SHOW_BLOCKS -> xGIH
    java.lang.String A_GLASS_SHOW_PARTICLES -> amyd
    java.lang.String A_ALLOW_CULL -> OrWl
    java.lang.String A_ALLOW_PURGE -> ivPs
    java.lang.String A_ALLOW_STACKING -> VLVl
    java.lang.String A_CULL_RULES -> NgBv
    java.lang.String A_RAI_TPS_HIGH_TICK -> IWRl
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> Grnk
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> Txsq
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> uWPk
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> Rrmv
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> SnBP
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> STPF
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> qmGO
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> gDvV
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> XuBC
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> CEBE
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> fBSk
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> OqvM
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> MlQK
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> kbcy
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> HTSJ
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> YUcV
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> tnDI
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> kHuP
    java.lang.String A_RAI_FLUID_TIME_CEIL -> ydAI
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> qJfe
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> rpMj
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> nIlt
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> PmMF
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> rNIq
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> jhTy
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> EJiV
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> uxuV
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> eaVu
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> rokn
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> aTip
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> NLrq
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> XkrO
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> PJhj
    java.lang.String A_USE_WORLD_CONFIGS -> QooM
    java.lang.String A_LANGUAGE -> oVCD
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> kIVD
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> ofbu
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> OqyR
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> OqwY
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> NVCa
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> uEoq
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> kjwO
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> xGJL
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> KTid
    java.lang.String A_RAI_ENTITY_PROPIGATE -> BRah
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> TqFt
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> SBng
    boolean COMMANDOVERRIDES_TPS -> JHuc
    int REACT_REMOTE_PORT -> HSpw
    boolean REACT_REMOTE_ENABLED -> mFho
    int ENTITY_STACK_MAX_COUNT -> MuDN
    int POOL_MAXTHREADS -> fRvb
    long POOL_SYNC_NANOS -> xGJG
    boolean FASTLEAF_ENABLED -> vjvN
    boolean FASTLEAF_ONDECAY -> tTNx
    boolean FASTLEAF_INSTANT -> XBBA
    int FASTLEAF_DECAYPERIOD -> eYHb
    boolean COMMANDOVERRIDES_MEMORY -> YLtN
    boolean ENTITYSTACK_ENABLED -> jgwQ
    int ENTITYSTACK_MINIMUM_GROUP -> yuDX
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> YVEi
    int ENTITYSTACK_MAXIMUM_HEALTH -> HLEI
    boolean GLASS_SHOW_BLOCKS -> hbRT
    boolean GLASS_SHOW_PARTICLES -> Hduh
    react.glang.GList ALLOW_CULL -> Dijr
    react.glang.GList ALLOW_PURGE -> inGA
    react.glang.GList ALLOW_STACKING -> miQQ
    react.glang.GList CULL_RULES -> PlnH
    double RAI_TPS_HIGH_TICK -> uhVe
    long RAI_REDSTONE_TIME_FLOOR -> oUdD
    long RAI_REDSTONE_TIME_CEIL -> UIYU
    long RAI_REDSTONE_TIME_MUDDING -> vIWR
    double RAI_REDSTONE_TIME_FUNCTION -> cRag
    double RAI_REDSTONE_TIME_OVERBLEED -> aUMI
    int RAI_REDSTONE_TIME_RADIUS -> KfOq
    int RAI_REDSTONE_TIME_PROPIGATION -> SmgF
    long RAI_HOPPER_TIME_FLOOR -> Ahpj
    long RAI_HOPPER_TIME_CEIL -> XdDn
    long RAI_HOPPER_TIME_MUDDING -> LiPy
    double RAI_HOPPER_TIME_FUNCTION -> CEFa
    double RAI_HOPPER_TIME_OVERBLEED -> DPWn
    int RAI_HOPPER_TIME_RADIUS -> Smdn
    int RAI_HOPPER_TIME_PROPIGATION -> iTRY
    int RAI_ENTITY_CHUNK_MULTIPLIER -> RQOr
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> qSXf
    int RAI_ENTITY_CHUNK_RADIUS -> wKxc
    long RAI_FLUID_TIME_FLOOR -> kQfx
    long RAI_FLUID_TIME_CEIL -> Jskk
    long RAI_FLUID_TIME_MUDDING -> iCPp
    double RAI_FLUID_TIME_FUNCTION -> ckqn
    double RAI_FLUID_TIME_OVERBLEED -> yuBq
    int RAI_FLUID_TIME_RADIUS -> WFmY
    int RAI_FLUID_TIME_PROPIGATION -> BIrW
    double SMEAR_TICK_ENTITIES_MAX_TICK -> KCji
    double SMEAR_TICK_TILES_MAX_TICK -> PlmC
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> gpNj
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> ThXa
    double SMEAR_TICK_ENTITIES_AMOUNT -> VwPB
    double SMEAR_TICK_TILES_AMOUNT -> hPnR
    boolean SMEAR_TICK_ENTITIES_ENABLE -> SLCd
    boolean SMEAR_TICK_TILES_ENABLE -> hbQE
    boolean HOPPER_OVERTICK_ENABLE -> Qooi
    boolean USE_WORLD_CONFIGS -> oxIq
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> qKLQ
    long RAI_CHUNK_TIME_CEIL -> uNgK
    long RAI_CHUNK_TIME_MUDDING -> GHbq
    double RAI_CHUNK_TIME_FUNCTION -> oMTw
    double RAI_CHUNK_TIME_OVERBLEED -> kbjs
    int RAI_CHUNK_TIME_RADIUS -> Lytx
    int RAI_CHUNK_TIME_PROPIGATION -> vslQ
    boolean RAI_CHUNK_TIME_PROPIGATE -> yRaw
    boolean RAI_FLUID_TIME_PROPIGATE -> VUOo
    boolean RAI_ENTITY_PROPIGATE -> cBBx
    boolean RAI_HOPPER_TIME_PROPIGATE -> mrCf
    boolean RAI_REDSTONE_TIME_PROPIGATE -> avpm
    boolean hrld -> vQhc
    boolean rns -> RIBQ
    boolean rrl -> EvAQ
    39:644:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    649:666:void doTrack(org.bukkit.plugin.Plugin) -> Btan
    671:693:void onRead(org.bukkit.plugin.Plugin) -> QDwh
    697:727:void read(java.io.File,boolean) -> Btan
    731:748:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> Btan
    753:761:void closeWorldConfig(org.bukkit.World) -> QDwh
    766:879:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> Btan
    884:921:react.surge.cluster.DataCluster defaultConfig(boolean) -> Btan
    926:1005:react.glang.GList getDefaultEntitiesForStacking() -> Btan
    1010:1085:react.glang.GList getDefaultEntitiesForCulling() -> QDwh
    1090:1127:react.glang.GList getDefaultEntitiesForRemoval() -> CgEC
    1132:1161:react.glang.GList getDefaultCullRules() -> OrWU
react.Config$1 -> Btan$1:
    java.io.File val$fConfig -> BtiS
    java.io.File val$fConfigExperimental -> MIrW
    org.bukkit.plugin.Plugin val$main -> GIBk
    1:652:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    657:661:void run() -> run
react.Config$2 -> Btan$2:
    react.api.WorldConfig val$wc -> uhXb
    org.bukkit.World val$w -> wULh
    1:738:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    743:744:void run() -> run
react.Gate -> QDwh:
    react.glang.GMap defaultSettings -> RbTO
    react.glang.GSet refresh -> UIYn
    react.glang.GSet destroy -> ccdb
    40:40:void <init>() -> <init>
    48:138:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> Btan
    144:175:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> Btan
    180:180:int getChunkCountForView() -> xFgk
    185:185:int getMaxChunksForView() -> rUxE
    190:190:boolean hasFawe() -> eGah
    195:216:void tickEntityNextTickListTick(org.bukkit.World) -> CgEC
    220:224:void resetEntityMaxTick(org.bukkit.World) -> OrWU
    228:228:int getEntityTickMax(org.bukkit.World) -> xFgk
    233:233:int getTileTickMax(org.bukkit.World) -> rUxE
    238:256:void tweakEntityTickMax(org.bukkit.World,int) -> Btan
    260:277:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> Btan
    282:286:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> Btan
    290:302:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> Btan
    307:311:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> QDwh
    315:333:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> Btan
    337:341:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> eGah
    346:349:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> Btan
    354:357:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> QDwh
    362:362:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> CgEC
    367:367:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> OrWU
    372:372:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> xFgk
    377:377:boolean isBadForUnloading() -> QDxG
    382:382:boolean canUnload(org.bukkit.World,int,int) -> Btan
    389:405:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    411:422:void unloadChunk(org.bukkit.World,int,int) -> QDwh
    426:442:void removeEntity(org.bukkit.entity.Entity) -> Btan
    446:462:void purgeEntity(org.bukkit.entity.Entity) -> QDwh
    466:482:void cullEntity(org.bukkit.entity.Entity) -> CgEC
    487:504:void updateBlock(org.bukkit.block.Block) -> Btan
    508:512:java.lang.String header(java.lang.String,react.surge.util.C) -> Btan
    517:517:java.lang.String header(react.surge.util.C) -> Btan
    523:527:void updateFluid(org.bukkit.block.Block) -> QDwh
    531:532:void refresh(org.bukkit.Chunk) -> QDwh
    537:556:void refreshChunks() -> vHrQ
    560:561:void sendBlockChange(org.bukkit.Location) -> Btan
    42:44:void <clinit>() -> <clinit>
react.Gate$1 -> QDwh$1:
    react.api.SelectorPosition val$sel -> ncbp
    react.glang.Callback val$prog -> avov
    react.glang.Callback val$cb -> vQgp
    49:49:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    53:136:void run() -> run
react.Gate$1$1 -> QDwh$1$1:
    java.lang.Object val$o -> wDJb
    java.lang.reflect.Constructor val$vectorConstruct -> aUMr
    java.lang.reflect.Constructor val$cuboidConstruct -> uFUG
    java.lang.reflect.Method val$faweFixMethod -> tvWC
    java.lang.Integer[] val$total -> jxxs
    java.lang.Integer[] val$sof -> MSEX
    java.lang.Integer val$tot -> miTj
    react.Gate$1 this$0 -> mFpq
    81:81:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],java.lang.Integer) -> <init>
    87:105:void run() -> run
react.Gate$1$2 -> QDwh$1$2:
    java.lang.Integer[] val$total -> jxxs
    react.Gate$1 this$0 -> mFpq
    110:110:void <init>(react.Gate$1,java.lang.String,int,java.lang.Integer[]) -> <init>
    116:124:void run() -> run
react.Gate$2 -> QDwh$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> tTWS
    290:290:void <clinit>() -> <clinit>
react.Info -> CgEC:
    java.lang.String CORE_REACT_DOT -> WPDN
    java.lang.String CORE_NAME -> pGjK
    java.lang.String CORE_CACHE -> eGii
    java.lang.String WORLD_CONFIGS -> hatx
    java.lang.String CORE_DOTYML -> sPqy
    java.lang.String COMMAND_REACT -> jVxu
    java.lang.String COMMAND_RAI -> RsXu
    java.lang.String COMMAND_ACT_DESCRIPTION -> NUja
    java.lang.String COMMAND_ACT -> DsBO
    java.lang.String COMMAND_ACT_ALIAS_1 -> ySDq
    java.lang.String COMMAND_ACT_ALIAS_2 -> miSi
    java.lang.String COMMAND_ACT_USAGE -> uOIB
    java.lang.String COMMAND_HELP_DESCRIPTION -> XlWq
    java.lang.String COMMAND_HELP -> YMWq
    java.lang.String COMMAND_HELP_ALIAS_1 -> HCWE
    java.lang.String COMMAND_HELP_ALIAS_2 -> byuC
    java.lang.String COMMAND_HELP_USAGE -> LPCn
    java.lang.String COMMAND_STATUS_DESCRIPTION -> ktPE
    java.lang.String COMMAND_STATUS -> WObO
    java.lang.String COMMAND_STATUS_ALIAS_1 -> ETAE
    java.lang.String COMMAND_STATUS_ALIAS_2 -> bqdo
    java.lang.String COMMAND_STATUS_USAGE -> NgKe
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> lnaC
    java.lang.String COMMAND_CPUSCORE -> gxbx
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> dwjl
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> XJTv
    java.lang.String COMMAND_CPUSCORE_USAGE -> Vepw
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> uOGu
    java.lang.String COMMAND_RELOAD -> OjNn
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> VDNw
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> wTpj
    java.lang.String COMMAND_RELOAD_USAGE -> qdbF
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> HLJk
    java.lang.String COMMAND_MONITOR -> GjjL
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> hYfk
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> Qgeo
    java.lang.String COMMAND_MONITOR_USAGE -> DXpD
    java.lang.String COMMAND_VERSION_DESCRIPTION -> RYgn
    java.lang.String COMMAND_VERSION -> rotp
    java.lang.String COMMAND_VERSION_ALIAS_1 -> RbXr
    java.lang.String COMMAND_VERSION_ALIAS_2 -> OjRA
    java.lang.String COMMAND_VERSION_USAGE -> ndIT
    java.lang.String COMMAND_MAP_DESCRIPTION -> gWCw
    java.lang.String COMMAND_MAP -> EvFk
    java.lang.String COMMAND_MAP_ALIAS_1 -> VUSd
    java.lang.String COMMAND_MAP_ALIAS_2 -> LWvf
    java.lang.String COMMAND_MAP_USAGE -> GPum
    java.lang.String COMMAND_GLASS_DESCRIPTION -> Btly
    java.lang.String COMMAND_GLASS -> BIyP
    java.lang.String COMMAND_GLASS_ALIAS_1 -> EudT
    java.lang.String COMMAND_GLASS_ALIAS_2 -> sbVX
    java.lang.String COMMAND_GLASS_USAGE -> NUjc
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> mGRo
    java.lang.String COMMAND_CBLAME -> xXTS
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> JQoS
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> yJUV
    java.lang.String COMMAND_CBLAME_USAGE -> QEav
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> skHH
    java.lang.String COMMAND_ACTIONLOG -> ryEy
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> rNRQ
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> LFtK
    java.lang.String COMMAND_ACTIONLOG_USAGE -> VMBe
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> Xkyb
    java.lang.String COMMAND_CAPABILITIES -> PJpO
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> EueR
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> fSbc
    java.lang.String COMMAND_CAPABILITIES_USAGE -> QWHO
    java.lang.String MSG_PERMISSION -> NUmp
    java.lang.String MSG_MONITORING_STARTED -> jONJ
    java.lang.String MSG_MONITORING_STOPPED -> WqkI
    java.lang.String MSG_ACTIONLOGGING_STARTED -> QWHY
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> ktTL
    java.lang.String MSG_GLASS_STARTED -> ydKN
    java.lang.String MSG_GLASS_STOPPED -> ntlP
    org.bukkit.Color COLOR_HOPPER -> MAhU
    org.bukkit.Color COLOR_BLOCK_UPDATE -> GHgm
    org.bukkit.Color COLOR_BLOCK_FROMTO -> CgOq
    org.bukkit.Color COLOR_BLOCK_BURN -> kbqV
    org.bukkit.Color COLOR_BLOCK_DECAY -> RYhj
    org.bukkit.Color COLOR_BLOCK_FORM -> ETDf
    java.lang.String NAME_TICK -> uOLV
    java.lang.String NAME_MEMORY -> aCqm
    java.lang.String NAME_CHUNKS -> VLdJ
    java.lang.String NAME_ENTITIES -> Qxht
    java.lang.String STATE_MONITORING_TAB -> NgOi
    java.lang.String STATE_MONITORING_ENABLED -> iLIl
    java.lang.String STATE_MONITORING_HIGH -> PCBb
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> DisD
    java.lang.String STATE_MAPPING_ENABLED -> sYgN
    java.lang.String STATE_SOUND_PLAYS -> maHB
    java.lang.String STATE_MONITORING_POSTED -> pYNn
    java.lang.String STATE_MONITORING_LASTTAB -> haxM
    java.lang.String STATE_GLASSES_ENABLED -> Puey
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> qvHY
    java.lang.String STATE_PLAYER_HOTBAR -> PBdR
    java.lang.String STATE_PLAYER_SHIFT -> cuOh
    java.lang.String STATE_PLAYER_SCROLL -> MAkY
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> QgjU
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> oUoD
    java.lang.String PERM_ACCESS -> GILR
    java.lang.String PERM_MONITOR -> DjVY
    java.lang.String PERM_MONITOR_TITLE -> QMxK
    java.lang.String PERM_MONITOR_ACTIONLOG -> CEPC
    java.lang.String PERM_MONITOR_MAP -> TOQc
    java.lang.String PERM_MONITOR_ENVIRONMENT -> Ywqy
    java.lang.String PERM_MONITOR_GLASSES -> vARB
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> ksuO
    java.lang.String PERM_ACT -> vAQJ
    java.lang.String PERM_RAI -> RILJ
    java.lang.String PERM_RAI_CONTROL -> QyLv
    java.lang.String PERM_RAI_ACCESS -> CgSd
    java.lang.String PERM_RAI_MONITOR -> wCrg
    java.lang.String PERM_RELOAD -> oUnS
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> IXDO
    java.lang.String SAMPLER_REDSTONE_TICK -> bGYG
    java.lang.String SAMPLER_ENTITY_TIME -> NwtE
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> wMDv
    java.lang.String SAMPLER_TILE_TIME_LOCK -> bqkm
    java.lang.String SAMPLER_TILE_TIME -> gyKh
    java.lang.String SAMPLER_TILE_DROPTICK -> PvII
    java.lang.String SAMPLER_ENTITY_DROPTICK -> wUUN
    java.lang.String SAMPLER_REDSTONE_SECOND -> iByq
    java.lang.String SAMPLER_REDSTONE_TIME -> gMua
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> OXqj
    java.lang.String SAMPLER_HOPPER_TICK -> QgjB
    java.lang.String SAMPLER_HOPPER_SECOND -> maIn
    java.lang.String SAMPLER_HOPPER_TIME -> nBIn
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> tmnO
    java.lang.String SAMPLER_FLUID_TICK -> Edfw
    java.lang.String SAMPLER_FLUID_SECOND -> kstN
    java.lang.String SAMPLER_FLUID_TIME -> Fxkm
    java.lang.String SAMPLER_TPS -> QMwK
    java.lang.String SAMPLER_TICK -> ArOE
    java.lang.String SAMPLER_TIU -> JtWg
    java.lang.String SAMPLER_MEM -> Yfor
    java.lang.String SAMPLER_FREEMEM -> pQAN
    java.lang.String SAMPLER_MAXMEM -> dVNl
    java.lang.String SAMPLER_ALLOCMEM -> nAha
    java.lang.String SAMPLER_MAHS -> WaMl
    java.lang.String SAMPLER_CHK -> Thdt
    java.lang.String SAMPLER_ATASK -> cuRJ
    java.lang.String SAMPLER_STASK -> TOSY
    java.lang.String SAMPLER_CHK_TIME -> YMaO
    java.lang.String SAMPLER_EXPLOSION_TIME -> NMbK
    java.lang.String SAMPLER_CHKS -> ivcS
    java.lang.String SAMPLER_ENT -> QhMa
    java.lang.String SAMPLER_ENTLIV -> vQtQ
    java.lang.String SAMPLER_ENTDROP -> dDpK
    java.lang.String SAMPLER_ENTTILE -> dEQK
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> DriQ
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> cdPg
    java.lang.String ACTION_CULL_ENTITIES_NAME -> DHUg
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> wewj
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> wMHA
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> Hvdo
    java.lang.String ACTION_UPDATE_FLUID_NAME -> HmtH
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> fSfk
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> wLfY
    java.lang.String ACTION_LOCK_FLUID_STATUS -> rgjE
    java.lang.String ACTION_LOCK_FLUID_NAME -> TORX
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> cdOV
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> QEha
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> imqH
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> KMHo
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> gWIs
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> SLPD
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> oxSi
    java.lang.String ACTION_LOCK_HOPPER_NAME -> eGqO
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> RkOl
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> gMvq
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> wfXM
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> EJwF
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> xPIS
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> pXrV
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> vtVg
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> ntnq
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> MtrI
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> RIMR
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> OGsY
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> GsaN
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> OafL
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> lfYN
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> FEkl
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> QyPn
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> XdSP
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> eixC
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> pbHK
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> XSRB
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> GYqD
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> cSQJ
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> Yftj
    java.lang.String ACTION_FIX_LIGHTING_NAME -> MAoh
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> maOY
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> iTbS
    java.lang.String ACTION_COLLECT_GARBAGE -> MSSA
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> hjpQ
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> GQaI
    6:6:void <init>() -> <init>
    8:234:void <clinit>() -> <clinit>
react.Lang -> OrWU:
    java.lang.String BUNDLE_NAME -> FyRV
    java.util.ResourceBundle RESOURCE_BUNDLE -> AiaB
    java.util.ResourceBundle PRIMARY_BUNDLE -> kJFm
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> xFgk:
    react.React instance -> HTdM
    react.controller.SampleController sampleController -> VMLG
    react.controller.PlayerController playerController -> GcCa
    react.controller.MonitorController monitorController -> wMHf
    react.controller.CommandController commandController -> kbvu
    react.controller.ActionController actionController -> FWNA
    react.controller.FastDecayController fastDecayController -> fukU
    react.controller.EntityStackController entityStackController -> NUrx
    react.controller.GlassController glassController -> tLPW
    react.controller.EntityCullController entityCullController -> iUAp
    react.controller.SpikeController spikeController -> ymBA
    react.controller.SecurityController securityController -> XmCS
    react.controller.RedstoneController redstoneController -> WrOx
    react.controller.HopperController hopperController -> vAUE
    react.controller.PhysicsController physicsController -> jqVk
    react.controller.TickTimeController tickTimeController -> dgTQ
    react.controller.RAIController raiController -> kRVT
    react.controller.FluidController fluidController -> PeKg
    react.controller.ChunkController chunkController -> qTGe
    react.controller.GraphController graphController -> gWLB
    react.controller.ChronophyFluidController fluidChronophyController -> ntpr
    react.controller.EventController eventController -> Wqoi
    react.controller.BlockInjectController blockInjectController -> Gsbu
    react.controller.SmearTickController smearTickController -> psGo
    react.controller.FeatureController featureController -> dohL
    react.controller.HopperOvertickController hopperPlungeController -> XBQp
    react.controller.BenchmarkController benchmarkController -> RkTa
    react.controller.LanguageController languageController -> EvQB
    react.controller.RemoteController remoteController -> Oaiw
    react.controller.ExplosiveController explosiveController -> RkUK
    react.controller.WorldController worldController -> NpIv
    44:44:void <init>() -> <init>
    142:150:void enable() -> enable
    156:156:void disable() -> disable
react.React$1 -> xFgk$1:
    react.React this$0 -> Iykd
    1:142:void <init>(react.React) -> <init>
    147:148:void run() -> run
react.action.ActionCollectGarbage -> rUxE:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
react.action.ActionCollectGarbage$1 -> rUxE$1:
    react.action.source.IActionSource val$source -> iKrj
    react.action.ActionCollectGarbage this$0 -> qvOI
    30:30:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> rUxE$1$1:
    long val$mbnex -> WYBB
    long val$mbmem -> wLkR
    react.action.ActionCollectGarbage$1 this$1 -> kQyM
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> eGah:
    long ms -> tCbM
    int lcd -> pQHH
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> Btan
    27:27:void access$0(react.action.ActionCullEntities,long) -> Btan
    28:28:int access$1(react.action.ActionCullEntities) -> Btan
    27:27:long access$2(react.action.ActionCullEntities) -> QDwh
react.action.ActionCullEntities$1 -> eGah$1:
    react.action.ActionCullEntities this$0 -> MdVP
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> IVsP
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> eGah$2:
    react.action.ActionCullEntities this$0 -> MdVP
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> IVsP
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> eGah$3:
    react.action.ActionCullEntities this$0 -> MdVP
    react.glang.FinalInteger val$completed -> oNDj
    react.glang.FinalInteger val$total -> nlco
    react.glang.FinalInteger val$totalCulled -> uhhA
    react.glang.FinalInteger val$totalChunked -> yuSy
    react.action.source.IActionSource val$source -> iKrj
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> eGah$4:
    react.action.ActionCullEntities this$0 -> MdVP
    react.action.source.IActionSource val$source -> iKrj
    react.glang.FinalInteger val$totalCulled -> uhhA
    react.glang.FinalInteger val$totalChunked -> yuSy
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> QDxG:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
react.action.ActionFixLighting$1 -> QDxG$1:
    react.action.ActionFixLighting this$0 -> BSTE
    29:29:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> IVsP
    29:29:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> QDxG$2:
    react.action.source.IActionSource val$source -> iKrj
    int val$ch -> gxpm
    react.action.ActionFixLighting this$0 -> BSTE
    78:78:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> Btan
    78:78:void run(java.lang.Object) -> Btan
react.action.ActionFixLighting$3 -> QDxG$3:
    react.action.ActionFixLighting this$0 -> BSTE
    89:89:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> Btan
    89:89:void run(java.lang.Object) -> Btan
react.action.ActionLockFluid -> vHrQ:
    int lcd -> pQHH
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
react.action.ActionLockFluid$1 -> vHrQ$1:
    react.action.ActionLockFluid this$0 -> rgoD
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> IVsP
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> vHrQ$2:
    react.action.ActionLockFluid this$0 -> rgoD
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> IVsP
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> IVsP:
    int lcd -> pQHH
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
react.action.ActionLockHopper$1 -> IVsP$1:
    react.action.ActionLockHopper this$0 -> uNsp
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> IVsP
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> IVsP$2:
    react.action.ActionLockHopper this$0 -> uNsp
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> IVsP
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> YfbV:
    int lcd -> pQHH
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
react.action.ActionLockRedstone$1 -> YfbV$1:
    react.action.ActionLockRedstone this$0 -> cldJ
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> IVsP
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> YfbV$2:
    react.action.ActionLockRedstone this$0 -> cldJ
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> IVsP
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> SvRw:
    long ms -> tCbM
    int lcd -> pQHH
    boolean fail -> tnTm
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> QDwh
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> Btan
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> Btan
    23:23:int access$200(react.action.ActionPurgeChunks) -> QDwh
    23:23:long access$100(react.action.ActionPurgeChunks) -> CgEC
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> Btan
react.action.ActionPurgeChunks$1 -> SvRw$1:
    react.action.ActionPurgeChunks this$0 -> opGY
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> IVsP
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> SvRw$2:
    int val$dk -> ggoF
    java.lang.Object val$j -> Aicq
    react.glang.FinalInteger val$acompleted -> nuUH
    react.glang.FinalInteger val$completed -> oNDj
    react.glang.FinalInteger val$total -> nlco
    react.glang.FinalInteger val$totalCulled -> uhhA
    react.glang.FinalInteger val$totalChunked -> yuSy
    react.action.source.IActionSource val$source -> iKrj
    react.api.ISelector[] val$selectors -> Blfo
    react.action.ActionPurgeChunks this$0 -> opGY
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> SvRw$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> fJxU
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> SvRw$3:
    react.action.source.IActionSource val$source -> iKrj
    react.glang.FinalInteger val$acompleted -> nuUH
    react.action.ActionPurgeChunks this$0 -> opGY
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> SvRw$4:
    org.bukkit.Chunk val$chunk -> ivfW
    java.lang.Runnable val$cb -> DsMM
    react.action.ActionPurgeChunks this$0 -> opGY
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> RsQG:
    long ms -> tCbM
    int lcd -> pQHH
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> QDwh
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> Btan
    27:27:int access$100(react.action.ActionPurgeEntities) -> Btan
    27:27:long access$000(react.action.ActionPurgeEntities) -> QDwh
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> Btan
react.action.ActionPurgeEntities$1 -> RsQG$1:
    react.action.ActionPurgeEntities this$0 -> XKBi
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> IVsP
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> RsQG$2:
    react.action.ActionPurgeEntities this$0 -> XKBi
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> IVsP
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> RsQG$3:
    react.glang.FinalInteger val$completed -> oNDj
    react.glang.FinalInteger val$total -> nlco
    react.glang.FinalInteger val$totalCulled -> uhhA
    react.glang.FinalInteger val$totalChunked -> yuSy
    react.action.source.IActionSource val$source -> iKrj
    react.action.ActionPurgeEntities this$0 -> XKBi
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> RsQG$4:
    react.action.source.IActionSource val$source -> iKrj
    react.glang.FinalInteger val$totalCulled -> uhhA
    react.glang.FinalInteger val$totalChunked -> yuSy
    react.action.ActionPurgeEntities this$0 -> XKBi
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> RsQG$5:
    org.bukkit.entity.Entity val$i -> XRqs
    react.glang.FinalInteger val$cu -> pHVJ
    int val$k -> VxAP
    org.bukkit.Chunk val$chunk -> ivfW
    java.lang.Runnable val$cb -> DsMM
    react.action.ActionPurgeEntities this$0 -> XKBi
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> xhkE:
    int lcd -> pQHH
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
react.action.ActionUnlockFluid$1 -> xhkE$1:
    react.action.ActionUnlockFluid this$0 -> pbID
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> IVsP
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> pHBK:
    int lcd -> pQHH
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
react.action.ActionUnlockHopper$1 -> pHBK$1:
    react.action.ActionUnlockHopper this$0 -> cJaJ
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> IVsP
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> EAvS:
    int lcd -> pQHH
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
react.action.ActionUnlockRedstone$1 -> EAvS$1:
    react.action.ActionUnlockRedstone this$0 -> kAYs
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> IVsP
    1:1:java.lang.Object get() -> get
react.action.source.AccessActionSource -> xGIH:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> Btan
    26:33:void sendResponseSuccess(java.lang.String) -> QDwh
    38:45:void sendResponseError(java.lang.String) -> CgEC
    50:57:void sendResponseActing(java.lang.String) -> OrWU
react.action.source.ActionHandle -> amyd:
    react.action.source.ActionHandle AUTOMATIC -> dDua
    react.action.source.ActionHandle MANUAL -> RjvB
    react.action.source.ActionHandle MUTEX -> vAYc
    react.action.source.ActionHandle[] $VALUES -> ObLy
    3:3:react.action.source.ActionHandle[] values() -> values
    3:3:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.action.source.ConsoleActionSource -> OrWl:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> Btan
    18:19:void sendResponseSuccess(java.lang.String) -> QDwh
    24:25:void sendResponseError(java.lang.String) -> CgEC
    30:31:void sendResponseActing(java.lang.String) -> OrWU
react.action.source.IActionSource -> ivPs:
    void sendResponse(java.lang.String) -> Btan
    void sendResponseSuccess(java.lang.String) -> QDwh
    void sendResponseError(java.lang.String) -> CgEC
    void sendResponseActing(java.lang.String) -> OrWU
react.action.source.PlayerActionSource -> VLVl:
    org.bukkit.entity.Player p -> dUwQ
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> Btan
    30:31:void sendResponseSuccess(java.lang.String) -> QDwh
    36:37:void sendResponseError(java.lang.String) -> CgEC
    42:43:void sendResponseActing(java.lang.String) -> OrWU
react.action.source.RAIActionSource -> NgBv:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> Btan
    16:17:void sendResponseSuccess(java.lang.String) -> QDwh
    22:23:void sendResponseError(java.lang.String) -> CgEC
    28:29:void sendResponseActing(java.lang.String) -> OrWU
react.api.Action -> IWRl:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> hkVI
    java.lang.String[] nodes -> tCdG
    react.action.source.ActionHandle handle -> yuWM
    react.api.ActionState state -> Mcvn
    react.api.ActionTargetType target -> XuXb
    react.api.ActionType type -> xYBY
    react.action.source.IActionSource currentSource -> kQys
    double progress -> yRrc
    react.glang.GMap defaultSelectors -> GREl
    28:29:void <init>(react.api.ActionType) -> <init>
    32:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> Btan
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> Btan
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> YfbV
    94:94:react.api.ActionState getState() -> SvRw
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> xFgk
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> RsQG
    130:130:react.api.ActionType getType() -> xhkE
    136:136:react.glang.GMap getDefaultSelectors() -> pHBK
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> QDwh
    189:190:void completeAction() -> EAvS
    195:195:react.action.source.IActionSource getCurrentSource() -> xGIH
    201:201:java.lang.String[] getNodes() -> amyd
    207:208:void setNodes(java.lang.String[]) -> Btan
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
react.api.ActionAlreadyRunningException -> Grnk:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> Txsq:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> uWPk:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> Rrmv:
    react.api.ActionState IDLE -> Wqtt
    react.api.ActionState RUNNING -> pQJK
    react.api.ActionState[] $VALUES -> eQKX
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> SnBP:
    react.api.ActionTargetType POSITIONAL -> QNaU
    react.api.ActionTargetType SYSTEM -> ytui
    react.api.ActionTargetType[] $VALUES -> hQba
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> STPF:
    react.api.ActionType FIX_LIGHTING -> FEqL
    react.api.ActionType UNLOCK_FLUID -> ooiQ
    react.api.ActionType LOCK_FLUID -> hYsP
    react.api.ActionType UNLOCK_HOPPER -> IXKy
    react.api.ActionType LOCK_HOPPER -> cSTR
    react.api.ActionType UNLOCK_REDSTONE -> HKtt
    react.api.ActionType LOCK_REDSTONE -> erlL
    react.api.ActionType CULL_ENTITIES -> eaiw
    react.api.ActionType COLLECT_GARBAGE -> BKGW
    react.api.ActionType PURGE_ENTITIES -> HwKA
    react.api.ActionType PURGE_CHUNKS -> XKDR
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> yuWM
    react.api.ActionTargetType target -> XuXb
    react.api.ActionType[] $VALUES -> Rses
    6:6:react.api.ActionType[] values() -> values
    6:6:react.api.ActionType valueOf(java.lang.String) -> valueOf
    26:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> OrWl
    50:50:react.api.ActionTargetType getTarget() -> RsQG
    6:18:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> qmGO:
    react.api.ActivationRangeType ANIMALS -> YNFt
    react.api.ActivationRangeType MONSTERS -> RYsX
    react.api.ActivationRangeType MISC -> ifHE
    react.api.ActivationRangeType[] $VALUES -> aMNH
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> gDvV:
    int value() -> value
react.api.Async -> XuBC:
react.api.CPUBenchmark -> CEBE:
    org.bukkit.command.CommandSender sender -> sender
    int score -> LOpu
    java.lang.Runnable onFinish -> CpKi
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> ivPs
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> Btan
    10:10:int access$100(react.api.CPUBenchmark) -> QDwh
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> CgEC
react.api.CPUBenchmark$1 -> CEBE$1:
    react.api.CPUBenchmark this$0 -> anoc
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> CEBE$2:
    react.api.CPUBenchmark this$0 -> anoc
    78:78:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> fBSk:
    react.api.CPUResult ULTRA_SLOW -> sHos
    react.api.CPUResult VERY_SLOW -> uhho
    react.api.CPUResult SLOW -> LYCc
    react.api.CPUResult AVERAGE -> BtyW
    react.api.CPUResult GOOD -> Gjuc
    react.api.CPUResult FAST -> BliN
    react.api.CPUResult VERY_FAST -> gqAx
    react.api.CPUResult ULTRA_FAST -> oUuO
    java.lang.String m -> Kwbf
    react.api.CPUResult[] $VALUES -> QqCu
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> Btan
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> OqvM:
    react.glang.GMap cache -> HvjP
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> QDwh
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> CgEC
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> VLVl
    54:54:boolean has(java.lang.Object) -> OrWU
react.api.Capability -> MlQK:
    react.api.Capability DUAL_WEILD -> ofvh
    react.api.Capability SCOREBOARD -> XAsA
    react.api.Capability SCOREBOARD_ADVANCED -> ytwt
    react.api.Capability HOPPER -> WrWe
    react.api.Capability ENTITY_ATTRIBUTES -> hRFP
    react.api.Capability ENTITY_AI -> WYEo
    react.api.Capability ACTION_BAR -> ycvj
    react.api.Capability ENTITY_NAMES -> PvTN
    react.api.Capability TITLE_BAR -> ifJf
    react.api.Capability CHUNK_RELIGHTING -> ktaW
    react.api.Capability MONITOR_SUBMISSIVENESS -> NNJs
    react.api.Capability ACCELERATED_PING -> GHuc
    react.api.Capability ENTITY_THROTTLING -> nSUs
    react.api.Capability TILE_THROTTLING -> HLYf
    react.api.Capability PASSENGERS -> RbhN
    react.glang.GList capabilities -> LXek
    react.surge.util.Protocol version -> VoTu
    react.api.Flavor flavor -> tUHK
    java.lang.String plugin -> xquG
    java.lang.String name -> name
    56:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> NgBv
    100:100:boolean isFlavorCapable() -> IWRl
    105:105:boolean isVersionCapable() -> Grnk
    110:110:boolean isCapable() -> Txsq
    115:115:react.surge.util.Protocol getVersion() -> uWPk
    120:120:react.api.Flavor getFlavor() -> Rrmv
    125:125:java.lang.String getPlugin() -> SnBP
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> Btan
    153:167:void sendNotCapable(react.action.source.IActionSource) -> Btan
    14:48:void <clinit>() -> <clinit>
react.api.CapabilityBasis -> kbcy:
    react.api.CapabilityBasis VERSION -> YDxk
    react.api.CapabilityBasis FLAVOR -> bXdc
    react.api.CapabilityBasis PLUGIN -> PTQi
    react.api.CapabilityBasis[] $VALUES -> pGyp
    3:3:react.api.CapabilityBasis[] values() -> values
    3:3:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ChunkIssue -> HTSJ:
    react.api.ChunkIssue ENTITY -> Jtbp
    react.api.ChunkIssue HOPPER -> pamE
    react.api.ChunkIssue TNT -> YNJi
    react.api.ChunkIssue REDSTONE -> Kwew
    react.api.ChunkIssue FLUID -> mHCT
    react.api.ChunkIssue PHYSICS -> dEXh
    react.api.ChunkIssue[] ENUM$VALUES -> FyWD
    3:10:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
react.api.Clip -> YUcV:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> tnDI:
    org.bukkit.command.CommandSender sender -> sender
    13:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> Btan
    31:32:void sendResponseSuccess(java.lang.String) -> QDwh
    37:38:void sendResponseError(java.lang.String) -> CgEC
    43:44:void sendResponseActing(java.lang.String) -> OrWU
react.api.CullList -> kHuP:
    react.glang.GSet toCull -> xOpm
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> OrWU
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> STPF
react.api.DTest -> ydAI:
    6:6:void <init>() -> <init>
    11:62:int test() -> qmGO
react.api.EntityFlag -> qJfe:
    react.api.EntityFlag NAMED -> IXMD
    react.api.EntityFlag TAMED -> UJLx
    react.api.EntityFlag STACKED -> jNxk
    react.api.EntityFlag RIDDEN -> mPRn
    react.api.EntityFlag LEASHED -> UuAy
    java.lang.String m -> Kwbf
    react.api.EntityFlag[] $VALUES -> GHuD
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> xFgk
    40:70:boolean is(org.bukkit.entity.Entity) -> rUxE
    76:76:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> rpMj:
    react.glang.GSet entityTypes -> kJKo
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> gDvV
react.api.EntitySample -> nIlt:
    react.glang.GMap counts -> QOBx
    react.glang.GMap sets -> XJfO
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> XuBC
    45:45:react.glang.GList getTypes() -> CEBE
    50:57:int total() -> fBSk
    62:67:int get(org.bukkit.entity.EntityType) -> Btan
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> QDwh
    84:96:void add(org.bukkit.entity.Entity) -> OrWU
react.api.Experimental -> PmMF:
react.api.Flavor -> rNIq:
    react.api.Flavor ANY -> tLUc
    react.api.Flavor SAFE_MODE -> Fgte
    react.api.Flavor CRAFT_BUKKIT -> BBXC
    react.api.Flavor BUKKIT -> aVBF
    react.api.Flavor SPIGOT -> QhTp
    react.api.Flavor SOGGY_SPIGOT -> tLUj
    react.api.Flavor PAPER_SPIGOT -> yctm
    react.api.Flavor TACO_SPIGOT -> HwPC
    react.api.Flavor TORCH_SPIGOT -> yJgO
    react.api.Flavor FORGE_HACK -> yRvw
    react.api.Flavor SPONGE_HACK -> PvUt
    react.api.Flavor[] $VALUES -> GYyK
    6:6:react.api.Flavor[] values() -> values
    6:6:react.api.Flavor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> OqvM
    74:79:boolean compatableWith(react.api.Flavor) -> Btan
    84:84:java.lang.String fancyName() -> MlQK
    6:18:void <clinit>() -> <clinit>
react.api.IAction -> jhTy:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> YfbV
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> QDwh
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Btan
    react.api.ActionState getState() -> SvRw
    react.api.ActionTargetType getTarget() -> RsQG
    void setNodes(java.lang.String[]) -> Btan
    java.lang.String[] getNodes() -> amyd
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> xFgk
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> xhkE
    react.glang.GMap getDefaultSelectors() -> pHBK
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> Btan
    react.api.ISelector[] biselect(react.api.ISelector[]) -> Btan
    react.action.source.IActionSource getCurrentSource() -> xGIH
    void completeAction() -> EAvS
react.api.ICache -> EJiV:
    react.glang.GSet get(java.lang.Object) -> QDwh
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> CgEC
    void clear() -> clear
    boolean has(java.lang.Object) -> OrWU
    react.glang.GList k() -> VLVl
react.api.ICommand -> uxuV:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> kbcy
    java.lang.String[] getPermissions() -> HTSJ
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> rUxE
    react.api.SideGate getSideGate() -> YUcV
    void registerParameterDescription(java.lang.String,java.lang.String) -> Btan
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
react.api.IRecord -> eaVu:
    java.lang.String getRecordType() -> tnDI
    long getRecordTime() -> kHuP
    react.json.JSONObject toJSON() -> ydAI
    java.lang.Object getRecordObject() -> qJfe
    void fromJSON(react.json.JSONObject) -> Btan
react.api.IRecordBook -> rokn:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> Btan
    long getOldestRecordTime() -> rpMj
    void addRecord(react.api.IRecord) -> Btan
    long getLatestRecordTime() -> nIlt
    int countRecords(long,long) -> Btan
    react.glang.GMap getRecords(long,long) -> QDwh
    int purgeRecordsBefore(long) -> QDwh
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> aTip:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> PmMF
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> rNIq
    react.surge.util.C getAltColor() -> jhTy
    void setColor(react.surge.util.C,react.surge.util.C) -> Btan
    int getInterval() -> getInterval
    void setInterval(int) -> QDwh
    void sample() -> EJiV
    java.lang.String get() -> get
    void construct() -> uxuV
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> NLrq:
    react.api.SelectionMode getMode() -> eaVu
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> xFgk
    react.glang.GSet getList() -> rokn
    react.glang.GSet getPossibilities() -> aTip
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> rUxE
    java.lang.String getName() -> getName
react.api.Injection -> XkrO:
    react.api.InjectionMethod value() -> NLrq
react.api.InjectionMethod -> PJhj:
    react.api.InjectionMethod SWAP -> woTl
    react.api.InjectionMethod SUBSTRATE -> JSBd
    react.api.InjectionMethod RELOAD -> OjbU
    react.api.InjectionMethod[] $VALUES -> ssif
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> QooM:
    java.lang.String value() -> value
react.api.MSampler -> oVCD:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> XkrO
react.api.MonitorHeading -> kIVD:
    react.api.ISampler head -> ggvT
    react.glang.GList children -> UuEK
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> Btan
    27:27:react.api.ISampler getHead() -> PJhj
    32:33:void setHead(react.api.ISampler) -> QDwh
    37:37:react.glang.GList getChildren() -> QooM
    42:42:java.lang.String getHeadText() -> oVCD
    47:60:java.lang.String getChildText() -> kIVD
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> Btan
react.api.NoiseGenerator -> ofbu:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> OqyR:
    react.api.NoiseGenerator[] octaves -> mPTt
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> ofbu
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> OqwY:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> nAuc
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> OqyR
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> NVCa:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> Btan
react.api.Permissable -> uEoq:
    react.api.Permissable ACCESS -> FWWX
    react.api.Permissable MONITOR -> IGNa
    react.api.Permissable MONITOR_TITLE -> IiQl
    react.api.Permissable MONITOR_ACTIONLOG -> cJgw
    react.api.Permissable MONITOR_MAP -> aVEB
    react.api.Permissable MONITOR_ENVIRONMENT -> SvmM
    react.api.Permissable MONITOR_GLASSES -> Vwes
    react.api.Permissable MONITOR_CHUNK_BLAME -> SelF
    react.api.Permissable RAI_MONITOR -> cKHC
    react.api.Permissable RAI_CONTROL -> psPf
    react.api.Permissable RAI_ACCESS -> tejR
    react.api.Permissable RAI -> RtKQ
    react.api.Permissable ACT -> proQ
    react.api.Permissable RELOAD -> KVEK
    java.lang.String node -> UcbR
    react.api.Permissable[] $VALUES -> PdsQ
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    27:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> Btan
    46:46:java.lang.String getNode() -> OqwY
    7:22:void <clinit>() -> <clinit>
react.api.PluginSelfDeleter -> kjwO:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> hYuk
    java.lang.Runnable r -> bXfE
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> Btan
react.api.ReactCommand -> xGJL:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> uXLX
    java.lang.String usage -> xidt
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> sIUH
    react.api.SideGate sideGate -> IaAH
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> rUxE
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> Btan
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> kbcy
    47:47:java.lang.String[] getPermissions() -> HTSJ
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> YUcV
react.api.ReactException -> KTid:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> BRah:
    react.glang.GMap keystore -> xqvC
    boolean monitoring -> monitoring
    boolean highMonitor -> jXLm
    boolean actionlogging -> Lijr
    boolean glasses -> GAIq
    boolean mapping -> jXOw
    int monitorSelection -> GtNk
    int plays -> IrEG
    boolean monitorPosted -> RQjU
    int monitorLastSelection -> QhYl
    int switchNotification -> TXQU
    int hotbarSlot -> uhpV
    boolean shift -> CpSW
    int scroll -> STnC
    double lastHeight -> XAyj
    boolean heightMovement -> tDKA
    org.bukkit.entity.Player p -> dUwQ
    24:40:void <clinit>() -> <clinit>
    43:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> NVCa
    128:128:boolean isMapping() -> uEoq
    133:133:org.bukkit.entity.Player getP() -> kjwO
    138:140:void setMonitoring(boolean) -> QDwh
    144:146:void setMapping(boolean) -> CgEC
    150:150:int getMonitorSelection() -> xGJL
    155:157:void setMonitorSelection(int) -> CgEC
    161:161:int getHotbarSlot() -> KTid
    166:168:void setHotbarSlot(int) -> OrWU
    172:172:boolean isShifting() -> BRah
    177:179:void setShifting(boolean) -> OrWU
    183:183:boolean isShift() -> TqFt
    188:190:void setShift(boolean) -> xFgk
    194:194:int getScroll() -> SBng
    199:201:void setScroll(int) -> xFgk
    205:205:int getMonitorLastSelection() -> JHuc
    210:212:void setMonitorLastSelection(int) -> rUxE
    216:217:void setP(org.bukkit.entity.Player) -> QDwh
    221:221:double getLastHeight() -> HSpw
    226:228:void setLastHeight(double) -> Btan
    232:232:boolean isHeightMovement() -> mFho
    237:239:void setHeightMovement(boolean) -> rUxE
    243:243:int getSwitchNotification() -> MuDN
    248:250:void setSwitchNotification(int) -> eGah
    254:254:boolean getMonitorPosted() -> fRvb
    259:261:void setMonitorPosted(boolean) -> eGah
    265:265:int getPlays() -> xGJG
    270:272:void setPlays(int) -> QDxG
    276:276:boolean isGlasses() -> vjvN
    281:283:void setGlasses(boolean) -> QDxG
    287:287:boolean isActionlogging() -> tTNx
    292:294:void setActionlogging(boolean) -> vHrQ
react.api.Record -> TqFt:
    java.lang.String recordType -> Gsmx
    long recordTime -> DYcd
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> tnDI
    32:32:long getRecordTime() -> kHuP
    38:38:java.lang.Object getRecordObject() -> qJfe
    react.json.JSONObject toJSON() -> ydAI
    void fromJSON(react.json.JSONObject) -> Btan
react.api.RecordBook -> SBng:
    java.io.File recordFile -> EvYb
    react.json.JSONObject js -> wnvK
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> Btan
    79:87:react.api.IRecord getRecord(long) -> Btan
    react.api.IRecord createDummyRecord(long,java.lang.String) -> Btan
    95:107:long getOldestRecordTime() -> rpMj
    113:125:long getLatestRecordTime() -> nIlt
    130:130:boolean within(long,long,long) -> Btan
    136:144:int countRecords(long,long) -> Btan
    150:162:react.glang.GMap getRecords(long,long) -> QDwh
    168:181:int purgeRecordsBefore(long) -> QDwh
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> JHuc:
react.api.SampledChunk -> HSpw:
    org.bukkit.Chunk c -> MmPH
    react.glang.GMap counts -> QOBx
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> XBBA
    26:38:void hit(react.api.ChunkIssue,int) -> Btan
    42:42:org.bukkit.Chunk getC() -> eYHb
    47:47:react.glang.GMap getCounts() -> YLtN
react.api.SampledType -> mFho:
    react.api.SampledType ENTITY_TIME_LOCK -> ebSI
    react.api.SampledType TILE_TIME_LOCK -> ktdj
    react.api.SampledType ENTITY_TIME -> KLtV
    react.api.SampledType TILE_TIME -> SCkA
    react.api.SampledType ENTITY_DROPTICK -> cKJO
    react.api.SampledType TILE_DROPTICK -> anuv
    react.api.SampledType REDSTONE_TICK_USAGE -> LYJA
    react.api.SampledType REDSTONE_TICK -> DHaD
    react.api.SampledType REDSTONE_SECOND -> eQPK
    react.api.SampledType REDSTONE_TIME -> wgEt
    react.api.SampledType HOPPER_TICK_USAGE -> QEuM
    react.api.SampledType HOPPER_TICK -> YNMX
    react.api.SampledType HOPPER_SECOND -> kdCc
    react.api.SampledType HOPPER_TIME -> yAvb
    react.api.SampledType FLUID_TICK_USAGE -> awgT
    react.api.SampledType FLUID_TICK -> EnGl
    react.api.SampledType FLUID_SECOND -> NxbL
    react.api.SampledType FLUID_TIME -> NyBm
    react.api.SampledType TPS -> HfPI
    react.api.SampledType TICK -> jyph
    react.api.SampledType TIU -> HwQV
    react.api.SampledType MEM -> fnFE
    react.api.SampledType FREEMEM -> Emft
    react.api.SampledType MAXMEM -> pkBS
    react.api.SampledType ALLOCMEM -> RQjH
    react.api.SampledType MAHS -> jXNm
    react.api.SampledType CHK_TIME -> UBAn
    react.api.SampledType EXPLOSION_TIME -> stOB
    react.api.SampledType CHK -> ivqX
    react.api.SampledType ATASK -> eruQ
    react.api.SampledType STASK -> fLFI
    react.api.SampledType CHKS -> xijw
    react.api.SampledType ENT -> UdFw
    react.api.SampledType ENTLIV -> rNhJ
    react.api.SampledType ENTDROP -> Tqdq
    react.api.SampledType ENTTILE -> KMXi
    java.lang.String node -> UcbR
    react.api.SampledType[] ENUM$VALUES -> JkxI
    6:43:void <clinit>() -> <clinit>
    49:49:react.api.ISampler get() -> jgwQ
    55:55:java.lang.String toString() -> toString
    58:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> OqwY
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> MuDN:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> WjMr
    react.surge.util.C altColor -> DavL
    int interval -> mjLO
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> rNIq
    49:49:react.surge.util.C getAltColor() -> jhTy
    55:55:int getInterval() -> getInterval
    void sample() -> EJiV
    void construct() -> uxuV
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> Btan
    107:108:void setInterval(int) -> QDwh
react.api.Sector -> fRvb:
    int value() -> value
react.api.SelectionException -> xGJG:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> vjvN:
    react.api.SelectionMode WHITELIST -> IObr
    react.api.SelectionMode BLACKLIST -> DbWN
    react.api.SelectionMode[] $VALUES -> rpin
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> tTNx:
    java.lang.Class objectType -> KDhC
    react.api.SelectionMode mode -> MvCW
    react.glang.GSet list -> hsmm
    react.glang.GSet possibilities -> fLFU
    int popoff -> jqcf
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> eaVu
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> xFgk
    43:43:react.glang.GSet getList() -> rokn
    49:49:react.glang.GSet getPossibilities() -> aTip
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> rUxE
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> eGah
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> XBBA:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> CgEC
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> rUxE
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> QDxG
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> eYHb:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> YLtN:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> CgEC
    29:30:void add(org.bukkit.Chunk,int) -> Btan
    34:38:void add(org.bukkit.World) -> QDxG
    42:46:void addAll() -> yuDX
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> rUxE
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> QDxG
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> jgwQ:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> rUxE
    87:87:java.lang.String getName() -> getName
react.api.Side -> yuDX:
    react.api.Side PLAYERS -> woYL
    react.api.Side CONSOLE -> sAJD
    java.lang.String ss -> CWBP
    react.api.Side[] $VALUES -> esUx
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> YVEi
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> QDwh
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> YVEi:
    react.api.SideGate PLAYERS_ONLY -> jqdL
    react.api.SideGate CONSOLES_ONLY -> QOJe
    react.api.SideGate ANYTHING -> NhBn
    react.api.SideGate[] $VALUES -> ELFe
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> Btan
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> YVEi$1:
    int[] $SwitchMap$react$api$SideGate -> Tqcu
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> HLEI:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> ioAU
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> HLEI
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> hbRT:
    double wScale -> oMmg
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> Btan
react.api.SpecializedTickLimiter -> Hduh:
    double rMaxTime -> hbkl
    long rStartTime -> FqLn
    double rLastTime -> Jkvc
    long rMark -> wLsw
    double tMaxTime -> GALC
    react.gmath.Average atimes -> rqIn
    react.gmath.Average adropped -> uiQd
    int droppedTicks -> qKbo
    boolean entityTick -> AXkx
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> Dijr:
    react.glang.GList sources -> tfNi
    react.glang.GList splooge -> UJTW
    react.glang.GSet destroy -> ccdb
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> Btan
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> QDwh
    void clipped(org.bukkit.Location) -> QDwh
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> CgEC
    boolean isAllowedSource(org.bukkit.Location) -> OrWU
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> Btan
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> QDwh
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> CgEC
react.api.SploogeCounter$1 -> Dijr$1:
    java.util.Iterator val$it -> xHKR
    org.bukkit.Location val$start -> cmQq
    int val$maxDistance -> jhuL
    react.api.SploogeCounter this$0 -> pYeL
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> Dijr$1$1:
    react.api.SploogeCounter$1 this$1 -> JdIy
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> inGA:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> miQQ:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> ydAI
    38:49:void fromJSON(react.json.JSONObject) -> Btan
react.api.StackTraceRecordBook -> PlnH:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> QDwh
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> Btan
react.api.StackedEntity -> uhVe:
    org.bukkit.entity.LivingEntity entity -> ekHG
    int count -> count
    double rmx -> cvCU
    21:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> Btan
    46:46:int getAbsoluteMaxCount() -> hbRT
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> QDwh
    56:58:void update() -> update
    62:68:void signalSize() -> Hduh
    72:123:void updateHealth() -> Dijr
    127:128:void heal(double) -> QDwh
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> inGA
    142:142:int getEffectiveCount(double) -> CgEC
    147:147:double getEffectiveMaxHealth(int) -> vHrQ
    152:152:double getRealMaxHealth() -> miQQ
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> Btan
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> oUdD:
    react.glang.GList headings -> eIEC
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> Btan
    24:24:int getMaxSelection() -> PlnH
    29:37:int left(int) -> IVsP
    42:50:int right(int) -> YfbV
    55:55:react.api.MonitorHeading getHeadFor(int) -> SvRw
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> Btan
    83:100:java.lang.String getHotbarFor(int,boolean) -> Btan
react.api.Unused -> UIYU:
react.api.WorldConfig -> vIWR:
    boolean allowRai -> vIsx
    boolean allowActions -> sQmI
    boolean allowRelighting -> aEIb
    boolean allowTileThrottling -> WXnH
    boolean allowEntityThrottling -> iCnX
    boolean allowFastLeafDecay -> HCpi
    java.util.List assumeNoSideEffectsEntities -> rpko
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> vHrQ
    48:62:void save(org.bukkit.World) -> IVsP
    66:80:void load(org.bukkit.World) -> YfbV
react.binject.BlockInjector -> cRag:
    react.surge.util.Protocol protocol -> rqLv
    java.lang.Class blocksClass -> MeDD
    13:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> Btan
    29:56:void inject() -> uhVe
    61:61:react.surge.util.Protocol getVersion() -> uWPk
react.binject.IBlockInjector -> aUMI:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> Btan
    void add(int,java.lang.String,java.lang.Object) -> Btan
    java.lang.Object get(java.lang.String) -> get
    void inject() -> uhVe
    react.surge.util.Protocol getVersion() -> uWPk
react.binject.InjectedBlock -> KfOq:
    react.surge.util.Protocol getInjectProtocol() -> oUdD
    java.lang.String getInjectKey() -> UIYU
    java.lang.String getInjectCKey() -> vIWR
    int getInjectId() -> cRag
react.binject.ReflectionUtil -> SmgF:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> Btan
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> Btan
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> Btan
    41:54:void setAccessible(java.lang.reflect.Field) -> Btan
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> Btan
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> Btan
react.binject.V10.BlockInjector10 -> Ahpj:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> eGah
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> Btan
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> Btan
react.binject.V11.BlockInjector11 -> XdDn:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> QDxG
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> Btan
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> Btan
react.binject.V12.BlockInjector12 -> LiPy:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> vHrQ
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> Btan
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> Btan
react.binject.V8.BlockInjector8 -> CEFa:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> IVsP
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> Btan
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> Btan
react.binject.V9.BlockInjector9 -> DPWn:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> YfbV
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> Btan
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> Btan
react.cache.CachedEntity -> Smdn:
    java.util.UUID uid -> qdxN
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> qdwo
    double x -> x
    double y -> y
    double z -> z
    double vx -> jPCk
    double vy -> OYfC
    double vz -> SfSE
    double dx -> QNiq
    double dy -> VwlY
    double dz -> jPCX
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> eGah
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> aUMI
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> KfOq
    120:121:void setVx(double) -> OrWU
    125:125:double getVy() -> SmgF
    130:131:void setVy(double) -> xFgk
    135:135:double getVz() -> Ahpj
    140:141:void setVz(double) -> rUxE
    145:145:double getDx() -> XdDn
    150:151:void setDx(double) -> eGah
    155:155:double getDy() -> LiPy
    160:161:void setDy(double) -> QDxG
    165:165:double getDz() -> CEFa
    170:171:void setDz(double) -> vHrQ
    175:175:java.util.UUID getUid() -> DPWn
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> iTRY:
    int age -> BCAU
    boolean ageLock -> vRdb
    boolean breed -> IGSd
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> eGah
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> Smdn
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> iTRY
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> RQOr:
    org.bukkit.DyeColor dye -> Ihue
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> eGah
    30:30:org.bukkit.DyeColor getDye() -> RQOr
    35:36:void setDye(org.bukkit.DyeColor) -> Btan
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> qSXf:
    react.glang.GList potionEffects -> JkyJ
    boolean canPickupItems -> aEGy
    org.bukkit.inventory.ItemStack[] armorContents -> hsoQ
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> YpTt
    double maxHealth -> maxHealth
    int maxAir -> dMrx
    int air -> WbAa
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> eGah
    63:63:react.glang.GList getPotionEffects() -> qSXf
    68:69:void setPotionEffects(react.glang.GList) -> QDwh
    73:73:boolean isCanPickupItems() -> wKxc
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> kQfx
    138:139:void setMaxAir(int) -> RsQG
    143:143:int getAir() -> Jskk
    148:149:void setAir(int) -> xhkE
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> wKxc:
    boolean sheared -> oMrd
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> eGah
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> kQfx:
    org.bukkit.inventory.ItemStack is -> lEKH
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> eGah
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> Jskk:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> iCPp:
    react.chronophysics.HopperDirection DOWN -> TGUd
    react.chronophysics.HopperDirection NORTH -> IhyA
    react.chronophysics.HopperDirection SOUTH -> xHLl
    react.chronophysics.HopperDirection EAST -> BvGI
    react.chronophysics.HopperDirection WEST -> opWU
    int direction -> direction
    react.chronophysics.HopperDirection[] $VALUES -> DIHn
    6:6:react.chronophysics.HopperDirection[] values() -> values
    6:6:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> xFgk
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> Btan
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> QDwh
    6:12:void <clinit>() -> <clinit>
react.chronophysics.HopperDirection$1 -> iCPp$1:
    int[] $SwitchMap$react$chronophysics$HopperDirection -> wflX
    23:23:void <clinit>() -> <clinit>
react.chronophysics.HopperWormhole -> ckqn:
    org.bukkit.block.Hopper source -> cvDs
    react.glang.GList path -> pkJJ
    org.bukkit.block.Hopper destination -> Thwk
    18:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> iCPp
    31:31:react.glang.GList getPath() -> ckqn
    36:36:org.bukkit.block.Hopper getDestination() -> yuBq
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> Btan
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> yuBq:
    org.bukkit.block.Hopper h -> URjC
    14:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> Btan
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> WFmY
    62:62:boolean isLockedByRedstone() -> BIrW
react.command.CommandAct -> WFmY:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> Btan
    186:192:react.text.RTX getBeginningRTX() -> KCji
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> Btan
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> QDwh
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> CgEC
    331:346:react.glang.GList getSortedCommands() -> PlmC
    351:358:int getPageSize(int) -> pHBK
    363:363:boolean isValidPage(int,int) -> Btan
    368:377:react.glang.GList getPage(int,int) -> QDwh
react.command.CommandActionLog -> BIrW:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
react.command.CommandCPUScore -> KCji:
    16:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
react.command.CommandCapabilities -> PlmC:
    20:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
react.command.CommandChunkBlame -> gpNj:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
react.command.CommandChunkBlame$1 -> gpNj$1:
    react.command.CommandChunkBlame this$0 -> SvwH
    org.bukkit.command.CommandSender val$sender -> NoxH
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> gpNj$1$1:
    react.command.CommandChunkBlame$1 this$1 -> UuMj
    org.bukkit.command.CommandSender val$sender -> NoxH
    java.lang.String val$i -> VgNp
    react.glang.GMap val$top -> OHhH
    int val$totalx -> HwYF
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> ThXa:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
react.command.CommandHelp -> VwPB:
    28:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> Btan
    81:87:react.text.RTX getBeginningRTX() -> KCji
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> Btan
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> QDwh
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> CgEC
    208:215:react.glang.GList getSortedCommands() -> PlmC
    220:227:int getPageSize(int) -> pHBK
    232:232:boolean isValidPage(int,int) -> Btan
    237:246:react.glang.GList getPage(int,int) -> QDwh
react.command.CommandHighMonitor -> hPnR:
    16:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
react.command.CommandMap -> SLCd:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
react.command.CommandMonitor -> hbQE:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
react.command.CommandReload -> Qooi:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
react.command.CommandReload$1 -> Qooi$1:
    org.bukkit.command.CommandSender val$sender -> NoxH
    react.command.CommandReload this$0 -> mYNo
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> Qooi$1$1:
    react.command.CommandReload$1 this$1 -> lEJC
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> oxIq:
    28:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
    54:63:org.bukkit.inventory.ItemStack makeBook() -> gpNj
    68:94:void addSpikePages(react.glang.GList) -> CgEC
    98:108:void addStatusPages(react.glang.GList) -> OrWU
    112:129:int findSlot(org.bukkit.entity.Player) -> CgEC
react.command.CommandVersion -> qKLQ:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Btan
react.controller.ActionController -> uNgK:
    int kiv -> yeAn
    react.glang.GMap actions -> qSwe
    react.glang.GMap pending -> Bufm
    react.glang.GList tasks -> FiAE
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> Btan
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> QDwh
    141:141:react.api.IAction getAction(react.api.ActionType) -> Btan
    146:147:void registerAction(react.api.IAction) -> Btan
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> ThXa
    241:248:react.glang.GList getActionNames() -> VwPB
    24:24:void <clinit>() -> <clinit>
react.controller.BenchmarkController -> GHbq:
    react.api.CPUBenchmark finished -> uWtM
    boolean done -> HMDK
    int score -> LOpu
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    13:13:react.api.CPUBenchmark access$002(react.controller.BenchmarkController,react.api.CPUBenchmark) -> Btan
    13:13:boolean access$102(react.controller.BenchmarkController,boolean) -> Btan
    13:13:react.api.CPUBenchmark access$000(react.controller.BenchmarkController) -> Btan
react.controller.BenchmarkController$1 -> GHbq$1:
    react.controller.BenchmarkController this$0 -> opVP
    27:27:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
react.controller.BenchmarkController$1$1 -> GHbq$1$1:
    react.controller.BenchmarkController$1 this$1 -> vJVG
    32:32:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
react.controller.BenchmarkController$1$1$1 -> GHbq$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> KgOC
    37:37:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> oMTw:
    react.glang.GMap rangeMapping -> RQpC
    react.binject.IBlockInjector injector -> kkxc
    boolean injected -> cdau
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> hPnR
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> SLCd
    115:115:react.binject.IBlockInjector getInjector() -> hbQE
    120:120:boolean isInjected() -> Qooi
react.controller.ChronophyFluidController -> kbjs:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> Lytx:
    boolean firstTickList -> iTpr
    long firstTick -> hlAi
    long lastTick -> TPHs
    react.gmath.Average aCSMS -> DPys
    react.glang.GMap pluginLoads -> QXAh
    react.glang.GMap playerLoads -> uGVa
    int serverLoads -> oFFG
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> oxIq
    63:73:void tickNextTickList() -> qKLQ
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> Btan
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> Btan
    171:171:boolean isFirstTickList() -> uNgK
    176:176:long getFirstTick() -> GHbq
    181:181:long getLastTick() -> oMTw
    186:186:react.gmath.Average getaCSMS() -> kbjs
    191:191:react.glang.GMap getPluginLoads() -> Lytx
    196:196:react.glang.GMap getPlayerLoads() -> vslQ
    201:201:int getServerLoads() -> yRaw
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> Btan
    29:29:int access$1(react.controller.ChunkController) -> QDwh
    29:29:void access$2(react.controller.ChunkController,int) -> Btan
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> CgEC
react.controller.ChunkController$1 -> Lytx$1:
    react.controller.ChunkController this$0 -> kuNb
    org.bukkit.event.world.ChunkLoadEvent val$e -> VEMv
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> CgEC
    1:1:void run(java.lang.Object) -> Btan
react.controller.CommandController -> vslQ:
    react.glang.GList commands -> pHfu
    boolean k -> cvHR
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> vHrQ
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> IVsP
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> Btan
    317:317:react.glang.GList getCommands() -> VUOo
    322:323:void setCommands(react.glang.GList) -> xFgk
    327:327:boolean isK() -> cBBx
    332:333:void setK(boolean) -> IVsP
react.controller.EntityCullController -> yRaw:
    react.glang.GSet flags -> Ngic
    react.glang.GSet defer -> LbDk
    react.glang.GMap maxs -> wDkL
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> mrCf
    172:180:int cull(org.bukkit.Chunk) -> OrWU
    185:295:int partialCull(org.bukkit.Chunk) -> xFgk
react.controller.EntityStackController -> VUOo:
    react.glang.GList stacks -> MlwW
    20:22:void <init>() -> <init>
    27:28:void start() -> start
    33:34:void stop() -> stop
    39:54:void tick() -> tick
    59:112:void stack(react.glang.GList) -> rUxE
    116:121:boolean isStacked(org.bukkit.entity.LivingEntity) -> CgEC
    126:139:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> OrWU
    145:163:void on(org.bukkit.event.entity.EntityDamageEvent) -> Btan
    167:182:void merge(react.api.StackedEntity,react.api.StackedEntity) -> Btan
    186:252:void checkNear(org.bukkit.entity.LivingEntity) -> xFgk
    257:297:void on(org.bukkit.event.entity.EntitySpawnEvent) -> Btan
react.controller.EntityStackController$1 -> VUOo$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> iDSd
    react.controller.EntityStackController this$0 -> pHgX
    265:265:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    269:294:void run() -> run
react.controller.EventController -> cBBx:
    react.lagmap.LagMap map -> uaHd
    react.glang.GMap slots -> BTGT
    21:21:void <init>() -> <init>
    29:37:void start() -> start
    42:43:void stop() -> stop
    48:93:void tick() -> tick
    98:99:void on(org.bukkit.event.entity.EntityExplodeEvent) -> Btan
    104:105:void on(org.bukkit.event.entity.EntitySpawnEvent) -> Btan
    110:111:void on(org.bukkit.event.entity.EntityDeathEvent) -> Btan
    116:117:void on(org.bukkit.event.entity.EntityDamageEvent) -> Btan
    122:123:void on(org.bukkit.event.player.PlayerJoinEvent) -> Btan
    128:129:void on(org.bukkit.event.player.PlayerQuitEvent) -> Btan
react.controller.ExplosiveController -> mrCf:
    boolean firstTickList -> iTpr
    long firstTick -> hlAi
    long lastTick -> TPHs
    react.gmath.Average aCSMS -> DPys
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> oxIq
    50:60:void tickNextTickList() -> qKLQ
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> QDwh
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> Btan
    89:89:boolean isFirstTickList() -> uNgK
    94:94:long getFirstTick() -> GHbq
    99:99:long getLastTick() -> oMTw
    104:104:react.gmath.Average getaCSMS() -> kbjs
react.controller.FastDecayController -> avpm:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> SDTJ
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> Btan
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> Btan
    74:155:void checkBreak(org.bukkit.block.Block) -> CgEC
    159:190:void decay(org.bukkit.block.Block) -> OrWU
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> xFgk
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> avpm
react.controller.FastDecayController$1 -> avpm$1:
    react.controller.FastDecayController this$0 -> ymSx
    react.glang.GMap val$locs -> pYhO
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> CgEC
    99:99:boolean isAllowedSource(org.bukkit.Location) -> OrWU
    105:124:void clipped(org.bukkit.Location) -> QDwh
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> Btan
react.controller.FastDecayController$1$1 -> avpm$1$1:
    react.controller.FastDecayController$1 this$1 -> ydbh
    react.glang.GMap val$locs -> pYhO
    int val$i -> tDSA
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> avpm$2:
    react.controller.FastDecayController this$0 -> ymSx
    org.bukkit.block.Block val$b -> BTGE
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FastDecayController$3 -> avpm$3:
    int[] $SwitchMap$org$bukkit$TreeSpecies -> pIFq
    201:201:void <clinit>() -> <clinit>
react.controller.FeatureController -> vQhc:
    react.feature.INMSBinding trueBinding -> uOdp
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> vQhc
    85:85:java.lang.String getPackageVersion() -> RIBQ
    90:90:boolean hasBinding() -> EvAQ
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Btan
react.controller.FluidController -> RIBQ:
    react.glang.GSet ignore -> HDTi
    int flowsPerTick -> STuI
    int flowsPerSecond -> JBJc
    react.gmath.Average aFST -> LisF
    react.gmath.Average aFSS -> VVOL
    react.gmath.Average aFSMS -> jiYA
    boolean firstTickList -> iTpr
    long firstTick -> hlAi
    long lastTick -> TPHs
    react.glang.GSet frozen -> oWEg
    react.glang.GMap queue -> aDmv
    react.glang.GMap freezeTimes -> SeyL
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> rUxE
    68:76:void checkChunks() -> BtiS
    80:97:void checkChunk(org.bukkit.Chunk) -> eGah
    101:107:void queue(org.bukkit.block.Block) -> rUxE
    111:111:boolean isFrozen(org.bukkit.Chunk) -> QDxG
    116:117:void freeze(org.bukkit.Chunk) -> vHrQ
    121:127:void unfreeze(org.bukkit.Chunk) -> IVsP
    131:138:void freeze(org.bukkit.Chunk,long) -> Btan
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> oxIq
    172:182:void tickNextTickList() -> qKLQ
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Btan
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> Btan
    248:248:react.glang.GSet getIgnore() -> MIrW
    253:253:int getTransfersPerTick() -> GIBk
    258:258:int getTransfersPerSecond() -> uhXb
    263:263:react.gmath.Average getaFST() -> wULh
    268:268:react.gmath.Average getaFSS() -> RbTO
    273:273:react.gmath.Average getaFSMS() -> UIYn
    278:278:boolean isFirstTickList() -> uNgK
    283:283:long getFirstTick() -> GHbq
    288:288:long getLastTick() -> oMTw
    293:293:react.glang.GSet getFrozen() -> ccdb
    298:298:react.glang.GMap getQueue() -> ncbp
    303:303:react.glang.GMap getFreezeTimes() -> avov
react.controller.GlassController -> EvAQ:
    react.glang.GMap q -> ooyj
    react.glang.GList g -> NxmE
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> OrWU
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> xFgk
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> rUxE
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Btan
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> Btan
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> Btan
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> Btan
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> Btan
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> Btan
    36:36:react.glang.GList access$0(react.controller.GlassController) -> Btan
react.controller.GlassController$1 -> EvAQ$1:
    react.controller.GlassController this$0 -> axTB
    react.glang.GMap val$cc -> HLgo
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> EvAQ$1$1:
    react.controller.GlassController$1 this$1 -> rqTP
    org.bukkit.Location val$i -> KNBL
    org.bukkit.entity.Player val$j -> SCum
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> BtiS:
    react.glang.GMap g -> xPaa
    react.glang.GMap gr -> LrgU
    react.glang.GMap gra -> xGod
    38:38:void <init>() -> <init>
    47:80:void start() -> start
    85:91:void stop() -> stop
    96:123:void tick() -> tick
    128:145:void on(org.bukkit.event.player.PlayerJoinEvent) -> Btan
    149:214:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> Btan
    219:259:void on(org.bukkit.event.player.PlayerMoveEvent) -> Btan
    265:265:void on(react.event.ReactScrollEvent) -> Btan
    269:321:void toggleMapping(org.bukkit.entity.Player) -> eGah
    325:357:void toggleMappingEod(org.bukkit.entity.Player) -> QDxG
    361:361:react.glang.GMap getG() -> vQgp
    366:366:react.glang.GMap getGr() -> wDJb
    41:41:react.glang.GMap access$0(react.controller.GraphController) -> Btan
    40:40:react.glang.GMap access$1(react.controller.GraphController) -> QDwh
react.controller.GraphController$1 -> BtiS$1:
    react.controller.GraphController this$0 -> NyNT
    1:60:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    65:78:void run() -> run
react.controller.GraphController$2 -> BtiS$2:
    react.controller.GraphController this$0 -> NyNT
    1:96:void <init>(react.controller.GraphController) -> <init>
    101:105:void run() -> run
react.controller.GraphController$3 -> BtiS$3:
    react.controller.GraphController this$0 -> NyNT
    org.bukkit.event.player.PlayerJoinEvent val$e -> toIP
    1:128:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    133:143:void run() -> run
react.controller.HopperController -> MIrW:
    react.glang.GSet ignore -> HDTi
    int transfersPerTick -> Blwq
    int transfersPerSecond -> dVhi
    react.gmath.Average aHST -> APbt
    react.gmath.Average aHSS -> JRnc
    react.gmath.Average aHSMS -> Xlvk
    boolean firstTickList -> iTpr
    long firstTick -> hlAi
    long lastTick -> TPHs
    react.glang.GSet frozen -> oWEg
    react.glang.GMap queue -> aDmv
    react.glang.GMap freezeTimes -> SeyL
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> rUxE
    65:73:void checkChunks() -> BtiS
    77:94:void checkChunk(org.bukkit.Chunk) -> eGah
    98:104:void queue(org.bukkit.block.Block) -> rUxE
    108:108:boolean isFrozen(org.bukkit.Chunk) -> QDxG
    113:114:void freeze(org.bukkit.Chunk) -> vHrQ
    118:124:void unfreeze(org.bukkit.Chunk) -> IVsP
    128:135:void freeze(org.bukkit.Chunk,long) -> Btan
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> oxIq
    169:179:void tickNextTickList() -> qKLQ
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> Btan
    207:207:react.glang.GSet getIgnore() -> MIrW
    212:212:int getTransfersPerTick() -> GIBk
    217:217:int getTransfersPerSecond() -> uhXb
    222:222:react.gmath.Average getaHST() -> aUMr
    227:227:react.gmath.Average getaHSS() -> uFUG
    232:232:react.gmath.Average getaHSMS() -> tvWC
    237:237:boolean isFirstTickList() -> uNgK
    242:242:long getFirstTick() -> GHbq
    247:247:long getLastTick() -> oMTw
    252:252:react.glang.GSet getFrozen() -> ccdb
    257:257:react.glang.GMap getQueue() -> ncbp
    262:262:react.glang.GMap getFreezeTimes() -> avov
react.controller.HopperOvertickController -> GIBk:
    react.glang.GList possiblePlunge -> TGXi
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> CgEC
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> Btan
react.controller.LanguageController -> uhXb:
    java.io.File languageFolder -> BukS
    int oldVersion -> bGoo
    java.io.File dlf -> AYUn
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> jxxs
    160:221:void downloadAll(boolean) -> YfbV
    225:261:void downloadLanguage(java.lang.String) -> SvRw
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> RsQG
    315:315:java.io.File getFileForLanguage(java.lang.String) -> xhkE
    320:332:void writeDefaults() -> MSEX
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> Btan
    263:263:void access$1(react.controller.LanguageController) -> Btan
react.controller.LanguageController$1 -> uhXb$1:
    react.controller.LanguageController this$0 -> iMFa
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> uhXb$2:
    react.controller.LanguageController this$0 -> iMFa
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> Btan
react.controller.LanguageController$2$1 -> uhXb$2$1:
    react.controller.LanguageController$2 this$1 -> nddp
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> Btan
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> Btan
    121:121:void onDownloadStarted(react.gnet.download.Download) -> Btan
    126:128:void onDownloadFinished(react.gnet.download.Download) -> QDwh
    134:134:void onDownloadFailed(react.gnet.download.Download) -> CgEC
react.controller.LanguageController$3 -> uhXb$3:
    react.controller.LanguageController this$0 -> iMFa
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> uhXb$3$1:
    react.controller.LanguageController$3 this$1 -> KVPv
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> uhXb$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> nBat
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> uhXb$4:
    react.controller.LanguageController this$0 -> iMFa
    java.io.File val$dld -> cmWe
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> Btan
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> Btan
    245:245:void onDownloadStarted(react.gnet.download.Download) -> Btan
    250:251:void onDownloadFinished(react.gnet.download.Download) -> QDwh
    257:257:void onDownloadFailed(react.gnet.download.Download) -> CgEC
react.controller.MonitorController -> wULh:
    int maxCooldown -> CFIm
    react.api.TitleMonitor titleMonitor -> RIck
    react.glang.GMap posts -> WjUT
    react.slate.PhantomSlate sb -> dyKi
    boolean ready -> eHhx
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> miTj
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> vHrQ
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> IVsP
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> mFpq
    179:184:float calcVolume(react.api.ReactPlayer) -> Btan
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> YfbV
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> SvRw
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> RsQG
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> xhkE
    219:223:void startMonitoring(org.bukkit.entity.Player) -> pHBK
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> EAvS
    242:247:void startActionLogging(org.bukkit.entity.Player) -> xGIH
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> amyd
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> QDwh
    279:291:void processPlayer(react.api.ReactPlayer) -> CgEC
    296:296:void handleActionLog(org.bukkit.entity.Player) -> OrWl
    300:324:void handleTriggers(react.api.ReactPlayer) -> OrWU
    328:367:void handleScrolling(react.api.ReactPlayer) -> xFgk
    371:399:void handleShifting(react.api.ReactPlayer) -> rUxE
    403:425:void handlePosting(react.api.ReactPlayer) -> eGah
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> Btan
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> Btan
    471:501:void tickMonitor(react.api.ReactPlayer) -> QDxG
    505:505:react.api.TitleMonitor getTitleMonitor() -> tTWS
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> Btan
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> Btan
    539:552:void onTick() -> WPDN
    556:578:void updateActionBoard() -> pGjK
    583:583:java.lang.String getTickName() -> eGii
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> Btan
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> Btan
    41:41:void access$2(react.controller.MonitorController,boolean) -> Btan
    41:41:boolean access$3(react.controller.MonitorController) -> QDwh
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> CgEC
react.controller.MonitorController$1 -> wULh$1:
    react.controller.MonitorController this$0 -> Qpuy
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> wULh$2:
    react.controller.MonitorController this$0 -> Qpuy
    1:556:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> RbTO:
    react.glang.GMap samples -> eILp
    19:19:void <init>() -> <init>
    26:29:void start() -> start
    34:36:void stop() -> stop
    43:43:void tick() -> tick
    47:48:void onRedstone(org.bukkit.Chunk) -> YfbV
    52:53:void onHopper(org.bukkit.Chunk) -> SvRw
    57:58:void onFluid(org.bukkit.Chunk) -> RsQG
    63:64:void on(org.bukkit.event.world.ChunkUnloadEvent) -> Btan
    68:75:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> Btan
    82:102:void onTick() -> WPDN
    107:107:java.lang.String getTickName() -> eGii
    112:112:react.glang.GMap getSamples() -> hatx
react.controller.PhysicsController$1 -> RbTO$1:
    react.controller.PhysicsController this$0 -> vRnN
    1:94:void <init>(react.controller.PhysicsController) -> <init>
    99:100:void run() -> run
react.controller.PlayerController -> UIYn:
    react.glang.GList players -> NyPS
    react.glang.GSet save -> kBMs
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> ivPs
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> Btan
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> VLVl
    113:113:react.glang.GList getPlayers() -> sPqy
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> Btan
react.controller.PlayerController$1 -> UIYn$1:
    react.glang.GList val$toSave -> kcou
    react.controller.PlayerController this$0 -> tLgh
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> ccdb:
    react.rai.IRAI rai -> PecX
    boolean raiEnabled -> WagX
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    17:17:react.rai.IRAI access$000(react.controller.RAIController) -> Btan
react.controller.RAIController$1 -> ccdb$1:
    react.controller.RAIController this$0 -> jPKh
    47:47:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> ncbp:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> CgEC
react.controller.ReactServerInfo -> avov:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> jVxu
    27:27:int dgetGameProtocol() -> RsXu
    33:33:java.lang.String dgetGameVersion() -> NUja
    39:39:java.lang.String dgetReactVersion() -> DsBO
    45:45:int dgetMaxPlayers() -> ySDq
    51:58:react.glang.GList dgetConnectedPlayers() -> miSi
    64:64:int dgetViewDistance() -> uOIB
    70:70:int dgetGamePort() -> XlWq
    76:76:java.lang.String dgetGameAddress() -> YMWq
    82:89:react.glang.GList dgetRemotePlugins() -> HCWE
    95:102:react.glang.GList dgetWorlds() -> byuC
    108:108:react.glang.GList dgetActions() -> LPCn
    114:114:react.glang.GList dgetSamplers() -> ktPE
react.controller.RedstoneController -> vQgp:
    react.glang.GSet ignore -> HDTi
    react.glang.GSet frozen -> oWEg
    react.glang.GMap queue -> aDmv
    react.glang.GMap freezeTimes -> SeyL
    int redstonePerTick -> JKAQ
    int redstonePerSecond -> LPfV
    react.gmath.Average aRST -> cvLK
    react.gmath.Average aRSS -> jOjr
    react.gmath.Average aRSMS -> PwDd
    boolean firstTickList -> iTpr
    long firstTick -> hlAi
    long lastTick -> TPHs
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> rUxE
    95:101:void tick() -> tick
    105:113:void checkChunks() -> BtiS
    117:134:void checkChunk(org.bukkit.Chunk) -> eGah
    138:144:void queue(org.bukkit.block.Block) -> rUxE
    148:148:boolean isFrozen(org.bukkit.Chunk) -> QDxG
    153:154:void freeze(org.bukkit.Chunk) -> vHrQ
    158:165:void flushTickList() -> oxIq
    169:179:void tickNextTickList() -> qKLQ
    183:189:void unfreeze(org.bukkit.Chunk) -> IVsP
    193:200:void freeze(org.bukkit.Chunk,long) -> Btan
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> Btan
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Btan
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> Btan
    246:246:react.glang.GSet getIgnore() -> MIrW
    251:251:react.glang.GSet getFrozen() -> ccdb
    256:256:react.glang.GMap getQueue() -> ncbp
    261:261:react.glang.GMap getFreezeTimes() -> avov
    266:266:int getRedstonePerTick() -> WObO
    271:271:int getRedstonePerSecond() -> ETAE
    276:276:react.gmath.Average getaRST() -> bqdo
    281:281:react.gmath.Average getaRSS() -> NgKe
    286:286:react.gmath.Average getaRSMS() -> lnaC
    291:291:boolean isFirstTickList() -> uNgK
    296:296:long getFirstTick() -> GHbq
    301:301:long getLastTick() -> oMTw
react.controller.RemoteController -> wDJb:
    react.remote.server.RemoteServer remoteServer -> dxle
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> gxbx
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    12:12:void access$000(react.controller.RemoteController) -> Btan
react.controller.RemoteController$1 -> wDJb$1:
    react.controller.RemoteController this$0 -> VodU
    20:20:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> wDJb$2:
    react.controller.RemoteController this$0 -> VodU
    37:37:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> dwjl
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> XJTv
react.controller.SampleController -> aUMr:
    react.glang.GMap samplers -> cCEo
    react.surge.server.SuperSampler ss -> gyfI
    int cd -> lUqA
    28:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> Vepw
    69:74:void restartSuperSampler() -> uOGu
    78:79:void registerSampler(react.api.ISampler) -> CgEC
    83:83:react.api.ISampler getSampler(java.lang.String) -> pHBK
    88:131:void constructSamplers() -> OjNn
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> VDNw
    187:209:void onTick() -> WPDN
    214:214:java.lang.String getTickName() -> eGii
    219:219:react.glang.GMap getSamplers() -> wTpj
    224:224:react.surge.server.SuperSampler getSs() -> qdbF
    229:229:int getCd() -> HLJk
    234:241:react.glang.GList getSamplerNames() -> GjjL
    25:25:react.surge.server.SuperSampler access$0(react.controller.SampleController) -> Btan
react.controller.SampleController$1 -> aUMr$1:
    react.controller.SampleController this$0 -> xYSm
    1:140:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> aUMr$2:
    react.controller.SampleController this$0 -> xYSm
    1:152:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> uFUG:
    java.lang.String ipa -> kdOu
    react.glang.GList failures -> pILM
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> EAvS
    41:74:void checkForIP() -> hYfk
    78:91:void scan(java.lang.Runnable) -> Btan
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> uFUG$1:
    react.controller.SecurityController this$0 -> DINW
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> uFUG$2:
    java.lang.String val$ip -> kmAA
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> uFUG$3:
    java.lang.Thread val$t -> QqVl
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> tvWC:
    react.glang.GMap etl -> HoMX
    react.glang.GMap ttl -> xbED
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> Btan
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> Btan
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> SvRw
    143:160:void releaseWorld(org.bukkit.World) -> RsQG
    164:181:double getUniversalEntityTick() -> Qgeo
    186:203:double getUniversalEntityLimit() -> DXpD
    208:225:double getUniversalTileLimit() -> RYgn
    230:247:double getUniversalTileTick() -> rotp
    252:264:double getUniversalEntityDroppedTicks() -> RbXr
    269:281:double getUniversalTileDroppedTicks() -> OjRA
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> Btan
    301:312:void setTileTickLimit(org.bukkit.World,double) -> QDwh
    316:321:double getEntityTickLimit(org.bukkit.World) -> xhkE
    326:331:double getTileTickLimit(org.bukkit.World) -> pHBK
    336:341:double getLastEntityTick(org.bukkit.World) -> EAvS
    346:351:double getLastTileTick(org.bukkit.World) -> xGIH
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> amyd
    366:371:double getTileDroppedTicks(org.bukkit.World) -> OrWl
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> Btan
react.controller.SpikeController -> jxxs:
    react.glang.GMap spikes -> ndgQ
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> WPDN
    111:111:java.lang.String getTickName() -> eGii
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> ndIT
    128:160:void whoFuckingDidThis(react.glang.Callback) -> Btan
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> Btan
react.controller.SpikeController$1 -> jxxs$1:
    react.controller.SpikeController this$0 -> PKoe
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> jxxs$1$1:
    react.controller.SpikeController$1 this$1 -> DYoO
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> jxxs$2:
    react.controller.SpikeController this$0 -> PKoe
    react.glang.GMap val$vv -> uqko
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> jxxs$3:
    react.controller.SpikeController this$0 -> PKoe
    java.lang.Thread val$t -> QqVl
    react.glang.Callback val$callback -> TrOa
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> MSEX:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> miTj:
    12:12:void <init>() -> <init>
    17:23:void start() -> start
    28:34:void stop() -> stop
    40:40:void tick() -> tick
    45:46:void on(org.bukkit.event.world.WorldUnloadEvent) -> Btan
react.event.ReactEvent -> mFpq:
    org.bukkit.event.HandlerList handlers -> sRTW
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> tTWS:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> WPDN:
    react.event.ScrollDirection direction -> pIJt
    boolean cancellled -> gXBy
    int amount -> Jcpp
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> gWCw
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> EvFk
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> pGjK:
    react.event.ScrollDirection DOWN -> hcWG
    react.event.ScrollDirection UP -> WsIB
    react.event.ScrollDirection[] $VALUES -> hbvH
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.feature.INMSBinding -> eGii:
    java.lang.String getPackageVersion() -> RIBQ
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Btan
react.feature.NMSBinding -> hatx:
    java.lang.String packageVersion -> EwEr
    8:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> RIBQ
react.feature.NMSBinding10 -> sPqy:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Btan
react.feature.NMSBinding11 -> jVxu:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Btan
react.feature.NMSBinding12 -> RsXu:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Btan
react.feature.NMSBinding8 -> NUja:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Btan
react.feature.NMSBinding9 -> DsBO:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Btan
react.gbench.Profiler -> ySDq:
    long nanos -> mXrs
    long startNano -> YWLD
    long millis -> mbHf
    long startMillis -> tMJf
    double time -> fTcA
    boolean profiling -> DtEY
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> EAvS
    78:78:double getTicks() -> VUSd
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> LWvf
    93:93:double getHours() -> GPum
    98:98:double getMilliseconds() -> Btly
    103:103:long getNanoseconds() -> BIyP
    108:108:long getNanos() -> EudT
    113:113:long getStartNano() -> sbVX
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> NUjc
    128:128:double getTime() -> mGRo
    133:133:boolean isProfiling() -> xXTS
react.gconcurrent.A -> miSi:
    react.gconcurrent.ParallelPoolManager mgr -> PTca
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> miSi$1:
    react.gconcurrent.A this$0 -> XKYt
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> uOIB:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> XlWq:
    react.gconcurrent.QueueMode mode -> NVmr
    react.glang.GList threads -> WHVj
    int next -> Qhhe
    int threadCount -> AQHd
    java.util.Queue squeue -> lUsK
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> VVVR
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> esbn
    22:23:void syncQueue(react.gconcurrent.Execution) -> Btan
    long getNanoGate() -> JQoS
    29:42:void tickSyncQueue() -> yJUV
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> QEav
    93:100:int getTotalQueueSize() -> skHH
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> QDwh
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> ryEy
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> rNRQ
    152:179:void updateThreadInformation() -> LFtK
    183:215:react.gconcurrent.ParallelThread nextThread() -> VMBe
    220:226:void createThreads(int) -> xGIH
    230:230:react.gconcurrent.QueueMode getMode() -> Xkyb
    235:235:int getNext() -> PJpO
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> EueR
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> fSbc
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> QWHO
react.gconcurrent.ParallelThread -> YMWq:
    java.util.Queue queue -> eHnd
    react.gconcurrent.ThreadInformation info -> VVVR
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> IVsP
    63:70:void execute(react.gconcurrent.Execution) -> CgEC
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> QDwh
    92:92:java.util.Queue getQueue() -> NUmp
    97:97:react.gconcurrent.ThreadInformation getInfo() -> jONJ
react.gconcurrent.QueueMode -> HCWE:
    react.gconcurrent.QueueMode ROUND_ROBIN -> XdlQ
    react.gconcurrent.QueueMode SMALLEST -> nulO
    react.gconcurrent.QueueMode[] ENUM$VALUES -> wpEx
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> byuC:
    react.gconcurrent.ParallelPoolManager mgr -> PTca
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> byuC$1:
    react.gconcurrent.S this$0 -> fvea
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> LPCn:
    long tick -> VNCs
    long atick -> VMbv
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> ktPE:
    double ticksPerSecond -> gOUA
    int queuedSize -> PedO
    boolean processing -> VgVS
    double utilization -> hRWc
    react.gmath.Average ticksPerSecondAverage -> dFKK
    long tick -> VNCs
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> WqkI
    33:35:void setTicksPerSecond(double) -> YfbV
    39:39:int getQueuedSize() -> QWHY
    44:45:void setQueuedSize(int) -> amyd
    49:49:boolean isProcessing() -> ktTL
    54:55:void setProcessing(boolean) -> SvRw
    59:59:double getUtilization() -> ydKN
    64:65:void setUtilization(double) -> SvRw
    69:69:double getTicksPerSecondAverage() -> ntlP
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> MAhU
    89:89:int getId() -> getId
react.gformat.F -> WObO:
    java.text.NumberFormat NF -> cShv
    java.text.DecimalFormat DF -> wVRY
    java.lang.String[] NAMES -> fTao
    java.math.BigInteger THOUSAND -> PDCE
    java.util.NavigableMap MAP -> MKYl
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> xGIH
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> Btan
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> Btan
    201:221:java.lang.String timeLong(long,int) -> Btan
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> CgEC
    236:236:java.lang.String b(double) -> RsQG
    241:258:java.lang.String b(java.math.BigInteger) -> Btan
    263:267:void instantiate() -> GHgm
    279:279:java.lang.String fileSize(long) -> OrWU
    292:292:java.lang.String memSize(long) -> xFgk
    305:306:java.lang.String stamp(long) -> rUxE
    322:349:java.lang.String ofSize(long,int) -> QDwh
    363:368:java.lang.String trim(java.lang.String,int) -> QDwh
    381:401:java.lang.String cname(java.lang.String) -> amyd
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> eGah
    459:477:java.lang.String memx(long) -> QDxG
    491:492:java.lang.String f(long) -> vHrQ
    504:505:java.lang.String f(int) -> OrWl
    519:528:java.lang.String f(double,int) -> QDwh
    544:553:java.lang.String fd(double,int) -> CgEC
    567:576:java.lang.String f(float,int) -> Btan
    587:587:java.lang.String f(double) -> xhkE
    598:598:java.lang.String f(float) -> Btan
    613:613:java.lang.String pc(double,int) -> OrWU
    628:628:java.lang.String pc(float,int) -> QDwh
    641:641:java.lang.String pc(double) -> pHBK
    654:654:java.lang.String pc(float) -> QDwh
    670:670:java.lang.String pc(int,int,int) -> Btan
    684:684:java.lang.String pc(int,int) -> CgEC
    700:700:java.lang.String pc(long,long,int) -> Btan
    714:714:java.lang.String pc(long,long) -> OrWU
    726:726:java.lang.String msSeconds(long) -> IVsP
    740:740:java.lang.String msSeconds(long,int) -> CgEC
    752:752:java.lang.String nsMs(long) -> YfbV
    766:766:java.lang.String nsMs(long,int) -> OrWU
    780:780:java.lang.String nsMsd(long,int) -> xFgk
react.glang.AccessCallback -> ETAE:
    java.lang.Object get() -> get
react.glang.Adapter -> bqdo:
    java.lang.Object adapt(java.lang.Object) -> rUxE
    java.lang.Object onAdapt(java.lang.Object) -> eGah
react.glang.Callback -> NgKe:
    java.lang.Object t -> hlIk
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> Btan
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> lnaC:
    double i -> wfrr
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> EAvS
react.glang.FinalFloat -> gxbx:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> CgEC
react.glang.FinalInteger -> dwjl:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> ivPs
react.glang.FinalLong -> XJTv:
    long i -> sbwU
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> SvRw
react.glang.FinalString -> Vepw:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> uOGu:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> rUxE
    java.lang.Object onAdapt(java.lang.Object) -> eGah
react.glang.GBiset -> OjNn:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> Fyir
    java.lang.Object b -> FGGE
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> CgOq
    53:54:void setA(java.lang.Object) -> QDxG
    63:63:java.lang.Object getB() -> kbqV
    73:74:void setB(java.lang.Object) -> vHrQ
react.glang.GList -> VDNw:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> OrWU
    45:52:react.glang.GList grepDistance(int,int) -> xFgk
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> QDwh
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> RYhj
    188:190:react.glang.GList shuffleCopy() -> ETDf
    198:199:void shuffle() -> uOLV
    210:236:react.glang.GList split() -> aCqm
    248:248:boolean hasIndex(int) -> VLVl
    258:259:java.lang.Object pickRandom() -> VLdJ
    270:277:react.glang.GList stringList() -> Qxht
    288:292:void forEach(react.glang.Callback) -> QDwh
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> NgBv
    336:336:react.glang.GList cropFrom(int) -> IWRl
    341:373:react.glang.GList split(int) -> Grnk
    389:389:react.glang.GList cropTo(int) -> Txsq
    406:416:react.glang.GList crop(int,int) -> rUxE
    427:431:react.glang.GList removeDuplicates() -> NgOi
    442:446:void removeAll(java.lang.Object) -> IVsP
    455:455:boolean hasDuplicates() -> iLIl
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> PCBb
    484:490:void push(java.lang.Object,int) -> Btan
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> YfbV
    528:532:void add(java.util.List) -> Btan
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> DisD
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> sYgN
    626:627:react.glang.GList qdel(java.lang.Object) -> SvRw
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> maHB
    662:669:java.lang.Object popLast() -> pYNn
    674:683:java.lang.Object popRandom() -> haxM
react.glang.GListAdapter -> wTpj:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> QDwh
    java.lang.Object onAdapt(java.lang.Object) -> eGah
react.glang.GMap -> qdbF:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> Puey
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> Btan
    64:81:react.glang.GMap flip() -> qvHY
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> Btan
    121:121:react.glang.GList k() -> VLVl
    131:131:react.glang.GSet kset() -> PBdR
    141:141:react.glang.GList v() -> cuOh
    151:151:react.glang.GSet vset() -> MAkY
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> QDwh
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> eGah
    209:219:react.glang.GMap removeDuplicateValues() -> QgjU
    233:242:void put(react.glang.GList,react.glang.GList) -> Btan
    251:267:react.glang.GList sortK() -> oUoD
    277:293:react.glang.GList sortV() -> GILR
react.glang.GQuadraset -> HLJk:
    java.lang.Object a -> Fyir
    java.lang.Object b -> FGGE
    java.lang.Object c -> qCcF
    java.lang.Object d -> rNvN
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> CgOq
    25:26:void setA(java.lang.Object) -> QDxG
    30:30:java.lang.Object getB() -> kbqV
    35:36:void setB(java.lang.Object) -> vHrQ
    40:40:java.lang.Object getC() -> DjVY
    45:46:void setC(java.lang.Object) -> RsQG
    50:50:java.lang.Object getD() -> QMxK
    55:56:void setD(java.lang.Object) -> xhkE
react.glang.GSet -> GjjL:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> hYfk:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> Fyir
    java.lang.Object b -> FGGE
    java.lang.Object c -> qCcF
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> CgOq
    26:27:void setA(java.lang.Object) -> QDxG
    31:31:java.lang.Object getB() -> kbqV
    36:37:void setB(java.lang.Object) -> vHrQ
    41:41:java.lang.Object getC() -> DjVY
    46:47:void setC(java.lang.Object) -> RsQG
react.gmath.Average -> Qgeo:
    double[] values -> HLnJ
    double average -> yJyc
    boolean dirty -> AsNX
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> xGIH
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> CEPC
react.gmath.DoubleArrayUtils -> DXpD:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> Btan
    17:19:void wrapRight(double[]) -> Btan
    23:27:void fill(double[],double) -> fill
react.gmath.M -> RYgn:
    int precision -> OYsJ
    int modulus -> TPQc
    float[] sin -> FFhR
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> Btan
    31:36:boolean r(java.lang.Double) -> QDwh
    51:51:double tps(long,int) -> rUxE
    63:63:double ticksFromNS(long) -> RsQG
    75:101:java.lang.String toRoman(int) -> uWPk
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> eGah
    144:216:int fromRoman(java.lang.String) -> OrWl
    226:226:long ns() -> TOQc
    236:236:long ms() -> Ywqy
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> QDwh
    333:333:float sinLookup(int) -> Rrmv
react.gnet.client.Client -> rotp:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> LsNO
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> Btan
    74:74:react.gnet.packet.PacketHandler getHandler() -> vARB
react.gnet.client.IClient -> RbXr:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> Btan
    react.gnet.packet.PacketHandler getHandler() -> vARB
react.gnet.download.Download -> OjRA:
    react.gnet.download.DownloadState state -> rOVt
    react.gnet.download.DownloadType type -> THAV
    react.gnet.download.DownloadStatus status -> yBhg
    react.gnet.download.DownloadMonitor monitor -> PDEf
    java.net.URL url -> url
    java.io.File file -> cBjh
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> ksuO
    92:92:react.gnet.download.DownloadType getType() -> vAQJ
    97:97:react.gnet.download.DownloadStatus getStatus() -> RILJ
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> QyLv
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> ndIT:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> Btan
    void onDownloadStarted(react.gnet.download.Download) -> Btan
    void onDownloadFinished(react.gnet.download.Download) -> QDwh
    void onDownloadFailed(react.gnet.download.Download) -> CgEC
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> Btan
react.gnet.download.DownloadState -> gWCw:
    react.gnet.download.DownloadState IDLE -> EwKN
    react.gnet.download.DownloadState DOWNLOADING -> innr
    react.gnet.download.DownloadState FAILED -> fLTe
    react.gnet.download.DownloadState FINISHED -> kJaj
    react.gnet.download.DownloadState[] $VALUES -> oxqW
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> EvFk:
    long bytesDownloaded -> agXb
    long bytesTotal -> PCdk
    long bytesPerSecond -> HLoI
    long timeElapsed -> QiJX
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> CgSd
    25:25:long getBytesDownloaded() -> wCrg
    30:31:void setBytesDownloaded(long) -> xhkE
    35:35:long getBytesTotal() -> oUnS
    40:41:void setBytesTotal(long) -> pHBK
    45:45:long getBytesPerSecond() -> IXDO
    50:51:void setBytesPerSecond(long) -> EAvS
    55:55:long getTimeElapsed() -> bGYG
    60:61:void setTimeElapsed(long) -> xGIH
react.gnet.download.DownloadType -> VUSd:
    react.gnet.download.DownloadType DETERMINATE -> ecBr
    react.gnet.download.DownloadType INDETERMINATE -> pRAV
    react.gnet.download.DownloadType[] $VALUES -> NVnf
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> LWvf:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> NwtE
    java.lang.String getPacketName() -> wMDv
react.gnet.packet.IncompatablePacketException -> GPum:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> Btly:
    react.gnet.packet.PacketBinding SERVER_BOUND -> cBiU
    react.gnet.packet.PacketBinding CLIENT_BOUND -> vBQC
    react.gnet.packet.PacketBinding[] $VALUES -> fmuh
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> BIyP:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> EudT:
    react.glang.GList accept -> dgnn
    react.gnet.packet.PacketBinding side -> mahp
    react.gnet.streams.OSS out -> WQJH
    react.gnet.streams.ISS in -> bQIY
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> Btan
    28:34:void accept(react.gnet.packet.IPacket) -> QDwh
    38:46:react.gnet.packet.IPacket findPacket(int) -> SnBP
    51:66:react.gnet.packet.IPacket read() -> bqkm
    71:77:void write(react.gnet.packet.IPacket) -> CgEC
react.gnet.packet.UnhandledPacketException -> sbVX:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> NUjc:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> vARB
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> OrWU
react.gnet.server.Server -> mGRo:
    int port -> port
    java.net.ServerSocket socket -> dqBP
    react.gnet.packet.PacketHandler handler -> LsNO
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> vARB
    37:84:void run() -> run
    88:91:void pstart() -> gyKh
    95:96:void pstop() -> PvII
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> OrWU
react.gnet.streams.ISS -> xXTS:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> tCyM
    boolean built -> EKuF
    byte[] readBuffer -> EfIF
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> STPF
    64:72:react.glang.GList readStringList() -> wUUN
    77:85:react.glang.GList readDoubleList() -> iByq
    90:98:react.glang.GList readLongList() -> gMua
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> Btan
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> Btan
    136:137:react.gnet.streams.ISS gzip() -> OXqj
    142:147:void build() -> QgjB
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> QDwh
    435:436:void close() -> close
react.gnet.streams.OSS -> JQoS:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> SgAF
    react.gnet.streams.StreamBuilder bu -> tCyM
    boolean built -> EKuF
    byte[] writeBuffer -> QNwS
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> qmGO
    41:42:react.gnet.streams.OSS gzip(int) -> gDvV
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> QDwh
    53:58:void build() -> QgjB
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> QDxG
    102:108:void writeDoubleList(react.glang.GList) -> vHrQ
    112:118:void writeLongList(react.glang.GList) -> IVsP
    122:128:void writeStreamableList(react.glang.GList) -> YfbV
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> maIn
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> CgEC
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> yJUV:
    react.glang.GList constructors -> Nxto
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> Btan
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> Btan
    49:50:void bind(react.gnet.streams.StreamConstructor) -> Btan
    54:55:void bindGZIP(int) -> XuBC
    59:60:void bindGZIP() -> nBIn
    64:65:void bindCipher(javax.crypto.Cipher) -> CgEC
    69:70:void bindBuffer(int) -> CEBE
    74:75:void bindBuffer() -> tmnO
react.gnet.streams.StreamConstructor -> QEav:
    java.io.InputStream constructInput(java.io.InputStream) -> Btan
    java.io.OutputStream constructOutput(java.io.OutputStream) -> Btan
react.gnet.streams.constructors.BufferedStreamConstructor -> skHH:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> QDwh
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> QDwh
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> Btan
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> Btan
react.gnet.streams.constructors.CipherStreamConstructor -> ryEy:
    javax.crypto.Cipher cipher -> lDvP
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> CgEC
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> CgEC
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> Btan
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> Btan
react.gnet.streams.constructors.GZipStreamConstructor -> rNRQ:
    int compressionLevel -> CqEw
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> OrWU
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> OrWU
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> Btan
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> Btan
react.gnet.streams.overlays.CGZIPInputStream -> LFtK:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> VMBe:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> Xkyb:
    void toBytes(react.gnet.streams.OSS) -> Btan
    void fromBytes(react.gnet.streams.ISS) -> Btan
react.graph.ColossalView -> PJpO:
    react.papyrus.BufferedFrame view -> pACE
    react.glang.GMap buffers -> tnqL
    react.glang.GMap graphs -> BBmi
    double level -> nBkl
    double targetLevel -> jquE
    int maxX -> lVYC
    int maxY -> cTNf
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> Edfw
    51:77:void render() -> kstN
    81:98:void scroll(int) -> fBSk
    102:112:void recompile() -> Fxkm
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> Btan
    122:122:react.papyrus.BufferedFrame getView() -> QMwK
    127:127:react.glang.GMap getBuffers() -> ArOE
    132:132:react.glang.GMap getGraphs() -> JtWg
    137:137:double getLevel() -> Yfor
    142:142:double getTargetLevel() -> pQAN
    147:147:int getMaxX() -> dVNl
    152:152:int getMaxY() -> nAha
react.graph.ColossalView$Builder -> PJpO$Btan:
    react.glang.GList graphs -> XBlc
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> Btan
    171:191:react.graph.ColossalView compute() -> WaMl
react.graph.CubicleIterator -> EueR:
    int[][] mapping -> Buqt
    int xCubes -> wVXV
    int yCubes -> lpLA
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> OqvM
    47:130:void insert(react.graph.GraphSize,int) -> Btan
    134:145:void print() -> print
react.graph.Graph2D -> fSbc:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> Btan
react.graph.GraphLagMap -> QWHO:
    int grid -> wDub
    org.bukkit.entity.Player viewer -> hlPK
    org.bukkit.util.Vector lastVector -> Wrnk
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> Jcwp
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> Thdt
    49:55:void zoomOut() -> cuRJ
    60:164:void onRender(react.papyrus.BufferedFrame) -> Btan
    21:21:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> TOSY
react.graph.GraphSampleLine -> NUmp:
    double lx -> ioQn
    double ly -> aNHs
    react.api.ISampler sampler -> fTfn
    react.graph.IFormatter formatter -> bsNq
    byte graphColor -> wgYU
    byte backgroundColor -> uHAY
    byte borderColor -> GlRL
    byte textColor -> wEVQ
    int ticksLeftTitle -> WbLl
    int ticksOutTitle -> NOBH
    double nextPoint -> KVXs
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> EJiV
    51:183:void onRender(react.papyrus.BufferedFrame) -> Btan
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> QDwh
    226:254:int getHue(int,int,int) -> CgEC
    259:281:void scaleFor(react.glang.GList) -> SvRw
    285:285:react.graph.IFormatter getFormatter() -> PmMF
    290:291:void setFormatter(react.graph.IFormatter) -> Btan
    295:295:byte getGraphColor() -> YMaO
    300:301:void setGraphColor(byte) -> Btan
    305:305:byte getBackgroundColor() -> NMbK
    310:311:void setBackgroundColor(byte) -> QDwh
    315:315:byte getBorderColor() -> ivcS
    320:321:void setBorderColor(byte) -> CgEC
    325:325:byte getTextColor() -> QhMa
    330:331:void setTextColor(byte) -> OrWU
    335:335:react.api.ISampler getSampler() -> vQtQ
react.graph.GraphSize -> jONJ:
    react.graph.GraphSize WIDE -> vlea
    react.graph.GraphSize FULL -> MvQi
    react.graph.GraphSize SQUARE -> BCOb
    react.graph.GraphSize[] $VALUES -> ekUR
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> dDpK
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> jONJ$1:
    int[] $SwitchMap$react$graph$GraphSize -> SwcJ
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> WqkI:
    java.lang.String text -> text
    byte fontColor -> lVVn
    byte backgroundColor -> uHAY
    boolean wrote -> mHYA
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> Btan
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> dEQK
    68:69:void setFontColor(byte) -> xFgk
    73:73:byte getBackgroundColor() -> NMbK
    78:79:void setBackgroundColor(byte) -> QDwh
react.graph.GraphingInstance -> QWHY:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> XBlc
    react.graph.ColossalView view -> Arok
    react.papyrus.Papyrus papyrus -> jOpR
    react.papyrus.IRenderer renderer -> lDuG
    boolean mapping -> jXOw
    react.glang.GList msgs -> mHYF
    react.surge.sched.Task waiter -> lwxv
    react.surge.sched.Task waiter2 -> XdoU
    int shift -> EejH
    int iv -> xGwQ
    boolean notif -> ogtQ
    boolean doScrolling -> aNKF
    49:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> DriQ
    127:128:void setDoScrolling(boolean) -> RsQG
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> Btan
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> Btan
    151:155:void send(java.lang.String) -> ivPs
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> Btan
    166:205:void on(react.event.ReactScrollEvent) -> Btan
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> Btan
    219:227:void destroy() -> destroy
    231:240:void toggle() -> cdPg
    244:245:void setGraphs(react.glang.GList) -> RsQG
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> DHUg
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> wewj
    298:298:react.graph.ColossalView getView() -> wMHA
    303:303:react.papyrus.Papyrus getPapyrus() -> Hvdo
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> Btan
    323:324:void setPapyrus(react.papyrus.Papyrus) -> Btan
    328:329:void setRenderer(react.papyrus.IRenderer) -> Btan
    333:334:void setMapping(boolean) -> CgEC
    338:339:void setMsgs(react.glang.GList) -> xhkE
    343:344:void setWaiter(react.surge.sched.Task) -> Btan
    348:349:void setWaiter2(react.surge.sched.Task) -> QDwh
    353:354:void setShift(int) -> MlQK
    358:359:void setNotif(boolean) -> xhkE
    363:363:react.papyrus.IRenderer getRenderer() -> HmtH
    368:368:boolean isMapping() -> uEoq
    373:373:react.glang.GList getMsgs() -> fSfk
    378:378:react.surge.sched.Task getWaiter() -> wLfY
    383:383:react.surge.sched.Task getWaiter2() -> rgjE
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> TORX
    398:414:void compile() -> cdOV
    418:433:void enableSly() -> QEha
    437:445:void disableSly() -> imqH
    40:40:boolean access$0(react.graph.GraphingInstance) -> Btan
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> QDwh
    46:46:boolean access$2(react.graph.GraphingInstance) -> CgEC
    46:46:void access$3(react.graph.GraphingInstance,boolean) -> Btan
    44:44:int access$4(react.graph.GraphingInstance) -> OrWU
    44:44:void access$5(react.graph.GraphingInstance,int) -> Btan
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> xFgk
react.graph.GraphingInstance$1 -> QWHY$1:
    react.graph.GraphingInstance this$0 -> YguS
    org.bukkit.entity.Player val$player -> SxFb
    1:54:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> QWHY$2:
    react.graph.GraphingInstance this$0 -> YguS
    1:79:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> QWHY$3:
    react.graph.GraphingInstance this$0 -> YguS
    1:109:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> Btan
react.graph.IFormatter -> ktTL:
    java.lang.String from(double) -> amyd
react.graph.IGraph -> ydKN:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> KMHo
    long getTimeViewport() -> gWIs
    void render(react.papyrus.BufferedFrame) -> CgEC
    double getMax() -> getMax
    void setMax(double) -> OrWl
react.graph.NormalGraph -> ntlP:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> broe
    long timeViewport -> Hnty
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> KMHo
    35:35:long getTimeViewport() -> gWIs
    41:42:void render(react.papyrus.BufferedFrame) -> CgEC
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> OrWl
    void onRender(react.papyrus.BufferedFrame) -> Btan
react.graph.PlotBoard -> MAhU:
    react.glang.GMap plots -> HMRw
    int maxRecordings -> mroK
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> SLPD
    33:33:long getAccurateTimeSpan() -> oxSi
    38:50:long getMedian(long,long) -> xFgk
    55:55:long getMinimumAccuracyRange() -> eGqO
    60:70:double getMaxValue() -> RkOl
    75:85:double getMinValue() -> gMvq
    90:90:react.glang.GList sort(react.glang.GMap) -> QDwh
    95:105:long earilestRecording() -> wfXM
    110:120:long latestRecording() -> EJwF
    125:126:void reduceBefore(long) -> amyd
    130:156:void reduceBetween(long,long) -> rUxE
    160:160:boolean before(long,long) -> eGah
    165:165:boolean after(long,long) -> QDxG
    170:170:boolean within(long,long,long) -> Btan
    175:193:react.glang.GMap getBetween(long,long) -> vHrQ
    198:200:void plot(long,double) -> Btan
    204:204:boolean hasAt(long) -> OrWl
    209:209:double getAt(long) -> ivPs
    214:214:int getSize() -> getSize
react.graph.Point -> GHgm:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> CgOq:
    int iid -> SECE
    react.graph.IGraph graph -> pQdj
    react.graph.GraphSize size -> GIpE
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> xPIS
    24:25:void setGraph(react.graph.IGraph) -> Btan
    29:29:react.graph.GraphSize getSize() -> pXrV
    34:35:void setSize(react.graph.GraphSize) -> Btan
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> kbqV:
    react.graph.RenderMaxType UNLIMITED -> DtLU
    react.graph.RenderMaxType LIMITED -> fLYD
    react.graph.RenderMaxType[] $VALUES -> SLqq
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> RYhj:
    java.lang.String CRLF -> fUJK
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> VLVl
    162:198:java.lang.String toString(react.json.JSONObject) -> QDwh
react.json.HTTPTokener -> ETDf:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> uOLV:
    java.util.ArrayList myArrayList -> gFhx
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> Btan
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> kbcy
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> HTSJ
    394:399:react.json.JSONObject getJSONObject(int) -> YUcV
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> NgBv
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> tnDI
    515:515:boolean optBoolean(int) -> kHuP
    533:536:boolean optBoolean(int,boolean) -> QDwh
    551:551:double optDouble(int) -> ydAI
    569:572:double optDouble(int,double) -> Btan
    587:587:int optInt(int) -> qJfe
    605:608:int optInt(int,int) -> QDxG
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> QDwh
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> Btan
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> Btan
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> Btan
    722:723:react.json.JSONArray optJSONArray(int) -> rpMj
    737:738:react.json.JSONObject optJSONObject(int) -> nIlt
    752:752:long optLong(int) -> PmMF
    770:773:long optLong(int,long) -> Btan
    788:788:java.lang.String optString(int) -> rNIq
    803:804:java.lang.String optString(int,java.lang.String) -> Btan
    816:817:react.json.JSONArray put(boolean) -> pHBK
    830:831:react.json.JSONArray put(java.util.Collection) -> Btan
    845:848:react.json.JSONArray put(double) -> ivPs
    860:861:react.json.JSONArray put(int) -> jhTy
    873:874:react.json.JSONArray put(long) -> VLVl
    887:888:react.json.JSONArray put(java.util.Map) -> Btan
    902:903:react.json.JSONArray put(java.lang.Object) -> pHBK
    921:922:react.json.JSONArray put(int,boolean) -> CgEC
    939:940:react.json.JSONArray put(int,java.util.Collection) -> Btan
    958:959:react.json.JSONArray put(int,double) -> QDwh
    977:978:react.json.JSONArray put(int,int) -> vHrQ
    996:997:react.json.JSONArray put(int,long) -> QDwh
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> Btan
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> Btan
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> EAvS
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> Btan
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> Btan
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> Btan
react.json.JSONException -> aCqm:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> tMOk
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> VLdJ:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> Btan
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> IWRl
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> Btan
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> QDwh
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> VLVl
    379:456:java.lang.String toString(react.json.JSONArray) -> QDwh
    472:552:java.lang.String toString(react.json.JSONObject) -> QDwh
react.json.JSONObject -> Qxht:
    java.util.Map map -> map
    java.lang.Object NULL -> YhUQ
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> Btan
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> QDwh
    480:499:java.lang.String doubleToString(double) -> VLVl
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> Grnk
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> Txsq
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> uWPk
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> CgEC
    751:767:java.lang.String[] getNames(java.lang.Object) -> xGIH
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> Rrmv
    855:855:boolean isNull(java.lang.String) -> SnBP
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> vtVg
    917:937:java.lang.String numberToString(java.lang.Number) -> Btan
    949:949:java.lang.Object opt(java.lang.String) -> STPF
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> Btan
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> Btan
    1018:1018:boolean optBoolean(java.lang.String) -> qmGO
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> Btan
    1054:1054:double optDouble(java.lang.String) -> gDvV
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> Btan
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> Btan
    1116:1119:double optDouble(java.lang.String,double) -> Btan
    1134:1134:int optInt(java.lang.String) -> XuBC
    1152:1155:int optInt(java.lang.String,int) -> CgEC
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> CEBE
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> fBSk
    1198:1198:long optLong(java.lang.String) -> OqvM
    1216:1219:long optLong(java.lang.String,long) -> Btan
    1234:1234:java.lang.String optString(java.lang.String) -> MlQK
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> QDwh
    1255:1305:void populateMap(java.lang.Object) -> amyd
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> QDwh
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> Btan
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> QDwh
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> OrWU
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> QDwh
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> Btan
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> CgEC
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> OrWU
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> xFgk
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> Btan
    1590:1590:java.lang.Object remove(java.lang.String) -> kbcy
    1605:1640:boolean similar(java.lang.Object) -> EAvS
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> OrWl
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> CgEC
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> Btan
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> Btan
    2000:2004:void indent(java.io.Writer,int) -> Btan
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> Btan
react.json.JSONObject$Null -> Qxht$Btan:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> NgOi:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> iLIl:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> PCBb:
    long character -> AkCV
    boolean eof -> eof
    long index -> LbPA
    long line -> Jtyo
    char previous -> UKFs
    java.io.Reader reader -> reader
    boolean usePrevious -> bQMI
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> ntnq
    119:131:int dehexchar(char) -> Btan
    136:136:boolean end() -> MtrI
    147:153:boolean more() -> RIMR
    164:198:char next() -> next
    213:218:char next(char) -> QDwh
    233:250:java.lang.String next(int) -> EJiV
    263:266:char nextClean() -> OGsY
    287:334:java.lang.String nextString(char) -> CgEC
    349:361:java.lang.String nextTo(char) -> OrWU
    376:388:java.lang.String nextTo(java.lang.String) -> HTSJ
    403:441:java.lang.Object nextValue() -> GsaN
    458:479:char skipTo(char) -> xFgk
    491:491:react.json.JSONException syntaxError(java.lang.String) -> YUcV
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> DisD:
    int maxdepth -> qviw
    boolean comma -> HgEJ
    char mode -> cBmW
    react.json.JSONObject[] stack -> PwLf
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> tnDI
    157:164:react.json.JSONWriter array() -> OafL
    180:193:react.json.JSONWriter end(char,char) -> Btan
    206:206:react.json.JSONWriter endArray() -> lfYN
    219:219:react.json.JSONWriter endObject() -> FEkl
    235:258:react.json.JSONWriter key(java.lang.String) -> kHuP
    274:285:react.json.JSONWriter object() -> QyPn
    299:310:void pop(char) -> rUxE
    322:329:void push(react.json.JSONObject) -> OrWU
    342:342:react.json.JSONWriter value(boolean) -> EAvS
    356:356:react.json.JSONWriter value(double) -> NgBv
    369:369:react.json.JSONWriter value(long) -> NgBv
    385:385:react.json.JSONWriter value(java.lang.Object) -> ivPs
react.json.XML -> sYgN:
    java.lang.Character AMP -> UJfQ
    java.lang.Character APOS -> QFja
    java.lang.Character BANG -> JBVg
    java.lang.Character EQ -> USWe
    java.lang.Character GT -> AbQa
    java.lang.Character LT -> COEi
    java.lang.Character QUEST -> uOqY
    java.lang.Character QUOT -> aNJW
    java.lang.Character SLASH -> fLXH
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> ydAI
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> Btan
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> VLVl
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> maHB:
    java.util.HashMap entity -> apMR
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> XdSP
    108:133:java.lang.Object nextContent() -> eixC
    149:166:java.lang.Object nextEntity(char) -> eGah
    186:239:java.lang.Object nextMeta() -> pbHK
    261:334:java.lang.Object nextToken() -> XSRB
    354:420:boolean skipPast(java.lang.String) -> qJfe
react.lagmap.LagMap -> pYNn:
    react.glang.GMap chunks -> HEBb
    13:16:void <init>() -> <init>
    20:29:void pump() -> GYqD
    33:39:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> Btan
    43:49:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> Btan
    53:53:react.glang.GMap getChunks() -> cSQJ
react.lagmap.LagMapChunk -> haxM:
    int x -> x
    int z -> z
    react.glang.GMap hits -> Ypee
    13:16:void <init>(int,int) -> <init>
    20:26:void hit(react.api.ChunkIssue,double) -> Btan
    30:31:void hit(react.api.ChunkIssue) -> Btan
    35:35:int getX() -> getX
    40:40:int getZ() -> getZ
    45:45:react.glang.GMap getHits() -> Yftj
    50:59:void pump() -> GYqD
react.papyrus.BufferedFrame -> Puey:
    byte[][] frame -> QGLN
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> Btan
    90:97:void write(byte) -> rUxE
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> Btan
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> Btan
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> Btan
    153:167:java.awt.image.BufferedImage toBufferedImage() -> MAoh
    175:182:void writeRainbowMul() -> maOY
    189:196:void writeRainbowAdd() -> iTbS
    203:213:void writeSparks() -> MSSA
    217:223:boolean write(int,int,byte) -> Btan
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> Btan
    255:272:void write(react.papyrus.BufferedFrame) -> OrWU
    276:276:byte[][] getRawFrame() -> hjpQ
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> qvHY:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> OrWU
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> Btan
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> PBdR:
    org.bukkit.map.MapView getView() -> GQaI
    react.papyrus.BufferedFrame getFrameBuffer() -> FyRV
    void addRenderer(react.papyrus.IRenderer) -> QDwh
    void clearRenderers() -> AiaB
    react.glang.GList getRenderers() -> kJFm
    void removeRenderer(react.papyrus.IRenderer) -> CgEC
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> HTdM
react.papyrus.IRenderer -> cuOh:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> Btan
react.papyrus.Papyrus -> MAkY:
    org.bukkit.map.MapView map -> Qqah
    react.papyrus.BufferedFrame frameBuffer -> OIYF
    react.papyrus.BufferedFrame lastFrameBuffer -> dyXo
    react.glang.GList renderers -> Laqc
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> GQaI
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> FyRV
    51:52:void addRenderer(react.papyrus.IRenderer) -> QDwh
    57:58:void clearRenderers() -> AiaB
    63:63:react.glang.GList getRenderers() -> kJFm
    69:70:void removeRenderer(react.papyrus.IRenderer) -> CgEC
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> HTdM
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> QDwh
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> CgEC
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> OrWU
react.papyrus.Papyrus$1 -> MAkY$1:
    react.papyrus.Papyrus this$0 -> xPmh
    org.bukkit.map.MapCanvas val$c -> LIAJ
    org.bukkit.map.MapView val$v -> yBoc
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> QgjU:
    int spaceSize -> opgY
    java.lang.String fontChars -> dOFD
    int[][] fontData -> neTV
    react.papyrus.ReactFont Font -> qfLu
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> oUoD:
    react.glang.GList subgoals -> womn
    java.lang.String tag -> iDcG
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> VMLG
    26:44:void propigate() -> GcCa
    49:50:void addGoal(react.rai.IGoal) -> Btan
    55:65:react.glang.GList getFailingSubgoals() -> wMHf
    71:71:boolean isFailing() -> kbvu
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> FWNA
    void onPropigated() -> fukU
react.rai.Goal$1 -> oUoD$1:
    react.rai.IGoal val$i -> scak
    react.rai.Goal this$0 -> QFnC
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> GILR:
    react.glang.GList getSubgoals() -> VMLG
    void propigate() -> GcCa
    void onPropigated() -> fukU
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> wMHf
    boolean isFailing() -> kbvu
    boolean onCheckFailing() -> FWNA
    void update() -> update
    void addGoal(react.rai.IGoal) -> Btan
react.rai.IRAI -> DjVY:
    react.glang.GList getGoals() -> NUrx
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> Btan
    react.glang.GList getEvents() -> tLPW
    void callEvent(react.rai.RAIEvent) -> Btan
    react.glang.GList getListeners() -> iUAp
react.rai.RAI -> QMxK:
    react.glang.GList goals -> RBBH
    react.glang.GList events -> BTSo
    react.glang.GList logEvents -> TjKI
    react.glang.GList listeners -> rGKv
    long since -> oEsD
    react.rai.RAI instance -> YhYH
    22:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> NUrx
    41:42:void addGoal(react.rai.IGoal) -> Btan
    47:77:void tick() -> tick
    82:82:react.glang.GList getEvents() -> tLPW
    88:95:void callEvent(react.rai.RAIEvent) -> Btan
    100:100:react.glang.GList getListeners() -> iUAp
react.rai.RAIEvent -> CEPC:
    react.rai.RAIEventType type -> ORIw
    java.lang.String[] pars -> APoh
    java.lang.String ovt -> mrpp
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> ymBA
    29:29:java.lang.String[] getPars() -> XmCS
    34:34:java.lang.String getOvt() -> WrOx
react.rai.RAIEventType -> TOQc:
    react.rai.RAIEventType FIRE_ACTION -> HoXe
    react.rai.RAIEventType NOTE_GOAL_FAILING -> uHDr
    react.rai.RAIEventType NOTE_GOAL_FIXED -> pHvJ
    java.lang.String[] msgs -> Gkti
    react.rai.RAIEventType[] $VALUES -> AQPd
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> vAUE
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> Btan
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedEntityCounts -> Ywqy:
    boolean failing -> nvTy
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> FWNA
    91:134:void onPropigated() -> fukU
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> Btan
react.rai.goals.GoalReducedEntityCounts$1 -> Ywqy$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> APpA
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> Ywqy$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> APpA
    org.bukkit.Chunk val$lx -> ynCu
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> vARB:
    boolean failing -> nvTy
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> FWNA
    72:76:void onPropigated() -> fukU
react.rai.goals.GoalStableChunkTime$1 -> vARB$1:
    react.rai.goals.GoalStableChunkTime this$0 -> AQSB
    1:48:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> ksuO:
    boolean failing -> nvTy
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> fukU
    35:35:void letUp() -> jqVk
    40:77:boolean onCheckFailing() -> FWNA
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> Btan
react.rai.goals.GoalStableEntityTime$1 -> ksuO$1:
    react.rai.goals.GoalStableEntityTime this$0 -> QXNl
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> vAQJ:
    boolean failing -> nvTy
    react.glang.GMap reocc -> cTQd
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> fukU
    88:125:boolean onCheckFailing() -> FWNA
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> Btan
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> QDwh
react.rai.goals.GoalStableFluidTime$1 -> vAQJ$1:
    react.rai.goals.GoalStableFluidTime this$0 -> FGNX
    org.bukkit.Chunk val$lx -> ynCu
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> vAQJ$2:
    react.rai.goals.GoalStableFluidTime this$0 -> FGNX
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> RILJ:
    boolean failing -> nvTy
    react.glang.GMap reocc -> cTQd
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> fukU
    89:125:boolean onCheckFailing() -> FWNA
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> Btan
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> QDwh
react.rai.goals.GoalStableHopperTime$1 -> RILJ$1:
    react.rai.goals.GoalStableHopperTime this$0 -> RdDE
    org.bukkit.Chunk val$lx -> ynCu
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> RILJ$2:
    react.rai.goals.GoalStableHopperTime this$0 -> RdDE
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> QyLv:
    boolean failing -> nvTy
    react.glang.GMap reocc -> cTQd
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> fukU
    89:126:boolean onCheckFailing() -> FWNA
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> Btan
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> QDwh
react.rai.goals.GoalStableRedstoneTime$1 -> QyLv$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> tUal
    org.bukkit.Chunk val$lx -> ynCu
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> QyLv$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> tUal
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> CgSd:
    boolean failing -> nvTy
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> fukU
    34:58:boolean onCheckFailing() -> FWNA
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> Btan
react.rai.goals.GoalStableTickTime$1 -> CgSd$1:
    react.rai.goals.GoalStableTickTime this$0 -> VMlH
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> wCrg:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> nBnb
    boolean authenticated -> IXhX
    react.remote.server.ServerInfo info -> HoXP
    react.glang.GMap frems -> rXMR
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> uxuV
    51:51:react.glang.GMap getFrames() -> dgTQ
    56:75:int computeFrames() -> kRVT
    80:92:boolean clearToken() -> PeKg
    97:110:boolean updateServerInfo() -> qTGe
    115:129:boolean refreshToken() -> gWLB
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> CgEC
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> ntpr
    165:165:boolean isAuthenticated() -> Wqoi
    170:170:react.remote.server.ServerInfo getInfo() -> Gsbu
react.remote.client.packet.CPacketClearToken -> oUnS:
    java.lang.String token -> nBnb
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Btan
    33:34:void fromBytes(react.gnet.streams.ISS) -> Btan
    38:38:java.lang.String getToken() -> ntpr
    43:44:void setToken(java.lang.String) -> rpMj
react.remote.client.packet.CPacketComputeFrames -> IXDO:
    java.lang.String token -> nBnb
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Btan
    33:34:void fromBytes(react.gnet.streams.ISS) -> Btan
    38:38:java.lang.String getToken() -> ntpr
    43:44:void setToken(java.lang.String) -> rpMj
react.remote.client.packet.CPacketGetInfo -> bGYG:
    java.lang.String token -> nBnb
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Btan
    33:34:void fromBytes(react.gnet.streams.ISS) -> Btan
    38:38:java.lang.String getToken() -> ntpr
    43:44:void setToken(java.lang.String) -> rpMj
react.remote.client.packet.CPacketGetToken -> NwtE:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> Btan
    36:38:void fromBytes(react.gnet.streams.ISS) -> Btan
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> wMDv:
    java.lang.String token -> nBnb
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Btan
    33:34:void fromBytes(react.gnet.streams.ISS) -> Btan
    38:38:java.lang.String getToken() -> ntpr
    43:44:void setToken(java.lang.String) -> rpMj
react.remote.client.packet.ClientPacket -> bqkm:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> Btan
    void fromBytes(react.gnet.streams.ISS) -> Btan
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> NwtE
    42:42:java.lang.String getPacketName() -> wMDv
react.remote.client.packet.ClientPacketType -> gyKh:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> uaYc
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> Aaso
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> SxJh
    react.remote.client.packet.ClientPacketType GET_INFO -> FhsW
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> yTTX
    react.remote.client.packet.ClientPacketType[] $VALUES -> fCkP
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> PvII:
    react.glang.GMap compute(long,long) -> CgEC
react.remote.server.KnownUser -> wUUN:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> iByq:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> Btan
    38:41:void fromBytes(react.gnet.streams.ISS) -> Btan
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> gMua:
    react.glang.GList users -> MvYY
    react.glang.GMap session -> QXQr
    react.glang.GMap lastCompute -> XvYB
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> dwjl
    44:45:void registerUser(react.remote.server.KnownUser) -> Btan
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> QDwh
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> nIlt
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> OrWU
    react.remote.server.IFrameComputer getFrameComputer() -> XJTv
    170:171:void markLastCompute(react.remote.server.KnownUser) -> CgEC
    175:180:long getLastCompute(react.remote.server.KnownUser) -> OrWU
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> Btan
    190:191:void deleteSession(react.remote.server.KnownUser) -> xFgk
    195:195:java.lang.String createToken() -> psGo
react.remote.server.ServerInfo -> OXqj:
    java.lang.String motd -> wyBD
    int gameProtocol -> GJTc
    java.lang.String gameVersion -> RlVo
    java.lang.String reactVersion -> FXRw
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> MTWL
    int viewDistance -> viewDistance
    int gamePort -> hksy
    java.lang.String gameAddress -> tVEr
    react.glang.GList remotePlugins -> iEDt
    react.glang.GList worlds -> PUPF
    react.glang.GList actions -> rGMl
    react.glang.GList samplers -> MLEJ
    26:26:react.remote.server.ServerInfo empty() -> dohL
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> Btan
    146:159:void fromBytes(react.gnet.streams.ISS) -> Btan
    java.lang.String dgetMotd() -> jVxu
    int dgetGameProtocol() -> RsXu
    java.lang.String dgetGameVersion() -> NUja
    java.lang.String dgetReactVersion() -> DsBO
    int dgetMaxPlayers() -> ySDq
    react.glang.GList dgetConnectedPlayers() -> miSi
    int dgetViewDistance() -> uOIB
    int dgetGamePort() -> XlWq
    java.lang.String dgetGameAddress() -> YMWq
    react.glang.GList dgetRemotePlugins() -> HCWE
    react.glang.GList dgetWorlds() -> byuC
    react.glang.GList dgetActions() -> LPCn
    react.glang.GList dgetSamplers() -> ktPE
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> XBQp
    199:199:java.lang.String getGameVersion() -> RkTa
    204:204:java.lang.String getReactVersion() -> EvQB
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> Oaiw
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> RkUK
    229:229:java.lang.String getGameAddress() -> NpIv
    234:234:react.glang.GList getRemotePlugins() -> Iykd
    239:239:react.glang.GList getWorlds() -> iKrj
    244:244:react.glang.GList getActions() -> ThXa
    249:249:react.glang.GList getSamplers() -> qvOI
react.remote.server.ServerInfo$1 -> OXqj$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> byuC
    37:37:int dgetViewDistance() -> uOIB
    43:43:react.glang.GList dgetRemotePlugins() -> HCWE
    49:49:java.lang.String dgetReactVersion() -> DsBO
    55:55:java.lang.String dgetMotd() -> jVxu
    61:61:int dgetMaxPlayers() -> ySDq
    67:67:java.lang.String dgetGameVersion() -> NUja
    73:73:int dgetGameProtocol() -> RsXu
    79:79:int dgetGamePort() -> XlWq
    85:85:java.lang.String dgetGameAddress() -> YMWq
    91:91:react.glang.GList dgetConnectedPlayers() -> miSi
    97:97:react.glang.GList dgetActions() -> LPCn
    103:103:react.glang.GList dgetSamplers() -> ktPE
react.remote.server.packet.ComputedFrame -> QgjB:
    react.glang.GMap values -> dVuq
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> Btan
    28:36:void fromBytes(react.gnet.streams.ISS) -> Btan
    40:40:react.glang.GMap getValues() -> WYBB
    45:46:void setValues(react.glang.GMap) -> CgEC
react.remote.server.packet.SPacketOk -> maIn:
    boolean ok -> sIpO
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Btan
    33:34:void fromBytes(react.gnet.streams.ISS) -> Btan
    38:38:boolean isOk() -> wLkR
    43:44:void setOk(boolean) -> xGIH
react.remote.server.packet.SPacketSendFrames -> nBIn:
    react.glang.GMap frames -> xjbL
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> Btan
    36:44:void fromBytes(react.gnet.streams.ISS) -> Btan
    48:48:react.glang.GMap getFrames() -> dgTQ
    53:54:void setFrames(react.glang.GMap) -> OrWU
react.remote.server.packet.SPacketSendInfo -> tmnO:
    react.remote.server.ServerInfo info -> HoXP
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Btan
    33:34:void fromBytes(react.gnet.streams.ISS) -> Btan
    38:38:react.remote.server.ServerInfo getInfo() -> Gsbu
    43:44:void setInfo(react.remote.server.ServerInfo) -> Btan
react.remote.server.packet.SPacketSendToken -> Edfw:
    java.lang.String token -> nBnb
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Btan
    33:34:void fromBytes(react.gnet.streams.ISS) -> Btan
    38:38:java.lang.String getToken() -> ntpr
    43:44:void setToken(java.lang.String) -> rpMj
react.remote.server.packet.ServerPacket -> kstN:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> Btan
    void fromBytes(react.gnet.streams.ISS) -> Btan
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> NwtE
    42:42:java.lang.String getPacketName() -> wMDv
react.remote.server.packet.ServerPacketType -> Fxkm:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> YVwG
    react.remote.server.packet.ServerPacketType SEND_INFO -> xaqE
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> iUdo
    react.remote.server.packet.ServerPacketType OK -> TikC
    react.remote.server.packet.ServerPacketType[] $VALUES -> RtfQ
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> QMwK:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleAsyncQueue$1 -> QMwK$1:
    react.sampler.SampleAsyncQueue this$0 -> bsTE
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleChunkTime -> ArOE:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleChunkTime$1 -> ArOE$1:
    react.sampler.SampleChunkTime this$0 -> JmOY
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleChunksLoaded -> JtWg:
    react.graph.IFormatter formatter -> bsNq
    17:27:void <init>() -> <init>
    32:38:void construct() -> uxuV
    43:44:void sample() -> EJiV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleChunksLoaded$1 -> JtWg$1:
    react.sampler.SampleChunksLoaded this$0 -> pYyJ
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> amyd
react.sampler.SampleChunksLoadedPerSecond -> Yfor:
    react.gmath.Average a -> uqyU
    react.graph.IFormatter formatter -> bsNq
    16:29:void <init>() -> <init>
    34:40:void construct() -> uxuV
    45:47:void sample() -> EJiV
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleChunksLoadedPerSecond$1 -> Yfor$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> QaCG
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> amyd
react.sampler.SampleEntitiesDrops -> pQAN:
    react.graph.IFormatter formatter -> bsNq
    17:27:void <init>() -> <init>
    32:38:void construct() -> uxuV
    43:44:void sample() -> EJiV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleEntitiesDrops$1 -> pQAN$1:
    react.sampler.SampleEntitiesDrops this$0 -> NhYo
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> amyd
react.sampler.SampleEntitiesLiving -> dVNl:
    react.graph.IFormatter formatter -> bsNq
    17:27:void <init>() -> <init>
    32:38:void construct() -> uxuV
    43:44:void sample() -> EJiV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleEntitiesLiving$1 -> dVNl$1:
    react.sampler.SampleEntitiesLiving this$0 -> yeTV
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> amyd
react.sampler.SampleEntitiesTiles -> nAha:
    react.graph.IFormatter formatter -> bsNq
    17:27:void <init>() -> <init>
    32:38:void construct() -> uxuV
    43:44:void sample() -> EJiV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleEntitiesTiles$1 -> nAha$1:
    react.sampler.SampleEntitiesTiles this$0 -> VMmt
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> amyd
react.sampler.SampleEntitiesTotal -> WaMl:
    react.graph.IFormatter formatter -> bsNq
    17:27:void <init>() -> <init>
    32:38:void construct() -> uxuV
    43:44:void sample() -> EJiV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleEntitiesTotal$1 -> WaMl$1:
    react.sampler.SampleEntitiesTotal this$0 -> iDbn
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> amyd
react.sampler.SampleEntityDroppedTicks -> Thdt:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleEntityDroppedTicks$1 -> Thdt$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> Xuvl
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleEntityTime -> cuRJ:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleEntityTime$1 -> cuRJ$1:
    react.sampler.SampleEntityTime this$0 -> XmgD
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleEntityTimeLock -> TOSY:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleEntityTimeLock$1 -> TOSY$1:
    react.sampler.SampleEntityTimeLock this$0 -> MdvY
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleExplosionTime -> YMaO:
    react.graph.IFormatter formatter -> bsNq
    17:27:void <init>() -> <init>
    32:38:void construct() -> uxuV
    43:44:void sample() -> EJiV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleExplosionTime$1 -> YMaO$1:
    react.sampler.SampleExplosionTime this$0 -> xYbx
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> amyd
react.sampler.SampleFluidPerSecond -> NMbK:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleFluidPerSecond$1 -> NMbK$1:
    react.sampler.SampleFluidPerSecond this$0 -> rPBU
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleFluidPerTick -> ivcS:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    46:53:void sample() -> EJiV
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleFluidPerTick$1 -> ivcS$1:
    react.sampler.SampleFluidPerTick this$0 -> cvYq
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleFluidTickTime -> QhMa:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleFluidTickTime$1 -> QhMa$1:
    react.sampler.SampleFluidTickTime this$0 -> RAct
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleFluidTickUtilization -> vQtQ:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    46:53:void sample() -> EJiV
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleFluidTickUtilization$1 -> vQtQ$1:
    react.sampler.SampleFluidTickUtilization this$0 -> MLGt
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleHopperPerSecond -> dDpK:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleHopperPerSecond$1 -> dDpK$1:
    react.sampler.SampleHopperPerSecond this$0 -> gPBt
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleHopperPerTick -> dEQK:
    react.graph.IFormatter formatter -> bsNq
    18:29:void <init>() -> <init>
    34:40:void construct() -> uxuV
    47:54:void sample() -> EJiV
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleHopperPerTick$1 -> dEQK$1:
    react.sampler.SampleHopperPerTick this$0 -> FWsp
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleHopperTickTime -> DriQ:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleHopperTickTime$1 -> DriQ$1:
    react.sampler.SampleHopperTickTime this$0 -> EesD
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleHopperTickUtilization -> cdPg:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    46:53:void sample() -> EJiV
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleHopperTickUtilization$1 -> cdPg$1:
    react.sampler.SampleHopperTickUtilization this$0 -> DcPd
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleMemoryAllocated -> DHUg:
    react.graph.IFormatter formatter -> bsNq
    17:27:void <init>() -> <init>
    32:38:void construct() -> uxuV
    43:44:void sample() -> EJiV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleMemoryAllocated$1 -> DHUg$1:
    react.sampler.SampleMemoryAllocated this$0 -> Xuyv
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> amyd
react.sampler.SampleMemoryAllocationPerSecond -> wewj:
    react.graph.IFormatter formatter -> bsNq
    17:27:void <init>() -> <init>
    32:38:void construct() -> uxuV
    43:44:void sample() -> EJiV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleMemoryAllocationPerSecond$1 -> wewj$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> grFA
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> amyd
react.sampler.SampleMemoryFree -> wMHA:
    react.graph.IFormatter formatter -> bsNq
    17:27:void <init>() -> <init>
    32:38:void construct() -> uxuV
    43:44:void sample() -> EJiV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleMemoryFree$1 -> wMHA$1:
    react.sampler.SampleMemoryFree this$0 -> hRda
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> amyd
react.sampler.SampleMemoryMax -> Hvdo:
    react.graph.IFormatter formatter -> bsNq
    17:27:void <init>() -> <init>
    32:38:void construct() -> uxuV
    43:44:void sample() -> EJiV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleMemoryMax$1 -> Hvdo$1:
    react.sampler.SampleMemoryMax this$0 -> xQRg
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> amyd
react.sampler.SampleMemoryUse -> HmtH:
    react.graph.IFormatter formatter -> bsNq
    17:27:void <init>() -> <init>
    32:38:void construct() -> uxuV
    43:44:void sample() -> EJiV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleMemoryUse$1 -> HmtH$1:
    react.sampler.SampleMemoryUse this$0 -> AHdA
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> amyd
react.sampler.SampleRedstonePerSecond -> fSfk:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleRedstonePerSecond$1 -> fSfk$1:
    react.sampler.SampleRedstonePerSecond this$0 -> opkX
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleRedstonePerTick -> wLfY:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    46:53:void sample() -> EJiV
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleRedstonePerTick$1 -> wLfY$1:
    react.sampler.SampleRedstonePerTick this$0 -> worF
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleRedstoneTickTime -> rgjE:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleRedstoneTickTime$1 -> rgjE$1:
    react.sampler.SampleRedstoneTickTime this$0 -> opkY
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleRedstoneTickUtilization -> TORX:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    46:53:void sample() -> EJiV
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleRedstoneTickUtilization$1 -> TORX$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> hAcV
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleSyncQueue -> cdOV:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleSyncQueue$1 -> cdOV$1:
    react.sampler.SampleSyncQueue this$0 -> OQnE
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleTickTime -> QEha:
    react.graph.IFormatter formatter -> bsNq
    react.gmath.Average aa -> VyEw
    17:29:void <init>() -> <init>
    34:40:void construct() -> uxuV
    45:47:void sample() -> EJiV
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleTickTime$1 -> QEha$1:
    react.sampler.SampleTickTime this$0 -> iEEy
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> amyd
react.sampler.SampleTickUtilization -> imqH:
    react.graph.IFormatter formatter -> bsNq
    react.gmath.Average aa -> VyEw
    17:29:void <init>() -> <init>
    34:40:void construct() -> uxuV
    45:47:void sample() -> EJiV
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleTickUtilization$1 -> imqH$1:
    react.sampler.SampleTickUtilization this$0 -> Gkvu
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> amyd
react.sampler.SampleTicksPerSecond -> KMHo:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleTicksPerSecond$1 -> KMHo$1:
    react.sampler.SampleTicksPerSecond this$0 -> JKNM
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleTileDroppedTicks -> gWIs:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleTileDroppedTicks$1 -> gWIs$1:
    react.sampler.SampleTileDroppedTicks this$0 -> oNhB
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleTileTime -> SLPD:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleTileTime$1 -> SLPD$1:
    react.sampler.SampleTileTime this$0 -> axcS
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.sampler.SampleTileTimeLock -> oxSi:
    react.graph.IFormatter formatter -> bsNq
    18:28:void <init>() -> <init>
    33:39:void construct() -> uxuV
    44:45:void sample() -> EJiV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PmMF
react.sampler.SampleTileTimeLock$1 -> oxSi$1:
    react.sampler.SampleTileTimeLock this$0 -> Ygyq
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> amyd
react.security.checkpoints.SecurityCheckpointAlpha -> eGqO:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> kQyM
    78:148:void doScan(java.lang.Runnable) -> QDwh
    152:181:byte[] readResource(java.io.File,java.lang.String) -> Btan
    186:217:react.glang.GMap scan(java.io.File) -> QDwh
    33:33:byte[] access$000(java.io.File,java.lang.String) -> QDwh
react.security.checkpoints.SecurityCheckpointAlpha$1 -> eGqO$1:
    java.lang.Runnable val$r -> Npkq
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> eGqO$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> nmgf
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> RkOl:
    java.lang.String ip -> kKMK
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> gMvq:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> gMvq$1:
    java.io.File val$f -> WHcL
    react.security.locks.SecurityLockAlpha this$0 -> YqLm
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> wfXM:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> NgBv
react.slate.PhantomSlate -> EJwF:
    react.glang.GList lines -> cCTl
    react.glang.GList viewers -> MKfd
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> iEEw
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> tCbM
    44:45:void set(int,java.lang.String) -> QDwh
    50:51:void setLines(react.glang.GList) -> pHBK
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> QgjB
    91:95:void addViewer(org.bukkit.entity.Player) -> NgBv
    100:102:void removeViewer(org.bukkit.entity.Player) -> IWRl
    107:107:react.glang.GList getViewers() -> pQHH
    113:113:boolean isViewing(org.bukkit.entity.Player) -> Grnk
    119:120:void addLine(java.lang.String) -> PmMF
    125:126:void clearLines() -> MdVP
react.slate.Slate -> xPIS:
    void build() -> QgjB
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> tCbM
    void set(int,java.lang.String) -> QDwh
    void setLines(react.glang.GList) -> pHBK
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> NgBv
    void addLine(java.lang.String) -> PmMF
    void clearLines() -> MdVP
    void removeViewer(org.bukkit.entity.Player) -> IWRl
    react.glang.GList getViewers() -> pQHH
    boolean isViewing(org.bukkit.entity.Player) -> Grnk
    void update() -> update
react.slate.SlateUtil -> pXrV:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> oNDj
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> nlco
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> Btan
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> QDwh
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> CgEC
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> Btan
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> Btan
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> QDwh
    186:196:java.lang.String convertJSON(java.lang.String) -> rNIq
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> QDwh
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> Btan
react.surge.Main -> vtVg:
    react.glang.GList plugins -> LryW
    react.glang.GMap pluginInstances -> aMqm
    react.glang.GList controllerSet -> xIDe
    react.glang.GMap anchors -> IHMu
    react.glang.GList classes -> cTXp
    java.lang.reflect.Field nsField -> iEIh
    java.lang.reflect.Field thField -> LYgi
    react.glang.GList tracks -> NOLt
    long nsf -> bbVy
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> uhhA
    90:109:long getNanoSync() -> yuSy
    114:115:void requestResetNanos() -> BSTE
    119:127:void requestReload() -> gxpm
    131:134:void requestReload(java.lang.Runnable) -> CgEC
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> Btan
    201:218:void onStop() -> rgoD
    224:224:void onPostInit() -> uNsp
    230:230:void onPreInit() -> cldJ
    234:245:void shutDownAmps() -> tnTm
    249:458:void initializeAmps() -> opGY
    463:504:void doScan() -> ggoF
    508:530:void scanForPoolDefiners() -> Aicq
    534:550:void scanForRawEvents() -> nuUH
    554:570:void scanForDynamicTrack() -> Blfo
    574:595:void scanForAmps() -> fJxU
    600:611:void onTick() -> WPDN
react.surge.Main$1 -> vtVg$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> ntnq:
    react.surge.control.AmpedPlugin plugin -> AaxJ
    boolean connected -> connected
    int masterTask -> xbWC
    java.lang.Runnable onReload -> kvDV
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> ivfW
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> DsMM
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> Btan
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> Btan
    123:124:void stopTask(int) -> eaVu
    128:128:react.surge.control.AmpedPlugin getPlugin() -> XKBi
    133:133:int getMasterTask() -> XRqs
    138:138:java.lang.Runnable getOnReload() -> pHVJ
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> Btan
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> rokn
    158:159:void setOnReload(java.lang.Runnable) -> OrWU
    67:67:void access$0(react.surge.PluginAmp) -> Btan
react.surge.PluginAmp$1 -> ntnq$1:
    react.surge.PluginAmp this$0 -> SxOR
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> ntnq$2:
    react.surge.PluginAmp this$0 -> SxOR
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> ntnq$3:
    react.surge.PluginAmp this$0 -> SxOR
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> MtrI:
    react.surge.PluginAmp amp -> VMru
    react.glang.GList tickComponents -> qTor
    react.glang.GList atickComponents -> EDSF
    react.surge.sched.TaskManager taskmgr -> hSHG
    react.surge.hotload.HotloadManager hotloadmgr -> fDPf
    java.lang.Thread mainThread -> rhuM
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> Btan
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> jhTy
    44:44:java.io.File folder() -> VxAP
    49:51:java.io.File getPluginJarFile() -> pbID
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> OrWU
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> cJaJ
    74:74:react.glang.GList getTickComponents() -> kAYs
    79:79:react.glang.GList getAsyncTickComponents() -> dDua
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> Btan
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> QDwh
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> QDwh
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> RjvB
    126:126:boolean hasAmp() -> vAYc
    131:131:react.surge.PluginAmp getAmp() -> ObLy
    136:136:react.surge.sched.TaskManager getTaskManager() -> dUwQ
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> hkVI
react.surge.cluster.Cluster -> RIMR:
    react.surge.cluster.ClusterType type -> RBGq
    java.lang.Object t -> hlIk
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> tCdG
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> OGsY:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> GsaN:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> OafL:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> lfYN:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> FEkl:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> QyPn:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> XdSP:
    react.surge.cluster.ClusterType INT -> PTrg
    react.surge.cluster.ClusterType BOOLEAN -> Obpx
    react.surge.cluster.ClusterType STRING -> iMYd
    react.surge.cluster.ClusterType STRING_LIST -> MKhN
    react.surge.cluster.ClusterType DOUBLE -> fMAC
    react.surge.cluster.ClusterType LONG -> DlCC
    react.surge.cluster.ClusterType[] ENUM$VALUES -> MBwO
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> eixC:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> nLGc
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> Btan
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> Btan
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> yuWM
react.surge.cluster.ConfigurationDataOutput -> pbHK:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> QDwh
react.surge.cluster.DataCluster -> XSRB:
    react.glang.GMap clusters -> bsWi
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> Mcvn
    29:33:void fromJson(react.json.JSONObject) -> xFgk
    37:44:react.json.JSONObject toJson() -> XuXb
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> xYBY
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> Btan
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> EJiV
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> rUxE
    194:195:void set(java.lang.String,int) -> xFgk
    199:200:void set(java.lang.String,boolean) -> CgEC
    204:205:void set(java.lang.String,double) -> CgEC
    209:210:void set(java.lang.String,long) -> CgEC
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> Btan
react.surge.cluster.ICluster -> GYqD:
    react.surge.cluster.ClusterType getType() -> tCdG
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> cSQJ:
react.surge.cluster.IDataInput -> Yftj:
    react.surge.cluster.DataCluster read(java.io.File) -> CgEC
react.surge.cluster.IDataOutput -> MAoh:
    void write(react.surge.cluster.DataCluster,java.io.File) -> Btan
react.surge.cluster.Key -> maOY:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> iTbS:
    int value() -> value
react.surge.cluster.KeyStore -> MSSA:
react.surge.cluster.ReflectedConfigurationException -> hjpQ:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> GQaI:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> CgEC
react.surge.cluster.YamlDataOutput -> FyRV:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> Btan
react.surge.collection.GSound -> AiaB:
    java.lang.String sound -> jGkL
    org.bukkit.Sound iSound -> cSxG
    java.lang.Float volume -> iMWx
    java.lang.Float pitch -> ELbS
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> Txsq
    61:72:void play(org.bukkit.Location) -> rUxE
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> Btan
    93:93:java.lang.String getSound() -> kQys
    98:99:void setSound(java.lang.String) -> uxuV
    103:103:org.bukkit.Sound getiSound() -> yRrc
    108:109:void setiSound(org.bukkit.Sound) -> Btan
    113:113:java.lang.Float getVolume() -> GREl
    118:119:void setVolume(java.lang.Float) -> Btan
    123:123:java.lang.Float getPitch() -> Wqtt
    128:129:void setPitch(java.lang.Float) -> QDwh
react.surge.control.AmpedPlugin -> kJFm:
    react.glang.GList controllers -> esow
    react.gconcurrent.ParallelPoolManager pp -> EneW
    react.surge.server.CoreTickThread ctt -> vvBM
    24:50:void <init>() -> <init>
    void doScan() -> ggoF
    long getNanoSync() -> yuSy
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:91:void onDisable() -> onDisable
    96:96:react.glang.GList getControllers() -> pQJK
    102:103:void registerController(react.surge.control.IController) -> Btan
    108:119:void onTick() -> WPDN
    124:124:java.lang.String getTickName() -> eGii
    130:130:react.gconcurrent.ParallelPoolManager getThreadPool() -> eQKX
    136:251:void destroyOldThreads() -> QNaU
    void onControllerRegistry() -> uhhA
    void onStart(react.surge.util.Protocol) -> Btan
    void onStop() -> rgoD
    void onPostInit() -> uNsp
    void onPreInit() -> cldJ
react.surge.control.AmpedPlugin$1 -> kJFm$1:
    react.surge.control.AmpedPlugin this$0 -> yCXf
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> JQoS
react.surge.control.AmpedPlugin$2 -> kJFm$2:
    react.surge.control.AmpedPlugin this$0 -> yCXf
    1:149:void <init>(react.surge.control.AmpedPlugin) -> <init>
    154:244:void run() -> run
react.surge.control.Control -> HTdM:
react.surge.control.Controller -> VMLG:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> GcCa:
react.surge.control.Enable -> wMHf:
react.surge.control.IController -> kbvu:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> FWNA:
react.surge.control.Plugin -> fukU:
react.surge.control.SurgePlugin -> NUrx:
    void onStart(react.surge.util.Protocol) -> Btan
    void onStop() -> rgoD
    void onPostInit() -> uNsp
    void onPreInit() -> cldJ
    void onControllerRegistry() -> uhhA
    void registerController(react.surge.control.IController) -> Btan
    react.glang.GList getControllers() -> pQJK
    react.gconcurrent.ParallelPoolManager getThreadPool() -> eQKX
react.surge.hotload.HotloadManager -> tLPW:
    react.glang.GMap filemods -> OIaN
    react.glang.GMap filesizes -> QOfl
    react.glang.GMap fileacts -> vvDy
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> Btan
    35:38:void untrack(java.io.File) -> OrWU
    42:45:void untrackall() -> ytui
    50:86:void onTick() -> WPDN
    91:91:java.lang.String getTickName() -> eGii
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> Btan
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> QDwh
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> CgEC
react.surge.hotload.HotloadManager$1 -> tLPW$1:
    react.surge.hotload.HotloadManager this$0 -> RSJn
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> iUAp:
    boolean init -> aWEw
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> lowH
    java.lang.Class IChatBaseComponent -> QXYA
    java.lang.Class ChatSerializer -> jrbU
    java.lang.Class PacketPlayOutPlayerInfo -> NOOW
    java.lang.Class PlayerInfoData -> SpAN
    java.lang.Class EnumPlayerInfoAction -> rWuU
    java.lang.Class GameProfile -> NqSF
    java.lang.Class EnumGamemode -> JTEO
    java.lang.Class TileEntitySkull -> wVce
    java.lang.Class LoadingCache -> tVLK
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> ymBA:
    react.surge.nms.NMSX bountifulAPI -> KNVg
    boolean useOldMethods -> ySxm
    java.lang.String nmsver -> wgfE
    java.lang.Object eTimes -> aVed
    java.lang.Object eTitle -> iDix
    java.lang.Object eSubtitle -> pcRN
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> Btan
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> eaVu
    75:89:java.lang.Class getCBClass(java.lang.String) -> rokn
    96:104:java.lang.Object serializeChat(java.lang.String) -> aTip
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> QDwh
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> Btan
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> hQba
    151:151:java.lang.String craftPackage() -> FEqL
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> Btan
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> Btan
    197:207:java.lang.Class getNMSClass(java.lang.String) -> NLrq
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> Btan
    279:280:void clearTitle(org.bukkit.entity.Player) -> uWPk
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> QDwh
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> Btan
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> Btan
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> XkrO
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> rUxE
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> QDxG
    434:447:int ping(org.bukkit.entity.Player) -> Rrmv
react.surge.nms.NMSX$1 -> ymBA$1:
    org.bukkit.entity.Player val$player -> SxFb
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> ymBA$2:
    org.bukkit.entity.Player val$player -> SxFb
    java.lang.String val$message -> EfWq
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> XmCS:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> ooiQ
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> Btan
    68:82:void clearTitle(org.bukkit.entity.Player) -> uWPk
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> Btan
react.surge.nms.PacketUtil$V -> XmCS$Btan:
    react.surge.nms.PacketUtil$V R17 -> PoIC
    react.surge.nms.PacketUtil$V R18 -> XCYW
    react.surge.nms.PacketUtil$V R19 -> XCYX
    react.surge.nms.PacketUtil$V R111 -> ECrY
    react.surge.nms.PacketUtil$V R110 -> gPFR
    react.surge.nms.PacketUtil$V R112 -> GuMc
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> vubt
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> WrOx:
    java.lang.String title -> title
    java.lang.String subTitle -> dNlD
    java.lang.String action -> action
    java.lang.Integer fadeIn -> eROe
    java.lang.Integer fadeOut -> kdcF
    java.lang.Integer stayTime -> gWvD
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> SnBP
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> hYsP
    79:80:void setSubTitle(java.lang.String) -> PJhj
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> IXKy
    99:100:void setFadeIn(java.lang.Integer) -> CgEC
    104:104:java.lang.Integer getFadeOut() -> cSTR
    109:110:void setFadeOut(java.lang.Integer) -> OrWU
    114:114:java.lang.Integer getStayTime() -> HKtt
    119:120:void setStayTime(java.lang.Integer) -> xFgk
react.surge.nms.VersionBukkit -> vAUE:
    react.surge.nms.VersionBukkit VU -> VFEO
    react.surge.nms.VersionBukkit V7 -> KNVC
    react.surge.nms.VersionBukkit V8 -> IHOf
    react.surge.nms.VersionBukkit V9 -> KxiR
    react.surge.nms.VersionBukkit V11 -> VowN
    react.surge.nms.VersionBukkit V111 -> wWCn
    react.surge.nms.VersionBukkit V112 -> rrHQ
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> ffTe
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> erlL
    27:32:boolean uc() -> eaiw
    37:67:react.surge.nms.VersionBukkit get() -> BKGW
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> jqVk:
    void burst(java.lang.Object) -> VLVl
    void setTimeLock(double) -> IWRl
    double getEstimatedTimeUse() -> HwKA
    int flush() -> XKDR
    int flush(react.gbench.Profiler) -> Btan
    void queue(java.lang.Object) -> NgBv
    void queue(java.util.List) -> CgEC
    void queue(java.lang.Object[]) -> Btan
react.surge.sched.ICancellable -> dgTQ:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> kRVT:
    void onTick() -> WPDN
    java.lang.String getTickName() -> eGii
react.surge.sched.ITask -> PeKg:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> Rses
    java.lang.String getName() -> getName
    double getComputeTime() -> YNFt
    double getTotalComputeTime() -> RYsX
    double getActiveTime() -> ifHE
    boolean hasCompleted() -> aMNH
react.surge.sched.Task -> qTGe:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> QGXg
    double computeTime -> oybl
    double totalComputeTime -> NqSv
    double activeTime -> bHiN
    boolean completed -> completed
    react.gbench.Profiler profiler -> TXqm
    react.gbench.Profiler activeProfiler -> JBdQ
    int ticks -> Dsvp
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> OrWU
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> Rses
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> YNFt
    150:150:boolean hasCompleted() -> aMNH
    156:156:double getTotalComputeTime() -> RYsX
    162:162:double getActiveTime() -> ifHE
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> CgEC
    15:15:void access$1(react.surge.sched.Task,boolean) -> Btan
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> OrWU
    14:14:void access$3(react.surge.sched.Task,double) -> Btan
    12:12:void access$4(react.surge.sched.Task,double) -> QDwh
    14:14:double access$5(react.surge.sched.Task) -> xFgk
    13:13:void access$6(react.surge.sched.Task,double) -> CgEC
    13:13:double access$7(react.surge.sched.Task) -> rUxE
    12:12:double access$8(react.surge.sched.Task) -> eGah
react.surge.sched.Task$1 -> qTGe$1:
    react.surge.sched.Task this$0 -> KViG
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> qTGe$2:
    react.surge.sched.Task this$0 -> KViG
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> qTGe$3:
    react.surge.sched.Task this$0 -> KViG
    int val$total -> kSdW
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> gWLB:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> QGXg
    double computeTime -> oybl
    double totalComputeTime -> NqSv
    double activeTime -> bHiN
    boolean completed -> completed
    react.gbench.Profiler profiler -> TXqm
    react.gbench.Profiler activeProfiler -> JBdQ
    int ticks -> Dsvp
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> OrWU
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> Rses
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> YNFt
    101:101:boolean hasCompleted() -> aMNH
    107:107:double getTotalComputeTime() -> RYsX
    113:113:double getActiveTime() -> ifHE
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> Btan
    12:12:void access$1(react.surge.sched.TaskLater,double) -> Btan
    13:13:double access$2(react.surge.sched.TaskLater) -> QDwh
    12:12:double access$3(react.surge.sched.TaskLater) -> CgEC
    13:13:void access$4(react.surge.sched.TaskLater,double) -> QDwh
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> OrWU
    14:14:double access$6(react.surge.sched.TaskLater) -> xFgk
    14:14:void access$7(react.surge.sched.TaskLater,double) -> CgEC
react.surge.sched.TaskLater$1 -> gWLB$1:
    react.surge.sched.TaskLater this$0 -> cnPE
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> ntpr:
    react.glang.GList tasks -> FiAE
    react.glang.GMap taskProfiles -> YXBI
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> Btan
    25:35:void onTick() -> WPDN
    39:40:void putFinishingTask(react.surge.sched.ITask) -> QDwh
    44:53:void putTask(react.surge.sched.ITask) -> CgEC
    58:58:java.lang.String getTickName() -> eGii
    63:63:react.glang.GList getTasks() -> LOpu
    68:68:react.glang.GMap getTaskProfiles() -> CpKi
react.surge.sched.TaskProfile -> Wqoi:
    double activeTime -> bHiN
    double computeTickTime -> FrNS
    double computeTime -> oybl
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> ifHE
    23:24:void setActiveTime(double) -> Grnk
    28:28:double getComputeTickTime() -> anoc
    33:34:void setComputeTickTime(double) -> Txsq
    38:38:double getComputeTime() -> YNFt
    43:44:void setComputeTime(double) -> uWPk
react.surge.server.AsyncTick -> Gsbu:
react.surge.server.CPS -> psGo:
    react.glang.GMap keys -> tVNN
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> QooM
    46:99:void scan() -> sHos
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> CgEC
react.surge.server.CoreTickThread -> dohL:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> XBQp:
    long memoryFree -> jiqv
    long memoryUsed -> vTCh
    long memoryMax -> axkL
    long lastMemoryUsed -> qfVc
    long memoryUsedAfterGC -> MnQc
    long allocated -> QWyd
    long collected -> OtWo
    long collections -> OQsm
    long sms -> OJEF
    long memoryAllocatedPerTick -> vJrK
    long memoryCollectedPerTick -> KNYN
    long memoryFullyAllocatedPerTick -> rFvJ
    long mah -> JCFL
    long mahs -> LHiP
    22:39:void <init>() -> <init>
    void onAllocationSet() -> uhho
    46:98:void run() -> run
    102:102:long getMemoryFree() -> LYCc
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> BtyW
    117:117:long getLastMemoryUsed() -> Gjuc
    122:122:long getMemoryUsedAfterGC() -> BliN
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> gqAx
    137:137:long getCollections() -> oUuO
    142:142:long getSms() -> Kwbf
    147:147:long getMemoryAllocatedPerTick() -> QqCu
    152:152:long getMemoryCollectedPerTick() -> HvjP
    157:157:long getMemoryFullyAllocatedPerTick() -> ofvh
    162:162:long getMah() -> XAsA
    167:167:long getMahs() -> ytwt
react.surge.server.SuperSampler -> RkTa:
    react.gmath.Average ticksPerSecondL -> UlvH
    react.gmath.Average tickTimeL -> oNnA
    react.gmath.Average mahL -> VpYi
    double ticksPerSecond -> gOUA
    double ticksPerSecondRaw -> XKlC
    double tickTime -> rFuX
    double tickTimeRaw -> IbDQ
    boolean running -> running
    boolean frozen -> RSLK
    double tickUtilizationRaw -> JSeA
    double tickUtilization -> lMuO
    double leftoverTickTime -> vdcs
    long memoryUse -> yKii
    long memoryAllocated -> NXBF
    long memoryCollected -> ptUJ
    long mahs -> LHiP
    int totalChunks -> bPxM
    int totalEntities -> YNoU
    int totalDrops -> ifmt
    int totalTiles -> yBwn
    int totalLiving -> aWGf
    int chunksLoaded -> HEOJ
    int chunksUnloaded -> iwpO
    react.surge.server.WorldMonitor worldMonitor -> ynPt
    react.surge.server.TPSMonitor tpsMonitor -> BwDj
    react.surge.server.MemoryMonitor memoryMonitor -> jadd
    java.lang.StackTraceElement[] lockStack -> ETxu
    react.glang.GMap spikes -> ndgQ
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> WPDN
    154:154:java.lang.String getTickName() -> eGii
    159:159:react.gmath.Average getTicksPerSecondL() -> WrWe
    164:164:double getTicksPerSecond() -> WqkI
    169:169:double getTicksPerSecondRaw() -> hRFP
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> WYEo
    184:184:react.gmath.Average getTickTimeL() -> ycvj
    189:189:double getTickTime() -> PvTN
    194:194:double getTickTimeRaw() -> ifJf
    199:199:double getTickUtilizationRaw() -> ktaW
    204:204:double getTickUtilization() -> NNJs
    209:209:double getLeftoverTickTime() -> GHuc
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> nSUs
    219:219:long getMemoryUse() -> HLYf
    224:224:long getMemoryAllocated() -> RbhN
    229:229:long getMemoryCollected() -> LXek
    234:234:react.gmath.Average getMahL() -> VoTu
    239:239:long getMahs() -> ytwt
    244:244:int getTotalChunks() -> tUHK
    249:249:int getTotalEntities() -> xquG
    254:254:int getTotalDrops() -> YDxk
    259:259:int getTotalTiles() -> bXdc
    264:264:int getTotalLiving() -> PTQi
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> pGyp
    274:274:int getChunksLoaded() -> Jtbp
    279:279:int getChunksUnloaded() -> pamE
    284:285:void setTicksPerSecondL(react.gmath.Average) -> Btan
    289:290:void setTickTimeL(react.gmath.Average) -> QDwh
    294:295:void setMahL(react.gmath.Average) -> CgEC
    299:300:void setTicksPerSecond(double) -> YfbV
    304:305:void setTicksPerSecondRaw(double) -> Rrmv
    309:310:void setTickTime(double) -> SnBP
    314:315:void setTickTimeRaw(double) -> STPF
    319:320:void setRunning(boolean) -> amyd
    324:325:void setTickUtilizationRaw(double) -> qmGO
    329:330:void setTickUtilization(double) -> gDvV
    334:335:void setLeftoverTickTime(double) -> XuBC
    339:340:void setMemoryUse(long) -> IWRl
    344:345:void setMemoryAllocated(long) -> Grnk
    349:350:void setMemoryCollected(long) -> Txsq
    354:355:void setMahs(long) -> uWPk
    359:360:void setTotalChunks(int) -> aTip
    364:365:void setTotalEntities(int) -> NLrq
    369:370:void setTotalDrops(int) -> XkrO
    374:375:void setTotalTiles(int) -> PJhj
    379:380:void setTotalLiving(int) -> QooM
    384:385:void setChunksLoaded(int) -> oVCD
    389:390:void setChunksUnloaded(int) -> kIVD
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> Btan
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> Btan
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> Btan
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> YNJi
    419:419:react.glang.GMap getSpikes() -> ndIT
    31:31:void access$0(react.surge.server.SuperSampler,int) -> Btan
    33:33:void access$1(react.surge.server.SuperSampler,int) -> QDwh
    34:34:void access$2(react.surge.server.SuperSampler,int) -> CgEC
    32:32:void access$3(react.surge.server.SuperSampler,int) -> OrWU
    35:35:void access$4(react.surge.server.SuperSampler,int) -> xFgk
    36:36:void access$5(react.surge.server.SuperSampler,int) -> rUxE
    37:37:void access$6(react.surge.server.SuperSampler,int) -> eGah
    19:19:void access$7(react.surge.server.SuperSampler,double) -> Btan
    21:21:void access$8(react.surge.server.SuperSampler,double) -> QDwh
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> Btan
    19:19:double access$10(react.surge.server.SuperSampler) -> QDwh
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> CgEC
    21:21:double access$12(react.surge.server.SuperSampler) -> OrWU
    18:18:void access$13(react.surge.server.SuperSampler,double) -> CgEC
    20:20:void access$14(react.surge.server.SuperSampler,double) -> OrWU
    24:24:void access$15(react.surge.server.SuperSampler,double) -> xFgk
    20:20:double access$16(react.surge.server.SuperSampler) -> xFgk
    25:25:void access$17(react.surge.server.SuperSampler,double) -> rUxE
    25:25:double access$18(react.surge.server.SuperSampler) -> rUxE
    26:26:void access$19(react.surge.server.SuperSampler,double) -> eGah
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> Btan
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> eGah
    27:27:void access$22(react.surge.server.SuperSampler,long) -> Btan
    28:28:void access$23(react.surge.server.SuperSampler,long) -> QDwh
    29:29:void access$24(react.surge.server.SuperSampler,long) -> CgEC
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> QDxG
    30:30:void access$26(react.surge.server.SuperSampler,long) -> OrWU
react.surge.server.SuperSampler$1 -> RkTa$1:
    react.surge.server.SuperSampler this$0 -> BTaA
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> Btan
react.surge.server.SuperSampler$2 -> RkTa$2:
    react.surge.server.SuperSampler this$0 -> BTaA
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> Kwew
    106:107:void onSpike() -> mHCT
react.surge.server.SuperSampler$3 -> RkTa$3:
    react.surge.server.SuperSampler this$0 -> BTaA
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> uhho
react.surge.server.TPSMonitor -> EvQB:
    double tickTimeMS -> SpDo
    double rawTicksPerSecond -> ahLd
    react.gbench.Profiler tickProfiler -> uitE
    react.gbench.Profiler tickTimeProfiler -> lWIb
    boolean ticked -> pcVF
    java.lang.Thread$State lastState -> XLPO
    double actualTickTimeMS -> gPKL
    double ltt -> vCDc
    long lastTick -> TPHs
    boolean frozen -> RSLK
    java.lang.StackTraceElement[] lockedStack -> kmYC
    double lmsx -> CXCn
    23:40:void <init>() -> <init>
    void onTicked() -> Kwew
    void onSpike() -> mHCT
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> Btan
    160:160:double getTickTimeMS() -> dEXh
    165:165:double getRawTicksPerSecond() -> FyWD
    170:170:react.gbench.Profiler getTickProfiler() -> xOpm
    175:175:boolean isTicked() -> IXMD
    180:181:void markTick() -> UJLx
    185:185:react.gbench.Profiler getTickTimeProfiler() -> jNxk
    190:190:java.lang.Thread$State getLastState() -> mPRn
    195:195:double getActualTickTimeMS() -> UuAy
    200:200:double getLtt() -> GHuD
    205:205:long getLastTick() -> oMTw
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> kJKo
react.surge.server.WorldMonitor -> Oaiw:
    boolean chunksChanged -> ObvG
    boolean dropChanged -> mjmA
    boolean tileChanged -> ynOw
    boolean livingChanged -> ynOx
    boolean totalChanged -> dXAu
    boolean updated -> DRUn
    int totalChunks -> bPxM
    int totalDrops -> ifmt
    int totalTiles -> yBwn
    int totalLiving -> aWGf
    int totalEntities -> YNoU
    int chunksLoaded -> HEOJ
    int chunksUnloaded -> iwpO
    long ms -> tCbM
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> Btan
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> QDwh
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> Btan
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> Btan
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> Btan
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> Btan
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> Btan
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> Btan
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> Btan
    130:131:void doUpdate() -> QOBx
    135:186:void sample() -> EJiV
    190:196:void sampleTotalCount() -> XJfO
    200:206:void sampleLivingCount() -> tLUc
    210:238:void sampleTileCount() -> Fgte
    242:248:void sampleDropCount() -> BBXC
    252:258:void sampleChunkCount() -> aVBF
react.surge.text.PhantomSpinner -> RkUK:
    react.surge.text.ProgressSpinner s -> aVhY
    react.surge.text.ProgressSpinner c -> GlaF
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> NpIv:
    java.lang.String[] chars -> nKln
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> ETwt
    react.surge.text.ProgressSpinner NETWORK -> JJvB
    react.surge.text.ProgressSpinner CIRCLES -> Soce
    react.surge.text.ProgressSpinner RANDOMS -> gPIj
    react.surge.text.ProgressSpinner MERGERS -> UmYS
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> QhTp
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> Iykd:
    int value() -> value
react.surge.util.Area -> iKrj:
    org.bukkit.Location location -> lVhG
    java.lang.Double radius -> ywAG
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> Btan
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> tLUj
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> eGah
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> QDxG
    109:109:boolean isWithin(org.bukkit.Location) -> vHrQ
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> OrWU
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> Btan
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> yctm
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> HwPC
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> IVsP
    257:257:java.lang.Double getRadius() -> yJgO
    268:269:void setRadius(java.lang.Double) -> CgEC
    278:283:org.bukkit.Location random() -> yRvw
react.surge.util.Axis -> qvOI:
    react.surge.util.Axis X -> VNXu
    react.surge.util.Axis Y -> dyeB
    react.surge.util.Axis Z -> AtBP
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> Okge
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> PvUt
    29:29:org.bukkit.util.Vector negative() -> GYyK
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> WYBB:
    react.surge.util.BlastResistance BARRIER -> DQvH
    react.surge.util.BlastResistance BEDROCK -> xkPY
    react.surge.util.BlastResistance COMMAND -> lVkW
    react.surge.util.BlastResistance ENDER_PORTAL -> TPfL
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> xsaC
    react.surge.util.BlastResistance ANVIL -> wWLK
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> Enmo
    react.surge.util.BlastResistance OBSIDIAN -> Bvef
    react.surge.util.BlastResistance ENDER_CHEST -> JdkY
    react.surge.util.BlastResistance WATER -> AINx
    react.surge.util.BlastResistance LAVA -> WINa
    react.surge.util.BlastResistance STATIONARY_WATER -> Obxp
    react.surge.util.BlastResistance DRAGON_EGG -> HxWt
    react.surge.util.BlastResistance ENDER_STONE -> tDod
    react.surge.util.BlastResistance COAL_BLOCK -> axns
    react.surge.util.BlastResistance DIAMOND_BLOCK -> jPdb
    react.surge.util.BlastResistance EMERALD_BLOCK -> kdiU
    react.surge.util.BlastResistance GOLD_BLOCK -> pkgy
    react.surge.util.BlastResistance IRON_BLOCK -> ubGF
    react.surge.util.BlastResistance REDSTONE_BLOCK -> whKq
    react.surge.util.BlastResistance BRICK -> RdQc
    react.surge.util.BlastResistance BRICK_STAIRS -> pRVJ
    react.surge.util.BlastResistance HARD_CLAY -> GmDC
    react.surge.util.BlastResistance STONE -> vBeL
    react.surge.util.BlastResistance SMOOTH_BRICK -> txUA
    react.surge.util.BlastResistance SMOOTH_STAIRS -> Uujx
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> YWdU
    react.surge.util.BlastResistance STONE_SLAB2 -> ynQn
    react.surge.util.BlastResistance IRON_DOOR -> pATb
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> RmCS
    react.surge.util.BlastResistance IRON_TRAPDOOR -> kBem
    react.surge.util.BlastResistance MOB_SPAWNER -> Ypuc
    react.surge.util.BlastResistance WEB -> raLb
    react.surge.util.BlastResistance DISPENSER -> HpFp
    react.surge.util.BlastResistance DROPPER -> AkRv
    react.surge.util.BlastResistance FURNACE -> HgVJ
    react.surge.util.BlastResistance BURNING_FURNACE -> KgnD
    react.surge.util.BlastResistance BEACON -> pJDp
    react.surge.util.BlastResistance COAL_ORE -> iEOx
    react.surge.util.BlastResistance COCOA -> NqWf
    react.surge.util.BlastResistance DIAMOND_ORE -> DcYt
    react.surge.util.BlastResistance EMERALD_ORE -> lhKx
    react.surge.util.BlastResistance FENCE -> NGDc
    react.surge.util.BlastResistance FENCE_GATE -> DRYG
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> rOit
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> iDpD
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> WYoD
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> DkmF
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> LIQU
    react.surge.util.BlastResistance ACACIA_FENCE -> BKtD
    react.surge.util.BlastResistance BIRCH_FENCE -> WHom
    react.surge.util.BlastResistance DARK_OAK_FENCE -> wWNM
    react.surge.util.BlastResistance SPRUCE_FENCE -> WHob
    react.surge.util.BlastResistance JUNGLE_FENCE -> mjqp
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> cLTI
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> wWMR
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> cUDl
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> uYWT
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> lFLa
    react.surge.util.BlastResistance QUARTZ_STAIRS -> BCeC
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> jQFo
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> kBhD
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> OAXF
    react.surge.util.BlastResistance WOOD_STAIRS -> NOVc
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> ynTU
    react.surge.util.BlastResistance ACACIA_DOOR -> toeL
    react.surge.util.BlastResistance BIRCH_DOOR -> hBOY
    react.surge.util.BlastResistance DARK_OAK_DOOR -> pAUj
    react.surge.util.BlastResistance SPRUCE_DOOR -> OJIk
    react.surge.util.BlastResistance JUNGLE_DOOR -> RmEi
    react.surge.util.BlastResistance GOLD_ORE -> HfwR
    react.surge.util.BlastResistance HOPPER -> cviD
    react.surge.util.BlastResistance IRON_ORE -> cefr
    react.surge.util.BlastResistance LAPIS_BLOCK -> Qqsy
    react.surge.util.BlastResistance LAPIS_ORE -> xtEd
    react.surge.util.BlastResistance QUARTZ_ORE -> mcDe
    react.surge.util.BlastResistance REDSTONE_ORE -> WRDU
    react.surge.util.BlastResistance TRAP_DOOR -> Kgqy
    react.surge.util.BlastResistance WOOD -> jXya
    react.surge.util.BlastResistance CHEST -> tNGK
    react.surge.util.BlastResistance TRAPPED_CHEST -> sBQf
    react.surge.util.BlastResistance WORKBENCH -> wqAh
    react.surge.util.BlastResistance CAULDRON -> oFex
    react.surge.util.BlastResistance LOG -> vdmL
    react.surge.util.BlastResistance LOG_2 -> QaUB
    react.surge.util.BlastResistance BOOKSHELF -> kSlP
    react.surge.util.BlastResistance BANNER -> XnXv
    react.surge.util.BlastResistance STANDING_BANNER -> vBjF
    react.surge.util.BlastResistance WALL_BANNER -> WRBq
    react.surge.util.BlastResistance JACK_O_LANTERN -> yCbS
    react.surge.util.BlastResistance MELON_BLOCK -> AQeO
    react.surge.util.BlastResistance SKULL -> rPOa
    react.surge.util.BlastResistance PUMPKIN -> XKsb
    react.surge.util.BlastResistance SIGN -> Lbcv
    react.surge.util.BlastResistance SIGN_POST -> kunc
    react.surge.util.BlastResistance WALL_SIGN -> dNvL
    react.surge.util.BlastResistance QUARTZ_BLOCK -> IGyM
    react.surge.util.BlastResistance NOTE_BLOCK -> RRtJ
    react.surge.util.BlastResistance RED_SANDSTONE -> fMNC
    react.surge.util.BlastResistance SANDSTONE -> dWhM
    react.surge.util.BlastResistance WOOL -> sBPc
    react.surge.util.BlastResistance MONSTER_EGG -> HfyV
    react.surge.util.BlastResistance RAILS -> txYD
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> PoRR
    react.surge.util.BlastResistance DETECTOR_RAIL -> hBQa
    react.surge.util.BlastResistance POWERED_RAIL -> jHXG
    react.surge.util.BlastResistance CLAY -> EoRe
    react.surge.util.BlastResistance DIRT -> USmJ
    react.surge.util.BlastResistance GRASS -> KVqD
    react.surge.util.BlastResistance GRAVEL -> nvgM
    react.surge.util.BlastResistance SPONGE -> SVXM
    react.surge.util.BlastResistance BREWING_STAND -> JeRY
    react.surge.util.BlastResistance STONE_BUTTON -> YXKm
    react.surge.util.BlastResistance WOOD_BUTTON -> MwLn
    react.surge.util.BlastResistance CAKE_BLOCK -> HUyu
    react.surge.util.BlastResistance ICE -> gqvG
    react.surge.util.BlastResistance PACKED_ICE -> LjxC
    react.surge.util.BlastResistance LEVER -> WcHC
    react.surge.util.BlastResistance MYCEL -> XLXK
    react.surge.util.BlastResistance PISTON_BASE -> xkVK
    react.surge.util.BlastResistance PISTON_EXTENSION -> lpca
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> JmcP
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> EUcI
    react.surge.util.BlastResistance GOLD_PLATE -> LIVN
    react.surge.util.BlastResistance IRON_PLATE -> GRxC
    react.surge.util.BlastResistance STONE_PLATE -> dymo
    react.surge.util.BlastResistance WOOD_PLATE -> cUHh
    react.surge.util.BlastResistance SAND -> CXKy
    react.surge.util.BlastResistance SOUL_SAND -> fLny
    react.surge.util.BlastResistance CACTUS -> MeiV
    react.surge.util.BlastResistance LADDER -> CXMu
    react.surge.util.BlastResistance NETHERRACK -> YhlE
    react.surge.util.BlastResistance GLASS -> UmaT
    react.surge.util.BlastResistance THIN_GLASS -> EMQP
    react.surge.util.BlastResistance STAINED_GLASS -> lxtC
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> oFhJ
    react.surge.util.BlastResistance GLOWSTONE -> Mmyg
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> QXcg
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> GBVM
    react.surge.util.BlastResistance SEA_LANTERN -> lqCe
    react.surge.util.BlastResistance BED_BLOCK -> PVAn
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> cLVe
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> KhTl
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> oNwc
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> kSlo
    react.surge.util.BlastResistance LEAVES -> yTdl
    react.surge.util.BlastResistance LEAVES_2 -> Gcwy
    react.surge.util.BlastResistance SNOW -> FYHV
    int br -> wEpu
    react.surge.util.BlastResistance[] ENUM$VALUES -> CGND
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> woTl
    175:190:int get(org.bukkit.Material) -> Btan
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> wLkR:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> eGah
react.surge.util.C -> kQyM:
    react.surge.util.C BLACK -> Chop
    react.surge.util.C DARK_BLUE -> jPnC
    react.surge.util.C DARK_GREEN -> qfcm
    react.surge.util.C DARK_AQUA -> LskL
    react.surge.util.C DARK_RED -> Bvmj
    react.surge.util.C DARK_PURPLE -> HpPT
    react.surge.util.C GOLD -> JCQk
    react.surge.util.C GRAY -> giff
    react.surge.util.C DARK_GRAY -> CrCF
    react.surge.util.C BLUE -> TPng
    react.surge.util.C GREEN -> cvlv
    react.surge.util.C AQUA -> VVuR
    react.surge.util.C RED -> tMiS
    react.surge.util.C LIGHT_PURPLE -> iMjN
    react.surge.util.C YELLOW -> GmMa
    react.surge.util.C WHITE -> OdCf
    react.surge.util.C MAGIC -> BTix
    react.surge.util.C BOLD -> sdXr
    react.surge.util.C STRIKETHROUGH -> CGNh
    react.surge.util.C UNDERLINE -> WcHd
    react.surge.util.C ITALIC -> Kxvj
    react.surge.util.C RESET -> CXOv
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> LbhY
    char code -> usOd
    boolean isFormat -> euAt
    java.lang.String toString -> nejR
    java.util.Map BY_ID -> PoUa
    java.util.Map BY_CHAR -> RcyP
    java.util.Map dyeChatMap -> GJhV
    java.util.Map chatHexMap -> PMRi
    java.util.Map dyeHexMap -> raUL
    int[] $SWITCH_TABLE$surge$util$C -> agtl
    react.surge.util.C[] ENUM$VALUES -> whTF
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> JSBd
    378:378:java.lang.String hex() -> OjbU
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> QDxG
    434:442:react.surge.util.C getByChar(java.lang.String) -> oVCD
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> QDwh
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> Btan
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> QDwh
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> CgEC
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> kIVD
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> ofbu
    560:578:java.lang.String generateColorTable() -> ssif
    588:588:org.bukkit.ChatColor chatColor() -> ggvT
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> eGah
    632:679:byte getItemMeta() -> UuEK
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> mPTt
react.surge.util.C$1 -> kQyM$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> kQyM$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> kQyM$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> kQyM$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> kQyM$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> kQyM$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> kQyM$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> kQyM$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> kQyM$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> kQyM$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> kQyM$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> kQyM$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> kQyM$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> kQyM$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> kQyM$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> kQyM$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> kQyM$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> kQyM$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> kQyM$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> kQyM$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> kQyM$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> kQyM$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> tCbM:
    double number -> RRxJ
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> CEBE
    23:25:react.surge.util.CDou add(double) -> fBSk
    30:32:react.surge.util.CDou sub(double) -> OqvM
    37:37:double get() -> get
    42:48:void circ() -> nAuc
react.surge.util.CMD -> pQHH:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> sBTe
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> FWWX
    51:53:void execute(org.bukkit.command.CommandSender) -> CgEC
    60:77:void execute() -> execute
react.surge.util.CNum -> MdVP:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> ofbu
    23:25:react.surge.util.CNum add(int) -> OqyR
    30:32:react.surge.util.CNum sub(int) -> OqwY
    37:37:int get() -> get
    42:48:void circ() -> nAuc
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> NVCa
react.surge.util.Chunks -> oNDj:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> ivPs
    33:40:react.glang.GList getLoadedChunks() -> IGNa
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> QDwh
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> Btan
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> Btan
    98:98:boolean unload(org.bukkit.Chunk) -> xhkE
    114:124:int unload(react.glang.GList,boolean,boolean) -> Btan
    138:138:int unload(react.glang.GList,boolean) -> Btan
    150:150:int unload(react.glang.GList) -> EAvS
    166:166:boolean isLoaded(java.lang.String,int,int) -> Btan
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> CgEC
    201:205:void load(react.glang.GList) -> xGIH
react.surge.util.Cuboid -> nlco:
    java.lang.String worldName -> KODu
    int x1 -> ULBI
    int y1 -> Nypc
    int z1 -> VpgA
    int x2 -> GmNr
    int y2 -> lxxe
    int z2 -> urqn
    int[] $SWITCH_TABLE$surge$util$Axis -> OkuA
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> TkCv
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> Btan
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> CgEC
    93:93:boolean hasPlayers() -> IiQl
    98:110:react.glang.GList getPlayers() -> sPqy
    115:166:react.glang.GList getEntities() -> cJgw
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> uEoq
    287:287:org.bukkit.Location getLowerNE() -> aVEB
    298:298:org.bukkit.Location getUpperSW() -> SvmM
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> Vwes
    348:348:int getSizeY() -> SelF
    358:358:int getSizeZ() -> cKHC
    368:368:int getLowerX() -> psPf
    378:378:int getLowerY() -> tejR
    388:388:int getLowerZ() -> RtKQ
    398:398:int getUpperX() -> proQ
    408:408:int getUpperY() -> KVEK
    418:418:int getUpperZ() -> UcbR
    428:438:org.bukkit.block.Block[] corners() -> PdsQ
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> Btan
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> QDwh
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> CgEC
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> OrWU
    546:546:boolean contains(int,int,int) -> xFgk
    558:558:boolean contains(org.bukkit.block.Block) -> QDxG
    570:570:boolean contains(org.bukkit.Location) -> YfbV
    580:580:int volume() -> hYuk
    591:601:byte averageLightLevel() -> bXfE
    612:612:react.surge.util.Cuboid contract() -> uXLX
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> Btan
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> QDwh
    708:715:boolean containsOnly(org.bukkit.Material) -> QDwh
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> Btan
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> rUxE
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> Btan
    786:800:java.util.List getChunks() -> xidt
    815:819:void fill(int,byte) -> Btan
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> sIUH
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> IaAH
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> xqvC
react.surge.util.Cuboid$1 -> nlco$1:
    react.surge.util.Cuboid this$0 -> ULDV
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> vHrQ
    1:1:java.lang.Object onAdapt(java.lang.Object) -> eGah
react.surge.util.Cuboid$CuboidDirection -> nlco$Btan:
    react.surge.util.Cuboid$CuboidDirection North -> Wslh
    react.surge.util.Cuboid$CuboidDirection East -> KqJv
    react.surge.util.Cuboid$CuboidDirection South -> xYvx
    react.surge.util.Cuboid$CuboidDirection West -> jrqm
    react.surge.util.Cuboid$CuboidDirection Up -> usRW
    react.surge.util.Cuboid$CuboidDirection Down -> KVwd
    react.surge.util.Cuboid$CuboidDirection Horizontal -> mQhR
    react.surge.util.Cuboid$CuboidDirection Vertical -> xcIc
    react.surge.util.Cuboid$CuboidDirection Both -> CrBs
    react.surge.util.Cuboid$CuboidDirection Unknown -> hJgx
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> TkCv
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> AHyj
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> jXLm
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> xqvC
react.surge.util.Cuboid$CuboidIterator -> nlco$QDwh:
    org.bukkit.World w -> ekqs
    int baseX -> wqGl
    int baseY -> vTRR
    int baseZ -> jjaY
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> KhXi
    int sizeY -> sRwp
    int sizeZ -> diOj
    react.surge.util.Cuboid this$0 -> ULDV
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> uhhA:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> yuSy:
    react.glang.GList buffer -> qUbc
    boolean dbg -> LHwl
    int kf -> JBrJ
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> OrWU
    41:49:void l(java.lang.Object,java.lang.String) -> QDwh
    53:54:void s(java.lang.Object,java.lang.String) -> CgEC
    58:69:void cdb() -> Lijr
    73:79:void v(java.lang.Object,java.lang.String) -> OrWU
    83:84:void w(java.lang.Object,java.lang.String) -> xFgk
    88:89:void f(java.lang.Object,java.lang.String) -> rUxE
    93:106:void l(java.lang.String) -> OqyR
    110:117:void s(java.lang.String) -> OqwY
    121:135:void v(java.lang.String) -> NVCa
    139:146:void w(java.lang.String) -> uEoq
    150:157:void f(java.lang.String) -> kjwO
react.surge.util.DMSRequire -> BSTE:
    react.surge.util.DMSRequirement value() -> GAIq
react.surge.util.DMSRequirement -> gxpm:
    react.surge.util.DMSRequirement SQL -> LRIt
    react.surge.util.DMSRequirement[] ENUM$VALUES -> dFld
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> rgoD:
    react.surge.util.Depend VAULT -> xbhK
    react.surge.util.Depend FAWE -> whVF
    react.surge.util.Depend WORLDEDIT -> dypr
    react.surge.util.Depend PROTOLIB -> bQgl
    react.surge.util.Depend CITIZENS -> KFUr
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> gXgC
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> uNsp:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> jXOw
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> cldJ:
    react.surge.util.DimensionFace X -> Umec
    react.surge.util.DimensionFace Y -> AQiy
    react.surge.util.DimensionFace Z -> uank
    react.surge.util.DimensionFace[] ENUM$VALUES -> oWlp
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> tnTm:
    react.surge.util.Direction U -> MToO
    react.surge.util.Direction D -> YOaW
    react.surge.util.Direction N -> uYbQ
    react.surge.util.Direction S -> FHKP
    react.surge.util.Direction E -> jbTU
    react.surge.util.Direction W -> YPBL
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> ChtX
    int[] $SWITCH_TABLE$surge$util$Direction -> kTUg
    react.surge.util.Direction[] ENUM$VALUES -> wpjM
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> GtNk
    61:61:int x() -> IrEG
    66:66:int y() -> RQjU
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> QhYl
    81:81:react.glang.GList news() -> TXQU
    86:86:react.glang.GList udnews() -> uhpV
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> STPF
    115:147:react.surge.util.Direction fromByte(byte) -> QDxG
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> CpSW
react.surge.util.DynamicConfiguration -> opGY:
react.surge.util.DynamicTracker -> ggoF:
react.surge.util.Embedded -> Aicq:
    react.glang.GList get() -> STnC
    void add(java.lang.Object) -> add
react.surge.util.FU -> nuUH:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> Btan
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> QDwh
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> xFgk
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> rUxE
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> Blfo:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> xGJL
react.surge.util.Health -> fJxU:
    double hp -> mAJT
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> XAyj
    41:41:double getHearts() -> tDKA
    51:51:double getHalfHearts() -> Gsmx
    61:61:int getFlatHalfHearts() -> DYcd
react.surge.util.IO -> ivfW:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> DsMM:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> Btan
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> Btan
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> Btan
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> Btan
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> Btan
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> QDwh
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> CgEC
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> OrWU
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> Btan
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> Btan
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> Btan
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> Btan
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> xFgk
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> rUxE
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> eGah
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> QDxG
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> vHrQ
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> Btan
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> IVsP
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> YfbV
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> Btan
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> Btan
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> QDwh
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> Btan
react.surge.util.MSound -> XKBi:
    react.surge.util.MSound AMBIENCE_CAVE -> pJSR
    react.surge.util.MSound AMBIENCE_RAIN -> BCmX
    react.surge.util.MSound AMBIENCE_THUNDER -> pJRX
    react.surge.util.MSound ANVIL_BREAK -> JnKA
    react.surge.util.MSound ANVIL_LAND -> DlYJ
    react.surge.util.MSound ANVIL_USE -> thAW
    react.surge.util.MSound ARROW_HIT -> MoCY
    react.surge.util.MSound BURP -> mIYO
    react.surge.util.MSound CHEST_CLOSE -> PDdt
    react.surge.util.MSound CHEST_OPEN -> mAHd
    react.surge.util.MSound CLICK -> VVwb
    react.surge.util.MSound DOOR_CLOSE -> aEuY
    react.surge.util.MSound DOOR_OPEN -> BfSH
    react.surge.util.MSound DRINK -> VgyV
    react.surge.util.MSound EAT -> OuGc
    react.surge.util.MSound EXPLODE -> btNB
    react.surge.util.MSound FALL_BIG -> oXQA
    react.surge.util.MSound FALL_SMALL -> eAaJ
    react.surge.util.MSound FIRE -> vTSo
    react.surge.util.MSound FIRE_IGNITE -> EEFu
    react.surge.util.MSound FIZZ -> KpkY
    react.surge.util.MSound FUSE -> oyrL
    react.surge.util.MSound GLASS -> IIBu
    react.surge.util.MSound HURT_FLESH -> qVEg
    react.surge.util.MSound ITEM_BREAK -> lNeg
    react.surge.util.MSound ITEM_PICKUP -> DBEN
    react.surge.util.MSound LAVA -> tNNC
    react.surge.util.MSound LAVA_POP -> urrb
    react.surge.util.MSound LEVEL_UP -> VqLF
    react.surge.util.MSound MINECART_BASE -> Yhtt
    react.surge.util.MSound MINECART_INSIDE -> UBui
    react.surge.util.MSound NOTE_BASS -> kSvd
    react.surge.util.MSound NOTE_PIANO -> Xnbl
    react.surge.util.MSound NOTE_BASS_DRUM -> dOax
    react.surge.util.MSound NOTE_STICKS -> BTqR
    react.surge.util.MSound NOTE_BASS_GUITAR -> edHL
    react.surge.util.MSound NOTE_SNARE_DRUM -> MfSd
    react.surge.util.MSound NOTE_PLING -> gjOK
    react.surge.util.MSound ORB_PICKUP -> YPEI
    react.surge.util.MSound PISTON_EXTEND -> qVIK
    react.surge.util.MSound PISTON_RETRACT -> CFqr
    react.surge.util.MSound PORTAL -> jHbr
    react.surge.util.MSound PORTAL_TRAVEL -> yTmj
    react.surge.util.MSound PORTAL_TRIGGER -> Cqex
    react.surge.util.MSound SHOOT_ARROW -> edFs
    react.surge.util.MSound SPLASH -> TkFq
    react.surge.util.MSound SPLASH2 -> veVw
    react.surge.util.MSound STEP_GRASS -> bsnd
    react.surge.util.MSound STEP_GRAVEL -> vTVU
    react.surge.util.MSound STEP_LADDER -> bAKR
    react.surge.util.MSound STEP_SAND -> CPEj
    react.surge.util.MSound STEP_SNOW -> eAbi
    react.surge.util.MSound STEP_STONE -> jjfD
    react.surge.util.MSound STEP_WOOD -> NWtB
    react.surge.util.MSound STEP_WOOL -> qDdx
    react.surge.util.MSound SWIM -> jjeJ
    react.surge.util.MSound WATER -> XwTS
    react.surge.util.MSound WOOD_CLICK -> RmRR
    react.surge.util.MSound BAT_DEATH -> HWCp
    react.surge.util.MSound BAT_HURT -> MMCj
    react.surge.util.MSound BAT_IDLE -> KOMp
    react.surge.util.MSound BAT_LOOP -> KONP
    react.surge.util.MSound BAT_TAKEOFF -> OcjV
    react.surge.util.MSound BLAZE_BREATH -> oiVn
    react.surge.util.MSound BLAZE_DEATH -> RJpY
    react.surge.util.MSound BLAZE_HIT -> YWuW
    react.surge.util.MSound CAT_HISS -> lOMI
    react.surge.util.MSound CAT_HIT -> RSbW
    react.surge.util.MSound CAT_MEOW -> rimx
    react.surge.util.MSound CAT_PURR -> yURE
    react.surge.util.MSound CAT_PURREOW -> GJqf
    react.surge.util.MSound CHICKEN_IDLE -> xcOh
    react.surge.util.MSound CHICKEN_HURT -> CGUT
    react.surge.util.MSound CHICKEN_EGG_POP -> DIyQ
    react.surge.util.MSound CHICKEN_WALK -> jIDu
    react.surge.util.MSound COW_IDLE -> DBJH
    react.surge.util.MSound COW_HURT -> Ijhm
    react.surge.util.MSound COW_WALK -> FXoC
    react.surge.util.MSound CREEPER_HISS -> gHLR
    react.surge.util.MSound CREEPER_DEATH -> MMBo
    react.surge.util.MSound ENDERDRAGON_DEATH -> yeqW
    react.surge.util.MSound ENDERDRAGON_GROWL -> TbXV
    react.surge.util.MSound ENDERDRAGON_HIT -> nTpb
    react.surge.util.MSound ENDERDRAGON_WINGS -> Mvts
    react.surge.util.MSound ENDERMAN_DEATH -> cTqA
    react.surge.util.MSound ENDERMAN_HIT -> veYb
    react.surge.util.MSound ENDERMAN_IDLE -> TIFa
    react.surge.util.MSound ENDERMAN_TELEPORT -> ULIq
    react.surge.util.MSound ENDERMAN_SCREAM -> OSIb
    react.surge.util.MSound ENDERMAN_STARE -> HpWg
    react.surge.util.MSound GHAST_SCREAM -> iFAp
    react.surge.util.MSound GHAST_SCREAM2 -> iMpy
    react.surge.util.MSound GHAST_CHARGE -> orFn
    react.surge.util.MSound GHAST_DEATH -> YXYC
    react.surge.util.MSound GHAST_FIREBALL -> aybV
    react.surge.util.MSound GHAST_MOAN -> EoaW
    react.surge.util.MSound IRONGOLEM_DEATH -> ExRa
    react.surge.util.MSound IRONGOLEM_HIT -> QrdD
    react.surge.util.MSound IRONGOLEM_THROW -> ptlg
    react.surge.util.MSound IRONGOLEM_WALK -> BLeN
    react.surge.util.MSound MAGMACUBE_WALK -> hudx
    react.surge.util.MSound MAGMACUBE_WALK2 -> VqSP
    react.surge.util.MSound MAGMACUBE_JUMP -> drJx
    react.surge.util.MSound PIG_IDLE -> MewP
    react.surge.util.MSound PIG_DEATH -> hCAm
    react.surge.util.MSound PIG_WALK -> lONP
    react.surge.util.MSound SHEEP_IDLE -> JLND
    react.surge.util.MSound SHEEP_SHEAR -> iFDs
    react.surge.util.MSound SHEEP_WALK -> vBwv
    react.surge.util.MSound SILVERFISH_HIT -> BTwD
    react.surge.util.MSound SILVERFISH_KILL -> CGXq
    react.surge.util.MSound SILVERFISH_IDLE -> QbBU
    react.surge.util.MSound SILVERFISH_WALK -> RvGG
    react.surge.util.MSound SKELETON_IDLE -> SVfF
    react.surge.util.MSound SKELETON_DEATH -> rHNI
    react.surge.util.MSound SKELETON_HURT -> RvGE
    react.surge.util.MSound SKELETON_WALK -> LtTn
    react.surge.util.MSound SLIME_ATTACK -> hSat
    react.surge.util.MSound SLIME_WALK -> qDiq
    react.surge.util.MSound SLIME_WALK2 -> yndf
    react.surge.util.MSound SPIDER_IDLE -> jkIi
    react.surge.util.MSound SPIDER_DEATH -> diYR
    react.surge.util.MSound SPIDER_WALK -> cDRn
    react.surge.util.MSound WITHER_DEATH -> ihFn
    react.surge.util.MSound WITHER_HURT -> TkKd
    react.surge.util.MSound WITHER_IDLE -> BLfC
    react.surge.util.MSound WITHER_SHOOT -> nDRG
    react.surge.util.MSound WITHER_SPAWN -> CFvw
    react.surge.util.MSound WOLF_BARK -> wpna
    react.surge.util.MSound WOLF_DEATH -> yndT
    react.surge.util.MSound WOLF_GROWL -> RKRr
    react.surge.util.MSound WOLF_HOWL -> aNpO
    react.surge.util.MSound WOLF_HURT -> oqlA
    react.surge.util.MSound WOLF_PANT -> BoJy
    react.surge.util.MSound WOLF_SHAKE -> bbuB
    react.surge.util.MSound WOLF_WALK -> OAjx
    react.surge.util.MSound WOLF_WHINE -> BfYl
    react.surge.util.MSound ZOMBIE_METAL -> KORX
    react.surge.util.MSound ZOMBIE_WOOD -> jIJj
    react.surge.util.MSound ZOMBIE_WOODBREAK -> wycH
    react.surge.util.MSound ZOMBIE_IDLE -> PxUC
    react.surge.util.MSound ZOMBIE_DEATH -> sCBw
    react.surge.util.MSound ZOMBIE_HURT -> MTxE
    react.surge.util.MSound ZOMBIE_INFECT -> iFGL
    react.surge.util.MSound ZOMBIE_UNFECT -> IYmW
    react.surge.util.MSound ZOMBIE_REMEDY -> oWwy
    react.surge.util.MSound ZOMBIE_WALK -> ixjh
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> CFxW
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> pcmC
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> HEiH
    react.surge.util.MSound ZOMBIE_PIG_HURT -> jays
    react.surge.util.MSound DIG_WOOL -> drKl
    react.surge.util.MSound DIG_GRASS -> Vpra
    react.surge.util.MSound DIG_GRAVEL -> orJw
    react.surge.util.MSound DIG_SAND -> fEMX
    react.surge.util.MSound DIG_SNOW -> LsvQ
    react.surge.util.MSound DIG_STONE -> JmpQ
    react.surge.util.MSound DIG_WOOD -> xlED
    react.surge.util.MSound FIREWORK_BLAST -> mRRk
    react.surge.util.MSound FIREWORK_BLAST2 -> xAQA
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> OtoU
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> nvvq
    react.surge.util.MSound FIREWORK_TWINKLE -> bJBw
    react.surge.util.MSound FIREWORK_TWINKLE2 -> YrMR
    react.surge.util.MSound FIREWORK_LAUNCH -> ReHH
    react.surge.util.MSound SUCCESSFUL_HIT -> jQXw
    react.surge.util.MSound HORSE_ANGRY -> gXqG
    react.surge.util.MSound HORSE_ARMOR -> Fret
    react.surge.util.MSound HORSE_BREATHE -> AtXi
    react.surge.util.MSound HORSE_DEATH -> KXBm
    react.surge.util.MSound HORSE_GALLOP -> wybK
    react.surge.util.MSound HORSE_HIT -> dWxX
    react.surge.util.MSound HORSE_IDLE -> KygY
    react.surge.util.MSound HORSE_JUMP -> TtAc
    react.surge.util.MSound HORSE_LAND -> wqUM
    react.surge.util.MSound HORSE_SADDLE -> eBLw
    react.surge.util.MSound HORSE_SOFT -> GdjW
    react.surge.util.MSound HORSE_WOOD -> GeJx
    react.surge.util.MSound DONKEY_ANGRY -> TjpC
    react.surge.util.MSound DONKEY_DEATH -> VXDh
    react.surge.util.MSound DONKEY_HIT -> xASb
    react.surge.util.MSound DONKEY_IDLE -> aqVb
    react.surge.util.MSound HORSE_SKELETON_DEATH -> IYoO
    react.surge.util.MSound HORSE_SKELETON_HIT -> keaH
    react.surge.util.MSound HORSE_SKELETON_IDLE -> nTwW
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> rPcH
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> YaNd
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> ULQV
    react.surge.util.MSound VILLAGER_DEATH -> mATI
    react.surge.util.MSound VILLAGER_HAGGLE -> fwsq
    react.surge.util.MSound VILLAGER_HIT -> Ewvb
    react.surge.util.MSound VILLAGER_IDLE -> GmYt
    react.surge.util.MSound VILLAGER_NO -> iWJN
    react.surge.util.MSound VILLAGER_YES -> Uvbp
    java.lang.String pre19sound -> RdiE
    java.lang.String post19sound -> ujlu
    org.bukkit.Sound resolvedSound -> MCvo
    react.surge.util.MSound[] ENUM$VALUES -> PodO
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> EvYb
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> XRqs:
    org.bukkit.Material material -> FsHi
    java.lang.Byte data -> sugl
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> wnvK
    79:80:void setData(java.lang.Byte) -> Btan
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> pHVJ:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> KTid
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> MmPH
    68:68:boolean isAnyOnline() -> ebSI
    80:80:react.glang.GList inWorld(org.bukkit.World) -> VLVl
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> pHBK
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> Btan
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> Btan
    143:144:void disable(org.bukkit.entity.Player) -> qmGO
    154:155:void enable(org.bukkit.entity.Player) -> gDvV
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> Btan
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> QDwh
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> XuBC
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> Btan
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> CEBE
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> CgEC
    300:300:boolean canFindPlayer(java.lang.String) -> BRah
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> TqFt
    338:345:react.glang.GList onlinePlayers() -> ktdj
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> fBSk
    368:371:void clear(org.bukkit.entity.Player) -> OqvM
    381:385:void clearEffects(org.bukkit.entity.Player) -> MlQK
    398:399:void heal(org.bukkit.entity.Player,double) -> Btan
    409:410:void heal(org.bukkit.entity.Player) -> kbcy
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> HTSJ
    432:433:void resetHunger(org.bukkit.entity.Player) -> YUcV
    443:444:void kill(org.bukkit.entity.Player) -> tnDI
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> kHuP
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> ydAI
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> Btan
react.surge.util.P$1 -> pHVJ$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> vHrQ
    1:1:java.lang.Object onAdapt(java.lang.Object) -> eGah
react.surge.util.P$2 -> pHVJ$2:
    java.lang.Double val$doff -> yCtT
    org.bukkit.entity.Player val$e -> mIbf
    org.bukkit.entity.Entity[] val$result -> Abxc
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> SvRw
react.surge.util.PE -> VxAP:
    react.surge.util.PE ABSORPTION -> BMJk
    react.surge.util.PE BLINDNESS -> lqTU
    react.surge.util.PE CONFUSION -> RBfH
    react.surge.util.PE DAMAGE_RESISTANCE -> gjUW
    react.surge.util.PE FAST_DIGGING -> Wswk
    react.surge.util.PE FIRE_RESISTANCE -> yevm
    react.surge.util.PE GLOWING -> UfBd
    react.surge.util.PE HARM -> HEjJ
    react.surge.util.PE HEAL -> hSfH
    react.surge.util.PE HEALTH_BOOST -> RvKa
    react.surge.util.PE HUNGER -> JCaj
    react.surge.util.PE INCREASE_DAMAGE -> JnUt
    react.surge.util.PE INVISIBILITY -> msyf
    react.surge.util.PE JUMP -> FjYu
    react.surge.util.PE LEVITATION -> Olcm
    react.surge.util.PE LUCK -> yTxw
    react.surge.util.PE NIGHT_VISION -> yUYx
    react.surge.util.PE POISON -> qgTn
    react.surge.util.PE REGENERATION -> lWeP
    react.surge.util.PE SATURATION -> lNse
    react.surge.util.PE SLOW -> eAmw
    react.surge.util.PE SLOW_DIGGING -> thNW
    react.surge.util.PE SPEED -> KFeW
    react.surge.util.PE UNLUCK -> vTaI
    react.surge.util.PE WATER_BREATHING -> NqrE
    react.surge.util.PE WEAKNESS -> EUtw
    react.surge.util.PE WITHER -> utBF
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> Btan
    144:144:react.surge.util.PE d(int) -> kjwO
    156:156:react.surge.util.PE a(int) -> xGJL
    166:166:org.bukkit.potion.PotionEffect c() -> KLtV
    177:178:void c(org.bukkit.entity.LivingEntity) -> rUxE
    182:183:void crm(org.bukkit.entity.LivingEntity) -> eGah
    187:188:void rm(org.bukkit.entity.LivingEntity) -> QDxG
react.surge.util.ParticleEffect -> pbID:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> GTLS
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> IHog
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> PUta
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> NjBX
    react.surge.util.ParticleEffect WATER_BUBBLE -> UfFE
    react.surge.util.ParticleEffect WATER_SPLASH -> AkkF
    react.surge.util.ParticleEffect WATER_WAKE -> BLjb
    react.surge.util.ParticleEffect SUSPENDED -> WJIL
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> qDqH
    react.surge.util.ParticleEffect CRIT -> TbbL
    react.surge.util.ParticleEffect CRIT_MAGIC -> qDop
    react.surge.util.ParticleEffect SMOKE_NORMAL -> etqp
    react.surge.util.ParticleEffect SMOKE_LARGE -> gsIO
    react.surge.util.ParticleEffect SPELL -> drOk
    react.surge.util.ParticleEffect SPELL_INSTANT -> Wkic
    react.surge.util.ParticleEffect SPELL_MOB -> uHlJ
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> SFLG
    react.surge.util.ParticleEffect SPELL_WITCH -> aWdO
    react.surge.util.ParticleEffect DRIP_WATER -> yoLJ
    react.surge.util.ParticleEffect DRIP_LAVA -> Uvdj
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> apuh
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> OAnr
    react.surge.util.ParticleEffect TOWN_AURA -> NqqE
    react.surge.util.ParticleEffect NOTE -> MLkC
    react.surge.util.ParticleEffect PORTAL -> XCxi
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> YaPG
    react.surge.util.ParticleEffect FLAME -> MLkH
    react.surge.util.ParticleEffect LAVA -> aiGS
    react.surge.util.ParticleEffect FOOTSTEP -> MoOK
    react.surge.util.ParticleEffect CLOUD -> EUvg
    react.surge.util.ParticleEffect REDSTONE -> iyQs
    react.surge.util.ParticleEffect SNOWBALL -> NPQO
    react.surge.util.ParticleEffect SNOW_SHOVEL -> PDuA
    react.surge.util.ParticleEffect SLIME -> Otup
    react.surge.util.ParticleEffect HEART -> NXaX
    react.surge.util.ParticleEffect BARRIER -> NYAx
    react.surge.util.ParticleEffect ITEM_CRACK -> hvOW
    react.surge.util.ParticleEffect BLOCK_CRACK -> QPhw
    react.surge.util.ParticleEffect BLOCK_DUST -> WklX
    react.surge.util.ParticleEffect WATER_DROP -> iqBR
    react.surge.util.ParticleEffect ITEM_TAKE -> kKrp
    react.surge.util.ParticleEffect MOB_APPEARANCE -> DRst
    react.surge.util.ParticleEffect DRAGON_BREATH -> AlNQ
    react.surge.util.ParticleEffect END_ROD -> hJyY
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> SEmy
    react.surge.util.ParticleEffect SWEEP_ATTACK -> LIkI
    java.util.Map NAME_MAP -> lXHF
    java.util.Map ID_MAP -> IkUk
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> wNuK
    java.util.List properties -> xAVu
    react.surge.util.ParticleEffect[] ENUM$VALUES -> hJxf
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> SCkA
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> Btan
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> SBng
    557:565:react.surge.util.ParticleEffect fromId(int) -> KTid
    577:578:boolean isWater(org.bukkit.Location) -> RsQG
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> Btan
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> Btan
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> Btan
    665:681:void display(float,int,org.bukkit.Location,double) -> Btan
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> Btan
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> Btan
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> Btan
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> Btan
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> Btan
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> Btan
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> Btan
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> Btan
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> Btan
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> Btan
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> Btan
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> Btan
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> Btan
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> Btan
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> pbID$Btan:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> pbID$QDwh:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> pbID$CgEC:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> cKJO
    1594:1594:float getValueY() -> anuv
    1605:1605:float getValueZ() -> LYJA
react.surge.util.ParticleEffect$OrdinaryColor -> pbID$OrWU:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> cKJO
    1526:1526:float getValueY() -> anuv
    1537:1537:float getValueZ() -> LYJA
react.surge.util.ParticleEffect$ParticleColor -> pbID$xFgk:
    1383:1383:void <init>() -> <init>
    float getValueX() -> cKJO
    float getValueY() -> anuv
    float getValueZ() -> LYJA
react.surge.util.ParticleEffect$ParticleColorException -> pbID$rUxE:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> pbID$eGah:
    org.bukkit.Material material -> FsHi
    byte data -> yoNU
    int[] packetData -> vfDe
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> DHaD
    1309:1309:java.lang.String getPacketDataString() -> eQPK
react.surge.util.ParticleEffect$ParticleDataException -> pbID$QDxG:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> pbID$vHrQ:
    int version -> version
    java.lang.Class enumParticle -> FsMF
    java.lang.reflect.Constructor packetConstructor -> nLkF
    java.lang.reflect.Method getHandle -> pmEC
    java.lang.reflect.Field playerConnection -> aOWG
    java.lang.reflect.Method sendPacket -> EgYJ
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> qoeh
    float offsetX -> VykF
    float offsetY -> FGwl
    float offsetZ -> pRop
    float speed -> IQbU
    int amount -> Jcpp
    boolean longDistance -> nCyM
    react.surge.util.ParticleEffect$ParticleData data -> QbKW
    java.lang.Object packet -> utCN
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> xhkE
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> Btan
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> QDwh
    2004:2018:void sendTo(org.bukkit.Location,double) -> QDwh
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> pbID$vHrQ$Btan:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> pbID$vHrQ$QDwh:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> pbID$vHrQ$CgEC:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> pbID$IVsP:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> VymR
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> hupT
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> RCNA
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> aylc
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> ixrv
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> pbID$YfbV:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> cJaJ:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> JHuc
react.surge.util.Persist -> kAYs:
react.surge.util.PluginUtil -> dDua:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> xFgk
    81:85:void enableAll() -> wgEt
    95:99:void disable(org.bukkit.plugin.Plugin) -> rUxE
    106:110:void disableAll() -> QEuM
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> eGah
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> Btan
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> HSpw
    169:172:java.util.List getPluginNames(boolean) -> OrWl
    184:187:java.lang.String getPluginVersion(java.lang.String) -> mFho
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> QDxG
    237:316:java.util.List findByCommand(java.lang.String) -> MuDN
    337:338:void load(org.bukkit.plugin.Plugin) -> vHrQ
    342:364:java.lang.String getPluginFileName(java.lang.String) -> fRvb
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> Btan
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> IVsP
    480:484:void reloadAll() -> YNMX
    496:622:void unload(org.bukkit.plugin.Plugin) -> YfbV
react.surge.util.PoolCount -> RjvB:
react.surge.util.PoolDescriber -> vAYc:
react.surge.util.PoolNanoThrottle -> ObLy:
react.surge.util.PositionalSelector -> dUwQ:
    react.glang.GSet allowedChunks -> XMPG
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> kdCc
    39:40:void addChunk(org.bukkit.Chunk) -> EAvS
    44:44:react.glang.GSet getAllowedChunks() -> yAvb
react.surge.util.Protocol -> hkVI:
    react.surge.util.Protocol LATEST -> Qrmo
    react.surge.util.Protocol R1_12_2 -> SFPk
    react.surge.util.Protocol R1_12_2_PRE -> Vyll
    react.surge.util.Protocol R1_12_1 -> pJdI
    react.surge.util.Protocol R1_12 -> cMOH
    react.surge.util.Protocol R1_11_2 -> vnXX
    react.surge.util.Protocol R1_11_1 -> Rdos
    react.surge.util.Protocol R1_11 -> iFOR
    react.surge.util.Protocol R1_10_2 -> eRuF
    react.surge.util.Protocol R1_10_1 -> svPR
    react.surge.util.Protocol R1_10 -> CYCx
    react.surge.util.Protocol R1_9_4 -> pmGJ
    react.surge.util.Protocol R1_9_3 -> Frnv
    react.surge.util.Protocol R1_9_2 -> kDDo
    react.surge.util.Protocol R1_9_1 -> BnrK
    react.surge.util.Protocol R1_9 -> ffyM
    react.surge.util.Protocol R1_8_9 -> sBkE
    react.surge.util.Protocol R1_8_8 -> qEUk
    react.surge.util.Protocol R1_8_7 -> MoQu
    react.surge.util.Protocol R1_8_6 -> BUbJ
    react.surge.util.Protocol R1_8_5 -> aNvr
    react.surge.util.Protocol R1_8_4 -> IREC
    react.surge.util.Protocol R1_8_3 -> TRDG
    react.surge.util.Protocol R1_8_2 -> eKDF
    react.surge.util.Protocol R1_8_1 -> Yqsh
    react.surge.util.Protocol R1_8 -> OKES
    react.surge.util.Protocol R1_7_10 -> Dlgo
    react.surge.util.Protocol R1_7_9 -> Khka
    react.surge.util.Protocol R1_7_8 -> vwGi
    react.surge.util.Protocol R1_7_7 -> aykl
    react.surge.util.Protocol R1_7_6 -> MnrA
    react.surge.util.Protocol R1_7_5 -> lGGW
    react.surge.util.Protocol R1_7_4 -> DJeY
    react.surge.util.Protocol R1_7_3 -> Bnri
    react.surge.util.Protocol R1_7_2 -> Dtxd
    react.surge.util.Protocol R1_7_1 -> YidK
    react.surge.util.Protocol B1_6_4 -> IRDx
    react.surge.util.Protocol B1_6_3 -> hBme
    react.surge.util.Protocol B1_6_2 -> YGdB
    react.surge.util.Protocol B1_6_1 -> lWkU
    react.surge.util.Protocol B1_5_2 -> dquo
    react.surge.util.Protocol B1_5_1 -> DSYT
    react.surge.util.Protocol B1_5 -> uQdd
    react.surge.util.Protocol B1_4_7 -> JKyF
    react.surge.util.Protocol B1_4_6 -> Xwdi
    react.surge.util.Protocol B1_4_5 -> lymb
    react.surge.util.Protocol B1_4_4 -> THtw
    react.surge.util.Protocol B1_4_2 -> oquX
    react.surge.util.Protocol B1_3_2 -> LlSC
    react.surge.util.Protocol B1_3_1 -> nxDa
    react.surge.util.Protocol B1_2_5 -> jsgb
    react.surge.util.Protocol B1_2_4 -> RTQb
    react.surge.util.Protocol EARLIEST -> dHCw
    react.surge.util.Protocol UNKNOWN -> NGeH
    int version -> version
    java.lang.String packageVersion -> EwEr
    java.lang.String versionName -> folM
    boolean netty -> fMhu
    react.surge.util.Protocol[] ENUM$VALUES -> NPUl
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> awgT
    118:118:java.lang.String getPackageVersion() -> RIBQ
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> EnGl
    142:150:react.surge.util.Protocol getProtocolVersion() -> NxbL
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> QDwh
    160:160:boolean isServerVersion() -> NyBm
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> HfPI
    175:175:boolean isActualVersion() -> jyph
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> HwQV
    200:200:int getMetaVersion() -> fnFE
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> tCdG:
    react.surge.util.Protocol from -> cEAR
    react.surge.util.Protocol to -> difS
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> Emft
    21:21:react.surge.util.Protocol getTo() -> pkBS
    26:26:boolean contains(react.surge.util.Protocol) -> CgEC
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> yuWM:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> RQjH
    70:70:int randomNextInt() -> jXNm
    80:80:long randomNextLong() -> UBAn
    92:92:boolean isWithin(double) -> MlQK
    104:104:boolean isWithin(int) -> BRah
    116:116:boolean isWithin(long) -> Rrmv
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> kbcy
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> OrWl
react.surge.util.RawEvent -> Mcvn:
react.surge.util.RayTrace -> XuXb:
    org.bukkit.Location start -> vDFc
    org.bukkit.util.Vector direction -> fpMR
    java.lang.Double maxDistance -> lFiA
    java.lang.Double distanceCovered -> kUHN
    java.lang.Double step -> Dlib
    java.lang.Boolean stop -> suqD
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> stOB
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> SvRw
    89:89:org.bukkit.Location getStart() -> ivqX
    94:95:void setStart(org.bukkit.Location) -> pHBK
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> eruQ
    114:115:void setMaxDistance(java.lang.Double) -> OrWU
    119:119:java.lang.Double getDistanceCovered() -> fLFI
    124:125:void setDistanceCovered(java.lang.Double) -> xFgk
    129:129:java.lang.Double getStep() -> xijw
    134:135:void setStep(java.lang.Double) -> rUxE
react.surge.util.ReflectionUtils -> xYBY:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> Btan
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> Btan
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> Btan
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> Btan
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> Btan
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> Btan
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> Btan
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> Btan
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> Btan
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> Btan
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> Btan
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> Btan
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> Btan
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> Btan
react.surge.util.ReflectionUtils$DataType -> xYBY$Btan:
    react.surge.util.ReflectionUtils$DataType BYTE -> orVC
    react.surge.util.ReflectionUtils$DataType SHORT -> BoWC
    react.surge.util.ReflectionUtils$DataType INTEGER -> aNyP
    react.surge.util.ReflectionUtils$DataType LONG -> vfHs
    react.surge.util.ReflectionUtils$DataType CHARACTER -> wWic
    react.surge.util.ReflectionUtils$DataType FLOAT -> fUyG
    react.surge.util.ReflectionUtils$DataType DOUBLE -> Wtaa
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> YYFB
    java.util.Map CLASS_MAP -> PUyg
    java.lang.Class primitive -> DljX
    java.lang.Class reference -> yfaC
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> Sped
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> UdFw
    704:704:java.lang.Class getReference() -> rNhJ
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> QDwh
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> CgEC
    741:742:java.lang.Class getReference(java.lang.Class) -> OrWU
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> Btan
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> QDwh
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> QDwh
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> CgEC
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> Btan
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> xYBY$QDwh:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> IAEk
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> BECA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> Otyn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> daWg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> yLpy
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> BVFM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> hmdV
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> CjJj
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> nxGX
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> pJgi
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> XEBu
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> LdDW
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> dGeC
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> vUKE
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> mcaM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> blSa
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> Bnuq
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> ipgI
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> Bnum
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> LJQq
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> BEDB
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> kQys:
    void refresh() -> refresh
react.surge.util.SQLOperation -> yRrc:
    react.surge.util.SQLOperation LOAD -> ExbN
    react.surge.util.SQLOperation SAVE -> Cijb
    react.surge.util.SQLOperation[] ENUM$VALUES -> RuvK
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> GREl:
    react.surge.util.ServerState START -> heSF
    react.surge.util.ServerState ENABLE -> IcIu
    react.surge.util.ServerState DISABLE -> qEXu
    react.surge.util.ServerState STOP -> FbPx
    react.surge.util.ServerState RUNNING -> VrAT
    react.surge.util.ServerState[] ENUM$VALUES -> Bnwb
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> Wqtt:
    org.bukkit.Location location -> lVhG
    org.bukkit.util.Vector offset -> CYIi
    org.bukkit.util.Vector size -> CaYp
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> EAvS
    90:94:org.bukkit.Location randomLocation() -> Tqdq
    104:104:org.bukkit.Location randomSurface() -> KMXi
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> JkxI
    129:129:org.bukkit.util.Vector getSize() -> WjMr
react.surge.util.SnowLevel -> pQJK:
    byte level -> nEAb
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> DavL
    51:52:void setLevel(byte) -> vHrQ
react.surge.util.SuperCaller -> eQKX:
    void run() -> run
react.surge.util.T -> QNaU:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> QDwh
    32:35:void stop() -> stop
react.surge.util.TXT -> ytui:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> eGah
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> Btan
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> Btan
    99:99:java.lang.String line(react.surge.util.C,int) -> Btan
    113:113:java.lang.String underline(react.surge.util.C,int) -> QDwh
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> Btan
react.surge.util.Tag -> hQba:
    java.lang.String value() -> value
react.surge.util.Timer -> FEqL:
    long tns -> Hpgh
    long cns -> XEAy
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> mjLO
react.surge.util.VectorMath -> ooiQ:
    int[] $SWITCH_TABLE$surge$util$Axis -> OkuA
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> bJNg
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> Btan
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> Btan
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> QDwh
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> CgEC
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> Btan
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> QDwh
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> QDwh
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> CgEC
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> OrWU
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> xFgk
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> rUxE
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> eGah
    111:111:double round(double,int) -> xFgk
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> Btan
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> Btan
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> Btan
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> OrWU
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> xFgk
    268:268:org.bukkit.util.Vector toVector(float,float) -> Btan
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> Btan
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> Btan
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> QDxG
    337:340:double getSpeed(org.bukkit.util.Vector) -> vHrQ
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> Btan
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> IVsP
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> Btan
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> QDwh
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> CgEC
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> OrWU
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> YfbV
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> IaAH
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> IObr
react.surge.util.VectorMath$1 -> ooiQ$1:
    org.bukkit.util.Vector val$vector -> txul
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> SvRw
    1:1:java.lang.Object onAdapt(java.lang.Object) -> eGah
react.surge.util.W -> hYsP:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> vHrQ
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> Btan
    75:86:org.bukkit.entity.Entity getEntity(int) -> TqFt
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> Btan
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> Btan
    143:143:int getChunkX(org.bukkit.block.Block) -> IVsP
    155:155:int getChunkY(org.bukkit.block.Block) -> YfbV
    168:169:void dropXp(org.bukkit.Location,int) -> QDwh
    180:180:int getChunkZ(org.bukkit.block.Block) -> SvRw
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> QDwh
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> Btan
    232:239:react.glang.GList news(org.bukkit.Location) -> xGIH
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> Btan
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> xGIH
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> NgBv
    300:300:org.bukkit.World toSync(org.bukkit.World) -> IWRl
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> RsQG
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> amyd
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> amyd
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> xGJG
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> Btan
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> Btan
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> Btan
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> Btan
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> Btan
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> Btan
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> Btan
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> Btan
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> OrWl
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> xhkE
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> OrWl
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> CgEC
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> Btan
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> Btan
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> Btan
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> Btan
react.surge.util.W$1 -> hYsP$1:
    java.lang.Double val$doff -> yCtT
    org.bukkit.entity.Entity val$e -> FsRv
    org.bukkit.entity.Entity[] val$result -> Abxc
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> SvRw
react.surge.util.Worlds -> IXKy:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> iKrj
    33:33:boolean hasWorld(java.lang.String) -> vjvN
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> cSTR:
react.text.ColoredString -> HKtt:
    react.surge.util.C c -> fEYw
    java.lang.String s -> oOsT
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> DbWN
    42:43:void setC(react.surge.util.C) -> QDwh
    47:47:java.lang.String getS() -> rpin
    52:53:void setS(java.lang.String) -> tTNx
react.text.RTEX -> erlL:
    react.glang.GList extras -> xuBP
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> KDhC
    44:58:react.json.JSONObject toJSON() -> ydAI
react.text.RTX -> eaiw:
    react.json.JSONArray base -> cwen
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> rUxE
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> QDwh
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> Btan
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> Btan
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> QDwh
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> CgEC
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> Btan
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> QDwh
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> CgEC
    265:265:react.json.JSONArray toJSON() -> MvCW
    276:277:void tellRawTo(org.bukkit.entity.Player) -> qJfe
react.text.RawText -> BKGW:
    java.lang.String COLOR_BLACK -> pliN
    java.lang.String COLOR_DARK_BLUE -> suqo
    java.lang.String COLOR_DARK_GREEN -> ExaG
    java.lang.String COLOR_DARK_AQUA -> vCfe
    java.lang.String COLOR_DARK_RED -> vKvm
    java.lang.String COLOR_DARK_PURPLE -> GSsF
    java.lang.String COLOR_GOLD -> QrrJ
    java.lang.String COLOR_GRAY -> DmPI
    java.lang.String COLOR_DARK_GRAY -> wWoB
    java.lang.String COLOR_BLUE -> dqyv
    java.lang.String COLOR_GREEN -> Dlno
    java.lang.String COLOR_AQUA -> kemk
    java.lang.String COLOR_RED -> nfff
    java.lang.String COLOR_LIGHT_PURPLE -> gIAC
    java.lang.String COLOR_YELLOW -> ARdC
    java.lang.String COLOR_WHITE -> ENOu
    java.lang.String COLOR_NONE -> GBtG
    java.lang.String HEAD_TEXT -> fpPg
    java.lang.String HEAD_COLOR -> fooi
    java.lang.String HEAD_BOLD -> lWoE
    java.lang.String HEAD_ITALIC -> Gmgu
    java.lang.String HEAD_UNDERLINED -> vvmn
    java.lang.String HEAD_STRIKETHROUGH -> XwjJ
    java.lang.String HEAD_OBFUSCATED -> dXhh
    java.lang.String HEAD_CLICK_EVENT -> iEuC
    java.lang.String HEAD_HOVER_EVENT -> WlVU
    java.lang.String HEAD_ACTION -> dYIe
    java.lang.String HEAD_VALUE -> QkDP
    java.lang.String HEAD_EXTRA -> BEGa
    java.lang.String HEAD_ACTION_SHOW_TEXT -> Bwjq
    java.lang.String HEAD_ACTION_COMMAND -> eBXe
    java.util.ArrayList components -> PpQT
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> XBBA
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> xFgk
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> Btan
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> Btan
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> Btan
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> Btan
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> Btan
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> Btan
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> Btan
    307:313:java.lang.String compile() -> hsmm
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> Btan

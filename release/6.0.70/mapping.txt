react.BStats -> org.cyberpwn.react.tuqG:
    int B_STATS_VERSION -> tuqG
    java.lang.String URL -> URL
    boolean logFailedRequests -> GQND
    java.lang.String serverUUID -> LhmV
    org.bukkit.plugin.java.JavaPlugin plugin -> tCLt
    java.util.List charts -> KCgO
    55:125:void <init>(org.bukkit.plugin.java.JavaPlugin) -> <init>
    135:140:void addCustomChart(react.BStats$CustomChart) -> tuqG
    147:177:void startSubmitting() -> tuqG
    187:207:org.json.simple.JSONObject getPluginData() -> GQND
    225:257:org.json.simple.JSONObject getServerData() -> LhmV
    266:315:void submitData() -> tCLt
    327:357:void sendData(org.json.simple.JSONObject) -> tuqG
    370:378:byte[] compress(java.lang.String) -> tuqG
    37:37:org.bukkit.plugin.java.JavaPlugin access$000(react.BStats) -> tuqG
    37:37:void access$100(react.BStats) -> GQND
    37:37:void access$300(org.json.simple.JSONObject) -> GQND
    37:37:boolean access$400() -> KCgO
react.BStats$1 -> org.cyberpwn.react.tuqG$1:
    java.util.Timer val$timer -> lnYk
    react.BStats this$0 -> dVAX
    149:149:void <init>(react.BStats,java.util.Timer) -> <init>
    153:170:void run() -> run
react.BStats$1$1 -> org.cyberpwn.react.tuqG$1$1:
    react.BStats$1 this$1 -> Btag
    163:163:void <init>(react.BStats$1) -> <init>
    167:168:void run() -> run
react.BStats$2 -> org.cyberpwn.react.tuqG$2:
    org.json.simple.JSONObject val$data -> fuYa
    react.BStats this$0 -> dVAX
    296:296:void <init>(react.BStats,org.json.simple.JSONObject) -> <init>
    303:313:void run() -> run
react.BStats$AdvancedBarChart -> org.cyberpwn.react.tuqG$tuqG:
    java.util.concurrent.Callable callable -> xGHw
    745:747:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    753:782:org.json.simple.JSONObject getChartData() -> lnYk
react.BStats$AdvancedPie -> org.cyberpwn.react.tuqG$GQND:
    java.util.concurrent.Callable callable -> xGHw
    491:493:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    499:523:org.json.simple.JSONObject getChartData() -> lnYk
react.BStats$CustomChart -> org.cyberpwn.react.tuqG$LhmV:
    java.lang.String chartId -> uxsn
    397:403:void <init>(java.lang.String) -> <init>
    408:428:org.json.simple.JSONObject getRequestJsonObject() -> dVAX
    org.json.simple.JSONObject getChartData() -> lnYk
    384:384:org.json.simple.JSONObject access$200(react.BStats$CustomChart) -> GQND
react.BStats$DrilldownPie -> org.cyberpwn.react.tuqG$tCLt:
    java.util.concurrent.Callable callable -> xGHw
    545:547:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    553:583:org.json.simple.JSONObject getChartData() -> lnYk
react.BStats$MultiLineChart -> org.cyberpwn.react.tuqG$KCgO:
    java.util.concurrent.Callable callable -> xGHw
    644:646:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    652:676:org.json.simple.JSONObject getChartData() -> lnYk
react.BStats$SimpleBarChart -> org.cyberpwn.react.tuqG$lnYk:
    java.util.concurrent.Callable callable -> xGHw
    699:701:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    707:722:org.json.simple.JSONObject getChartData() -> lnYk
react.BStats$SimplePie -> org.cyberpwn.react.tuqG$dVAX:
    java.util.concurrent.Callable callable -> xGHw
    453:455:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    461:469:org.json.simple.JSONObject getChartData() -> lnYk
react.BStats$SingleLineChart -> org.cyberpwn.react.tuqG$Btag:
    java.util.concurrent.Callable callable -> xGHw
    605:607:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    613:621:org.json.simple.JSONObject getChartData() -> lnYk
react.Config -> org.cyberpwn.react.GQND:
    react.glang.GMap worldConfigs -> mymY
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> rokF
    java.lang.String A_REDSTONE_DYNAMIC_CLOCK -> UbgR
    java.lang.String A_COMMANDOVERRIDE_TPS -> Cweb
    java.lang.String A_SAMPLE_VIEWPORT -> iBlU
    java.lang.String A_RAI -> pYCa
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> tupT
    java.lang.String A_POOL_MAXTHREADS -> UcHV
    java.lang.String A_POOL_SYNC_NANOS -> OXdl
    java.lang.String A_CULLING_ENABLED -> rUwW
    java.lang.String A_FASTLEAF_ENABLED -> iCMY
    java.lang.String A_FASTLEAF_ONDECAY -> xXJY
    java.lang.String A_FASTLEAF_INSTANT -> bynN
    java.lang.String A_FASTLEAF_DECAYPERIOD -> qAsP
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> kQdH
    java.lang.String A_ENTITYSTACK_ENABLED -> AWjw
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> pHBT
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> hbMb
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> uhSI
    java.lang.String A_GLASS_SHOW_BLOCKS -> JACp
    java.lang.String A_GLASS_SHOW_PARTICLES -> VmyC
    java.lang.String A_ALLOW_CULL -> pPRP
    java.lang.String A_ALLOW_PURGE -> teOE
    java.lang.String A_ALLOW_STACKING -> jgps
    java.lang.String A_CULL_RULES -> HeRH
    java.lang.String A_RAI_TPS_HIGH_TICK -> aKuj
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> yIif
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> JITl
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> kbcq
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> UACg
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> EJey
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> KejH
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> qJcU
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> uFOG
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> VDFo
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> pPTd
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> jNbr
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> qSWg
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> dUbW
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> eiff
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> Ywen
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> pGdF
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> Veka
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> tnDB
    java.lang.String A_RAI_FLUID_TIME_CEIL -> JQgm
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> FpPX
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> MlTL
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> ofcL
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> RbQQ
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> pOru
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> QpPP
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> KwPC
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> qKGV
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> cdBT
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> oVBN
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> pjGA
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> GaoV
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> ERwx
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> VChU
    java.lang.String A_USE_WORLD_CONFIGS -> SnEI
    java.lang.String A_ENTITY_STACKER_SHOW_PARTICLES -> ckow
    java.lang.String A_ENTITY_STACKER_SHOW_NAMETAG -> oVAf
    java.lang.String A_LANGUAGE -> RYbB
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> LaBS
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> Cfgf
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> KvpE
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> cIor
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> dwfy
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> vQgf
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> YLse
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> NxJH
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> EKKr
    java.lang.String A_RAI_ENTITY_PROPIGATE -> uNeD
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> HTTu
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> jErw
    java.lang.String A_ENTITY_STACKER_NAME_TAG_FORMAT -> GbSk
    java.lang.String A_FAST_LEAF_MAX_MS -> XRbb
    java.lang.String A_NMS_CHUNK_UPDATE_INTERVAL -> DOyC
    java.lang.String A_THROTTLE_EXPLOSIONS -> IEvN
    java.lang.String A_THROTTLED_RATIO -> Oijb
    java.lang.String A_FAST_GROWTH -> pXfl
    java.lang.String A_FAST_EXPLOSIONS -> cSBg
    java.lang.String A_DROPS_INSTADROP -> cteG
    java.lang.String A_SKIP_ORBS -> vjxn
    java.lang.String A_FAST_ORB_PICKUP -> BJQk
    java.lang.String A_DROPS_TELEPORT -> SLED
    java.lang.String A_DESPAWN_USELESS_ARROWS -> vAGD
    double MAX_EXPLOSION_MS -> VULU
    boolean REDSTONE_DYNAMIC_CLOCK -> aDIs
    boolean COMMANDOVERRIDES_TPS -> VTju
    int SAMPLE_VIEWPORT -> UAHA
    boolean RAI -> Txxc
    int ENTITY_STACK_MAX_COUNT -> CgGk
    int POOL_MAXTHREADS -> vAFX
    long POOL_SYNC_NANOS -> fRxO
    boolean CULLING_ENABLED -> DaYh
    boolean FASTLEAF_ENABLED -> kAGN
    boolean FASTLEAF_ONDECAY -> oEBj
    boolean FASTLEAF_INSTANT -> OiiW
    int FASTLEAF_DECAYPERIOD -> tnDb
    boolean COMMANDOVERRIDES_MEMORY -> Rrri
    boolean ENTITYSTACK_ENABLED -> cSBQ
    int ENTITYSTACK_MINIMUM_GROUP -> bGMf
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> ksig
    int ENTITYSTACK_MAXIMUM_HEALTH -> HLCt
    boolean GLASS_SHOW_BLOCKS -> Kemg
    boolean GLASS_SHOW_PARTICLES -> cSBI
    react.glang.GList ALLOW_CULL -> CoXg
    react.glang.GList ALLOW_PURGE -> RPol
    react.glang.GList ALLOW_STACKING -> LPBa
    react.glang.GList CULL_RULES -> cJRy
    double RAI_TPS_HIGH_TICK -> JAKV
    long RAI_REDSTONE_TIME_FLOOR -> XRcq
    long RAI_REDSTONE_TIME_CEIL -> tdtx
    long RAI_REDSTONE_TIME_MUDDING -> ylUR
    double RAI_REDSTONE_TIME_FUNCTION -> baCJ
    double RAI_REDSTONE_TIME_OVERBLEED -> uVvs
    int RAI_REDSTONE_TIME_RADIUS -> WiTE
    int RAI_REDSTONE_TIME_PROPIGATION -> jqLC
    long RAI_HOPPER_TIME_FLOOR -> TqLW
    long RAI_HOPPER_TIME_CEIL -> rNMv
    long RAI_HOPPER_TIME_MUDDING -> GkFr
    double RAI_HOPPER_TIME_FUNCTION -> TNiB
    double RAI_HOPPER_TIME_OVERBLEED -> Vnaf
    int RAI_HOPPER_TIME_RADIUS -> hsTo
    int RAI_HOPPER_TIME_PROPIGATION -> RQSo
    int RAI_ENTITY_CHUNK_MULTIPLIER -> QxdX
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> UcNV
    int RAI_ENTITY_CHUNK_RADIUS -> cuHG
    long RAI_FLUID_TIME_FLOOR -> Rari
    long RAI_FLUID_TIME_CEIL -> KUOJ
    long RAI_FLUID_TIME_MUDDING -> XuGK
    double RAI_FLUID_TIME_FUNCTION -> QxcK
    double RAI_FLUID_TIME_OVERBLEED -> Ynwe
    int RAI_FLUID_TIME_RADIUS -> BSFh
    int RAI_FLUID_TIME_PROPIGATION -> vRIg
    double SMEAR_TICK_ENTITIES_MAX_TICK -> dEDd
    double SMEAR_TICK_TILES_MAX_TICK -> ckuK
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> Oike
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> flmJ
    double SMEAR_TICK_ENTITIES_AMOUNT -> nteC
    double SMEAR_TICK_TILES_AMOUNT -> qBYK
    boolean SMEAR_TICK_ENTITIES_ENABLE -> kslL
    boolean SMEAR_TICK_TILES_ENABLE -> ryAc
    boolean HOPPER_OVERTICK_ENABLE -> xWnX
    boolean USE_WORLD_CONFIGS -> LaCi
    boolean ENTITY_STACKER_SHOW_PARTICLES -> imiV
    boolean ENTITY_STACKER_SHOW_NAME_TAG -> ofjG
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> oUgt
    long RAI_CHUNK_TIME_CEIL -> ncfh
    long RAI_CHUNK_TIME_MUDDING -> SdyJ
    double RAI_CHUNK_TIME_FUNCTION -> XdII
    double RAI_CHUNK_TIME_OVERBLEED -> xyuR
    int RAI_CHUNK_TIME_RADIUS -> EdbJ
    int RAI_CHUNK_TIME_PROPIGATION -> GHeM
    boolean RAI_CHUNK_TIME_PROPIGATE -> lUQB
    boolean RAI_FLUID_TIME_PROPIGATE -> oDfk
    boolean RAI_ENTITY_PROPIGATE -> bGRT
    boolean RAI_HOPPER_TIME_PROPIGATE -> IpnO
    boolean RAI_REDSTONE_TIME_PROPIGATE -> pimR
    java.lang.String ENTITY_STACKER_NAME_TAG_FORMAT -> rhDG
    double FAST_LEAF_MAX_MS -> BBEv
    int NMS_CHUNK_UPDATE_INTERVAL -> JkaM
    boolean THROTTLE_EXPLOSIONS -> AWsm
    double THROTTLED_RATIO -> DGkw
    boolean FAST_GROWTH -> GjhV
    boolean FAST_EXPLOSIONS -> gpTK
    boolean DROPS_INSTADROP -> vHyn
    boolean SKIP_ORBS -> mXRg
    boolean FAST_ORB_PICKUP -> PeCA
    boolean DROPS_TELEPORT -> ElsB
    boolean DESPAWN_USELESS_ARROWS -> NgMF
    boolean hrld -> XdHp
    boolean rns -> WWsh
    boolean rrl -> GPvK
    39:742:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    747:764:void doTrack(org.bukkit.plugin.Plugin) -> tuqG
    769:791:void onRead(org.bukkit.plugin.Plugin) -> GQND
    795:825:void read(java.io.File,boolean) -> tuqG
    829:846:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> tuqG
    851:859:void closeWorldConfig(org.bukkit.World) -> GQND
    864:977:surge.cluster.DataCluster read(surge.cluster.DataCluster,boolean) -> tuqG
    982:1019:surge.cluster.DataCluster defaultConfig(boolean) -> tuqG
    1024:1103:react.glang.GList getDefaultEntitiesForStacking() -> Btag
    1108:1127:react.glang.GList getDefaultEntitiesForCulling() -> fuYa
    1132:1169:react.glang.GList getDefaultEntitiesForRemoval() -> xGHw
    1174:1215:react.glang.GList getDefaultCullRules() -> uxsn
react.Config$1 -> org.cyberpwn.react.GQND$1:
    java.io.File val$fConfig -> BdJe
    java.io.File val$fConfigExperimental -> Ubml
    org.bukkit.plugin.Plugin val$main -> JlAF
    1:750:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    755:759:void run() -> run
react.Config$2 -> org.cyberpwn.react.GQND$2:
    react.api.WorldConfig val$wc -> gxcg
    org.bukkit.World val$w -> XSFL
    1:836:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    841:842:void run() -> run
react.Gate -> org.cyberpwn.react.LhmV:
    react.glang.GMap defaultSettings -> bqcy
    react.glang.GSet refresh -> ndFh
    react.glang.GSet destroy -> XuIR
    int cd -> dgIf
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> INit
    47:50:void <clinit>() -> <clinit>
    45:45:void <init>() -> <init>
    54:144:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> tuqG
    150:181:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> tuqG
    186:186:int getChunkCountForView() -> mymY
    191:191:int getMaxChunksForView() -> rokF
    196:196:boolean hasFawe() -> UbgR
    201:222:void tickEntityNextTickListTick(org.bukkit.World) -> LhmV
    226:230:void resetEntityMaxTick(org.bukkit.World) -> tCLt
    234:234:int getEntityTickMax(org.bukkit.World) -> KCgO
    239:239:int getTileTickMax(org.bukkit.World) -> lnYk
    244:262:void tweakEntityTickMax(org.bukkit.World,int) -> tuqG
    266:283:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> tuqG
    288:292:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> tuqG
    296:308:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> tuqG
    313:317:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> GQND
    321:339:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> tuqG
    343:347:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> dVAX
    352:355:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> tuqG
    360:363:java.lang.String msg(react.api.ReactPlayer,react.notification.Notification) -> tuqG
    368:371:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> GQND
    376:376:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> LhmV
    381:381:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> tCLt
    386:386:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> KCgO
    391:391:boolean isBadForUnloading() -> Cweb
    396:396:boolean canUnload(org.bukkit.World,int,int) -> tuqG
    403:422:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    428:439:void unloadChunk(org.bukkit.World,int,int) -> GQND
    443:459:void removeEntity(org.bukkit.entity.Entity) -> tuqG
    463:464:void purgeEntity(org.bukkit.entity.Entity) -> GQND
    468:497:void purgeEntity(org.bukkit.entity.Entity,boolean) -> tuqG
    501:522:void cullEntity(org.bukkit.entity.Entity) -> LhmV
    527:572:void updateBlock(org.bukkit.block.Block) -> tuqG
    576:580:java.lang.String header(java.lang.String,surge.util.C) -> tuqG
    585:585:java.lang.String header(surge.util.C) -> tuqG
    591:595:void updateFluid(org.bukkit.block.Block) -> GQND
    599:599:void refresh(org.bukkit.Chunk) -> GQND
    604:621:void refreshChunks() -> iBlU
    625:626:void sendBlockChange(org.bukkit.Location) -> tuqG
    45:45:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> pYCa
react.Gate$1 -> org.cyberpwn.react.LhmV$1:
    react.api.SelectorPosition val$sel -> yBCD
    react.glang.Callback val$prog -> NUiR
    react.glang.Callback val$cb -> avqw
    1:54:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    59:142:void run() -> run
react.Gate$1$1 -> org.cyberpwn.react.LhmV$1$1:
    react.Gate$1 this$1 -> QpTf
    java.lang.Object val$o -> MtiU
    java.lang.reflect.Constructor val$vectorConstruct -> avrR
    java.lang.reflect.Constructor val$cuboidConstruct -> CVJy
    java.lang.reflect.Method val$faweFixMethod -> SCVa
    java.lang.Integer[] val$total -> iKeQ
    java.lang.Integer[] val$sof -> STXO
    react.glang.Callback val$prog -> NUiR
    java.lang.Integer val$tot -> RHfW
    1:86:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    93:111:void run() -> run
react.Gate$1$2 -> org.cyberpwn.react.LhmV$1$2:
    react.Gate$1 this$1 -> QpTf
    react.glang.Callback val$prog -> NUiR
    react.glang.Callback val$cb -> avqw
    java.lang.Integer[] val$total -> iKeQ
    1:115:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    122:130:void run() -> run
react.Gate$2 -> org.cyberpwn.react.LhmV$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> KLbc
    295:295:void <clinit>() -> <clinit>
react.Info -> org.cyberpwn.react.tCLt:
    java.lang.String CORE_REACT_DOT -> HCYc
    java.lang.String CORE_NAME -> Edci
    java.lang.String CORE_CACHE -> eHMT
    java.lang.String WORLD_CONFIGS -> Ahwh
    java.lang.String CORE_DOTYML -> aCow
    java.lang.String COMMAND_REACT -> jOLd
    java.lang.String COMMAND_RAI -> lLaH
    java.lang.String COMMAND_ACT_DESCRIPTION -> jpnO
    java.lang.String COMMAND_ACT -> oflA
    java.lang.String COMMAND_ACT_ALIAS_1 -> sbWT
    java.lang.String COMMAND_ACT_ALIAS_2 -> lTqT
    java.lang.String COMMAND_ACT_USAGE -> URQR
    java.lang.String COMMAND_HELP_DESCRIPTION -> xyvV
    java.lang.String COMMAND_HELP -> bqgo
    java.lang.String COMMAND_HELP_ALIAS_1 -> bhvd
    java.lang.String COMMAND_HELP_ALIAS_2 -> tdxu
    java.lang.String COMMAND_HELP_USAGE -> sYeh
    java.lang.String COMMAND_STATUS_DESCRIPTION -> oVKR
    java.lang.String COMMAND_STATUS -> LFtx
    java.lang.String COMMAND_STATUS_ALIAS_1 -> yJUk
    java.lang.String COMMAND_STATUS_ALIAS_2 -> SBwN
    java.lang.String COMMAND_STATUS_USAGE -> dgLW
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> Ywly
    java.lang.String COMMAND_CPUSCORE -> SBvj
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> YDiJ
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> qvCQ
    java.lang.String COMMAND_CPUSCORE_USAGE -> WhvF
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> ElsU
    java.lang.String COMMAND_RELOAD -> nBEj
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> fvDO
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> fucP
    java.lang.String COMMAND_RELOAD_USAGE -> oVJa
    java.lang.String COMMAND_FEATURE_DESCRIPTION -> HSxy
    java.lang.String COMMAND_FEATURE -> gpUj
    java.lang.String COMMAND_FEATURE_ALIAS_1 -> inLE
    java.lang.String COMMAND_FEATURE_ALIAS_2 -> XRhF
    java.lang.String COMMAND_FEATURE_USAGE -> fmQo
    java.lang.String COMMAND_CTP_DESCRIPTION -> MRhT
    java.lang.String COMMAND_CTP -> Kesm
    java.lang.String COMMAND_CTP_ALIAS_1 -> uNiQ
    java.lang.String COMMAND_CTP_ALIAS_2 -> Wywf
    java.lang.String COMMAND_CTP_USAGE -> SKhm
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> nJUa
    java.lang.String COMMAND_MONITOR -> owkr
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> iLHT
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> BAii
    java.lang.String COMMAND_MONITOR_USAGE -> fTDE
    java.lang.String COMMAND_ENV_DESCRIPTION -> wMDD
    java.lang.String COMMAND_ENV -> bWwQ
    java.lang.String COMMAND_ENV_ALIAS_1 -> awWi
    java.lang.String COMMAND_ENV_ALIAS_2 -> xOfL
    java.lang.String COMMAND_ENV_USAGE -> mWvk
    java.lang.String COMMAND_VERSION_DESCRIPTION -> tKij
    java.lang.String COMMAND_VERSION -> baIJ
    java.lang.String COMMAND_VERSION_ALIAS_1 -> yIvo
    java.lang.String COMMAND_VERSION_ALIAS_2 -> dUmW
    java.lang.String COMMAND_VERSION_USAGE -> VvxU
    java.lang.String COMMAND_MAP_DESCRIPTION -> lDRe
    java.lang.String COMMAND_MAP -> RIIq
    java.lang.String COMMAND_MAP_ALIAS_1 -> UbsY
    java.lang.String COMMAND_MAP_ALIAS_2 -> YEMS
    java.lang.String COMMAND_MAP_USAGE -> PTDy
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> WPID
    java.lang.String COMMAND_TOPCHUNK -> rpVm
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> upnj
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> uNkg
    java.lang.String COMMAND_TOPCHUNK_USAGE -> PddP
    java.lang.String COMMAND_GLASS_DESCRIPTION -> YxQA
    java.lang.String COMMAND_GLASS -> rEcC
    java.lang.String COMMAND_GLASS_ALIAS_1 -> NwpS
    java.lang.String COMMAND_GLASS_ALIAS_2 -> GIIO
    java.lang.String COMMAND_GLASS_USAGE -> SBxx
    java.lang.String COMMAND_SUB_DESCRIPTION -> MIyE
    java.lang.String COMMAND_SUB -> Jbrg
    java.lang.String COMMAND_SUB_ALIAS_1 -> fKQL
    java.lang.String COMMAND_SUB_ALIAS_2 -> bOeq
    java.lang.String COMMAND_SUB_USAGE -> Mckf
    java.lang.String COMMAND_USUB_DESCRIPTION -> Kvwa
    java.lang.String COMMAND_USUB -> jpno
    java.lang.String COMMAND_USUB_ALIAS_1 -> jqPU
    java.lang.String COMMAND_USUB_ALIAS_2 -> Jkda
    java.lang.String COMMAND_USUB_USAGE -> afVD
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> xXXo
    java.lang.String COMMAND_CBLAME -> EvIy
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> FhLJ
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> NVQO
    java.lang.String COMMAND_CBLAME_USAGE -> dDly
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> XAkL
    java.lang.String COMMAND_ACTIONLOG -> wUVK
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> ktVd
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> uNnf
    java.lang.String COMMAND_ACTIONLOG_USAGE -> CxUH
    java.lang.String COMMAND_TEMPACCESS_DESCRIPTION -> pjTW
    java.lang.String COMMAND_TEMPACCESS -> cBKS
    java.lang.String COMMAND_TEMPACCESS_ALIAS_1 -> YxST
    java.lang.String COMMAND_TEMPACCESS_ALIAS_2 -> bWyF
    java.lang.String COMMAND_TEMPACCESS_USAGE -> uiAo
    java.lang.String COMMAND_ACCEPT_DESCRIPTION -> anhs
    java.lang.String COMMAND_ACCEPT -> QFHc
    java.lang.String COMMAND_ACCEPT_ALIAS_1 -> CwtV
    java.lang.String COMMAND_ACCEPT_ALIAS_2 -> HmrA
    java.lang.String COMMAND_ACCEPT_USAGE -> rVgO
    java.lang.String COMMAND_REVOKE_DESCRIPTION -> uXAI
    java.lang.String COMMAND_REVOKE -> Smpo
    java.lang.String COMMAND_REVOKE_ALIAS_1 -> CDml
    java.lang.String COMMAND_REVOKE_ALIAS_2 -> JJDG
    java.lang.String COMMAND_REVOKE_USAGE -> fBaq
    java.lang.String COMMAND_REQUESTS_DESCRIPTION -> HwAx
    java.lang.String COMMAND_REQUESTS -> gEeQ
    java.lang.String COMMAND_REQUESTS_ALIAS_1 -> JARe
    java.lang.String COMMAND_REQUESTS_ALIAS_2 -> XuNr
    java.lang.String COMMAND_REQUESTS_USAGE -> FxlC
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> pXqG
    java.lang.String COMMAND_CAPABILITIES -> LPJO
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> loHa
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> aCsT
    java.lang.String COMMAND_CAPABILITIES_USAGE -> KexJ
    java.lang.String MSG_PERMISSION -> QNXR
    java.lang.String MSG_MONITORING_STARTED -> WrLi
    java.lang.String MSG_MONITORING_STOPPED -> BmAc
    java.lang.String MSG_ACTIONLOGGING_STARTED -> kIaH
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> CVRJ
    java.lang.String MSG_GLASS_STARTED -> EKUd
    java.lang.String MSG_GLASS_STOPPED -> QEgE
    org.bukkit.Color COLOR_HOPPER -> ejTF
    org.bukkit.Color COLOR_BLOCK_UPDATE -> xGUt
    org.bukkit.Color COLOR_BLOCK_FROMTO -> bFvh
    org.bukkit.Color COLOR_BLOCK_BURN -> lfVe
    org.bukkit.Color COLOR_BLOCK_DECAY -> EdhD
    org.bukkit.Color COLOR_BLOCK_FORM -> Dadc
    java.lang.String NAME_TICK -> Hvar
    java.lang.String NAME_MEMORY -> KDYB
    java.lang.String NAME_CHUNKS -> qeHi
    java.lang.String NAME_ENTITIES -> jFaU
    java.lang.String STATE_MONITORING_TAB -> Yocx
    java.lang.String STATE_MONITORING_ENABLED -> MmCC
    java.lang.String STATE_MONITORING_HIGH -> ObFv
    java.lang.String STATE_CHANNELS -> fJuW
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> Ediu
    java.lang.String STATE_MAPPING_ENABLED -> nBLw
    java.lang.String STATE_SOUND_PLAYS -> rFIM
    java.lang.String STATE_MONITORING_POSTED -> PKWf
    java.lang.String STATE_MONITORING_LASTTAB -> wniY
    java.lang.String STATE_GLASSES_ENABLED -> nSMj
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> sIJx
    java.lang.String STATE_PLAYER_HOTBAR -> Ihev
    java.lang.String STATE_PLAYER_SHIFT -> TNrj
    java.lang.String STATE_PLAYER_SCROLL -> LOlc
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> dDof
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> ghLV
    java.lang.String PERM_ACCESS -> SKoq
    java.lang.String PERM_TELEPORT -> qmXQ
    java.lang.String PERM_MONITOR -> sIJi
    java.lang.String PERM_MONITOR_TITLE -> XdOk
    java.lang.String PERM_MONITOR_ACTIONLOG -> oxRy
    java.lang.String PERM_MONITOR_MAP -> Hmqs
    java.lang.String PERM_MONITOR_ENVIRONMENT -> UQtg
    java.lang.String PERM_MONITOR_GLASSES -> Orfr
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> OYTy
    java.lang.String PERM_ACT -> UkgT
    java.lang.String PERM_RAI -> hHkH
    java.lang.String PERM_RAI_CONTROL -> jqTi
    java.lang.String PERM_RAI_ACCESS -> Lqmr
    java.lang.String PERM_RAI_MONITOR -> IFaq
    java.lang.String PERM_RELOAD -> YgSJ
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> jiDE
    java.lang.String SAMPLER_REDSTONE_TICK -> PJvS
    java.lang.String SAMPLER_ENTITY_TIME -> nAiv
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> bFxo
    java.lang.String SAMPLER_TILE_TIME_LOCK -> RYlv
    java.lang.String SAMPLER_TILE_TIME -> UtXx
    java.lang.String SAMPLER_TILE_DROPTICK -> GkQE
    java.lang.String SAMPLER_ENTITY_DROPTICK -> HwEN
    java.lang.String SAMPLER_REDSTONE_SECOND -> KTxg
    java.lang.String SAMPLER_REDSTONE_TIME -> Gjof
    java.lang.String SAMPLER_PHYSICS_TIME -> qSeL
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> QFJM
    java.lang.String SAMPLER_HOPPER_TICK -> fvIf
    java.lang.String SAMPLER_HOPPER_SECOND -> wDXa
    java.lang.String SAMPLER_HOPPER_TIME -> owui
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> wMJR
    java.lang.String SAMPLER_FLUID_TICK -> CohE
    java.lang.String SAMPLER_FLUID_SECOND -> fJwq
    java.lang.String SAMPLER_FLUID_TIME -> IyjP
    java.lang.String SAMPLER_TPS -> dMbt
    java.lang.String SAMPLER_TICK -> VLje
    java.lang.String SAMPLER_TIU -> UQws
    java.lang.String SAMPLER_MEM -> OYVq
    java.lang.String SAMPLER_FREEMEM -> BSTA
    java.lang.String SAMPLER_MAXMEM -> OYVr
    java.lang.String SAMPLER_ALLOCMEM -> XAnE
    java.lang.String SAMPLER_MAHS -> HDAm
    java.lang.String SAMPLER_CHK -> Wqnw
    java.lang.String SAMPLER_ATASK -> BApb
    java.lang.String SAMPLER_STASK -> ntrI
    java.lang.String SAMPLER_CHK_TIME -> jXEU
    java.lang.String SAMPLER_EXPLOSION_TIME -> IWeg
    java.lang.String SAMPLER_GROWTH_TIME -> AjBa
    java.lang.String SAMPLER_CHKS -> IFeB
    java.lang.String SAMPLER_ENT -> OahU
    java.lang.String SAMPLER_ENTLIV -> ySMu
    java.lang.String SAMPLER_ENTDROP -> bPMP
    java.lang.String SAMPLER_ENTTILE -> NpIl
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> YxYe
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> fBhu
    java.lang.String ACTION_CULL_ENTITIES_NAME -> oxXa
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> NMfJ
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> hsdO
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> EvQH
    java.lang.String ACTION_UPDATE_FLUID_NAME -> Coig
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> GYrl
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> PvOq
    java.lang.String ACTION_LOCK_FLUID_STATUS -> ndSy
    java.lang.String ACTION_LOCK_FLUID_NAME -> QhQq
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> DPiq
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> uFdS
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> Jkma
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> HKtg
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> GsfO
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> INwg
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> NUvm
    java.lang.String ACTION_LOCK_HOPPER_NAME -> tKrD
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> twFn
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> bqrS
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> fSjm
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> Yohg
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> EeMn
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> Lqql
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> VMMC
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> hYot
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> Wqqf
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> AjDq
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> bPNd
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> URYi
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> NgWm
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> AGaP
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> RsdN
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> QpaM
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> GRCM
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> BRtL
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> CoiU
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> Qxqf
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> EBjg
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> jXIk
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> AaTq
    java.lang.String ACTION_FIX_LIGHTING_NAME -> IOYy
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> hIRf
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> ePjF
    java.lang.String ACTION_COLLECT_GARBAGE -> scDq
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> ylfC
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> CMgs
    6:6:void <init>() -> <init>
    8:298:void <clinit>() -> <clinit>
react.Lang -> org.cyberpwn.react.KCgO:
    java.lang.String BUNDLE_NAME -> bjDc
    java.util.ResourceBundle RESOURCE_BUNDLE -> Aidq
    java.util.ResourceBundle PRIMARY_BUNDLE -> jWhw
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> org.cyberpwn.react.lnYk:
    react.React instance -> PBlq
    react.controller.SampleController sampleController -> Blgf
    react.controller.PlayerController playerController -> KVAj
    react.controller.MonitorController monitorController -> ebLg
    react.controller.CommandController commandController -> Rsfu
    react.controller.ActionController actionController -> Svjf
    react.controller.FastDecayController fastDecayController -> FhTk
    react.controller.EntityStackController entityStackController -> uykS
    react.controller.GlassController glassController -> RYth
    react.controller.EntityCullController entityCullController -> YUxS
    react.controller.SpikeController spikeController -> tUDy
    react.controller.SecurityController securityController -> GACJ
    react.controller.RedstoneController redstoneController -> DalS
    react.controller.HopperController hopperController -> mOpB
    react.controller.PhysicsController physicsController -> kIjB
    react.controller.TickTimeController tickTimeController -> FyTl
    react.controller.RAIController raiController -> hjsk
    react.controller.FluidController fluidController -> awaR
    react.controller.ChunkController chunkController -> BSVy
    react.controller.GraphController graphController -> EnAb
    react.controller.ChronophyFluidController fluidChronophyController -> FVpn
    react.controller.EventController eventController -> BAuE
    react.controller.SmearTickController smearTickController -> BtyR
    react.controller.FeatureController featureController -> eQJW
    react.controller.HopperOvertickController hopperPlungeController -> pYYS
    react.controller.LanguageController languageController -> MKEc
    react.controller.ExplosiveController explosiveController -> erkt
    react.controller.WorldController worldController -> BSVj
    react.controller.MessageController messageController -> ogWn
    react.controller.MetricsController metricsController -> FFPl
    react.controller.FeatureSetController featureSetController -> YNGh
    react.controller.FastGrowthController fastGrowthController -> KntS
    react.controller.CrashController crashController -> ePlN
    react.controller.InstantDropController InstantDropController -> vuAU
    48:48:void <init>() -> <init>
    155:169:void enable() -> enable
    175:175:void disable() -> disable
react.React$1 -> org.cyberpwn.react.lnYk$1:
    react.React this$0 -> nSVf
    1:155:void <init>(react.React) -> <init>
    160:161:void run() -> run
react.action.ActionCollectGarbage -> org.cyberpwn.react.dVAX:
    20:23:void <init>() -> <init>
    28:62:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    67:67:java.lang.String getNode() -> tupT
react.action.ActionCollectGarbage$1 -> org.cyberpwn.react.dVAX$1:
    react.action.source.IActionSource val$source -> EutK
    react.action.ActionCollectGarbage this$0 -> ieid
    31:31:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    36:60:void run() -> run
react.action.ActionCollectGarbage$1$1 -> org.cyberpwn.react.dVAX$1$1:
    long val$mbnex -> ghUJ
    long val$mbmem -> BmKY
    react.action.ActionCollectGarbage$1 this$1 -> FpgE
    41:41:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    45:58:void run() -> run
react.action.ActionCullEntities -> org.cyberpwn.react.Btag:
    long ms -> mrWJ
    int lcd -> QOCp
    33:60:void <init>() -> <init>
    65:151:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    155:164:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    169:169:java.lang.String getNode() -> tupT
    28:28:void access$0(react.action.ActionCullEntities,long) -> tuqG
    29:29:int access$1(react.action.ActionCullEntities) -> tuqG
    28:28:long access$2(react.action.ActionCullEntities) -> GQND
    29:29:void access$3(react.action.ActionCullEntities,int) -> tuqG
react.action.ActionCullEntities$1 -> org.cyberpwn.react.Btag$1:
    react.action.ActionCullEntities this$0 -> DQNn
    1:37:void <init>(react.action.ActionCullEntities) -> <init>
    42:45:react.api.ISelector get() -> UcHV
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> org.cyberpwn.react.Btag$2:
    react.action.ActionCullEntities this$0 -> DQNn
    1:49:void <init>(react.action.ActionCullEntities) -> <init>
    54:57:react.api.ISelector get() -> UcHV
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> org.cyberpwn.react.Btag$3:
    react.action.ActionCullEntities this$0 -> DQNn
    react.glang.FinalInteger val$completed -> fmbY
    react.glang.FinalInteger val$total -> scGR
    react.glang.FinalInteger val$totalCulled -> rhTB
    react.glang.FinalInteger val$totalChunked -> nJdj
    react.action.source.IActionSource val$source -> EutK
    1:105:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    110:130:void run() -> run
react.action.ActionCullEntities$4 -> org.cyberpwn.react.Btag$4:
    react.action.ActionCullEntities this$0 -> DQNn
    react.action.source.IActionSource val$source -> EutK
    react.glang.FinalInteger val$totalCulled -> rhTB
    react.glang.FinalInteger val$totalChunked -> nJdj
    1:137:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    142:148:void run() -> run
react.action.ActionCullEntities$5 -> org.cyberpwn.react.Btag$5:
    react.action.ActionCullEntities this$0 -> DQNn
    org.bukkit.Chunk val$chunk -> xqtd
    java.lang.Runnable val$cb -> AjGl
    1:155:void <init>(react.action.ActionCullEntities,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    160:162:void run() -> run
react.action.ActionFixLighting -> org.cyberpwn.react.fuYa:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    108:108:java.lang.String getNode() -> tupT
react.action.ActionFixLighting$1 -> org.cyberpwn.react.fuYa$1:
    react.action.ActionFixLighting this$0 -> YDyH
    29:29:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> UcHV
    29:29:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> org.cyberpwn.react.fuYa$2:
    react.action.source.IActionSource val$source -> EutK
    int val$ch -> htHe
    react.action.ActionFixLighting this$0 -> YDyH
    78:78:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> tuqG
    78:78:void run(java.lang.Object) -> tuqG
react.action.ActionFixLighting$3 -> org.cyberpwn.react.fuYa$3:
    react.action.ActionFixLighting this$0 -> YDyH
    89:89:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> tuqG
    89:89:void run(java.lang.Object) -> tuqG
react.action.ActionLockFluid -> org.cyberpwn.react.xGHw:
    int lcd -> QOCp
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    108:108:java.lang.String getNode() -> tupT
react.action.ActionLockFluid$1 -> org.cyberpwn.react.xGHw$1:
    react.action.ActionLockFluid this$0 -> QhUx
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> UcHV
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> org.cyberpwn.react.xGHw$2:
    react.action.ActionLockFluid this$0 -> QhUx
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> UcHV
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> org.cyberpwn.react.uxsn:
    int lcd -> QOCp
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    108:108:java.lang.String getNode() -> tupT
react.action.ActionLockHopper$1 -> org.cyberpwn.react.uxsn$1:
    react.action.ActionLockHopper this$0 -> gqDj
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> UcHV
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> org.cyberpwn.react.uxsn$2:
    react.action.ActionLockHopper this$0 -> gqDj
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> UcHV
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> org.cyberpwn.react.mymY:
    int lcd -> QOCp
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    107:107:java.lang.String getNode() -> tupT
react.action.ActionLockRedstone$1 -> org.cyberpwn.react.mymY$1:
    react.action.ActionLockRedstone this$0 -> QxuU
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> UcHV
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> org.cyberpwn.react.mymY$2:
    react.action.ActionLockRedstone this$0 -> QxuU
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> UcHV
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> org.cyberpwn.react.rokF:
    long ms -> mrWJ
    int lcd -> QOCp
    boolean fail -> xXau
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> GQND
    169:169:java.lang.String getNode() -> tupT
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> tuqG
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> tuqG
    23:23:int access$200(react.action.ActionPurgeChunks) -> GQND
    23:23:long access$100(react.action.ActionPurgeChunks) -> LhmV
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> tuqG
react.action.ActionPurgeChunks$1 -> org.cyberpwn.react.rokF$1:
    react.action.ActionPurgeChunks this$0 -> hkVh
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> UcHV
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> org.cyberpwn.react.rokF$2:
    int val$dk -> rhRy
    java.lang.Object val$j -> LXdb
    react.glang.FinalInteger val$acompleted -> twKD
    react.glang.FinalInteger val$completed -> fmbY
    react.glang.FinalInteger val$total -> scGR
    react.glang.FinalInteger val$totalCulled -> rhTB
    react.glang.FinalInteger val$totalChunked -> nJdj
    react.action.source.IActionSource val$source -> EutK
    react.api.ISelector[] val$selectors -> ESpN
    react.action.ActionPurgeChunks this$0 -> hkVh
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> org.cyberpwn.react.rokF$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> qdnu
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> org.cyberpwn.react.rokF$3:
    react.action.source.IActionSource val$source -> EutK
    react.glang.FinalInteger val$acompleted -> twKD
    react.action.ActionPurgeChunks this$0 -> hkVh
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> org.cyberpwn.react.rokF$4:
    org.bukkit.Chunk val$chunk -> xqtd
    java.lang.Runnable val$cb -> AjGl
    react.action.ActionPurgeChunks this$0 -> hkVh
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> org.cyberpwn.react.UbgR:
    long ms -> mrWJ
    int lcd -> QOCp
    34:61:void <init>() -> <init>
    66:151:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    155:198:void purge(boolean,org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    203:203:java.lang.String getNode() -> tupT
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> tuqG
    27:27:int access$100(react.action.ActionPurgeEntities) -> tuqG
    27:27:long access$000(react.action.ActionPurgeEntities) -> GQND
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> tuqG
react.action.ActionPurgeEntities$1 -> org.cyberpwn.react.UbgR$1:
    react.action.ActionPurgeEntities this$0 -> jhjm
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> UcHV
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> org.cyberpwn.react.UbgR$2:
    react.action.ActionPurgeEntities this$0 -> jhjm
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> UcHV
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> org.cyberpwn.react.UbgR$3:
    react.glang.FinalInteger val$completed -> fmbY
    react.glang.FinalInteger val$total -> scGR
    react.glang.FinalInteger val$totalCulled -> rhTB
    react.glang.FinalInteger val$totalChunked -> nJdj
    react.action.source.IActionSource val$source -> EutK
    react.action.ActionPurgeEntities this$0 -> jhjm
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> org.cyberpwn.react.UbgR$4:
    react.action.source.IActionSource val$source -> EutK
    react.glang.FinalInteger val$totalCulled -> rhTB
    react.glang.FinalInteger val$totalChunked -> nJdj
    react.action.ActionPurgeEntities this$0 -> jhjm
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    143:149:void run() -> run
react.action.ActionPurgeEntities$5 -> org.cyberpwn.react.UbgR$5:
    org.bukkit.entity.Entity val$i -> ETPu
    boolean val$force -> fdok
    react.glang.FinalInteger val$cu -> KLpn
    int val$k -> tDHm
    org.bukkit.Chunk val$chunk -> xqtd
    java.lang.Runnable val$cb -> AjGl
    react.action.ActionPurgeEntities this$0 -> jhjm
    177:177:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,boolean,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    181:189:void run() -> run
react.action.ActionUnlockFluid -> org.cyberpwn.react.Cweb:
    int lcd -> QOCp
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    89:89:java.lang.String getNode() -> tupT
react.action.ActionUnlockFluid$1 -> org.cyberpwn.react.Cweb$1:
    react.action.ActionUnlockFluid this$0 -> gWTv
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> UcHV
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> org.cyberpwn.react.iBlU:
    int lcd -> QOCp
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    89:89:java.lang.String getNode() -> tupT
react.action.ActionUnlockHopper$1 -> org.cyberpwn.react.iBlU$1:
    react.action.ActionUnlockHopper this$0 -> jiPF
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> UcHV
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> org.cyberpwn.react.pYCa:
    int lcd -> QOCp
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    89:89:java.lang.String getNode() -> tupT
react.action.ActionUnlockRedstone$1 -> org.cyberpwn.react.pYCa$1:
    react.action.ActionUnlockRedstone this$0 -> WPWK
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> UcHV
    1:1:java.lang.Object get() -> get
react.action.source.AccessActionSource -> org.cyberpwn.react.tupT:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> GQND
    26:33:void sendResponseSuccess(java.lang.String) -> LhmV
    38:45:void sendResponseError(java.lang.String) -> tCLt
    50:57:void sendResponseActing(java.lang.String) -> KCgO
react.action.source.ActionHandle -> org.cyberpwn.react.UcHV:
    react.action.source.ActionHandle AUTOMATIC -> lMSG
    react.action.source.ActionHandle MANUAL -> brXl
    react.action.source.ActionHandle MUTEX -> clkF
    react.action.source.ActionHandle[] $VALUES -> MJiT
    3:3:react.action.source.ActionHandle[] values() -> values
    3:3:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.action.source.ConsoleActionSource -> org.cyberpwn.react.OXdl:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> GQND
    18:19:void sendResponseSuccess(java.lang.String) -> LhmV
    24:25:void sendResponseError(java.lang.String) -> tCLt
    30:31:void sendResponseActing(java.lang.String) -> KCgO
react.action.source.EmptyActionSource -> org.cyberpwn.react.rUwW:
    3:3:void <init>() -> <init>
    9:9:void sendResponse(java.lang.String) -> GQND
    15:15:void sendResponseSuccess(java.lang.String) -> LhmV
    21:21:void sendResponseError(java.lang.String) -> tCLt
    27:27:void sendResponseActing(java.lang.String) -> KCgO
react.action.source.IActionSource -> org.cyberpwn.react.iCMY:
    void sendResponse(java.lang.String) -> GQND
    void sendResponseSuccess(java.lang.String) -> LhmV
    void sendResponseError(java.lang.String) -> tCLt
    void sendResponseActing(java.lang.String) -> KCgO
react.action.source.PlayerActionSource -> org.cyberpwn.react.xXJY:
    org.bukkit.entity.Player p -> RHwL
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> GQND
    30:31:void sendResponseSuccess(java.lang.String) -> LhmV
    36:37:void sendResponseError(java.lang.String) -> tCLt
    42:43:void sendResponseActing(java.lang.String) -> KCgO
react.action.source.RAIActionSource -> org.cyberpwn.react.bynN:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> GQND
    16:17:void sendResponseSuccess(java.lang.String) -> LhmV
    22:23:void sendResponseError(java.lang.String) -> tCLt
    28:29:void sendResponseActing(java.lang.String) -> KCgO
react.api.Action -> org.cyberpwn.react.qAsP:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> oMkJ
    java.lang.String[] nodes -> FgxF
    react.action.source.ActionHandle handle -> ydYV
    react.api.ActionState state -> JIqB
    react.api.ActionTargetType target -> lUay
    react.api.ActionType type -> HfOG
    react.action.source.IActionSource currentSource -> psQP
    double progress -> GQhu
    boolean forceful -> JteO
    react.glang.GMap defaultSelectors -> yKHE
    30:31:void <init>(react.api.ActionType) -> <init>
    34:47:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    51:51:boolean isForceful() -> OXdl
    56:57:void setForceful(boolean) -> GQND
    java.lang.String getNode() -> tupT
    64:79:react.api.ISelector[] biselect(react.api.ISelector[]) -> tuqG
    85:86:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> tuqG
    91:91:java.lang.String getName() -> getName
    97:97:java.lang.String getDescription() -> getDescription
    103:103:react.action.source.ActionHandle getHandleType() -> rUwW
    109:109:react.api.ActionState getState() -> iCMY
    115:115:java.lang.String getStatus() -> getStatus
    121:122:void setStatus(java.lang.String) -> lnYk
    127:127:double getProgress() -> getProgress
    133:134:void setProgress(double) -> setProgress
    139:139:react.api.ActionTargetType getTarget() -> xXJY
    145:145:react.api.ActionType getType() -> bynN
    151:151:react.glang.GMap getDefaultSelectors() -> qAsP
    157:200:void act(react.action.source.IActionSource,react.api.ISelector[]) -> GQND
    205:206:void completeAction() -> kQdH
    211:211:react.action.source.IActionSource getCurrentSource() -> AWjw
    217:217:java.lang.String[] getNodes() -> pHBT
    223:224:void setNodes(java.lang.String[]) -> tuqG
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
react.api.ActionAlreadyRunningException -> org.cyberpwn.react.kQdH:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> org.cyberpwn.react.AWjw:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> org.cyberpwn.react.pHBT:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> org.cyberpwn.react.hbMb:
    react.api.ActionState IDLE -> xaUn
    react.api.ActionState RUNNING -> lLpx
    react.api.ActionState[] $VALUES -> pbPM
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> org.cyberpwn.react.uhSI:
    react.api.ActionTargetType POSITIONAL -> ivlk
    react.api.ActionTargetType SYSTEM -> AikA
    react.api.ActionTargetType[] $VALUES -> NpNl
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> org.cyberpwn.react.JACp:
    react.api.ActionType FIX_LIGHTING -> xPTN
    react.api.ActionType UNLOCK_FLUID -> vJNK
    react.api.ActionType LOCK_FLUID -> KgFU
    react.api.ActionType UNLOCK_HOPPER -> bHDe
    react.api.ActionType LOCK_HOPPER -> twLf
    react.api.ActionType UNLOCK_REDSTONE -> mOtK
    react.api.ActionType LOCK_REDSTONE -> TGMC
    react.api.ActionType CULL_ENTITIES -> feRp
    react.api.ActionType COLLECT_GARBAGE -> XBXH
    react.api.ActionType PURGE_ENTITIES -> sYuU
    react.api.ActionType PURGE_CHUNKS -> iejR
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> ydYV
    react.api.ActionTargetType target -> lUay
    react.api.ActionType[] $VALUES -> FqHu
    6:6:react.api.ActionType[] values() -> values
    6:6:react.api.ActionType valueOf(java.lang.String) -> valueOf
    26:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> hbMb
    50:50:react.api.ActionTargetType getTarget() -> xXJY
    6:18:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> org.cyberpwn.react.VmyC:
    react.api.ActivationRangeType ANIMALS -> sADe
    react.api.ActivationRangeType MONSTERS -> NNLk
    react.api.ActivationRangeType MISC -> erpV
    react.api.ActivationRangeType[] $VALUES -> TWmc
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> org.cyberpwn.react.pPRP:
    int value() -> value
react.api.Async -> org.cyberpwn.react.teOE:
react.api.CPUBenchmark -> org.cyberpwn.react.jgps:
    org.bukkit.command.CommandSender sender -> sender
    int score -> KLsN
    java.lang.Runnable onFinish -> fKcK
    18:24:void <init>(org.bukkit.command.CommandSender) -> <init>
    28:30:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    35:92:void run() -> run
    96:96:org.bukkit.command.CommandSender getSender() -> getSender
    101:101:int getScore() -> getScore
    106:106:java.lang.Runnable getOnFinish() -> uhSI
    11:11:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> tuqG
    11:11:int access$100(react.api.CPUBenchmark) -> GQND
    11:11:java.lang.Runnable access$200(react.api.CPUBenchmark) -> LhmV
react.api.CPUBenchmark$1 -> org.cyberpwn.react.jgps$1:
    react.api.CPUBenchmark this$0 -> PTTw
    36:36:void <init>(react.api.CPUBenchmark) -> <init>
    40:41:void run() -> run
react.api.CPUBenchmark$2 -> org.cyberpwn.react.jgps$2:
    react.api.CPUBenchmark this$0 -> PTTw
    79:79:void <init>(react.api.CPUBenchmark) -> <init>
    83:90:void run() -> run
react.api.CPUResult -> org.cyberpwn.react.HeRH:
    react.api.CPUResult ULTRA_SLOW -> EBrx
    react.api.CPUResult VERY_SLOW -> hcLE
    react.api.CPUResult SLOW -> qnEy
    react.api.CPUResult AVERAGE -> oyBI
    react.api.CPUResult GOOD -> ghYO
    react.api.CPUResult FAST -> ETVP
    react.api.CPUResult VERY_FAST -> vkru
    react.api.CPUResult ULTRA_FAST -> bHHD
    java.lang.String m -> m
    react.api.CPUResult[] $VALUES -> fCRU
    6:6:react.api.CPUResult[] values() -> values
    6:6:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    20:22:void <init>(java.lang.String,int,java.lang.String) -> <init>
    27:27:java.lang.String toString() -> toString
    32:69:java.lang.String c(int) -> c
    6:15:void <clinit>() -> <clinit>
react.api.CacheBase -> org.cyberpwn.react.aKuj:
    react.glang.GMap cache -> nlkt
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> GQND
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> LhmV
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> JACp
    54:54:boolean has(java.lang.Object) -> tCLt
react.api.Capability -> org.cyberpwn.react.yIif:
    react.api.Capability DUAL_WEILD -> Fgyp
    react.api.Capability SCOREBOARD -> bXiI
    react.api.Capability SCOREBOARD_ADVANCED -> WHHj
    react.api.Capability HOPPER -> Blme
    react.api.Capability ENTITY_ATTRIBUTES -> tDJO
    react.api.Capability ENTITY_AI -> HwQB
    react.api.Capability ACTION_BAR -> FWWl
    react.api.Capability ENTITY_NAMES -> EmgE
    react.api.Capability TITLE_BAR -> lnvM
    react.api.Capability CHUNK_RELIGHTING -> mXft
    react.api.Capability MONITOR_SUBMISSIVENESS -> nllM
    react.api.Capability ACCELERATED_PING -> Emfj
    react.api.Capability ENTITY_THROTTLING -> tfLr
    react.api.Capability TILE_THROTTLING -> JlUf
    react.api.Capability PASSENGERS -> LikC
    react.glang.GList capabilities -> futf
    surge.util.Protocol version -> bXgj
    react.api.Flavor flavor -> bGfV
    java.lang.String plugin -> fLBr
    java.lang.String name -> name
    57:62:void <init>(java.lang.String,surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    66:67:void <init>(java.lang.String,surge.util.Protocol,react.api.Flavor) -> <init>
    71:72:void <init>(java.lang.String,surge.util.Protocol,java.lang.String) -> <init>
    76:77:void <init>(java.lang.String,java.lang.String) -> <init>
    81:82:void <init>(java.lang.String,react.api.Flavor) -> <init>
    86:87:void <init>(java.lang.String,surge.util.Protocol) -> <init>
    91:96:boolean isPluginCapable() -> VmyC
    101:101:boolean isFlavorCapable() -> pPRP
    106:106:boolean isVersionCapable() -> teOE
    111:111:boolean isCapable() -> jgps
    116:116:surge.util.Protocol getVersion() -> HeRH
    121:121:react.api.Flavor getFlavor() -> aKuj
    126:126:java.lang.String getPlugin() -> yIif
    131:131:java.lang.String getName() -> getName
    136:150:void sendNotCapable(org.bukkit.entity.Player) -> tuqG
    154:168:void sendNotCapable(react.action.source.IActionSource) -> tuqG
    15:49:void <clinit>() -> <clinit>
react.api.CapabilityBasis -> org.cyberpwn.react.JITl:
    react.api.CapabilityBasis VERSION -> sbiI
    react.api.CapabilityBasis FLAVOR -> NMmf
    react.api.CapabilityBasis PLUGIN -> XJjM
    react.api.CapabilityBasis[] $VALUES -> lDbX
    3:3:react.api.CapabilityBasis[] values() -> values
    3:3:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ChunkIssue -> org.cyberpwn.react.kbcq:
    react.api.ChunkIssue ENTITY -> Cxbi
    react.api.ChunkIssue HOPPER -> fuuT
    react.api.ChunkIssue TNT -> fvUs
    react.api.ChunkIssue REDSTONE -> SwPe
    react.api.ChunkIssue FLUID -> eaqE
    react.api.ChunkIssue PHYSICS -> Tqdn
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> iUOV
    react.api.ChunkIssue[] ENUM$VALUES -> tDLr
    3:10:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    14:32:double getMS() -> JITl
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> kbcq
react.api.ChunkIssue$1 -> org.cyberpwn.react.kbcq$1:
    int[] $SwitchMap$react$api$ChunkIssue -> JAdN
    14:14:void <clinit>() -> <clinit>
react.api.Clip -> org.cyberpwn.react.UACg:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> org.cyberpwn.react.EJey:
    org.bukkit.command.CommandSender sender -> sender
    13:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> GQND
    31:32:void sendResponseSuccess(java.lang.String) -> LhmV
    37:38:void sendResponseError(java.lang.String) -> tCLt
    43:44:void sendResponseActing(java.lang.String) -> KCgO
react.api.CullList -> org.cyberpwn.react.KejH:
    react.glang.GSet toCull -> kSDn
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> tCLt
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> UACg
react.api.DTest -> org.cyberpwn.react.qJcU:
    6:6:void <init>() -> <init>
    11:62:int test() -> EJey
react.api.EntityFlag -> org.cyberpwn.react.uFOG:
    react.api.EntityFlag NAMED -> MmQX
    react.api.EntityFlag TAMED -> FqMg
    react.api.EntityFlag STACKED -> pPqa
    react.api.EntityFlag RIDDEN -> IGQy
    react.api.EntityFlag LIVING -> tDLo
    react.api.EntityFlag NON_LIVING -> ObVE
    react.api.EntityFlag PASSIVE -> SToN
    react.api.EntityFlag HOSTILE -> RcNk
    react.api.EntityFlag MATURE -> gNgx
    react.api.EntityFlag YOUNG -> nKLg
    react.api.EntityFlag UNDERWATER -> prtq
    react.api.EntityFlag GROUNDED -> Cgcm
    react.api.EntityFlag AIRBORNE -> wUgB
    react.api.EntityFlag PROJECTILES -> Rsnu
    react.api.EntityFlag CAVES -> uqcN
    react.api.EntityFlag NEARBY -> UBDk
    react.api.EntityFlag LIT -> VVJF
    react.api.EntityFlag LEASHED -> rpil
    java.lang.String m -> m
    react.api.EntityFlag[] $VALUES -> TObf
    13:13:react.api.EntityFlag[] values() -> values
    13:13:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    37:39:void <init>(java.lang.String,int,java.lang.String) -> <init>
    43:53:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> KCgO
    58:156:boolean is(org.bukkit.entity.Entity) -> lnYk
    162:162:java.lang.String toString() -> toString
    13:32:void <clinit>() -> <clinit>
react.api.EntityGroup -> org.cyberpwn.react.VDFo:
    react.glang.GSet entityTypes -> cKLx
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> KejH
react.api.EntitySample -> org.cyberpwn.react.pPTd:
    react.glang.GMap counts -> vIrJ
    react.glang.GMap sets -> jiRd
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> qJcU
    45:45:react.glang.GList getTypes() -> uFOG
    50:57:int total() -> VDFo
    62:67:int get(org.bukkit.entity.EntityType) -> tuqG
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> GQND
    84:96:void add(org.bukkit.entity.Entity) -> tCLt
react.api.Experimental -> org.cyberpwn.react.jNbr:
react.api.Flavor -> org.cyberpwn.react.qSWg:
    react.api.Flavor ANY -> GAJq
    react.api.Flavor SAFE_MODE -> aoYW
    react.api.Flavor CRAFT_BUKKIT -> fKdK
    react.api.Flavor BUKKIT -> anwx
    react.api.Flavor SPIGOT -> xOvr
    react.api.Flavor SOGGY_SPIGOT -> ejdG
    react.api.Flavor PAPER_SPIGOT -> Vwiw
    react.api.Flavor TACO_SPIGOT -> loXj
    react.api.Flavor TORCH_SPIGOT -> ESvP
    react.api.Flavor FORGE_HACK -> lMUn
    react.api.Flavor SPONGE_HACK -> KLvd
    react.api.Flavor[] $VALUES -> RAJf
    6:6:react.api.Flavor[] values() -> values
    6:6:react.api.Flavor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> pPTd
    74:79:boolean compatableWith(react.api.Flavor) -> tuqG
    84:84:java.lang.String fancyName() -> jNbr
    6:18:void <clinit>() -> <clinit>
react.api.IAction -> org.cyberpwn.react.dUbW:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> rUwW
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> GQND
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    react.api.ActionState getState() -> iCMY
    react.api.ActionTargetType getTarget() -> xXJY
    void setNodes(java.lang.String[]) -> tuqG
    java.lang.String[] getNodes() -> pHBT
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> lnYk
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> bynN
    react.glang.GMap getDefaultSelectors() -> qAsP
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> tuqG
    react.api.ISelector[] biselect(react.api.ISelector[]) -> tuqG
    react.action.source.IActionSource getCurrentSource() -> AWjw
    void completeAction() -> kQdH
react.api.ICache -> org.cyberpwn.react.eiff:
    react.glang.GSet get(java.lang.Object) -> GQND
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> LhmV
    void clear() -> clear
    boolean has(java.lang.Object) -> tCLt
    react.glang.GList k() -> JACp
react.api.ICommand -> org.cyberpwn.react.Ywen:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> qSWg
    java.lang.String[] getPermissions() -> dUbW
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> dVAX
    react.api.SideGate getSideGate() -> eiff
    void registerParameterDescription(java.lang.String,java.lang.String) -> tuqG
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.api.IRecord -> org.cyberpwn.react.pGdF:
    java.lang.String getRecordType() -> Ywen
    long getRecordTime() -> pGdF
    react.json.JSONObject toJSON() -> Veka
    java.lang.Object getRecordObject() -> tnDB
    void fromJSON(react.json.JSONObject) -> tuqG
react.api.IRecordBook -> org.cyberpwn.react.Veka:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> tuqG
    long getOldestRecordTime() -> JQgm
    void addRecord(react.api.IRecord) -> tuqG
    long getLatestRecordTime() -> FpPX
    int countRecords(long,long) -> tuqG
    react.glang.GMap getRecords(long,long) -> GQND
    int purgeRecordsBefore(long) -> GQND
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> org.cyberpwn.react.tnDB:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> MlTL
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    surge.util.C getColor() -> ofcL
    surge.util.C getAltColor() -> RbQQ
    void setColor(surge.util.C,surge.util.C) -> tuqG
    int getInterval() -> pOru
    void setInterval(int) -> tuqG
    void sample() -> QpPP
    java.lang.String get() -> get
    void construct() -> KwPC
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> org.cyberpwn.react.JQgm:
    react.api.SelectionMode getMode() -> qKGV
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> KCgO
    react.glang.GSet getList() -> cdBT
    react.glang.GSet getPossibilities() -> oVBN
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> lnYk
    java.lang.String getName() -> getName
react.api.Injection -> org.cyberpwn.react.FpPX:
    react.api.InjectionMethod value() -> pjGA
react.api.InjectionMethod -> org.cyberpwn.react.MlTL:
    react.api.InjectionMethod SWAP -> tfNt
    react.api.InjectionMethod SUBSTRATE -> WYLB
    react.api.InjectionMethod RELOAD -> LYKn
    react.api.InjectionMethod[] $VALUES -> kcco
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> org.cyberpwn.react.ofcL:
    java.lang.String value() -> value
react.api.MSampler -> org.cyberpwn.react.RbQQ:
    6:6:void <init>() -> <init>
    10:10:surge.server.SuperSampler ss() -> GaoV
react.api.MonitorHeading -> org.cyberpwn.react.pOru:
    react.api.ISampler head -> tfNj
    react.glang.GList children -> xjIw
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> tuqG
    27:27:react.api.ISampler getHead() -> ERwx
    32:33:void setHead(react.api.ISampler) -> GQND
    37:37:react.glang.GList getChildren() -> VChU
    42:42:java.lang.String getHeadText() -> SnEI
    47:60:java.lang.String getChildText() -> ckow
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> tuqG
react.api.NoiseGenerator -> org.cyberpwn.react.QpPP:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> org.cyberpwn.react.KwPC:
    react.api.NoiseGenerator[] octaves -> KfjH
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> oVAf
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> org.cyberpwn.react.qKGV:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> kRes
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> RYbB
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> org.cyberpwn.react.cdBT:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> tuqG
react.api.Permissable -> org.cyberpwn.react.oVBN:
    react.api.Permissable ACCESS -> AsBJ
    react.api.Permissable TELEPORT -> BvDj
    react.api.Permissable MONITOR -> EBxD
    react.api.Permissable MONITOR_TITLE -> SDQO
    react.api.Permissable MONITOR_ACTIONLOG -> HneG
    react.api.Permissable MONITOR_MAP -> cuaq
    react.api.Permissable MONITOR_ENVIRONMENT -> jiUs
    react.api.Permissable MONITOR_GLASSES -> qTWn
    react.api.Permissable MONITOR_CHUNK_BLAME -> fCVY
    react.api.Permissable RAI_MONITOR -> JRhR
    react.api.Permissable RAI_CONTROL -> FNlW
    react.api.Permissable RAI_ACCESS -> SwUf
    react.api.Permissable RAI -> cubl
    react.api.Permissable ACT -> EKhu
    react.api.Permissable RELOAD -> URhF
    java.lang.String node -> binX
    react.glang.GList accessors -> fTVv
    react.api.Permissable[] $VALUES -> kSEm
    10:10:react.api.Permissable[] values() -> values
    10:10:react.api.Permissable valueOf(java.lang.String) -> valueOf
    32:42:void <init>(java.lang.String,int,java.lang.String) -> <init>
    46:51:void addAccessor(react.api.TemporaryAccessor) -> tuqG
    55:66:void removeAccesssor(org.bukkit.entity.Player) -> GQND
    70:78:boolean isAccessor(org.bukkit.entity.Player) -> LhmV
    83:99:boolean has(org.bukkit.command.CommandSender) -> tuqG
    104:104:java.lang.String getNode() -> tupT
    10:29:void <clinit>() -> <clinit>
react.api.PluginSelfDeleter -> org.cyberpwn.react.pjGA:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> DPtj
    java.lang.Runnable r -> aMWt
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> tuqG
react.api.ReactCommand -> org.cyberpwn.react.GaoV:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> IaEt
    java.lang.String usage -> aEGk
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> UlXo
    react.api.SideGate sideGate -> KEHr
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> dVAX
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> tuqG
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> qSWg
    47:47:java.lang.String[] getPermissions() -> dUbW
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> eiff
react.api.ReactException -> org.cyberpwn.react.ERwx:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> org.cyberpwn.react.VChU:
    react.glang.GMap keystore -> qKfE
    boolean monitoring -> monitoring
    boolean highMonitor -> esWI
    boolean actionlogging -> woYh
    boolean glasses -> lfiP
    boolean mapping -> RcOo
    int monitorSelection -> SwTm
    int plays -> hQkl
    boolean monitorPosted -> cKMw
    int monitorLastSelection -> JJWU
    int switchNotification -> rqLV
    int hotbarSlot -> iwSQ
    boolean shift -> ktkT
    int scroll -> bYOa
    double lastHeight -> kBHG
    java.util.List channels -> TXXB
    boolean heightMovement -> jqhY
    org.bukkit.entity.Player p -> RHwL
    26:43:void <clinit>() -> <clinit>
    46:99:void <init>(org.bukkit.entity.Player) -> <init>
    103:103:boolean hasChannel(java.lang.String) -> Btag
    110:117:void save() -> save
    123:130:void load() -> load
    134:134:boolean isMonitoring() -> LaBS
    139:139:boolean isMapping() -> Cfgf
    144:144:org.bukkit.entity.Player getP() -> KvpE
    149:151:void addChannel(java.lang.String) -> addChannel
    155:161:void removeChannel(java.lang.String) -> removeChannel
    165:167:void removeAllChannels() -> cIor
    171:173:void setMonitoring(boolean) -> LhmV
    177:179:void setMapping(boolean) -> tCLt
    183:183:int getMonitorSelection() -> dwfy
    188:190:void setMonitorSelection(int) -> GQND
    194:194:int getHotbarSlot() -> vQgf
    199:201:void setHotbarSlot(int) -> LhmV
    205:205:boolean isShifting() -> YLse
    210:212:void setShifting(boolean) -> KCgO
    216:216:boolean isShift() -> NxJH
    221:223:void setShift(boolean) -> lnYk
    227:227:int getScroll() -> EKKr
    232:234:void setScroll(int) -> tCLt
    238:238:int getMonitorLastSelection() -> uNeD
    243:245:void setMonitorLastSelection(int) -> KCgO
    249:250:void setP(org.bukkit.entity.Player) -> tCLt
    254:254:double getLastHeight() -> HTTu
    259:261:void setLastHeight(double) -> tuqG
    265:265:boolean isHeightMovement() -> jErw
    270:272:void setHeightMovement(boolean) -> dVAX
    276:276:int getSwitchNotification() -> GbSk
    281:283:void setSwitchNotification(int) -> lnYk
    287:287:boolean getMonitorPosted() -> XRbb
    292:294:void setMonitorPosted(boolean) -> Btag
    298:298:int getPlays() -> DOyC
    303:305:void setPlays(int) -> dVAX
    309:309:boolean isGlasses() -> IEvN
    314:316:void setGlasses(boolean) -> fuYa
    320:320:boolean isActionlogging() -> Oijb
    325:327:void setActionlogging(boolean) -> xGHw
react.api.Record -> org.cyberpwn.react.SnEI:
    java.lang.String recordType -> XmTf
    long recordTime -> UAgr
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> Ywen
    32:32:long getRecordTime() -> pGdF
    38:38:java.lang.Object getRecordObject() -> tnDB
    react.json.JSONObject toJSON() -> Veka
    void fromJSON(react.json.JSONObject) -> tuqG
react.api.RecordBook -> org.cyberpwn.react.ckow:
    java.io.File recordFile -> TXXJ
    react.json.JSONObject js -> qBwL
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> tuqG
    79:87:react.api.IRecord getRecord(long) -> tuqG
    react.api.IRecord createDummyRecord(long,java.lang.String) -> tuqG
    95:107:long getOldestRecordTime() -> JQgm
    113:125:long getLatestRecordTime() -> FpPX
    130:130:boolean within(long,long,long) -> tuqG
    136:144:int countRecords(long,long) -> tuqG
    150:162:react.glang.GMap getRecords(long,long) -> GQND
    168:181:int purgeRecordsBefore(long) -> GQND
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> org.cyberpwn.react.oVAf:
react.api.SampledChunk -> org.cyberpwn.react.RYbB:
    org.bukkit.Chunk c -> NEdc
    react.glang.GMap counts -> vIrJ
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> pXfl
    26:38:void hit(react.api.ChunkIssue,int) -> tuqG
    42:42:org.bukkit.Chunk getC() -> cSBg
    47:47:react.glang.GMap getCounts() -> cteG
react.api.SampledType -> org.cyberpwn.react.LaBS:
    react.api.SampledType ENTITY_TIME_LOCK -> MScT
    react.api.SampledType TILE_TIME_LOCK -> DkKx
    react.api.SampledType ENTITY_TIME -> VUll
    react.api.SampledType TILE_TIME -> vdIj
    react.api.SampledType ENTITY_DROPTICK -> CMtQ
    react.api.SampledType TILE_DROPTICK -> UdKm
    react.api.SampledType REDSTONE_TICK_USAGE -> CWEw
    react.api.SampledType REDSTONE_TICK -> QiAf
    react.api.SampledType REDSTONE_SECOND -> JdLq
    react.api.SampledType REDSTONE_TIME -> mYNn
    react.api.SampledType PHYSICS_TIME -> jGUF
    react.api.SampledType HOPPER_TICK_USAGE -> dWFD
    react.api.SampledType HOPPER_TICK -> UcjF
    react.api.SampledType HOPPER_SECOND -> wDgn
    react.api.SampledType HOPPER_TIME -> DkKI
    react.api.SampledType FLUID_TICK_USAGE -> iCpL
    react.api.SampledType FLUID_TICK -> qLHi
    react.api.SampledType FLUID_SECOND -> XdbY
    react.api.SampledType FLUID_TIME -> oWCt
    react.api.SampledType TPS -> SfUN
    react.api.SampledType TICK -> EnNR
    react.api.SampledType TIU -> vtjG
    react.api.SampledType MEM -> LYPQ
    react.api.SampledType FREEMEM -> CEeS
    react.api.SampledType MAXMEM -> JJXj
    react.api.SampledType ALLOCMEM -> dxfp
    react.api.SampledType MAHS -> yubS
    react.api.SampledType CHK_TIME -> qCWG
    react.api.SampledType EXPLOSION_TIME -> jaEu
    react.api.SampledType GROWTH_TIME -> JJYN
    react.api.SampledType CHK -> iTpn
    react.api.SampledType ATASK -> YovQ
    react.api.SampledType STASK -> KDkJ
    react.api.SampledType CHKS -> EnOE
    react.api.SampledType ENT -> kuJm
    react.api.SampledType ENTLIV -> GAQx
    react.api.SampledType ENTDROP -> DkNI
    react.api.SampledType ENTTILE -> OkLw
    java.lang.String node -> binX
    react.api.SampledType[] ENUM$VALUES -> SoHm
    6:45:void <clinit>() -> <clinit>
    51:51:react.api.ISampler get() -> vjxn
    57:57:java.lang.String toString() -> toString
    60:71:void <init>(java.lang.String,int,java.lang.String) -> <init>
    75:75:java.lang.String getNode() -> tupT
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> org.cyberpwn.react.Cfgf:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    surge.util.C color -> EnPo
    surge.util.C altColor -> eIII
    int interval -> xiqV
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:surge.util.C getColor() -> ofcL
    49:49:surge.util.C getAltColor() -> RbQQ
    55:55:int getInterval() -> pOru
    void sample() -> QpPP
    void construct() -> KwPC
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(surge.util.C,surge.util.C) -> tuqG
    107:108:void setInterval(int) -> tuqG
react.api.Sector -> org.cyberpwn.react.KvpE:
    int value() -> value
react.api.SelectionException -> org.cyberpwn.react.cIor:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> org.cyberpwn.react.dwfy:
    react.api.SelectionMode WHITELIST -> iLca
    react.api.SelectionMode BLACKLIST -> QOQJ
    react.api.SelectionMode[] $VALUES -> MeGe
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> org.cyberpwn.react.vQgf:
    java.lang.Class objectType -> Voab
    react.api.SelectionMode mode -> uhwi
    react.glang.GSet list -> ssrw
    react.glang.GSet possibilities -> ePxg
    int popoff -> APaX
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> qKGV
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> KCgO
    43:43:react.glang.GSet getList() -> cdBT
    49:49:react.glang.GSet getPossibilities() -> oVBN
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> lnYk
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> dVAX
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> org.cyberpwn.react.YLse:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> LhmV
    27:59:int parse(org.bukkit.command.CommandSender,java.lang.String) -> lnYk
    64:112:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> Btag
    118:118:java.lang.String getName() -> getName
react.api.SelectorParseException -> org.cyberpwn.react.NxJH:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> org.cyberpwn.react.EKKr:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> LhmV
    29:30:void add(org.bukkit.Chunk,int) -> tuqG
    34:38:void add(org.bukkit.World) -> Btag
    42:46:void addAll() -> BJQk
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> lnYk
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> Btag
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> org.cyberpwn.react.uNeD:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> lnYk
    87:87:java.lang.String getName() -> getName
react.api.Side -> org.cyberpwn.react.HTTu:
    react.api.Side PLAYERS -> dhHw
    react.api.Side CONSOLE -> qKjY
    java.lang.String ss -> jOgQ
    react.api.Side[] $VALUES -> kuMp
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> SLED
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> GQND
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> org.cyberpwn.react.jErw:
    react.api.SideGate PLAYERS_ONLY -> EwCO
    react.api.SideGate CONSOLES_ONLY -> LsED
    react.api.SideGate ANYTHING -> cJpv
    react.api.SideGate[] $VALUES -> NEdn
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> tuqG
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> org.cyberpwn.react.jErw$1:
    int[] $SwitchMap$react$api$SideGate -> TGWE
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> org.cyberpwn.react.GbSk:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> FprO
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> vAGD
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> org.cyberpwn.react.XRbb:
    double wScale -> Rkcj
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> tuqG
react.api.SpecializedTickLimiter -> org.cyberpwn.react.DOyC:
    double rMaxTime -> Ojjq
    long rStartTime -> MCBo
    double rLastTime -> eryr
    long rMark -> jiXw
    double tMaxTime -> QXAN
    react.gmath.Average atimes -> QOOf
    react.gmath.Average adropped -> toEl
    int droppedTicks -> Yoxa
    boolean entityTick -> mrbB
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> org.cyberpwn.react.IEvN:
    react.glang.GList sources -> fmlk
    react.glang.GList splooge -> tUSS
    react.glang.GSet destroy -> XuIR
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> tuqG
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> GQND
    void clipped(org.bukkit.Location) -> GQND
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> LhmV
    boolean isAllowedSource(org.bukkit.Location) -> tCLt
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> tuqG
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> GQND
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> LhmV
react.api.SploogeCounter$1 -> org.cyberpwn.react.IEvN$1:
    java.util.Iterator val$it -> jyxq
    org.bukkit.Location val$start -> FOPd
    int val$maxDistance -> BTFW
    react.api.SploogeCounter this$0 -> yJpE
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> org.cyberpwn.react.IEvN$1$1:
    react.api.SploogeCounter$1 this$1 -> Gkgd
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> org.cyberpwn.react.Oijb:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> org.cyberpwn.react.pXfl:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> Veka
    38:49:void fromJSON(react.json.JSONObject) -> tuqG
react.api.StackTraceRecordBook -> org.cyberpwn.react.cSBg:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> GQND
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> tuqG
react.api.StackedEntity -> org.cyberpwn.react.cteG:
    org.bukkit.entity.LivingEntity entity -> TOjS
    int count -> count
    double rmx -> ifYN
    org.bukkit.entity.Entity damager -> RcVg
    25:36:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    41:46:double getMaxHealth(org.bukkit.entity.LivingEntity) -> tuqG
    51:51:int getAbsoluteMaxCount() -> VULU
    56:56:int getMaxCount(org.bukkit.entity.LivingEntity) -> GQND
    61:63:void update() -> update
    67:72:void destroy() -> destroy
    76:103:void signalSize() -> aDIs
    107:107:java.lang.String color(java.lang.String) -> fuYa
    112:113:void setDamager(org.bukkit.entity.Entity) -> dVAX
    117:177:void updateHealth() -> VTju
    181:182:void heal(double) -> GQND
    186:187:void setHealth(double) -> setHealth
    191:191:int getEffectiveCount() -> UAHA
    196:196:int getEffectiveCount(double) -> LhmV
    201:201:double getEffectiveMaxHealth(int) -> Btag
    206:206:double getRealMaxHealth() -> Txxc
    211:211:double getHealth() -> getHealth
    216:222:void setMaxHealth(double) -> setMaxHealth
    227:236:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> tuqG
    240:240:double getMaxHealth() -> getMaxHealth
    245:245:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    250:250:int getCount() -> getCount
react.api.TemporaryAccessor -> org.cyberpwn.react.vjxn:
    org.bukkit.entity.Player player -> player
    react.glang.GSet permissions -> Kocg
    12:15:void <init>(org.bukkit.entity.Player) -> <init>
    19:19:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:24:react.glang.GSet getPermissions() -> CgGk
    29:30:void addPermission(react.api.Permissable) -> tuqG
    34:38:void addAll() -> BJQk
react.api.TitleMonitor -> org.cyberpwn.react.BJQk:
    react.glang.GList headings -> wVOk
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> tuqG
    24:24:int getMaxSelection() -> vAFX
    29:37:int left(int) -> fuYa
    42:50:int right(int) -> xGHw
    55:55:react.api.MonitorHeading getHeadFor(int) -> uxsn
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> tuqG
    83:100:java.lang.String getHotbarFor(int,boolean) -> tuqG
react.api.Unused -> org.cyberpwn.react.SLED:
react.api.WorldConfig -> org.cyberpwn.react.vAGD:
    boolean allowRai -> macV
    boolean allowActions -> UcoV
    boolean allowRelighting -> rybr
    boolean allowTileThrottling -> MBcn
    boolean allowEntityThrottling -> XJtN
    boolean allowFastLeafDecay -> WHRN
    java.util.List assumeNoSideEffectsEntities -> AQFL
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> fuYa
    48:62:void save(org.bukkit.World) -> xGHw
    66:80:void load(org.bukkit.World) -> uxsn
react.cache.CachedEntity -> org.cyberpwn.react.VULU:
    java.util.UUID uid -> WXrQ
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> vBJV
    double x -> x
    double y -> y
    double z -> z
    double vx -> JuPq
    double vy -> oEeR
    double vz -> eHid
    double dx -> bjTk
    double dy -> twWx
    double dz -> vSJr
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> Btag
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> fRxO
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> DaYh
    120:121:void setVx(double) -> tCLt
    125:125:double getVy() -> kAGN
    130:131:void setVy(double) -> KCgO
    135:135:double getVz() -> oEBj
    140:141:void setVz(double) -> lnYk
    145:145:double getDx() -> OiiW
    150:151:void setDx(double) -> dVAX
    155:155:double getDy() -> tnDb
    160:161:void setDy(double) -> Btag
    165:165:double getDz() -> Rrri
    170:171:void setDz(double) -> fuYa
    175:175:java.util.UUID getUid() -> cSBQ
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> org.cyberpwn.react.aDIs:
    int age -> wpAK
    boolean ageLock -> nddu
    boolean breed -> AXuI
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> Btag
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> bGMf
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> ksig
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> org.cyberpwn.react.VTju:
    org.bukkit.DyeColor dye -> ioHf
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> Btag
    30:30:org.bukkit.DyeColor getDye() -> HLCt
    35:36:void setDye(org.bukkit.DyeColor) -> tuqG
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> org.cyberpwn.react.UAHA:
    react.glang.GList potionEffects -> skck
    boolean canPickupItems -> KEPP
    org.bukkit.inventory.ItemStack[] armorContents -> ioIK
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> QqTp
    double maxHealth -> maxHealth
    int maxAir -> NFKW
    int air -> OYoL
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> Btag
    63:63:react.glang.GList getPotionEffects() -> Kemg
    68:69:void setPotionEffects(react.glang.GList) -> GQND
    73:73:boolean isCanPickupItems() -> cSBI
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> CoXg
    138:139:void setMaxAir(int) -> mymY
    143:143:int getAir() -> RPol
    148:149:void setAir(int) -> rokF
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> org.cyberpwn.react.Txxc:
    boolean sheared -> mjVi
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> Btag
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> org.cyberpwn.react.CgGk:
    org.bukkit.inventory.ItemStack is -> FOTp
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> Btag
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> org.cyberpwn.react.vAFX:
    7:7:void <init>() -> <init>
react.command.CommandAccept -> org.cyberpwn.react.fRxO:
    18:26:void <init>() -> <init>
    31:82:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandAccess -> org.cyberpwn.react.DaYh:
    react.glang.GMap last -> RcXj
    react.glang.GSet req -> TaNc
    24:32:void <init>() -> <init>
    37:78:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
    21:21:void <clinit>() -> <clinit>
react.command.CommandAct -> org.cyberpwn.react.kAGN:
    41:52:void <init>() -> <init>
    57:177:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
    181:200:void sendPage(org.bukkit.command.CommandSender,int,int) -> tuqG
    204:210:react.text.RTX getBeginningRTX() -> LPBa
    215:298:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> tuqG
    302:312:void sendHeader(org.bukkit.command.CommandSender,int,int) -> GQND
    316:345:void sendFooter(org.bukkit.command.CommandSender,int,int) -> LhmV
    349:364:react.glang.GList getSortedCommands() -> cJRy
    369:376:int getPageSize(int) -> UbgR
    381:381:boolean isValidPage(int,int) -> tuqG
    386:395:react.glang.GList getPage(int,int) -> GQND
    400:401:void f(org.bukkit.command.CommandSender,java.lang.String) -> fuYa
react.command.CommandActionLog -> org.cyberpwn.react.oEBj:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandCPUScore -> org.cyberpwn.react.OiiW:
    17:24:void <init>() -> <init>
    29:39:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandCapabilities -> org.cyberpwn.react.tnDb:
    20:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandChunkBlame -> org.cyberpwn.react.Rrri:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandChunkBlame$1 -> org.cyberpwn.react.Rrri$1:
    react.command.CommandChunkBlame this$0 -> CgnQ
    org.bukkit.command.CommandSender val$sender -> XBfj
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> org.cyberpwn.react.Rrri$1$1:
    react.command.CommandChunkBlame$1 this$1 -> LixG
    org.bukkit.command.CommandSender val$sender -> XBfj
    java.lang.String val$i -> PmtE
    react.glang.GMap val$top -> JuTS
    int val$totalx -> iTxh
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandChunkTP -> org.cyberpwn.react.cSBQ:
    20:31:void <init>() -> <init>
    38:49:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandEnvironment -> org.cyberpwn.react.bGMf:
    25:32:void <init>() -> <init>
    37:74:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandFeature -> org.cyberpwn.react.ksig:
    25:33:void <init>() -> <init>
    38:161:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandFeature$1 -> org.cyberpwn.react.ksig$1:
    react.command.CommandFeature this$0 -> sIdl
    react.feature.IOption val$j -> uFyN
    org.bukkit.command.CommandSender val$sender -> XBfj
    java.lang.String[] val$args -> ChNy
    react.feature.IFeature val$i -> xXsY
    1:71:void <init>(react.command.CommandFeature,org.bukkit.entity.Player,react.feature.IOption,org.bukkit.command.CommandSender,java.lang.String[],react.feature.IFeature) -> <init>
    76:79:void onMessage(java.lang.String) -> xGHw
react.command.CommandFeature$2 -> org.cyberpwn.react.ksig$2:
    react.command.CommandFeature this$0 -> sIdl
    react.feature.IOption val$j -> uFyN
    org.bukkit.command.CommandSender val$sender -> XBfj
    java.lang.String[] val$args -> ChNy
    react.feature.IFeature val$i -> xXsY
    1:86:void <init>(react.command.CommandFeature,org.bukkit.entity.Player,react.feature.IOption,org.bukkit.command.CommandSender,java.lang.String[],react.feature.IFeature) -> <init>
    93:103:void onMessage(java.lang.String) -> xGHw
react.command.CommandFeature$3 -> org.cyberpwn.react.ksig$3:
    react.command.CommandFeature this$0 -> sIdl
    react.feature.IOption val$j -> uFyN
    org.bukkit.command.CommandSender val$sender -> XBfj
    java.lang.String[] val$args -> ChNy
    react.feature.IFeature val$i -> xXsY
    1:110:void <init>(react.command.CommandFeature,org.bukkit.entity.Player,react.feature.IOption,org.bukkit.command.CommandSender,java.lang.String[],react.feature.IFeature) -> <init>
    117:127:void onMessage(java.lang.String) -> xGHw
react.command.CommandFeature$4 -> org.cyberpwn.react.ksig$4:
    react.command.CommandFeature this$0 -> sIdl
    react.feature.IOption val$j -> uFyN
    org.bukkit.command.CommandSender val$sender -> XBfj
    java.lang.String[] val$args -> ChNy
    react.feature.IFeature val$i -> xXsY
    1:134:void <init>(react.command.CommandFeature,org.bukkit.entity.Player,react.feature.IOption,org.bukkit.command.CommandSender,java.lang.String[],react.feature.IFeature) -> <init>
    141:151:void onMessage(java.lang.String) -> xGHw
react.command.CommandFreeze -> org.cyberpwn.react.HLCt:
    16:23:void <init>() -> <init>
    28:56:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandGlasses -> org.cyberpwn.react.Kemg:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandHelp -> org.cyberpwn.react.cSBI:
    28:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> tuqG
    81:87:react.text.RTX getBeginningRTX() -> LPBa
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> tuqG
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> GQND
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> LhmV
    208:215:react.glang.GList getSortedCommands() -> cJRy
    220:227:int getPageSize(int) -> UbgR
    232:232:boolean isValidPage(int,int) -> tuqG
    237:246:react.glang.GList getPage(int,int) -> GQND
react.command.CommandMap -> org.cyberpwn.react.CoXg:
    17:27:void <init>() -> <init>
    32:41:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandMonitor -> org.cyberpwn.react.RPol:
    18:28:void <init>() -> <init>
    33:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandReload -> org.cyberpwn.react.LPBa:
    16:24:void <init>() -> <init>
    29:31:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandRequests -> org.cyberpwn.react.cJRy:
    19:26:void <init>() -> <init>
    31:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandRevoke -> org.cyberpwn.react.JAKV:
    17:25:void <init>() -> <init>
    30:69:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandStatus -> org.cyberpwn.react.XRcq:
    28:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
    54:63:org.bukkit.inventory.ItemStack makeBook() -> JAKV
    68:94:void addSpikePages(react.glang.GList) -> LhmV
    98:108:void addStatusPages(react.glang.GList) -> tCLt
    112:129:int findSlot(org.bukkit.entity.Player) -> KCgO
react.command.CommandSubscribe -> org.cyberpwn.react.tdtx:
    19:36:void <init>() -> <init>
    41:87:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandTopChunk -> org.cyberpwn.react.ylUR:
    28:36:void <init>() -> <init>
    41:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandUnsubscribe -> org.cyberpwn.react.baCJ:
    18:27:void <init>() -> <init>
    32:63:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.command.CommandVersion -> org.cyberpwn.react.uVvs:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> tuqG
react.controller.ActionController -> org.cyberpwn.react.WiTE:
    int kiv -> Xdix
    react.glang.GMap actions -> VUsO
    react.glang.GMap pending -> QqXJ
    react.glang.GList tasks -> UdRb
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> tuqG
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> GQND
    141:141:react.api.IAction getAction(react.api.ActionType) -> tuqG
    146:147:void registerAction(react.api.IAction) -> tuqG
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> XRcq
    241:248:react.glang.GList getActionNames() -> tdtx
react.controller.ChronophyFluidController -> org.cyberpwn.react.jqLC:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> org.cyberpwn.react.TqLW:
    boolean firstTickList -> oEiB
    long firstTick -> xPcT
    long lastTick -> MKYV
    react.gmath.Average aCSMS -> sbty
    react.glang.GMap pluginLoads -> BdlB
    react.glang.GMap playerLoads -> ekOO
    int serverLoads -> Fpus
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> ylUR
    63:73:void tickNextTickList() -> baCJ
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> tuqG
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> tuqG
    171:171:boolean isFirstTickList() -> uVvs
    176:176:long getFirstTick() -> WiTE
    181:181:long getLastTick() -> jqLC
    186:186:react.gmath.Average getaCSMS() -> TqLW
    191:191:react.glang.GMap getPluginLoads() -> rNMv
    196:196:react.glang.GMap getPlayerLoads() -> GkFr
    201:201:int getServerLoads() -> TNiB
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> tuqG
    29:29:int access$1(react.controller.ChunkController) -> GQND
    29:29:void access$2(react.controller.ChunkController,int) -> tuqG
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> LhmV
react.controller.ChunkController$1 -> org.cyberpwn.react.TqLW$1:
    react.controller.ChunkController this$0 -> PUAk
    org.bukkit.event.world.ChunkLoadEvent val$e -> WsHQ
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> LhmV
    1:1:void run(java.lang.Object) -> tuqG
react.controller.CommandController -> org.cyberpwn.react.rNMv:
    react.glang.GList commands -> ELQW
    boolean k -> k
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> xGHw
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> fuYa
    123:308:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    314:331:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> tuqG
    335:335:react.glang.GList getCommands() -> Vnaf
    340:341:void setCommands(react.glang.GList) -> KCgO
    345:345:boolean isK() -> hsTo
    350:351:void setK(boolean) -> uxsn
react.controller.CrashController -> org.cyberpwn.react.GkFr:
    long lastTick -> MKYV
    java.lang.Thread crashThread -> OtBT
    14:14:void <init>() -> <init>
    22:26:void start() -> start
    31:33:void stop() -> stop
    38:39:void tick() -> tick
    44:128:void run() -> run
    132:132:java.lang.String fcf(java.lang.String) -> uxsn
react.controller.EntityCullController -> org.cyberpwn.react.TNiB:
    react.glang.GSet flags -> uFxU
    react.glang.GSet defer -> RIfN
    react.glang.GSet prefer -> Qhej
    react.glang.GMap maxs -> RQvS
    19:19:void <init>() -> <init>
    29:34:void start() -> start
    40:40:void stop() -> stop
    46:46:void tick() -> tick
    50:200:void repopulateRules() -> RQSo
    204:209:int cull(org.bukkit.Chunk) -> tCLt
    214:343:int partialCull(org.bukkit.Chunk) -> KCgO
react.controller.EntityStackController -> org.cyberpwn.react.Vnaf:
    react.glang.GList stacks -> lwsV
    22:24:void <init>() -> <init>
    29:30:void start() -> start
    35:41:void stop() -> stop
    46:61:void tick() -> tick
    66:119:void stack(react.glang.GList) -> lnYk
    123:128:boolean isStacked(org.bukkit.entity.LivingEntity) -> LhmV
    133:146:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> tCLt
    152:170:void on(org.bukkit.event.entity.EntityDamageEvent) -> tuqG
    175:194:void on(org.bukkit.event.entity.EntityDamageByEntityEvent) -> tuqG
    198:213:void merge(react.api.StackedEntity,react.api.StackedEntity) -> tuqG
    217:283:void checkNear(org.bukkit.entity.LivingEntity) -> KCgO
    288:330:void on(org.bukkit.event.entity.EntitySpawnEvent) -> tuqG
react.controller.EntityStackController$1 -> org.cyberpwn.react.Vnaf$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> TOlL
    react.controller.EntityStackController this$0 -> QpvO
    298:298:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    302:327:void run() -> run
react.controller.EventController -> org.cyberpwn.react.hsTo:
    react.lagmap.LagMap map -> xagW
    react.glang.GMap slots -> dxog
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> tuqG
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> tuqG
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> tuqG
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> tuqG
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> tuqG
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> tuqG
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> tuqG
react.controller.ExplosiveController -> org.cyberpwn.react.RQSo:
    boolean firstTickList -> oEiB
    long firstTick -> xPcT
    long lastTick -> MKYV
    react.gmath.Average aCSMS -> sbty
    react.glang.GSet locs -> UKAn
    23:23:void <init>() -> <init>
    34:40:void start() -> start
    44:57:void flushTickList() -> ylUR
    61:71:void tickNextTickList() -> baCJ
    76:77:void stop() -> stop
    83:102:void tick() -> tick
    107:136:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> GQND
    141:142:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> tuqG
    146:146:boolean isFirstTickList() -> uVvs
    151:151:long getFirstTick() -> WiTE
    156:156:long getLastTick() -> jqLC
    161:161:react.gmath.Average getaCSMS() -> TqLW
react.controller.FastDecayController -> org.cyberpwn.react.QxdX:
    react.glang.GList leaves -> miwq
    react.glang.GList logs -> PmuX
    react.glang.GList queue -> oVlY
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> FhiM
    30:30:void <init>() -> <init>
    39:47:void start() -> start
    52:53:void stop() -> stop
    58:64:void on(org.bukkit.event.block.BlockBreakEvent) -> tuqG
    69:75:void on(org.bukkit.event.block.LeavesDecayEvent) -> tuqG
    79:121:void checkBreak(org.bukkit.block.Block) -> LhmV
    125:126:void decay(org.bukkit.block.Block) -> tCLt
    131:167:void doDecay(org.bukkit.block.Block) -> KCgO
    172:229:react.glang.GList getDrops(org.bukkit.block.Block) -> lnYk
    235:246:void tick() -> tick
    32:32:react.glang.GList access$0(react.controller.FastDecayController) -> tuqG
    33:33:react.glang.GList access$1(react.controller.FastDecayController) -> GQND
    30:30:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> QxdX
react.controller.FastDecayController$1 -> org.cyberpwn.react.QxdX$1:
    react.controller.FastDecayController this$0 -> KEUF
    org.bukkit.block.Block val$source -> uaOa
    1:79:void <init>(react.controller.FastDecayController,java.lang.String,int,org.bukkit.block.Block) -> <init>
    84:119:void run() -> run
    79:79:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> tuqG
react.controller.FastDecayController$1$1 -> org.cyberpwn.react.QxdX$1$1:
    react.controller.FastDecayController$1 this$1 -> urPr
    org.bukkit.block.Block val$i -> IPPQ
    1:107:void <init>(react.controller.FastDecayController$1,java.lang.String,int,org.bukkit.block.Block) -> <init>
    112:113:void run() -> run
react.controller.FastDecayController$2 -> org.cyberpwn.react.QxdX$2:
    int[] $SwitchMap$org$bukkit$TreeSpecies -> Evgg
    178:178:void <clinit>() -> <clinit>
react.controller.FastGrowthController -> org.cyberpwn.react.UcNV:
    boolean firstTickList -> oEiB
    long firstTick -> xPcT
    long lastTick -> MKYV
    react.gmath.Average aCSMS -> sbty
    react.glang.GMap changes -> kRpJ
    20:20:void <init>() -> <init>
    31:37:void start() -> start
    41:54:void flushTickList() -> ylUR
    58:68:void tickNextTickList() -> baCJ
    73:74:void stop() -> stop
    80:91:void tick() -> tick
    96:98:void on(org.bukkit.event.block.BlockGrowEvent) -> tuqG
    103:111:void fastApply(org.bukkit.event.block.BlockGrowEvent) -> GQND
    115:115:boolean isFirstTickList() -> uVvs
    120:120:long getFirstTick() -> WiTE
    125:125:long getLastTick() -> jqLC
    130:130:react.gmath.Average getaCSMS() -> TqLW
react.controller.FeatureController -> org.cyberpwn.react.cuHG:
    react.nms.INMSBinding trueBinding -> SoOi
    19:19:void <init>() -> <init>
    26:70:void start() -> start
    75:76:void stop() -> stop
    82:82:void tick() -> tick
    86:86:java.lang.String findPackageVersion() -> UcNV
    92:92:java.lang.String getPackageVersion() -> cuHG
    97:97:boolean hasBinding() -> Rari
    104:122:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> tuqG
react.controller.FeatureSetController -> org.cyberpwn.react.Rari:
    react.feature.FeatureSet f -> FFfX
    21:21:void <init>() -> <init>
    28:30:void start() -> start
    34:71:void constructFeatureSet() -> KUOJ
    75:122:void sendPage(org.bukkit.entity.Player,java.lang.String) -> tuqG
    126:145:void toggle(org.bukkit.entity.Player,java.lang.String) -> GQND
    149:185:void toggleElement(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> tuqG
    189:218:void sendMain(org.bukkit.entity.Player) -> lnYk
    222:222:react.feature.FeatureSet getF() -> XuGK
    228:229:void stop() -> stop
    236:236:void tick() -> tick
react.controller.FluidController -> org.cyberpwn.react.KUOJ:
    react.glang.GSet ignore -> nShi
    int flowsPerTick -> NWPC
    int flowsPerSecond -> Aahk
    react.gmath.Average aFST -> AsLu
    react.gmath.Average aFSS -> XJxS
    react.gmath.Average aFSMS -> YyPR
    boolean firstTickList -> oEiB
    long firstTick -> xPcT
    long lastTick -> MKYV
    react.glang.GSet frozen -> kRoa
    react.glang.GMap queue -> AsLp
    react.glang.GMap freezeTimes -> febh
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> lnYk
    68:76:void checkChunks() -> QxcK
    80:97:void checkChunk(org.bukkit.Chunk) -> dVAX
    101:107:void queue(org.bukkit.block.Block) -> dVAX
    111:111:boolean isFrozen(org.bukkit.Chunk) -> Btag
    116:117:void freeze(org.bukkit.Chunk) -> fuYa
    121:127:void unfreeze(org.bukkit.Chunk) -> xGHw
    131:138:void freeze(org.bukkit.Chunk,long) -> tuqG
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> ylUR
    172:182:void tickNextTickList() -> baCJ
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> tuqG
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> tuqG
    248:248:react.glang.GSet getIgnore() -> Ynwe
    253:253:int getTransfersPerTick() -> BSFh
    258:258:int getTransfersPerSecond() -> vRIg
    263:263:react.gmath.Average getaFST() -> dEDd
    268:268:react.gmath.Average getaFSS() -> ckuK
    273:273:react.gmath.Average getaFSMS() -> Oike
    278:278:boolean isFirstTickList() -> uVvs
    283:283:long getFirstTick() -> WiTE
    288:288:long getLastTick() -> jqLC
    293:293:react.glang.GSet getFrozen() -> flmJ
    298:298:react.glang.GMap getQueue() -> nteC
    303:303:react.glang.GMap getFreezeTimes() -> qBYK
react.controller.GlassController -> org.cyberpwn.react.XuGK:
    react.glang.GMap q -> yvKa
    react.glang.GList g -> cKWp
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:137:void tick() -> tick
    141:141:boolean isUsingGlasses(org.bukkit.entity.Player) -> dVAX
    146:146:boolean canUseGlasses(org.bukkit.entity.Player) -> Btag
    151:167:void toggleGlasses(org.bukkit.entity.Player) -> fuYa
    172:177:void on(org.bukkit.event.block.BlockPhysicsEvent) -> tuqG
    182:187:void on(org.bukkit.event.block.BlockFromToEvent) -> tuqG
    192:197:void on(org.bukkit.event.block.BlockBurnEvent) -> tuqG
    202:207:void on(org.bukkit.event.block.BlockFormEvent) -> tuqG
    212:217:void on(org.bukkit.event.block.BlockFadeEvent) -> tuqG
    222:234:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> tuqG
    36:36:react.glang.GList access$0(react.controller.GlassController) -> tuqG
react.controller.GlassController$1 -> org.cyberpwn.react.XuGK$1:
    react.controller.GlassController this$0 -> nJwW
    react.glang.GMap val$cc -> mQEb
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:135:void run() -> run
react.controller.GlassController$1$1 -> org.cyberpwn.react.XuGK$1$1:
    react.controller.GlassController$1 this$1 -> VxWq
    org.bukkit.Location val$i -> wNAl
    org.bukkit.entity.Player val$j -> iCwg
    1:108:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    113:118:void run() -> run
react.controller.GraphController -> org.cyberpwn.react.QxcK:
    react.glang.GMap g -> WGtw
    react.glang.GMap gr -> ySgP
    react.glang.GMap gra -> BePL
    42:42:void <init>() -> <init>
    51:85:void start() -> start
    90:96:void stop() -> stop
    101:128:void tick() -> tick
    133:150:void on(org.bukkit.event.player.PlayerJoinEvent) -> tuqG
    154:176:void createGraphs(react.graph.GraphMode,org.bukkit.entity.Player,react.glang.GList) -> tuqG
    180:183:void addSystem(org.bukkit.entity.Player,react.glang.GList) -> tuqG
    187:191:void addTick(org.bukkit.entity.Player,react.glang.GList) -> GQND
    195:199:void addMemory(org.bukkit.entity.Player,react.glang.GList) -> LhmV
    203:204:void addEod(org.bukkit.entity.Player,react.glang.GList) -> tCLt
    208:218:void addPhysics(org.bukkit.entity.Player,react.glang.GList) -> KCgO
    222:225:void addReact(org.bukkit.entity.Player,react.glang.GList) -> lnYk
    229:275:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> tuqG
    280:320:void on(org.bukkit.event.player.PlayerMoveEvent) -> tuqG
    326:326:void on(react.event.ReactScrollEvent) -> tuqG
    330:335:void stopMapping(org.bukkit.entity.Player) -> xGHw
    339:370:void toggleMapping(org.bukkit.entity.Player) -> uxsn
    374:406:void toggleMappingEod(org.bukkit.entity.Player) -> mymY
    410:410:react.glang.GMap getG() -> kslL
    415:415:react.glang.GMap getGr() -> ryAc
    45:45:react.glang.GMap access$0(react.controller.GraphController) -> tuqG
    44:44:react.glang.GMap access$1(react.controller.GraphController) -> GQND
react.controller.GraphController$1 -> org.cyberpwn.react.QxcK$1:
    react.controller.GraphController this$0 -> EmxQ
    1:65:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    70:83:void run() -> run
react.controller.GraphController$2 -> org.cyberpwn.react.QxcK$2:
    react.controller.GraphController this$0 -> EmxQ
    1:101:void <init>(react.controller.GraphController) -> <init>
    106:110:void run() -> run
react.controller.GraphController$3 -> org.cyberpwn.react.QxcK$3:
    react.controller.GraphController this$0 -> EmxQ
    org.bukkit.event.player.PlayerJoinEvent val$e -> yeLy
    1:133:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    138:148:void run() -> run
react.controller.HopperController -> org.cyberpwn.react.Ynwe:
    react.glang.GSet ignore -> nShi
    int transfersPerTick -> CqCw
    int transfersPerSecond -> rWgY
    react.gmath.Average aHST -> OYsO
    react.gmath.Average aHSS -> tLlE
    react.gmath.Average aHSMS -> JtwR
    boolean firstTickList -> oEiB
    long firstTick -> xPcT
    long lastTick -> MKYV
    react.glang.GSet frozen -> kRoa
    react.glang.GMap queue -> AsLp
    react.glang.GMap freezeTimes -> febh
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> lnYk
    65:73:void checkChunks() -> QxcK
    77:94:void checkChunk(org.bukkit.Chunk) -> dVAX
    98:104:void queue(org.bukkit.block.Block) -> dVAX
    108:108:boolean isFrozen(org.bukkit.Chunk) -> Btag
    113:114:void freeze(org.bukkit.Chunk) -> fuYa
    118:124:void unfreeze(org.bukkit.Chunk) -> xGHw
    128:135:void freeze(org.bukkit.Chunk,long) -> tuqG
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> ylUR
    169:179:void tickNextTickList() -> baCJ
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> tuqG
    207:207:react.glang.GSet getIgnore() -> Ynwe
    212:212:int getTransfersPerTick() -> BSFh
    217:217:int getTransfersPerSecond() -> vRIg
    222:222:react.gmath.Average getaHST() -> xWnX
    227:227:react.gmath.Average getaHSS() -> LaCi
    232:232:react.gmath.Average getaHSMS() -> imiV
    237:237:boolean isFirstTickList() -> uVvs
    242:242:long getFirstTick() -> WiTE
    247:247:long getLastTick() -> jqLC
    252:252:react.glang.GSet getFrozen() -> flmJ
    257:257:react.glang.GMap getQueue() -> nteC
    262:262:react.glang.GMap getFreezeTimes() -> qBYK
react.controller.HopperOvertickController -> org.cyberpwn.react.BSFh:
    react.glang.GList possiblePlunge -> nCKN
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> tuqG
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> tuqG
react.controller.InstantDropController -> org.cyberpwn.react.vRIg:
    react.glang.GList ignore -> iLki
    26:26:void <init>() -> <init>
    33:35:void start() -> start
    40:41:void stop() -> stop
    46:59:void on(org.bukkit.event.block.BlockBreakEvent) -> tuqG
    64:70:void on(org.bukkit.event.player.PlayerDropItemEvent) -> tuqG
    75:85:void on(org.bukkit.event.entity.EntityDeathEvent) -> tuqG
    90:108:void on(org.bukkit.event.player.PlayerMoveEvent) -> tuqG
    113:134:void on(org.bukkit.event.entity.ProjectileHitEvent) -> tuqG
    139:180:void on(org.bukkit.event.entity.ItemSpawnEvent) -> tuqG
    186:186:void tick() -> tick
react.controller.InstantDropController$1 -> org.cyberpwn.react.vRIg$1:
    org.bukkit.entity.Arrow val$a -> DcEx
    react.controller.InstantDropController this$0 -> NOAP
    123:123:void <init>(react.controller.InstantDropController,org.bukkit.entity.Arrow) -> <init>
    127:131:void run() -> run
react.controller.InstantDropController$2 -> org.cyberpwn.react.vRIg$2:
    org.bukkit.event.entity.ItemSpawnEvent val$e -> qvgC
    org.bukkit.entity.Player val$f -> CqEL
    react.controller.InstantDropController this$0 -> NOAP
    171:171:void <init>(react.controller.InstantDropController,org.bukkit.event.entity.ItemSpawnEvent,org.bukkit.entity.Player) -> <init>
    175:176:void run() -> run
react.controller.LanguageController -> org.cyberpwn.react.dEDd:
    java.io.File languageFolder -> gFgB
    int oldVersion -> MSnE
    java.io.File dlf -> WHXx
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> ofjG
    160:221:void downloadAll(boolean) -> mymY
    225:261:void downloadLanguage(java.lang.String) -> mymY
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> rokF
    315:315:java.io.File getFileForLanguage(java.lang.String) -> UbgR
    320:332:void writeDefaults() -> oUgt
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> tuqG
    263:263:void access$1(react.controller.LanguageController) -> tuqG
react.controller.LanguageController$1 -> org.cyberpwn.react.dEDd$1:
    react.controller.LanguageController this$0 -> QOXy
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> org.cyberpwn.react.dEDd$2:
    react.controller.LanguageController this$0 -> QOXy
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> tuqG
react.controller.LanguageController$2$1 -> org.cyberpwn.react.dEDd$2$1:
    react.controller.LanguageController$2 this$1 -> WbKs
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> tuqG
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> tuqG
    121:121:void onDownloadStarted(react.gnet.download.Download) -> tuqG
    126:128:void onDownloadFinished(react.gnet.download.Download) -> GQND
    134:134:void onDownloadFailed(react.gnet.download.Download) -> LhmV
react.controller.LanguageController$3 -> org.cyberpwn.react.dEDd$3:
    react.controller.LanguageController this$0 -> QOXy
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> org.cyberpwn.react.dEDd$3$1:
    react.controller.LanguageController$3 this$1 -> YqCa
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> org.cyberpwn.react.dEDd$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> yBhe
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> org.cyberpwn.react.dEDd$4:
    react.controller.LanguageController this$0 -> QOXy
    java.io.File val$dld -> kBQJ
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> tuqG
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> tuqG
    245:245:void onDownloadStarted(react.gnet.download.Download) -> tuqG
    250:251:void onDownloadFinished(react.gnet.download.Download) -> GQND
    257:257:void onDownloadFailed(react.gnet.download.Download) -> LhmV
react.controller.MessageController -> org.cyberpwn.react.ckuK:
    react.glang.GList notes -> eYqJ
    17:17:void <init>() -> <init>
    23:24:void queue(react.notification.Notification) -> tuqG
    29:39:void start() -> start
    44:46:void stop() -> stop
    51:57:void tick() -> tick
    61:77:void subscribe(org.bukkit.entity.Player,react.notification.Note) -> tuqG
    81:97:void unsubscribe(org.bukkit.entity.Player,react.notification.Note) -> GQND
    101:121:react.glang.GList getSubscriptions(org.bukkit.entity.Player) -> rokF
    126:131:boolean isSubscribed(org.bukkit.entity.Player,react.notification.Note) -> LhmV
    136:146:void unsubscribeAll(org.bukkit.entity.Player) -> UbgR
    150:163:void subscribeAll(org.bukkit.entity.Player) -> Cweb
    167:174:void process(react.notification.Notification) -> GQND
    19:19:react.glang.GList access$0(react.controller.MessageController) -> tuqG
react.controller.MessageController$1 -> org.cyberpwn.react.ckuK$1:
    react.controller.MessageController this$0 -> skkD
    1:31:void <init>(react.controller.MessageController) -> <init>
    36:37:void run(java.lang.String) -> Cweb
    1:1:void run(java.lang.Object) -> tuqG
react.controller.MetricsController -> org.cyberpwn.react.Oike:
    react.BStats stats -> yulo
    14:14:void <init>() -> <init>
    21:49:void start() -> start
    55:55:void stop() -> stop
    62:62:void tick() -> tick
react.controller.MetricsController$1 -> org.cyberpwn.react.Oike$1:
    react.controller.MetricsController this$0 -> BmaM
    1:23:void <init>(react.controller.MetricsController) -> <init>
    28:28:java.lang.String call() -> call
    1:1:java.lang.Object call() -> call
react.controller.MetricsController$2 -> org.cyberpwn.react.Oike$2:
    react.controller.MetricsController this$0 -> BmaM
    1:32:void <init>(react.controller.MetricsController) -> <init>
    37:37:java.lang.String call() -> call
    1:1:java.lang.Object call() -> call
react.controller.MetricsController$3 -> org.cyberpwn.react.Oike$3:
    react.controller.MetricsController this$0 -> BmaM
    1:41:void <init>(react.controller.MetricsController) -> <init>
    46:46:java.lang.String call() -> call
    1:1:java.lang.Object call() -> call
react.controller.MonitorController -> org.cyberpwn.react.flmJ:
    int maxCooldown -> vtss
    react.api.TitleMonitor titleMonitor -> VVVW
    react.glang.GMap posts -> giJA
    react.slate.PhantomSlate sb -> aVUf
    boolean ready -> mXxF
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> ncfh
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> iBlU
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> pYCa
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> SdyJ
    179:184:float calcVolume(react.api.ReactPlayer) -> tuqG
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> tupT
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> UcHV
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> OXdl
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> rUwW
    219:223:void startMonitoring(org.bukkit.entity.Player) -> iCMY
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> xXJY
    242:247:void startActionLogging(org.bukkit.entity.Player) -> bynN
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> qAsP
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> GQND
    279:291:void processPlayer(react.api.ReactPlayer) -> LhmV
    296:296:void handleActionLog(org.bukkit.entity.Player) -> kQdH
    300:324:void handleTriggers(react.api.ReactPlayer) -> tCLt
    328:367:void handleScrolling(react.api.ReactPlayer) -> KCgO
    371:399:void handleShifting(react.api.ReactPlayer) -> lnYk
    403:425:void handlePosting(react.api.ReactPlayer) -> dVAX
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> tuqG
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,surge.util.C,int) -> tuqG
    471:501:void tickMonitor(react.api.ReactPlayer) -> Btag
    505:505:react.api.TitleMonitor getTitleMonitor() -> XdII
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> tuqG
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> tuqG
    539:594:void onTick() -> xyuR
    598:620:void updateActionBoard() -> EdbJ
    625:625:java.lang.String getTickName() -> GHeM
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> tuqG
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> tuqG
    41:41:void access$2(react.controller.MonitorController,boolean) -> tuqG
    41:41:boolean access$3(react.controller.MonitorController) -> GQND
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> LhmV
react.controller.MonitorController$1 -> org.cyberpwn.react.flmJ$1:
    react.controller.MonitorController this$0 -> etDW
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> org.cyberpwn.react.flmJ$2:
    react.controller.MonitorController this$0 -> etDW
    react.api.ReactPlayer val$i -> LQJX
    1:556:void <init>(react.controller.MonitorController,react.api.ReactPlayer) -> <init>
    561:562:void run() -> run
react.controller.MonitorController$3 -> org.cyberpwn.react.flmJ$3:
    react.controller.MonitorController this$0 -> etDW
    react.api.ReactPlayer val$i -> LQJX
    1:570:void <init>(react.controller.MonitorController,react.api.ReactPlayer) -> <init>
    575:576:void run() -> run
react.controller.MonitorController$4 -> org.cyberpwn.react.flmJ$4:
    react.controller.MonitorController this$0 -> etDW
    react.api.ReactPlayer val$i -> LQJX
    1:584:void <init>(react.controller.MonitorController,react.api.ReactPlayer) -> <init>
    589:590:void run() -> run
react.controller.MonitorController$5 -> org.cyberpwn.react.flmJ$5:
    react.controller.MonitorController this$0 -> etDW
    1:598:void <init>(react.controller.MonitorController) -> <init>
    603:618:void run() -> run
react.controller.PhysicsController -> org.cyberpwn.react.nteC:
    react.glang.GMap samples -> MTMX
    int redstonePerTick -> vdRe
    int redstonePerSecond -> oFKy
    boolean firstTickList -> oEiB
    long firstTick -> xPcT
    long lastTick -> MKYV
    react.gmath.Average aRSMS -> hbye
    react.gmath.Average aRST -> aNEr
    react.gmath.Average aRSS -> rhgS
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> tuqG
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> tuqG
    72:79:void flushTickList() -> ylUR
    83:93:void tickNextTickList() -> baCJ
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> uxsn
    121:122:void onPhysics(org.bukkit.Chunk) -> mymY
    126:127:void onHopper(org.bukkit.Chunk) -> rokF
    131:132:void onFluid(org.bukkit.Chunk) -> UbgR
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> tuqG
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> tuqG
    156:176:void onTick() -> xyuR
    181:181:java.lang.String getTickName() -> GHeM
    186:186:react.glang.GMap getSamples() -> lUQB
    191:191:int getRedstonePerTick() -> oDfk
    196:196:int getRedstonePerSecond() -> bGRT
    201:201:boolean isFirstTickList() -> uVvs
    206:206:long getFirstTick() -> WiTE
    211:211:long getLastTick() -> jqLC
    216:216:react.gmath.Average getaRSMS() -> IpnO
    221:221:react.gmath.Average getaRST() -> pimR
    226:226:react.gmath.Average getaRSS() -> rhDG
react.controller.PhysicsController$1 -> org.cyberpwn.react.nteC$1:
    react.controller.PhysicsController this$0 -> woem
    1:168:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> org.cyberpwn.react.qBYK:
    react.glang.GList players -> Wrkn
    react.glang.GSet save -> YySD
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> AWjw
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> tuqG
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> pHBT
    113:113:react.glang.GList getPlayers() -> BBEv
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> tuqG
react.controller.PlayerController$1 -> org.cyberpwn.react.qBYK$1:
    react.glang.GList val$toSave -> YhQV
    react.controller.PlayerController this$0 -> fehX
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> org.cyberpwn.react.kslL:
    react.rai.IRAI rai -> DYua
    boolean raiEnabled -> UAsm
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    17:17:react.rai.IRAI access$000(react.controller.RAIController) -> tuqG
react.controller.RAIController$1 -> org.cyberpwn.react.kslL$1:
    react.controller.RAIController this$0 -> ChUR
    47:47:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.RedstoneController -> org.cyberpwn.react.ryAc:
    react.glang.GSet ignore -> nShi
    react.glang.GSet frozen -> kRoa
    react.glang.GMap queue -> AsLp
    react.glang.GMap freezeTimes -> febh
    int redstonePerTick -> vdRe
    int redstonePerSecond -> oFKy
    react.gmath.Average aRST -> aNEr
    react.gmath.Average aRSS -> rhgS
    react.gmath.Average aRSMS -> hbye
    boolean firstTickList -> oEiB
    long firstTick -> xPcT
    long lastTick -> MKYV
    react.glang.GMap trackers -> VDvs
    26:26:void <init>() -> <init>
    45:81:void start() -> start
    86:87:void on(org.bukkit.event.world.WorldLoadEvent) -> tuqG
    92:94:void on(org.bukkit.event.world.WorldUnloadEvent) -> tuqG
    99:105:void stop() -> stop
    109:114:void releaseChunk(org.bukkit.Chunk) -> lnYk
    119:125:void tick() -> tick
    129:137:void checkChunks() -> QxcK
    141:158:void checkChunk(org.bukkit.Chunk) -> dVAX
    162:168:void queue(org.bukkit.block.Block) -> dVAX
    172:172:boolean isFrozen(org.bukkit.Chunk) -> Btag
    177:178:void freeze(org.bukkit.Chunk) -> fuYa
    182:189:void flushTickList() -> ylUR
    193:203:void tickNextTickList() -> baCJ
    207:213:void unfreeze(org.bukkit.Chunk) -> xGHw
    217:224:void freeze(org.bukkit.Chunk,long) -> tuqG
    229:230:void on(org.bukkit.event.world.ChunkUnloadEvent) -> tuqG
    235:248:void on(org.bukkit.event.block.BlockPhysicsEvent) -> tuqG
    252:252:react.glang.GSet getIgnore() -> Ynwe
    257:257:react.glang.GSet getFrozen() -> flmJ
    262:262:react.glang.GMap getQueue() -> nteC
    267:267:react.glang.GMap getFreezeTimes() -> qBYK
    272:272:int getRedstonePerTick() -> oDfk
    277:277:int getRedstonePerSecond() -> bGRT
    282:282:react.gmath.Average getaRST() -> pimR
    287:287:react.gmath.Average getaRSS() -> rhDG
    292:292:react.gmath.Average getaRSMS() -> IpnO
    297:297:boolean isFirstTickList() -> uVvs
    302:302:long getFirstTick() -> WiTE
    307:307:long getLastTick() -> jqLC
react.controller.SampleController -> org.cyberpwn.react.xWnX:
    react.glang.GMap samplers -> JJek
    int cd -> dgIf
    24:29:void <init>() -> <init>
    33:59:boolean checkThreads() -> JkaM
    64:65:void registerSampler(react.api.ISampler) -> LhmV
    69:69:react.api.ISampler getSampler(java.lang.String) -> iBlU
    74:117:void constructSamplers() -> AWsm
    122:124:void start() -> start
    129:131:void stop() -> stop
    137:137:void tick() -> tick
    141:141:surge.server.SuperSampler getSuperSampler() -> DGkw
    147:173:void onTick() -> xyuR
    178:178:java.lang.String getTickName() -> GHeM
    183:183:react.glang.GMap getSamplers() -> GjhV
    188:188:surge.server.SuperSampler getSs() -> gpTK
    193:193:int getCd() -> vHyn
    198:205:react.glang.GList getSamplerNames() -> mXRg
react.controller.SecurityController -> org.cyberpwn.react.LaCi:
    java.lang.String ipa -> KpMM
    react.glang.GList failures -> TOrf
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> pYCa
    41:74:void checkForIP() -> PeCA
    78:91:void scan(java.lang.Runnable) -> tuqG
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> org.cyberpwn.react.LaCi$1:
    react.controller.SecurityController this$0 -> nSnA
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> org.cyberpwn.react.LaCi$2:
    java.lang.String val$ip -> CqGG
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> org.cyberpwn.react.LaCi$3:
    java.lang.Thread val$t -> qfHW
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> org.cyberpwn.react.imiV:
    react.glang.GMap etl -> qTfG
    react.glang.GMap ttl -> wEVO
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> tuqG
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> tuqG
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> mymY
    143:160:void releaseWorld(org.bukkit.World) -> rokF
    164:181:double getUniversalEntityTick() -> ElsB
    186:203:double getUniversalEntityLimit() -> NgMF
    208:225:double getUniversalTileLimit() -> XdHp
    230:247:double getUniversalTileTick() -> WWsh
    252:264:double getUniversalEntityDroppedTicks() -> GPvK
    269:281:double getUniversalTileDroppedTicks() -> BdJe
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> tuqG
    301:312:void setTileTickLimit(org.bukkit.World,double) -> GQND
    316:321:double getEntityTickLimit(org.bukkit.World) -> UbgR
    326:331:double getTileTickLimit(org.bukkit.World) -> Cweb
    336:341:double getLastEntityTick(org.bukkit.World) -> iBlU
    346:351:double getLastTileTick(org.bukkit.World) -> pYCa
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> tupT
    366:371:double getTileDroppedTicks(org.bukkit.World) -> UcHV
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> tuqG
react.controller.SpikeController -> org.cyberpwn.react.ofjG:
    react.glang.GMap spikes -> pcDv
    26:28:void <init>() -> <init>
    33:60:void start() -> start
    65:66:void stop() -> stop
    72:108:void onTick() -> xyuR
    113:113:java.lang.String getTickName() -> GHeM
    121:121:void tick() -> tick
    125:125:react.glang.GMap getSpikes() -> Ubml
    130:167:void whoFuckingDidThis(react.glang.Callback) -> tuqG
    28:28:react.glang.GMap access$0(react.controller.SpikeController) -> tuqG
react.controller.SpikeController$1 -> org.cyberpwn.react.ofjG$1:
    react.controller.SpikeController this$0 -> cTNy
    1:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    40:58:void run() -> run
react.controller.SpikeController$1$1 -> org.cyberpwn.react.ofjG$1$1:
    react.controller.SpikeController$1 this$1 -> DtJL
    1:40:void <init>(react.controller.SpikeController$1) -> <init>
    45:56:void run() -> run
react.controller.SpikeController$2 -> org.cyberpwn.react.ofjG$2:
    react.controller.SpikeController this$0 -> cTNy
    react.glang.GMap val$vv -> NOBw
    1:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    80:106:void run() -> run
react.controller.SpikeController$3 -> org.cyberpwn.react.ofjG$3:
    react.controller.SpikeController this$0 -> cTNy
    java.lang.Thread val$t -> qfHW
    react.glang.Callback val$callback -> giLM
    1:132:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    137:165:void run() -> run
react.controller.TickTimeController -> org.cyberpwn.react.oUgt:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> org.cyberpwn.react.ncfh:
    16:16:void <init>() -> <init>
    21:27:void start() -> start
    32:38:void stop() -> stop
    43:55:void tick() -> tick
    60:61:void on(org.bukkit.event.world.WorldUnloadEvent) -> tuqG
react.event.ReactEvent -> org.cyberpwn.react.SdyJ:
    org.bukkit.event.HandlerList handlers -> SLoh
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> org.cyberpwn.react.XdII:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> org.cyberpwn.react.xyuR:
    react.event.ScrollDirection direction -> aDwN
    boolean cancellled -> ohRe
    int amount -> Ulhc
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> JlAF
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> gxcg
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> org.cyberpwn.react.EdbJ:
    react.event.ScrollDirection DOWN -> XurI
    react.event.ScrollDirection UP -> RdAG
    react.event.ScrollDirection[] $VALUES -> kmGr
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.feature.BasicBooleanOption -> org.cyberpwn.react.GHeM:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
    14:15:void <init>(java.lang.String,java.lang.String,int) -> <init>
react.feature.BasicConfigurationOption -> org.cyberpwn.react.lUQB:
    java.lang.String description -> description
    java.lang.String name -> name
    java.lang.reflect.Field configurationField -> uPPi
    15:29:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
    32:57:void <init>(java.lang.String,java.lang.String,int) -> <init>
    62:62:java.lang.String getDescription() -> getDescription
    68:68:java.lang.String getName() -> getName
    77:85:java.lang.Object getValue() -> getValue
    93:100:void setValue(java.lang.Object) -> setValue
    105:105:java.lang.String getID() -> getID
react.feature.BasicDoubleOption -> org.cyberpwn.react.oDfk:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
react.feature.BasicIntegerOption -> org.cyberpwn.react.bGRT:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
    14:15:void <init>(java.lang.String,java.lang.String,int) -> <init>
react.feature.BasicLongOption -> org.cyberpwn.react.IpnO:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
react.feature.BasicStringOption -> org.cyberpwn.react.pimR:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
react.feature.FeatureSet -> org.cyberpwn.react.rhDG:
    react.glang.GList features -> QWic
    10:12:void <init>() -> <init>
    16:17:void addFeature(react.feature.IFeature) -> tuqG
    21:21:react.glang.GList getFeatures() -> XSFL
react.feature.IBooleanOption -> org.cyberpwn.react.BBEv:
react.feature.IDoubleOption -> org.cyberpwn.react.JkaM:
react.feature.IFeature -> org.cyberpwn.react.AWsm:
    java.lang.String getName() -> getName
    react.feature.IBooleanOption getToggle() -> bqcy
    react.glang.GList getOptions() -> ndFh
    java.lang.String getID() -> getID
    void addFeatureOption(react.feature.IOption) -> tuqG
react.feature.IIntegerOption -> org.cyberpwn.react.DGkw:
react.feature.ILongOption -> org.cyberpwn.react.GjhV:
react.feature.IOption -> org.cyberpwn.react.gpTK:
    java.lang.String getDescription() -> getDescription
    java.lang.String getName() -> getName
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    java.lang.String getID() -> getID
react.feature.IStringOption -> org.cyberpwn.react.vHyn:
react.feature.ReactFeature -> org.cyberpwn.react.mXRg:
    java.lang.String name -> name
    react.feature.IBooleanOption toggle -> SoRd
    react.glang.GList options -> APmR
    12:16:void <init>(java.lang.String,react.feature.IBooleanOption) -> <init>
    21:22:void addFeatureOption(react.feature.IOption) -> tuqG
    27:27:java.lang.String getName() -> getName
    33:33:react.feature.IBooleanOption getToggle() -> bqcy
    39:39:react.glang.GList getOptions() -> ndFh
    45:45:java.lang.String getID() -> getID
react.gbench.Profiler -> org.cyberpwn.react.PeCA:
    long nanos -> dhQq
    long startNano -> pjst
    long millis -> ioPk
    long startMillis -> rFex
    double time -> DtHk
    boolean profiling -> cnAP
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> Cweb
    78:78:double getTicks() -> XuIR
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> dgIf
    93:93:double getHours() -> INit
    98:98:double getMilliseconds() -> yBCD
    103:103:long getNanoseconds() -> NUiR
    108:108:long getNanos() -> avqw
    113:113:long getStartNano() -> QpTf
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> MtiU
    128:128:double getTime() -> avrR
    133:133:boolean isProfiling() -> isProfiling
react.gconcurrent.A -> org.cyberpwn.react.ElsB:
    react.gconcurrent.ParallelPoolManager mgr -> MCNH
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> org.cyberpwn.react.ElsB$1:
    react.gconcurrent.A this$0 -> ChUF
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> org.cyberpwn.react.NgMF:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> org.cyberpwn.react.XdHp:
    react.gconcurrent.QueueMode mode -> oxqk
    react.glang.GList threads -> XTOD
    int next -> OACo
    int threadCount -> eISD
    java.util.Queue squeue -> OADJ
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> XvRK
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> fUIg
    22:23:void syncQueue(react.gconcurrent.Execution) -> tuqG
    long getNanoGate() -> CVJy
    29:42:void tickSyncQueue() -> SCVa
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> iKeQ
    93:100:int getTotalQueueSize() -> STXO
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> GQND
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> RHfW
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> KLbc
    152:179:void updateThreadInformation() -> HCYc
    183:215:react.gconcurrent.ParallelThread nextThread() -> Edci
    220:226:void createThreads(int) -> iBlU
    230:230:react.gconcurrent.QueueMode getMode() -> eHMT
    235:235:int getNext() -> Ahwh
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> aCow
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> jOLd
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> lLaH
react.gconcurrent.ParallelThread -> org.cyberpwn.react.WWsh:
    java.util.Queue queue -> RuCc
    react.gconcurrent.ThreadInformation info -> XvRK
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> xGHw
    68:75:void execute(react.gconcurrent.Execution) -> LhmV
    79:88:void execute() -> execute
    92:93:void queue(react.gconcurrent.Execution) -> GQND
    97:97:java.util.Queue getQueue() -> jpnO
    102:102:react.gconcurrent.ThreadInformation getInfo() -> oflA
react.gconcurrent.QueueMode -> org.cyberpwn.react.GPvK:
    react.gconcurrent.QueueMode ROUND_ROBIN -> kRvd
    react.gconcurrent.QueueMode SMALLEST -> Cgux
    react.gconcurrent.QueueMode[] ENUM$VALUES -> JBWi
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> org.cyberpwn.react.BdJe:
    react.gconcurrent.ParallelPoolManager mgr -> MCNH
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> org.cyberpwn.react.BdJe$1:
    react.gconcurrent.S this$0 -> PKyJ
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> org.cyberpwn.react.Ubml:
    long tick -> uPTV
    long atick -> kJfa
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> org.cyberpwn.react.JlAF:
    double ticksPerSecond -> FyqK
    int queuedSize -> PKyF
    boolean processing -> DYwp
    double utilization -> KpNu
    react.gmath.Average ticksPerSecondAverage -> mbOV
    long tick -> uPTV
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> sbWT
    33:35:void setTicksPerSecond(double) -> uxsn
    39:39:int getQueuedSize() -> lTqT
    44:45:void setQueuedSize(int) -> pYCa
    49:49:boolean isProcessing() -> URQR
    54:55:void setProcessing(boolean) -> rokF
    59:59:double getUtilization() -> xyvV
    64:65:void setUtilization(double) -> mymY
    69:69:double getTicksPerSecondAverage() -> bqgo
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> bhvd
    89:89:int getId() -> getId
react.gformat.F -> org.cyberpwn.react.gxcg:
    java.text.NumberFormat NF -> kmIi
    java.text.DecimalFormat DF -> eRGW
    java.lang.String[] NAMES -> ObiG
    java.math.BigInteger THOUSAND -> VMkQ
    java.util.NavigableMap MAP -> kBUb
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> tupT
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> tuqG
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> tuqG
    181:196:java.lang.String time(double,int) -> tuqG
    201:221:java.lang.String timeLong(long,int) -> tuqG
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> LhmV
    236:236:java.lang.String b(double) -> rokF
    241:258:java.lang.String b(java.math.BigInteger) -> tuqG
    263:267:void instantiate() -> tdxu
    279:279:java.lang.String fileSize(long) -> tCLt
    292:292:java.lang.String memSize(long) -> KCgO
    297:297:java.lang.String memSize(long,int) -> GQND
    310:311:java.lang.String stamp(long) -> lnYk
    327:361:java.lang.String ofSize(long,int) -> LhmV
    367:394:java.lang.String ofSize(long,int,int) -> tuqG
    408:413:java.lang.String trim(java.lang.String,int) -> GQND
    426:446:java.lang.String cname(java.lang.String) -> UcHV
    460:472:java.lang.String repeat(java.lang.String,int) -> repeat
    484:491:java.lang.String mem(long) -> dVAX
    504:522:java.lang.String memx(long) -> Btag
    536:537:java.lang.String f(long) -> fuYa
    549:550:java.lang.String f(int) -> tupT
    564:573:java.lang.String f(double,int) -> GQND
    589:598:java.lang.String fd(double,int) -> LhmV
    612:621:java.lang.String f(float,int) -> tuqG
    632:632:java.lang.String f(double) -> UbgR
    643:643:java.lang.String f(float) -> tuqG
    658:658:java.lang.String pc(double,int) -> tCLt
    673:673:java.lang.String pc(float,int) -> GQND
    686:686:java.lang.String pc(double) -> Cweb
    699:699:java.lang.String pc(float) -> GQND
    715:715:java.lang.String pc(int,int,int) -> tuqG
    729:729:java.lang.String pc(int,int) -> LhmV
    745:745:java.lang.String pc(long,long,int) -> tuqG
    759:759:java.lang.String pc(long,long) -> LhmV
    771:771:java.lang.String msSeconds(long) -> xGHw
    785:785:java.lang.String msSeconds(long,int) -> tCLt
    797:797:java.lang.String nsMs(long) -> uxsn
    811:811:java.lang.String nsMs(long,int) -> KCgO
    825:825:java.lang.String nsMsd(long,int) -> lnYk
react.glang.AccessCallback -> org.cyberpwn.react.XSFL:
    java.lang.Object get() -> get
react.glang.Adapter -> org.cyberpwn.react.bqcy:
    java.lang.Object adapt(java.lang.Object) -> lnYk
    java.lang.Object onAdapt(java.lang.Object) -> dVAX
react.glang.Callback -> org.cyberpwn.react.ndFh:
    java.lang.Object t -> Vomd
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> tuqG
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> org.cyberpwn.react.XuIR:
    double i -> jrWW
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> iBlU
react.glang.FinalFloat -> org.cyberpwn.react.dgIf:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> LhmV
react.glang.FinalInteger -> org.cyberpwn.react.INit:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> UcHV
react.glang.FinalLong -> org.cyberpwn.react.yBCD:
    long i -> dNbl
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> mymY
react.glang.FinalString -> org.cyberpwn.react.NUiR:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> org.cyberpwn.react.avqw:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> lnYk
    java.lang.Object onAdapt(java.lang.Object) -> dVAX
react.glang.GBiset -> org.cyberpwn.react.QpTf:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> vRuf
    java.lang.Object b -> fThn
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> sYeh
    53:54:void setA(java.lang.Object) -> Btag
    63:63:java.lang.Object getB() -> oVKR
    73:74:void setB(java.lang.Object) -> fuYa
react.glang.GList -> org.cyberpwn.react.MtiU:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> tCLt
    45:52:react.glang.GList grepDistance(int,int) -> KCgO
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> GQND
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> LFtx
    188:190:react.glang.GList shuffleCopy() -> yJUk
    198:199:void shuffle() -> SBwN
    210:236:react.glang.GList split() -> dgLW
    248:248:boolean hasIndex(int) -> OXdl
    258:259:java.lang.Object pickRandom() -> Ywly
    270:277:react.glang.GList stringList() -> SBvj
    288:292:void forEach(react.glang.Callback) -> GQND
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> rUwW
    336:336:react.glang.GList cropFrom(int) -> iCMY
    341:373:react.glang.GList split(int) -> xXJY
    389:389:react.glang.GList cropTo(int) -> bynN
    406:416:react.glang.GList crop(int,int) -> lnYk
    427:431:react.glang.GList removeDuplicates() -> YDiJ
    442:446:void removeAll(java.lang.Object) -> xGHw
    455:455:boolean hasDuplicates() -> qvCQ
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> WhvF
    484:490:void push(java.lang.Object,int) -> tuqG
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> uxsn
    528:532:void add(java.util.List) -> tuqG
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> ElsU
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> nBEj
    626:627:react.glang.GList qdel(java.lang.Object) -> mymY
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> fvDO
    662:669:java.lang.Object popLast() -> fucP
    674:683:java.lang.Object popRandom() -> oVJa
react.glang.GListAdapter -> org.cyberpwn.react.avrR:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> GQND
    java.lang.Object onAdapt(java.lang.Object) -> dVAX
react.glang.GMap -> org.cyberpwn.react.CVJy:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> HSxy
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> tuqG
    64:81:react.glang.GMap flip() -> gpUj
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> tuqG
    121:121:react.glang.GList k() -> JACp
    131:131:react.glang.GSet kset() -> inLE
    141:141:react.glang.GList v() -> XRhF
    151:151:react.glang.GSet vset() -> fmQo
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> GQND
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> dVAX
    209:219:react.glang.GMap removeDuplicateValues() -> MRhT
    233:242:void put(react.glang.GList,react.glang.GList) -> tuqG
    251:267:react.glang.GList sortK() -> Kesm
    277:293:react.glang.GList sortV() -> uNiQ
react.glang.GQuadraset -> org.cyberpwn.react.SCVa:
    java.lang.Object a -> vRuf
    java.lang.Object b -> fThn
    java.lang.Object c -> aDxA
    java.lang.Object d -> fDFt
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> sYeh
    25:26:void setA(java.lang.Object) -> Btag
    30:30:java.lang.Object getB() -> oVKR
    35:36:void setB(java.lang.Object) -> fuYa
    40:40:java.lang.Object getC() -> Wywf
    45:46:void setC(java.lang.Object) -> rokF
    50:50:java.lang.Object getD() -> SKhm
    55:56:void setD(java.lang.Object) -> UbgR
react.glang.GSet -> org.cyberpwn.react.iKeQ:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> org.cyberpwn.react.STXO:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> vRuf
    java.lang.Object b -> fThn
    java.lang.Object c -> aDxA
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> sYeh
    26:27:void setA(java.lang.Object) -> Btag
    31:31:java.lang.Object getB() -> oVKR
    36:37:void setB(java.lang.Object) -> fuYa
    41:41:java.lang.Object getC() -> Wywf
    46:47:void setC(java.lang.Object) -> rokF
react.gmath.Average -> org.cyberpwn.react.RHfW:
    double[] values -> xrmn
    double average -> XvSa
    boolean dirty -> LrpL
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> pYCa
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> nJUa
react.gmath.DoubleArrayUtils -> org.cyberpwn.react.KLbc:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> tuqG
    17:19:void wrapRight(double[]) -> tuqG
    23:27:void fill(double[],double) -> fill
react.gmath.M -> org.cyberpwn.react.HCYc:
    int precision -> SxFA
    int modulus -> OjxJ
    float[] sin -> wpLR
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> tuqG
    31:36:boolean r(java.lang.Double) -> GQND
    51:51:double tps(long,int) -> dVAX
    63:63:double ticksFromNS(long) -> rokF
    75:101:java.lang.String toRoman(int) -> qAsP
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> dVAX
    144:216:int fromRoman(java.lang.String) -> OXdl
    226:226:long ns() -> owkr
    236:236:long ms() -> iLHT
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> GQND
    333:333:float sinLookup(int) -> kQdH
react.gnet.client.Client -> org.cyberpwn.react.Edci:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> JSWx
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> tuqG
    74:74:react.gnet.packet.PacketHandler getHandler() -> BAii
react.gnet.client.IClient -> org.cyberpwn.react.eHMT:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> tuqG
    react.gnet.packet.PacketHandler getHandler() -> BAii
react.gnet.download.Download -> org.cyberpwn.react.Ahwh:
    react.gnet.download.DownloadState state -> Butq
    react.gnet.download.DownloadType type -> uOrQ
    react.gnet.download.DownloadStatus status -> jYCw
    react.gnet.download.DownloadMonitor monitor -> rWjE
    java.net.URL url -> url
    java.io.File file -> file
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    24:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> fTDE
    92:92:react.gnet.download.DownloadType getType() -> wMDD
    97:97:react.gnet.download.DownloadStatus getStatus() -> bWwQ
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> awWi
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> org.cyberpwn.react.aCow:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> tuqG
    void onDownloadStarted(react.gnet.download.Download) -> tuqG
    void onDownloadFinished(react.gnet.download.Download) -> GQND
    void onDownloadFailed(react.gnet.download.Download) -> LhmV
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> tuqG
react.gnet.download.DownloadState -> org.cyberpwn.react.jOLd:
    react.gnet.download.DownloadState IDLE -> OAEd
    react.gnet.download.DownloadState DOWNLOADING -> ORGa
    react.gnet.download.DownloadState FAILED -> jjFQ
    react.gnet.download.DownloadState FINISHED -> eYtr
    react.gnet.download.DownloadState[] ENUM$VALUES -> Volh
    3:8:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadState[] values() -> values
    1:1:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
react.gnet.download.DownloadStatus -> org.cyberpwn.react.lLaH:
    long bytesDownloaded -> aUxt
    long bytesTotal -> fwNn
    long bytesPerSecond -> nmdV
    long timeElapsed -> NEtd
    10:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> xOfL
    25:25:long getBytesDownloaded() -> mWvk
    30:31:void setBytesDownloaded(long) -> UbgR
    35:35:long getBytesTotal() -> tKij
    40:41:void setBytesTotal(long) -> Cweb
    45:45:long getBytesPerSecond() -> baIJ
    50:51:void setBytesPerSecond(long) -> iBlU
    55:55:long getTimeElapsed() -> yIvo
    60:61:void setTimeElapsed(long) -> pYCa
react.gnet.download.DownloadType -> org.cyberpwn.react.jpnO:
    react.gnet.download.DownloadType DETERMINATE -> PCiv
    react.gnet.download.DownloadType INDETERMINATE -> IjKO
    react.gnet.download.DownloadType[] ENUM$VALUES -> tECN
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadType[] values() -> values
    1:1:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
react.gnet.packet.IPacket -> org.cyberpwn.react.oflA:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> dUmW
    java.lang.String getPacketName() -> VvxU
react.gnet.packet.IncompatablePacketException -> org.cyberpwn.react.sbWT:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> org.cyberpwn.react.lTqT:
    react.gnet.packet.PacketBinding SERVER_BOUND -> nvVH
    react.gnet.packet.PacketBinding CLIENT_BOUND -> xbPW
    react.gnet.packet.PacketBinding[] ENUM$VALUES -> iVDo
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.packet.PacketBinding[] values() -> values
    1:1:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
react.gnet.packet.PacketException -> org.cyberpwn.react.URQR:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> org.cyberpwn.react.xyvV:
    react.glang.GList accept -> Hffp
    react.gnet.packet.PacketBinding side -> vRxY
    react.gnet.streams.OSS out -> IXiF
    react.gnet.streams.ISS in -> OYyd
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> tuqG
    28:34:void accept(react.gnet.packet.IPacket) -> GQND
    38:46:react.gnet.packet.IPacket findPacket(int) -> AWjw
    51:66:react.gnet.packet.IPacket read() -> lDRe
    71:77:void write(react.gnet.packet.IPacket) -> LhmV
react.gnet.packet.UnhandledPacketException -> org.cyberpwn.react.bqgo:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> org.cyberpwn.react.bhvd:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> BAii
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> tCLt
react.gnet.server.Server -> org.cyberpwn.react.tdxu:
    int port -> port
    java.net.ServerSocket socket -> jOuR
    react.gnet.packet.PacketHandler handler -> JSWx
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> BAii
    37:84:void run() -> run
    88:91:void pstart() -> RIIq
    95:96:void pstop() -> UbsY
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> tCLt
react.gnet.streams.ISS -> org.cyberpwn.react.sYeh:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> Fhqd
    boolean built -> jHEl
    byte[] readBuffer -> OIYQ
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> pHBT
    64:72:react.glang.GList readStringList() -> YEMS
    77:85:react.glang.GList readDoubleList() -> PTDy
    90:98:react.glang.GList readLongList() -> WPID
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> tuqG
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> tuqG
    136:137:react.gnet.streams.ISS gzip() -> rpVm
    142:147:void build() -> build
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> GQND
    435:436:void close() -> close
react.gnet.streams.OSS -> org.cyberpwn.react.oVKR:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> uYFp
    react.gnet.streams.StreamBuilder bu -> Fhqd
    boolean built -> jHEl
    byte[] writeBuffer -> YxyL
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> hbMb
    41:42:react.gnet.streams.OSS gzip(int) -> uhSI
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> GQND
    53:58:void build() -> build
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> Btag
    102:108:void writeDoubleList(react.glang.GList) -> fuYa
    112:118:void writeLongList(react.glang.GList) -> xGHw
    122:128:void writeStreamableList(react.glang.GList) -> uxsn
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> db
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> LhmV
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> org.cyberpwn.react.LFtx:
    react.glang.GList constructors -> WYaP
    18:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> tuqG
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> tuqG
    49:50:void bind(react.gnet.streams.StreamConstructor) -> tuqG
    54:55:void bindGZIP(int) -> JACp
    59:60:void bindGZIP() -> upnj
    64:65:void bindCipher(javax.crypto.Cipher) -> LhmV
    69:70:void bindBuffer(int) -> VmyC
    74:75:void bindBuffer() -> uNkg
react.gnet.streams.StreamConstructor -> org.cyberpwn.react.yJUk:
    java.io.InputStream constructInput(java.io.InputStream) -> tuqG
    java.io.OutputStream constructOutput(java.io.OutputStream) -> tuqG
react.gnet.streams.constructors.BufferedStreamConstructor -> org.cyberpwn.react.SBwN:
    int bufferSize -> bufferSize
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> GQND
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> GQND
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> tuqG
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> tuqG
react.gnet.streams.constructors.CipherStreamConstructor -> org.cyberpwn.react.dgLW:
    javax.crypto.Cipher cipher -> XuvL
    17:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> LhmV
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> LhmV
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> tuqG
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> tuqG
react.gnet.streams.constructors.GZipStreamConstructor -> org.cyberpwn.react.Ywly:
    int compressionLevel -> oFSe
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> tCLt
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> tCLt
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> tuqG
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> tuqG
react.gnet.streams.overlays.CGZIPInputStream -> org.cyberpwn.react.SBvj:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> org.cyberpwn.react.YDiJ:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> org.cyberpwn.react.qvCQ:
    void toBytes(react.gnet.streams.OSS) -> tuqG
    void fromBytes(react.gnet.streams.ISS) -> tuqG
react.graph.ColossalView -> org.cyberpwn.react.WhvF:
    react.papyrus.BufferedFrame view -> WIAB
    react.glang.GMap buffers -> Qhps
    react.glang.GMap graphs -> HEFF
    double level -> AaqS
    double targetLevel -> hcau
    int maxX -> SVEI
    int maxY -> ebgs
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> PddP
    51:77:void render() -> YxQA
    81:98:void scroll(int) -> pPRP
    102:112:void recompile() -> rEcC
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> tuqG
    122:122:react.papyrus.BufferedFrame getView() -> NwpS
    127:127:react.glang.GMap getBuffers() -> GIIO
    132:132:react.glang.GMap getGraphs() -> SBxx
    137:137:double getLevel() -> MIyE
    142:142:double getTargetLevel() -> Jbrg
    147:147:int getMaxX() -> fKQL
    152:152:int getMaxY() -> bOeq
react.graph.ColossalView$Builder -> org.cyberpwn.react.WhvF$tuqG:
    react.glang.GList graphs -> cSqJ
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> tuqG
    171:191:react.graph.ColossalView compute() -> Mckf
react.graph.CubicleIterator -> org.cyberpwn.react.ElsU:
    int[][] mapping -> OAGc
    int xCubes -> PwNs
    int yCubes -> iLrI
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> teOE
    47:130:void insert(react.graph.GraphSize,int) -> tuqG
    134:145:void print() -> print
react.graph.Graph2D -> org.cyberpwn.react.nBEj:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> tuqG
react.graph.GraphCPUArc -> org.cyberpwn.react.fvDO:
    byte fontColor -> BLEO
    byte backgroundColor -> QWmt
    double pct -> pbgU
    react.gmath.Average aax -> kBWE
    react.gmath.Average aay -> sJMw
    react.gmath.Average aaz -> YFUF
    long msx -> LsSe
    26:38:void <init>(byte) -> <init>
    42:47:void sample() -> QpPP
    52:90:void onRender(react.papyrus.BufferedFrame) -> tuqG
    94:94:byte getFontColor() -> Kvwa
    99:100:void setFontColor(byte) -> tuqG
    104:104:byte getBackgroundColor() -> jpno
    109:110:void setBackgroundColor(byte) -> GQND
react.graph.GraphLagMap -> org.cyberpwn.react.fucP:
    int grid -> VooK
    org.bukkit.entity.Player viewer -> MCRU
    org.bukkit.util.Vector lastVector -> huCb
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> iUOV
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> jqPU
    49:55:void zoomOut() -> Jkda
    60:164:void onRender(react.papyrus.BufferedFrame) -> tuqG
    21:21:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> kbcq
react.graph.GraphLagMap$1 -> org.cyberpwn.react.fucP$1:
    int[] $SwitchMap$react$api$ChunkIssue -> JAdN
    107:107:void <clinit>() -> <clinit>
react.graph.GraphMemoryArc -> org.cyberpwn.react.oVJa:
    byte fontColor -> BLEO
    byte backgroundColor -> QWmt
    double pct -> pbgU
    react.gmath.Average aax -> kBWE
    long msx -> LsSe
    long of -> HLsn
    26:37:void <init>(byte) -> <init>
    41:47:void sample() -> QpPP
    52:79:void onRender(react.papyrus.BufferedFrame) -> tuqG
    83:83:byte getFontColor() -> Kvwa
    88:89:void setFontColor(byte) -> tuqG
    93:93:byte getBackgroundColor() -> jpno
    98:99:void setBackgroundColor(byte) -> GQND
react.graph.GraphMode -> org.cyberpwn.react.HSxy:
    react.graph.GraphMode NORMAL -> JvAW
    react.graph.GraphMode ITEMFRAME -> FhsS
    react.graph.GraphMode EOD -> BKdt
    react.graph.GraphMode[] $VALUES -> Warw
    3:3:react.graph.GraphMode[] values() -> values
    3:3:react.graph.GraphMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSampleLine -> org.cyberpwn.react.gpUj:
    double lx -> vmMu
    double ly -> uijP
    react.api.ISampler sampler -> eAIO
    react.graph.IFormatter formatter -> nnHG
    byte graphColor -> cBro
    byte backgroundColor -> QWmt
    byte borderColor -> nLCi
    byte textColor -> jjKQ
    int ticksLeftTitle -> rXOk
    int ticksOutTitle -> hlUY
    double nextPoint -> HLwL
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> QpPP
    51:183:void onRender(react.papyrus.BufferedFrame) -> tuqG
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> GQND
    226:254:int getHue(int,int,int) -> LhmV
    259:281:void scaleFor(react.glang.GList) -> mymY
    285:285:react.graph.IFormatter getFormatter() -> MlTL
    290:291:void setFormatter(react.graph.IFormatter) -> tuqG
    295:295:byte getGraphColor() -> afVD
    300:301:void setGraphColor(byte) -> LhmV
    305:305:byte getBackgroundColor() -> jpno
    310:311:void setBackgroundColor(byte) -> GQND
    315:315:byte getBorderColor() -> xXXo
    320:321:void setBorderColor(byte) -> tCLt
    325:325:byte getTextColor() -> EvIy
    330:331:void setTextColor(byte) -> KCgO
    335:335:react.api.ISampler getSampler() -> FhLJ
react.graph.GraphSize -> org.cyberpwn.react.inLE:
    react.graph.GraphSize WIDE -> qvnv
    react.graph.GraphSize FULL -> igHS
    react.graph.GraphSize SQUARE -> dNfs
    react.graph.GraphSize[] $VALUES -> FFqK
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> NVQO
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> org.cyberpwn.react.inLE$1:
    int[] $SwitchMap$react$graph$GraphSize -> gWpK
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> org.cyberpwn.react.XRhF:
    java.lang.String text -> text
    byte fontColor -> BLEO
    byte backgroundColor -> QWmt
    boolean wrote -> OcNS
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> tuqG
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> Kvwa
    68:69:void setFontColor(byte) -> tuqG
    73:73:byte getBackgroundColor() -> jpno
    78:79:void setBackgroundColor(byte) -> GQND
react.graph.GraphingInstance -> org.cyberpwn.react.fmQo:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> cSqJ
    react.graph.ColossalView view -> axaS
    react.papyrus.Papyrus papyrus -> yLCL
    react.papyrus.IRenderer renderer -> vJhg
    boolean mapping -> RcOo
    react.glang.GList msgs -> nuuc
    surge.sched.Task waiter -> WYbA
    surge.sched.Task waiter2 -> ebin
    int shift -> mkBe
    int iv -> Qhqn
    boolean notif -> VNOG
    boolean doScrolling -> jqxy
    49:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> dDly
    127:128:void setDoScrolling(boolean) -> UbgR
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> tuqG
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> tuqG
    151:155:void send(java.lang.String) -> rUwW
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> tuqG
    166:205:void on(react.event.ReactScrollEvent) -> tuqG
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> tuqG
    219:227:void destroy() -> destroy
    231:240:void toggle() -> XAkL
    244:245:void setGraphs(react.glang.GList) -> rokF
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> wUVK
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> ktVd
    298:298:react.graph.ColossalView getView() -> uNnf
    303:303:react.papyrus.Papyrus getPapyrus() -> CxUH
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> tuqG
    323:324:void setPapyrus(react.papyrus.Papyrus) -> tuqG
    328:329:void setRenderer(react.papyrus.IRenderer) -> tuqG
    333:334:void setMapping(boolean) -> tCLt
    338:339:void setMsgs(react.glang.GList) -> UbgR
    343:344:void setWaiter(surge.sched.Task) -> tuqG
    348:349:void setWaiter2(surge.sched.Task) -> GQND
    353:354:void setShift(int) -> jgps
    358:359:void setNotif(boolean) -> Cweb
    363:363:react.papyrus.IRenderer getRenderer() -> pjTW
    368:368:boolean isMapping() -> Cfgf
    373:373:react.glang.GList getMsgs() -> cBKS
    378:378:surge.sched.Task getWaiter() -> YxST
    383:383:surge.sched.Task getWaiter2() -> bWyF
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> uiAo
    398:414:void compile() -> anhs
    418:433:void enableSly() -> QFHc
    437:445:void disableSly() -> CwtV
    40:40:boolean access$0(react.graph.GraphingInstance) -> tuqG
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> GQND
    46:46:boolean access$2(react.graph.GraphingInstance) -> LhmV
    46:46:void access$3(react.graph.GraphingInstance,boolean) -> tuqG
    44:44:int access$4(react.graph.GraphingInstance) -> tCLt
    44:44:void access$5(react.graph.GraphingInstance,int) -> tuqG
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> KCgO
react.graph.GraphingInstance$1 -> org.cyberpwn.react.fmQo$1:
    react.graph.GraphingInstance this$0 -> dhXi
    org.bukkit.entity.Player val$player -> xapI
    1:54:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> org.cyberpwn.react.fmQo$2:
    react.graph.GraphingInstance this$0 -> dhXi
    1:79:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> org.cyberpwn.react.fmQo$3:
    react.graph.GraphingInstance this$0 -> dhXi
    1:109:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> tuqG
react.graph.IFormatter -> org.cyberpwn.react.MRhT:
    java.lang.String from(double) -> tupT
react.graph.IGraph -> org.cyberpwn.react.Kesm:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> HmrA
    long getTimeViewport() -> rVgO
    void render(react.papyrus.BufferedFrame) -> LhmV
    double getMax() -> getMax
    void setMax(double) -> UcHV
react.graph.NormalGraph -> org.cyberpwn.react.uNiQ:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> Hnxj
    long timeViewport -> lMks
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> HmrA
    35:35:long getTimeViewport() -> rVgO
    41:42:void render(react.papyrus.BufferedFrame) -> LhmV
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> UcHV
    void onRender(react.papyrus.BufferedFrame) -> tuqG
react.graph.PlotBoard -> org.cyberpwn.react.Wywf:
    react.glang.GMap plots -> SEEm
    int maxRecordings -> LbTW
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> uXAI
    33:33:long getAccurateTimeSpan() -> Smpo
    38:50:long getMedian(long,long) -> tCLt
    55:55:long getMinimumAccuracyRange() -> CDml
    60:70:double getMaxValue() -> JJDG
    75:85:double getMinValue() -> fBaq
    90:90:react.glang.GList sort(react.glang.GMap) -> GQND
    95:105:long earilestRecording() -> HwAx
    110:120:long latestRecording() -> gEeQ
    125:126:void reduceBefore(long) -> tupT
    130:156:void reduceBetween(long,long) -> KCgO
    160:160:boolean before(long,long) -> lnYk
    165:165:boolean after(long,long) -> dVAX
    170:170:boolean within(long,long,long) -> tuqG
    175:193:react.glang.GMap getBetween(long,long) -> Btag
    198:200:void plot(long,double) -> tuqG
    204:204:boolean hasAt(long) -> UcHV
    209:209:double getAt(long) -> OXdl
    214:214:int getSize() -> getSize
react.graph.Point -> org.cyberpwn.react.SKhm:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> org.cyberpwn.react.nJUa:
    int iid -> ymgl
    react.graph.IGraph graph -> wyCs
    react.graph.GraphSize size -> oVxf
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> JARe
    24:25:void setGraph(react.graph.IGraph) -> tuqG
    29:29:react.graph.GraphSize getSize() -> XuNr
    34:35:void setSize(react.graph.GraphSize) -> tuqG
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> org.cyberpwn.react.owkr:
    react.graph.RenderMaxType UNLIMITED -> rPBc
    react.graph.RenderMaxType LIMITED -> IXmG
    react.graph.RenderMaxType[] $VALUES -> woqu
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> org.cyberpwn.react.iLHT:
    java.lang.String CRLF -> WYeF
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> iCMY
    162:198:java.lang.String toString(react.json.JSONObject) -> GQND
react.json.HTTPTokener -> org.cyberpwn.react.BAii:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> org.cyberpwn.react.fTDE:
    java.util.ArrayList myArrayList -> txLB
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> tuqG
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> HeRH
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> aKuj
    394:399:react.json.JSONObject getJSONObject(int) -> yIif
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> xXJY
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> JITl
    515:515:boolean optBoolean(int) -> kbcq
    533:536:boolean optBoolean(int,boolean) -> GQND
    551:551:double optDouble(int) -> UACg
    569:572:double optDouble(int,double) -> tuqG
    587:587:int optInt(int) -> EJey
    605:608:int optInt(int,int) -> Btag
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> GQND
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> tuqG
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> tuqG
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> tuqG
    722:723:react.json.JSONArray optJSONArray(int) -> KejH
    737:738:react.json.JSONObject optJSONObject(int) -> qJcU
    752:752:long optLong(int) -> uFOG
    770:773:long optLong(int,long) -> tuqG
    788:788:java.lang.String optString(int) -> VDFo
    803:804:java.lang.String optString(int,java.lang.String) -> tuqG
    816:817:react.json.JSONArray put(boolean) -> iBlU
    830:831:react.json.JSONArray put(java.util.Collection) -> tuqG
    845:848:react.json.JSONArray put(double) -> OXdl
    860:861:react.json.JSONArray put(int) -> pPTd
    873:874:react.json.JSONArray put(long) -> rUwW
    887:888:react.json.JSONArray put(java.util.Map) -> tuqG
    902:903:react.json.JSONArray put(java.lang.Object) -> Cweb
    921:922:react.json.JSONArray put(int,boolean) -> LhmV
    939:940:react.json.JSONArray put(int,java.util.Collection) -> tuqG
    958:959:react.json.JSONArray put(int,double) -> GQND
    977:978:react.json.JSONArray put(int,int) -> fuYa
    996:997:react.json.JSONArray put(int,long) -> GQND
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> tuqG
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> tuqG
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> iBlU
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> tuqG
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> tuqG
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> tuqG
react.json.JSONException -> org.cyberpwn.react.wMDD:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> lhDD
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> org.cyberpwn.react.bWwQ:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> tuqG
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> bynN
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> tuqG
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> GQND
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> iCMY
    379:456:java.lang.String toString(react.json.JSONArray) -> GQND
    472:552:java.lang.String toString(react.json.JSONObject) -> GQND
react.json.JSONObject -> org.cyberpwn.react.awWi:
    java.util.Map map -> map
    java.lang.Object NULL -> Swkp
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> tuqG
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> GQND
    480:499:java.lang.String doubleToString(double) -> rUwW
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> qAsP
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> kQdH
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> AWjw
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> LhmV
    751:767:java.lang.String[] getNames(java.lang.Object) -> pYCa
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> pHBT
    855:855:boolean isNull(java.lang.String) -> isNull
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> FxlC
    917:937:java.lang.String numberToString(java.lang.Number) -> tuqG
    949:949:java.lang.Object opt(java.lang.String) -> hbMb
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> tuqG
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> tuqG
    1018:1018:boolean optBoolean(java.lang.String) -> uhSI
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> tuqG
    1054:1054:double optDouble(java.lang.String) -> JACp
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> tuqG
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> tuqG
    1116:1119:double optDouble(java.lang.String,double) -> tuqG
    1134:1134:int optInt(java.lang.String) -> VmyC
    1152:1155:int optInt(java.lang.String,int) -> LhmV
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> pPRP
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> teOE
    1198:1198:long optLong(java.lang.String) -> jgps
    1216:1219:long optLong(java.lang.String,long) -> tuqG
    1234:1234:java.lang.String optString(java.lang.String) -> HeRH
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> GQND
    1255:1305:void populateMap(java.lang.Object) -> tupT
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> GQND
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> tuqG
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> GQND
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> tCLt
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> GQND
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> tuqG
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> LhmV
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> tCLt
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> KCgO
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> tuqG
    1590:1590:java.lang.Object remove(java.lang.String) -> aKuj
    1605:1640:boolean similar(java.lang.Object) -> iBlU
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> UcHV
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> LhmV
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> tuqG
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> tuqG
    2000:2004:void indent(java.io.Writer,int) -> tuqG
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> tuqG
react.json.JSONObject$Null -> org.cyberpwn.react.awWi$tuqG:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> org.cyberpwn.react.xOfL:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> org.cyberpwn.react.mWvk:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> org.cyberpwn.react.tKij:
    long character -> lxbx
    boolean eof -> eof
    long index -> xbSs
    long line -> Evsu
    char previous -> Hfkc
    java.io.Reader reader -> reader
    boolean usePrevious -> cmhw
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> back
    119:131:int dehexchar(char) -> tuqG
    136:136:boolean end() -> pXqG
    147:153:boolean more() -> LPJO
    164:198:char next() -> next
    213:218:char next(char) -> GQND
    233:250:java.lang.String next(int) -> jNbr
    263:266:char nextClean() -> loHa
    287:334:java.lang.String nextString(char) -> LhmV
    349:361:java.lang.String nextTo(char) -> tCLt
    376:388:java.lang.String nextTo(java.lang.String) -> yIif
    403:441:java.lang.Object nextValue() -> aCsT
    458:479:char skipTo(char) -> KCgO
    491:491:react.json.JSONException syntaxError(java.lang.String) -> JITl
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> org.cyberpwn.react.baIJ:
    int maxdepth -> sSDp
    boolean comma -> hcfU
    char mode -> kKMY
    react.json.JSONObject[] stack -> KhDJ
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> kbcq
    157:164:react.json.JSONWriter array() -> KexJ
    180:193:react.json.JSONWriter end(char,char) -> tuqG
    206:206:react.json.JSONWriter endArray() -> QNXR
    219:219:react.json.JSONWriter endObject() -> WrLi
    235:258:react.json.JSONWriter key(java.lang.String) -> UACg
    274:285:react.json.JSONWriter object() -> BmAc
    299:310:void pop(char) -> lnYk
    322:329:void push(react.json.JSONObject) -> tCLt
    342:342:react.json.JSONWriter value(boolean) -> pYCa
    356:356:react.json.JSONWriter value(double) -> iCMY
    369:369:react.json.JSONWriter value(long) -> iCMY
    385:385:react.json.JSONWriter value(java.lang.Object) -> OXdl
react.json.XML -> org.cyberpwn.react.yIvo:
    java.lang.Character AMP -> grDj
    java.lang.Character APOS -> KxdW
    java.lang.Character BANG -> sdEj
    java.lang.Character EQ -> IHJq
    java.lang.Character GT -> KhCm
    java.lang.Character LT -> riRm
    java.lang.Character QUEST -> SLvi
    java.lang.Character QUOT -> AIFR
    java.lang.Character SLASH -> psmi
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> EJey
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> tuqG
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> iCMY
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> org.cyberpwn.react.dUmW:
    java.util.HashMap entity -> FPDF
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> kIaH
    108:133:java.lang.Object nextContent() -> CVRJ
    149:166:java.lang.Object nextEntity(char) -> dVAX
    186:239:java.lang.Object nextMeta() -> EKUd
    261:334:java.lang.Object nextToken() -> QEgE
    354:420:boolean skipPast(java.lang.String) -> KejH
react.lagmap.LagMap -> org.cyberpwn.react.VvxU:
    react.glang.GMap chunks -> BmkR
    13:16:void <init>() -> <init>
    20:27:react.glang.GMap getGrandTotalMilliseconds() -> ejTF
    32:47:react.glang.GMap getGrandTotal() -> xGUt
    52:61:void pump() -> bFvh
    65:71:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> tuqG
    75:81:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> tuqG
    85:85:react.glang.GMap getChunks() -> lfVe
react.lagmap.LagMapChunk -> org.cyberpwn.react.lDRe:
    react.glang.GMap hits -> qCks
    org.bukkit.Chunk c -> NEdc
    15:19:void <init>(org.bukkit.Chunk) -> <init>
    23:37:react.glang.GMap getMS() -> EdhD
    42:66:double totalMS() -> Dadc
    71:78:double getMS(react.api.ChunkIssue) -> tuqG
    83:89:void hit(react.api.ChunkIssue,double) -> tuqG
    93:94:void hit(react.api.ChunkIssue) -> GQND
    98:98:int getX() -> getX
    103:103:int getZ() -> getZ
    108:115:double totalScore() -> Hvar
    120:120:react.glang.GMap getHits() -> KDYB
    125:134:void pump() -> bFvh
    139:139:int compareTo(react.lagmap.LagMapChunk) -> tuqG
    144:144:org.bukkit.Chunk getC() -> cSBg
    149:149:org.bukkit.World getWorld() -> getWorld
    1:1:int compareTo(java.lang.Object) -> compareTo
react.nms.INMSBinding -> org.cyberpwn.react.RIIq:
    java.lang.String getPackageVersion() -> cuHG
    void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> tuqG
react.nms.NMSBinding -> org.cyberpwn.react.UbsY:
    java.lang.String packageVersion -> sSCh
    8:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> cuHG
react.nms.NMSBinding10 -> org.cyberpwn.react.YEMS:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> tuqG
react.nms.NMSBinding11 -> org.cyberpwn.react.PTDy:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> tuqG
react.nms.NMSBinding12 -> org.cyberpwn.react.WPID:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> tuqG
react.nms.NMSBinding8 -> org.cyberpwn.react.rpVm:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> tuqG
react.nms.NMSBinding92 -> org.cyberpwn.react.upnj:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> tuqG
react.nms.NMSBinding94 -> org.cyberpwn.react.uNkg:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> tuqG
react.notification.Note -> org.cyberpwn.react.PddP:
    react.notification.Note RAI -> cdvq
    react.notification.Note VERBOSE -> riSC
    react.notification.Note SPIKES -> VNQS
    react.notification.Note GC -> Pepl
    react.notification.Note[] ENUM$VALUES -> PnbV
    5:10:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    14:15:void bake(java.lang.String) -> qJcU
    1:1:react.notification.Note[] values() -> values
    1:1:react.notification.Note valueOf(java.lang.String) -> valueOf
react.notification.Notification -> org.cyberpwn.react.YxQA:
    react.notification.Note type -> IinE
    java.lang.String message -> message
    8:12:void <init>(react.notification.Note,java.lang.String) -> <init>
    16:16:react.notification.Note getType() -> qeHi
    21:22:void setType(react.notification.Note) -> tuqG
    26:26:java.lang.String getMessage() -> getMessage
    31:32:void setMessage(java.lang.String) -> setMessage
react.papyrus.BufferedFrame -> org.cyberpwn.react.rEcC:
    byte[][] frame -> Fhtf
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> tuqG
    90:97:void write(byte) -> write
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> tuqG
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> tuqG
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> tuqG
    153:167:java.awt.image.BufferedImage toBufferedImage() -> jFaU
    175:182:void writeRainbowMul() -> Yocx
    189:196:void writeRainbowAdd() -> MmCC
    203:213:void writeSparks() -> ObFv
    217:223:boolean write(int,int,byte) -> tuqG
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> tuqG
    255:272:void write(react.papyrus.BufferedFrame) -> tCLt
    276:276:byte[][] getRawFrame() -> fJuW
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> org.cyberpwn.react.NwpS:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> tCLt
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> tuqG
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> org.cyberpwn.react.GIIO:
    org.bukkit.map.MapView getView() -> Ediu
    react.papyrus.BufferedFrame getFrameBuffer() -> nBLw
    void addRenderer(react.papyrus.IRenderer) -> GQND
    void clearRenderers() -> rFIM
    react.glang.GList getRenderers() -> PKWf
    void removeRenderer(react.papyrus.IRenderer) -> LhmV
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> wniY
react.papyrus.IRenderer -> org.cyberpwn.react.SBxx:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> tuqG
react.papyrus.Papyrus -> org.cyberpwn.react.MIyE:
    org.bukkit.map.MapView map -> uHHc
    react.papyrus.BufferedFrame frameBuffer -> bjdr
    react.papyrus.BufferedFrame lastFrameBuffer -> xbSI
    react.glang.GList renderers -> hRdC
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> Ediu
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> nBLw
    51:52:void addRenderer(react.papyrus.IRenderer) -> GQND
    57:58:void clearRenderers() -> rFIM
    63:63:react.glang.GList getRenderers() -> PKWf
    69:70:void removeRenderer(react.papyrus.IRenderer) -> LhmV
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> wniY
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> GQND
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> LhmV
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> tCLt
react.papyrus.Papyrus$1 -> org.cyberpwn.react.MIyE$1:
    org.bukkit.map.MapCanvas val$c -> MBuY
    org.bukkit.map.MapView val$v -> grGl
    react.papyrus.Papyrus this$0 -> cLHk
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> org.cyberpwn.react.Jbrg:
    int spaceSize -> RJXE
    java.lang.String fontChars -> bIFG
    int[][] fontData -> VVdS
    react.papyrus.ReactFont Font -> rPCw
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> org.cyberpwn.react.fKQL:
    react.glang.GList subgoals -> sRfc
    java.lang.String tag -> dNkE
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> nSMj
    26:44:void propigate() -> sIJx
    49:50:void addGoal(react.rai.IGoal) -> tuqG
    55:65:react.glang.GList getFailingSubgoals() -> Ihev
    71:71:boolean isFailing() -> TNrj
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> LOlc
    void onPropigated() -> dDof
react.rai.Goal$1 -> org.cyberpwn.react.fKQL$1:
    react.rai.IGoal val$i -> dNkF
    react.rai.Goal this$0 -> uinW
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> org.cyberpwn.react.bOeq:
    react.glang.GList getSubgoals() -> nSMj
    void propigate() -> sIJx
    void onPropigated() -> dDof
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> Ihev
    boolean isFailing() -> TNrj
    boolean onCheckFailing() -> LOlc
    void update() -> update
    void addGoal(react.rai.IGoal) -> tuqG
react.rai.IRAI -> org.cyberpwn.react.Mckf:
    react.glang.GList getGoals() -> ghLV
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> tuqG
    react.glang.GList getEvents() -> SKoq
    void callEvent(react.rai.RAIEvent) -> tuqG
    react.glang.GList getListeners() -> qmXQ
react.rai.RAI -> org.cyberpwn.react.Kvwa:
    react.glang.GList goals -> pALw
    react.glang.GList events -> yuyf
    react.glang.GList logEvents -> SgNL
    react.glang.GList listeners -> Bmkg
    long since -> aEat
    react.rai.RAI instance -> PDQv
    23:32:void <init>() -> <init>
    37:37:react.glang.GList getGoals() -> ghLV
    43:44:void addGoal(react.rai.IGoal) -> tuqG
    49:89:void tick() -> tick
    94:94:react.glang.GList getEvents() -> SKoq
    100:117:void callEvent(react.rai.RAIEvent) -> tuqG
    122:122:react.glang.GList getListeners() -> qmXQ
react.rai.RAIEvent -> org.cyberpwn.react.jpno:
    react.rai.RAIEventType type -> bIEo
    java.lang.String[] pars -> slYH
    java.lang.String ovt -> aMpq
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> sIJi
    29:29:java.lang.String[] getPars() -> XdOk
    34:34:java.lang.String getOvt() -> oxRy
react.rai.RAIEventType -> org.cyberpwn.react.jqPU:
    react.rai.RAIEventType FIRE_ACTION -> gWsU
    react.rai.RAIEventType NOTE_GOAL_FAILING -> PoDj
    react.rai.RAIEventType NOTE_GOAL_FIXED -> HwnC
    java.lang.String[] msgs -> wxdS
    react.rai.RAIEventType[] $VALUES -> UTAQ
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> Hmqs
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> tuqG
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedEntityCounts -> org.cyberpwn.react.Jkda:
    int spawned -> cSwN
    boolean failing -> FWuO
    double cd -> PCok
    double ad -> mPsn
    23:23:void <clinit>() -> <clinit>
    30:34:void <init>() -> <init>
    39:94:boolean onCheckFailing() -> LOlc
    100:150:void onPropigated() -> dDof
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> tuqG
react.rai.goals.GoalReducedEntityCounts$1 -> org.cyberpwn.react.Jkda$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> GSHh
    1:76:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    81:90:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> org.cyberpwn.react.Jkda$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> GSHh
    org.bukkit.Chunk val$lx -> fCnQ
    1:134:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    139:147:void run() -> run
react.rai.goals.GoalStableChunkTime -> org.cyberpwn.react.afVD:
    boolean failing -> FWuO
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> LOlc
    72:76:void onPropigated() -> dDof
react.rai.goals.GoalStableChunkTime$1 -> org.cyberpwn.react.afVD$1:
    react.rai.goals.GoalStableChunkTime this$0 -> COMm
    1:48:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> org.cyberpwn.react.xXXo:
    boolean failing -> FWuO
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> dDof
    35:35:void letUp() -> UQtg
    40:77:boolean onCheckFailing() -> LOlc
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> tuqG
react.rai.goals.GoalStableEntityTime$1 -> org.cyberpwn.react.xXXo$1:
    react.rai.goals.GoalStableEntityTime this$0 -> JudO
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> org.cyberpwn.react.EvIy:
    boolean failing -> FWuO
    react.glang.GMap reocc -> Mdys
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> dDof
    88:125:boolean onCheckFailing() -> LOlc
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> tuqG
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> GQND
react.rai.goals.GoalStableFluidTime$1 -> org.cyberpwn.react.EvIy$1:
    react.rai.goals.GoalStableFluidTime this$0 -> FFsh
    org.bukkit.Chunk val$lx -> fCnQ
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> org.cyberpwn.react.EvIy$2:
    react.rai.goals.GoalStableFluidTime this$0 -> FFsh
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> org.cyberpwn.react.FhLJ:
    boolean failing -> FWuO
    react.glang.GMap reocc -> Mdys
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> dDof
    89:125:boolean onCheckFailing() -> LOlc
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> tuqG
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> GQND
react.rai.goals.GoalStableHopperTime$1 -> org.cyberpwn.react.FhLJ$1:
    react.rai.goals.GoalStableHopperTime this$0 -> huIc
    org.bukkit.Chunk val$lx -> fCnQ
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> org.cyberpwn.react.FhLJ$2:
    react.rai.goals.GoalStableHopperTime this$0 -> huIc
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> org.cyberpwn.react.NVQO:
    int d -> d
    boolean failing -> FWuO
    react.glang.GMap reocc -> Mdys
    38:43:void <init>() -> <init>
    48:92:void onPropigated() -> dDof
    97:153:boolean onCheckFailing() -> LOlc
    34:34:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> tuqG
    33:33:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> GQND
react.rai.goals.GoalStableRedstoneTime$1 -> org.cyberpwn.react.NVQO$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> VgeR
    org.bukkit.Chunk val$lx -> fCnQ
    1:74:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    79:89:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> org.cyberpwn.react.NVQO$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> VgeR
    1:117:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    122:131:void run() -> run
react.rai.goals.GoalStableTickTime -> org.cyberpwn.react.dDly:
    boolean failing -> FWuO
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> dDof
    34:58:boolean onCheckFailing() -> LOlc
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> tuqG
react.rai.goals.GoalStableTickTime$1 -> org.cyberpwn.react.dDly$1:
    react.rai.goals.GoalStableTickTime this$0 -> AayA
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.redstone.RedstoneEvent -> org.cyberpwn.react.XAkL:
    surge.util.MaterialBlock block -> EfTk
    org.bukkit.util.Vector vector -> wVaO
    byte from -> aFBT
    byte to -> ahDo
    17:22:void <init>(org.bukkit.event.block.BlockRedstoneEvent) -> <init>
    26:26:surge.util.MaterialBlock getBlock() -> Orfr
    31:32:void setBlock(surge.util.MaterialBlock) -> tuqG
    36:36:org.bukkit.util.Vector getVector() -> OYTy
    41:42:void setVector(org.bukkit.util.Vector) -> tuqG
    46:46:byte getFrom() -> UkgT
    51:52:void setFrom(byte) -> lnYk
    56:56:byte getTo() -> hHkH
    61:62:void setTo(byte) -> dVAX
react.redstone.RedstoneTracker -> org.cyberpwn.react.wUVK:
    org.bukkit.World world -> world
    react.controller.FeatureController fc -> OJBL
    react.glang.GList events -> yuyf
    boolean ticking -> GBJP
    surge.sched.Task task -> jHNa
    boolean nms -> sJXX
    int tr -> etTQ
    react.gmath.Average aav -> HUnE
    boolean handleTicking -> KEeV
    33:55:void <init>(org.bukkit.World) -> <init>
    59:61:void close() -> close
    65:98:void tick() -> tick
    103:127:void set(org.bukkit.Location,surge.util.MaterialBlock) -> GQND
    131:152:void enact(react.redstone.RedstoneEvent) -> tuqG
    157:184:void on(org.bukkit.event.block.BlockRedstoneEvent) -> tuqG
react.redstone.RedstoneTracker$1 -> org.cyberpwn.react.wUVK$1:
    react.redstone.RedstoneTracker this$0 -> lhGc
    1:47:void <init>(react.redstone.RedstoneTracker,java.lang.String,int) -> <init>
    52:53:void run() -> run
react.sampler.SampleAsyncQueue -> org.cyberpwn.react.ktVd:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleAsyncQueue$1 -> org.cyberpwn.react.ktVd$1:
    react.sampler.SampleAsyncQueue this$0 -> wyHb
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleChunkTime -> org.cyberpwn.react.uNnf:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleChunkTime$1 -> org.cyberpwn.react.uNnf$1:
    react.sampler.SampleChunkTime this$0 -> bHfa
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleChunksLoaded -> org.cyberpwn.react.CxUH:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleChunksLoaded$1 -> org.cyberpwn.react.CxUH$1:
    react.sampler.SampleChunksLoaded this$0 -> ecRW
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SampleChunksLoadedPerSecond -> org.cyberpwn.react.pjTW:
    react.gmath.Average a -> rqha
    react.graph.IFormatter formatter -> nnHG
    16:29:void <init>() -> <init>
    34:40:void construct() -> KwPC
    45:47:void sample() -> QpPP
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleChunksLoadedPerSecond$1 -> org.cyberpwn.react.pjTW$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> lpWp
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> tupT
react.sampler.SampleEntitiesDrops -> org.cyberpwn.react.cBKS:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleEntitiesDrops$1 -> org.cyberpwn.react.cBKS$1:
    react.sampler.SampleEntitiesDrops this$0 -> kdcL
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SampleEntitiesLiving -> org.cyberpwn.react.YxST:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleEntitiesLiving$1 -> org.cyberpwn.react.YxST$1:
    react.sampler.SampleEntitiesLiving this$0 -> DlFP
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SampleEntitiesTiles -> org.cyberpwn.react.bWyF:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleEntitiesTiles$1 -> org.cyberpwn.react.bWyF$1:
    react.sampler.SampleEntitiesTiles this$0 -> htlD
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SampleEntitiesTotal -> org.cyberpwn.react.uiAo:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleEntitiesTotal$1 -> org.cyberpwn.react.uiAo$1:
    react.sampler.SampleEntitiesTotal this$0 -> wVcs
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SampleEntityDroppedTicks -> org.cyberpwn.react.anhs:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleEntityDroppedTicks$1 -> org.cyberpwn.react.anhs$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> hRhi
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleEntityTime -> org.cyberpwn.react.QFHc:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleEntityTime$1 -> org.cyberpwn.react.QFHc$1:
    react.sampler.SampleEntityTime this$0 -> ECrU
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleEntityTimeLock -> org.cyberpwn.react.CwtV:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleEntityTimeLock$1 -> org.cyberpwn.react.CwtV$1:
    react.sampler.SampleEntityTimeLock this$0 -> kmTE
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleExplosionTime -> org.cyberpwn.react.HmrA:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleExplosionTime$1 -> org.cyberpwn.react.HmrA$1:
    react.sampler.SampleExplosionTime this$0 -> yLIP
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SampleFluidPerSecond -> org.cyberpwn.react.rVgO:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleFluidPerSecond$1 -> org.cyberpwn.react.rVgO$1:
    react.sampler.SampleFluidPerSecond this$0 -> tEJJ
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleFluidPerTick -> org.cyberpwn.react.uXAI:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    46:53:void sample() -> QpPP
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleFluidPerTick$1 -> org.cyberpwn.react.uXAI$1:
    react.sampler.SampleFluidPerTick this$0 -> SUlL
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleFluidTickTime -> org.cyberpwn.react.Smpo:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleFluidTickTime$1 -> org.cyberpwn.react.Smpo$1:
    react.sampler.SampleFluidTickTime this$0 -> IXoh
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleFluidTickUtilization -> org.cyberpwn.react.CDml:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    46:53:void sample() -> QpPP
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleFluidTickUtilization$1 -> org.cyberpwn.react.CDml$1:
    react.sampler.SampleFluidTickUtilization this$0 -> uinw
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleGrowthTime -> org.cyberpwn.react.JJDG:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleGrowthTime$1 -> org.cyberpwn.react.JJDG$1:
    react.sampler.SampleGrowthTime this$0 -> hchm
    1:19:void <init>(react.sampler.SampleGrowthTime) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SampleHopperPerSecond -> org.cyberpwn.react.fBaq:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleHopperPerSecond$1 -> org.cyberpwn.react.fBaq$1:
    react.sampler.SampleHopperPerSecond this$0 -> PUTf
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleHopperPerTick -> org.cyberpwn.react.HwAx:
    react.graph.IFormatter formatter -> nnHG
    18:29:void <init>() -> <init>
    34:40:void construct() -> KwPC
    47:54:void sample() -> QpPP
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleHopperPerTick$1 -> org.cyberpwn.react.HwAx$1:
    react.sampler.SampleHopperPerTick this$0 -> HwpR
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleHopperTickTime -> org.cyberpwn.react.gEeQ:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleHopperTickTime$1 -> org.cyberpwn.react.gEeQ$1:
    react.sampler.SampleHopperTickTime this$0 -> Ajkm
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleHopperTickUtilization -> org.cyberpwn.react.JARe:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    46:53:void sample() -> QpPP
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleHopperTickUtilization$1 -> org.cyberpwn.react.JARe$1:
    react.sampler.SampleHopperTickUtilization this$0 -> ptRP
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleMemoryAllocated -> org.cyberpwn.react.XuNr:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleMemoryAllocated$1 -> org.cyberpwn.react.XuNr$1:
    react.sampler.SampleMemoryAllocated this$0 -> rqgJ
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SampleMemoryAllocationPerSecond -> org.cyberpwn.react.FxlC:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleMemoryAllocationPerSecond$1 -> org.cyberpwn.react.FxlC$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> EoGv
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SampleMemoryFree -> org.cyberpwn.react.pXqG:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleMemoryFree$1 -> org.cyberpwn.react.pXqG$1:
    react.sampler.SampleMemoryFree this$0 -> txNY
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SampleMemoryMax -> org.cyberpwn.react.LPJO:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleMemoryMax$1 -> org.cyberpwn.react.LPJO$1:
    react.sampler.SampleMemoryMax this$0 -> RtmF
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SampleMemoryUse -> org.cyberpwn.react.loHa:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleMemoryUse$1 -> org.cyberpwn.react.loHa$1:
    react.sampler.SampleMemoryUse this$0 -> baxL
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SamplePhysicsTickTime -> org.cyberpwn.react.aCsT:
    react.graph.IFormatter formatter -> nnHG
    17:27:void <init>() -> <init>
    32:38:void construct() -> KwPC
    43:44:void sample() -> QpPP
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SamplePhysicsTickTime$1 -> org.cyberpwn.react.aCsT$1:
    react.sampler.SamplePhysicsTickTime this$0 -> YOQG
    1:19:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> tupT
react.sampler.SampleRedstonePerSecond -> org.cyberpwn.react.KexJ:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleRedstonePerSecond$1 -> org.cyberpwn.react.KexJ$1:
    react.sampler.SampleRedstonePerSecond this$0 -> UTEg
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleRedstonePerTick -> org.cyberpwn.react.QNXR:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    46:53:void sample() -> QpPP
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleRedstonePerTick$1 -> org.cyberpwn.react.QNXR$1:
    react.sampler.SampleRedstonePerTick this$0 -> jjSj
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleRedstoneTickTime -> org.cyberpwn.react.WrLi:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleRedstoneTickTime$1 -> org.cyberpwn.react.WrLi$1:
    react.sampler.SampleRedstoneTickTime this$0 -> DlGf
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleRedstoneTickUtilization -> org.cyberpwn.react.BmAc:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    46:53:void sample() -> QpPP
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleRedstoneTickUtilization$1 -> org.cyberpwn.react.BmAc$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> aNWQ
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleSyncQueue -> org.cyberpwn.react.kIaH:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleSyncQueue$1 -> org.cyberpwn.react.kIaH$1:
    react.sampler.SampleSyncQueue this$0 -> vmUx
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleTickTime -> org.cyberpwn.react.CVRJ:
    react.graph.IFormatter formatter -> nnHG
    react.gmath.Average aa -> mkLl
    17:29:void <init>() -> <init>
    34:40:void construct() -> KwPC
    45:47:void sample() -> QpPP
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleTickTime$1 -> org.cyberpwn.react.CVRJ$1:
    react.sampler.SampleTickTime this$0 -> uHPV
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> tupT
react.sampler.SampleTickUtilization -> org.cyberpwn.react.EKUd:
    react.graph.IFormatter formatter -> nnHG
    react.gmath.Average aa -> mkLl
    17:29:void <init>() -> <init>
    34:40:void construct() -> KwPC
    45:47:void sample() -> QpPP
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleTickUtilization$1 -> org.cyberpwn.react.EKUd$1:
    react.sampler.SampleTickUtilization this$0 -> iUnC
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> tupT
react.sampler.SampleTicksPerSecond -> org.cyberpwn.react.QEgE:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleTicksPerSecond$1 -> org.cyberpwn.react.QEgE$1:
    react.sampler.SampleTicksPerSecond this$0 -> wMtd
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleTileDroppedTicks -> org.cyberpwn.react.ejTF:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleTileDroppedTicks$1 -> org.cyberpwn.react.ejTF$1:
    react.sampler.SampleTileDroppedTicks this$0 -> nnOQ
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleTileTime -> org.cyberpwn.react.xGUt:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleTileTime$1 -> org.cyberpwn.react.xGUt$1:
    react.sampler.SampleTileTime this$0 -> DlGr
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.sampler.SampleTileTimeLock -> org.cyberpwn.react.bFvh:
    react.graph.IFormatter formatter -> nnHG
    18:28:void <init>() -> <init>
    33:39:void construct() -> KwPC
    44:45:void sample() -> QpPP
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> MlTL
react.sampler.SampleTileTimeLock$1 -> org.cyberpwn.react.bFvh$1:
    react.sampler.SampleTileTimeLock this$0 -> HEPG
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> tupT
react.security.IPSecAlpha -> org.cyberpwn.react.lfVe:
    java.lang.String ip -> jabQ
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.IPSecBravo -> org.cyberpwn.react.EdhD:
    java.lang.String ip -> jabQ
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.IPSecCharlie -> org.cyberpwn.react.Dadc:
    java.lang.String ip -> jabQ
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.IPSecDelta -> org.cyberpwn.react.Hvar:
    java.lang.String ip -> jabQ
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.IPSecEcho -> org.cyberpwn.react.KDYB:
    java.lang.String ip -> jabQ
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.IPSecFoxtrot -> org.cyberpwn.react.qeHi:
    java.lang.String ip -> jabQ
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.SecurityCheckpointAlpha -> org.cyberpwn.react.jFaU:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> jqTi
    77:141:void doScan(java.lang.Runnable) -> GQND
    145:174:byte[] readResource(java.io.File,java.lang.String) -> tuqG
    179:210:react.glang.GMap scan(java.io.File) -> GQND
    143:143:byte[] access$0(java.io.File,java.lang.String) -> GQND
react.security.SecurityCheckpointAlpha$1 -> org.cyberpwn.react.jFaU$1:
    java.lang.Runnable val$r -> Wjln
    1:77:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.SecurityCheckpointAlpha$1$1 -> org.cyberpwn.react.jFaU$1$1:
    react.security.SecurityCheckpointAlpha$1 this$1 -> qUTy
    java.lang.Runnable val$r -> Wjln
    1:130:void <init>(react.security.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    135:137:void run() -> run
react.security.SecurityCheckpointBravo -> org.cyberpwn.react.Yocx:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> jqTi
    77:141:void doScan(java.lang.Runnable) -> GQND
    145:174:byte[] readResource(java.io.File,java.lang.String) -> tuqG
    179:210:react.glang.GMap scan(java.io.File) -> GQND
    143:143:byte[] access$0(java.io.File,java.lang.String) -> GQND
react.security.SecurityCheckpointBravo$1 -> org.cyberpwn.react.Yocx$1:
    java.lang.Runnable val$r -> Wjln
    1:77:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.SecurityCheckpointBravo$1$1 -> org.cyberpwn.react.Yocx$1$1:
    react.security.SecurityCheckpointBravo$1 this$1 -> NqTl
    java.lang.Runnable val$r -> Wjln
    1:130:void <init>(react.security.SecurityCheckpointBravo$1,java.lang.Runnable) -> <init>
    135:137:void run() -> run
react.security.SecurityCheckpointCharlie -> org.cyberpwn.react.MmCC:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> jqTi
    77:141:void doScan(java.lang.Runnable) -> GQND
    145:174:byte[] readResource(java.io.File,java.lang.String) -> tuqG
    179:210:react.glang.GMap scan(java.io.File) -> GQND
    143:143:byte[] access$0(java.io.File,java.lang.String) -> GQND
react.security.SecurityCheckpointCharlie$1 -> org.cyberpwn.react.MmCC$1:
    java.lang.Runnable val$r -> Wjln
    1:77:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.SecurityCheckpointCharlie$1$1 -> org.cyberpwn.react.MmCC$1$1:
    react.security.SecurityCheckpointCharlie$1 this$1 -> UvGn
    java.lang.Runnable val$r -> Wjln
    1:130:void <init>(react.security.SecurityCheckpointCharlie$1,java.lang.Runnable) -> <init>
    135:137:void run() -> run
react.security.SecurityCheckpointDelta -> org.cyberpwn.react.ObFv:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> jqTi
    77:141:void doScan(java.lang.Runnable) -> GQND
    145:174:byte[] readResource(java.io.File,java.lang.String) -> tuqG
    179:210:react.glang.GMap scan(java.io.File) -> GQND
    143:143:byte[] access$0(java.io.File,java.lang.String) -> GQND
react.security.SecurityCheckpointDelta$1 -> org.cyberpwn.react.ObFv$1:
    java.lang.Runnable val$r -> Wjln
    1:77:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.SecurityCheckpointDelta$1$1 -> org.cyberpwn.react.ObFv$1$1:
    react.security.SecurityCheckpointDelta$1 this$1 -> raIW
    java.lang.Runnable val$r -> Wjln
    1:130:void <init>(react.security.SecurityCheckpointDelta$1,java.lang.Runnable) -> <init>
    135:137:void run() -> run
react.security.SecurityCheckpointEcho -> org.cyberpwn.react.fJuW:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> jqTi
    77:141:void doScan(java.lang.Runnable) -> GQND
    145:174:byte[] readResource(java.io.File,java.lang.String) -> tuqG
    179:210:react.glang.GMap scan(java.io.File) -> GQND
    143:143:byte[] access$0(java.io.File,java.lang.String) -> GQND
react.security.SecurityCheckpointEcho$1 -> org.cyberpwn.react.fJuW$1:
    java.lang.Runnable val$r -> Wjln
    1:77:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.SecurityCheckpointEcho$1$1 -> org.cyberpwn.react.fJuW$1$1:
    react.security.SecurityCheckpointEcho$1 this$1 -> Jugf
    java.lang.Runnable val$r -> Wjln
    1:130:void <init>(react.security.SecurityCheckpointEcho$1,java.lang.Runnable) -> <init>
    135:137:void run() -> run
react.security.SecurityCheckpointFoxtrot -> org.cyberpwn.react.Ediu:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> jqTi
    77:141:void doScan(java.lang.Runnable) -> GQND
    145:174:byte[] readResource(java.io.File,java.lang.String) -> tuqG
    179:210:react.glang.GMap scan(java.io.File) -> GQND
    143:143:byte[] access$0(java.io.File,java.lang.String) -> GQND
react.security.SecurityCheckpointFoxtrot$1 -> org.cyberpwn.react.Ediu$1:
    java.lang.Runnable val$r -> Wjln
    1:77:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.SecurityCheckpointFoxtrot$1$1 -> org.cyberpwn.react.Ediu$1$1:
    react.security.SecurityCheckpointFoxtrot$1 this$1 -> TsDs
    java.lang.Runnable val$r -> Wjln
    1:130:void <init>(react.security.SecurityCheckpointFoxtrot$1,java.lang.Runnable) -> <init>
    135:137:void run() -> run
react.security.SecurityLockAlpha -> org.cyberpwn.react.nBLw:
    16:49:void <init>() -> <init>
react.security.SecurityLockAlpha$1 -> org.cyberpwn.react.nBLw$1:
    java.io.File val$f -> VhIY
    react.security.SecurityLockAlpha this$0 -> FqlK
    23:23:void <init>(react.security.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.security.SecurityLockBravo -> org.cyberpwn.react.rFIM:
    16:49:void <init>() -> <init>
react.security.SecurityLockBravo$1 -> org.cyberpwn.react.rFIM$1:
    java.io.File val$f -> VhIY
    react.security.SecurityLockBravo this$0 -> lpXm
    23:23:void <init>(react.security.SecurityLockBravo,java.io.File) -> <init>
    27:40:void run() -> run
react.security.SecurityLockCharlie -> org.cyberpwn.react.PKWf:
    16:49:void <init>() -> <init>
react.security.SecurityLockCharlie$1 -> org.cyberpwn.react.PKWf$1:
    java.io.File val$f -> VhIY
    react.security.SecurityLockCharlie this$0 -> qUTh
    23:23:void <init>(react.security.SecurityLockCharlie,java.io.File) -> <init>
    27:40:void run() -> run
react.security.SecurityLockDelta -> org.cyberpwn.react.wniY:
    16:49:void <init>() -> <init>
react.security.SecurityLockDelta$1 -> org.cyberpwn.react.wniY$1:
    java.io.File val$f -> VhIY
    react.security.SecurityLockDelta this$0 -> ifnm
    23:23:void <init>(react.security.SecurityLockDelta,java.io.File) -> <init>
    27:40:void run() -> run
react.security.SecurityLockFoxtrot -> org.cyberpwn.react.nSMj:
    16:49:void <init>() -> <init>
react.security.SecurityLockFoxtrot$1 -> org.cyberpwn.react.nSMj$1:
    java.io.File val$f -> VhIY
    react.security.SecurityLockFoxtrot this$0 -> vJpc
    23:23:void <init>(react.security.SecurityLockFoxtrot,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> org.cyberpwn.react.sIJx:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> hbMb
react.slate.PhantomSlate -> org.cyberpwn.react.Ihev:
    react.glang.GList lines -> GRlU
    react.glang.GList viewers -> YqRv
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> cwAC
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> Lqmr
    44:45:void set(int,java.lang.String) -> GQND
    50:51:void setLines(react.glang.GList) -> Cweb
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> build
    91:95:void addViewer(org.bukkit.entity.Player) -> hbMb
    100:102:void removeViewer(org.bukkit.entity.Player) -> uhSI
    107:107:react.glang.GList getViewers() -> IFaq
    113:113:boolean isViewing(org.bukkit.entity.Player) -> JACp
    119:120:void addLine(java.lang.String) -> uFOG
    125:126:void clearLines() -> YgSJ
react.slate.Slate -> org.cyberpwn.react.TNrj:
    void build() -> build
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> Lqmr
    void set(int,java.lang.String) -> GQND
    void setLines(react.glang.GList) -> Cweb
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> hbMb
    void addLine(java.lang.String) -> uFOG
    void clearLines() -> YgSJ
    void removeViewer(org.bukkit.entity.Player) -> uhSI
    react.glang.GList getViewers() -> IFaq
    boolean isViewing(org.bukkit.entity.Player) -> JACp
    void update() -> update
react.slate.SlateUtil -> org.cyberpwn.react.LOlc:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> jiDE
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> PJvS
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> tuqG
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> GQND
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> LhmV
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> tuqG
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> tuqG
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> GQND
    186:196:java.lang.String convertJSON(java.lang.String) -> VDFo
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> GQND
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> GQND
react.text.ColoredString -> org.cyberpwn.react.dDof:
    surge.util.C c -> wxhT
    java.lang.String s -> giYa
    24:27:void <init>(surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:surge.util.C getC() -> nAiv
    42:43:void setC(surge.util.C) -> GQND
    47:47:java.lang.String getS() -> bFxo
    52:53:void setS(java.lang.String) -> pPTd
react.text.RTEX -> org.cyberpwn.react.ghLV:
    react.glang.GList extras -> LkMm
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> RYlv
    44:58:react.json.JSONObject toJSON() -> Veka
react.text.RTX -> org.cyberpwn.react.SKoq:
    react.json.JSONArray base -> FGXr
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> KCgO
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,surge.util.C) -> GQND
    81:90:void addTextHover(java.lang.String,react.text.RTEX,surge.util.C) -> tuqG
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,surge.util.C) -> tuqG
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,surge.util.C) -> GQND
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,surge.util.C) -> LhmV
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,surge.util.C) -> tuqG
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,surge.util.C) -> GQND
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,surge.util.C) -> LhmV
    265:265:react.json.JSONArray toJSON() -> UtXx
    276:277:void tellRawTo(org.bukkit.entity.Player) -> VmyC
react.text.RawText -> org.cyberpwn.react.qmXQ:
    java.lang.String COLOR_BLACK -> UJsY
    java.lang.String COLOR_DARK_BLUE -> MmpJ
    java.lang.String COLOR_DARK_GREEN -> JlwQ
    java.lang.String COLOR_DARK_AQUA -> qDVW
    java.lang.String COLOR_DARK_RED -> FOkb
    java.lang.String COLOR_DARK_PURPLE -> UKWD
    java.lang.String COLOR_GOLD -> ywCC
    java.lang.String COLOR_GRAY -> DIfH
    java.lang.String COLOR_DARK_GRAY -> jHSN
    java.lang.String COLOR_BLUE -> EDXa
    java.lang.String COLOR_GREEN -> pJEI
    java.lang.String COLOR_AQUA -> ymom
    java.lang.String COLOR_RED -> kSew
    java.lang.String COLOR_LIGHT_PURPLE -> JTHl
    java.lang.String COLOR_YELLOW -> dhdA
    java.lang.String COLOR_WHITE -> kKUs
    java.lang.String COLOR_NONE -> pbuG
    java.lang.String HEAD_TEXT -> WYme
    java.lang.String HEAD_COLOR -> qvxu
    java.lang.String HEAD_BOLD -> HUqy
    java.lang.String HEAD_ITALIC -> uQCQ
    java.lang.String HEAD_UNDERLINED -> FOmA
    java.lang.String HEAD_STRIKETHROUGH -> Yhdl
    java.lang.String HEAD_OBFUSCATED -> Taer
    java.lang.String HEAD_CLICK_EVENT -> DIgA
    java.lang.String HEAD_HOVER_EVENT -> KhLQ
    java.lang.String HEAD_ACTION -> HDoX
    java.lang.String HEAD_VALUE -> HxUK
    java.lang.String HEAD_EXTRA -> PDVc
    java.lang.String HEAD_ACTION_SHOW_TEXT -> SwsP
    java.lang.String HEAD_ACTION_COMMAND -> DQto
    java.util.ArrayList components -> ureF
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> jNbr
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> LhmV
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> tuqG
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> tuqG
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> tuqG
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> tuqG
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> tuqG
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> tuqG
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> tuqG
    307:313:java.lang.String compile() -> GkQE
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> tuqG
surge.Main -> org.cyberpwn.react.sIJi:
    react.glang.GList plugins -> wEfT
    react.glang.GMap pluginInstances -> PfYk
    react.glang.GList controllerSet -> jYTD
    react.glang.GMap anchors -> UBeO
    react.glang.GList classes -> dOQe
    java.lang.reflect.Field nsField -> eASV
    java.lang.reflect.Field thField -> JKWI
    react.glang.GList tracks -> mPyW
    long nsf -> wFEy
    surge.server.SuperSampler ssx -> KFIb
    44:49:void <clinit>() -> <clinit>
    38:38:void <init>() -> <init>
    55:55:void onControllerRegistry() -> HwEN
    59:63:void reload() -> reload
    68:87:long getNanoSync() -> KTxg
    92:93:void requestResetNanos() -> Gjof
    98:112:int getThreadCount() -> getThreadCount
    123:143:void onStart(surge.util.Protocol) -> tuqG
    150:163:void onStop() -> qSeL
    169:169:void onPostInit() -> QFJM
    175:175:void onPreInit() -> fvIf
    179:190:void shutDownAmps() -> wDXa
    194:403:void initializeAmps() -> owui
    408:449:void doScan() -> wMJR
    453:475:void scanForPoolDefiners() -> CohE
    479:495:void scanForRawEvents() -> fJwq
    499:515:void scanForDynamicTrack() -> IyjP
    519:540:void scanForAmps() -> dMbt
    545:564:void onTick() -> xyuR
    568:568:surge.server.SuperSampler getSuperSampler() -> DGkw
surge.PluginAmp -> org.cyberpwn.react.XdOk:
    surge.control.AmpedPlugin plugin -> jXqi
    boolean connected -> connected
    int masterTask -> mYjc
    java.lang.Runnable onReload -> mIIw
    17:30:void <init>(surge.control.AmpedPlugin) -> <init>
    34:34:surge.control.AmpedPlugin getPluginInstance() -> VLje
    39:39:boolean isConnected() -> isConnected
    44:64:void connect() -> connect
    68:80:void masterTick() -> UQws
    84:88:void disconnect() -> disconnect
    92:102:int startTask(int,java.lang.Runnable) -> tuqG
    107:117:int startRepeatingTask(int,int,java.lang.Runnable) -> tuqG
    122:123:void stopTask(int) -> qSWg
    127:127:surge.control.AmpedPlugin getPlugin() -> OYVq
    132:132:int getMasterTask() -> BSTA
    137:137:java.lang.Runnable getOnReload() -> OYVr
    142:143:void setPlugin(surge.control.AmpedPlugin) -> tuqG
    147:148:void setConnected(boolean) -> setConnected
    152:153:void setMasterTask(int) -> dUbW
    157:158:void setOnReload(java.lang.Runnable) -> LhmV
    66:66:void access$0(surge.PluginAmp) -> tuqG
surge.PluginAmp$1 -> org.cyberpwn.react.XdOk$1:
    surge.PluginAmp this$0 -> MebF
    1:22:void <init>(surge.PluginAmp) -> <init>
    28:28:void run() -> run
surge.PluginAmp$2 -> org.cyberpwn.react.XdOk$2:
    surge.PluginAmp this$0 -> MebF
    1:46:void <init>(surge.PluginAmp) -> <init>
    51:53:void run() -> run
surge.PluginAmp$3 -> org.cyberpwn.react.XdOk$3:
    surge.PluginAmp this$0 -> MebF
    1:56:void <init>(surge.PluginAmp) -> <init>
    61:62:void run() -> run
surge.Surge -> org.cyberpwn.react.oxRy:
    surge.PluginAmp amp -> qDUO
    react.glang.GList tickComponents -> plEv
    react.glang.GList atickComponents -> PUYS
    surge.sched.TaskManager taskmgr -> lFGU
    surge.hotload.HotloadManager hotloadmgr -> Ajoj
    java.lang.Thread mainThread -> Gcop
    18:18:void <init>() -> <init>
    29:29:boolean isObfuscated() -> isObfuscated
    34:35:void register(org.bukkit.event.Listener) -> tuqG
    39:40:void unregister(org.bukkit.event.Listener) -> unregister
    44:44:java.io.File folder(java.lang.String) -> qSWg
    49:49:java.io.File folder() -> XAnE
    54:56:java.io.File getPluginJarFile() -> HDAm
    61:63:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> tCLt
    68:70:void startup() -> startup
    74:74:java.lang.Thread getServerThread() -> Wqnw
    79:79:react.glang.GList getTickComponents() -> BApb
    84:84:react.glang.GList getAsyncTickComponents() -> ntrI
    89:96:void registerTicked(surge.sched.IMasterTickComponent) -> tuqG
    100:107:void unregisterTicked(surge.sched.IMasterTickComponent) -> GQND
    111:116:surge.PluginAmp createAmp(surge.control.AmpedPlugin) -> GQND
    121:121:boolean isMainThread() -> isMainThread
    126:127:void stopAmp() -> jXEU
    131:131:boolean hasAmp() -> IWeg
    136:136:surge.PluginAmp getAmp() -> AjBa
    141:141:surge.sched.TaskManager getTaskManager() -> IFeB
    146:146:surge.hotload.HotloadManager getHotloadManager() -> OahU
    20:152:void <clinit>() -> <clinit>
surge.cluster.Cluster -> org.cyberpwn.react.Hmqs:
    surge.cluster.ClusterType type -> ubCa
    java.lang.Object t -> Vomd
    9:12:void <init>(surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:surge.cluster.ClusterType getType() -> ySMu
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
surge.cluster.ClusterBoolean -> org.cyberpwn.react.UQtg:
    7:8:void <init>(java.lang.Boolean) -> <init>
surge.cluster.ClusterDouble -> org.cyberpwn.react.Orfr:
    7:8:void <init>(java.lang.Double) -> <init>
surge.cluster.ClusterInt -> org.cyberpwn.react.OYTy:
    7:8:void <init>(java.lang.Integer) -> <init>
surge.cluster.ClusterLong -> org.cyberpwn.react.UkgT:
    7:8:void <init>(java.lang.Long) -> <init>
surge.cluster.ClusterString -> org.cyberpwn.react.hHkH:
    7:8:void <init>(java.lang.String) -> <init>
surge.cluster.ClusterStringList -> org.cyberpwn.react.jqTi:
    9:10:void <init>(java.util.List) -> <init>
surge.cluster.ClusterType -> org.cyberpwn.react.Lqmr:
    surge.cluster.ClusterType INT -> usER
    surge.cluster.ClusterType BOOLEAN -> JdkT
    surge.cluster.ClusterType STRING -> VFKd
    surge.cluster.ClusterType STRING_LIST -> vdhk
    surge.cluster.ClusterType DOUBLE -> AkSB
    surge.cluster.ClusterType LONG -> kCGe
    surge.cluster.ClusterType[] $VALUES -> CWfG
    3:3:surge.cluster.ClusterType[] values() -> values
    3:3:surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:5:void <clinit>() -> <clinit>
surge.cluster.ConfigurationDataInput -> org.cyberpwn.react.IFaq:
    12:12:void <init>() -> <init>
    17:127:void read(surge.cluster.IConfigurable,java.io.File) -> tuqG
    132:257:surge.cluster.DataCluster fillDefaults(surge.cluster.IConfigurable) -> tuqG
surge.cluster.ConfigurationDataInput$1 -> org.cyberpwn.react.IFaq$1:
    int[] $SwitchMap$surge$cluster$ClusterType -> ixWC
    44:44:void <clinit>() -> <clinit>
surge.cluster.ConfigurationDataOutput -> org.cyberpwn.react.YgSJ:
    12:12:void <init>() -> <init>
    17:143:void write(surge.cluster.IConfigurable,java.io.File) -> GQND
surge.cluster.DataCluster -> org.cyberpwn.react.jiDE:
    react.glang.GMap clusters -> vujg
    18:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> bPMP
    29:33:void fromJson(react.json.JSONObject) -> lnYk
    37:44:react.json.JSONObject toJson() -> NpIl
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> YxYe
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> tuqG
    104:104:boolean contains(java.lang.String) -> contains
    109:109:surge.cluster.ClusterType getType(java.lang.String) -> dUbW
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> lnYk
    194:195:void set(java.lang.String,int) -> KCgO
    199:200:void set(java.lang.String,boolean) -> LhmV
    204:205:void set(java.lang.String,double) -> LhmV
    209:210:void set(java.lang.String,long) -> LhmV
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> tuqG
surge.cluster.ICluster -> org.cyberpwn.react.PJvS:
    surge.cluster.ClusterType getType() -> ySMu
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
surge.cluster.IConfigurable -> org.cyberpwn.react.nAiv:
surge.cluster.IDataInput -> org.cyberpwn.react.bFxo:
    surge.cluster.DataCluster read(java.io.File) -> LhmV
surge.cluster.IDataOutput -> org.cyberpwn.react.RYlv:
    void write(surge.cluster.DataCluster,java.io.File) -> tuqG
surge.cluster.Key -> org.cyberpwn.react.UtXx:
    java.lang.String value() -> value
surge.cluster.KeyPointer -> org.cyberpwn.react.GkQE:
    int value() -> value
surge.cluster.KeyStore -> org.cyberpwn.react.HwEN:
surge.cluster.ReflectedConfigurationException -> org.cyberpwn.react.KTxg:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
surge.cluster.YamlDataInput -> org.cyberpwn.react.Gjof:
    8:8:void <init>() -> <init>
    13:27:surge.cluster.DataCluster read(java.io.File) -> LhmV
surge.cluster.YamlDataOutput -> org.cyberpwn.react.qSeL:
    6:6:void <init>() -> <init>
    13:20:void write(surge.cluster.DataCluster,java.io.File) -> tuqG
surge.collection.GSound -> org.cyberpwn.react.QFJM:
    java.lang.String sound -> TriV
    org.bukkit.Sound iSound -> cDAB
    java.lang.Float volume -> hAnQ
    java.lang.Float pitch -> NiIB
    17:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    24:28:void <init>(java.lang.String) -> <init>
    31:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    38:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> pPRP
    61:72:void play(org.bukkit.Location) -> KCgO
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> tuqG
    93:93:java.lang.String getSound() -> fBhu
    98:99:void setSound(java.lang.String) -> eiff
    103:103:org.bukkit.Sound getiSound() -> oxXa
    108:109:void setiSound(org.bukkit.Sound) -> tuqG
    113:113:java.lang.Float getVolume() -> NMfJ
    118:119:void setVolume(java.lang.Float) -> tuqG
    123:123:java.lang.Float getPitch() -> hsdO
    128:129:void setPitch(java.lang.Float) -> GQND
surge.control.AmpedPlugin -> org.cyberpwn.react.fvIf:
    react.glang.GList controllers -> kdho
    react.gconcurrent.ParallelPoolManager pp -> jHTX
    surge.server.CoreTickThread ctt -> dXEh
    java.util.UUID idx -> nfCT
    19:19:void <init>() -> <init>
    void doScan() -> wMJR
    long getNanoSync() -> KTxg
    int getThreadCount() -> getThreadCount
    35:35:void onReload() -> EvQH
    40:82:void onEnable() -> onEnable
    87:98:void onDisable() -> onDisable
    103:103:react.glang.GList getControllers() -> Coig
    109:110:void registerController(surge.control.IController) -> tuqG
    115:126:void onTick() -> xyuR
    131:131:java.lang.String getTickName() -> GHeM
    137:137:react.gconcurrent.ParallelPoolManager getThreadPool() -> GYrl
    142:199:void destroyOldThreads() -> PvOq
    void onControllerRegistry() -> HwEN
    void onStart(surge.util.Protocol) -> tuqG
    void onStop() -> qSeL
    void onPostInit() -> QFJM
    void onPreInit() -> fvIf
surge.control.AmpedPlugin$1 -> org.cyberpwn.react.fvIf$1:
    surge.control.AmpedPlugin this$0 -> dGCu
    1:55:void <init>(surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    60:60:long getNanoGate() -> CVJy
surge.control.AmpedPlugin$2 -> org.cyberpwn.react.fvIf$2:
    surge.control.AmpedPlugin this$0 -> dGCu
    1:155:void <init>(surge.control.AmpedPlugin) -> <init>
    160:192:void run() -> run
surge.control.Control -> org.cyberpwn.react.wDXa:
surge.control.Controller -> org.cyberpwn.react.owui:
    8:10:void <init>() -> <init>
surge.control.Disable -> org.cyberpwn.react.wMJR:
surge.control.Enable -> org.cyberpwn.react.CohE:
surge.control.IController -> org.cyberpwn.react.fJwq:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
surge.control.Instance -> org.cyberpwn.react.IyjP:
surge.control.Plugin -> org.cyberpwn.react.dMbt:
surge.control.SurgePlugin -> org.cyberpwn.react.VLje:
    void onStart(surge.util.Protocol) -> tuqG
    void onStop() -> qSeL
    void onPostInit() -> QFJM
    void onPreInit() -> fvIf
    void onControllerRegistry() -> HwEN
    void registerController(surge.control.IController) -> tuqG
    react.glang.GList getControllers() -> Coig
    react.gconcurrent.ParallelPoolManager getThreadPool() -> GYrl
surge.hotload.HotloadManager -> org.cyberpwn.react.UQws:
    react.glang.GMap filemods -> OlKi
    react.glang.GMap filesizes -> JCIm
    react.glang.GMap fileacts -> oyeo
    19:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> tuqG
    35:38:void untrack(java.io.File) -> tCLt
    42:45:void untrackall() -> ndSy
    50:86:void onTick() -> xyuR
    91:91:java.lang.String getTickName() -> GHeM
    12:12:react.glang.GMap access$000(surge.hotload.HotloadManager) -> tuqG
    12:12:react.glang.GMap access$100(surge.hotload.HotloadManager) -> GQND
    12:12:react.glang.GMap access$200(surge.hotload.HotloadManager) -> LhmV
surge.hotload.HotloadManager$1 -> org.cyberpwn.react.UQws$1:
    surge.hotload.HotloadManager this$0 -> CGFa
    56:56:void <init>(surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
surge.nms.NMSClass -> org.cyberpwn.react.OYVq:
    boolean init -> BUEP
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> OlIp
    java.lang.Class IChatBaseComponent -> KFKT
    java.lang.Class ChatSerializer -> iNBT
    java.lang.Class PacketPlayOutPlayerInfo -> iDpP
    java.lang.Class PlayerInfoData -> PMIt
    java.lang.Class EnumPlayerInfoAction -> NqWk
    java.lang.Class GameProfile -> aEjE
    java.lang.Class EnumGamemode -> HgUg
    java.lang.Class TileEntitySkull -> Bmtt
    java.lang.Class LoadingCache -> eRVc
    3:3:void <init>() -> <init>
    6:131:void <clinit>() -> <clinit>
surge.nms.NMSX -> org.cyberpwn.react.BSTA:
    surge.nms.NMSX bountifulAPI -> wVhi
    boolean useOldMethods -> Uuka
    java.lang.String nmsver -> vdkT
    java.lang.Object eTimes -> jHWI
    java.lang.Object eTitle -> LHot
    java.lang.Object eSubtitle -> elKo
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> tuqG
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> Ywen
    75:89:java.lang.Class getCBClass(java.lang.String) -> pGdF
    96:104:java.lang.Object serializeChat(java.lang.String) -> Veka
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> tuqG
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> tuqG
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> QhQq
    151:151:java.lang.String craftPackage() -> DPiq
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> tuqG
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> tuqG
    197:207:java.lang.Class getNMSClass(java.lang.String) -> tnDB
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> tuqG
    279:280:void clearTitle(org.bukkit.entity.Player) -> teOE
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> LhmV
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> LhmV
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> tuqG
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> JQgm
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> lnYk
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> fuYa
    434:447:int ping(org.bukkit.entity.Player) -> jgps
    20:459:void <clinit>() -> <clinit>
surge.nms.NMSX$1 -> org.cyberpwn.react.BSTA$1:
    org.bukkit.entity.Player val$player -> xapI
    383:383:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
surge.nms.NMSX$2 -> org.cyberpwn.react.BSTA$2:
    org.bukkit.entity.Player val$player -> xapI
    java.lang.String val$message -> NWhB
    396:396:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
surge.nms.PacketUtil -> org.cyberpwn.react.OYVr:
    6:6:void <init>() -> <init>
    20:45:surge.nms.PacketUtil$V getVersion() -> uFdS
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> tuqG
    68:82:void clearTitle(org.bukkit.entity.Player) -> teOE
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> LhmV
surge.nms.PacketUtil$V -> org.cyberpwn.react.OYVr$tuqG:
    surge.nms.PacketUtil$V R17 -> AHqA
    surge.nms.PacketUtil$V R18 -> Yhgx
    surge.nms.PacketUtil$V R19 -> OlLw
    surge.nms.PacketUtil$V R111 -> gaQU
    surge.nms.PacketUtil$V R110 -> MefX
    surge.nms.PacketUtil$V R112 -> NGHC
    surge.nms.PacketUtil$V[] $VALUES -> ipHD
    8:8:surge.nms.PacketUtil$V[] values() -> values
    8:8:surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
    8:8:void <init>(java.lang.String,int) -> <init>
    8:15:void <clinit>() -> <clinit>
surge.nms.Title -> org.cyberpwn.react.XAnE:
    java.lang.String title -> title
    java.lang.String subTitle -> rqpW
    java.lang.String action -> action
    java.lang.Integer fadeIn -> ahQH
    java.lang.Integer fadeOut -> COVs
    java.lang.Integer stayTime -> MUEp
    15:19:void <init>() -> <init>
    22:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    32:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    41:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> HeRH
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> Jkma
    79:80:void setSubTitle(java.lang.String) -> FpPX
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> HKtg
    99:100:void setFadeIn(java.lang.Integer) -> LhmV
    104:104:java.lang.Integer getFadeOut() -> GsfO
    109:110:void setFadeOut(java.lang.Integer) -> tCLt
    114:114:java.lang.Integer getStayTime() -> INwg
    119:120:void setStayTime(java.lang.Integer) -> KCgO
surge.nms.VersionBukkit -> org.cyberpwn.react.HDAm:
    surge.nms.VersionBukkit VU -> QXaX
    surge.nms.VersionBukkit V7 -> VWOa
    surge.nms.VersionBukkit V8 -> ecYj
    surge.nms.VersionBukkit V9 -> Dkkd
    surge.nms.VersionBukkit V11 -> VFMF
    surge.nms.VersionBukkit V111 -> FjBa
    surge.nms.VersionBukkit V112 -> SNDn
    surge.nms.VersionBukkit[] $VALUES -> IQIH
    5:5:surge.nms.VersionBukkit[] values() -> values
    5:5:surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> NUvm
    27:32:boolean uc() -> tKrD
    37:67:surge.nms.VersionBukkit get() -> twFn
    5:13:void <clinit>() -> <clinit>
surge.sched.IBursterator -> org.cyberpwn.react.Wqnw:
    void burst(java.lang.Object) -> rUwW
    void setTimeLock(double) -> xXJY
    double getEstimatedTimeUse() -> bqrS
    int flush() -> fSjm
    int flush(react.gbench.Profiler) -> tuqG
    void queue(java.lang.Object) -> iCMY
    void queue(java.util.List) -> LhmV
    void queue(java.lang.Object[]) -> tuqG
surge.sched.ICancellable -> org.cyberpwn.react.BApb:
    void cancel() -> cancel
surge.sched.IMasterTickComponent -> org.cyberpwn.react.ntrI:
    void onTick() -> xyuR
    java.lang.String getTickName() -> GHeM
surge.sched.ITask -> org.cyberpwn.react.jXEU:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> Yohg
    java.lang.String getName() -> getName
    double getComputeTime() -> EeMn
    double getTotalComputeTime() -> Lqql
    double getActiveTime() -> VMMC
    boolean hasCompleted() -> hYot
surge.sched.Task -> org.cyberpwn.react.IWeg:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> JunI
    double computeTime -> DQxs
    double totalComputeTime -> eQvn
    double activeTime -> YWfM
    boolean completed -> completed
    react.gbench.Profiler profiler -> ORYj
    react.gbench.Profiler activeProfiler -> Vxpj
    int ticks -> ORYg
    21:42:void <init>(java.lang.String) -> <init>
    45:67:void <init>(java.lang.String,int) -> <init>
    70:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> tCLt
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> Yohg
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> EeMn
    150:150:boolean hasCompleted() -> hYot
    156:156:double getTotalComputeTime() -> Lqql
    162:162:double getActiveTime() -> VMMC
    7:7:react.gbench.Profiler access$000(surge.sched.Task) -> LhmV
    7:7:boolean access$102(surge.sched.Task,boolean) -> tuqG
    7:7:react.gbench.Profiler access$200(surge.sched.Task) -> tCLt
    7:7:double access$302(surge.sched.Task,double) -> tuqG
    7:7:double access$402(surge.sched.Task,double) -> GQND
    7:7:double access$502(surge.sched.Task,double) -> LhmV
    7:7:double access$300(surge.sched.Task) -> KCgO
    7:7:double access$500(surge.sched.Task) -> lnYk
    7:7:double access$400(surge.sched.Task) -> dVAX
surge.sched.Task$1 -> org.cyberpwn.react.IWeg$1:
    surge.sched.Task this$0 -> JdmI
    26:26:void <init>(surge.sched.Task) -> <init>
    30:40:void run() -> run
surge.sched.Task$2 -> org.cyberpwn.react.IWeg$2:
    surge.sched.Task this$0 -> JdmI
    50:50:void <init>(surge.sched.Task) -> <init>
    54:65:void run() -> run
surge.sched.Task$3 -> org.cyberpwn.react.IWeg$3:
    int val$total -> WIPN
    surge.sched.Task this$0 -> JdmI
    75:75:void <init>(surge.sched.Task,int) -> <init>
    79:95:void run() -> run
surge.sched.TaskLater -> org.cyberpwn.react.AjBa:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> JunI
    double computeTime -> DQxs
    double totalComputeTime -> eQvn
    double activeTime -> YWfM
    boolean completed -> completed
    react.gbench.Profiler profiler -> ORYj
    react.gbench.Profiler activeProfiler -> Vxpj
    int ticks -> ORYg
    23:24:void <init>(java.lang.String) -> <init>
    27:57:void <init>(java.lang.String,int) -> <init>
    61:70:void setup(java.lang.String,boolean) -> tCLt
    75:81:void cancel() -> cancel
    86:86:int getId() -> getId
    92:92:boolean isRepeating() -> Yohg
    98:98:java.lang.String getName() -> getName
    104:104:double getComputeTime() -> EeMn
    110:110:boolean hasCompleted() -> hYot
    116:116:double getTotalComputeTime() -> Lqql
    122:122:double getActiveTime() -> VMMC
    8:8:react.gbench.Profiler access$000(surge.sched.TaskLater) -> tuqG
    8:8:double access$102(surge.sched.TaskLater,double) -> tuqG
    8:8:double access$200(surge.sched.TaskLater) -> GQND
    8:8:double access$202(surge.sched.TaskLater,double) -> GQND
    8:8:double access$100(surge.sched.TaskLater) -> LhmV
    8:8:react.gbench.Profiler access$300(surge.sched.TaskLater) -> tCLt
    8:8:double access$400(surge.sched.TaskLater) -> KCgO
    8:8:double access$402(surge.sched.TaskLater,double) -> LhmV
    8:8:int access$500(surge.sched.TaskLater) -> lnYk
surge.sched.TaskLater$1 -> org.cyberpwn.react.AjBa$1:
    surge.sched.TaskLater this$0 -> BDDi
    32:32:void <init>(surge.sched.TaskLater) -> <init>
    38:55:void run() -> run
surge.sched.TaskManager -> org.cyberpwn.react.IFeB:
    react.glang.GList tasks -> UdRb
    react.glang.GMap taskProfiles -> YpxS
    12:15:void <init>() -> <init>
    19:20:void add(surge.sched.ITask) -> tuqG
    25:35:void onTick() -> xyuR
    39:40:void putFinishingTask(surge.sched.ITask) -> GQND
    44:53:void putTask(surge.sched.ITask) -> LhmV
    58:58:java.lang.String getTickName() -> GHeM
    63:63:react.glang.GList getTasks() -> Wqqf
    68:68:react.glang.GMap getTaskProfiles() -> AjDq
surge.sched.TaskProfile -> org.cyberpwn.react.OahU:
    double activeTime -> YWfM
    double computeTickTime -> whMi
    double computeTime -> DQxs
    10:14:void <init>() -> <init>
    18:18:double getActiveTime() -> VMMC
    23:24:void setActiveTime(double) -> bynN
    28:28:double getComputeTickTime() -> bPNd
    33:34:void setComputeTickTime(double) -> qAsP
    38:38:double getComputeTime() -> EeMn
    43:44:void setComputeTime(double) -> kQdH
surge.server.AsyncTick -> org.cyberpwn.react.ySMu:
surge.server.CPS -> org.cyberpwn.react.bPMP:
    react.glang.GMap keys -> GAqT
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> MlTL
    46:99:void scan() -> URYi
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> LhmV
    23:23:void <clinit>() -> <clinit>
surge.server.CoreTickThread -> org.cyberpwn.react.NpIl:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:71:void run() -> run
surge.server.Cuboid -> org.cyberpwn.react.YxYe:
    java.lang.String worldName -> uPdq
    int x1 -> oOXK
    int y1 -> LcEo
    int z1 -> kdnI
    int x2 -> nLTj
    int y2 -> UTMn
    int z2 -> OknT
    45:58:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    62:72:int depth(surge.util.Axis) -> tuqG
    85:91:void set(org.bukkit.Location,org.bukkit.Location) -> LhmV
    95:95:boolean hasPlayers() -> NgWm
    100:112:react.glang.GList getPlayers() -> BBEv
    117:168:react.glang.GList getEntities() -> AGaP
    179:180:void <init>(org.bukkit.Location) -> <init>
    190:191:void <init>(surge.server.Cuboid) -> <init>
    212:220:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    241:249:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    252:260:void <init>(java.util.Map) -> <init>
    265:273:java.util.Map serialize() -> serialize
    278:278:surge.server.Cuboid flatten(int) -> eiff
    289:289:org.bukkit.Location getLowerNE() -> RsdN
    300:300:org.bukkit.Location getUpperSW() -> QpaM
    310:313:org.bukkit.Location getCenter() -> getCenter
    325:330:org.bukkit.World getWorld() -> getWorld
    340:340:int getSizeX() -> GRCM
    350:350:int getSizeY() -> BRtL
    360:360:int getSizeZ() -> CoiU
    370:370:int getLowerX() -> Qxqf
    380:380:int getLowerY() -> EBjg
    390:390:int getLowerZ() -> jXIk
    400:400:int getUpperX() -> AaTq
    410:410:int getUpperY() -> IOYy
    420:420:int getUpperZ() -> hIRf
    430:440:org.bukkit.block.Block[] corners() -> ePjF
    456:471:surge.server.Cuboid expand(surge.server.Cuboid$CuboidDirection,int) -> tuqG
    486:486:surge.server.Cuboid shift(surge.server.Cuboid$CuboidDirection,int) -> GQND
    502:516:surge.server.Cuboid outset(surge.server.Cuboid$CuboidDirection,int) -> LhmV
    532:532:surge.server.Cuboid inset(surge.server.Cuboid$CuboidDirection,int) -> tCLt
    548:548:boolean contains(int,int,int) -> KCgO
    560:560:boolean contains(org.bukkit.block.Block) -> Btag
    572:572:boolean contains(org.bukkit.Location) -> lnYk
    582:582:int volume() -> scDq
    593:603:byte averageLightLevel() -> ylfC
    614:614:surge.server.Cuboid contract() -> CMgs
    628:668:surge.server.Cuboid contract(surge.server.Cuboid$CuboidDirection) -> tuqG
    682:697:surge.server.Cuboid getFace(surge.server.Cuboid$CuboidDirection) -> GQND
    710:717:boolean containsOnly(org.bukkit.Material) -> tuqG
    729:741:surge.server.Cuboid getBoundingCuboid(surge.server.Cuboid) -> tuqG
    757:757:org.bukkit.block.Block getRelativeBlock(int,int,int) -> lnYk
    777:777:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> tuqG
    788:802:java.util.List getChunks() -> bjDc
    817:821:void fill(int,byte) -> tuqG
    845:845:java.util.Iterator iterator() -> iterator
    856:856:surge.server.Cuboid clone() -> Aidq
    867:867:java.lang.String toString() -> toString
    963:972:int hashCode() -> hashCode
    978:1038:boolean equals(java.lang.Object) -> equals
    29:29:java.lang.Object clone() -> clone
surge.server.Cuboid$1 -> org.cyberpwn.react.YxYe$1:
    surge.server.Cuboid this$0 -> pJKM
    101:101:void <init>(surge.server.Cuboid) -> <init>
    105:110:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> xGHw
    101:101:java.lang.Object onAdapt(java.lang.Object) -> dVAX
surge.server.Cuboid$2 -> org.cyberpwn.react.YxYe$2:
    int[] $SwitchMap$surge$util$Axis -> FYCx
    int[] $SwitchMap$surge$server$Cuboid$CuboidDirection -> xRBa
    62:456:void <clinit>() -> <clinit>
surge.server.Cuboid$CuboidDirection -> org.cyberpwn.react.YxYe$tuqG:
    surge.server.Cuboid$CuboidDirection North -> CFhS
    surge.server.Cuboid$CuboidDirection East -> jPhe
    surge.server.Cuboid$CuboidDirection South -> smFM
    surge.server.Cuboid$CuboidDirection West -> aFOd
    surge.server.Cuboid$CuboidDirection Up -> tpIN
    surge.server.Cuboid$CuboidDirection Down -> stub
    surge.server.Cuboid$CuboidDirection Horizontal -> oWhH
    surge.server.Cuboid$CuboidDirection Vertical -> PVAS
    surge.server.Cuboid$CuboidDirection Both -> vdlf
    surge.server.Cuboid$CuboidDirection Unknown -> Yhih
    surge.server.Cuboid$CuboidDirection[] $VALUES -> dGFm
    918:918:surge.server.Cuboid$CuboidDirection[] values() -> values
    918:918:surge.server.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    918:918:void <init>(java.lang.String,int) -> <init>
    934:955:surge.server.Cuboid$CuboidDirection opposite() -> jWhw
    918:930:void <clinit>() -> <clinit>
surge.server.Cuboid$CuboidIterator -> org.cyberpwn.react.YxYe$GQND:
    org.bukkit.World w -> jbJj
    int baseX -> wWNk
    int baseY -> yfFN
    int baseZ -> hSSg
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> mIQR
    int sizeY -> tESd
    int sizeZ -> WIQp
    surge.server.Cuboid this$0 -> pJKM
    878:887:void <init>(surge.server.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    892:892:boolean hasNext() -> hasNext
    898:908:org.bukkit.block.Block next() -> next
    915:915:void remove() -> remove
    870:870:java.lang.Object next() -> next
surge.server.MemoryMonitor -> org.cyberpwn.react.fBhu:
    long memoryFree -> Kgqr
    long memoryUsed -> TQJf
    long memoryMax -> YNwX
    long lastMemoryUsed -> lhTK
    long memoryUsedAfterGC -> slhC
    long allocated -> IbNv
    long collected -> UTOs
    long collections -> bADM
    long sms -> vnBH
    long memoryAllocatedPerTick -> cCei
    long memoryCollectedPerTick -> wxso
    long memoryFullyAllocatedPerTick -> rrVO
    long mah -> UBnJ
    long mahs -> wpcb
    23:39:void <init>() -> <init>
    void onAllocationSet() -> PBlq
    46:107:void run() -> run
    111:111:long getMemoryFree() -> Blgf
    116:116:long getMemoryUsed() -> getMemoryUsed
    121:121:long getMemoryMax() -> KVAj
    126:126:long getLastMemoryUsed() -> ebLg
    131:131:long getMemoryUsedAfterGC() -> Rsfu
    136:136:long getAllocated() -> getAllocated
    141:141:long getCollected() -> Svjf
    146:146:long getCollections() -> FhTk
    151:151:long getSms() -> uykS
    156:156:long getMemoryAllocatedPerTick() -> RYth
    161:161:long getMemoryCollectedPerTick() -> YUxS
    166:166:long getMemoryFullyAllocatedPerTick() -> tUDy
    171:171:long getMah() -> GACJ
    176:176:long getMahs() -> DalS
surge.server.SuperSampler -> org.cyberpwn.react.oxXa:
    react.gmath.Average ticksPerSecondL -> wqDb
    react.gmath.Average tickTimeL -> ahUM
    react.gmath.Average mahL -> rjES
    double ticksPerSecond -> FyqK
    double ticksPerSecondRaw -> LtJY
    double tickTime -> toip
    double tickTimeRaw -> jQLI
    boolean running -> running
    boolean frozen -> tMfo
    double tickUtilizationRaw -> Lbgo
    double tickUtilization -> Chnd
    double leftoverTickTime -> vnAR
    long memoryUse -> VhUY
    long memoryAllocated -> WkWy
    long memoryCollected -> lFQD
    long mahs -> wpcb
    int totalChunks -> Ewcq
    int totalEntities -> YWjW
    int totalDrops -> RJeR
    int totalTiles -> oiLE
    int totalLiving -> iDur
    int chunksLoaded -> pJLP
    int chunksUnloaded -> KNbH
    surge.server.WorldMonitor worldMonitor -> Vgrc
    surge.server.TPSMonitor tpsMonitor -> Ajxa
    surge.server.MemoryMonitor memoryMonitor -> XvkF
    java.lang.StackTraceElement[] lockStack -> lhRY
    react.glang.GMap spikes -> pcDv
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> xyuR
    154:154:java.lang.String getTickName() -> GHeM
    159:159:react.gmath.Average getTicksPerSecondL() -> mOpB
    164:164:double getTicksPerSecond() -> sbWT
    169:169:double getTicksPerSecondRaw() -> kIjB
    174:174:boolean isRunning() -> isRunning
    179:179:surge.server.TPSMonitor getTpsMonitor() -> FyTl
    184:184:react.gmath.Average getTickTimeL() -> hjsk
    189:189:double getTickTime() -> awaR
    194:194:double getTickTimeRaw() -> BSVy
    199:199:double getTickUtilizationRaw() -> EnAb
    204:204:double getTickUtilization() -> FVpn
    209:209:double getLeftoverTickTime() -> BAuE
    214:214:surge.server.MemoryMonitor getMemoryMonitor() -> BtyR
    219:219:long getMemoryUse() -> eQJW
    224:224:long getMemoryAllocated() -> pYYS
    229:229:long getMemoryCollected() -> MKEc
    234:234:react.gmath.Average getMahL() -> erkt
    239:239:long getMahs() -> DalS
    244:244:int getTotalChunks() -> BSVj
    249:249:int getTotalEntities() -> ogWn
    254:254:int getTotalDrops() -> FFPl
    259:259:int getTotalTiles() -> YNGh
    264:264:int getTotalLiving() -> KntS
    269:269:surge.server.WorldMonitor getWorldMonitor() -> ePlN
    274:274:int getChunksLoaded() -> vuAU
    279:279:int getChunksUnloaded() -> nSVf
    284:285:void setTicksPerSecondL(react.gmath.Average) -> tuqG
    289:290:void setTickTimeL(react.gmath.Average) -> GQND
    294:295:void setMahL(react.gmath.Average) -> LhmV
    299:300:void setTicksPerSecond(double) -> uxsn
    304:305:void setTicksPerSecondRaw(double) -> AWjw
    309:310:void setTickTime(double) -> pHBT
    314:315:void setTickTimeRaw(double) -> hbMb
    319:320:void setRunning(boolean) -> tupT
    324:325:void setTickUtilizationRaw(double) -> uhSI
    329:330:void setTickUtilization(double) -> JACp
    334:335:void setLeftoverTickTime(double) -> VmyC
    339:340:void setMemoryUse(long) -> xXJY
    344:345:void setMemoryAllocated(long) -> bynN
    349:350:void setMemoryCollected(long) -> qAsP
    354:355:void setMahs(long) -> kQdH
    359:360:void setTotalChunks(int) -> Ywen
    364:365:void setTotalEntities(int) -> pGdF
    369:370:void setTotalDrops(int) -> Veka
    374:375:void setTotalTiles(int) -> tnDB
    379:380:void setTotalLiving(int) -> JQgm
    384:385:void setChunksLoaded(int) -> FpPX
    389:390:void setChunksUnloaded(int) -> MlTL
    394:395:void setWorldMonitor(surge.server.WorldMonitor) -> tuqG
    399:400:void setTpsMonitor(surge.server.TPSMonitor) -> tuqG
    404:405:void setMemoryMonitor(surge.server.MemoryMonitor) -> tuqG
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> EutK
    419:419:react.glang.GMap getSpikes() -> Ubml
    13:13:int access$002(surge.server.SuperSampler,int) -> tuqG
    13:13:int access$102(surge.server.SuperSampler,int) -> GQND
    13:13:int access$202(surge.server.SuperSampler,int) -> LhmV
    13:13:int access$302(surge.server.SuperSampler,int) -> tCLt
    13:13:int access$402(surge.server.SuperSampler,int) -> KCgO
    13:13:int access$502(surge.server.SuperSampler,int) -> lnYk
    13:13:int access$602(surge.server.SuperSampler,int) -> dVAX
    13:13:double access$702(surge.server.SuperSampler,double) -> tuqG
    13:13:double access$802(surge.server.SuperSampler,double) -> GQND
    13:13:double access$700(surge.server.SuperSampler) -> tuqG
    13:13:react.gmath.Average access$900(surge.server.SuperSampler) -> GQND
    13:13:double access$800(surge.server.SuperSampler) -> LhmV
    13:13:react.gmath.Average access$1000(surge.server.SuperSampler) -> tCLt
    13:13:double access$1102(surge.server.SuperSampler,double) -> LhmV
    13:13:double access$1202(surge.server.SuperSampler,double) -> tCLt
    13:13:double access$1302(surge.server.SuperSampler,double) -> KCgO
    13:13:double access$1402(surge.server.SuperSampler,double) -> lnYk
    13:13:double access$1200(surge.server.SuperSampler) -> KCgO
    13:13:double access$1502(surge.server.SuperSampler,double) -> dVAX
    13:13:double access$1400(surge.server.SuperSampler) -> lnYk
    13:13:boolean access$1602(surge.server.SuperSampler,boolean) -> tuqG
    13:13:react.glang.GMap access$1700(surge.server.SuperSampler) -> dVAX
    13:13:long access$1802(surge.server.SuperSampler,long) -> tuqG
    13:13:long access$1902(surge.server.SuperSampler,long) -> GQND
    13:13:long access$2002(surge.server.SuperSampler,long) -> LhmV
    13:13:react.gmath.Average access$2100(surge.server.SuperSampler) -> Btag
    13:13:long access$2202(surge.server.SuperSampler,long) -> tCLt
surge.server.SuperSampler$1 -> org.cyberpwn.react.oxXa$1:
    surge.server.SuperSampler this$0 -> fxBq
    72:72:void <init>(surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> tuqG
surge.server.SuperSampler$2 -> org.cyberpwn.react.oxXa$2:
    surge.server.SuperSampler this$0 -> fxBq
    87:87:void <init>(surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> ieid
    106:107:void onSpike() -> ghUJ
surge.server.SuperSampler$3 -> org.cyberpwn.react.oxXa$3:
    surge.server.SuperSampler this$0 -> fxBq
    111:111:void <init>(surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> PBlq
surge.server.TPSMonitor -> org.cyberpwn.react.NMfJ:
    double tickTimeMS -> SVYk
    double rawTicksPerSecond -> qnoy
    react.gbench.Profiler tickProfiler -> wpak
    react.gbench.Profiler tickTimeProfiler -> WjwC
    boolean ticked -> VqEi
    java.lang.Thread$State lastState -> wEnN
    double actualTickTimeMS -> bHsC
    double ltt -> smGV
    long lastTick -> MKYV
    boolean frozen -> tMfo
    java.lang.StackTraceElement[] lockedStack -> QHCd
    double lmsx -> LRIF
    24:40:void <init>() -> <init>
    void onTicked() -> ieid
    void onSpike() -> ghUJ
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> tuqG
    160:160:double getTickTimeMS() -> BmKY
    165:165:double getRawTicksPerSecond() -> FpgE
    170:170:react.gbench.Profiler getTickProfiler() -> mrWJ
    175:175:boolean isTicked() -> QOCp
    180:181:void markTick() -> DQNn
    185:185:react.gbench.Profiler getTickTimeProfiler() -> fmbY
    190:190:java.lang.Thread$State getLastState() -> scGR
    195:195:double getActualTickTimeMS() -> rhTB
    200:200:double getLtt() -> nJdj
    205:205:long getLastTick() -> jqLC
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> xqtd
surge.server.WorldMonitor -> org.cyberpwn.react.hsdO:
    boolean chunksChanged -> lNcW
    boolean dropChanged -> mIVQ
    boolean tileChanged -> LHwA
    boolean livingChanged -> SNKs
    boolean totalChanged -> diON
    boolean updated -> mYvc
    int totalChunks -> Ewcq
    int totalDrops -> RJeR
    int totalTiles -> oiLE
    int totalLiving -> iDur
    int totalEntities -> YWjW
    int chunksLoaded -> pJLP
    int chunksUnloaded -> KNbH
    long ms -> mrWJ
    24:43:void <init>() -> <init>
    48:73:void run() -> run
    void updated(int,int,int,int,int,int,int) -> tuqG
    80:85:void on(org.bukkit.event.world.ChunkLoadEvent) -> GQND
    90:95:void on(org.bukkit.event.world.ChunkUnloadEvent) -> tuqG
    100:101:void on(org.bukkit.event.entity.EntitySpawnEvent) -> tuqG
    106:107:void on(org.bukkit.event.entity.EntityDeathEvent) -> tuqG
    112:113:void on(org.bukkit.event.player.PlayerDropItemEvent) -> tuqG
    118:119:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> tuqG
    124:125:void on(org.bukkit.event.block.BlockPlaceEvent) -> tuqG
    130:131:void on(org.bukkit.event.block.BlockBreakEvent) -> tuqG
    135:136:void doUpdate() -> AjGl
    140:191:void sample() -> QpPP
    195:201:void sampleTotalCount() -> YDyH
    205:211:void sampleLivingCount() -> htHe
    215:251:void sampleTileCount() -> QhUx
    255:261:void sampleDropCount() -> gqDj
    265:271:void sampleChunkCount() -> QxuU
surge.text.PhantomSpinner -> org.cyberpwn.react.EvQH:
    surge.text.ProgressSpinner s -> AQgj
    surge.text.ProgressSpinner c -> VVsy
    16:19:void <init>(surge.util.C,surge.util.C,surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
surge.text.ProgressSpinner -> org.cyberpwn.react.Coig:
    java.lang.String[] chars -> MwOO
    int index -> index
    surge.text.ProgressSpinner DEFAULT -> yUId
    surge.text.ProgressSpinner NETWORK -> FYHf
    surge.text.ProgressSpinner CIRCLES -> Pfec
    surge.text.ProgressSpinner RANDOMS -> scwj
    surge.text.ProgressSpinner MERGERS -> CWnA
    26:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> xXau
    65:65:int getIndex() -> getIndex
    70:75:void <clinit>() -> <clinit>
surge.util.Amounts -> org.cyberpwn.react.GYrl:
    surge.util.Amounts SINGLE -> Yypa
    surge.util.Amounts DUAL -> OdCg
    surge.util.Amounts TRI -> mYvV
    surge.util.Amounts QUAD -> wNaa
    surge.util.Amounts HEX -> nejF
    surge.util.Amounts OCTA -> Figg
    int a -> a
    surge.util.Amounts[] $VALUES -> SpMt
    5:5:surge.util.Amounts[] values() -> values
    5:5:surge.util.Amounts valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,int) -> <init>
    23:23:int a() -> a
    29:37:java.lang.String to(int) -> ofcL
    5:12:void <clinit>() -> <clinit>
surge.util.Anchor -> org.cyberpwn.react.PvOq:
    int value() -> value
surge.util.Area -> org.cyberpwn.react.ndSy:
    org.bukkit.Location location -> mQdv
    java.lang.Double radius -> RJfn
    27:27:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> tuqG
    40:43:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    47:47:surge.server.Cuboid toCuboid() -> hkVh
    60:63:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    77:85:java.lang.Double distance(org.bukkit.Location) -> dVAX
    99:99:java.lang.Double slowDistance(org.bukkit.Location) -> Btag
    111:111:boolean isWithin(org.bukkit.Location) -> fuYa
    121:121:boolean hasEntities() -> hasEntities
    133:143:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> tCLt
    155:165:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> tuqG
    178:207:org.bukkit.entity.Entity[] getNearbyEntities() -> rhRy
    218:228:org.bukkit.entity.Player[] getNearbyPlayers() -> LXdb
    238:238:org.bukkit.Location getLocation() -> getLocation
    249:250:void setLocation(org.bukkit.Location) -> xGHw
    259:259:java.lang.Double getRadius() -> twKD
    270:271:void setRadius(java.lang.Double) -> LhmV
    280:285:org.bukkit.Location random() -> ESpN
surge.util.Axis -> org.cyberpwn.react.QhQq:
    surge.util.Axis X -> YXLn
    surge.util.Axis Y -> nKwS
    surge.util.Axis Z -> JnEP
    int x -> x
    int y -> y
    int z -> z
    surge.util.Axis[] $VALUES -> vvRm
    5:5:surge.util.Axis[] values() -> values
    5:5:surge.util.Axis valueOf(java.lang.String) -> valueOf
    16:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> qdnu
    29:29:org.bukkit.util.Vector negative() -> jhjm
    5:9:void <clinit>() -> <clinit>
surge.util.BlastResistance -> org.cyberpwn.react.DPiq:
    surge.util.BlastResistance BARRIER -> LAGC
    surge.util.BlastResistance BEDROCK -> xtHN
    surge.util.BlastResistance COMMAND -> lgtE
    surge.util.BlastResistance ENDER_PORTAL -> smLg
    surge.util.BlastResistance ENDER_PORTAL_FRAME -> ekry
    surge.util.BlastResistance ANVIL -> axxo
    surge.util.BlastResistance ENCHANTMENT_TABLE -> lFUQ
    surge.util.BlastResistance OBSIDIAN -> sAvy
    surge.util.BlastResistance ENDER_CHEST -> DceK
    surge.util.BlastResistance WATER -> rYHT
    surge.util.BlastResistance LAVA -> aFUU
    surge.util.BlastResistance STATIONARY_WATER -> cemQ
    surge.util.BlastResistance DRAGON_EGG -> rHGN
    surge.util.BlastResistance ENDER_STONE -> vKah
    surge.util.BlastResistance COAL_BLOCK -> XwPT
    surge.util.BlastResistance DIAMOND_BLOCK -> LIYd
    surge.util.BlastResistance EMERALD_BLOCK -> sKJP
    surge.util.BlastResistance GOLD_BLOCK -> Dcdr
    surge.util.BlastResistance IRON_BLOCK -> fDdE
    surge.util.BlastResistance REDSTONE_BLOCK -> Mvow
    surge.util.BlastResistance BRICK -> vKaO
    surge.util.BlastResistance BRICK_STAIRS -> VEuc
    surge.util.BlastResistance HARD_CLAY -> XvpP
    surge.util.BlastResistance STONE -> bQhm
    surge.util.BlastResistance SMOOTH_BRICK -> xtKR
    surge.util.BlastResistance SMOOTH_STAIRS -> mYxU
    surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> NWni
    surge.util.BlastResistance STONE_SLAB2 -> NaAS
    surge.util.BlastResistance IRON_DOOR -> oGLe
    surge.util.BlastResistance IRON_DOOR_BLOCK -> TQPW
    surge.util.BlastResistance IRON_TRAPDOOR -> uPnD
    surge.util.BlastResistance MOB_SPAWNER -> wFSb
    surge.util.BlastResistance WEB -> dFkp
    surge.util.BlastResistance DISPENSER -> KOGL
    surge.util.BlastResistance DROPPER -> FjKQ
    surge.util.BlastResistance FURNACE -> WskT
    surge.util.BlastResistance BURNING_FURNACE -> WbjC
    surge.util.BlastResistance BEACON -> aqHX
    surge.util.BlastResistance COAL_ORE -> JuvW
    surge.util.BlastResistance COCOA -> NiQj
    surge.util.BlastResistance DIAMOND_ORE -> Tapw
    surge.util.BlastResistance EMERALD_ORE -> lxvq
    surge.util.BlastResistance FENCE -> eJQD
    surge.util.BlastResistance FENCE_GATE -> RJjK
    surge.util.BlastResistance ACACIA_FENCE_GATE -> UnIX
    surge.util.BlastResistance BIRCH_FENCE_GATE -> mbki
    surge.util.BlastResistance DARK_OAK_FENCE_GATE -> gPYa
    surge.util.BlastResistance SPRUCE_FENCE_GATE -> NrEc
    surge.util.BlastResistance JUNGLE_FENCE_GATE -> hvAL
    surge.util.BlastResistance ACACIA_FENCE -> aWYJ
    surge.util.BlastResistance BIRCH_FENCE -> jbTV
    surge.util.BlastResistance DARK_OAK_FENCE -> DBDX
    surge.util.BlastResistance SPRUCE_FENCE -> Jdwi
    surge.util.BlastResistance JUNGLE_FENCE -> SyDu
    surge.util.BlastResistance ACACIA_WOOD_STAIRS -> BwRk
    surge.util.BlastResistance BIRCH_WOOD_STAIRS -> aOIT
    surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> xRJR
    surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> UdxG
    surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> XCmS
    surge.util.BlastResistance QUARTZ_STAIRS -> NFqU
    surge.util.BlastResistance COBBLESTONE_STAIRS -> MfQt
    surge.util.BlastResistance SANDSTONE_STAIRS -> jbSi
    surge.util.BlastResistance NETHER_BRICK_STAIRS -> Wsnh
    surge.util.BlastResistance WOOD_STAIRS -> UnGv
    surge.util.BlastResistance RED_SANDSTONE_STAIRS -> ORdH
    surge.util.BlastResistance ACACIA_DOOR -> YGOk
    surge.util.BlastResistance BIRCH_DOOR -> BncR
    surge.util.BlastResistance DARK_OAK_DOOR -> wNfB
    surge.util.BlastResistance SPRUCE_DOOR -> qVFR
    surge.util.BlastResistance JUNGLE_DOOR -> gPXe
    surge.util.BlastResistance GOLD_ORE -> bAIT
    surge.util.BlastResistance HOPPER -> eRay
    surge.util.BlastResistance IRON_ORE -> EgIr
    surge.util.BlastResistance LAPIS_BLOCK -> pBAm
    surge.util.BlastResistance LAPIS_ORE -> NXQq
    surge.util.BlastResistance QUARTZ_ORE -> Tjcv
    surge.util.BlastResistance REDSTONE_ORE -> mRIf
    surge.util.BlastResistance TRAP_DOOR -> BncE
    surge.util.BlastResistance WOOD -> jQPl
    surge.util.BlastResistance CHEST -> SpSJ
    surge.util.BlastResistance TRAPPED_CHEST -> cvov
    surge.util.BlastResistance WORKBENCH -> wOFQ
    surge.util.BlastResistance CAULDRON -> xRHp
    surge.util.BlastResistance LOG -> Rlno
    surge.util.BlastResistance LOG_2 -> iNMu
    surge.util.BlastResistance BOOKSHELF -> JuyJ
    surge.util.BlastResistance BANNER -> HFBe
    surge.util.BlastResistance STANDING_BANNER -> mcOK
    surge.util.BlastResistance WALL_BANNER -> btPk
    surge.util.BlastResistance JACK_O_LANTERN -> oiUR
    surge.util.BlastResistance MELON_BLOCK -> Jdye
    surge.util.BlastResistance SKULL -> kdxX
    surge.util.BlastResistance PUMPKIN -> HVdB
    surge.util.BlastResistance SIGN -> mQlH
    surge.util.BlastResistance SIGN_POST -> QGlL
    surge.util.BlastResistance WALL_SIGN -> Tjgd
    surge.util.BlastResistance QUARTZ_BLOCK -> EVLO
    surge.util.BlastResistance NOTE_BLOCK -> ChwH
    surge.util.BlastResistance RED_SANDSTONE -> bQlr
    surge.util.BlastResistance SANDSTONE -> eIuG
    surge.util.BlastResistance WOOL -> ixeC
    surge.util.BlastResistance MONSTER_EGG -> jatj
    surge.util.BlastResistance RAILS -> nTnt
    surge.util.BlastResistance ACTIVATOR_RAIL -> JKgG
    surge.util.BlastResistance DETECTOR_RAIL -> lVyF
    surge.util.BlastResistance POWERED_RAIL -> hmQC
    surge.util.BlastResistance CLAY -> MoCo
    surge.util.BlastResistance DIRT -> iMpF
    surge.util.BlastResistance GRASS -> aFXY
    surge.util.BlastResistance GRAVEL -> yvqH
    surge.util.BlastResistance SPONGE -> rGhk
    surge.util.BlastResistance BREWING_STAND -> Tato
    surge.util.BlastResistance STONE_BUTTON -> euGw
    surge.util.BlastResistance WOOD_BUTTON -> vCTN
    surge.util.BlastResistance CAKE_BLOCK -> diTm
    surge.util.BlastResistance ICE -> gGid
    surge.util.BlastResistance PACKED_ICE -> PxLv
    surge.util.BlastResistance LEVER -> ujcq
    surge.util.BlastResistance MYCEL -> hJlP
    surge.util.BlastResistance PISTON_BASE -> JCWX
    surge.util.BlastResistance PISTON_EXTENSION -> euIM
    surge.util.BlastResistance PISTON_MOVING_PIECE -> mcMf
    surge.util.BlastResistance PISTON_STICKY_BASE -> ukDy
    surge.util.BlastResistance GOLD_PLATE -> LtRE
    surge.util.BlastResistance IRON_PLATE -> nCpL
    surge.util.BlastResistance STONE_PLATE -> qVKV
    surge.util.BlastResistance WOOD_PLATE -> VqPb
    surge.util.BlastResistance SAND -> oGSq
    surge.util.BlastResistance SOUL_SAND -> MLcF
    surge.util.BlastResistance CACTUS -> gYNt
    surge.util.BlastResistance LADDER -> PVMT
    surge.util.BlastResistance NETHERRACK -> XLbS
    surge.util.BlastResistance GLASS -> dPEY
    surge.util.BlastResistance THIN_GLASS -> GBaT
    surge.util.BlastResistance STAINED_GLASS -> vdyR
    surge.util.BlastResistance STAINED_GLASS_PANE -> seBU
    surge.util.BlastResistance GLOWSTONE -> tEaT
    surge.util.BlastResistance REDSTONE_LAMP_OFF -> orGi
    surge.util.BlastResistance REDSTONE_LAMP_ON -> OIxR
    surge.util.BlastResistance SEA_LANTERN -> OIxT
    surge.util.BlastResistance BED_BLOCK -> oqff
    surge.util.BlastResistance DAYLIGHT_DETECTOR -> vnKb
    surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> YiWw
    surge.util.BlastResistance HUGE_MUSHROOM_1 -> rYMt
    surge.util.BlastResistance HUGE_MUSHROOM_2 -> GJrI
    surge.util.BlastResistance LEAVES -> CGTr
    surge.util.BlastResistance LEAVES_2 -> JSxq
    surge.util.BlastResistance SNOW -> XLaU
    int br -> vmig
    surge.util.BlastResistance[] $VALUES -> RdbT
    10:10:surge.util.BlastResistance[] values() -> values
    10:10:surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
    164:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> ETPu
    175:190:int get(org.bukkit.Material) -> GQND
    10:159:void <clinit>() -> <clinit>
surge.util.BlockFinder -> org.cyberpwn.react.uFdS:
    10:10:void <init>() -> <init>
    14:22:boolean follow(org.bukkit.block.Block,react.glang.GList,react.glang.GList,int) -> tuqG
    27:48:boolean tail(surge.server.Cuboid,org.bukkit.block.Block,react.glang.GList,react.glang.GList,int) -> tuqG
surge.util.Blocks -> org.cyberpwn.react.Jkma:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> fuYa
surge.util.C -> org.cyberpwn.react.HKtg:
    surge.util.C BLACK -> TbWm
    surge.util.C DARK_BLUE -> SgeT
    surge.util.C DARK_GREEN -> XfTR
    surge.util.C DARK_AQUA -> JSxs
    surge.util.C DARK_RED -> FjPr
    surge.util.C DARK_PURPLE -> AbsI
    surge.util.C GOLD -> MUSW
    surge.util.C GRAY -> rHKr
    surge.util.C DARK_GRAY -> uHdN
    surge.util.C BLUE -> CXXU
    surge.util.C GREEN -> txdx
    surge.util.C AQUA -> Rucs
    surge.util.C RED -> MfUN
    surge.util.C LIGHT_PURPLE -> PDjS
    surge.util.C YELLOW -> CFuR
    surge.util.C WHITE -> cfVb
    surge.util.C MAGIC -> ioxG
    surge.util.C BOLD -> pBHm
    surge.util.C STRIKETHROUGH -> dPHG
    surge.util.C UNDERLINE -> hmVG
    surge.util.C ITALIC -> rjRL
    surge.util.C RESET -> wqPu
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> cvwK
    char code -> BDUH
    boolean isFormat -> edLR
    java.lang.String toString -> iWFs
    java.util.Map BY_ID -> GSde
    java.util.Map BY_CHAR -> WbsM
    java.util.Map dyeChatMap -> XfWa
    java.util.Map chatHexMap -> XLeL
    java.util.Map dyeHexMap -> GJtC
    surge.util.C[] $VALUES -> cevO
    17:17:surge.util.C[] values() -> values
    17:17:surge.util.C valueOf(java.lang.String) -> valueOf
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    338:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> fdok
    378:378:java.lang.String hex() -> KLpn
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:surge.util.C getByChar(char) -> Btag
    434:442:surge.util.C getByChar(java.lang.String) -> ofcL
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:surge.util.C dyeToChat(org.bukkit.DyeColor) -> GQND
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> tuqG
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> GQND
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> LhmV
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> RbQQ
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> pOru
    560:578:java.lang.String generateColorTable() -> tDHm
    588:588:org.bukkit.ChatColor chatColor() -> gWTv
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:surge.util.C fromItemMeta(byte) -> Btag
    632:679:byte getItemMeta() -> jiPF
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    17:17:void <init>(java.lang.String,int,char,int,surge.util.C$1) -> <init>
    17:17:void <init>(java.lang.String,int,char,int,boolean,surge.util.C$1) -> <init>
    17:727:void <clinit>() -> <clinit>
surge.util.C$1 -> org.cyberpwn.react.HKtg$1:
    22:22:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$10 -> org.cyberpwn.react.HKtg$2:
    121:121:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$11 -> org.cyberpwn.react.HKtg$3:
    132:132:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$12 -> org.cyberpwn.react.HKtg$4:
    143:143:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$13 -> org.cyberpwn.react.HKtg$5:
    154:154:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$14 -> org.cyberpwn.react.HKtg$6:
    165:165:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$15 -> org.cyberpwn.react.HKtg$7:
    176:176:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$16 -> org.cyberpwn.react.HKtg$8:
    187:187:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$17 -> org.cyberpwn.react.HKtg$9:
    198:198:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$18 -> org.cyberpwn.react.HKtg$10:
    209:209:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$19 -> org.cyberpwn.react.HKtg$11:
    220:220:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$2 -> org.cyberpwn.react.HKtg$12:
    33:33:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$20 -> org.cyberpwn.react.HKtg$13:
    231:231:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$21 -> org.cyberpwn.react.HKtg$14:
    242:242:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$22 -> org.cyberpwn.react.HKtg$15:
    254:254:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$23 -> org.cyberpwn.react.HKtg$16:
    int[] $SwitchMap$surge$util$C -> yfTv
    632:632:void <clinit>() -> <clinit>
surge.util.C$3 -> org.cyberpwn.react.HKtg$17:
    44:44:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$4 -> org.cyberpwn.react.HKtg$18:
    55:55:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$5 -> org.cyberpwn.react.HKtg$19:
    66:66:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$6 -> org.cyberpwn.react.HKtg$20:
    77:77:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$7 -> org.cyberpwn.react.HKtg$21:
    88:88:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$8 -> org.cyberpwn.react.HKtg$22:
    99:99:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$9 -> org.cyberpwn.react.HKtg$23:
    110:110:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.CDou -> org.cyberpwn.react.GsfO:
    double number -> jjio
    double max -> max
    9:12:void <init>(double) -> <init>
    16:18:surge.util.CDou set(double) -> pPRP
    23:25:surge.util.CDou add(double) -> teOE
    30:32:surge.util.CDou sub(double) -> jgps
    37:37:double get() -> get
    42:48:void circ() -> WPWK
surge.util.CMD -> org.cyberpwn.react.INwg:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> XDSy
    26:30:void <init>(java.lang.String) -> <init>
    39:40:surge.util.CMD virtual() -> lMSG
    51:53:void execute(org.bukkit.command.CommandSender) -> LhmV
    60:77:void execute() -> execute
surge.util.CNum -> org.cyberpwn.react.NUvm:
    int number -> number
    int max -> max
    9:12:void <init>(int) -> <init>
    16:18:surge.util.CNum set(int) -> RbQQ
    23:25:surge.util.CNum add(int) -> pOru
    30:32:surge.util.CNum sub(int) -> QpPP
    37:37:int get() -> get
    42:48:void circ() -> WPWK
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> KwPC
surge.util.Chunks -> org.cyberpwn.react.tKrD:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> OXdl
    33:40:react.glang.GList getLoadedChunks() -> brXl
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> GQND
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> tuqG
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> tuqG
    98:98:boolean unload(org.bukkit.Chunk) -> Cweb
    114:124:int unload(react.glang.GList,boolean,boolean) -> tuqG
    138:138:int unload(react.glang.GList,boolean) -> tuqG
    150:150:int unload(react.glang.GList) -> iBlU
    166:166:boolean isLoaded(java.lang.String,int,int) -> tuqG
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> LhmV
    201:205:void load(react.glang.GList) -> pYCa
surge.util.CuboidException -> org.cyberpwn.react.twFn:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
surge.util.D -> org.cyberpwn.react.bqrS:
    react.glang.GList buffer -> vLKB
    boolean dbg -> RKSw
    int kf -> EpCW
    react.glang.Callback scall -> pIwi
    11:11:void <init>() -> <init>
    20:24:void flush() -> flush
    28:39:void log(java.lang.String,java.lang.String) -> log
    43:56:void l(java.lang.Object,java.lang.String) -> GQND
    60:66:void s(java.lang.Object,java.lang.String) -> LhmV
    70:81:void cdb() -> clkF
    85:96:void v(java.lang.Object,java.lang.String) -> tCLt
    100:106:void w(java.lang.Object,java.lang.String) -> KCgO
    110:116:void f(java.lang.Object,java.lang.String) -> lnYk
    120:138:void l(java.lang.String) -> QpPP
    142:154:void s(java.lang.String) -> KwPC
    158:177:void v(java.lang.String) -> qKGV
    181:193:void w(java.lang.String) -> cdBT
    197:209:void f(java.lang.String) -> oVBN
    13:16:void <clinit>() -> <clinit>
surge.util.DMSRequire -> org.cyberpwn.react.fSjm:
    surge.util.DMSRequirement value() -> MJiT
surge.util.DMSRequirement -> org.cyberpwn.react.Yohg:
    surge.util.DMSRequirement SQL -> ShGy
    surge.util.DMSRequirement[] $VALUES -> jPva
    3:3:surge.util.DMSRequirement[] values() -> values
    3:3:surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:5:void <clinit>() -> <clinit>
surge.util.Depend -> org.cyberpwn.react.EeMn:
    surge.util.Depend VAULT -> HpXp
    surge.util.Depend FAWE -> oFss
    surge.util.Depend WORLDEDIT -> yCqC
    surge.util.Depend PROTOLIB -> PpAM
    surge.util.Depend CITIZENS -> XLcQ
    java.lang.String name -> name
    surge.util.Depend[] $VALUES -> CrLH
    5:5:surge.util.Depend[] values() -> values
    5:5:surge.util.Depend valueOf(java.lang.String) -> valueOf
    16:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    5:11:void <clinit>() -> <clinit>
surge.util.Dimension -> org.cyberpwn.react.Lqql:
    int width -> width
    int height -> height
    int depth -> depth
    25:29:void <init>(int,int,int) -> <init>
    40:44:void <init>(int,int) -> <init>
    53:68:surge.util.DimensionFace getPane() -> RHwL
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
surge.util.DimensionFace -> org.cyberpwn.react.VMMC:
    surge.util.DimensionFace X -> AIbo
    surge.util.DimensionFace Y -> Lbre
    surge.util.DimensionFace Z -> bRPb
    surge.util.DimensionFace[] $VALUES -> oaFt
    8:8:surge.util.DimensionFace[] values() -> values
    8:8:surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
    8:8:void <init>(java.lang.String,int) -> <init>
    8:23:void <clinit>() -> <clinit>
surge.util.Direction -> org.cyberpwn.react.hYot:
    surge.util.Direction U -> wOKu
    surge.util.Direction D -> EEND
    surge.util.Direction N -> JnPF
    surge.util.Direction S -> tMre
    surge.util.Direction E -> YWwN
    surge.util.Direction W -> YPHH
    int x -> x
    int y -> y
    int z -> z
    surge.server.Cuboid$CuboidDirection f -> dyyU
    surge.util.Direction[] $VALUES -> YXWn
    14:14:surge.util.Direction[] values() -> values
    14:14:surge.util.Direction valueOf(java.lang.String) -> valueOf
    29:34:void <init>(java.lang.String,int,int,int,int,surge.server.Cuboid$CuboidDirection) -> <init>
    38:56:surge.util.Direction reverse() -> oMkJ
    61:61:int x() -> FgxF
    66:66:int y() -> ydYV
    71:71:int z() -> z
    76:76:surge.server.Cuboid$CuboidDirection f() -> JIqB
    81:81:react.glang.GList news() -> lUay
    86:86:react.glang.GList udnews() -> HfOG
    91:101:surge.util.Direction facing(org.bukkit.entity.Player) -> aKuj
    115:147:surge.util.Direction fromByte(byte) -> fuYa
    158:176:byte byteValue() -> byteValue
    14:21:void <clinit>() -> <clinit>
surge.util.Direction$1 -> org.cyberpwn.react.hYot$1:
    int[] $SwitchMap$surge$util$Direction -> FbEj
    38:38:void <clinit>() -> <clinit>
surge.util.DynamicConfiguration -> org.cyberpwn.react.Wqqf:
surge.util.DynamicTracker -> org.cyberpwn.react.AjDq:
surge.util.Embedded -> org.cyberpwn.react.bPNd:
    react.glang.GList get() -> psQP
    void add(java.lang.Object) -> add
surge.util.FU -> org.cyberpwn.react.URYi:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> tuqG
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> GQND
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:806:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:830:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:862:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> KCgO
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> lnYk
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
    95:95:void <clinit>() -> <clinit>
surge.util.Fingerprint -> org.cyberpwn.react.NgWm:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> pjGA
surge.util.Health -> org.cyberpwn.react.AGaP:
    double hp -> cTus
    20:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> GQhu
    41:41:double getHearts() -> JteO
    51:51:double getHalfHearts() -> yKHE
    61:61:int getFlatHalfHearts() -> xaUn
surge.util.IO -> org.cyberpwn.react.RsdN:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
    97:117:void <clinit>() -> <clinit>
surge.util.Items -> org.cyberpwn.react.QpaM:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> tuqG
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> tuqG
    55:55:boolean is(org.bukkit.inventory.ItemStack,surge.util.MaterialBlock) -> tuqG
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> tuqG
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> tuqG
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> GQND
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> LhmV
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> tCLt
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> tuqG
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> tuqG
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> tuqG
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> tuqG
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> KCgO
    216:221:surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> lnYk
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> dVAX
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> Btag
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> fuYa
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> tuqG
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> xGHw
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> uxsn
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> tuqG
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> tuqG
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> GQND
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> tuqG
surge.util.MSound -> org.cyberpwn.react.GRCM:
    surge.util.MSound AMBIENCE_CAVE -> xkdj
    surge.util.MSound AMBIENCE_RAIN -> xbtD
    surge.util.MSound AMBIENCE_THUNDER -> bARa
    surge.util.MSound ANVIL_BREAK -> bQsR
    surge.util.MSound ANVIL_LAND -> WQse
    surge.util.MSound ANVIL_USE -> VptF
    surge.util.MSound ARROW_HIT -> SVhf
    surge.util.MSound BURP -> fxSW
    surge.util.MSound CHEST_CLOSE -> ihJd
    surge.util.MSound CHEST_OPEN -> qobA
    surge.util.MSound CLICK -> rYRd
    surge.util.MSound DOOR_CLOSE -> JwDD
    surge.util.MSound DOOR_OPEN -> GvJm
    surge.util.MSound DRINK -> XDWC
    surge.util.MSound EAT -> fEOL
    surge.util.MSound EXPLODE -> RJuR
    surge.util.MSound FALL_BIG -> SEgh
    surge.util.MSound FALL_SMALL -> CaLR
    surge.util.MSound FIRE -> txim
    surge.util.MSound FIRE_IGNITE -> GlyS
    surge.util.MSound FIZZ -> IkPK
    surge.util.MSound FUSE -> liBW
    surge.util.MSound GLASS -> BDWs
    surge.util.MSound HURT_FLESH -> cLeI
    surge.util.MSound ITEM_BREAK -> sScY
    surge.util.MSound ITEM_PICKUP -> neus
    surge.util.MSound LAVA -> pclU
    surge.util.MSound LAVA_POP -> QbEC
    surge.util.MSound LEVEL_UP -> xJBL
    surge.util.MSound MINECART_BASE -> BTww
    surge.util.MSound MINECART_INSIDE -> wyaw
    surge.util.MSound NOTE_BASS -> iMtp
    surge.util.MSound NOTE_PIANO -> dWxa
    surge.util.MSound NOTE_BASS_DRUM -> QGqL
    surge.util.MSound NOTE_STICKS -> rYQK
    surge.util.MSound NOTE_BASS_GUITAR -> SyKw
    surge.util.MSound NOTE_SNARE_DRUM -> eRkV
    surge.util.MSound NOTE_PLING -> GdhA
    surge.util.MSound ORB_PICKUP -> VpsI
    surge.util.MSound PISTON_EXTEND -> NrMg
    surge.util.MSound PISTON_RETRACT -> eRkQ
    surge.util.MSound PORTAL -> tyJM
    surge.util.MSound PORTAL_TRAVEL -> pmAT
    surge.util.MSound PORTAL_TRIGGER -> DuSi
    surge.util.MSound SHOOT_ARROW -> giuk
    surge.util.MSound SPLASH -> wNpv
    surge.util.MSound SPLASH2 -> bswk
    surge.util.MSound STEP_GRASS -> xbvA
    surge.util.MSound STEP_GRAVEL -> Sgla
    surge.util.MSound STEP_LADDER -> LlIt
    surge.util.MSound STEP_SAND -> AAVG
    surge.util.MSound STEP_SNOW -> whcR
    surge.util.MSound STEP_STONE -> ynhs
    surge.util.MSound STEP_WOOD -> sBeB
    surge.util.MSound STEP_WOOL -> HEkI
    surge.util.MSound SWIM -> NrPd
    surge.util.MSound WATER -> SFJo
    surge.util.MSound WOOD_CLICK -> RBec
    surge.util.MSound BAT_DEATH -> GdiV
    surge.util.MSound BAT_HURT -> nUXO
    surge.util.MSound BAT_IDLE -> lhdG
    surge.util.MSound BAT_LOOP -> BnmP
    surge.util.MSound BAT_TAKEOFF -> IINI
    surge.util.MSound BLAZE_BREATH -> thKA
    surge.util.MSound BLAZE_DEATH -> MoLc
    surge.util.MSound BLAZE_HIT -> VWcY
    surge.util.MSound CAT_HISS -> thMo
    surge.util.MSound CAT_HIT -> VyiN
    surge.util.MSound CAT_MEOW -> bJGm
    surge.util.MSound CAT_PURR -> LAWb
    surge.util.MSound CAT_PURREOW -> OmDs
    surge.util.MSound CHICKEN_IDLE -> HxqK
    surge.util.MSound CHICKEN_HURT -> vnTX
    surge.util.MSound CHICKEN_EGG_POP -> JKsA
    surge.util.MSound CHICKEN_WALK -> Qixi
    surge.util.MSound COW_IDLE -> fgUp
    surge.util.MSound COW_HURT -> gYVg
    surge.util.MSound COW_WALK -> fpGA
    surge.util.MSound CREEPER_HISS -> XMLT
    surge.util.MSound CREEPER_DEATH -> elcV
    surge.util.MSound ENDERDRAGON_DEATH -> foeb
    surge.util.MSound ENDERDRAGON_GROWL -> tyOJ
    surge.util.MSound ENDERDRAGON_HIT -> jYoF
    surge.util.MSound ENDERDRAGON_WINGS -> elbs
    surge.util.MSound ENDERMAN_DEATH -> JmvN
    surge.util.MSound ENDERMAN_HIT -> SFMY
    surge.util.MSound ENDERMAN_IDLE -> fDqi
    surge.util.MSound ENDERMAN_TELEPORT -> Gumw
    surge.util.MSound ENDERMAN_SCREAM -> XnnK
    surge.util.MSound ENDERMAN_STARE -> mIfR
    surge.util.MSound GHAST_SCREAM -> YOnM
    surge.util.MSound GHAST_SCREAM2 -> sKXK
    surge.util.MSound GHAST_CHARGE -> djAK
    surge.util.MSound GHAST_DEATH -> lNrf
    surge.util.MSound GHAST_FIREBALL -> VGEB
    surge.util.MSound GHAST_MOAN -> Wsyl
    surge.util.MSound IRONGOLEM_DEATH -> KhgT
    surge.util.MSound IRONGOLEM_HIT -> RTJW
    surge.util.MSound IRONGOLEM_THROW -> VhfX
    surge.util.MSound IRONGOLEM_WALK -> xJEX
    surge.util.MSound MAGMACUBE_WALK -> XCyH
    surge.util.MSound MAGMACUBE_WALK2 -> kebN
    surge.util.MSound MAGMACUBE_JUMP -> nMIQ
    surge.util.MSound PIG_IDLE -> NaPM
    surge.util.MSound PIG_DEATH -> mkhN
    surge.util.MSound PIG_WALK -> puQx
    surge.util.MSound SHEEP_IDLE -> SWNH
    surge.util.MSound SHEEP_SHEAR -> OKBE
    surge.util.MSound SHEEP_WALK -> cnku
    surge.util.MSound SILVERFISH_HIT -> VOTo
    surge.util.MSound SILVERFISH_KILL -> ecpb
    surge.util.MSound SILVERFISH_IDLE -> FsNB
    surge.util.MSound SILVERFISH_WALK -> hSkQ
    surge.util.MSound SKELETON_IDLE -> wiIM
    surge.util.MSound SKELETON_DEATH -> Octf
    surge.util.MSound SKELETON_HURT -> xkkS
    surge.util.MSound SKELETON_WALK -> mJJD
    surge.util.MSound SLIME_ATTACK -> jbcB
    surge.util.MSound SLIME_WALK -> aNus
    surge.util.MSound SLIME_WALK2 -> lOVm
    surge.util.MSound SPIDER_IDLE -> VXHk
    surge.util.MSound SPIDER_DEATH -> xJHp
    surge.util.MSound SPIDER_WALK -> NOox
    surge.util.MSound WITHER_DEATH -> NaRt
    surge.util.MSound WITHER_HURT -> IHrD
    surge.util.MSound WITHER_IDLE -> eBRO
    surge.util.MSound WITHER_SHOOT -> ReNy
    surge.util.MSound WITHER_SPAWN -> riyQ
    surge.util.MSound WOLF_BARK -> bAYP
    surge.util.MSound WOLF_DEATH -> qogQ
    surge.util.MSound WOLF_GROWL -> uIPE
    surge.util.MSound WOLF_HOWL -> XMMA
    surge.util.MSound WOLF_HURT -> gGvB
    surge.util.MSound WOLF_PANT -> TYpl
    surge.util.MSound WOLF_SHAKE -> gjYl
    surge.util.MSound WOLF_WALK -> HEmV
    surge.util.MSound WOLF_WHINE -> PDtM
    surge.util.MSound ZOMBIE_METAL -> sdjx
    surge.util.MSound ZOMBIE_WOOD -> aFde
    surge.util.MSound ZOMBIE_WOODBREAK -> Nqqw
    surge.util.MSound ZOMBIE_IDLE -> mkjk
    surge.util.MSound ZOMBIE_DEATH -> oqos
    surge.util.MSound ZOMBIE_HURT -> ayjF
    surge.util.MSound ZOMBIE_INFECT -> MMMj
    surge.util.MSound ZOMBIE_UNFECT -> DcuO
    surge.util.MSound ZOMBIE_REMEDY -> CPRK
    surge.util.MSound ZOMBIE_WALK -> GvOx
    surge.util.MSound ZOMBIE_PIG_IDLE -> IkTk
    surge.util.MSound ZOMBIE_PIG_ANGRY -> NXaV
    surge.util.MSound ZOMBIE_PIG_DEATH -> jYpN
    surge.util.MSound ZOMBIE_PIG_HURT -> uINe
    surge.util.MSound DIG_WOOL -> XoPM
    surge.util.MSound DIG_GRASS -> JCen
    surge.util.MSound DIG_GRAVEL -> eRtU
    surge.util.MSound DIG_SAND -> HFPt
    surge.util.MSound DIG_SNOW -> qDuR
    surge.util.MSound DIG_STONE -> EMiH
    surge.util.MSound DIG_WOOD -> OAso
    surge.util.MSound FIREWORK_BLAST -> lWhu
    surge.util.MSound FIREWORK_BLAST2 -> DdXe
    surge.util.MSound FIREWORK_LARGE_BLAST -> PEXN
    surge.util.MSound FIREWORK_LARGE_BLAST2 -> GnBl
    surge.util.MSound FIREWORK_TWINKLE -> vwHn
    surge.util.MSound FIREWORK_TWINKLE2 -> YrVX
    surge.util.MSound FIREWORK_LAUNCH -> UCfL
    surge.util.MSound SUCCESSFUL_HIT -> VWkI
    surge.util.MSound HORSE_ANGRY -> ubcd
    surge.util.MSound HORSE_ARMOR -> qEVO
    surge.util.MSound HORSE_BREATHE -> cMNx
    surge.util.MSound HORSE_DEATH -> COse
    surge.util.MSound HORSE_GALLOP -> rXxf
    surge.util.MSound HORSE_HIT -> IISS
    surge.util.MSound HORSE_IDLE -> Pwyt
    surge.util.MSound HORSE_JUMP -> OuWr
    surge.util.MSound HORSE_LAND -> wXGw
    surge.util.MSound HORSE_SADDLE -> wWhB
    surge.util.MSound HORSE_SOFT -> noPm
    surge.util.MSound HORSE_WOOD -> Xwaf
    surge.util.MSound DONKEY_ANGRY -> puVk
    surge.util.MSound DONKEY_DEATH -> pJbb
    surge.util.MSound DONKEY_HIT -> vmvX
    surge.util.MSound DONKEY_IDLE -> rQIO
    surge.util.MSound HORSE_SKELETON_DEATH -> drTd
    surge.util.MSound HORSE_SKELETON_HIT -> ucBx
    surge.util.MSound HORSE_SKELETON_IDLE -> qpHi
    surge.util.MSound HORSE_ZOMBIE_DEATH -> QalL
    surge.util.MSound HORSE_ZOMBIE_HIT -> kmvY
    surge.util.MSound HORSE_ZOMBIE_IDLE -> huni
    surge.util.MSound VILLAGER_DEATH -> LJMI
    surge.util.MSound VILLAGER_HAGGLE -> KXJv
    surge.util.MSound VILLAGER_HIT -> fMfP
    surge.util.MSound VILLAGER_IDLE -> folS
    surge.util.MSound VILLAGER_NO -> LkqV
    surge.util.MSound VILLAGER_YES -> AJPF
    java.lang.String pre19sound -> LJNq
    java.lang.String post19sound -> Hxvf
    org.bukkit.Sound resolvedSound -> UekF
    surge.util.MSound[] $VALUES -> Vynv
    8:8:surge.util.MSound[] values() -> values
    8:8:surge.util.MSound valueOf(java.lang.String) -> valueOf
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> lLpx
    8:203:void <clinit>() -> <clinit>
surge.util.MaterialBlock -> org.cyberpwn.react.BRtL:
    org.bukkit.Material material -> sBln
    java.lang.Byte data -> cnsO
    28:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    34:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    45:48:void <init>(org.bukkit.block.BlockState) -> <init>
    51:54:void <init>(org.bukkit.block.Block) -> <init>
    57:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> pbPM
    79:80:void setData(java.lang.Byte) -> tuqG
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
surge.util.P -> org.cyberpwn.react.CoiU:
    25:25:void <init>() -> <init>
    29:32:boolean isWithinViewDistance(org.bukkit.entity.Player,org.bukkit.Chunk) -> tuqG
    37:45:boolean isWithinViewDistance(org.bukkit.Chunk) -> iBlU
    57:57:boolean isOnline(java.lang.String) -> GaoV
    69:69:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    79:79:org.bukkit.entity.Player getAnyPlayer() -> ivlk
    89:89:boolean isAnyOnline() -> AikA
    101:101:react.glang.GList inWorld(org.bukkit.World) -> rUwW
    113:125:react.glang.GList inChunk(org.bukkit.Chunk) -> pYCa
    139:139:react.glang.GList inArea(org.bukkit.Location,double) -> tuqG
    153:153:react.glang.GList inArea(org.bukkit.Location,int) -> tuqG
    164:165:void disable(org.bukkit.entity.Player) -> yIif
    175:176:void enable(org.bukkit.entity.Player) -> JITl
    189:189:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> tuqG
    203:203:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> GQND
    215:216:boolean hasInventoryOpen(org.bukkit.entity.Player) -> kbcq
    232:264:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> tuqG
    278:287:int getTotalExperience(org.bukkit.entity.Player) -> UACg
    302:310:void setTotalExperience(org.bukkit.entity.Player,int) -> LhmV
    321:321:boolean canFindPlayer(java.lang.String) -> ERwx
    333:349:org.bukkit.entity.Player findPlayer(java.lang.String) -> VChU
    359:366:react.glang.GList onlinePlayers() -> NpNl
    378:378:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> EJey
    389:392:void clear(org.bukkit.entity.Player) -> KejH
    402:406:void clearEffects(org.bukkit.entity.Player) -> qJcU
    419:420:void heal(org.bukkit.entity.Player,double) -> tuqG
    430:431:void heal(org.bukkit.entity.Player) -> uFOG
    442:443:void resetMaxHeath(org.bukkit.entity.Player) -> VDFo
    453:454:void resetHunger(org.bukkit.entity.Player) -> pPTd
    464:465:void kill(org.bukkit.entity.Player) -> jNbr
    476:476:surge.util.Shape getShape(org.bukkit.entity.Player) -> qSWg
    488:488:org.bukkit.Location getHand(org.bukkit.entity.Player) -> dUbW
    504:513:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> tuqG
surge.util.P$1 -> org.cyberpwn.react.CoiU$1:
    1:113:void <init>() -> <init>
    118:123:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> xGHw
    1:1:java.lang.Object onAdapt(java.lang.Object) -> dVAX
surge.util.P$2 -> org.cyberpwn.react.CoiU$2:
    java.lang.Double val$doff -> MnuC
    org.bukkit.entity.Player val$e -> usgc
    org.bukkit.entity.Entity[] val$result -> noTO
    1:245:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    250:261:void onTrace(org.bukkit.Location) -> uxsn
surge.util.PE -> org.cyberpwn.react.Qxqf:
    surge.util.PE ABSORPTION -> UCgo
    surge.util.PE BLINDNESS -> oOrW
    surge.util.PE CONFUSION -> RSqA
    surge.util.PE DAMAGE_RESISTANCE -> MMRe
    surge.util.PE FAST_DIGGING -> pAtG
    surge.util.PE FIRE_RESISTANCE -> SpgI
    surge.util.PE GLOWING -> vfIf
    surge.util.PE HARM -> coSy
    surge.util.PE HEAL -> nwdH
    surge.util.PE HEALTH_BOOST -> pcwN
    surge.util.PE HUNGER -> ahlT
    surge.util.PE INCREASE_DAMAGE -> vCeM
    surge.util.PE INVISIBILITY -> svRA
    surge.util.PE JUMP -> kDFf
    surge.util.PE LEVITATION -> vCdu
    surge.util.PE LUCK -> KXMJ
    surge.util.PE NIGHT_VISION -> Xfas
    surge.util.PE POISON -> yoQn
    surge.util.PE REGENERATION -> ahkd
    surge.util.PE SATURATION -> DRvx
    surge.util.PE SLOW -> BxHA
    surge.util.PE SLOW_DIGGING -> hvQe
    surge.util.PE SPEED -> aXKl
    surge.util.PE UNLUCK -> Xwdd
    surge.util.PE WATER_BREATHING -> JwLt
    surge.util.PE WEAKNESS -> AlSQ
    surge.util.PE WITHER -> pKEM
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> tuqG
    144:144:surge.util.PE d(int) -> qKGV
    156:156:surge.util.PE a(int) -> cdBT
    166:166:org.bukkit.potion.PotionEffect c() -> xPTN
    177:178:void c(org.bukkit.entity.LivingEntity) -> lnYk
    182:183:void crm(org.bukkit.entity.LivingEntity) -> dVAX
    187:188:void rm(org.bukkit.entity.LivingEntity) -> Btag
    192:215:void <clinit>() -> <clinit>
surge.util.ParticleEffect -> org.cyberpwn.react.EBjg:
    surge.util.ParticleEffect EXPLOSION_NORMAL -> vUGI
    surge.util.ParticleEffect EXPLOSION_LARGE -> LkqE
    surge.util.ParticleEffect EXPLOSION_HUGE -> NigI
    surge.util.ParticleEffect FIREWORKS_SPARK -> XfcF
    surge.util.ParticleEffect WATER_BUBBLE -> xJOT
    surge.util.ParticleEffect WATER_SPLASH -> vvmD
    surge.util.ParticleEffect WATER_WAKE -> tFSV
    surge.util.ParticleEffect SUSPENDED -> tFSU
    surge.util.ParticleEffect SUSPENDED_DEPTH -> FPoj
    surge.util.ParticleEffect CRIT -> mtbv
    surge.util.ParticleEffect CRIT_MAGIC -> yLqO
    surge.util.ParticleEffect SMOKE_NORMAL -> IIYA
    surge.util.ParticleEffect SMOKE_LARGE -> ygDi
    surge.util.ParticleEffect SPELL -> NaXm
    surge.util.ParticleEffect SPELL_INSTANT -> qpNh
    surge.util.ParticleEffect SPELL_MOB -> Rmdt
    surge.util.ParticleEffect SPELL_MOB_AMBIENT -> XLre
    surge.util.ParticleEffect SPELL_WITCH -> Hphm
    surge.util.ParticleEffect DRIP_WATER -> SEtK
    surge.util.ParticleEffect DRIP_LAVA -> yMRU
    surge.util.ParticleEffect VILLAGER_ANGRY -> OKJd
    surge.util.ParticleEffect VILLAGER_HAPPY -> fDyw
    surge.util.ParticleEffect TOWN_AURA -> XEDT
    surge.util.ParticleEffect NOTE -> Exab
    surge.util.ParticleEffect PORTAL -> CGfK
    surge.util.ParticleEffect ENCHANTMENT_TABLE -> pdYr
    surge.util.ParticleEffect FLAME -> Khpo
    surge.util.ParticleEffect LAVA -> KXOD
    surge.util.ParticleEffect FOOTSTEP -> CXhq
    surge.util.ParticleEffect CLOUD -> seRV
    surge.util.ParticleEffect REDSTONE -> UDJG
    surge.util.ParticleEffect SNOWBALL -> KiQB
    surge.util.ParticleEffect SNOW_SHOVEL -> TIWK
    surge.util.ParticleEffect SLIME -> pmKI
    surge.util.ParticleEffect HEART -> thUO
    surge.util.ParticleEffect BARRIER -> tqEu
    surge.util.ParticleEffect ITEM_CRACK -> eBVk
    surge.util.ParticleEffect BLOCK_CRACK -> LIop
    surge.util.ParticleEffect BLOCK_DUST -> QrrI
    surge.util.ParticleEffect WATER_DROP -> DlmD
    surge.util.ParticleEffect ITEM_TAKE -> DmPL
    surge.util.ParticleEffect MOB_APPEARANCE -> nUeV
    surge.util.ParticleEffect DRAGON_BREATH -> uskj
    surge.util.ParticleEffect END_ROD -> gPqD
    surge.util.ParticleEffect DAMAGE_INDICATOR -> NXig
    surge.util.ParticleEffect SWEEP_ATTACK -> gaqt
    java.util.Map NAME_MAP -> rbQh
    java.util.Map ID_MAP -> HFWk
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> tWVX
    java.util.List properties -> vemA
    surge.util.ParticleEffect[] $VALUES -> ygEx
    51:51:surge.util.ParticleEffect[] values() -> values
    51:51:surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
    467:472:void <init>(java.lang.String,int,java.lang.String,int,int,surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> vJNK
    511:511:boolean hasProperty(surge.util.ParticleEffect$ParticleProperty) -> tuqG
    521:525:boolean isSupported() -> isSupported
    537:545:surge.util.ParticleEffect fromName(java.lang.String) -> SnEI
    557:565:surge.util.ParticleEffect fromId(int) -> oVBN
    577:578:boolean isWater(org.bukkit.Location) -> mymY
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> tuqG
    615:615:boolean isDataCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleData) -> tuqG
    629:629:boolean isColorCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor) -> tuqG
    665:681:void display(float,int,org.bukkit.Location,double) -> tuqG
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> tuqG
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> tuqG
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> tuqG
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> tuqG
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> tuqG
    899:912:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> tuqG
    934:947:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> tuqG
    968:969:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> tuqG
    1004:1020:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> tuqG
    1055:1068:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> tuqG
    1102:1103:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> tuqG
    1130:1143:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> tuqG
    1169:1182:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> tuqG
    1207:1208:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> tuqG
    51:452:void <clinit>() -> <clinit>
surge.util.ParticleEffect$BlockData -> org.cyberpwn.react.EBjg$tuqG:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$ItemData -> org.cyberpwn.react.EBjg$GQND:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$NoteColor -> org.cyberpwn.react.EBjg$LhmV:
    int note -> note
    1563:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> KgFU
    1594:1594:float getValueY() -> bHDe
    1605:1605:float getValueZ() -> twLf
surge.util.ParticleEffect$OrdinaryColor -> org.cyberpwn.react.EBjg$tCLt:
    int red -> red
    int green -> green
    int blue -> blue
    1436:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> KgFU
    1526:1526:float getValueY() -> bHDe
    1537:1537:float getValueZ() -> twLf
surge.util.ParticleEffect$ParticleColor -> org.cyberpwn.react.EBjg$KCgO:
    1383:1383:void <init>() -> <init>
    float getValueX() -> KgFU
    float getValueY() -> bHDe
    float getValueZ() -> twLf
surge.util.ParticleEffect$ParticleColorException -> org.cyberpwn.react.EBjg$lnYk:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticleData -> org.cyberpwn.react.EBjg$dVAX:
    org.bukkit.Material material -> sBln
    byte data -> data
    int[] packetData -> oHGW
    1266:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> mOtK
    1309:1309:java.lang.String getPacketDataString() -> TGMC
surge.util.ParticleEffect$ParticleDataException -> org.cyberpwn.react.EBjg$Btag:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticlePacket -> org.cyberpwn.react.EBjg$fuYa:
    int version -> version
    java.lang.Class enumParticle -> grsU
    java.lang.reflect.Constructor packetConstructor -> cwiE
    java.lang.reflect.Method getHandle -> heUg
    java.lang.reflect.Field playerConnection -> QPov
    java.lang.reflect.Method sendPacket -> oXgP
    boolean initialized -> initialized
    surge.util.ParticleEffect effect -> pmLe
    float offsetX -> tWVG
    float offsetY -> FIAb
    float offsetZ -> jIXM
    float speed -> Mffy
    int amount -> Ulhc
    boolean longDistance -> IRKK
    surge.util.ParticleEffect$ParticleData data -> TbkG
    java.lang.Object packet -> KWop
    1746:1764:void <init>(surge.util.ParticleEffect,float,float,float,float,int,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> rokF
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> tuqG
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> GQND
    2004:2018:void sendTo(org.bukkit.Location,double) -> GQND
surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> org.cyberpwn.react.EBjg$fuYa$tuqG:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> org.cyberpwn.react.EBjg$fuYa$GQND:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> org.cyberpwn.react.EBjg$fuYa$LhmV:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticleProperty -> org.cyberpwn.react.EBjg$xGHw:
    surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> WlUY
    surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> eKKB
    surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> aFnB
    surge.util.ParticleEffect$ParticleProperty COLORABLE -> JTmW
    surge.util.ParticleEffect$ParticleProperty[] $VALUES -> WlTr
    1219:1219:surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1219:1219:surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1219:1236:void <clinit>() -> <clinit>
surge.util.ParticleEffect$ParticleVersionException -> org.cyberpwn.react.EBjg$uxsn:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
surge.util.Paste -> org.cyberpwn.react.jXIk:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> ckow
surge.util.Persist -> org.cyberpwn.react.AaTq:
surge.util.Platform -> org.cyberpwn.react.IOYy:
    boolean ENABLE -> vKxp
    double PROC_CPU -> CGhe
    9:9:void <init>() -> <init>
    253:258:java.lang.String getVersion() -> getVersion
    263:268:java.lang.String getName() -> getName
    273:273:com.sun.management.OperatingSystemMXBean getSystem() -> feRp
    9:9:com.sun.management.OperatingSystemMXBean access$000() -> XBXH
    11:12:void <clinit>() -> <clinit>
surge.util.Platform$CPU -> org.cyberpwn.react.IOYy$tuqG:
    198:198:void <init>() -> <init>
    202:207:int getAvailableProcessors() -> getAvailableProcessors
    212:217:double getCPULoad() -> sYuU
    222:227:double getProcessCPULoad() -> iejR
    232:237:double getLiveProcessCPULoad() -> FqHu
    242:247:java.lang.String getArchitecture() -> sADe
surge.util.Platform$ENVIRONMENT -> org.cyberpwn.react.IOYy$GQND:
    14:14:void <init>() -> <init>
    18:18:boolean canRunBatch() -> NNLk
    23:28:java.lang.String getJavaHome() -> erpV
    33:38:java.lang.String getJavaVendor() -> TWmc
    43:48:java.lang.String getJavaVersion() -> KLsN
surge.util.Platform$MEMORY -> org.cyberpwn.react.IOYy$LhmV:
    119:119:void <init>() -> <init>
surge.util.Platform$MEMORY$PHYSICAL -> org.cyberpwn.react.IOYy$LhmV$tuqG:
    121:121:void <init>() -> <init>
    125:130:long getTotalMemory() -> fKcK
    135:140:long getFreeMemory() -> PTTw
    145:150:long getUsedMemory() -> EBrx
surge.util.Platform$MEMORY$VIRTUAL -> org.cyberpwn.react.IOYy$LhmV$GQND:
    154:154:void <init>() -> <init>
    158:163:long getTotalMemory() -> fKcK
    168:173:long getFreeMemory() -> PTTw
    178:183:long getUsedMemory() -> EBrx
    188:193:long getCommittedVirtualMemory() -> hcLE
surge.util.Platform$STORAGE -> org.cyberpwn.react.IOYy$tCLt:
    52:52:void <init>() -> <init>
    56:63:long getAbsoluteTotalSpace() -> qnEy
    68:68:long getTotalSpace() -> getTotalSpace
    73:73:long getTotalSpace(java.io.File) -> dVAX
    78:85:long getAbsoluteFreeSpace() -> oyBI
    90:90:long getFreeSpace() -> getFreeSpace
    95:95:long getFreeSpace(java.io.File) -> Btag
    100:100:long getUsedSpace() -> ghYO
    105:105:long getUsedSpace(java.io.File) -> fuYa
    110:110:long getAbsoluteUsedSpace() -> ETVP
    115:115:java.io.File[] getRoots() -> getRoots
surge.util.PluginUtil -> org.cyberpwn.react.hIRf:
    62:62:void <init>() -> <init>
    73:75:void enable(org.bukkit.plugin.Plugin) -> KCgO
    79:89:void enable(java.lang.String) -> oVAf
    96:100:void enableAll() -> vkru
    110:114:void disable(org.bukkit.plugin.Plugin) -> lnYk
    121:125:void disableAll() -> bHHD
    136:136:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> dVAX
    150:157:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> tuqG
    169:174:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> RYbB
    184:187:java.util.List getPluginNames(boolean) -> UcHV
    199:202:java.lang.String getPluginVersion(java.lang.String) -> LaBS
    215:237:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> Btag
    252:331:java.util.List findByCommand(java.lang.String) -> Cfgf
    352:353:void load(org.bukkit.plugin.Plugin) -> fuYa
    357:379:java.lang.String getPluginFileName(java.lang.String) -> KvpE
    384:406:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> tuqG
    419:471:void load(java.lang.String) -> load
    476:507:void load(java.io.File) -> load
    518:523:void reload(org.bukkit.plugin.Plugin) -> xGHw
    530:534:void reloadAll() -> fCRU
    546:648:void unload(org.bukkit.plugin.Plugin) -> uxsn
    654:776:void unloadForce(org.bukkit.plugin.Plugin) -> mymY
    781:783:void reloadSoft(surge.control.AmpedPlugin) -> LhmV
surge.util.PoolCount -> org.cyberpwn.react.ePjF:
surge.util.PoolDescriber -> org.cyberpwn.react.scDq:
surge.util.PoolNanoThrottle -> org.cyberpwn.react.ylfC:
surge.util.PositionalSelector -> org.cyberpwn.react.CMgs:
    react.glang.GSet allowedChunks -> PyBr
    12:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    23:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> nlkt
    39:40:void addChunk(org.bukkit.Chunk) -> tupT
    44:44:react.glang.GSet getAllowedChunks() -> Fgyp
surge.util.Protocol -> org.cyberpwn.react.bjDc:
    surge.util.Protocol LATEST -> tNgb
    surge.util.Protocol R1_12_2 -> MgJt
    surge.util.Protocol R1_12_2_PRE -> TRMU
    surge.util.Protocol R1_12_1 -> XgJg
    surge.util.Protocol R1_12 -> iNgx
    surge.util.Protocol R1_11_2 -> jbmR
    surge.util.Protocol R1_11_1 -> Lthj
    surge.util.Protocol R1_11 -> xkuY
    surge.util.Protocol R1_10_2 -> TRNG
    surge.util.Protocol R1_10_1 -> yfgb
    surge.util.Protocol R1_10 -> SOJe
    surge.util.Protocol R1_9_4 -> dOyk
    surge.util.Protocol R1_9_3 -> koBE
    surge.util.Protocol R1_9_2 -> yEFH
    surge.util.Protocol R1_9_1 -> RCWB
    surge.util.Protocol R1_9 -> hTUv
    surge.util.Protocol R1_8_9 -> oXiS
    surge.util.Protocol R1_8_8 -> mRbp
    surge.util.Protocol R1_8_7 -> yxJD
    surge.util.Protocol R1_8_6 -> UDNA
    surge.util.Protocol R1_8_5 -> XMVo
    surge.util.Protocol R1_8_4 -> Vqci
    surge.util.Protocol R1_8_3 -> AJVd
    surge.util.Protocol R1_8_2 -> usmK
    surge.util.Protocol R1_8_1 -> Ltgn
    surge.util.Protocol R1_8 -> ReWl
    surge.util.Protocol R1_7_10 -> BEIW
    surge.util.Protocol R1_7_9 -> xcco
    surge.util.Protocol R1_7_8 -> fyDP
    surge.util.Protocol R1_7_7 -> cnxl
    surge.util.Protocol R1_7_6 -> Bwld
    surge.util.Protocol R1_7_5 -> seUj
    surge.util.Protocol R1_7_4 -> FkGU
    surge.util.Protocol R1_7_3 -> GdxO
    surge.util.Protocol R1_7_2 -> sduG
    surge.util.Protocol R1_7_1 -> QauC
    surge.util.Protocol B1_6_4 -> oOwa
    surge.util.Protocol B1_6_3 -> EyEm
    surge.util.Protocol B1_6_2 -> xIpg
    surge.util.Protocol B1_6_1 -> ARhU
    surge.util.Protocol B1_5_2 -> PNSY
    surge.util.Protocol B1_5_1 -> mdIC
    surge.util.Protocol B1_5 -> GmlH
    surge.util.Protocol B1_4_7 -> WdIf
    surge.util.Protocol B1_4_6 -> MMYy
    surge.util.Protocol B1_4_5 -> FryQ
    surge.util.Protocol B1_4_4 -> RBwJ
    surge.util.Protocol B1_4_2 -> koDT
    surge.util.Protocol B1_3_2 -> ojNe
    surge.util.Protocol B1_3_1 -> cMYU
    surge.util.Protocol B1_2_5 -> FaxH
    surge.util.Protocol B1_2_4 -> wqeh
    surge.util.Protocol EARLIEST -> VWst
    surge.util.Protocol UNKNOWN -> yxLa
    int version -> version
    java.lang.String packageVersion -> sSCh
    java.lang.String versionName -> MwnM
    boolean netty -> ARhA
    surge.util.Protocol[] $VALUES -> Jesn
    5:5:surge.util.Protocol[] values() -> values
    5:5:surge.util.Protocol valueOf(java.lang.String) -> valueOf
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    88:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> bXiI
    118:118:java.lang.String getPackageVersion() -> cuHG
    124:124:java.lang.String toString() -> toString
    129:137:surge.util.Protocol getSupportedNMSVersion() -> WHHj
    142:150:surge.util.Protocol getProtocolVersion() -> Blme
    155:155:surge.util.ProtocolRange to(surge.util.Protocol) -> GQND
    160:160:boolean isServerVersion() -> tDJO
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> HwQB
    175:175:boolean isActualVersion() -> FWWl
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> EmgE
    200:200:int getMetaVersion() -> lnvM
    5:60:void <clinit>() -> <clinit>
surge.util.ProtocolRange -> org.cyberpwn.react.Aidq:
    surge.util.Protocol from -> kMAC
    surge.util.Protocol to -> TROa
    9:12:void <init>(surge.util.Protocol,surge.util.Protocol) -> <init>
    16:16:surge.util.Protocol getFrom() -> mXft
    21:21:surge.util.Protocol getTo() -> nllM
    26:26:boolean contains(surge.util.Protocol) -> LhmV
    32:32:java.lang.String toString() -> toString
surge.util.Query -> org.cyberpwn.react.jWhw:
    org.bukkit.entity.Player p -> RHwL
    18:21:void <init>(org.bukkit.entity.Player) -> <init>
    25:26:void close() -> close
    void onMessage(java.lang.String) -> xGHw
    33:37:void on(org.bukkit.event.player.PlayerQuitEvent) -> tuqG
    42:46:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> tuqG
    51:65:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> tuqG
surge.util.Query$1 -> org.cyberpwn.react.jWhw$1:
    org.bukkit.event.player.AsyncPlayerChatEvent val$e -> cwmO
    surge.util.Query this$0 -> CiqD
    54:54:void <init>(surge.util.Query,org.bukkit.event.player.AsyncPlayerChatEvent) -> <init>
    58:60:void run() -> run
surge.util.Range -> org.cyberpwn.react.PBlq:
    double min -> min
    double max -> max
    22:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> Emfj
    70:70:int randomNextInt() -> tfLr
    80:80:long randomNextLong() -> JlUf
    92:92:boolean isWithin(double) -> HeRH
    104:104:boolean isWithin(int) -> pjGA
    116:116:boolean isWithin(long) -> AWjw
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> aKuj
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> UcHV
surge.util.RawEvent -> org.cyberpwn.react.Blgf:
surge.util.RayTrace -> org.cyberpwn.react.KVAj:
    org.bukkit.Location start -> yUhN
    org.bukkit.util.Vector direction -> cwmK
    java.lang.Double maxDistance -> FQXI
    java.lang.Double distanceCovered -> YHLs
    java.lang.Double step -> uQlY
    java.lang.Boolean stop -> UUPw
    37:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> LikC
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> uxsn
    89:89:org.bukkit.Location getStart() -> futf
    94:95:void setStart(org.bukkit.Location) -> UbgR
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> bXgj
    114:115:void setMaxDistance(java.lang.Double) -> tCLt
    119:119:java.lang.Double getDistanceCovered() -> bGfV
    124:125:void setDistanceCovered(java.lang.Double) -> KCgO
    129:129:java.lang.Double getStep() -> fLBr
    134:135:void setStep(java.lang.Double) -> lnYk
surge.util.ReflectionUtils -> org.cyberpwn.react.ebLg:
    35:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> tuqG
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> tuqG
    156:156:java.lang.Object instantiateObject(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> tuqG
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> tuqG
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> tuqG
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> tuqG
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> tuqG
    359:359:java.lang.reflect.Field getField(java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> tuqG
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> tuqG
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> tuqG
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> tuqG
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> tuqG
    508:509:void setValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> tuqG
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> tuqG
surge.util.ReflectionUtils$DataType -> org.cyberpwn.react.ebLg$tuqG:
    surge.util.ReflectionUtils$DataType BYTE -> LtjH
    surge.util.ReflectionUtils$DataType SHORT -> DvCt
    surge.util.ReflectionUtils$DataType INTEGER -> UoDU
    surge.util.ReflectionUtils$DataType LONG -> bItV
    surge.util.ReflectionUtils$DataType CHARACTER -> FrxQ
    surge.util.ReflectionUtils$DataType FLOAT -> hdwo
    surge.util.ReflectionUtils$DataType DOUBLE -> qWBX
    surge.util.ReflectionUtils$DataType BOOLEAN -> Vqej
    java.util.Map CLASS_MAP -> lWsB
    java.lang.Class primitive -> Vhtc
    java.lang.Class reference -> dHKG
    surge.util.ReflectionUtils$DataType[] $VALUES -> QkHW
    648:648:surge.util.ReflectionUtils$DataType[] values() -> values
    648:648:surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
    682:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> sbiI
    704:704:java.lang.Class getReference() -> NMmf
    716:716:surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> GQND
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> LhmV
    741:742:java.lang.Class getReference(java.lang.Class) -> tCLt
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> tuqG
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> GQND
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> GQND
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> LhmV
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> tuqG
    648:671:void <clinit>() -> <clinit>
surge.util.ReflectionUtils$PackageType -> org.cyberpwn.react.ebLg$GQND:
    surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> MgLf
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> Bwne
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> oGiW
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> nEFu
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> RSxU
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> cMYC
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> yUfm
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> UwTg
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> JfSu
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> Odcs
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> kTrY
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> ExiX
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> MgOV
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> lyxe
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> WuMP
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> gIGJ
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> iOMc
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> laGo
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> WSKG
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> QQYP
    java.lang.String path -> path
    surge.util.ReflectionUtils$PackageType[] $VALUES -> SiBA
    547:547:surge.util.ReflectionUtils$PackageType[] values() -> values
    547:547:surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
    579:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    547:568:void <clinit>() -> <clinit>
surge.util.Refreshable -> org.cyberpwn.react.Rsfu:
    void refresh() -> refresh
surge.util.SQLOperation -> org.cyberpwn.react.Svjf:
    surge.util.SQLOperation LOAD -> jQnl
    surge.util.SQLOperation SAVE -> eSbL
    surge.util.SQLOperation[] $VALUES -> HycJ
    3:3:surge.util.SQLOperation[] values() -> values
    3:3:surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:5:void <clinit>() -> <clinit>
surge.util.ServerState -> org.cyberpwn.react.FhTk:
    surge.util.ServerState START -> osBH
    surge.util.ServerState ENABLE -> kTqX
    surge.util.ServerState DISABLE -> MxOd
    surge.util.ServerState STOP -> rYfP
    surge.util.ServerState RUNNING -> kvtd
    surge.util.ServerState[] $VALUES -> WcjA
    3:3:surge.util.ServerState[] values() -> values
    3:3:surge.util.ServerState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:37:void <clinit>() -> <clinit>
surge.util.Shape -> org.cyberpwn.react.uykS:
    org.bukkit.Location location -> mQdv
    org.bukkit.util.Vector offset -> GCYl
    org.bukkit.util.Vector size -> JfVG
    28:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> Cweb
    90:94:org.bukkit.Location randomLocation() -> XJjM
    104:104:org.bukkit.Location randomSurface() -> lDbX
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> Cxbi
    129:129:org.bukkit.util.Vector getSize() -> fuuT
surge.util.SnowLevel -> org.cyberpwn.react.RYth:
    byte level -> XxOh
    19:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> fvUs
    51:52:void setLevel(byte) -> xGHw
surge.util.SuperCaller -> org.cyberpwn.react.YUxS:
    void run() -> run
surge.util.T -> org.cyberpwn.react.tUDy:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> GQND
    32:35:void stop() -> stop
surge.util.TXT -> org.cyberpwn.react.GACJ:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> dVAX
    67:67:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> tuqG
    85:85:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> tuqG
    99:99:java.lang.String line(surge.util.C,int) -> tuqG
    113:113:java.lang.String underline(surge.util.C,int) -> GQND
    135:140:java.lang.String getLine(surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> tuqG
surge.util.Tag -> org.cyberpwn.react.DalS:
    java.lang.String value() -> value
surge.util.Timer -> org.cyberpwn.react.mOpB:
    long tns -> Faxm
    long cns -> Exhj
    20:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> SwPe
surge.util.VectorMath -> org.cyberpwn.react.kIjB:
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(surge.util.Axis,org.bukkit.util.Vector,double) -> tuqG
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> tuqG
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> GQND
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> LhmV
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> GQND
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> GQND
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> LhmV
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> tCLt
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> KCgO
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> lnYk
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> dVAX
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> Btag
    111:111:double round(double,int) -> KCgO
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> tuqG
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> tuqG
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> tuqG
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> tCLt
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> KCgO
    268:268:org.bukkit.util.Vector toVector(float,float) -> tuqG
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> tuqG
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> tuqG
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> fuYa
    337:340:double getSpeed(org.bukkit.util.Vector) -> xGHw
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> tuqG
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> uxsn
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> tuqG
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> GQND
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> LhmV
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> tCLt
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> mymY
surge.util.VectorMath$1 -> org.cyberpwn.react.kIjB$1:
    org.bukkit.util.Vector val$vector -> YYPO
    355:355:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> rokF
    355:355:java.lang.Object onAdapt(java.lang.Object) -> dVAX
surge.util.VectorMath$2 -> org.cyberpwn.react.kIjB$2:
    int[] $SwitchMap$surge$util$Axis -> FYCx
    int[] $SwitchMap$org$bukkit$block$BlockFace -> OCBA
    21:152:void <clinit>() -> <clinit>
surge.util.W -> org.cyberpwn.react.FyTl:
    31:31:void <init>() -> <init>
    42:50:boolean visible(org.bukkit.block.Block) -> xGHw
    63:66:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> tuqG
    77:88:org.bukkit.entity.Entity getEntity(int) -> GaoV
    103:116:int count(org.bukkit.entity.Player,surge.util.MaterialBlock) -> tuqG
    133:133:boolean has(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> tuqG
    145:145:int getChunkX(org.bukkit.block.Block) -> uxsn
    157:157:int getChunkY(org.bukkit.block.Block) -> mymY
    170:171:void dropXp(org.bukkit.Location,int) -> GQND
    182:182:int getChunkZ(org.bukkit.block.Block) -> rokF
    198:205:void take(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> GQND
    221:229:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> tuqG
    234:241:react.glang.GList news(org.bukkit.Location) -> iBlU
    258:266:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> tuqG
    278:278:react.glang.GList getBlocks(org.bukkit.Chunk) -> UcHV
    290:290:org.bukkit.World getSyncWorld(org.bukkit.World) -> iCMY
    302:302:org.bukkit.World toSync(org.bukkit.World) -> xXJY
    314:314:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> UbgR
    326:326:org.bukkit.Location toSync(org.bukkit.Location) -> pYCa
    338:338:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> OXdl
    354:421:surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> cIor
    435:447:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> tuqG
    462:463:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> tuqG
    480:481:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> tuqG
    495:496:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> tuqG
    513:514:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> tuqG
    527:528:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> tuqG
    543:544:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> tuqG
    560:570:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> tuqG
    582:589:react.glang.GList chunkFaces(org.bukkit.Chunk) -> rUwW
    601:610:react.glang.GList blockFaces(org.bukkit.block.Block) -> Cweb
    622:636:org.bukkit.Location simulateFall(org.bukkit.Location) -> tupT
    650:665:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> LhmV
    679:691:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> tuqG
    713:745:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> tuqG
    763:770:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> tuqG
    784:784:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> tuqG
surge.util.W$1 -> org.cyberpwn.react.FyTl$1:
    java.lang.Double val$doff -> MnuC
    org.bukkit.entity.Entity val$e -> oYNO
    org.bukkit.entity.Entity[] val$result -> noTO
    727:727:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    731:742:void onTrace(org.bukkit.Location) -> uxsn
surge.util.Worlds -> org.cyberpwn.react.hjsk:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> eaqE
    33:33:boolean hasWorld(java.lang.String) -> dwfy
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
surge.util.package-info -> org.cyberpwn.react.awaR:

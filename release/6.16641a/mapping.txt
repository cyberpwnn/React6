react.Config -> KUIb:
    react.glang.GMap worldConfigs -> KUIb
    java.lang.String A_COMMANDOVERRIDE_TPS -> kACa
    java.lang.String A_REACT_REMOTE_PORT -> aKvW
    java.lang.String A_REACT_REMOTE_ENABLED -> Kvke
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> NxFI
    java.lang.String A_POOL_MAXTHREADS -> salV
    java.lang.String A_POOL_SYNC_NANOS -> VKvy
    java.lang.String A_FASTLEAF_ENABLED -> LFja
    java.lang.String A_FASTLEAF_ONDECAY -> qBSh
    java.lang.String A_FASTLEAF_INSTANT -> wKuE
    java.lang.String A_FASTLEAF_DECAYPERIOD -> RPlc
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> sGxg
    java.lang.String A_ENTITYSTACK_ENABLED -> kbdq
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> KTiT
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> HCPP
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> CVAn
    java.lang.String A_GLASS_SHOW_BLOCKS -> fdVc
    java.lang.String A_GLASS_SHOW_PARTICLES -> yJJw
    java.lang.String A_ALLOW_CULL -> VUGv
    java.lang.String A_ALLOW_PURGE -> STON
    java.lang.String A_ALLOW_STACKING -> DXdX
    java.lang.String A_CULL_RULES -> nIji
    java.lang.String A_RAI_TPS_HIGH_TICK -> qlfi
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> ejDb
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> SSnV
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> PcwY
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> sQIo
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> DOrx
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> SePs
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> CMQp
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> pjCl
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> jpbe
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> dwbd
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> hrlm
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> QEYC
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> vseT
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> FpNA
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> jyTT
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> PtyM
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> tdme
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> qJgC
    java.lang.String A_RAI_FLUID_TIME_CEIL -> Kekr
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> XlSM
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> idqW
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> qJep
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> wwLS
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> SeTW
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> GrrW
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> wvjp
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> LWmy
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> nlQW
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> YDbJ
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> STRl
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> lekA
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> qBVO
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> WFjf
    java.lang.String A_USE_WORLD_CONFIGS -> ssPE
    java.lang.String A_LANGUAGE -> rMiD
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> BSCK
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> BIpa
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> tnBY
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> aejJ
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> ofbh
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> kQeY
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> pXct
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> TyWk
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> YLqV
    java.lang.String A_RAI_ENTITY_PROPIGATE -> rVXx
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> hrnd
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> bhnC
    boolean COMMANDOVERRIDES_TPS -> xWiy
    int REACT_REMOTE_PORT -> hsOl
    boolean REACT_REMOTE_ENABLED -> pPSa
    int ENTITY_STACK_MAX_COUNT -> lfIw
    int POOL_MAXTHREADS -> kbfW
    long POOL_SYNC_NANOS -> wDFe
    boolean FASTLEAF_ENABLED -> eGbt
    boolean FASTLEAF_ONDECAY -> pids
    boolean FASTLEAF_INSTANT -> AXOX
    int FASTLEAF_DECAYPERIOD -> BRaR
    boolean COMMANDOVERRIDES_MEMORY -> uqHb
    boolean ENTITYSTACK_ENABLED -> STSy
    int ENTITYSTACK_MINIMUM_GROUP -> XJRH
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> QNMu
    int ENTITYSTACK_MAXIMUM_HEALTH -> Bktg
    boolean GLASS_SHOW_BLOCKS -> XuEu
    boolean GLASS_SHOW_PARTICLES -> SnGO
    react.glang.GList ALLOW_CULL -> FpQk
    react.glang.GList ALLOW_PURGE -> iuvA
    react.glang.GList ALLOW_STACKING -> ArCk
    react.glang.GList CULL_RULES -> UbkL
    double RAI_TPS_HIGH_TICK -> oDcG
    long RAI_REDSTONE_TIME_FLOOR -> TEuP
    long RAI_REDSTONE_TIME_CEIL -> tCRA
    long RAI_REDSTONE_TIME_MUDDING -> Aqbe
    double RAI_REDSTONE_TIME_FUNCTION -> aeli
    double RAI_REDSTONE_TIME_OVERBLEED -> CVGD
    int RAI_REDSTONE_TIME_RADIUS -> MRbr
    int RAI_REDSTONE_TIME_PROPIGATION -> BlTs
    long RAI_HOPPER_TIME_FLOOR -> Oiji
    long RAI_HOPPER_TIME_CEIL -> lvlt
    long RAI_HOPPER_TIME_MUDDING -> jpgU
    double RAI_HOPPER_TIME_FUNCTION -> dEBi
    double RAI_HOPPER_TIME_OVERBLEED -> NDcY
    int RAI_HOPPER_TIME_RADIUS -> miOm
    int RAI_HOPPER_TIME_PROPIGATION -> uWUR
    int RAI_ENTITY_CHUNK_MULTIPLIER -> TphY
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> rDyf
    int RAI_ENTITY_CHUNK_RADIUS -> Lqad
    long RAI_FLUID_TIME_FLOOR -> BBCV
    long RAI_FLUID_TIME_CEIL -> HKcO
    long RAI_FLUID_TIME_MUDDING -> WqaM
    double RAI_FLUID_TIME_FUNCTION -> DHGr
    double RAI_FLUID_TIME_OVERBLEED -> WXOj
    int RAI_FLUID_TIME_RADIUS -> Yfew
    int RAI_FLUID_TIME_PROPIGATION -> UtMK
    double SMEAR_TICK_ENTITIES_MAX_TICK -> mypO
    double SMEAR_TICK_TILES_MAX_TICK -> eqxb
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> KfQW
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> qKLH
    double SMEAR_TICK_ENTITIES_AMOUNT -> WaDE
    double SMEAR_TICK_TILES_AMOUNT -> HLGE
    boolean SMEAR_TICK_ENTITIES_ENABLE -> Wyta
    boolean SMEAR_TICK_TILES_ENABLE -> mhqk
    boolean HOPPER_OVERTICK_ENABLE -> XlWQ
    boolean USE_WORLD_CONFIGS -> NxKc
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> LObI
    long RAI_CHUNK_TIME_CEIL -> KUOo
    long RAI_CHUNK_TIME_MUDDING -> LyuV
    double RAI_CHUNK_TIME_FUNCTION -> AqeI
    double RAI_CHUNK_TIME_OVERBLEED -> teWA
    int RAI_CHUNK_TIME_RADIUS -> kRJd
    int RAI_CHUNK_TIME_PROPIGATION -> qmMu
    boolean RAI_CHUNK_TIME_PROPIGATE -> teUe
    boolean RAI_FLUID_TIME_PROPIGATE -> dUfn
    boolean RAI_ENTITY_PROPIGATE -> aTnR
    boolean RAI_HOPPER_TIME_PROPIGATE -> pPYA
    boolean RAI_REDSTONE_TIME_PROPIGATE -> cRcB
    boolean hrld -> BBEb
    boolean rns -> rooh
    boolean rrl -> OYJa
    39:644:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    649:666:void doTrack(org.bukkit.plugin.Plugin) -> KUIb
    671:693:void onRead(org.bukkit.plugin.Plugin) -> kACa
    697:727:void read(java.io.File,boolean) -> KUIb
    731:748:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> KUIb
    753:761:void closeWorldConfig(org.bukkit.World) -> kACa
    766:879:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> KUIb
    884:921:react.surge.cluster.DataCluster defaultConfig(boolean) -> KUIb
    926:1005:react.glang.GList getDefaultEntitiesForStacking() -> KUIb
    1010:1085:react.glang.GList getDefaultEntitiesForCulling() -> kACa
    1090:1127:react.glang.GList getDefaultEntitiesForRemoval() -> aKvW
    1132:1161:react.glang.GList getDefaultCullRules() -> Kvke
react.Config$1 -> KUIb$1:
    java.io.File val$fConfig -> OikR
    java.io.File val$fConfigExperimental -> Smfn
    org.bukkit.plugin.Plugin val$main -> NEEp
    1:652:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    657:661:void run() -> run
react.Config$2 -> KUIb$2:
    react.api.WorldConfig val$wc -> tvWT
    org.bukkit.World val$w -> qJjK
    1:738:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    743:744:void run() -> run
react.Gate -> kACa:
    react.glang.GMap defaultSettings -> gxbP
    react.glang.GSet refresh -> Foqv
    react.glang.GSet destroy -> FMoV
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> YgHu
    42:44:void <clinit>() -> <clinit>
    40:40:void <init>() -> <init>
    48:138:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> KUIb
    144:175:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> KUIb
    180:180:int getChunkCountForView() -> NxFI
    185:185:int getMaxChunksForView() -> salV
    190:190:boolean hasFawe() -> VKvy
    195:216:void tickEntityNextTickListTick(org.bukkit.World) -> aKvW
    220:224:void resetEntityMaxTick(org.bukkit.World) -> Kvke
    228:228:int getEntityTickMax(org.bukkit.World) -> NxFI
    233:233:int getTileTickMax(org.bukkit.World) -> salV
    238:256:void tweakEntityTickMax(org.bukkit.World,int) -> KUIb
    260:277:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> KUIb
    282:286:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> KUIb
    290:302:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> KUIb
    307:311:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> kACa
    315:333:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> KUIb
    337:341:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> VKvy
    346:349:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> KUIb
    354:357:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> kACa
    362:362:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> aKvW
    367:367:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> Kvke
    372:372:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> NxFI
    377:377:boolean isBadForUnloading() -> LFja
    382:382:boolean canUnload(org.bukkit.World,int,int) -> KUIb
    389:405:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    411:422:void unloadChunk(org.bukkit.World,int,int) -> kACa
    426:442:void removeEntity(org.bukkit.entity.Entity) -> KUIb
    446:462:void purgeEntity(org.bukkit.entity.Entity) -> kACa
    466:482:void cullEntity(org.bukkit.entity.Entity) -> aKvW
    487:504:void updateBlock(org.bukkit.block.Block) -> KUIb
    508:512:java.lang.String header(java.lang.String,react.surge.util.C) -> KUIb
    517:517:java.lang.String header(react.surge.util.C) -> KUIb
    523:527:void updateFluid(org.bukkit.block.Block) -> kACa
    531:532:void refresh(org.bukkit.Chunk) -> kACa
    537:556:void refreshChunks() -> qBSh
    560:561:void sendBlockChange(org.bukkit.Location) -> KUIb
    40:40:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> wKuE
react.Gate$1 -> kACa$1:
    react.api.SelectorPosition val$sel -> cAaV
    react.glang.Callback val$prog -> brFd
    react.glang.Callback val$cb -> TEyO
    1:48:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    53:136:void run() -> run
react.Gate$1$1 -> kACa$1$1:
    react.Gate$1 this$1 -> loBr
    java.lang.Object val$o -> MdHx
    java.lang.reflect.Constructor val$vectorConstruct -> gyEf
    java.lang.reflect.Constructor val$cuboidConstruct -> AGSg
    java.lang.reflect.Method val$faweFixMethod -> biTw
    java.lang.Integer[] val$total -> APDp
    java.lang.Integer[] val$sof -> ckvu
    react.glang.Callback val$prog -> brFd
    java.lang.Integer val$tot -> QyFj
    1:80:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    87:105:void run() -> run
react.Gate$1$2 -> kACa$1$2:
    react.Gate$1 this$1 -> loBr
    react.glang.Callback val$prog -> brFd
    react.glang.Callback val$cb -> TEyO
    java.lang.Integer[] val$total -> APDp
    1:109:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    116:124:void run() -> run
react.Info -> aKvW:
    java.lang.String CORE_REACT_DOT -> rMpS
    java.lang.String CORE_NAME -> kAKr
    java.lang.String CORE_CACHE -> KDQF
    java.lang.String WORLD_CONFIGS -> RrxA
    java.lang.String CORE_DOTYML -> BAeV
    java.lang.String COMMAND_REACT -> maCo
    java.lang.String COMMAND_RAI -> aeqf
    java.lang.String COMMAND_ACT_DESCRIPTION -> qmPU
    java.lang.String COMMAND_ACT -> TqNb
    java.lang.String COMMAND_ACT_ALIAS_1 -> cthp
    java.lang.String COMMAND_ACT_ALIAS_2 -> bGRg
    java.lang.String COMMAND_ACT_USAGE -> VvtE
    java.lang.String COMMAND_HELP_DESCRIPTION -> rpSd
    java.lang.String COMMAND_HELP -> Vvse
    java.lang.String COMMAND_HELP_ALIAS_1 -> NflR
    java.lang.String COMMAND_HELP_ALIAS_2 -> Vvsf
    java.lang.String COMMAND_HELP_USAGE -> YDgq
    java.lang.String COMMAND_STATUS_DESCRIPTION -> iLGQ
    java.lang.String COMMAND_STATUS -> quaG
    java.lang.String COMMAND_STATUS_ALIAS_1 -> TOJU
    java.lang.String COMMAND_STATUS_ALIAS_2 -> iCTl
    java.lang.String COMMAND_STATUS_USAGE -> SLGS
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> Fgcd
    java.lang.String COMMAND_CPUSCORE -> ncfH
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> bFos
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> YEHH
    java.lang.String COMMAND_CPUSCORE_USAGE -> KwSk
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> Xkvc
    java.lang.String COMMAND_RELOAD -> Btjm
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> oEFh
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> qKMR
    java.lang.String COMMAND_RELOAD_USAGE -> SCUp
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> JQmU
    java.lang.String COMMAND_MONITOR -> EKOX
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> YxLe
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> BBGS
    java.lang.String COMMAND_MONITOR_USAGE -> cSEp
    java.lang.String COMMAND_VERSION_DESCRIPTION -> roqV
    java.lang.String COMMAND_VERSION -> WFqa
    java.lang.String COMMAND_VERSION_ALIAS_1 -> IEyR
    java.lang.String COMMAND_VERSION_ALIAS_2 -> nkug
    java.lang.String COMMAND_VERSION_USAGE -> Lyvb
    java.lang.String COMMAND_MAP_DESCRIPTION -> sjdW
    java.lang.String COMMAND_MAP -> VoEt
    java.lang.String COMMAND_MAP_ALIAS_1 -> Lyxp
    java.lang.String COMMAND_MAP_ALIAS_2 -> ryFv
    java.lang.String COMMAND_MAP_USAGE -> vbnv
    java.lang.String COMMAND_GLASS_DESCRIPTION -> Fgfj
    java.lang.String COMMAND_GLASS -> dxNa
    java.lang.String COMMAND_GLASS_ALIAS_1 -> wCoa
    java.lang.String COMMAND_GLASS_ALIAS_2 -> qmRr
    java.lang.String COMMAND_GLASS_USAGE -> BIxF
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> inMB
    java.lang.String COMMAND_CBLAME -> pHMN
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> FVfE
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> MIxQ
    java.lang.String COMMAND_CBLAME_USAGE -> cIvm
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> ylXq
    java.lang.String COMMAND_ACTIONLOG -> GbYs
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> iTYR
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> KMCv
    java.lang.String COMMAND_ACTIONLOG_USAGE -> PvEp
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> tnJq
    java.lang.String COMMAND_CAPABILITIES -> TqQS
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> pina
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> WFst
    java.lang.String COMMAND_CAPABILITIES_USAGE -> klAk
    java.lang.String MSG_PERMISSION -> Diqf
    java.lang.String MSG_MONITORING_STARTED -> ychB
    java.lang.String MSG_MONITORING_STOPPED -> DGoI
    java.lang.String MSG_ACTIONLOGGING_STARTED -> cSHh
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> nlXl
    java.lang.String MSG_GLASS_STARTED -> ctjF
    java.lang.String MSG_GLASS_STOPPED -> CDkd
    org.bukkit.Color COLOR_HOPPER -> Btls
    org.bukkit.Color COLOR_BLOCK_UPDATE -> CVNP
    org.bukkit.Color COLOR_BLOCK_FROMTO -> LiWh
    org.bukkit.Color COLOR_BLOCK_BURN -> MAey
    org.bukkit.Color COLOR_BLOCK_DECAY -> SnLY
    org.bukkit.Color COLOR_BLOCK_FORM -> kbnY
    java.lang.String NAME_TICK -> KMBr
    java.lang.String NAME_MEMORY -> dxNW
    java.lang.String NAME_CHUNKS -> xqeX
    java.lang.String NAME_ENTITIES -> YUkL
    java.lang.String STATE_MONITORING_TAB -> flpp
    java.lang.String STATE_MONITORING_ENABLED -> JAOL
    java.lang.String STATE_MONITORING_HIGH -> LGUU
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> wDNp
    java.lang.String STATE_MAPPING_ENABLED -> wTpA
    java.lang.String STATE_SOUND_PLAYS -> MIwY
    java.lang.String STATE_MONITORING_POSTED -> YwnA
    java.lang.String STATE_MONITORING_LASTTAB -> MSLJ
    java.lang.String STATE_GLASSES_ENABLED -> PBat
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> LOhL
    java.lang.String STATE_PLAYER_HOTBAR -> JcTf
    java.lang.String STATE_PLAYER_SHIFT -> qJpp
    java.lang.String STATE_PLAYER_SCROLL -> afUs
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> TOOj
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> eQAS
    java.lang.String PERM_ACCESS -> fKSJ
    java.lang.String PERM_MONITOR -> hkKK
    java.lang.String PERM_MONITOR_TITLE -> aevK
    java.lang.String PERM_MONITOR_ACTIONLOG -> OsDp
    java.lang.String PERM_MONITOR_MAP -> Oabc
    java.lang.String PERM_MONITOR_ENVIRONMENT -> VTuU
    java.lang.String PERM_MONITOR_GLASSES -> Jbss
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> YgOw
    java.lang.String PERM_ACT -> ECDe
    java.lang.String PERM_RAI -> DQAU
    java.lang.String PERM_RAI_CONTROL -> ccjW
    java.lang.String PERM_RAI_ACCESS -> hbYV
    java.lang.String PERM_RAI_MONITOR -> xhvV
    java.lang.String PERM_RELOAD -> xyxL
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> QyIj
    java.lang.String SAMPLER_REDSTONE_TICK -> uOLk
    java.lang.String SAMPLER_ENTITY_TIME -> sjhk
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> IXAD
    java.lang.String SAMPLER_TILE_TIME_LOCK -> UIaA
    java.lang.String SAMPLER_TILE_TIME -> rFCV
    java.lang.String SAMPLER_TILE_DROPTICK -> oDhy
    java.lang.String SAMPLER_ENTITY_DROPTICK -> cRht
    java.lang.String SAMPLER_REDSTONE_SECOND -> MclH
    java.lang.String SAMPLER_REDSTONE_TIME -> FWHO
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> tTYe
    java.lang.String SAMPLER_HOPPER_TICK -> AGWv
    java.lang.String SAMPLER_HOPPER_SECOND -> xqfr
    java.lang.String SAMPLER_HOPPER_TIME -> QNVT
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> DsDr
    java.lang.String SAMPLER_FLUID_TICK -> bhxE
    java.lang.String SAMPLER_FLUID_SECOND -> QEdk
    java.lang.String SAMPLER_FLUID_TIME -> lMCO
    java.lang.String SAMPLER_TPS -> eQCE
    java.lang.String SAMPLER_TICK -> OHSA
    java.lang.String SAMPLER_TIU -> cclx
    java.lang.String SAMPLER_MEM -> dUng
    java.lang.String SAMPLER_FREEMEM -> IXBy
    java.lang.String SAMPLER_MAXMEM -> gWHm
    java.lang.String SAMPLER_ALLOCMEM -> XSLr
    java.lang.String SAMPLER_MAHS -> qdeo
    java.lang.String SAMPLER_CHK -> FhLW
    java.lang.String SAMPLER_ATASK -> cdNP
    java.lang.String SAMPLER_STASK -> hHig
    java.lang.String SAMPLER_CHK_TIME -> hIKI
    java.lang.String SAMPLER_EXPLOSION_TIME -> TWaf
    java.lang.String SAMPLER_CHKS -> XRmM
    java.lang.String SAMPLER_ENT -> jiCF
    java.lang.String SAMPLER_ENTLIV -> mFvd
    java.lang.String SAMPLER_ENTDROP -> fdgB
    java.lang.String SAMPLER_ENTTILE -> NpCs
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> WOia
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> mOgp
    java.lang.String ACTION_CULL_ENTITIES_NAME -> UQst
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> lCsj
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> QMwv
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> Rjmn
    java.lang.String ACTION_UPDATE_FLUID_NAME -> yclI
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> qJsE
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> AaMl
    java.lang.String ACTION_LOCK_FLUID_STATUS -> ETFX
    java.lang.String ACTION_LOCK_FLUID_NAME -> qTDX
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> qvFw
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> gpYc
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> lTtb
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> bXXk
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> YoaK
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> YxQs
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> qltw
    java.lang.String ACTION_LOCK_HOPPER_NAME -> dfoP
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> woHJ
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> XRkX
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> IqTX
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> WOiL
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> pYQO
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> BdOv
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> dEMe
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> DsFn
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> GILE
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> bhyg
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> ySIs
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> pXtB
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> INrs
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> ankF
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> yAjr
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> jyeq
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> fKVW
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> OHTi
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> wMHN
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> JIfP
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> aTxF
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> oxUD
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> UAUS
    java.lang.String ACTION_FIX_LIGHTING_NAME -> LrOs
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> hjoL
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> mPJi
    java.lang.String ACTION_COLLECT_GARBAGE -> eQEW
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> hkOO
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> imqR
    8:234:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> Kvke:
    java.lang.String BUNDLE_NAME -> bPKw
    java.util.ResourceBundle RESOURCE_BUNDLE -> CUrC
    java.util.ResourceBundle PRIMARY_BUNDLE -> VTxF
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> NxFI:
    react.React instance -> VCvU
    react.controller.SampleController sampleController -> CMcQ
    react.controller.PlayerController playerController -> nBLS
    react.controller.MonitorController monitorController -> LFyj
    react.controller.CommandController commandController -> CVSt
    react.controller.ActionController actionController -> PKWG
    react.controller.FastDecayController fastDecayController -> NNBM
    react.controller.EntityStackController entityStackController -> KCvp
    react.controller.GlassController glassController -> quhJ
    react.controller.EntityCullController entityCullController -> baLg
    react.controller.SpikeController spikeController -> WPKn
    react.controller.SecurityController securityController -> KMJC
    react.controller.RedstoneController redstoneController -> PKVy
    react.controller.HopperController hopperController -> clcH
    react.controller.PhysicsController physicsController -> xPML
    react.controller.TickTimeController tickTimeController -> pGsr
    react.controller.RAIController raiController -> kcYQ
    react.controller.FluidController fluidController -> QxpK
    react.controller.ChunkController chunkController -> XAoR
    react.controller.GraphController graphController -> jygl
    react.controller.ChronophyFluidController fluidChronophyController -> vJGM
    react.controller.EventController eventController -> ydPq
    react.controller.BlockInjectController blockInjectController -> XRqS
    react.controller.SmearTickController smearTickController -> YgUy
    react.controller.FeatureController featureController -> wCvy
    react.controller.HopperOvertickController hopperPlungeController -> RIPT
    react.controller.BenchmarkController benchmarkController -> Knng
    react.controller.LanguageController languageController -> OHWX
    react.controller.RemoteController remoteController -> TNtA
    react.controller.ExplosiveController explosiveController -> CETo
    react.controller.WorldController worldController -> XcqS
    44:44:void <init>() -> <init>
    142:150:void enable() -> enable
    156:156:void disable() -> disable
react.React$1 -> NxFI$1:
    react.React this$0 -> ymAi
    1:142:void <init>(react.React) -> <init>
    147:148:void run() -> run
react.action.ActionCollectGarbage -> salV:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
react.action.ActionCollectGarbage$1 -> salV$1:
    react.action.ActionCollectGarbage this$0 -> PulJ
    react.action.source.IActionSource val$source -> brPH
    1:29:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> KUIb
react.action.ActionCollectGarbage$1$1 -> salV$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> PdjX
    long val$mbnex -> CNEq
    long val$mbmem -> DbHt
    react.action.source.IActionSource val$source -> brPH
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.action.source.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> VKvy:
    long ms -> MdSE
    int lcd -> Btts
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
    27:27:void access$0(react.action.ActionCullEntities,long) -> KUIb
    28:28:int access$1(react.action.ActionCullEntities) -> KUIb
    27:27:long access$2(react.action.ActionCullEntities) -> kACa
react.action.ActionCullEntities$1 -> VKvy$1:
    react.action.ActionCullEntities this$0 -> vcWb
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> VKvy$2:
    react.action.ActionCullEntities this$0 -> vcWb
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> VKvy$3:
    react.action.ActionCullEntities this$0 -> vcWb
    react.glang.FinalInteger val$completed -> eafh
    react.glang.FinalInteger val$total -> fKXN
    react.glang.FinalInteger val$totalCulled -> dNBp
    react.glang.FinalInteger val$totalChunked -> ArRj
    react.action.source.IActionSource val$source -> brPH
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> VKvy$4:
    react.action.ActionCullEntities this$0 -> vcWb
    react.action.source.IActionSource val$source -> brPH
    react.glang.FinalInteger val$totalCulled -> dNBp
    react.glang.FinalInteger val$totalChunked -> ArRj
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> LFja:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
react.action.ActionFixLighting$1 -> LFja$1:
    react.action.ActionFixLighting this$0 -> NESX
    1:28:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> LFja$2:
    react.action.ActionFixLighting this$0 -> NESX
    react.action.source.IActionSource val$source -> brPH
    int val$ch -> GscR
    1:77:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> KUIb
    1:1:void run(java.lang.Object) -> KUIb
react.action.ActionFixLighting$3 -> LFja$3:
    react.action.ActionFixLighting this$0 -> NESX
    1:88:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> KUIb
    1:1:void run(java.lang.Object) -> KUIb
react.action.ActionLockFluid -> qBSh:
    int lcd -> Btts
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
react.action.ActionLockFluid$1 -> qBSh$1:
    react.action.ActionLockFluid this$0 -> SvfA
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> qBSh$2:
    react.action.ActionLockFluid this$0 -> SvfA
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> wKuE:
    int lcd -> Btts
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
react.action.ActionLockHopper$1 -> wKuE$1:
    react.action.ActionLockHopper this$0 -> JQwo
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> wKuE$2:
    react.action.ActionLockHopper this$0 -> JQwo
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> RPlc:
    int lcd -> Btts
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
react.action.ActionLockRedstone$1 -> RPlc$1:
    react.action.ActionLockRedstone this$0 -> jheV
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> RPlc$2:
    react.action.ActionLockRedstone this$0 -> jheV
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> sGxg:
    long ms -> MdSE
    int lcd -> Btts
    boolean fail -> QqBi
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> kACa
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> KUIb
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> KUIb
    26:26:int access$2(react.action.ActionPurgeChunks) -> kACa
    25:25:long access$3(react.action.ActionPurgeChunks) -> aKvW
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> KUIb
react.action.ActionPurgeChunks$1 -> sGxg$1:
    react.action.ActionPurgeChunks this$0 -> funQ
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> sGxg$2:
    react.action.ActionPurgeChunks this$0 -> funQ
    int val$dk -> VoPa
    java.lang.Object val$j -> eQHi
    react.action.source.IActionSource val$source -> brPH
    react.api.ISelector[] val$selectors -> tmtp
    react.glang.FinalInteger val$acompleted -> RbcS
    react.glang.FinalInteger val$completed -> eafh
    react.glang.FinalInteger val$total -> fKXN
    react.glang.FinalInteger val$totalCulled -> dNBp
    react.glang.FinalInteger val$totalChunked -> ArRj
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.action.source.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> KUIb
react.action.ActionPurgeChunks$2$1 -> sGxg$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> wLkF
    react.glang.FinalInteger val$acompleted -> RbcS
    react.glang.FinalInteger val$completed -> eafh
    react.glang.FinalInteger val$total -> fKXN
    react.glang.FinalInteger val$totalCulled -> dNBp
    react.glang.FinalInteger val$totalChunked -> ArRj
    react.action.source.IActionSource val$source -> brPH
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> sGxg$3:
    react.action.ActionPurgeChunks this$0 -> funQ
    react.action.source.IActionSource val$source -> brPH
    react.glang.FinalInteger val$acompleted -> RbcS
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> sGxg$4:
    react.action.ActionPurgeChunks this$0 -> funQ
    org.bukkit.Chunk val$chunk -> gEku
    java.lang.Runnable val$cb -> PCKe
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> kbdq:
    long ms -> MdSE
    int lcd -> Btts
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> kACa
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> KUIb
    30:30:int access$1(react.action.ActionPurgeEntities) -> KUIb
    29:29:long access$2(react.action.ActionPurgeEntities) -> kACa
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> KUIb
react.action.ActionPurgeEntities$1 -> kbdq$1:
    react.action.ActionPurgeEntities this$0 -> WXaD
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> kbdq$2:
    react.action.ActionPurgeEntities this$0 -> WXaD
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> kbdq$3:
    react.action.ActionPurgeEntities this$0 -> WXaD
    react.glang.FinalInteger val$completed -> eafh
    react.glang.FinalInteger val$total -> fKXN
    react.glang.FinalInteger val$totalCulled -> dNBp
    react.glang.FinalInteger val$totalChunked -> ArRj
    react.action.source.IActionSource val$source -> brPH
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> kbdq$4:
    react.action.ActionPurgeEntities this$0 -> WXaD
    react.action.source.IActionSource val$source -> brPH
    react.glang.FinalInteger val$totalCulled -> dNBp
    react.glang.FinalInteger val$totalChunked -> ArRj
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> kbdq$5:
    react.action.ActionPurgeEntities this$0 -> WXaD
    org.bukkit.entity.Entity val$i -> XKBt
    react.glang.FinalInteger val$cu -> wCyg
    int val$k -> kQxn
    org.bukkit.Chunk val$chunk -> gEku
    java.lang.Runnable val$cb -> PCKe
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> KTiT:
    int lcd -> Btts
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
react.action.ActionUnlockFluid$1 -> KTiT$1:
    react.action.ActionUnlockFluid this$0 -> OPiP
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> HCPP:
    int lcd -> Btts
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
react.action.ActionUnlockHopper$1 -> HCPP$1:
    react.action.ActionUnlockHopper this$0 -> tDCN
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> CVAn:
    int lcd -> Btts
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
react.action.ActionUnlockRedstone$1 -> CVAn$1:
    react.action.ActionUnlockRedstone this$0 -> RYsB
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> RPlc
    1:1:java.lang.Object get() -> get
react.action.source.AccessActionSource -> fdVc:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> KUIb
    26:33:void sendResponseSuccess(java.lang.String) -> kACa
    38:45:void sendResponseError(java.lang.String) -> aKvW
    50:57:void sendResponseActing(java.lang.String) -> Kvke
react.action.source.ActionHandle -> yJJw:
    react.action.source.ActionHandle AUTOMATIC -> XKCi
    react.action.source.ActionHandle MANUAL -> scBW
    react.action.source.ActionHandle MUTEX -> WHAA
    react.action.source.ActionHandle[] ENUM$VALUES -> dUtw
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.action.source.ActionHandle[] values() -> values
    1:1:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
react.action.source.ConsoleActionSource -> VUGv:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> KUIb
    18:19:void sendResponseSuccess(java.lang.String) -> kACa
    24:25:void sendResponseError(java.lang.String) -> aKvW
    30:31:void sendResponseActing(java.lang.String) -> Kvke
react.action.source.IActionSource -> STON:
    void sendResponse(java.lang.String) -> KUIb
    void sendResponseSuccess(java.lang.String) -> kACa
    void sendResponseError(java.lang.String) -> aKvW
    void sendResponseActing(java.lang.String) -> Kvke
react.action.source.PlayerActionSource -> DXdX:
    org.bukkit.entity.Player p -> sjrI
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> KUIb
    30:31:void sendResponseSuccess(java.lang.String) -> kACa
    36:37:void sendResponseError(java.lang.String) -> aKvW
    42:43:void sendResponseActing(java.lang.String) -> Kvke
react.action.source.RAIActionSource -> nIji:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> KUIb
    16:17:void sendResponseSuccess(java.lang.String) -> kACa
    22:23:void sendResponseError(java.lang.String) -> aKvW
    28:29:void sendResponseActing(java.lang.String) -> Kvke
react.api.Action -> qlfi:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> sYor
    java.lang.String[] nodes -> pXvx
    react.action.source.ActionHandle handle -> tKqe
    react.api.ActionState state -> vkik
    react.api.ActionTargetType target -> dDra
    react.api.ActionType type -> wTyr
    react.action.source.IActionSource currentSource -> JIhl
    double progress -> HCcK
    react.glang.GMap defaultSelectors -> eQGb
    28:29:void <init>(react.api.ActionType) -> <init>
    31:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> KUIb
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> KUIb
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> sGxg
    94:94:react.api.ActionState getState() -> kbdq
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> NxFI
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> KTiT
    130:130:react.api.ActionType getType() -> HCPP
    136:136:react.glang.GMap getDefaultSelectors() -> CVAn
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> kACa
    189:190:void completeAction() -> fdVc
    195:195:react.action.source.IActionSource getCurrentSource() -> yJJw
    201:201:java.lang.String[] getNodes() -> VUGv
    207:208:void setNodes(java.lang.String[]) -> KUIb
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
react.api.ActionAlreadyRunningException -> ejDb:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> SSnV:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> PcwY:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> sQIo:
    react.api.ActionState IDLE -> vlKT
    react.api.ActionState RUNNING -> KoOt
    react.api.ActionState[] ENUM$VALUES -> Edly
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> DOrx:
    react.api.ActionTargetType POSITIONAL -> TqYg
    react.api.ActionTargetType SYSTEM -> eahN
    react.api.ActionTargetType[] ENUM$VALUES -> CVWv
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> SePs:
    react.api.ActionType FIX_LIGHTING -> AHBK
    react.api.ActionType UNLOCK_FLUID -> pQHA
    react.api.ActionType LOCK_FLUID -> fCIk
    react.api.ActionType UNLOCK_HOPPER -> nRom
    react.api.ActionType LOCK_HOPPER -> DakA
    react.api.ActionType UNLOCK_REDSTONE -> rVkg
    react.api.ActionType LOCK_REDSTONE -> iDAn
    react.api.ActionType CULL_ENTITIES -> eiyK
    react.api.ActionType COLLECT_GARBAGE -> JIjF
    react.api.ActionType PURGE_ENTITIES -> YxXi
    react.api.ActionType PURGE_CHUNKS -> cuUX
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> tKqe
    react.api.ActionTargetType target -> dDra
    react.api.ActionType[] ENUM$VALUES -> cmDm
    6:18:void <clinit>() -> <clinit>
    25:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> STON
    50:50:react.api.ActionTargetType getTarget() -> KTiT
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> CMQp:
    react.api.ActivationRangeType ANIMALS -> ssaj
    react.api.ActivationRangeType MONSTERS -> gVpQ
    react.api.ActivationRangeType MISC -> LaTd
    react.api.ActivationRangeType[] ENUM$VALUES -> FyUb
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> pjCl:
    int value() -> value
react.api.Async -> jpbe:
react.api.CPUBenchmark -> dwbd:
    org.bukkit.command.CommandSender sender -> sender
    int score -> xqrs
    java.lang.Runnable onFinish -> xibp
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> DXdX
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> KUIb
    13:13:int access$1(react.api.CPUBenchmark) -> kACa
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> aKvW
react.api.CPUBenchmark$1 -> dwbd$1:
    react.api.CPUBenchmark this$0 -> bPQm
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> dwbd$2:
    react.api.CPUBenchmark this$0 -> bPQm
    1:77:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> hrlm:
    react.api.CPUResult ULTRA_SLOW -> uWhW
    react.api.CPUResult VERY_SLOW -> axCP
    react.api.CPUResult SLOW -> mqtI
    react.api.CPUResult AVERAGE -> QhTG
    react.api.CPUResult GOOD -> YojX
    react.api.CPUResult FAST -> DPko
    react.api.CPUResult VERY_FAST -> jpys
    react.api.CPUResult ULTRA_FAST -> RkWN
    java.lang.String m -> erlv
    react.api.CPUResult[] ENUM$VALUES -> lLmW
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> KUIb
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> QEYC:
    react.glang.GMap cache -> pbLG
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> kACa
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> aKvW
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> nIji
    54:54:boolean has(java.lang.Object) -> Kvke
react.api.Capability -> vseT:
    react.api.Capability DUAL_WEILD -> vJJc
    react.api.Capability SCOREBOARD -> Uknm
    react.api.Capability SCOREBOARD_ADVANCED -> dUwV
    react.api.Capability HOPPER -> HehM
    react.api.Capability ENTITY_ATTRIBUTES -> bHAC
    react.api.Capability ENTITY_AI -> Aquw
    react.api.Capability ACTION_BAR -> yKAx
    react.api.Capability ENTITY_NAMES -> WjEQ
    react.api.Capability TITLE_BAR -> ebLB
    react.api.Capability CHUNK_RELIGHTING -> MtxI
    react.api.Capability MONITOR_SUBMISSIVENESS -> jiJY
    react.api.Capability ACCELERATED_PING -> ncwS
    react.api.Capability ENTITY_THROTTLING -> RkYE
    react.api.Capability TILE_THROTTLING -> QxvQ
    react.api.Capability PASSENGERS -> SCfy
    react.glang.GList capabilities -> IiOX
    react.surge.util.Protocol version -> NpMs
    react.api.Flavor flavor -> FVsr
    java.lang.String plugin -> ryVJ
    java.lang.String name -> name
    14:48:void <clinit>() -> <clinit>
    55:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> qlfi
    100:100:boolean isFlavorCapable() -> ejDb
    105:105:boolean isVersionCapable() -> SSnV
    110:110:boolean isCapable() -> PcwY
    115:115:react.surge.util.Protocol getVersion() -> sQIo
    120:120:react.api.Flavor getFlavor() -> DOrx
    125:125:java.lang.String getPlugin() -> SePs
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> KUIb
    153:167:void sendNotCapable(react.action.source.IActionSource) -> KUIb
react.api.CapabilityBasis -> FpNA:
    react.api.CapabilityBasis VERSION -> OaoR
    react.api.CapabilityBasis FLAVOR -> ArXU
    react.api.CapabilityBasis PLUGIN -> lgBg
    react.api.CapabilityBasis[] ENUM$VALUES -> MRwi
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.CapabilityBasis[] values() -> values
    1:1:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> jyTT:
    react.api.ChunkIssue ENTITY -> iDGP
    react.api.ChunkIssue HOPPER -> XmJr
    react.api.ChunkIssue REDSTONE -> BljJ
    react.api.ChunkIssue FLUID -> nSVV
    react.api.ChunkIssue PHYSICS -> YpMi
    react.api.ChunkIssue[] ENUM$VALUES -> nSUx
    3:9:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
react.api.Clip -> PtyM:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> tdme:
    org.bukkit.command.CommandSender sender -> sender
    12:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> KUIb
    31:32:void sendResponseSuccess(java.lang.String) -> kACa
    37:38:void sendResponseError(java.lang.String) -> aKvW
    43:44:void sendResponseActing(java.lang.String) -> Kvke
react.api.CullList -> qJgC:
    react.glang.GSet toCull -> ryTv
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> Kvke
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> CMQp
react.api.DTest -> Kekr:
    6:6:void <init>() -> <init>
    11:62:int test() -> pjCl
react.api.EntityFlag -> XlSM:
    react.api.EntityFlag NAMED -> XJgJ
    react.api.EntityFlag TAMED -> gWQt
    react.api.EntityFlag STACKED -> rgql
    react.api.EntityFlag RIDDEN -> woRK
    react.api.EntityFlag LEASHED -> nuYL
    java.lang.String m -> erlv
    react.api.EntityFlag[] ENUM$VALUES -> prnD
    8:14:void <clinit>() -> <clinit>
    18:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> NxFI
    40:70:boolean is(org.bukkit.entity.Entity) -> salV
    76:76:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> idqW:
    react.glang.GSet entityTypes -> iCei
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> jpbe
react.api.EntitySample -> qJep:
    react.glang.GMap counts -> sQdA
    react.glang.GMap sets -> TNyh
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> dwbd
    45:45:react.glang.GList getTypes() -> hrlm
    50:57:int total() -> QEYC
    62:67:int get(org.bukkit.entity.EntityType) -> KUIb
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> kACa
    84:96:void add(org.bukkit.entity.Entity) -> Kvke
react.api.Experimental -> wwLS:
react.api.Flavor -> SeTW:
    react.api.Flavor ANY -> baUS
    react.api.Flavor SAFE_MODE -> Tynd
    react.api.Flavor CRAFT_BUKKIT -> QEpn
    react.api.Flavor BUKKIT -> inXy
    react.api.Flavor SPIGOT -> nBTK
    react.api.Flavor SOGGY_SPIGOT -> XuYs
    react.api.Flavor PAPER_SPIGOT -> Pmdn
    react.api.Flavor TACO_SPIGOT -> uypA
    react.api.Flavor TORCH_SPIGOT -> Wqxk
    react.api.Flavor FORGE_HACK -> pkAW
    react.api.Flavor SPONGE_HACK -> cmLH
    react.api.Flavor[] ENUM$VALUES -> aMSH
    6:18:void <clinit>() -> <clinit>
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> vseT
    74:79:boolean compatableWith(react.api.Flavor) -> KUIb
    84:84:java.lang.String fancyName() -> FpNA
    1:1:react.api.Flavor[] values() -> values
    1:1:react.api.Flavor valueOf(java.lang.String) -> valueOf
react.api.IAction -> GrrW:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> sGxg
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> kACa
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
    react.api.ActionState getState() -> kbdq
    react.api.ActionTargetType getTarget() -> KTiT
    void setNodes(java.lang.String[]) -> KUIb
    java.lang.String[] getNodes() -> VUGv
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> NxFI
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> HCPP
    react.glang.GMap getDefaultSelectors() -> CVAn
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> KUIb
    react.api.ISelector[] biselect(react.api.ISelector[]) -> KUIb
    react.action.source.IActionSource getCurrentSource() -> yJJw
    void completeAction() -> fdVc
react.api.ICache -> wvjp:
    react.glang.GSet get(java.lang.Object) -> kACa
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> aKvW
    void clear() -> clear
    boolean has(java.lang.Object) -> Kvke
    react.glang.GList k() -> nIji
react.api.ICommand -> LWmy:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> jyTT
    java.lang.String[] getPermissions() -> PtyM
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> salV
    react.api.SideGate getSideGate() -> tdme
    void registerParameterDescription(java.lang.String,java.lang.String) -> KUIb
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
react.api.IRecord -> nlQW:
    java.lang.String getRecordType() -> qJgC
    long getRecordTime() -> Kekr
    react.json.JSONObject toJSON() -> XlSM
    java.lang.Object getRecordObject() -> idqW
    void fromJSON(react.json.JSONObject) -> KUIb
react.api.IRecordBook -> YDbJ:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> KUIb
    long getOldestRecordTime() -> qJep
    void addRecord(react.api.IRecord) -> KUIb
    long getLatestRecordTime() -> wwLS
    int countRecords(long,long) -> KUIb
    react.glang.GMap getRecords(long,long) -> kACa
    int purgeRecordsBefore(long) -> kACa
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> STRl:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> SeTW
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> GrrW
    react.surge.util.C getAltColor() -> wvjp
    void setColor(react.surge.util.C,react.surge.util.C) -> KUIb
    int getInterval() -> getInterval
    void setInterval(int) -> kACa
    void sample() -> LWmy
    java.lang.String get() -> get
    void construct() -> nlQW
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> lekA:
    react.api.SelectionMode getMode() -> YDbJ
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> NxFI
    react.glang.GSet getList() -> STRl
    react.glang.GSet getPossibilities() -> lekA
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> salV
    java.lang.String getName() -> getName
react.api.Injection -> qBVO:
    react.api.InjectionMethod value() -> qBVO
react.api.InjectionMethod -> WFjf:
    react.api.InjectionMethod SWAP -> jFkn
    react.api.InjectionMethod SUBSTRATE -> OQPX
    react.api.InjectionMethod RELOAD -> AHGN
    react.api.InjectionMethod[] ENUM$VALUES -> OsSd
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> ssPE:
    java.lang.String value() -> value
react.api.MSampler -> rMiD:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> WFjf
react.api.MonitorHeading -> BSCK:
    react.api.ISampler head -> tThl
    react.glang.GList children -> WjJR
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> KUIb
    27:27:react.api.ISampler getHead() -> ssPE
    32:33:void setHead(react.api.ISampler) -> kACa
    37:37:react.glang.GList getChildren() -> rMiD
    42:42:java.lang.String getHeadText() -> BSCK
    47:60:java.lang.String getChildText() -> BIpa
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> KUIb
react.api.NoiseGenerator -> BIpa:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> tnBY:
    react.api.NoiseGenerator[] octaves -> HDKb
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> tnBY
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> aejJ:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> AXfy
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> aejJ
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> ofbh:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> KUIb
react.api.Permissable -> kQeY:
    react.api.Permissable ACCESS -> hAFT
    react.api.Permissable MONITOR -> Knvm
    react.api.Permissable MONITOR_TITLE -> Cxag
    react.api.Permissable MONITOR_ACTIONLOG -> ECRo
    react.api.Permissable MONITOR_MAP -> KgHD
    react.api.Permissable MONITOR_ENVIRONMENT -> rODU
    react.api.Permissable MONITOR_GLASSES -> yRwD
    react.api.Permissable MONITOR_CHUNK_BLAME -> tKxL
    react.api.Permissable RAI_MONITOR -> cJhR
    react.api.Permissable RAI_CONTROL -> uynr
    react.api.Permissable RAI_ACCESS -> LPWo
    react.api.Permissable RAI -> ydYG
    react.api.Permissable ACT -> lxEl
    react.api.Permissable RELOAD -> mjFy
    java.lang.String node -> Jcao
    react.api.Permissable[] ENUM$VALUES -> bifj
    7:22:void <clinit>() -> <clinit>
    26:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> KUIb
    46:46:java.lang.String getNode() -> ofbh
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PluginSelfDeleter -> pXct:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> PLAh
    java.lang.Runnable r -> LaWe
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> KUIb
react.api.ReactCommand -> TyWk:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> UImy
    java.lang.String usage -> gqFt
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> Qgum
    react.api.SideGate sideGate -> Hekx
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> salV
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> KUIb
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> jyTT
    47:47:java.lang.String[] getPermissions() -> PtyM
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> tdme
react.api.ReactException -> YLqV:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> rVXx:
    react.glang.GMap keystore -> Bllx
    boolean monitoring -> monitoring
    boolean highMonitor -> RsjV
    boolean actionlogging -> CooV
    boolean glasses -> bGcw
    boolean mapping -> Pdrn
    int monitorSelection -> bOuC
    int plays -> Qpfx
    boolean monitorPosted -> rgsk
    int monitorLastSelection -> vkoi
    int switchNotification -> ebOg
    int hotbarSlot -> ELBx
    boolean shift -> FEtS
    int scroll -> Aiia
    double lastHeight -> jXPV
    boolean heightMovement -> JuHA
    org.bukkit.entity.Player p -> sjrI
    24:40:void <clinit>() -> <clinit>
    43:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> kQeY
    128:128:boolean isMapping() -> pXct
    133:133:org.bukkit.entity.Player getP() -> TyWk
    138:140:void setMonitoring(boolean) -> kACa
    144:146:void setMapping(boolean) -> aKvW
    150:150:int getMonitorSelection() -> YLqV
    155:157:void setMonitorSelection(int) -> aKvW
    161:161:int getHotbarSlot() -> rVXx
    166:168:void setHotbarSlot(int) -> Kvke
    172:172:boolean isShifting() -> hrnd
    177:179:void setShifting(boolean) -> Kvke
    183:183:boolean isShift() -> bhnC
    188:190:void setShift(boolean) -> NxFI
    194:194:int getScroll() -> xWiy
    199:201:void setScroll(int) -> NxFI
    205:205:int getMonitorLastSelection() -> hsOl
    210:212:void setMonitorLastSelection(int) -> salV
    216:217:void setP(org.bukkit.entity.Player) -> kACa
    221:221:double getLastHeight() -> pPSa
    226:228:void setLastHeight(double) -> KUIb
    232:232:boolean isHeightMovement() -> lfIw
    237:239:void setHeightMovement(boolean) -> salV
    243:243:int getSwitchNotification() -> kbfW
    248:250:void setSwitchNotification(int) -> VKvy
    254:254:boolean getMonitorPosted() -> wDFe
    259:261:void setMonitorPosted(boolean) -> VKvy
    265:265:int getPlays() -> eGbt
    270:272:void setPlays(int) -> LFja
    276:276:boolean isGlasses() -> pids
    281:283:void setGlasses(boolean) -> LFja
    287:287:boolean isActionlogging() -> AXOX
    292:294:void setActionlogging(boolean) -> qBSh
react.api.Record -> hrnd:
    java.lang.String recordType -> Wiix
    long recordTime -> hQhx
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> qJgC
    32:32:long getRecordTime() -> Kekr
    38:38:java.lang.Object getRecordObject() -> idqW
    react.json.JSONObject toJSON() -> XlSM
    void fromJSON(react.json.JSONObject) -> KUIb
react.api.RecordBook -> bhnC:
    java.io.File recordFile -> yKIm
    react.json.JSONObject js -> wnub
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> KUIb
    79:87:react.api.IRecord getRecord(long) -> KUIb
    react.api.IRecord createDummyRecord(long,java.lang.String) -> KUIb
    95:107:long getOldestRecordTime() -> qJep
    113:125:long getLatestRecordTime() -> wwLS
    130:130:boolean within(long,long,long) -> KUIb
    136:144:int countRecords(long,long) -> KUIb
    150:162:react.glang.GMap getRecords(long,long) -> kACa
    168:181:int purgeRecordsBefore(long) -> kACa
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> xWiy:
react.api.SampledChunk -> hsOl:
    org.bukkit.Chunk c -> vcbX
    react.glang.GMap counts -> sQdA
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> BRaR
    26:38:void hit(react.api.ChunkIssue,int) -> KUIb
    42:42:org.bukkit.Chunk getC() -> uqHb
    47:47:react.glang.GMap getCounts() -> STSy
react.api.SampledType -> pPSa:
    react.api.SampledType ENTITY_TIME_LOCK -> Rbkm
    react.api.SampledType TILE_TIME_LOCK -> yJiF
    react.api.SampledType ENTITY_TIME -> wEBu
    react.api.SampledType TILE_TIME -> ELEu
    react.api.SampledType ENTITY_DROPTICK -> NMnb
    react.api.SampledType TILE_DROPTICK -> DYdG
    react.api.SampledType REDSTONE_TICK_USAGE -> RRKg
    react.api.SampledType REDSTONE_TICK -> hHwa
    react.api.SampledType REDSTONE_SECOND -> RcMY
    react.api.SampledType REDSTONE_TIME -> NMnn
    react.api.SampledType HOPPER_TICK_USAGE -> qBqO
    react.api.SampledType HOPPER_TICK -> OjeB
    react.api.SampledType HOPPER_SECOND -> qBpi
    react.api.SampledType HOPPER_TIME -> RRIm
    react.api.SampledType FLUID_TICK_USAGE -> CyBo
    react.api.SampledType FLUID_TICK -> bHFi
    react.api.SampledType FLUID_SECOND -> lLrh
    react.api.SampledType FLUID_TIME -> XllY
    react.api.SampledType TPS -> vtcc
    react.api.SampledType TICK -> LaYq
    react.api.SampledType TIU -> iemK
    react.api.SampledType MEM -> vJPV
    react.api.SampledType FREEMEM -> cJiE
    react.api.SampledType MAXMEM -> mPVr
    react.api.SampledType ALLOCMEM -> klSn
    react.api.SampledType MAHS -> lMTO
    react.api.SampledType CHK_TIME -> WYHm
    react.api.SampledType EXPLOSION_TIME -> qnDl
    react.api.SampledType CHK -> NMnC
    react.api.SampledType ATASK -> VDdS
    react.api.SampledType STASK -> lECN
    react.api.SampledType CHKS -> EdvP
    react.api.SampledType ENT -> xifx
    react.api.SampledType ENTLIV -> QpjF
    react.api.SampledType ENTDROP -> uypT
    react.api.SampledType ENTTILE -> aEFo
    java.lang.String node -> Jcao
    react.api.SampledType[] ENUM$VALUES -> YVaQ
    6:43:void <clinit>() -> <clinit>
    49:49:react.api.ISampler get() -> XJRH
    55:55:java.lang.String toString() -> toString
    58:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> ofbh
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> lfIw:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> JRee
    react.surge.util.C altColor -> rEvb
    int interval -> eHaa
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> GrrW
    49:49:react.surge.util.C getAltColor() -> wvjp
    55:55:int getInterval() -> getInterval
    void sample() -> LWmy
    void construct() -> nlQW
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> KUIb
    107:108:void setInterval(int) -> kACa
react.api.Sector -> kbfW:
    int value() -> value
react.api.SelectionException -> wDFe:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> eGbt:
    react.api.SelectionMode WHITELIST -> hHyY
    react.api.SelectionMode BLACKLIST -> FExi
    react.api.SelectionMode[] ENUM$VALUES -> rhYd
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> pids:
    java.lang.Class objectType -> OHby
    react.api.SelectionMode mode -> BKMl
    react.glang.GSet list -> tUNW
    react.glang.GSet possibilities -> lwiP
    int popoff -> OHam
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> YDbJ
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> NxFI
    43:43:react.glang.GSet getList() -> STRl
    49:49:react.glang.GSet getPossibilities() -> lekA
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> salV
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> VKvy
    98:100:int pop() -> pop
react.api.SelectorEntityType -> AXOX:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> aKvW
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> salV
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> LFja
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> BRaR:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> uqHb:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> aKvW
    29:30:void add(org.bukkit.Chunk,int) -> KUIb
    34:38:void add(org.bukkit.World) -> LFja
    42:46:void addAll() -> QNMu
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> salV
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> LFja
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> STSy:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> salV
    87:87:java.lang.String getName() -> getName
react.api.Side -> XJRH:
    react.api.Side PLAYERS -> sYyg
    react.api.Side CONSOLE -> fCTA
    java.lang.String ss -> HvrH
    react.api.Side[] ENUM$VALUES -> urCd
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> Bktg
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> kACa
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> QNMu:
    react.api.SideGate PLAYERS_ONLY -> aMVM
    react.api.SideGate CONSOLES_ONLY -> JuIQ
    react.api.SideGate ANYTHING -> VfiW
    int[] $SWITCH_TABLE$react$api$SideGate -> BvBo
    react.api.SideGate[] ENUM$VALUES -> PTWM
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> KUIb
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> XuEu
react.api.SimplexNoiseGenerator -> Bktg:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> NNSX
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> SnGO
react.api.SimplexOctaveGenerator -> XuEu:
    double wScale -> LsBA
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> KUIb
react.api.SpecializedTickLimiter -> SnGO:
    double rMaxTime -> mYLv
    long rStartTime -> xHJl
    double rLastTime -> pQTd
    long rMark -> tvsA
    double tMaxTime -> LsBG
    react.gmath.Average atimes -> cKOI
    react.gmath.Average adropped -> tfRX
    int droppedTicks -> kItX
    boolean entityTick -> RsrN
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> FpQk:
    react.glang.GList sources -> bYMB
    react.glang.GList splooge -> TXSr
    react.glang.GSet destroy -> FMoV
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> KUIb
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> kACa
    void clipped(org.bukkit.Location) -> kACa
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> aKvW
    boolean isAllowedSource(org.bukkit.Location) -> Kvke
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> KUIb
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> kACa
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> aKvW
react.api.SploogeCounter$1 -> FpQk$1:
    react.api.SploogeCounter this$0 -> vReH
    java.util.Iterator val$it -> kAci
    org.bukkit.Location val$start -> oxdU
    int val$maxDistance -> aMXj
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> KUIb
react.api.SploogeCounter$1$1 -> FpQk$1$1:
    react.api.SploogeCounter$1 this$1 -> lLuv
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> iuvA:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> ArCk:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> XlSM
    38:49:void fromJSON(react.json.JSONObject) -> KUIb
react.api.StackTraceRecordBook -> UbkL:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> kACa
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> KUIb
react.api.StackedEntity -> oDcG:
    org.bukkit.entity.LivingEntity entity -> qeWc
    int count -> count
    double rmx -> uPBJ
    20:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> KUIb
    46:46:int getAbsoluteMaxCount() -> FpQk
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> kACa
    56:58:void update() -> update
    62:68:void signalSize() -> iuvA
    72:123:void updateHealth() -> ArCk
    127:128:void heal(double) -> kACa
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> UbkL
    142:142:int getEffectiveCount(double) -> aKvW
    147:147:double getEffectiveMaxHealth(int) -> qBSh
    152:152:double getRealMaxHealth() -> oDcG
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> KUIb
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> TEuP:
    react.glang.GList headings -> CMsQ
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> KUIb
    24:24:int getMaxSelection() -> TEuP
    29:37:int left(int) -> wKuE
    42:50:int right(int) -> RPlc
    55:55:react.api.MonitorHeading getHeadFor(int) -> sGxg
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> KUIb
    83:100:java.lang.String getHotbarFor(int,boolean) -> KUIb
react.api.Unused -> tCRA:
react.api.WorldConfig -> Aqbe:
    boolean allowRai -> QpnM
    boolean allowActions -> Pmjl
    boolean allowRelighting -> URgH
    boolean allowTileThrottling -> HndV
    boolean allowEntityThrottling -> MJoQ
    boolean allowFastLeafDecay -> oMnx
    java.util.List assumeNoSideEffectsEntities -> NEbJ
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> qBSh
    48:62:void save(org.bukkit.World) -> wKuE
    66:80:void load(org.bukkit.World) -> RPlc
react.binject.BlockInjector -> aeli:
    react.surge.util.Protocol protocol -> OPuR
    java.lang.Class blocksClass -> wwiu
    12:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> KUIb
    29:56:void inject() -> tCRA
    61:61:react.surge.util.Protocol getVersion() -> sQIo
react.binject.IBlockInjector -> CVGD:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> KUIb
    void add(int,java.lang.String,java.lang.Object) -> KUIb
    java.lang.Object get(java.lang.String) -> get
    void inject() -> tCRA
    react.surge.util.Protocol getVersion() -> sQIo
react.binject.InjectedBlock -> MRbr:
    react.surge.util.Protocol getInjectProtocol() -> Aqbe
    java.lang.String getInjectKey() -> aeli
    java.lang.String getInjectCKey() -> CVGD
    int getInjectId() -> MRbr
react.binject.ReflectionUtil -> BlTs:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> KUIb
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> KUIb
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> KUIb
    41:54:void setAccessible(java.lang.reflect.Field) -> KUIb
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> KUIb
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> KUIb
react.binject.V10.BlockInjector10 -> Oiji:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> VKvy
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> KUIb
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> KUIb
react.binject.V11.BlockInjector11 -> lvlt:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> LFja
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> KUIb
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> KUIb
react.binject.V12.BlockInjector12 -> jpgU:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> qBSh
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> KUIb
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> KUIb
react.binject.V8.BlockInjector8 -> dEBi:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> wKuE
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> KUIb
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> KUIb
react.binject.V9.BlockInjector9 -> NDcY:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> RPlc
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> KUIb
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> KUIb
react.cache.CachedEntity -> miOm:
    java.util.UUID uid -> XJmo
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> NFBc
    double x -> x
    double y -> y
    double z -> z
    double vx -> RAMW
    double vy -> Bltf
    double vz -> XJqK
    double dx -> dNTU
    double dy -> PCYs
    double dz -> fTYp
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> VKvy
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> BlTs
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> Oiji
    120:121:void setVx(double) -> Kvke
    125:125:double getVy() -> lvlt
    130:131:void setVy(double) -> NxFI
    135:135:double getVz() -> jpgU
    140:141:void setVz(double) -> salV
    145:145:double getDx() -> dEBi
    150:151:void setDx(double) -> VKvy
    155:155:double getDy() -> NDcY
    160:161:void setDy(double) -> LFja
    165:165:double getDz() -> miOm
    170:171:void setDz(double) -> qBSh
    175:175:java.util.UUID getUid() -> uWUR
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> uWUR:
    int age -> KwpM
    boolean ageLock -> afmI
    boolean breed -> jGTs
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> VKvy
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> TphY
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> rDyf
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> TphY:
    org.bukkit.DyeColor dye -> xGku
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> VKvy
    30:30:org.bukkit.DyeColor getDye() -> Lqad
    35:36:void setDye(org.bukkit.DyeColor) -> KUIb
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> rDyf:
    react.glang.GList potionEffects -> OjkG
    boolean canPickupItems -> uWtV
    org.bukkit.inventory.ItemStack[] armorContents -> HoHQ
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> LGoN
    double maxHealth -> maxHealth
    int maxAir -> IOgY
    int air -> SMEG
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> VKvy
    63:63:react.glang.GList getPotionEffects() -> BBCV
    68:69:void setPotionEffects(react.glang.GList) -> kACa
    73:73:boolean isCanPickupItems() -> HKcO
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> WqaM
    138:139:void setMaxAir(int) -> kbdq
    143:143:int getAir() -> DHGr
    148:149:void setAir(int) -> KTiT
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> Lqad:
    boolean sheared -> kBGA
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> VKvy
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> BBCV:
    org.bukkit.inventory.ItemStack is -> sQnG
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> VKvy
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> HKcO:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> WqaM:
    react.chronophysics.HopperDirection DOWN -> lUjR
    react.chronophysics.HopperDirection NORTH -> ifTK
    react.chronophysics.HopperDirection SOUTH -> lLxr
    react.chronophysics.HopperDirection EAST -> slAe
    react.chronophysics.HopperDirection WEST -> vRfd
    int direction -> direction
    int[] $SWITCH_TABLE$react$chronophysics$HopperDirection -> SoFU
    react.chronophysics.HopperDirection[] ENUM$VALUES -> xjOR
    6:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> NxFI
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> KUIb
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> kACa
    1:1:react.chronophysics.HopperDirection[] values() -> values
    1:1:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    6:6:int[] $SWITCH_TABLE$react$chronophysics$HopperDirection() -> WXOj
react.chronophysics.HopperWormhole -> DHGr:
    org.bukkit.block.Hopper source -> oxew
    react.glang.GList path -> ekIb
    org.bukkit.block.Hopper destination -> rpmS
    17:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> Yfew
    31:31:react.glang.GList getPath() -> UtMK
    36:36:org.bukkit.block.Hopper getDestination() -> mypO
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> KUIb
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> WXOj:
    org.bukkit.block.Hopper h -> qdyL
    13:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> KUIb
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> eqxb
    62:62:boolean isLockedByRedstone() -> KfQW
react.command.CommandAct -> Yfew:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> KUIb
    186:192:react.text.RTX getBeginningRTX() -> qKLH
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> KUIb
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> kACa
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> aKvW
    331:346:react.glang.GList getSortedCommands() -> WaDE
    351:358:int getPageSize(int) -> HCPP
    363:363:boolean isValidPage(int,int) -> KUIb
    368:377:react.glang.GList getPage(int,int) -> kACa
react.command.CommandActionLog -> UtMK:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
react.command.CommandCPUScore -> mypO:
    15:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
react.command.CommandCapabilities -> eqxb:
    19:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
react.command.CommandChunkBlame -> KfQW:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
react.command.CommandChunkBlame$1 -> KfQW$1:
    react.command.CommandChunkBlame this$0 -> HDSN
    org.bukkit.command.CommandSender val$sender -> BCBg
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> KfQW$1$1:
    react.command.CommandChunkBlame$1 this$1 -> Cxhq
    org.bukkit.command.CommandSender val$sender -> BCBg
    java.lang.String val$i -> RlCb
    react.glang.GMap val$top -> lxMn
    int val$totalx -> wELU
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> qKLH:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
react.command.CommandHelp -> WaDE:
    28:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> KUIb
    81:87:react.text.RTX getBeginningRTX() -> qKLH
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> KUIb
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> kACa
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> aKvW
    208:215:react.glang.GList getSortedCommands() -> WaDE
    220:227:int getPageSize(int) -> HCPP
    232:232:boolean isValidPage(int,int) -> KUIb
    237:246:react.glang.GList getPage(int,int) -> kACa
react.command.CommandHighMonitor -> HLGE:
    16:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
react.command.CommandMap -> Wyta:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
react.command.CommandMonitor -> mhqk:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
react.command.CommandReload -> XlWQ:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
react.command.CommandReload$1 -> XlWQ$1:
    react.command.CommandReload this$0 -> BSeS
    org.bukkit.command.CommandSender val$sender -> BCBg
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> XlWQ$1$1:
    react.command.CommandReload$1 this$1 -> BTFS
    org.bukkit.command.CommandSender val$sender -> BCBg
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> NxKc:
    28:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
    54:63:org.bukkit.inventory.ItemStack makeBook() -> HLGE
    68:94:void addSpikePages(react.glang.GList) -> aKvW
    98:108:void addStatusPages(react.glang.GList) -> Kvke
    112:129:int findSlot(org.bukkit.entity.Player) -> aKvW
react.command.CommandVersion -> LObI:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> KUIb
react.controller.ActionController -> KUOo:
    int kiv -> xrcB
    react.glang.GMap actions -> gybc
    react.glang.GMap pending -> mHPI
    react.glang.GList tasks -> ioHX
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> KUIb
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> kACa
    141:141:react.api.IAction getAction(react.api.ActionType) -> KUIb
    146:147:void registerAction(react.api.IAction) -> KUIb
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> Wyta
    241:248:react.glang.GList getActionNames() -> mhqk
react.controller.BenchmarkController -> LyuV:
    react.api.CPUBenchmark finished -> Sevp
    boolean done -> MSeG
    int score -> xqrs
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    16:16:void access$0(react.controller.BenchmarkController,boolean) -> KUIb
    15:15:void access$1(react.controller.BenchmarkController,react.api.CPUBenchmark) -> KUIb
    15:15:react.api.CPUBenchmark access$2(react.controller.BenchmarkController) -> KUIb
react.controller.BenchmarkController$1 -> LyuV$1:
    react.controller.BenchmarkController this$0 -> tMEE
    1:26:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
    26:26:react.controller.BenchmarkController access$0(react.controller.BenchmarkController$1) -> KUIb
react.controller.BenchmarkController$1$1 -> LyuV$1$1:
    react.controller.BenchmarkController$1 this$1 -> qLKU
    1:31:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
    31:31:react.controller.BenchmarkController$1 access$0(react.controller.BenchmarkController$1$1) -> KUIb
react.controller.BenchmarkController$1$1$1 -> LyuV$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> dVgT
    1:36:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> AqeI:
    react.glang.GMap rangeMapping -> KUoW
    react.binject.IBlockInjector injector -> iLcd
    boolean injected -> skcN
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> XlWQ
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> NxKc
    115:115:react.binject.IBlockInjector getInjector() -> LObI
    120:120:boolean isInjected() -> KUOo
react.controller.ChronophyFluidController -> teWA:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> kRJd:
    boolean firstTickList -> apBI
    long firstTick -> RRSk
    long lastTick -> RkdK
    react.gmath.Average aCSMS -> Blwe
    react.glang.GMap pluginLoads -> nJqI
    react.glang.GMap playerLoads -> Rbrp
    int serverLoads -> bbAh
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> LyuV
    63:73:void tickNextTickList() -> AqeI
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> KUIb
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> KUIb
    171:171:boolean isFirstTickList() -> teWA
    176:176:long getFirstTick() -> kRJd
    181:181:long getLastTick() -> qmMu
    186:186:react.gmath.Average getaCSMS() -> teUe
    191:191:react.glang.GMap getPluginLoads() -> dUfn
    196:196:react.glang.GMap getPlayerLoads() -> aTnR
    201:201:int getServerLoads() -> pPYA
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> KUIb
    29:29:int access$1(react.controller.ChunkController) -> kACa
    29:29:void access$2(react.controller.ChunkController,int) -> KUIb
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> aKvW
react.controller.ChunkController$1 -> kRJd$1:
    react.controller.ChunkController this$0 -> nKQl
    org.bukkit.event.world.ChunkLoadEvent val$e -> pPvn
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> aKvW
    1:1:void run(java.lang.Object) -> KUIb
react.controller.CommandController -> qmMu:
    react.glang.GList commands -> UuMs
    boolean k -> XmVY
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> qBSh
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> wKuE
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> KUIb
    317:317:react.glang.GList getCommands() -> cRcB
    322:323:void setCommands(react.glang.GList) -> NxFI
    327:327:boolean isK() -> BBEb
    332:333:void setK(boolean) -> wKuE
react.controller.EntityCullController -> teUe:
    react.glang.GSet flags -> ePxI
    react.glang.GSet defer -> GAQp
    react.glang.GMap maxs -> iTsS
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> rooh
    172:180:int cull(org.bukkit.Chunk) -> Kvke
    185:295:int partialCull(org.bukkit.Chunk) -> NxFI
react.controller.EntityStackController -> dUfn:
    react.glang.GList stacks -> ELNF
    20:22:void <init>() -> <init>
    27:28:void start() -> start
    33:34:void stop() -> stop
    39:54:void tick() -> tick
    59:112:void stack(react.glang.GList) -> salV
    116:121:boolean isStacked(org.bukkit.entity.LivingEntity) -> aKvW
    126:139:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> Kvke
    145:163:void on(org.bukkit.event.entity.EntityDamageEvent) -> KUIb
    167:182:void merge(react.api.StackedEntity,react.api.StackedEntity) -> KUIb
    186:252:void checkNear(org.bukkit.entity.LivingEntity) -> NxFI
    257:297:void on(org.bukkit.event.entity.EntitySpawnEvent) -> KUIb
react.controller.EntityStackController$1 -> dUfn$1:
    react.controller.EntityStackController this$0 -> neHC
    org.bukkit.event.entity.EntitySpawnEvent val$e -> Evbq
    1:264:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    269:294:void run() -> run
react.controller.EventController -> aTnR:
    react.glang.GMap slots -> iexO
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> KUIb
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> KUIb
react.controller.ExplosiveController -> pPYA:
    boolean firstTickList -> apBI
    long firstTick -> RRSk
    long lastTick -> RkdK
    react.gmath.Average aCSMS -> Blwe
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> LyuV
    50:60:void tickNextTickList() -> AqeI
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> KUIb
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> KUIb
    89:89:boolean isFirstTickList() -> teWA
    94:94:long getFirstTick() -> kRJd
    99:99:long getLastTick() -> qmMu
    104:104:react.gmath.Average getaCSMS() -> teUe
react.controller.FastDecayController -> cRcB:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> oEgG
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> KUIb
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> KUIb
    74:155:void checkBreak(org.bukkit.block.Block) -> aKvW
    159:190:void decay(org.bukkit.block.Block) -> Kvke
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> NxFI
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> OYJa
react.controller.FastDecayController$1 -> cRcB$1:
    react.controller.FastDecayController this$0 -> SeyI
    react.glang.GMap val$locs -> nBdE
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> aKvW
    99:99:boolean isAllowedSource(org.bukkit.Location) -> Kvke
    105:124:void clipped(org.bukkit.Location) -> kACa
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> KUIb
react.controller.FastDecayController$1$1 -> cRcB$1$1:
    react.controller.FastDecayController$1 this$1 -> bGpo
    react.glang.GMap val$locs -> nBdE
    int val$i -> FiEm
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> cRcB$2:
    react.controller.FastDecayController this$0 -> SeyI
    org.bukkit.block.Block val$b -> FGCN
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FeatureController -> BBEb:
    react.feature.INMSBinding trueBinding -> Witf
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> OikR
    85:85:java.lang.String getPackageVersion() -> Smfn
    90:90:boolean hasBinding() -> NEEp
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> KUIb
react.controller.FluidController -> rooh:
    react.glang.GSet ignore -> yJrw
    int flowsPerTick -> ejlh
    int flowsPerSecond -> aobq
    react.gmath.Average aFST -> IFyn
    react.gmath.Average aFSS -> dEgd
    react.gmath.Average aFSMS -> tnhU
    boolean firstTickList -> apBI
    long firstTick -> RRSk
    long lastTick -> RkdK
    react.glang.GSet frozen -> AGqx
    react.glang.GMap queue -> tUVX
    react.glang.GMap freezeTimes -> MeJE
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> salV
    68:76:void checkChunks() -> tvWT
    80:97:void checkChunk(org.bukkit.Chunk) -> VKvy
    101:107:void queue(org.bukkit.block.Block) -> salV
    111:111:boolean isFrozen(org.bukkit.Chunk) -> LFja
    116:117:void freeze(org.bukkit.Chunk) -> qBSh
    121:127:void unfreeze(org.bukkit.Chunk) -> wKuE
    131:138:void freeze(org.bukkit.Chunk,long) -> KUIb
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> LyuV
    172:182:void tickNextTickList() -> AqeI
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> KUIb
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> KUIb
    248:248:react.glang.GSet getIgnore() -> qJjK
    253:253:int getTransfersPerTick() -> gxbP
    258:258:int getTransfersPerSecond() -> Foqv
    263:263:react.gmath.Average getaFST() -> FMoV
    268:268:react.gmath.Average getaFSS() -> YgHu
    273:273:react.gmath.Average getaFSMS() -> cAaV
    278:278:boolean isFirstTickList() -> teWA
    283:283:long getFirstTick() -> kRJd
    288:288:long getLastTick() -> qmMu
    293:293:react.glang.GSet getFrozen() -> brFd
    298:298:react.glang.GMap getQueue() -> TEyO
    303:303:react.glang.GMap getFreezeTimes() -> loBr
react.controller.GlassController -> OYJa:
    react.glang.GMap q -> sRSa
    react.glang.GList g -> WGqq
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> Kvke
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> NxFI
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> salV
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> KUIb
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> KUIb
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> KUIb
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> KUIb
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> KUIb
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> KUIb
    36:36:react.glang.GList access$0(react.controller.GlassController) -> KUIb
react.controller.GlassController$1 -> OYJa$1:
    react.controller.GlassController this$0 -> bsFl
    react.glang.GMap val$cc -> Evcj
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> OYJa$1$1:
    react.controller.GlassController$1 this$1 -> QyfY
    org.bukkit.Location val$i -> aNAG
    org.bukkit.entity.Player val$j -> tDTn
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> OikR:
    react.glang.GMap g -> hRTY
    react.glang.GMap gr -> ySdB
    react.glang.GMap gra -> misH
    37:37:void <init>() -> <init>
    46:79:void start() -> start
    84:90:void stop() -> stop
    95:122:void tick() -> tick
    127:144:void on(org.bukkit.event.player.PlayerJoinEvent) -> KUIb
    148:206:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> KUIb
    211:251:void on(org.bukkit.event.player.PlayerMoveEvent) -> KUIb
    257:257:void on(react.event.ReactScrollEvent) -> KUIb
    261:311:void toggleMapping(org.bukkit.entity.Player) -> VKvy
    315:315:react.glang.GMap getG() -> MdHx
    320:320:react.glang.GMap getGr() -> gyEf
    40:40:react.glang.GMap access$0(react.controller.GraphController) -> KUIb
    39:39:react.glang.GMap access$1(react.controller.GraphController) -> kACa
react.controller.GraphController$1 -> OikR$1:
    react.controller.GraphController this$0 -> bbDL
    1:59:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    64:77:void run() -> run
react.controller.GraphController$2 -> OikR$2:
    react.controller.GraphController this$0 -> bbDL
    1:95:void <init>(react.controller.GraphController) -> <init>
    100:104:void run() -> run
react.controller.GraphController$3 -> OikR$3:
    react.controller.GraphController this$0 -> bbDL
    org.bukkit.event.player.PlayerJoinEvent val$e -> GJDg
    1:127:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    132:142:void run() -> run
react.controller.HopperController -> Smfn:
    react.glang.GSet ignore -> yJrw
    int transfersPerTick -> eIJN
    int transfersPerSecond -> Yoyp
    react.gmath.Average aHST -> uhxv
    react.gmath.Average aHSS -> MSfL
    react.gmath.Average aHSMS -> SUWc
    boolean firstTickList -> apBI
    long firstTick -> RRSk
    long lastTick -> RkdK
    react.glang.GSet frozen -> AGqx
    react.glang.GMap queue -> tUVX
    react.glang.GMap freezeTimes -> MeJE
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> salV
    65:73:void checkChunks() -> tvWT
    77:94:void checkChunk(org.bukkit.Chunk) -> VKvy
    98:104:void queue(org.bukkit.block.Block) -> salV
    108:108:boolean isFrozen(org.bukkit.Chunk) -> LFja
    113:114:void freeze(org.bukkit.Chunk) -> qBSh
    118:124:void unfreeze(org.bukkit.Chunk) -> wKuE
    128:135:void freeze(org.bukkit.Chunk,long) -> KUIb
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> LyuV
    169:179:void tickNextTickList() -> AqeI
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> KUIb
    207:207:react.glang.GSet getIgnore() -> qJjK
    212:212:int getTransfersPerTick() -> gxbP
    217:217:int getTransfersPerSecond() -> Foqv
    222:222:react.gmath.Average getaHST() -> AGSg
    227:227:react.gmath.Average getaHSS() -> biTw
    232:232:react.gmath.Average getaHSMS() -> APDp
    237:237:boolean isFirstTickList() -> teWA
    242:242:long getFirstTick() -> kRJd
    247:247:long getLastTick() -> qmMu
    252:252:react.glang.GSet getFrozen() -> brFd
    257:257:react.glang.GMap getQueue() -> TEyO
    262:262:react.glang.GMap getFreezeTimes() -> loBr
react.controller.HopperOvertickController -> NEEp:
    react.glang.GList possiblePlunge -> FGBL
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> aKvW
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> KUIb
react.controller.LanguageController -> tvWT:
    java.io.File languageFolder -> mXrC
    int oldVersion -> PwBq
    java.io.File dlf -> fKlf
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> ckvu
    160:221:void downloadAll(boolean) -> RPlc
    225:261:void downloadLanguage(java.lang.String) -> sGxg
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> kbdq
    315:315:java.io.File getFileForLanguage(java.lang.String) -> KTiT
    320:332:void writeDefaults() -> QyFj
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> KUIb
    263:263:void access$1(react.controller.LanguageController) -> KUIb
react.controller.LanguageController$1 -> tvWT$1:
    react.controller.LanguageController this$0 -> pjkV
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> tvWT$2:
    react.controller.LanguageController this$0 -> pjkV
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> KUIb
react.controller.LanguageController$2$1 -> tvWT$2$1:
    react.controller.LanguageController$2 this$1 -> QXCP
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> KUIb
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> KUIb
    121:121:void onDownloadStarted(react.gnet.download.Download) -> KUIb
    126:128:void onDownloadFinished(react.gnet.download.Download) -> kACa
    134:134:void onDownloadFailed(react.gnet.download.Download) -> aKvW
react.controller.LanguageController$3 -> tvWT$3:
    react.controller.LanguageController this$0 -> pjkV
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> tvWT$3$1:
    react.controller.LanguageController$3 this$1 -> Tqld
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> tvWT$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> VUom
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> tvWT$4:
    react.controller.LanguageController this$0 -> pjkV
    java.io.File val$dld -> vBJA
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> KUIb
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> KUIb
    245:245:void onDownloadStarted(react.gnet.download.Download) -> KUIb
    250:251:void onDownloadFinished(react.gnet.download.Download) -> kACa
    257:257:void onDownloadFailed(react.gnet.download.Download) -> aKvW
react.controller.MonitorController -> qJjK:
    int maxCooldown -> JSMx
    react.api.TitleMonitor titleMonitor -> Gbut
    react.glang.GMap posts -> CMxq
    react.slate.PhantomSlate sb -> GRUi
    boolean ready -> sRVL
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> rMpS
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> LFja
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> qBSh
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> kAKr
    179:184:float calcVolume(react.api.ReactPlayer) -> KUIb
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> wKuE
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> RPlc
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> sGxg
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> kbdq
    219:223:void startMonitoring(org.bukkit.entity.Player) -> KTiT
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> HCPP
    242:247:void startActionLogging(org.bukkit.entity.Player) -> CVAn
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> fdVc
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> kACa
    279:291:void processPlayer(react.api.ReactPlayer) -> aKvW
    296:296:void handleActionLog(org.bukkit.entity.Player) -> yJJw
    300:324:void handleTriggers(react.api.ReactPlayer) -> Kvke
    328:367:void handleScrolling(react.api.ReactPlayer) -> NxFI
    371:399:void handleShifting(react.api.ReactPlayer) -> salV
    403:425:void handlePosting(react.api.ReactPlayer) -> VKvy
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> KUIb
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> KUIb
    471:501:void tickMonitor(react.api.ReactPlayer) -> LFja
    505:505:react.api.TitleMonitor getTitleMonitor() -> KDQF
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> KUIb
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> KUIb
    539:552:void onTick() -> RrxA
    556:578:void updateActionBoard() -> BAeV
    583:583:java.lang.String getTickName() -> maCo
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> KUIb
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> KUIb
    41:41:void access$2(react.controller.MonitorController,boolean) -> KUIb
    41:41:boolean access$3(react.controller.MonitorController) -> kACa
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> aKvW
react.controller.MonitorController$1 -> qJjK$1:
    react.controller.MonitorController this$0 -> FpwN
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> qJjK$2:
    react.controller.MonitorController this$0 -> FpwN
    1:556:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> gxbP:
    react.glang.GMap samples -> WbGd
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> RPlc
    51:52:void onHopper(org.bukkit.Chunk) -> sGxg
    56:57:void onFluid(org.bukkit.Chunk) -> kbdq
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> KUIb
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> KUIb
    80:91:void onTick() -> RrxA
    96:96:java.lang.String getTickName() -> maCo
    101:101:react.glang.GMap getSamples() -> aeqf
react.controller.PlayerController -> Foqv:
    react.glang.GList players -> ioKy
    react.glang.GSet save -> mbGH
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> VUGv
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> KUIb
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> STON
    113:113:react.glang.GList getPlayers() -> qmPU
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> KUIb
react.controller.PlayerController$1 -> Foqv$1:
    react.controller.PlayerController this$0 -> pILf
    react.glang.GList val$toSave -> bXtc
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> FMoV:
    react.rai.IRAI rai -> skhI
    boolean raiEnabled -> iTxi
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    19:19:react.rai.IRAI access$0(react.controller.RAIController) -> KUIb
react.controller.RAIController$1 -> FMoV$1:
    react.controller.RAIController this$0 -> Bdiy
    1:46:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> YgHu:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> aKvW
react.controller.ReactServerInfo -> cAaV:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> TqNb
    27:27:int dgetGameProtocol() -> cthp
    33:33:java.lang.String dgetGameVersion() -> bGRg
    39:39:java.lang.String dgetReactVersion() -> VvtE
    45:45:int dgetMaxPlayers() -> rpSd
    51:58:react.glang.GList dgetConnectedPlayers() -> Vvse
    64:64:int dgetViewDistance() -> NflR
    70:70:int dgetGamePort() -> Vvsf
    76:76:java.lang.String dgetGameAddress() -> YDgq
    82:89:react.glang.GList dgetRemotePlugins() -> iLGQ
    95:102:react.glang.GList dgetWorlds() -> quaG
    108:108:react.glang.GList dgetActions() -> TOJU
    114:114:react.glang.GList dgetSamplers() -> iCTl
react.controller.RedstoneController -> brFd:
    react.glang.GSet ignore -> yJrw
    react.glang.GSet frozen -> AGqx
    react.glang.GMap queue -> tUVX
    react.glang.GMap freezeTimes -> MeJE
    int redstonePerTick -> hlIE
    int redstonePerSecond -> EwFk
    react.gmath.Average aRST -> NFLF
    react.gmath.Average aRSS -> hQuT
    react.gmath.Average aRSMS -> nlyJ
    boolean firstTickList -> apBI
    long firstTick -> RRSk
    long lastTick -> RkdK
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> salV
    95:101:void tick() -> tick
    105:113:void checkChunks() -> tvWT
    117:134:void checkChunk(org.bukkit.Chunk) -> VKvy
    138:144:void queue(org.bukkit.block.Block) -> salV
    148:148:boolean isFrozen(org.bukkit.Chunk) -> LFja
    153:154:void freeze(org.bukkit.Chunk) -> qBSh
    158:165:void flushTickList() -> LyuV
    169:179:void tickNextTickList() -> AqeI
    183:189:void unfreeze(org.bukkit.Chunk) -> wKuE
    193:200:void freeze(org.bukkit.Chunk,long) -> KUIb
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> KUIb
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> KUIb
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> KUIb
    246:246:react.glang.GSet getIgnore() -> qJjK
    251:251:react.glang.GSet getFrozen() -> brFd
    256:256:react.glang.GMap getQueue() -> TEyO
    261:261:react.glang.GMap getFreezeTimes() -> loBr
    266:266:int getRedstonePerTick() -> SLGS
    271:271:int getRedstonePerSecond() -> Fgcd
    276:276:react.gmath.Average getaRST() -> ncfH
    281:281:react.gmath.Average getaRSS() -> bFos
    286:286:react.gmath.Average getaRSMS() -> YEHH
    291:291:boolean isFirstTickList() -> teWA
    296:296:long getFirstTick() -> kRJd
    301:301:long getLastTick() -> qmMu
react.controller.RemoteController -> TEyO:
    react.remote.server.RemoteServer remoteServer -> eYnM
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> KwSk
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> KUIb
react.controller.RemoteController$1 -> TEyO$1:
    react.controller.RemoteController this$0 -> JBPU
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> TEyO$2:
    react.controller.RemoteController this$0 -> JBPU
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> Xkvc
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> Btjm
react.controller.SampleController -> loBr:
    react.glang.GMap samplers -> YhLg
    react.surge.server.SuperSampler ss -> VgTM
    int cd -> Rswx
    28:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> oEFh
    69:74:void restartSuperSampler() -> qKMR
    78:79:void registerSampler(react.api.ISampler) -> aKvW
    83:83:react.api.ISampler getSampler(java.lang.String) -> HCPP
    88:131:void constructSamplers() -> SCUp
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> JQmU
    187:209:void onTick() -> RrxA
    214:214:java.lang.String getTickName() -> maCo
    219:219:react.glang.GMap getSamplers() -> EKOX
    224:224:react.surge.server.SuperSampler getSs() -> YxLe
    229:229:int getCd() -> BBGS
    234:241:react.glang.GList getSamplerNames() -> cSEp
    25:25:react.surge.server.SuperSampler access$0(react.controller.SampleController) -> KUIb
react.controller.SampleController$1 -> loBr$1:
    react.controller.SampleController this$0 -> Evcx
    1:140:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> loBr$2:
    react.controller.SampleController this$0 -> Evcx
    1:152:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> MdHx:
    java.lang.String ipa -> APfm
    react.glang.GList failures -> gqUd
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> CVAn
    41:74:void checkForIP() -> roqV
    78:91:void scan(java.lang.Runnable) -> KUIb
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> MdHx$1:
    react.controller.SecurityController this$0 -> fvcL
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> MdHx$2:
    java.lang.String val$ip -> cmYQ
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> MdHx$3:
    java.lang.Thread val$t -> yKUW
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> gyEf:
    react.glang.GMap etl -> Hnkq
    react.glang.GMap ttl -> MukN
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> KUIb
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> KUIb
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> sGxg
    143:160:void releaseWorld(org.bukkit.World) -> kbdq
    164:181:double getUniversalEntityTick() -> WFqa
    186:203:double getUniversalEntityLimit() -> IEyR
    208:225:double getUniversalTileLimit() -> nkug
    230:247:double getUniversalTileTick() -> Lyvb
    252:264:double getUniversalEntityDroppedTicks() -> sjdW
    269:281:double getUniversalTileDroppedTicks() -> VoEt
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> KUIb
    301:312:void setTileTickLimit(org.bukkit.World,double) -> kACa
    316:321:double getEntityTickLimit(org.bukkit.World) -> KTiT
    326:331:double getTileTickLimit(org.bukkit.World) -> HCPP
    336:341:double getLastEntityTick(org.bukkit.World) -> CVAn
    346:351:double getLastTileTick(org.bukkit.World) -> fdVc
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> yJJw
    366:371:double getTileDroppedTicks(org.bukkit.World) -> VUGv
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> KUIb
react.controller.SpikeController -> AGSg:
    react.glang.GMap spikes -> PebW
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> RrxA
    111:111:java.lang.String getTickName() -> maCo
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> Lyxp
    128:160:void whoFuckingDidThis(react.glang.Callback) -> KUIb
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> KUIb
react.controller.SpikeController$1 -> AGSg$1:
    react.controller.SpikeController this$0 -> bbFd
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> AGSg$1$1:
    react.controller.SpikeController$1 this$1 -> bsGp
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> AGSg$2:
    react.controller.SpikeController this$0 -> bbFd
    react.glang.GMap val$vv -> BJxY
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> AGSg$3:
    react.controller.SpikeController this$0 -> bbFd
    java.lang.Thread val$t -> yKUW
    react.glang.Callback val$callback -> Jlax
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> biTw:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> APDp:
    12:12:void <init>() -> <init>
    17:23:void start() -> start
    28:34:void stop() -> stop
    40:40:void tick() -> tick
    45:46:void on(org.bukkit.event.world.WorldUnloadEvent) -> KUIb
react.event.ReactEvent -> ckvu:
    org.bukkit.event.HandlerList handlers -> ymWf
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> QyFj:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> rMpS:
    react.event.ScrollDirection direction -> YyOE
    boolean cancellled -> VxUi
    int amount -> lxTU
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> ryFv
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> vbnv
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> kAKr:
    react.event.ScrollDirection DOWN -> cTKI
    react.event.ScrollDirection UP -> ChQN
    react.event.ScrollDirection[] ENUM$VALUES -> vRoc
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.feature.INMSBinding -> KDQF:
    java.lang.String getPackageVersion() -> Smfn
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> KUIb
react.feature.NMSBinding -> RrxA:
    java.lang.String packageVersion -> OtEC
    7:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> Smfn
react.feature.NMSBinding10 -> BAeV:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> KUIb
react.feature.NMSBinding11 -> maCo:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> KUIb
react.feature.NMSBinding12 -> aeqf:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> KUIb
react.feature.NMSBinding8 -> qmPU:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> KUIb
react.feature.NMSBinding9 -> TqNb:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> KUIb
react.gbench.Profiler -> cthp:
    long nanos -> QXHB
    long startNano -> gOUe
    long millis -> yJwW
    long startMillis -> DkTX
    double time -> rpwS
    boolean profiling -> KNFU
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> CVAn
    78:78:double getTicks() -> Fgfj
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> dxNa
    93:93:double getHours() -> wCoa
    98:98:double getMilliseconds() -> qmRr
    103:103:long getNanoseconds() -> BIxF
    108:108:long getNanos() -> inMB
    113:113:long getStartNano() -> pHMN
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> FVfE
    128:128:double getTime() -> MIxQ
    133:133:boolean isProfiling() -> cIvm
react.gconcurrent.A -> bGRg:
    react.gconcurrent.ParallelPoolManager mgr -> biyN
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> bGRg$1:
    react.gconcurrent.A this$0 -> ekRh
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> VvtE:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> rpSd:
    react.gconcurrent.QueueMode mode -> agVn
    react.glang.GList threads -> ptBe
    int next -> OjsI
    int threadCount -> WGvb
    java.util.Queue squeue -> wodl
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> MvOb
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> mPek
    22:23:void syncQueue(react.gconcurrent.Execution) -> KUIb
    long getNanoGate() -> ylXq
    29:42:void tickSyncQueue() -> GbYs
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> iTYR
    93:100:int getTotalQueueSize() -> KMCv
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> kACa
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> PvEp
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> tnJq
    152:179:void updateThreadInformation() -> TqQS
    183:215:react.gconcurrent.ParallelThread nextThread() -> pina
    220:226:void createThreads(int) -> fdVc
    230:230:react.gconcurrent.QueueMode getMode() -> WFst
    235:235:int getNext() -> klAk
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> Diqf
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> ychB
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> DGoI
react.gconcurrent.ParallelThread -> Vvse:
    java.util.Queue queue -> Wiwq
    react.gconcurrent.ThreadInformation info -> MvOb
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> wKuE
    63:70:void execute(react.gconcurrent.Execution) -> aKvW
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> kACa
    92:92:java.util.Queue getQueue() -> cSHh
    97:97:react.gconcurrent.ThreadInformation getInfo() -> nlXl
react.gconcurrent.QueueMode -> NflR:
    react.gconcurrent.QueueMode ROUND_ROBIN -> GAXE
    react.gconcurrent.QueueMode SMALLEST -> LQHH
    react.gconcurrent.QueueMode[] ENUM$VALUES -> GAWf
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> Vvsf:
    react.gconcurrent.ParallelPoolManager mgr -> biyN
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> Vvsf$1:
    react.gconcurrent.S this$0 -> nCGl
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> YDgq:
    long tick -> VERe
    long atick -> psaV
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> iLGQ:
    double ticksPerSecond -> APiM
    int queuedSize -> WbIW
    boolean processing -> GJHv
    double utilization -> LbJJ
    react.gmath.Average ticksPerSecondAverage -> JJaR
    long tick -> VERe
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> ctjF
    33:35:void setTicksPerSecond(double) -> RPlc
    39:39:int getQueuedSize() -> CDkd
    44:45:void setQueuedSize(int) -> yJJw
    49:49:boolean isProcessing() -> Btls
    54:55:void setProcessing(boolean) -> sGxg
    59:59:double getUtilization() -> CVNP
    64:65:void setUtilization(double) -> sGxg
    69:69:double getTicksPerSecondAverage() -> LiWh
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> MAey
    89:89:int getId() -> getId
react.gformat.F -> quaG:
    java.text.NumberFormat NF -> giFi
    java.text.DecimalFormat DF -> mbFu
    java.lang.String[] NAMES -> lMbK
    java.math.BigInteger THOUSAND -> vBNQ
    java.util.NavigableMap MAP -> aVTP
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> fdVc
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> KUIb
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> KUIb
    201:221:java.lang.String timeLong(long,int) -> KUIb
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> aKvW
    236:236:java.lang.String b(double) -> kbdq
    241:258:java.lang.String b(java.math.BigInteger) -> KUIb
    263:267:void instantiate() -> SnLY
    279:279:java.lang.String fileSize(long) -> Kvke
    292:292:java.lang.String memSize(long) -> NxFI
    305:306:java.lang.String stamp(long) -> salV
    322:349:java.lang.String ofSize(long,int) -> kACa
    363:368:java.lang.String trim(java.lang.String,int) -> kACa
    381:401:java.lang.String cname(java.lang.String) -> yJJw
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> VKvy
    459:477:java.lang.String memx(long) -> LFja
    491:492:java.lang.String f(long) -> qBSh
    504:505:java.lang.String f(int) -> VUGv
    519:528:java.lang.String f(double,int) -> kACa
    544:553:java.lang.String fd(double,int) -> aKvW
    567:576:java.lang.String f(float,int) -> KUIb
    587:587:java.lang.String f(double) -> KTiT
    598:598:java.lang.String f(float) -> KUIb
    613:613:java.lang.String pc(double,int) -> Kvke
    628:628:java.lang.String pc(float,int) -> kACa
    641:641:java.lang.String pc(double) -> HCPP
    654:654:java.lang.String pc(float) -> kACa
    670:670:java.lang.String pc(int,int,int) -> KUIb
    684:684:java.lang.String pc(int,int) -> aKvW
    700:700:java.lang.String pc(long,long,int) -> KUIb
    714:714:java.lang.String pc(long,long) -> Kvke
    726:726:java.lang.String msSeconds(long) -> wKuE
    740:740:java.lang.String msSeconds(long,int) -> aKvW
    752:752:java.lang.String nsMs(long) -> RPlc
    766:766:java.lang.String nsMs(long,int) -> Kvke
    780:780:java.lang.String nsMsd(long,int) -> NxFI
react.glang.AccessCallback -> TOJU:
    java.lang.Object get() -> get
react.glang.Adapter -> iCTl:
    java.lang.Object adapt(java.lang.Object) -> salV
    java.lang.Object onAdapt(java.lang.Object) -> VKvy
react.glang.Callback -> SLGS:
    java.lang.Object t -> Qpws
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> KUIb
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> Fgcd:
    double i -> QyiY
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> CVAn
react.glang.FinalFloat -> ncfH:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> aKvW
react.glang.FinalInteger -> bFos:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> STON
react.glang.FinalLong -> YEHH:
    long i -> kleW
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> sGxg
react.glang.FinalString -> KwSk:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> Xkvc:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> salV
    java.lang.Object onAdapt(java.lang.Object) -> VKvy
react.glang.GBiset -> Btjm:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> feeq
    java.lang.Object b -> gXIL
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> kbnY
    53:54:void setA(java.lang.Object) -> LFja
    63:63:java.lang.Object getB() -> KMBr
    73:74:void setB(java.lang.Object) -> qBSh
react.glang.GList -> oEFh:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> Kvke
    45:52:react.glang.GList grepDistance(int,int) -> NxFI
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> kACa
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> dxNW
    188:190:react.glang.GList shuffleCopy() -> xqeX
    198:199:void shuffle() -> YUkL
    210:236:react.glang.GList split() -> flpp
    248:248:boolean hasIndex(int) -> DXdX
    258:259:java.lang.Object pickRandom() -> JAOL
    270:277:react.glang.GList stringList() -> LGUU
    288:292:void forEach(react.glang.Callback) -> kACa
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> nIji
    336:336:react.glang.GList cropFrom(int) -> qlfi
    341:373:react.glang.GList split(int) -> ejDb
    389:389:react.glang.GList cropTo(int) -> SSnV
    406:416:react.glang.GList crop(int,int) -> salV
    427:431:react.glang.GList removeDuplicates() -> wDNp
    442:446:void removeAll(java.lang.Object) -> wKuE
    455:455:boolean hasDuplicates() -> wTpA
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> MIwY
    484:490:void push(java.lang.Object,int) -> KUIb
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> RPlc
    528:532:void add(java.util.List) -> KUIb
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> YwnA
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> MSLJ
    626:627:react.glang.GList qdel(java.lang.Object) -> sGxg
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> PBat
    662:669:java.lang.Object popLast() -> LOhL
    674:683:java.lang.Object popRandom() -> JcTf
react.glang.GListAdapter -> qKMR:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> kACa
    java.lang.Object onAdapt(java.lang.Object) -> VKvy
react.glang.GMap -> SCUp:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> qJpp
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> KUIb
    64:81:react.glang.GMap flip() -> afUs
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> KUIb
    121:121:react.glang.GList k() -> nIji
    131:131:react.glang.GSet kset() -> TOOj
    141:141:react.glang.GList v() -> eQAS
    151:151:react.glang.GSet vset() -> fKSJ
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> kACa
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> VKvy
    209:219:react.glang.GMap removeDuplicateValues() -> hkKK
    233:242:void put(react.glang.GList,react.glang.GList) -> KUIb
    251:267:react.glang.GList sortK() -> aevK
    277:293:react.glang.GList sortV() -> OsDp
react.glang.GQuadraset -> JQmU:
    java.lang.Object a -> feeq
    java.lang.Object b -> gXIL
    java.lang.Object c -> KfyC
    java.lang.Object d -> VVXG
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> kbnY
    25:26:void setA(java.lang.Object) -> LFja
    30:30:java.lang.Object getB() -> KMBr
    35:36:void setB(java.lang.Object) -> qBSh
    40:40:java.lang.Object getC() -> Oabc
    45:46:void setC(java.lang.Object) -> kbdq
    50:50:java.lang.Object getD() -> VTuU
    55:56:void setD(java.lang.Object) -> KTiT
react.glang.GSet -> EKOX:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> YxLe:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> feeq
    java.lang.Object b -> gXIL
    java.lang.Object c -> KfyC
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> kbnY
    26:27:void setA(java.lang.Object) -> LFja
    31:31:java.lang.Object getB() -> KMBr
    36:37:void setB(java.lang.Object) -> qBSh
    41:41:java.lang.Object getC() -> Oabc
    46:47:void setC(java.lang.Object) -> kbdq
react.gmath.Average -> BBGS:
    double[] values -> XBja
    double average -> XSlT
    boolean dirty -> yvNe
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> fdVc
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> Jbss
react.gmath.DoubleArrayUtils -> cSEp:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> KUIb
    17:19:void wrapRight(double[]) -> KUIb
    23:27:void fill(double[],double) -> fill
react.gmath.M -> roqV:
    int precision -> Ojta
    int modulus -> gXIU
    float[] sin -> HgAn
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> KUIb
    31:36:boolean r(java.lang.Double) -> kACa
    51:51:double tps(long,int) -> salV
    63:63:double ticksFromNS(long) -> kbdq
    75:101:java.lang.String toRoman(int) -> PcwY
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> VKvy
    144:216:int fromRoman(java.lang.String) -> VUGv
    226:226:long ns() -> YgOw
    236:236:long ms() -> ECDe
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> kACa
    333:333:float sinLookup(int) -> sQIo
react.gnet.client.Client -> WFqa:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> wxYP
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> KUIb
    74:74:react.gnet.packet.PacketHandler getHandler() -> DQAU
react.gnet.client.IClient -> IEyR:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> KUIb
    react.gnet.packet.PacketHandler getHandler() -> DQAU
react.gnet.download.Download -> nkug:
    react.gnet.download.DownloadState state -> YWPk
    react.gnet.download.DownloadType type -> UdVa
    react.gnet.download.DownloadStatus status -> jibE
    react.gnet.download.DownloadMonitor monitor -> UJca
    java.net.URL url -> url
    java.io.File file -> gqYt
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> ccjW
    92:92:react.gnet.download.DownloadType getType() -> hbYV
    97:97:react.gnet.download.DownloadStatus getStatus() -> xhvV
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> xyxL
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> Lyvb:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> KUIb
    void onDownloadStarted(react.gnet.download.Download) -> KUIb
    void onDownloadFinished(react.gnet.download.Download) -> kACa
    void onDownloadFailed(react.gnet.download.Download) -> aKvW
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> KUIb
react.gnet.download.DownloadState -> sjdW:
    react.gnet.download.DownloadState IDLE -> BupF
    react.gnet.download.DownloadState DOWNLOADING -> CWQD
    react.gnet.download.DownloadState FAILED -> DtHP
    react.gnet.download.DownloadState FINISHED -> neNB
    react.gnet.download.DownloadState[] $VALUES -> mXwu
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> VoEt:
    long bytesDownloaded -> TqtR
    long bytesTotal -> afxD
    long bytesPerSecond -> vdTQ
    long timeElapsed -> CpdS
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> QyIj
    25:25:long getBytesDownloaded() -> uOLk
    30:31:void setBytesDownloaded(long) -> KTiT
    35:35:long getBytesTotal() -> sjhk
    40:41:void setBytesTotal(long) -> HCPP
    45:45:long getBytesPerSecond() -> IXAD
    50:51:void setBytesPerSecond(long) -> CVAn
    55:55:long getTimeElapsed() -> UIaA
    60:61:void setTimeElapsed(long) -> fdVc
react.gnet.download.DownloadType -> Lyxp:
    react.gnet.download.DownloadType DETERMINATE -> OACI
    react.gnet.download.DownloadType INDETERMINATE -> MuqB
    react.gnet.download.DownloadType[] $VALUES -> jjBn
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> ryFv:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> rFCV
    java.lang.String getPacketName() -> oDhy
react.gnet.packet.IncompatablePacketException -> vbnv:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> Fgfj:
    react.gnet.packet.PacketBinding SERVER_BOUND -> dxqm
    react.gnet.packet.PacketBinding CLIENT_BOUND -> WrkY
    react.gnet.packet.PacketBinding[] $VALUES -> DIQm
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> dxNa:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> wCoa:
    react.glang.GList accept -> RAYQ
    react.gnet.packet.PacketBinding side -> UAqJ
    react.gnet.streams.OSS out -> lNDx
    react.gnet.streams.ISS in -> MTMS
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> KUIb
    28:34:void accept(react.gnet.packet.IPacket) -> kACa
    38:46:react.gnet.packet.IPacket findPacket(int) -> DOrx
    51:66:react.gnet.packet.IPacket read() -> cRht
    71:77:void write(react.gnet.packet.IPacket) -> aKvW
react.gnet.packet.UnhandledPacketException -> qmRr:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> BIxF:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> DQAU
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> Kvke
react.gnet.server.Server -> inMB:
    int port -> port
    java.net.ServerSocket socket -> jPOd
    react.gnet.packet.PacketHandler handler -> wxYP
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> DQAU
    37:84:void run() -> run
    88:91:void pstart() -> MclH
    95:96:void pstop() -> FWHO
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> Kvke
react.gnet.streams.ISS -> pHMN:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> MvPU
    boolean built -> wfub
    byte[] readBuffer -> GAYi
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> SePs
    64:72:react.glang.GList readStringList() -> tTYe
    77:85:react.glang.GList readDoubleList() -> AGWv
    90:98:react.glang.GList readLongList() -> xqfr
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> KUIb
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> KUIb
    136:137:react.gnet.streams.ISS gzip() -> QNVT
    142:147:void build() -> DsDr
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> kACa
    435:436:void close() -> close
react.gnet.streams.OSS -> FVfE:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> psbx
    react.gnet.streams.StreamBuilder bu -> MvPU
    boolean built -> wfub
    byte[] writeBuffer -> aDrr
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> CMQp
    41:42:react.gnet.streams.OSS gzip(int) -> pjCl
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> kACa
    53:58:void build() -> DsDr
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> LFja
    102:108:void writeDoubleList(react.glang.GList) -> qBSh
    112:118:void writeLongList(react.glang.GList) -> wKuE
    122:128:void writeStreamableList(react.glang.GList) -> RPlc
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> bhxE
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> aKvW
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> MIxQ:
    react.glang.GList constructors -> eHoj
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> KUIb
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> KUIb
    49:50:void bind(react.gnet.streams.StreamConstructor) -> KUIb
    54:55:void bindGZIP(int) -> jpbe
    59:60:void bindGZIP() -> QEdk
    64:65:void bindCipher(javax.crypto.Cipher) -> aKvW
    69:70:void bindBuffer(int) -> dwbd
    74:75:void bindBuffer() -> lMCO
react.gnet.streams.StreamConstructor -> cIvm:
    java.io.InputStream constructInput(java.io.InputStream) -> KUIb
    java.io.OutputStream constructOutput(java.io.OutputStream) -> KUIb
react.gnet.streams.constructors.BufferedStreamConstructor -> ylXq:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> kACa
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> kACa
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> KUIb
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> KUIb
react.gnet.streams.constructors.CipherStreamConstructor -> GbYs:
    javax.crypto.Cipher cipher -> qfEV
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> aKvW
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> aKvW
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> KUIb
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> KUIb
react.gnet.streams.constructors.GZipStreamConstructor -> iTYR:
    int compressionLevel -> gqXq
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> Kvke
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> Kvke
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> KUIb
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> KUIb
react.gnet.streams.overlays.CGZIPInputStream -> KMCv:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> PvEp:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> tnJq:
    void toBytes(react.gnet.streams.OSS) -> KUIb
    void fromBytes(react.gnet.streams.ISS) -> KUIb
react.graph.ColossalView -> TqQS:
    react.papyrus.BufferedFrame view -> AQLD
    react.glang.GMap buffers -> WHYG
    react.glang.GMap graphs -> hJIN
    double level -> fnUu
    double targetLevel -> WbKP
    int maxX -> JuWf
    int maxY -> RlMp
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> eQCE
    51:77:void render() -> OHSA
    81:98:void scroll(int) -> hrlm
    102:112:void recompile() -> cclx
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> KUIb
    122:122:react.papyrus.BufferedFrame getView() -> dUng
    127:127:react.glang.GMap getBuffers() -> IXBy
    132:132:react.glang.GMap getGraphs() -> gWHm
    137:137:double getLevel() -> XSLr
    142:142:double getTargetLevel() -> qdeo
    147:147:int getMaxX() -> FhLW
    152:152:int getMaxY() -> cdNP
react.graph.ColossalView$Builder -> TqQS$KUIb:
    react.glang.GList graphs -> Iqsi
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> KUIb
    171:191:react.graph.ColossalView compute() -> hHig
react.graph.CubicleIterator -> pina:
    int[][] mapping -> innW
    int xCubes -> uqtN
    int yCubes -> KUxu
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> QEYC
    47:130:void insert(react.graph.GraphSize,int) -> KUIb
    134:145:void print() -> print
react.graph.GraphSampleLine -> WFst:
    double lx -> HfcL
    double ly -> tMNh
    react.api.ISampler sampler -> ptFt
    react.graph.IFormatter formatter -> BBmf
    byte graphColor -> ekVX
    byte backgroundColor -> gGHm
    byte borderColor -> gGHh
    byte textColor -> gFiH
    int ticksLeftTitle -> YyVN
    int ticksOutTitle -> OYvC
    double nextPoint -> vdUk
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> LWmy
    51:183:void onRender(react.papyrus.BufferedFrame) -> KUIb
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> kACa
    226:254:int getHue(int,int,int) -> aKvW
    259:281:void scaleFor(react.glang.GList) -> sGxg
    285:285:react.graph.IFormatter getFormatter() -> SeTW
    290:291:void setFormatter(react.graph.IFormatter) -> KUIb
    295:295:byte getGraphColor() -> hIKI
    300:301:void setGraphColor(byte) -> KUIb
    305:305:byte getBackgroundColor() -> TWaf
    310:311:void setBackgroundColor(byte) -> kACa
    315:315:byte getBorderColor() -> XRmM
    320:321:void setBorderColor(byte) -> aKvW
    325:325:byte getTextColor() -> jiCF
    330:331:void setTextColor(byte) -> Kvke
    335:335:react.api.ISampler getSampler() -> mFvd
react.graph.GraphSize -> klAk:
    react.graph.GraphSize WIDE -> ghkV
    react.graph.GraphSize FULL -> eACW
    react.graph.GraphSize SQUARE -> JBUy
    int[] $SWITCH_TABLE$react$graph$GraphSize -> QFjO
    react.graph.GraphSize[] ENUM$VALUES -> NyUP
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> fdgB
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> NpCs
react.graph.GraphText -> Diqf:
    java.lang.String text -> text
    byte fontColor -> AQNW
    byte backgroundColor -> gGHm
    boolean wrote -> UdVh
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> KUIb
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> WOia
    68:69:void setFontColor(byte) -> NxFI
    73:73:byte getBackgroundColor() -> TWaf
    78:79:void setBackgroundColor(byte) -> kACa
react.graph.GraphingInstance -> ychB:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> Iqsi
    react.graph.ColossalView view -> CFSD
    react.papyrus.Papyrus papyrus -> jYCQ
    react.papyrus.IRenderer renderer -> WrmW
    boolean mapping -> Pdrn
    react.glang.GList msgs -> jYCR
    react.surge.sched.Task waiter -> ebdG
    react.surge.sched.Task waiter2 -> EUIJ
    int shift -> MBln
    int iv -> XeQA
    boolean notif -> fTfO
    48:116:void <init>(org.bukkit.entity.Player) -> <init>
    121:126:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> KUIb
    131:135:void on(org.bukkit.event.player.PlayerQuitEvent) -> KUIb
    139:143:void send(java.lang.String) -> STON
    149:149:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> KUIb
    154:166:void on(react.event.ReactScrollEvent) -> KUIb
    171:176:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> KUIb
    180:188:void destroy() -> destroy
    192:201:void toggle() -> mOgp
    205:206:void setGraphs(react.glang.GList) -> kbdq
    210:223:void enable() -> enable
    227:227:org.bukkit.inventory.ItemStack getItem() -> getItem
    232:237:void disable() -> disable
    241:245:void disableNoSave() -> UQst
    249:249:org.bukkit.entity.Player getPlayer() -> getPlayer
    254:254:react.glang.GList getGraphs() -> lCsj
    259:259:react.graph.ColossalView getView() -> QMwv
    264:264:react.papyrus.Papyrus getPapyrus() -> Rjmn
    269:270:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    274:275:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    279:280:void setView(react.graph.ColossalView) -> KUIb
    284:285:void setPapyrus(react.papyrus.Papyrus) -> KUIb
    289:290:void setRenderer(react.papyrus.IRenderer) -> KUIb
    294:295:void setMapping(boolean) -> aKvW
    299:300:void setMsgs(react.glang.GList) -> KTiT
    304:305:void setWaiter(react.surge.sched.Task) -> KUIb
    309:310:void setWaiter2(react.surge.sched.Task) -> kACa
    314:315:void setShift(int) -> vseT
    319:320:void setNotif(boolean) -> kbdq
    324:324:react.papyrus.IRenderer getRenderer() -> yclI
    329:329:boolean isMapping() -> pXct
    334:334:react.glang.GList getMsgs() -> qJsE
    339:339:react.surge.sched.Task getWaiter() -> AaMl
    344:344:react.surge.sched.Task getWaiter2() -> ETFX
    349:349:int getShift() -> getShift
    354:354:boolean isNotif() -> qTDX
    359:375:void compile() -> qvFw
    379:394:void enableSly() -> gpYc
    398:406:void disableSly() -> lTtb
    40:40:boolean access$0(react.graph.GraphingInstance) -> KUIb
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> kACa
    46:46:boolean access$2(react.graph.GraphingInstance) -> aKvW
    46:46:void access$3(react.graph.GraphingInstance,boolean) -> KUIb
    44:44:int access$4(react.graph.GraphingInstance) -> Kvke
    44:44:void access$5(react.graph.GraphingInstance,int) -> KUIb
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> NxFI
react.graph.GraphingInstance$1 -> ychB$1:
    react.graph.GraphingInstance this$0 -> TPSU
    org.bukkit.entity.Player val$player -> PvkD
    1:52:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    57:74:void run() -> run
react.graph.GraphingInstance$2 -> ychB$2:
    react.graph.GraphingInstance this$0 -> TPSU
    1:77:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    82:101:void run() -> run
react.graph.GraphingInstance$3 -> ychB$3:
    react.graph.GraphingInstance this$0 -> TPSU
    1:107:void <init>(react.graph.GraphingInstance) -> <init>
    112:114:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> KUIb
react.graph.IFormatter -> DGoI:
    java.lang.String from(double) -> yJJw
react.graph.IGraph -> cSHh:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> bXXk
    long getTimeViewport() -> YoaK
    void render(react.papyrus.BufferedFrame) -> aKvW
    double getMax() -> getMax
    void setMax(double) -> VUGv
react.graph.NormalGraph -> nlXl:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> UlhB
    long timeViewport -> HxEM
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> bXXk
    35:35:long getTimeViewport() -> YoaK
    41:42:void render(react.papyrus.BufferedFrame) -> aKvW
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> VUGv
    void onRender(react.papyrus.BufferedFrame) -> KUIb
react.graph.PlotBoard -> ctjF:
    react.glang.GMap plots -> BnBw
    int maxRecordings -> Sfaf
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> YxQs
    33:33:long getAccurateTimeSpan() -> qltw
    38:50:long getMedian(long,long) -> NxFI
    55:55:long getMinimumAccuracyRange() -> dfoP
    60:70:double getMaxValue() -> woHJ
    75:85:double getMinValue() -> XRkX
    90:90:react.glang.GList sort(react.glang.GMap) -> kACa
    95:105:long earilestRecording() -> IqTX
    110:120:long latestRecording() -> WOiL
    125:126:void reduceBefore(long) -> yJJw
    130:156:void reduceBetween(long,long) -> salV
    160:160:boolean before(long,long) -> VKvy
    165:165:boolean after(long,long) -> LFja
    170:170:boolean within(long,long,long) -> KUIb
    175:193:react.glang.GMap getBetween(long,long) -> qBSh
    198:200:void plot(long,double) -> KUIb
    204:204:boolean hasAt(long) -> VUGv
    209:209:double getAt(long) -> STON
    214:214:int getSize() -> getSize
react.graph.Point -> CDkd:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> Btls:
    int iid -> YyXG
    react.graph.IGraph graph -> nmbW
    react.graph.GraphSize size -> VDxj
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> pYQO
    24:25:void setGraph(react.graph.IGraph) -> KUIb
    29:29:react.graph.GraphSize getSize() -> BdOv
    34:35:void setSize(react.graph.GraphSize) -> KUIb
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> CVNP:
    react.graph.RenderMaxType UNLIMITED -> Sntc
    react.graph.RenderMaxType LIMITED -> ktxo
    react.graph.RenderMaxType[] ENUM$VALUES -> ChXF
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> LiWh:
    java.lang.String CRLF -> oWSR
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> DXdX
    162:198:java.lang.String toString(react.json.JSONObject) -> kACa
react.json.HTTPTokener -> MAey:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> SnLY:
    java.util.ArrayList myArrayList -> yTPB
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> KUIb
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> FpNA
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> jyTT
    394:399:react.json.JSONObject getJSONObject(int) -> PtyM
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> nIji
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> tdme
    515:515:boolean optBoolean(int) -> qJgC
    533:536:boolean optBoolean(int,boolean) -> kACa
    551:551:double optDouble(int) -> Kekr
    569:572:double optDouble(int,double) -> KUIb
    587:587:int optInt(int) -> XlSM
    605:608:int optInt(int,int) -> LFja
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> kACa
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> KUIb
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> KUIb
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> KUIb
    722:723:react.json.JSONArray optJSONArray(int) -> idqW
    737:738:react.json.JSONObject optJSONObject(int) -> qJep
    752:752:long optLong(int) -> wwLS
    770:773:long optLong(int,long) -> KUIb
    788:788:java.lang.String optString(int) -> SeTW
    803:804:java.lang.String optString(int,java.lang.String) -> KUIb
    816:817:react.json.JSONArray put(boolean) -> KTiT
    830:831:react.json.JSONArray put(java.util.Collection) -> KUIb
    845:848:react.json.JSONArray put(double) -> STON
    860:861:react.json.JSONArray put(int) -> GrrW
    873:874:react.json.JSONArray put(long) -> DXdX
    887:888:react.json.JSONArray put(java.util.Map) -> KUIb
    902:903:react.json.JSONArray put(java.lang.Object) -> HCPP
    921:922:react.json.JSONArray put(int,boolean) -> aKvW
    939:940:react.json.JSONArray put(int,java.util.Collection) -> KUIb
    958:959:react.json.JSONArray put(int,double) -> kACa
    977:978:react.json.JSONArray put(int,int) -> qBSh
    996:997:react.json.JSONArray put(int,long) -> kACa
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> KUIb
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> KUIb
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> CVAn
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> KUIb
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> KUIb
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> KUIb
react.json.JSONException -> kbnY:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> kAuC
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> KMBr:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> KUIb
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> qlfi
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> KUIb
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> kACa
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> DXdX
    379:456:java.lang.String toString(react.json.JSONArray) -> kACa
    472:552:java.lang.String toString(react.json.JSONObject) -> kACa
react.json.JSONObject -> dxNW:
    java.util.Map map -> map
    java.lang.Object NULL -> SoUu
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> KUIb
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> kACa
    480:499:java.lang.String doubleToString(double) -> DXdX
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> ejDb
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> SSnV
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> PcwY
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> aKvW
    751:767:java.lang.String[] getNames(java.lang.Object) -> fdVc
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> sQIo
    855:855:boolean isNull(java.lang.String) -> DOrx
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> dEMe
    917:937:java.lang.String numberToString(java.lang.Number) -> KUIb
    949:949:java.lang.Object opt(java.lang.String) -> SePs
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> KUIb
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> KUIb
    1018:1018:boolean optBoolean(java.lang.String) -> CMQp
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> KUIb
    1054:1054:double optDouble(java.lang.String) -> pjCl
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> KUIb
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> KUIb
    1116:1119:double optDouble(java.lang.String,double) -> KUIb
    1134:1134:int optInt(java.lang.String) -> jpbe
    1152:1155:int optInt(java.lang.String,int) -> aKvW
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> dwbd
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> hrlm
    1198:1198:long optLong(java.lang.String) -> QEYC
    1216:1219:long optLong(java.lang.String,long) -> KUIb
    1234:1234:java.lang.String optString(java.lang.String) -> vseT
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> kACa
    1255:1305:void populateMap(java.lang.Object) -> yJJw
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> kACa
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> KUIb
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> kACa
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> Kvke
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> kACa
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> KUIb
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> aKvW
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> Kvke
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> NxFI
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> KUIb
    1590:1590:java.lang.Object remove(java.lang.String) -> FpNA
    1605:1640:boolean similar(java.lang.Object) -> CVAn
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> VUGv
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> aKvW
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> KUIb
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> KUIb
    2000:2004:void indent(java.io.Writer,int) -> KUIb
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> KUIb
react.json.JSONObject$Null -> dxNW$KUIb:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> xqeX:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> YUkL:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> flpp:
    long character -> UmLG
    boolean eof -> eof
    long index -> dpfL
    long line -> MusO
    char previous -> dOBf
    java.io.Reader reader -> reader
    boolean usePrevious -> DcIM
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> DsFn
    119:131:int dehexchar(char) -> KUIb
    136:136:boolean end() -> GILE
    147:153:boolean more() -> bhyg
    164:198:char next() -> next
    213:218:char next(char) -> kACa
    233:250:java.lang.String next(int) -> wvjp
    263:266:char nextClean() -> ySIs
    287:334:java.lang.String nextString(char) -> aKvW
    349:361:java.lang.String nextTo(char) -> Kvke
    376:388:java.lang.String nextTo(java.lang.String) -> jyTT
    403:441:java.lang.Object nextValue() -> pXtB
    458:479:char skipTo(char) -> NxFI
    491:491:react.json.JSONException syntaxError(java.lang.String) -> PtyM
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> JAOL:
    int maxdepth -> VEXv
    boolean comma -> IrWu
    char mode -> toSV
    react.json.JSONObject[] stack -> oWSE
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> tdme
    157:164:react.json.JSONWriter array() -> INrs
    180:193:react.json.JSONWriter end(char,char) -> KUIb
    206:206:react.json.JSONWriter endArray() -> ankF
    219:219:react.json.JSONWriter endObject() -> yAjr
    235:258:react.json.JSONWriter key(java.lang.String) -> qJgC
    274:285:react.json.JSONWriter object() -> jyeq
    299:310:void pop(char) -> salV
    322:329:void push(react.json.JSONObject) -> Kvke
    342:342:react.json.JSONWriter value(boolean) -> HCPP
    356:356:react.json.JSONWriter value(double) -> nIji
    369:369:react.json.JSONWriter value(long) -> nIji
    385:385:react.json.JSONWriter value(java.lang.Object) -> STON
react.json.XML -> LGUU:
    java.lang.Character AMP -> Jlio
    java.lang.Character APOS -> YhTi
    java.lang.Character BANG -> BeUB
    java.lang.Character EQ -> OHtp
    java.lang.Character GT -> fKvn
    java.lang.Character LT -> Lano
    java.lang.Character QUEST -> FXMm
    java.lang.Character QUOT -> opdC
    java.lang.Character SLASH -> kSVT
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> Kekr
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> KUIb
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> DXdX
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> wDNp:
    java.util.HashMap entity -> klhQ
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> fKVW
    108:133:java.lang.Object nextContent() -> OHTi
    149:166:java.lang.Object nextEntity(char) -> VKvy
    186:239:java.lang.Object nextMeta() -> wMHN
    261:334:java.lang.Object nextToken() -> JIfP
    354:420:boolean skipPast(java.lang.String) -> XlSM
react.papyrus.BufferedFrame -> wTpA:
    byte[][] frame -> toSD
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> KUIb
    90:97:void write(byte) -> salV
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> KUIb
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> KUIb
    131:145:java.awt.image.BufferedImage toBufferedImage() -> aTxF
    153:160:void writeRainbowMul() -> oxUD
    167:174:void writeRainbowAdd() -> UAUS
    181:191:void writeSparks() -> LrOs
    195:201:boolean write(int,int,byte) -> KUIb
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> KUIb
    233:250:void write(react.papyrus.BufferedFrame) -> Kvke
    254:254:byte[][] getRawFrame() -> hjoL
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> MIwY:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> Kvke
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> KUIb
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> YwnA:
    org.bukkit.map.MapView getView() -> mPJi
    react.papyrus.BufferedFrame getFrameBuffer() -> eQEW
    void addRenderer(react.papyrus.IRenderer) -> kACa
    void clearRenderers() -> hkOO
    react.glang.GList getRenderers() -> imqR
    void removeRenderer(react.papyrus.IRenderer) -> aKvW
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> bPKw
react.papyrus.IRenderer -> MSLJ:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> KUIb
react.papyrus.Papyrus -> PBat:
    org.bukkit.map.MapView map -> DsmA
    react.papyrus.BufferedFrame frameBuffer -> WQQD
    react.papyrus.BufferedFrame lastFrameBuffer -> nTRa
    react.glang.GList renderers -> NVuo
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> mPJi
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> eQEW
    51:52:void addRenderer(react.papyrus.IRenderer) -> kACa
    57:58:void clearRenderers() -> hkOO
    63:63:react.glang.GList getRenderers() -> imqR
    69:70:void removeRenderer(react.papyrus.IRenderer) -> aKvW
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> bPKw
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> kACa
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> aKvW
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> Kvke
react.papyrus.Papyrus$1 -> PBat$1:
    react.papyrus.Papyrus this$0 -> RccS
    org.bukkit.map.MapCanvas val$c -> YEsl
    org.bukkit.map.MapView val$v -> dFTT
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> LOhL:
    int spaceSize -> ohVa
    java.lang.String fontChars -> dNeX
    int[][] fontData -> inuU
    react.papyrus.ReactFont Font -> ydqr
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> JcTf:
    react.glang.GList subgoals -> YpiD
    java.lang.String tag -> DtMv
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> CUrC
    26:44:void propigate() -> VTxF
    49:50:void addGoal(react.rai.IGoal) -> KUIb
    55:65:react.glang.GList getFailingSubgoals() -> VCvU
    71:71:boolean isFailing() -> CMcQ
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> nBLS
    void onPropigated() -> LFyj
react.rai.Goal$1 -> JcTf$1:
    react.rai.Goal this$0 -> pcJE
    react.rai.IGoal val$i -> JlnK
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> qJpp:
    react.glang.GList getSubgoals() -> CUrC
    void propigate() -> VTxF
    void onPropigated() -> LFyj
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> VCvU
    boolean isFailing() -> CMcQ
    boolean onCheckFailing() -> nBLS
    void update() -> update
    void addGoal(react.rai.IGoal) -> KUIb
react.rai.IRAI -> afUs:
    react.glang.GList getGoals() -> CVSt
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> KUIb
    react.glang.GList getEvents() -> PKWG
    void callEvent(react.rai.RAIEvent) -> KUIb
    react.glang.GList getListeners() -> NNBM
react.rai.RAI -> TOOj:
    react.glang.GList goals -> cLCJ
    react.glang.GList events -> pcIJ
    react.glang.GList logEvents -> Jlkl
    react.glang.GList listeners -> hcaW
    long since -> Ojye
    react.rai.RAI instance -> BKdX
    21:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> CVSt
    41:42:void addGoal(react.rai.IGoal) -> KUIb
    47:77:void tick() -> tick
    82:82:react.glang.GList getEvents() -> PKWG
    88:95:void callEvent(react.rai.RAIEvent) -> KUIb
    100:100:react.glang.GList getListeners() -> NNBM
react.rai.RAIEvent -> eQAS:
    react.rai.RAIEventType type -> WkAw
    java.lang.String[] pars -> Yxwe
    java.lang.String ovt -> Hnuw
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> KCvp
    29:29:java.lang.String[] getPars() -> quhJ
    34:34:java.lang.String getOvt() -> baLg
react.rai.RAIEventType -> fKSJ:
    react.rai.RAIEventType FIRE_ACTION -> NNds
    react.rai.RAIEventType NOTE_GOAL_FAILING -> cTQc
    react.rai.RAIEventType NOTE_GOAL_FIXED -> YWUr
    java.lang.String[] msgs -> jHDi
    react.rai.RAIEventType[] ENUM$VALUES -> ffLf
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> WPKn
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> KUIb
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedEntityCounts -> hkKK:
    boolean failing -> wDxL
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> nBLS
    91:134:void onPropigated() -> LFyj
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> KUIb
react.rai.goals.GoalReducedEntityCounts$1 -> hkKK$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> vcwj
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> hkKK$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> vcwj
    org.bukkit.Chunk val$lx -> nTPt
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> aevK:
    boolean failing -> wDxL
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> nBLS
    78:128:void onPropigated() -> LFyj
react.rai.goals.GoalStableChunkTime$1 -> aevK$1:
    react.rai.goals.GoalStableChunkTime this$0 -> eYvw
    1:54:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> aevK$2:
    react.rai.goals.GoalStableChunkTime this$0 -> eYvw
    java.lang.Object val$i -> nBoC
    1:111:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> OsDp:
    boolean failing -> wDxL
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> LFyj
    35:35:void letUp() -> KMJC
    40:77:boolean onCheckFailing() -> nBLS
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> KUIb
react.rai.goals.GoalStableEntityTime$1 -> OsDp$1:
    react.rai.goals.GoalStableEntityTime this$0 -> ndrK
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> Oabc:
    boolean failing -> wDxL
    react.glang.GMap reocc -> vRwD
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> LFyj
    88:125:boolean onCheckFailing() -> nBLS
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> KUIb
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> kACa
react.rai.goals.GoalStableFluidTime$1 -> Oabc$1:
    react.rai.goals.GoalStableFluidTime this$0 -> dOHK
    org.bukkit.Chunk val$lx -> nTPt
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> Oabc$2:
    react.rai.goals.GoalStableFluidTime this$0 -> dOHK
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> VTuU:
    boolean failing -> wDxL
    react.glang.GMap reocc -> vRwD
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> LFyj
    89:125:boolean onCheckFailing() -> nBLS
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> KUIb
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> kACa
react.rai.goals.GoalStableHopperTime$1 -> VTuU$1:
    react.rai.goals.GoalStableHopperTime this$0 -> mrtE
    org.bukkit.Chunk val$lx -> nTPt
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> VTuU$2:
    react.rai.goals.GoalStableHopperTime this$0 -> mrtE
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> Jbss:
    boolean failing -> wDxL
    react.glang.GMap reocc -> vRwD
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> LFyj
    89:126:boolean onCheckFailing() -> nBLS
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> KUIb
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> kACa
react.rai.goals.GoalStableRedstoneTime$1 -> Jbss$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> raBN
    org.bukkit.Chunk val$lx -> nTPt
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> Jbss$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> raBN
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> YgOw:
    boolean failing -> wDxL
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> LFyj
    34:58:boolean onCheckFailing() -> nBLS
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> KUIb
react.rai.goals.GoalStableTickTime$1 -> YgOw$1:
    react.rai.goals.GoalStableTickTime this$0 -> pYyk
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> ECDe:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> CFXB
    boolean authenticated -> ceVn
    react.remote.server.ServerInfo info -> vlkx
    react.glang.GMap frems -> yuuf
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> LWmy
    51:51:react.glang.GMap getFrames() -> PKVy
    56:75:int computeFrames() -> clcH
    80:92:boolean clearToken() -> xPML
    97:110:boolean updateServerInfo() -> pGsr
    115:129:boolean refreshToken() -> kcYQ
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> aKvW
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> QxpK
    165:165:boolean isAuthenticated() -> XAoR
    170:170:react.remote.server.ServerInfo getInfo() -> jygl
react.remote.client.packet.CPacketClearToken -> DQAU:
    java.lang.String token -> CFXB
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> KUIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> KUIb
    38:38:java.lang.String getToken() -> QxpK
    43:44:void setToken(java.lang.String) -> idqW
react.remote.client.packet.CPacketComputeFrames -> ccjW:
    java.lang.String token -> CFXB
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> KUIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> KUIb
    38:38:java.lang.String getToken() -> QxpK
    43:44:void setToken(java.lang.String) -> idqW
react.remote.client.packet.CPacketGetInfo -> hbYV:
    java.lang.String token -> CFXB
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> KUIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> KUIb
    38:38:java.lang.String getToken() -> QxpK
    43:44:void setToken(java.lang.String) -> idqW
react.remote.client.packet.CPacketGetToken -> xhvV:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> KUIb
    36:38:void fromBytes(react.gnet.streams.ISS) -> KUIb
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> xyxL:
    java.lang.String token -> CFXB
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> KUIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> KUIb
    38:38:java.lang.String getToken() -> QxpK
    43:44:void setToken(java.lang.String) -> idqW
react.remote.client.packet.ClientPacket -> QyIj:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> KUIb
    void fromBytes(react.gnet.streams.ISS) -> KUIb
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> rFCV
    42:42:java.lang.String getPacketName() -> oDhy
react.remote.client.packet.ClientPacketType -> uOLk:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> mrrr
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> SDfS
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> MSuk
    react.remote.client.packet.ClientPacketType GET_INFO -> wpPe
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> uXgp
    react.remote.client.packet.ClientPacketType[] $VALUES -> MTTr
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> sjhk:
    react.glang.GMap compute(long,long) -> aKvW
react.remote.server.KnownUser -> IXAD:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> UIaA:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> KUIb
    38:41:void fromBytes(react.gnet.streams.ISS) -> KUIb
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> rFCV:
    react.glang.GList users -> iUeK
    react.glang.GMap session -> Arva
    react.glang.GMap lastCompute -> JmNp
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> Xkvc
    44:45:void registerUser(react.remote.server.KnownUser) -> KUIb
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> kACa
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> qJep
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> Kvke
    react.remote.server.IFrameComputer getFrameComputer() -> Btjm
    170:171:void markLastCompute(react.remote.server.KnownUser) -> aKvW
    175:180:long getLastCompute(react.remote.server.KnownUser) -> Kvke
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> KUIb
    190:191:void deleteSession(react.remote.server.KnownUser) -> NxFI
    195:195:java.lang.String createToken() -> vJGM
react.remote.server.ServerInfo -> oDhy:
    java.lang.String motd -> Qhpy
    int gameProtocol -> jijB
    java.lang.String gameVersion -> igHC
    java.lang.String reactVersion -> qULg
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> YEuN
    int viewDistance -> viewDistance
    int gamePort -> pslA
    java.lang.String gameAddress -> ixIY
    react.glang.GList remotePlugins -> WYaw
    react.glang.GList worlds -> XdvD
    react.glang.GList actions -> TPYN
    react.glang.GList samplers -> womv
    26:26:react.remote.server.ServerInfo empty() -> ydPq
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> KUIb
    146:159:void fromBytes(react.gnet.streams.ISS) -> KUIb
    java.lang.String dgetMotd() -> TqNb
    int dgetGameProtocol() -> cthp
    java.lang.String dgetGameVersion() -> bGRg
    java.lang.String dgetReactVersion() -> VvtE
    int dgetMaxPlayers() -> rpSd
    react.glang.GList dgetConnectedPlayers() -> Vvse
    int dgetViewDistance() -> NflR
    int dgetGamePort() -> Vvsf
    java.lang.String dgetGameAddress() -> YDgq
    react.glang.GList dgetRemotePlugins() -> iLGQ
    react.glang.GList dgetWorlds() -> quaG
    react.glang.GList dgetActions() -> TOJU
    react.glang.GList dgetSamplers() -> iCTl
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> XRqS
    199:199:java.lang.String getGameVersion() -> YgUy
    204:204:java.lang.String getReactVersion() -> wCvy
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> RIPT
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> Knng
    229:229:java.lang.String getGameAddress() -> OHWX
    234:234:react.glang.GList getRemotePlugins() -> TNtA
    239:239:react.glang.GList getWorlds() -> CETo
    244:244:react.glang.GList getActions() -> Wyta
    249:249:react.glang.GList getSamplers() -> XcqS
react.remote.server.ServerInfo$1 -> oDhy$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> quaG
    37:37:int dgetViewDistance() -> NflR
    43:43:react.glang.GList dgetRemotePlugins() -> iLGQ
    49:49:java.lang.String dgetReactVersion() -> VvtE
    55:55:java.lang.String dgetMotd() -> TqNb
    61:61:int dgetMaxPlayers() -> rpSd
    67:67:java.lang.String dgetGameVersion() -> bGRg
    73:73:int dgetGameProtocol() -> cthp
    79:79:int dgetGamePort() -> Vvsf
    85:85:java.lang.String dgetGameAddress() -> YDgq
    91:91:react.glang.GList dgetConnectedPlayers() -> Vvse
    97:97:react.glang.GList dgetActions() -> TOJU
    103:103:react.glang.GList dgetSamplers() -> iCTl
react.remote.server.packet.ComputedFrame -> cRht:
    react.glang.GMap values -> oOEi
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> KUIb
    28:36:void fromBytes(react.gnet.streams.ISS) -> KUIb
    40:40:react.glang.GMap getValues() -> ymAi
    45:46:void setValues(react.glang.GMap) -> aKvW
react.remote.server.packet.SPacketOk -> MclH:
    boolean ok -> CFWx
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> KUIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> KUIb
    38:38:boolean isOk() -> PulJ
    43:44:void setOk(boolean) -> CVAn
react.remote.server.packet.SPacketSendFrames -> FWHO:
    react.glang.GMap frames -> OboA
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> KUIb
    36:44:void fromBytes(react.gnet.streams.ISS) -> KUIb
    48:48:react.glang.GMap getFrames() -> PKVy
    53:54:void setFrames(react.glang.GMap) -> Kvke
react.remote.server.packet.SPacketSendInfo -> tTYe:
    react.remote.server.ServerInfo info -> vlkx
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> KUIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> KUIb
    38:38:react.remote.server.ServerInfo getInfo() -> jygl
    43:44:void setInfo(react.remote.server.ServerInfo) -> KUIb
react.remote.server.packet.SPacketSendToken -> AGWv:
    java.lang.String token -> CFXB
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> KUIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> KUIb
    38:38:java.lang.String getToken() -> QxpK
    43:44:void setToken(java.lang.String) -> idqW
react.remote.server.packet.ServerPacket -> xqfr:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> KUIb
    void fromBytes(react.gnet.streams.ISS) -> KUIb
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> rFCV
    42:42:java.lang.String getPacketName() -> oDhy
react.remote.server.packet.ServerPacketType -> QNVT:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> DtQd
    react.remote.server.packet.ServerPacketType SEND_INFO -> wyDT
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> BeYo
    react.remote.server.packet.ServerPacketType OK -> QrGG
    react.remote.server.packet.ServerPacketType[] $VALUES -> HUia
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> DsDr:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleAsyncQueue$1 -> DsDr$1:
    react.sampler.SampleAsyncQueue this$0 -> EvtK
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleChunkTime -> bhxE:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleChunkTime$1 -> bhxE$1:
    react.sampler.SampleChunkTime this$0 -> HEHu
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleChunksLoaded -> QEdk:
    react.graph.IFormatter formatter -> BBmf
    17:27:void <init>() -> <init>
    32:38:void construct() -> nlQW
    43:44:void sample() -> LWmy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleChunksLoaded$1 -> QEdk$1:
    react.sampler.SampleChunksLoaded this$0 -> xHbL
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> yJJw
react.sampler.SampleChunksLoadedPerSecond -> lMCO:
    react.gmath.Average a -> tgJP
    react.graph.IFormatter formatter -> BBmf
    16:29:void <init>() -> <init>
    34:40:void construct() -> nlQW
    45:47:void sample() -> LWmy
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleChunksLoadedPerSecond$1 -> lMCO$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> LsXf
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> yJJw
react.sampler.SampleEntitiesDrops -> eQCE:
    react.graph.IFormatter formatter -> BBmf
    17:27:void <init>() -> <init>
    32:38:void construct() -> nlQW
    43:44:void sample() -> LWmy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleEntitiesDrops$1 -> eQCE$1:
    react.sampler.SampleEntitiesDrops this$0 -> UKOJ
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> yJJw
react.sampler.SampleEntitiesLiving -> OHSA:
    react.graph.IFormatter formatter -> BBmf
    17:27:void <init>() -> <init>
    32:38:void construct() -> nlQW
    43:44:void sample() -> LWmy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleEntitiesLiving$1 -> OHSA$1:
    react.sampler.SampleEntitiesLiving this$0 -> KVcR
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> yJJw
react.sampler.SampleEntitiesTiles -> cclx:
    react.graph.IFormatter formatter -> BBmf
    17:27:void <init>() -> <init>
    32:38:void construct() -> nlQW
    43:44:void sample() -> LWmy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleEntitiesTiles$1 -> cclx$1:
    react.sampler.SampleEntitiesTiles this$0 -> Rtic
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> yJJw
react.sampler.SampleEntitiesTotal -> dUng:
    react.graph.IFormatter formatter -> BBmf
    17:27:void <init>() -> <init>
    32:38:void construct() -> nlQW
    43:44:void sample() -> LWmy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleEntitiesTotal$1 -> dUng$1:
    react.sampler.SampleEntitiesTotal this$0 -> OlBC
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> yJJw
react.sampler.SampleEntityDroppedTicks -> IXBy:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleEntityDroppedTicks$1 -> IXBy$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> THKs
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleEntityTime -> gWHm:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleEntityTime$1 -> gWHm$1:
    react.sampler.SampleEntityTime this$0 -> aoru
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleEntityTimeLock -> XSLr:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleEntityTimeLock$1 -> XSLr$1:
    react.sampler.SampleEntityTimeLock this$0 -> cKfN
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleExplosionTime -> qdeo:
    react.graph.IFormatter formatter -> BBmf
    17:27:void <init>() -> <init>
    32:38:void construct() -> nlQW
    43:44:void sample() -> LWmy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleExplosionTime$1 -> qdeo$1:
    react.sampler.SampleExplosionTime this$0 -> LHeE
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> yJJw
react.sampler.SampleFluidPerSecond -> FhLW:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleFluidPerSecond$1 -> FhLW$1:
    react.sampler.SampleFluidPerSecond this$0 -> XSug
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleFluidPerTick -> cdNP:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    46:53:void sample() -> LWmy
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleFluidPerTick$1 -> cdNP$1:
    react.sampler.SampleFluidPerTick this$0 -> lpSE
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleFluidTickTime -> hHig:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleFluidTickTime$1 -> hHig$1:
    react.sampler.SampleFluidTickTime this$0 -> QPCG
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleFluidTickUtilization -> hIKI:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    46:53:void sample() -> LWmy
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleFluidTickUtilization$1 -> hIKI$1:
    react.sampler.SampleFluidTickUtilization this$0 -> jPYj
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleHopperPerSecond -> TWaf:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleHopperPerSecond$1 -> TWaf$1:
    react.sampler.SampleHopperPerSecond this$0 -> yTUK
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleHopperPerTick -> XRmM:
    react.graph.IFormatter formatter -> BBmf
    18:29:void <init>() -> <init>
    34:40:void construct() -> nlQW
    47:54:void sample() -> LWmy
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleHopperPerTick$1 -> XRmM$1:
    react.sampler.SampleHopperPerTick this$0 -> vJju
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleHopperTickTime -> jiCF:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleHopperTickTime$1 -> jiCF$1:
    react.sampler.SampleHopperTickTime this$0 -> yStL
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleHopperTickUtilization -> mFvd:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    46:53:void sample() -> LWmy
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleHopperTickUtilization$1 -> mFvd$1:
    react.sampler.SampleHopperTickUtilization this$0 -> LkGP
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleMemoryAllocated -> fdgB:
    react.graph.IFormatter formatter -> BBmf
    17:27:void <init>() -> <init>
    32:38:void construct() -> nlQW
    43:44:void sample() -> LWmy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleMemoryAllocated$1 -> fdgB$1:
    react.sampler.SampleMemoryAllocated this$0 -> BTYV
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> yJJw
react.sampler.SampleMemoryAllocationPerSecond -> NpCs:
    react.graph.IFormatter formatter -> BBmf
    17:27:void <init>() -> <init>
    32:38:void construct() -> nlQW
    43:44:void sample() -> LWmy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleMemoryAllocationPerSecond$1 -> NpCs$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> VNQS
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> yJJw
react.sampler.SampleMemoryFree -> WOia:
    react.graph.IFormatter formatter -> BBmf
    17:27:void <init>() -> <init>
    32:38:void construct() -> nlQW
    43:44:void sample() -> LWmy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleMemoryFree$1 -> WOia$1:
    react.sampler.SampleMemoryFree this$0 -> jHHm
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> yJJw
react.sampler.SampleMemoryMax -> mOgp:
    react.graph.IFormatter formatter -> BBmf
    17:27:void <init>() -> <init>
    32:38:void construct() -> nlQW
    43:44:void sample() -> LWmy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleMemoryMax$1 -> mOgp$1:
    react.sampler.SampleMemoryMax this$0 -> qCjx
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> yJJw
react.sampler.SampleMemoryUse -> UQst:
    react.graph.IFormatter formatter -> BBmf
    17:27:void <init>() -> <init>
    32:38:void construct() -> nlQW
    43:44:void sample() -> LWmy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleMemoryUse$1 -> UQst$1:
    react.sampler.SampleMemoryUse this$0 -> FOcO
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> yJJw
react.sampler.SampleRedstonePerSecond -> lCsj:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleRedstonePerSecond$1 -> lCsj$1:
    react.sampler.SampleRedstonePerSecond this$0 -> GchC
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleRedstonePerTick -> QMwv:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    46:53:void sample() -> LWmy
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleRedstonePerTick$1 -> QMwv$1:
    react.sampler.SampleRedstonePerTick this$0 -> GkxN
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleRedstoneTickTime -> Rjmn:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleRedstoneTickTime$1 -> Rjmn$1:
    react.sampler.SampleRedstoneTickTime this$0 -> htff
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleRedstoneTickUtilization -> yclI:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    46:53:void sample() -> LWmy
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleRedstoneTickUtilization$1 -> yclI$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> qfPE
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleSyncQueue -> qJsE:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleSyncQueue$1 -> qJsE$1:
    react.sampler.SampleSyncQueue this$0 -> QGTe
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleTickTime -> AaMl:
    react.graph.IFormatter formatter -> BBmf
    react.gmath.Average aa -> dpmk
    17:29:void <init>() -> <init>
    34:40:void construct() -> nlQW
    45:47:void sample() -> LWmy
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleTickTime$1 -> AaMl$1:
    react.sampler.SampleTickTime this$0 -> GRiE
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> yJJw
react.sampler.SampleTickUtilization -> ETFX:
    react.graph.IFormatter formatter -> BBmf
    react.gmath.Average aa -> dpmk
    17:29:void <init>() -> <init>
    34:40:void construct() -> nlQW
    45:47:void sample() -> LWmy
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleTickUtilization$1 -> ETFX$1:
    react.sampler.SampleTickUtilization this$0 -> eQnJ
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> yJJw
react.sampler.SampleTicksPerSecond -> qTDX:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleTicksPerSecond$1 -> qTDX$1:
    react.sampler.SampleTicksPerSecond this$0 -> mQVL
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleTileDroppedTicks -> qvFw:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleTileDroppedTicks$1 -> qvFw$1:
    react.sampler.SampleTileDroppedTicks this$0 -> FqiI
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleTileTime -> gpYc:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleTileTime$1 -> gpYc$1:
    react.sampler.SampleTileTime this$0 -> ujNv
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.sampler.SampleTileTimeLock -> lTtb:
    react.graph.IFormatter formatter -> BBmf
    18:28:void <init>() -> <init>
    33:39:void construct() -> nlQW
    44:45:void sample() -> LWmy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> SeTW
react.sampler.SampleTileTimeLock$1 -> lTtb$1:
    react.sampler.SampleTileTimeLock this$0 -> Qhvi
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> yJJw
react.security.checkpoints.SecurityCheckpointAlpha -> bXXk:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> brPH
    78:148:void doScan(java.lang.Runnable) -> kACa
    152:181:byte[] readResource(java.io.File,java.lang.String) -> KUIb
    186:217:react.glang.GMap scan(java.io.File) -> kACa
    150:150:byte[] access$0(java.io.File,java.lang.String) -> kACa
react.security.checkpoints.SecurityCheckpointAlpha$1 -> bXXk$1:
    java.lang.Runnable val$r -> gaFh
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> bXXk$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> xIEM
    java.lang.Runnable val$r -> gaFh
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> YoaK:
    java.lang.String ip -> ffST
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> YxQs:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> YxQs$1:
    react.security.locks.SecurityLockAlpha this$0 -> pcPB
    java.io.File val$f -> OcRR
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> qltw:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> DXdX
react.slate.PhantomSlate -> dfoP:
    react.glang.GList lines -> xrwH
    react.glang.GList viewers -> EDRh
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> bavr
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> PdjX
    44:45:void set(int,java.lang.String) -> kACa
    50:51:void setLines(react.glang.GList) -> HCPP
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> DsDr
    91:95:void addViewer(org.bukkit.entity.Player) -> DXdX
    100:102:void removeViewer(org.bukkit.entity.Player) -> nIji
    107:107:react.glang.GList getViewers() -> CNEq
    113:113:boolean isViewing(org.bukkit.entity.Player) -> qlfi
    119:120:void addLine(java.lang.String) -> wwLS
    125:126:void clearLines() -> DbHt
react.slate.Slate -> woHJ:
    void build() -> DsDr
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> PdjX
    void set(int,java.lang.String) -> kACa
    void setLines(react.glang.GList) -> HCPP
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> DXdX
    void addLine(java.lang.String) -> wwLS
    void clearLines() -> DbHt
    void removeViewer(org.bukkit.entity.Player) -> nIji
    react.glang.GList getViewers() -> CNEq
    boolean isViewing(org.bukkit.entity.Player) -> qlfi
    void update() -> update
react.slate.SlateUtil -> XRkX:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> MdSE
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> Btts
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> KUIb
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> kACa
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> aKvW
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> KUIb
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> KUIb
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> kACa
    186:196:java.lang.String convertJSON(java.lang.String) -> SeTW
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> kACa
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> KUIb
react.surge.Main -> IqTX:
    react.glang.GList plugins -> JmTk
    react.glang.GMap pluginInstances -> yKev
    react.glang.GList controllerSet -> iMYa
    react.glang.GMap anchors -> CiAW
    react.glang.GList classes -> JTCV
    java.lang.reflect.Field nsField -> AYiP
    java.lang.reflect.Field thField -> Kotp
    react.glang.GList tracks -> GJVx
    long nsf -> dNii
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> vcWb
    90:109:long getNanoSync() -> eafh
    114:115:void requestResetNanos() -> fKXN
    119:127:void requestReload() -> dNBp
    131:134:void requestReload(java.lang.Runnable) -> aKvW
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> KUIb
    201:218:void onStop() -> ArRj
    224:224:void onPostInit() -> NESX
    230:230:void onPreInit() -> GscR
    234:245:void shutDownAmps() -> SvfA
    249:458:void initializeAmps() -> JQwo
    463:504:void doScan() -> jheV
    508:530:void scanForPoolDefiners() -> QqBi
    534:550:void scanForRawEvents() -> funQ
    554:570:void scanForDynamicTrack() -> VoPa
    574:595:void scanForAmps() -> eQHi
    600:611:void onTick() -> RrxA
react.surge.Main$1 -> IqTX$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> WOiL:
    react.surge.control.AmpedPlugin plugin -> pbnL
    boolean connected -> connected
    int masterTask -> xbUg
    java.lang.Runnable onReload -> YOLE
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> tmtp
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> RbcS
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> KUIb
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> KUIb
    123:124:void stopTask(int) -> nlQW
    128:128:react.surge.control.AmpedPlugin getPlugin() -> wLkF
    133:133:int getMasterTask() -> gEku
    138:138:java.lang.Runnable getOnReload() -> PCKe
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> KUIb
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> YDbJ
    158:159:void setOnReload(java.lang.Runnable) -> Kvke
    67:67:void access$0(react.surge.PluginAmp) -> KUIb
react.surge.PluginAmp$1 -> WOiL$1:
    react.surge.PluginAmp this$0 -> YFYm
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> WOiL$2:
    react.surge.PluginAmp this$0 -> YFYm
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> WOiL$3:
    react.surge.PluginAmp this$0 -> YFYm
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> pYQO:
    react.surge.PluginAmp amp -> IGlV
    react.glang.GList tickComponents -> bIDd
    react.glang.GList atickComponents -> IGku
    react.surge.sched.TaskManager taskmgr -> slWv
    react.surge.hotload.HotloadManager hotloadmgr -> feqT
    java.lang.Thread mainThread -> Xdxs
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> KUIb
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> GrrW
    44:44:java.io.File folder() -> WXaD
    49:51:java.io.File getPluginJarFile() -> XKBt
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> Kvke
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> wCyg
    74:74:react.glang.GList getTickComponents() -> kQxn
    79:79:react.glang.GList getAsyncTickComponents() -> OPiP
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> KUIb
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> kACa
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> kACa
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> tDCN
    126:126:boolean hasAmp() -> RYsB
    131:131:react.surge.PluginAmp getAmp() -> XKCi
    136:136:react.surge.sched.TaskManager getTaskManager() -> scBW
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> WHAA
react.surge.cluster.Cluster -> BdOv:
    react.surge.cluster.ClusterType type -> QPDn
    java.lang.Object t -> Qpws
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> dUtw
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> dEMe:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> DsFn:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> GILE:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> bhyg:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> ySIs:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> pXtB:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> INrs:
    react.surge.cluster.ClusterType INT -> klop
    react.surge.cluster.ClusterType BOOLEAN -> LYgL
    react.surge.cluster.ClusterType STRING -> ferP
    react.surge.cluster.ClusterType STRING_LIST -> brxE
    react.surge.cluster.ClusterType DOUBLE -> PesQ
    react.surge.cluster.ClusterType LONG -> nLFm
    react.surge.cluster.ClusterType[] ENUM$VALUES -> CNmJ
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> ankF:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> OQni
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> KUIb
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> KUIb
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> sjrI
react.surge.cluster.ConfigurationDataOutput -> yAjr:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> kACa
react.surge.cluster.DataCluster -> jyeq:
    react.glang.GMap clusters -> FaHE
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> sYor
    29:33:void fromJson(react.json.JSONObject) -> NxFI
    37:44:react.json.JSONObject toJson() -> pXvx
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> tKqe
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> KUIb
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> wvjp
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> salV
    194:195:void set(java.lang.String,int) -> NxFI
    199:200:void set(java.lang.String,boolean) -> aKvW
    204:205:void set(java.lang.String,double) -> aKvW
    209:210:void set(java.lang.String,long) -> aKvW
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> KUIb
react.surge.cluster.ICluster -> fKVW:
    react.surge.cluster.ClusterType getType() -> dUtw
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> OHTi:
react.surge.cluster.IDataInput -> wMHN:
    react.surge.cluster.DataCluster read(java.io.File) -> aKvW
react.surge.cluster.IDataOutput -> JIfP:
    void write(react.surge.cluster.DataCluster,java.io.File) -> KUIb
react.surge.cluster.Key -> aTxF:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> oxUD:
    int value() -> value
react.surge.cluster.KeyStore -> UAUS:
react.surge.cluster.ReflectedConfigurationException -> LrOs:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> hjoL:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> aKvW
react.surge.cluster.YamlDataOutput -> mPJi:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> KUIb
react.surge.collection.GSound -> eQEW:
    java.lang.String sound -> MSxp
    org.bukkit.Sound iSound -> OQoK
    java.lang.Float volume -> HfmM
    java.lang.Float pitch -> Qywi
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> ejDb
    61:72:void play(org.bukkit.Location) -> salV
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> KUIb
    93:93:java.lang.String getSound() -> vkik
    98:99:void setSound(java.lang.String) -> LWmy
    103:103:org.bukkit.Sound getiSound() -> dDra
    108:109:void setiSound(org.bukkit.Sound) -> KUIb
    113:113:java.lang.Float getVolume() -> wTyr
    118:119:void setVolume(java.lang.Float) -> KUIb
    123:123:java.lang.Float getPitch() -> JIhl
    128:129:void setPitch(java.lang.Float) -> kACa
react.surge.control.AmpedPlugin -> hkOO:
    react.glang.GList controllers -> gWrp
    react.gconcurrent.ParallelPoolManager pp -> PfWE
    react.surge.server.CoreTickThread ctt -> lovf
    24:50:void <init>() -> <init>
    void doScan() -> jheV
    long getNanoSync() -> eafh
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:91:void onDisable() -> onDisable
    96:96:react.glang.GList getControllers() -> HCcK
    102:103:void registerController(react.surge.control.IController) -> KUIb
    108:119:void onTick() -> RrxA
    124:124:java.lang.String getTickName() -> maCo
    130:130:react.gconcurrent.ParallelPoolManager getThreadPool() -> eQGb
    136:251:void destroyOldThreads() -> vlKT
    void onControllerRegistry() -> vcWb
    void onStart(react.surge.util.Protocol) -> KUIb
    void onStop() -> ArRj
    void onPostInit() -> NESX
    void onPreInit() -> GscR
react.surge.control.AmpedPlugin$1 -> hkOO$1:
    react.surge.control.AmpedPlugin this$0 -> WbYy
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> ylXq
react.surge.control.AmpedPlugin$2 -> hkOO$2:
    react.surge.control.AmpedPlugin this$0 -> WbYy
    1:149:void <init>(react.surge.control.AmpedPlugin) -> <init>
    154:244:void run() -> run
react.surge.control.Control -> imqR:
react.surge.control.Controller -> bPKw:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> CUrC:
react.surge.control.Enable -> VTxF:
react.surge.control.IController -> VCvU:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> CMcQ:
react.surge.control.Plugin -> nBLS:
react.surge.control.SurgePlugin -> LFyj:
    void onStart(react.surge.util.Protocol) -> KUIb
    void onStop() -> ArRj
    void onPostInit() -> NESX
    void onPreInit() -> GscR
    void onControllerRegistry() -> vcWb
    void registerController(react.surge.control.IController) -> KUIb
    react.glang.GList getControllers() -> HCcK
    react.gconcurrent.ParallelPoolManager getThreadPool() -> eQGb
react.surge.hotload.HotloadManager -> CVSt:
    react.glang.GMap filemods -> tEJo
    react.glang.GMap filesizes -> KWGb
    react.glang.GMap fileacts -> NNmy
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> KUIb
    35:38:void untrack(java.io.File) -> Kvke
    42:45:void untrackall() -> KoOt
    50:86:void onTick() -> RrxA
    91:91:java.lang.String getTickName() -> maCo
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> KUIb
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> kACa
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> aKvW
react.surge.hotload.HotloadManager$1 -> CVSt$1:
    react.surge.hotload.HotloadManager this$0 -> aNUL
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> PKWG:
    boolean init -> XKix
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> tUlE
    java.lang.Class IChatBaseComponent -> ahGa
    java.lang.Class ChatSerializer -> nLJh
    java.lang.Class PacketPlayOutPlayerInfo -> wgfN
    java.lang.Class PlayerInfoData -> eQqC
    java.lang.Class EnumPlayerInfoAction -> DtUv
    java.lang.Class GameProfile -> CqRv
    java.lang.Class EnumGamemode -> iDip
    java.lang.Class TileEntitySkull -> CiBo
    java.lang.Class LoadingCache -> JTDp
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> NNBM:
    react.surge.nms.NMSX bountifulAPI -> MByu
    boolean useOldMethods -> Uddr
    java.lang.String nmsver -> Rckm
    java.lang.Object eTimes -> QrKd
    java.lang.Object eTitle -> nCYS
    java.lang.Object eSubtitle -> BKmB
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> KUIb
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> nlQW
    75:89:java.lang.Class getCBClass(java.lang.String) -> YDbJ
    96:104:java.lang.Object serializeChat(java.lang.String) -> STRl
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> kACa
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> KUIb
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> Edly
    151:151:java.lang.String craftPackage() -> TqYg
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> KUIb
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> KUIb
    197:207:java.lang.Class getNMSClass(java.lang.String) -> lekA
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> KUIb
    279:280:void clearTitle(org.bukkit.entity.Player) -> SSnV
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> kACa
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> KUIb
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> KUIb
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> qBVO
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> salV
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> LFja
    434:447:int ping(org.bukkit.entity.Player) -> PcwY
react.surge.nms.NMSX$1 -> NNBM$1:
    org.bukkit.entity.Player val$player -> PvkD
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> NNBM$2:
    org.bukkit.entity.Player val$player -> PvkD
    java.lang.String val$message -> Iips
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> KCvp:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> eahN
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> KUIb
    68:82:void clearTitle(org.bukkit.entity.Player) -> SSnV
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> KUIb
react.surge.nms.PacketUtil$V -> KCvp$KUIb:
    react.surge.nms.PacketUtil$V R17 -> lVdJ
    react.surge.nms.PacketUtil$V R18 -> dqPM
    react.surge.nms.PacketUtil$V R19 -> WPvl
    react.surge.nms.PacketUtil$V R111 -> SxOx
    react.surge.nms.PacketUtil$V R110 -> fDPv
    react.surge.nms.PacketUtil$V R112 -> sSGn
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> XBxh
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> quhJ:
    java.lang.String title -> title
    java.lang.String subTitle -> CXAW
    java.lang.String action -> action
    java.lang.Integer fadeIn -> txNL
    java.lang.Integer fadeOut -> MByW
    java.lang.Integer stayTime -> jYNe
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> sQIo
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> CVWv
    79:80:void setSubTitle(java.lang.String) -> WFjf
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> AHBK
    99:100:void setFadeIn(java.lang.Integer) -> aKvW
    104:104:java.lang.Integer getFadeOut() -> pQHA
    109:110:void setFadeOut(java.lang.Integer) -> Kvke
    114:114:java.lang.Integer getStayTime() -> fCIk
    119:120:void setStayTime(java.lang.Integer) -> NxFI
react.surge.nms.VersionBukkit -> baLg:
    react.surge.nms.VersionBukkit VU -> qMAr
    react.surge.nms.VersionBukkit V7 -> agfT
    react.surge.nms.VersionBukkit V8 -> MByb
    react.surge.nms.VersionBukkit V9 -> NpqM
    react.surge.nms.VersionBukkit V11 -> PLdA
    react.surge.nms.VersionBukkit V111 -> RckU
    react.surge.nms.VersionBukkit V112 -> TYPc
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> LYiX
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> nRom
    27:32:boolean uc() -> DakA
    37:67:react.surge.nms.VersionBukkit get() -> rVkg
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> WPKn:
    void burst(java.lang.Object) -> DXdX
    void setTimeLock(double) -> qlfi
    double getEstimatedTimeUse() -> iDAn
    int flush() -> eiyK
    int flush(react.gbench.Profiler) -> KUIb
    void queue(java.lang.Object) -> nIji
    void queue(java.util.List) -> aKvW
    void queue(java.lang.Object[]) -> KUIb
react.surge.sched.ICancellable -> KMJC:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> PKVy:
    void onTick() -> RrxA
    java.lang.String getTickName() -> maCo
react.surge.sched.ITask -> clcH:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> JIjF
    java.lang.String getName() -> getName
    double getComputeTime() -> YxXi
    double getTotalComputeTime() -> cuUX
    double getActiveTime() -> cmDm
    boolean hasCompleted() -> ssaj
react.surge.sched.Task -> xPML:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> KFHO
    double computeTime -> SUnp
    double totalComputeTime -> ohaX
    double activeTime -> uQAW
    boolean completed -> completed
    react.gbench.Profiler profiler -> vmVP
    react.gbench.Profiler activeProfiler -> QGYE
    int ticks -> Dsvn
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> Kvke
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> JIjF
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> YxXi
    150:150:boolean hasCompleted() -> ssaj
    156:156:double getTotalComputeTime() -> cuUX
    162:162:double getActiveTime() -> cmDm
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> aKvW
    15:15:void access$1(react.surge.sched.Task,boolean) -> KUIb
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> Kvke
    14:14:void access$3(react.surge.sched.Task,double) -> KUIb
    12:12:void access$4(react.surge.sched.Task,double) -> kACa
    14:14:double access$5(react.surge.sched.Task) -> NxFI
    13:13:void access$6(react.surge.sched.Task,double) -> aKvW
    13:13:double access$7(react.surge.sched.Task) -> salV
    12:12:double access$8(react.surge.sched.Task) -> VKvy
react.surge.sched.Task$1 -> xPML$1:
    react.surge.sched.Task this$0 -> fUUk
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> xPML$2:
    react.surge.sched.Task this$0 -> fUUk
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> xPML$3:
    react.surge.sched.Task this$0 -> fUUk
    int val$total -> VMvc
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> pGsr:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> KFHO
    double computeTime -> SUnp
    double totalComputeTime -> ohaX
    double activeTime -> uQAW
    boolean completed -> completed
    react.gbench.Profiler profiler -> vmVP
    react.gbench.Profiler activeProfiler -> QGYE
    int ticks -> Dsvn
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> Kvke
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> JIjF
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> YxXi
    101:101:boolean hasCompleted() -> ssaj
    107:107:double getTotalComputeTime() -> cuUX
    113:113:double getActiveTime() -> cmDm
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> KUIb
    12:12:void access$1(react.surge.sched.TaskLater,double) -> KUIb
    13:13:double access$2(react.surge.sched.TaskLater) -> kACa
    12:12:double access$3(react.surge.sched.TaskLater) -> aKvW
    13:13:void access$4(react.surge.sched.TaskLater,double) -> kACa
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> Kvke
    14:14:double access$6(react.surge.sched.TaskLater) -> NxFI
    14:14:void access$7(react.surge.sched.TaskLater,double) -> aKvW
react.surge.sched.TaskLater$1 -> pGsr$1:
    react.surge.sched.TaskLater this$0 -> lhJL
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> kcYQ:
    react.glang.GList tasks -> ioHX
    react.glang.GMap taskProfiles -> NWbC
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> KUIb
    25:35:void onTick() -> RrxA
    39:40:void putFinishingTask(react.surge.sched.ITask) -> kACa
    44:53:void putTask(react.surge.sched.ITask) -> aKvW
    58:58:java.lang.String getTickName() -> maCo
    63:63:react.glang.GList getTasks() -> gVpQ
    68:68:react.glang.GMap getTaskProfiles() -> LaTd
react.surge.sched.TaskProfile -> QxpK:
    double activeTime -> uQAW
    double computeTickTime -> WHjT
    double computeTime -> SUnp
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> cmDm
    23:24:void setActiveTime(double) -> ejDb
    28:28:double getComputeTickTime() -> FyUb
    33:34:void setComputeTickTime(double) -> SSnV
    38:38:double getComputeTime() -> YxXi
    43:44:void setComputeTime(double) -> PcwY
react.surge.server.AsyncTick -> XAoR:
react.surge.server.CPS -> jygl:
    react.glang.GMap keys -> twpR
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> ssPE
    46:99:void scan() -> xqrs
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> aKvW
react.surge.server.CoreTickThread -> vJGM:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> ydPq:
    long memoryFree -> SfqQ
    long memoryUsed -> Tisq
    long memoryMax -> tVMn
    long lastMemoryUsed -> fCsn
    long memoryUsedAfterGC -> vdeF
    long allocated -> bkLw
    long collected -> wyJP
    long collections -> GBMP
    long sms -> VWHQ
    long memoryAllocatedPerTick -> KWID
    long memoryCollectedPerTick -> fUUP
    long memoryFullyAllocatedPerTick -> mPxL
    long mah -> tDjm
    long mahs -> sIyA
    22:39:void <init>() -> <init>
    void onAllocationSet() -> xibp
    46:98:void run() -> run
    102:102:long getMemoryFree() -> bPQm
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> uWhW
    117:117:long getLastMemoryUsed() -> axCP
    122:122:long getMemoryUsedAfterGC() -> mqtI
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> QhTG
    137:137:long getCollections() -> YojX
    142:142:long getSms() -> DPko
    147:147:long getMemoryAllocatedPerTick() -> jpys
    152:152:long getMemoryCollectedPerTick() -> RkWN
    157:157:long getMemoryFullyAllocatedPerTick() -> erlv
    162:162:long getMah() -> lLmW
    167:167:long getMahs() -> pbLG
react.surge.server.SuperSampler -> XRqS:
    react.gmath.Average ticksPerSecondL -> Vgho
    react.gmath.Average tickTimeL -> YhbK
    react.gmath.Average mahL -> wMtB
    double ticksPerSecond -> APiM
    double ticksPerSecondRaw -> fMEV
    double tickTime -> bPyB
    double tickTimeRaw -> bHgr
    boolean running -> running
    boolean frozen -> mPwb
    double tickUtilizationRaw -> UKTW
    double tickUtilization -> ySyf
    double leftoverTickTime -> NOQK
    long memoryUse -> hAkd
    long memoryAllocated -> cmps
    long memoryCollected -> raLV
    long mahs -> sIyA
    int totalChunks -> qMHE
    int totalEntities -> XLPC
    int totalDrops -> fewy
    int totalTiles -> YiDy
    int totalLiving -> tENa
    int chunksLoaded -> oOQS
    int chunksUnloaded -> fvyn
    react.surge.server.WorldMonitor worldMonitor -> oNpW
    react.surge.server.TPSMonitor tpsMonitor -> eQtb
    react.surge.server.MemoryMonitor memoryMonitor -> IGtP
    java.lang.StackTraceElement[] lockStack -> JdjK
    react.glang.GMap spikes -> PebW
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> RrxA
    154:154:java.lang.String getTickName() -> maCo
    159:159:react.gmath.Average getTicksPerSecondL() -> vJJc
    164:164:double getTicksPerSecond() -> ctjF
    169:169:double getTicksPerSecondRaw() -> Uknm
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> dUwV
    184:184:react.gmath.Average getTickTimeL() -> HehM
    189:189:double getTickTime() -> bHAC
    194:194:double getTickTimeRaw() -> Aquw
    199:199:double getTickUtilizationRaw() -> yKAx
    204:204:double getTickUtilization() -> WjEQ
    209:209:double getLeftoverTickTime() -> ebLB
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> MtxI
    219:219:long getMemoryUse() -> jiJY
    224:224:long getMemoryAllocated() -> ncwS
    229:229:long getMemoryCollected() -> RkYE
    234:234:react.gmath.Average getMahL() -> QxvQ
    239:239:long getMahs() -> pbLG
    244:244:int getTotalChunks() -> SCfy
    249:249:int getTotalEntities() -> IiOX
    254:254:int getTotalDrops() -> NpMs
    259:259:int getTotalTiles() -> FVsr
    264:264:int getTotalLiving() -> ryVJ
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> OaoR
    274:274:int getChunksLoaded() -> ArXU
    279:279:int getChunksUnloaded() -> lgBg
    284:285:void setTicksPerSecondL(react.gmath.Average) -> KUIb
    289:290:void setTickTimeL(react.gmath.Average) -> kACa
    294:295:void setMahL(react.gmath.Average) -> aKvW
    299:300:void setTicksPerSecond(double) -> RPlc
    304:305:void setTicksPerSecondRaw(double) -> sQIo
    309:310:void setTickTime(double) -> DOrx
    314:315:void setTickTimeRaw(double) -> SePs
    319:320:void setRunning(boolean) -> fdVc
    324:325:void setTickUtilizationRaw(double) -> CMQp
    329:330:void setTickUtilization(double) -> pjCl
    334:335:void setLeftoverTickTime(double) -> jpbe
    339:340:void setMemoryUse(long) -> qlfi
    344:345:void setMemoryAllocated(long) -> ejDb
    349:350:void setMemoryCollected(long) -> SSnV
    354:355:void setMahs(long) -> PcwY
    359:360:void setTotalChunks(int) -> STRl
    364:365:void setTotalEntities(int) -> lekA
    369:370:void setTotalDrops(int) -> qBVO
    374:375:void setTotalTiles(int) -> WFjf
    379:380:void setTotalLiving(int) -> ssPE
    384:385:void setChunksLoaded(int) -> rMiD
    389:390:void setChunksUnloaded(int) -> BSCK
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> KUIb
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> KUIb
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> KUIb
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> MRwi
    419:419:react.glang.GMap getSpikes() -> Lyxp
    31:31:void access$0(react.surge.server.SuperSampler,int) -> KUIb
    33:33:void access$1(react.surge.server.SuperSampler,int) -> kACa
    34:34:void access$2(react.surge.server.SuperSampler,int) -> aKvW
    32:32:void access$3(react.surge.server.SuperSampler,int) -> Kvke
    35:35:void access$4(react.surge.server.SuperSampler,int) -> NxFI
    36:36:void access$5(react.surge.server.SuperSampler,int) -> salV
    37:37:void access$6(react.surge.server.SuperSampler,int) -> VKvy
    19:19:void access$7(react.surge.server.SuperSampler,double) -> KUIb
    21:21:void access$8(react.surge.server.SuperSampler,double) -> kACa
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> KUIb
    19:19:double access$10(react.surge.server.SuperSampler) -> kACa
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> aKvW
    21:21:double access$12(react.surge.server.SuperSampler) -> Kvke
    18:18:void access$13(react.surge.server.SuperSampler,double) -> aKvW
    20:20:void access$14(react.surge.server.SuperSampler,double) -> Kvke
    24:24:void access$15(react.surge.server.SuperSampler,double) -> NxFI
    20:20:double access$16(react.surge.server.SuperSampler) -> NxFI
    25:25:void access$17(react.surge.server.SuperSampler,double) -> salV
    25:25:double access$18(react.surge.server.SuperSampler) -> salV
    26:26:void access$19(react.surge.server.SuperSampler,double) -> VKvy
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> KUIb
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> VKvy
    27:27:void access$22(react.surge.server.SuperSampler,long) -> KUIb
    28:28:void access$23(react.surge.server.SuperSampler,long) -> kACa
    29:29:void access$24(react.surge.server.SuperSampler,long) -> aKvW
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> LFja
    30:30:void access$26(react.surge.server.SuperSampler,long) -> Kvke
react.surge.server.SuperSampler$1 -> XRqS$1:
    react.surge.server.SuperSampler this$0 -> ayMi
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> KUIb
react.surge.server.SuperSampler$2 -> XRqS$2:
    react.surge.server.SuperSampler this$0 -> ayMi
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> iDGP
    106:107:void onSpike() -> XmJr
react.surge.server.SuperSampler$3 -> XRqS$3:
    react.surge.server.SuperSampler this$0 -> ayMi
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> xibp
react.surge.server.TPSMonitor -> YgUy:
    double tickTimeMS -> sBKh
    double rawTicksPerSecond -> Rtql
    react.gbench.Profiler tickProfiler -> Mmrq
    react.gbench.Profiler tickTimeProfiler -> WHlN
    boolean ticked -> BfCB
    java.lang.Thread$State lastState -> ixSq
    double actualTickTimeMS -> Sodb
    double ltt -> gOiR
    long lastTick -> RkdK
    boolean frozen -> mPwb
    java.lang.StackTraceElement[] lockedStack -> XLNb
    double lmsx -> OtWr
    23:40:void <init>() -> <init>
    void onTicked() -> iDGP
    void onSpike() -> XmJr
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> KUIb
    160:160:double getTickTimeMS() -> BljJ
    165:165:double getRawTicksPerSecond() -> nSVV
    170:170:react.gbench.Profiler getTickProfiler() -> YpMi
    175:175:boolean isTicked() -> nSUx
    180:181:void markTick() -> ryTv
    185:185:react.gbench.Profiler getTickTimeProfiler() -> XJgJ
    190:190:java.lang.Thread$State getLastState() -> gWQt
    195:195:double getActualTickTimeMS() -> rgql
    200:200:double getLtt() -> woRK
    205:205:long getLastTick() -> qmMu
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> nuYL
react.surge.server.WorldMonitor -> wCvy:
    boolean chunksChanged -> kuhR
    boolean dropChanged -> LkOR
    boolean tileChanged -> Mvbf
    boolean livingChanged -> HxTs
    boolean totalChanged -> igQq
    boolean updated -> CiEo
    int totalChunks -> qMHE
    int totalDrops -> fewy
    int totalTiles -> YiDy
    int totalLiving -> tENa
    int totalEntities -> XLPC
    int chunksLoaded -> oOQS
    int chunksUnloaded -> fvyn
    long ms -> MdSE
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> KUIb
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> kACa
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> KUIb
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> KUIb
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> KUIb
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> KUIb
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> KUIb
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> KUIb
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> KUIb
    130:131:void doUpdate() -> prnD
    135:186:void sample() -> LWmy
    190:196:void sampleTotalCount() -> iCei
    200:206:void sampleLivingCount() -> sQdA
    210:238:void sampleTileCount() -> TNyh
    242:248:void sampleDropCount() -> baUS
    252:258:void sampleChunkCount() -> Tynd
react.surge.text.PhantomSpinner -> RIPT:
    react.surge.text.ProgressSpinner s -> MnRe
    react.surge.text.ProgressSpinner c -> rrKl
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> Knng:
    java.lang.String[] chars -> EoLV
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> HfsJ
    react.surge.text.ProgressSpinner NETWORK -> wxit
    react.surge.text.ProgressSpinner CIRCLES -> lhJW
    react.surge.text.ProgressSpinner RANDOMS -> YWeO
    react.surge.text.ProgressSpinner MERGERS -> Udjd
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> QEpn
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> OHWX:
    int value() -> value
react.surge.util.Area -> TNtA:
    org.bukkit.Location location -> IYWh
    java.lang.Double radius -> opue
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> KUIb
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> inXy
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> VKvy
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> LFja
    109:109:boolean isWithin(org.bukkit.Location) -> qBSh
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> Kvke
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> KUIb
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> nBTK
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> XuYs
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> wKuE
    257:257:java.lang.Double getRadius() -> Pmdn
    268:269:void setRadius(java.lang.Double) -> aKvW
    278:283:org.bukkit.Location random() -> uypA
react.surge.util.Axis -> CETo:
    react.surge.util.Axis X -> THUc
    react.surge.util.Axis Y -> iERL
    react.surge.util.Axis Z -> DkkJ
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> mjpM
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> Wqxk
    29:29:org.bukkit.util.Vector negative() -> pkAW
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> XcqS:
    react.surge.util.BlastResistance BARRIER -> ptYs
    react.surge.util.BlastResistance BEDROCK -> hmBw
    react.surge.util.BlastResistance COMMAND -> jiwU
    react.surge.util.BlastResistance ENDER_PORTAL -> GSQs
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> ohfH
    react.surge.util.BlastResistance ANVIL -> mtAa
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> WcBS
    react.surge.util.BlastResistance OBSIDIAN -> pcXG
    react.surge.util.BlastResistance ENDER_CHEST -> qDXN
    react.surge.util.BlastResistance WATER -> MDCF
    react.surge.util.BlastResistance LAVA -> scns
    react.surge.util.BlastResistance STATIONARY_WATER -> UdjD
    react.surge.util.BlastResistance DRAGON_EGG -> txUH
    react.surge.util.BlastResistance ENDER_STONE -> IiwW
    react.surge.util.BlastResistance COAL_BLOCK -> KFJp
    react.surge.util.BlastResistance DIAMOND_BLOCK -> jHSk
    react.surge.util.BlastResistance EMERALD_BLOCK -> stpm
    react.surge.util.BlastResistance GOLD_BLOCK -> HVTP
    react.surge.util.BlastResistance IRON_BLOCK -> sRml
    react.surge.util.BlastResistance REDSTONE_BLOCK -> GtsT
    react.surge.util.BlastResistance BRICK -> dheD
    react.surge.util.BlastResistance BRICK_STAIRS -> ixVC
    react.surge.util.BlastResistance HARD_CLAY -> CGFS
    react.surge.util.BlastResistance STONE -> TbHQ
    react.surge.util.BlastResistance SMOOTH_BRICK -> EDYl
    react.surge.util.BlastResistance SMOOTH_STAIRS -> cUAk
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> FrQW
    react.surge.util.BlastResistance STONE_SLAB2 -> MTbK
    react.surge.util.BlastResistance IRON_DOOR -> fnjl
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> iodJ
    react.surge.util.BlastResistance IRON_TRAPDOOR -> KxpA
    react.surge.util.BlastResistance MOB_SPAWNER -> ywBj
    react.surge.util.BlastResistance WEB -> nUDT
    react.surge.util.BlastResistance DISPENSER -> raPR
    react.surge.util.BlastResistance DROPPER -> BwHm
    react.surge.util.BlastResistance FURNACE -> LkSv
    react.surge.util.BlastResistance BURNING_FURNACE -> yTcG
    react.surge.util.BlastResistance BEACON -> ahOr
    react.surge.util.BlastResistance COAL_ORE -> XCbW
    react.surge.util.BlastResistance COCOA -> AcCt
    react.surge.util.BlastResistance DIAMOND_ORE -> vulT
    react.surge.util.BlastResistance EMERALD_ORE -> tESF
    react.surge.util.BlastResistance FENCE -> hmEA
    react.surge.util.BlastResistance FENCE_GATE -> bRBQ
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> RBRR
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> lFLV
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> FXaf
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> YWgh
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> JvPX
    react.surge.util.BlastResistance ACACIA_FENCE -> kJxa
    react.surge.util.BlastResistance BIRCH_FENCE -> RdSg
    react.surge.util.BlastResistance DARK_OAK_FENCE -> WscT
    react.surge.util.BlastResistance SPRUCE_FENCE -> eAVd
    react.surge.util.BlastResistance JUNGLE_FENCE -> QrQq
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> uafk
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> YpxD
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> raOY
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> qDYK
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> SxYF
    react.surge.util.BlastResistance QUARTZ_STAIRS -> HEUL
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> NOVg
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> THWS
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> jagX
    react.surge.util.BlastResistance WOOD_STAIRS -> jQGH
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> SMdg
    react.surge.util.BlastResistance ACACIA_DOOR -> tgUK
    react.surge.util.BlastResistance BIRCH_DOOR -> JmaE
    react.surge.util.BlastResistance DARK_OAK_DOOR -> eIio
    react.surge.util.BlastResistance SPRUCE_DOOR -> WbeI
    react.surge.util.BlastResistance JUNGLE_DOOR -> sRsF
    react.surge.util.BlastResistance GOLD_ORE -> mQar
    react.surge.util.BlastResistance HOPPER -> oNwV
    react.surge.util.BlastResistance IRON_ORE -> EMOt
    react.surge.util.BlastResistance LAPIS_BLOCK -> RdWM
    react.surge.util.BlastResistance LAPIS_ORE -> kSlb
    react.surge.util.BlastResistance QUARTZ_ORE -> NNyO
    react.surge.util.BlastResistance REDSTONE_ORE -> YFhU
    react.surge.util.BlastResistance TRAP_DOOR -> AYtD
    react.surge.util.BlastResistance WOOD -> iNGP
    react.surge.util.BlastResistance CHEST -> FrVh
    react.surge.util.BlastResistance TRAPPED_CHEST -> YhjE
    react.surge.util.BlastResistance WORKBENCH -> HUvl
    react.surge.util.BlastResistance CAULDRON -> AbgA
    react.surge.util.BlastResistance LOG -> wWNa
    react.surge.util.BlastResistance LOG_2 -> mIQI
    react.surge.util.BlastResistance BOOKSHELF -> Wbcf
    react.surge.util.BlastResistance BANNER -> AQeK
    react.surge.util.BlastResistance STANDING_BANNER -> wVnM
    react.surge.util.BlastResistance WALL_BANNER -> vTLK
    react.surge.util.BlastResistance JACK_O_LANTERN -> gOob
    react.surge.util.BlastResistance MELON_BLOCK -> KhSE
    react.surge.util.BlastResistance SKULL -> VqBn
    react.surge.util.BlastResistance PUMPKIN -> eQyj
    react.surge.util.BlastResistance SIGN -> lVmc
    react.surge.util.BlastResistance SIGN_POST -> nCap
    react.surge.util.BlastResistance WALL_SIGN -> nedw
    react.surge.util.BlastResistance QUARTZ_BLOCK -> togT
    react.surge.util.BlastResistance NOTE_BLOCK -> tokF
    react.surge.util.BlastResistance RED_SANDSTONE -> Yymu
    react.surge.util.BlastResistance SANDSTONE -> iUyA
    react.surge.util.BlastResistance WOOL -> RAuF
    react.surge.util.BlastResistance MONSTER_EGG -> Iana
    react.surge.util.BlastResistance RAILS -> wyUP
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> sdXE
    react.surge.util.BlastResistance DETECTOR_RAIL -> WADr
    react.surge.util.BlastResistance POWERED_RAIL -> wEoC
    react.surge.util.BlastResistance CLAY -> qnpv
    react.surge.util.BlastResistance DIRT -> JCOq
    react.surge.util.BlastResistance GRASS -> wgqm
    react.surge.util.BlastResistance GRAVEL -> HDxv
    react.surge.util.BlastResistance SPONGE -> dGIx
    react.surge.util.BlastResistance BREWING_STAND -> hAtI
    react.surge.util.BlastResistance STONE_BUTTON -> KqFC
    react.surge.util.BlastResistance WOOD_BUTTON -> eIju
    react.surge.util.BlastResistance CAKE_BLOCK -> nLVJ
    react.surge.util.BlastResistance ICE -> ywJF
    react.surge.util.BlastResistance PACKED_ICE -> rXaq
    react.surge.util.BlastResistance LEVER -> GSVl
    react.surge.util.BlastResistance MYCEL -> jPiu
    react.surge.util.BlastResistance PISTON_BASE -> PLoU
    react.surge.util.BlastResistance PISTON_EXTENSION -> knAV
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> tVWr
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> vupK
    react.surge.util.BlastResistance GOLD_PLATE -> fgBC
    react.surge.util.BlastResistance IRON_PLATE -> VWSJ
    react.surge.util.BlastResistance STONE_PLATE -> AYwK
    react.surge.util.BlastResistance WOOD_PLATE -> ekne
    react.surge.util.BlastResistance SAND -> RmJA
    react.surge.util.BlastResistance SOUL_SAND -> oiJs
    react.surge.util.BlastResistance CACTUS -> aVpu
    react.surge.util.BlastResistance LADDER -> UurQ
    react.surge.util.BlastResistance NETHERRACK -> ubOX
    react.surge.util.BlastResistance GLASS -> FPWN
    react.surge.util.BlastResistance THIN_GLASS -> lqFq
    react.surge.util.BlastResistance STAINED_GLASS -> BCid
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> yUIi
    react.surge.util.BlastResistance GLOWSTONE -> JnEg
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> KgwD
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> BULL
    react.surge.util.BlastResistance SEA_LANTERN -> ipNf
    react.surge.util.BlastResistance BED_BLOCK -> WIWL
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> SpNy
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> PxGv
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> xkXN
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> QHFf
    react.surge.util.BlastResistance LEAVES -> wyUw
    react.surge.util.BlastResistance LEAVES_2 -> tpMS
    react.surge.util.BlastResistance SNOW -> cfLb
    int br -> Uute
    react.surge.util.BlastResistance[] ENUM$VALUES -> Nhot
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> cmLH
    175:190:int get(org.bukkit.Material) -> KUIb
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> ymAi:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> VKvy
react.surge.util.C -> PulJ:
    react.surge.util.C BLACK -> kvSv
    react.surge.util.C DARK_BLUE -> aNdJ
    react.surge.util.C DARK_GREEN -> xbfb
    react.surge.util.C DARK_AQUA -> qxDq
    react.surge.util.C DARK_RED -> KyWj
    react.surge.util.C DARK_PURPLE -> JSpn
    react.surge.util.C GOLD -> DlSQ
    react.surge.util.C GRAY -> WAFK
    react.surge.util.C DARK_GRAY -> dhlo
    react.surge.util.C BLUE -> diNO
    react.surge.util.C GREEN -> mYvB
    react.surge.util.C AQUA -> ChoT
    react.surge.util.C RED -> GlkP
    react.surge.util.C LIGHT_PURPLE -> lhUU
    react.surge.util.C YELLOW -> ULAa
    react.surge.util.C WHITE -> JCPj
    react.surge.util.C MAGIC -> mYtn
    react.surge.util.C BOLD -> iNJJ
    react.surge.util.C STRIKETHROUGH -> ywJy
    react.surge.util.C UNDERLINE -> wxtT
    react.surge.util.C ITALIC -> wFQO
    react.surge.util.C RESET -> DdEe
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> WIXo
    char code -> dqaa
    boolean isFormat -> dFlw
    java.lang.String toString -> PVGB
    java.util.Map BY_ID -> ohpG
    java.util.Map BY_CHAR -> TPos
    java.util.Map dyeChatMap -> yvnA
    java.util.Map chatHexMap -> fnwH
    java.util.Map dyeHexMap -> MvpU
    int[] $SWITCH_TABLE$surge$util$C -> xskE
    react.surge.util.C[] ENUM$VALUES -> cfNK
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> aMSH
    378:378:java.lang.String hex() -> jFkn
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> LFja
    434:442:react.surge.util.C getByChar(java.lang.String) -> rMiD
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> kACa
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> KUIb
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> kACa
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> aKvW
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> BSCK
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> BIpa
    560:578:java.lang.String generateColorTable() -> OQPX
    588:588:org.bukkit.ChatColor chatColor() -> AHGN
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> VKvy
    632:679:byte getItemMeta() -> OsSd
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> tThl
react.surge.util.C$1 -> PulJ$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> PulJ$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> PulJ$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> PulJ$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> PulJ$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> PulJ$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> PulJ$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> PulJ$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> PulJ$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> PulJ$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> PulJ$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> PulJ$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> PulJ$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> PulJ$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> PulJ$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> PulJ$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> PulJ$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> PulJ$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> PulJ$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> PulJ$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> PulJ$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> PulJ$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> brPH:
    double number -> gGgD
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> dwbd
    23:25:react.surge.util.CDou add(double) -> hrlm
    30:32:react.surge.util.CDou sub(double) -> QEYC
    37:37:double get() -> get
    42:48:void circ() -> WjJR
react.surge.util.CMD -> PdjX:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> bHwp
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> HDKb
    51:53:void execute(org.bukkit.command.CommandSender) -> aKvW
    60:77:void execute() -> execute
react.surge.util.CNum -> CNEq:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> BIpa
    23:25:react.surge.util.CNum add(int) -> tnBY
    30:32:react.surge.util.CNum sub(int) -> aejJ
    37:37:int get() -> get
    42:48:void circ() -> WjJR
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> ofbh
react.surge.util.Chunks -> DbHt:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> STON
    33:40:react.glang.GList getLoadedChunks() -> AXfy
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> kACa
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> KUIb
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> KUIb
    98:98:boolean unload(org.bukkit.Chunk) -> KTiT
    114:124:int unload(react.glang.GList,boolean,boolean) -> KUIb
    138:138:int unload(react.glang.GList,boolean) -> KUIb
    150:150:int unload(react.glang.GList) -> CVAn
    166:166:boolean isLoaded(java.lang.String,int,int) -> KUIb
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> aKvW
    201:205:void load(react.glang.GList) -> fdVc
react.surge.util.Cuboid -> MdSE:
    java.lang.String worldName -> JSta
    int x1 -> OlVJ
    int y1 -> tonS
    int z1 -> eksc
    int x2 -> fxIB
    int y2 -> JvXk
    int z2 -> GJkf
    int[] $SWITCH_TABLE$surge$util$Axis -> SMml
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> TQQl
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> KUIb
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> aKvW
    93:93:boolean hasPlayers() -> hAFT
    98:110:react.glang.GList getPlayers() -> qmPU
    115:166:react.glang.GList getEntities() -> Knvm
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> kQeY
    287:287:org.bukkit.Location getLowerNE() -> Cxag
    298:298:org.bukkit.Location getUpperSW() -> ECRo
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> KgHD
    348:348:int getSizeY() -> rODU
    358:358:int getSizeZ() -> yRwD
    368:368:int getLowerX() -> tKxL
    378:378:int getLowerY() -> cJhR
    388:388:int getLowerZ() -> uynr
    398:398:int getUpperX() -> LPWo
    408:408:int getUpperY() -> ydYG
    418:418:int getUpperZ() -> lxEl
    428:438:org.bukkit.block.Block[] corners() -> mjFy
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> KUIb
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> kACa
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> aKvW
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> Kvke
    546:546:boolean contains(int,int,int) -> NxFI
    558:558:boolean contains(org.bukkit.block.Block) -> LFja
    570:570:boolean contains(org.bukkit.Location) -> RPlc
    580:580:int volume() -> Jcao
    591:601:byte averageLightLevel() -> bifj
    612:612:react.surge.util.Cuboid contract() -> PLAh
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> KUIb
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> kACa
    708:715:boolean containsOnly(org.bukkit.Material) -> kACa
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> KUIb
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> salV
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> KUIb
    786:800:java.util.List getChunks() -> LaWe
    815:819:void fill(int,byte) -> KUIb
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> UImy
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> gqFt
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> Qgum
react.surge.util.Cuboid$1 -> MdSE$1:
    react.surge.util.Cuboid this$0 -> OuFE
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> qBSh
    1:1:java.lang.Object onAdapt(java.lang.Object) -> VKvy
react.surge.util.Cuboid$CuboidDirection -> MdSE$KUIb:
    react.surge.util.Cuboid$CuboidDirection North -> KVvL
    react.surge.util.Cuboid$CuboidDirection East -> MUML
    react.surge.util.Cuboid$CuboidDirection South -> gqxb
    react.surge.util.Cuboid$CuboidDirection West -> QXhO
    react.surge.util.Cuboid$CuboidDirection Up -> Dccm
    react.surge.util.Cuboid$CuboidDirection Down -> gOuf
    react.surge.util.Cuboid$CuboidDirection Horizontal -> wFTB
    react.surge.util.Cuboid$CuboidDirection Vertical -> pdBl
    react.surge.util.Cuboid$CuboidDirection Both -> xYwS
    react.surge.util.Cuboid$CuboidDirection Unknown -> rOtp
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> TQQl
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> Rlky
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> Hekx
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> Qgum
react.surge.util.Cuboid$CuboidIterator -> MdSE$kACa:
    org.bukkit.World w -> rXed
    int baseX -> MCkJ
    int baseY -> XTlK
    int baseZ -> BDMW
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> JLDX
    int sizeY -> celc
    int sizeZ -> oXNP
    react.surge.util.Cuboid this$0 -> OuFE
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> Btts:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> vcWb:
    react.glang.GList buffer -> RmNO
    boolean dbg -> oXNT
    int kf -> lhYo
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> Kvke
    41:49:void l(java.lang.Object,java.lang.String) -> kACa
    53:54:void s(java.lang.Object,java.lang.String) -> aKvW
    58:69:void cdb() -> Bllx
    73:79:void v(java.lang.Object,java.lang.String) -> Kvke
    83:84:void w(java.lang.Object,java.lang.String) -> NxFI
    88:89:void f(java.lang.Object,java.lang.String) -> salV
    93:106:void l(java.lang.String) -> tnBY
    110:117:void s(java.lang.String) -> aejJ
    121:135:void v(java.lang.String) -> ofbh
    139:146:void w(java.lang.String) -> kQeY
    150:157:void f(java.lang.String) -> pXct
react.surge.util.DMSRequire -> eafh:
    react.surge.util.DMSRequirement value() -> RsjV
react.surge.util.DMSRequirement -> fKXN:
    react.surge.util.DMSRequirement SQL -> oiRl
    react.surge.util.DMSRequirement[] ENUM$VALUES -> rPYO
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> dNBp:
    react.surge.util.Depend VAULT -> pdFH
    react.surge.util.Depend FAWE -> gPYc
    react.surge.util.Depend WORLDEDIT -> mIYs
    react.surge.util.Depend PROTOLIB -> Xeon
    react.surge.util.Depend CITIZENS -> wNgB
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> FjMm
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> ArRj:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> CooV
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> NESX:
    react.surge.util.DimensionFace X -> ARMT
    react.surge.util.DimensionFace Y -> mQiy
    react.surge.util.DimensionFace Z -> PUhF
    react.surge.util.DimensionFace[] ENUM$VALUES -> OReO
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> GscR:
    react.surge.util.Direction U -> qMVV
    react.surge.util.Direction D -> SNQE
    react.surge.util.Direction N -> pIrX
    react.surge.util.Direction S -> tpQo
    react.surge.util.Direction E -> YGPh
    react.surge.util.Direction W -> nfOs
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> OlWn
    int[] $SWITCH_TABLE$surge$util$Direction -> vnGU
    react.surge.util.Direction[] ENUM$VALUES -> kLEF
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> bGcw
    61:61:int x() -> Pdrn
    66:66:int y() -> bOuC
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> Qpfx
    81:81:react.glang.GList news() -> rgsk
    86:86:react.glang.GList udnews() -> vkoi
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> DOrx
    115:147:react.surge.util.Direction fromByte(byte) -> LFja
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> ebOg
react.surge.util.DynamicConfiguration -> SvfA:
react.surge.util.DynamicTracker -> JQwo:
react.surge.util.Embedded -> jheV:
    react.glang.GList get() -> ELBx
    void add(java.lang.Object) -> add
react.surge.util.FU -> QqBi:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> KUIb
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> kACa
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> NxFI
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> salV
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> funQ:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> TyWk
react.surge.util.Health -> VoPa:
    double hp -> FinB
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> FEtS
    41:41:double getHearts() -> Aiia
    51:51:double getHalfHearts() -> jXPV
    61:61:int getFlatHalfHearts() -> JuHA
react.surge.util.IO -> eQHi:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> tmtp:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> KUIb
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> KUIb
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> KUIb
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> KUIb
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> KUIb
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> kACa
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> aKvW
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> Kvke
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> KUIb
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> KUIb
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> KUIb
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> KUIb
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> NxFI
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> salV
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> VKvy
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> LFja
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> qBSh
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> KUIb
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> wKuE
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> RPlc
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> KUIb
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> KUIb
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> kACa
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> KUIb
react.surge.util.MSound -> RbcS:
    react.surge.util.MSound AMBIENCE_CAVE -> gXic
    react.surge.util.MSound AMBIENCE_RAIN -> FGkF
    react.surge.util.MSound AMBIENCE_THUNDER -> Uuwa
    react.surge.util.MSound ANVIL_BREAK -> qoXQ
    react.surge.util.MSound ANVIL_LAND -> EoYt
    react.surge.util.MSound ANVIL_USE -> yULm
    react.surge.util.MSound ARROW_HIT -> gOxH
    react.surge.util.MSound BURP -> rijO
    react.surge.util.MSound CHEST_CLOSE -> CWrt
    react.surge.util.MSound CHEST_OPEN -> yemS
    react.surge.util.MSound CLICK -> MnaI
    react.surge.util.MSound DOOR_CLOSE -> ExKk
    react.surge.util.MSound DOOR_OPEN -> DItB
    react.surge.util.MSound DRINK -> Jdvr
    react.surge.util.MSound EAT -> xHvg
    react.surge.util.MSound EXPLODE -> BwSf
    react.surge.util.MSound FALL_BIG -> Rlnp
    react.surge.util.MSound FALL_SMALL -> rPWg
    react.surge.util.MSound FIRE -> ioov
    react.surge.util.MSound FIRE_IGNITE -> MDNO
    react.surge.util.MSound FIZZ -> IQSg
    react.surge.util.MSound FUSE -> rPWc
    react.surge.util.MSound GLASS -> Glql
    react.surge.util.MSound HURT_FLESH -> wplI
    react.surge.util.MSound ITEM_BREAK -> THdU
    react.surge.util.MSound ITEM_PICKUP -> vnIe
    react.surge.util.MSound LAVA -> GJnp
    react.surge.util.MSound LAVA_POP -> BMBN
    react.surge.util.MSound LEVEL_UP -> uHbi
    react.surge.util.MSound MINECART_BASE -> Okxg
    react.surge.util.MSound MINECART_INSIDE -> pcfm
    react.surge.util.MSound NOTE_BASS -> jQSo
    react.surge.util.MSound NOTE_PIANO -> oaDY
    react.surge.util.MSound NOTE_BASS_DRUM -> nCmg
    react.surge.util.MSound NOTE_STICKS -> QXlK
    react.surge.util.MSound NOTE_BASS_GUITAR -> cvqj
    react.surge.util.MSound NOTE_SNARE_DRUM -> tMng
    react.surge.util.MSound NOTE_PLING -> Cqfa
    react.surge.util.MSound ORB_PICKUP -> PfkD
    react.surge.util.MSound PISTON_EXTEND -> TbVU
    react.surge.util.MSound PISTON_RETRACT -> nvrG
    react.surge.util.MSound PORTAL -> Mvsg
    react.surge.util.MSound PORTAL_TRAVEL -> MwTi
    react.surge.util.MSound PORTAL_TRIGGER -> OIts
    react.surge.util.MSound SHOOT_ARROW -> MDOr
    react.surge.util.MSound SPLASH -> huaB
    react.surge.util.MSound SPLASH2 -> jsYa
    react.surge.util.MSound STEP_GRASS -> FHNm
    react.surge.util.MSound STEP_GRAVEL -> uPtp
    react.surge.util.MSound STEP_LADDER -> WQob
    react.surge.util.MSound STEP_SAND -> VqQC
    react.surge.util.MSound STEP_SNOW -> XTsE
    react.surge.util.MSound STEP_STONE -> YaHN
    react.surge.util.MSound STEP_WOOD -> KqQV
    react.surge.util.MSound STEP_WOOL -> Dtlf
    react.surge.util.MSound SWIM -> oFrt
    react.surge.util.MSound WATER -> oaGM
    react.surge.util.MSound WOOD_CLICK -> ARPq
    react.surge.util.MSound BAT_DEATH -> MDSD
    react.surge.util.MSound BAT_HURT -> FXpW
    react.surge.util.MSound BAT_IDLE -> Otlc
    react.surge.util.MSound BAT_LOOP -> OckS
    react.surge.util.MSound BAT_TAKEOFF -> RKQu
    react.surge.util.MSound BLAZE_BREATH -> LAOr
    react.surge.util.MSound BLAZE_DEATH -> LcRu
    react.surge.util.MSound BLAZE_HIT -> jbVo
    react.surge.util.MSound CAT_HISS -> oywA
    react.surge.util.MSound CAT_HIT -> ekxa
    react.surge.util.MSound CAT_MEOW -> NWuQ
    react.surge.util.MSound CAT_PURR -> pthu
    react.surge.util.MSound CAT_PURREOW -> ipUb
    react.surge.util.MSound CHICKEN_IDLE -> AlEQ
    react.surge.util.MSound CHICKEN_HURT -> BMEQ
    react.surge.util.MSound CHICKEN_EGG_POP -> yTpF
    react.surge.util.MSound CHICKEN_WALK -> rHKm
    react.surge.util.MSound COW_IDLE -> oWsj
    react.surge.util.MSound COW_HURT -> xbmw
    react.surge.util.MSound COW_WALK -> xcNy
    react.surge.util.MSound CREEPER_HISS -> iFBc
    react.surge.util.MSound CREEPER_DEATH -> IHer
    react.surge.util.MSound ENDERDRAGON_DEATH -> ipTn
    react.surge.util.MSound ENDERDRAGON_GROWL -> jjff
    react.surge.util.MSound ENDERDRAGON_HIT -> xRLv
    react.surge.util.MSound ENDERDRAGON_WINGS -> ioso
    react.surge.util.MSound ENDERMAN_DEATH -> nvsK
    react.surge.util.MSound ENDERMAN_HIT -> drHV
    react.surge.util.MSound ENDERMAN_IDLE -> IPve
    react.surge.util.MSound ENDERMAN_TELEPORT -> XTrU
    react.surge.util.MSound ENDERMAN_SCREAM -> NiWn
    react.surge.util.MSound ENDERMAN_STARE -> hucA
    react.surge.util.MSound GHAST_SCREAM -> yoCR
    react.surge.util.MSound GHAST_SCREAM2 -> OAfn
    react.surge.util.MSound GHAST_CHARGE -> mQmV
    react.surge.util.MSound GHAST_DEATH -> nCqo
    react.surge.util.MSound GHAST_FIREBALL -> CFwP
    react.surge.util.MSound GHAST_MOAN -> xcRb
    react.surge.util.MSound IRONGOLEM_DEATH -> WQqf
    react.surge.util.MSound IRONGOLEM_HIT -> uYhU
    react.surge.util.MSound IRONGOLEM_THROW -> FYSI
    react.surge.util.MSound IRONGOLEM_WALK -> gYQW
    react.surge.util.MSound MAGMACUBE_WALK -> uaxk
    react.surge.util.MSound MAGMACUBE_WALK2 -> PfpH
    react.surge.util.MSound MAGMACUBE_JUMP -> BDTa
    react.surge.util.MSound PIG_IDLE -> xlCW
    react.surge.util.MSound PIG_DEATH -> GJtC
    react.surge.util.MSound PIG_WALK -> jQWt
    react.surge.util.MSound SHEEP_IDLE -> QGok
    react.surge.util.MSound SHEEP_SHEAR -> ihHR
    react.surge.util.MSound SHEEP_WALK -> gGne
    react.surge.util.MSound SILVERFISH_HIT -> dWwX
    react.surge.util.MSound SILVERFISH_KILL -> RlvV
    react.surge.util.MSound SILVERFISH_IDLE -> CWxF
    react.surge.util.MSound SILVERFISH_WALK -> vmkf
    react.surge.util.MSound SKELETON_IDLE -> IHhP
    react.surge.util.MSound SKELETON_DEATH -> xQne
    react.surge.util.MSound SKELETON_HURT -> YGVJ
    react.surge.util.MSound SKELETON_WALK -> grar
    react.surge.util.MSound SLIME_ATTACK -> cUTE
    react.surge.util.MSound SLIME_WALK -> vKhk
    react.surge.util.MSound SLIME_WALK2 -> Qiqb
    react.surge.util.MSound SPIDER_IDLE -> Bnhj
    react.surge.util.MSound SPIDER_DEATH -> NXXd
    react.surge.util.MSound SPIDER_WALK -> eAhH
    react.surge.util.MSound WITHER_DEATH -> kSyX
    react.surge.util.MSound WITHER_HURT -> QGoU
    react.surge.util.MSound WITHER_IDLE -> oGTd
    react.surge.util.MSound WITHER_SHOOT -> drIn
    react.surge.util.MSound WITHER_SPAWN -> ioyd
    react.surge.util.MSound WOLF_BARK -> dqlL
    react.surge.util.MSound WOLF_DEATH -> UnQc
    react.surge.util.MSound WOLF_GROWL -> EDoT
    react.surge.util.MSound WOLF_HOWL -> VXBl
    react.surge.util.MSound WOLF_HURT -> QQDF
    react.surge.util.MSound WOLF_PANT -> QPcG
    react.surge.util.MSound WOLF_SHAKE -> pdMk
    react.surge.util.MSound WOLF_WALK -> YFwk
    react.surge.util.MSound WOLF_WHINE -> liCe
    react.surge.util.MSound ZOMBIE_METAL -> NWyy
    react.surge.util.MSound ZOMBIE_WOOD -> LATL
    react.surge.util.MSound ZOMBIE_WOODBREAK -> Xnhy
    react.surge.util.MSound ZOMBIE_IDLE -> pdMs
    react.surge.util.MSound ZOMBIE_DEATH -> daKl
    react.surge.util.MSound ZOMBIE_HURT -> DRmo
    react.surge.util.MSound ZOMBIE_INFECT -> QaeL
    react.surge.util.MSound ZOMBIE_UNFECT -> OAlJ
    react.surge.util.MSound ZOMBIE_REMEDY -> rbBu
    react.surge.util.MSound ZOMBIE_WALK -> SxlW
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> bIcQ
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> uQYj
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> JUAO
    react.surge.util.MSound ZOMBIE_PIG_HURT -> MLhH
    react.surge.util.MSound DIG_WOOL -> xJAb
    react.surge.util.MSound DIG_GRASS -> Ewrd
    react.surge.util.MSound DIG_GRAVEL -> OtoM
    react.surge.util.MSound DIG_SAND -> dWxK
    react.surge.util.MSound DIG_SNOW -> tNUx
    react.surge.util.MSound DIG_STONE -> lOOf
    react.surge.util.MSound DIG_WOOD -> oWxI
    react.surge.util.MSound FIREWORK_BLAST -> FQCd
    react.surge.util.MSound FIREWORK_BLAST2 -> qfnr
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> OdON
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> tWGK
    react.surge.util.MSound FIREWORK_TWINKLE -> TIKL
    react.surge.util.MSound FIREWORK_TWINKLE2 -> sufH
    react.surge.util.MSound FIREWORK_LAUNCH -> HNYF
    react.surge.util.MSound SUCCESSFUL_HIT -> XexE
    react.surge.util.MSound HORSE_ANGRY -> hKRv
    react.surge.util.MSound HORSE_ARMOR -> Glwh
    react.surge.util.MSound HORSE_BREATHE -> raaa
    react.surge.util.MSound HORSE_DEATH -> SVha
    react.surge.util.MSound HORSE_GALLOP -> uaxv
    react.surge.util.MSound HORSE_HIT -> ShKP
    react.surge.util.MSound HORSE_IDLE -> XwYq
    react.surge.util.MSound HORSE_JUMP -> vnRP
    react.surge.util.MSound HORSE_LAND -> ExWF
    react.surge.util.MSound HORSE_SADDLE -> seIJ
    react.surge.util.MSound HORSE_SOFT -> mQtj
    react.surge.util.MSound HORSE_WOOD -> mIeC
    react.surge.util.MSound DONKEY_ANGRY -> LlJX
    react.surge.util.MSound DONKEY_DEATH -> oqnK
    react.surge.util.MSound DONKEY_HIT -> orNj
    react.surge.util.MSound DONKEY_IDLE -> knRn
    react.surge.util.MSound HORSE_SKELETON_DEATH -> Guko
    react.surge.util.MSound HORSE_SKELETON_HIT -> ItCK
    react.surge.util.MSound HORSE_SKELETON_IDLE -> blIY
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> oqmW
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> Pwuk
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> RCGp
    react.surge.util.MSound VILLAGER_DEATH -> ORoe
    react.surge.util.MSound VILLAGER_HAGGLE -> yMFv
    react.surge.util.MSound VILLAGER_HIT -> orMt
    react.surge.util.MSound VILLAGER_IDLE -> gGrb
    react.surge.util.MSound VILLAGER_NO -> yfYD
    react.surge.util.MSound VILLAGER_YES -> wOQN
    java.lang.String pre19sound -> RSff
    java.lang.String post19sound -> YPKb
    org.bukkit.Sound resolvedSound -> cTwM
    react.surge.util.MSound[] ENUM$VALUES -> nvyi
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> Wiix
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> wLkF:
    org.bukkit.Material material -> Poco
    java.lang.Byte data -> aydn
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> hQhx
    79:80:void setData(java.lang.Byte) -> KUIb
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> gEku:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> YLqV
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> yKIm
    68:68:boolean isAnyOnline() -> wnub
    80:80:react.glang.GList inWorld(org.bukkit.World) -> DXdX
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> HCPP
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> KUIb
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> KUIb
    143:144:void disable(org.bukkit.entity.Player) -> SePs
    154:155:void enable(org.bukkit.entity.Player) -> CMQp
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> KUIb
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> kACa
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> pjCl
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> KUIb
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> jpbe
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> aKvW
    300:300:boolean canFindPlayer(java.lang.String) -> rVXx
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> hrnd
    338:345:react.glang.GList onlinePlayers() -> vcbX
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> dwbd
    368:371:void clear(org.bukkit.entity.Player) -> hrlm
    381:385:void clearEffects(org.bukkit.entity.Player) -> QEYC
    398:399:void heal(org.bukkit.entity.Player,double) -> KUIb
    409:410:void heal(org.bukkit.entity.Player) -> vseT
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> FpNA
    432:433:void resetHunger(org.bukkit.entity.Player) -> jyTT
    443:444:void kill(org.bukkit.entity.Player) -> PtyM
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> tdme
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> qJgC
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> KUIb
react.surge.util.P$1 -> gEku$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> qBSh
    1:1:java.lang.Object onAdapt(java.lang.Object) -> VKvy
react.surge.util.P$2 -> gEku$2:
    java.lang.Double val$doff -> DRnp
    org.bukkit.entity.Player val$e -> BnmN
    org.bukkit.entity.Entity[] val$result -> UUAV
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> sGxg
react.surge.util.PE -> PCKe:
    react.surge.util.PE ABSORPTION -> GeJa
    react.surge.util.PE BLINDNESS -> rQBf
    react.surge.util.PE CONFUSION -> TkOi
    react.surge.util.PE DAMAGE_RESISTANCE -> cLgT
    react.surge.util.PE FAST_DIGGING -> JwDq
    react.surge.util.PE FIRE_RESISTANCE -> sJsk
    react.surge.util.PE GLOWING -> uHmQ
    react.surge.util.PE HARM -> GSkB
    react.surge.util.PE HEAL -> kLQe
    react.surge.util.PE HEALTH_BOOST -> xRWN
    react.surge.util.PE HUNGER -> xIfE
    react.surge.util.PE INCREASE_DAMAGE -> kDAa
    react.surge.util.PE INVISIBILITY -> WJHU
    react.surge.util.PE JUMP -> UKrI
    react.surge.util.PE LEVITATION -> fftW
    react.surge.util.PE LUCK -> QQHS
    react.surge.util.PE NIGHT_VISION -> WQwv
    react.surge.util.PE POISON -> cnma
    react.surge.util.PE REGENERATION -> IRAl
    react.surge.util.PE SATURATION -> PDsQ
    react.surge.util.PE SLOW -> Dlds
    react.surge.util.PE SLOW_DIGGING -> lhfS
    react.surge.util.PE SPEED -> ixnl
    react.surge.util.PE UNLUCK -> rYUw
    react.surge.util.PE WATER_BREATHING -> UfEh
    react.surge.util.PE WEAKNESS -> svLT
    react.surge.util.PE WITHER -> HEmO
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> KUIb
    144:144:react.surge.util.PE d(int) -> pXct
    156:156:react.surge.util.PE a(int) -> TyWk
    166:166:org.bukkit.potion.PotionEffect c() -> Rbkm
    177:178:void c(org.bukkit.entity.LivingEntity) -> salV
    182:183:void crm(org.bukkit.entity.LivingEntity) -> VKvy
    187:188:void rm(org.bukkit.entity.LivingEntity) -> LFja
react.surge.util.ParticleEffect -> WXaD:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> Hgom
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> hlye
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> EUtE
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> jsaH
    react.surge.util.ParticleEffect WATER_BUBBLE -> IIOO
    react.surge.util.ParticleEffect WATER_SPLASH -> giwH
    react.surge.util.ParticleEffect WATER_WAKE -> Hxof
    react.surge.util.ParticleEffect SUSPENDED -> wFac
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> FXwK
    react.surge.util.ParticleEffect CRIT -> aqVj
    react.surge.util.ParticleEffect CRIT_MAGIC -> jtAr
    react.surge.util.ParticleEffect SMOKE_NORMAL -> QsJU
    react.surge.util.ParticleEffect SMOKE_LARGE -> fUrE
    react.surge.util.ParticleEffect SPELL -> QHUi
    react.surge.util.ParticleEffect SPELL_INSTANT -> RCIA
    react.surge.util.ParticleEffect SPELL_MOB -> fgTS
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> kmqr
    react.surge.util.ParticleEffect SPELL_WITCH -> elbY
    react.surge.util.ParticleEffect DRIP_WATER -> mATc
    react.surge.util.ParticleEffect DRIP_LAVA -> FGuj
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> mtYW
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> jHlW
    react.surge.util.ParticleEffect TOWN_AURA -> GSjX
    react.surge.util.ParticleEffect NOTE -> mIdv
    react.surge.util.ParticleEffect PORTAL -> ReLT
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> bbwg
    react.surge.util.ParticleEffect FLAME -> Dlcy
    react.surge.util.ParticleEffect LAVA -> GBkQ
    react.surge.util.ParticleEffect FOOTSTEP -> kUEK
    react.surge.util.ParticleEffect CLOUD -> Ibcm
    react.surge.util.ParticleEffect REDSTONE -> WlNH
    react.surge.util.ParticleEffect SNOWBALL -> OJcK
    react.surge.util.ParticleEffect SNOW_SHOVEL -> gQIU
    react.surge.util.ParticleEffect SLIME -> cMML
    react.surge.util.ParticleEffect HEART -> ubae
    react.surge.util.ParticleEffect BARRIER -> lyjX
    react.surge.util.ParticleEffect ITEM_CRACK -> aNvP
    react.surge.util.ParticleEffect BLOCK_CRACK -> vDCR
    react.surge.util.ParticleEffect BLOCK_DUST -> aOWO
    react.surge.util.ParticleEffect WATER_DROP -> FsNK
    react.surge.util.ParticleEffect ITEM_TAKE -> bkkd
    react.surge.util.ParticleEffect MOB_APPEARANCE -> qVUh
    react.surge.util.ParticleEffect DRAGON_BREATH -> giyW
    react.surge.util.ParticleEffect END_ROD -> coQB
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> liHl
    react.surge.util.ParticleEffect SWEEP_ATTACK -> ukRa
    java.util.Map NAME_MAP -> gsLH
    java.util.Map ID_MAP -> HEoM
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> xbxq
    java.util.List properties -> HFPN
    react.surge.util.ParticleEffect[] ENUM$VALUES -> vmtg
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> yJiF
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> KUIb
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> bhnC
    557:565:react.surge.util.ParticleEffect fromId(int) -> YLqV
    577:578:boolean isWater(org.bukkit.Location) -> kbdq
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> KUIb
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> KUIb
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> KUIb
    665:681:void display(float,int,org.bukkit.Location,double) -> KUIb
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> KUIb
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> KUIb
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> KUIb
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> KUIb
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> KUIb
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> KUIb
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> KUIb
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> KUIb
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> KUIb
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> KUIb
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> KUIb
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> KUIb
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> KUIb
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> KUIb
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> WXaD$KUIb:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> WXaD$kACa:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> WXaD$aKvW:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> wEBu
    1594:1594:float getValueY() -> ELEu
    1605:1605:float getValueZ() -> NMnb
react.surge.util.ParticleEffect$OrdinaryColor -> WXaD$Kvke:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> wEBu
    1526:1526:float getValueY() -> ELEu
    1537:1537:float getValueZ() -> NMnb
react.surge.util.ParticleEffect$ParticleColor -> WXaD$NxFI:
    1383:1383:void <init>() -> <init>
    float getValueX() -> wEBu
    float getValueY() -> ELEu
    float getValueZ() -> NMnb
react.surge.util.ParticleEffect$ParticleColorException -> WXaD$salV:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> WXaD$VKvy:
    org.bukkit.Material material -> Poco
    byte data -> SEms
    int[] packetData -> NPOr
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> DYdG
    1309:1309:java.lang.String getPacketDataString() -> RRKg
react.surge.util.ParticleEffect$ParticleDataException -> WXaD$LFja:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> WXaD$qBSh:
    int version -> version
    java.lang.Class enumParticle -> sBgn
    java.lang.reflect.Constructor packetConstructor -> ynlv
    java.lang.reflect.Method getHandle -> vCaR
    java.lang.reflect.Field playerConnection -> UfFU
    java.lang.reflect.Method sendPacket -> Bwbb
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> Gunh
    float offsetX -> tVlg
    float offsetY -> UTdN
    float offsetZ -> KNwF
    float speed -> sJwf
    int amount -> lxTU
    boolean longDistance -> grjE
    react.surge.util.ParticleEffect$ParticleData data -> ynlf
    java.lang.Object packet -> qgVL
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> KTiT
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> KUIb
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> kACa
    2004:2018:void sendTo(org.bukkit.Location,double) -> kACa
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> WXaD$qBSh$KUIb:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> WXaD$qBSh$kACa:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> WXaD$qBSh$aKvW:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> WXaD$wKuE:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> bAXM
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> QQIf
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> jYoj
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> qwvX
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> kecu
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> WXaD$RPlc:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> XKBt:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> xWiy
react.surge.util.Persist -> wCyg:
react.surge.util.PluginUtil -> kQxn:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> NxFI
    81:85:void enableAll() -> hHwa
    95:99:void disable(org.bukkit.plugin.Plugin) -> salV
    106:110:void disableAll() -> RcMY
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> VKvy
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> KUIb
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> hsOl
    169:172:java.util.List getPluginNames(boolean) -> yJJw
    184:187:java.lang.String getPluginVersion(java.lang.String) -> pPSa
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> LFja
    237:316:java.util.List findByCommand(java.lang.String) -> lfIw
    337:338:void load(org.bukkit.plugin.Plugin) -> qBSh
    342:364:java.lang.String getPluginFileName(java.lang.String) -> kbfW
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> KUIb
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> wKuE
    480:484:void reloadAll() -> NMnn
    496:622:void unload(org.bukkit.plugin.Plugin) -> RPlc
react.surge.util.PoolCount -> OPiP:
react.surge.util.PoolDescriber -> tDCN:
react.surge.util.PoolNanoThrottle -> RYsB:
react.surge.util.PositionalSelector -> XKCi:
    react.glang.GSet allowedChunks -> JfJR
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> qBqO
    39:40:void addChunk(org.bukkit.Chunk) -> CVAn
    44:44:react.glang.GSet getAllowedChunks() -> OjeB
react.surge.util.Protocol -> scBW:
    react.surge.util.Protocol LATEST -> ahjm
    react.surge.util.Protocol R1_12_2 -> Khky
    react.surge.util.Protocol R1_12_2_PRE -> AlOx
    react.surge.util.Protocol R1_12_1 -> ujtY
    react.surge.util.Protocol R1_12 -> iVob
    react.surge.util.Protocol R1_11_2 -> kegM
    react.surge.util.Protocol R1_11_1 -> dquE
    react.surge.util.Protocol R1_11 -> MVAh
    react.surge.util.Protocol R1_10_2 -> qUvS
    react.surge.util.Protocol R1_10_1 -> HhTh
    react.surge.util.Protocol R1_10 -> Mwcv
    react.surge.util.Protocol R1_9_4 -> FrnC
    react.surge.util.Protocol R1_9_3 -> cgAI
    react.surge.util.Protocol R1_9_2 -> dicH
    react.surge.util.Protocol R1_9_1 -> WJKf
    react.surge.util.Protocol R1_9 -> eKDC
    react.surge.util.Protocol R1_8_9 -> wGFr
    react.surge.util.Protocol R1_8_8 -> EpLR
    react.surge.util.Protocol R1_8_7 -> pRqt
    react.surge.util.Protocol R1_8_6 -> GnBN
    react.surge.util.Protocol R1_8_5 -> QHYr
    react.surge.util.Protocol R1_8_4 -> gsML
    react.surge.util.Protocol R1_8_3 -> kvhK
    react.surge.util.Protocol R1_8_2 -> kThP
    react.surge.util.Protocol R1_8_1 -> JChP
    react.surge.util.Protocol R1_8 -> nLoa
    react.surge.util.Protocol R1_7_10 -> EpOK
    react.surge.util.Protocol R1_7_9 -> DAvR
    react.surge.util.Protocol R1_7_8 -> XxEs
    react.surge.util.Protocol R1_7_7 -> YjGX
    react.surge.util.Protocol R1_7_6 -> noSm
    react.surge.util.Protocol R1_7_5 -> vUIF
    react.surge.util.Protocol R1_7_4 -> hvSb
    react.surge.util.Protocol R1_7_3 -> TQer
    react.surge.util.Protocol R1_7_2 -> djFa
    react.surge.util.Protocol R1_7_1 -> YOsc
    react.surge.util.Protocol B1_6_4 -> YOsn
    react.surge.util.Protocol B1_6_3 -> ihUA
    react.surge.util.Protocol B1_6_2 -> EomF
    react.surge.util.Protocol B1_6_1 -> ucFM
    react.surge.util.Protocol B1_5_2 -> sBko
    react.surge.util.Protocol B1_5_1 -> Mfbk
    react.surge.util.Protocol B1_5 -> dieH
    react.surge.util.Protocol B1_4_7 -> IADv
    react.surge.util.Protocol B1_4_6 -> yMOK
    react.surge.util.Protocol B1_4_5 -> SOCV
    react.surge.util.Protocol B1_4_4 -> bIlL
    react.surge.util.Protocol B1_4_2 -> HpfL
    react.surge.util.Protocol B1_3_2 -> didb
    react.surge.util.Protocol B1_3_1 -> lNxu
    react.surge.util.Protocol B1_2_5 -> KXMS
    react.surge.util.Protocol B1_2_4 -> SEqU
    react.surge.util.Protocol EARLIEST -> rbLc
    react.surge.util.Protocol UNKNOWN -> rHYj
    int version -> version
    java.lang.String packageVersion -> OtEC
    java.lang.String versionName -> bkpA
    boolean netty -> SgtR
    react.surge.util.Protocol[] ENUM$VALUES -> kTff
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> qBpi
    118:118:java.lang.String getPackageVersion() -> Smfn
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> RRIm
    142:150:react.surge.util.Protocol getProtocolVersion() -> CyBo
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> kACa
    160:160:boolean isServerVersion() -> bHFi
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> lLrh
    175:175:boolean isActualVersion() -> XllY
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> vtcc
    200:200:int getMetaVersion() -> LaYq
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> WHAA:
    react.surge.util.Protocol from -> ucEc
    react.surge.util.Protocol to -> YrVt
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> iemK
    21:21:react.surge.util.Protocol getTo() -> vJPV
    26:26:boolean contains(react.surge.util.Protocol) -> aKvW
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> dUtw:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> cJiE
    70:70:int randomNextInt() -> mPVr
    80:80:long randomNextLong() -> klSn
    92:92:boolean isWithin(double) -> vseT
    104:104:boolean isWithin(int) -> rVXx
    116:116:boolean isWithin(long) -> sQIo
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> FpNA
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> VUGv
react.surge.util.RawEvent -> sjrI:
react.surge.util.RayTrace -> sYor:
    org.bukkit.Location start -> HyWb
    org.bukkit.util.Vector direction -> ynpa
    java.lang.Double maxDistance -> nUcO
    java.lang.Double distanceCovered -> ayqE
    java.lang.Double step -> sdrX
    java.lang.Boolean stop -> lFka
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> lMTO
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> sGxg
    89:89:org.bukkit.Location getStart() -> WYHm
    94:95:void setStart(org.bukkit.Location) -> HCPP
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> qnDl
    114:115:void setMaxDistance(java.lang.Double) -> Kvke
    119:119:java.lang.Double getDistanceCovered() -> NMnC
    124:125:void setDistanceCovered(java.lang.Double) -> NxFI
    129:129:java.lang.Double getStep() -> VDdS
    134:135:void setStep(java.lang.Double) -> salV
react.surge.util.ReflectionUtils -> pXvx:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> KUIb
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> KUIb
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> KUIb
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> KUIb
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> KUIb
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> KUIb
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> KUIb
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> KUIb
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> KUIb
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> KUIb
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> KUIb
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> KUIb
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> KUIb
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> KUIb
react.surge.util.ReflectionUtils$DataType -> pXvx$KUIb:
    react.surge.util.ReflectionUtils$DataType BYTE -> ItMG
    react.surge.util.ReflectionUtils$DataType SHORT -> KrCD
    react.surge.util.ReflectionUtils$DataType INTEGER -> TcKE
    react.surge.util.ReflectionUtils$DataType LONG -> XoVf
    react.surge.util.ReflectionUtils$DataType CHARACTER -> Eoov
    react.surge.util.ReflectionUtils$DataType FLOAT -> Iskt
    react.surge.util.ReflectionUtils$DataType DOUBLE -> aGNG
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> OBYX
    java.util.Map CLASS_MAP -> EyCF
    java.lang.Class primitive -> XMTP
    java.lang.Class reference -> SqId
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> HxxJ
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> lECN
    704:704:java.lang.Class getReference() -> EdvP
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> kACa
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> aKvW
    741:742:java.lang.Class getReference(java.lang.Class) -> Kvke
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> KUIb
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> kACa
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> kACa
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> aKvW
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> KUIb
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> pXvx$kACa:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> JelT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> Ocyi
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> hBng
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> QapC
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> BMUd
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> xIlx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> susM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> aFkH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> jbgm
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> KFmE
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> hBnT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> TbiR
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> tOBm
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> eRwd
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> BLsq
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> oXeG
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> bdAs
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> jAEY
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> wWkX
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> EyBH
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> NGhS
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> tKqe:
    void refresh() -> refresh
react.surge.util.SQLOperation -> vkik:
    react.surge.util.SQLOperation LOAD -> VGPG
    react.surge.util.SQLOperation SAVE -> FPrI
    react.surge.util.SQLOperation[] ENUM$VALUES -> IQkE
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> dDra:
    react.surge.util.ServerState START -> SqJp
    react.surge.util.ServerState ENABLE -> UwPy
    react.surge.util.ServerState DISABLE -> aFmr
    react.surge.util.ServerState STOP -> bcdI
    react.surge.util.ServerState RUNNING -> PhAx
    react.surge.util.ServerState[] ENUM$VALUES -> ahpp
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> wTyr:
    org.bukkit.Location location -> IYWh
    org.bukkit.util.Vector offset -> HNhL
    org.bukkit.util.Vector size -> TcMI
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> CVAn
    90:94:org.bukkit.Location randomLocation() -> xifx
    104:104:org.bukkit.Location randomSurface() -> QpjF
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> uypT
    129:129:org.bukkit.util.Vector getSize() -> aEFo
react.surge.util.SnowLevel -> JIhl:
    byte level -> bRas
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> YVaQ
    51:52:void setLevel(byte) -> qBSh
react.surge.util.SuperCaller -> HCcK:
    void run() -> run
react.surge.util.T -> eQGb:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> kACa
    32:35:void stop() -> stop
react.surge.util.TXT -> vlKT:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> VKvy
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> KUIb
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> KUIb
    99:99:java.lang.String line(react.surge.util.C,int) -> KUIb
    113:113:java.lang.String underline(react.surge.util.C,int) -> kACa
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> KUIb
react.surge.util.Tag -> KoOt:
    java.lang.String value() -> value
react.surge.util.Timer -> Edly:
    long tns -> WlVY
    long cns -> jcJt
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> JRee
react.surge.util.VectorMath -> TqYg:
    int[] $SWITCH_TABLE$surge$util$Axis -> SMml
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> KiSf
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> KUIb
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> KUIb
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> kACa
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> aKvW
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> KUIb
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> kACa
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> kACa
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> aKvW
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> Kvke
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> NxFI
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> salV
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> VKvy
    111:111:double round(double,int) -> NxFI
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> KUIb
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> KUIb
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> KUIb
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> Kvke
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> NxFI
    268:268:org.bukkit.util.Vector toVector(float,float) -> KUIb
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> KUIb
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> KUIb
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> LFja
    337:340:double getSpeed(org.bukkit.util.Vector) -> qBSh
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> KUIb
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> wKuE
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> KUIb
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> kACa
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> aKvW
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> Kvke
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> RPlc
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> gqFt
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> rEvb
react.surge.util.VectorMath$1 -> TqYg$1:
    org.bukkit.util.Vector val$vector -> uHve
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> sGxg
    1:1:java.lang.Object onAdapt(java.lang.Object) -> VKvy
react.surge.util.W -> eahN:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> qBSh
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> KUIb
    75:86:org.bukkit.entity.Entity getEntity(int) -> hrnd
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> KUIb
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> KUIb
    143:143:int getChunkX(org.bukkit.block.Block) -> wKuE
    155:155:int getChunkY(org.bukkit.block.Block) -> RPlc
    168:169:void dropXp(org.bukkit.Location,int) -> kACa
    180:180:int getChunkZ(org.bukkit.block.Block) -> sGxg
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> kACa
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> KUIb
    232:239:react.glang.GList news(org.bukkit.Location) -> fdVc
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> KUIb
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> fdVc
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> nIji
    300:300:org.bukkit.World toSync(org.bukkit.World) -> qlfi
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> kbdq
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> yJJw
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> yJJw
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> wDFe
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> KUIb
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> KUIb
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> KUIb
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> KUIb
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> KUIb
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> KUIb
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> KUIb
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> KUIb
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> VUGv
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> KTiT
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> VUGv
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> aKvW
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> KUIb
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> KUIb
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> KUIb
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> KUIb
react.surge.util.W$1 -> eahN$1:
    java.lang.Double val$doff -> DRnp
    org.bukkit.entity.Entity val$e -> gQQL
    org.bukkit.entity.Entity[] val$result -> UUAV
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> sGxg
react.surge.util.Worlds -> CVWv:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> CETo
    33:33:boolean hasWorld(java.lang.String) -> eGbt
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> AHBK:
react.text.ColoredString -> pQHA:
    react.surge.util.C c -> VWpm
    java.lang.String s -> bRbi
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> eHaa
    42:43:void setC(react.surge.util.C) -> kACa
    47:47:java.lang.String getS() -> hHyY
    52:53:void setS(java.lang.String) -> pids
react.text.RTEX -> fCIk:
    react.glang.GList extras -> FYcj
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> FExi
    44:58:react.json.JSONObject toJSON() -> XlSM
react.text.RTX -> nRom:
    react.json.JSONArray base -> YXia
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> salV
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> kACa
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> KUIb
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> KUIb
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> kACa
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> aKvW
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> KUIb
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> kACa
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> aKvW
    265:265:react.json.JSONArray toJSON() -> rhYd
    276:277:void tellRawTo(org.bukkit.entity.Player) -> Kekr
react.text.RawText -> DakA:
    java.lang.String COLOR_BLACK -> THwi
    java.lang.String COLOR_DARK_BLUE -> WlUK
    java.lang.String COLOR_DARK_GREEN -> kemI
    java.lang.String COLOR_DARK_AQUA -> yfeU
    java.lang.String COLOR_DARK_RED -> ASFO
    java.lang.String COLOR_DARK_PURPLE -> HWXS
    java.lang.String COLOR_GOLD -> eRxr
    java.lang.String COLOR_GRAY -> Jvok
    java.lang.String COLOR_DARK_GRAY -> fMlG
    java.lang.String COLOR_BLUE -> uAFu
    java.lang.String COLOR_GREEN -> OJjW
    java.lang.String COLOR_AQUA -> yoUg
    java.lang.String COLOR_RED -> cLtJ
    java.lang.String COLOR_LIGHT_PURPLE -> WBBT
    java.lang.String COLOR_YELLOW -> usjL
    java.lang.String COLOR_WHITE -> nEBo
    java.lang.String COLOR_NONE -> fonn
    java.lang.String HEAD_TEXT -> pcyu
    java.lang.String HEAD_COLOR -> hdtC
    java.lang.String HEAD_BOLD -> FQSE
    java.lang.String HEAD_ITALIC -> pBXU
    java.lang.String HEAD_UNDERLINED -> vvmU
    java.lang.String HEAD_STRIKETHROUGH -> buHc
    java.lang.String HEAD_OBFUSCATED -> seVx
    java.lang.String HEAD_CLICK_EVENT -> Pxdc
    java.lang.String HEAD_HOVER_EVENT -> oXjR
    java.lang.String HEAD_ACTION -> CHLB
    java.lang.String HEAD_VALUE -> EotN
    java.lang.String HEAD_EXTRA -> wGPR
    java.lang.String HEAD_ACTION_SHOW_TEXT -> QIDO
    java.lang.String HEAD_ACTION_COMMAND -> PMqC
    java.util.ArrayList components -> KrFg
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> AXOX
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> NxFI
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> KUIb
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> KUIb
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> KUIb
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> KUIb
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> KUIb
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> KUIb
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> KUIb
    307:313:java.lang.String compile() -> OHby
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> KUIb

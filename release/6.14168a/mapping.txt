react.Config -> wegp:
    react.glang.GMap worldConfigs -> wegp
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> xiKs
    java.lang.String A_ENTITYCACHE_INTERVAL -> hamF
    java.lang.String A_COMMANDOVERRIDE_TPS -> qBSx
    java.lang.String A_REACT_REMOTE_PORT -> PAuJ
    java.lang.String A_REACT_REMOTE_ENABLED -> SurT
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> tvQa
    java.lang.String A_POOL_MAXTHREADS -> Pcwe
    java.lang.String A_POOL_SYNC_NANOS -> pYDN
    java.lang.String A_ENTITYCACHE_ENABLED -> Ujvp
    java.lang.String A_FASTLEAF_ENABLED -> CfdJ
    java.lang.String A_FASTLEAF_ONDECAY -> yIjn
    java.lang.String A_FASTLEAF_INSTANT -> iBlp
    java.lang.String A_FASTLEAF_DECAYPERIOD -> HCOb
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> FMit
    java.lang.String A_ENTITYSTACK_ENABLED -> HBnf
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> wUGJ
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> wCeF
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> bNxY
    java.lang.String A_GLASS_SHOW_BLOCKS -> eaTG
    java.lang.String A_GLASS_SHOW_PARTICLES -> CUcP
    java.lang.String A_ALLOW_CULL -> fmHS
    java.lang.String A_ALLOW_PURGE -> bNxU
    java.lang.String A_ALLOW_CACHE -> TpdJ
    java.lang.String A_CULL_RULES -> KfIs
    java.lang.String A_RAI_TPS_HIGH_TICK -> legc
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> yAYa
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> ooRO
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> Grnl
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> tdnX
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> fArY
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> wUGA
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> vIQd
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> SePr
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> CMQs
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> TOAx
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> AiOO
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> lDER
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> PAtb
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> CVBs
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> OGcC
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> lmwe
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> kHqc
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> ktFi
    java.lang.String A_RAI_FLUID_TIME_CEIL -> qtyk
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> RbPf
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> ssQG
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> mhnE
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> DYHT
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> bWmF
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> gDxg
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> PRww
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> VwMl
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> FpOm
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> nlQr
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> cdBB
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> aDIc
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> OaWy
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> jFRY
    java.lang.String A_USE_WORLD_CONFIGS -> qcwo
    java.lang.String A_LANGUAGE -> TWTT
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> uEpS
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> GkBE
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> QEYg
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> AXOq
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> xGJK
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> pXdY
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> ndAD
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> jqEy
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> cImL
    java.lang.String A_RAI_ENTITY_PROPIGATE -> PcyQ
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> rEXI
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> VDHv
    int ENTITYCACHE_CHUNK_RADIUS -> doUD
    int ENTITYCACHE_INTERVAL -> Ayqc
    boolean COMMANDOVERRIDES_TPS -> QonC
    int REACT_REMOTE_PORT -> ktIJ
    boolean REACT_REMOTE_ENABLED -> owdI
    int ENTITY_STACK_MAX_COUNT -> prWB
    int POOL_MAXTHREADS -> NVCy
    long POOL_SYNC_NANOS -> McbK
    boolean ENTITYCACHE_ENABLED -> OihH
    boolean FASTLEAF_ENABLED -> MlSO
    boolean FASTLEAF_ONDECAY -> QNNW
    boolean FASTLEAF_INSTANT -> dUda
    int FASTLEAF_DECAYPERIOD -> jqHq
    boolean COMMANDOVERRIDES_MEMORY -> biPx
    boolean ENTITYSTACK_ENABLED -> McdO
    int ENTITYSTACK_MINIMUM_GROUP -> WaAf
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> Whpn
    int ENTITYSTACK_MAXIMUM_HEALTH -> dwfx
    boolean GLASS_SHOW_BLOCKS -> ssSM
    boolean GLASS_SHOW_PARTICLES -> Hmfn
    react.glang.GList ALLOW_CULL -> clTg
    react.glang.GList ALLOW_PURGE -> uWUV
    react.glang.GList ALLOW_CACHE -> ksjg
    react.glang.GList CULL_RULES -> HvYD
    double RAI_TPS_HIGH_TICK -> OXhw
    long RAI_REDSTONE_TIME_FLOOR -> EJlE
    long RAI_REDSTONE_TIME_CEIL -> idsf
    long RAI_REDSTONE_TIME_MUDDING -> dwhE
    double RAI_REDSTONE_TIME_FUNCTION -> CMVk
    double RAI_REDSTONE_TIME_OVERBLEED -> eXgB
    int RAI_REDSTONE_TIME_RADIUS -> fBXI
    int RAI_REDSTONE_TIME_PROPIGATION -> VCih
    long RAI_HOPPER_TIME_FLOOR -> mypY
    long RAI_HOPPER_TIME_CEIL -> JtLk
    long RAI_HOPPER_TIME_MUDDING -> OOwF
    double RAI_HOPPER_TIME_FUNCTION -> AqdB
    double RAI_HOPPER_TIME_OVERBLEED -> xhmf
    int RAI_HOPPER_TIME_RADIUS -> uqGO
    int RAI_HOPPER_TIME_PROPIGATION -> Nffd
    int RAI_ENTITY_CHUNK_MULTIPLIER -> NUeN
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> UHwW
    int RAI_ENTITY_CHUNK_RADIUS -> uEqd
    long RAI_FLUID_TIME_FLOOR -> uqFy
    long RAI_FLUID_TIME_CEIL -> RIAE
    long RAI_FLUID_TIME_MUDDING -> eigu
    double RAI_FLUID_TIME_FUNCTION -> oEAw
    double RAI_FLUID_TIME_OVERBLEED -> tduY
    int RAI_FLUID_TIME_RADIUS -> LqeC
    int RAI_FLUID_TIME_PROPIGATION -> rpQo
    double SMEAR_TICK_ENTITIES_MAX_TICK -> jWYH
    double SMEAR_TICK_TILES_MAX_TICK -> rgaG
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> wDKv
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> jVwL
    double SMEAR_TICK_ENTITIES_AMOUNT -> DXlI
    double SMEAR_TICK_TILES_AMOUNT -> CVHb
    boolean SMEAR_TICK_ENTITIES_ENABLE -> hjdG
    boolean SMEAR_TICK_TILES_ENABLE -> clVc
    boolean HOPPER_OVERTICK_ENABLE -> RPrn
    boolean USE_WORLD_CONFIGS -> dDeX
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> oLte
    long RAI_CHUNK_TIME_CEIL -> WPCA
    long RAI_CHUNK_TIME_MUDDING -> anaF
    double RAI_CHUNK_TIME_FUNCTION -> NVGc
    double RAI_CHUNK_TIME_OVERBLEED -> ooWl
    int RAI_CHUNK_TIME_RADIUS -> kQhu
    int RAI_CHUNK_TIME_PROPIGATION -> ugwX
    boolean RAI_CHUNK_TIME_PROPIGATE -> oLsl
    boolean RAI_FLUID_TIME_PROPIGATE -> OGhR
    boolean RAI_ENTITY_PROPIGATE -> eijM
    boolean RAI_HOPPER_TIME_PROPIGATE -> CnyY
    boolean RAI_REDSTONE_TIME_PROPIGATE -> ydDN
    boolean hrld -> XSDP
    boolean rns -> IEwN
    boolean rrl -> UtNj
    39:656:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    661:678:void doTrack(org.bukkit.plugin.Plugin) -> wegp
    683:705:void onRead(org.bukkit.plugin.Plugin) -> xiKs
    709:739:void read(java.io.File,boolean) -> wegp
    743:760:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> wegp
    765:773:void closeWorldConfig(org.bukkit.World) -> xiKs
    778:891:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> wegp
    896:933:react.surge.cluster.DataCluster defaultConfig(boolean) -> wegp
    938:1013:react.glang.GList getDefaultEntitiesForCaching() -> wegp
    1018:1093:react.glang.GList getDefaultEntitiesForCulling() -> xiKs
    1098:1135:react.glang.GList getDefaultEntitiesForRemoval() -> hamF
    1140:1169:react.glang.GList getDefaultCullRules() -> qBSx
react.Config$1 -> wegp$1:
    java.io.File val$fConfig -> XSEG
    java.io.File val$fConfigExperimental -> dUfM
    org.bukkit.plugin.Plugin val$main -> XceK
    1:664:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    669:673:void run() -> run
react.Config$2 -> wegp$2:
    react.api.WorldConfig val$wc -> lfOA
    org.bukkit.World val$w -> Whqw
    1:750:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    755:756:void run() -> run
react.Gate -> xiKs:
    react.glang.GMap defaultSettings -> wULV
    react.glang.GSet refresh -> Grug
    react.glang.GSet destroy -> TpmX
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> XAdd
    41:43:void <clinit>() -> <clinit>
    39:39:void <init>() -> <init>
    47:137:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> wegp
    143:174:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> wegp
    179:179:int getChunkCountForView() -> PAuJ
    184:184:int getMaxChunksForView() -> SurT
    189:189:boolean hasFawe() -> tvQa
    194:215:void tickEntityNextTickListTick(org.bukkit.World) -> hamF
    219:223:void resetEntityMaxTick(org.bukkit.World) -> qBSx
    227:227:int getEntityTickMax(org.bukkit.World) -> PAuJ
    232:232:int getTileTickMax(org.bukkit.World) -> SurT
    237:255:void tweakEntityTickMax(org.bukkit.World,int) -> wegp
    259:276:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> wegp
    281:285:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> wegp
    289:301:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> wegp
    306:310:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> xiKs
    314:332:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> wegp
    336:340:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> tvQa
    345:348:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> wegp
    353:356:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> xiKs
    361:361:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> hamF
    366:366:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> qBSx
    371:371:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> PAuJ
    376:376:boolean isBadForUnloading() -> Pcwe
    381:381:boolean canUnload(org.bukkit.World,int,int) -> wegp
    388:404:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    410:421:void unloadChunk(org.bukkit.World,int,int) -> xiKs
    425:436:void removeEntity(org.bukkit.entity.Entity) -> wegp
    440:451:void purgeEntity(org.bukkit.entity.Entity) -> xiKs
    455:466:void cullEntity(org.bukkit.entity.Entity) -> hamF
    470:481:void cachedEntity(org.bukkit.entity.Entity) -> qBSx
    486:503:void updateBlock(org.bukkit.block.Block) -> wegp
    507:511:java.lang.String header(java.lang.String,react.surge.util.C) -> wegp
    516:516:java.lang.String header(react.surge.util.C) -> wegp
    522:526:void updateFluid(org.bukkit.block.Block) -> xiKs
    530:531:void refresh(org.bukkit.Chunk) -> xiKs
    536:555:void refreshChunks() -> pYDN
    559:560:void sendBlockChange(org.bukkit.Location) -> wegp
    39:39:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> Ujvp
react.Gate$1 -> xiKs$1:
    react.api.SelectorPosition val$sel -> lfRH
    react.glang.Callback val$prog -> pXkT
    react.glang.Callback val$cb -> wwRb
    1:47:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    52:135:void run() -> run
react.Gate$1$1 -> xiKs$1$1:
    react.Gate$1 this$1 -> VerC
    java.lang.Object val$o -> Grwx
    java.lang.reflect.Constructor val$vectorConstruct -> VTpj
    java.lang.reflect.Constructor val$cuboidConstruct -> XAds
    java.lang.reflect.Method val$faweFixMethod -> GkIX
    java.lang.Integer[] val$total -> Kerh
    java.lang.Integer[] val$sof -> qKMS
    react.glang.Callback val$prog -> pXkT
    java.lang.Integer val$tot -> LFsM
    1:79:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    86:104:void run() -> run
react.Gate$1$2 -> xiKs$1$2:
    react.Gate$1 this$1 -> VerC
    react.glang.Callback val$prog -> pXkT
    react.glang.Callback val$cb -> wwRb
    java.lang.Integer[] val$total -> Kerh
    1:108:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    115:123:void run() -> run
react.Info -> hamF:
    java.lang.String CORE_REACT_DOT -> iCVD
    java.lang.String CORE_NAME -> BlXt
    java.lang.String CORE_CACHE -> rgau
    java.lang.String WORLD_CONFIGS -> mFqD
    java.lang.String CORE_DOTYML -> EmRM
    java.lang.String COMMAND_REACT -> bqda
    java.lang.String COMMAND_RAI -> qmPE
    java.lang.String COMMAND_ACT_DESCRIPTION -> RHbn
    java.lang.String COMMAND_ACT -> QgcN
    java.lang.String COMMAND_ACT_ALIAS_1 -> LyvX
    java.lang.String COMMAND_ACT_ALIAS_2 -> CgLT
    java.lang.String COMMAND_ACT_USAGE -> ofhi
    java.lang.String COMMAND_HELP_DESCRIPTION -> Cfjv
    java.lang.String COMMAND_HELP -> mWqd
    java.lang.String COMMAND_HELP_ALIAS_1 -> xFoB
    java.lang.String COMMAND_HELP_ALIAS_2 -> YgKT
    java.lang.String COMMAND_HELP_USAGE -> Vvrg
    java.lang.String COMMAND_STATUS_DESCRIPTION -> cthH
    java.lang.String COMMAND_STATUS -> brHg
    java.lang.String COMMAND_STATUS_ALIAS_1 -> LqiJ
    java.lang.String COMMAND_STATUS_ALIAS_2 -> cAet
    java.lang.String COMMAND_STATUS_USAGE -> pioH
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> rNST
    java.lang.String COMMAND_CPUSCORE -> NgNa
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> FFDn
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> WiXI
    java.lang.String COMMAND_CPUSCORE_USAGE -> hHfC
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> EltY
    java.lang.String COMMAND_RELOAD -> uNji
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> Nwnp
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> lMBD
    java.lang.String COMMAND_RELOAD_USAGE -> EmVA
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> flqn
    java.lang.String COMMAND_MONITOR -> LGVR
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> MckE
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> QVdo
    java.lang.String COMMAND_MONITOR_USAGE -> hPuW
    java.lang.String COMMAND_VERSION_DESCRIPTION -> mPDi
    java.lang.String COMMAND_VERSION -> WPGB
    java.lang.String COMMAND_VERSION_ALIAS_1 -> fTBE
    java.lang.String COMMAND_VERSION_ALIAS_2 -> gWCf
    java.lang.String COMMAND_VERSION_USAGE -> ylXa
    java.lang.String COMMAND_MAP_DESCRIPTION -> JtRo
    java.lang.String COMMAND_MAP -> HBxB
    java.lang.String COMMAND_MAP_ALIAS_1 -> ggcy
    java.lang.String COMMAND_MAP_ALIAS_2 -> DGmP
    java.lang.String COMMAND_MAP_USAGE -> dfkP
    java.lang.String COMMAND_GLASS_DESCRIPTION -> YwmR
    java.lang.String COMMAND_GLASS -> gFAh
    java.lang.String COMMAND_GLASS_ALIAS_1 -> AFud
    java.lang.String COMMAND_GLASS_ALIAS_2 -> WywX
    java.lang.String COMMAND_GLASS_USAGE -> ghEb
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> tBuK
    java.lang.String COMMAND_CBLAME -> imie
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> yBEG
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> hkHI
    java.lang.String COMMAND_CBLAME_USAGE -> fJnc
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> LiXN
    java.lang.String COMMAND_ACTIONLOG -> rVbJ
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> YgLo
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> Vvtg
    java.lang.String COMMAND_ACTIONLOG_USAGE -> yuIS
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> BdLK
    java.lang.String COMMAND_CAPABILITIES -> xyxr
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> EBbh
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> IqRk
    java.lang.String COMMAND_CAPABILITIES_USAGE -> HLLq
    java.lang.String MSG_PERMISSION -> vRPr
    java.lang.String MSG_MONITORING_STARTED -> WOgP
    java.lang.String MSG_MONITORING_STOPPED -> NpBL
    java.lang.String MSG_ACTIONLOGGING_STARTED -> qufA
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> vRQQ
    java.lang.String MSG_GLASS_STARTED -> gMuL
    java.lang.String MSG_GLASS_STOPPED -> UkdS
    org.bukkit.Color COLOR_HOPPER -> hjjf
    org.bukkit.Color COLOR_BLOCK_UPDATE -> vlBp
    org.bukkit.Color COLOR_BLOCK_FROMTO -> VDUD
    org.bukkit.Color COLOR_BLOCK_BURN -> fKRf
    org.bukkit.Color COLOR_BLOCK_DECAY -> EmWg
    org.bukkit.Color COLOR_BLOCK_FORM -> FhKD
    java.lang.String NAME_TICK -> UtVJ
    java.lang.String NAME_MEMORY -> wvua
    java.lang.String NAME_CHUNKS -> xaGY
    java.lang.String NAME_ENTITIES -> dxOe
    java.lang.String STATE_MONITORING_TAB -> NVMg
    java.lang.String STATE_MONITORING_ENABLED -> QWFn
    java.lang.String STATE_MONITORING_HIGH -> PJqd
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> Daal
    java.lang.String STATE_MAPPING_ENABLED -> NVMr
    java.lang.String STATE_SOUND_PLAYS -> gpWg
    java.lang.String STATE_MONITORING_POSTED -> UbrG
    java.lang.String STATE_MONITORING_LASTTAB -> wfTb
    java.lang.String STATE_GLASSES_ENABLED -> nSJD
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> GQYb
    java.lang.String STATE_PLAYER_HOTBAR -> iSxp
    java.lang.String STATE_PLAYER_SHIFT -> CUng
    java.lang.String STATE_PLAYER_SCROLL -> KevR
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> VUTs
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> hbYG
    java.lang.String PERM_ACCESS -> uqPC
    java.lang.String PERM_MONITOR -> fSbJ
    java.lang.String PERM_MONITOR_TITLE -> RPxW
    java.lang.String PERM_MONITOR_ACTIONLOG -> yuJq
    java.lang.String PERM_MONITOR_MAP -> ytmk
    java.lang.String PERM_MONITOR_ENVIRONMENT -> gxkK
    java.lang.String PERM_MONITOR_GLASSES -> jhbW
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> DaeM
    java.lang.String PERM_ACT -> HLOQ
    java.lang.String PERM_RAI -> uNnt
    java.lang.String PERM_RAI_CONTROL -> hjmE
    java.lang.String PERM_RAI_ACCESS -> wMFM
    java.lang.String PERM_RAI_MONITOR -> FgkY
    java.lang.String PERM_RELOAD -> vkcu
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> Nobv
    java.lang.String SAMPLER_REDSTONE_TICK -> xqix
    java.lang.String SAMPLER_ENTITY_TIME -> vbsM
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> jiBf
    java.lang.String SAMPLER_TILE_TIME_LOCK -> PJtj
    java.lang.String SAMPLER_TILE_TIME -> vAQI
    java.lang.String SAMPLER_TILE_DROPTICK -> cdNe
    java.lang.String SAMPLER_ENTITY_DROPTICK -> wvxE
    java.lang.String SAMPLER_REDSTONE_SECOND -> MRlK
    java.lang.String SAMPLER_REDSTONE_TIME -> PeGX
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> UIbP
    java.lang.String SAMPLER_HOPPER_TICK -> FMvv
    java.lang.String SAMPLER_HOPPER_SECOND -> wetv
    java.lang.String SAMPLER_HOPPER_TIME -> FhKO
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> JbuH
    java.lang.String SAMPLER_FLUID_TICK -> woHO
    java.lang.String SAMPLER_FLUID_SECOND -> PmWi
    java.lang.String SAMPLER_FLUID_TIME -> baIo
    java.lang.String SAMPLER_TPS -> Aqmq
    java.lang.String SAMPLER_TICK -> YfpJ
    java.lang.String SAMPLER_TIU -> XRjw
    java.lang.String SAMPLER_MEM -> VMEt
    java.lang.String SAMPLER_FREEMEM -> Kewn
    java.lang.String SAMPLER_MAXMEM -> ObED
    java.lang.String SAMPLER_ALLOCMEM -> ESfP
    java.lang.String SAMPLER_MAHS -> WWxh
    java.lang.String SAMPLER_CHK -> lfWH
    java.lang.String SAMPLER_ATASK -> WrMB
    java.lang.String SAMPLER_STASK -> yBHa
    java.lang.String SAMPLER_CHK_TIME -> sHhA
    java.lang.String SAMPLER_EXPLOSION_TIME -> wTtB
    java.lang.String SAMPLER_CHKS -> AFxu
    java.lang.String SAMPLER_ENT -> aTts
    java.lang.String SAMPLER_ENTLIV -> uhcg
    java.lang.String SAMPLER_ENTDROP -> cdPW
    java.lang.String SAMPLER_ENTTILE -> iKoF
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> YMaO
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> jGBc
    java.lang.String ACTION_CULL_ENTITIES_NAME -> vkfX
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> wCtn
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> VTyT
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> UkiN
    java.lang.String ACTION_UPDATE_FLUID_NAME -> XSPR
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> uhbq
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> Coen
    java.lang.String ACTION_LOCK_FLUID_STATUS -> Ubvy
    java.lang.String ACTION_LOCK_FLUID_NAME -> aDXF
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> HfDe
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> brOR
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> oVPv
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> aCvg
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> ySMY
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> HfDb
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> dxTq
    java.lang.String ACTION_LOCK_HOPPER_NAME -> MBNt
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> loIx
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> PTHK
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> lDUn
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> ncnO
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> BKAR
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> ccmu
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> jydi
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> rWHv
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> YxTW
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> RHlB
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> pQBy
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> GILy
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> Oiuf
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> wMEv
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> hHik
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> IGCV
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> rFGS
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> kIbh
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> WPLR
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> GYmq
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> lvxy
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> DQEr
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> EukU
    java.lang.String ACTION_FIX_LIGHTING_NAME -> dVQT
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> vbtT
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> eQDK
    java.lang.String ACTION_COLLECT_GARBAGE -> bOio
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> DGur
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> Ubxt
    8:234:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> qBSx:
    java.lang.String BUNDLE_NAME -> dUsN
    java.util.ResourceBundle RESOURCE_BUNDLE -> fKYA
    java.util.ResourceBundle PRIMARY_BUNDLE -> Cfuv
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> PAuJ:
    react.React instance -> loNA
    react.controller.SampleController sampleController -> lCwt
    react.controller.PlayerController playerController -> PvNV
    react.controller.MonitorController monitorController -> kQvi
    react.controller.CommandController commandController -> kQwJ
    react.controller.ActionController actionController -> GsdD
    react.controller.FastDecayController fastDecayController -> dDqR
    react.controller.EntityStackController entityStackController -> dESN
    react.controller.GlassController glassController -> lMJO
    react.controller.EntityCullController entityCullController -> UIgd
    react.controller.SpikeController spikeController -> XmDn
    react.controller.SecurityController securityController -> SCab
    react.controller.RedstoneController redstoneController -> rVkI
    react.controller.HopperController hopperController -> wnjs
    react.controller.PhysicsController physicsController -> BdSY
    react.controller.TickTimeController tickTimeController -> wDWv
    react.controller.RAIController raiController -> xOlA
    react.controller.FluidController fluidController -> KnmM
    react.controller.ChunkController chunkController -> TiGY
    react.controller.GraphController graphController -> INtU
    react.controller.ChronophyFluidController fluidChronophyController -> nBMp
    react.controller.EventController eventController -> DHUx
    react.controller.BlockInjectController blockInjectController -> qTIB
    react.controller.SmearTickController smearTickController -> SveJ
    react.controller.FeatureController featureController -> AibJ
    react.controller.HopperOvertickController hopperPlungeController -> ogTC
    react.controller.BenchmarkController benchmarkController -> PTJc
    react.controller.LanguageController languageController -> HTbn
    react.controller.RemoteController remoteController -> ktYY
    react.controller.ExplosiveController explosiveController -> pjWH
    react.controller.WorldController worldController -> gqAg
    44:44:void <init>() -> <init>
    142:150:void enable() -> enable
    156:156:void disable() -> disable
react.React$1 -> PAuJ$1:
    react.React this$0 -> rgnp
    1:142:void <init>(react.React) -> <init>
    147:148:void run() -> run
react.action.ActionCollectGarbage -> SurT:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
react.action.ActionCollectGarbage$1 -> SurT$1:
    react.action.ActionCollectGarbage this$0 -> cKCF
    react.action.source.IActionSource val$source -> qSjY
    1:29:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> wegp
react.action.ActionCollectGarbage$1$1 -> SurT$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> hscn
    long val$mbnex -> gFLt
    long val$mbmem -> WjBp
    react.action.source.IActionSource val$source -> qSjY
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.action.source.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> tvQa:
    long ms -> xiaB
    int lcd -> dxXi
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> wegp
    27:27:void access$0(react.action.ActionCullEntities,long) -> wegp
    28:28:int access$1(react.action.ActionCullEntities) -> wegp
    27:27:long access$2(react.action.ActionCullEntities) -> xiKs
react.action.ActionCullEntities$1 -> tvQa$1:
    react.action.ActionCullEntities this$0 -> ESli
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> tvQa$2:
    react.action.ActionCullEntities this$0 -> ESli
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> tvQa$3:
    react.action.ActionCullEntities this$0 -> ESli
    react.glang.FinalInteger val$completed -> uGFO
    react.glang.FinalInteger val$total -> kJIJ
    react.glang.FinalInteger val$totalCulled -> uGDv
    react.glang.FinalInteger val$totalChunked -> NMey
    react.action.source.IActionSource val$source -> qSjY
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> tvQa$4:
    react.action.ActionCullEntities this$0 -> ESli
    react.action.source.IActionSource val$source -> qSjY
    react.glang.FinalInteger val$totalCulled -> uGDv
    react.glang.FinalInteger val$totalChunked -> NMey
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> Pcwe:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
react.action.ActionFixLighting$1 -> Pcwe$1:
    react.action.ActionFixLighting this$0 -> NUvh
    1:28:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> Pcwe$2:
    react.action.ActionFixLighting this$0 -> NUvh
    react.action.source.IActionSource val$source -> qSjY
    int val$ch -> xjAV
    1:77:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> wegp
    1:1:void run(java.lang.Object) -> wegp
react.action.ActionFixLighting$3 -> Pcwe$3:
    react.action.ActionFixLighting this$0 -> NUvh
    1:88:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> wegp
    1:1:void run(java.lang.Object) -> wegp
react.action.ActionLockFluid -> pYDN:
    int lcd -> dxXi
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
react.action.ActionLockFluid$1 -> pYDN$1:
    react.action.ActionLockFluid this$0 -> qCJC
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> pYDN$2:
    react.action.ActionLockFluid this$0 -> qCJC
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> Ujvp:
    int lcd -> dxXi
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
react.action.ActionLockHopper$1 -> Ujvp$1:
    react.action.ActionLockHopper this$0 -> jpxG
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> Ujvp$2:
    react.action.ActionLockHopper this$0 -> jpxG
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> CfdJ:
    int lcd -> dxXi
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
react.action.ActionLockRedstone$1 -> CfdJ$1:
    react.action.ActionLockRedstone this$0 -> SLTI
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> CfdJ$2:
    react.action.ActionLockRedstone this$0 -> SLTI
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> yIjn:
    long ms -> xiaB
    int lcd -> dxXi
    boolean fail -> baPX
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> xiKs
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> wegp
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> wegp
    26:26:int access$2(react.action.ActionPurgeChunks) -> xiKs
    25:25:long access$3(react.action.ActionPurgeChunks) -> hamF
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> wegp
react.action.ActionPurgeChunks$1 -> yIjn$1:
    react.action.ActionPurgeChunks this$0 -> JIhx
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> yIjn$2:
    react.action.ActionPurgeChunks this$0 -> JIhx
    int val$dk -> TyjJ
    java.lang.Object val$j -> kbya
    react.action.source.IActionSource val$source -> qSjY
    react.api.ISelector[] val$selectors -> hbbG
    react.glang.FinalInteger val$acompleted -> xjAF
    react.glang.FinalInteger val$completed -> uGFO
    react.glang.FinalInteger val$total -> kJIJ
    react.glang.FinalInteger val$totalCulled -> uGDv
    react.glang.FinalInteger val$totalChunked -> NMey
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.action.source.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> wegp
react.action.ActionPurgeChunks$2$1 -> yIjn$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> aCyv
    react.glang.FinalInteger val$acompleted -> xjAF
    react.glang.FinalInteger val$completed -> uGFO
    react.glang.FinalInteger val$total -> kJIJ
    react.glang.FinalInteger val$totalCulled -> uGDv
    react.glang.FinalInteger val$totalChunked -> NMey
    react.action.source.IActionSource val$source -> qSjY
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> yIjn$3:
    react.action.ActionPurgeChunks this$0 -> JIhx
    react.action.source.IActionSource val$source -> qSjY
    react.glang.FinalInteger val$acompleted -> xjAF
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> yIjn$4:
    react.action.ActionPurgeChunks this$0 -> JIhx
    org.bukkit.Chunk val$chunk -> eYYA
    java.lang.Runnable val$cb -> gxpE
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> iBlp:
    long ms -> xiaB
    int lcd -> dxXi
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> xiKs
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> wegp
    30:30:int access$1(react.action.ActionPurgeEntities) -> wegp
    29:29:long access$2(react.action.ActionPurgeEntities) -> xiKs
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> wegp
react.action.ActionPurgeEntities$1 -> iBlp$1:
    react.action.ActionPurgeEntities this$0 -> aCyr
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> iBlp$2:
    react.action.ActionPurgeEntities this$0 -> aCyr
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> iBlp$3:
    react.action.ActionPurgeEntities this$0 -> aCyr
    react.glang.FinalInteger val$completed -> uGFO
    react.glang.FinalInteger val$total -> kJIJ
    react.glang.FinalInteger val$totalCulled -> uGDv
    react.glang.FinalInteger val$totalChunked -> NMey
    react.action.source.IActionSource val$source -> qSjY
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> iBlp$4:
    react.action.ActionPurgeEntities this$0 -> aCyr
    react.action.source.IActionSource val$source -> qSjY
    react.glang.FinalInteger val$totalCulled -> uGDv
    react.glang.FinalInteger val$totalChunked -> NMey
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> iBlp$5:
    react.action.ActionPurgeEntities this$0 -> aCyr
    org.bukkit.entity.Entity val$i -> Ukke
    react.glang.FinalInteger val$cu -> iDBO
    int val$k -> fSis
    org.bukkit.Chunk val$chunk -> eYYA
    java.lang.Runnable val$cb -> gxpE
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> HCOb:
    int lcd -> dxXi
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
react.action.ActionUnlockFluid$1 -> HCOb$1:
    react.action.ActionUnlockFluid this$0 -> GjtN
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> FMit:
    int lcd -> dxXi
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
react.action.ActionUnlockHopper$1 -> FMit$1:
    react.action.ActionUnlockHopper this$0 -> rFLC
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> HBnf:
    int lcd -> dxXi
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
react.action.ActionUnlockRedstone$1 -> HBnf$1:
    react.action.ActionUnlockRedstone this$0 -> uiJj
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> CfdJ
    1:1:java.lang.Object get() -> get
react.action.source.AccessActionSource -> wUGJ:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> wegp
    26:33:void sendResponseSuccess(java.lang.String) -> xiKs
    38:45:void sendResponseError(java.lang.String) -> hamF
    50:57:void sendResponseActing(java.lang.String) -> qBSx
react.action.source.ActionHandle -> wCeF:
    react.action.source.ActionHandle AUTOMATIC -> sHpr
    react.action.source.ActionHandle MANUAL -> HCeo
    react.action.source.ActionHandle MUTEX -> KgCK
    react.action.source.ActionHandle[] ENUM$VALUES -> QFQI
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.action.source.ActionHandle[] values() -> values
    1:1:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
react.action.source.ConsoleActionSource -> bNxY:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> wegp
    18:19:void sendResponseSuccess(java.lang.String) -> xiKs
    24:25:void sendResponseError(java.lang.String) -> hamF
    30:31:void sendResponseActing(java.lang.String) -> qBSx
react.action.source.IActionSource -> eaTG:
    void sendResponse(java.lang.String) -> wegp
    void sendResponseSuccess(java.lang.String) -> xiKs
    void sendResponseError(java.lang.String) -> hamF
    void sendResponseActing(java.lang.String) -> qBSx
react.action.source.PlayerActionSource -> CUcP:
    org.bukkit.entity.Player p -> ggrN
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> wegp
    30:31:void sendResponseSuccess(java.lang.String) -> xiKs
    36:37:void sendResponseError(java.lang.String) -> hamF
    42:43:void sendResponseActing(java.lang.String) -> qBSx
react.action.source.RAIActionSource -> fmHS:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> wegp
    16:17:void sendResponseSuccess(java.lang.String) -> xiKs
    22:23:void sendResponseError(java.lang.String) -> hamF
    28:29:void sendResponseActing(java.lang.String) -> qBSx
react.api.Action -> bNxU:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> GRFG
    java.lang.String[] nodes -> PTOS
    react.action.source.ActionHandle handle -> GHtD
    react.api.ActionState state -> mPPp
    react.api.ActionTargetType target -> LHBv
    react.api.ActionType type -> lnpO
    react.action.source.IActionSource currentSource -> FWST
    double progress -> aoSC
    react.glang.GMap defaultSelectors -> IynT
    28:29:void <init>(react.api.ActionType) -> <init>
    31:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> wegp
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> wegp
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> yIjn
    94:94:react.api.ActionState getState() -> iBlp
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> PAuJ
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> HCOb
    130:130:react.api.ActionType getType() -> FMit
    136:136:react.glang.GMap getDefaultSelectors() -> HBnf
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> xiKs
    189:190:void completeAction() -> wUGJ
    195:195:react.action.source.IActionSource getCurrentSource() -> wCeF
    201:201:java.lang.String[] getNodes() -> bNxY
    207:208:void setNodes(java.lang.String[]) -> wegp
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
react.api.ActionAlreadyRunningException -> TpdJ:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> KfIs:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> legc:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> yAYa:
    react.api.ActionState IDLE -> rySY
    react.api.ActionState RUNNING -> UIlT
    react.api.ActionState[] ENUM$VALUES -> ECNl
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> ooRO:
    react.api.ActionTargetType POSITIONAL -> PBlt
    react.api.ActionTargetType SYSTEM -> ofvs
    react.api.ActionTargetType[] ENUM$VALUES -> AYFM
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> Grnl:
    react.api.ActionType FIX_LIGHTING -> Noio
    react.api.ActionType UNLOCK_FLUID -> XArT
    react.api.ActionType LOCK_FLUID -> HfHq
    react.api.ActionType UNLOCK_HOPPER -> SDEU
    react.api.ActionType LOCK_HOPPER -> HCdq
    react.api.ActionType UNLOCK_REDSTONE -> ArWY
    react.api.ActionType LOCK_REDSTONE -> BKFo
    react.api.ActionType CULL_ENTITIES -> prlD
    react.api.ActionType COLLECT_GARBAGE -> oMec
    react.api.ActionType PURGE_ENTITIES -> piyf
    react.api.ActionType PURGE_CHUNKS -> IWil
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> GHtD
    react.api.ActionTargetType target -> LHBv
    react.api.ActionType[] ENUM$VALUES -> ogWk
    6:18:void <clinit>() -> <clinit>
    25:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> eaTG
    50:50:react.api.ActionTargetType getTarget() -> HCOb
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> tdnX:
    react.api.ActivationRangeType ANIMALS -> oogu
    react.api.ActivationRangeType MONSTERS -> FOBS
    react.api.ActivationRangeType MISC -> oNFO
    react.api.ActivationRangeType[] ENUM$VALUES -> BBUX
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> fArY:
    int value() -> value
react.api.Async -> wUGA:
react.api.CPUBenchmark -> vIQd:
    org.bukkit.command.CommandSender sender -> sender
    int score -> YVWn
    java.lang.Runnable onFinish -> nKBs
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> CUcP
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> wegp
    13:13:int access$1(react.api.CPUBenchmark) -> xiKs
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> hamF
react.api.CPUBenchmark$1 -> vIQd$1:
    react.api.CPUBenchmark this$0 -> KLoL
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> vIQd$2:
    react.api.CPUBenchmark this$0 -> KLoL
    1:77:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> SePr:
    react.api.CPUResult ULTRA_SLOW -> SKuX
    react.api.CPUResult VERY_SLOW -> ghUD
    react.api.CPUResult SLOW -> VxEk
    react.api.CPUResult AVERAGE -> gNan
    react.api.CPUResult GOOD -> wMPK
    react.api.CPUResult FAST -> VgEB
    react.api.CPUResult VERY_FAST -> JJNr
    react.api.CPUResult ULTRA_FAST -> Rjwm
    java.lang.String m -> SDIF
    react.api.CPUResult[] ENUM$VALUES -> XKGT
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> wegp
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> CMQs:
    react.glang.GMap cache -> BAui
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> xiKs
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> hamF
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> fmHS
    54:54:boolean has(java.lang.Object) -> qBSx
react.api.Capability -> TOAx:
    react.api.Capability DUAL_WEILD -> uNyX
    react.api.Capability SCOREBOARD -> IGMM
    react.api.Capability SCOREBOARD_ADVANCED -> UkqP
    react.api.Capability HOPPER -> hkXB
    react.api.Capability ENTITY_ATTRIBUTES -> DapP
    react.api.Capability ENTITY_AI -> jWjM
    react.api.Capability ACTION_BAR -> KMQQ
    react.api.Capability ENTITY_NAMES -> RcFw
    react.api.Capability TITLE_BAR -> bPSL
    react.api.Capability CHUNK_RELIGHTING -> imyR
    react.api.Capability MONITOR_SUBMISSIVENESS -> FWSo
    react.api.Capability ACCELERATED_PING -> TWkR
    react.api.Capability ENTITY_THROTTLING -> XAsn
    react.api.Capability TILE_THROTTLING -> kkoL
    react.api.Capability PASSENGERS -> VgDK
    react.glang.GList capabilities -> VEAK
    react.surge.util.Protocol version -> tUGH
    react.api.Flavor flavor -> gyUI
    java.lang.String plugin -> IGKf
    java.lang.String name -> name
    14:48:void <clinit>() -> <clinit>
    55:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> bNxU
    100:100:boolean isFlavorCapable() -> TpdJ
    105:105:boolean isVersionCapable() -> KfIs
    110:110:boolean isCapable() -> legc
    115:115:react.surge.util.Protocol getVersion() -> yAYa
    120:120:react.api.Flavor getFlavor() -> ooRO
    125:125:java.lang.String getPlugin() -> Grnl
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> wegp
    153:167:void sendNotCapable(react.action.source.IActionSource) -> wegp
react.api.CapabilityBasis -> AiOO:
    react.api.CapabilityBasis VERSION -> JdAf
    react.api.CapabilityBasis FLAVOR -> VxHN
    react.api.CapabilityBasis PLUGIN -> NpPS
    react.api.CapabilityBasis[] ENUM$VALUES -> klRd
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.CapabilityBasis[] values() -> values
    1:1:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> lDER:
    react.api.ChunkIssue ENTITY -> EBpw
    react.api.ChunkIssue HOPPER -> jiOd
    react.api.ChunkIssue REDSTONE -> LHGV
    react.api.ChunkIssue FLUID -> uhnW
    react.api.ChunkIssue PHYSICS -> rWTm
    react.api.ChunkIssue[] ENUM$VALUES -> bXfQ
    3:9:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
react.api.Clip -> PAtb:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> CVBs:
    org.bukkit.command.CommandSender sender -> sender
    12:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> wegp
    31:32:void sendResponseSuccess(java.lang.String) -> xiKs
    37:38:void sendResponseError(java.lang.String) -> hamF
    43:44:void sendResponseActing(java.lang.String) -> qBSx
react.api.CullList -> OGcC:
    react.glang.GSet toCull -> WaXR
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> PAuJ
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> tdnX
react.api.DTest -> lmwe:
    6:6:void <init>() -> <init>
    11:62:int test() -> fArY
react.api.EntityFlag -> kHqc:
    react.api.EntityFlag NAMED -> Typq
    react.api.EntityFlag TAMED -> pjaB
    react.api.EntityFlag STACKED -> AOvT
    react.api.EntityFlag RIDDEN -> UIon
    react.api.EntityFlag LEASHED -> Iqao
    java.lang.String m -> SDIF
    react.api.EntityFlag[] ENUM$VALUES -> mjHR
    8:14:void <clinit>() -> <clinit>
    18:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> SurT
    40:70:boolean is(org.bukkit.entity.Entity) -> tvQa
    76:76:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> ktFi:
    react.glang.GSet entityTypes -> IGNd
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> wUGA
react.api.EntitySample -> qtyk:
    react.glang.GMap counts -> wweR
    react.glang.GMap sets -> VMTT
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> vIQd
    45:45:react.glang.GList getTypes() -> SePr
    50:57:int total() -> CMQs
    62:67:int get(org.bukkit.entity.EntityType) -> wegp
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> xiKs
    84:96:void add(org.bukkit.entity.Entity) -> PAuJ
react.api.Experimental -> RbPf:
react.api.Flavor -> ssQG:
    react.api.Flavor ANY -> jWkp
    react.api.Flavor SAFE_MODE -> cJfi
    react.api.Flavor CRAFT_BUKKIT -> JcbO
    react.api.Flavor BUKKIT -> oDxY
    react.api.Flavor SPIGOT -> YNKe
    react.api.Flavor SOGGY_SPIGOT -> OjaI
    react.api.Flavor PAPER_SPIGOT -> vImX
    react.api.Flavor TACO_SPIGOT -> RsjX
    react.api.Flavor TORCH_SPIGOT -> IXNj
    react.api.Flavor FORGE_HACK -> LHEq
    react.api.Flavor SPONGE_HACK -> Rjxj
    react.api.Flavor[] ENUM$VALUES -> rpea
    6:18:void <clinit>() -> <clinit>
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> TOAx
    74:79:boolean compatableWith(react.api.Flavor) -> wegp
    84:84:java.lang.String fancyName() -> AiOO
    1:1:react.api.Flavor[] values() -> values
    1:1:react.api.Flavor valueOf(java.lang.String) -> valueOf
react.api.IAction -> mhnE:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> yIjn
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> xiKs
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> wegp
    react.api.ActionState getState() -> iBlp
    react.api.ActionTargetType getTarget() -> HCOb
    void setNodes(java.lang.String[]) -> wegp
    java.lang.String[] getNodes() -> bNxY
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> PAuJ
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> FMit
    react.glang.GMap getDefaultSelectors() -> HBnf
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> wegp
    react.api.ISelector[] biselect(react.api.ISelector[]) -> wegp
    react.action.source.IActionSource getCurrentSource() -> wCeF
    void completeAction() -> wUGJ
react.api.ICache -> DYHT:
    react.glang.GSet get(java.lang.Object) -> xiKs
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> hamF
    void clear() -> clear
    boolean has(java.lang.Object) -> qBSx
    react.glang.GList k() -> fmHS
react.api.ICommand -> bWmF:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> lDER
    java.lang.String[] getPermissions() -> PAtb
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> SurT
    react.api.SideGate getSideGate() -> CVBs
    void registerParameterDescription(java.lang.String,java.lang.String) -> wegp
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
react.api.IRecord -> gDxg:
    java.lang.String getRecordType() -> OGcC
    long getRecordTime() -> lmwe
    react.json.JSONObject toJSON() -> kHqc
    java.lang.Object getRecordObject() -> ktFi
    void fromJSON(react.json.JSONObject) -> wegp
react.api.IRecordBook -> PRww:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> wegp
    long getOldestRecordTime() -> qtyk
    void addRecord(react.api.IRecord) -> wegp
    long getLatestRecordTime() -> RbPf
    int countRecords(long,long) -> wegp
    react.glang.GMap getRecords(long,long) -> xiKs
    int purgeRecordsBefore(long) -> xiKs
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> VwMl:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> ssQG
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> mhnE
    react.surge.util.C getAltColor() -> DYHT
    void setColor(react.surge.util.C,react.surge.util.C) -> wegp
    int getInterval() -> getInterval
    void setInterval(int) -> xiKs
    void sample() -> bWmF
    java.lang.String get() -> get
    void construct() -> gDxg
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> FpOm:
    react.api.SelectionMode getMode() -> PRww
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> PAuJ
    react.glang.GSet getList() -> VwMl
    react.glang.GSet getPossibilities() -> FpOm
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> SurT
    java.lang.String getName() -> getName
react.api.Injection -> nlQr:
    react.api.InjectionMethod value() -> nlQr
react.api.InjectionMethod -> cdBB:
    react.api.InjectionMethod SWAP -> wMPa
    react.api.InjectionMethod SUBSTRATE -> wxDj
    react.api.InjectionMethod RELOAD -> cRwg
    react.api.InjectionMethod[] ENUM$VALUES -> ryVS
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> aDIc:
    java.lang.String value() -> value
react.api.MSampler -> OaWy:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> cdBB
react.api.MonitorHeading -> jFRY:
    react.api.ISampler head -> ECQk
    react.glang.GList children -> bYFe
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> wegp
    27:27:react.api.ISampler getHead() -> aDIc
    32:33:void setHead(react.api.ISampler) -> xiKs
    37:37:react.glang.GList getChildren() -> OaWy
    42:42:java.lang.String getHeadText() -> jFRY
    47:60:java.lang.String getChildText() -> qcwo
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> wegp
react.api.NoiseGenerator -> qcwo:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> TWTT:
    react.api.NoiseGenerator[] octaves -> WPVP
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> TWTT
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> uEpS:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> Gjyp
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> uEpS
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> GkBE:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> wegp
react.api.Permissable -> QEYg:
    react.api.Permissable ACCESS -> PCQW
    react.api.Permissable MONITOR -> HfNL
    react.api.Permissable MONITOR_TITLE -> mOvf
    react.api.Permissable MONITOR_ACTIONLOG -> yBXh
    react.api.Permissable MONITOR_MAP -> wgGG
    react.api.Permissable MONITOR_ENVIRONMENT -> XKKX
    react.api.Permissable MONITOR_GLASSES -> Cgah
    react.api.Permissable MONITOR_CHUNK_BLAME -> LXio
    react.api.Permissable RAI_MONITOR -> maYE
    react.api.Permissable RAI_CONTROL -> wUci
    react.api.Permissable RAI_ACCESS -> QWYF
    react.api.Permissable RAI -> TXRM
    react.api.Permissable ACT -> vtdU
    react.api.Permissable RELOAD -> ssjw
    java.lang.String node -> brYw
    react.api.Permissable[] ENUM$VALUES -> pPnb
    7:22:void <clinit>() -> <clinit>
    26:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> wegp
    46:46:java.lang.String getNode() -> GkBE
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PluginSelfDeleter -> AXOq:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> ebRB
    java.lang.Runnable r -> Pdtg
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> wegp
react.api.ReactCommand -> xGJK:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> fKbI
    java.lang.String usage -> PvVu
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> IFmv
    react.api.SideGate sideGate -> Vwgt
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> SurT
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> wegp
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> lDER
    47:47:java.lang.String[] getPermissions() -> PAtb
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> CVBs
react.api.ReactException -> pXdY:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> ndAD:
    react.glang.GMap keystore -> DQQk
    boolean monitoring -> monitoring
    boolean highMonitor -> yBWm
    boolean actionlogging -> kkrj
    boolean glasses -> AjLv
    boolean mapping -> IWon
    int monitorSelection -> UuFM
    int plays -> nJhN
    boolean monitorPosted -> JRbk
    int monitorLastSelection -> bOvg
    int switchNotification -> aMUD
    int hotbarSlot -> lLqv
    boolean shift -> KxJQ
    int scroll -> gEtM
    double lastHeight -> sHvN
    boolean heightMovement -> HTlx
    org.bukkit.entity.Player p -> ggrN
    24:40:void <clinit>() -> <clinit>
    43:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> QEYg
    128:128:boolean isMapping() -> AXOq
    133:133:org.bukkit.entity.Player getP() -> xGJK
    138:140:void setMonitoring(boolean) -> xiKs
    144:146:void setMapping(boolean) -> hamF
    150:150:int getMonitorSelection() -> pXdY
    155:157:void setMonitorSelection(int) -> hamF
    161:161:int getHotbarSlot() -> ndAD
    166:168:void setHotbarSlot(int) -> qBSx
    172:172:boolean isShifting() -> jqEy
    177:179:void setShifting(boolean) -> qBSx
    183:183:boolean isShift() -> cImL
    188:190:void setShift(boolean) -> PAuJ
    194:194:int getScroll() -> PcyQ
    199:201:void setScroll(int) -> PAuJ
    205:205:int getMonitorLastSelection() -> rEXI
    210:212:void setMonitorLastSelection(int) -> SurT
    216:217:void setP(org.bukkit.entity.Player) -> xiKs
    221:221:double getLastHeight() -> VDHv
    226:228:void setLastHeight(double) -> wegp
    232:232:boolean isHeightMovement() -> doUD
    237:239:void setHeightMovement(boolean) -> SurT
    243:243:int getSwitchNotification() -> Ayqc
    248:250:void setSwitchNotification(int) -> tvQa
    254:254:boolean getMonitorPosted() -> QonC
    259:261:void setMonitorPosted(boolean) -> tvQa
    265:265:int getPlays() -> ktIJ
    270:272:void setPlays(int) -> Pcwe
    276:276:boolean isGlasses() -> owdI
    281:283:void setGlasses(boolean) -> Pcwe
    287:287:boolean isActionlogging() -> prWB
    292:294:void setActionlogging(boolean) -> pYDN
react.api.Record -> jqEy:
    java.lang.String recordType -> VnwR
    long recordTime -> ncyp
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> OGcC
    32:32:long getRecordTime() -> lmwe
    38:38:java.lang.Object getRecordObject() -> ktFi
    react.json.JSONObject toJSON() -> kHqc
    void fromJSON(react.json.JSONObject) -> wegp
react.api.RecordBook -> cImL:
    java.io.File recordFile -> kJTF
    react.json.JSONObject js -> wLtt
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> wegp
    79:87:react.api.IRecord getRecord(long) -> wegp
    react.api.IRecord createDummyRecord(long,java.lang.String) -> wegp
    95:107:long getOldestRecordTime() -> qtyk
    113:125:long getLatestRecordTime() -> RbPf
    130:130:boolean within(long,long,long) -> wegp
    136:144:int countRecords(long,long) -> wegp
    150:162:react.glang.GMap getRecords(long,long) -> xiKs
    168:181:int purgeRecordsBefore(long) -> xiKs
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> PcyQ:
react.api.SampledChunk -> rEXI:
    org.bukkit.Chunk c -> rqLD
    react.glang.GMap counts -> wweR
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> NVCy
    26:38:void hit(react.api.ChunkIssue,int) -> wegp
    42:42:org.bukkit.Chunk getC() -> McbK
    47:47:react.glang.GMap getCounts() -> OihH
react.api.SampledType -> VDHv:
    react.api.SampledType ENTITY_TIME_LOCK -> OsVs
    react.api.SampledType TILE_TIME_LOCK -> UthU
    react.api.SampledType ENTITY_TIME -> KxLe
    react.api.SampledType TILE_TIME -> Ngbi
    react.api.SampledType ENTITY_DROPTICK -> VwkP
    react.api.SampledType TILE_DROPTICK -> JlYI
    react.api.SampledType REDSTONE_TICK_USAGE -> BeAK
    react.api.SampledType REDSTONE_TICK -> pjdQ
    react.api.SampledType REDSTONE_SECOND -> TPBw
    react.api.SampledType REDSTONE_TIME -> VEHW
    react.api.SampledType HOPPER_TICK_USAGE -> wDeF
    react.api.SampledType HOPPER_TICK -> wDdd
    react.api.SampledType HOPPER_SECOND -> aEFy
    react.api.SampledType HOPPER_TIME -> jWpp
    react.api.SampledType FLUID_TICK_USAGE -> kSEJ
    react.api.SampledType FLUID_TICK -> SDNx
    react.api.SampledType FLUID_SECOND -> uGOf
    react.api.SampledType FLUID_TIME -> BmRd
    react.api.SampledType TPS -> bXiX
    react.api.SampledType TICK -> KgIv
    react.api.SampledType TIU -> DHcI
    react.api.SampledType MEM -> STnY
    react.api.SampledType FREEMEM -> Gsnq
    react.api.SampledType MAXMEM -> kIqq
    react.api.SampledType ALLOCMEM -> VMWX
    react.api.SampledType MAHS -> NVaN
    react.api.SampledType CHK_TIME -> Iqdm
    react.api.SampledType EXPLOSION_TIME -> rqJX
    react.api.SampledType CHK -> fLDu
    react.api.SampledType ATASK -> BlqL
    react.api.SampledType STASK -> NVaX
    react.api.SampledType CHKS -> htMp
    react.api.SampledType ENT -> SCpF
    react.api.SampledType ENTLIV -> Emkf
    react.api.SampledType ENTDROP -> Linr
    react.api.SampledType ENTTILE -> vBDt
    java.lang.String node -> brYw
    react.api.SampledType[] ENUM$VALUES -> mYMY
    6:43:void <clinit>() -> <clinit>
    49:49:react.api.ISampler get() -> MlSO
    55:55:java.lang.String toString() -> toString
    58:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> GkBE
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> doUD:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> NVce
    react.surge.util.C altColor -> VDhw
    int interval -> Mucn
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> mhnE
    49:49:react.surge.util.C getAltColor() -> DYHT
    55:55:int getInterval() -> getInterval
    void sample() -> bWmF
    void construct() -> gDxg
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> wegp
    107:108:void setInterval(int) -> xiKs
react.api.Sector -> Ayqc:
    int value() -> value
react.api.SelectionException -> QonC:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> ktIJ:
    react.api.SelectionMode WHITELIST -> tDOL
    react.api.SelectionMode BLACKLIST -> kcgY
    react.api.SelectionMode[] ENUM$VALUES -> aUii
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> owdI:
    java.lang.Class objectType -> cdaT
    react.api.SelectionMode mode -> PmlK
    react.glang.GSet list -> Gbpt
    react.glang.GSet possibilities -> Dryi
    int popoff -> VVKa
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> PRww
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> PAuJ
    43:43:react.glang.GSet getList() -> VwMl
    49:49:react.glang.GSet getPossibilities() -> FpOm
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> SurT
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> tvQa
    98:100:int pop() -> pop
react.api.SelectorEntityType -> prWB:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> hamF
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> SurT
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> Pcwe
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> NVCy:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> McbK:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> hamF
    29:30:void add(org.bukkit.Chunk,int) -> wegp
    34:38:void add(org.bukkit.World) -> Pcwe
    42:46:void addAll() -> QNNW
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> SurT
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> Pcwe
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> OihH:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> SurT
    87:87:java.lang.String getName() -> getName
react.api.Side -> MlSO:
    react.api.Side PLAYERS -> IXVd
    react.api.Side CONSOLE -> mjMc
    java.lang.String ss -> OYfA
    react.api.Side[] ENUM$VALUES -> KMXv
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> dUda
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> xiKs
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> QNNW:
    react.api.SideGate PLAYERS_ONLY -> iTnx
    react.api.SideGate CONSOLES_ONLY -> VVIw
    react.api.SideGate ANYTHING -> vBCu
    int[] $SWITCH_TABLE$react$api$SideGate -> AbAS
    react.api.SideGate[] ENUM$VALUES -> ETXu
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> wegp
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> jqHq
react.api.SimplexNoiseGenerator -> dUda:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> dxdR
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> biPx
react.api.SimplexOctaveGenerator -> jqHq:
    double wScale -> vSFA
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> wegp
react.api.SpecializedTickLimiter -> biPx:
    double rMaxTime -> NouK
    long rStartTime -> JRgP
    double rLastTime -> Hncw
    long rMark -> jWrM
    double tMaxTime -> CovE
    react.gmath.Average atimes -> kJTa
    react.gmath.Average adropped -> awlF
    int droppedTicks -> yvAI
    boolean entityTick -> UBFQ
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> McdO:
    react.glang.GList sources -> ydbO
    react.glang.GList splooge -> Sneo
    react.glang.GSet destroy -> TpmX
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> wegp
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> xiKs
    void clipped(org.bukkit.Location) -> xiKs
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> hamF
    boolean isAllowedSource(org.bukkit.Location) -> qBSx
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> wegp
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> xiKs
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> hamF
react.api.SploogeCounter$1 -> McdO$1:
    react.api.SploogeCounter this$0 -> agNW
    java.util.Iterator val$it -> RcRf
    org.bukkit.Location val$start -> UuMP
    int val$maxDistance -> ceDE
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> wegp
react.api.SploogeCounter$1$1 -> McdO$1$1:
    react.api.SploogeCounter$1 this$1 -> pkIg
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> WaAf:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> Whpn:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> kHqc
    38:49:void fromJSON(react.json.JSONObject) -> wegp
react.api.StackTraceRecordBook -> dwfx:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> xiKs
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> wegp
react.api.StackedEntity -> ssSM:
    org.bukkit.entity.LivingEntity entity -> eHfE
    int count -> count
    double rmx -> QNlx
    20:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> wegp
    46:46:int getAbsoluteMaxCount() -> McdO
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> xiKs
    56:58:void update() -> update
    62:68:void signalSize() -> WaAf
    72:123:void updateHealth() -> Whpn
    127:128:void heal(double) -> xiKs
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> dwfx
    142:142:int getEffectiveCount(double) -> hamF
    147:147:double getEffectiveMaxHealth(int) -> pYDN
    152:152:double getRealMaxHealth() -> ssSM
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> wegp
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> Hmfn:
    react.glang.GList headings -> MScR
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> wegp
    24:24:int getMaxSelection() -> Hmfn
    29:37:int left(int) -> Ujvp
    42:50:int right(int) -> CfdJ
    55:55:react.api.MonitorHeading getHeadFor(int) -> yIjn
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> wegp
    83:100:java.lang.String getHotbarFor(int,boolean) -> wegp
react.api.Unused -> clTg:
react.api.WorldConfig -> uWUV:
    boolean allowRai -> Mues
    boolean allowActions -> pbXF
    boolean allowRelighting -> BmTs
    boolean allowTileThrottling -> Ygft
    boolean allowEntityThrottling -> dyIL
    boolean allowFastLeafDecay -> HvxE
    java.util.List assumeNoSideEffectsEntities -> XmUR
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> pYDN
    48:62:void save(org.bukkit.World) -> Ujvp
    66:80:void load(org.bukkit.World) -> CfdJ
react.binject.BlockInjector -> ksjg:
    react.surge.util.Protocol protocol -> wVJb
    java.lang.Class blocksClass -> SneO
    12:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> wegp
    29:56:void inject() -> clTg
    61:61:react.surge.util.Protocol getVersion() -> yAYa
react.binject.IBlockInjector -> HvYD:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> wegp
    void add(int,java.lang.String,java.lang.Object) -> wegp
    java.lang.Object get(java.lang.String) -> get
    void inject() -> clTg
    react.surge.util.Protocol getVersion() -> yAYa
react.binject.InjectedBlock -> OXhw:
    react.surge.util.Protocol getInjectProtocol() -> uWUV
    java.lang.String getInjectKey() -> ksjg
    java.lang.String getInjectCKey() -> HvYD
    int getInjectId() -> OXhw
react.binject.ReflectionUtil -> EJlE:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> wegp
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> wegp
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> wegp
    41:54:void setAccessible(java.lang.reflect.Field) -> wegp
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> wegp
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> wegp
react.binject.V10.BlockInjector10 -> idsf:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> tvQa
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> wegp
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> wegp
react.binject.V11.BlockInjector11 -> dwhE:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> Pcwe
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> wegp
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> wegp
react.binject.V12.BlockInjector12 -> CMVk:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> pYDN
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> wegp
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> wegp
react.binject.V8.BlockInjector8 -> eXgB:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> Ujvp
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> wegp
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> wegp
react.binject.V9.BlockInjector9 -> fBXI:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> CfdJ
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> wegp
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> wegp
react.cache.CachedEntity -> VCih:
    java.util.UUID uid -> JuMC
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> JSIf
    double x -> x
    double y -> y
    double z -> z
    double vx -> YhGF
    double vy -> bGkq
    double vz -> pPuG
    double dx -> Bufk
    double dy -> pYfU
    double dz -> Yxfk
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> Pcwe
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> EJlE
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> idsf
    120:121:void setVx(double) -> qBSx
    125:125:double getVy() -> dwhE
    130:131:void setVy(double) -> PAuJ
    135:135:double getVz() -> CMVk
    140:141:void setVz(double) -> SurT
    145:145:double getDx() -> eXgB
    150:151:void setDx(double) -> tvQa
    155:155:double getDy() -> fBXI
    160:161:void setDy(double) -> Pcwe
    165:165:double getDz() -> VCih
    170:171:void setDz(double) -> pYDN
    175:175:java.util.UUID getUid() -> mypY
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> mypY:
    int age -> jaFm
    boolean ageLock -> QOLw
    boolean breed -> YEbo
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> Pcwe
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> JtLk
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> OOwF
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> JtLk:
    org.bukkit.DyeColor dye -> qCWI
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> Pcwe
    30:30:org.bukkit.DyeColor getDye() -> AqdB
    35:36:void setDye(org.bukkit.DyeColor) -> wegp
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> OOwF:
    react.glang.GList potionEffects -> qeYj
    boolean canPickupItems -> ejiB
    org.bukkit.inventory.ItemStack[] armorContents -> mjNs
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> dWEO
    double maxHealth -> maxHealth
    int maxAir -> DayQ
    int air -> WHMo
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> Pcwe
    63:63:react.glang.GList getPotionEffects() -> xhmf
    68:69:void setPotionEffects(react.glang.GList) -> xiKs
    73:73:boolean isCanPickupItems() -> uqGO
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> Nffd
    138:139:void setMaxAir(int) -> iBlp
    143:143:int getAir() -> NUeN
    148:149:void setAir(int) -> HCOb
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> AqdB:
    boolean sheared -> WjPq
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> Pcwe
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> xhmf:
    org.bukkit.inventory.ItemStack is -> Bddc
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> Pcwe
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> uqGO:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> Nffd:
    react.chronophysics.HopperDirection DOWN -> uFty
    react.chronophysics.HopperDirection NORTH -> Kfou
    react.chronophysics.HopperDirection SOUTH -> bYQh
    react.chronophysics.HopperDirection EAST -> Tqjp
    react.chronophysics.HopperDirection WEST -> lEMN
    int direction -> direction
    int[] $SWITCH_TABLE$react$chronophysics$HopperDirection -> VoaH
    react.chronophysics.HopperDirection[] ENUM$VALUES -> uXXS
    6:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> PAuJ
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> wegp
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> xiKs
    1:1:react.chronophysics.HopperDirection[] values() -> values
    1:1:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    6:6:int[] $SWITCH_TABLE$react$chronophysics$HopperDirection() -> UHwW
react.chronophysics.HopperWormhole -> NUeN:
    org.bukkit.block.Hopper source -> bjRn
    react.glang.GList path -> pkLO
    org.bukkit.block.Hopper destination -> NxkP
    17:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> uEqd
    31:31:react.glang.GList getPath() -> uqFy
    36:36:org.bukkit.block.Hopper getDestination() -> RIAE
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> wegp
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> UHwW:
    org.bukkit.block.Hopper h -> Qhaw
    13:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> wegp
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> eigu
    62:62:boolean isLockedByRedstone() -> oEAw
react.command.CommandAct -> uEqd:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> wegp
    186:192:react.text.RTX getBeginningRTX() -> tduY
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> wegp
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> xiKs
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> hamF
    331:346:react.glang.GList getSortedCommands() -> LqeC
    351:358:int getPageSize(int) -> FMit
    363:363:boolean isValidPage(int,int) -> wegp
    368:377:react.glang.GList getPage(int,int) -> xiKs
react.command.CommandActionLog -> uqFy:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
react.command.CommandCPUScore -> RIAE:
    15:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
react.command.CommandCapabilities -> eigu:
    19:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
react.command.CommandChunkBlame -> oEAw:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
react.command.CommandChunkBlame$1 -> oEAw$1:
    react.command.CommandChunkBlame this$0 -> cvFt
    org.bukkit.command.CommandSender val$sender -> LXrR
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> oEAw$1$1:
    react.command.CommandChunkBlame$1 this$1 -> RIba
    org.bukkit.command.CommandSender val$sender -> LXrR
    java.lang.String val$i -> fLLd
    react.glang.GMap val$top -> Jtnv
    int val$totalx -> IrLs
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> tduY:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
react.command.CommandHelp -> LqeC:
    28:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> wegp
    81:87:react.text.RTX getBeginningRTX() -> tduY
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> wegp
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> xiKs
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> hamF
    208:215:react.glang.GList getSortedCommands() -> LqeC
    220:227:int getPageSize(int) -> FMit
    232:232:boolean isValidPage(int,int) -> wegp
    237:246:react.glang.GList getPage(int,int) -> xiKs
react.command.CommandHighMonitor -> rpQo:
    16:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
react.command.CommandMap -> jWYH:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
react.command.CommandMonitor -> rgaG:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
react.command.CommandReload -> wDKv:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
react.command.CommandReload$1 -> wDKv$1:
    react.command.CommandReload this$0 -> GIcV
    org.bukkit.command.CommandSender val$sender -> LXrR
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> wDKv$1$1:
    react.command.CommandReload$1 this$1 -> YyKi
    org.bukkit.command.CommandSender val$sender -> LXrR
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> jVwL:
    28:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
    54:63:org.bukkit.inventory.ItemStack makeBook() -> rpQo
    68:94:void addSpikePages(react.glang.GList) -> hamF
    98:108:void addStatusPages(react.glang.GList) -> qBSx
    112:129:int findSlot(org.bukkit.entity.Player) -> hamF
react.command.CommandVersion -> DXlI:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wegp
react.controller.ActionController -> CVHb:
    int kiv -> LreR
    react.glang.GMap actions -> LbEK
    react.glang.GMap pending -> CNWS
    react.glang.GList tasks -> giAh
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> wegp
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> xiKs
    141:141:react.api.IAction getAction(react.api.ActionType) -> wegp
    146:147:void registerAction(react.api.IAction) -> wegp
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> jWYH
    241:248:react.glang.GList getActionNames() -> rgaG
react.controller.BenchmarkController -> hjdG:
    react.api.CPUBenchmark finished -> vRiY
    boolean done -> BBcH
    int score -> YVWn
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    16:16:void access$0(react.controller.BenchmarkController,boolean) -> wegp
    15:15:void access$1(react.controller.BenchmarkController,react.api.CPUBenchmark) -> wegp
    15:15:react.api.CPUBenchmark access$2(react.controller.BenchmarkController) -> wegp
react.controller.BenchmarkController$1 -> hjdG$1:
    react.controller.BenchmarkController this$0 -> PmpK
    1:26:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
    26:26:react.controller.BenchmarkController access$0(react.controller.BenchmarkController$1) -> wegp
react.controller.BenchmarkController$1$1 -> hjdG$1$1:
    react.controller.BenchmarkController$1 this$1 -> LsEC
    1:31:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
    31:31:react.controller.BenchmarkController$1 access$0(react.controller.BenchmarkController$1$1) -> wegp
react.controller.BenchmarkController$1$1$1 -> hjdG$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> GbsX
    1:36:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> clVc:
    react.glang.GMap rangeMapping -> QiAm
    react.binject.IBlockInjector injector -> jOes
    boolean injected -> BSep
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> wDKv
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> jVwL
    115:115:react.binject.IBlockInjector getInjector() -> DXlI
    120:120:boolean isInjected() -> CVHb
react.controller.ChronophyFluidController -> RPrn:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> dDeX:
    boolean firstTickList -> PmnS
    long firstTick -> kBHf
    long lastTick -> dggO
    react.gmath.Average aCSMS -> WQAS
    react.glang.GMap pluginLoads -> hcSM
    react.glang.GMap playerLoads -> bbAl
    int serverLoads -> AXsT
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> hjdG
    63:73:void tickNextTickList() -> clVc
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> wegp
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> wegp
    171:171:boolean isFirstTickList() -> RPrn
    176:176:long getFirstTick() -> dDeX
    181:181:long getLastTick() -> oLte
    186:186:react.gmath.Average getaCSMS() -> WPCA
    191:191:react.glang.GMap getPluginLoads() -> anaF
    196:196:react.glang.GMap getPlayerLoads() -> NVGc
    201:201:int getServerLoads() -> ooWl
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> wegp
    29:29:int access$1(react.controller.ChunkController) -> xiKs
    29:29:void access$2(react.controller.ChunkController,int) -> wegp
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> hamF
react.controller.ChunkController$1 -> dDeX$1:
    react.controller.ChunkController this$0 -> hbqp
    org.bukkit.event.world.ChunkLoadEvent val$e -> tTrn
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> hamF
    1:1:void run(java.lang.Object) -> wegp
react.controller.CommandController -> oLte:
    react.glang.GList commands -> dVeS
    boolean k -> gNmd
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> pYDN
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> Ujvp
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> wegp
    317:317:react.glang.GList getCommands() -> kQhu
    322:323:void setCommands(react.glang.GList) -> PAuJ
    327:327:boolean isK() -> ugwX
    332:333:void setK(boolean) -> Ujvp
react.controller.EntityCullController -> WPCA:
    react.glang.GSet flags -> cudr
    react.glang.GSet defer -> KxRQ
    react.glang.GMap maxs -> wUke
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> oLsl
    172:180:int cull(org.bukkit.Chunk) -> qBSx
    185:285:int partialCull(org.bukkit.Chunk) -> PAuJ
react.controller.EntityStackController -> anaF:
    react.glang.GList stacks -> JuNt
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> SurT
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> hamF
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> qBSx
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> wegp
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> wegp
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> PAuJ
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> wegp
react.controller.EntityStackController$1 -> anaF$1:
    react.controller.EntityStackController this$0 -> scRC
    org.bukkit.event.entity.EntitySpawnEvent val$e -> HTvA
    1:248:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> NVGc:
    react.glang.GMap slots -> SewD
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> wegp
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> wegp
react.controller.ExplosiveController -> ooWl:
    boolean firstTickList -> PmnS
    long firstTick -> kBHf
    long lastTick -> dggO
    react.gmath.Average aCSMS -> WQAS
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> hjdG
    50:60:void tickNextTickList() -> clVc
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> wegp
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> wegp
    89:89:boolean isFirstTickList() -> RPrn
    94:94:long getFirstTick() -> dDeX
    99:99:long getLastTick() -> oLte
    104:104:react.gmath.Average getaCSMS() -> WPCA
react.controller.FastDecayController -> kQhu:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> XTCw
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> wegp
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> wegp
    74:155:void checkBreak(org.bukkit.block.Block) -> hamF
    159:190:void decay(org.bukkit.block.Block) -> qBSx
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> PAuJ
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> OGhR
react.controller.FastDecayController$1 -> kQhu$1:
    react.controller.FastDecayController this$0 -> kAgY
    react.glang.GMap val$locs -> ndcV
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> hamF
    99:99:boolean isAllowedSource(org.bukkit.Location) -> qBSx
    105:124:void clipped(org.bukkit.Location) -> xiKs
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> wegp
react.controller.FastDecayController$1$1 -> kQhu$1$1:
    react.controller.FastDecayController$1 this$1 -> cvFg
    react.glang.GMap val$locs -> ndcV
    int val$i -> jrJL
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> kQhu$2:
    react.controller.FastDecayController this$0 -> kAgY
    org.bukkit.block.Block val$b -> xHNH
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FeatureController -> ugwX:
    react.feature.INMSBinding trueBinding -> KxSB
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> eijM
    85:85:java.lang.String getPackageVersion() -> CnyY
    90:90:boolean hasBinding() -> ydDN
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> wegp
react.controller.FluidController -> oLsl:
    react.glang.GSet ignore -> BCGE
    int flowsPerTick -> gGAG
    int flowsPerSecond -> KMaH
    react.gmath.Average aFST -> YViO
    react.gmath.Average aFSS -> rNpS
    react.gmath.Average aFSMS -> hkfb
    boolean firstTickList -> PmnS
    long firstTick -> kBHf
    long lastTick -> dggO
    react.glang.GSet frozen -> NWJx
    react.glang.GMap queue -> lpBb
    react.glang.GMap freezeTimes -> vtnP
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> SurT
    68:76:void checkChunks() -> XSDP
    80:97:void checkChunk(org.bukkit.Chunk) -> tvQa
    101:107:void queue(org.bukkit.block.Block) -> SurT
    111:111:boolean isFrozen(org.bukkit.Chunk) -> Pcwe
    116:117:void freeze(org.bukkit.Chunk) -> pYDN
    121:127:void unfreeze(org.bukkit.Chunk) -> Ujvp
    131:138:void freeze(org.bukkit.Chunk,long) -> wegp
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> hjdG
    172:182:void tickNextTickList() -> clVc
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> wegp
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> wegp
    248:248:react.glang.GSet getIgnore() -> IEwN
    253:253:int getTransfersPerTick() -> UtNj
    258:258:int getTransfersPerSecond() -> XSEG
    263:263:react.gmath.Average getaFST() -> dUfM
    268:268:react.gmath.Average getaFSS() -> XceK
    273:273:react.gmath.Average getaFSMS() -> lfOA
    278:278:boolean isFirstTickList() -> RPrn
    283:283:long getFirstTick() -> dDeX
    288:288:long getLastTick() -> oLte
    293:293:react.glang.GSet getFrozen() -> Whqw
    298:298:react.glang.GMap getQueue() -> wULV
    303:303:react.glang.GMap getFreezeTimes() -> Grug
react.controller.GlassController -> OGhR:
    react.glang.GMap q -> XSfi
    react.glang.GList g -> hQsT
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> qBSx
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> PAuJ
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> SurT
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> wegp
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> wegp
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> wegp
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> wegp
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> wegp
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> wegp
    36:36:react.glang.GList access$0(react.controller.GlassController) -> wegp
react.controller.GlassController$1 -> OGhR$1:
    react.controller.GlassController this$0 -> MKWX
    react.glang.GMap val$cc -> PKoO
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> OGhR$1$1:
    react.controller.GlassController$1 this$1 -> ioIS
    org.bukkit.Location val$i -> uGWX
    org.bukkit.entity.Player val$j -> Argo
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> eijM:
    react.glang.GMap g -> STvU
    react.glang.GMap gr -> xXqA
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> wegp
    121:156:void toggleMapping(org.bukkit.entity.Player) -> tvQa
    160:160:react.glang.GMap getG() -> TpmX
    165:165:react.glang.GMap getGr() -> XAdd
    31:31:react.glang.GMap access$0(react.controller.GraphController) -> wegp
    30:30:react.glang.GMap access$1(react.controller.GraphController) -> xiKs
react.controller.GraphController$1 -> eijM$1:
    react.controller.GraphController this$0 -> HCud
    1:48:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> eijM$2:
    react.controller.GraphController this$0 -> HCud
    1:84:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> eijM$3:
    react.controller.GraphController this$0 -> HCud
    org.bukkit.event.player.PlayerJoinEvent val$e -> DkNr
    1:100:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> CnyY:
    react.glang.GSet ignore -> BCGE
    int transfersPerTick -> JuPt
    int transfersPerSecond -> yCBl
    react.gmath.Average aHST -> GbvG
    react.gmath.Average aHSS -> ydeP
    react.gmath.Average aHSMS -> afom
    boolean firstTickList -> PmnS
    long firstTick -> kBHf
    long lastTick -> dggO
    react.glang.GSet frozen -> NWJx
    react.glang.GMap queue -> lpBb
    react.glang.GMap freezeTimes -> vtnP
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> SurT
    65:73:void checkChunks() -> XSDP
    77:94:void checkChunk(org.bukkit.Chunk) -> tvQa
    98:104:void queue(org.bukkit.block.Block) -> SurT
    108:108:boolean isFrozen(org.bukkit.Chunk) -> Pcwe
    113:114:void freeze(org.bukkit.Chunk) -> pYDN
    118:124:void unfreeze(org.bukkit.Chunk) -> Ujvp
    128:135:void freeze(org.bukkit.Chunk,long) -> wegp
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> hjdG
    169:179:void tickNextTickList() -> clVc
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> wegp
    207:207:react.glang.GSet getIgnore() -> IEwN
    212:212:int getTransfersPerTick() -> UtNj
    217:217:int getTransfersPerSecond() -> XSEG
    222:222:react.gmath.Average getaHST() -> lfRH
    227:227:react.gmath.Average getaHSS() -> pXkT
    232:232:react.gmath.Average getaHSMS() -> wwRb
    237:237:boolean isFirstTickList() -> RPrn
    242:242:long getFirstTick() -> dDeX
    247:247:long getLastTick() -> oLte
    252:252:react.glang.GSet getFrozen() -> Whqw
    257:257:react.glang.GMap getQueue() -> wULV
    262:262:react.glang.GMap getFreezeTimes() -> Grug
react.controller.HopperOvertickController -> ydDN:
    react.glang.GList possiblePlunge -> cJsj
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> hamF
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> wegp
react.controller.LanguageController -> XSDP:
    java.io.File languageFolder -> aDmh
    int oldVersion -> doyi
    java.io.File dlf -> rNoB
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> VerC
    160:221:void downloadAll(boolean) -> CfdJ
    225:261:void downloadLanguage(java.lang.String) -> yIjn
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> iBlp
    315:315:java.io.File getFileForLanguage(java.lang.String) -> HCOb
    320:332:void writeDefaults() -> Grwx
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> wegp
    263:263:void access$1(react.controller.LanguageController) -> wegp
react.controller.LanguageController$1 -> XSDP$1:
    react.controller.LanguageController this$0 -> mYRO
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> XSDP$2:
    react.controller.LanguageController this$0 -> mYRO
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> wegp
react.controller.LanguageController$2$1 -> XSDP$2$1:
    react.controller.LanguageController$2 this$1 -> TqmL
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> wegp
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> wegp
    121:121:void onDownloadStarted(react.gnet.download.Download) -> wegp
    126:128:void onDownloadFinished(react.gnet.download.Download) -> xiKs
    134:134:void onDownloadFailed(react.gnet.download.Download) -> hamF
react.controller.LanguageController$3 -> XSDP$3:
    react.controller.LanguageController this$0 -> mYRO
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> XSDP$3$1:
    react.controller.LanguageController$3 this$1 -> CEiK
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> XSDP$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> uqjY
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> XSDP$4:
    react.controller.LanguageController this$0 -> mYRO
    java.io.File val$dld -> STvn
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> wegp
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> wegp
    245:245:void onDownloadStarted(react.gnet.download.Download) -> wegp
    250:251:void onDownloadFinished(react.gnet.download.Download) -> xiKs
    257:257:void onDownloadFailed(react.gnet.download.Download) -> hamF
react.controller.MonitorController -> IEwN:
    int maxCooldown -> NEjX
    react.api.TitleMonitor titleMonitor -> vAkw
    react.glang.GMap posts -> rXCq
    react.slate.PhantomSlate sb -> ySgG
    boolean ready -> WbGg
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> VTpj
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> Pcwe
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> pYDN
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> XAds
    179:184:float calcVolume(react.api.ReactPlayer) -> wegp
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> Ujvp
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> CfdJ
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> yIjn
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> iBlp
    219:223:void startMonitoring(org.bukkit.entity.Player) -> HCOb
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> FMit
    242:247:void startActionLogging(org.bukkit.entity.Player) -> HBnf
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> wUGJ
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> xiKs
    279:291:void processPlayer(react.api.ReactPlayer) -> hamF
    296:296:void handleActionLog(org.bukkit.entity.Player) -> wCeF
    300:324:void handleTriggers(react.api.ReactPlayer) -> qBSx
    328:367:void handleScrolling(react.api.ReactPlayer) -> PAuJ
    371:399:void handleShifting(react.api.ReactPlayer) -> SurT
    403:425:void handlePosting(react.api.ReactPlayer) -> tvQa
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> wegp
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> wegp
    471:501:void tickMonitor(react.api.ReactPlayer) -> Pcwe
    505:505:react.api.TitleMonitor getTitleMonitor() -> GkIX
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> wegp
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> wegp
    539:552:void onTick() -> Kerh
    556:578:void updateActionBoard() -> qKMS
    583:583:java.lang.String getTickName() -> LFsM
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> wegp
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> wegp
    41:41:void access$2(react.controller.MonitorController,boolean) -> wegp
    41:41:boolean access$3(react.controller.MonitorController) -> xiKs
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> hamF
react.controller.MonitorController$1 -> IEwN$1:
    react.controller.MonitorController this$0 -> rheB
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> IEwN$2:
    react.controller.MonitorController this$0 -> rheB
    1:556:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> UtNj:
    react.glang.GMap samples -> HCyE
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> CfdJ
    51:52:void onHopper(org.bukkit.Chunk) -> yIjn
    56:57:void onFluid(org.bukkit.Chunk) -> iBlp
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> wegp
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> wegp
    80:91:void onTick() -> Kerh
    96:96:java.lang.String getTickName() -> LFsM
    101:101:react.glang.GMap getSamples() -> iCVD
react.controller.PlayerController -> XSEG:
    react.glang.GList players -> fLPP
    react.glang.GSet save -> mafK
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> bNxY
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> wegp
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> eaTG
    113:113:react.glang.GList getPlayers() -> BlXt
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> wegp
react.controller.PlayerController$1 -> XSEG$1:
    react.controller.PlayerController this$0 -> Pebx
    react.glang.GList val$toSave -> hIec
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> dUfM:
    react.rai.IRAI rai -> PKpl
    boolean raiEnabled -> clym
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    20:20:react.rai.IRAI access$0(react.controller.RAIController) -> wegp
react.controller.RAIController$1 -> dUfM$1:
    react.controller.RAIController this$0 -> oWKN
    1:48:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> XceK:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> hamF
react.controller.ReactServerInfo -> lfOA:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> rgau
    27:27:int dgetGameProtocol() -> mFqD
    33:33:java.lang.String dgetGameVersion() -> EmRM
    39:39:java.lang.String dgetReactVersion() -> bqda
    45:45:int dgetMaxPlayers() -> qmPE
    51:58:react.glang.GList dgetConnectedPlayers() -> RHbn
    64:64:int dgetViewDistance() -> QgcN
    70:70:int dgetGamePort() -> LyvX
    76:76:java.lang.String dgetGameAddress() -> CgLT
    82:89:react.glang.GList dgetRemotePlugins() -> ofhi
    95:102:react.glang.GList dgetWorlds() -> Cfjv
    108:108:react.glang.GList dgetActions() -> mWqd
    114:114:react.glang.GList dgetSamplers() -> xFoB
react.controller.RedstoneController -> Whqw:
    react.glang.GSet ignore -> BCGE
    react.glang.GSet frozen -> NWJx
    react.glang.GMap queue -> lpBb
    react.glang.GMap freezeTimes -> vtnP
    int redstonePerTick -> ySfM
    int redstonePerSecond -> IaPT
    react.gmath.Average aRST -> vAkV
    react.gmath.Average aRSS -> dEhU
    react.gmath.Average aRSMS -> aVRL
    boolean firstTickList -> PmnS
    long firstTick -> kBHf
    long lastTick -> dggO
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> SurT
    95:101:void tick() -> tick
    105:113:void checkChunks() -> XSDP
    117:134:void checkChunk(org.bukkit.Chunk) -> tvQa
    138:144:void queue(org.bukkit.block.Block) -> SurT
    148:148:boolean isFrozen(org.bukkit.Chunk) -> Pcwe
    153:154:void freeze(org.bukkit.Chunk) -> pYDN
    158:165:void flushTickList() -> hjdG
    169:179:void tickNextTickList() -> clVc
    183:189:void unfreeze(org.bukkit.Chunk) -> Ujvp
    193:200:void freeze(org.bukkit.Chunk,long) -> wegp
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> wegp
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> wegp
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> wegp
    246:246:react.glang.GSet getIgnore() -> IEwN
    251:251:react.glang.GSet getFrozen() -> Whqw
    256:256:react.glang.GMap getQueue() -> wULV
    261:261:react.glang.GMap getFreezeTimes() -> Grug
    266:266:int getRedstonePerTick() -> YgKT
    271:271:int getRedstonePerSecond() -> Vvrg
    276:276:react.gmath.Average getaRST() -> cthH
    281:281:react.gmath.Average getaRSS() -> brHg
    286:286:react.gmath.Average getaRSMS() -> LqiJ
    291:291:boolean isFirstTickList() -> RPrn
    296:296:long getFirstTick() -> dDeX
    301:301:long getLastTick() -> oLte
react.controller.RemoteController -> wULV:
    react.remote.server.RemoteServer remoteServer -> AGvK
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> cAet
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> wegp
react.controller.RemoteController$1 -> wULV$1:
    react.controller.RemoteController this$0 -> lpCv
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> wULV$2:
    react.controller.RemoteController this$0 -> lpCv
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> pioH
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> rNST
react.controller.SampleController -> Grug:
    react.glang.GMap samplers -> VodY
    react.surge.server.SuperSampler ss -> QFan
    int cd -> tTvg
    28:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> NgNa
    69:74:void restartSuperSampler() -> FFDn
    78:79:void registerSampler(react.api.ISampler) -> hamF
    83:83:react.api.ISampler getSampler(java.lang.String) -> FMit
    88:131:void constructSamplers() -> WiXI
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> hHfC
    187:209:void onTick() -> Kerh
    214:214:java.lang.String getTickName() -> LFsM
    219:219:react.glang.GMap getSamplers() -> EltY
    224:224:react.surge.server.SuperSampler getSs() -> uNji
    229:229:int getCd() -> Nwnp
    234:241:react.glang.GList getSamplerNames() -> lMBD
    25:25:react.surge.server.SuperSampler access$0(react.controller.SampleController) -> wegp
react.controller.SampleController$1 -> Grug$1:
    react.controller.SampleController this$0 -> nTFt
    1:140:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> Grug$2:
    react.controller.SampleController this$0 -> nTFt
    1:152:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> TpmX:
    java.lang.String ipa -> KpEd
    react.glang.GList failures -> awsd
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> HBnf
    41:74:void checkForIP() -> EmVA
    78:91:void scan(java.lang.Runnable) -> wegp
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> TpmX$1:
    react.controller.SecurityController this$0 -> APfi
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> TpmX$2:
    java.lang.String val$ip -> stWq
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> TpmX$3:
    java.lang.Thread val$t -> gXBq
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> XAdd:
    react.glang.GMap etl -> fKnh
    react.glang.GMap ttl -> PDAB
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> wegp
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> wegp
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> yIjn
    143:160:void releaseWorld(org.bukkit.World) -> iBlp
    164:181:double getUniversalEntityTick() -> flqn
    186:203:double getUniversalEntityLimit() -> LGVR
    208:225:double getUniversalTileLimit() -> MckE
    230:247:double getUniversalTileTick() -> QVdo
    252:264:double getUniversalEntityDroppedTicks() -> hPuW
    269:281:double getUniversalTileDroppedTicks() -> mPDi
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> wegp
    301:312:void setTileTickLimit(org.bukkit.World,double) -> xiKs
    316:321:double getEntityTickLimit(org.bukkit.World) -> HCOb
    326:331:double getTileTickLimit(org.bukkit.World) -> FMit
    336:341:double getLastEntityTick(org.bukkit.World) -> HBnf
    346:351:double getLastTileTick(org.bukkit.World) -> wUGJ
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> wCeF
    366:371:double getTileDroppedTicks(org.bukkit.World) -> bNxY
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> wegp
react.controller.SpikeController -> lfRH:
    react.glang.GMap spikes -> SLiG
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> Kerh
    111:111:java.lang.String getTickName() -> LFsM
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> WPGB
    128:160:void whoFuckingDidThis(react.glang.Callback) -> wegp
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> wegp
react.controller.SpikeController$1 -> lfRH$1:
    react.controller.SpikeController this$0 -> lxTH
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> lfRH$1$1:
    react.controller.SpikeController$1 this$1 -> kRlg
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> lfRH$2:
    react.controller.SpikeController this$0 -> lxTH
    react.glang.GMap val$vv -> CEkU
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> lfRH$3:
    react.controller.SpikeController this$0 -> lxTH
    java.lang.Thread val$t -> gXBq
    react.glang.Callback val$callback -> ogjR
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> pXkT:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> wwRb:
    12:12:void <init>() -> <init>
    17:23:void start() -> start
    28:34:void stop() -> stop
    40:40:void tick() -> tick
    45:46:void on(org.bukkit.event.world.WorldUnloadEvent) -> wegp
react.event.ReactEvent -> VerC:
    org.bukkit.event.HandlerList handlers -> MJvk
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> Grwx:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> VTpj:
    react.event.ScrollDirection direction -> ySdj
    boolean cancellled -> afsE
    int amount -> XvKa
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> fTBE
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> gWCf
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> XAds:
    react.event.ScrollDirection DOWN -> WGrx
    react.event.ScrollDirection UP -> pYkl
    react.event.ScrollDirection[] ENUM$VALUES -> wpBq
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.feature.INMSBinding -> GkIX:
    java.lang.String getPackageVersion() -> CnyY
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> wegp
react.feature.NMSBinding -> Kerh:
    java.lang.String packageVersion -> nJxN
    7:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> CnyY
react.feature.NMSBinding10 -> qKMS:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> wegp
react.feature.NMSBinding11 -> LFsM:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> wegp
react.feature.NMSBinding12 -> iCVD:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> wegp
react.feature.NMSBinding8 -> BlXt:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> wegp
react.feature.NMSBinding9 -> rgau:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> wegp
react.gbench.Profiler -> mFqD:
    long nanos -> qnUN
    long startNano -> nBgi
    long millis -> dxpC
    long startMillis -> vuSr
    double time -> qnUT
    boolean profiling -> DHpV
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> HBnf
    78:78:double getTicks() -> ylXa
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> JtRo
    93:93:double getHours() -> HBxB
    98:98:double getMilliseconds() -> ggcy
    103:103:long getNanoseconds() -> DGmP
    108:108:long getNanos() -> dfkP
    113:113:long getStartNano() -> YwmR
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> gFAh
    128:128:double getTime() -> AFud
    133:133:boolean isProfiling() -> WywX
react.gconcurrent.A -> EmRM:
    react.gconcurrent.ParallelPoolManager mgr -> wpFi
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> EmRM$1:
    react.gconcurrent.A this$0 -> kuUG
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> bqda:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> qmPE:
    react.gconcurrent.QueueMode mode -> EfFt
    react.glang.GList threads -> qmsX
    int next -> UtuS
    int threadCount -> dFLb
    java.util.Queue squeue -> kRop
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> DkUJ
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> XeMT
    22:23:void syncQueue(react.gconcurrent.Execution) -> wegp
    long getNanoGate() -> ghEb
    29:51:void tickSyncQueue() -> tBuK
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> imie
    102:109:int getTotalQueueSize() -> yBEG
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> xiKs
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> hkHI
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> fJnc
    161:188:void updateThreadInformation() -> LiXN
    192:224:react.gconcurrent.ParallelThread nextThread() -> rVbJ
    229:235:void createThreads(int) -> wUGJ
    239:239:react.gconcurrent.QueueMode getMode() -> YgLo
    244:244:int getNext() -> Vvtg
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> yuIS
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> BdLK
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> xyxr
react.gconcurrent.ParallelThread -> RHbn:
    java.util.Queue queue -> nBhA
    react.gconcurrent.ThreadInformation info -> DkUJ
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> Ujvp
    63:70:void execute(react.gconcurrent.Execution) -> hamF
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> xiKs
    92:92:java.util.Queue getQueue() -> EBbh
    97:97:react.gconcurrent.ThreadInformation getInfo() -> IqRk
react.gconcurrent.QueueMode -> QgcN:
    react.gconcurrent.QueueMode ROUND_ROBIN -> ghgT
    react.gconcurrent.QueueMode SMALLEST -> sQun
    react.gconcurrent.QueueMode[] ENUM$VALUES -> JJaG
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> LyvX:
    react.gconcurrent.ParallelPoolManager mgr -> wpFi
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> LyvX$1:
    react.gconcurrent.S this$0 -> bivy
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> CgLT:
    long tick -> UuTc
    long atick -> qnTI
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> ofhi:
    double ticksPerSecond -> JRqQ
    int queuedSize -> USRA
    boolean processing -> ptAu
    double utilization -> Qpwc
    react.gmath.Average ticksPerSecondAverage -> UcrK
    long tick -> UuTc
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> HLLq
    33:35:void setTicksPerSecond(double) -> CfdJ
    39:39:int getQueuedSize() -> vRPr
    44:45:void setQueuedSize(int) -> wCeF
    49:49:boolean isProcessing() -> WOgP
    54:55:void setProcessing(boolean) -> yIjn
    59:59:double getUtilization() -> NpBL
    64:65:void setUtilization(double) -> yIjn
    69:69:double getTicksPerSecondAverage() -> qufA
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> vRQQ
    89:89:int getId() -> getId
react.gformat.F -> Cfjv:
    java.text.NumberFormat NF -> wVRX
    java.text.DecimalFormat DF -> inkh
    java.lang.String[] NAMES -> AbJs
    java.math.BigInteger THOUSAND -> Nxou
    java.util.NavigableMap MAP -> wUpt
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> wUGJ
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> wegp
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> wegp
    201:221:java.lang.String timeLong(long,int) -> wegp
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> hamF
    236:236:java.lang.String b(double) -> iBlp
    241:258:java.lang.String b(java.math.BigInteger) -> wegp
    263:267:void instantiate() -> gMuL
    279:279:java.lang.String fileSize(long) -> qBSx
    292:292:java.lang.String memSize(long) -> PAuJ
    305:306:java.lang.String stamp(long) -> SurT
    322:349:java.lang.String ofSize(long,int) -> xiKs
    363:368:java.lang.String trim(java.lang.String,int) -> xiKs
    381:401:java.lang.String cname(java.lang.String) -> wCeF
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> tvQa
    459:477:java.lang.String memx(long) -> Pcwe
    491:492:java.lang.String f(long) -> pYDN
    504:505:java.lang.String f(int) -> bNxY
    519:528:java.lang.String f(double,int) -> xiKs
    544:553:java.lang.String fd(double,int) -> hamF
    567:576:java.lang.String f(float,int) -> wegp
    587:587:java.lang.String f(double) -> HCOb
    598:598:java.lang.String f(float) -> wegp
    613:613:java.lang.String pc(double,int) -> qBSx
    628:628:java.lang.String pc(float,int) -> xiKs
    641:641:java.lang.String pc(double) -> FMit
    654:654:java.lang.String pc(float) -> xiKs
    670:670:java.lang.String pc(int,int,int) -> wegp
    684:684:java.lang.String pc(int,int) -> hamF
    700:700:java.lang.String pc(long,long,int) -> wegp
    714:714:java.lang.String pc(long,long) -> qBSx
    726:726:java.lang.String msSeconds(long) -> Ujvp
    740:740:java.lang.String msSeconds(long,int) -> hamF
    752:752:java.lang.String nsMs(long) -> CfdJ
    766:766:java.lang.String nsMs(long,int) -> qBSx
    780:780:java.lang.String nsMsd(long,int) -> PAuJ
react.glang.AccessCallback -> mWqd:
    java.lang.Object get() -> get
react.glang.Adapter -> xFoB:
    java.lang.Object adapt(java.lang.Object) -> SurT
    java.lang.Object onAdapt(java.lang.Object) -> tvQa
react.glang.Callback -> YgKT:
    java.lang.Object t -> tTxY
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> wegp
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> Vvrg:
    double i -> pkQB
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> HBnf
react.glang.FinalFloat -> cthH:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> hamF
react.glang.FinalInteger -> brHg:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> eaTG
react.glang.FinalLong -> LqiJ:
    long i -> MeLq
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> yIjn
react.glang.FinalString -> cAet:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> pioH:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> SurT
    java.lang.Object onAdapt(java.lang.Object) -> tvQa
react.glang.GBiset -> rNST:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> AHWt
    java.lang.Object b -> yTHP
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> UkdS
    53:54:void setA(java.lang.Object) -> Pcwe
    63:63:java.lang.Object getB() -> hjjf
    73:74:void setB(java.lang.Object) -> pYDN
react.glang.GList -> NgNa:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> qBSx
    45:52:react.glang.GList grepDistance(int,int) -> PAuJ
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> xiKs
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> vlBp
    188:190:react.glang.GList shuffleCopy() -> VDUD
    198:199:void shuffle() -> fKRf
    210:236:react.glang.GList split() -> EmWg
    248:248:boolean hasIndex(int) -> CUcP
    258:259:java.lang.Object pickRandom() -> FhKD
    270:277:react.glang.GList stringList() -> UtVJ
    288:292:void forEach(react.glang.Callback) -> xiKs
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> fmHS
    336:336:react.glang.GList cropFrom(int) -> bNxU
    341:373:react.glang.GList split(int) -> TpdJ
    389:389:react.glang.GList cropTo(int) -> KfIs
    406:416:react.glang.GList crop(int,int) -> SurT
    427:431:react.glang.GList removeDuplicates() -> wvua
    442:446:void removeAll(java.lang.Object) -> Ujvp
    455:455:boolean hasDuplicates() -> xaGY
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> dxOe
    484:490:void push(java.lang.Object,int) -> wegp
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> CfdJ
    528:532:void add(java.util.List) -> wegp
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> NVMg
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> QWFn
    626:627:react.glang.GList qdel(java.lang.Object) -> yIjn
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> PJqd
    662:669:java.lang.Object popLast() -> Daal
    674:683:java.lang.Object popRandom() -> NVMr
react.glang.GListAdapter -> FFDn:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> xiKs
    java.lang.Object onAdapt(java.lang.Object) -> tvQa
react.glang.GMap -> WiXI:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> gpWg
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> wegp
    64:81:react.glang.GMap flip() -> UbrG
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> wegp
    121:121:react.glang.GList k() -> fmHS
    131:131:react.glang.GSet kset() -> wfTb
    141:141:react.glang.GList v() -> nSJD
    151:151:react.glang.GSet vset() -> GQYb
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> xiKs
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> tvQa
    209:219:react.glang.GMap removeDuplicateValues() -> iSxp
    233:242:void put(react.glang.GList,react.glang.GList) -> wegp
    251:267:react.glang.GList sortK() -> CUng
    277:293:react.glang.GList sortV() -> KevR
react.glang.GQuadraset -> hHfC:
    java.lang.Object a -> AHWt
    java.lang.Object b -> yTHP
    java.lang.Object c -> oEjC
    java.lang.Object d -> PmuS
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> UkdS
    25:26:void setA(java.lang.Object) -> Pcwe
    30:30:java.lang.Object getB() -> hjjf
    35:36:void setB(java.lang.Object) -> pYDN
    40:40:java.lang.Object getC() -> VUTs
    45:46:void setC(java.lang.Object) -> iBlp
    50:50:java.lang.Object getD() -> hbYG
    55:56:void setD(java.lang.Object) -> HCOb
react.glang.GSet -> EltY:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> uNji:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> AHWt
    java.lang.Object b -> yTHP
    java.lang.Object c -> oEjC
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> UkdS
    26:27:void setA(java.lang.Object) -> Pcwe
    31:31:java.lang.Object getB() -> hjjf
    36:37:void setB(java.lang.Object) -> pYDN
    41:41:java.lang.Object getC() -> VUTs
    46:47:void setC(java.lang.Object) -> iBlp
react.gmath.Average -> Nwnp:
    double[] values -> XeKr
    double average -> BJys
    boolean dirty -> CFMk
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> wUGJ
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> uqPC
react.gmath.DoubleArrayUtils -> lMBD:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> wegp
    17:19:void wrapRight(double[]) -> wegp
    23:27:void fill(double[],double) -> fill
react.gmath.M -> EmVA:
    int precision -> HnqM
    int modulus -> toOj
    float[] sin -> vtuN
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> wegp
    31:36:boolean r(java.lang.Double) -> xiKs
    51:51:double tps(long,int) -> SurT
    63:63:double ticksFromNS(long) -> iBlp
    75:101:java.lang.String toRoman(int) -> legc
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> tvQa
    144:216:int fromRoman(java.lang.String) -> bNxY
    226:226:long ns() -> fSbJ
    236:236:long ms() -> RPxW
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> xiKs
    333:333:float sinLookup(int) -> yAYa
react.gnet.client.Client -> flqn:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> ySkL
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> wegp
    74:74:react.gnet.packet.PacketHandler getHandler() -> yuJq
react.gnet.client.IClient -> LGVR:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> wegp
    react.gnet.packet.PacketHandler getHandler() -> yuJq
react.gnet.download.Download -> MckE:
    react.gnet.download.DownloadState state -> JuXT
    react.gnet.download.DownloadType type -> gGFo
    react.gnet.download.DownloadStatus status -> FiKq
    react.gnet.download.DownloadMonitor monitor -> sQxv
    java.net.URL url -> url
    java.io.File file -> rNvY
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> ytmk
    92:92:react.gnet.download.DownloadType getType() -> gxkK
    97:97:react.gnet.download.DownloadStatus getStatus() -> jhbW
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> DaeM
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> QVdo:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> wegp
    void onDownloadStarted(react.gnet.download.Download) -> wegp
    void onDownloadFinished(react.gnet.download.Download) -> xiKs
    void onDownloadFailed(react.gnet.download.Download) -> hamF
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> wegp
react.gnet.download.DownloadState -> hPuW:
    react.gnet.download.DownloadState IDLE -> VgYJ
    react.gnet.download.DownloadState DOWNLOADING -> CVpM
    react.gnet.download.DownloadState FAILED -> HnqX
    react.gnet.download.DownloadState FINISHED -> Xuom
    react.gnet.download.DownloadState[] $VALUES -> JJcs
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> mPDi:
    long bytesDownloaded -> jqql
    long bytesTotal -> mYXs
    long bytesPerSecond -> uYAK
    long timeElapsed -> DRDr
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> HLOQ
    25:25:long getBytesDownloaded() -> uNnt
    30:31:void setBytesDownloaded(long) -> HCOb
    35:35:long getBytesTotal() -> hjmE
    40:41:void setBytesTotal(long) -> FMit
    45:45:long getBytesPerSecond() -> wMFM
    50:51:void setBytesPerSecond(long) -> HBnf
    55:55:long getTimeElapsed() -> FgkY
    60:61:void setTimeElapsed(long) -> wUGJ
react.gnet.download.DownloadType -> WPGB:
    react.gnet.download.DownloadType DETERMINATE -> PCdl
    react.gnet.download.DownloadType INDETERMINATE -> apIF
    react.gnet.download.DownloadType[] $VALUES -> TaRH
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> fTBE:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> vkcu
    java.lang.String getPacketName() -> Nobv
react.gnet.packet.IncompatablePacketException -> gWCf:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> ylXa:
    react.gnet.packet.PacketBinding SERVER_BOUND -> gpxe
    react.gnet.packet.PacketBinding CLIENT_BOUND -> ORBn
    react.gnet.packet.PacketBinding[] $VALUES -> uaQA
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> JtRo:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> HBxB:
    react.glang.GList accept -> xrjF
    react.gnet.packet.PacketBinding side -> nBhV
    react.gnet.streams.OSS out -> ptDG
    react.gnet.streams.ISS in -> ognY
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> wegp
    28:34:void accept(react.gnet.packet.IPacket) -> xiKs
    38:46:react.gnet.packet.IPacket findPacket(int) -> ooRO
    51:66:react.gnet.packet.IPacket read() -> xqix
    71:77:void write(react.gnet.packet.IPacket) -> hamF
react.gnet.packet.UnhandledPacketException -> ggcy:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> DGmP:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> yuJq
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> qBSx
react.gnet.server.Server -> dfkP:
    int port -> port
    java.net.ServerSocket socket -> BuqF
    react.gnet.packet.PacketHandler handler -> ySkL
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> yuJq
    37:84:void run() -> run
    88:91:void pstart() -> vbsM
    95:96:void pstop() -> jiBf
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> qBSx
react.gnet.streams.ISS -> YwmR:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> WPiA
    boolean built -> jjAo
    byte[] readBuffer -> bQKi
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> Grnl
    64:72:react.glang.GList readStringList() -> PJtj
    77:85:react.glang.GList readDoubleList() -> vAQI
    90:98:react.glang.GList readLongList() -> cdNe
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> wegp
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> wegp
    136:137:react.gnet.streams.ISS gzip() -> wvxE
    142:147:void build() -> MRlK
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> xiKs
    435:436:void close() -> close
react.gnet.streams.OSS -> gFAh:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> xrmL
    react.gnet.streams.StreamBuilder bu -> WPiA
    boolean built -> jjAo
    byte[] writeBuffer -> qnXq
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> tdnX
    41:42:react.gnet.streams.OSS gzip(int) -> fArY
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> xiKs
    53:58:void build() -> MRlK
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> Pcwe
    102:108:void writeDoubleList(react.glang.GList) -> pYDN
    112:118:void writeLongList(react.glang.GList) -> Ujvp
    122:128:void writeStreamableList(react.glang.GList) -> CfdJ
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> PeGX
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> hamF
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> AFud:
    react.glang.GList constructors -> KMhm
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> wegp
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> wegp
    49:50:void bind(react.gnet.streams.StreamConstructor) -> wegp
    54:55:void bindGZIP(int) -> wUGA
    59:60:void bindGZIP() -> UIbP
    64:65:void bindCipher(javax.crypto.Cipher) -> hamF
    69:70:void bindBuffer(int) -> vIQd
    74:75:void bindBuffer() -> FMvv
react.gnet.streams.StreamConstructor -> WywX:
    java.io.InputStream constructInput(java.io.InputStream) -> wegp
    java.io.OutputStream constructOutput(java.io.OutputStream) -> wegp
react.gnet.streams.constructors.BufferedStreamConstructor -> ghEb:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> xiKs
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> xiKs
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> wegp
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> wegp
react.gnet.streams.constructors.CipherStreamConstructor -> tBuK:
    javax.crypto.Cipher cipher -> kJcx
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> hamF
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> hamF
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> wegp
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> wegp
react.gnet.streams.constructors.GZipStreamConstructor -> imie:
    int compressionLevel -> GuBX
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> qBSx
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> qBSx
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> wegp
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> wegp
react.gnet.streams.overlays.CGZIPInputStream -> yBEG:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> hkHI:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> fJnc:
    void toBytes(react.gnet.streams.OSS) -> wegp
    void fromBytes(react.gnet.streams.ISS) -> wegp
react.graph.ColossalView -> LiXN:
    react.papyrus.BufferedFrame view -> gOYl
    react.glang.GMap buffers -> CqGH
    react.glang.GMap graphs -> dFOn
    double level -> HfcW
    double targetLevel -> TXct
    int maxX -> xakM
    int maxY -> xGwk
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> wetv
    51:77:void render() -> FhKO
    81:98:void scroll(int) -> SePr
    102:112:void recompile() -> JbuH
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> wegp
    122:122:react.papyrus.BufferedFrame getView() -> woHO
    127:127:react.glang.GMap getBuffers() -> PmWi
    132:132:react.glang.GMap getGraphs() -> baIo
    137:137:double getLevel() -> Aqmq
    142:142:double getTargetLevel() -> YfpJ
    147:147:int getMaxX() -> XRjw
    152:152:int getMaxY() -> VMEt
react.graph.ColossalView$Builder -> LiXN$wegp:
    react.glang.GList graphs -> TifM
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> wegp
    171:191:react.graph.ColossalView compute() -> Kewn
react.graph.CubicleIterator -> rVbJ:
    int[][] mapping -> afyj
    int xCubes -> nSlv
    int yCubes -> qUGK
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> CMQs
    47:130:void insert(react.graph.GraphSize,int) -> wegp
    134:145:void print() -> print
react.graph.GraphSampleLine -> YgLo:
    double lx -> XBlw
    double ly -> xHXq
    react.api.ISampler sampler -> nBkd
    react.graph.IFormatter formatter -> Jtyk
    byte graphColor -> wUun
    byte backgroundColor -> kBSO
    byte borderColor -> dVoj
    byte textColor -> Nxso
    int ticksLeftTitle -> DAEa
    int ticksOutTitle -> xGwY
    double nextPoint -> vBRd
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> bWmF
    51:183:void onRender(react.papyrus.BufferedFrame) -> wegp
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> xiKs
    226:254:int getHue(int,int,int) -> hamF
    259:281:void scaleFor(react.glang.GList) -> yIjn
    285:285:react.graph.IFormatter getFormatter() -> ssQG
    290:291:void setFormatter(react.graph.IFormatter) -> wegp
    295:295:byte getGraphColor() -> ObED
    300:301:void setGraphColor(byte) -> wegp
    305:305:byte getBackgroundColor() -> ESfP
    310:311:void setBackgroundColor(byte) -> xiKs
    315:315:byte getBorderColor() -> WWxh
    320:321:void setBorderColor(byte) -> hamF
    325:325:byte getTextColor() -> lfWH
    330:331:void setTextColor(byte) -> qBSx
    335:335:react.api.ISampler getSampler() -> WrMB
react.graph.GraphSize -> Vvtg:
    react.graph.GraphSize WIDE -> fmwj
    react.graph.GraphSize FULL -> vAqa
    react.graph.GraphSize SQUARE -> HoRw
    int[] $SWITCH_TABLE$react$graph$GraphSize -> KUyA
    react.graph.GraphSize[] ENUM$VALUES -> hkll
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> yBHa
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> sHhA
react.graph.GraphText -> yuIS:
    java.lang.String text -> text
    byte fontColor -> rykE
    byte backgroundColor -> kBSO
    boolean wrote -> nSkl
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> wegp
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> wTtB
    68:69:void setFontColor(byte) -> PAuJ
    73:73:byte getBackgroundColor() -> ESfP
    78:79:void setBackgroundColor(byte) -> xiKs
react.graph.GraphingInstance -> BdLK:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> TifM
    react.graph.ColossalView view -> YgrW
    react.papyrus.Papyrus papyrus -> fUFj
    react.papyrus.IRenderer renderer -> yTPP
    boolean mapping -> IWon
    react.glang.GList msgs -> OsjG
    react.surge.sched.Task waiter -> BmdS
    react.surge.sched.Task waiter2 -> broj
    int shift -> pshW
    boolean notif -> urVi
    47:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> wegp
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> wegp
    138:142:void send(java.lang.String) -> eaTG
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> wegp
    153:165:void on(react.event.ReactScrollEvent) -> wegp
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> wegp
    179:187:void destroy() -> destroy
    191:200:void toggle() -> AFxu
    204:205:void setGraphs(react.glang.GList) -> iBlp
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> aTts
    243:259:void compile() -> uhcg
    40:40:boolean access$0(react.graph.GraphingInstance) -> wegp
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> xiKs
    45:45:boolean access$2(react.graph.GraphingInstance) -> hamF
    45:45:void access$3(react.graph.GraphingInstance,boolean) -> wegp
    44:44:int access$4(react.graph.GraphingInstance) -> qBSx
    44:44:void access$5(react.graph.GraphingInstance,int) -> wegp
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> PAuJ
react.graph.GraphingInstance$1 -> BdLK$1:
    react.graph.GraphingInstance this$0 -> GIoT
    org.bukkit.entity.Player val$player -> NVsn
    1:51:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> BdLK$2:
    react.graph.GraphingInstance this$0 -> GIoT
    1:76:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> BdLK$3:
    react.graph.GraphingInstance this$0 -> GIoT
    1:106:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> wegp
react.graph.IFormatter -> xyxr:
    java.lang.String from(double) -> wCeF
react.graph.IGraph -> EBbh:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> cdPW
    long getTimeViewport() -> iKoF
    void render(react.papyrus.BufferedFrame) -> hamF
    double getMax() -> getMax
    void setMax(double) -> bNxY
react.graph.NormalGraph -> IqRk:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> SVCm
    long timeViewport -> XTQW
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> cdPW
    35:35:long getTimeViewport() -> iKoF
    41:42:void render(react.papyrus.BufferedFrame) -> hamF
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> bNxY
    void onRender(react.papyrus.BufferedFrame) -> wegp
react.graph.PlotBoard -> HLLq:
    react.glang.GMap plots -> RdAx
    int maxRecordings -> OAFh
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> YMaO
    33:33:long getAccurateTimeSpan() -> jGBc
    38:50:long getMedian(long,long) -> PAuJ
    55:55:long getMinimumAccuracyRange() -> vkfX
    60:70:double getMaxValue() -> wCtn
    75:85:double getMinValue() -> VTyT
    90:90:react.glang.GList sort(react.glang.GMap) -> xiKs
    95:105:long earilestRecording() -> UkiN
    110:120:long latestRecording() -> XSPR
    125:126:void reduceBefore(long) -> wCeF
    130:156:void reduceBetween(long,long) -> SurT
    160:160:boolean before(long,long) -> tvQa
    165:165:boolean after(long,long) -> Pcwe
    170:170:boolean within(long,long,long) -> wegp
    175:193:react.glang.GMap getBetween(long,long) -> pYDN
    198:200:void plot(long,double) -> wegp
    204:204:boolean hasAt(long) -> bNxY
    209:209:double getAt(long) -> eaTG
    214:214:int getSize() -> getSize
react.graph.Point -> vRPr:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> WOgP:
    int iid -> Gcax
    react.graph.IGraph graph -> YhUx
    react.graph.GraphSize size -> xrmu
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> uhbq
    24:25:void setGraph(react.graph.IGraph) -> wegp
    29:29:react.graph.GraphSize getSize() -> Coen
    34:35:void setSize(react.graph.GraphSize) -> wegp
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> NpBL:
    react.graph.RenderMaxType UNLIMITED -> XSqM
    react.graph.RenderMaxType LIMITED -> NWVH
    react.graph.RenderMaxType[] ENUM$VALUES -> aNIk
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> qufA:
    java.lang.String CRLF -> lUyJ
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> CUcP
    162:198:java.lang.String toString(react.json.JSONObject) -> xiKs
react.json.HTTPTokener -> vRQQ:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> gMuL:
    java.util.ArrayList myArrayList -> wDvg
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> wegp
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> TOAx
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> AiOO
    394:399:react.json.JSONObject getJSONObject(int) -> lDER
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> fmHS
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> PAtb
    515:515:boolean optBoolean(int) -> CVBs
    533:536:boolean optBoolean(int,boolean) -> xiKs
    551:551:double optDouble(int) -> OGcC
    569:572:double optDouble(int,double) -> wegp
    587:587:int optInt(int) -> lmwe
    605:608:int optInt(int,int) -> Pcwe
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> xiKs
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> wegp
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> wegp
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> wegp
    722:723:react.json.JSONArray optJSONArray(int) -> kHqc
    737:738:react.json.JSONObject optJSONObject(int) -> ktFi
    752:752:long optLong(int) -> qtyk
    770:773:long optLong(int,long) -> wegp
    788:788:java.lang.String optString(int) -> RbPf
    803:804:java.lang.String optString(int,java.lang.String) -> wegp
    816:817:react.json.JSONArray put(boolean) -> iBlp
    830:831:react.json.JSONArray put(java.util.Collection) -> wegp
    845:848:react.json.JSONArray put(double) -> eaTG
    860:861:react.json.JSONArray put(int) -> ssQG
    873:874:react.json.JSONArray put(long) -> CUcP
    887:888:react.json.JSONArray put(java.util.Map) -> wegp
    902:903:react.json.JSONArray put(java.lang.Object) -> FMit
    921:922:react.json.JSONArray put(int,boolean) -> hamF
    939:940:react.json.JSONArray put(int,java.util.Collection) -> wegp
    958:959:react.json.JSONArray put(int,double) -> xiKs
    977:978:react.json.JSONArray put(int,int) -> pYDN
    996:997:react.json.JSONArray put(int,long) -> xiKs
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> wegp
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> wegp
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> HBnf
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> wegp
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> wegp
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> wegp
react.json.JSONException -> UkdS:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> APoW
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> hjjf:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> wegp
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> bNxU
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> wegp
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> xiKs
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> CUcP
    379:456:java.lang.String toString(react.json.JSONArray) -> xiKs
    472:552:java.lang.String toString(react.json.JSONObject) -> xiKs
react.json.JSONObject -> vlBp:
    java.util.Map map -> map
    java.lang.Object NULL -> XdqL
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> wegp
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> xiKs
    480:499:java.lang.String doubleToString(double) -> CUcP
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> TpdJ
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> KfIs
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> legc
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> hamF
    751:767:java.lang.String[] getNames(java.lang.Object) -> wUGJ
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> yAYa
    855:855:boolean isNull(java.lang.String) -> ooRO
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> Ubvy
    917:937:java.lang.String numberToString(java.lang.Number) -> wegp
    949:949:java.lang.Object opt(java.lang.String) -> Grnl
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> wegp
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> wegp
    1018:1018:boolean optBoolean(java.lang.String) -> tdnX
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> wegp
    1054:1054:double optDouble(java.lang.String) -> fArY
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> wegp
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> wegp
    1116:1119:double optDouble(java.lang.String,double) -> wegp
    1134:1134:int optInt(java.lang.String) -> wUGA
    1152:1155:int optInt(java.lang.String,int) -> hamF
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> vIQd
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> SePr
    1198:1198:long optLong(java.lang.String) -> CMQs
    1216:1219:long optLong(java.lang.String,long) -> wegp
    1234:1234:java.lang.String optString(java.lang.String) -> TOAx
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> xiKs
    1255:1305:void populateMap(java.lang.Object) -> wCeF
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> xiKs
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> wegp
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> xiKs
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> qBSx
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> xiKs
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> wegp
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> hamF
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> qBSx
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> PAuJ
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> wegp
    1590:1590:java.lang.Object remove(java.lang.String) -> AiOO
    1605:1640:boolean similar(java.lang.Object) -> HBnf
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> bNxY
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> hamF
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> wegp
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> wegp
    2000:2004:void indent(java.io.Writer,int) -> wegp
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> wegp
react.json.JSONObject$Null -> vlBp$wegp:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> VDUD:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> fKRf:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> EmWg:
    long character -> oFOx
    boolean eof -> eof
    long index -> WQNO
    long line -> wgYk
    char previous -> fUIQ
    java.io.Reader reader -> reader
    boolean usePrevious -> LPnH
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> aDXF
    119:131:int dehexchar(char) -> wegp
    136:136:boolean end() -> HfDe
    147:153:boolean more() -> brOR
    164:198:char next() -> next
    213:218:char next(char) -> xiKs
    233:250:java.lang.String next(int) -> mhnE
    263:266:char nextClean() -> oVPv
    287:334:java.lang.String nextString(char) -> hamF
    349:361:java.lang.String nextTo(char) -> qBSx
    376:388:java.lang.String nextTo(java.lang.String) -> lDER
    403:441:java.lang.Object nextValue() -> aCvg
    458:479:char skipTo(char) -> PAuJ
    491:491:react.json.JSONException syntaxError(java.lang.String) -> PAtb
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> FhKD:
    int maxdepth -> bPkp
    boolean comma -> XLAD
    char mode -> xsQn
    react.json.JSONObject[] stack -> IjJl
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> CVBs
    157:164:react.json.JSONWriter array() -> ySMY
    180:193:react.json.JSONWriter end(char,char) -> wegp
    206:206:react.json.JSONWriter endArray() -> HfDb
    219:219:react.json.JSONWriter endObject() -> dxTq
    235:258:react.json.JSONWriter key(java.lang.String) -> OGcC
    274:285:react.json.JSONWriter object() -> MBNt
    299:310:void pop(char) -> SurT
    322:329:void push(react.json.JSONObject) -> qBSx
    342:342:react.json.JSONWriter value(boolean) -> HCOb
    356:356:react.json.JSONWriter value(double) -> fmHS
    369:369:react.json.JSONWriter value(long) -> fmHS
    385:385:react.json.JSONWriter value(java.lang.Object) -> eaTG
react.json.XML -> UtVJ:
    java.lang.Character AMP -> nCPl
    java.lang.Character APOS -> LYaY
    java.lang.Character BANG -> eYxL
    java.lang.Character EQ -> ynEO
    java.lang.Character GT -> Bmep
    java.lang.Character LT -> cTRh
    java.lang.Character QUEST -> lNLe
    java.lang.Character QUOT -> UAww
    java.lang.Character SLASH -> SVEm
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> lmwe
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> wegp
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> CUcP
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> wvua:
    java.util.HashMap entity -> nKac
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> loIx
    108:133:java.lang.Object nextContent() -> PTHK
    149:166:java.lang.Object nextEntity(char) -> tvQa
    186:239:java.lang.Object nextMeta() -> lDUn
    261:334:java.lang.Object nextToken() -> ncnO
    354:420:boolean skipPast(java.lang.String) -> kHqc
react.papyrus.BufferedFrame -> xaGY:
    byte[][] frame -> RteL
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> wegp
    90:97:void write(byte) -> SurT
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> wegp
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> wegp
    131:145:java.awt.image.BufferedImage toBufferedImage() -> BKAR
    153:160:void writeRainbowMul() -> ccmu
    167:174:void writeRainbowAdd() -> jydi
    181:191:void writeSparks() -> rWHv
    195:201:boolean write(int,int,byte) -> wegp
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> wegp
    233:250:void write(react.papyrus.BufferedFrame) -> qBSx
    254:254:byte[][] getRawFrame() -> YxTW
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> dxOe:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> qBSx
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> wegp
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> NVMg:
    org.bukkit.map.MapView getView() -> RHlB
    react.papyrus.BufferedFrame getFrameBuffer() -> pQBy
    void addRenderer(react.papyrus.IRenderer) -> wegp
    void clearRenderers() -> GILy
    react.glang.GList getRenderers() -> Oiuf
    void removeRenderer(react.papyrus.IRenderer) -> xiKs
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> wMEv
react.papyrus.IRenderer -> QWFn:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> wegp
react.papyrus.Papyrus -> PJqd:
    org.bukkit.map.MapView map -> DHxc
    react.papyrus.BufferedFrame frameBuffer -> AkDJ
    react.papyrus.BufferedFrame lastFrameBuffer -> RktD
    react.glang.GList renderers -> xPlx
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> RHlB
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> pQBy
    51:52:void addRenderer(react.papyrus.IRenderer) -> wegp
    57:58:void clearRenderers() -> GILy
    63:63:react.glang.GList getRenderers() -> Oiuf
    69:70:void removeRenderer(react.papyrus.IRenderer) -> xiKs
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> wMEv
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> wegp
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> xiKs
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> hamF
react.papyrus.Papyrus$1 -> PJqd$1:
    react.papyrus.Papyrus this$0 -> oxwP
    org.bukkit.map.MapCanvas val$c -> jrXv
    org.bukkit.map.MapView val$v -> ECkd
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> Daal:
    int spaceSize -> UlmF
    java.lang.String fontChars -> cuuW
    int[][] fontData -> Rkst
    react.papyrus.ReactFont Font -> hdAw
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> NVMr:
    react.glang.GList subgoals -> EfMo
    java.lang.String tag -> Yxwd
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> hHik
    26:44:void propigate() -> IGCV
    49:50:void addGoal(react.rai.IGoal) -> wegp
    55:65:react.glang.GList getFailingSubgoals() -> rFGS
    71:71:boolean isFailing() -> kIbh
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> WPLR
    void onPropigated() -> GYmq
react.rai.Goal$1 -> NVMr$1:
    react.rai.Goal this$0 -> jihB
    react.rai.IGoal val$i -> GuFB
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> gpWg:
    react.glang.GList getSubgoals() -> hHik
    void propigate() -> IGCV
    void onPropigated() -> GYmq
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> rFGS
    boolean isFailing() -> kIbh
    boolean onCheckFailing() -> WPLR
    void update() -> update
    void addGoal(react.rai.IGoal) -> wegp
react.rai.IRAI -> UbrG:
    react.glang.GList getGoals() -> lvxy
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> wegp
    react.glang.GList getEvents() -> DQEr
    void callEvent(react.rai.RAIEvent) -> wegp
    react.glang.GList getListeners() -> EukU
react.rai.RAI -> wfTb:
    react.glang.GList goals -> baoW
    react.glang.GList events -> YErm
    react.glang.GList logEvents -> Nxxc
    react.glang.GList listeners -> yBnP
    long since -> Ygvg
    react.rai.RAI instance -> GktI
    21:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> lvxy
    41:42:void addGoal(react.rai.IGoal) -> wegp
    47:77:void tick() -> tick
    82:82:react.glang.GList getEvents() -> DQEr
    88:95:void callEvent(react.rai.RAIEvent) -> wegp
    100:100:react.glang.GList getListeners() -> EukU
react.rai.RAIEvent -> nSJD:
    react.rai.RAIEventType type -> UAwi
    java.lang.String[] pars -> jHET
    java.lang.String ovt -> ejxc
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> dVQT
    29:29:java.lang.String[] getPars() -> vbtT
    34:34:java.lang.String getOvt() -> eQDK
react.rai.RAIEventType -> GQYb:
    react.rai.RAIEventType FIRE_ACTION -> OtOQ
    react.rai.RAIEventType NOTE_GOAL_FAILING -> RdEx
    react.rai.RAIEventType NOTE_GOAL_FIXED -> jOwf
    java.lang.String[] msgs -> nCRw
    react.rai.RAIEventType[] ENUM$VALUES -> sIqW
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> bOio
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> wegp
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedChunkLoad -> iSxp:
    boolean failing -> TOyH
    24:27:void <init>() -> <init>
    34:60:boolean onCheckFailing() -> WPLR
    66:79:void onPropigated() -> GYmq
react.rai.goals.GoalReducedChunkLoad$1 -> iSxp$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> yKcF
    1:42:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    47:56:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> iSxp$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> yKcF
    1:68:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    73:76:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> CUng:
    boolean failing -> TOyH
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> WPLR
    91:134:void onPropigated() -> GYmq
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> wegp
react.rai.goals.GoalReducedEntityCounts$1 -> CUng$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> xPpP
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> CUng$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> xPpP
    org.bukkit.Chunk val$lx -> YFXD
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> KevR:
    boolean failing -> TOyH
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> WPLR
    78:128:void onPropigated() -> GYmq
react.rai.goals.GoalStableChunkTime$1 -> KevR$1:
    react.rai.goals.GoalStableChunkTime this$0 -> RdGL
    1:54:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> KevR$2:
    react.rai.goals.GoalStableChunkTime this$0 -> RdGL
    java.lang.Object val$i -> Fytt
    1:111:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> VUTs:
    boolean failing -> TOyH
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> GYmq
    35:35:void letUp() -> DGur
    40:77:boolean onCheckFailing() -> WPLR
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> wegp
react.rai.goals.GoalStableEntityTime$1 -> VUTs$1:
    react.rai.goals.GoalStableEntityTime this$0 -> WPqv
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> hbYG:
    boolean failing -> TOyH
    react.glang.GMap reocc -> vlmE
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> GYmq
    88:125:boolean onCheckFailing() -> WPLR
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> wegp
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> xiKs
react.rai.goals.GoalStableFluidTime$1 -> hbYG$1:
    react.rai.goals.GoalStableFluidTime this$0 -> PwRg
    org.bukkit.Chunk val$lx -> YFXD
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> hbYG$2:
    react.rai.goals.GoalStableFluidTime this$0 -> PwRg
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> uqPC:
    boolean failing -> TOyH
    react.glang.GMap reocc -> vlmE
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> GYmq
    89:125:boolean onCheckFailing() -> WPLR
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> wegp
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> xiKs
react.rai.goals.GoalStableHopperTime$1 -> uqPC$1:
    react.rai.goals.GoalStableHopperTime this$0 -> TGfy
    org.bukkit.Chunk val$lx -> YFXD
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> uqPC$2:
    react.rai.goals.GoalStableHopperTime this$0 -> TGfy
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> fSbJ:
    boolean failing -> TOyH
    react.glang.GMap reocc -> vlmE
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> GYmq
    89:126:boolean onCheckFailing() -> WPLR
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> wegp
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> xiKs
react.rai.goals.GoalStableRedstoneTime$1 -> fSbJ$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> gWno
    org.bukkit.Chunk val$lx -> YFXD
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> fSbJ$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> gWno
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> RPxW:
    boolean failing -> TOyH
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> GYmq
    34:58:boolean onCheckFailing() -> WPLR
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> wegp
react.rai.goals.GoalStableTickTime$1 -> RPxW$1:
    react.rai.goals.GoalStableTickTime this$0 -> WYai
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> yuJq:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> fTkg
    boolean authenticated -> RBCA
    react.remote.server.ServerInfo info -> FPBG
    react.glang.GMap frems -> LbSr
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> DYHT
    51:51:react.glang.GMap getFrames() -> Ubxt
    56:75:int computeFrames() -> dUsN
    80:92:boolean clearToken() -> fKYA
    97:110:boolean updateServerInfo() -> Cfuv
    115:129:boolean refreshToken() -> loNA
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> hamF
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> lCwt
    165:165:boolean isAuthenticated() -> PvNV
    170:170:react.remote.server.ServerInfo getInfo() -> kQvi
react.remote.client.packet.CPacketClearToken -> ytmk:
    java.lang.String token -> fTkg
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wegp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wegp
    38:38:java.lang.String getToken() -> lCwt
    43:44:void setToken(java.lang.String) -> ktFi
react.remote.client.packet.CPacketComputeFrames -> gxkK:
    java.lang.String token -> fTkg
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wegp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wegp
    38:38:java.lang.String getToken() -> lCwt
    43:44:void setToken(java.lang.String) -> ktFi
react.remote.client.packet.CPacketGetInfo -> jhbW:
    java.lang.String token -> fTkg
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wegp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wegp
    38:38:java.lang.String getToken() -> lCwt
    43:44:void setToken(java.lang.String) -> ktFi
react.remote.client.packet.CPacketGetToken -> DaeM:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> wegp
    36:38:void fromBytes(react.gnet.streams.ISS) -> wegp
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> HLOQ:
    java.lang.String token -> fTkg
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wegp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wegp
    38:38:java.lang.String getToken() -> lCwt
    43:44:void setToken(java.lang.String) -> ktFi
react.remote.client.packet.ClientPacket -> uNnt:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> wegp
    void fromBytes(react.gnet.streams.ISS) -> wegp
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> vkcu
    42:42:java.lang.String getPacketName() -> Nobv
react.remote.client.packet.ClientPacketType -> hjmE:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> BuyS
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> Laro
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> yBog
    react.remote.client.packet.ClientPacketType GET_INFO -> ORLG
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> dWYr
    react.remote.client.packet.ClientPacketType[] $VALUES -> dqLj
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> wMFM:
    react.glang.GMap compute(long,long) -> hamF
react.remote.server.KnownUser -> FgkY:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> vkcu:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> wegp
    38:41:void fromBytes(react.gnet.streams.ISS) -> wegp
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> Nobv:
    react.glang.GList users -> MSwR
    react.glang.GMap session -> WQUJ
    react.glang.GMap lastCompute -> EURI
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> pioH
    44:45:void registerUser(react.remote.server.KnownUser) -> wegp
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> xiKs
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> qtyk
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> qBSx
    react.remote.server.IFrameComputer getFrameComputer() -> rNST
    170:171:void markLastCompute(react.remote.server.KnownUser) -> hamF
    175:180:long getLastCompute(react.remote.server.KnownUser) -> qBSx
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> wegp
    190:191:void deleteSession(react.remote.server.KnownUser) -> PAuJ
    195:195:java.lang.String createToken() -> kQwJ
react.remote.server.ServerInfo -> xqix:
    java.lang.String motd -> YOJW
    int gameProtocol -> AHdP
    java.lang.String gameVersion -> Wjfl
    java.lang.String reactVersion -> RItt
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> SMYS
    int viewDistance -> viewDistance
    int gamePort -> WQUX
    java.lang.String gameAddress -> nKdl
    react.glang.GList remotePlugins -> PURI
    react.glang.GList worlds -> vJlD
    react.glang.GList actions -> BnKD
    react.glang.GList samplers -> fDOD
    26:26:react.remote.server.ServerInfo empty() -> GsdD
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> wegp
    146:159:void fromBytes(react.gnet.streams.ISS) -> wegp
    java.lang.String dgetMotd() -> rgau
    int dgetGameProtocol() -> mFqD
    java.lang.String dgetGameVersion() -> EmRM
    java.lang.String dgetReactVersion() -> bqda
    int dgetMaxPlayers() -> qmPE
    react.glang.GList dgetConnectedPlayers() -> RHbn
    int dgetViewDistance() -> QgcN
    int dgetGamePort() -> LyvX
    java.lang.String dgetGameAddress() -> CgLT
    react.glang.GList dgetRemotePlugins() -> ofhi
    react.glang.GList dgetWorlds() -> Cfjv
    react.glang.GList dgetActions() -> mWqd
    react.glang.GList dgetSamplers() -> xFoB
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> dDqR
    199:199:java.lang.String getGameVersion() -> dESN
    204:204:java.lang.String getReactVersion() -> lMJO
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> UIgd
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> XmDn
    229:229:java.lang.String getGameAddress() -> SCab
    234:234:react.glang.GList getRemotePlugins() -> rVkI
    239:239:react.glang.GList getWorlds() -> wnjs
    244:244:react.glang.GList getActions() -> jWYH
    249:249:react.glang.GList getSamplers() -> BdSY
react.remote.server.ServerInfo$1 -> xqix$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> Cfjv
    37:37:int dgetViewDistance() -> QgcN
    43:43:react.glang.GList dgetRemotePlugins() -> ofhi
    49:49:java.lang.String dgetReactVersion() -> bqda
    55:55:java.lang.String dgetMotd() -> rgau
    61:61:int dgetMaxPlayers() -> qmPE
    67:67:java.lang.String dgetGameVersion() -> EmRM
    73:73:int dgetGameProtocol() -> mFqD
    79:79:int dgetGamePort() -> LyvX
    85:85:java.lang.String dgetGameAddress() -> CgLT
    91:91:react.glang.GList dgetConnectedPlayers() -> RHbn
    97:97:react.glang.GList dgetActions() -> mWqd
    103:103:react.glang.GList dgetSamplers() -> xFoB
react.remote.server.packet.ComputedFrame -> vbsM:
    react.glang.GMap values -> EDPn
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> wegp
    28:36:void fromBytes(react.gnet.streams.ISS) -> wegp
    40:40:react.glang.GMap getValues() -> wDWv
    45:46:void setValues(react.glang.GMap) -> hamF
react.remote.server.packet.SPacketOk -> jiBf:
    boolean ok -> Vgcg
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wegp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wegp
    38:38:boolean isOk() -> xOlA
    43:44:void setOk(boolean) -> FMit
react.remote.server.packet.SPacketSendFrames -> PJtj:
    react.glang.GMap frames -> CVyg
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> wegp
    36:44:void fromBytes(react.gnet.streams.ISS) -> wegp
    48:48:react.glang.GMap getFrames() -> Ubxt
    53:54:void setFrames(react.glang.GMap) -> qBSx
react.remote.server.packet.SPacketSendInfo -> vAQI:
    react.remote.server.ServerInfo info -> FPBG
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wegp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wegp
    38:38:react.remote.server.ServerInfo getInfo() -> kQvi
    43:44:void setInfo(react.remote.server.ServerInfo) -> wegp
react.remote.server.packet.SPacketSendToken -> cdNe:
    java.lang.String token -> fTkg
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wegp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wegp
    38:38:java.lang.String getToken() -> lCwt
    43:44:void setToken(java.lang.String) -> ktFi
react.remote.server.packet.ServerPacket -> wvxE:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> wegp
    void fromBytes(react.gnet.streams.ISS) -> wegp
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> vkcu
    42:42:java.lang.String getPacketName() -> Nobv
react.remote.server.packet.ServerPacketType -> MRlK:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> gqci
    react.remote.server.packet.ServerPacketType SEND_INFO -> yLDi
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> KNPp
    react.remote.server.packet.ServerPacketType OK -> KFAI
    react.remote.server.packet.ServerPacketType[] $VALUES -> vmOL
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> PeGX:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleAsyncQueue$1 -> PeGX$1:
    react.sampler.SampleAsyncQueue this$0 -> opix
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleChunkTime -> UIbP:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleChunkTime$1 -> UIbP$1:
    react.sampler.SampleChunkTime this$0 -> dOII
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleChunksLoaded -> FMvv:
    react.graph.IFormatter formatter -> Jtyk
    17:27:void <init>() -> <init>
    32:38:void construct() -> gDxg
    43:44:void sample() -> bWmF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleChunksLoaded$1 -> FMvv$1:
    react.sampler.SampleChunksLoaded this$0 -> uiji
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> wCeF
react.sampler.SampleChunksLoadedPerSecond -> wetv:
    react.gmath.Average a -> jXio
    react.graph.IFormatter formatter -> Jtyk
    16:29:void <init>() -> <init>
    34:40:void construct() -> gDxg
    45:47:void sample() -> bWmF
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleChunksLoadedPerSecond$1 -> wetv$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> OsoN
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> wCeF
react.sampler.SampleEntitiesDrops -> FhKO:
    react.graph.IFormatter formatter -> Jtyk
    17:27:void <init>() -> <init>
    32:38:void construct() -> gDxg
    43:44:void sample() -> bWmF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleEntitiesDrops$1 -> FhKO$1:
    react.sampler.SampleEntitiesDrops this$0 -> yLEP
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> wCeF
react.sampler.SampleEntitiesLiving -> JbuH:
    react.graph.IFormatter formatter -> Jtyk
    17:27:void <init>() -> <init>
    32:38:void construct() -> gDxg
    43:44:void sample() -> bWmF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleEntitiesLiving$1 -> JbuH$1:
    react.sampler.SampleEntitiesLiving this$0 -> IOyw
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> wCeF
react.sampler.SampleEntitiesTiles -> woHO:
    react.graph.IFormatter formatter -> Jtyk
    17:27:void <init>() -> <init>
    32:38:void construct() -> gDxg
    43:44:void sample() -> bWmF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleEntitiesTiles$1 -> woHO$1:
    react.sampler.SampleEntitiesTiles this$0 -> HDgQ
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> wCeF
react.sampler.SampleEntitiesTotal -> PmWi:
    react.graph.IFormatter formatter -> Jtyk
    17:27:void <init>() -> <init>
    32:38:void construct() -> gDxg
    43:44:void sample() -> bWmF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleEntitiesTotal$1 -> PmWi$1:
    react.sampler.SampleEntitiesTotal this$0 -> CEyk
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> wCeF
react.sampler.SampleEntityDroppedTicks -> baIo:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleEntityDroppedTicks$1 -> baIo$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> ujLQ
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleEntityTime -> Aqmq:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleEntityTime$1 -> Aqmq$1:
    react.sampler.SampleEntityTime this$0 -> AkHo
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleEntityTimeLock -> YfpJ:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleEntityTimeLock$1 -> YfpJ$1:
    react.sampler.SampleEntityTimeLock this$0 -> aMpC
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleExplosionTime -> XRjw:
    react.graph.IFormatter formatter -> Jtyk
    17:27:void <init>() -> <init>
    32:38:void construct() -> gDxg
    43:44:void sample() -> bWmF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleExplosionTime$1 -> XRjw$1:
    react.sampler.SampleExplosionTime this$0 -> sIqb
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> wCeF
react.sampler.SampleFluidPerSecond -> VMEt:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleFluidPerSecond$1 -> VMEt$1:
    react.sampler.SampleFluidPerSecond this$0 -> KNQe
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleFluidPerTick -> Kewn:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    46:53:void sample() -> bWmF
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleFluidPerTick$1 -> Kewn$1:
    react.sampler.SampleFluidPerTick this$0 -> AkHf
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleFluidTickTime -> ObED:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleFluidTickTime$1 -> ObED$1:
    react.sampler.SampleFluidTickTime this$0 -> sIqh
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleFluidTickUtilization -> ESfP:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    46:53:void sample() -> bWmF
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleFluidTickUtilization$1 -> ESfP$1:
    react.sampler.SampleFluidTickUtilization this$0 -> GuIs
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleHopperPerSecond -> WWxh:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleHopperPerSecond$1 -> WWxh$1:
    react.sampler.SampleHopperPerSecond this$0 -> cCUI
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleHopperPerTick -> lfWH:
    react.graph.IFormatter formatter -> Jtyk
    18:29:void <init>() -> <init>
    34:40:void construct() -> gDxg
    47:54:void sample() -> bWmF
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleHopperPerTick$1 -> lfWH$1:
    react.sampler.SampleHopperPerTick this$0 -> Lrvn
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleHopperTickTime -> WrMB:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleHopperTickTime$1 -> WrMB$1:
    react.sampler.SampleHopperTickTime this$0 -> PMAB
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleHopperTickUtilization -> yBHa:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    46:53:void sample() -> bWmF
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleHopperTickUtilization$1 -> yBHa$1:
    react.sampler.SampleHopperTickUtilization this$0 -> pblB
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleMemoryAllocated -> sHhA:
    react.graph.IFormatter formatter -> Jtyk
    17:27:void <init>() -> <init>
    32:38:void construct() -> gDxg
    43:44:void sample() -> bWmF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleMemoryAllocated$1 -> sHhA$1:
    react.sampler.SampleMemoryAllocated this$0 -> Gcgg
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> wCeF
react.sampler.SampleMemoryAllocationPerSecond -> wTtB:
    react.graph.IFormatter formatter -> Jtyk
    17:27:void <init>() -> <init>
    32:38:void construct() -> gDxg
    43:44:void sample() -> bWmF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleMemoryAllocationPerSecond$1 -> wTtB$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> RBEM
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> wCeF
react.sampler.SampleMemoryFree -> AFxu:
    react.graph.IFormatter formatter -> Jtyk
    17:27:void <init>() -> <init>
    32:38:void construct() -> gDxg
    43:44:void sample() -> bWmF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleMemoryFree$1 -> AFxu$1:
    react.sampler.SampleMemoryFree this$0 -> GtiX
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> wCeF
react.sampler.SampleMemoryMax -> aTts:
    react.graph.IFormatter formatter -> Jtyk
    17:27:void <init>() -> <init>
    32:38:void construct() -> gDxg
    43:44:void sample() -> bWmF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleMemoryMax$1 -> aTts$1:
    react.sampler.SampleMemoryMax this$0 -> riVT
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> wCeF
react.sampler.SampleMemoryUse -> uhcg:
    react.graph.IFormatter formatter -> Jtyk
    17:27:void <init>() -> <init>
    32:38:void construct() -> gDxg
    43:44:void sample() -> bWmF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleMemoryUse$1 -> uhcg$1:
    react.sampler.SampleMemoryUse this$0 -> hIud
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> wCeF
react.sampler.SampleRedstonePerSecond -> cdPW:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleRedstonePerSecond$1 -> cdPW$1:
    react.sampler.SampleRedstonePerSecond this$0 -> MTYv
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleRedstonePerTick -> iKoF:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    46:53:void sample() -> bWmF
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleRedstonePerTick$1 -> iKoF$1:
    react.sampler.SampleRedstonePerTick this$0 -> wyFY
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleRedstoneTickTime -> YMaO:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleRedstoneTickTime$1 -> YMaO$1:
    react.sampler.SampleRedstoneTickTime this$0 -> kdaX
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleRedstoneTickUtilization -> jGBc:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    46:53:void sample() -> bWmF
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleRedstoneTickUtilization$1 -> jGBc$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> vvCW
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleSyncQueue -> vkfX:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleSyncQueue$1 -> vkfX$1:
    react.sampler.SampleSyncQueue this$0 -> KWEY
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleTickTime -> wCtn:
    react.graph.IFormatter formatter -> Jtyk
    react.gmath.Average aa -> uXlY
    17:29:void <init>() -> <init>
    34:40:void construct() -> gDxg
    45:47:void sample() -> bWmF
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleTickTime$1 -> wCtn$1:
    react.sampler.SampleTickTime this$0 -> VovK
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> wCeF
react.sampler.SampleTickUtilization -> VTyT:
    react.graph.IFormatter formatter -> Jtyk
    react.gmath.Average aa -> uXlY
    17:29:void <init>() -> <init>
    34:40:void construct() -> gDxg
    45:47:void sample() -> bWmF
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleTickUtilization$1 -> VTyT$1:
    react.sampler.SampleTickUtilization this$0 -> OAOI
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> wCeF
react.sampler.SampleTicksPerSecond -> UkiN:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleTicksPerSecond$1 -> UkiN$1:
    react.sampler.SampleTicksPerSecond this$0 -> mIEc
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleTileDroppedTicks -> XSPR:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleTileDroppedTicks$1 -> XSPR$1:
    react.sampler.SampleTileDroppedTicks this$0 -> lVcT
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleTileTime -> uhbq:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleTileTime$1 -> uhbq$1:
    react.sampler.SampleTileTime this$0 -> KhFs
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.sampler.SampleTileTimeLock -> Coen:
    react.graph.IFormatter formatter -> Jtyk
    18:28:void <init>() -> <init>
    33:39:void construct() -> gDxg
    44:45:void sample() -> bWmF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ssQG
react.sampler.SampleTileTimeLock$1 -> Coen$1:
    react.sampler.SampleTileTimeLock this$0 -> VyGg
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> wCeF
react.security.checkpoints.SecurityCheckpointAlpha -> Ubvy:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> KnmM
    78:148:void doScan(java.lang.Runnable) -> xiKs
    152:181:byte[] readResource(java.io.File,java.lang.String) -> wegp
    186:217:react.glang.GMap scan(java.io.File) -> xiKs
    150:150:byte[] access$0(java.io.File,java.lang.String) -> xiKs
react.security.checkpoints.SecurityCheckpointAlpha$1 -> Ubvy$1:
    java.lang.Runnable val$r -> tgLS
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> Ubvy$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> ORPU
    java.lang.Runnable val$r -> tgLS
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> aDXF:
    java.lang.String ip -> WbXS
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> HfDe:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> HfDe$1:
    react.security.locks.SecurityLockAlpha this$0 -> jHKn
    java.io.File val$f -> xbVT
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> brOR:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> CUcP
react.slate.PhantomSlate -> oVPv:
    react.glang.GList lines -> WQWW
    react.glang.GList viewers -> TGln
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> yeXy
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> TiGY
    44:45:void set(int,java.lang.String) -> xiKs
    50:51:void setLines(react.glang.GList) -> HCOb
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> MRlK
    91:95:void addViewer(org.bukkit.entity.Player) -> CUcP
    100:102:void removeViewer(org.bukkit.entity.Player) -> fmHS
    107:107:react.glang.GList getViewers() -> INtU
    113:113:boolean isViewing(org.bukkit.entity.Player) -> bNxU
    119:120:void addLine(java.lang.String) -> RbPf
    125:126:void clearLines() -> nBMp
react.slate.Slate -> aCvg:
    void build() -> MRlK
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> TiGY
    void set(int,java.lang.String) -> xiKs
    void setLines(react.glang.GList) -> HCOb
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> CUcP
    void addLine(java.lang.String) -> RbPf
    void clearLines() -> nBMp
    void removeViewer(org.bukkit.entity.Player) -> fmHS
    react.glang.GList getViewers() -> INtU
    boolean isViewing(org.bukkit.entity.Player) -> bNxU
    void update() -> update
react.slate.SlateUtil -> ySMY:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> DHUx
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> qTIB
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> wegp
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> xiKs
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> hamF
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> wegp
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> wegp
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> xiKs
    186:196:java.lang.String convertJSON(java.lang.String) -> ssQG
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> xiKs
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> wegp
react.surge.Main -> HfDb:
    react.glang.GList plugins -> CybF
    react.glang.GMap pluginInstances -> grHG
    react.glang.GList controllerSet -> HDkI
    react.glang.GMap anchors -> tfkC
    react.glang.GList classes -> Tiou
    java.lang.reflect.Field nsField -> Xmkj
    java.lang.reflect.Field thField -> giWB
    react.glang.GList tracks -> qfRR
    long nsf -> gqel
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> SveJ
    90:109:long getNanoSync() -> AibJ
    114:115:void requestResetNanos() -> ogTC
    119:127:void requestReload() -> PTJc
    131:134:void requestReload(java.lang.Runnable) -> hamF
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> wegp
    201:218:void onStop() -> HTbn
    224:224:void onPostInit() -> ktYY
    230:230:void onPreInit() -> pjWH
    234:245:void shutDownAmps() -> gqAg
    249:458:void initializeAmps() -> rgnp
    463:504:void doScan() -> cKCF
    508:530:void scanForPoolDefiners() -> qSjY
    534:550:void scanForRawEvents() -> hscn
    554:570:void scanForDynamicTrack() -> gFLt
    574:595:void scanForAmps() -> WjBp
    600:611:void onTick() -> Kerh
react.surge.Main$1 -> HfDb$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> dxTq:
    react.surge.control.AmpedPlugin plugin -> yTWW
    boolean connected -> connected
    int masterTask -> RchY
    java.lang.Runnable onReload -> bsWl
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> xiaB
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> dxXi
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> wegp
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> wegp
    123:124:void stopTask(int) -> bWmF
    128:128:react.surge.control.AmpedPlugin getPlugin() -> ESli
    133:133:int getMasterTask() -> uGFO
    138:138:java.lang.Runnable getOnReload() -> kJIJ
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> wegp
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> gDxg
    158:159:void setOnReload(java.lang.Runnable) -> qBSx
    67:67:void access$0(react.surge.PluginAmp) -> wegp
react.surge.PluginAmp$1 -> dxTq$1:
    react.surge.PluginAmp this$0 -> oNie
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> dxTq$2:
    react.surge.PluginAmp this$0 -> oNie
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> dxTq$3:
    react.surge.PluginAmp this$0 -> oNie
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> MBNt:
    react.surge.PluginAmp amp -> htiU
    react.glang.GList tickComponents -> xICo
    react.glang.GList atickComponents -> kdaF
    react.surge.sched.TaskManager taskmgr -> yTVq
    react.surge.hotload.HotloadManager hotloadmgr -> CNmR
    java.lang.Thread mainThread -> RJVt
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> wegp
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> mhnE
    44:44:java.io.File folder() -> uGDv
    49:51:java.io.File getPluginJarFile() -> NMey
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> qBSx
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> NUvh
    74:74:react.glang.GList getTickComponents() -> xjAV
    79:79:react.glang.GList getAsyncTickComponents() -> qCJC
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> wegp
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> xiKs
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> xiKs
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> jpxG
    126:126:boolean hasAmp() -> SLTI
    131:131:react.surge.PluginAmp getAmp() -> baPX
    136:136:react.surge.sched.TaskManager getTaskManager() -> JIhx
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> TyjJ
react.surge.cluster.Cluster -> loIx:
    react.surge.cluster.ClusterType type -> rytt
    java.lang.Object t -> tTxY
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> kbya
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> PTHK:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> lDUn:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> ncnO:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> BKAR:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> ccmu:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> jydi:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> rWHv:
    react.surge.cluster.ClusterType INT -> mIDH
    react.surge.cluster.ClusterType BOOLEAN -> mHcN
    react.surge.cluster.ClusterType STRING -> cdxq
    react.surge.cluster.ClusterType STRING_LIST -> cSwb
    react.surge.cluster.ClusterType DOUBLE -> MLIf
    react.surge.cluster.ClusterType LONG -> uXkR
    react.surge.cluster.ClusterType[] ENUM$VALUES -> JJpL
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> YxTW:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> xQSb
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> wegp
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> wegp
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> hbbG
react.surge.cluster.ConfigurationDataOutput -> RHlB:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> xiKs
react.surge.cluster.DataCluster -> pQBy:
    react.glang.GMap clusters -> ECpq
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> xjAF
    29:33:void fromJson(react.json.JSONObject) -> PAuJ
    37:44:react.json.JSONObject toJson() -> aCyv
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> eYYA
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> wegp
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> DYHT
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> SurT
    194:195:void set(java.lang.String,int) -> PAuJ
    199:200:void set(java.lang.String,boolean) -> hamF
    204:205:void set(java.lang.String,double) -> hamF
    209:210:void set(java.lang.String,long) -> hamF
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> wegp
react.surge.cluster.ICluster -> GILy:
    react.surge.cluster.ClusterType getType() -> kbya
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> Oiuf:
react.surge.cluster.IDataInput -> wMEv:
    react.surge.cluster.DataCluster read(java.io.File) -> hamF
react.surge.cluster.IDataOutput -> hHik:
    void write(react.surge.cluster.DataCluster,java.io.File) -> wegp
react.surge.cluster.Key -> IGCV:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> rFGS:
    int value() -> value
react.surge.cluster.KeyStore -> kIbh:
react.surge.cluster.ReflectedConfigurationException -> WPLR:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> GYmq:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> hamF
react.surge.cluster.YamlDataOutput -> lvxy:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> wegp
react.surge.collection.GSound -> DQEr:
    java.lang.String sound -> OlDl
    org.bukkit.Sound iSound -> uXna
    java.lang.Float volume -> MKkR
    java.lang.Float pitch -> VoxH
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> TpdJ
    61:72:void play(org.bukkit.Location) -> SurT
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> wegp
    93:93:java.lang.String getSound() -> gxpE
    98:99:void setSound(java.lang.String) -> bWmF
    103:103:org.bukkit.Sound getiSound() -> aCyr
    108:109:void setiSound(org.bukkit.Sound) -> wegp
    113:113:java.lang.Float getVolume() -> Ukke
    118:119:void setVolume(java.lang.Float) -> wegp
    123:123:java.lang.Float getPitch() -> iDBO
    128:129:void setPitch(java.lang.Float) -> xiKs
react.surge.control.AmpedPlugin -> EukU:
    react.glang.GList controllers -> xbYM
    react.gconcurrent.ParallelPoolManager pp -> rrJI
    react.surge.server.CoreTickThread ctt -> keED
    24:50:void <init>() -> <init>
    void doScan() -> cKCF
    long getNanoSync() -> AibJ
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:91:void onDisable() -> onDisable
    96:96:react.glang.GList getControllers() -> fSis
    102:103:void registerController(react.surge.control.IController) -> wegp
    108:119:void onTick() -> Kerh
    124:124:java.lang.String getTickName() -> LFsM
    130:130:react.gconcurrent.ParallelPoolManager getThreadPool() -> GjtN
    136:251:void destroyOldThreads() -> rFLC
    void onControllerRegistry() -> SveJ
    void onStart(react.surge.util.Protocol) -> wegp
    void onStop() -> HTbn
    void onPostInit() -> ktYY
    void onPreInit() -> pjWH
react.surge.control.AmpedPlugin$1 -> EukU$1:
    react.surge.control.AmpedPlugin this$0 -> hJYT
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> ghEb
react.surge.control.AmpedPlugin$2 -> EukU$2:
    react.surge.control.AmpedPlugin this$0 -> hJYT
    1:149:void <init>(react.surge.control.AmpedPlugin) -> <init>
    154:244:void run() -> run
react.surge.control.Control -> dVQT:
react.surge.control.Controller -> vbtT:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> eQDK:
react.surge.control.Enable -> bOio:
react.surge.control.IController -> DGur:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> Ubxt:
react.surge.control.Plugin -> dUsN:
react.surge.control.SurgePlugin -> fKYA:
    void onStart(react.surge.util.Protocol) -> wegp
    void onStop() -> HTbn
    void onPostInit() -> ktYY
    void onPreInit() -> pjWH
    void onControllerRegistry() -> SveJ
    void registerController(react.surge.control.IController) -> wegp
    react.glang.GList getControllers() -> fSis
    react.gconcurrent.ParallelPoolManager getThreadPool() -> GjtN
react.surge.hotload.HotloadManager -> Cfuv:
    react.glang.GMap filemods -> dONF
    react.glang.GMap filesizes -> HEMe
    react.glang.GMap fileacts -> UCBr
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> wegp
    35:38:void untrack(java.io.File) -> qBSx
    42:45:void untrackall() -> uiJj
    50:86:void onTick() -> Kerh
    91:91:java.lang.String getTickName() -> LFsM
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> wegp
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> xiKs
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> hamF
react.surge.hotload.HotloadManager$1 -> Cfuv$1:
    react.surge.hotload.HotloadManager this$0 -> CiBu
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> loNA:
    boolean init -> wxfr
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> tgNG
    java.lang.Class IChatBaseComponent -> igMy
    java.lang.Class ChatSerializer -> fvuq
    java.lang.Class PacketPlayOutPlayerInfo -> OAPw
    java.lang.Class PlayerInfoData -> kudM
    java.lang.Class EnumPlayerInfoAction -> MByK
    java.lang.Class GameProfile -> Hfms
    java.lang.Class EnumGamemode -> mrxn
    java.lang.Class TileEntitySkull -> ebpX
    java.lang.Class LoadingCache -> vmRw
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> lCwt:
    react.surge.nms.NMSX bountifulAPI -> raFo
    boolean useOldMethods -> wgdY
    java.lang.String nmsver -> Okbw
    java.lang.Object eTimes -> USav
    java.lang.Object eTitle -> nTXw
    java.lang.Object eSubtitle -> JvFo
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> wegp
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> gDxg
    75:89:java.lang.Class getCBClass(java.lang.String) -> PRww
    96:104:java.lang.Object serializeChat(java.lang.String) -> VwMl
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> xiKs
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> wegp
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> sHpr
    151:151:java.lang.String craftPackage() -> HCeo
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> wegp
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> wegp
    197:207:java.lang.Class getNMSClass(java.lang.String) -> FpOm
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> wegp
    279:280:void clearTitle(org.bukkit.entity.Player) -> KfIs
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> xiKs
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> wegp
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> wegp
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> nlQr
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> SurT
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> pYDN
    434:447:int ping(org.bukkit.entity.Player) -> legc
react.surge.nms.NMSX$1 -> lCwt$1:
    org.bukkit.entity.Player val$player -> NVsn
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> lCwt$2:
    org.bukkit.entity.Player val$player -> NVsn
    java.lang.String val$message -> bbYP
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> PvNV:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> KgCK
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> wegp
    68:82:void clearTitle(org.bukkit.entity.Player) -> KfIs
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> wegp
react.surge.nms.PacketUtil$V -> PvNV$wegp:
    react.surge.nms.PacketUtil$V R17 -> Trbb
    react.surge.nms.PacketUtil$V R18 -> Xmlj
    react.surge.nms.PacketUtil$V R19 -> yBvP
    react.surge.nms.PacketUtil$V R111 -> fneH
    react.surge.nms.PacketUtil$V R110 -> QXWj
    react.surge.nms.PacketUtil$V R112 -> xsYE
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> FOig
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> kQvi:
    java.lang.String title -> title
    java.lang.String subTitle -> kdfB
    java.lang.String action -> action
    java.lang.Integer fadeIn -> wghT
    java.lang.Integer fadeOut -> etUj
    java.lang.Integer stayTime -> tDky
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> yAYa
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> QFQI
    79:80:void setSubTitle(java.lang.String) -> cdBB
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> ggrN
    99:100:void setFadeIn(java.lang.Integer) -> hamF
    104:104:java.lang.Integer getFadeOut() -> GRFG
    109:110:void setFadeOut(java.lang.Integer) -> qBSx
    114:114:java.lang.Integer getStayTime() -> PTOS
    119:120:void setStayTime(java.lang.Integer) -> PAuJ
react.surge.nms.VersionBukkit -> kQwJ:
    react.surge.nms.VersionBukkit VU -> ELgL
    react.surge.nms.VersionBukkit V7 -> kJro
    react.surge.nms.VersionBukkit V8 -> yLLB
    react.surge.nms.VersionBukkit V9 -> Sfps
    react.surge.nms.VersionBukkit V11 -> ORTh
    react.surge.nms.VersionBukkit V111 -> AkMn
    react.surge.nms.VersionBukkit V112 -> pAPc
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> ayLN
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> GHtD
    27:32:boolean uc() -> mPPp
    37:67:react.surge.nms.VersionBukkit get() -> LHBv
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> GsdD:
    void burst(java.lang.Object) -> CUcP
    void setTimeLock(double) -> bNxU
    double getEstimatedTimeUse() -> lnpO
    int flush() -> FWST
    int flush(react.gbench.Profiler) -> wegp
    void queue(java.lang.Object) -> fmHS
    void queue(java.util.List) -> hamF
    void queue(java.lang.Object[]) -> wegp
react.surge.sched.ICancellable -> dDqR:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> dESN:
    void onTick() -> Kerh
    java.lang.String getTickName() -> LFsM
react.surge.sched.ITask -> lMJO:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> aoSC
    java.lang.String getName() -> getName
    double getComputeTime() -> IynT
    double getTotalComputeTime() -> rySY
    double getActiveTime() -> UIlT
    boolean hasCompleted() -> ECNl
react.surge.sched.Task -> UIgd:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> wowi
    double computeTime -> WkMp
    double totalComputeTime -> vltf
    double activeTime -> SxTG
    boolean completed -> completed
    react.gbench.Profiler profiler -> DsvH
    react.gbench.Profiler activeProfiler -> bPxN
    int ticks -> GtoK
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> qBSx
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> aoSC
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> IynT
    150:150:boolean hasCompleted() -> ECNl
    156:156:double getTotalComputeTime() -> rySY
    162:162:double getActiveTime() -> UIlT
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> wegp
    15:15:void access$1(react.surge.sched.Task,boolean) -> wegp
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> xiKs
    14:14:void access$3(react.surge.sched.Task,double) -> wegp
    12:12:void access$4(react.surge.sched.Task,double) -> xiKs
    14:14:double access$5(react.surge.sched.Task) -> hamF
    13:13:void access$6(react.surge.sched.Task,double) -> hamF
    13:13:double access$7(react.surge.sched.Task) -> qBSx
    12:12:double access$8(react.surge.sched.Task) -> PAuJ
react.surge.sched.Task$1 -> UIgd$1:
    react.surge.sched.Task this$0 -> SENE
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> UIgd$2:
    react.surge.sched.Task this$0 -> SENE
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> UIgd$3:
    react.surge.sched.Task this$0 -> SENE
    int val$total -> HxSU
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> XmDn:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> wowi
    double computeTime -> WkMp
    double totalComputeTime -> vltf
    double activeTime -> SxTG
    boolean completed -> completed
    react.gbench.Profiler profiler -> DsvH
    react.gbench.Profiler activeProfiler -> bPxN
    int ticks -> GtoK
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> qBSx
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> aoSC
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> IynT
    101:101:boolean hasCompleted() -> ECNl
    107:107:double getTotalComputeTime() -> rySY
    113:113:double getActiveTime() -> UIlT
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> wegp
    12:12:void access$1(react.surge.sched.TaskLater,double) -> wegp
    13:13:double access$2(react.surge.sched.TaskLater) -> xiKs
    12:12:double access$3(react.surge.sched.TaskLater) -> hamF
    13:13:void access$4(react.surge.sched.TaskLater,double) -> xiKs
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> qBSx
    14:14:double access$6(react.surge.sched.TaskLater) -> PAuJ
    14:14:void access$7(react.surge.sched.TaskLater,double) -> hamF
react.surge.sched.TaskLater$1 -> XmDn$1:
    react.surge.sched.TaskLater this$0 -> rOfN
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> SCab:
    react.glang.GList tasks -> giAh
    react.glang.GMap taskProfiles -> hAgp
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> wegp
    25:35:void onTick() -> Kerh
    39:40:void putFinishingTask(react.surge.sched.ITask) -> xiKs
    44:53:void putTask(react.surge.sched.ITask) -> hamF
    58:58:java.lang.String getTickName() -> LFsM
    63:63:react.glang.GList getTasks() -> PBlt
    68:68:react.glang.GMap getTaskProfiles() -> ofvs
react.surge.sched.TaskProfile -> rVkI:
    double activeTime -> SxTG
    double computeTickTime -> xQWa
    double computeTime -> WkMp
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> UIlT
    23:24:void setActiveTime(double) -> TpdJ
    28:28:double getComputeTickTime() -> AYFM
    33:34:void setComputeTickTime(double) -> KfIs
    38:38:double getComputeTime() -> IynT
    43:44:void setComputeTime(double) -> legc
react.surge.server.AsyncTick -> wnjs:
react.surge.server.CPS -> BdSY:
    react.glang.GMap keys -> KWHw
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> aDIc
    46:99:void scan() -> Noio
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> hamF
react.surge.server.CoreTickThread -> wDWv:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> xOlA:
    long memoryFree -> kvFc
    long memoryUsed -> MvaW
    long memoryMax -> diBP
    long lastMemoryUsed -> GBNX
    long memoryUsedAfterGC -> uYTM
    long allocated -> NWcb
    long collected -> TafC
    long collections -> sSMR
    long sms -> RSPF
    long memoryAllocatedPerTick -> vKTf
    long memoryCollectedPerTick -> sAkD
    long memoryFullyAllocatedPerTick -> aVim
    long mah -> pbuD
    long mahs -> CiFv
    22:39:void <init>() -> <init>
    void onAllocationSet() -> XArT
    46:98:void run() -> run
    102:102:long getMemoryFree() -> HfHq
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> SDEU
    117:117:long getLastMemoryUsed() -> HCdq
    122:122:long getMemoryUsedAfterGC() -> ArWY
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> BKFo
    137:137:long getCollections() -> prlD
    142:142:long getSms() -> oMec
    147:147:long getMemoryAllocatedPerTick() -> piyf
    152:152:long getMemoryCollectedPerTick() -> IWil
    157:157:long getMemoryFullyAllocatedPerTick() -> ogWk
    162:162:long getMah() -> oogu
    167:167:long getMahs() -> FOBS
react.surge.server.SuperSampler -> KnmM:
    react.gmath.Average ticksPerSecondL -> SpFF
    react.gmath.Average tickTimeL -> tpCT
    react.gmath.Average mahL -> jQDG
    double ticksPerSecond -> JRqQ
    double ticksPerSecondRaw -> ekfs
    double tickTime -> HDqQ
    double tickTimeRaw -> htpR
    boolean running -> running
    boolean frozen -> hRlq
    double tickUtilizationRaw -> pcUV
    double tickUtilization -> lNWh
    double leftoverTickTime -> GRme
    long memoryUse -> lhJd
    long memoryAllocated -> Dkge
    long memoryCollected -> TYTQ
    long mahs -> CiFv
    int totalChunks -> CFby
    int totalEntities -> jjTj
    int totalDrops -> PfYe
    int totalTiles -> TXrn
    int totalLiving -> qCst
    int chunksLoaded -> KEgx
    int chunksUnloaded -> NXCg
    react.surge.server.WorldMonitor worldMonitor -> Enjk
    react.surge.server.TPSMonitor tpsMonitor -> Fqmo
    react.surge.server.MemoryMonitor memoryMonitor -> wEfR
    java.lang.StackTraceElement[] lockStack -> RtpX
    react.glang.GMap spikes -> SLiG
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> Kerh
    154:154:java.lang.String getTickName() -> LFsM
    159:159:react.gmath.Average getTicksPerSecondL() -> oNFO
    164:164:double getTicksPerSecond() -> HLLq
    169:169:double getTicksPerSecondRaw() -> BBUX
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> YVWn
    184:184:react.gmath.Average getTickTimeL() -> nKBs
    189:189:double getTickTime() -> KLoL
    194:194:double getTickTimeRaw() -> SKuX
    199:199:double getTickUtilizationRaw() -> ghUD
    204:204:double getTickUtilization() -> VxEk
    209:209:double getLeftoverTickTime() -> gNan
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> wMPK
    219:219:long getMemoryUse() -> VgEB
    224:224:long getMemoryAllocated() -> JJNr
    229:229:long getMemoryCollected() -> Rjwm
    234:234:react.gmath.Average getMahL() -> SDIF
    239:239:long getMahs() -> FOBS
    244:244:int getTotalChunks() -> XKGT
    249:249:int getTotalEntities() -> BAui
    254:254:int getTotalDrops() -> uNyX
    259:259:int getTotalTiles() -> IGMM
    264:264:int getTotalLiving() -> UkqP
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> hkXB
    274:274:int getChunksLoaded() -> DapP
    279:279:int getChunksUnloaded() -> jWjM
    284:285:void setTicksPerSecondL(react.gmath.Average) -> wegp
    289:290:void setTickTimeL(react.gmath.Average) -> xiKs
    294:295:void setMahL(react.gmath.Average) -> hamF
    299:300:void setTicksPerSecond(double) -> CfdJ
    304:305:void setTicksPerSecondRaw(double) -> yAYa
    309:310:void setTickTime(double) -> ooRO
    314:315:void setTickTimeRaw(double) -> Grnl
    319:320:void setRunning(boolean) -> HBnf
    324:325:void setTickUtilizationRaw(double) -> tdnX
    329:330:void setTickUtilization(double) -> fArY
    334:335:void setLeftoverTickTime(double) -> wUGA
    339:340:void setMemoryUse(long) -> bNxU
    344:345:void setMemoryAllocated(long) -> TpdJ
    349:350:void setMemoryCollected(long) -> KfIs
    354:355:void setMahs(long) -> legc
    359:360:void setTotalChunks(int) -> PRww
    364:365:void setTotalEntities(int) -> VwMl
    369:370:void setTotalDrops(int) -> FpOm
    374:375:void setTotalTiles(int) -> nlQr
    379:380:void setTotalLiving(int) -> cdBB
    384:385:void setChunksLoaded(int) -> aDIc
    389:390:void setChunksUnloaded(int) -> OaWy
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> wegp
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> wegp
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> wegp
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> KMQQ
    419:419:react.glang.GMap getSpikes() -> WPGB
    31:31:void access$0(react.surge.server.SuperSampler,int) -> wegp
    33:33:void access$1(react.surge.server.SuperSampler,int) -> xiKs
    34:34:void access$2(react.surge.server.SuperSampler,int) -> hamF
    32:32:void access$3(react.surge.server.SuperSampler,int) -> qBSx
    35:35:void access$4(react.surge.server.SuperSampler,int) -> PAuJ
    36:36:void access$5(react.surge.server.SuperSampler,int) -> SurT
    37:37:void access$6(react.surge.server.SuperSampler,int) -> tvQa
    19:19:void access$7(react.surge.server.SuperSampler,double) -> wegp
    21:21:void access$8(react.surge.server.SuperSampler,double) -> xiKs
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> wegp
    19:19:double access$10(react.surge.server.SuperSampler) -> xiKs
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> hamF
    21:21:double access$12(react.surge.server.SuperSampler) -> qBSx
    18:18:void access$13(react.surge.server.SuperSampler,double) -> hamF
    20:20:void access$14(react.surge.server.SuperSampler,double) -> qBSx
    24:24:void access$15(react.surge.server.SuperSampler,double) -> PAuJ
    20:20:double access$16(react.surge.server.SuperSampler) -> PAuJ
    25:25:void access$17(react.surge.server.SuperSampler,double) -> SurT
    25:25:double access$18(react.surge.server.SuperSampler) -> SurT
    26:26:void access$19(react.surge.server.SuperSampler,double) -> tvQa
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> wegp
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> tvQa
    27:27:void access$22(react.surge.server.SuperSampler,long) -> wegp
    28:28:void access$23(react.surge.server.SuperSampler,long) -> xiKs
    29:29:void access$24(react.surge.server.SuperSampler,long) -> hamF
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> Pcwe
    30:30:void access$26(react.surge.server.SuperSampler,long) -> qBSx
react.surge.server.SuperSampler$1 -> KnmM$1:
    react.surge.server.SuperSampler this$0 -> GSOR
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> wegp
react.surge.server.SuperSampler$2 -> KnmM$2:
    react.surge.server.SuperSampler this$0 -> GSOR
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> RcFw
    106:107:void onSpike() -> bPSL
react.surge.server.SuperSampler$3 -> KnmM$3:
    react.surge.server.SuperSampler this$0 -> GSOR
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> XArT
react.surge.server.TPSMonitor -> TiGY:
    double tickTimeMS -> vmVw
    double rawTicksPerSecond -> urdM
    react.gbench.Profiler tickProfiler -> UvKC
    react.gbench.Profiler tickTimeProfiler -> VWJb
    boolean ticked -> vTDm
    java.lang.Thread$State lastState -> etXF
    double actualTickTimeMS -> ptVY
    double ltt -> nmnv
    long lastTick -> dggO
    boolean frozen -> hRlq
    java.lang.StackTraceElement[] lockedStack -> hAjU
    double lmsx -> BnTR
    23:40:void <init>() -> <init>
    void onTicked() -> RcFw
    void onSpike() -> bPSL
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> wegp
    160:160:double getTickTimeMS() -> imyR
    165:165:double getRawTicksPerSecond() -> FWSo
    170:170:react.gbench.Profiler getTickProfiler() -> TWkR
    175:175:boolean isTicked() -> XAsn
    180:181:void markTick() -> kkoL
    185:185:react.gbench.Profiler getTickTimeProfiler() -> VgDK
    190:190:java.lang.Thread$State getLastState() -> VEAK
    195:195:double getActualTickTimeMS() -> tUGH
    200:200:double getLtt() -> gyUI
    205:205:long getLastTick() -> oLte
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> IGKf
react.surge.server.WorldMonitor -> INtU:
    boolean chunksChanged -> axkl
    boolean dropChanged -> vvGh
    boolean tileChanged -> RdOn
    boolean livingChanged -> ecUm
    boolean totalChanged -> dGAR
    boolean updated -> DcWt
    int totalChunks -> CFby
    int totalDrops -> PfYe
    int totalTiles -> TXrn
    int totalLiving -> qCst
    int totalEntities -> jjTj
    int chunksLoaded -> KEgx
    int chunksUnloaded -> NXCg
    long ms -> xiaB
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> wegp
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> xiKs
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> wegp
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> wegp
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> wegp
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> wegp
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> wegp
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> wegp
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> wegp
    130:131:void doUpdate() -> JdAf
    135:186:void sample() -> bWmF
    190:196:void sampleTotalCount() -> VxHN
    200:206:void sampleLivingCount() -> NpPS
    210:219:void sampleTileCount() -> klRd
    223:229:void sampleDropCount() -> EBpw
    233:239:void sampleChunkCount() -> jiOd
react.surge.text.PhantomSpinner -> nBMp:
    react.surge.text.ProgressSpinner s -> vKTI
    react.surge.text.ProgressSpinner c -> grMP
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> DHUx:
    java.lang.String[] chars -> htrW
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> iDqF
    react.surge.text.ProgressSpinner NETWORK -> jivg
    react.surge.text.ProgressSpinner CIRCLES -> YWeR
    react.surge.text.ProgressSpinner RANDOMS -> lWLR
    react.surge.text.ProgressSpinner MERGERS -> RdSC
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> LHGV
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> qTIB:
    int value() -> value
react.surge.util.Area -> SveJ:
    org.bukkit.Location location -> twtd
    java.lang.Double radius -> lFKH
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> wegp
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> uhnW
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> tvQa
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> Pcwe
    109:109:boolean isWithin(org.bukkit.Location) -> pYDN
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> qBSx
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> wegp
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> rWTm
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> bXfQ
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> Ujvp
    257:257:java.lang.Double getRadius() -> WaXR
    268:269:void setRadius(java.lang.Double) -> hamF
    278:283:org.bukkit.Location random() -> Typq
react.surge.util.Axis -> AibJ:
    react.surge.util.Axis X -> NOTu
    react.surge.util.Axis Y -> cTaY
    react.surge.util.Axis Z -> jjWm
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> xkOl
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> pjaB
    29:29:org.bukkit.util.Vector negative() -> AOvT
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> ogTC:
    react.surge.util.BlastResistance BARRIER -> NqXa
    react.surge.util.BlastResistance BEDROCK -> UKYO
    react.surge.util.BlastResistance COMMAND -> elJE
    react.surge.util.BlastResistance ENDER_PORTAL -> lFJo
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> DlLS
    react.surge.util.BlastResistance ANVIL -> BCaP
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> SxXJ
    react.surge.util.BlastResistance OBSIDIAN -> Lsbq
    react.surge.util.BlastResistance ENDER_CHEST -> TjYW
    react.surge.util.BlastResistance WATER -> nmrX
    react.surge.util.BlastResistance LAVA -> RRqP
    react.surge.util.BlastResistance STATIONARY_WATER -> gqoO
    react.surge.util.BlastResistance DRAGON_EGG -> tMaV
    react.surge.util.BlastResistance ENDER_STONE -> Qqpi
    react.surge.util.BlastResistance COAL_BLOCK -> MfDK
    react.surge.util.BlastResistance DIAMOND_BLOCK -> PCwp
    react.surge.util.BlastResistance EMERALD_BLOCK -> EoNN
    react.surge.util.BlastResistance GOLD_BLOCK -> iEPp
    react.surge.util.BlastResistance IRON_BLOCK -> wgjr
    react.surge.util.BlastResistance REDSTONE_BLOCK -> SERV
    react.surge.util.BlastResistance BRICK -> KWMW
    react.surge.util.BlastResistance BRICK_STAIRS -> lFIS
    react.surge.util.BlastResistance HARD_CLAY -> GdRl
    react.surge.util.BlastResistance STONE -> uPcI
    react.surge.util.BlastResistance SMOOTH_BRICK -> YOTN
    react.surge.util.BlastResistance SMOOTH_STAIRS -> BmuO
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> vuiV
    react.surge.util.BlastResistance STONE_SLAB2 -> dhdt
    react.surge.util.BlastResistance IRON_DOOR -> cwED
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> pbul
    react.surge.util.BlastResistance IRON_TRAPDOOR -> BfGa
    react.surge.util.BlastResistance MOB_SPAWNER -> Okkq
    react.surge.util.BlastResistance WEB -> cfEk
    react.surge.util.BlastResistance DISPENSER -> VqAf
    react.surge.util.BlastResistance DROPPER -> NNvd
    react.surge.util.BlastResistance FURNACE -> kvNa
    react.surge.util.BlastResistance BURNING_FURNACE -> tNEC
    react.surge.util.BlastResistance BEACON -> JTLq
    react.surge.util.BlastResistance COAL_ORE -> PLmF
    react.surge.util.BlastResistance COCOA -> apaO
    react.surge.util.BlastResistance DIAMOND_ORE -> FXab
    react.surge.util.BlastResistance EMERALD_ORE -> qDYf
    react.surge.util.BlastResistance FENCE -> opvv
    react.surge.util.BlastResistance FENCE_GATE -> OQyj
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> GuWg
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> vJxO
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> ynTd
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> AHoh
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> jiyI
    react.surge.util.BlastResistance ACACIA_FENCE -> xINR
    react.surge.util.BlastResistance BIRCH_FENCE -> KFMS
    react.surge.util.BlastResistance DARK_OAK_FENCE -> MLRs
    react.surge.util.BlastResistance SPRUCE_FENCE -> Wsbr
    react.surge.util.BlastResistance JUNGLE_FENCE -> ujXV
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> stsC
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> raNq
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> vukk
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> ELlN
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> WkSB
    react.surge.util.BlastResistance QUARTZ_STAIRS -> XfEY
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> wxni
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> KVms
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> Xedq
    react.surge.util.BlastResistance WOOD_STAIRS -> dXFb
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> oygg
    react.surge.util.BlastResistance ACACIA_DOOR -> pkiY
    react.surge.util.BlastResistance BIRCH_DOOR -> CiKD
    react.surge.util.BlastResistance DARK_OAK_DOOR -> DIlH
    react.surge.util.BlastResistance SPRUCE_DOOR -> Efac
    react.surge.util.BlastResistance JUNGLE_DOOR -> SpJn
    react.surge.util.BlastResistance GOLD_ORE -> bIQt
    react.surge.util.BlastResistance HOPPER -> jHYS
    react.surge.util.BlastResistance IRON_ORE -> msdw
    react.surge.util.BlastResistance LAPIS_BLOCK -> kdnQ
    react.surge.util.BlastResistance LAPIS_ORE -> sSSn
    react.surge.util.BlastResistance QUARTZ_ORE -> LRDj
    react.surge.util.BlastResistance REDSTONE_ORE -> FrUw
    react.surge.util.BlastResistance TRAP_DOOR -> suWN
    react.surge.util.BlastResistance WOOD -> hmGa
    react.surge.util.BlastResistance CHEST -> hKCb
    react.surge.util.BlastResistance TRAPPED_CHEST -> fwaT
    react.surge.util.BlastResistance WORKBENCH -> XUGf
    react.surge.util.BlastResistance CAULDRON -> AACN
    react.surge.util.BlastResistance LOG -> yDCf
    react.surge.util.BlastResistance LOG_2 -> yKsA
    react.surge.util.BlastResistance BOOKSHELF -> xcBx
    react.surge.util.BlastResistance BANNER -> DJNA
    react.surge.util.BlastResistance STANDING_BANNER -> rjBx
    react.surge.util.BlastResistance WALL_BANNER -> Ewcn
    react.surge.util.BlastResistance JACK_O_LANTERN -> Mehi
    react.surge.util.BlastResistance MELON_BLOCK -> aWPl
    react.surge.util.BlastResistance SKULL -> oyjU
    react.surge.util.BlastResistance PUMPKIN -> pJJF
    react.surge.util.BlastResistance SIGN -> uGvV
    react.surge.util.BlastResistance SIGN_POST -> kdlj
    react.surge.util.BlastResistance WALL_SIGN -> EoQn
    react.surge.util.BlastResistance QUARTZ_BLOCK -> VVnp
    react.surge.util.BlastResistance NOTE_BLOCK -> GcvO
    react.surge.util.BlastResistance RED_SANDSTONE -> tfvG
    react.surge.util.BlastResistance SANDSTONE -> ymuN
    react.surge.util.BlastResistance WOOL -> OJKm
    react.surge.util.BlastResistance MONSTER_EGG -> QOpq
    react.surge.util.BlastResistance RAILS -> oyim
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> UupB
    react.surge.util.BlastResistance DETECTOR_RAIL -> eAXq
    react.surge.util.BlastResistance POWERED_RAIL -> FaSr
    react.surge.util.BlastResistance CLAY -> MUGX
    react.surge.util.BlastResistance DIRT -> rOrJ
    react.surge.util.BlastResistance GRASS -> elOt
    react.surge.util.BlastResistance GRAVEL -> sKFA
    react.surge.util.BlastResistance SPONGE -> KErB
    react.surge.util.BlastResistance BREWING_STAND -> rGbK
    react.surge.util.BlastResistance STONE_BUTTON -> PgDV
    react.surge.util.BlastResistance WOOD_BUTTON -> qnqm
    react.surge.util.BlastResistance CAKE_BLOCK -> Lbfx
    react.surge.util.BlastResistance ICE -> FigQ
    react.surge.util.BlastResistance PACKED_ICE -> iNJD
    react.surge.util.BlastResistance LEVER -> uQKU
    react.surge.util.BlastResistance MYCEL -> VWSk
    react.surge.util.BlastResistance PISTON_BASE -> KyVy
    react.surge.util.BlastResistance PISTON_EXTENSION -> FjHV
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> YWlK
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> LbhB
    react.surge.util.BlastResistance GOLD_PLATE -> oWie
    react.surge.util.BlastResistance IRON_PLATE -> bkWd
    react.surge.util.BlastResistance STONE_PLATE -> kSmo
    react.surge.util.BlastResistance WOOD_PLATE -> yTen
    react.surge.util.BlastResistance SAND -> bACw
    react.surge.util.BlastResistance SOUL_SAND -> DcbB
    react.surge.util.BlastResistance CACTUS -> eknW
    react.surge.util.BlastResistance LADDER -> OlPY
    react.surge.util.BlastResistance NETHERRACK -> BTjT
    react.surge.util.BlastResistance GLASS -> MwLN
    react.surge.util.BlastResistance THIN_GLASS -> mjtq
    react.surge.util.BlastResistance STAINED_GLASS -> RdXU
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> eknN
    react.surge.util.BlastResistance GLOWSTONE -> sJdH
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> wWPi
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> uajw
    react.surge.util.BlastResistance SEA_LANTERN -> hSUK
    react.surge.util.BlastResistance BED_BLOCK -> jQKG
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> nKsw
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> AcIP
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> slen
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> hlfj
    react.surge.util.BlastResistance LEAVES -> YiLl
    react.surge.util.BlastResistance LEAVES_2 -> jHYf
    react.surge.util.BlastResistance SNOW -> tVWb
    int br -> rOqB
    react.surge.util.BlastResistance[] ENUM$VALUES -> wqBs
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> UIon
    175:190:int get(org.bukkit.Material) -> wegp
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> PTJc:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> tvQa
react.surge.util.C -> HTbn:
    react.surge.util.C BLACK -> kvQS
    react.surge.util.C DARK_BLUE -> BemI
    react.surge.util.C DARK_GREEN -> ywMH
    react.surge.util.C DARK_AQUA -> vnDA
    react.surge.util.C DARK_RED -> Kxwk
    react.surge.util.C DARK_PURPLE -> jbOk
    react.surge.util.C GOLD -> IPoM
    react.surge.util.C GRAY -> lxvc
    react.surge.util.C DARK_GRAY -> lyWh
    react.surge.util.C BLUE -> QYGj
    react.surge.util.C GREEN -> mbhQ
    react.surge.util.C AQUA -> lpgB
    react.surge.util.C RED -> nLYX
    react.surge.util.C LIGHT_PURPLE -> WIVj
    react.surge.util.C YELLOW -> Umdg
    react.surge.util.C WHITE -> eSAK
    react.surge.util.C MAGIC -> XLYv
    react.surge.util.C BOLD -> Qqxu
    react.surge.util.C STRIKETHROUGH -> hcxh
    react.surge.util.C UNDERLINE -> Rlkn
    react.surge.util.C ITALIC -> yLXI
    react.surge.util.C RESET -> puCF
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> JSre
    char code -> IrqK
    boolean isFormat -> aODD
    java.lang.String toString -> knCU
    java.util.Map BY_ID -> bjwV
    java.util.Map BY_CHAR -> tMiO
    java.util.Map dyeChatMap -> gGbc
    java.util.Map chatHexMap -> mADQ
    java.util.Map dyeHexMap -> xcGG
    int[] $SWITCH_TABLE$surge$util$C -> YFjw
    react.surge.util.C[] ENUM$VALUES -> XCgv
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> Iqao
    378:378:java.lang.String hex() -> mjHR
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> Pcwe
    434:442:react.surge.util.C getByChar(java.lang.String) -> OaWy
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> xiKs
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> wegp
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> xiKs
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> hamF
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> jFRY
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> qcwo
    560:578:java.lang.String generateColorTable() -> IGNd
    588:588:org.bukkit.ChatColor chatColor() -> wweR
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> tvQa
    632:679:byte getItemMeta() -> VMTT
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> jWkp
react.surge.util.C$1 -> HTbn$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> HTbn$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> HTbn$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> HTbn$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> HTbn$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> HTbn$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> HTbn$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> HTbn$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> HTbn$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> HTbn$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> HTbn$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> HTbn$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> HTbn$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> HTbn$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> HTbn$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> HTbn$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> HTbn$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> HTbn$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> HTbn$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> HTbn$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> HTbn$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> HTbn$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> ktYY:
    double number -> PgFN
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> vIQd
    23:25:react.surge.util.CDou add(double) -> SePr
    30:32:react.surge.util.CDou sub(double) -> CMQs
    37:37:double get() -> get
    42:48:void circ() -> cJfi
react.surge.util.CMD -> pjWH:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> axuu
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> JcbO
    51:53:void execute(org.bukkit.command.CommandSender) -> hamF
    60:77:void execute() -> execute
react.surge.util.CNum -> gqAg:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> jFRY
    23:25:react.surge.util.CNum add(int) -> qcwo
    30:32:react.surge.util.CNum sub(int) -> TWTT
    37:37:int get() -> get
    42:48:void circ() -> cJfi
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> uEpS
react.surge.util.Chunks -> rgnp:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> eaTG
    33:40:react.glang.GList getLoadedChunks() -> oDxY
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> xiKs
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> wegp
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> wegp
    98:98:boolean unload(org.bukkit.Chunk) -> HCOb
    114:124:int unload(react.glang.GList,boolean,boolean) -> wegp
    138:138:int unload(react.glang.GList,boolean) -> wegp
    150:150:int unload(react.glang.GList) -> FMit
    166:166:boolean isLoaded(java.lang.String,int,int) -> wegp
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> hamF
    201:205:void load(react.glang.GList) -> HBnf
react.surge.util.Cuboid -> cKCF:
    java.lang.String worldName -> JuuB
    int x1 -> QihI
    int y1 -> Chqm
    int z1 -> oqaU
    int x2 -> fDbp
    int y2 -> MTmF
    int z2 -> qfea
    int[] $SWITCH_TABLE$surge$util$Axis -> RmNT
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> QYJL
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> wegp
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> hamF
    93:93:boolean hasPlayers() -> YNKe
    98:110:react.glang.GList getPlayers() -> BlXt
    115:166:react.glang.GList getEntities() -> OjaI
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> GkBE
    287:287:org.bukkit.Location getLowerNE() -> vImX
    298:298:org.bukkit.Location getUpperSW() -> RsjX
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> IXNj
    348:348:int getSizeY() -> LHEq
    358:358:int getSizeZ() -> Rjxj
    368:368:int getLowerX() -> rpea
    378:378:int getLowerY() -> wMPa
    388:388:int getLowerZ() -> wxDj
    398:398:int getUpperX() -> cRwg
    408:408:int getUpperY() -> ryVS
    418:418:int getUpperZ() -> ECQk
    428:438:org.bukkit.block.Block[] corners() -> bYFe
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> wegp
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> xiKs
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> hamF
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> qBSx
    546:546:boolean contains(int,int,int) -> PAuJ
    558:558:boolean contains(org.bukkit.block.Block) -> Pcwe
    570:570:boolean contains(org.bukkit.Location) -> CfdJ
    580:580:int volume() -> WPVP
    591:601:byte averageLightLevel() -> Gjyp
    612:612:react.surge.util.Cuboid contract() -> PCQW
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> wegp
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> xiKs
    708:715:boolean containsOnly(org.bukkit.Material) -> xiKs
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> wegp
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> SurT
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> wegp
    786:800:java.util.List getChunks() -> HfNL
    815:819:void fill(int,byte) -> wegp
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> mOvf
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> yBXh
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> wgGG
react.surge.util.Cuboid$1 -> cKCF$1:
    react.surge.util.Cuboid this$0 -> WYyr
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> Ujvp
    1:1:java.lang.Object onAdapt(java.lang.Object) -> tvQa
react.surge.util.Cuboid$CuboidDirection -> cKCF$wegp:
    react.surge.util.Cuboid$CuboidDirection North -> QPYM
    react.surge.util.Cuboid$CuboidDirection East -> VVwT
    react.surge.util.Cuboid$CuboidDirection South -> Nqbr
    react.surge.util.Cuboid$CuboidDirection West -> YGNt
    react.surge.util.Cuboid$CuboidDirection Up -> EfiE
    react.surge.util.Cuboid$CuboidDirection Down -> HxcP
    react.surge.util.Cuboid$CuboidDirection Horizontal -> nCjA
    react.surge.util.Cuboid$CuboidDirection Vertical -> qMSK
    react.surge.util.Cuboid$CuboidDirection Both -> lNdS
    react.surge.util.Cuboid$CuboidDirection Unknown -> NXPR
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> QYJL
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> pJPR
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> XKKX
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> wgGG
react.surge.util.Cuboid$CuboidIterator -> cKCF$xiKs:
    org.bukkit.World w -> Effn
    int baseX -> Beoa
    int baseY -> nKxs
    int baseZ -> OuEm
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> DIpy
    int sizeY -> mbiP
    int sizeZ -> nvnB
    react.surge.util.Cuboid this$0 -> WYyr
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> qSjY:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> hscn:
    react.glang.GList buffer -> MTlP
    boolean dbg -> nUJd
    int kf -> fUcq
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> qBSx
    41:49:void l(java.lang.Object,java.lang.String) -> xiKs
    53:54:void s(java.lang.Object,java.lang.String) -> hamF
    58:69:void cdb() -> Cgah
    73:79:void v(java.lang.Object,java.lang.String) -> qBSx
    83:84:void w(java.lang.Object,java.lang.String) -> PAuJ
    88:89:void f(java.lang.Object,java.lang.String) -> SurT
    93:106:void l(java.lang.String) -> TWTT
    110:117:void s(java.lang.String) -> uEpS
    121:135:void v(java.lang.String) -> GkBE
    139:146:void w(java.lang.String) -> QEYg
    150:157:void f(java.lang.String) -> AXOq
react.surge.util.DMSRequire -> gFLt:
    react.surge.util.DMSRequirement value() -> LXio
react.surge.util.DMSRequirement -> WjBp:
    react.surge.util.DMSRequirement SQL -> NrBu
    react.surge.util.DMSRequirement[] ENUM$VALUES -> dWmt
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> xiaB:
    react.surge.util.Depend VAULT -> hmLK
    react.surge.util.Depend FAWE -> tNKR
    react.surge.util.Depend WORLDEDIT -> IYbH
    react.surge.util.Depend PROTOLIB -> WslL
    react.surge.util.Depend CITIZENS -> rHDo
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> JuwA
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> dxXi:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> maYE
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> ESli:
    react.surge.util.DimensionFace X -> ubPC
    react.surge.util.DimensionFace Y -> SMmQ
    react.surge.util.DimensionFace Z -> IYbM
    react.surge.util.DimensionFace[] ENUM$VALUES -> BwQb
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> uGFO:
    react.surge.util.Direction U -> jkAj
    react.surge.util.Direction D -> Nqaw
    react.surge.util.Direction N -> aWVS
    react.surge.util.Direction S -> XCmL
    react.surge.util.Direction E -> fDdp
    react.surge.util.Direction W -> FHKQ
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> YrER
    int[] $SWITCH_TABLE$surge$util$Direction -> ubTB
    react.surge.util.Direction[] ENUM$VALUES -> YytX
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> wUci
    61:61:int x() -> QWYF
    66:66:int y() -> TXRM
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> vtdU
    81:81:react.glang.GList news() -> ssjw
    86:86:react.glang.GList udnews() -> brYw
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> ooRO
    115:147:react.surge.util.Direction fromByte(byte) -> Pcwe
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> pPnb
react.surge.util.DynamicConfiguration -> kJIJ:
react.surge.util.DynamicTracker -> uGDv:
react.surge.util.Embedded -> NMey:
    react.glang.GList get() -> ebRB
    void add(java.lang.Object) -> add
react.surge.util.FU -> NUvh:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> wegp
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> xiKs
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> PAuJ
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> SurT
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> xjAV:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> xGJK
react.surge.util.Health -> qCJC:
    double hp -> fLtn
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> Pdtg
    41:41:double getHearts() -> fKbI
    51:51:double getHalfHearts() -> PvVu
    61:61:int getFlatHalfHearts() -> IFmv
react.surge.util.IO -> jpxG:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> SLTI:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> wegp
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> wegp
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> wegp
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> wegp
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> wegp
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> xiKs
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> hamF
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> qBSx
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> wegp
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> wegp
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> wegp
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> wegp
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> PAuJ
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> SurT
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> tvQa
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> Pcwe
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> pYDN
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> wegp
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> Ujvp
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> CfdJ
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> wegp
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> wegp
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> xiKs
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> wegp
react.surge.util.MSound -> baPX:
    react.surge.util.MSound AMBIENCE_CAVE -> mAIW
    react.surge.util.MSound AMBIENCE_RAIN -> DJVB
    react.surge.util.MSound AMBIENCE_THUNDER -> elVj
    react.surge.util.MSound ANVIL_BREAK -> iMmm
    react.surge.util.MSound ANVIL_LAND -> XwRo
    react.surge.util.MSound ANVIL_USE -> XCnA
    react.surge.util.MSound ARROW_HIT -> gjKp
    react.surge.util.MSound BURP -> BClr
    react.surge.util.MSound CHEST_CLOSE -> TPsU
    react.surge.util.MSound CHEST_OPEN -> tMnD
    react.surge.util.MSound CLICK -> lEvF
    react.surge.util.MSound DOOR_CLOSE -> QHKR
    react.surge.util.MSound DOOR_OPEN -> eBBw
    react.surge.util.MSound DRINK -> vduR
    react.surge.util.MSound EAT -> pccy
    react.surge.util.MSound EXPLODE -> Ijfb
    react.surge.util.MSound FALL_BIG -> rHGg
    react.surge.util.MSound FALL_SMALL -> cenV
    react.surge.util.MSound FIRE -> nCjj
    react.surge.util.MSound FIRE_IGNITE -> MvqT
    react.surge.util.MSound FIZZ -> XClA
    react.surge.util.MSound FUSE -> UvWy
    react.surge.util.MSound GLASS -> vnFh
    react.surge.util.MSound HURT_FLESH -> ipQf
    react.surge.util.MSound ITEM_BREAK -> WQjV
    react.surge.util.MSound ITEM_PICKUP -> mIXx
    react.surge.util.MSound LAVA -> UBsN
    react.surge.util.MSound LAVA_POP -> fEDe
    react.surge.util.MSound LEVEL_UP -> vmeQ
    react.surge.util.MSound MINECART_BASE -> VVxU
    react.surge.util.MSound MINECART_INSIDE -> dGOb
    react.surge.util.MSound NOTE_BASS -> dWor
    react.surge.util.MSound NOTE_PIANO -> PgIj
    react.surge.util.MSound NOTE_BASS_DRUM -> nDLD
    react.surge.util.MSound NOTE_STICKS -> wgvn
    react.surge.util.MSound NOTE_BASS_GUITAR -> xsoL
    react.surge.util.MSound NOTE_SNARE_DRUM -> OdIX
    react.surge.util.MSound NOTE_PLING -> Berm
    react.surge.util.MSound ORB_PICKUP -> OBEy
    react.surge.util.MSound PISTON_EXTEND -> lExU
    react.surge.util.MSound PISTON_RETRACT -> IQUt
    react.surge.util.MSound PORTAL -> tMpG
    react.surge.util.MSound PORTAL_TRAVEL -> vuyJ
    react.surge.util.MSound PORTAL_TRIGGER -> WRNS
    react.surge.util.MSound SHOOT_ARROW -> qDfo
    react.surge.util.MSound SPLASH -> AlBM
    react.surge.util.MSound SPLASH2 -> fgJm
    react.surge.util.MSound STEP_GRASS -> ekwR
    react.surge.util.MSound STEP_GRAVEL -> FYOK
    react.surge.util.MSound STEP_LADDER -> AlBH
    react.surge.util.MSound STEP_SAND -> fMXQ
    react.surge.util.MSound STEP_SNOW -> ukEt
    react.surge.util.MSound STEP_STONE -> Wspn
    react.surge.util.MSound STEP_WOOD -> iyEW
    react.surge.util.MSound STEP_WOOL -> tyDn
    react.surge.util.MSound SWIM -> cTou
    react.surge.util.MSound WATER -> Wspg
    react.surge.util.MSound WOOD_CLICK -> yfPe
    react.surge.util.MSound BAT_DEATH -> mQku
    react.surge.util.MSound BAT_HURT -> oWrX
    react.surge.util.MSound BAT_IDLE -> cfRb
    react.surge.util.MSound BAT_LOOP -> AcOn
    react.surge.util.MSound BAT_TAKEOFF -> GeAc
    react.surge.util.MSound BLAZE_BREATH -> qMVp
    react.surge.util.MSound BLAZE_DEATH -> eAcO
    react.surge.util.MSound BLAZE_HIT -> TsXF
    react.surge.util.MSound CAT_HISS -> OtiR
    react.surge.util.MSound CAT_HIT -> JLHO
    react.surge.util.MSound CAT_MEOW -> agyt
    react.surge.util.MSound CAT_PURR -> ukFH
    react.surge.util.MSound CAT_PURREOW -> jYbt
    react.surge.util.MSound CHICKEN_IDLE -> ecff
    react.surge.util.MSound CHICKEN_HURT -> OlYS
    react.surge.util.MSound CHICKEN_EGG_POP -> jHbJ
    react.surge.util.MSound CHICKEN_WALK -> MerV
    react.surge.util.MSound COW_IDLE -> OuKA
    react.surge.util.MSound COW_HURT -> rOyK
    react.surge.util.MSound COW_WALK -> vCTT
    react.surge.util.MSound CREEPER_HISS -> bsoS
    react.surge.util.MSound CREEPER_DEATH -> aWYt
    react.surge.util.MSound ENDERDRAGON_DEATH -> xcLe
    react.surge.util.MSound ENDERDRAGON_GROWL -> TjgJ
    react.surge.util.MSound ENDERDRAGON_HIT -> UnKH
    react.surge.util.MSound ENDERDRAGON_WINGS -> pkue
    react.surge.util.MSound ENDERMAN_DEATH -> dXVP
    react.surge.util.MSound ENDERMAN_HIT -> lOKx
    react.surge.util.MSound ENDERMAN_IDLE -> FHOW
    react.surge.util.MSound ENDERMAN_TELEPORT -> urwr
    react.surge.util.MSound ENDERMAN_SCREAM -> qflR
    react.surge.util.MSound ENDERMAN_STARE -> ixfY
    react.surge.util.MSound GHAST_SCREAM -> Sgfe
    react.surge.util.MSound GHAST_SCREAM2 -> cMBs
    react.surge.util.MSound GHAST_CHARGE -> BUTJ
    react.surge.util.MSound GHAST_DEATH -> oXTp
    react.surge.util.MSound GHAST_FIREBALL -> GufR
    react.surge.util.MSound GHAST_MOAN -> IYiR
    react.surge.util.MSound IRONGOLEM_DEATH -> HFFD
    react.surge.util.MSound IRONGOLEM_HIT -> BDSm
    react.surge.util.MSound IRONGOLEM_THROW -> bQnJ
    react.surge.util.MSound IRONGOLEM_WALK -> edHq
    react.surge.util.MSound MAGMACUBE_WALK -> tFBM
    react.surge.util.MSound MAGMACUBE_WALK2 -> vmio
    react.surge.util.MSound MAGMACUBE_JUMP -> Houw
    react.surge.util.MSound PIG_IDLE -> vCWE
    react.surge.util.MSound PIG_DEATH -> MMBk
    react.surge.util.MSound PIG_WALK -> fEJI
    react.surge.util.MSound SHEEP_IDLE -> XTqp
    react.surge.util.MSound SHEEP_SHEAR -> Otjx
    react.surge.util.MSound SHEEP_WALK -> bcQF
    react.surge.util.MSound SILVERFISH_HIT -> ShFp
    react.surge.util.MSound SILVERFISH_KILL -> nwSx
    react.surge.util.MSound SILVERFISH_IDLE -> ukKK
    react.surge.util.MSound SILVERFISH_WALK -> xbrA
    react.surge.util.MSound SKELETON_IDLE -> thGh
    react.surge.util.MSound SKELETON_DEATH -> eSJh
    react.surge.util.MSound SKELETON_HURT -> ixiN
    react.surge.util.MSound SKELETON_WALK -> XwYF
    react.surge.util.MSound SLIME_ATTACK -> bJBE
    react.surge.util.MSound SLIME_WALK -> drKE
    react.surge.util.MSound SLIME_WALK2 -> sdcd
    react.surge.util.MSound SPIDER_IDLE -> GvIE
    react.surge.util.MSound SPIDER_DEATH -> nwXN
    react.surge.util.MSound SPIDER_WALK -> PUmq
    react.surge.util.MSound WITHER_DEATH -> oOgF
    react.surge.util.MSound WITHER_HURT -> OuOT
    react.surge.util.MSound WITHER_IDLE -> jYgx
    react.surge.util.MSound WITHER_SHOOT -> rrae
    react.surge.util.MSound WITHER_SPAWN -> DSMT
    react.surge.util.MSound WOLF_BARK -> blET
    react.surge.util.MSound WOLF_DEATH -> EgQh
    react.surge.util.MSound WOLF_GROWL -> UKlT
    react.surge.util.MSound WOLF_HOWL -> cCsF
    react.surge.util.MSound WOLF_HURT -> CGWT
    react.surge.util.MSound WOLF_PANT -> GTFX
    react.surge.util.MSound WOLF_SHAKE -> HFFI
    react.surge.util.MSound WOLF_WALK -> yMBf
    react.surge.util.MSound WOLF_WHINE -> hTBk
    react.surge.util.MSound ZOMBIE_METAL -> aqPj
    react.surge.util.MSound ZOMBIE_WOOD -> AkfS
    react.surge.util.MSound ZOMBIE_WOODBREAK -> HyJa
    react.surge.util.MSound ZOMBIE_IDLE -> Dckv
    react.surge.util.MSound ZOMBIE_DEATH -> kKjD
    react.surge.util.MSound ZOMBIE_HURT -> rsAy
    react.surge.util.MSound ZOMBIE_INFECT -> iNTk
    react.surge.util.MSound ZOMBIE_UNFECT -> AtWU
    react.surge.util.MSound ZOMBIE_REMEDY -> RSbj
    react.surge.util.MSound ZOMBIE_WALK -> lqPh
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> QjRb
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> uIEw
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> iovQ
    react.surge.util.MSound ZOMBIE_PIG_HURT -> ipWQ
    react.surge.util.MSound DIG_WOOL -> tEat
    react.surge.util.MSound DIG_GRASS -> aiAU
    react.surge.util.MSound DIG_GRAVEL -> eSJY
    react.surge.util.MSound DIG_SAND -> Ruet
    react.surge.util.MSound DIG_SNOW -> qEIv
    react.surge.util.MSound DIG_STONE -> Xeug
    react.surge.util.MSound DIG_WOOD -> lqOn
    react.surge.util.MSound FIREWORK_BLAST -> iMrt
    react.surge.util.MSound FIREWORK_BLAST2 -> uIFS
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> aNly
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> gYOj
    react.surge.util.MSound FIREWORK_TWINKLE -> WswC
    react.surge.util.MSound FIREWORK_TWINKLE2 -> sCDD
    react.surge.util.MSound FIREWORK_LAUNCH -> yTtv
    react.surge.util.MSound SUCCESSFUL_HIT -> mRTM
    react.surge.util.MSound HORSE_ANGRY -> VXCE
    react.surge.util.MSound HORSE_ARMOR -> fpCW
    react.surge.util.MSound HORSE_BREATHE -> xkdh
    react.surge.util.MSound HORSE_DEATH -> Frfh
    react.surge.util.MSound HORSE_GALLOP -> tggx
    react.surge.util.MSound HORSE_HIT -> oFwD
    react.surge.util.MSound HORSE_IDLE -> HMyM
    react.surge.util.MSound HORSE_JUMP -> EgTN
    react.surge.util.MSound HORSE_LAND -> iyKh
    react.surge.util.MSound HORSE_SADDLE -> Kptl
    react.surge.util.MSound HORSE_SOFT -> OuRF
    react.surge.util.MSound HORSE_WOOD -> KGCC
    react.surge.util.MSound DONKEY_ANGRY -> pclJ
    react.surge.util.MSound DONKEY_DEATH -> Vpre
    react.surge.util.MSound DONKEY_HIT -> OSML
    react.surge.util.MSound DONKEY_IDLE -> euOG
    react.surge.util.MSound HORSE_SKELETON_DEATH -> uQXm
    react.surge.util.MSound HORSE_SKELETON_HIT -> eRkE
    react.surge.util.MSound HORSE_SKELETON_IDLE -> rYQf
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> fVNc
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> yDRy
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> FsGD
    react.surge.util.MSound VILLAGER_DEATH -> gbDF
    react.surge.util.MSound VILLAGER_HAGGLE -> ViCW
    react.surge.util.MSound VILLAGER_HIT -> XCsn
    react.surge.util.MSound VILLAGER_IDLE -> jIIN
    react.surge.util.MSound VILLAGER_NO -> lhaJ
    react.surge.util.MSound VILLAGER_YES -> VNov
    java.lang.String pre19sound -> WRTJ
    java.lang.String post19sound -> Pwrj
    org.bukkit.Sound resolvedSound -> rHPH
    react.surge.util.MSound[] ENUM$VALUES -> qUlv
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> Vwgt
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> JIhx:
    org.bukkit.Material material -> GJuM
    java.lang.Byte data -> KWas
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> DQQk
    79:80:void setData(java.lang.Byte) -> wegp
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> TyjJ:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> pXdY
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> yBWm
    68:68:boolean isAnyOnline() -> kkrj
    80:80:react.glang.GList inWorld(org.bukkit.World) -> CUcP
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> FMit
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> wegp
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> wegp
    143:144:void disable(org.bukkit.entity.Player) -> Grnl
    154:155:void enable(org.bukkit.entity.Player) -> tdnX
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> wegp
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> xiKs
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> fArY
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> wegp
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> wUGA
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> hamF
    300:300:boolean canFindPlayer(java.lang.String) -> ndAD
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> jqEy
    338:345:react.glang.GList onlinePlayers() -> AjLv
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> vIQd
    368:371:void clear(org.bukkit.entity.Player) -> SePr
    381:385:void clearEffects(org.bukkit.entity.Player) -> CMQs
    398:399:void heal(org.bukkit.entity.Player,double) -> wegp
    409:410:void heal(org.bukkit.entity.Player) -> TOAx
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> AiOO
    432:433:void resetHunger(org.bukkit.entity.Player) -> lDER
    443:444:void kill(org.bukkit.entity.Player) -> PAtb
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> CVBs
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> OGcC
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> wegp
react.surge.util.P$1 -> TyjJ$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> Ujvp
    1:1:java.lang.Object onAdapt(java.lang.Object) -> tvQa
react.surge.util.P$2 -> TyjJ$2:
    java.lang.Double val$doff -> aOOq
    org.bukkit.entity.Player val$e -> FXvE
    org.bukkit.entity.Entity[] val$result -> NOkl
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> yIjn
react.surge.util.PE -> kbya:
    react.surge.util.PE ABSORPTION -> DAmg
    react.surge.util.PE BLINDNESS -> sKUy
    react.surge.util.PE CONFUSION -> ynig
    react.surge.util.PE DAMAGE_RESISTANCE -> QGtG
    react.surge.util.PE FAST_DIGGING -> VGCW
    react.surge.util.PE FIRE_RESISTANCE -> seIR
    react.surge.util.PE GLOWING -> PUrX
    react.surge.util.PE HARM -> FQFk
    react.surge.util.PE HEAL -> bQvC
    react.surge.util.PE HEALTH_BOOST -> EUrs
    react.surge.util.PE HUNGER -> puPq
    react.surge.util.PE INCREASE_DAMAGE -> EDqe
    react.surge.util.PE INVISIBILITY -> NaOL
    react.surge.util.PE JUMP -> Hxnr
    react.surge.util.PE LEVITATION -> rsFr
    react.surge.util.PE LUCK -> wNph
    react.surge.util.PE NIGHT_VISION -> drNv
    react.surge.util.PE POISON -> eAla
    react.surge.util.PE REGENERATION -> QGsB
    react.surge.util.PE SATURATION -> pBKk
    react.surge.util.PE SLOW -> MTxX
    react.surge.util.PE SLOW_DIGGING -> xJCe
    react.surge.util.PE SPEED -> focM
    react.surge.util.PE UNLUCK -> rbEE
    react.surge.util.PE WATER_BREATHING -> FXuL
    react.surge.util.PE WEAKNESS -> drNF
    react.surge.util.PE WITHER -> WJDu
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> wegp
    144:144:react.surge.util.PE d(int) -> QEYg
    156:156:react.surge.util.PE a(int) -> AXOq
    166:166:org.bukkit.potion.PotionEffect c() -> IWon
    177:178:void c(org.bukkit.entity.LivingEntity) -> SurT
    182:183:void crm(org.bukkit.entity.LivingEntity) -> tvQa
    187:188:void rm(org.bukkit.entity.LivingEntity) -> Pcwe
react.surge.util.ParticleEffect -> hbbG:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> FHUA
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> mlFi
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> WQuT
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> nUWQ
    react.surge.util.ParticleEffect WATER_BUBBLE -> nMGI
    react.surge.util.ParticleEffect WATER_SPLASH -> lycv
    react.surge.util.ParticleEffect WATER_WAKE -> cTxB
    react.surge.util.ParticleEffect SUSPENDED -> JTaN
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> RBef
    react.surge.util.ParticleEffect CRIT -> pRkr
    react.surge.util.ParticleEffect CRIT_MAGIC -> ywYa
    react.surge.util.ParticleEffect SMOKE_NORMAL -> LJIN
    react.surge.util.ParticleEffect SMOKE_LARGE -> grhp
    react.surge.util.ParticleEffect SPELL -> aWdw
    react.surge.util.ParticleEffect SPELL_INSTANT -> bsyq
    react.surge.util.ParticleEffect SPELL_MOB -> ReMH
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> ahfd
    react.surge.util.ParticleEffect SPELL_WITCH -> EUuO
    react.surge.util.ParticleEffect DRIP_WATER -> orPe
    react.surge.util.ParticleEffect DRIP_LAVA -> eBPR
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> kfCk
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> qUrT
    react.surge.util.ParticleEffect TOWN_AURA -> uYml
    react.surge.util.ParticleEffect NOTE -> JefA
    react.surge.util.ParticleEffect PORTAL -> DdTk
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> SFMV
    react.surge.util.ParticleEffect FLAME -> Vhgh
    react.surge.util.ParticleEffect LAVA -> hujm
    react.surge.util.ParticleEffect FOOTSTEP -> EDrW
    react.surge.util.ParticleEffect CLOUD -> KFcm
    react.surge.util.ParticleEffect REDSTONE -> emCD
    react.surge.util.ParticleEffect SNOWBALL -> qVSA
    react.surge.util.ParticleEffect SNOW_SHOVEL -> xswn
    react.surge.util.ParticleEffect SLIME -> cnkb
    react.surge.util.ParticleEffect HEART -> kfCf
    react.surge.util.ParticleEffect BARRIER -> aygR
    react.surge.util.ParticleEffect ITEM_CRACK -> EDrd
    react.surge.util.ParticleEffect BLOCK_CRACK -> kvcX
    react.surge.util.ParticleEffect BLOCK_DUST -> ExWy
    react.surge.util.ParticleEffect WATER_DROP -> QQHF
    react.surge.util.ParticleEffect ITEM_TAKE -> OJaC
    react.surge.util.ParticleEffect MOB_APPEARANCE -> KWfR
    react.surge.util.ParticleEffect DRAGON_BREATH -> fgUE
    react.surge.util.ParticleEffect END_ROD -> TcAj
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> Gdkl
    react.surge.util.ParticleEffect SWEEP_ATTACK -> veeL
    java.util.Map NAME_MAP -> jIPg
    java.util.Map ID_MAP -> GCKw
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> PxYy
    java.util.List properties -> kTby
    react.surge.util.ParticleEffect[] ENUM$VALUES -> blMb
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> UuFM
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> wegp
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> cImL
    557:565:react.surge.util.ParticleEffect fromId(int) -> xGJK
    577:578:boolean isWater(org.bukkit.Location) -> iBlp
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> wegp
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> wegp
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> wegp
    665:681:void display(float,int,org.bukkit.Location,double) -> wegp
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> wegp
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> wegp
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> wegp
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> wegp
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> wegp
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> wegp
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> wegp
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> wegp
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> wegp
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> wegp
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> wegp
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> wegp
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> wegp
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> wegp
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> hbbG$wegp:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> hbbG$xiKs:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> hbbG$hamF:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> nJhN
    1594:1594:float getValueY() -> JRbk
    1605:1605:float getValueZ() -> bOvg
react.surge.util.ParticleEffect$OrdinaryColor -> hbbG$qBSx:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> nJhN
    1526:1526:float getValueY() -> JRbk
    1537:1537:float getValueZ() -> bOvg
react.surge.util.ParticleEffect$ParticleColor -> hbbG$PAuJ:
    1383:1383:void <init>() -> <init>
    float getValueX() -> nJhN
    float getValueY() -> JRbk
    float getValueZ() -> bOvg
react.surge.util.ParticleEffect$ParticleColorException -> hbbG$SurT:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> hbbG$tvQa:
    org.bukkit.Material material -> GJuM
    byte data -> mQxT
    int[] packetData -> lhgk
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> aMUD
    1309:1309:java.lang.String getPacketDataString() -> lLqv
react.surge.util.ParticleEffect$ParticleDataException -> hbbG$Pcwe:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> hbbG$pYDN:
    int version -> version
    java.lang.Class enumParticle -> EojR
    java.lang.reflect.Constructor packetConstructor -> JTeq
    java.lang.reflect.Method getHandle -> kKrY
    java.lang.reflect.Field playerConnection -> NPQa
    java.lang.reflect.Method sendPacket -> oaQJ
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> KhkF
    float offsetX -> OArX
    float offsetY -> RSmG
    float offsetZ -> fgWf
    float speed -> lGEw
    int amount -> XvKa
    boolean longDistance -> HpaY
    react.surge.util.ParticleEffect$ParticleData data -> drQm
    java.lang.Object packet -> yoMu
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> HCOb
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> wegp
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> xiKs
    2004:2018:void sendTo(org.bukkit.Location,double) -> xiKs
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> hbbG$pYDN$wegp:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> hbbG$pYDN$xiKs:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> hbbG$pYDN$hamF:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> hbbG$Ujvp:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> QGwN
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> VWgH
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> aGFA
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> jHno
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> Niaq
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> hbbG$CfdJ:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> xjAF:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> PcyQ
react.surge.util.Persist -> aCyv:
react.surge.util.PluginUtil -> eYYA:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> PAuJ
    81:85:void enableAll() -> KxJQ
    95:99:void disable(org.bukkit.plugin.Plugin) -> SurT
    106:110:void disableAll() -> gEtM
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> tvQa
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> wegp
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> rEXI
    169:172:java.util.List getPluginNames(boolean) -> wUGJ
    184:187:java.lang.String getPluginVersion(java.lang.String) -> VDHv
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> Pcwe
    237:316:java.util.List findByCommand(java.lang.String) -> doUD
    337:338:void load(org.bukkit.plugin.Plugin) -> pYDN
    342:364:java.lang.String getPluginFileName(java.lang.String) -> Ayqc
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> wegp
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> Ujvp
    480:484:void reloadAll() -> sHvN
    496:622:void unload(org.bukkit.plugin.Plugin) -> CfdJ
react.surge.util.PoolCount -> gxpE:
react.surge.util.PoolDescriber -> aCyr:
react.surge.util.PoolNanoThrottle -> Ukke:
react.surge.util.PositionalSelector -> iDBO:
    react.glang.GSet allowedChunks -> nLjh
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> HTlx
    39:40:void addChunk(org.bukkit.Chunk) -> HBnf
    44:44:react.glang.GSet getAllowedChunks() -> VnwR
react.surge.util.Protocol -> fSis:
    react.surge.util.Protocol LATEST -> EVVu
    react.surge.util.Protocol R1_12_2 -> mbxi
    react.surge.util.Protocol R1_12_2_PRE -> rHUh
    react.surge.util.Protocol R1_12_1 -> JUFW
    react.surge.util.Protocol R1_12 -> IjtP
    react.surge.util.Protocol R1_11_2 -> qftj
    react.surge.util.Protocol R1_11_1 -> elgM
    react.surge.util.Protocol R1_11 -> ReQL
    react.surge.util.Protocol R1_10_2 -> FPlJ
    react.surge.util.Protocol R1_10_1 -> usef
    react.surge.util.Protocol R1_10 -> aNxK
    react.surge.util.Protocol R1_9_4 -> Hxtp
    react.surge.util.Protocol R1_9_3 -> oOpl
    react.surge.util.Protocol R1_9_2 -> dquE
    react.surge.util.Protocol R1_9_1 -> puWX
    react.surge.util.Protocol R1_9 -> MwdQ
    react.surge.util.Protocol R1_8_9 -> hTNF
    react.surge.util.Protocol R1_8_8 -> HNbS
    react.surge.util.Protocol R1_8_7 -> XxDU
    react.surge.util.Protocol R1_8_6 -> edUd
    react.surge.util.Protocol R1_8_5 -> fxYx
    react.surge.util.Protocol R1_8_4 -> Dtwi
    react.surge.util.Protocol R1_8_3 -> jRCQ
    react.surge.util.Protocol R1_8_2 -> sTMH
    react.surge.util.Protocol R1_8_1 -> mJKJ
    react.surge.util.Protocol R1_8 -> lNuu
    react.surge.util.Protocol R1_7_10 -> JLWE
    react.surge.util.Protocol R1_7_9 -> ItHX
    react.surge.util.Protocol R1_7_8 -> ffwl
    react.surge.util.Protocol R1_7_7 -> xQxk
    react.surge.util.Protocol R1_7_6 -> cgAP
    react.surge.util.Protocol R1_7_5 -> EDvu
    react.surge.util.Protocol R1_7_4 -> FQOH
    react.surge.util.Protocol R1_7_3 -> SyWR
    react.surge.util.Protocol R1_7_2 -> WkqL
    react.surge.util.Protocol R1_7_1 -> lFjE
    react.surge.util.Protocol B1_6_4 -> Cigi
    react.surge.util.Protocol B1_6_3 -> Ltbi
    react.surge.util.Protocol B1_6_2 -> Cigm
    react.surge.util.Protocol B1_6_1 -> qokg
    react.surge.util.Protocol B1_5_2 -> kfIq
    react.surge.util.Protocol B1_5_1 -> JwMq
    react.surge.util.Protocol B1_5 -> AuBy
    react.surge.util.Protocol B1_4_7 -> eAts
    react.surge.util.Protocol B1_4_6 -> yLnj
    react.surge.util.Protocol B1_4_5 -> Isiy
    react.surge.util.Protocol B1_4_4 -> SWSU
    react.surge.util.Protocol B1_4_2 -> wOXu
    react.surge.util.Protocol B1_3_2 -> ULXF
    react.surge.util.Protocol B1_3_1 -> XVAo
    react.surge.util.Protocol B1_2_5 -> euYR
    react.surge.util.Protocol B1_2_4 -> Hxuo
    react.surge.util.Protocol EARLIEST -> oieC
    react.surge.util.Protocol UNKNOWN -> aNxk
    int version -> version
    java.lang.String packageVersion -> nJxN
    java.lang.String versionName -> BMSX
    boolean netty -> KWlS
    react.surge.util.Protocol[] ENUM$VALUES -> RCOS
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> ncyp
    118:118:java.lang.String getPackageVersion() -> CnyY
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> kJTF
    142:150:react.surge.util.Protocol getProtocolVersion() -> wLtt
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> xiKs
    160:160:boolean isServerVersion() -> rqLD
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> OsVs
    175:175:boolean isActualVersion() -> UthU
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> KxLe
    200:200:int getMetaVersion() -> Ngbi
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> GjtN:
    react.surge.util.Protocol from -> tEoD
    react.surge.util.Protocol to -> YHDH
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> VwkP
    21:21:react.surge.util.Protocol getTo() -> JlYI
    26:26:boolean contains(react.surge.util.Protocol) -> hamF
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> rFLC:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> BeAK
    70:70:int randomNextInt() -> pjdQ
    80:80:long randomNextLong() -> TPBw
    92:92:boolean isWithin(double) -> TOAx
    104:104:boolean isWithin(int) -> pXdY
    116:116:boolean isWithin(long) -> yAYa
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> AiOO
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> bNxY
react.surge.util.RawEvent -> uiJj:
react.surge.util.RayTrace -> sHpr:
    org.bukkit.Location start -> rrlu
    org.bukkit.util.Vector direction -> QPle
    java.lang.Double maxDistance -> BoUi
    java.lang.Double distanceCovered -> eJdo
    java.lang.Double step -> Hxvc
    java.lang.Boolean stop -> OKJR
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> VEHW
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> yIjn
    89:89:org.bukkit.Location getStart() -> wDeF
    94:95:void setStart(org.bukkit.Location) -> FMit
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> wDdd
    114:115:void setMaxDistance(java.lang.Double) -> qBSx
    119:119:java.lang.Double getDistanceCovered() -> aEFy
    124:125:void setDistanceCovered(java.lang.Double) -> PAuJ
    129:129:java.lang.Double getStep() -> jWpp
    134:135:void setStep(java.lang.Double) -> SurT
react.surge.util.ReflectionUtils -> HCeo:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> wegp
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> wegp
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> wegp
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> wegp
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> wegp
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> wegp
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> wegp
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> wegp
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> wegp
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> wegp
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> wegp
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> wegp
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> wegp
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> wegp
react.surge.util.ReflectionUtils$DataType -> HCeo$wegp:
    react.surge.util.ReflectionUtils$DataType BYTE -> Rdse
    react.surge.util.ReflectionUtils$DataType SHORT -> ukXw
    react.surge.util.ReflectionUtils$DataType INTEGER -> JTlC
    react.surge.util.ReflectionUtils$DataType LONG -> XLsL
    react.surge.util.ReflectionUtils$DataType CHARACTER -> IAGu
    react.surge.util.ReflectionUtils$DataType FLOAT -> GSsN
    react.surge.util.ReflectionUtils$DataType DOUBLE -> daXC
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> snDf
    java.util.Map CLASS_MAP -> LBAV
    java.lang.Class primitive -> qMkL
    java.lang.Class reference -> emKe
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> bcbB
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> kSEJ
    704:704:java.lang.Class getReference() -> SDNx
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> xiKs
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> hamF
    741:742:java.lang.Class getReference(java.lang.Class) -> qBSx
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> wegp
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> xiKs
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> xiKs
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> hamF
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> wegp
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> HCeo$xiKs:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> kUJa
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> Olld
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> bJQE
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> TbjP
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> oXfH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> aXNl
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> nxFf
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> Bfeb
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> RTTK
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> TtJq
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> JwOB
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> TjyF
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> CjJH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> YXfH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> ganm
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> Jeld
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> mdAM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> qVYx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> YjHr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> RBpT
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> BMUW
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> KgCK:
    void refresh() -> refresh
react.surge.util.SQLOperation -> QFQI:
    react.surge.util.SQLOperation LOAD -> EyBA
    react.surge.util.SQLOperation SAVE -> vwLL
    react.surge.util.SQLOperation[] ENUM$VALUES -> VGLk
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> ggrN:
    react.surge.util.ServerState START -> BVEw
    react.surge.util.ServerState ENABLE -> eKHX
    react.surge.util.ServerState DISABLE -> Spgg
    react.surge.util.ServerState STOP -> YOuQ
    react.surge.util.ServerState RUNNING -> vvkU
    react.surge.util.ServerState[] ENUM$VALUES -> wWoE
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> GRFG:
    org.bukkit.Location location -> twtd
    org.bukkit.util.Vector offset -> yVFB
    org.bukkit.util.Vector size -> Wtes
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> HBnf
    90:94:org.bukkit.Location randomLocation() -> uGOf
    104:104:org.bukkit.Location randomSurface() -> BmRd
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> bXiX
    129:129:org.bukkit.util.Vector getSize() -> KgIv
react.surge.util.SnowLevel -> PTOS:
    byte level -> Xwhv
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> DHcI
    51:52:void setLevel(byte) -> pYDN
react.surge.util.SuperCaller -> GHtD:
    void run() -> run
react.surge.util.T -> mPPp:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> xiKs
    32:35:void stop() -> stop
react.surge.util.TXT -> LHBv:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> tvQa
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> wegp
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> wegp
    99:99:java.lang.String line(react.surge.util.C,int) -> wegp
    113:113:java.lang.String underline(react.surge.util.C,int) -> xiKs
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> wegp
react.surge.util.Tag -> lnpO:
    java.lang.String value() -> value
react.surge.util.Timer -> FWST:
    long tns -> QYay
    long cns -> iFUp
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> STnY
react.surge.util.VectorMath -> aoSC:
    int[] $SWITCH_TABLE$surge$util$Axis -> RmNT
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> nDdH
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> wegp
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> wegp
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> xiKs
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> hamF
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> wegp
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> xiKs
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> xiKs
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> hamF
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> qBSx
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> PAuJ
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> SurT
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> tvQa
    111:111:double round(double,int) -> PAuJ
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> wegp
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> wegp
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> wegp
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> qBSx
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> PAuJ
    268:268:org.bukkit.util.Vector toVector(float,float) -> wegp
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> wegp
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> wegp
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> Pcwe
    337:340:double getSpeed(org.bukkit.util.Vector) -> pYDN
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> wegp
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> Ujvp
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> wegp
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> xiKs
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> hamF
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> qBSx
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> CfdJ
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> yBXh
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> Gsnq
react.surge.util.VectorMath$1 -> aoSC$1:
    org.bukkit.util.Vector val$vector -> vTkl
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> yIjn
    1:1:java.lang.Object onAdapt(java.lang.Object) -> tvQa
react.surge.util.W -> IynT:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> pYDN
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> wegp
    75:86:org.bukkit.entity.Entity getEntity(int) -> ndAD
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> wegp
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> wegp
    143:143:int getChunkX(org.bukkit.block.Block) -> Ujvp
    155:155:int getChunkY(org.bukkit.block.Block) -> CfdJ
    168:169:void dropXp(org.bukkit.Location,int) -> xiKs
    180:180:int getChunkZ(org.bukkit.block.Block) -> yIjn
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> xiKs
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> wegp
    232:239:react.glang.GList news(org.bukkit.Location) -> wUGJ
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> wegp
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> wUGJ
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> fmHS
    300:300:org.bukkit.World toSync(org.bukkit.World) -> bNxU
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> iBlp
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> wCeF
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> wCeF
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> QonC
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> wegp
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> wegp
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> wegp
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> wegp
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> wegp
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> wegp
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> wegp
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> wegp
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> bNxY
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> HCOb
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> bNxY
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> hamF
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> wegp
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> wegp
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> wegp
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> wegp
react.surge.util.W$1 -> IynT$1:
    java.lang.Double val$doff -> aOOq
    org.bukkit.entity.Entity val$e -> gkDY
    org.bukkit.entity.Entity[] val$result -> NOkl
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> yIjn
react.surge.util.Worlds -> rySY:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> wnjs
    33:33:boolean hasWorld(java.lang.String) -> ktIJ
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> UIlT:
react.text.ColoredString -> ECNl:
    react.surge.util.C c -> rrsR
    java.lang.String s -> WtfL
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> kIqq
    42:43:void setC(react.surge.util.C) -> xiKs
    47:47:java.lang.String getS() -> VMWX
    52:53:void setS(java.lang.String) -> owdI
react.text.RTEX -> PBlt:
    react.glang.GList extras -> BVGh
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> NVaN
    44:58:react.json.JSONObject toJSON() -> kHqc
react.text.RTX -> ofvs:
    react.json.JSONArray base -> tNed
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> SurT
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> xiKs
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> wegp
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> wegp
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> xiKs
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> hamF
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> wegp
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> xiKs
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> hamF
    265:265:react.json.JSONArray toJSON() -> Iqdm
    276:277:void tellRawTo(org.bukkit.entity.Player) -> lmwe
react.text.RawText -> AYFM:
    java.lang.String COLOR_BLACK -> AceU
    java.lang.String COLOR_DARK_BLUE -> xSCB
    java.lang.String COLOR_DARK_GREEN -> Fjdo
    java.lang.String COLOR_DARK_AQUA -> WuGb
    java.lang.String COLOR_DARK_RED -> IcND
    java.lang.String COLOR_DARK_PURPLE -> IRKr
    java.lang.String COLOR_GOLD -> uQgl
    java.lang.String COLOR_GRAY -> FPsA
    java.lang.String COLOR_DARK_GRAY -> iyYv
    java.lang.String COLOR_BLUE -> mSCI
    java.lang.String COLOR_GREEN -> JCmQ
    java.lang.String COLOR_AQUA -> UTmf
    java.lang.String COLOR_RED -> pmLc
    java.lang.String COLOR_LIGHT_PURPLE -> VrCV
    java.lang.String COLOR_YELLOW -> SOGY
    java.lang.String COLOR_WHITE -> mdDF
    java.lang.String COLOR_NONE -> ubhw
    java.lang.String HEAD_TEXT -> VFnB
    java.lang.String HEAD_COLOR -> KFna
    java.lang.String HEAD_BOLD -> GeWE
    java.lang.String HEAD_ITALIC -> OBYp
    java.lang.String HEAD_UNDERLINED -> mlTQ
    java.lang.String HEAD_STRIKETHROUGH -> ngFi
    java.lang.String HEAD_OBFUSCATED -> FYbb
    java.lang.String HEAD_CLICK_EVENT -> QPqG
    java.lang.String HEAD_HOVER_EVENT -> pcyf
    java.lang.String HEAD_ACTION -> tyXS
    java.lang.String HEAD_VALUE -> wWll
    java.lang.String HEAD_EXTRA -> RnGj
    java.lang.String HEAD_ACTION_SHOW_TEXT -> gPoP
    java.lang.String HEAD_ACTION_COMMAND -> vekf
    java.util.ArrayList components -> bSCD
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> prWB
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> PAuJ
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> wegp
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> wegp
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> wegp
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> wegp
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> wegp
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> wegp
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> wegp
    307:313:java.lang.String compile() -> rqJX
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> wegp

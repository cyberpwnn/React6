react.Config -> kHrj:
    react.glang.GMap worldConfigs -> kHrj
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> hbMk
    java.lang.String A_COMMANDOVERRIDE_TPS -> doSM
    java.lang.String A_REACT_REMOTE_PORT -> KUIg
    java.lang.String A_REACT_REMOTE_ENABLED -> TqFU
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> fmJA
    java.lang.String A_POOL_MAXTHREADS -> IqFj
    java.lang.String A_POOL_SYNC_NANOS -> Ahlu
    java.lang.String A_FASTLEAF_ENABLED -> hbMS
    java.lang.String A_FASTLEAF_ONDECAY -> imaA
    java.lang.String A_FASTLEAF_INSTANT -> GrqA
    java.lang.String A_FASTLEAF_DECAYPERIOD -> Jjwq
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> NoTr
    java.lang.String A_ENTITYSTACK_ENABLED -> TNcE
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> jWRR
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> KLXv
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> teOi
    java.lang.String A_GLASS_SHOW_BLOCKS -> Whlr
    java.lang.String A_GLASS_SHOW_PARTICLES -> YoSr
    java.lang.String A_ALLOW_CULL -> UkVj
    java.lang.String A_ALLOW_PURGE -> Dquj
    java.lang.String A_ALLOW_STACKING -> OPSR
    java.lang.String A_CULL_RULES -> CUcK
    java.lang.String A_RAI_TPS_HIGH_TICK -> VKun
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> legb
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> rVXF
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> jOAU
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> ktFw
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> aegc
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> oxBt
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> mWiA
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> fcvX
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> JHsf
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> mWiF
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> lDER
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> mhiy
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> Ipdv
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> CoUE
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> sbKe
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> kkUc
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> DXdn
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> GQMa
    java.lang.String A_RAI_FLUID_TIME_CEIL -> ArAo
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> iBoG
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> kkXi
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> jFRk
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> dLpr
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> BuEM
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> kQfW
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> lfLF
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> Oigp
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> vkXa
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> OHEx
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> jOCa
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> myoD
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> Gapo
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> YMSO
    java.lang.String A_USE_WORLD_CONFIGS -> rMhv
    java.lang.String A_LANGUAGE -> SBpY
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> wwLT
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> qRuk
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> CoVM
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> WiOJ
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> Ujwp
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> kcGi
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> Jsij
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> aLXN
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> kcGn
    java.lang.String A_RAI_ENTITY_PROPIGATE -> oEAG
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> uVqi
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> golD
    double MAX_EXPLOSION_MS -> OYFp
    boolean COMMANDOVERRIDES_TPS -> TErV
    int REACT_REMOTE_PORT -> mNyX
    boolean REACT_REMOTE_ENABLED -> DHFV
    int ENTITY_STACK_MAX_COUNT -> iurJ
    int POOL_MAXTHREADS -> MkrF
    long POOL_SYNC_NANOS -> wDEx
    boolean FASTLEAF_ENABLED -> eaVQ
    boolean FASTLEAF_ONDECAY -> NMRo
    boolean FASTLEAF_INSTANT -> LiPQ
    int FASTLEAF_DECAYPERIOD -> lehw
    boolean COMMANDOVERRIDES_MEMORY -> wKvL
    boolean ENTITYSTACK_ENABLED -> Lyrj
    int ENTITYSTACK_MINIMUM_GROUP -> XlUI
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> Qoot
    int ENTITYSTACK_MAXIMUM_HEALTH -> ryAY
    boolean GLASS_SHOW_BLOCKS -> wvmg
    boolean GLASS_SHOW_PARTICLES -> bqbO
    react.glang.GList ALLOW_CULL -> XuFc
    react.glang.GList ALLOW_PURGE -> AysD
    react.glang.GList ALLOW_STACKING -> qRwx
    react.glang.GList CULL_RULES -> xhoN
    double RAI_TPS_HIGH_TICK -> Sdub
    long RAI_REDSTONE_TIME_FLOOR -> rNLY
    long RAI_REDSTONE_TIME_CEIL -> SKce
    long RAI_REDSTONE_TIME_MUDDING -> LiRn
    double RAI_REDSTONE_TIME_FUNCTION -> WWod
    double RAI_REDSTONE_TIME_OVERBLEED -> brBe
    int RAI_REDSTONE_TIME_RADIUS -> VTld
    int RAI_REDSTONE_TIME_PROPIGATION -> flkU
    long RAI_HOPPER_TIME_FLOOR -> UcKF
    long RAI_HOPPER_TIME_CEIL -> YVDr
    long RAI_HOPPER_TIME_MUDDING -> pYFs
    double RAI_HOPPER_TIME_FUNCTION -> VDKI
    double RAI_HOPPER_TIME_OVERBLEED -> GYaV
    int RAI_HOPPER_TIME_RADIUS -> mrAU
    int RAI_HOPPER_TIME_PROPIGATION -> IEtf
    int RAI_ENTITY_CHUNK_MULTIPLIER -> haot
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> eXfT
    int RAI_ENTITY_CHUNK_RADIUS -> oMSR
    long RAI_FLUID_TIME_FLOOR -> EBYn
    long RAI_FLUID_TIME_CEIL -> eYHM
    long RAI_FLUID_TIME_MUDDING -> WrBX
    double RAI_FLUID_TIME_FUNCTION -> RPpQ
    double RAI_FLUID_TIME_OVERBLEED -> uVtB
    int RAI_FLUID_TIME_RADIUS -> SmfJ
    int RAI_FLUID_TIME_PROPIGATION -> PRyu
    double SMEAR_TICK_ENTITIES_MAX_TICK -> lfMA
    double SMEAR_TICK_TILES_MAX_TICK -> pYGG
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> GarV
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> NfiV
    double SMEAR_TICK_ENTITIES_AMOUNT -> XRcs
    double SMEAR_TICK_TILES_AMOUNT -> XuGw
    boolean SMEAR_TICK_ENTITIES_ENABLE -> GrvQ
    boolean SMEAR_TICK_TILES_ENABLE -> nuFv
    boolean HOPPER_OVERTICK_ENABLE -> Nwja
    boolean USE_WORLD_CONFIGS -> WFon
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> Qorc
    long RAI_CHUNK_TIME_CEIL -> WhsB
    long RAI_CHUNK_TIME_MUDDING -> mFnp
    double RAI_CHUNK_TIME_FUNCTION -> lCkl
    double RAI_CHUNK_TIME_OVERBLEED -> rNNp
    int RAI_CHUNK_TIME_RADIUS -> HTWT
    int RAI_CHUNK_TIME_PROPIGATION -> TOHx
    boolean RAI_CHUNK_TIME_PROPIGATE -> HCVH
    boolean RAI_FLUID_TIME_PROPIGATE -> dVFu
    boolean RAI_ENTITY_PROPIGATE -> Kepm
    boolean RAI_HOPPER_TIME_PROPIGATE -> uVvX
    boolean RAI_REDSTONE_TIME_PROPIGATE -> ksli
    boolean hrld -> NxKs
    boolean rns -> uhXs
    boolean rrl -> bPAg
    39:648:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    653:670:void doTrack(org.bukkit.plugin.Plugin) -> kHrj
    675:697:void onRead(org.bukkit.plugin.Plugin) -> hbMk
    701:731:void read(java.io.File,boolean) -> kHrj
    735:752:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> kHrj
    757:765:void closeWorldConfig(org.bukkit.World) -> hbMk
    770:883:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> kHrj
    888:925:react.surge.cluster.DataCluster defaultConfig(boolean) -> kHrj
    930:1009:react.glang.GList getDefaultEntitiesForStacking() -> kHrj
    1014:1033:react.glang.GList getDefaultEntitiesForCulling() -> hbMk
    1038:1075:react.glang.GList getDefaultEntitiesForRemoval() -> doSM
    1080:1109:react.glang.GList getDefaultCullRules() -> KUIg
react.Config$1 -> kHrj$1:
    java.io.File val$fConfig -> tBqr
    java.io.File val$fConfigExperimental -> BlWP
    org.bukkit.plugin.Plugin val$main -> Smhh
    1:656:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    661:665:void run() -> run
react.Config$2 -> kHrj$2:
    react.api.WorldConfig val$wc -> avqO
    org.bukkit.World val$w -> ivWx
    1:742:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    747:748:void run() -> run
react.Gate -> hbMk:
    react.glang.GMap defaultSettings -> ejKv
    react.glang.GSet refresh -> uFTy
    react.glang.GSet destroy -> wwOf
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> baAq
    42:44:void <clinit>() -> <clinit>
    40:40:void <init>() -> <init>
    48:138:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> kHrj
    144:175:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> kHrj
    180:180:int getChunkCountForView() -> TqFU
    185:185:int getMaxChunksForView() -> fmJA
    190:190:boolean hasFawe() -> IqFj
    195:216:void tickEntityNextTickListTick(org.bukkit.World) -> doSM
    220:224:void resetEntityMaxTick(org.bukkit.World) -> KUIg
    228:228:int getEntityTickMax(org.bukkit.World) -> TqFU
    233:233:int getTileTickMax(org.bukkit.World) -> fmJA
    238:256:void tweakEntityTickMax(org.bukkit.World,int) -> kHrj
    260:277:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> kHrj
    282:286:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> kHrj
    290:302:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> kHrj
    307:311:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> hbMk
    315:333:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> kHrj
    337:341:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> IqFj
    346:349:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> kHrj
    354:357:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> hbMk
    362:362:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> doSM
    367:367:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> KUIg
    372:372:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> TqFU
    377:377:boolean isBadForUnloading() -> Ahlu
    382:382:boolean canUnload(org.bukkit.World,int,int) -> kHrj
    389:405:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    411:422:void unloadChunk(org.bukkit.World,int,int) -> hbMk
    426:442:void removeEntity(org.bukkit.entity.Entity) -> kHrj
    446:462:void purgeEntity(org.bukkit.entity.Entity) -> hbMk
    466:482:void cullEntity(org.bukkit.entity.Entity) -> doSM
    487:504:void updateBlock(org.bukkit.block.Block) -> kHrj
    508:512:java.lang.String header(java.lang.String,react.surge.util.C) -> kHrj
    517:517:java.lang.String header(react.surge.util.C) -> kHrj
    523:527:void updateFluid(org.bukkit.block.Block) -> hbMk
    531:532:void refresh(org.bukkit.Chunk) -> hbMk
    537:556:void refreshChunks() -> hbMS
    560:561:void sendBlockChange(org.bukkit.Location) -> kHrj
    40:40:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> imaA
react.Gate$1 -> hbMk$1:
    react.api.SelectorPosition val$sel -> QpRW
    react.glang.Callback val$prog -> yRbD
    react.glang.Callback val$cb -> ryAk
    1:48:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    53:136:void run() -> run
react.Gate$1$1 -> hbMk$1$1:
    react.Gate$1 this$1 -> jhXx
    java.lang.Object val$o -> LqdS
    java.lang.reflect.Constructor val$vectorConstruct -> BdGr
    java.lang.reflect.Constructor val$cuboidConstruct -> uEsh
    java.lang.reflect.Method val$faweFixMethod -> qmLq
    java.lang.Integer[] val$total -> tSrU
    java.lang.Integer[] val$sof -> aoAK
    react.glang.Callback val$prog -> yRbD
    java.lang.Integer val$tot -> gopN
    1:80:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    87:105:void run() -> run
react.Gate$1$2 -> hbMk$1$2:
    react.Gate$1 this$1 -> jhXx
    react.glang.Callback val$prog -> yRbD
    react.glang.Callback val$cb -> ryAk
    java.lang.Integer[] val$total -> tSrU
    1:109:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    116:124:void run() -> run
react.Gate$2 -> hbMk$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> xiQO
    290:290:void <clinit>() -> <clinit>
react.Info -> doSM:
    java.lang.String CORE_REACT_DOT -> NDek
    java.lang.String CORE_NAME -> oLsd
    java.lang.String CORE_CACHE -> ccgU
    java.lang.String WORLD_CONFIGS -> ancB
    java.lang.String CORE_DOTYML -> ghDV
    java.lang.String COMMAND_REACT -> MIvF
    java.lang.String COMMAND_RAI -> bWsC
    java.lang.String COMMAND_ACT_DESCRIPTION -> PvDK
    java.lang.String COMMAND_ACT -> SBus
    java.lang.String COMMAND_ACT_ALIAS_1 -> qeAF
    java.lang.String COMMAND_ACT_ALIAS_2 -> woCD
    java.lang.String COMMAND_ACT_USAGE -> LFrd
    java.lang.String COMMAND_HELP_DESCRIPTION -> lvsF
    java.lang.String COMMAND_HELP -> ghDE
    java.lang.String COMMAND_HELP_ALIAS_1 -> xXRU
    java.lang.String COMMAND_HELP_ALIAS_2 -> iuyS
    java.lang.String COMMAND_HELP_USAGE -> vtPA
    java.lang.String COMMAND_STATUS_DESCRIPTION -> wDMn
    java.lang.String COMMAND_STATUS -> wDMm
    java.lang.String COMMAND_STATUS_ALIAS_1 -> Dioh
    java.lang.String COMMAND_STATUS_ALIAS_2 -> mPCM
    java.lang.String COMMAND_STATUS_USAGE -> fKMW
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> iCUL
    java.lang.String COMMAND_CPUSCORE -> cRdb
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> Bkyk
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> jNgw
    java.lang.String COMMAND_CPUSCORE_USAGE -> UALA
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> pYLB
    java.lang.String COMMAND_RELOAD -> yIqt
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> iTWI
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> MSFi
    java.lang.String COMMAND_RELOAD_USAGE -> HCVg
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> rxba
    java.lang.String COMMAND_MONITOR -> LrFv
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> vAJD
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> NMYM
    java.lang.String COMMAND_MONITOR_USAGE -> sPqV
    java.lang.String COMMAND_VERSION_DESCRIPTION -> bhtA
    java.lang.String COMMAND_VERSION -> nkud
    java.lang.String COMMAND_VERSION_ALIAS_1 -> FpWm
    java.lang.String COMMAND_VERSION_ALIAS_2 -> FpXR
    java.lang.String COMMAND_VERSION_USAGE -> dEJQ
    java.lang.String COMMAND_MAP_DESCRIPTION -> eGkq
    java.lang.String COMMAND_MAP -> WOeP
    java.lang.String COMMAND_MAP_ALIAS_1 -> CUlM
    java.lang.String COMMAND_MAP_ALIAS_2 -> aDPm
    java.lang.String COMMAND_MAP_USAGE -> cIvP
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> XuKt
    java.lang.String COMMAND_TOPCHUNK -> OjQj
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> LiYR
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> LiXq
    java.lang.String COMMAND_TOPCHUNK_USAGE -> QNTl
    java.lang.String COMMAND_GLASS_DESCRIPTION -> oUjO
    java.lang.String COMMAND_GLASS -> wMAY
    java.lang.String COMMAND_GLASS_ALIAS_1 -> MBIQ
    java.lang.String COMMAND_GLASS_ALIAS_2 -> EvGN
    java.lang.String COMMAND_GLASS_USAGE -> JcRw
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> qmRa
    java.lang.String COMMAND_CBLAME -> XcjU
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> GYft
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> XciI
    java.lang.String COMMAND_CBLAME_USAGE -> BdLg
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> YLyT
    java.lang.String COMMAND_ACTIONLOG -> ofjo
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> qvBy
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> YEJA
    java.lang.String COMMAND_ACTIONLOG_USAGE -> feBF
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> LhwC
    java.lang.String COMMAND_CAPABILITIES -> tnJk
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> imjF
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> Usqn
    java.lang.String COMMAND_CAPABILITIES_USAGE -> gWCY
    java.lang.String MSG_PERMISSION -> YDiT
    java.lang.String MSG_MONITORING_STARTED -> YDlI
    java.lang.String MSG_MONITORING_STOPPED -> MuON
    java.lang.String MSG_ACTIONLOGGING_STARTED -> HwAV
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> BdMc
    java.lang.String MSG_GLASS_STARTED -> rMsj
    java.lang.String MSG_GLASS_STOPPED -> vsrq
    org.bukkit.Color COLOR_HOPPER -> tLKQ
    org.bukkit.Color COLOR_BLOCK_UPDATE -> gWGV
    org.bukkit.Color COLOR_BLOCK_FROMTO -> OsDu
    org.bukkit.Color COLOR_BLOCK_BURN -> KLdu
    org.bukkit.Color COLOR_BLOCK_DECAY -> OsEW
    org.bukkit.Color COLOR_BLOCK_FORM -> nckC
    java.lang.String NAME_TICK -> eaaU
    java.lang.String NAME_MEMORY -> gEcS
    java.lang.String NAME_CHUNKS -> lDRJ
    java.lang.String NAME_ENTITIES -> Yfmn
    java.lang.String STATE_MONITORING_TAB -> HKjk
    java.lang.String STATE_MONITORING_ENABLED -> lMBv
    java.lang.String STATE_MONITORING_HIGH -> bPGC
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> BdOC
    java.lang.String STATE_MAPPING_ENABLED -> iBwx
    java.lang.String STATE_SOUND_PLAYS -> HmnX
    java.lang.String STATE_MONITORING_POSTED -> govl
    java.lang.String STATE_MONITORING_LASTTAB -> WFuM
    java.lang.String STATE_GLASSES_ENABLED -> KLct
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> fBaA
    java.lang.String STATE_PLAYER_HOTBAR -> gNSo
    java.lang.String STATE_PLAYER_SHIFT -> tCXJ
    java.lang.String STATE_PLAYER_SCROLL -> hQVs
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> TybN
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> MSKc
    java.lang.String PERM_ACCESS -> praN
    java.lang.String PERM_MONITOR -> Jbrx
    java.lang.String PERM_MONITOR_TITLE -> OGoO
    java.lang.String PERM_MONITOR_ACTIONLOG -> qKPa
    java.lang.String PERM_MONITOR_MAP -> Fxiu
    java.lang.String PERM_MONITOR_ENVIRONMENT -> vIad
    java.lang.String PERM_MONITOR_GLASSES -> dxSN
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> doad
    java.lang.String PERM_ACT -> RkNV
    java.lang.String PERM_RAI -> Cwsg
    java.lang.String PERM_RAI_CONTROL -> UARx
    java.lang.String PERM_RAI_ACCESS -> vssw
    java.lang.String PERM_RAI_MONITOR -> maKB
    java.lang.String PERM_RELOAD -> qlvH
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> loIP
    java.lang.String SAMPLER_REDSTONE_TICK -> bGYJ
    java.lang.String SAMPLER_ENTITY_TIME -> RYlb
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> JQuJ
    java.lang.String SAMPLER_TILE_TIME_LOCK -> GkPJ
    java.lang.String SAMPLER_TILE_TIME -> INoo
    java.lang.String SAMPLER_TILE_DROPTICK -> rEdn
    java.lang.String SAMPLER_ENTITY_DROPTICK -> IqSs
    java.lang.String SAMPLER_REDSTONE_SECOND -> QEgB
    java.lang.String SAMPLER_REDSTONE_TIME -> xWwS
    java.lang.String SAMPLER_PHYSICS_TIME -> ECET
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> iKkh
    java.lang.String SAMPLER_HOPPER_TICK -> gWGX
    java.lang.String SAMPLER_HOPPER_SECOND -> nAgv
    java.lang.String SAMPLER_HOPPER_TIME -> inNi
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> FVhm
    java.lang.String SAMPLER_FLUID_TICK -> dENH
    java.lang.String SAMPLER_FLUID_SECOND -> PmXN
    java.lang.String SAMPLER_FLUID_TIME -> IqUA
    java.lang.String SAMPLER_TPS -> OitX
    java.lang.String SAMPLER_TICK -> EKUj
    java.lang.String SAMPLER_TIU -> CocS
    java.lang.String SAMPLER_MEM -> UQro
    java.lang.String SAMPLER_FREEMEM -> cSOM
    java.lang.String SAMPLER_MAXMEM -> imrB
    java.lang.String SAMPLER_ALLOCMEM -> uXBr
    java.lang.String SAMPLER_MAHS -> uWar
    java.lang.String SAMPLER_CHK -> iwDM
    java.lang.String SAMPLER_ATASK -> fJuY
    java.lang.String SAMPLER_STASK -> dEPU
    java.lang.String SAMPLER_CHK_TIME -> JIfU
    java.lang.String SAMPLER_EXPLOSION_TIME -> klHf
    java.lang.String SAMPLER_CHKS -> TWdX
    java.lang.String SAMPLER_ENT -> RkQL
    java.lang.String SAMPLER_ENTLIV -> quhj
    java.lang.String SAMPLER_ENTDROP -> yAjq
    java.lang.String SAMPLER_ENTTILE -> loJr
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> CofS
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> XdPw
    java.lang.String ACTION_CULL_ENTITIES_NAME -> eYUV
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> JRXI
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> OXuj
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> WPLg
    java.lang.String ACTION_UPDATE_FLUID_NAME -> mFxk
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> DYXA
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> GINj
    java.lang.String ACTION_LOCK_FLUID_STATUS -> eXrn
    java.lang.String ACTION_LOCK_FLUID_NAME -> aLgI
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> fBdV
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> ebEU
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> dEOY
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> VoLA
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> vbsx
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> nAjr
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> yBJv
    java.lang.String ACTION_LOCK_HOPPER_NAME -> fKTp
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> IFap
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> Yfqi
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> hHjK
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> lDUc
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> kQrq
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> nRkl
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> VLhQ
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> Lqne
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> TXFh
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> pivs
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> maNj
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> uhee
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> SKpy
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> fulU
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> mrPe
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> pYWL
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> sjow
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> PBiE
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> dftU
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> rxnc
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> FWON
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> MJaY
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> NDrr
    java.lang.String ACTION_FIX_LIGHTING_NAME -> Drjo
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> iUAw
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> BSQi
    java.lang.String ACTION_COLLECT_GARBAGE -> YESe
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> Lqqh
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> pHUK
    6:6:void <init>() -> <init>
    8:241:void <clinit>() -> <clinit>
react.Lang -> KUIg:
    java.lang.String BUNDLE_NAME -> SKqu
    java.util.ResourceBundle RESOURCE_BUNDLE -> TNtr
    java.util.ResourceBundle PRIMARY_BUNDLE -> teaf
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> TqFU:
    react.React instance -> oDoo
    react.controller.SampleController sampleController -> vlHc
    react.controller.PlayerController playerController -> QyOg
    react.controller.MonitorController monitorController -> dfrw
    react.controller.CommandController commandController -> pivY
    react.controller.ActionController actionController -> KnmT
    react.controller.FastDecayController fastDecayController -> feJN
    react.controller.EntityStackController entityStackController -> OPeo
    react.controller.GlassController glassController -> PJxT
    react.controller.EntityCullController entityCullController -> rxll
    react.controller.SpikeController spikeController -> EvMq
    react.controller.SecurityController securityController -> VoNT
    react.controller.RedstoneController redstoneController -> Hmti
    react.controller.HopperController hopperController -> nBNE
    react.controller.PhysicsController physicsController -> LaOw
    react.controller.TickTimeController tickTimeController -> Fxox
    react.controller.RAIController raiController -> xFxs
    react.controller.FluidController fluidController -> aMJQ
    react.controller.ChunkController chunkController -> maNF
    react.controller.GraphController graphController -> oxUW
    react.controller.ChronophyFluidController fluidChronophyController -> dEUB
    react.controller.EventController eventController -> pXxD
    react.controller.BlockInjectController blockInjectController -> vlLI
    react.controller.SmearTickController smearTickController -> xqqV
    react.controller.FeatureController featureController -> Ywxf
    react.controller.HopperOvertickController hopperPlungeController -> HDER
    react.controller.BenchmarkController benchmarkController -> UklY
    react.controller.LanguageController languageController -> ryQc
    react.controller.RemoteController remoteController -> qumc
    react.controller.ExplosiveController explosiveController -> pHVd
    react.controller.WorldController worldController -> tDAw
    44:44:void <init>() -> <init>
    142:150:void enable() -> enable
    156:156:void disable() -> disable
react.React$1 -> TqFU$1:
    react.React this$0 -> bqsA
    143:143:void <init>(react.React) -> <init>
    147:148:void run() -> run
react.action.ActionCollectGarbage -> fmJA:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
react.action.ActionCollectGarbage$1 -> fmJA$1:
    react.action.source.IActionSource val$source -> ETNU
    react.action.ActionCollectGarbage this$0 -> RsfC
    30:30:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> fmJA$1$1:
    long val$mbnex -> INwk
    long val$mbmem -> gyRK
    react.action.ActionCollectGarbage$1 this$1 -> rVmT
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> IqFj:
    long ms -> nBOo
    int lcd -> jpxJ
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
    25:25:long access$002(react.action.ActionCullEntities,long) -> kHrj
    25:25:int access$100(react.action.ActionCullEntities) -> kHrj
    25:25:long access$000(react.action.ActionCullEntities) -> hbMk
react.action.ActionCullEntities$1 -> IqFj$1:
    react.action.ActionCullEntities this$0 -> pPgD
    37:37:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> GrqA
    37:37:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> IqFj$2:
    react.action.ActionCullEntities this$0 -> pPgD
    49:49:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> GrqA
    49:49:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> IqFj$3:
    react.glang.FinalInteger val$completed -> EBiw
    react.glang.FinalInteger val$total -> DsLi
    react.glang.FinalInteger val$totalCulled -> eixW
    react.glang.FinalInteger val$totalChunked -> ogVX
    react.action.source.IActionSource val$source -> ETNU
    react.action.ActionCullEntities this$0 -> pPgD
    105:105:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> IqFj$4:
    react.action.source.IActionSource val$source -> ETNU
    react.glang.FinalInteger val$totalCulled -> eixW
    react.glang.FinalInteger val$totalChunked -> ogVX
    react.action.ActionCullEntities this$0 -> pPgD
    137:137:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> Ahlu:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
react.action.ActionFixLighting$1 -> Ahlu$1:
    react.action.ActionFixLighting this$0 -> RRBX
    29:29:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> GrqA
    29:29:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> Ahlu$2:
    react.action.source.IActionSource val$source -> ETNU
    int val$ch -> WjCI
    react.action.ActionFixLighting this$0 -> RRBX
    78:78:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> kHrj
    78:78:void run(java.lang.Object) -> kHrj
react.action.ActionFixLighting$3 -> Ahlu$3:
    react.action.ActionFixLighting this$0 -> RRBX
    89:89:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> kHrj
    89:89:void run(java.lang.Object) -> kHrj
react.action.ActionLockFluid -> hbMS:
    int lcd -> jpxJ
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
react.action.ActionLockFluid$1 -> hbMS$1:
    react.action.ActionLockFluid this$0 -> xaNn
    31:31:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> GrqA
    31:31:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> hbMS$2:
    react.action.ActionLockFluid this$0 -> xaNn
    43:43:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> GrqA
    43:43:java.lang.Object get() -> get
react.action.ActionLockHopper -> imaA:
    int lcd -> jpxJ
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
react.action.ActionLockHopper$1 -> imaA$1:
    react.action.ActionLockHopper this$0 -> BcvB
    31:31:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> GrqA
    31:31:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> imaA$2:
    react.action.ActionLockHopper this$0 -> BcvB
    43:43:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> GrqA
    43:43:java.lang.Object get() -> get
react.action.ActionLockRedstone -> GrqA:
    int lcd -> jpxJ
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
react.action.ActionLockRedstone$1 -> GrqA$1:
    react.action.ActionLockRedstone this$0 -> ESlV
    31:31:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> GrqA
    31:31:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> GrqA$2:
    react.action.ActionLockRedstone this$0 -> ESlV
    43:43:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> GrqA
    43:43:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> Jjwq:
    long ms -> nBOo
    int lcd -> jpxJ
    boolean fail -> Yfuy
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> hbMk
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> kHrj
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> kHrj
    23:23:int access$200(react.action.ActionPurgeChunks) -> hbMk
    23:23:long access$100(react.action.ActionPurgeChunks) -> doSM
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> kHrj
react.action.ActionPurgeChunks$1 -> Jjwq$1:
    react.action.ActionPurgeChunks this$0 -> RjsU
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> GrqA
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> Jjwq$2:
    int val$dk -> iDBU
    java.lang.Object val$j -> HLWS
    react.glang.FinalInteger val$acompleted -> RYtN
    react.glang.FinalInteger val$completed -> EBiw
    react.glang.FinalInteger val$total -> DsLi
    react.glang.FinalInteger val$totalCulled -> eixW
    react.glang.FinalInteger val$totalChunked -> ogVX
    react.action.source.IActionSource val$source -> ETNU
    react.api.ISelector[] val$selectors -> xaQx
    react.action.ActionPurgeChunks this$0 -> RjsU
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> Jjwq$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> wMNV
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> Jjwq$3:
    react.action.source.IActionSource val$source -> ETNU
    react.glang.FinalInteger val$acompleted -> RYtN
    react.action.ActionPurgeChunks this$0 -> RjsU
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> Jjwq$4:
    org.bukkit.Chunk val$chunk -> skUY
    java.lang.Runnable val$cb -> MJdu
    react.action.ActionPurgeChunks this$0 -> RjsU
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> NoTr:
    long ms -> nBOo
    int lcd -> jpxJ
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> hbMk
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> kHrj
    27:27:int access$100(react.action.ActionPurgeEntities) -> kHrj
    27:27:long access$000(react.action.ActionPurgeEntities) -> hbMk
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> kHrj
react.action.ActionPurgeEntities$1 -> NoTr$1:
    react.action.ActionPurgeEntities this$0 -> HfIs
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> GrqA
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> NoTr$2:
    react.action.ActionPurgeEntities this$0 -> HfIs
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> GrqA
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> NoTr$3:
    react.glang.FinalInteger val$completed -> EBiw
    react.glang.FinalInteger val$total -> DsLi
    react.glang.FinalInteger val$totalCulled -> eixW
    react.glang.FinalInteger val$totalChunked -> ogVX
    react.action.source.IActionSource val$source -> ETNU
    react.action.ActionPurgeEntities this$0 -> HfIs
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> NoTr$4:
    react.action.source.IActionSource val$source -> ETNU
    react.glang.FinalInteger val$totalCulled -> eixW
    react.glang.FinalInteger val$totalChunked -> ogVX
    react.action.ActionPurgeEntities this$0 -> HfIs
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> NoTr$5:
    org.bukkit.entity.Entity val$i -> ySSo
    react.glang.FinalInteger val$cu -> BtxS
    int val$k -> PBlw
    org.bukkit.Chunk val$chunk -> skUY
    java.lang.Runnable val$cb -> MJdu
    react.action.ActionPurgeEntities this$0 -> HfIs
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> TNcE:
    int lcd -> jpxJ
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
react.action.ActionUnlockFluid$1 -> TNcE$1:
    react.action.ActionUnlockFluid this$0 -> lLmU
    30:30:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> GrqA
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> jWRR:
    int lcd -> jpxJ
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
react.action.ActionUnlockHopper$1 -> jWRR$1:
    react.action.ActionUnlockHopper this$0 -> xYAm
    30:30:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> GrqA
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> KLXv:
    int lcd -> jpxJ
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
react.action.ActionUnlockRedstone$1 -> KLXv$1:
    react.action.ActionUnlockRedstone this$0 -> SDGS
    30:30:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> GrqA
    30:30:java.lang.Object get() -> get
react.action.source.AccessActionSource -> teOi:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> kHrj
    26:33:void sendResponseSuccess(java.lang.String) -> hbMk
    38:45:void sendResponseError(java.lang.String) -> doSM
    50:57:void sendResponseActing(java.lang.String) -> KUIg
react.action.source.ActionHandle -> Whlr:
    react.action.source.ActionHandle AUTOMATIC -> jXIi
    react.action.source.ActionHandle MANUAL -> bPQQ
    react.action.source.ActionHandle MUTEX -> MuWr
    react.action.source.ActionHandle[] $VALUES -> Dakv
    3:3:react.action.source.ActionHandle[] values() -> values
    3:3:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.action.source.ConsoleActionSource -> YoSr:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> kHrj
    18:19:void sendResponseSuccess(java.lang.String) -> hbMk
    24:25:void sendResponseError(java.lang.String) -> doSM
    30:31:void sendResponseActing(java.lang.String) -> KUIg
react.action.source.IActionSource -> UkVj:
    void sendResponse(java.lang.String) -> kHrj
    void sendResponseSuccess(java.lang.String) -> hbMk
    void sendResponseError(java.lang.String) -> doSM
    void sendResponseActing(java.lang.String) -> KUIg
react.action.source.PlayerActionSource -> Dquj:
    org.bukkit.entity.Player p -> anpF
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> kHrj
    30:31:void sendResponseSuccess(java.lang.String) -> hbMk
    36:37:void sendResponseError(java.lang.String) -> doSM
    42:43:void sendResponseActing(java.lang.String) -> KUIg
react.action.source.RAIActionSource -> OPSR:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> kHrj
    16:17:void sendResponseSuccess(java.lang.String) -> hbMk
    22:23:void sendResponseError(java.lang.String) -> doSM
    28:29:void sendResponseActing(java.lang.String) -> KUIg
react.api.Action -> CUcK:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> fBjO
    java.lang.String[] nodes -> WjEO
    react.action.source.ActionHandle handle -> qJym
    react.api.ActionState state -> NNHg
    react.api.ActionTargetType target -> cdUf
    react.api.ActionType type -> Wicg
    react.action.source.IActionSource currentSource -> FEqt
    double progress -> wnqn
    react.glang.GMap defaultSelectors -> RtIh
    28:29:void <init>(react.api.ActionType) -> <init>
    31:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> kHrj
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> kHrj
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> Jjwq
    94:94:react.api.ActionState getState() -> NoTr
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> TqFU
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> TNcE
    130:130:react.api.ActionType getType() -> jWRR
    136:136:react.glang.GMap getDefaultSelectors() -> KLXv
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> hbMk
    189:190:void completeAction() -> teOi
    195:195:react.action.source.IActionSource getCurrentSource() -> Whlr
    201:201:java.lang.String[] getNodes() -> YoSr
    207:208:void setNodes(java.lang.String[]) -> kHrj
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
react.api.ActionAlreadyRunningException -> VKun:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> legb:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> rVXF:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> jOAU:
    react.api.ActionState IDLE -> XKGb
    react.api.ActionState RUNNING -> FODc
    react.api.ActionState[] $VALUES -> XdXp
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> ktFw:
    react.api.ActionTargetType POSITIONAL -> kknq
    react.api.ActionTargetType SYSTEM -> JdAx
    react.api.ActionTargetType[] $VALUES -> Iyou
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> aegc:
    react.api.ActionType FIX_LIGHTING -> sABw
    react.api.ActionType UNLOCK_FLUID -> PTRJ
    react.api.ActionType LOCK_FLUID -> eamg
    react.api.ActionType UNLOCK_HOPPER -> TiNu
    react.api.ActionType LOCK_HOPPER -> jOYd
    react.api.ActionType UNLOCK_REDSTONE -> SKwC
    react.api.ActionType LOCK_REDSTONE -> gxsx
    react.api.ActionType CULL_ENTITIES -> iehb
    react.api.ActionType COLLECT_GARBAGE -> bXcW
    react.api.ActionType PURGE_ENTITIES -> htHR
    react.api.ActionType PURGE_CHUNKS -> bOqk
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> qJym
    react.api.ActionTargetType target -> cdUf
    react.api.ActionType[] $VALUES -> sHrX
    6:6:react.api.ActionType[] values() -> values
    6:6:react.api.ActionType valueOf(java.lang.String) -> valueOf
    26:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> UkVj
    50:50:react.api.ActionTargetType getTarget() -> TNcE
    6:18:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> oxBt:
    react.api.ActivationRangeType ANIMALS -> yuWr
    react.api.ActivationRangeType MONSTERS -> mHBd
    react.api.ActivationRangeType MISC -> GQfL
    react.api.ActivationRangeType[] $VALUES -> FguI
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> mWiA:
    int value() -> value
react.api.Async -> fcvX:
react.api.CPUBenchmark -> JHsf:
    org.bukkit.command.CommandSender sender -> sender
    int score -> LOtH
    java.lang.Runnable onFinish -> ermt
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> Dquj
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> kHrj
    10:10:int access$100(react.api.CPUBenchmark) -> hbMk
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> doSM
react.api.CPUBenchmark$1 -> JHsf$1:
    react.api.CPUBenchmark this$0 -> WYEV
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> JHsf$2:
    react.api.CPUBenchmark this$0 -> WYEV
    78:78:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> mWiF:
    react.api.CPUResult ULTRA_SLOW -> WjFi
    react.api.CPUResult VERY_SLOW -> bOrW
    react.api.CPUResult SLOW -> iwMp
    react.api.CPUResult AVERAGE -> JlTU
    react.api.CPUResult GOOD -> mrYF
    react.api.CPUResult FAST -> xGdI
    react.api.CPUResult VERY_FAST -> Fxxj
    react.api.CPUResult ULTRA_FAST -> WXfr
    java.lang.String m -> GcKU
    react.api.CPUResult[] $VALUES -> USBR
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> kHrj
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> lDER:
    react.glang.GMap cache -> TiPh
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> hbMk
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> doSM
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> OPSR
    54:54:boolean has(java.lang.Object) -> KUIg
react.api.Capability -> mhiy:
    react.api.Capability DUAL_WEILD -> YNMU
    react.api.Capability SCOREBOARD -> Jcca
    react.api.Capability SCOREBOARD_ADVANCED -> qTPm
    react.api.Capability HOPPER -> DIAU
    react.api.Capability ENTITY_ATTRIBUTES -> APVn
    react.api.Capability ENTITY_AI -> LjKK
    react.api.Capability ACTION_BAR -> OkDG
    react.api.Capability ENTITY_NAMES -> EduS
    react.api.Capability TITLE_BAR -> tUJR
    react.api.Capability CHUNK_RELIGHTING -> fCPc
    react.api.Capability MONITOR_SUBMISSIVENESS -> LqxW
    react.api.Capability ACCELERATED_PING -> MSXw
    react.api.Capability ENTITY_THROTTLING -> dpMo
    react.api.Capability TILE_THROTTLING -> bOst
    react.api.Capability PASSENGERS -> bYFX
    react.glang.GList capabilities -> xrVy
    react.surge.util.Protocol version -> fvTY
    react.api.Flavor flavor -> GQgd
    java.lang.String plugin -> QOEG
    java.lang.String name -> name
    56:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> CUcK
    100:100:boolean isFlavorCapable() -> VKun
    105:105:boolean isVersionCapable() -> legb
    110:110:boolean isCapable() -> rVXF
    115:115:react.surge.util.Protocol getVersion() -> jOAU
    120:120:react.api.Flavor getFlavor() -> ktFw
    125:125:java.lang.String getPlugin() -> aegc
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> kHrj
    153:167:void sendNotCapable(react.action.source.IActionSource) -> kHrj
    14:48:void <clinit>() -> <clinit>
react.api.CapabilityBasis -> Ipdv:
    react.api.CapabilityBasis VERSION -> eanY
    react.api.CapabilityBasis FLAVOR -> Mcyp
    react.api.CapabilityBasis PLUGIN -> awdq
    react.api.CapabilityBasis[] $VALUES -> EKbK
    3:3:react.api.CapabilityBasis[] values() -> values
    3:3:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ChunkIssue -> CoUE:
    react.api.ChunkIssue ENTITY -> Drqr
    react.api.ChunkIssue HOPPER -> nRus
    react.api.ChunkIssue TNT -> Eutt
    react.api.ChunkIssue REDSTONE -> GIWj
    react.api.ChunkIssue FLUID -> Hvmv
    react.api.ChunkIssue PHYSICS -> wwcr
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> mjFx
    react.api.ChunkIssue[] ENUM$VALUES -> hYup
    3:10:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    14:32:double getMS() -> oxBt
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> mWiA
react.api.Clip -> sbKe:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> kkUc:
    org.bukkit.command.CommandSender sender -> sender
    13:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> kHrj
    31:32:void sendResponseSuccess(java.lang.String) -> hbMk
    37:38:void sendResponseError(java.lang.String) -> doSM
    43:44:void sendResponseActing(java.lang.String) -> KUIg
react.api.CullList -> DXdn:
    react.glang.GSet toCull -> qdpf
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> KUIg
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> fcvX
react.api.DTest -> GQMa:
    6:6:void <init>() -> <init>
    11:62:int test() -> JHsf
react.api.EntityFlag -> ArAo:
    react.api.EntityFlag NAMED -> DYaJ
    react.api.EntityFlag TAMED -> IrBV
    react.api.EntityFlag STACKED -> oyAk
    react.api.EntityFlag RIDDEN -> KwjA
    react.api.EntityFlag LEASHED -> PBrf
    java.lang.String m -> GcKU
    react.api.EntityFlag[] $VALUES -> NoqQ
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> TqFU
    40:70:boolean is(org.bukkit.entity.Entity) -> fmJA
    76:76:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> iBoG:
    react.glang.GSet entityTypes -> rNeY
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> mWiF
react.api.EntitySample -> kkXi:
    react.glang.GMap counts -> JIqv
    react.glang.GMap sets -> WikH
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> lDER
    45:45:react.glang.GList getTypes() -> mhiy
    50:57:int total() -> Ipdv
    62:67:int get(org.bukkit.entity.EntityType) -> kHrj
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> hbMk
    84:96:void add(org.bukkit.entity.Entity) -> KUIg
react.api.Experimental -> jFRk:
react.api.Flavor -> dLpr:
    react.api.Flavor ANY -> ghXo
    react.api.Flavor SAFE_MODE -> KUfd
    react.api.Flavor CRAFT_BUKKIT -> OkDq
    react.api.Flavor BUKKIT -> JIsC
    react.api.Flavor SPIGOT -> ktdb
    react.api.Flavor SOGGY_SPIGOT -> ylkf
    react.api.Flavor PAPER_SPIGOT -> KDfB
    react.api.Flavor TACO_SPIGOT -> DHbX
    react.api.Flavor TORCH_SPIGOT -> TaBo
    react.api.Flavor FORGE_HACK -> hQiM
    react.api.Flavor SPONGE_HACK -> aMSt
    react.api.Flavor[] $VALUES -> fvVX
    6:6:react.api.Flavor[] values() -> values
    6:6:react.api.Flavor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> CoUE
    74:79:boolean compatableWith(react.api.Flavor) -> kHrj
    84:84:java.lang.String fancyName() -> sbKe
    6:18:void <clinit>() -> <clinit>
react.api.IAction -> BuEM:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> Jjwq
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> hbMk
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
    react.api.ActionState getState() -> NoTr
    react.api.ActionTargetType getTarget() -> TNcE
    void setNodes(java.lang.String[]) -> kHrj
    java.lang.String[] getNodes() -> YoSr
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> TqFU
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> jWRR
    react.glang.GMap getDefaultSelectors() -> KLXv
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> kHrj
    react.api.ISelector[] biselect(react.api.ISelector[]) -> kHrj
    react.action.source.IActionSource getCurrentSource() -> Whlr
    void completeAction() -> teOi
react.api.ICache -> kQfW:
    react.glang.GSet get(java.lang.Object) -> hbMk
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> doSM
    void clear() -> clear
    boolean has(java.lang.Object) -> KUIg
    react.glang.GList k() -> OPSR
react.api.ICommand -> lfLF:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> kkUc
    java.lang.String[] getPermissions() -> DXdn
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> fmJA
    react.api.SideGate getSideGate() -> GQMa
    void registerParameterDescription(java.lang.String,java.lang.String) -> kHrj
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
react.api.IRecord -> Oigp:
    java.lang.String getRecordType() -> ArAo
    long getRecordTime() -> iBoG
    react.json.JSONObject toJSON() -> kkXi
    java.lang.Object getRecordObject() -> jFRk
    void fromJSON(react.json.JSONObject) -> kHrj
react.api.IRecordBook -> vkXa:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> kHrj
    long getOldestRecordTime() -> dLpr
    void addRecord(react.api.IRecord) -> kHrj
    long getLatestRecordTime() -> BuEM
    int countRecords(long,long) -> kHrj
    react.glang.GMap getRecords(long,long) -> hbMk
    int purgeRecordsBefore(long) -> hbMk
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> OHEx:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> kQfW
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> lfLF
    react.surge.util.C getAltColor() -> Oigp
    void setColor(react.surge.util.C,react.surge.util.C) -> kHrj
    int getInterval() -> getInterval
    void setInterval(int) -> hbMk
    void sample() -> vkXa
    java.lang.String get() -> get
    void construct() -> OHEx
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> jOCa:
    react.api.SelectionMode getMode() -> jOCa
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> TqFU
    react.glang.GSet getList() -> myoD
    react.glang.GSet getPossibilities() -> Gapo
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> fmJA
    java.lang.String getName() -> getName
react.api.Injection -> myoD:
    react.api.InjectionMethod value() -> YMSO
react.api.InjectionMethod -> Gapo:
    react.api.InjectionMethod SWAP -> bPVv
    react.api.InjectionMethod SUBSTRATE -> HenW
    react.api.InjectionMethod RELOAD -> NopO
    react.api.InjectionMethod[] $VALUES -> WOvm
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> YMSO:
    java.lang.String value() -> value
react.api.MSampler -> rMhv:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> rMhv
react.api.MonitorHeading -> SBpY:
    react.api.ISampler head -> ELEJ
    react.glang.GList children -> lnur
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> kHrj
    27:27:react.api.ISampler getHead() -> SBpY
    32:33:void setHead(react.api.ISampler) -> hbMk
    37:37:react.glang.GList getChildren() -> wwLT
    42:42:java.lang.String getHeadText() -> qRuk
    47:60:java.lang.String getChildText() -> CoVM
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> kHrj
react.api.NoiseGenerator -> wwLT:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> qRuk:
    react.api.NoiseGenerator[] octaves -> qmcl
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> WiOJ
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> CoVM:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> kdBi
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> Ujwp
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> WiOJ:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> kHrj
react.api.Permissable -> Ujwp:
    react.api.Permissable ACCESS -> gFUQ
    react.api.Permissable MONITOR -> xYFt
    react.api.Permissable MONITOR_TITLE -> IaCE
    react.api.Permissable MONITOR_ACTIONLOG -> DPqa
    react.api.Permissable MONITOR_MAP -> UlUS
    react.api.Permissable MONITOR_ENVIRONMENT -> ySYE
    react.api.Permissable MONITOR_GLASSES -> IGOm
    react.api.Permissable MONITOR_CHUNK_BLAME -> gxwu
    react.api.Permissable RAI_MONITOR -> OPsT
    react.api.Permissable RAI_CONTROL -> ohCG
    react.api.Permissable RAI_ACCESS -> psVQ
    react.api.Permissable RAI -> Tqds
    react.api.Permissable ACT -> HncL
    react.api.Permissable RELOAD -> CNPu
    java.lang.String node -> pPqU
    react.api.Permissable[] $VALUES -> HwTW
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    27:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> kHrj
    46:46:java.lang.String getNode() -> kcGi
    7:22:void <clinit>() -> <clinit>
react.api.PluginSelfDeleter -> kcGi:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> iDMS
    java.lang.Runnable r -> ervF
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> kHrj
react.api.ReactCommand -> Jsij:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> vtfV
    java.lang.String usage -> HCoQ
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> yAyV
    react.api.SideGate sideGate -> kktf
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> fmJA
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> kHrj
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> kkUc
    47:47:java.lang.String[] getPermissions() -> DXdn
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> GQMa
react.api.ReactException -> aLXN:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> kcGn:
    react.glang.GMap keystore -> UJSe
    boolean monitoring -> monitoring
    boolean highMonitor -> Vwip
    boolean actionlogging -> dMnT
    boolean glasses -> SwQs
    boolean mapping -> lVFl
    int monitorSelection -> ChCa
    int plays -> esUP
    boolean monitorPosted -> kIrK
    int monitorLastSelection -> QqKk
    int switchNotification -> eHaF
    int hotbarSlot -> Yxbd
    boolean shift -> eQRJ
    int scroll -> xjJk
    double lastHeight -> sAHt
    boolean heightMovement -> YorA
    org.bukkit.entity.Player p -> anpF
    42:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> Jsij
    128:128:boolean isMapping() -> aLXN
    133:133:org.bukkit.entity.Player getP() -> kcGn
    138:140:void setMonitoring(boolean) -> hbMk
    144:146:void setMapping(boolean) -> doSM
    150:150:int getMonitorSelection() -> oEAG
    155:157:void setMonitorSelection(int) -> doSM
    161:161:int getHotbarSlot() -> uVqi
    166:168:void setHotbarSlot(int) -> KUIg
    172:172:boolean isShifting() -> golD
    177:179:void setShifting(boolean) -> KUIg
    183:183:boolean isShift() -> OYFp
    188:190:void setShift(boolean) -> TqFU
    194:194:int getScroll() -> TErV
    199:201:void setScroll(int) -> TqFU
    205:205:int getMonitorLastSelection() -> mNyX
    210:212:void setMonitorLastSelection(int) -> fmJA
    216:217:void setP(org.bukkit.entity.Player) -> hbMk
    221:221:double getLastHeight() -> DHFV
    226:228:void setLastHeight(double) -> kHrj
    232:232:boolean isHeightMovement() -> iurJ
    237:239:void setHeightMovement(boolean) -> fmJA
    243:243:int getSwitchNotification() -> MkrF
    248:250:void setSwitchNotification(int) -> IqFj
    254:254:boolean getMonitorPosted() -> wDEx
    259:261:void setMonitorPosted(boolean) -> IqFj
    265:265:int getPlays() -> eaVQ
    270:272:void setPlays(int) -> Ahlu
    276:276:boolean isGlasses() -> NMRo
    281:283:void setGlasses(boolean) -> Ahlu
    287:287:boolean isActionlogging() -> LiPQ
    292:294:void setActionlogging(boolean) -> hbMS
    24:40:void <clinit>() -> <clinit>
react.api.Record -> oEAG:
    java.lang.String recordType -> Oasr
    long recordTime -> AjOQ
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> ArAo
    32:32:long getRecordTime() -> iBoG
    38:38:java.lang.Object getRecordObject() -> jFRk
    react.json.JSONObject toJSON() -> kkXi
    void fromJSON(react.json.JSONObject) -> kHrj
react.api.RecordBook -> uVqi:
    java.io.File recordFile -> opPq
    react.json.JSONObject js -> Utgg
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> kHrj
    79:87:react.api.IRecord getRecord(long) -> kHrj
    react.api.IRecord createDummyRecord(long,java.lang.String) -> kHrj
    95:107:long getOldestRecordTime() -> dLpr
    113:125:long getLatestRecordTime() -> BuEM
    130:130:boolean within(long,long,long) -> kHrj
    136:144:int countRecords(long,long) -> kHrj
    150:162:react.glang.GMap getRecords(long,long) -> hbMk
    168:181:int purgeRecordsBefore(long) -> hbMk
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> golD:
react.api.SampledChunk -> OYFp:
    org.bukkit.Chunk c -> kktY
    react.glang.GMap counts -> JIqv
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> lehw
    26:38:void hit(react.api.ChunkIssue,int) -> kHrj
    42:42:org.bukkit.Chunk getC() -> wKvL
    47:47:react.glang.GMap getCounts() -> Lyrj
react.api.SampledType -> TErV:
    react.api.SampledType ENTITY_TIME_LOCK -> BubV
    react.api.SampledType TILE_TIME_LOCK -> PvYr
    react.api.SampledType ENTITY_TIME -> kdDs
    react.api.SampledType TILE_TIME -> VLur
    react.api.SampledType ENTITY_DROPTICK -> iwQP
    react.api.SampledType TILE_DROPTICK -> PTVl
    react.api.SampledType REDSTONE_TICK_USAGE -> GROg
    react.api.SampledType REDSTONE_TICK -> YNSH
    react.api.SampledType REDSTONE_SECOND -> mXlW
    react.api.SampledType REDSTONE_TIME -> IOeE
    react.api.SampledType PHYSICS_TIME -> YNRl
    react.api.SampledType HOPPER_TICK_USAGE -> PCWs
    react.api.SampledType HOPPER_TICK -> QqNx
    react.api.SampledType HOPPER_SECOND -> YWCk
    react.api.SampledType HOPPER_TIME -> sQkn
    react.api.SampledType FLUID_TICK_USAGE -> yeAC
    react.api.SampledType FLUID_TICK -> Sncy
    react.api.SampledType FLUID_SECOND -> IaFP
    react.api.SampledType FLUID_TIME -> fBuH
    react.api.SampledType TPS -> bXkd
    react.api.SampledType TICK -> aLvy
    react.api.SampledType TIU -> xilW
    react.api.SampledType MEM -> DIFG
    react.api.SampledType FREEMEM -> uyta
    react.api.SampledType MAXMEM -> Bdbx
    react.api.SampledType ALLOCMEM -> klWp
    react.api.SampledType MAHS -> IWsm
    react.api.SampledType CHK_TIME -> agJk
    react.api.SampledType EXPLOSION_TIME -> urEd
    react.api.SampledType CHK -> lUhW
    react.api.SampledType ATASK -> BeCt
    react.api.SampledType STASK -> bGjK
    react.api.SampledType CHKS -> eYcr
    react.api.SampledType ENT -> pQSm
    react.api.SampledType ENTLIV -> PLHV
    react.api.SampledType ENTDROP -> VwmF
    react.api.SampledType ENTTILE -> hRLf
    java.lang.String node -> pPqU
    react.api.SampledType[] $VALUES -> VDgv
    6:6:react.api.SampledType[] values() -> values
    6:6:react.api.SampledType valueOf(java.lang.String) -> valueOf
    50:50:react.api.ISampler get() -> XlUI
    56:56:java.lang.String toString() -> toString
    60:70:void <init>(java.lang.String,int,java.lang.String) -> <init>
    74:74:java.lang.String getNode() -> kcGi
    6:44:void <clinit>() -> <clinit>
react.api.Sampler -> mNyX:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> rEwE
    react.surge.util.C altColor -> ObWW
    int interval -> fuxp
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> lfLF
    49:49:react.surge.util.C getAltColor() -> Oigp
    55:55:int getInterval() -> getInterval
    void sample() -> vkXa
    void construct() -> OHEx
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> kHrj
    107:108:void setInterval(int) -> hbMk
react.api.Sector -> DHFV:
    int value() -> value
react.api.SelectionException -> iurJ:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> MkrF:
    react.api.SelectionMode WHITELIST -> RcOo
    react.api.SelectionMode BLACKLIST -> RQnN
    react.api.SelectionMode[] $VALUES -> NEbJ
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> wDEx:
    java.lang.Class objectType -> SwTl
    react.api.SelectionMode mode -> MKOk
    react.glang.GSet list -> Blri
    react.glang.GSet possibilities -> Blrh
    int popoff -> TGVI
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> jOCa
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> TqFU
    43:43:react.glang.GSet getList() -> myoD
    49:49:react.glang.GSet getPossibilities() -> Gapo
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> fmJA
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> IqFj
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> eaVQ:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> doSM
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> fmJA
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> Ahlu
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> NMRo:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> LiPQ:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> doSM
    29:30:void add(org.bukkit.Chunk,int) -> kHrj
    34:38:void add(org.bukkit.World) -> Ahlu
    42:46:void addAll() -> Qoot
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> fmJA
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> Ahlu
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> lehw:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> fmJA
    87:87:java.lang.String getName() -> getName
react.api.Side -> wKvL:
    react.api.Side PLAYERS -> KgOU
    react.api.Side CONSOLE -> OayK
    java.lang.String ss -> TOeo
    react.api.Side[] $VALUES -> ceDO
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> ryAY
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> hbMk
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> Lyrj:
    react.api.SideGate PLAYERS_ONLY -> LXpM
    react.api.SideGate CONSOLES_ONLY -> oNTT
    react.api.SideGate ANYTHING -> wxNf
    react.api.SideGate[] $VALUES -> Nggb
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> kHrj
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> Lyrj$1:
    int[] $SwitchMap$react$api$SideGate -> mjOs
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> XlUI:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> ogeT
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> wvmg
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> Qoot:
    double wScale -> fBwv
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> kHrj
react.api.SpecializedTickLimiter -> ryAY:
    double rMaxTime -> tfSd
    long rStartTime -> fnLj
    double rLastTime -> tUQq
    long rMark -> MSby
    double tMaxTime -> YVdw
    react.gmath.Average atimes -> KgPL
    react.gmath.Average adropped -> rqNx
    int droppedTicks -> vuJt
    boolean entityTick -> jhwG
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> wvmg:
    react.glang.GList sources -> XdcB
    react.glang.GList splooge -> kSHS
    react.glang.GSet destroy -> wwOf
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> kHrj
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> hbMk
    void clipped(org.bukkit.Location) -> hbMk
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> doSM
    boolean isAllowedSource(org.bukkit.Location) -> KUIg
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> kHrj
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> hbMk
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> doSM
react.api.SploogeCounter$1 -> wvmg$1:
    java.util.Iterator val$it -> YMsL
    org.bukkit.Location val$start -> IrJH
    int val$maxDistance -> LHNW
    react.api.SploogeCounter this$0 -> lUiu
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> wvmg$1$1:
    react.api.SploogeCounter$1 this$1 -> hAMk
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> bqbO:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> XuFc:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> kkXi
    38:49:void fromJSON(react.json.JSONObject) -> kHrj
react.api.StackTraceRecordBook -> AysD:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> hbMk
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> kHrj
react.api.StackedEntity -> qRwx:
    org.bukkit.entity.LivingEntity entity -> DHgN
    int count -> count
    double rmx -> vuIp
    20:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> kHrj
    46:46:int getAbsoluteMaxCount() -> bqbO
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> hbMk
    56:58:void update() -> update
    62:68:void signalSize() -> XuFc
    72:123:void updateHealth() -> AysD
    127:128:void heal(double) -> hbMk
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> qRwx
    142:142:int getEffectiveCount(double) -> doSM
    147:147:double getEffectiveMaxHealth(int) -> hbMS
    152:152:double getRealMaxHealth() -> xhoN
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> kHrj
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> xhoN:
    react.glang.GList headings -> kRgC
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> kHrj
    24:24:int getMaxSelection() -> Sdub
    29:37:int left(int) -> imaA
    42:50:int right(int) -> GrqA
    55:55:react.api.MonitorHeading getHeadFor(int) -> Jjwq
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> kHrj
    83:100:java.lang.String getHotbarFor(int,boolean) -> kHrj
react.api.Unused -> Sdub:
react.api.WorldConfig -> rNLY:
    boolean allowRai -> OQXH
    boolean allowActions -> GJAW
    boolean allowRelighting -> CyIl
    boolean allowTileThrottling -> LjQp
    boolean allowEntityThrottling -> rplw
    boolean allowFastLeafDecay -> rNjV
    java.util.List assumeNoSideEffectsEntities -> vIti
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> hbMS
    48:62:void save(org.bukkit.World) -> imaA
    66:80:void load(org.bukkit.World) -> GrqA
react.binject.BlockInjector -> SKce:
    react.surge.util.Protocol protocol -> teqi
    java.lang.Class blocksClass -> pYhs
    13:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> kHrj
    29:56:void inject() -> rNLY
    61:61:react.surge.util.Protocol getVersion() -> jOAU
react.binject.IBlockInjector -> LiRn:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> kHrj
    void add(int,java.lang.String,java.lang.Object) -> kHrj
    java.lang.Object get(java.lang.String) -> get
    void inject() -> rNLY
    react.surge.util.Protocol getVersion() -> jOAU
react.binject.InjectedBlock -> WWod:
    react.surge.util.Protocol getInjectProtocol() -> SKce
    java.lang.String getInjectKey() -> LiRn
    java.lang.String getInjectCKey() -> WWod
    int getInjectId() -> brBe
react.binject.ReflectionUtil -> brBe:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> kHrj
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> kHrj
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> kHrj
    41:54:void setAccessible(java.lang.reflect.Field) -> kHrj
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> kHrj
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> kHrj
react.binject.V10.BlockInjector10 -> VTld:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> IqFj
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> kHrj
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> kHrj
react.binject.V11.BlockInjector11 -> flkU:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> Ahlu
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> kHrj
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> kHrj
react.binject.V12.BlockInjector12 -> UcKF:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> hbMS
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> kHrj
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> kHrj
react.binject.V8.BlockInjector8 -> YVDr:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> imaA
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> kHrj
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> kHrj
react.binject.V9.BlockInjector9 -> pYFs:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> GrqA
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> kHrj
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> kHrj
react.cache.CachedEntity -> VDKI:
    java.util.UUID uid -> Hvxk
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> vuNB
    double x -> x
    double y -> y
    double z -> z
    double vx -> dpYX
    double vy -> wUla
    double vz -> oNVM
    double dx -> eQXs
    double dy -> GJCh
    double dz -> eIHj
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> IqFj
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> VTld
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> flkU
    120:121:void setVx(double) -> KUIg
    125:125:double getVy() -> UcKF
    130:131:void setVy(double) -> TqFU
    135:135:double getVz() -> YVDr
    140:141:void setVz(double) -> fmJA
    145:145:double getDx() -> pYFs
    150:151:void setDx(double) -> IqFj
    155:155:double getDy() -> VDKI
    160:161:void setDy(double) -> Ahlu
    165:165:double getDz() -> GYaV
    170:171:void setDz(double) -> hbMS
    175:175:java.util.UUID getUid() -> mrAU
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> GYaV:
    int age -> UtnQ
    boolean ageLock -> AsFH
    boolean breed -> LYSU
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> IqFj
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> IEtf
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> haot
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> mrAU:
    org.bukkit.DyeColor dye -> YxkG
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> IqFj
    30:30:org.bukkit.DyeColor getDye() -> eXfT
    35:36:void setDye(org.bukkit.DyeColor) -> kHrj
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> IEtf:
    react.glang.GList potionEffects -> AXrG
    boolean canPickupItems -> Hnhr
    org.bukkit.inventory.ItemStack[] armorContents -> tfVI
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> GJDS
    double maxHealth -> maxHealth
    int maxAir -> RtWE
    int air -> afpE
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> IqFj
    63:63:react.glang.GList getPotionEffects() -> oMSR
    68:69:void setPotionEffects(react.glang.GList) -> hbMk
    73:73:boolean isCanPickupItems() -> EBYn
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> eYHM
    138:139:void setMaxAir(int) -> NoTr
    143:143:int getAir() -> WrBX
    148:149:void setAir(int) -> TNcE
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> haot:
    boolean sheared -> PKmQ
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> IqFj
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> eXfT:
    org.bukkit.inventory.ItemStack is -> uqiY
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> IqFj
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> oMSR:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> EBYn:
    react.chronophysics.HopperDirection DOWN -> PfAI
    react.chronophysics.HopperDirection NORTH -> Ojll
    react.chronophysics.HopperDirection SOUTH -> WjTX
    react.chronophysics.HopperDirection EAST -> dpXX
    react.chronophysics.HopperDirection WEST -> vkyv
    int direction -> direction
    react.chronophysics.HopperDirection[] $VALUES -> JtnN
    6:6:react.chronophysics.HopperDirection[] values() -> values
    6:6:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> TqFU
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> kHrj
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> hbMk
    6:12:void <clinit>() -> <clinit>
react.chronophysics.HopperDirection$1 -> EBYn$1:
    int[] $SwitchMap$react$chronophysics$HopperDirection -> afnP
    23:23:void <clinit>() -> <clinit>
react.chronophysics.HopperWormhole -> eYHM:
    org.bukkit.block.Hopper source -> fnOD
    react.glang.GList path -> XBao
    org.bukkit.block.Hopper destination -> KDmD
    18:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> RPpQ
    31:31:react.glang.GList getPath() -> uVtB
    36:36:org.bukkit.block.Hopper getDestination() -> SmfJ
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> kHrj
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> WrBX:
    org.bukkit.block.Hopper h -> nTCB
    14:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> kHrj
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> PRyu
    62:62:boolean isLockedByRedstone() -> lfMA
react.command.CommandAct -> RPpQ:
    41:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> kHrj
    186:192:react.text.RTX getBeginningRTX() -> pYGG
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> kHrj
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> hbMk
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> doSM
    331:346:react.glang.GList getSortedCommands() -> GarV
    351:358:int getPageSize(int) -> jWRR
    363:363:boolean isValidPage(int,int) -> kHrj
    368:377:react.glang.GList getPage(int,int) -> hbMk
react.command.CommandActionLog -> uVtB:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
react.command.CommandCPUScore -> SmfJ:
    16:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
react.command.CommandCapabilities -> PRyu:
    20:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
react.command.CommandChunkBlame -> lfMA:
    24:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
react.command.CommandChunkBlame$1 -> lfMA$1:
    org.bukkit.command.CommandSender val$sender -> UtnN
    react.command.CommandChunkBlame this$0 -> OQYt
    37:37:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> lfMA$1$1:
    java.lang.String val$i -> HewX
    react.glang.GMap val$top -> giAK
    int val$totalx -> dgjV
    react.command.CommandChunkBlame$1 this$1 -> Xlwm
    66:66:void <init>(react.command.CommandChunkBlame$1,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> pYGG:
    17:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
react.command.CommandHelp -> GarV:
    29:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> kHrj
    81:87:react.text.RTX getBeginningRTX() -> pYGG
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> kHrj
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> hbMk
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> doSM
    208:215:react.glang.GList getSortedCommands() -> GarV
    220:227:int getPageSize(int) -> jWRR
    232:232:boolean isValidPage(int,int) -> kHrj
    237:246:react.glang.GList getPage(int,int) -> hbMk
react.command.CommandHighMonitor -> NfiV:
    17:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
react.command.CommandMap -> XRcs:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
react.command.CommandMonitor -> XuGw:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
react.command.CommandReload -> GrvQ:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
react.command.CommandReload$1 -> GrvQ$1:
    org.bukkit.command.CommandSender val$sender -> UtnN
    react.command.CommandReload this$0 -> iDUn
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> GrvQ$1$1:
    react.command.CommandReload$1 this$1 -> nlwP
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> nuFv:
    29:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
    54:63:org.bukkit.inventory.ItemStack makeBook() -> NfiV
    68:94:void addSpikePages(react.glang.GList) -> doSM
    98:108:void addStatusPages(react.glang.GList) -> KUIg
    112:129:int findSlot(org.bukkit.entity.Player) -> doSM
react.command.CommandTopChunk -> Nwja:
    24:32:void <init>() -> <init>
    37:58:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
react.command.CommandVersion -> WFon:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHrj
react.controller.ActionController -> Qorc:
    int kiv -> gXBh
    react.glang.GMap actions -> AYUR
    react.glang.GMap pending -> aUoa
    react.glang.GList tasks -> uPJI
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> kHrj
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> hbMk
    141:141:react.api.IAction getAction(react.api.ActionType) -> kHrj
    146:147:void registerAction(react.api.IAction) -> kHrj
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> XRcs
    241:248:react.glang.GList getActionNames() -> XuGw
react.controller.BenchmarkController -> WhsB:
    react.api.CPUBenchmark finished -> YNYI
    boolean done -> ETaB
    int score -> LOtH
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    13:13:react.api.CPUBenchmark access$002(react.controller.BenchmarkController,react.api.CPUBenchmark) -> kHrj
    13:13:boolean access$102(react.controller.BenchmarkController,boolean) -> kHrj
    13:13:react.api.CPUBenchmark access$000(react.controller.BenchmarkController) -> kHrj
react.controller.BenchmarkController$1 -> WhsB$1:
    react.controller.BenchmarkController this$0 -> aDng
    27:27:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
react.controller.BenchmarkController$1$1 -> WhsB$1$1:
    react.controller.BenchmarkController$1 this$1 -> gXBS
    32:32:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
react.controller.BenchmarkController$1$1$1 -> WhsB$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> pkLx
    37:37:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> mFnp:
    react.glang.GMap rangeMapping -> bHSH
    react.binject.IBlockInjector injector -> IOlA
    boolean injected -> CyOR
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> GrvQ
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> nuFv
    115:115:react.binject.IBlockInjector getInjector() -> Nwja
    120:120:boolean isInjected() -> WFon
react.controller.ChronophyFluidController -> lCkl:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> rNNp:
    boolean firstTickList -> OILq
    long firstTick -> OHlR
    long lastTick -> pIKA
    react.gmath.Average aCSMS -> BCFH
    react.glang.GMap pluginLoads -> LbFh
    react.glang.GMap playerLoads -> Rkgi
    int serverLoads -> uGXQ
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> Qorc
    63:73:void tickNextTickList() -> WhsB
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> kHrj
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> kHrj
    171:171:boolean isFirstTickList() -> mFnp
    176:176:long getFirstTick() -> lCkl
    181:181:long getLastTick() -> rNNp
    186:186:react.gmath.Average getaCSMS() -> HTWT
    191:191:react.glang.GMap getPluginLoads() -> TOHx
    196:196:react.glang.GMap getPlayerLoads() -> HCVH
    201:201:int getServerLoads() -> dVFu
    21:21:react.glang.GMap access$000(react.controller.ChunkController) -> kHrj
    21:21:int access$108(react.controller.ChunkController) -> hbMk
    21:21:react.glang.GMap access$200(react.controller.ChunkController) -> doSM
react.controller.ChunkController$1 -> rNNp$1:
    org.bukkit.event.world.ChunkLoadEvent val$e -> Mlxr
    react.controller.ChunkController this$0 -> xrdP
    131:131:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> doSM
    131:131:void run(java.lang.Object) -> kHrj
react.controller.CommandController -> HTWT:
    react.glang.GList commands -> AsGU
    boolean k -> nmWK
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> hbMS
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> imaA
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> kHrj
    317:317:react.glang.GList getCommands() -> Kepm
    322:323:void setCommands(react.glang.GList) -> TqFU
    327:327:boolean isK() -> uVvX
    332:333:void setK(boolean) -> imaA
react.controller.EntityCullController -> TOHx:
    react.glang.GSet flags -> xabQ
    react.glang.GSet defer -> iLeT
    react.glang.GMap maxs -> xGnt
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> ksli
    172:180:int cull(org.bukkit.Chunk) -> KUIg
    185:295:int partialCull(org.bukkit.Chunk) -> TqFU
react.controller.EntityStackController -> HCVH:
    react.glang.GList stacks -> jFwN
    20:22:void <init>() -> <init>
    27:28:void start() -> start
    33:34:void stop() -> stop
    39:54:void tick() -> tick
    59:112:void stack(react.glang.GList) -> fmJA
    116:121:boolean isStacked(org.bukkit.entity.LivingEntity) -> doSM
    126:139:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> KUIg
    145:163:void on(org.bukkit.event.entity.EntityDamageEvent) -> kHrj
    167:182:void merge(react.api.StackedEntity,react.api.StackedEntity) -> kHrj
    186:252:void checkNear(org.bukkit.entity.LivingEntity) -> TqFU
    257:297:void on(org.bukkit.event.entity.EntitySpawnEvent) -> kHrj
react.controller.EntityStackController$1 -> HCVH$1:
    react.controller.EntityStackController this$0 -> BShS
    org.bukkit.event.entity.EntitySpawnEvent val$e -> JtpF
    1:264:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    269:294:void run() -> run
react.controller.EventController -> dVFu:
    react.lagmap.LagMap map -> hIas
    react.glang.GMap slots -> GkgG
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> kHrj
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> kHrj
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> kHrj
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> kHrj
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> kHrj
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> kHrj
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> kHrj
react.controller.ExplosiveController -> Kepm:
    boolean firstTickList -> OILq
    long firstTick -> OHlR
    long lastTick -> pIKA
    react.gmath.Average aCSMS -> BCFH
    15:15:void <init>() -> <init>
    25:30:void start() -> start
    34:47:void flushTickList() -> Qorc
    51:61:void tickNextTickList() -> WhsB
    66:67:void stop() -> stop
    73:74:void tick() -> tick
    79:88:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> hbMk
    93:94:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> kHrj
    98:98:boolean isFirstTickList() -> mFnp
    103:103:long getFirstTick() -> lCkl
    108:108:long getLastTick() -> rNNp
    113:113:react.gmath.Average getaCSMS() -> HTWT
react.controller.FastDecayController -> uVvX:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> VgRB
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> kHrj
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> kHrj
    74:155:void checkBreak(org.bukkit.block.Block) -> doSM
    159:190:void decay(org.bukkit.block.Block) -> KUIg
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> TqFU
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> NxKs
react.controller.FastDecayController$1 -> uVvX$1:
    react.controller.FastDecayController this$0 -> XKTf
    react.glang.GMap val$locs -> BKXB
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> doSM
    99:99:boolean isAllowedSource(org.bukkit.Location) -> KUIg
    105:124:void clipped(org.bukkit.Location) -> hbMk
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> kHrj
react.controller.FastDecayController$1$1 -> uVvX$1$1:
    react.controller.FastDecayController$1 this$1 -> TrMY
    react.glang.GMap val$locs -> BKXB
    int val$i -> bisk
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> uVvX$2:
    react.controller.FastDecayController this$0 -> XKTf
    org.bukkit.block.Block val$b -> AHSx
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FastDecayController$3 -> uVvX$3:
    int[] $SwitchMap$org$bukkit$TreeSpecies -> kRkF
    201:201:void <clinit>() -> <clinit>
react.controller.FeatureController -> ksli:
    react.feature.INMSBinding trueBinding -> Aaep
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> uhXs
    85:85:java.lang.String getPackageVersion() -> bPAg
    90:90:boolean hasBinding() -> tBqr
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> kHrj
react.controller.FluidController -> NxKs:
    react.glang.GSet ignore -> BCFo
    int flowsPerTick -> GRUa
    int flowsPerSecond -> HoJx
    react.gmath.Average aFST -> RtWt
    react.gmath.Average aFSS -> WbEM
    react.gmath.Average aFSMS -> xHOj
    boolean firstTickList -> OILq
    long firstTick -> OHlR
    long lastTick -> pIKA
    react.glang.GSet frozen -> iDTh
    react.glang.GMap queue -> Fyep
    react.glang.GMap freezeTimes -> YEie
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> fmJA
    68:76:void checkChunks() -> BlWP
    80:97:void checkChunk(org.bukkit.Chunk) -> IqFj
    101:107:void queue(org.bukkit.block.Block) -> fmJA
    111:111:boolean isFrozen(org.bukkit.Chunk) -> Ahlu
    116:117:void freeze(org.bukkit.Chunk) -> hbMS
    121:127:void unfreeze(org.bukkit.Chunk) -> imaA
    131:138:void freeze(org.bukkit.Chunk,long) -> kHrj
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> Qorc
    172:182:void tickNextTickList() -> WhsB
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> kHrj
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> kHrj
    248:248:react.glang.GSet getIgnore() -> Smhh
    253:253:int getTransfersPerTick() -> avqO
    258:258:int getTransfersPerSecond() -> ivWx
    263:263:react.gmath.Average getaFST() -> ejKv
    268:268:react.gmath.Average getaFSS() -> uFTy
    273:273:react.gmath.Average getaFSMS() -> wwOf
    278:278:boolean isFirstTickList() -> mFnp
    283:283:long getFirstTick() -> lCkl
    288:288:long getLastTick() -> rNNp
    293:293:react.glang.GSet getFrozen() -> baAq
    298:298:react.glang.GMap getQueue() -> QpRW
    303:303:react.glang.GMap getFreezeTimes() -> yRbD
react.controller.GlassController -> uhXs:
    react.glang.GMap q -> Qher
    react.glang.GList g -> MBgX
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> KUIg
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> TqFU
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> fmJA
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> kHrj
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> kHrj
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> kHrj
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> kHrj
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> kHrj
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> kHrj
    36:36:react.glang.GList access$0(react.controller.GlassController) -> kHrj
react.controller.GlassController$1 -> uhXs$1:
    react.controller.GlassController this$0 -> MTId
    react.glang.GMap val$cc -> KVSl
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> uhXs$1$1:
    react.controller.GlassController$1 this$1 -> yJuT
    org.bukkit.Location val$i -> LQGL
    org.bukkit.entity.Player val$j -> hRVh
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> bPAg:
    react.glang.GMap g -> wNBE
    react.glang.GMap gr -> EDBP
    react.glang.GMap gra -> ghdc
    38:38:void <init>() -> <init>
    47:80:void start() -> start
    85:91:void stop() -> stop
    96:123:void tick() -> tick
    128:145:void on(org.bukkit.event.player.PlayerJoinEvent) -> kHrj
    149:215:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> kHrj
    220:260:void on(org.bukkit.event.player.PlayerMoveEvent) -> kHrj
    266:266:void on(react.event.ReactScrollEvent) -> kHrj
    270:323:void toggleMapping(org.bukkit.entity.Player) -> IqFj
    327:359:void toggleMappingEod(org.bukkit.entity.Player) -> Ahlu
    363:363:react.glang.GMap getG() -> ryAk
    368:368:react.glang.GMap getGr() -> jhXx
    38:38:react.glang.GMap access$000(react.controller.GraphController) -> kHrj
    38:38:react.glang.GMap access$100(react.controller.GraphController) -> hbMk
react.controller.GraphController$1 -> bPAg$1:
    react.controller.GraphController this$0 -> cvLU
    61:61:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    65:78:void run() -> run
react.controller.GraphController$2 -> bPAg$2:
    react.controller.GraphController this$0 -> cvLU
    97:97:void <init>(react.controller.GraphController) -> <init>
    101:105:void run() -> run
react.controller.GraphController$3 -> bPAg$3:
    org.bukkit.event.player.PlayerJoinEvent val$e -> dyOW
    react.controller.GraphController this$0 -> cvLU
    129:129:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    133:143:void run() -> run
react.controller.HopperController -> tBqr:
    react.glang.GSet ignore -> BCFo
    int transfersPerTick -> XdjY
    int transfersPerSecond -> GAWO
    react.gmath.Average aHST -> Kfti
    react.gmath.Average aHSS -> wwsV
    react.gmath.Average aHSMS -> aDqG
    boolean firstTickList -> OILq
    long firstTick -> OHlR
    long lastTick -> pIKA
    react.glang.GSet frozen -> iDTh
    react.glang.GMap queue -> Fyep
    react.glang.GMap freezeTimes -> YEie
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> fmJA
    65:73:void checkChunks() -> BlWP
    77:94:void checkChunk(org.bukkit.Chunk) -> IqFj
    98:104:void queue(org.bukkit.block.Block) -> fmJA
    108:108:boolean isFrozen(org.bukkit.Chunk) -> Ahlu
    113:114:void freeze(org.bukkit.Chunk) -> hbMS
    118:124:void unfreeze(org.bukkit.Chunk) -> imaA
    128:135:void freeze(org.bukkit.Chunk,long) -> kHrj
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> Qorc
    169:179:void tickNextTickList() -> WhsB
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> kHrj
    207:207:react.glang.GSet getIgnore() -> Smhh
    212:212:int getTransfersPerTick() -> avqO
    217:217:int getTransfersPerSecond() -> ivWx
    222:222:react.gmath.Average getaHST() -> LqdS
    227:227:react.gmath.Average getaHSS() -> BdGr
    232:232:react.gmath.Average getaHSMS() -> uEsh
    237:237:boolean isFirstTickList() -> mFnp
    242:242:long getFirstTick() -> lCkl
    247:247:long getLastTick() -> rNNp
    252:252:react.glang.GSet getFrozen() -> baAq
    257:257:react.glang.GMap getQueue() -> QpRW
    262:262:react.glang.GMap getFreezeTimes() -> yRbD
react.controller.HopperOvertickController -> BlWP:
    react.glang.GList possiblePlunge -> eHmC
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> doSM
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> kHrj
react.controller.LanguageController -> Smhh:
    java.io.File languageFolder -> bHUJ
    int oldVersion -> urNR
    java.io.File dlf -> ffCY
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> qmLq
    160:221:void downloadAll(boolean) -> GrqA
    225:261:void downloadLanguage(java.lang.String) -> Jjwq
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> NoTr
    315:315:java.io.File getFileForLanguage(java.lang.String) -> TNcE
    320:332:void writeDefaults() -> tSrU
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> kHrj
    263:263:void access$1(react.controller.LanguageController) -> kHrj
react.controller.LanguageController$1 -> Smhh$1:
    react.controller.LanguageController this$0 -> fnSV
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> Smhh$2:
    react.controller.LanguageController this$0 -> fnSV
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> kHrj
react.controller.LanguageController$2$1 -> Smhh$2$1:
    react.controller.LanguageController$2 this$1 -> lxTv
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> kHrj
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> kHrj
    121:121:void onDownloadStarted(react.gnet.download.Download) -> kHrj
    126:128:void onDownloadFinished(react.gnet.download.Download) -> hbMk
    134:134:void onDownloadFailed(react.gnet.download.Download) -> doSM
react.controller.LanguageController$3 -> Smhh$3:
    react.controller.LanguageController this$0 -> fnSV
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> Smhh$3$1:
    react.controller.LanguageController$3 this$1 -> vBML
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> Smhh$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> lgTE
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> Smhh$4:
    react.controller.LanguageController this$0 -> fnSV
    java.io.File val$dld -> URok
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> kHrj
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> kHrj
    245:245:void onDownloadStarted(react.gnet.download.Download) -> kHrj
    250:251:void onDownloadFinished(react.gnet.download.Download) -> hbMk
    257:257:void onDownloadFailed(react.gnet.download.Download) -> doSM
react.controller.MonitorController -> avqO:
    int maxCooldown -> xYSh
    react.api.TitleMonitor titleMonitor -> xYTF
    react.glang.GMap posts -> xXsQ
    react.slate.PhantomSlate sb -> NyNr
    boolean ready -> CEjx
    44:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> aoAK
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> hbMS
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> imaA
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> gopN
    179:184:float calcVolume(react.api.ReactPlayer) -> kHrj
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> GrqA
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> Jjwq
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> NoTr
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> TNcE
    219:223:void startMonitoring(org.bukkit.entity.Player) -> jWRR
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> KLXv
    242:247:void startActionLogging(org.bukkit.entity.Player) -> teOi
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> Whlr
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> hbMk
    279:291:void processPlayer(react.api.ReactPlayer) -> doSM
    296:296:void handleActionLog(org.bukkit.entity.Player) -> YoSr
    300:324:void handleTriggers(react.api.ReactPlayer) -> KUIg
    328:367:void handleScrolling(react.api.ReactPlayer) -> TqFU
    371:399:void handleShifting(react.api.ReactPlayer) -> fmJA
    403:425:void handlePosting(react.api.ReactPlayer) -> IqFj
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> kHrj
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> kHrj
    471:501:void tickMonitor(react.api.ReactPlayer) -> Ahlu
    505:505:react.api.TitleMonitor getTitleMonitor() -> xiQO
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> kHrj
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> kHrj
    539:552:void onTick() -> NDek
    556:578:void updateActionBoard() -> oLsd
    583:583:java.lang.String getTickName() -> ccgU
    35:35:react.slate.PhantomSlate access$002(react.controller.MonitorController,react.slate.PhantomSlate) -> kHrj
    35:35:react.slate.PhantomSlate access$100(react.controller.MonitorController) -> kHrj
    35:35:boolean access$202(react.controller.MonitorController,boolean) -> kHrj
    35:35:boolean access$200(react.controller.MonitorController) -> hbMk
    35:35:react.slate.PhantomSlate access$000(react.controller.MonitorController) -> doSM
    37:37:void <clinit>() -> <clinit>
react.controller.MonitorController$1 -> avqO$1:
    react.controller.MonitorController this$0 -> BvNJ
    69:69:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> avqO$2:
    react.controller.MonitorController this$0 -> BvNJ
    557:557:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> ivWx:
    react.glang.GMap samples -> cSgQ
    int redstonePerTick -> EveH
    int redstonePerSecond -> ghcg
    boolean firstTickList -> OILq
    long firstTick -> OHlR
    long lastTick -> pIKA
    react.gmath.Average aRSMS -> KgTl
    react.gmath.Average aRST -> DsbK
    react.gmath.Average aRSS -> Aagm
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> kHrj
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> kHrj
    72:79:void flushTickList() -> Qorc
    83:93:void tickNextTickList() -> WhsB
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> GrqA
    121:122:void onPhysics(org.bukkit.Chunk) -> Jjwq
    126:127:void onHopper(org.bukkit.Chunk) -> NoTr
    131:132:void onFluid(org.bukkit.Chunk) -> TNcE
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> kHrj
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> kHrj
    156:176:void onTick() -> NDek
    181:181:java.lang.String getTickName() -> ccgU
    186:186:react.glang.GMap getSamples() -> ancB
    191:191:int getRedstonePerTick() -> ghDV
    196:196:int getRedstonePerSecond() -> MIvF
    201:201:boolean isFirstTickList() -> mFnp
    206:206:long getFirstTick() -> lCkl
    211:211:long getLastTick() -> rNNp
    216:216:react.gmath.Average getaRSMS() -> bWsC
    221:221:react.gmath.Average getaRST() -> PvDK
    226:226:react.gmath.Average getaRSS() -> SBus
react.controller.PhysicsController$1 -> ivWx$1:
    react.controller.PhysicsController this$0 -> SDYE
    1:168:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> ejKv:
    react.glang.GList players -> scUs
    react.glang.GSet save -> GQvh
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> UkVj
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> kHrj
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> Dquj
    113:113:react.glang.GList getPlayers() -> qeAF
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> kHrj
react.controller.PlayerController$1 -> ejKv$1:
    react.glang.GList val$toSave -> WYUh
    react.controller.PlayerController this$0 -> iMJv
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> uFTy:
    react.rai.IRAI rai -> VNEV
    boolean raiEnabled -> psbU
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    17:17:react.rai.IRAI access$000(react.controller.RAIController) -> kHrj
react.controller.RAIController$1 -> uFTy$1:
    react.controller.RAIController this$0 -> Evfx
    47:47:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> wwOf:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> doSM
react.controller.ReactServerInfo -> baAq:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> woCD
    27:27:int dgetGameProtocol() -> LFrd
    33:33:java.lang.String dgetGameVersion() -> lvsF
    39:39:java.lang.String dgetReactVersion() -> ghDE
    45:45:int dgetMaxPlayers() -> xXRU
    51:58:react.glang.GList dgetConnectedPlayers() -> iuyS
    64:64:int dgetViewDistance() -> vtPA
    70:70:int dgetGamePort() -> wDMn
    76:76:java.lang.String dgetGameAddress() -> wDMm
    82:89:react.glang.GList dgetRemotePlugins() -> Dioh
    95:102:react.glang.GList dgetWorlds() -> mPCM
    108:108:react.glang.GList dgetActions() -> fKMW
    114:114:react.glang.GList dgetSamplers() -> iCUL
react.controller.RedstoneController -> QpRW:
    react.glang.GSet ignore -> BCFo
    react.glang.GSet frozen -> iDTh
    react.glang.GMap queue -> Fyep
    react.glang.GMap freezeTimes -> YEie
    int redstonePerTick -> EveH
    int redstonePerSecond -> ghcg
    react.gmath.Average aRST -> DsbK
    react.gmath.Average aRSS -> Aagm
    react.gmath.Average aRSMS -> KgTl
    boolean firstTickList -> OILq
    long firstTick -> OHlR
    long lastTick -> pIKA
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> fmJA
    95:101:void tick() -> tick
    105:113:void checkChunks() -> BlWP
    117:134:void checkChunk(org.bukkit.Chunk) -> IqFj
    138:144:void queue(org.bukkit.block.Block) -> fmJA
    148:148:boolean isFrozen(org.bukkit.Chunk) -> Ahlu
    153:154:void freeze(org.bukkit.Chunk) -> hbMS
    158:165:void flushTickList() -> Qorc
    169:179:void tickNextTickList() -> WhsB
    183:189:void unfreeze(org.bukkit.Chunk) -> imaA
    193:200:void freeze(org.bukkit.Chunk,long) -> kHrj
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> kHrj
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> kHrj
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> kHrj
    246:246:react.glang.GSet getIgnore() -> Smhh
    251:251:react.glang.GSet getFrozen() -> baAq
    256:256:react.glang.GMap getQueue() -> QpRW
    261:261:react.glang.GMap getFreezeTimes() -> yRbD
    266:266:int getRedstonePerTick() -> ghDV
    271:271:int getRedstonePerSecond() -> MIvF
    276:276:react.gmath.Average getaRST() -> PvDK
    281:281:react.gmath.Average getaRSS() -> SBus
    286:286:react.gmath.Average getaRSMS() -> bWsC
    291:291:boolean isFirstTickList() -> mFnp
    296:296:long getFirstTick() -> lCkl
    301:301:long getLastTick() -> rNNp
react.controller.RemoteController -> yRbD:
    react.remote.server.RemoteServer remoteServer -> eYog
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> cRdb
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> kHrj
react.controller.RemoteController$1 -> yRbD$1:
    react.controller.RemoteController this$0 -> RIgu
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> yRbD$2:
    react.controller.RemoteController this$0 -> RIgu
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> Bkyk
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> jNgw
react.controller.SampleController -> ryAk:
    react.glang.GMap samplers -> TrQv
    react.surge.server.SuperSampler ss -> qwFQ
    int cd -> Evfy
    29:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> UALA
    69:74:void restartSuperSampler() -> pYLB
    78:79:void registerSampler(react.api.ISampler) -> doSM
    83:83:react.api.ISampler getSampler(java.lang.String) -> jWRR
    88:131:void constructSamplers() -> yIqt
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> iTWI
    187:209:void onTick() -> NDek
    214:214:java.lang.String getTickName() -> ccgU
    219:219:react.glang.GMap getSamplers() -> MSFi
    224:224:react.surge.server.SuperSampler getSs() -> HCVg
    229:229:int getCd() -> rxba
    234:241:react.glang.GList getSamplerNames() -> LrFv
    22:22:react.surge.server.SuperSampler access$000(react.controller.SampleController) -> kHrj
react.controller.SampleController$1 -> ryAk$1:
    react.controller.SampleController this$0 -> gXFl
    141:141:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> ryAk$2:
    react.controller.SampleController this$0 -> gXFl
    153:153:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> jhXx:
    java.lang.String ipa -> RklA
    react.glang.GList failures -> sbxh
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> KLXv
    41:74:void checkForIP() -> vAJD
    78:91:void scan(java.lang.Runnable) -> kHrj
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> jhXx$1:
    react.controller.SecurityController this$0 -> mXvi
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> jhXx$2:
    java.lang.String val$ip -> YWMu
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> jhXx$3:
    java.lang.Thread val$t -> uPNL
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> LqdS:
    react.glang.GMap etl -> kKAB
    react.glang.GMap ttl -> yKWm
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> kHrj
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> kHrj
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> Jjwq
    143:160:void releaseWorld(org.bukkit.World) -> NoTr
    164:181:double getUniversalEntityTick() -> NMYM
    186:203:double getUniversalEntityLimit() -> sPqV
    208:225:double getUniversalTileLimit() -> bhtA
    230:247:double getUniversalTileTick() -> nkud
    252:264:double getUniversalEntityDroppedTicks() -> FpWm
    269:281:double getUniversalTileDroppedTicks() -> FpXR
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> kHrj
    301:312:void setTileTickLimit(org.bukkit.World,double) -> hbMk
    316:321:double getEntityTickLimit(org.bukkit.World) -> TNcE
    326:331:double getTileTickLimit(org.bukkit.World) -> jWRR
    336:341:double getLastEntityTick(org.bukkit.World) -> KLXv
    346:351:double getLastTileTick(org.bukkit.World) -> teOi
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> Whlr
    366:371:double getTileDroppedTicks(org.bukkit.World) -> YoSr
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> kHrj
react.controller.SpikeController -> BdGr:
    react.glang.GMap spikes -> dhPK
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> NDek
    111:111:java.lang.String getTickName() -> ccgU
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> dEJQ
    128:160:void whoFuckingDidThis(react.glang.Callback) -> kHrj
    25:25:react.glang.GMap access$000(react.controller.SpikeController) -> kHrj
react.controller.SpikeController$1 -> BdGr$1:
    react.controller.SpikeController this$0 -> WGwA
    35:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> BdGr$1$1:
    react.controller.SpikeController$1 this$1 -> XTLM
    40:40:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> BdGr$2:
    react.glang.GMap val$vv -> brjR
    react.controller.SpikeController this$0 -> WGwA
    75:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> BdGr$3:
    java.lang.Thread val$t -> uPNL
    react.glang.Callback val$callback -> DRBl
    react.controller.SpikeController this$0 -> WGwA
    131:131:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> uEsh:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> qmLq:
    12:12:void <init>() -> <init>
    17:23:void start() -> start
    28:34:void stop() -> stop
    40:40:void tick() -> tick
    45:46:void on(org.bukkit.event.world.WorldUnloadEvent) -> kHrj
react.event.ReactEvent -> tSrU:
    org.bukkit.event.HandlerList handlers -> AHWT
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> aoAK:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> gopN:
    react.event.ScrollDirection direction -> vdQp
    boolean cancellled -> Cxqv
    int amount -> IPQH
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> eGkq
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> WOeP
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> xiQO:
    react.event.ScrollDirection DOWN -> CgqI
    react.event.ScrollDirection UP -> xsIF
    react.event.ScrollDirection[] $VALUES -> wxVK
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.feature.INMSBinding -> NDek:
    java.lang.String getPackageVersion() -> bPAg
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> kHrj
react.feature.NMSBinding -> oLsd:
    java.lang.String packageVersion -> fDAQ
    8:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> bPAg
react.feature.NMSBinding10 -> ccgU:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> kHrj
react.feature.NMSBinding11 -> ancB:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> kHrj
react.feature.NMSBinding12 -> ghDV:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> kHrj
react.feature.NMSBinding8 -> MIvF:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> kHrj
react.feature.NMSBinding9 -> bWsC:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> kHrj
react.gbench.Profiler -> PvDK:
    long nanos -> dVke
    long startNano -> LQHD
    long millis -> ECai
    long startMillis -> sAUY
    double time -> sQvQ
    boolean profiling -> KpGp
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> KLXv
    78:78:double getTicks() -> CUlM
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> aDPm
    93:93:double getHours() -> cIvP
    98:98:double getMilliseconds() -> XuKt
    103:103:long getNanoseconds() -> OjQj
    108:108:long getNanos() -> LiYR
    113:113:long getStartNano() -> LiXq
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> QNTl
    128:128:double getTime() -> oUjO
    133:133:boolean isProfiling() -> wMAY
react.gconcurrent.A -> SBus:
    react.gconcurrent.ParallelPoolManager mgr -> pIMn
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> SBus$1:
    react.gconcurrent.A this$0 -> ioLf
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> qeAF:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> woCD:
    react.gconcurrent.QueueMode mode -> lNBa
    react.glang.GList threads -> VxWq
    int next -> vuRU
    int threadCount -> qmsE
    java.util.Queue squeue -> yeIa
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> xsGp
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> wgTO
    22:23:void syncQueue(react.gconcurrent.Execution) -> kHrj
    long getNanoGate() -> MBIQ
    29:42:void tickSyncQueue() -> EvGN
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> JcRw
    93:100:int getTotalQueueSize() -> qmRa
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> hbMk
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> XcjU
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> GYft
    152:179:void updateThreadInformation() -> XciI
    183:215:react.gconcurrent.ParallelThread nextThread() -> BdLg
    220:226:void createThreads(int) -> teOi
    230:230:react.gconcurrent.QueueMode getMode() -> YLyT
    235:235:int getNext() -> ofjo
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> qvBy
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> YEJA
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> feBF
react.gconcurrent.ParallelThread -> LFrd:
    java.util.Queue queue -> fmsX
    react.gconcurrent.ThreadInformation info -> xsGp
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> imaA
    63:70:void execute(react.gconcurrent.Execution) -> doSM
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> hbMk
    92:92:java.util.Queue getQueue() -> LhwC
    97:97:react.gconcurrent.ThreadInformation getInfo() -> tnJk
react.gconcurrent.QueueMode -> lvsF:
    react.gconcurrent.QueueMode ROUND_ROBIN -> OsfF
    react.gconcurrent.QueueMode SMALLEST -> APis
    react.gconcurrent.QueueMode[] ENUM$VALUES -> EwJa
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> ghDE:
    react.gconcurrent.ParallelPoolManager mgr -> pIMn
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> ghDE$1:
    react.gconcurrent.S this$0 -> fCcM
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> xXRU:
    long tick -> xaiR
    long atick -> CVoq
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> iuyS:
    double ticksPerSecond -> kldf
    int queuedSize -> qedu
    boolean processing -> lohE
    double utilization -> TPQi
    react.gmath.Average ticksPerSecondAverage -> kldi
    long tick -> xaiR
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> imjF
    33:35:void setTicksPerSecond(double) -> GrqA
    39:39:int getQueuedSize() -> Usqn
    44:45:void setQueuedSize(int) -> Whlr
    49:49:boolean isProcessing() -> gWCY
    54:55:void setProcessing(boolean) -> Jjwq
    59:59:double getUtilization() -> YDiT
    64:65:void setUtilization(double) -> Jjwq
    69:69:double getTicksPerSecondAverage() -> YDlI
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> MuON
    89:89:int getId() -> getId
react.gformat.F -> vtPA:
    java.text.NumberFormat NF -> VNGl
    java.text.DecimalFormat DF -> Jlfy
    java.lang.String[] NAMES -> ceOF
    java.math.BigInteger THOUSAND -> BSmC
    java.util.NavigableMap MAP -> WbKq
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> teOi
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> kHrj
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> kHrj
    201:221:java.lang.String timeLong(long,int) -> kHrj
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> doSM
    236:236:java.lang.String b(double) -> NoTr
    241:258:java.lang.String b(java.math.BigInteger) -> kHrj
    263:267:void instantiate() -> HwAV
    279:279:java.lang.String fileSize(long) -> KUIg
    292:292:java.lang.String memSize(long) -> TqFU
    305:306:java.lang.String stamp(long) -> fmJA
    322:349:java.lang.String ofSize(long,int) -> hbMk
    363:368:java.lang.String trim(java.lang.String,int) -> hbMk
    381:401:java.lang.String cname(java.lang.String) -> Whlr
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> IqFj
    459:477:java.lang.String memx(long) -> Ahlu
    491:492:java.lang.String f(long) -> hbMS
    504:505:java.lang.String f(int) -> YoSr
    519:528:java.lang.String f(double,int) -> hbMk
    544:553:java.lang.String fd(double,int) -> doSM
    567:576:java.lang.String f(float,int) -> kHrj
    587:587:java.lang.String f(double) -> TNcE
    598:598:java.lang.String f(float) -> kHrj
    613:613:java.lang.String pc(double,int) -> KUIg
    628:628:java.lang.String pc(float,int) -> hbMk
    641:641:java.lang.String pc(double) -> jWRR
    654:654:java.lang.String pc(float) -> hbMk
    670:670:java.lang.String pc(int,int,int) -> kHrj
    684:684:java.lang.String pc(int,int) -> doSM
    700:700:java.lang.String pc(long,long,int) -> kHrj
    714:714:java.lang.String pc(long,long) -> KUIg
    726:726:java.lang.String msSeconds(long) -> imaA
    740:740:java.lang.String msSeconds(long,int) -> doSM
    752:752:java.lang.String nsMs(long) -> GrqA
    766:766:java.lang.String nsMs(long,int) -> KUIg
    780:780:java.lang.String nsMsd(long,int) -> TqFU
react.glang.AccessCallback -> wDMn:
    java.lang.Object get() -> get
react.glang.Adapter -> wDMm:
    java.lang.Object adapt(java.lang.Object) -> fmJA
    java.lang.Object onAdapt(java.lang.Object) -> IqFj
react.glang.Callback -> Dioh:
    java.lang.Object t -> ujAx
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> kHrj
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> mPCM:
    double i -> aMfQ
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> KLXv
react.glang.FinalFloat -> fKMW:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> doSM
react.glang.FinalInteger -> iCUL:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> UkVj
react.glang.FinalLong -> cRdb:
    long i -> xXxD
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> Jjwq
react.glang.FinalString -> Bkyk:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> jNgw:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> fmJA
    java.lang.Object onAdapt(java.lang.Object) -> IqFj
react.glang.GBiset -> UALA:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> ryjQ
    java.lang.Object b -> vKAt
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> BdMc
    53:54:void setA(java.lang.Object) -> Ahlu
    63:63:java.lang.Object getB() -> rMsj
    73:74:void setB(java.lang.Object) -> hbMS
react.glang.GList -> pYLB:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> KUIg
    45:52:react.glang.GList grepDistance(int,int) -> TqFU
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> hbMk
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> vsrq
    188:190:react.glang.GList shuffleCopy() -> tLKQ
    198:199:void shuffle() -> gWGV
    210:236:react.glang.GList split() -> OsDu
    248:248:boolean hasIndex(int) -> Dquj
    258:259:java.lang.Object pickRandom() -> KLdu
    270:277:react.glang.GList stringList() -> OsEW
    288:292:void forEach(react.glang.Callback) -> hbMk
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> OPSR
    336:336:react.glang.GList cropFrom(int) -> CUcK
    341:373:react.glang.GList split(int) -> VKun
    389:389:react.glang.GList cropTo(int) -> legb
    406:416:react.glang.GList crop(int,int) -> fmJA
    427:431:react.glang.GList removeDuplicates() -> nckC
    442:446:void removeAll(java.lang.Object) -> imaA
    455:455:boolean hasDuplicates() -> eaaU
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> gEcS
    484:490:void push(java.lang.Object,int) -> kHrj
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> GrqA
    528:532:void add(java.util.List) -> kHrj
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> lDRJ
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> Yfmn
    626:627:react.glang.GList qdel(java.lang.Object) -> Jjwq
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> HKjk
    662:669:java.lang.Object popLast() -> lMBv
    674:683:java.lang.Object popRandom() -> bPGC
react.glang.GListAdapter -> yIqt:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> hbMk
    java.lang.Object onAdapt(java.lang.Object) -> IqFj
react.glang.GMap -> iTWI:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> BdOC
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> kHrj
    64:81:react.glang.GMap flip() -> iBwx
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> kHrj
    121:121:react.glang.GList k() -> OPSR
    131:131:react.glang.GSet kset() -> HmnX
    141:141:react.glang.GList v() -> govl
    151:151:react.glang.GSet vset() -> WFuM
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> hbMk
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> IqFj
    209:219:react.glang.GMap removeDuplicateValues() -> KLct
    233:242:void put(react.glang.GList,react.glang.GList) -> kHrj
    251:267:react.glang.GList sortK() -> fBaA
    277:293:react.glang.GList sortV() -> gNSo
react.glang.GQuadraset -> MSFi:
    java.lang.Object a -> ryjQ
    java.lang.Object b -> vKAt
    java.lang.Object c -> bYXn
    java.lang.Object d -> MvPG
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> BdMc
    25:26:void setA(java.lang.Object) -> Ahlu
    30:30:java.lang.Object getB() -> rMsj
    35:36:void setB(java.lang.Object) -> hbMS
    40:40:java.lang.Object getC() -> tCXJ
    45:46:void setC(java.lang.Object) -> NoTr
    50:50:java.lang.Object getD() -> hQVs
    55:56:void setD(java.lang.Object) -> TNcE
react.glang.GSet -> HCVg:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> rxba:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> ryjQ
    java.lang.Object b -> vKAt
    java.lang.Object c -> bYXn
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> BdMc
    26:27:void setA(java.lang.Object) -> Ahlu
    31:31:java.lang.Object getB() -> rMsj
    36:37:void setB(java.lang.Object) -> hbMS
    41:41:java.lang.Object getC() -> tCXJ
    46:47:void setC(java.lang.Object) -> NoTr
react.gmath.Average -> LrFv:
    double[] values -> Snnt
    double average -> WXyG
    boolean dirty -> ceLs
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> teOi
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> TybN
react.gmath.DoubleArrayUtils -> vAJD:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> kHrj
    17:19:void wrapRight(double[]) -> kHrj
    23:27:void fill(double[],double) -> fill
react.gmath.M -> NMYM:
    int precision -> QGFr
    int modulus -> NFOD
    float[] sin -> ebai
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> kHrj
    31:36:boolean r(java.lang.Double) -> hbMk
    51:51:double tps(long,int) -> fmJA
    63:63:double ticksFromNS(long) -> NoTr
    75:101:java.lang.String toRoman(int) -> rVXF
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> IqFj
    144:216:int fromRoman(java.lang.String) -> YoSr
    226:226:long ns() -> MSKc
    236:236:long ms() -> praN
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> hbMk
    333:333:float sinLookup(int) -> jOAU
react.gnet.client.Client -> sPqV:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> lwxF
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> kHrj
    74:74:react.gnet.packet.PacketHandler getHandler() -> Jbrx
react.gnet.client.IClient -> bhtA:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> kHrj
    react.gnet.packet.PacketHandler getHandler() -> Jbrx
react.gnet.download.Download -> nkud:
    react.gnet.download.DownloadState state -> pbaS
    react.gnet.download.DownloadType type -> eRBR
    react.gnet.download.DownloadStatus status -> JdVL
    react.gnet.download.DownloadMonitor monitor -> YVnk
    java.net.URL url -> url
    java.io.File file -> PCcf
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> OGoO
    92:92:react.gnet.download.DownloadType getType() -> qKPa
    97:97:react.gnet.download.DownloadStatus getStatus() -> Fxiu
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> vIad
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> FpWm:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> kHrj
    void onDownloadStarted(react.gnet.download.Download) -> kHrj
    void onDownloadFinished(react.gnet.download.Download) -> hbMk
    void onDownloadFailed(react.gnet.download.Download) -> doSM
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> kHrj
react.gnet.download.DownloadState -> FpXR:
    react.gnet.download.DownloadState IDLE -> TXaP
    react.gnet.download.DownloadState DOWNLOADING -> rNsy
    react.gnet.download.DownloadState FAILED -> gOUv
    react.gnet.download.DownloadState FINISHED -> wofY
    react.gnet.download.DownloadState[] $VALUES -> AbLm
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> dEJQ:
    long bytesDownloaded -> JSUH
    long bytesTotal -> yBgd
    long bytesPerSecond -> JcxB
    long timeElapsed -> opbu
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> dxSN
    25:25:long getBytesDownloaded() -> doad
    30:31:void setBytesDownloaded(long) -> TNcE
    35:35:long getBytesTotal() -> RkNV
    40:41:void setBytesTotal(long) -> jWRR
    45:45:long getBytesPerSecond() -> Cwsg
    50:51:void setBytesPerSecond(long) -> KLXv
    55:55:long getTimeElapsed() -> UARx
    60:61:void setTimeElapsed(long) -> teOi
react.gnet.download.DownloadType -> eGkq:
    react.gnet.download.DownloadType DETERMINATE -> iwbe
    react.gnet.download.DownloadType INDETERMINATE -> Ucvq
    react.gnet.download.DownloadType[] $VALUES -> vuWn
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> WOeP:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> vssw
    java.lang.String getPacketName() -> maKB
react.gnet.packet.IncompatablePacketException -> CUlM:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> aDPm:
    react.gnet.packet.PacketBinding SERVER_BOUND -> jXcG
    react.gnet.packet.PacketBinding CLIENT_BOUND -> hlOb
    react.gnet.packet.PacketBinding[] $VALUES -> uaSe
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> cIvP:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> XuKt:
    react.glang.GList accept -> jqte
    react.gnet.packet.PacketBinding side -> KolQ
    react.gnet.streams.OSS out -> fCdl
    react.gnet.streams.ISS in -> pcFQ
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> kHrj
    28:34:void accept(react.gnet.packet.IPacket) -> hbMk
    38:46:react.gnet.packet.IPacket findPacket(int) -> ktFw
    51:66:react.gnet.packet.IPacket read() -> qlvH
    71:77:void write(react.gnet.packet.IPacket) -> doSM
react.gnet.packet.UnhandledPacketException -> OjQj:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> LiYR:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> Jbrx
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> KUIg
react.gnet.server.Server -> LiXq:
    int port -> port
    java.net.ServerSocket socket -> aEWS
    react.gnet.packet.PacketHandler handler -> lwxF
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> Jbrx
    37:84:void run() -> run
    88:91:void pstart() -> loIP
    95:96:void pstop() -> bGYJ
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> KUIg
react.gnet.streams.ISS -> QNTl:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> Vfyo
    boolean built -> UliK
    byte[] readBuffer -> wDuH
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> aegc
    64:72:react.glang.GList readStringList() -> RYlb
    77:85:react.glang.GList readDoubleList() -> JQuJ
    90:98:react.glang.GList readLongList() -> GkPJ
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> kHrj
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> kHrj
    136:137:react.gnet.streams.ISS gzip() -> INoo
    142:147:void build() -> rEdn
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> hbMk
    435:436:void close() -> close
react.gnet.streams.OSS -> oUjO:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> gGJA
    react.gnet.streams.StreamBuilder bu -> Vfyo
    boolean built -> UliK
    byte[] writeBuffer -> MeRW
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> oxBt
    41:42:react.gnet.streams.OSS gzip(int) -> mWiA
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> hbMk
    53:58:void build() -> rEdn
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> Ahlu
    102:108:void writeDoubleList(react.glang.GList) -> hbMS
    112:118:void writeLongList(react.glang.GList) -> imaA
    122:128:void writeStreamableList(react.glang.GList) -> GrqA
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> IqSs
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> doSM
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> wMAY:
    react.glang.GList constructors -> TOsT
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> kHrj
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> kHrj
    49:50:void bind(react.gnet.streams.StreamConstructor) -> kHrj
    54:55:void bindGZIP(int) -> fcvX
    59:60:void bindGZIP() -> QEgB
    64:65:void bindCipher(javax.crypto.Cipher) -> doSM
    69:70:void bindBuffer(int) -> JHsf
    74:75:void bindBuffer() -> xWwS
react.gnet.streams.StreamConstructor -> MBIQ:
    java.io.InputStream constructInput(java.io.InputStream) -> kHrj
    java.io.OutputStream constructOutput(java.io.OutputStream) -> kHrj
react.gnet.streams.constructors.BufferedStreamConstructor -> EvGN:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> hbMk
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> hbMk
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> kHrj
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> kHrj
react.gnet.streams.constructors.CipherStreamConstructor -> JcRw:
    javax.crypto.Cipher cipher -> Iqvl
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> doSM
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> doSM
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> kHrj
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> kHrj
react.gnet.streams.constructors.GZipStreamConstructor -> qmRa:
    int compressionLevel -> lUvy
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> KUIg
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> KUIg
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> kHrj
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> kHrj
react.gnet.streams.overlays.CGZIPInputStream -> XcjU:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> GYft:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> XciI:
    void toBytes(react.gnet.streams.OSS) -> kHrj
    void fromBytes(react.gnet.streams.ISS) -> kHrj
react.graph.ColossalView -> BdLg:
    react.papyrus.BufferedFrame view -> HMRK
    react.glang.GMap buffers -> JuYP
    react.glang.GMap graphs -> KokG
    double level -> NNaB
    double targetLevel -> VVXe
    int maxX -> vcsv
    int maxY -> VEXB
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> ECET
    51:77:void render() -> iKkh
    81:98:void scroll(int) -> mWiF
    102:112:void recompile() -> gWGX
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> kHrj
    122:122:react.papyrus.BufferedFrame getView() -> nAgv
    127:127:react.glang.GMap getBuffers() -> inNi
    132:132:react.glang.GMap getGraphs() -> FVhm
    137:137:double getLevel() -> dENH
    142:142:double getTargetLevel() -> PmXN
    147:147:int getMaxX() -> IqUA
    152:152:int getMaxY() -> OitX
react.graph.ColossalView$Builder -> BdLg$kHrj:
    react.glang.GList graphs -> URtm
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> kHrj
    171:191:react.graph.ColossalView compute() -> EKUj
react.graph.CubicleIterator -> YLyT:
    int[][] mapping -> Evjn
    int xCubes -> VVXv
    int yCubes -> NOCA
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> lDER
    47:130:void insert(react.graph.GraphSize,int) -> kHrj
    134:145:void print() -> print
react.graph.Graph2D -> ofjo:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> kHrj
react.graph.GraphLagMap -> qvBy:
    int grid -> PeiN
    org.bukkit.entity.Player viewer -> igCu
    org.bukkit.util.Vector lastVector -> ebfv
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> mjFx
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> CocS
    49:55:void zoomOut() -> UQro
    60:164:void onRender(react.papyrus.BufferedFrame) -> kHrj
    21:21:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> mWiA
react.graph.GraphLagMap$1 -> qvBy$1:
    int[] $SwitchMap$react$api$ChunkIssue -> vJee
    107:107:void <clinit>() -> <clinit>
react.graph.GraphSampleLine -> YEJA:
    double lx -> pADg
    double ly -> esiB
    react.api.ISampler sampler -> xsOe
    react.graph.IFormatter formatter -> LbPh
    byte graphColor -> GInv
    byte backgroundColor -> EfLv
    byte borderColor -> vlhl
    byte textColor -> iEBE
    int ticksLeftTitle -> Bmcf
    int ticksOutTitle -> YNcm
    double nextPoint -> Bush
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> vkXa
    51:183:void onRender(react.papyrus.BufferedFrame) -> kHrj
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> hbMk
    226:254:int getHue(int,int,int) -> doSM
    259:281:void scaleFor(react.glang.GList) -> Jjwq
    285:285:react.graph.IFormatter getFormatter() -> kQfW
    290:291:void setFormatter(react.graph.IFormatter) -> kHrj
    295:295:byte getGraphColor() -> cSOM
    300:301:void setGraphColor(byte) -> kHrj
    305:305:byte getBackgroundColor() -> imrB
    310:311:void setBackgroundColor(byte) -> hbMk
    315:315:byte getBorderColor() -> uXBr
    320:321:void setBorderColor(byte) -> doSM
    325:325:byte getTextColor() -> uWar
    330:331:void setTextColor(byte) -> KUIg
    335:335:react.api.ISampler getSampler() -> iwDM
react.graph.GraphSize -> feBF:
    react.graph.GraphSize WIDE -> xamS
    react.graph.GraphSize FULL -> GuEL
    react.graph.GraphSize SQUARE -> LbPx
    react.graph.GraphSize[] $VALUES -> mama
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> fJuY
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> feBF$1:
    int[] $SwitchMap$react$graph$GraphSize -> dxur
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> LhwC:
    java.lang.String text -> text
    byte fontColor -> bQMq
    byte backgroundColor -> EfLv
    boolean wrote -> CqHy
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> kHrj
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> dEPU
    68:69:void setFontColor(byte) -> TqFU
    73:73:byte getBackgroundColor() -> imrB
    78:79:void setBackgroundColor(byte) -> hbMk
react.graph.GraphingInstance -> tnJk:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> URtm
    react.graph.ColossalView view -> Xmau
    react.papyrus.Papyrus papyrus -> IrWo
    react.papyrus.IRenderer renderer -> FGLN
    boolean mapping -> lVFl
    react.glang.GList msgs -> GlRR
    react.surge.sched.Task waiter -> HMRU
    react.surge.sched.Task waiter2 -> ndpR
    int shift -> tMOt
    int iv -> yuqK
    boolean notif -> rNxv
    boolean doScrolling -> nuqL
    50:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> JIfU
    127:128:void setDoScrolling(boolean) -> NoTr
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> kHrj
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> kHrj
    151:155:void send(java.lang.String) -> UkVj
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> kHrj
    166:205:void on(react.event.ReactScrollEvent) -> kHrj
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> kHrj
    219:227:void destroy() -> destroy
    231:240:void toggle() -> klHf
    244:245:void setGraphs(react.glang.GList) -> NoTr
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> TWdX
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> RkQL
    298:298:react.graph.ColossalView getView() -> quhj
    303:303:react.papyrus.Papyrus getPapyrus() -> yAjq
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> kHrj
    323:324:void setPapyrus(react.papyrus.Papyrus) -> kHrj
    328:329:void setRenderer(react.papyrus.IRenderer) -> kHrj
    333:334:void setMapping(boolean) -> doSM
    338:339:void setMsgs(react.glang.GList) -> TNcE
    343:344:void setWaiter(react.surge.sched.Task) -> kHrj
    348:349:void setWaiter2(react.surge.sched.Task) -> hbMk
    353:354:void setShift(int) -> mhiy
    358:359:void setNotif(boolean) -> TNcE
    363:363:react.papyrus.IRenderer getRenderer() -> loJr
    368:368:boolean isMapping() -> aLXN
    373:373:react.glang.GList getMsgs() -> CofS
    378:378:react.surge.sched.Task getWaiter() -> XdPw
    383:383:react.surge.sched.Task getWaiter2() -> eYUV
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> JRXI
    398:414:void compile() -> OXuj
    418:433:void enableSly() -> WPLg
    437:445:void disableSly() -> mFxk
    32:32:boolean access$000(react.graph.GraphingInstance) -> kHrj
    32:32:react.glang.GList access$100(react.graph.GraphingInstance) -> hbMk
    32:32:boolean access$200(react.graph.GraphingInstance) -> doSM
    32:32:boolean access$202(react.graph.GraphingInstance,boolean) -> kHrj
    32:32:int access$300(react.graph.GraphingInstance) -> KUIg
    32:32:int access$310(react.graph.GraphingInstance) -> TqFU
    32:32:int access$302(react.graph.GraphingInstance,int) -> kHrj
    32:32:react.graph.ColossalView access$400(react.graph.GraphingInstance) -> fmJA
react.graph.GraphingInstance$1 -> tnJk$1:
    org.bukkit.entity.Player val$player -> YyWP
    react.graph.GraphingInstance this$0 -> JKGw
    55:55:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> tnJk$2:
    react.graph.GraphingInstance this$0 -> JKGw
    80:80:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> tnJk$3:
    react.graph.GraphingInstance this$0 -> JKGw
    110:110:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> kHrj
react.graph.IFormatter -> imjF:
    java.lang.String from(double) -> Whlr
react.graph.IGraph -> Usqn:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> DYXA
    long getTimeViewport() -> GINj
    void render(react.papyrus.BufferedFrame) -> doSM
    double getMax() -> getMax
    void setMax(double) -> YoSr
react.graph.NormalGraph -> gWCY:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> SVBs
    long timeViewport -> ekWm
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> DYXA
    35:35:long getTimeViewport() -> GINj
    41:42:void render(react.papyrus.BufferedFrame) -> doSM
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> YoSr
    void onRender(react.papyrus.BufferedFrame) -> kHrj
react.graph.PlotBoard -> YDiT:
    react.glang.GMap plots -> XeSB
    int maxRecordings -> gXKa
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> eXrn
    33:33:long getAccurateTimeSpan() -> aLgI
    38:50:long getMedian(long,long) -> TqFU
    55:55:long getMinimumAccuracyRange() -> fBdV
    60:70:double getMaxValue() -> ebEU
    75:85:double getMinValue() -> dEOY
    90:90:react.glang.GList sort(react.glang.GMap) -> hbMk
    95:105:long earilestRecording() -> VoLA
    110:120:long latestRecording() -> vbsx
    125:126:void reduceBefore(long) -> Whlr
    130:156:void reduceBetween(long,long) -> fmJA
    160:160:boolean before(long,long) -> IqFj
    165:165:boolean after(long,long) -> Ahlu
    170:170:boolean within(long,long,long) -> kHrj
    175:193:react.glang.GMap getBetween(long,long) -> hbMS
    198:200:void plot(long,double) -> kHrj
    204:204:boolean hasAt(long) -> YoSr
    209:209:double getAt(long) -> UkVj
    214:214:int getSize() -> getSize
react.graph.Point -> YDlI:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> MuON:
    int iid -> HVCq
    react.graph.IGraph graph -> CVuB
    react.graph.GraphSize size -> BeVR
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> nAjr
    24:25:void setGraph(react.graph.IGraph) -> kHrj
    29:29:react.graph.GraphSize getSize() -> yBJv
    34:35:void setSize(react.graph.GraphSize) -> kHrj
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> HwAV:
    react.graph.RenderMaxType UNLIMITED -> YOEx
    react.graph.RenderMaxType LIMITED -> cvUq
    react.graph.RenderMaxType[] $VALUES -> ptKX
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> BdMc:
    java.lang.String CRLF -> fvms
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> Dquj
    162:198:java.lang.String toString(react.json.JSONObject) -> hbMk
react.json.HTTPTokener -> rMsj:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> vsrq:
    java.util.ArrayList myArrayList -> JmNV
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> kHrj
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> Ipdv
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> CoUE
    394:399:react.json.JSONObject getJSONObject(int) -> sbKe
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> OPSR
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> kkUc
    515:515:boolean optBoolean(int) -> DXdn
    533:536:boolean optBoolean(int,boolean) -> hbMk
    551:551:double optDouble(int) -> GQMa
    569:572:double optDouble(int,double) -> kHrj
    587:587:int optInt(int) -> ArAo
    605:608:int optInt(int,int) -> Ahlu
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> hbMk
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> kHrj
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> kHrj
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> kHrj
    722:723:react.json.JSONArray optJSONArray(int) -> iBoG
    737:738:react.json.JSONObject optJSONObject(int) -> kkXi
    752:752:long optLong(int) -> jFRk
    770:773:long optLong(int,long) -> kHrj
    788:788:java.lang.String optString(int) -> dLpr
    803:804:java.lang.String optString(int,java.lang.String) -> kHrj
    816:817:react.json.JSONArray put(boolean) -> jWRR
    830:831:react.json.JSONArray put(java.util.Collection) -> kHrj
    845:848:react.json.JSONArray put(double) -> UkVj
    860:861:react.json.JSONArray put(int) -> BuEM
    873:874:react.json.JSONArray put(long) -> Dquj
    887:888:react.json.JSONArray put(java.util.Map) -> kHrj
    902:903:react.json.JSONArray put(java.lang.Object) -> jWRR
    921:922:react.json.JSONArray put(int,boolean) -> doSM
    939:940:react.json.JSONArray put(int,java.util.Collection) -> kHrj
    958:959:react.json.JSONArray put(int,double) -> hbMk
    977:978:react.json.JSONArray put(int,int) -> hbMS
    996:997:react.json.JSONArray put(int,long) -> hbMk
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> kHrj
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> kHrj
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> KLXv
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> kHrj
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> kHrj
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> kHrj
react.json.JSONException -> tLKQ:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> Objd
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> gWGV:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> kHrj
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> CUcK
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> kHrj
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> hbMk
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> Dquj
    379:456:java.lang.String toString(react.json.JSONArray) -> hbMk
    472:552:java.lang.String toString(react.json.JSONObject) -> hbMk
react.json.JSONObject -> OsDu:
    java.util.Map map -> map
    java.lang.Object NULL -> YyYY
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> kHrj
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> hbMk
    480:499:java.lang.String doubleToString(double) -> Dquj
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> VKun
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> legb
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> rVXF
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> doSM
    751:767:java.lang.String[] getNames(java.lang.Object) -> teOi
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> jOAU
    855:855:boolean isNull(java.lang.String) -> ktFw
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> fKTp
    917:937:java.lang.String numberToString(java.lang.Number) -> kHrj
    949:949:java.lang.Object opt(java.lang.String) -> aegc
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> kHrj
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> kHrj
    1018:1018:boolean optBoolean(java.lang.String) -> oxBt
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> kHrj
    1054:1054:double optDouble(java.lang.String) -> mWiA
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> kHrj
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> kHrj
    1116:1119:double optDouble(java.lang.String,double) -> kHrj
    1134:1134:int optInt(java.lang.String) -> fcvX
    1152:1155:int optInt(java.lang.String,int) -> doSM
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> JHsf
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> mWiF
    1198:1198:long optLong(java.lang.String) -> lDER
    1216:1219:long optLong(java.lang.String,long) -> kHrj
    1234:1234:java.lang.String optString(java.lang.String) -> mhiy
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> hbMk
    1255:1305:void populateMap(java.lang.Object) -> Whlr
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> hbMk
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> kHrj
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> hbMk
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> KUIg
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> hbMk
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> kHrj
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> doSM
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> KUIg
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> TqFU
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> kHrj
    1590:1590:java.lang.Object remove(java.lang.String) -> Ipdv
    1605:1640:boolean similar(java.lang.Object) -> KLXv
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> YoSr
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> doSM
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> kHrj
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> kHrj
    2000:2004:void indent(java.io.Writer,int) -> kHrj
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> kHrj
react.json.JSONObject$Null -> OsDu$kHrj:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> KLdu:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> OsEW:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> nckC:
    long character -> NpiV
    boolean eof -> eof
    long index -> ekYw
    long line -> aNMF
    char previous -> jXgU
    java.io.Reader reader -> reader
    boolean usePrevious -> OcKb
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> IFap
    119:131:int dehexchar(char) -> kHrj
    136:136:boolean end() -> Yfqi
    147:153:boolean more() -> hHjK
    164:198:char next() -> next
    213:218:char next(char) -> hbMk
    233:250:java.lang.String next(int) -> kQfW
    263:266:char nextClean() -> lDUc
    287:334:java.lang.String nextString(char) -> doSM
    349:361:java.lang.String nextTo(char) -> KUIg
    376:388:java.lang.String nextTo(java.lang.String) -> CoUE
    403:441:java.lang.Object nextValue() -> kQrq
    458:479:char skipTo(char) -> TqFU
    491:491:react.json.JSONException syntaxError(java.lang.String) -> sbKe
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> eaaU:
    int maxdepth -> slRs
    boolean comma -> uYGG
    char mode -> QhqO
    react.json.JSONObject[] stack -> VMlq
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> kkUc
    157:164:react.json.JSONWriter array() -> nRkl
    180:193:react.json.JSONWriter end(char,char) -> kHrj
    206:206:react.json.JSONWriter endArray() -> VLhQ
    219:219:react.json.JSONWriter endObject() -> Lqne
    235:258:react.json.JSONWriter key(java.lang.String) -> DXdn
    274:285:react.json.JSONWriter object() -> TXFh
    299:310:void pop(char) -> fmJA
    322:329:void push(react.json.JSONObject) -> KUIg
    342:342:react.json.JSONWriter value(boolean) -> KLXv
    356:356:react.json.JSONWriter value(double) -> OPSR
    369:369:react.json.JSONWriter value(long) -> OPSR
    385:385:react.json.JSONWriter value(java.lang.Object) -> UkVj
react.json.XML -> gEcS:
    java.lang.Character AMP -> GJRc
    java.lang.Character APOS -> IOxG
    java.lang.Character BANG -> HEFE
    java.lang.Character EQ -> KxbR
    java.lang.Character GT -> UmNM
    java.lang.Character LT -> LQRI
    java.lang.Character QUEST -> aDyb
    java.lang.Character QUOT -> YWVC
    java.lang.Character SLASH -> DAJJ
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> GQMa
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> kHrj
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> Dquj
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> lDRJ:
    java.util.HashMap entity -> suBu
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> pivs
    108:133:java.lang.Object nextContent() -> maNj
    149:166:java.lang.Object nextEntity(char) -> IqFj
    186:239:java.lang.Object nextMeta() -> uhee
    261:334:java.lang.Object nextToken() -> SKpy
    354:420:boolean skipPast(java.lang.String) -> ArAo
react.lagmap.LagMap -> Yfmn:
    react.glang.GMap chunks -> NNdd
    13:16:void <init>() -> <init>
    20:27:react.glang.GMap getGrandTotalMilliseconds() -> fulU
    32:47:react.glang.GMap getGrandTotal() -> mrPe
    52:61:void pump() -> pYWL
    65:71:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> kHrj
    75:81:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> kHrj
    85:85:react.glang.GMap getChunks() -> sjow
react.lagmap.LagMapChunk -> HKjk:
    react.glang.GMap hits -> YErr
    org.bukkit.Chunk c -> kktY
    14:18:void <init>(org.bukkit.Chunk) -> <init>
    22:36:react.glang.GMap getMS() -> PBiE
    41:65:double totalMS() -> dftU
    70:77:double getMS(react.api.ChunkIssue) -> kHrj
    82:88:void hit(react.api.ChunkIssue,double) -> kHrj
    92:93:void hit(react.api.ChunkIssue) -> hbMk
    97:97:int getX() -> getX
    102:102:int getZ() -> getZ
    107:114:double totalScore() -> rxnc
    119:119:react.glang.GMap getHits() -> FWON
    124:133:void pump() -> pYWL
    138:138:int compareTo(react.lagmap.LagMapChunk) -> kHrj
    143:143:org.bukkit.Chunk getC() -> wKvL
    1:1:int compareTo(java.lang.Object) -> compareTo
react.papyrus.BufferedFrame -> lMBv:
    byte[][] frame -> TPVi
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> kHrj
    90:97:void write(byte) -> fmJA
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> kHrj
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> kHrj
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> kHrj
    153:167:java.awt.image.BufferedImage toBufferedImage() -> MJaY
    175:182:void writeRainbowMul() -> NDrr
    189:196:void writeRainbowAdd() -> Drjo
    203:213:void writeSparks() -> iUAw
    217:223:boolean write(int,int,byte) -> kHrj
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> kHrj
    255:272:void write(react.papyrus.BufferedFrame) -> KUIg
    276:276:byte[][] getRawFrame() -> BSQi
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> bPGC:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> KUIg
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> kHrj
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> BdOC:
    org.bukkit.map.MapView getView() -> YESe
    react.papyrus.BufferedFrame getFrameBuffer() -> Lqqh
    void addRenderer(react.papyrus.IRenderer) -> hbMk
    void clearRenderers() -> pHUK
    react.glang.GList getRenderers() -> SKqu
    void removeRenderer(react.papyrus.IRenderer) -> doSM
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> TNtr
react.papyrus.IRenderer -> iBwx:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> kHrj
react.papyrus.Papyrus -> HmnX:
    org.bukkit.map.MapView map -> ebhL
    react.papyrus.BufferedFrame frameBuffer -> VDyr
    react.papyrus.BufferedFrame lastFrameBuffer -> gFlK
    react.glang.GList renderers -> pAEY
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> YESe
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> Lqqh
    51:52:void addRenderer(react.papyrus.IRenderer) -> hbMk
    57:58:void clearRenderers() -> pHUK
    63:63:react.glang.GList getRenderers() -> SKqu
    69:70:void removeRenderer(react.papyrus.IRenderer) -> doSM
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> TNtr
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> hbMk
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> doSM
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> KUIg
react.papyrus.Papyrus$1 -> HmnX$1:
    org.bukkit.map.MapCanvas val$c -> Iiic
    org.bukkit.map.MapView val$v -> qLXi
    react.papyrus.Papyrus this$0 -> qfLE
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> govl:
    int spaceSize -> QGMv
    java.lang.String fontChars -> uYFN
    int[][] fontData -> OtLb
    react.papyrus.ReactFont Font -> GBBE
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> WFuM:
    react.glang.GList subgoals -> DbmO
    java.lang.String tag -> BSvD
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> teaf
    26:44:void propigate() -> oDoo
    49:50:void addGoal(react.rai.IGoal) -> kHrj
    55:65:react.glang.GList getFailingSubgoals() -> vlHc
    71:71:boolean isFailing() -> QyOg
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> dfrw
    void onPropigated() -> pivY
react.rai.Goal$1 -> WFuM$1:
    react.rai.IGoal val$i -> oEto
    react.rai.Goal this$0 -> FyuD
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> KLct:
    react.glang.GList getSubgoals() -> teaf
    void propigate() -> oDoo
    void onPropigated() -> pivY
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> vlHc
    boolean isFailing() -> QyOg
    boolean onCheckFailing() -> dfrw
    void update() -> update
    void addGoal(react.rai.IGoal) -> kHrj
react.rai.IRAI -> fBaA:
    react.glang.GList getGoals() -> KnmT
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> kHrj
    react.glang.GList getEvents() -> feJN
    void callEvent(react.rai.RAIEvent) -> kHrj
    react.glang.GList getListeners() -> OPeo
react.rai.RAI -> gNSo:
    react.glang.GList goals -> nvWe
    react.glang.GList events -> kmOA
    react.glang.GList logEvents -> YVxI
    react.glang.GList listeners -> MStq
    long since -> JvBA
    react.rai.RAI instance -> MKeT
    21:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> KnmT
    41:42:void addGoal(react.rai.IGoal) -> kHrj
    47:77:void tick() -> tick
    82:82:react.glang.GList getEvents() -> feJN
    88:95:void callEvent(react.rai.RAIEvent) -> kHrj
    100:100:react.glang.GList getListeners() -> OPeo
react.rai.RAIEvent -> tCXJ:
    react.rai.RAIEventType type -> rWpI
    java.lang.String[] pars -> jPXl
    java.lang.String ovt -> TOyJ
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> PJxT
    29:29:java.lang.String[] getPars() -> rxll
    34:34:java.lang.String getOvt() -> EvMq
react.rai.RAIEventType -> hQVs:
    react.rai.RAIEventType FIRE_ACTION -> YEvO
    react.rai.RAIEventType NOTE_GOAL_FAILING -> SnyI
    react.rai.RAIEventType NOTE_GOAL_FIXED -> YhYp
    java.lang.String[] msgs -> eYyg
    react.rai.RAIEventType[] $VALUES -> ohXy
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> VoNT
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> kHrj
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedEntityCounts -> TybN:
    boolean failing -> ujJm
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> dfrw
    91:134:void onPropigated() -> pivY
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> kHrj
react.rai.goals.GoalReducedEntityCounts$1 -> TybN$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> QiTE
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> TybN$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> QiTE
    org.bukkit.Chunk val$lx -> WQRp
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> MSKc:
    boolean failing -> ujJm
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> dfrw
    72:76:void onPropigated() -> pivY
react.rai.goals.GoalStableChunkTime$1 -> MSKc$1:
    react.rai.goals.GoalStableChunkTime this$0 -> nLDQ
    1:48:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> praN:
    boolean failing -> ujJm
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> pivY
    35:35:void letUp() -> Hmti
    40:77:boolean onCheckFailing() -> dfrw
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> kHrj
react.rai.goals.GoalStableEntityTime$1 -> praN$1:
    react.rai.goals.GoalStableEntityTime this$0 -> hAaR
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> Jbrx:
    boolean failing -> ujJm
    react.glang.GMap reocc -> LQTN
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> pivY
    88:125:boolean onCheckFailing() -> dfrw
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> kHrj
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> hbMk
react.rai.goals.GoalStableFluidTime$1 -> Jbrx$1:
    react.rai.goals.GoalStableFluidTime this$0 -> Tiko
    org.bukkit.Chunk val$lx -> WQRp
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> Jbrx$2:
    react.rai.goals.GoalStableFluidTime this$0 -> Tiko
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> OGoO:
    boolean failing -> ujJm
    react.glang.GMap reocc -> LQTN
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> pivY
    89:125:boolean onCheckFailing() -> dfrw
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> kHrj
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> hbMk
react.rai.goals.GoalStableHopperTime$1 -> OGoO$1:
    react.rai.goals.GoalStableHopperTime this$0 -> ahBN
    org.bukkit.Chunk val$lx -> WQRp
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> OGoO$2:
    react.rai.goals.GoalStableHopperTime this$0 -> ahBN
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> qKPa:
    boolean failing -> ujJm
    react.glang.GMap reocc -> LQTN
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> pivY
    89:126:boolean onCheckFailing() -> dfrw
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> kHrj
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> hbMk
react.rai.goals.GoalStableRedstoneTime$1 -> qKPa$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> qfMk
    org.bukkit.Chunk val$lx -> WQRp
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> qKPa$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> qfMk
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> Fxiu:
    boolean failing -> ujJm
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> pivY
    34:58:boolean onCheckFailing() -> dfrw
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> kHrj
react.rai.goals.GoalStableTickTime$1 -> Fxiu$1:
    react.rai.goals.GoalStableTickTime this$0 -> GdFS
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> vIad:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> SUem
    boolean authenticated -> oyXr
    react.remote.server.ServerInfo info -> hBAJ
    react.glang.GMap frems -> FOaJ
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> lfLF
    51:51:react.glang.GMap getFrames() -> nBNE
    56:75:int computeFrames() -> LaOw
    80:92:boolean clearToken() -> Fxox
    97:110:boolean updateServerInfo() -> xFxs
    115:129:boolean refreshToken() -> aMJQ
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> doSM
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> maNF
    165:165:boolean isAuthenticated() -> oxUW
    170:170:react.remote.server.ServerInfo getInfo() -> dEUB
react.remote.client.packet.CPacketClearToken -> dxSN:
    java.lang.String token -> SUem
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> kHrj
    33:34:void fromBytes(react.gnet.streams.ISS) -> kHrj
    38:38:java.lang.String getToken() -> maNF
    43:44:void setToken(java.lang.String) -> iBoG
react.remote.client.packet.CPacketComputeFrames -> doad:
    java.lang.String token -> SUem
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> kHrj
    33:34:void fromBytes(react.gnet.streams.ISS) -> kHrj
    38:38:java.lang.String getToken() -> maNF
    43:44:void setToken(java.lang.String) -> iBoG
react.remote.client.packet.CPacketGetInfo -> RkNV:
    java.lang.String token -> SUem
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> kHrj
    33:34:void fromBytes(react.gnet.streams.ISS) -> kHrj
    38:38:java.lang.String getToken() -> maNF
    43:44:void setToken(java.lang.String) -> iBoG
react.remote.client.packet.CPacketGetToken -> Cwsg:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> kHrj
    36:38:void fromBytes(react.gnet.streams.ISS) -> kHrj
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> UARx:
    java.lang.String token -> SUem
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> kHrj
    33:34:void fromBytes(react.gnet.streams.ISS) -> kHrj
    38:38:java.lang.String getToken() -> maNF
    43:44:void setToken(java.lang.String) -> iBoG
react.remote.client.packet.ClientPacket -> vssw:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> kHrj
    void fromBytes(react.gnet.streams.ISS) -> kHrj
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> vssw
    42:42:java.lang.String getPacketName() -> maKB
react.remote.client.packet.ClientPacketType -> maKB:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> vAvm
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> MeWQ
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> ymdQ
    react.remote.client.packet.ClientPacketType GET_INFO -> ffOD
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> RJUd
    react.remote.client.packet.ClientPacketType[] $VALUES -> Swkm
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> qlvH:
    react.glang.GMap compute(long,long) -> doSM
react.remote.server.KnownUser -> loIP:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> bGYJ:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> kHrj
    38:41:void fromBytes(react.gnet.streams.ISS) -> kHrj
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> RYlb:
    react.glang.GList users -> ujMO
    react.glang.GMap session -> QiUa
    react.glang.GMap lastCompute -> tDeg
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> Bkyk
    44:45:void registerUser(react.remote.server.KnownUser) -> kHrj
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> hbMk
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> kkXi
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> KUIg
    react.remote.server.IFrameComputer getFrameComputer() -> jNgw
    170:171:void markLastCompute(react.remote.server.KnownUser) -> doSM
    175:180:long getLastCompute(react.remote.server.KnownUser) -> KUIg
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> kHrj
    190:191:void deleteSession(react.remote.server.KnownUser) -> TqFU
    195:195:java.lang.String createToken() -> pXxD
react.remote.server.ServerInfo -> JQuJ:
    java.lang.String motd -> SVIu
    int gameProtocol -> CNjV
    java.lang.String gameVersion -> HVJf
    java.lang.String reactVersion -> ujLv
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> xICO
    int viewDistance -> viewDistance
    int gamePort -> mYco
    java.lang.String gameAddress -> YFXp
    react.glang.GList remotePlugins -> xbTV
    react.glang.GList worlds -> ceXq
    react.glang.GList actions -> whAr
    react.glang.GList samplers -> mQRr
    26:26:react.remote.server.ServerInfo empty() -> vlLI
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> kHrj
    146:159:void fromBytes(react.gnet.streams.ISS) -> kHrj
    java.lang.String dgetMotd() -> woCD
    int dgetGameProtocol() -> LFrd
    java.lang.String dgetGameVersion() -> lvsF
    java.lang.String dgetReactVersion() -> ghDE
    int dgetMaxPlayers() -> xXRU
    react.glang.GList dgetConnectedPlayers() -> iuyS
    int dgetViewDistance() -> vtPA
    int dgetGamePort() -> wDMn
    java.lang.String dgetGameAddress() -> wDMm
    react.glang.GList dgetRemotePlugins() -> Dioh
    react.glang.GList dgetWorlds() -> mPCM
    react.glang.GList dgetActions() -> fKMW
    react.glang.GList dgetSamplers() -> iCUL
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> xqqV
    199:199:java.lang.String getGameVersion() -> Ywxf
    204:204:java.lang.String getReactVersion() -> HDER
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> UklY
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> ryQc
    229:229:java.lang.String getGameAddress() -> qumc
    234:234:react.glang.GList getRemotePlugins() -> pHVd
    239:239:react.glang.GList getWorlds() -> tDAw
    244:244:react.glang.GList getActions() -> XRcs
    249:249:react.glang.GList getSamplers() -> bqsA
react.remote.server.ServerInfo$1 -> JQuJ$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> mPCM
    37:37:int dgetViewDistance() -> vtPA
    43:43:react.glang.GList dgetRemotePlugins() -> Dioh
    49:49:java.lang.String dgetReactVersion() -> ghDE
    55:55:java.lang.String dgetMotd() -> woCD
    61:61:int dgetMaxPlayers() -> xXRU
    67:67:java.lang.String dgetGameVersion() -> lvsF
    73:73:int dgetGameProtocol() -> LFrd
    79:79:int dgetGamePort() -> wDMn
    85:85:java.lang.String dgetGameAddress() -> wDMm
    91:91:react.glang.GList dgetConnectedPlayers() -> iuyS
    97:97:react.glang.GList dgetActions() -> fKMW
    103:103:react.glang.GList dgetSamplers() -> iCUL
react.remote.server.packet.ComputedFrame -> GkPJ:
    react.glang.GMap values -> ffRK
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> kHrj
    28:36:void fromBytes(react.gnet.streams.ISS) -> kHrj
    40:40:react.glang.GMap getValues() -> ETNU
    45:46:void setValues(react.glang.GMap) -> doSM
react.remote.server.packet.SPacketOk -> INoo:
    boolean ok -> gaCp
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> kHrj
    33:34:void fromBytes(react.gnet.streams.ISS) -> kHrj
    38:38:boolean isOk() -> RsfC
    43:44:void setOk(boolean) -> teOi
react.remote.server.packet.SPacketSendFrames -> rEdn:
    react.glang.GMap frames -> yvXj
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> kHrj
    36:44:void fromBytes(react.gnet.streams.ISS) -> kHrj
    48:48:react.glang.GMap getFrames() -> nBNE
    53:54:void setFrames(react.glang.GMap) -> KUIg
react.remote.server.packet.SPacketSendInfo -> IqSs:
    react.remote.server.ServerInfo info -> hBAJ
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> kHrj
    33:34:void fromBytes(react.gnet.streams.ISS) -> kHrj
    38:38:react.remote.server.ServerInfo getInfo() -> dEUB
    43:44:void setInfo(react.remote.server.ServerInfo) -> kHrj
react.remote.server.packet.SPacketSendToken -> QEgB:
    java.lang.String token -> SUem
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> kHrj
    33:34:void fromBytes(react.gnet.streams.ISS) -> kHrj
    38:38:java.lang.String getToken() -> maNF
    43:44:void setToken(java.lang.String) -> iBoG
react.remote.server.packet.ServerPacket -> xWwS:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> kHrj
    void fromBytes(react.gnet.streams.ISS) -> kHrj
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> vssw
    42:42:java.lang.String getPacketName() -> maKB
react.remote.server.packet.ServerPacketType -> ECET:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> xsTy
    react.remote.server.packet.ServerPacketType SEND_INFO -> tUgU
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> YOKE
    react.remote.server.packet.ServerPacketType OK -> jHIx
    react.remote.server.packet.ServerPacketType[] $VALUES -> BmjA
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> iKkh:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleAsyncQueue$1 -> iKkh$1:
    react.sampler.SampleAsyncQueue this$0 -> fUOq
    21:21:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleChunkTime -> gWGX:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleChunkTime$1 -> gWGX$1:
    react.sampler.SampleChunkTime this$0 -> mYcc
    21:21:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleChunksLoaded -> nAgv:
    react.graph.IFormatter formatter -> LbPh
    18:27:void <init>() -> <init>
    32:38:void construct() -> OHEx
    43:44:void sample() -> vkXa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleChunksLoaded$1 -> nAgv$1:
    react.sampler.SampleChunksLoaded this$0 -> SwkG
    20:20:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> Whlr
react.sampler.SampleChunksLoadedPerSecond -> inNi:
    react.gmath.Average a -> vKKu
    react.graph.IFormatter formatter -> LbPh
    16:29:void <init>() -> <init>
    34:40:void construct() -> OHEx
    45:47:void sample() -> vkXa
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleChunksLoadedPerSecond$1 -> inNi$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> htfu
    22:22:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> Whlr
react.sampler.SampleEntitiesDrops -> FVhm:
    react.graph.IFormatter formatter -> LbPh
    18:27:void <init>() -> <init>
    32:38:void construct() -> OHEx
    43:44:void sample() -> vkXa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleEntitiesDrops$1 -> FVhm$1:
    react.sampler.SampleEntitiesDrops this$0 -> pblR
    20:20:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> Whlr
react.sampler.SampleEntitiesLiving -> dENH:
    react.graph.IFormatter formatter -> LbPh
    18:27:void <init>() -> <init>
    32:38:void construct() -> OHEx
    43:44:void sample() -> vkXa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleEntitiesLiving$1 -> dENH$1:
    react.sampler.SampleEntitiesLiving this$0 -> OtPT
    20:20:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> Whlr
react.sampler.SampleEntitiesTiles -> PmXN:
    react.graph.IFormatter formatter -> LbPh
    18:27:void <init>() -> <init>
    32:38:void construct() -> OHEx
    43:44:void sample() -> vkXa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleEntitiesTiles$1 -> PmXN$1:
    react.sampler.SampleEntitiesTiles this$0 -> GSGN
    20:20:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> Whlr
react.sampler.SampleEntitiesTotal -> IqUA:
    react.graph.IFormatter formatter -> LbPh
    18:27:void <init>() -> <init>
    32:38:void construct() -> OHEx
    43:44:void sample() -> vkXa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleEntitiesTotal$1 -> IqUA$1:
    react.sampler.SampleEntitiesTotal this$0 -> GJVF
    20:20:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> Whlr
react.sampler.SampleEntityDroppedTicks -> OitX:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleEntityDroppedTicks$1 -> OitX$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> WPsT
    21:21:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleEntityTime -> EKUj:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleEntityTime$1 -> EKUj$1:
    react.sampler.SampleEntityTime this$0 -> qfNy
    21:21:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleEntityTimeLock -> CocS:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleEntityTimeLock$1 -> CocS$1:
    react.sampler.SampleEntityTimeLock this$0 -> YVxw
    21:21:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleExplosionTime -> UQro:
    react.graph.IFormatter formatter -> LbPh
    18:27:void <init>() -> <init>
    32:38:void construct() -> OHEx
    43:44:void sample() -> vkXa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleExplosionTime$1 -> UQro$1:
    react.sampler.SampleExplosionTime this$0 -> BnLJ
    20:20:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> Whlr
react.sampler.SampleFluidPerSecond -> cSOM:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleFluidPerSecond$1 -> cSOM$1:
    react.sampler.SampleFluidPerSecond this$0 -> igHn
    21:21:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleFluidPerTick -> imrB:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    46:53:void sample() -> vkXa
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleFluidPerTick$1 -> imrB$1:
    react.sampler.SampleFluidPerTick this$0 -> Pnav
    21:21:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleFluidTickTime -> uXBr:
    react.graph.IFormatter formatter -> LbPh
    18:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleFluidTickTime$1 -> uXBr$1:
    react.sampler.SampleFluidTickTime this$0 -> xaqu
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleFluidTickUtilization -> uWar:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    46:53:void sample() -> vkXa
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleFluidTickUtilization$1 -> uWar$1:
    react.sampler.SampleFluidTickUtilization this$0 -> DboH
    21:21:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleHopperPerSecond -> iwDM:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleHopperPerSecond$1 -> iwDM$1:
    react.sampler.SampleHopperPerSecond this$0 -> FaEb
    21:21:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleHopperPerTick -> fJuY:
    react.graph.IFormatter formatter -> LbPh
    19:29:void <init>() -> <init>
    34:40:void construct() -> OHEx
    47:54:void sample() -> vkXa
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleHopperPerTick$1 -> fJuY$1:
    react.sampler.SampleHopperPerTick this$0 -> lNNt
    21:21:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleHopperTickTime -> dEPU:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleHopperTickTime$1 -> dEPU$1:
    react.sampler.SampleHopperTickTime this$0 -> sceD
    21:21:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleHopperTickUtilization -> JIfU:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    46:53:void sample() -> vkXa
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleHopperTickUtilization$1 -> JIfU$1:
    react.sampler.SampleHopperTickUtilization this$0 -> Enbv
    21:21:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleMemoryAllocated -> klHf:
    react.graph.IFormatter formatter -> LbPh
    18:27:void <init>() -> <init>
    32:38:void construct() -> OHEx
    43:44:void sample() -> vkXa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleMemoryAllocated$1 -> klHf$1:
    react.sampler.SampleMemoryAllocated this$0 -> rXQS
    20:20:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> Whlr
react.sampler.SampleMemoryAllocationPerSecond -> TWdX:
    react.graph.IFormatter formatter -> LbPh
    18:27:void <init>() -> <init>
    32:38:void construct() -> OHEx
    43:44:void sample() -> vkXa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleMemoryAllocationPerSecond$1 -> TWdX$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> brtt
    20:20:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> Whlr
react.sampler.SampleMemoryFree -> RkQL:
    react.graph.IFormatter formatter -> LbPh
    18:27:void <init>() -> <init>
    32:38:void construct() -> OHEx
    43:44:void sample() -> vkXa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleMemoryFree$1 -> RkQL$1:
    react.sampler.SampleMemoryFree this$0 -> oqJs
    20:20:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> Whlr
react.sampler.SampleMemoryMax -> quhj:
    react.graph.IFormatter formatter -> LbPh
    18:27:void <init>() -> <init>
    32:38:void construct() -> OHEx
    43:44:void sample() -> vkXa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleMemoryMax$1 -> quhj$1:
    react.sampler.SampleMemoryMax this$0 -> MSxt
    20:20:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> Whlr
react.sampler.SampleMemoryUse -> yAjq:
    react.graph.IFormatter formatter -> LbPh
    18:27:void <init>() -> <init>
    32:38:void construct() -> OHEx
    43:44:void sample() -> vkXa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleMemoryUse$1 -> yAjq$1:
    react.sampler.SampleMemoryUse this$0 -> vubS
    20:20:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> Whlr
react.sampler.SamplePhysicsTickTime -> loJr:
    react.graph.IFormatter formatter -> LbPh
    18:27:void <init>() -> <init>
    32:38:void construct() -> OHEx
    43:44:void sample() -> vkXa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SamplePhysicsTickTime$1 -> loJr$1:
    react.sampler.SamplePhysicsTickTime this$0 -> fURI
    20:20:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> Whlr
react.sampler.SampleRedstonePerSecond -> CofS:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleRedstonePerSecond$1 -> CofS$1:
    react.sampler.SampleRedstonePerSecond this$0 -> PDQi
    21:21:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleRedstonePerTick -> XdPw:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    46:53:void sample() -> vkXa
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleRedstonePerTick$1 -> XdPw$1:
    react.sampler.SampleRedstonePerTick this$0 -> gOdV
    21:21:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleRedstoneTickTime -> eYUV:
    react.graph.IFormatter formatter -> LbPh
    18:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleRedstoneTickTime$1 -> eYUV$1:
    react.sampler.SampleRedstoneTickTime this$0 -> IipY
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleRedstoneTickUtilization -> JRXI:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    46:53:void sample() -> vkXa
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleRedstoneTickUtilization$1 -> JRXI$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> LjiT
    21:21:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleSyncQueue -> OXuj:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleSyncQueue$1 -> OXuj$1:
    react.sampler.SampleSyncQueue this$0 -> VMrb
    21:21:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleTickTime -> WPLg:
    react.graph.IFormatter formatter -> LbPh
    react.gmath.Average aa -> DssT
    17:29:void <init>() -> <init>
    34:40:void construct() -> OHEx
    45:47:void sample() -> vkXa
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleTickTime$1 -> WPLg$1:
    react.sampler.SampleTickTime this$0 -> RJXV
    22:22:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> Whlr
react.sampler.SampleTickUtilization -> mFxk:
    react.graph.IFormatter formatter -> LbPh
    react.gmath.Average aa -> DssT
    17:29:void <init>() -> <init>
    34:40:void construct() -> OHEx
    45:47:void sample() -> vkXa
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleTickUtilization$1 -> mFxk$1:
    react.sampler.SampleTickUtilization this$0 -> RJXT
    22:22:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> Whlr
react.sampler.SampleTicksPerSecond -> DYXA:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleTicksPerSecond$1 -> DYXA$1:
    react.sampler.SampleTicksPerSecond this$0 -> Lryj
    21:21:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleTileDroppedTicks -> GINj:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleTileDroppedTicks$1 -> GINj$1:
    react.sampler.SampleTileDroppedTicks this$0 -> iEHp
    21:21:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleTileTime -> eXrn:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleTileTime$1 -> eXrn$1:
    react.sampler.SampleTileTime this$0 -> ayHK
    21:21:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.sampler.SampleTileTimeLock -> aLgI:
    react.graph.IFormatter formatter -> LbPh
    19:28:void <init>() -> <init>
    33:39:void construct() -> OHEx
    44:45:void sample() -> vkXa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> kQfW
react.sampler.SampleTileTimeLock$1 -> aLgI$1:
    react.sampler.SampleTileTimeLock this$0 -> OtSm
    21:21:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> Whlr
react.security.checkpoints.SecurityCheckpointAlpha -> fBdV:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> INwk
    78:148:void doScan(java.lang.Runnable) -> hbMk
    152:181:byte[] readResource(java.io.File,java.lang.String) -> kHrj
    186:217:react.glang.GMap scan(java.io.File) -> hbMk
    33:33:byte[] access$000(java.io.File,java.lang.String) -> hbMk
react.security.checkpoints.SecurityCheckpointAlpha$1 -> fBdV$1:
    java.lang.Runnable val$r -> tVJR
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> fBdV$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> SUlE
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> ebEU:
    java.lang.String ip -> KhHI
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> dEOY:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> dEOY$1:
    java.io.File val$f -> WbXd
    react.security.locks.SecurityLockAlpha this$0 -> JTBu
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> VoLA:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> OPSR
react.slate.PhantomSlate -> vbsx:
    react.glang.GList lines -> xQTc
    react.glang.GList viewers -> PCpB
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> whDH
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> gyRK
    44:45:void set(int,java.lang.String) -> hbMk
    50:51:void setLines(react.glang.GList) -> jWRR
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> rEdn
    91:95:void addViewer(org.bukkit.entity.Player) -> OPSR
    100:102:void removeViewer(org.bukkit.entity.Player) -> CUcK
    107:107:react.glang.GList getViewers() -> rVmT
    113:113:boolean isViewing(org.bukkit.entity.Player) -> VKun
    119:120:void addLine(java.lang.String) -> jFRk
    125:126:void clearLines() -> nBOo
react.slate.Slate -> nAjr:
    void build() -> rEdn
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> gyRK
    void set(int,java.lang.String) -> hbMk
    void setLines(react.glang.GList) -> jWRR
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> OPSR
    void addLine(java.lang.String) -> jFRk
    void clearLines() -> nBOo
    void removeViewer(org.bukkit.entity.Player) -> CUcK
    react.glang.GList getViewers() -> rVmT
    boolean isViewing(org.bukkit.entity.Player) -> VKun
    void update() -> update
react.slate.SlateUtil -> yBJv:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> jpxJ
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> pPgD
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> kHrj
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> hbMk
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> doSM
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> kHrj
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> kHrj
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> hbMk
    186:196:java.lang.String convertJSON(java.lang.String) -> dLpr
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> hbMk
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> kHrj
react.surge.Main -> fKTp:
    react.glang.GList plugins -> vmPm
    react.glang.GMap pluginInstances -> Fhuu
    react.glang.GList controllerSet -> LbWc
    react.glang.GMap anchors -> vlpX
    react.glang.GList classes -> sSGE
    java.lang.reflect.Field nsField -> OlAr
    java.lang.reflect.Field thField -> tMWw
    react.glang.GList tracks -> LsXy
    long nsf -> LkHr
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> EBiw
    90:109:long getNanoSync() -> DsLi
    114:115:void requestResetNanos() -> eixW
    119:127:void requestReload() -> ogVX
    131:134:void requestReload(java.lang.Runnable) -> doSM
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> kHrj
    201:218:void onStop() -> RRBX
    224:224:void onPostInit() -> WjCI
    230:230:void onPreInit() -> xaNn
    234:245:void shutDownAmps() -> BcvB
    249:458:void initializeAmps() -> ESlV
    463:504:void doScan() -> Yfuy
    508:530:void scanForPoolDefiners() -> RjsU
    534:550:void scanForRawEvents() -> iDBU
    554:570:void scanForDynamicTrack() -> HLWS
    574:595:void scanForAmps() -> RYtN
    600:611:void onTick() -> NDek
react.surge.Main$1 -> fKTp$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> IFap:
    react.surge.control.AmpedPlugin plugin -> aVao
    boolean connected -> connected
    int masterTask -> hItr
    java.lang.Runnable onReload -> FXUt
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> xaQx
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> wMNV
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> kHrj
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> kHrj
    123:124:void stopTask(int) -> Oigp
    128:128:react.surge.control.AmpedPlugin getPlugin() -> skUY
    133:133:int getMasterTask() -> MJdu
    138:138:java.lang.Runnable getOnReload() -> HfIs
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> kHrj
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> vkXa
    158:159:void setOnReload(java.lang.Runnable) -> KUIg
    67:67:void access$0(react.surge.PluginAmp) -> kHrj
react.surge.PluginAmp$1 -> IFap$1:
    react.surge.PluginAmp this$0 -> mYcy
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> IFap$2:
    react.surge.PluginAmp this$0 -> mYcy
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> IFap$3:
    react.surge.PluginAmp this$0 -> mYcy
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> Yfqi:
    react.surge.PluginAmp amp -> YEye
    react.glang.GList tickComponents -> xrvE
    react.glang.GList atickComponents -> rPCL
    react.surge.sched.TaskManager taskmgr -> sAbt
    react.surge.hotload.HotloadManager hotloadmgr -> etQX
    java.lang.Thread mainThread -> BnNG
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> kHrj
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> BuEM
    44:44:java.io.File folder() -> ySSo
    49:51:java.io.File getPluginJarFile() -> BtxS
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> KUIg
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> PBlw
    74:74:react.glang.GList getTickComponents() -> lLmU
    79:79:react.glang.GList getAsyncTickComponents() -> xYAm
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> kHrj
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> hbMk
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> hbMk
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> SDGS
    126:126:boolean hasAmp() -> jXIi
    131:131:react.surge.PluginAmp getAmp() -> bPQQ
    136:136:react.surge.sched.TaskManager getTaskManager() -> MuWr
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> Dakv
react.surge.cluster.Cluster -> hHjK:
    react.surge.cluster.ClusterType type -> lxdg
    java.lang.Object t -> ujAx
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> anpF
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> lDUc:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> kQrq:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> nRkl:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> VLhQ:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> Lqne:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> TXFh:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> pivs:
    react.surge.cluster.ClusterType INT -> pQoe
    react.surge.cluster.ClusterType BOOLEAN -> jsCL
    react.surge.cluster.ClusterType STRING -> GBJS
    react.surge.cluster.ClusterType STRING_LIST -> DQrL
    react.surge.cluster.ClusterType DOUBLE -> hckG
    react.surge.cluster.ClusterType LONG -> SUly
    react.surge.cluster.ClusterType[] ENUM$VALUES -> wEcR
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> maNj:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> yLJJ
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> kHrj
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> kHrj
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> fBjO
react.surge.cluster.ConfigurationDataOutput -> uhee:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> hbMk
react.surge.cluster.DataCluster -> SKpy:
    react.glang.GMap clusters -> cnMd
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> WjEO
    29:33:void fromJson(react.json.JSONObject) -> TqFU
    37:44:react.json.JSONObject toJson() -> qJym
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> NNHg
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> kHrj
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> kQfW
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> fmJA
    194:195:void set(java.lang.String,int) -> TqFU
    199:200:void set(java.lang.String,boolean) -> doSM
    204:205:void set(java.lang.String,double) -> doSM
    209:210:void set(java.lang.String,long) -> doSM
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> kHrj
react.surge.cluster.ICluster -> fulU:
    react.surge.cluster.ClusterType getType() -> anpF
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> mrPe:
react.surge.cluster.IDataInput -> pYWL:
    react.surge.cluster.DataCluster read(java.io.File) -> doSM
react.surge.cluster.IDataOutput -> sjow:
    void write(react.surge.cluster.DataCluster,java.io.File) -> kHrj
react.surge.cluster.Key -> PBiE:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> dftU:
    int value() -> value
react.surge.cluster.KeyStore -> rxnc:
react.surge.cluster.ReflectedConfigurationException -> FWON:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> MJaY:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> doSM
react.surge.cluster.YamlDataOutput -> NDrr:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> kHrj
react.surge.collection.GSound -> Drjo:
    java.lang.String sound -> OtVE
    org.bukkit.Sound iSound -> qetE
    java.lang.Float volume -> hcir
    java.lang.Float pitch -> OIaX
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> legb
    61:72:void play(org.bukkit.Location) -> fmJA
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> kHrj
    93:93:java.lang.String getSound() -> cdUf
    98:99:void setSound(java.lang.String) -> lfLF
    103:103:org.bukkit.Sound getiSound() -> Wicg
    108:109:void setiSound(org.bukkit.Sound) -> kHrj
    113:113:java.lang.Float getVolume() -> FEqt
    118:119:void setVolume(java.lang.Float) -> kHrj
    123:123:java.lang.Float getPitch() -> wnqn
    128:129:void setPitch(java.lang.Float) -> hbMk
react.surge.control.AmpedPlugin -> iUAw:
    react.glang.GList controllers -> QPII
    react.gconcurrent.ParallelPoolManager pp -> GdMl
    react.surge.server.CoreTickThread ctt -> GdNO
    24:50:void <init>() -> <init>
    void doScan() -> Yfuy
    long getNanoSync() -> DsLi
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:91:void onDisable() -> onDisable
    96:96:react.glang.GList getControllers() -> RtIh
    102:103:void registerController(react.surge.control.IController) -> kHrj
    108:119:void onTick() -> NDek
    124:124:java.lang.String getTickName() -> ccgU
    130:130:react.gconcurrent.ParallelPoolManager getThreadPool() -> XKGb
    136:251:void destroyOldThreads() -> FODc
    void onControllerRegistry() -> EBiw
    void onStart(react.surge.util.Protocol) -> kHrj
    void onStop() -> RRBX
    void onPostInit() -> WjCI
    void onPreInit() -> xaNn
react.surge.control.AmpedPlugin$1 -> iUAw$1:
    react.surge.control.AmpedPlugin this$0 -> iwnQ
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> MBIQ
react.surge.control.AmpedPlugin$2 -> iUAw$2:
    react.surge.control.AmpedPlugin this$0 -> iwnQ
    1:149:void <init>(react.surge.control.AmpedPlugin) -> <init>
    154:244:void run() -> run
react.surge.control.Control -> BSQi:
react.surge.control.Controller -> YESe:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> Lqqh:
react.surge.control.Enable -> pHUK:
react.surge.control.IController -> SKqu:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> TNtr:
react.surge.control.Plugin -> teaf:
react.surge.control.SurgePlugin -> oDoo:
    void onStart(react.surge.util.Protocol) -> kHrj
    void onStop() -> RRBX
    void onPostInit() -> WjCI
    void onPreInit() -> xaNn
    void onControllerRegistry() -> EBiw
    void registerController(react.surge.control.IController) -> kHrj
    react.glang.GList getControllers() -> RtIh
    react.gconcurrent.ParallelPoolManager getThreadPool() -> XKGb
react.surge.hotload.HotloadManager -> vlHc:
    react.glang.GMap filemods -> KFEL
    react.glang.GMap filesizes -> Fyyi
    react.glang.GMap fileacts -> ifmE
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> kHrj
    35:38:void untrack(java.io.File) -> KUIg
    42:45:void untrackall() -> XdXp
    50:86:void onTick() -> NDek
    91:91:java.lang.String getTickName() -> ccgU
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> kHrj
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> hbMk
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> doSM
react.surge.hotload.HotloadManager$1 -> vlHc$1:
    react.surge.hotload.HotloadManager this$0 -> MnNM
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> QyOg:
    boolean init -> DkdB
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> pkbE
    java.lang.Class IChatBaseComponent -> JTCg
    java.lang.Class ChatSerializer -> OJAO
    java.lang.Class PacketPlayOutPlayerInfo -> ORPu
    java.lang.Class PlayerInfoData -> RSIp
    java.lang.Class EnumPlayerInfoAction -> ELdM
    java.lang.Class GameProfile -> ETsv
    java.lang.Class EnumGamemode -> UBaG
    java.lang.Class TileEntitySkull -> mrwy
    java.lang.Class LoadingCache -> JeFA
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> dfrw:
    react.surge.nms.NMSX bountifulAPI -> cCYT
    boolean useOldMethods -> vmRi
    java.lang.String nmsver -> sIvN
    java.lang.Object eTimes -> keCR
    java.lang.Object eTitle -> sdIa
    java.lang.Object eSubtitle -> wyFo
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> kHrj
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> Oigp
    75:89:java.lang.Class getCBClass(java.lang.String) -> vkXa
    96:104:java.lang.Object serializeChat(java.lang.String) -> OHEx
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> hbMk
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> kHrj
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> kknq
    151:151:java.lang.String craftPackage() -> JdAx
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> kHrj
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> kHrj
    197:207:java.lang.Class getNMSClass(java.lang.String) -> jOCa
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> kHrj
    279:280:void clearTitle(org.bukkit.entity.Player) -> rVXF
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> hbMk
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> kHrj
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> kHrj
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> myoD
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> fmJA
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> Ahlu
    434:447:int ping(org.bukkit.entity.Player) -> jOAU
react.surge.nms.NMSX$1 -> dfrw$1:
    org.bukkit.entity.Player val$player -> YyWP
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> dfrw$2:
    org.bukkit.entity.Player val$player -> YyWP
    java.lang.String val$message -> nmkY
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> pivY:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> Iyou
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> kHrj
    68:82:void clearTitle(org.bukkit.entity.Player) -> rVXF
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> kHrj
react.surge.nms.PacketUtil$V -> pivY$kHrj:
    react.surge.nms.PacketUtil$V R17 -> Eewx
    react.surge.nms.PacketUtil$V R18 -> ChdA
    react.surge.nms.PacketUtil$V R19 -> fUUo
    react.surge.nms.PacketUtil$V R111 -> CiEG
    react.surge.nms.PacketUtil$V R110 -> aVgV
    react.surge.nms.PacketUtil$V R112 -> KyLg
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> yLKl
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> KnmT:
    java.lang.String title -> title
    java.lang.String subTitle -> ubBp
    java.lang.String action -> action
    java.lang.Integer fadeIn -> ujRa
    java.lang.Integer fadeOut -> FFyM
    java.lang.Integer stayTime -> PLey
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> ktFw
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> sABw
    79:80:void setSubTitle(java.lang.String) -> Gapo
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> PTRJ
    99:100:void setFadeIn(java.lang.Integer) -> doSM
    104:104:java.lang.Integer getFadeOut() -> eamg
    109:110:void setFadeOut(java.lang.Integer) -> KUIg
    114:114:java.lang.Integer getStayTime() -> TiNu
    119:120:void setStayTime(java.lang.Integer) -> TqFU
react.surge.nms.VersionBukkit -> feJN:
    react.surge.nms.VersionBukkit VU -> QWyf
    react.surge.nms.VersionBukkit V7 -> VEgW
    react.surge.nms.VersionBukkit V8 -> iEMY
    react.surge.nms.VersionBukkit V9 -> HpCt
    react.surge.nms.VersionBukkit V11 -> wVfQ
    react.surge.nms.VersionBukkit V111 -> RSMd
    react.surge.nms.VersionBukkit V112 -> ptTb
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> ptTc
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> jOYd
    27:32:boolean uc() -> SKwC
    37:67:react.surge.nms.VersionBukkit get() -> gxsx
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> OPeo:
    void burst(java.lang.Object) -> Dquj
    void setTimeLock(double) -> CUcK
    double getEstimatedTimeUse() -> iehb
    int flush() -> bXcW
    int flush(react.gbench.Profiler) -> kHrj
    void queue(java.lang.Object) -> OPSR
    void queue(java.util.List) -> doSM
    void queue(java.lang.Object[]) -> kHrj
react.surge.sched.ICancellable -> PJxT:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> rxll:
    void onTick() -> NDek
    java.lang.String getTickName() -> ccgU
react.surge.sched.ITask -> EvMq:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> htHR
    java.lang.String getName() -> getName
    double getComputeTime() -> bOqk
    double getTotalComputeTime() -> sHrX
    double getActiveTime() -> yuWr
    boolean hasCompleted() -> mHBd
react.surge.sched.Task -> VoNT:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> GSLh
    double computeTime -> sRii
    double totalComputeTime -> DkfJ
    double activeTime -> lMuR
    boolean completed -> completed
    react.gbench.Profiler profiler -> kvFy
    react.gbench.Profiler activeProfiler -> QrKt
    int ticks -> BKmt
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> KUIg
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> htHR
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> bOqk
    150:150:boolean hasCompleted() -> mHBd
    156:156:double getTotalComputeTime() -> sHrX
    162:162:double getActiveTime() -> yuWr
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> doSM
    15:15:void access$1(react.surge.sched.Task,boolean) -> kHrj
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> KUIg
    14:14:void access$3(react.surge.sched.Task,double) -> kHrj
    12:12:void access$4(react.surge.sched.Task,double) -> hbMk
    14:14:double access$5(react.surge.sched.Task) -> TqFU
    13:13:void access$6(react.surge.sched.Task,double) -> doSM
    13:13:double access$7(react.surge.sched.Task) -> fmJA
    12:12:double access$8(react.surge.sched.Task) -> IqFj
react.surge.sched.Task$1 -> VoNT$1:
    react.surge.sched.Task this$0 -> usCK
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> VoNT$2:
    react.surge.sched.Task this$0 -> usCK
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> VoNT$3:
    react.surge.sched.Task this$0 -> usCK
    int val$total -> bkMC
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> Hmti:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> GSLh
    double computeTime -> sRii
    double totalComputeTime -> DkfJ
    double activeTime -> lMuR
    boolean completed -> completed
    react.gbench.Profiler profiler -> kvFy
    react.gbench.Profiler activeProfiler -> QrKt
    int ticks -> BKmt
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> KUIg
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> htHR
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> bOqk
    101:101:boolean hasCompleted() -> mHBd
    107:107:double getTotalComputeTime() -> sHrX
    113:113:double getActiveTime() -> yuWr
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> kHrj
    12:12:void access$1(react.surge.sched.TaskLater,double) -> kHrj
    13:13:double access$2(react.surge.sched.TaskLater) -> hbMk
    12:12:double access$3(react.surge.sched.TaskLater) -> doSM
    13:13:void access$4(react.surge.sched.TaskLater,double) -> hbMk
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> KUIg
    14:14:double access$6(react.surge.sched.TaskLater) -> TqFU
    14:14:void access$7(react.surge.sched.TaskLater,double) -> doSM
react.surge.sched.TaskLater$1 -> Hmti$1:
    react.surge.sched.TaskLater this$0 -> UeFo
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> nBNE:
    react.glang.GList tasks -> uPJI
    react.glang.GMap taskProfiles -> ynMb
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> kHrj
    25:35:void onTick() -> NDek
    39:40:void putFinishingTask(react.surge.sched.ITask) -> hbMk
    44:53:void putTask(react.surge.sched.ITask) -> doSM
    58:58:java.lang.String getTickName() -> ccgU
    63:63:react.glang.GList getTasks() -> GQfL
    68:68:react.glang.GMap getTaskProfiles() -> FguI
react.surge.sched.TaskProfile -> LaOw:
    double activeTime -> lMuR
    double computeTickTime -> lNTr
    double computeTime -> sRii
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> yuWr
    23:24:void setActiveTime(double) -> VKun
    28:28:double getComputeTickTime() -> LOtH
    33:34:void setComputeTickTime(double) -> legb
    38:38:double getComputeTime() -> bOqk
    43:44:void setComputeTime(double) -> rVXF
react.surge.server.AsyncTick -> Fxox:
react.surge.server.CPS -> xFxs:
    react.glang.GMap keys -> hAhR
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> YMSO
    46:99:void scan() -> ermt
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> doSM
react.surge.server.CoreTickThread -> aMJQ:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> maNF:
    long memoryFree -> QFvr
    long memoryUsed -> kvGC
    long memoryMax -> NNob
    long lastMemoryUsed -> pQoq
    long memoryUsedAfterGC -> huNK
    long allocated -> gqij
    long collected -> HxTC
    long collections -> sAhE
    long sms -> NOPj
    long memoryAllocatedPerTick -> bIHs
    long memoryCollectedPerTick -> AHla
    long memoryFullyAllocatedPerTick -> OQty
    long mah -> QOjp
    long mahs -> Cyfs
    22:39:void <init>() -> <init>
    void onAllocationSet() -> WYEV
    46:98:void run() -> run
    102:102:long getMemoryFree() -> WjFi
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> bOrW
    117:117:long getLastMemoryUsed() -> iwMp
    122:122:long getMemoryUsedAfterGC() -> JlTU
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> mrYF
    137:137:long getCollections() -> xGdI
    142:142:long getSms() -> Fxxj
    147:147:long getMemoryAllocatedPerTick() -> WXfr
    152:152:long getMemoryCollectedPerTick() -> GcKU
    157:157:long getMemoryFullyAllocatedPerTick() -> USBR
    162:162:long getMah() -> TiPh
    167:167:long getMahs() -> YNMU
react.surge.server.SuperSampler -> oxUW:
    react.gmath.Average ticksPerSecondL -> XLPF
    react.gmath.Average tickTimeL -> qeyA
    react.gmath.Average mahL -> hAkj
    double ticksPerSecond -> kldf
    double ticksPerSecondRaw -> lyLx
    double tickTime -> klxV
    double tickTimeRaw -> AHkg
    boolean running -> running
    boolean frozen -> LtAt
    double tickUtilizationRaw -> ecVF
    double tickUtilization -> XLNe
    double leftoverTickTime -> wEel
    long memoryUse -> dOPr
    long memoryAllocated -> opsI
    long memoryCollected -> gFwb
    long mahs -> Cyfs
    int totalChunks -> bkNN
    int totalEntities -> DcXA
    int totalDrops -> agjI
    int totalTiles -> whIv
    int totalLiving -> ptWK
    int chunksLoaded -> VyLp
    int chunksUnloaded -> CNsS
    react.surge.server.WorldMonitor worldMonitor -> ywAQ
    react.surge.server.TPSMonitor tpsMonitor -> jXrM
    react.surge.server.MemoryMonitor memoryMonitor -> tVNy
    java.lang.StackTraceElement[] lockStack -> Dbvt
    react.glang.GMap spikes -> dhPK
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> NDek
    154:154:java.lang.String getTickName() -> ccgU
    159:159:react.gmath.Average getTicksPerSecondL() -> Jcca
    164:164:double getTicksPerSecond() -> imjF
    169:169:double getTicksPerSecondRaw() -> qTPm
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> DIAU
    184:184:react.gmath.Average getTickTimeL() -> APVn
    189:189:double getTickTime() -> LjKK
    194:194:double getTickTimeRaw() -> OkDG
    199:199:double getTickUtilizationRaw() -> EduS
    204:204:double getTickUtilization() -> tUJR
    209:209:double getLeftoverTickTime() -> fCPc
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> LqxW
    219:219:long getMemoryUse() -> MSXw
    224:224:long getMemoryAllocated() -> dpMo
    229:229:long getMemoryCollected() -> bOst
    234:234:react.gmath.Average getMahL() -> bYFX
    239:239:long getMahs() -> YNMU
    244:244:int getTotalChunks() -> xrVy
    249:249:int getTotalEntities() -> fvTY
    254:254:int getTotalDrops() -> GQgd
    259:259:int getTotalTiles() -> QOEG
    264:264:int getTotalLiving() -> eanY
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> Mcyp
    274:274:int getChunksLoaded() -> awdq
    279:279:int getChunksUnloaded() -> EKbK
    284:285:void setTicksPerSecondL(react.gmath.Average) -> kHrj
    289:290:void setTickTimeL(react.gmath.Average) -> hbMk
    294:295:void setMahL(react.gmath.Average) -> doSM
    299:300:void setTicksPerSecond(double) -> GrqA
    304:305:void setTicksPerSecondRaw(double) -> jOAU
    309:310:void setTickTime(double) -> ktFw
    314:315:void setTickTimeRaw(double) -> aegc
    319:320:void setRunning(boolean) -> Whlr
    324:325:void setTickUtilizationRaw(double) -> oxBt
    329:330:void setTickUtilization(double) -> mWiA
    334:335:void setLeftoverTickTime(double) -> fcvX
    339:340:void setMemoryUse(long) -> CUcK
    344:345:void setMemoryAllocated(long) -> VKun
    349:350:void setMemoryCollected(long) -> legb
    354:355:void setMahs(long) -> rVXF
    359:360:void setTotalChunks(int) -> OHEx
    364:365:void setTotalEntities(int) -> jOCa
    369:370:void setTotalDrops(int) -> myoD
    374:375:void setTotalTiles(int) -> Gapo
    379:380:void setTotalLiving(int) -> YMSO
    384:385:void setChunksLoaded(int) -> rMhv
    389:390:void setChunksUnloaded(int) -> SBpY
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> kHrj
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> kHrj
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> kHrj
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> Drqr
    419:419:react.glang.GMap getSpikes() -> dEJQ
    31:31:void access$0(react.surge.server.SuperSampler,int) -> kHrj
    33:33:void access$1(react.surge.server.SuperSampler,int) -> hbMk
    34:34:void access$2(react.surge.server.SuperSampler,int) -> doSM
    32:32:void access$3(react.surge.server.SuperSampler,int) -> KUIg
    35:35:void access$4(react.surge.server.SuperSampler,int) -> TqFU
    36:36:void access$5(react.surge.server.SuperSampler,int) -> fmJA
    37:37:void access$6(react.surge.server.SuperSampler,int) -> IqFj
    19:19:void access$7(react.surge.server.SuperSampler,double) -> kHrj
    21:21:void access$8(react.surge.server.SuperSampler,double) -> hbMk
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> kHrj
    19:19:double access$10(react.surge.server.SuperSampler) -> hbMk
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> doSM
    21:21:double access$12(react.surge.server.SuperSampler) -> KUIg
    18:18:void access$13(react.surge.server.SuperSampler,double) -> doSM
    20:20:void access$14(react.surge.server.SuperSampler,double) -> KUIg
    24:24:void access$15(react.surge.server.SuperSampler,double) -> TqFU
    20:20:double access$16(react.surge.server.SuperSampler) -> TqFU
    25:25:void access$17(react.surge.server.SuperSampler,double) -> fmJA
    25:25:double access$18(react.surge.server.SuperSampler) -> fmJA
    26:26:void access$19(react.surge.server.SuperSampler,double) -> IqFj
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> kHrj
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> IqFj
    27:27:void access$22(react.surge.server.SuperSampler,long) -> kHrj
    28:28:void access$23(react.surge.server.SuperSampler,long) -> hbMk
    29:29:void access$24(react.surge.server.SuperSampler,long) -> doSM
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> Ahlu
    30:30:void access$26(react.surge.server.SuperSampler,long) -> KUIg
react.surge.server.SuperSampler$1 -> oxUW$1:
    react.surge.server.SuperSampler this$0 -> uXpu
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> kHrj
react.surge.server.SuperSampler$2 -> oxUW$2:
    react.surge.server.SuperSampler this$0 -> uXpu
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> nRus
    106:107:void onSpike() -> Eutt
react.surge.server.SuperSampler$3 -> oxUW$3:
    react.surge.server.SuperSampler this$0 -> uXpu
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> WYEV
react.surge.server.TPSMonitor -> dEUB:
    double tickTimeMS -> lxjj
    double rawTicksPerSecond -> whMS
    react.gbench.Profiler tickProfiler -> WtBn
    react.gbench.Profiler tickTimeProfiler -> ekiO
    boolean ticked -> oNsJ
    java.lang.Thread$State lastState -> SMcL
    double actualTickTimeMS -> uYUd
    double ltt -> Tiwd
    long lastTick -> pIKA
    boolean frozen -> LtAt
    java.lang.StackTraceElement[] lockedStack -> SxVq
    double lmsx -> IsJe
    23:40:void <init>() -> <init>
    void onTicked() -> nRus
    void onSpike() -> Eutt
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> kHrj
    160:160:double getTickTimeMS() -> GIWj
    165:165:double getRawTicksPerSecond() -> Hvmv
    170:170:react.gbench.Profiler getTickProfiler() -> wwcr
    175:175:boolean isTicked() -> mjFx
    180:181:void markTick() -> hYup
    185:185:react.gbench.Profiler getTickTimeProfiler() -> qdpf
    190:190:java.lang.Thread$State getLastState() -> DYaJ
    195:195:double getActualTickTimeMS() -> IrBV
    200:200:double getLtt() -> oyAk
    205:205:long getLastTick() -> rNNp
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> KwjA
react.surge.server.WorldMonitor -> pXxD:
    boolean chunksChanged -> Enmm
    boolean dropChanged -> foNB
    boolean tileChanged -> RAng
    boolean livingChanged -> JvNO
    boolean totalChanged -> VyQF
    boolean updated -> VVmE
    int totalChunks -> bkNN
    int totalDrops -> agjI
    int totalTiles -> whIv
    int totalLiving -> ptWK
    int totalEntities -> DcXA
    int chunksLoaded -> VyLp
    int chunksUnloaded -> CNsS
    long ms -> nBOo
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> kHrj
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> hbMk
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> kHrj
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> kHrj
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> kHrj
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> kHrj
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> kHrj
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> kHrj
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> kHrj
    130:131:void doUpdate() -> PBrf
    135:186:void sample() -> vkXa
    190:196:void sampleTotalCount() -> NoqQ
    200:206:void sampleLivingCount() -> rNeY
    210:238:void sampleTileCount() -> JIqv
    242:248:void sampleDropCount() -> WikH
    252:258:void sampleChunkCount() -> ghXo
react.surge.text.PhantomSpinner -> vlLI:
    react.surge.text.ProgressSpinner s -> BDBN
    react.surge.text.ProgressSpinner c -> htqe
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> xqqV:
    java.lang.String[] chars -> tVRU
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> ymqi
    react.surge.text.ProgressSpinner NETWORK -> LIPI
    react.surge.text.ProgressSpinner CIRCLES -> foLk
    react.surge.text.ProgressSpinner RANDOMS -> HMdW
    react.surge.text.ProgressSpinner MERGERS -> GJaV
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> KUfd
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> Ywxf:
    int value() -> value
react.surge.util.Area -> HDER:
    org.bukkit.Location location -> ubGD
    java.lang.Double radius -> PoNi
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> kHrj
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> OkDq
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> IqFj
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> Ahlu
    109:109:boolean isWithin(org.bukkit.Location) -> hbMS
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> KUIg
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> kHrj
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> JIsC
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> ktdb
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> imaA
    257:257:java.lang.Double getRadius() -> ylkf
    268:269:void setRadius(java.lang.Double) -> doSM
    278:283:org.bukkit.Location random() -> KDfB
react.surge.util.Axis -> UklY:
    react.surge.util.Axis X -> nfCY
    react.surge.util.Axis Y -> nebW
    react.surge.util.Axis Z -> JCGp
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> hBMc
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> DHbX
    29:29:org.bukkit.util.Vector negative() -> TaBo
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> ryQc:
    react.surge.util.BlastResistance BARRIER -> txUG
    react.surge.util.BlastResistance BEDROCK -> iodU
    react.surge.util.BlastResistance COMMAND -> OQva
    react.surge.util.BlastResistance ENDER_PORTAL -> CWgE
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> oyfW
    react.surge.util.BlastResistance ANVIL -> KFKa
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> aWKs
    react.surge.util.BlastResistance OBSIDIAN -> etYe
    react.surge.util.BlastResistance ENDER_CHEST -> uXrr
    react.surge.util.BlastResistance WATER -> fnjg
    react.surge.util.BlastResistance LAVA -> pIcl
    react.surge.util.BlastResistance STATIONARY_WATER -> MKqE
    react.surge.util.BlastResistance DRAGON_EGG -> dWdJ
    react.surge.util.BlastResistance ENDER_STONE -> lVij
    react.surge.util.BlastResistance COAL_BLOCK -> hSOM
    react.surge.util.BlastResistance DIAMOND_BLOCK -> PnmL
    react.surge.util.BlastResistance EMERALD_BLOCK -> bHlX
    react.surge.util.BlastResistance GOLD_BLOCK -> ymqD
    react.surge.util.BlastResistance IRON_BLOCK -> ywFb
    react.surge.util.BlastResistance REDSTONE_BLOCK -> RSRu
    react.surge.util.BlastResistance BRICK -> GRrl
    react.surge.util.BlastResistance BRICK_STAIRS -> mcCH
    react.surge.util.BlastResistance HARD_CLAY -> XKsE
    react.surge.util.BlastResistance STONE -> bIOh
    react.surge.util.BlastResistance SMOOTH_BRICK -> fnnF
    react.surge.util.BlastResistance SMOOTH_STAIRS -> kBgr
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> Npyu
    react.surge.util.BlastResistance STONE_SLAB2 -> tNCr
    react.surge.util.BlastResistance IRON_DOOR -> jGtg
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> FrSK
    react.surge.util.BlastResistance IRON_TRAPDOOR -> igUn
    react.surge.util.BlastResistance MOB_SPAWNER -> SpGj
    react.surge.util.BlastResistance WEB -> DQxr
    react.surge.util.BlastResistance DISPENSER -> YOVB
    react.surge.util.BlastResistance DROPPER -> dGEG
    react.surge.util.BlastResistance FURNACE -> xHmD
    react.surge.util.BlastResistance BURNING_FURNACE -> WHnv
    react.surge.util.BlastResistance BEACON -> TYYG
    react.surge.util.BlastResistance COAL_ORE -> Bmvr
    react.surge.util.BlastResistance COCOA -> uiwL
    react.surge.util.BlastResistance DIAMOND_ORE -> WRCq
    react.surge.util.BlastResistance EMERALD_ORE -> AtHR
    react.surge.util.BlastResistance FENCE -> RAsD
    react.surge.util.BlastResistance FENCE_GATE -> Nylp
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> nwIY
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> cCcf
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> Cymd
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> NiLe
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> bYrt
    react.surge.util.BlastResistance ACACIA_FENCE -> Sfye
    react.surge.util.BlastResistance BIRCH_FENCE -> RKEi
    react.surge.util.BlastResistance DARK_OAK_FENCE -> jbLC
    react.surge.util.BlastResistance SPRUCE_FENCE -> JvRc
    react.surge.util.BlastResistance JUNGLE_FENCE -> qnoG
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> yDBo
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> jXwy
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> xYpc
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> uaiO
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> gaQl
    react.surge.util.BlastResistance QUARTZ_STAIRS -> elMN
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> ExBw
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> cfGK
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> btDw
    react.surge.util.BlastResistance WOOD_STAIRS -> MfID
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> XCdQ
    react.surge.util.BlastResistance ACACIA_DOOR -> jbIs
    react.surge.util.BlastResistance BIRCH_DOOR -> suUU
    react.surge.util.BlastResistance DARK_OAK_DOOR -> bQam
    react.surge.util.BlastResistance SPRUCE_DOOR -> DkoB
    react.surge.util.BlastResistance JUNGLE_DOOR -> MCdl
    react.surge.util.BlastResistance GOLD_ORE -> Xefl
    react.surge.util.BlastResistance HOPPER -> MCeN
    react.surge.util.BlastResistance IRON_ORE -> iohL
    react.surge.util.BlastResistance LAPIS_BLOCK -> LbeH
    react.surge.util.BlastResistance LAPIS_ORE -> CiLc
    react.surge.util.BlastResistance QUARTZ_ORE -> whPG
    react.surge.util.BlastResistance REDSTONE_ORE -> kCMh
    react.surge.util.BlastResistance TRAP_DOOR -> XUHv
    react.surge.util.BlastResistance WOOD -> BCga
    react.surge.util.BlastResistance CHEST -> cehq
    react.surge.util.BlastResistance TRAPPED_CHEST -> uQLC
    react.surge.util.BlastResistance WORKBENCH -> iDwQ
    react.surge.util.BlastResistance CAULDRON -> RJem
    react.surge.util.BlastResistance LOG -> XCgA
    react.surge.util.BlastResistance LOG_2 -> wpcd
    react.surge.util.BlastResistance BOOKSHELF -> QjGc
    react.surge.util.BlastResistance BANNER -> AcHR
    react.surge.util.BlastResistance STANDING_BANNER -> Otal
    react.surge.util.BlastResistance WALL_BANNER -> yCeI
    react.surge.util.BlastResistance JACK_O_LANTERN -> nTgF
    react.surge.util.BlastResistance MELON_BLOCK -> yUGN
    react.surge.util.BlastResistance SKULL -> WkWy
    react.surge.util.BlastResistance PUMPKIN -> QrWo
    react.surge.util.BlastResistance SIGN -> GAuy
    react.surge.util.BlastResistance SIGN_POST -> mcFA
    react.surge.util.BlastResistance WALL_SIGN -> ayUL
    react.surge.util.BlastResistance QUARTZ_BLOCK -> dNwy
    react.surge.util.BlastResistance NOTE_BLOCK -> HVYq
    react.surge.util.BlastResistance RED_SANDSTONE -> FOrm
    react.surge.util.BlastResistance SANDSTONE -> tEUw
    react.surge.util.BlastResistance WOOL -> GuYp
    react.surge.util.BlastResistance MONSTER_EGG -> Enrt
    react.surge.util.BlastResistance RAILS -> LREg
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> NhmA
    react.surge.util.BlastResistance DETECTOR_RAIL -> GKFq
    react.surge.util.BlastResistance POWERED_RAIL -> sJbr
    react.surge.util.BlastResistance CLAY -> MUHp
    react.surge.util.BlastResistance DIRT -> negW
    react.surge.util.BlastResistance GRASS -> oiJq
    react.surge.util.BlastResistance GRAVEL -> lFOY
    react.surge.util.BlastResistance SPONGE -> jrmK
    react.surge.util.BlastResistance BREWING_STAND -> lySq
    react.surge.util.BlastResistance STONE_BUTTON -> bRGd
    react.surge.util.BlastResistance WOOD_BUTTON -> nUJU
    react.surge.util.BlastResistance CAKE_BLOCK -> sAtw
    react.surge.util.BlastResistance ICE -> PLqv
    react.surge.util.BlastResistance PACKED_ICE -> lVtA
    react.surge.util.BlastResistance LEVER -> sBUv
    react.surge.util.BlastResistance MYCEL -> PxHM
    react.surge.util.BlastResistance PISTON_BASE -> JBpf
    react.surge.util.BlastResistance PISTON_EXTENSION -> GRxy
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> SyAC
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> TkBb
    react.surge.util.BlastResistance GOLD_PLATE -> FiiV
    react.surge.util.BlastResistance IRON_PLATE -> VyYR
    react.surge.util.BlastResistance STONE_PLATE -> RJhc
    react.surge.util.BlastResistance WOOD_PLATE -> EMUD
    react.surge.util.BlastResistance SAND -> VVtf
    react.surge.util.BlastResistance SOUL_SAND -> UuuH
    react.surge.util.BlastResistance CACTUS -> RRxu
    react.surge.util.BlastResistance LADDER -> QjJJ
    react.surge.util.BlastResistance NETHERRACK -> TsQW
    react.surge.util.BlastResistance GLASS -> IQNk
    react.surge.util.BlastResistance THIN_GLASS -> YXLn
    react.surge.util.BlastResistance STAINED_GLASS -> hcwu
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> rXcv
    react.surge.util.BlastResistance GLOWSTONE -> RKGy
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> jsQG
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> LRGn
    react.surge.util.BlastResistance SEA_LANTERN -> XDIW
    react.surge.util.BlastResistance BED_BLOCK -> NGLj
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> PoVI
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> bIUf
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> TsQc
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> CrBJ
    react.surge.util.BlastResistance LEAVES -> FXfj
    react.surge.util.BlastResistance LEAVES_2 -> ULBG
    react.surge.util.BlastResistance SNOW -> nejB
    int br -> xjvI
    react.surge.util.BlastResistance[] ENUM$VALUES -> cLXb
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> hQiM
    175:190:int get(org.bukkit.Material) -> kHrj
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> qumc:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> IqFj
react.surge.util.C -> pHVd:
    react.surge.util.C BLACK -> Wjwx
    react.surge.util.C DARK_BLUE -> KxxH
    react.surge.util.C DARK_GREEN -> mHwN
    react.surge.util.C DARK_AQUA -> qDbe
    react.surge.util.C DARK_RED -> uPoI
    react.surge.util.C DARK_PURPLE -> lEsq
    react.surge.util.C GOLD -> tooE
    react.surge.util.C GRAY -> AHxg
    react.surge.util.C DARK_GRAY -> FOwv
    react.surge.util.C BLUE -> lEsx
    react.surge.util.C GREEN -> Cysm
    react.surge.util.C AQUA -> lhXD
    react.surge.util.C RED -> riiA
    react.surge.util.C LIGHT_PURPLE -> EgIb
    react.surge.util.C YELLOW -> FYJq
    react.surge.util.C WHITE -> nTkT
    react.surge.util.C MAGIC -> smKy
    react.surge.util.C BOLD -> dXOJ
    react.surge.util.C STRIKETHROUGH -> aWVO
    react.surge.util.C UNDERLINE -> KxyS
    react.surge.util.C ITALIC -> mHun
    react.surge.util.C RESET -> fDak
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> BDND
    char code -> rjHl
    boolean isFormat -> BfQA
    java.lang.String toString -> JnFq
    java.util.Map BY_ID -> JeUh
    java.util.Map BY_CHAR -> oWma
    java.util.Map dyeChatMap -> grYm
    java.util.Map chatHexMap -> WskU
    java.util.Map dyeHexMap -> XvnV
    int[] $SWITCH_TABLE$surge$util$C -> GBYn
    react.surge.util.C[] ENUM$VALUES -> foUm
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> aMSt
    378:378:java.lang.String hex() -> fvVX
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> Ahlu
    434:442:react.surge.util.C getByChar(java.lang.String) -> rMhv
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> hbMk
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> kHrj
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> hbMk
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> doSM
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> SBpY
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> wwLT
    560:578:java.lang.String generateColorTable() -> bPVv
    588:588:org.bukkit.ChatColor chatColor() -> HenW
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> IqFj
    632:679:byte getItemMeta() -> NopO
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> WOvm
react.surge.util.C$1 -> pHVd$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> pHVd$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> pHVd$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> pHVd$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> pHVd$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> pHVd$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> pHVd$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> pHVd$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> pHVd$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> pHVd$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> pHVd$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> pHVd$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> pHVd$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> pHVd$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> pHVd$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> pHVd$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> pHVd$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> pHVd$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> pHVd$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> pHVd$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> pHVd$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> pHVd$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> tDAw:
    double number -> nvlf
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> JHsf
    23:25:react.surge.util.CDou add(double) -> mWiF
    30:32:react.surge.util.CDou sub(double) -> lDER
    37:37:double get() -> get
    42:48:void circ() -> ELEJ
react.surge.util.CMD -> bqsA:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> aEtL
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> lnur
    51:53:void execute(org.bukkit.command.CommandSender) -> doSM
    60:77:void execute() -> execute
react.surge.util.CNum -> ETNU:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> wwLT
    23:25:react.surge.util.CNum add(int) -> qRuk
    30:32:react.surge.util.CNum sub(int) -> CoVM
    37:37:int get() -> get
    42:48:void circ() -> ELEJ
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> WiOJ
react.surge.util.Chunks -> RsfC:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> UkVj
    33:40:react.glang.GList getLoadedChunks() -> qmcl
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> hbMk
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> kHrj
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> kHrj
    98:98:boolean unload(org.bukkit.Chunk) -> jWRR
    114:124:int unload(react.glang.GList,boolean,boolean) -> kHrj
    138:138:int unload(react.glang.GList,boolean) -> kHrj
    150:150:int unload(react.glang.GList) -> KLXv
    166:166:boolean isLoaded(java.lang.String,int,int) -> kHrj
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> doSM
    201:205:void load(react.glang.GList) -> teOi
react.surge.util.Cuboid -> INwk:
    java.lang.String worldName -> OBAe
    int x1 -> HxbH
    int y1 -> Bvpg
    int z1 -> GlnB
    int x2 -> mQgN
    int y2 -> aFUD
    int z2 -> gYHA
    int[] $SWITCH_TABLE$surge$util$Axis -> hJhR
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> hJgs
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> kHrj
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> doSM
    93:93:boolean hasPlayers() -> kdBi
    98:110:react.glang.GList getPlayers() -> qeAF
    115:166:react.glang.GList getEntities() -> gFUQ
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> Ujwp
    287:287:org.bukkit.Location getLowerNE() -> xYFt
    298:298:org.bukkit.Location getUpperSW() -> IaCE
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> DPqa
    348:348:int getSizeY() -> UlUS
    358:358:int getSizeZ() -> ySYE
    368:368:int getLowerX() -> IGOm
    378:378:int getLowerY() -> gxwu
    388:388:int getLowerZ() -> OPsT
    398:398:int getUpperX() -> ohCG
    408:408:int getUpperY() -> psVQ
    418:418:int getUpperZ() -> Tqds
    428:438:org.bukkit.block.Block[] corners() -> HncL
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> kHrj
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> hbMk
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> doSM
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> KUIg
    546:546:boolean contains(int,int,int) -> TqFU
    558:558:boolean contains(org.bukkit.block.Block) -> Ahlu
    570:570:boolean contains(org.bukkit.Location) -> GrqA
    580:580:int volume() -> CNPu
    591:601:byte averageLightLevel() -> pPqU
    612:612:react.surge.util.Cuboid contract() -> HwTW
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> kHrj
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> hbMk
    708:715:boolean containsOnly(org.bukkit.Material) -> hbMk
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> kHrj
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> fmJA
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> kHrj
    786:800:java.util.List getChunks() -> iDMS
    815:819:void fill(int,byte) -> kHrj
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> ervF
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> vtfV
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> HCoQ
react.surge.util.Cuboid$1 -> INwk$1:
    react.surge.util.Cuboid this$0 -> DlWp
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> hbMS
    1:1:java.lang.Object onAdapt(java.lang.Object) -> IqFj
react.surge.util.Cuboid$CuboidDirection -> INwk$kHrj:
    react.surge.util.Cuboid$CuboidDirection North -> cClX
    react.surge.util.Cuboid$CuboidDirection East -> lEvS
    react.surge.util.Cuboid$CuboidDirection South -> AQkr
    react.surge.util.Cuboid$CuboidDirection West -> MfRA
    react.surge.util.Cuboid$CuboidDirection Up -> GvCA
    react.surge.util.Cuboid$CuboidDirection Down -> Ijew
    react.surge.util.Cuboid$CuboidDirection Horizontal -> ujbt
    react.surge.util.Cuboid$CuboidDirection Vertical -> jkDc
    react.surge.util.Cuboid$CuboidDirection Both -> bQjy
    react.surge.util.Cuboid$CuboidDirection Unknown -> vKcN
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> hJgs
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> Beos
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> yAyV
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> HCoQ
react.surge.util.Cuboid$CuboidIterator -> INwk$hbMk:
    org.bukkit.World w -> BUPD
    int baseX -> nwQQ
    int baseY -> lNgN
    int baseZ -> gYKD
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> qMUd
    int sizeY -> ffhX
    int sizeZ -> xtLj
    react.surge.util.Cuboid this$0 -> DlWp
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> gyRK:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> rVmT:
    react.glang.GList buffer -> SyDC
    boolean dbg -> MTmm
    int kf -> IPrL
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> KUIg
    41:49:void l(java.lang.Object,java.lang.String) -> hbMk
    53:54:void s(java.lang.Object,java.lang.String) -> doSM
    58:69:void cdb() -> kktf
    73:79:void v(java.lang.Object,java.lang.String) -> KUIg
    83:84:void w(java.lang.Object,java.lang.String) -> TqFU
    88:89:void f(java.lang.Object,java.lang.String) -> fmJA
    93:106:void l(java.lang.String) -> qRuk
    110:117:void s(java.lang.String) -> CoVM
    121:135:void v(java.lang.String) -> WiOJ
    139:146:void w(java.lang.String) -> Ujwp
    150:157:void f(java.lang.String) -> kcGi
react.surge.util.DMSRequire -> nBOo:
    react.surge.util.DMSRequirement value() -> UJSe
react.surge.util.DMSRequirement -> jpxJ:
    react.surge.util.DMSRequirement SQL -> DdGL
    react.surge.util.DMSRequirement[] ENUM$VALUES -> xtLm
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> pPgD:
    react.surge.util.Depend VAULT -> lFUo
    react.surge.util.Depend FAWE -> GJlP
    react.surge.util.Depend WORLDEDIT -> rqyv
    react.surge.util.Depend PROTOLIB -> dWpA
    react.surge.util.Depend CITIZENS -> kTTe
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> xHxD
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> EBiw:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> Vwip
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> DsLi:
    react.surge.util.DimensionFace X -> rHHL
    react.surge.util.DimensionFace Y -> gPXn
    react.surge.util.DimensionFace Z -> XoBF
    react.surge.util.DimensionFace[] ENUM$VALUES -> dGPJ
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> eixW:
    react.surge.util.Direction U -> EgKC
    react.surge.util.Direction D -> fgGy
    react.surge.util.Direction N -> lxxy
    react.surge.util.Direction S -> rimM
    react.surge.util.Direction E -> Glqo
    react.surge.util.Direction W -> UKhA
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> pItX
    int[] $SWITCH_TABLE$surge$util$Direction -> aqNE
    react.surge.util.Direction[] ENUM$VALUES -> PwmP
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> dMnT
    61:61:int x() -> SwQs
    66:66:int y() -> lVFl
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> ChCa
    81:81:react.glang.GList news() -> esUP
    86:86:react.glang.GList udnews() -> kIrK
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> aegc
    115:147:react.surge.util.Direction fromByte(byte) -> Ahlu
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> QqKk
react.surge.util.DynamicConfiguration -> ogVX:
react.surge.util.DynamicTracker -> RRBX:
react.surge.util.Embedded -> WjCI:
    react.glang.GList get() -> eHaF
    void add(java.lang.Object) -> add
react.surge.util.FU -> xaNn:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> kHrj
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> hbMk
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> TqFU
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> fmJA
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> BcvB:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> Jsij
react.surge.util.Health -> ESlV:
    double hp -> JKgu
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> Yxbd
    41:41:double getHearts() -> eQRJ
    51:51:double getHalfHearts() -> xjJk
    61:61:int getFlatHalfHearts() -> sAHt
react.surge.util.IO -> Yfuy:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> RjsU:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> kHrj
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> kHrj
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> kHrj
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> kHrj
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> kHrj
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> hbMk
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> doSM
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> KUIg
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> kHrj
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> kHrj
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> kHrj
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> kHrj
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> TqFU
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> fmJA
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> IqFj
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> Ahlu
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> hbMS
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> kHrj
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> imaA
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> GrqA
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> kHrj
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> kHrj
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> hbMk
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> kHrj
react.surge.util.MSound -> iDBU:
    react.surge.util.MSound AMBIENCE_CAVE -> SyGI
    react.surge.util.MSound AMBIENCE_RAIN -> DBEt
    react.surge.util.MSound AMBIENCE_THUNDER -> pRdh
    react.surge.util.MSound ANVIL_BREAK -> oFox
    react.surge.util.MSound ANVIL_LAND -> jPrn
    react.surge.util.MSound ANVIL_USE -> ubUK
    react.surge.util.MSound ARROW_HIT -> Dtjo
    react.surge.util.MSound BURP -> qnyk
    react.surge.util.MSound CHEST_CLOSE -> Lsqi
    react.surge.util.MSound CHEST_OPEN -> HhFd
    react.surge.util.MSound CLICK -> KpoF
    react.surge.util.MSound DOOR_CLOSE -> gjLy
    react.surge.util.MSound DOOR_OPEN -> Ijfl
    react.surge.util.MSound DRINK -> sloF
    react.surge.util.MSound EAT -> oqdT
    react.surge.util.MSound EXPLODE -> TYeA
    react.surge.util.MSound FALL_BIG -> AcRH
    react.surge.util.MSound FALL_SMALL -> uQRs
    react.surge.util.MSound FIRE -> kLFb
    react.surge.util.MSound FIRE_IGNITE -> eIsR
    react.surge.util.MSound FIZZ -> VFYN
    react.surge.util.MSound FUSE -> slnY
    react.surge.util.MSound GLASS -> vBsL
    react.surge.util.MSound HURT_FLESH -> MCoP
    react.surge.util.MSound ITEM_BREAK -> ExNP
    react.surge.util.MSound ITEM_PICKUP -> EMYg
    react.surge.util.MSound LAVA -> VOKQ
    react.surge.util.MSound LAVA_POP -> HpVH
    react.surge.util.MSound LEVEL_UP -> ekwG
    react.surge.util.MSound MINECART_BASE -> NGSW
    react.surge.util.MSound MINECART_INSIDE -> QinP
    react.surge.util.MSound NOTE_BASS -> SMqR
    react.surge.util.MSound NOTE_PIANO -> oFof
    react.surge.util.MSound NOTE_BASS_DRUM -> FsCV
    react.surge.util.MSound NOTE_STICKS -> HWFX
    react.surge.util.MSound NOTE_BASS_GUITAR -> RSae
    react.surge.util.MSound NOTE_SNARE_DRUM -> coEf
    react.surge.util.MSound NOTE_PLING -> pBGP
    react.surge.util.MSound ORB_PICKUP -> OJXi
    react.surge.util.MSound PISTON_EXTEND -> RltF
    react.surge.util.MSound PISTON_RETRACT -> QjQd
    react.surge.util.MSound PORTAL -> FGmx
    react.surge.util.MSound PORTAL_TRAVEL -> nMCC
    react.surge.util.MSound PORTAL_TRIGGER -> NXVv
    react.surge.util.MSound SHOOT_ARROW -> noEa
    react.surge.util.MSound SPLASH -> YOdt
    react.surge.util.MSound SPLASH2 -> TkKK
    react.surge.util.MSound STEP_GRASS -> KOMy
    react.surge.util.MSound STEP_GRAVEL -> ukHW
    react.surge.util.MSound STEP_LADDER -> rimw
    react.surge.util.MSound STEP_SAND -> dOeR
    react.surge.util.MSound STEP_SNOW -> CGUY
    react.surge.util.MSound STEP_STONE -> SWEq
    react.surge.util.MSound STEP_WOOD -> MfUo
    react.surge.util.MSound STEP_WOOL -> Rlsw
    react.surge.util.MSound SWIM -> coFQ
    react.surge.util.MSound WATER -> oiVj
    react.surge.util.MSound WOOD_CLICK -> CFtU
    react.surge.util.MSound BAT_DEATH -> gGmA
    react.surge.util.MSound BAT_HURT -> nURW
    react.surge.util.MSound BAT_IDLE -> fgKy
    react.surge.util.MSound BAT_LOOP -> lpmY
    react.surge.util.MSound BAT_TAKEOFF -> SFBt
    react.surge.util.MSound BLAZE_BREATH -> wNjQ
    react.surge.util.MSound BLAZE_DEATH -> pJUy
    react.surge.util.MSound BLAZE_HIT -> cerT
    react.surge.util.MSound CAT_HISS -> DtlH
    react.surge.util.MSound CAT_HIT -> QsBJ
    react.surge.util.MSound CAT_MEOW -> IHfV
    react.surge.util.MSound CAT_PURR -> eAfD
    react.surge.util.MSound CAT_PURREOW -> bANJ
    react.surge.util.MSound CHICKEN_IDLE -> dFsJ
    react.surge.util.MSound CHICKEN_HURT -> Bnfa
    react.surge.util.MSound CHICKEN_EGG_POP -> iFBN
    react.surge.util.MSound CHICKEN_WALK -> qgKb
    react.surge.util.MSound COW_IDLE -> DdKf
    react.surge.util.MSound COW_HURT -> ARQb
    react.surge.util.MSound COW_WALK -> IHgE
    react.surge.util.MSound CREEPER_HISS -> WlCD
    react.surge.util.MSound CREEPER_DEATH -> fMYb
    react.surge.util.MSound ENDERDRAGON_DEATH -> EEKj
    react.surge.util.MSound ENDERDRAGON_GROWL -> SNVa
    react.surge.util.MSound ENDERDRAGON_HIT -> ipYB
    react.surge.util.MSound ENDERDRAGON_WINGS -> IIIo
    react.surge.util.MSound ENDERMAN_DEATH -> QYRJ
    react.surge.util.MSound ENDERMAN_HIT -> HMuv
    react.surge.util.MSound ENDERMAN_IDLE -> OuOX
    react.surge.util.MSound ENDERMAN_TELEPORT -> TkMA
    react.surge.util.MSound ENDERMAN_SCREAM -> mIaC
    react.surge.util.MSound ENDERMAN_STARE -> CGWe
    react.surge.util.MSound GHAST_SCREAM -> cCrR
    react.surge.util.MSound GHAST_SCREAM2 -> pAfx
    react.surge.util.MSound GHAST_CHARGE -> DSLm
    react.surge.util.MSound GHAST_DEATH -> fgOl
    react.surge.util.MSound GHAST_FIREBALL -> IkMa
    react.surge.util.MSound GHAST_MOAN -> QrdU
    react.surge.util.MSound IRONGOLEM_DEATH -> XewF
    react.surge.util.MSound IRONGOLEM_HIT -> XMEa
    react.surge.util.MSound IRONGOLEM_THROW -> aNnW
    react.surge.util.MSound IRONGOLEM_WALK -> RlvV
    react.surge.util.MSound MAGMACUBE_WALK -> KiDE
    react.surge.util.MSound MAGMACUBE_WALK2 -> OIyw
    react.surge.util.MSound MAGMACUBE_JUMP -> OAjQ
    react.surge.util.MSound PIG_IDLE -> KXAq
    react.surge.util.MSound PIG_DEATH -> gYOn
    react.surge.util.MSound PIG_WALK -> AcVQ
    react.surge.util.MSound SHEEP_IDLE -> dPGD
    react.surge.util.MSound SHEEP_SHEAR -> FHPV
    react.surge.util.MSound SHEEP_WALK -> JByl
    react.surge.util.MSound SILVERFISH_HIT -> ukJP
    react.surge.util.MSound SILVERFISH_KILL -> RKRm
    react.surge.util.MSound SILVERFISH_IDLE -> yURa
    react.surge.util.MSound SILVERFISH_WALK -> yeru
    react.surge.util.MSound SKELETON_IDLE -> ujiB
    react.surge.util.MSound SKELETON_DEATH -> tWDo
    react.surge.util.MSound SKELETON_HURT -> BLfA
    react.surge.util.MSound SKELETON_WALK -> HMuo
    react.surge.util.MSound SLIME_ATTACK -> QXrl
    react.surge.util.MSound SLIME_WALK -> qobA
    react.surge.util.MSound SLIME_WALK2 -> ukLt
    react.surge.util.MSound SPIDER_IDLE -> YPIs
    react.surge.util.MSound SPIDER_DEATH -> tEfR
    react.surge.util.MSound SPIDER_WALK -> RJth
    react.surge.util.MSound WITHER_DEATH -> VWbC
    react.surge.util.MSound WITHER_HURT -> mlGF
    react.surge.util.MSound WITHER_IDLE -> QPcL
    react.surge.util.MSound WITHER_SHOOT -> fDlo
    react.surge.util.MSound WITHER_SPAWN -> pdMt
    react.surge.util.MSound WOLF_BARK -> oPId
    react.surge.util.MSound WOLF_DEATH -> EUqP
    react.surge.util.MSound WOLF_GROWL -> gXrA
    react.surge.util.MSound WOLF_HOWL -> FivF
    react.surge.util.MSound WOLF_HURT -> mlFG
    react.surge.util.MSound WOLF_PANT -> Xnim
    react.surge.util.MSound WOLF_SHAKE -> HWJo
    react.surge.util.MSound WOLF_WALK -> gHQb
    react.surge.util.MSound WOLF_WHINE -> kmoY
    react.surge.util.MSound ZOMBIE_METAL -> cMEi
    react.surge.util.MSound ZOMBIE_WOOD -> tMtp
    react.surge.util.MSound ZOMBIE_WOODBREAK -> AJFX
    react.surge.util.MSound ZOMBIE_IDLE -> CrMc
    react.surge.util.MSound ZOMBIE_DEATH -> fgOw
    react.surge.util.MSound ZOMBIE_HURT -> LkfJ
    react.surge.util.MSound ZOMBIE_INFECT -> cwYN
    react.surge.util.MSound ZOMBIE_UNFECT -> QGqH
    react.surge.util.MSound ZOMBIE_REMEDY -> lqSF
    react.surge.util.MSound ZOMBIE_WALK -> PVOx
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> kmoF
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> AtYY
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> aqSE
    react.surge.util.MSound ZOMBIE_PIG_HURT -> CPKm
    react.surge.util.MSound DIG_WOOL -> GmXi
    react.surge.util.MSound DIG_GRASS -> lhaP
    react.surge.util.MSound DIG_GRAVEL -> IkOK
    react.surge.util.MSound DIG_SAND -> IILK
    react.surge.util.MSound DIG_SNOW -> xlDV
    react.surge.util.MSound DIG_STONE -> tVfL
    react.surge.util.MSound DIG_WOOD -> GJto
    react.surge.util.MSound FIREWORK_BLAST -> LlIm
    react.surge.util.MSound FIREWORK_BLAST2 -> XDXX
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> VWcq
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> daLv
    react.surge.util.MSound FIREWORK_TWINKLE -> pmAc
    react.surge.util.MSound FIREWORK_TWINKLE2 -> neya
    react.surge.util.MSound FIREWORK_LAUNCH -> THmO
    react.surge.util.MSound SUCCESSFUL_HIT -> hdhO
    react.surge.util.MSound HORSE_ANGRY -> Fiwm
    react.surge.util.MSound HORSE_ARMOR -> yLfS
    react.surge.util.MSound HORSE_BREATHE -> AcWw
    react.surge.util.MSound HORSE_DEATH -> oGYo
    react.surge.util.MSound HORSE_GALLOP -> wXAv
    react.surge.util.MSound HORSE_HIT -> oGXu
    react.surge.util.MSound HORSE_IDLE -> COmY
    react.surge.util.MSound HORSE_JUMP -> xkfG
    react.surge.util.MSound HORSE_LAND -> iMwp
    react.surge.util.MSound HORSE_SADDLE -> XCvO
    react.surge.util.MSound HORSE_SOFT -> AQvw
    react.surge.util.MSound HORSE_WOOD -> Fivh
    react.surge.util.MSound DONKEY_ANGRY -> iWIa
    react.surge.util.MSound DONKEY_DEATH -> emAP
    react.surge.util.MSound DONKEY_HIT -> SWKe
    react.surge.util.MSound DONKEY_IDLE -> svHt
    react.surge.util.MSound HORSE_SKELETON_DEATH -> oqkq
    react.surge.util.MSound HORSE_SKELETON_HIT -> aGAk
    react.surge.util.MSound HORSE_SKELETON_IDLE -> bJDo
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> Kpul
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> HFLo
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> pAmo
    react.surge.util.MSound VILLAGER_DEATH -> ujon
    react.surge.util.MSound VILLAGER_HAGGLE -> lNsb
    react.surge.util.MSound VILLAGER_HIT -> vwDw
    react.surge.util.MSound VILLAGER_IDLE -> wiFg
    react.surge.util.MSound VILLAGER_NO -> nMKG
    react.surge.util.MSound VILLAGER_YES -> BoNw
    java.lang.String pre19sound -> blJd
    java.lang.String post19sound -> AJHs
    org.bukkit.Sound resolvedSound -> KyjD
    react.surge.util.MSound[] ENUM$VALUES -> qERY
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> YorA
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> HLWS:
    org.bukkit.Material material -> fwvE
    java.lang.Byte data -> ihNP
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> Oasr
    79:80:void setData(java.lang.Byte) -> kHrj
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> RYtN:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> aLXN
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> AjOQ
    68:68:boolean isAnyOnline() -> opPq
    80:80:react.glang.GList inWorld(org.bukkit.World) -> Dquj
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> KLXv
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> kHrj
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> kHrj
    143:144:void disable(org.bukkit.entity.Player) -> oxBt
    154:155:void enable(org.bukkit.entity.Player) -> mWiA
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> kHrj
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> hbMk
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> fcvX
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> kHrj
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> JHsf
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> doSM
    300:300:boolean canFindPlayer(java.lang.String) -> kcGn
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> oEAG
    338:345:react.glang.GList onlinePlayers() -> Utgg
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> mWiF
    368:371:void clear(org.bukkit.entity.Player) -> lDER
    381:385:void clearEffects(org.bukkit.entity.Player) -> mhiy
    398:399:void heal(org.bukkit.entity.Player,double) -> kHrj
    409:410:void heal(org.bukkit.entity.Player) -> Ipdv
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> CoUE
    432:433:void resetHunger(org.bukkit.entity.Player) -> sbKe
    443:444:void kill(org.bukkit.entity.Player) -> kkUc
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> DXdn
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> GQMa
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> kHrj
react.surge.util.P$1 -> RYtN$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> hbMS
    1:1:java.lang.Object onAdapt(java.lang.Object) -> IqFj
react.surge.util.P$2 -> RYtN$2:
    java.lang.Double val$doff -> qxUr
    org.bukkit.entity.Player val$e -> QGvQ
    org.bukkit.entity.Entity[] val$result -> emCu
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> Jjwq
react.surge.util.PE -> xaQx:
    react.surge.util.PE ABSORPTION -> plar
    react.surge.util.PE BLINDNESS -> edSG
    react.surge.util.PE CONFUSION -> Yqpo
    react.surge.util.PE DAMAGE_RESISTANCE -> rPeR
    react.surge.util.PE FAST_DIGGING -> Sgnr
    react.surge.util.PE FIRE_RESISTANCE -> xIeJ
    react.surge.util.PE GLOWING -> QQFj
    react.surge.util.PE HARM -> DuUI
    react.surge.util.PE HEAL -> bQvL
    react.surge.util.PE HEALTH_BOOST -> BLlY
    react.surge.util.PE HUNGER -> aqVk
    react.surge.util.PE INCREASE_DAMAGE -> vKoY
    react.surge.util.PE INVISIBILITY -> pRni
    react.surge.util.PE JUMP -> kfDD
    react.surge.util.PE LEVITATION -> gHSv
    react.surge.util.PE LUCK -> NrPu
    react.surge.util.PE NIGHT_VISION -> aNre
    react.surge.util.PE POISON -> PxWX
    react.surge.util.PE REGENERATION -> aFby
    react.surge.util.PE SATURATION -> VOTw
    react.surge.util.PE SLOW -> DKAp
    react.surge.util.PE SLOW_DIGGING -> ukOY
    react.surge.util.PE SPEED -> lyfd
    react.surge.util.PE UNLUCK -> Uech
    react.surge.util.PE WATER_BREATHING -> vedl
    react.surge.util.PE WEAKNESS -> hCKB
    react.surge.util.PE WITHER -> ahiP
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> kHrj
    144:144:react.surge.util.PE d(int) -> kcGi
    156:156:react.surge.util.PE a(int) -> Jsij
    166:166:org.bukkit.potion.PotionEffect c() -> kktY
    177:178:void c(org.bukkit.entity.LivingEntity) -> fmJA
    182:183:void crm(org.bukkit.entity.LivingEntity) -> IqFj
    187:188:void rm(org.bukkit.entity.LivingEntity) -> Ahlu
react.surge.util.ParticleEffect -> wMNV:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> pSSC
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> yLjh
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> pBPw
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> tVnI
    react.surge.util.ParticleEffect WATER_BUBBLE -> lOWM
    react.surge.util.ParticleEffect WATER_SPLASH -> wpxY
    react.surge.util.ParticleEffect WATER_WAKE -> COpU
    react.surge.util.ParticleEffect SUSPENDED -> edUU
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> fUvD
    react.surge.util.ParticleEffect CRIT -> nMLN
    react.surge.util.ParticleEffect CRIT_MAGIC -> yCyY
    react.surge.util.ParticleEffect SMOKE_NORMAL -> YaRg
    react.surge.util.ParticleEffect SMOKE_LARGE -> rPfi
    react.surge.util.ParticleEffect SPELL -> rGuc
    react.surge.util.ParticleEffect SPELL_INSTANT -> hTLO
    react.surge.util.ParticleEffect SPELL_MOB -> eSRS
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> OdUE
    react.surge.util.ParticleEffect SPELL_WITCH -> aqXv
    react.surge.util.ParticleEffect DRIP_WATER -> diaH
    react.surge.util.ParticleEffect DRIP_LAVA -> OleH
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> WlLc
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> QXxQ
    react.surge.util.ParticleEffect TOWN_AURA -> uYpH
    react.surge.util.ParticleEffect NOTE -> ucBP
    react.surge.util.ParticleEffect PORTAL -> CGaR
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> RCJf
    react.surge.util.ParticleEffect FLAME -> mAVd
    react.surge.util.ParticleEffect LAVA -> WQxw
    react.surge.util.ParticleEffect FOOTSTEP -> lFci
    react.surge.util.ParticleEffect CLOUD -> QHWv
    react.surge.util.ParticleEffect REDSTONE -> UfFp
    react.surge.util.ParticleEffect SNOWBALL -> rGtk
    react.surge.util.ParticleEffect SNOW_SHOVEL -> kwGC
    react.surge.util.ParticleEffect SLIME -> GdnN
    react.surge.util.ParticleEffect HEART -> sdkD
    react.surge.util.ParticleEffect BARRIER -> CaTu
    react.surge.util.ParticleEffect ITEM_CRACK -> cgAi
    react.surge.util.ParticleEffect BLOCK_CRACK -> ihRh
    react.surge.util.ParticleEffect BLOCK_DUST -> jRDP
    react.surge.util.ParticleEffect WATER_DROP -> sSli
    react.surge.util.ParticleEffect ITEM_TAKE -> THsM
    react.surge.util.ParticleEffect MOB_APPEARANCE -> XVAF
    react.surge.util.ParticleEffect DRAGON_BREATH -> QQLY
    react.surge.util.ParticleEffect END_ROD -> IYtm
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> wykd
    react.surge.util.ParticleEffect SWEEP_ATTACK -> ShTJ
    java.util.Map NAME_MAP -> kfIM
    java.util.Map ID_MAP -> HVrP
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> pRtM
    java.util.List properties -> wXHm
    react.surge.util.ParticleEffect[] ENUM$VALUES -> PUyH
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> BubV
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> kHrj
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> uVqi
    557:565:react.surge.util.ParticleEffect fromId(int) -> aLXN
    577:578:boolean isWater(org.bukkit.Location) -> NoTr
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> kHrj
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> kHrj
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> kHrj
    665:681:void display(float,int,org.bukkit.Location,double) -> kHrj
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> kHrj
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> kHrj
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> kHrj
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> kHrj
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> kHrj
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> kHrj
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> kHrj
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> kHrj
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> kHrj
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> kHrj
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> kHrj
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> kHrj
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> kHrj
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> kHrj
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> wMNV$kHrj:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> wMNV$hbMk:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> wMNV$doSM:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> PvYr
    1594:1594:float getValueY() -> kdDs
    1605:1605:float getValueZ() -> VLur
react.surge.util.ParticleEffect$OrdinaryColor -> wMNV$KUIg:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> PvYr
    1526:1526:float getValueY() -> kdDs
    1537:1537:float getValueZ() -> VLur
react.surge.util.ParticleEffect$ParticleColor -> wMNV$TqFU:
    1383:1383:void <init>() -> <init>
    float getValueX() -> PvYr
    float getValueY() -> kdDs
    float getValueZ() -> VLur
react.surge.util.ParticleEffect$ParticleColorException -> wMNV$fmJA:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> wMNV$IqFj:
    org.bukkit.Material material -> fwvE
    byte data -> Vhku
    int[] packetData -> vDCw
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> iwQP
    1309:1309:java.lang.String getPacketDataString() -> PTVl
react.surge.util.ParticleEffect$ParticleDataException -> wMNV$Ahlu:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> wMNV$hbMS:
    int version -> version
    java.lang.Class enumParticle -> NYDw
    java.lang.reflect.Constructor packetConstructor -> ukUK
    java.lang.reflect.Method getHandle -> pJcX
    java.lang.reflect.Field playerConnection -> vCdA
    java.lang.reflect.Method sendPacket -> HNbY
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> UTfN
    float offsetX -> CaUv
    float offsetY -> COtC
    float offsetZ -> gHXa
    float speed -> JwKD
    int amount -> IPQH
    boolean longDistance -> qUvE
    react.surge.util.ParticleEffect$ParticleData data -> hBji
    java.lang.Object packet -> wykF
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> TNcE
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> kHrj
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> hbMk
    2004:2018:void sendTo(org.bukkit.Location,double) -> hbMk
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> wMNV$hbMS$kHrj:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> wMNV$hbMS$hbMk:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> wMNV$hbMS$doSM:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> wMNV$imaA:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> wXHc
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> JKuc
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> qpIe
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> PokB
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> jkTV
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> wMNV$GrqA:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> skUY:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> golD
react.surge.util.Persist -> MJdu:
react.surge.util.PluginUtil -> HfIs:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> TqFU
    81:85:void enableAll() -> GROg
    95:99:void disable(org.bukkit.plugin.Plugin) -> fmJA
    106:110:void disableAll() -> YNSH
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> IqFj
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> kHrj
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> OYFp
    169:172:java.util.List getPluginNames(boolean) -> YoSr
    184:187:java.lang.String getPluginVersion(java.lang.String) -> TErV
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> Ahlu
    237:316:java.util.List findByCommand(java.lang.String) -> mNyX
    337:338:void load(org.bukkit.plugin.Plugin) -> hbMS
    342:364:java.lang.String getPluginFileName(java.lang.String) -> DHFV
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> kHrj
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> imaA
    480:484:void reloadAll() -> mXlW
    496:622:void unload(org.bukkit.plugin.Plugin) -> GrqA
react.surge.util.PoolCount -> ySSo:
react.surge.util.PoolDescriber -> BtxS:
react.surge.util.PoolNanoThrottle -> PBlw:
react.surge.util.PositionalSelector -> lLmU:
    react.glang.GSet allowedChunks -> vTdJ
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> IOeE
    39:40:void addChunk(org.bukkit.Chunk) -> teOi
    44:44:react.glang.GSet getAllowedChunks() -> YNRl
react.surge.util.Protocol -> xYAm:
    react.surge.util.Protocol LATEST -> yLlD
    react.surge.util.Protocol R1_12_2 -> wpyD
    react.surge.util.Protocol R1_12_2_PRE -> ShSQ
    react.surge.util.Protocol R1_12_1 -> PfyT
    react.surge.util.Protocol R1_12 -> wWgH
    react.surge.util.Protocol R1_11_2 -> rYXt
    react.surge.util.Protocol R1_11_1 -> aXIl
    react.surge.util.Protocol R1_11 -> iFNY
    react.surge.util.Protocol R1_10_2 -> KhlH
    react.surge.util.Protocol R1_10_1 -> rsKy
    react.surge.util.Protocol R1_10 -> jRCE
    react.surge.util.Protocol R1_9_4 -> GeQM
    react.surge.util.Protocol R1_9_3 -> IsjB
    react.surge.util.Protocol R1_9_2 -> LImq
    react.surge.util.Protocol R1_9_1 -> UwLt
    react.surge.util.Protocol R1_9 -> mkoa
    react.surge.util.Protocol R1_8_9 -> Ocxj
    react.surge.util.Protocol R1_8_8 -> Nqvt
    react.surge.util.Protocol R1_8_7 -> gsPX
    react.surge.util.Protocol R1_8_6 -> ahmO
    react.surge.util.Protocol R1_8_5 -> JekV
    react.surge.util.Protocol R1_8_4 -> gbNk
    react.surge.util.Protocol R1_8_3 -> ygCJ
    react.surge.util.Protocol R1_8_2 -> kDFn
    react.surge.util.Protocol R1_8_1 -> CPTu
    react.surge.util.Protocol R1_8 -> yVAN
    react.surge.util.Protocol R1_7_10 -> cLpb
    react.surge.util.Protocol R1_7_9 -> SxwD
    react.surge.util.Protocol R1_7_8 -> TYwQ
    react.surge.util.Protocol R1_7_7 -> cVCF
    react.surge.util.Protocol R1_7_6 -> SVtN
    react.surge.util.Protocol R1_7_5 -> smaU
    react.surge.util.Protocol R1_7_4 -> qNIU
    react.surge.util.Protocol R1_7_3 -> snBR
    react.surge.util.Protocol R1_7_2 -> PMjh
    react.surge.util.Protocol R1_7_1 -> MoVO
    react.surge.util.Protocol B1_6_4 -> cxCw
    react.surge.util.Protocol B1_6_3 -> kUHT
    react.surge.util.Protocol B1_6_2 -> YYEE
    react.surge.util.Protocol B1_6_1 -> QanK
    react.surge.util.Protocol B1_5_2 -> qojj
    react.surge.util.Protocol B1_5_1 -> Spdo
    react.surge.util.Protocol B1_5 -> dXcm
    react.surge.util.Protocol B1_4_7 -> dPSe
    react.surge.util.Protocol B1_4_6 -> CPUw
    react.surge.util.Protocol B1_4_5 -> AIoS
    react.surge.util.Protocol B1_4_4 -> NPUI
    react.surge.util.Protocol B1_4_2 -> rbLc
    react.surge.util.Protocol B1_3_2 -> oPQu
    react.surge.util.Protocol B1_3_1 -> tgrN
    react.surge.util.Protocol B1_2_5 -> fEWm
    react.surge.util.Protocol B1_2_4 -> FkAW
    react.surge.util.Protocol EARLIEST -> Ltar
    react.surge.util.Protocol UNKNOWN -> eSVY
    int version -> version
    java.lang.String packageVersion -> fDAQ
    java.lang.String versionName -> aXKf
    boolean netty -> wiNr
    react.surge.util.Protocol[] ENUM$VALUES -> Olkt
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> PCWs
    118:118:java.lang.String getPackageVersion() -> bPAg
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> QqNx
    142:150:react.surge.util.Protocol getProtocolVersion() -> YWCk
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> hbMk
    160:160:boolean isServerVersion() -> sQkn
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> yeAC
    175:175:boolean isActualVersion() -> Sncy
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> IaFP
    200:200:int getMetaVersion() -> fBuH
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> SDGS:
    react.surge.util.Protocol from -> bInl
    react.surge.util.Protocol to -> kKyR
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> bXkd
    21:21:react.surge.util.Protocol getTo() -> aLvy
    26:26:boolean contains(react.surge.util.Protocol) -> doSM
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> jXIi:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> xilW
    70:70:int randomNextInt() -> DIFG
    80:80:long randomNextLong() -> uyta
    92:92:boolean isWithin(double) -> mhiy
    104:104:boolean isWithin(int) -> kcGn
    116:116:boolean isWithin(long) -> jOAU
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> Ipdv
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> YoSr
react.surge.util.RawEvent -> bPQQ:
react.surge.util.RayTrace -> MuWr:
    org.bukkit.Location start -> oPVO
    org.bukkit.util.Vector direction -> cMSM
    java.lang.Double maxDistance -> NPXE
    java.lang.Double distanceCovered -> KFmd
    java.lang.Double step -> RLCg
    java.lang.Boolean stop -> oqxC
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> Bdbx
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> Jjwq
    89:89:org.bukkit.Location getStart() -> klWp
    94:95:void setStart(org.bukkit.Location) -> jWRR
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> IWsm
    114:115:void setMaxDistance(java.lang.Double) -> KUIg
    119:119:java.lang.Double getDistanceCovered() -> agJk
    124:125:void setDistanceCovered(java.lang.Double) -> TqFU
    129:129:java.lang.Double getStep() -> urEd
    134:135:void setStep(java.lang.Double) -> fmJA
react.surge.util.ReflectionUtils -> Dakv:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> kHrj
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> kHrj
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> kHrj
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> kHrj
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> kHrj
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> kHrj
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> kHrj
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> kHrj
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> kHrj
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> kHrj
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> kHrj
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> kHrj
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> kHrj
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> kHrj
react.surge.util.ReflectionUtils$DataType -> Dakv$kHrj:
    react.surge.util.ReflectionUtils$DataType BYTE -> YqyT
    react.surge.util.ReflectionUtils$DataType SHORT -> wWlT
    react.surge.util.ReflectionUtils$DataType INTEGER -> Faou
    react.surge.util.ReflectionUtils$DataType LONG -> WtcP
    react.surge.util.ReflectionUtils$DataType CHARACTER -> QrqQ
    react.surge.util.ReflectionUtils$DataType FLOAT -> nfdG
    react.surge.util.ReflectionUtils$DataType DOUBLE -> aFkM
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> Tsiw
    java.util.Map CLASS_MAP -> xkpO
    java.lang.Class primitive -> XEBW
    java.lang.Class reference -> DRyW
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> KrBJ
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> lUhW
    704:704:java.lang.Class getReference() -> BeCt
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> hbMk
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> doSM
    741:742:java.lang.Class getReference(java.lang.Class) -> KUIg
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> kHrj
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> hbMk
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> hbMk
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> doSM
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> kHrj
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> Dakv$hbMk:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> WtcM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> IQgl
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> grpE
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> WtdE
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> KGNO
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> HgwU
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> qMiX
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> Qarh
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> wWnc
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> qpQE
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> YYJJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> tEtb
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> pJjI
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> sLCO
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> lhpT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> cVFp
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> WdFV
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> QsVD
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> VWqN
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> nfew
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> Uvpc
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> anpF:
    void refresh() -> refresh
react.surge.util.SQLOperation -> fBjO:
    react.surge.util.SQLOperation LOAD -> PWAS
    react.surge.util.SQLOperation SAVE -> jQiQ
    react.surge.util.SQLOperation[] ENUM$VALUES -> nMUC
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> WjEO:
    react.surge.util.ServerState START -> EWAn
    react.surge.util.ServerState ENABLE -> Ltfy
    react.surge.util.ServerState DISABLE -> Xnww
    react.surge.util.ServerState STOP -> DKLG
    react.surge.util.ServerState RUNNING -> hnFR
    react.surge.util.ServerState[] ENUM$VALUES -> hdtK
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> qJym:
    org.bukkit.Location location -> ubGD
    org.bukkit.util.Vector offset -> Khpw
    org.bukkit.util.Vector size -> fMkk
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> KLXv
    90:94:org.bukkit.Location randomLocation() -> bGjK
    104:104:org.bukkit.Location randomSurface() -> eYcr
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> pQSm
    129:129:org.bukkit.util.Vector getSize() -> PLHV
react.surge.util.SnowLevel -> NNHg:
    byte level -> HEue
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> VwmF
    51:52:void setLevel(byte) -> hbMS
react.surge.util.SuperCaller -> cdUf:
    void run() -> run
react.surge.util.T -> Wicg:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> hbMk
    32:35:void stop() -> stop
react.surge.util.TXT -> FEqt:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> IqFj
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> kHrj
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> kHrj
    99:99:java.lang.String line(react.surge.util.C,int) -> kHrj
    113:113:java.lang.String underline(react.surge.util.C,int) -> hbMk
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> kHrj
react.surge.util.Tag -> wnqn:
    java.lang.String value() -> value
react.surge.util.Timer -> RtIh:
    long tns -> tFSf
    long cns -> wypT
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> hRLf
react.surge.util.VectorMath -> XKGb:
    int[] $SWITCH_TABLE$surge$util$Axis -> hJhR
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> MLtj
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> kHrj
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> kHrj
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> hbMk
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> doSM
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> kHrj
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> hbMk
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> hbMk
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> doSM
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> KUIg
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> TqFU
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> fmJA
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> IqFj
    111:111:double round(double,int) -> TqFU
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> kHrj
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> kHrj
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> kHrj
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> KUIg
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> TqFU
    268:268:org.bukkit.util.Vector toVector(float,float) -> kHrj
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> kHrj
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> kHrj
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> Ahlu
    337:340:double getSpeed(org.bukkit.util.Vector) -> hbMS
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> kHrj
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> imaA
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> kHrj
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> hbMk
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> doSM
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> KUIg
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> GrqA
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> vtfV
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> VDgv
react.surge.util.VectorMath$1 -> XKGb$1:
    org.bukkit.util.Vector val$vector -> NPYL
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> Jjwq
    1:1:java.lang.Object onAdapt(java.lang.Object) -> IqFj
react.surge.util.W -> FODc:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> hbMS
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> kHrj
    75:86:org.bukkit.entity.Entity getEntity(int) -> oEAG
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> kHrj
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> kHrj
    143:143:int getChunkX(org.bukkit.block.Block) -> imaA
    155:155:int getChunkY(org.bukkit.block.Block) -> GrqA
    168:169:void dropXp(org.bukkit.Location,int) -> hbMk
    180:180:int getChunkZ(org.bukkit.block.Block) -> Jjwq
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> hbMk
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> kHrj
    232:239:react.glang.GList news(org.bukkit.Location) -> teOi
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> kHrj
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> Whlr
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> OPSR
    300:300:org.bukkit.World toSync(org.bukkit.World) -> CUcK
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> NoTr
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> Whlr
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> YoSr
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> iurJ
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> kHrj
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> kHrj
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> kHrj
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> kHrj
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> kHrj
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> kHrj
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> kHrj
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> kHrj
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> UkVj
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> TNcE
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> YoSr
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> doSM
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> kHrj
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> kHrj
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> kHrj
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> kHrj
react.surge.util.W$1 -> FODc$1:
    java.lang.Double val$doff -> qxUr
    org.bukkit.entity.Entity val$e -> QarR
    org.bukkit.entity.Entity[] val$result -> emCu
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> Jjwq
react.surge.util.Worlds -> XdXp:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> tDAw
    33:33:boolean hasWorld(java.lang.String) -> MkrF
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> kknq:
react.text.ColoredString -> JdAx:
    react.surge.util.C c -> FkDw
    java.lang.String s -> uIWR
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> rEwE
    42:43:void setC(react.surge.util.C) -> hbMk
    47:47:java.lang.String getS() -> ObWW
    52:53:void setS(java.lang.String) -> wDEx
react.text.RTEX -> Iyou:
    react.glang.GList extras -> EWAH
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> fuxp
    44:58:react.json.JSONObject toJSON() -> kkXi
react.text.RTX -> sABw:
    react.json.JSONArray base -> vKxm
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> fmJA
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> hbMk
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> kHrj
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> kHrj
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> hbMk
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> doSM
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> kHrj
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> hbMk
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> doSM
    265:265:react.json.JSONArray toJSON() -> RcOo
    276:277:void tellRawTo(org.bukkit.entity.Player) -> ArAo
react.text.RawText -> PTRJ:
    java.lang.String COLOR_BLACK -> EhDb
    java.lang.String COLOR_DARK_BLUE -> DvCS
    java.lang.String COLOR_DARK_GREEN -> jblg
    java.lang.String COLOR_DARK_AQUA -> DmRL
    java.lang.String COLOR_DARK_RED -> PWBa
    java.lang.String COLOR_DARK_PURPLE -> HpmP
    java.lang.String COLOR_GOLD -> rrtr
    java.lang.String COLOR_GRAY -> dOxp
    java.lang.String COLOR_DARK_GRAY -> dYKt
    java.lang.String COLOR_BLUE -> KObq
    java.lang.String COLOR_GREEN -> bcfb
    java.lang.String COLOR_AQUA -> fpSL
    java.lang.String COLOR_RED -> Posg
    java.lang.String COLOR_LIGHT_PURPLE -> iWXn
    java.lang.String COLOR_YELLOW -> Jnbs
    java.lang.String COLOR_WHITE -> xlVP
    java.lang.String COLOR_NONE -> nwjF
    java.lang.String HEAD_TEXT -> WBDi
    java.lang.String HEAD_COLOR -> TRNO
    java.lang.String HEAD_BOLD -> mSEJ
    java.lang.String HEAD_ITALIC -> lXQn
    java.lang.String HEAD_UNDERLINED -> yEDq
    java.lang.String HEAD_STRIKETHROUGH -> bdEr
    java.lang.String HEAD_OBFUSCATED -> QHan
    java.lang.String HEAD_CLICK_EVENT -> nVGS
    java.lang.String HEAD_HOVER_EVENT -> QrvA
    java.lang.String HEAD_ACTION -> eJkH
    java.lang.String HEAD_VALUE -> GnIn
    java.lang.String HEAD_EXTRA -> Pxcf
    java.lang.String HEAD_ACTION_SHOW_TEXT -> nMVU
    java.lang.String HEAD_ACTION_COMMAND -> iOIA
    java.util.ArrayList components -> gbTW
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> eaVQ
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> TqFU
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> kHrj
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> kHrj
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> kHrj
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> kHrj
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> kHrj
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> kHrj
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> kHrj
    307:313:java.lang.String compile() -> RQnN
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> kHrj

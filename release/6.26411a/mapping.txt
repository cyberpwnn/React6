react.Config -> QMiR:
    react.glang.GMap worldConfigs -> QMiR
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> VTgk
    java.lang.String A_COMMANDOVERRIDE_TPS -> TFQj
    java.lang.String A_REACT_REMOTE_PORT -> XJNA
    java.lang.String A_REACT_REMOTE_ENABLED -> qtwn
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> jhSs
    java.lang.String A_POOL_MAXTHREADS -> JQek
    java.lang.String A_POOL_SYNC_NANOS -> NMRH
    java.lang.String A_FASTLEAF_ENABLED -> NVBo
    java.lang.String A_FASTLEAF_ONDECAY -> YnsY
    java.lang.String A_FASTLEAF_INSTANT -> nIjv
    java.lang.String A_FASTLEAF_DECAYPERIOD -> HnDT
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> BlQP
    java.lang.String A_ENTITYSTACK_ENABLED -> NweN
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> WWlK
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> OjHJ
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> Bkok
    java.lang.String A_GLASS_SHOW_BLOCKS -> wfHd
    java.lang.String A_GLASS_SHOW_PARTICLES -> upbr
    java.lang.String A_ALLOW_CULL -> wKtj
    java.lang.String A_ALLOW_PURGE -> TFQw
    java.lang.String A_ALLOW_STACKING -> PRuW
    java.lang.String A_CULL_RULES -> UcGD
    java.lang.String A_RAI_TPS_HIGH_TICK -> cknP
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> hrlv
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> DOrl
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> INbF
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> ykmN
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> ERuu
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> tvPT
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> wTdl
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> WWkH
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> jWPj
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> wwHi
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> uFNj
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> UADT
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> imcR
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> aChT
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> Tgue
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> cJNq
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> CUci
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> HCRD
    java.lang.String A_RAI_FLUID_TIME_CEIL -> DXhB
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> hamt
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> rMhs
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> bhoC
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> awMr
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> AiOo
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> gMij
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> tdpo
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> eHDq
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> PmKT
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> tCMu
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> HTRG
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> oMPb
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> XcaC
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> NLqU
    java.lang.String A_USE_WORLD_CONFIGS -> lLWk
    java.lang.String A_LANGUAGE -> iusB
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> OYFk
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> ogDD
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> ESXv
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> CVFF
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> yknp
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> kYvG
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> tnCB
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> ofak
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> wTfw
    java.lang.String A_RAI_ENTITY_PROPIGATE -> jNbI
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> jFQa
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> EAvy
    double MAX_EXPLOSION_MS -> EJjg
    boolean COMMANDOVERRIDES_TPS -> XBAa
    int REACT_REMOTE_PORT -> rpPH
    boolean REACT_REMOTE_ENABLED -> MdEU
    int ENTITY_STACK_MAX_COUNT -> McdP
    int POOL_MAXTHREADS -> YDcY
    long POOL_SYNC_NANOS -> Ipil
    boolean FASTLEAF_ENABLED -> idss
    boolean FASTLEAF_ONDECAY -> RbRn
    boolean FASTLEAF_INSTANT -> FgaN
    int FASTLEAF_DECAYPERIOD -> KvpX
    boolean COMMANDOVERRIDES_MEMORY -> jEsX
    boolean ENTITYSTACK_ENABLED -> imeA
    int ENTITYSTACK_MINIMUM_GROUP -> HnHX
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> wTio
    int ENTITYSTACK_MAXIMUM_HEALTH -> BlUU
    boolean GLASS_SHOW_BLOCKS -> GYcH
    boolean GLASS_SHOW_PARTICLES -> RQQp
    react.glang.GList ALLOW_CULL -> yuDH
    react.glang.GList ALLOW_PURGE -> OjKi
    react.glang.GList ALLOW_STACKING -> WFms
    react.glang.GList CULL_RULES -> uErj
    double RAI_TPS_HIGH_TICK -> HeWV
    long RAI_REDSTONE_TIME_FLOOR -> gpNv
    long RAI_REDSTONE_TIME_CEIL -> Igwc
    long RAI_REDSTONE_TIME_MUDDING -> mhoO
    double RAI_REDSTONE_TIME_FUNCTION -> eHEi
    double RAI_REDSTONE_TIME_OVERBLEED -> CLvA
    int RAI_REDSTONE_TIME_RADIUS -> ronI
    int RAI_REDSTONE_TIME_PROPIGATION -> QooY
    long RAI_HOPPER_TIME_FLOOR -> Ahqy
    long RAI_HOPPER_TIME_CEIL -> XRbC
    long RAI_HOPPER_TIME_MUDDING -> EAxn
    double RAI_HOPPER_TIME_FUNCTION -> XuEe
    double RAI_HOPPER_TIME_OVERBLEED -> vIVM
    int RAI_HOPPER_TIME_RADIUS -> imcn
    int RAI_HOPPER_TIME_PROPIGATION -> CDeD
    int RAI_ENTITY_CHUNK_MULTIPLIER -> fmNx
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> APBr
    int RAI_ENTITY_CHUNK_RADIUS -> OYLF
    long RAI_FLUID_TIME_FLOOR -> MAcU
    long RAI_FLUID_TIME_CEIL -> oMUm
    long RAI_FLUID_TIME_MUDDING -> ejLP
    double RAI_FLUID_TIME_FUNCTION -> KTnj
    double RAI_FLUID_TIME_OVERBLEED -> oDdd
    int RAI_FLUID_TIME_RADIUS -> YEGJ
    int RAI_FLUID_TIME_PROPIGATION -> gyCn
    double SMEAR_TICK_ENTITIES_MAX_TICK -> YgIu
    double SMEAR_TICK_TILES_MAX_TICK -> clWH
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> VoBe
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> mysM
    double SMEAR_TICK_ENTITIES_AMOUNT -> BdGM
    double SMEAR_TICK_TILES_AMOUNT -> SnIm
    boolean SMEAR_TICK_ENTITIES_ENABLE -> vYyc
    boolean SMEAR_TICK_TILES_ENABLE -> SnJK
    boolean HOPPER_OVERTICK_ENABLE -> ogHX
    boolean USE_WORLD_CONFIGS -> wfOJ
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> PmPl
    long RAI_CHUNK_TIME_CEIL -> sPpG
    long RAI_CHUNK_TIME_MUDDING -> Jbks
    double RAI_CHUNK_TIME_FUNCTION -> aemw
    double RAI_CHUNK_TIME_OVERBLEED -> RkDk
    int RAI_CHUNK_TIME_RADIUS -> LGOy
    int RAI_CHUNK_TIME_PROPIGATION -> maAa
    boolean RAI_CHUNK_TIME_PROPIGATE -> AFrD
    boolean RAI_FLUID_TIME_PROPIGATE -> miQs
    boolean RAI_ENTITY_PROPIGATE -> dEED
    boolean RAI_HOPPER_TIME_PROPIGATE -> VeoG
    boolean RAI_REDSTONE_TIME_PROPIGATE -> MIsB
    boolean hrld -> aCkf
    boolean rns -> LqdV
    boolean rrl -> dfhB
    39:648:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    653:670:void doTrack(org.bukkit.plugin.Plugin) -> QMiR
    675:697:void onRead(org.bukkit.plugin.Plugin) -> VTgk
    701:731:void read(java.io.File,boolean) -> QMiR
    735:752:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> QMiR
    757:765:void closeWorldConfig(org.bukkit.World) -> VTgk
    770:883:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> QMiR
    888:925:react.surge.cluster.DataCluster defaultConfig(boolean) -> QMiR
    930:1009:react.glang.GList getDefaultEntitiesForStacking() -> QMiR
    1014:1033:react.glang.GList getDefaultEntitiesForCulling() -> VTgk
    1038:1075:react.glang.GList getDefaultEntitiesForRemoval() -> TFQj
    1080:1109:react.glang.GList getDefaultCullRules() -> XJNA
react.Config$1 -> QMiR$1:
    java.io.File val$fConfig -> Wysm
    java.io.File val$fConfigExperimental -> pHFp
    org.bukkit.plugin.Plugin val$main -> ooVy
    1:656:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    661:665:void run() -> run
react.Config$2 -> QMiR$2:
    react.api.WorldConfig val$wc -> tCRO
    org.bukkit.World val$w -> XdEl
    1:742:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    747:748:void run() -> run
react.Gate -> VTgk:
    react.glang.GMap defaultSettings -> tKax
    react.glang.GSet refresh -> hIAM
    react.glang.GSet destroy -> ySAm
    40:40:void <init>() -> <init>
    48:138:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> QMiR
    144:175:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> QMiR
    180:180:int getChunkCountForView() -> qtwn
    185:185:int getMaxChunksForView() -> jhSs
    190:190:boolean hasFawe() -> JQek
    195:216:void tickEntityNextTickListTick(org.bukkit.World) -> TFQj
    220:224:void resetEntityMaxTick(org.bukkit.World) -> XJNA
    228:228:int getEntityTickMax(org.bukkit.World) -> qtwn
    233:233:int getTileTickMax(org.bukkit.World) -> jhSs
    238:256:void tweakEntityTickMax(org.bukkit.World,int) -> QMiR
    260:277:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> QMiR
    282:286:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> QMiR
    290:302:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> QMiR
    307:311:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> VTgk
    315:333:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> QMiR
    337:341:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> JQek
    346:349:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> QMiR
    354:357:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> VTgk
    362:362:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> TFQj
    367:367:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> XJNA
    372:372:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> qtwn
    377:377:boolean isBadForUnloading() -> NMRH
    382:382:boolean canUnload(org.bukkit.World,int,int) -> QMiR
    389:405:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    411:422:void unloadChunk(org.bukkit.World,int,int) -> VTgk
    426:442:void removeEntity(org.bukkit.entity.Entity) -> QMiR
    446:462:void purgeEntity(org.bukkit.entity.Entity) -> VTgk
    466:482:void cullEntity(org.bukkit.entity.Entity) -> TFQj
    487:504:void updateBlock(org.bukkit.block.Block) -> QMiR
    508:512:java.lang.String header(java.lang.String,react.surge.util.C) -> QMiR
    517:517:java.lang.String header(react.surge.util.C) -> QMiR
    523:527:void updateFluid(org.bukkit.block.Block) -> VTgk
    531:532:void refresh(org.bukkit.Chunk) -> VTgk
    537:556:void refreshChunks() -> NVBo
    560:561:void sendBlockChange(org.bukkit.Location) -> QMiR
    42:44:void <clinit>() -> <clinit>
react.Gate$1 -> VTgk$1:
    react.api.SelectorPosition val$sel -> UblU
    react.glang.Callback val$prog -> jNfP
    react.glang.Callback val$cb -> JcMp
    49:49:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    53:136:void run() -> run
react.Gate$1$1 -> VTgk$1$1:
    java.lang.Object val$o -> LWrC
    java.lang.reflect.Constructor val$vectorConstruct -> GQUk
    java.lang.reflect.Constructor val$cuboidConstruct -> yuIG
    java.lang.reflect.Method val$faweFixMethod -> Mtid
    java.lang.Integer[] val$total -> fKMp
    java.lang.Integer[] val$sof -> idwt
    java.lang.Integer val$tot -> nkvr
    react.Gate$1 this$0 -> mhtX
    81:81:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],java.lang.Integer) -> <init>
    87:105:void run() -> run
react.Gate$1$2 -> VTgk$1$2:
    java.lang.Integer[] val$total -> fKMp
    react.Gate$1 this$0 -> mhtX
    110:110:void <init>(react.Gate$1,java.lang.String,int,java.lang.Integer[]) -> <init>
    116:124:void run() -> run
react.Gate$2 -> VTgk$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> Usow
    290:290:void <clinit>() -> <clinit>
react.Info -> TFQj:
    java.lang.String CORE_REACT_DOT -> Btif
    java.lang.String CORE_NAME -> QFBa
    java.lang.String CORE_CACHE -> upjs
    java.lang.String WORLD_CONFIGS -> oDeq
    java.lang.String CORE_DOTYML -> MRgX
    java.lang.String COMMAND_REACT -> mPCG
    java.lang.String COMMAND_RAI -> nRdf
    java.lang.String COMMAND_ACT_DESCRIPTION -> MuKU
    java.lang.String COMMAND_ACT -> ckxI
    java.lang.String COMMAND_ACT_ALIAS_1 -> byvU
    java.lang.String COMMAND_ACT_ALIAS_2 -> FyGl
    java.lang.String COMMAND_ACT_USAGE -> tuyB
    java.lang.String COMMAND_HELP_DESCRIPTION -> cJUa
    java.lang.String COMMAND_HELP -> NEIl
    java.lang.String COMMAND_HELP_ALIAS_1 -> SKgg
    java.lang.String COMMAND_HELP_ALIAS_2 -> hICp
    java.lang.String COMMAND_HELP_USAGE -> EJpI
    java.lang.String COMMAND_STATUS_DESCRIPTION -> lwRt
    java.lang.String COMMAND_STATUS -> IqMi
    java.lang.String COMMAND_STATUS_ALIAS_1 -> aDMt
    java.lang.String COMMAND_STATUS_ALIAS_2 -> xytE
    java.lang.String COMMAND_STATUS_USAGE -> qmPR
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> TNhy
    java.lang.String COMMAND_CPUSCORE -> hruh
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> AGUA
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> bqcw
    java.lang.String COMMAND_CPUSCORE_USAGE -> CwmG
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> ydEq
    java.lang.String COMMAND_RELOAD -> dLvl
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> yIqj
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> kQjg
    java.lang.String COMMAND_RELOAD_USAGE -> gxcU
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> RQTj
    java.lang.String COMMAND_MONITOR -> gMnm
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> bWrX
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> RHdM
    java.lang.String COMMAND_MONITOR_USAGE -> biUA
    java.lang.String COMMAND_ENV_DESCRIPTION -> RsXP
    java.lang.String COMMAND_ENV -> gxgG
    java.lang.String COMMAND_ENV_ALIAS_1 -> afSw
    java.lang.String COMMAND_ENV_ALIAS_2 -> HSys
    java.lang.String COMMAND_ENV_USAGE -> CVLp
    java.lang.String COMMAND_VERSION_DESCRIPTION -> oflS
    java.lang.String COMMAND_VERSION -> hIGB
    java.lang.String COMMAND_VERSION_ALIAS_1 -> rpUp
    java.lang.String COMMAND_VERSION_ALIAS_2 -> AhxB
    java.lang.String COMMAND_VERSION_USAGE -> AyyQ
    java.lang.String COMMAND_MAP_DESCRIPTION -> WqiH
    java.lang.String COMMAND_MAP -> pYMi
    java.lang.String COMMAND_MAP_ALIAS_1 -> JJAW
    java.lang.String COMMAND_MAP_ALIAS_2 -> RQXI
    java.lang.String COMMAND_MAP_USAGE -> xXTc
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> xPCx
    java.lang.String COMMAND_TOPCHUNK -> xqfP
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> ETDP
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> TOMm
    java.lang.String COMMAND_TOPCHUNK_USAGE -> sIEX
    java.lang.String COMMAND_GLASS_DESCRIPTION -> kQnT
    java.lang.String COMMAND_GLASS -> JstI
    java.lang.String COMMAND_GLASS_ALIAS_1 -> yuJS
    java.lang.String COMMAND_GLASS_ALIAS_2 -> MBHm
    java.lang.String COMMAND_GLASS_USAGE -> xhuL
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> VUTL
    java.lang.String COMMAND_CBLAME -> yAeD
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> uqMg
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> TqOY
    java.lang.String COMMAND_CBLAME_USAGE -> QFCT
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> QgeQ
    java.lang.String COMMAND_ACTIONLOG -> XAeh
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> BAhc
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> gxeo
    java.lang.String COMMAND_ACTIONLOG_USAGE -> Elrx
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> GjiS
    java.lang.String COMMAND_CAPABILITIES -> MJWd
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> dgLI
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> rVaw
    java.lang.String COMMAND_CAPABILITIES_USAGE -> VndS
    java.lang.String MSG_PERMISSION -> sYeD
    java.lang.String MSG_MONITORING_STARTED -> lMAC
    java.lang.String MSG_MONITORING_STOPPED -> RsYm
    java.lang.String MSG_ACTIONLOGGING_STARTED -> bqgT
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> pXlJ
    java.lang.String MSG_GLASS_STARTED -> yIsm
    java.lang.String MSG_GLASS_STOPPED -> OjPl
    org.bukkit.Color COLOR_HOPPER -> Rrxl
    org.bukkit.Color COLOR_BLOCK_UPDATE -> PCAA
    org.bukkit.Color COLOR_BLOCK_FROMTO -> CgOB
    org.bukkit.Color COLOR_BLOCK_BURN -> rNQW
    org.bukkit.Color COLOR_BLOCK_DECAY -> LGTt
    org.bukkit.Color COLOR_BLOCK_FORM -> teYV
    java.lang.String NAME_TICK -> AiXw
    java.lang.String NAME_MEMORY -> gMpy
    java.lang.String NAME_CHUNKS -> NDjO
    java.lang.String NAME_ENTITIES -> GPwL
    java.lang.String STATE_MONITORING_TAB -> gFAr
    java.lang.String STATE_MONITORING_ENABLED -> bhyA
    java.lang.String STATE_MONITORING_HIGH -> cSKC
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> fKQu
    java.lang.String STATE_MAPPING_ENABLED -> wfVF
    java.lang.String STATE_SOUND_PLAYS -> tLJn
    java.lang.String STATE_MONITORING_POSTED -> cBHp
    java.lang.String STATE_MONITORING_LASTTAB -> wTsS
    java.lang.String STATE_GLASSES_ENABLED -> MuNo
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> JbtJ
    java.lang.String STATE_PLAYER_HOTBAR -> PmWC
    java.lang.String STATE_PLAYER_SHIFT -> PugX
    java.lang.String STATE_PLAYER_SCROLL -> hQXX
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> RkLn
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> MBKO
    java.lang.String PERM_ACCESS -> jppX
    java.lang.String PERM_MONITOR -> lLbT
    java.lang.String PERM_MONITOR_TITLE -> anfF
    java.lang.String PERM_MONITOR_ACTIONLOG -> Daae
    java.lang.String PERM_MONITOR_MAP -> awWP
    java.lang.String PERM_MONITOR_ENVIRONMENT -> qvDp
    java.lang.String PERM_MONITOR_GLASSES -> URQU
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> DYRD
    java.lang.String PERM_ACT -> Mckb
    java.lang.String PERM_RAI -> LrJr
    java.lang.String PERM_RAI_CONTROL -> EJrW
    java.lang.String PERM_RAI_ACCESS -> DYQi
    java.lang.String PERM_RAI_MONITOR -> VLcf
    java.lang.String PERM_RELOAD -> jOMM
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> TNnF
    java.lang.String SAMPLER_REDSTONE_TICK -> pGkv
    java.lang.String SAMPLER_ENTITY_TIME -> Jbrn
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> XuNO
    java.lang.String SAMPLER_TILE_TIME_LOCK -> WiYe
    java.lang.String SAMPLER_TILE_TIME -> VvwI
    java.lang.String SAMPLER_TILE_DROPTICK -> iCXh
    java.lang.String SAMPLER_ENTITY_DROPTICK -> SLKk
    java.lang.String SAMPLER_REDSTONE_SECOND -> cIxC
    java.lang.String SAMPLER_REDSTONE_TIME -> wLaT
    java.lang.String SAMPLER_PHYSICS_TIME -> UJCt
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> qTDq
    java.lang.String SAMPLER_HOPPER_TICK -> XuQC
    java.lang.String SAMPLER_HOPPER_SECOND -> QMwj
    java.lang.String SAMPLER_HOPPER_TIME -> McoG
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> IXDC
    java.lang.String SAMPLER_FLUID_TICK -> flwN
    java.lang.String SAMPLER_FLUID_SECOND -> wLeJ
    java.lang.String SAMPLER_FLUID_TIME -> NxTU
    java.lang.String SAMPLER_TPS -> yAhw
    java.lang.String SAMPLER_TICK -> TWaf
    java.lang.String SAMPLER_TIU -> paat
    java.lang.String SAMPLER_MEM -> PvJX
    java.lang.String SAMPLER_FREEMEM -> YVPn
    java.lang.String SAMPLER_MAXMEM -> wMDr
    java.lang.String SAMPLER_ALLOCMEM -> sYic
    java.lang.String SAMPLER_MAHS -> DXtV
    java.lang.String SAMPLER_CHK -> UlHO
    java.lang.String SAMPLER_ATASK -> nSLQ
    java.lang.String SAMPLER_STASK -> bOiS
    java.lang.String SAMPLER_CHK_TIME -> JJFD
    java.lang.String SAMPLER_EXPLOSION_TIME -> EeJG
    java.lang.String SAMPLER_CHKS -> aLfN
    java.lang.String SAMPLER_ENT -> VnjH
    java.lang.String SAMPLER_ENTLIV -> PKVU
    java.lang.String SAMPLER_ENTDROP -> AGXs
    java.lang.String SAMPLER_ENTTILE -> afXB
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> CDpL
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> vAOy
    java.lang.String ACTION_CULL_ENTITIES_NAME -> qCBa
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> xrJm
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> EBck
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> owoy
    java.lang.String ACTION_UPDATE_FLUID_NAME -> eYRE
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> CEPc
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> pGoV
    java.lang.String ACTION_LOCK_FLUID_STATUS -> kbrs
    java.lang.String ACTION_LOCK_FLUID_NAME -> opAX
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> OHRA
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> ObDf
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> TOPk
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> feFd
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> WqlM
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> xFuH
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> esDo
    java.lang.String ACTION_LOCK_HOPPER_NAME -> yBIO
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> cRjt
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> gVgD
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> hjju
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> ryJK
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> FNXo
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> aoLG
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> RHmD
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> UcXM
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> ivbq
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> LOkt
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> rVhi
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> eYUW
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> WaNT
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> CVSE
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> QyOd
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> fTHN
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> CgVP
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> UJFj
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> RYlk
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> kswB
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> DivR
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> EeIt
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> PKVd
    java.lang.String ACTION_FIX_LIGHTING_NAME -> pGps
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> DPeI
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> QMyT
    java.lang.String ACTION_COLLECT_GARBAGE -> xOhV
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> qSeC
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> SmrI
    6:6:void <init>() -> <init>
    8:247:void <clinit>() -> <clinit>
react.Lang -> XJNA:
    java.lang.String BUNDLE_NAME -> OHTN
    java.util.ResourceBundle RESOURCE_BUNDLE -> JsyO
    java.util.ResourceBundle PRIMARY_BUNDLE -> PCFk
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> qtwn:
    react.React instance -> imtC
    react.controller.SampleController sampleController -> SvfG
    react.controller.PlayerController playerController -> VDYy
    react.controller.MonitorController monitorController -> RkSI
    react.controller.CommandController commandController -> UAWY
    react.controller.ActionController actionController -> qTJE
    react.controller.FastDecayController fastDecayController -> fCHM
    react.controller.EntityStackController entityStackController -> NESg
    react.controller.GlassController glassController -> RtCi
    react.controller.EntityCullController entityCullController -> VLkP
    react.controller.SpikeController spikeController -> iecK
    react.controller.SecurityController securityController -> wCvu
    react.controller.RedstoneController redstoneController -> IiJG
    react.controller.HopperController hopperController -> nlbP
    react.controller.PhysicsController physicsController -> OQIA
    react.controller.TickTimeController tickTimeController -> EKXt
    react.controller.RAIController raiController -> tfCE
    react.controller.FluidController fluidController -> DHVV
    react.controller.ChunkController chunkController -> OagV
    react.controller.GraphController graphController -> HmtS
    react.controller.ChronophyFluidController fluidChronophyController -> LPNO
    react.controller.EventController eventController -> LqpM
    react.controller.SmearTickController smearTickController -> IiHM
    react.controller.FeatureController featureController -> qukF
    react.controller.HopperOvertickController hopperPlungeController -> anke
    react.controller.LanguageController languageController -> ntrD
    react.controller.RemoteController remoteController -> AaRE
    react.controller.ExplosiveController explosiveController -> NVTU
    react.controller.WorldController worldController -> mPLe
    42:42:void <init>() -> <init>
    134:142:void enable() -> enable
    148:148:void disable() -> disable
react.React$1 -> qtwn$1:
    react.React this$0 -> KCxr
    1:134:void <init>(react.React) -> <init>
    139:140:void run() -> run
react.action.ActionCollectGarbage -> jhSs:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
react.action.ActionCollectGarbage$1 -> jhSs$1:
    react.action.source.IActionSource val$source -> jWcX
    react.action.ActionCollectGarbage this$0 -> pYTw
    30:30:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> jhSs$1$1:
    long val$mbnex -> gFKB
    long val$mbmem -> AYAP
    react.action.ActionCollectGarbage$1 this$1 -> ndQJ
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> JQek:
    long ms -> EumY
    int lcd -> qSfm
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
    27:27:void access$0(react.action.ActionCullEntities,long) -> QMiR
    28:28:int access$1(react.action.ActionCullEntities) -> QMiR
    27:27:long access$2(react.action.ActionCullEntities) -> VTgk
react.action.ActionCullEntities$1 -> JQek$1:
    react.action.ActionCullEntities this$0 -> AaSR
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> YnsY
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> JQek$2:
    react.action.ActionCullEntities this$0 -> AaSR
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> YnsY
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> JQek$3:
    react.action.ActionCullEntities this$0 -> AaSR
    react.glang.FinalInteger val$completed -> AXae
    react.glang.FinalInteger val$total -> BdUm
    react.glang.FinalInteger val$totalCulled -> fCJU
    react.glang.FinalInteger val$totalChunked -> WXaA
    react.action.source.IActionSource val$source -> jWcX
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> JQek$4:
    react.action.ActionCullEntities this$0 -> AaSR
    react.action.source.IActionSource val$source -> jWcX
    react.glang.FinalInteger val$totalCulled -> fCJU
    react.glang.FinalInteger val$totalChunked -> WXaA
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> NMRH:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
react.action.ActionFixLighting$1 -> NMRH$1:
    react.action.ActionFixLighting this$0 -> jiIe
    29:29:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> YnsY
    29:29:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> NMRH$2:
    react.action.source.IActionSource val$source -> jWcX
    int val$ch -> oDru
    react.action.ActionFixLighting this$0 -> jiIe
    78:78:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> QMiR
    78:78:void run(java.lang.Object) -> QMiR
react.action.ActionFixLighting$3 -> NMRH$3:
    react.action.ActionFixLighting this$0 -> jiIe
    89:89:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> QMiR
    89:89:void run(java.lang.Object) -> QMiR
react.action.ActionLockFluid -> NVBo:
    int lcd -> qSfm
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
react.action.ActionLockFluid$1 -> NVBo$1:
    react.action.ActionLockFluid this$0 -> NMeq
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> YnsY
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> NVBo$2:
    react.action.ActionLockFluid this$0 -> NMeq
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> YnsY
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> YnsY:
    int lcd -> qSfm
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
react.action.ActionLockHopper$1 -> YnsY$1:
    react.action.ActionLockHopper this$0 -> UkmO
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> YnsY
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> YnsY$2:
    react.action.ActionLockHopper this$0 -> UkmO
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> YnsY
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> nIjv:
    int lcd -> qSfm
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
react.action.ActionLockRedstone$1 -> nIjv$1:
    react.action.ActionLockRedstone this$0 -> GtFj
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> YnsY
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> nIjv$2:
    react.action.ActionLockRedstone this$0 -> GtFj
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> YnsY
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> HnDT:
    long ms -> EumY
    int lcd -> qSfm
    boolean fail -> sscH
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> VTgk
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> QMiR
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> QMiR
    23:23:int access$200(react.action.ActionPurgeChunks) -> VTgk
    23:23:long access$100(react.action.ActionPurgeChunks) -> TFQj
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> QMiR
react.action.ActionPurgeChunks$1 -> HnDT$1:
    react.action.ActionPurgeChunks this$0 -> bXaI
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> YnsY
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> HnDT$2:
    int val$dk -> lnmr
    java.lang.Object val$j -> MKCv
    react.glang.FinalInteger val$acompleted -> OPid
    react.glang.FinalInteger val$completed -> AXae
    react.glang.FinalInteger val$total -> BdUm
    react.glang.FinalInteger val$totalCulled -> fCJU
    react.glang.FinalInteger val$totalChunked -> WXaA
    react.action.source.IActionSource val$source -> jWcX
    react.api.ISelector[] val$selectors -> FySx
    react.action.ActionPurgeChunks this$0 -> bXaI
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> HnDT$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> EePK
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> HnDT$3:
    react.action.source.IActionSource val$source -> jWcX
    react.glang.FinalInteger val$acompleted -> OPid
    react.action.ActionPurgeChunks this$0 -> bXaI
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> HnDT$4:
    org.bukkit.Chunk val$chunk -> SLTu
    java.lang.Runnable val$cb -> aMKl
    react.action.ActionPurgeChunks this$0 -> bXaI
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> BlQP:
    long ms -> EumY
    int lcd -> qSfm
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> VTgk
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> QMiR
    27:27:int access$100(react.action.ActionPurgeEntities) -> QMiR
    27:27:long access$000(react.action.ActionPurgeEntities) -> VTgk
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> QMiR
react.action.ActionPurgeEntities$1 -> BlQP$1:
    react.action.ActionPurgeEntities this$0 -> Cohb
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> YnsY
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> BlQP$2:
    react.action.ActionPurgeEntities this$0 -> Cohb
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> YnsY
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> BlQP$3:
    react.glang.FinalInteger val$completed -> AXae
    react.glang.FinalInteger val$total -> BdUm
    react.glang.FinalInteger val$totalCulled -> fCJU
    react.glang.FinalInteger val$totalChunked -> WXaA
    react.action.source.IActionSource val$source -> jWcX
    react.action.ActionPurgeEntities this$0 -> Cohb
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> BlQP$4:
    react.action.source.IActionSource val$source -> jWcX
    react.glang.FinalInteger val$totalCulled -> fCJU
    react.glang.FinalInteger val$totalChunked -> WXaA
    react.action.ActionPurgeEntities this$0 -> Cohb
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> BlQP$5:
    org.bukkit.entity.Entity val$i -> BBTH
    react.glang.FinalInteger val$cu -> wnmR
    int val$k -> IykC
    org.bukkit.Chunk val$chunk -> SLTu
    java.lang.Runnable val$cb -> aMKl
    react.action.ActionPurgeEntities this$0 -> Cohb
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> NweN:
    int lcd -> qSfm
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
react.action.ActionUnlockFluid$1 -> NweN$1:
    react.action.ActionUnlockFluid this$0 -> oMcd
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> YnsY
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> WWlK:
    int lcd -> qSfm
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
react.action.ActionUnlockHopper$1 -> WWlK$1:
    react.action.ActionUnlockHopper this$0 -> XldT
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> YnsY
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> OjHJ:
    int lcd -> qSfm
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
react.action.ActionUnlockRedstone$1 -> OjHJ$1:
    react.action.ActionUnlockRedstone this$0 -> ylav
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> YnsY
    1:1:java.lang.Object get() -> get
react.action.source.AccessActionSource -> Bkok:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> QMiR
    26:33:void sendResponseSuccess(java.lang.String) -> VTgk
    38:45:void sendResponseError(java.lang.String) -> TFQj
    50:57:void sendResponseActing(java.lang.String) -> XJNA
react.action.source.ActionHandle -> wfHd:
    react.action.source.ActionHandle AUTOMATIC -> ooek
    react.action.source.ActionHandle MANUAL -> WPOq
    react.action.source.ActionHandle MUTEX -> STcv
    react.action.source.ActionHandle[] $VALUES -> XSSR
    3:3:react.action.source.ActionHandle[] values() -> values
    3:3:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.action.source.ConsoleActionSource -> upbr:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> QMiR
    18:19:void sendResponseSuccess(java.lang.String) -> VTgk
    24:25:void sendResponseError(java.lang.String) -> TFQj
    30:31:void sendResponseActing(java.lang.String) -> XJNA
react.action.source.EmptyActionSource -> wKtj:
    3:3:void <init>() -> <init>
    9:9:void sendResponse(java.lang.String) -> QMiR
    15:15:void sendResponseSuccess(java.lang.String) -> VTgk
    21:21:void sendResponseError(java.lang.String) -> TFQj
    27:27:void sendResponseActing(java.lang.String) -> XJNA
react.action.source.IActionSource -> TFQw:
    void sendResponse(java.lang.String) -> QMiR
    void sendResponseSuccess(java.lang.String) -> VTgk
    void sendResponseError(java.lang.String) -> TFQj
    void sendResponseActing(java.lang.String) -> XJNA
react.action.source.PlayerActionSource -> PRuW:
    org.bukkit.entity.Player p -> FySU
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> QMiR
    30:31:void sendResponseSuccess(java.lang.String) -> VTgk
    36:37:void sendResponseError(java.lang.String) -> TFQj
    42:43:void sendResponseActing(java.lang.String) -> XJNA
react.action.source.RAIActionSource -> UcGD:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> QMiR
    16:17:void sendResponseSuccess(java.lang.String) -> VTgk
    22:23:void sendResponseError(java.lang.String) -> TFQj
    28:29:void sendResponseActing(java.lang.String) -> XJNA
react.api.Action -> cknP:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> oERc
    java.lang.String[] nodes -> PeNI
    react.action.source.ActionHandle handle -> Nogy
    react.api.ActionState state -> BmHE
    react.api.ActionTargetType target -> iCaP
    react.api.ActionType type -> eYXY
    react.action.source.IActionSource currentSource -> qdkG
    double progress -> eiyG
    react.glang.GMap defaultSelectors -> yBOL
    28:29:void <init>(react.api.ActionType) -> <init>
    32:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> QMiR
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> QMiR
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> nIjv
    94:94:react.api.ActionState getState() -> HnDT
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> qtwn
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> BlQP
    130:130:react.api.ActionType getType() -> NweN
    136:136:react.glang.GMap getDefaultSelectors() -> WWlK
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> VTgk
    189:190:void completeAction() -> OjHJ
    195:195:react.action.source.IActionSource getCurrentSource() -> Bkok
    201:201:java.lang.String[] getNodes() -> wfHd
    207:208:void setNodes(java.lang.String[]) -> QMiR
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
react.api.ActionAlreadyRunningException -> hrlv:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> DOrl:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> INbF:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> ykmN:
    react.api.ActionState IDLE -> mrTb
    react.api.ActionState RUNNING -> NpLN
    react.api.ActionState[] $VALUES -> dUwR
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> ERuu:
    react.api.ActionTargetType POSITIONAL -> anqS
    react.api.ActionTargetType SYSTEM -> dojJ
    react.api.ActionTargetType[] $VALUES -> ghRh
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> tvPT:
    react.api.ActionType FIX_LIGHTING -> LHBq
    react.api.ActionType UNLOCK_FLUID -> ssed
    react.api.ActionType LOCK_FLUID -> yKCb
    react.api.ActionType UNLOCK_HOPPER -> agAa
    react.api.ActionType LOCK_HOPPER -> VgAt
    react.api.ActionType UNLOCK_REDSTONE -> nuWl
    react.api.ActionType LOCK_REDSTONE -> hjsq
    react.api.ActionType CULL_ENTITIES -> MSWE
    react.api.ActionType COLLECT_GARBAGE -> RITT
    react.api.ActionType PURGE_ENTITIES -> sbcX
    react.api.ActionType PURGE_CHUNKS -> Vnqv
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> Nogy
    react.api.ActionTargetType target -> iCaP
    react.api.ActionType[] $VALUES -> afaW
    6:6:react.api.ActionType[] values() -> values
    6:6:react.api.ActionType valueOf(java.lang.String) -> valueOf
    26:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> upbr
    50:50:react.api.ActionTargetType getTarget() -> BlQP
    6:18:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> wTdl:
    react.api.ActivationRangeType ANIMALS -> gWPf
    react.api.ActivationRangeType MONSTERS -> KxER
    react.api.ActivationRangeType MISC -> ivhc
    react.api.ActivationRangeType[] $VALUES -> YpLH
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> WWkH:
    int value() -> value
react.api.Async -> jWPj:
react.api.CPUBenchmark -> wwHi:
    org.bukkit.command.CommandSender sender -> sender
    int score -> mqrw
    java.lang.Runnable onFinish -> oNGQ
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> wKtj
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> QMiR
    10:10:int access$100(react.api.CPUBenchmark) -> VTgk
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> TFQj
react.api.CPUBenchmark$1 -> wwHi$1:
    react.api.CPUBenchmark this$0 -> nSTW
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> wwHi$2:
    react.api.CPUBenchmark this$0 -> nSTW
    78:78:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> uFNj:
    react.api.CPUResult ULTRA_SLOW -> XRtq
    react.api.CPUResult VERY_SLOW -> jXIj
    react.api.CPUResult SLOW -> ivgj
    react.api.CPUResult AVERAGE -> AOsa
    react.api.CPUResult GOOD -> yctD
    react.api.CPUResult FAST -> HLUv
    react.api.CPUResult VERY_FAST -> wnoI
    react.api.CPUResult ULTRA_FAST -> Rjtj
    java.lang.String m -> mqrh
    react.api.CPUResult[] $VALUES -> jOWo
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> QMiR
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> UADT:
    react.glang.GMap cache -> WicV
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> VTgk
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> TFQj
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> TFQw
    54:54:boolean has(java.lang.Object) -> XJNA
react.api.Capability -> imcR:
    react.api.Capability DUAL_WEILD -> uNuc
    react.api.Capability SCOREBOARD -> nuVP
    react.api.Capability SCOREBOARD_ADVANCED -> ctva
    react.api.Capability HOPPER -> IGIa
    react.api.Capability ENTITY_ATTRIBUTES -> WHAl
    react.api.Capability ENTITY_AI -> jGFq
    react.api.Capability ACTION_BAR -> bPQS
    react.api.Capability ENTITY_NAMES -> Ywyp
    react.api.Capability TITLE_BAR -> wVAX
    react.api.Capability CHUNK_RELIGHTING -> FhVT
    react.api.Capability MONITOR_SUBMISSIVENESS -> GcIP
    react.api.Capability ACCELERATED_PING -> LrWw
    react.api.Capability ENTITY_THROTTLING -> YNJb
    react.api.Capability TILE_THROTTLING -> HKwx
    react.api.Capability PASSENGERS -> ECPX
    react.glang.GList capabilities -> XSXK
    react.surge.util.Protocol version -> rhSu
    react.api.Flavor flavor -> ydWX
    java.lang.String plugin -> DsRX
    java.lang.String name -> name
    56:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> PRuW
    100:100:boolean isFlavorCapable() -> UcGD
    105:105:boolean isVersionCapable() -> cknP
    110:110:boolean isCapable() -> hrlv
    115:115:react.surge.util.Protocol getVersion() -> DOrl
    120:120:react.api.Flavor getFlavor() -> INbF
    125:125:java.lang.String getPlugin() -> ykmN
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> QMiR
    153:167:void sendNotCapable(react.action.source.IActionSource) -> QMiR
    14:48:void <clinit>() -> <clinit>
react.api.CapabilityBasis -> aChT:
    react.api.CapabilityBasis VERSION -> gqEb
    react.api.CapabilityBasis FLAVOR -> ePlW
    react.api.CapabilityBasis PLUGIN -> DapM
    react.api.CapabilityBasis[] $VALUES -> ebOE
    3:3:react.api.CapabilityBasis[] values() -> values
    3:3:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ChunkIssue -> Tgue:
    react.api.ChunkIssue ENTITY -> prnU
    react.api.ChunkIssue HOPPER -> TFjr
    react.api.ChunkIssue TNT -> oEWo
    react.api.ChunkIssue REDSTONE -> ETSB
    react.api.ChunkIssue FLUID -> yAsR
    react.api.ChunkIssue PHYSICS -> ComB
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> sbeM
    react.api.ChunkIssue[] ENUM$VALUES -> RITa
    3:10:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    14:32:double getMS() -> ERuu
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> tvPT
react.api.ChunkIssue$1 -> Tgue$1:
    int[] $SwitchMap$react$api$ChunkIssue -> ydVf
    14:14:void <clinit>() -> <clinit>
react.api.Clip -> cJNq:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> CUci:
    org.bukkit.command.CommandSender sender -> sender
    13:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> QMiR
    31:32:void sendResponseSuccess(java.lang.String) -> VTgk
    37:38:void sendResponseError(java.lang.String) -> TFQj
    43:44:void sendResponseActing(java.lang.String) -> XJNA
react.api.CullList -> HCRD:
    react.glang.GSet toCull -> mHAw
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> XJNA
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> wTdl
react.api.DTest -> DXhB:
    6:6:void <init>() -> <init>
    11:62:int test() -> WWkH
react.api.EntityFlag -> hamt:
    react.api.EntityFlag NAMED -> KMQT
    react.api.EntityFlag TAMED -> tvjD
    react.api.EntityFlag STACKED -> hREV
    react.api.EntityFlag RIDDEN -> SDGa
    react.api.EntityFlag LEASHED -> BmKo
    java.lang.String m -> mqrh
    react.api.EntityFlag[] $VALUES -> QFRS
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> qtwn
    40:70:boolean is(org.bukkit.entity.Entity) -> jhSs
    76:76:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> rMhs:
    react.glang.GSet entityTypes -> cdXQ
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> jWPj
react.api.EntitySample -> bhoC:
    react.glang.GMap counts -> IXLs
    react.glang.GMap sets -> hACO
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> wwHi
    45:45:react.glang.GList getTypes() -> uFNj
    50:57:int total() -> UADT
    62:67:int get(org.bukkit.entity.EntityType) -> QMiR
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> VTgk
    84:96:void add(org.bukkit.entity.Entity) -> XJNA
react.api.Experimental -> awMr:
react.api.Flavor -> AiOo:
    react.api.Flavor ANY -> RQfF
    react.api.Flavor SAFE_MODE -> mPQv
    react.api.Flavor CRAFT_BUKKIT -> UuAt
    react.api.Flavor BUKKIT -> VgCg
    react.api.Flavor SPIGOT -> xOpb
    react.api.Flavor SOGGY_SPIGOT -> WOrq
    react.api.Flavor PAPER_SPIGOT -> HCiq
    react.api.Flavor TACO_SPIGOT -> gNdR
    react.api.Flavor TORCH_SPIGOT -> klSM
    react.api.Flavor FORGE_HACK -> lwes
    react.api.Flavor SPONGE_HACK -> ySXQ
    react.api.Flavor[] $VALUES -> AYIC
    6:6:react.api.Flavor[] values() -> values
    6:6:react.api.Flavor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> imcR
    74:79:boolean compatableWith(react.api.Flavor) -> QMiR
    84:84:java.lang.String fancyName() -> aChT
    6:18:void <clinit>() -> <clinit>
react.api.IAction -> gMij:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> nIjv
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> VTgk
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
    react.api.ActionState getState() -> HnDT
    react.api.ActionTargetType getTarget() -> BlQP
    void setNodes(java.lang.String[]) -> QMiR
    java.lang.String[] getNodes() -> wfHd
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> qtwn
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> NweN
    react.glang.GMap getDefaultSelectors() -> WWlK
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> QMiR
    react.api.ISelector[] biselect(react.api.ISelector[]) -> QMiR
    react.action.source.IActionSource getCurrentSource() -> Bkok
    void completeAction() -> OjHJ
react.api.ICache -> tdpo:
    react.glang.GSet get(java.lang.Object) -> VTgk
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> TFQj
    void clear() -> clear
    boolean has(java.lang.Object) -> XJNA
    react.glang.GList k() -> TFQw
react.api.ICommand -> eHDq:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> Tgue
    java.lang.String[] getPermissions() -> cJNq
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> jhSs
    react.api.SideGate getSideGate() -> CUci
    void registerParameterDescription(java.lang.String,java.lang.String) -> QMiR
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.api.IRecord -> PmKT:
    java.lang.String getRecordType() -> HCRD
    long getRecordTime() -> DXhB
    react.json.JSONObject toJSON() -> hamt
    java.lang.Object getRecordObject() -> rMhs
    void fromJSON(react.json.JSONObject) -> QMiR
react.api.IRecordBook -> tCMu:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> QMiR
    long getOldestRecordTime() -> bhoC
    void addRecord(react.api.IRecord) -> QMiR
    long getLatestRecordTime() -> awMr
    int countRecords(long,long) -> QMiR
    react.glang.GMap getRecords(long,long) -> VTgk
    int purgeRecordsBefore(long) -> VTgk
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> HTRG:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> AiOo
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> gMij
    react.surge.util.C getAltColor() -> tdpo
    void setColor(react.surge.util.C,react.surge.util.C) -> QMiR
    int getInterval() -> getInterval
    void setInterval(int) -> VTgk
    void sample() -> eHDq
    java.lang.String get() -> get
    void construct() -> PmKT
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> oMPb:
    react.api.SelectionMode getMode() -> tCMu
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> qtwn
    react.glang.GSet getList() -> HTRG
    react.glang.GSet getPossibilities() -> oMPb
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> jhSs
    java.lang.String getName() -> getName
react.api.Injection -> XcaC:
    react.api.InjectionMethod value() -> XcaC
react.api.InjectionMethod -> NLqU:
    react.api.InjectionMethod SWAP -> KoXB
    react.api.InjectionMethod SUBSTRATE -> FVvU
    react.api.InjectionMethod RELOAD -> JRbL
    react.api.InjectionMethod[] $VALUES -> brYf
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> lLWk:
    java.lang.String value() -> value
react.api.MSampler -> iusB:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> NLqU
react.api.MonitorHeading -> OYFk:
    react.api.ISampler head -> dNLV
    react.glang.GList children -> Lqyr
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> QMiR
    27:27:react.api.ISampler getHead() -> lLWk
    32:33:void setHead(react.api.ISampler) -> VTgk
    37:37:react.glang.GList getChildren() -> iusB
    42:42:java.lang.String getHeadText() -> OYFk
    47:60:java.lang.String getChildText() -> ogDD
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> QMiR
react.api.NoiseGenerator -> ogDD:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> ESXv:
    react.api.NoiseGenerator[] octaves -> mqwb
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> ESXv
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> CVFF:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> ssiQ
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> CVFF
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> yknp:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> QMiR
react.api.Permissable -> kYvG:
    react.api.Permissable ACCESS -> Qxvt
    react.api.Permissable MONITOR -> Wigd
    react.api.Permissable MONITOR_TITLE -> lUbQ
    react.api.Permissable MONITOR_ACTIONLOG -> YDyP
    react.api.Permissable MONITOR_MAP -> ymJK
    react.api.Permissable MONITOR_ENVIRONMENT -> xjFk
    react.api.Permissable MONITOR_GLASSES -> SCiO
    react.api.Permissable MONITOR_CHUNK_BLAME -> XlkO
    react.api.Permissable RAI_MONITOR -> nBUa
    react.api.Permissable RAI_CONTROL -> GtLP
    react.api.Permissable RAI_ACCESS -> fCOl
    react.api.Permissable RAI -> mifO
    react.api.Permissable ACT -> RYxB
    react.api.Permissable RELOAD -> Edsm
    java.lang.String node -> HDKG
    react.api.Permissable[] $VALUES -> Aqyn
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    27:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> QMiR
    46:46:java.lang.String getNode() -> yknp
    7:22:void <clinit>() -> <clinit>
react.api.PluginSelfDeleter -> tnCB:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> EnFW
    java.lang.Runnable r -> proU
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> QMiR
react.api.ReactCommand -> ofak:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> dNJp
    java.lang.String usage -> gyVr
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> JSBV
    react.api.SideGate sideGate -> cRvx
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> jhSs
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> QMiR
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> Tgue
    47:47:java.lang.String[] getPermissions() -> cJNq
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> CUci
react.api.ReactException -> wTfw:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> jNbI:
    react.glang.GMap keystore -> DICA
    boolean monitoring -> monitoring
    boolean highMonitor -> LjKm
    boolean actionlogging -> KMUy
    boolean glasses -> GQjg
    boolean mapping -> ePpM
    int monitorSelection -> clmJ
    int plays -> yRyP
    boolean monitorPosted -> sRJJ
    int monitorLastSelection -> IXRL
    int switchNotification -> OQQw
    int hotbarSlot -> kBAi
    boolean shift -> fduU
    int scroll -> IqdL
    double lastHeight -> psRu
    boolean heightMovement -> DjeS
    org.bukkit.entity.Player p -> FySU
    24:40:void <clinit>() -> <clinit>
    43:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> kYvG
    128:128:boolean isMapping() -> tnCB
    133:133:org.bukkit.entity.Player getP() -> ofak
    138:140:void setMonitoring(boolean) -> VTgk
    144:146:void setMapping(boolean) -> TFQj
    150:150:int getMonitorSelection() -> wTfw
    155:157:void setMonitorSelection(int) -> TFQj
    161:161:int getHotbarSlot() -> jNbI
    166:168:void setHotbarSlot(int) -> XJNA
    172:172:boolean isShifting() -> jFQa
    177:179:void setShifting(boolean) -> XJNA
    183:183:boolean isShift() -> EAvy
    188:190:void setShift(boolean) -> qtwn
    194:194:int getScroll() -> EJjg
    199:201:void setScroll(int) -> qtwn
    205:205:int getMonitorLastSelection() -> XBAa
    210:212:void setMonitorLastSelection(int) -> jhSs
    216:217:void setP(org.bukkit.entity.Player) -> VTgk
    221:221:double getLastHeight() -> rpPH
    226:228:void setLastHeight(double) -> QMiR
    232:232:boolean isHeightMovement() -> MdEU
    237:239:void setHeightMovement(boolean) -> jhSs
    243:243:int getSwitchNotification() -> McdP
    248:250:void setSwitchNotification(int) -> JQek
    254:254:boolean getMonitorPosted() -> YDcY
    259:261:void setMonitorPosted(boolean) -> JQek
    265:265:int getPlays() -> Ipil
    270:272:void setPlays(int) -> NMRH
    276:276:boolean isGlasses() -> idss
    281:283:void setGlasses(boolean) -> NMRH
    287:287:boolean isActionlogging() -> RbRn
    292:294:void setActionlogging(boolean) -> NVBo
react.api.Record -> jFQa:
    java.lang.String recordType -> urBG
    long recordTime -> ECTj
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> HCRD
    32:32:long getRecordTime() -> DXhB
    38:38:java.lang.Object getRecordObject() -> rMhs
    react.json.JSONObject toJSON() -> hamt
    void fromJSON(react.json.JSONObject) -> QMiR
react.api.RecordBook -> EAvy:
    java.io.File recordFile -> RblL
    react.json.JSONObject js -> MAyx
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> QMiR
    79:87:react.api.IRecord getRecord(long) -> QMiR
    react.api.IRecord createDummyRecord(long,java.lang.String) -> QMiR
    95:107:long getOldestRecordTime() -> bhoC
    113:125:long getLatestRecordTime() -> awMr
    130:130:boolean within(long,long,long) -> QMiR
    136:144:int countRecords(long,long) -> QMiR
    150:162:react.glang.GMap getRecords(long,long) -> VTgk
    168:181:int purgeRecordsBefore(long) -> VTgk
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> EJjg:
react.api.SampledChunk -> XBAa:
    org.bukkit.Chunk c -> lUeA
    react.glang.GMap counts -> IXLs
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> FgaN
    26:38:void hit(react.api.ChunkIssue,int) -> QMiR
    42:42:org.bukkit.Chunk getC() -> KvpX
    47:47:react.glang.GMap getCounts() -> jEsX
react.api.SampledType -> rpPH:
    react.api.SampledType ENTITY_TIME_LOCK -> sbjG
    react.api.SampledType TILE_TIME_LOCK -> GRKx
    react.api.SampledType ENTITY_TIME -> rhWo
    react.api.SampledType TILE_TIME -> cBYm
    react.api.SampledType ENTITY_DROPTICK -> pbPr
    react.api.SampledType TILE_DROPTICK -> xqxW
    react.api.SampledType REDSTONE_TICK_USAGE -> urAX
    react.api.SampledType REDSTONE_TICK -> KEEL
    react.api.SampledType REDSTONE_SECOND -> STkn
    react.api.SampledType REDSTONE_TIME -> JBAj
    react.api.SampledType PHYSICS_TIME -> KUfC
    react.api.SampledType HOPPER_TICK_USAGE -> PBrC
    react.api.SampledType HOPPER_TICK -> gphU
    react.api.SampledType HOPPER_SECOND -> EvWl
    react.api.SampledType HOPPER_TIME -> ELEI
    react.api.SampledType FLUID_TICK_USAGE -> JRcG
    react.api.SampledType FLUID_TICK -> NxbN
    react.api.SampledType FLUID_SECOND -> pPmy
    react.api.SampledType FLUID_TIME -> xjHV
    react.api.SampledType TPS -> vJOi
    react.api.SampledType TICK -> DPrA
    react.api.SampledType TIU -> HClM
    react.api.SampledType MEM -> OsTk
    react.api.SampledType FREEMEM -> nlkY
    react.api.SampledType MAXMEM -> qCTV
    react.api.SampledType ALLOCMEM -> WOyj
    react.api.SampledType MAHS -> Vfic
    react.api.SampledType CHK_TIME -> uhqo
    react.api.SampledType EXPLOSION_TIME -> QFXr
    react.api.SampledType CHK -> lMWO
    react.api.SampledType ATASK -> rpjg
    react.api.SampledType STASK -> cJla
    react.api.SampledType CHKS -> sbkb
    react.api.SampledType ENT -> TXSc
    react.api.SampledType ENTLIV -> PCVb
    react.api.SampledType ENTDROP -> OPtL
    react.api.SampledType ENTTILE -> RRNF
    java.lang.String node -> HDKG
    react.api.SampledType[] ENUM$VALUES -> WOyx
    6:44:void <clinit>() -> <clinit>
    50:50:react.api.ISampler get() -> imeA
    56:56:java.lang.String toString() -> toString
    59:70:void <init>(java.lang.String,int,java.lang.String) -> <init>
    74:74:java.lang.String getNode() -> yknp
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> MdEU:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> NMns
    react.surge.util.C altColor -> JJSv
    int interval -> VxKS
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> gMij
    49:49:react.surge.util.C getAltColor() -> tdpo
    55:55:int getInterval() -> getInterval
    void sample() -> eHDq
    void construct() -> PmKT
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> QMiR
    107:108:void setInterval(int) -> VTgk
react.api.Sector -> McdP:
    int value() -> value
react.api.SelectionException -> YDcY:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> Ipil:
    react.api.SelectionMode WHITELIST -> dhBJ
    react.api.SelectionMode BLACKLIST -> UJSa
    react.api.SelectionMode[] $VALUES -> KgIt
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> idss:
    java.lang.Class objectType -> QNgl
    react.api.SelectionMode mode -> DrvN
    react.glang.GSet list -> vteX
    react.glang.GSet possibilities -> WGhg
    int popoff -> FqLl
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> tCMu
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> qtwn
    43:43:react.glang.GSet getList() -> HTRG
    49:49:react.glang.GSet getPossibilities() -> oMPb
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> jhSs
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> JQek
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> RbRn:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> TFQj
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> jhSs
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> NMRH
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> FgaN:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> KvpX:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> TFQj
    29:30:void add(org.bukkit.Chunk,int) -> QMiR
    34:38:void add(org.bukkit.World) -> NMRH
    42:46:void addAll() -> HnHX
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> jhSs
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> NMRH
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> jEsX:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> jhSs
    87:87:java.lang.String getName() -> getName
react.api.Side -> imeA:
    react.api.Side PLAYERS -> FOIj
    react.api.Side CONSOLE -> PmhX
    java.lang.String ss -> jFno
    react.api.Side[] $VALUES -> GAKb
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> wTio
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> VTgk
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> HnHX:
    react.api.SideGate PLAYERS_ONLY -> HCnF
    react.api.SideGate CONSOLES_ONLY -> XloV
    react.api.SideGate ANYTHING -> sYyY
    react.api.SideGate[] $VALUES -> Xlnt
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> QMiR
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> HnHX$1:
    int[] $SwitchMap$react$api$SideGate -> ejdW
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> wTio:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> aVHH
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> BlUU
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> BlUU:
    double wScale -> Aimk
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> QMiR
react.api.SpecializedTickLimiter -> GYcH:
    double rMaxTime -> MJlm
    long rStartTime -> Ygad
    double rLastTime -> mOwd
    long rMark -> RRNt
    double tMaxTime -> bHLN
    react.gmath.Average atimes -> lxLu
    react.gmath.Average adropped -> SLaI
    int droppedTicks -> Oavr
    boolean entityTick -> XJoA
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> RQQp:
    react.glang.GList sources -> aflB
    react.glang.GList splooge -> eQVB
    react.glang.GSet destroy -> ySAm
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> QMiR
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> VTgk
    void clipped(org.bukkit.Location) -> VTgk
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> TFQj
    boolean isAllowedSource(org.bukkit.Location) -> XJNA
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> QMiR
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> VTgk
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> TFQj
react.api.SploogeCounter$1 -> RQQp$1:
    java.util.Iterator val$it -> fCVn
    org.bukkit.Location val$start -> AXmX
    int val$maxDistance -> klXG
    react.api.SploogeCounter this$0 -> LHKu
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> RQQp$1$1:
    react.api.SploogeCounter$1 this$1 -> AYPS
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> yuDH:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> OjKi:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> hamt
    38:49:void fromJSON(react.json.JSONObject) -> QMiR
react.api.StackTraceRecordBook -> WFms:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> VTgk
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> QMiR
react.api.StackedEntity -> uErj:
    org.bukkit.entity.LivingEntity entity -> FOLG
    int count -> count
    double rmx -> RRNX
    21:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> QMiR
    46:46:int getAbsoluteMaxCount() -> GYcH
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> VTgk
    56:58:void update() -> update
    62:68:void signalSize() -> RQQp
    72:123:void updateHealth() -> yuDH
    127:128:void heal(double) -> VTgk
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> OjKi
    142:142:int getEffectiveCount(double) -> TFQj
    147:147:double getEffectiveMaxHealth(int) -> NVBo
    152:152:double getRealMaxHealth() -> WFms
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> QMiR
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> HeWV:
    react.glang.GList headings -> HwTt
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> QMiR
    24:24:int getMaxSelection() -> uErj
    29:37:int left(int) -> YnsY
    42:50:int right(int) -> nIjv
    55:55:react.api.MonitorHeading getHeadFor(int) -> HnDT
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> QMiR
    83:100:java.lang.String getHotbarFor(int,boolean) -> QMiR
react.api.Unused -> gpNv:
react.api.WorldConfig -> Igwc:
    boolean allowRai -> aLvn
    boolean allowActions -> htOi
    boolean allowRelighting -> qCUO
    boolean allowTileThrottling -> NNRo
    boolean allowEntityThrottling -> vuHU
    boolean allowFastLeafDecay -> lgJX
    java.util.List assumeNoSideEffectsEntities -> kkwE
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> NVBo
    48:62:void save(org.bukkit.World) -> YnsY
    66:80:void load(org.bukkit.World) -> nIjv
react.cache.CachedEntity -> mhoO:
    java.util.UUID uid -> sAJd
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> ekFq
    double x -> x
    double y -> y
    double z -> z
    double vx -> xGiB
    double vy -> awkg
    double vz -> Hnfb
    double dx -> AjSH
    double dy -> CVem
    double dz -> NFDl
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> JQek
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> HeWV
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> gpNv
    120:121:void setVx(double) -> XJNA
    125:125:double getVy() -> Igwc
    130:131:void setVy(double) -> qtwn
    135:135:double getVz() -> mhoO
    140:141:void setVz(double) -> jhSs
    145:145:double getDx() -> eHEi
    150:151:void setDx(double) -> JQek
    155:155:double getDy() -> CLvA
    160:161:void setDy(double) -> NMRH
    165:165:double getDz() -> ronI
    170:171:void setDz(double) -> NVBo
    175:175:java.util.UUID getUid() -> QooY
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> eHEi:
    int age -> nlsL
    boolean ageLock -> VfnL
    boolean breed -> ogej
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> JQek
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> Ahqy
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> XRbC
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> CLvA:
    org.bukkit.DyeColor dye -> CVeh
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> JQek
    30:30:org.bukkit.DyeColor getDye() -> EAxn
    35:36:void setDye(org.bukkit.DyeColor) -> QMiR
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> ronI:
    react.glang.GList potionEffects -> XJqB
    boolean canPickupItems -> Iqij
    org.bukkit.inventory.ItemStack[] armorContents -> CWFf
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> GRRS
    double maxHealth -> maxHealth
    int maxAir -> XSaj
    int air -> vRgf
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> JQek
    63:63:react.glang.GList getPotionEffects() -> XuEe
    68:69:void setPotionEffects(react.glang.GList) -> VTgk
    73:73:boolean isCanPickupItems() -> vIVM
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> imcn
    138:139:void setMaxAir(int) -> BlQP
    143:143:int getAir() -> CDeD
    148:149:void setAir(int) -> NweN
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> QooY:
    boolean sheared -> iTsF
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> JQek
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> Ahqy:
    org.bukkit.inventory.ItemStack is -> TGVK
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> JQek
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> XRbC:
    7:7:void <init>() -> <init>
react.command.CommandAct -> EAxn:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> QMiR
    186:192:react.text.RTX getBeginningRTX() -> fmNx
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> QMiR
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> VTgk
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> TFQj
    331:346:react.glang.GList getSortedCommands() -> APBr
    351:358:int getPageSize(int) -> WWlK
    363:363:boolean isValidPage(int,int) -> QMiR
    368:377:react.glang.GList getPage(int,int) -> VTgk
react.command.CommandActionLog -> XuEe:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.command.CommandCPUScore -> vIVM:
    17:24:void <init>() -> <init>
    29:39:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.command.CommandCapabilities -> imcn:
    20:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.command.CommandChunkBlame -> CDeD:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.command.CommandChunkBlame$1 -> CDeD$1:
    react.command.CommandChunkBlame this$0 -> oNSW
    org.bukkit.command.CommandSender val$sender -> WYPf
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> CDeD$1$1:
    react.command.CommandChunkBlame$1 this$1 -> neBm
    org.bukkit.command.CommandSender val$sender -> WYPf
    java.lang.String val$i -> JSJq
    react.glang.GMap val$top -> Jckc
    int val$totalx -> VVNI
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandEnvironment -> fmNx:
    25:32:void <init>() -> <init>
    37:74:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.command.CommandGlasses -> APBr:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.command.CommandHelp -> OYLF:
    28:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> QMiR
    81:87:react.text.RTX getBeginningRTX() -> fmNx
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> QMiR
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> VTgk
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> TFQj
    208:215:react.glang.GList getSortedCommands() -> APBr
    220:227:int getPageSize(int) -> WWlK
    232:232:boolean isValidPage(int,int) -> QMiR
    237:246:react.glang.GList getPage(int,int) -> VTgk
react.command.CommandHighMonitor -> MAcU:
    16:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.command.CommandMap -> oMUm:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.command.CommandMonitor -> ejLP:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.command.CommandReload -> KTnj:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.command.CommandReload$1 -> KTnj$1:
    org.bukkit.command.CommandSender val$sender -> WYPf
    react.command.CommandReload this$0 -> jyxJ
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> KTnj$1$1:
    react.command.CommandReload$1 this$1 -> VDjw
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> oDdd:
    28:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
    54:63:org.bukkit.inventory.ItemStack makeBook() -> OYLF
    68:94:void addSpikePages(react.glang.GList) -> TFQj
    98:108:void addStatusPages(react.glang.GList) -> XJNA
    112:129:int findSlot(org.bukkit.entity.Player) -> TFQj
react.command.CommandTopChunk -> YEGJ:
    24:32:void <init>() -> <init>
    37:58:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.command.CommandVersion -> gyCn:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> QMiR
react.controller.ActionController -> YgIu:
    int kiv -> AbAl
    react.glang.GMap actions -> vuKU
    react.glang.GMap pending -> GcSv
    react.glang.GList tasks -> JAgR
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> QMiR
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> VTgk
    141:141:react.api.IAction getAction(react.api.ActionType) -> QMiR
    146:147:void registerAction(react.api.IAction) -> QMiR
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> MAcU
    241:248:react.glang.GList getActionNames() -> oMUm
    24:24:void <clinit>() -> <clinit>
react.controller.ChronophyFluidController -> clWH:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> VoBe:
    boolean firstTickList -> ootd
    long firstTick -> nlrK
    long lastTick -> CggJ
    react.gmath.Average aCSMS -> wxNK
    react.glang.GMap pluginLoads -> YyGh
    react.glang.GMap playerLoads -> dgda
    int serverLoads -> tTpi
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> ejLP
    63:73:void tickNextTickList() -> KTnj
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> QMiR
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> QMiR
    171:171:boolean isFirstTickList() -> oDdd
    176:176:long getFirstTick() -> YEGJ
    181:181:long getLastTick() -> gyCn
    186:186:react.gmath.Average getaCSMS() -> YgIu
    191:191:react.glang.GMap getPluginLoads() -> clWH
    196:196:react.glang.GMap getPlayerLoads() -> VoBe
    201:201:int getServerLoads() -> mysM
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> QMiR
    29:29:int access$1(react.controller.ChunkController) -> VTgk
    29:29:void access$2(react.controller.ChunkController,int) -> QMiR
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> TFQj
react.controller.ChunkController$1 -> VoBe$1:
    react.controller.ChunkController this$0 -> fmjc
    org.bukkit.event.world.ChunkLoadEvent val$e -> lwld
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> TFQj
    1:1:void run(java.lang.Object) -> QMiR
react.controller.CommandController -> mysM:
    react.glang.GList commands -> Svug
    boolean k -> FiAU
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> NVBo
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> YnsY
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> QMiR
    317:317:react.glang.GList getCommands() -> BdGM
    322:323:void setCommands(react.glang.GList) -> qtwn
    327:327:boolean isK() -> SnIm
    332:333:void setK(boolean) -> YnsY
react.controller.EntityCullController -> BdGM:
    react.glang.GSet flags -> BufU
    react.glang.GSet defer -> dFCR
    react.glang.GMap maxs -> MBcN
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> vYyc
    172:180:int cull(org.bukkit.Chunk) -> XJNA
    185:295:int partialCull(org.bukkit.Chunk) -> qtwn
react.controller.EntityStackController -> SnIm:
    react.glang.GList stacks -> Emol
    20:22:void <init>() -> <init>
    27:28:void start() -> start
    33:34:void stop() -> stop
    39:54:void tick() -> tick
    59:112:void stack(react.glang.GList) -> jhSs
    116:121:boolean isStacked(org.bukkit.entity.LivingEntity) -> TFQj
    126:139:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> XJNA
    145:163:void on(org.bukkit.event.entity.EntityDamageEvent) -> QMiR
    167:182:void merge(react.api.StackedEntity,react.api.StackedEntity) -> QMiR
    186:252:void checkNear(org.bukkit.entity.LivingEntity) -> qtwn
    257:297:void on(org.bukkit.event.entity.EntitySpawnEvent) -> QMiR
react.controller.EntityStackController$1 -> SnIm$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> nltj
    react.controller.EntityStackController this$0 -> pPwt
    265:265:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    269:294:void run() -> run
react.controller.EventController -> vYyc:
    react.lagmap.LagMap map -> AQCG
    react.glang.GMap slots -> nvFw
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> QMiR
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> QMiR
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> QMiR
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> QMiR
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> QMiR
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> QMiR
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> QMiR
react.controller.ExplosiveController -> SnJK:
    boolean firstTickList -> ootd
    long firstTick -> nlrK
    long lastTick -> CggJ
    react.gmath.Average aCSMS -> wxNK
    15:15:void <init>() -> <init>
    25:30:void start() -> start
    34:47:void flushTickList() -> ejLP
    51:61:void tickNextTickList() -> KTnj
    66:67:void stop() -> stop
    73:74:void tick() -> tick
    79:88:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> VTgk
    93:94:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> QMiR
    98:98:boolean isFirstTickList() -> oDdd
    103:103:long getFirstTick() -> YEGJ
    108:108:long getLastTick() -> gyCn
    113:113:react.gmath.Average getaCSMS() -> YgIu
react.controller.FastDecayController -> ogHX:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> tMED
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> QMiR
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> QMiR
    74:155:void checkBreak(org.bukkit.block.Block) -> TFQj
    159:190:void decay(org.bukkit.block.Block) -> XJNA
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> qtwn
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> SnJK
react.controller.FastDecayController$1 -> ogHX$1:
    react.controller.FastDecayController this$0 -> MlwC
    react.glang.GMap val$locs -> ChKU
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> TFQj
    99:99:boolean isAllowedSource(org.bukkit.Location) -> XJNA
    105:124:void clipped(org.bukkit.Location) -> VTgk
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> QMiR
react.controller.FastDecayController$1$1 -> ogHX$1$1:
    react.controller.FastDecayController$1 this$1 -> BdfP
    react.glang.GMap val$locs -> ChKU
    int val$i -> WXqm
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> ogHX$2:
    react.controller.FastDecayController this$0 -> MlwC
    org.bukkit.block.Block val$b -> MBdB
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FastDecayController$3 -> ogHX$3:
    int[] $SwitchMap$org$bukkit$TreeSpecies -> VpAw
    201:201:void <clinit>() -> <clinit>
react.controller.FeatureController -> wfOJ:
    react.feature.INMSBinding trueBinding -> WHQP
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> ogHX
    85:85:java.lang.String getPackageVersion() -> wfOJ
    90:90:boolean hasBinding() -> PmPl
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> QMiR
react.controller.FluidController -> PmPl:
    react.glang.GSet ignore -> XeFi
    int flowsPerTick -> CMup
    int flowsPerSecond -> SLei
    react.gmath.Average aFST -> oWFl
    react.gmath.Average aFSS -> XeGN
    react.gmath.Average aFSMS -> uGUk
    boolean firstTickList -> ootd
    long firstTick -> nlrK
    long lastTick -> CggJ
    react.glang.GSet frozen -> vSIu
    react.glang.GMap queue -> oWEp
    react.glang.GMap freezeTimes -> lfnF
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> jhSs
    68:76:void checkChunks() -> sPpG
    80:97:void checkChunk(org.bukkit.Chunk) -> JQek
    101:107:void queue(org.bukkit.block.Block) -> jhSs
    111:111:boolean isFrozen(org.bukkit.Chunk) -> NMRH
    116:117:void freeze(org.bukkit.Chunk) -> NVBo
    121:127:void unfreeze(org.bukkit.Chunk) -> YnsY
    131:138:void freeze(org.bukkit.Chunk,long) -> QMiR
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> ejLP
    172:182:void tickNextTickList() -> KTnj
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> QMiR
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> QMiR
    248:248:react.glang.GSet getIgnore() -> Jbks
    253:253:int getTransfersPerTick() -> aemw
    258:258:int getTransfersPerSecond() -> RkDk
    263:263:react.gmath.Average getaFST() -> LGOy
    268:268:react.gmath.Average getaFSS() -> maAa
    273:273:react.gmath.Average getaFSMS() -> AFrD
    278:278:boolean isFirstTickList() -> oDdd
    283:283:long getFirstTick() -> YEGJ
    288:288:long getLastTick() -> gyCn
    293:293:react.glang.GSet getFrozen() -> miQs
    298:298:react.glang.GMap getQueue() -> dEED
    303:303:react.glang.GMap getFreezeTimes() -> VeoG
react.controller.GlassController -> sPpG:
    react.glang.GMap q -> tCpu
    react.glang.GList g -> XScS
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> XJNA
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> qtwn
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> jhSs
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> QMiR
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> QMiR
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> QMiR
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> QMiR
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> QMiR
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> QMiR
    36:36:react.glang.GList access$0(react.controller.GlassController) -> QMiR
react.controller.GlassController$1 -> sPpG$1:
    react.controller.GlassController this$0 -> uWvF
    react.glang.GMap val$cc -> nueU
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> sPpG$1$1:
    react.controller.GlassController$1 this$1 -> kRiV
    org.bukkit.Location val$i -> RstT
    org.bukkit.entity.Player val$j -> ohHK
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> Jbks:
    react.glang.GMap g -> cvFW
    react.glang.GMap gr -> mGmq
    react.glang.GMap gra -> yeDA
    41:41:void <init>() -> <init>
    50:83:void start() -> start
    88:94:void stop() -> stop
    99:126:void tick() -> tick
    131:148:void on(org.bukkit.event.player.PlayerJoinEvent) -> QMiR
    152:174:void createGraphs(react.graph.GraphMode,org.bukkit.entity.Player,react.glang.GList) -> QMiR
    178:181:void addSystem(org.bukkit.entity.Player,react.glang.GList) -> QMiR
    185:189:void addTick(org.bukkit.entity.Player,react.glang.GList) -> VTgk
    193:197:void addMemory(org.bukkit.entity.Player,react.glang.GList) -> TFQj
    201:202:void addEod(org.bukkit.entity.Player,react.glang.GList) -> XJNA
    206:215:void addPhysics(org.bukkit.entity.Player,react.glang.GList) -> qtwn
    219:222:void addReact(org.bukkit.entity.Player,react.glang.GList) -> jhSs
    226:272:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> QMiR
    277:317:void on(org.bukkit.event.player.PlayerMoveEvent) -> QMiR
    323:323:void on(react.event.ReactScrollEvent) -> QMiR
    327:358:void toggleMapping(org.bukkit.entity.Player) -> JQek
    362:394:void toggleMappingEod(org.bukkit.entity.Player) -> NMRH
    398:398:react.glang.GMap getG() -> MIsB
    403:403:react.glang.GMap getGr() -> aCkf
    44:44:react.glang.GMap access$0(react.controller.GraphController) -> QMiR
    43:43:react.glang.GMap access$1(react.controller.GraphController) -> VTgk
react.controller.GraphController$1 -> Jbks$1:
    react.controller.GraphController this$0 -> BeHQ
    1:63:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    68:81:void run() -> run
react.controller.GraphController$2 -> Jbks$2:
    react.controller.GraphController this$0 -> BeHQ
    1:99:void <init>(react.controller.GraphController) -> <init>
    104:108:void run() -> run
react.controller.GraphController$3 -> Jbks$3:
    react.controller.GraphController this$0 -> BeHQ
    org.bukkit.event.player.PlayerJoinEvent val$e -> MTDm
    1:131:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    136:146:void run() -> run
react.controller.HopperController -> aemw:
    react.glang.GSet ignore -> XeFi
    int transfersPerTick -> bsCj
    int transfersPerSecond -> Rbsb
    react.gmath.Average aHST -> Jcll
    react.gmath.Average aHSS -> gONQ
    react.gmath.Average aHSMS -> TqkJ
    boolean firstTickList -> ootd
    long firstTick -> nlrK
    long lastTick -> CggJ
    react.glang.GSet frozen -> vSIu
    react.glang.GMap queue -> oWEp
    react.glang.GMap freezeTimes -> lfnF
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> jhSs
    65:73:void checkChunks() -> sPpG
    77:94:void checkChunk(org.bukkit.Chunk) -> JQek
    98:104:void queue(org.bukkit.block.Block) -> jhSs
    108:108:boolean isFrozen(org.bukkit.Chunk) -> NMRH
    113:114:void freeze(org.bukkit.Chunk) -> NVBo
    118:124:void unfreeze(org.bukkit.Chunk) -> YnsY
    128:135:void freeze(org.bukkit.Chunk,long) -> QMiR
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> ejLP
    169:179:void tickNextTickList() -> KTnj
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> QMiR
    207:207:react.glang.GSet getIgnore() -> Jbks
    212:212:int getTransfersPerTick() -> aemw
    217:217:int getTransfersPerSecond() -> RkDk
    222:222:react.gmath.Average getaHST() -> LqdV
    227:227:react.gmath.Average getaHSS() -> dfhB
    232:232:react.gmath.Average getaHSMS() -> Wysm
    237:237:boolean isFirstTickList() -> oDdd
    242:242:long getFirstTick() -> YEGJ
    247:247:long getLastTick() -> gyCn
    252:252:react.glang.GSet getFrozen() -> miQs
    257:257:react.glang.GMap getQueue() -> dEED
    262:262:react.glang.GMap getFreezeTimes() -> VeoG
react.controller.HopperOvertickController -> RkDk:
    react.glang.GList possiblePlunge -> kRhp
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> QMiR
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> QMiR
react.controller.LanguageController -> LGOy:
    java.io.File languageFolder -> kuMO
    int oldVersion -> GlIE
    java.io.File dlf -> KxTi
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> pHFp
    160:221:void downloadAll(boolean) -> nIjv
    225:261:void downloadLanguage(java.lang.String) -> JQek
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> NMRH
    315:315:java.io.File getFileForLanguage(java.lang.String) -> NVBo
    320:332:void writeDefaults() -> ooVy
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> QMiR
    263:263:void access$1(react.controller.LanguageController) -> QMiR
react.controller.LanguageController$1 -> LGOy$1:
    react.controller.LanguageController this$0 -> fLMt
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> LGOy$2:
    react.controller.LanguageController this$0 -> fLMt
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> QMiR
react.controller.LanguageController$2$1 -> LGOy$2$1:
    react.controller.LanguageController$2 this$1 -> xXqd
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> QMiR
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> QMiR
    121:121:void onDownloadStarted(react.gnet.download.Download) -> QMiR
    126:128:void onDownloadFinished(react.gnet.download.Download) -> VTgk
    134:134:void onDownloadFailed(react.gnet.download.Download) -> TFQj
react.controller.LanguageController$3 -> LGOy$3:
    react.controller.LanguageController this$0 -> fLMt
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> LGOy$3$1:
    react.controller.LanguageController$3 this$1 -> dyMC
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> LGOy$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> QpuE
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> LGOy$4:
    react.controller.LanguageController this$0 -> fLMt
    java.io.File val$dld -> bXsD
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> QMiR
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> QMiR
    245:245:void onDownloadStarted(react.gnet.download.Download) -> QMiR
    250:251:void onDownloadFinished(react.gnet.download.Download) -> VTgk
    257:257:void onDownloadFailed(react.gnet.download.Download) -> TFQj
react.controller.MonitorController -> maAa:
    int maxCooldown -> EebL
    react.api.TitleMonitor titleMonitor -> wUnl
    react.glang.GMap posts -> wwqm
    react.slate.PhantomSlate sb -> riCj
    boolean ready -> dEgI
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> tCRO
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> NVBo
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> YnsY
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> XdEl
    179:184:float calcVolume(react.api.ReactPlayer) -> QMiR
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> nIjv
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> HnDT
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> BlQP
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> NweN
    219:223:void startMonitoring(org.bukkit.entity.Player) -> WWlK
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> OjHJ
    242:247:void startActionLogging(org.bukkit.entity.Player) -> Bkok
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> wfHd
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> VTgk
    279:291:void processPlayer(react.api.ReactPlayer) -> TFQj
    296:296:void handleActionLog(org.bukkit.entity.Player) -> upbr
    300:324:void handleTriggers(react.api.ReactPlayer) -> XJNA
    328:367:void handleScrolling(react.api.ReactPlayer) -> qtwn
    371:399:void handleShifting(react.api.ReactPlayer) -> jhSs
    403:425:void handlePosting(react.api.ReactPlayer) -> JQek
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> QMiR
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> QMiR
    471:501:void tickMonitor(react.api.ReactPlayer) -> NMRH
    505:505:react.api.TitleMonitor getTitleMonitor() -> tKax
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> QMiR
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> QMiR
    539:552:void onTick() -> hIAM
    556:578:void updateActionBoard() -> ySAm
    583:583:java.lang.String getTickName() -> UblU
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> QMiR
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> QMiR
    41:41:void access$2(react.controller.MonitorController,boolean) -> QMiR
    41:41:boolean access$3(react.controller.MonitorController) -> VTgk
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> TFQj
react.controller.MonitorController$1 -> maAa$1:
    react.controller.MonitorController this$0 -> yKTW
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> maAa$2:
    react.controller.MonitorController this$0 -> yKTW
    1:556:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> AFrD:
    react.glang.GMap samples -> HDXK
    int redstonePerTick -> IOkR
    int redstonePerSecond -> agRi
    boolean firstTickList -> ootd
    long firstTick -> nlrK
    long lastTick -> CggJ
    react.gmath.Average aRSMS -> oNVy
    react.gmath.Average aRST -> dhKd
    react.gmath.Average aRSS -> IOju
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> QMiR
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> QMiR
    72:79:void flushTickList() -> ejLP
    83:93:void tickNextTickList() -> KTnj
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> nIjv
    121:122:void onPhysics(org.bukkit.Chunk) -> HnDT
    126:127:void onHopper(org.bukkit.Chunk) -> BlQP
    131:132:void onFluid(org.bukkit.Chunk) -> NweN
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> QMiR
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> QMiR
    156:176:void onTick() -> hIAM
    181:181:java.lang.String getTickName() -> UblU
    186:186:react.glang.GMap getSamples() -> jNfP
    191:191:int getRedstonePerTick() -> JcMp
    196:196:int getRedstonePerSecond() -> LWrC
    201:201:boolean isFirstTickList() -> oDdd
    206:206:long getFirstTick() -> YEGJ
    211:211:long getLastTick() -> gyCn
    216:216:react.gmath.Average getaRSMS() -> GQUk
    221:221:react.gmath.Average getaRST() -> yuIG
    226:226:react.gmath.Average getaRSS() -> Mtid
react.controller.PhysicsController$1 -> AFrD$1:
    react.controller.PhysicsController this$0 -> gydU
    1:168:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> miQs:
    react.glang.GList players -> Rswi
    react.glang.GSet save -> bXsU
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> wKtj
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> QMiR
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> TFQw
    113:113:react.glang.GList getPlayers() -> fKMp
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> QMiR
react.controller.PlayerController$1 -> miQs$1:
    react.glang.GList val$toSave -> yufx
    react.controller.PlayerController this$0 -> bjVG
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> dEED:
    react.rai.IRAI rai -> dNXe
    boolean raiEnabled -> hRTS
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    19:19:react.rai.IRAI access$0(react.controller.RAIController) -> QMiR
react.controller.RAIController$1 -> dEED$1:
    react.controller.RAIController this$0 -> scUT
    1:46:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> VeoG:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> TFQj
react.controller.ReactServerInfo -> MIsB:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> idwt
    27:27:int dgetGameProtocol() -> nkvr
    33:33:java.lang.String dgetGameVersion() -> mhtX
    39:39:java.lang.String dgetReactVersion() -> Usow
    45:45:int dgetMaxPlayers() -> Btif
    51:58:react.glang.GList dgetConnectedPlayers() -> QFBa
    64:64:int dgetViewDistance() -> upjs
    70:70:int dgetGamePort() -> oDeq
    76:76:java.lang.String dgetGameAddress() -> MRgX
    82:89:react.glang.GList dgetRemotePlugins() -> mPCG
    95:102:react.glang.GList dgetWorlds() -> nRdf
    108:108:react.glang.GList dgetActions() -> MuKU
    114:114:react.glang.GList dgetSamplers() -> ckxI
react.controller.RedstoneController -> aCkf:
    react.glang.GSet ignore -> XeFi
    react.glang.GSet frozen -> vSIu
    react.glang.GMap queue -> oWEp
    react.glang.GMap freezeTimes -> lfnF
    int redstonePerTick -> IOkR
    int redstonePerSecond -> agRi
    react.gmath.Average aRST -> dhKd
    react.gmath.Average aRSS -> IOju
    react.gmath.Average aRSMS -> oNVy
    boolean firstTickList -> ootd
    long firstTick -> nlrK
    long lastTick -> CggJ
    react.glang.GMap trackers -> MJuv
    27:27:void <init>() -> <init>
    46:82:void start() -> start
    87:88:void on(org.bukkit.event.world.WorldLoadEvent) -> QMiR
    93:95:void on(org.bukkit.event.world.WorldUnloadEvent) -> QMiR
    100:106:void stop() -> stop
    110:115:void releaseChunk(org.bukkit.Chunk) -> jhSs
    120:126:void tick() -> tick
    130:138:void checkChunks() -> sPpG
    142:159:void checkChunk(org.bukkit.Chunk) -> JQek
    163:169:void queue(org.bukkit.block.Block) -> jhSs
    173:173:boolean isFrozen(org.bukkit.Chunk) -> NMRH
    178:179:void freeze(org.bukkit.Chunk) -> NVBo
    183:190:void flushTickList() -> ejLP
    194:204:void tickNextTickList() -> KTnj
    208:214:void unfreeze(org.bukkit.Chunk) -> YnsY
    218:225:void freeze(org.bukkit.Chunk,long) -> QMiR
    230:231:void on(org.bukkit.event.world.ChunkUnloadEvent) -> QMiR
    236:249:void on(org.bukkit.event.block.BlockPhysicsEvent) -> QMiR
    254:267:void on(org.bukkit.event.block.BlockFromToEvent) -> QMiR
    271:271:react.glang.GSet getIgnore() -> Jbks
    276:276:react.glang.GSet getFrozen() -> miQs
    281:281:react.glang.GMap getQueue() -> dEED
    286:286:react.glang.GMap getFreezeTimes() -> VeoG
    291:291:int getRedstonePerTick() -> JcMp
    296:296:int getRedstonePerSecond() -> LWrC
    301:301:react.gmath.Average getaRST() -> yuIG
    306:306:react.gmath.Average getaRSS() -> Mtid
    311:311:react.gmath.Average getaRSMS() -> GQUk
    316:316:boolean isFirstTickList() -> oDdd
    321:321:long getFirstTick() -> YEGJ
    326:326:long getLastTick() -> gyCn
react.controller.RemoteController -> LqdV:
    react.remote.server.RemoteServer remoteServer -> OkPS
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> byvU
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    12:12:void access$000(react.controller.RemoteController) -> QMiR
react.controller.RemoteController$1 -> LqdV$1:
    react.controller.RemoteController this$0 -> ogjA
    20:20:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> LqdV$2:
    react.controller.RemoteController this$0 -> ogjA
    37:37:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> FyGl
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> tuyB
react.controller.SampleController -> dfhB:
    react.glang.GMap samplers -> EwDo
    react.surge.server.SuperSampler ss -> PKoM
    int cd -> UuQh
    27:33:void <init>() -> <init>
    37:63:boolean checkThreads() -> cJUa
    68:73:void restartSuperSampler() -> NEIl
    77:78:void registerSampler(react.api.ISampler) -> TFQj
    82:82:react.api.ISampler getSampler(java.lang.String) -> YnsY
    87:130:void constructSamplers() -> SKgg
    135:138:void start() -> start
    143:146:void stop() -> stop
    152:152:void tick() -> tick
    156:156:react.surge.server.SuperSampler getSuperSampler() -> hICp
    162:184:void onTick() -> hIAM
    189:189:java.lang.String getTickName() -> UblU
    194:194:react.glang.GMap getSamplers() -> EJpI
    199:199:react.surge.server.SuperSampler getSs() -> lwRt
    204:204:int getCd() -> IqMi
    209:216:react.glang.GList getSamplerNames() -> aDMt
react.controller.SecurityController -> Wysm:
    java.lang.String ipa -> YyLW
    react.glang.GList failures -> BBgD
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> nIjv
    41:74:void checkForIP() -> xytE
    78:91:void scan(java.lang.Runnable) -> QMiR
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> Wysm$1:
    react.controller.SecurityController this$0 -> HUXL
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> Wysm$2:
    java.lang.String val$ip -> vtnB
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> Wysm$3:
    java.lang.Thread val$t -> uGVu
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> pHFp:
    react.glang.GMap etl -> kdMi
    react.glang.GMap ttl -> PnRC
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> QMiR
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> QMiR
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> HnDT
    143:160:void releaseWorld(org.bukkit.World) -> BlQP
    164:181:double getUniversalEntityTick() -> qmPR
    186:203:double getUniversalEntityLimit() -> TNhy
    208:225:double getUniversalTileLimit() -> hruh
    230:247:double getUniversalTileTick() -> AGUA
    252:264:double getUniversalEntityDroppedTicks() -> bqcw
    269:281:double getUniversalTileDroppedTicks() -> CwmG
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> QMiR
    301:312:void setTileTickLimit(org.bukkit.World,double) -> VTgk
    316:321:double getEntityTickLimit(org.bukkit.World) -> NweN
    326:331:double getTileTickLimit(org.bukkit.World) -> WWlK
    336:341:double getLastEntityTick(org.bukkit.World) -> OjHJ
    346:351:double getLastTileTick(org.bukkit.World) -> Bkok
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> wfHd
    366:371:double getTileDroppedTicks(org.bukkit.World) -> upbr
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> QMiR
react.controller.SpikeController -> ooVy:
    react.glang.GMap spikes -> sRSP
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> hIAM
    111:111:java.lang.String getTickName() -> UblU
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> ydEq
    128:160:void whoFuckingDidThis(react.glang.Callback) -> QMiR
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> QMiR
react.controller.SpikeController$1 -> ooVy$1:
    react.controller.SpikeController this$0 -> scTc
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> ooVy$1$1:
    react.controller.SpikeController$1 this$1 -> OILF
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> ooVy$2:
    react.controller.SpikeController this$0 -> scTc
    react.glang.GMap val$vv -> JBMH
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> ooVy$3:
    react.controller.SpikeController this$0 -> scTc
    java.lang.Thread val$t -> uGVu
    react.glang.Callback val$callback -> ivwl
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> tCRO:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> XdEl:
    16:16:void <init>() -> <init>
    21:27:void start() -> start
    32:38:void stop() -> stop
    43:55:void tick() -> tick
    60:61:void on(org.bukkit.event.world.WorldUnloadEvent) -> QMiR
react.event.ReactEvent -> tKax:
    org.bukkit.event.HandlerList handlers -> hkeG
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> hIAM:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> ySAm:
    react.event.ScrollDirection direction -> bXrT
    boolean cancellled -> MTFq
    int amount -> CMyX
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> dLvl
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> yIqj
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> UblU:
    react.event.ScrollDirection DOWN -> YFHY
    react.event.ScrollDirection UP -> KVQa
    react.event.ScrollDirection[] $VALUES -> SMHL
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.feature.INMSBinding -> jNfP:
    java.lang.String getPackageVersion() -> wfOJ
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> QMiR
react.feature.NMSBinding -> JcMp:
    java.lang.String packageVersion -> PeaH
    8:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> wfOJ
react.feature.NMSBinding10 -> LWrC:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> QMiR
react.feature.NMSBinding11 -> GQUk:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> QMiR
react.feature.NMSBinding12 -> yuIG:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> QMiR
react.feature.NMSBinding8 -> Mtid:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> QMiR
react.feature.NMSBinding9 -> fKMp:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> QMiR
react.gbench.Profiler -> idwt:
    long nanos -> yluD
    long startNano -> dMwC
    long millis -> RtWp
    long startMillis -> sIaV
    double time -> ETar
    boolean profiling -> LPec
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> OjHJ
    78:78:double getTicks() -> kQjg
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> gxcU
    93:93:double getHours() -> RQTj
    98:98:double getMilliseconds() -> gMnm
    103:103:long getNanoseconds() -> bWrX
    108:108:long getNanos() -> RHdM
    113:113:long getStartNano() -> biUA
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> RsXP
    128:128:double getTime() -> gxgG
    133:133:boolean isProfiling() -> afSw
react.gconcurrent.A -> nkvr:
    react.gconcurrent.ParallelPoolManager mgr -> VoeX
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> nkvr$1:
    react.gconcurrent.A this$0 -> KNCg
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> mhtX:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> Usow:
    react.gconcurrent.QueueMode mode -> fKoT
    react.glang.GList threads -> Qygl
    int next -> lwuH
    int threadCount -> hATy
    java.util.Queue squeue -> etAR
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> lxUL
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> NVmB
    22:23:void syncQueue(react.gconcurrent.Execution) -> QMiR
    long getNanoGate() -> HSys
    29:42:void tickSyncQueue() -> CVLp
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> oflS
    93:100:int getTotalQueueSize() -> hIGB
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> VTgk
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> rpUp
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> AhxB
    152:179:void updateThreadInformation() -> AyyQ
    183:215:react.gconcurrent.ParallelThread nextThread() -> WqiH
    220:226:void createThreads(int) -> Bkok
    230:230:react.gconcurrent.QueueMode getMode() -> pYMi
    235:235:int getNext() -> JJAW
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> RQXI
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> xXTc
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> xPCx
react.gconcurrent.ParallelThread -> Btif:
    java.util.Queue queue -> SCyA
    react.gconcurrent.ThreadInformation info -> lxUL
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> YnsY
    68:75:void execute(react.gconcurrent.Execution) -> TFQj
    79:88:void execute() -> execute
    92:93:void queue(react.gconcurrent.Execution) -> VTgk
    97:97:java.util.Queue getQueue() -> xqfP
    102:102:react.gconcurrent.ThreadInformation getInfo() -> ETDP
react.gconcurrent.QueueMode -> QFBa:
    react.gconcurrent.QueueMode ROUND_ROBIN -> UmDC
    react.gconcurrent.QueueMode SMALLEST -> IaMw
    react.gconcurrent.QueueMode[] ENUM$VALUES -> dVif
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> upjs:
    react.gconcurrent.ParallelPoolManager mgr -> VoeX
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> upjs$1:
    react.gconcurrent.S this$0 -> FiGG
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> oDeq:
    long tick -> ySee
    long atick -> PTaC
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> MRgX:
    double ticksPerSecond -> Lrga
    int queuedSize -> pILP
    boolean processing -> lgRp
    double utilization -> KEQe
    react.gmath.Average ticksPerSecondAverage -> bbEe
    long tick -> ySee
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> TOMm
    33:35:void setTicksPerSecond(double) -> nIjv
    39:39:int getQueuedSize() -> sIEX
    44:45:void setQueuedSize(int) -> wfHd
    49:49:boolean isProcessing() -> kQnT
    54:55:void setProcessing(boolean) -> HnDT
    59:59:double getUtilization() -> JstI
    64:65:void setUtilization(double) -> HnDT
    69:69:double getTicksPerSecondAverage() -> yuJS
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> MBHm
    89:89:int getId() -> getId
react.gformat.F -> mPCG:
    java.text.NumberFormat NF -> CEkX
    java.text.DecimalFormat DF -> HCxM
    java.lang.String[] NAMES -> UmCI
    java.math.BigInteger THOUSAND -> cJvG
    java.util.NavigableMap MAP -> CWNA
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> HnDT
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> QMiR
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> QMiR
    201:221:java.lang.String timeLong(long,int) -> QMiR
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> TFQj
    236:236:java.lang.String b(double) -> BlQP
    241:258:java.lang.String b(java.math.BigInteger) -> QMiR
    263:267:void instantiate() -> xhuL
    279:279:java.lang.String fileSize(long) -> XJNA
    292:292:java.lang.String memSize(long) -> qtwn
    297:297:java.lang.String memSize(long,int) -> VTgk
    310:311:java.lang.String stamp(long) -> jhSs
    327:361:java.lang.String ofSize(long,int) -> TFQj
    367:394:java.lang.String ofSize(long,int,int) -> QMiR
    408:413:java.lang.String trim(java.lang.String,int) -> VTgk
    426:446:java.lang.String cname(java.lang.String) -> BlQP
    460:472:java.lang.String repeat(java.lang.String,int) -> repeat
    484:491:java.lang.String mem(long) -> JQek
    504:522:java.lang.String memx(long) -> NMRH
    536:537:java.lang.String f(long) -> NVBo
    549:550:java.lang.String f(int) -> upbr
    564:573:java.lang.String f(double,int) -> VTgk
    589:598:java.lang.String fd(double,int) -> TFQj
    612:621:java.lang.String f(float,int) -> QMiR
    632:632:java.lang.String f(double) -> NweN
    643:643:java.lang.String f(float) -> QMiR
    658:658:java.lang.String pc(double,int) -> XJNA
    673:673:java.lang.String pc(float,int) -> VTgk
    686:686:java.lang.String pc(double) -> WWlK
    699:699:java.lang.String pc(float) -> VTgk
    715:715:java.lang.String pc(int,int,int) -> QMiR
    729:729:java.lang.String pc(int,int) -> TFQj
    745:745:java.lang.String pc(long,long,int) -> QMiR
    759:759:java.lang.String pc(long,long) -> XJNA
    771:771:java.lang.String msSeconds(long) -> YnsY
    785:785:java.lang.String msSeconds(long,int) -> XJNA
    797:797:java.lang.String nsMs(long) -> nIjv
    811:811:java.lang.String nsMs(long,int) -> qtwn
    825:825:java.lang.String nsMsd(long,int) -> jhSs
react.glang.AccessCallback -> nRdf:
    java.lang.Object get() -> get
react.glang.Adapter -> MuKU:
    java.lang.Object adapt(java.lang.Object) -> jhSs
    java.lang.Object onAdapt(java.lang.Object) -> JQek
react.glang.Callback -> ckxI:
    java.lang.Object t -> BeKm
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> QMiR
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> byvU:
    double i -> QFcG
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> OjHJ
react.glang.FinalFloat -> FyGl:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> TFQj
react.glang.FinalInteger -> tuyB:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> wKtj
react.glang.FinalLong -> cJUa:
    long i -> cBdx
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> HnDT
react.glang.FinalString -> NEIl:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> SKgg:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> jhSs
    java.lang.Object onAdapt(java.lang.Object) -> JQek
react.glang.GBiset -> hICp:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> Qpun
    java.lang.Object b -> LHTt
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> VUTL
    53:54:void setA(java.lang.Object) -> NMRH
    63:63:java.lang.Object getB() -> yAeD
    73:74:void setB(java.lang.Object) -> NVBo
react.glang.GList -> EJpI:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> XJNA
    45:52:react.glang.GList grepDistance(int,int) -> qtwn
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> VTgk
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> uqMg
    188:190:react.glang.GList shuffleCopy() -> TqOY
    198:199:void shuffle() -> QFCT
    210:236:react.glang.GList split() -> QgeQ
    248:248:boolean hasIndex(int) -> TFQw
    258:259:java.lang.Object pickRandom() -> XAeh
    270:277:react.glang.GList stringList() -> BAhc
    288:292:void forEach(react.glang.Callback) -> VTgk
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> PRuW
    336:336:react.glang.GList cropFrom(int) -> UcGD
    341:373:react.glang.GList split(int) -> cknP
    389:389:react.glang.GList cropTo(int) -> hrlv
    406:416:react.glang.GList crop(int,int) -> jhSs
    427:431:react.glang.GList removeDuplicates() -> gxeo
    442:446:void removeAll(java.lang.Object) -> YnsY
    455:455:boolean hasDuplicates() -> Elrx
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> GjiS
    484:490:void push(java.lang.Object,int) -> QMiR
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> nIjv
    528:532:void add(java.util.List) -> QMiR
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> MJWd
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> dgLI
    626:627:react.glang.GList qdel(java.lang.Object) -> HnDT
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> rVaw
    662:669:java.lang.Object popLast() -> VndS
    674:683:java.lang.Object popRandom() -> sYeD
react.glang.GListAdapter -> lwRt:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> VTgk
    java.lang.Object onAdapt(java.lang.Object) -> JQek
react.glang.GMap -> IqMi:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> lMAC
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> QMiR
    64:81:react.glang.GMap flip() -> RsYm
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> QMiR
    121:121:react.glang.GList k() -> TFQw
    131:131:react.glang.GSet kset() -> bqgT
    141:141:react.glang.GList v() -> pXlJ
    151:151:react.glang.GSet vset() -> yIsm
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> VTgk
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> JQek
    209:219:react.glang.GMap removeDuplicateValues() -> OjPl
    233:242:void put(react.glang.GList,react.glang.GList) -> QMiR
    251:267:react.glang.GList sortK() -> Rrxl
    277:293:react.glang.GList sortV() -> PCAA
react.glang.GQuadraset -> aDMt:
    java.lang.Object a -> Qpun
    java.lang.Object b -> LHTt
    java.lang.Object c -> HnoK
    java.lang.Object d -> fUCa
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> VUTL
    25:26:void setA(java.lang.Object) -> NMRH
    30:30:java.lang.Object getB() -> yAeD
    35:36:void setB(java.lang.Object) -> NVBo
    40:40:java.lang.Object getC() -> CgOB
    45:46:void setC(java.lang.Object) -> BlQP
    50:50:java.lang.Object getD() -> rNQW
    55:56:void setD(java.lang.Object) -> NweN
react.glang.GSet -> xytE:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> qmPR:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> Qpun
    java.lang.Object b -> LHTt
    java.lang.Object c -> HnoK
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> VUTL
    26:27:void setA(java.lang.Object) -> NMRH
    31:31:java.lang.Object getB() -> yAeD
    36:37:void setB(java.lang.Object) -> NVBo
    41:41:java.lang.Object getC() -> CgOB
    46:47:void setC(java.lang.Object) -> BlQP
react.gmath.Average -> TNhy:
    double[] values -> uaNv
    double average -> HMMJ
    boolean dirty -> BCJe
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> Bkok
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> LGTt
react.gmath.DoubleArrayUtils -> hruh:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> QMiR
    17:19:void wrapRight(double[]) -> QMiR
    23:27:void fill(double[],double) -> fill
react.gmath.M -> AGUA:
    int precision -> QFdp
    int modulus -> skjB
    float[] sin -> iDYt
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> QMiR
    31:36:boolean r(java.lang.Double) -> VTgk
    51:51:double tps(long,int) -> JQek
    63:63:double ticksFromNS(long) -> BlQP
    75:101:java.lang.String toRoman(int) -> DOrl
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> JQek
    144:216:int fromRoman(java.lang.String) -> NweN
    226:226:long ns() -> teYV
    236:236:long ms() -> AiXw
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> VTgk
    333:333:float sinLookup(int) -> INbF
react.gnet.client.Client -> bqcw:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> slJc
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> QMiR
    74:74:react.gnet.packet.PacketHandler getHandler() -> gMpy
react.gnet.client.IClient -> CwmG:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> QMiR
    react.gnet.packet.PacketHandler getHandler() -> gMpy
react.gnet.download.Download -> ydEq:
    react.gnet.download.DownloadState state -> EefO
    react.gnet.download.DownloadType type -> ffDi
    react.gnet.download.DownloadStatus status -> lwvc
    react.gnet.download.DownloadMonitor monitor -> aDrV
    java.net.URL url -> url
    java.io.File file -> WGuh
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    24:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> NDjO
    92:92:react.gnet.download.DownloadType getType() -> GPwL
    97:97:react.gnet.download.DownloadStatus getStatus() -> gFAr
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> bhyA
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> dLvl:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> QMiR
    void onDownloadStarted(react.gnet.download.Download) -> QMiR
    void onDownloadFinished(react.gnet.download.Download) -> VTgk
    void onDownloadFailed(react.gnet.download.Download) -> TFQj
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> QMiR
react.gnet.download.DownloadState -> yIqj:
    react.gnet.download.DownloadState IDLE -> pHmt
    react.gnet.download.DownloadState DOWNLOADING -> QqYd
    react.gnet.download.DownloadState FAILED -> BvNj
    react.gnet.download.DownloadState FINISHED -> OcDE
    react.gnet.download.DownloadState[] ENUM$VALUES -> LHXN
    3:8:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadState[] values() -> values
    1:1:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
react.gnet.download.DownloadStatus -> kQjg:
    long bytesDownloaded -> ETeH
    long bytesTotal -> CyRq
    long bytesPerSecond -> YFMS
    long timeElapsed -> wDpn
    10:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> cSKC
    25:25:long getBytesDownloaded() -> fKQu
    30:31:void setBytesDownloaded(long) -> NweN
    35:35:long getBytesTotal() -> wfVF
    40:41:void setBytesTotal(long) -> WWlK
    45:45:long getBytesPerSecond() -> tLJn
    50:51:void setBytesPerSecond(long) -> OjHJ
    55:55:long getTimeElapsed() -> cBHp
    60:61:void setTimeElapsed(long) -> Bkok
react.gnet.download.DownloadType -> gxcU:
    react.gnet.download.DownloadType DETERMINATE -> nBhB
    react.gnet.download.DownloadType INDETERMINATE -> bGvC
    react.gnet.download.DownloadType[] ENUM$VALUES -> etDE
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadType[] values() -> values
    1:1:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
react.gnet.packet.IPacket -> RQTj:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> wTsS
    java.lang.String getPacketName() -> MuNo
react.gnet.packet.IncompatablePacketException -> gMnm:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> bWrX:
    react.gnet.packet.PacketBinding SERVER_BOUND -> Iqrg
    react.gnet.packet.PacketBinding CLIENT_BOUND -> NqAC
    react.gnet.packet.PacketBinding[] ENUM$VALUES -> MSjI
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.packet.PacketBinding[] values() -> values
    1:1:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
react.gnet.packet.PacketException -> RHdM:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> biUA:
    react.glang.GList accept -> Eedk
    react.gnet.packet.PacketBinding side -> etAv
    react.gnet.streams.OSS out -> PTbf
    react.gnet.streams.ISS in -> Evff
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> QMiR
    28:34:void accept(react.gnet.packet.IPacket) -> VTgk
    38:46:react.gnet.packet.IPacket findPacket(int) -> ykmN
    51:66:react.gnet.packet.IPacket read() -> JbtJ
    71:77:void write(react.gnet.packet.IPacket) -> TFQj
react.gnet.packet.UnhandledPacketException -> RsXP:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> gxgG:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> gMpy
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> XJNA
react.gnet.server.Server -> afSw:
    int port -> port
    java.net.ServerSocket socket -> XKYc
    react.gnet.packet.PacketHandler handler -> slJc
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> gMpy
    37:84:void run() -> run
    88:91:void pstart() -> PmWC
    95:96:void pstop() -> PugX
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> XJNA
react.gnet.streams.ISS -> HSys:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> Jcrm
    boolean built -> gFby
    byte[] readBuffer -> LHWU
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> ERuu
    64:72:react.glang.GList readStringList() -> hQXX
    77:85:react.glang.GList readDoubleList() -> RkLn
    90:98:react.glang.GList readLongList() -> MBKO
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> QMiR
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> QMiR
    136:137:react.gnet.streams.ISS gzip() -> jppX
    142:147:void build() -> lLbT
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> VTgk
    435:436:void close() -> close
react.gnet.streams.OSS -> CVLp:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> Jcrw
    react.gnet.streams.StreamBuilder bu -> Jcrm
    boolean built -> gFby
    byte[] writeBuffer -> cTIk
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> tvPT
    41:42:react.gnet.streams.OSS gzip(int) -> wTdl
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> VTgk
    53:58:void build() -> lLbT
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> NMRH
    102:108:void writeDoubleList(react.glang.GList) -> NVBo
    112:118:void writeLongList(react.glang.GList) -> YnsY
    122:128:void writeStreamableList(react.glang.GList) -> nIjv
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> anfF
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> TFQj
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> oflS:
    react.glang.GList constructors -> oqBW
    18:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> QMiR
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> QMiR
    49:50:void bind(react.gnet.streams.StreamConstructor) -> QMiR
    54:55:void bindGZIP(int) -> WWkH
    59:60:void bindGZIP() -> Daae
    64:65:void bindCipher(javax.crypto.Cipher) -> TFQj
    69:70:void bindBuffer(int) -> jWPj
    74:75:void bindBuffer() -> awWP
react.gnet.streams.StreamConstructor -> hIGB:
    java.io.InputStream constructInput(java.io.InputStream) -> QMiR
    java.io.OutputStream constructOutput(java.io.OutputStream) -> QMiR
react.gnet.streams.constructors.BufferedStreamConstructor -> rpUp:
    int bufferSize -> bufferSize
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> VTgk
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> VTgk
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> QMiR
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> QMiR
react.gnet.streams.constructors.CipherStreamConstructor -> AhxB:
    javax.crypto.Cipher cipher -> CxtC
    17:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> TFQj
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> TFQj
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> QMiR
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> QMiR
react.gnet.streams.constructors.GZipStreamConstructor -> AyyQ:
    int compressionLevel -> qfFb
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> XJNA
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> XJNA
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> QMiR
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> QMiR
react.gnet.streams.overlays.CGZIPInputStream -> WqiH:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> pYMi:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> JJAW:
    void toBytes(react.gnet.streams.OSS) -> QMiR
    void fromBytes(react.gnet.streams.ISS) -> QMiR
react.graph.ColossalView -> RQXI:
    react.papyrus.BufferedFrame view -> RlMs
    react.glang.GMap buffers -> gNwF
    react.glang.GMap graphs -> lNEw
    double level -> qTdT
    double targetLevel -> FymC
    int maxX -> sIhq
    int maxY -> bQJB
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> qvDp
    51:77:void render() -> URQU
    81:98:void scroll(int) -> wwHi
    102:112:void recompile() -> DYRD
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> QMiR
    122:122:react.papyrus.BufferedFrame getView() -> Mckb
    127:127:react.glang.GMap getBuffers() -> LrJr
    132:132:react.glang.GMap getGraphs() -> EJrW
    137:137:double getLevel() -> DYQi
    142:142:double getTargetLevel() -> VLcf
    147:147:int getMaxX() -> jOMM
    152:152:int getMaxY() -> TNnF
react.graph.ColossalView$Builder -> RQXI$QMiR:
    react.glang.GList graphs -> aEUR
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> QMiR
    171:191:react.graph.ColossalView compute() -> pGkv
react.graph.CubicleIterator -> xXTc:
    int[][] mapping -> EUHE
    int xCubes -> JuXY
    int yCubes -> eAAF
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> uFNj
    47:130:void insert(react.graph.GraphSize,int) -> QMiR
    134:145:void print() -> print
react.graph.Graph2D -> xPCx:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> QMiR
react.graph.GraphCPUArc -> xqfP:
    byte fontColor -> kJab
    byte backgroundColor -> qvfa
    double pct -> MdoI
    react.gmath.Average aax -> esdn
    react.gmath.Average aay -> hIhq
    react.gmath.Average aaz -> MCLn
    long msx -> DHsK
    26:38:void <init>(byte) -> <init>
    42:47:void sample() -> eHDq
    52:90:void onRender(react.papyrus.BufferedFrame) -> QMiR
    94:94:byte getFontColor() -> Jbrn
    99:100:void setFontColor(byte) -> QMiR
    104:104:byte getBackgroundColor() -> XuNO
    109:110:void setBackgroundColor(byte) -> VTgk
react.graph.GraphLagMap -> ETDP:
    int grid -> YqDC
    org.bukkit.entity.Player viewer -> KpLE
    org.bukkit.util.Vector lastVector -> iLlX
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> sbeM
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> WiYe
    49:55:void zoomOut() -> VvwI
    60:164:void onRender(react.papyrus.BufferedFrame) -> QMiR
    21:21:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> tvPT
react.graph.GraphLagMap$1 -> ETDP$1:
    int[] $SwitchMap$react$api$ChunkIssue -> ydVf
    107:107:void <clinit>() -> <clinit>
react.graph.GraphMemoryArc -> TOMm:
    byte fontColor -> kJab
    byte backgroundColor -> qvfa
    double pct -> MdoI
    react.gmath.Average aax -> esdn
    long msx -> DHsK
    long of -> kKAt
    26:37:void <init>(byte) -> <init>
    41:47:void sample() -> eHDq
    52:79:void onRender(react.papyrus.BufferedFrame) -> QMiR
    83:83:byte getFontColor() -> Jbrn
    88:89:void setFontColor(byte) -> QMiR
    93:93:byte getBackgroundColor() -> XuNO
    98:99:void setBackgroundColor(byte) -> VTgk
react.graph.GraphMode -> sIEX:
    react.graph.GraphMode NORMAL -> xQGb
    react.graph.GraphMode ITEMFRAME -> RJJR
    react.graph.GraphMode EOD -> qwGS
    react.graph.GraphMode[] $VALUES -> lETP
    3:3:react.graph.GraphMode[] values() -> values
    3:3:react.graph.GraphMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSampleLine -> kQnT:
    double lx -> ecCL
    double ly -> FOWv
    react.api.ISampler sampler -> Jlel
    react.graph.IFormatter formatter -> FWha
    byte graphColor -> vApB
    byte backgroundColor -> qvfa
    byte borderColor -> xXwR
    byte textColor -> fvgT
    int ticksLeftTitle -> YWOX
    int ticksOutTitle -> NVoQ
    double nextPoint -> Kfwr
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> eHDq
    51:183:void onRender(react.papyrus.BufferedFrame) -> QMiR
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> VTgk
    226:254:int getHue(int,int,int) -> TFQj
    259:281:void scaleFor(react.glang.GList) -> HnDT
    285:285:react.graph.IFormatter getFormatter() -> AiOo
    290:291:void setFormatter(react.graph.IFormatter) -> QMiR
    295:295:byte getGraphColor() -> iCXh
    300:301:void setGraphColor(byte) -> TFQj
    305:305:byte getBackgroundColor() -> XuNO
    310:311:void setBackgroundColor(byte) -> VTgk
    315:315:byte getBorderColor() -> SLKk
    320:321:void setBorderColor(byte) -> XJNA
    325:325:byte getTextColor() -> cIxC
    330:331:void setTextColor(byte) -> qtwn
    335:335:react.api.ISampler getSampler() -> wLaT
react.graph.GraphSize -> JstI:
    react.graph.GraphSize WIDE -> ohOc
    react.graph.GraphSize FULL -> Tibj
    react.graph.GraphSize SQUARE -> bPhP
    react.graph.GraphSize[] $VALUES -> QGGl
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> UJCt
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> JstI$1:
    int[] $SwitchMap$react$graph$GraphSize -> HnsO
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> yuJS:
    java.lang.String text -> text
    byte fontColor -> kJab
    byte backgroundColor -> qvfa
    boolean wrote -> EDHI
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> QMiR
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> Jbrn
    68:69:void setFontColor(byte) -> QMiR
    73:73:byte getBackgroundColor() -> XuNO
    78:79:void setBackgroundColor(byte) -> VTgk
react.graph.GraphingInstance -> MBHm:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> aEUR
    react.graph.ColossalView view -> Emyu
    react.papyrus.Papyrus papyrus -> cvQf
    react.papyrus.IRenderer renderer -> URtx
    boolean mapping -> ePpM
    react.glang.GList msgs -> pHrX
    react.surge.sched.Task waiter -> CFRB
    react.surge.sched.Task waiter2 -> VNHu
    int shift -> UmIW
    int iv -> dgqn
    boolean notif -> Qymv
    boolean doScrolling -> pkUh
    49:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> qTDq
    127:128:void setDoScrolling(boolean) -> BlQP
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> QMiR
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> QMiR
    151:155:void send(java.lang.String) -> WWlK
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> QMiR
    166:205:void on(react.event.ReactScrollEvent) -> QMiR
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> QMiR
    219:227:void destroy() -> destroy
    231:240:void toggle() -> XuQC
    244:245:void setGraphs(react.glang.GList) -> BlQP
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> QMwj
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> McoG
    298:298:react.graph.ColossalView getView() -> IXDC
    303:303:react.papyrus.Papyrus getPapyrus() -> flwN
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> QMiR
    323:324:void setPapyrus(react.papyrus.Papyrus) -> QMiR
    328:329:void setRenderer(react.papyrus.IRenderer) -> QMiR
    333:334:void setMapping(boolean) -> TFQj
    338:339:void setMsgs(react.glang.GList) -> NweN
    343:344:void setWaiter(react.surge.sched.Task) -> QMiR
    348:349:void setWaiter2(react.surge.sched.Task) -> VTgk
    353:354:void setShift(int) -> UADT
    358:359:void setNotif(boolean) -> NweN
    363:363:react.papyrus.IRenderer getRenderer() -> wLeJ
    368:368:boolean isMapping() -> tnCB
    373:373:react.glang.GList getMsgs() -> NxTU
    378:378:react.surge.sched.Task getWaiter() -> yAhw
    383:383:react.surge.sched.Task getWaiter2() -> TWaf
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> paat
    398:414:void compile() -> PvJX
    418:433:void enableSly() -> YVPn
    437:445:void disableSly() -> wMDr
    40:40:boolean access$0(react.graph.GraphingInstance) -> QMiR
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> VTgk
    46:46:boolean access$2(react.graph.GraphingInstance) -> TFQj
    46:46:void access$3(react.graph.GraphingInstance,boolean) -> QMiR
    44:44:int access$4(react.graph.GraphingInstance) -> XJNA
    44:44:void access$5(react.graph.GraphingInstance,int) -> QMiR
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> qtwn
react.graph.GraphingInstance$1 -> MBHm$1:
    react.graph.GraphingInstance this$0 -> YVrK
    org.bukkit.entity.Player val$player -> oyRx
    1:54:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> MBHm$2:
    react.graph.GraphingInstance this$0 -> YVrK
    1:79:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> MBHm$3:
    react.graph.GraphingInstance this$0 -> YVrK
    1:109:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> QMiR
react.graph.IFormatter -> xhuL:
    java.lang.String from(double) -> wfHd
react.graph.IGraph -> VUTL:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> sYic
    long getTimeViewport() -> DXtV
    void render(react.papyrus.BufferedFrame) -> TFQj
    double getMax() -> getMax
    void setMax(double) -> upbr
react.graph.NormalGraph -> yAeD:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> aEUx
    long timeViewport -> vdVD
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> sYic
    35:35:long getTimeViewport() -> DXtV
    41:42:void render(react.papyrus.BufferedFrame) -> TFQj
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> upbr
    void onRender(react.papyrus.BufferedFrame) -> QMiR
react.graph.PlotBoard -> uqMg:
    react.glang.GMap plots -> ySkd
    int maxRecordings -> mGxW
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> UlHO
    33:33:long getAccurateTimeSpan() -> nSLQ
    38:50:long getMedian(long,long) -> qtwn
    55:55:long getMinimumAccuracyRange() -> bOiS
    60:70:double getMaxValue() -> JJFD
    75:85:double getMinValue() -> EeJG
    90:90:react.glang.GList sort(react.glang.GMap) -> VTgk
    95:105:long earilestRecording() -> aLfN
    110:120:long latestRecording() -> VnjH
    125:126:void reduceBefore(long) -> wfHd
    130:156:void reduceBetween(long,long) -> jhSs
    160:160:boolean before(long,long) -> JQek
    165:165:boolean after(long,long) -> NMRH
    170:170:boolean within(long,long,long) -> QMiR
    175:193:react.glang.GMap getBetween(long,long) -> NVBo
    198:200:void plot(long,double) -> QMiR
    204:204:boolean hasAt(long) -> upbr
    209:209:double getAt(long) -> wKtj
    214:214:int getSize() -> getSize
react.graph.Point -> TqOY:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> QFCT:
    int iid -> KNIU
    react.graph.IGraph graph -> eQcT
    react.graph.GraphSize size -> pQaf
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> PKVU
    24:25:void setGraph(react.graph.IGraph) -> QMiR
    29:29:react.graph.GraphSize getSize() -> AGXs
    34:35:void setSize(react.graph.GraphSize) -> QMiR
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> QgeQ:
    react.graph.RenderMaxType UNLIMITED -> TOrJ
    react.graph.RenderMaxType LIMITED -> OITM
    react.graph.RenderMaxType[] $VALUES -> msML
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> XAeh:
    java.lang.String CRLF -> xQIP
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> OjHJ
    162:198:java.lang.String toString(react.json.JSONObject) -> VTgk
react.json.HTTPTokener -> BAhc:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> gxeo:
    java.util.ArrayList myArrayList -> aVXX
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> QMiR
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> imcR
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> aChT
    394:399:react.json.JSONObject getJSONObject(int) -> Tgue
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> Bkok
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> cJNq
    515:515:boolean optBoolean(int) -> CUci
    533:536:boolean optBoolean(int,boolean) -> VTgk
    551:551:double optDouble(int) -> HCRD
    569:572:double optDouble(int,double) -> QMiR
    587:587:int optInt(int) -> DXhB
    605:608:int optInt(int,int) -> NMRH
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> VTgk
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> QMiR
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> QMiR
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> QMiR
    722:723:react.json.JSONArray optJSONArray(int) -> hamt
    737:738:react.json.JSONObject optJSONObject(int) -> rMhs
    752:752:long optLong(int) -> bhoC
    770:773:long optLong(int,long) -> QMiR
    788:788:java.lang.String optString(int) -> awMr
    803:804:java.lang.String optString(int,java.lang.String) -> QMiR
    816:817:react.json.JSONArray put(boolean) -> WWlK
    830:831:react.json.JSONArray put(java.util.Collection) -> QMiR
    845:848:react.json.JSONArray put(double) -> wKtj
    860:861:react.json.JSONArray put(int) -> AiOo
    873:874:react.json.JSONArray put(long) -> TFQw
    887:888:react.json.JSONArray put(java.util.Map) -> QMiR
    902:903:react.json.JSONArray put(java.lang.Object) -> WWlK
    921:922:react.json.JSONArray put(int,boolean) -> TFQj
    939:940:react.json.JSONArray put(int,java.util.Collection) -> QMiR
    958:959:react.json.JSONArray put(int,double) -> VTgk
    977:978:react.json.JSONArray put(int,int) -> NVBo
    996:997:react.json.JSONArray put(int,long) -> VTgk
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> QMiR
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> QMiR
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> OjHJ
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> QMiR
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> QMiR
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> QMiR
react.json.JSONException -> Elrx:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> ydla
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> GjiS:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> QMiR
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> wfHd
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> QMiR
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> VTgk
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> OjHJ
    379:456:java.lang.String toString(react.json.JSONArray) -> VTgk
    472:552:java.lang.String toString(react.json.JSONObject) -> VTgk
react.json.JSONObject -> MJWd:
    java.util.Map map -> map
    java.lang.Object NULL -> pjtH
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> QMiR
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> VTgk
    480:499:java.lang.String doubleToString(double) -> TFQw
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> upbr
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> wKtj
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> TFQw
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> TFQj
    751:767:java.lang.String[] getNames(java.lang.Object) -> Bkok
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> PRuW
    855:855:boolean isNull(java.lang.String) -> UcGD
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> afXB
    917:937:java.lang.String numberToString(java.lang.Number) -> QMiR
    949:949:java.lang.Object opt(java.lang.String) -> cknP
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> QMiR
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> QMiR
    1018:1018:boolean optBoolean(java.lang.String) -> hrlv
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> QMiR
    1054:1054:double optDouble(java.lang.String) -> DOrl
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> QMiR
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> QMiR
    1116:1119:double optDouble(java.lang.String,double) -> QMiR
    1134:1134:int optInt(java.lang.String) -> INbF
    1152:1155:int optInt(java.lang.String,int) -> TFQj
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> ykmN
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> ERuu
    1198:1198:long optLong(java.lang.String) -> tvPT
    1216:1219:long optLong(java.lang.String,long) -> QMiR
    1234:1234:java.lang.String optString(java.lang.String) -> wTdl
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> VTgk
    1255:1305:void populateMap(java.lang.Object) -> wfHd
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> VTgk
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> QMiR
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> VTgk
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> XJNA
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> VTgk
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> QMiR
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> TFQj
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> XJNA
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> qtwn
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> QMiR
    1590:1590:java.lang.Object remove(java.lang.String) -> WWkH
    1605:1640:boolean similar(java.lang.Object) -> OjHJ
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> upbr
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> TFQj
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> QMiR
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> QMiR
    2000:2004:void indent(java.io.Writer,int) -> QMiR
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> QMiR
react.json.JSONObject$Null -> MJWd$QMiR:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> dgLI:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> rVaw:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> VndS:
    long character -> fLUc
    boolean eof -> eof
    long index -> gXId
    long line -> WbLv
    char previous -> LQMF
    java.io.Reader reader -> reader
    boolean usePrevious -> LPkc
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> CDpL
    119:131:int dehexchar(char) -> QMiR
    136:136:boolean end() -> vAOy
    147:153:boolean more() -> qCBa
    164:198:char next() -> next
    213:218:char next(char) -> VTgk
    233:250:java.lang.String next(int) -> gMij
    263:266:char nextClean() -> xrJm
    287:334:java.lang.String nextString(char) -> TFQj
    349:361:java.lang.String nextTo(char) -> XJNA
    376:388:java.lang.String nextTo(java.lang.String) -> jWPj
    403:441:java.lang.Object nextValue() -> EBck
    458:479:char skipTo(char) -> qtwn
    491:491:react.json.JSONException syntaxError(java.lang.String) -> wwHi
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> sYeD:
    int maxdepth -> Bdpn
    boolean comma -> MnEK
    char mode -> woke
    react.json.JSONObject[] stack -> FiOs
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> uFNj
    157:164:react.json.JSONWriter array() -> owoy
    180:193:react.json.JSONWriter end(char,char) -> QMiR
    206:206:react.json.JSONWriter endArray() -> eYRE
    219:219:react.json.JSONWriter endObject() -> CEPc
    235:258:react.json.JSONWriter key(java.lang.String) -> UADT
    274:285:react.json.JSONWriter object() -> pGoV
    299:310:void pop(char) -> jhSs
    322:329:void push(react.json.JSONObject) -> XJNA
    342:342:react.json.JSONWriter value(boolean) -> OjHJ
    356:356:react.json.JSONWriter value(double) -> PRuW
    369:369:react.json.JSONWriter value(long) -> PRuW
    385:385:react.json.JSONWriter value(java.lang.Object) -> wKtj
react.json.XML -> lMAC:
    java.lang.Character AMP -> tfcM
    java.lang.Character APOS -> HoVW
    java.lang.Character BANG -> mbNr
    java.lang.Character EQ -> JmLQ
    java.lang.Character GT -> QXNQ
    java.lang.Character LT -> SMSC
    java.lang.Character QUEST -> cdpr
    java.lang.Character QUOT -> kKHF
    java.lang.Character SLASH -> VMkL
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> imcR
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> QMiR
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> OjHJ
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> RsYm:
    java.util.HashMap entity -> vSWA
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> kbrs
    108:133:java.lang.Object nextContent() -> opAX
    149:166:java.lang.Object nextEntity(char) -> JQek
    186:239:java.lang.Object nextMeta() -> OHRA
    261:334:java.lang.Object nextToken() -> ObDf
    354:420:boolean skipPast(java.lang.String) -> aChT
react.lagmap.LagMap -> bqgT:
    react.glang.GMap chunks -> nCMy
    13:16:void <init>() -> <init>
    20:27:react.glang.GMap getGrandTotalMilliseconds() -> TOPk
    32:47:react.glang.GMap getGrandTotal() -> feFd
    52:61:void pump() -> WqlM
    65:71:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> QMiR
    75:81:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> QMiR
    85:85:react.glang.GMap getChunks() -> xFuH
react.lagmap.LagMapChunk -> pXlJ:
    react.glang.GMap hits -> tVAd
    org.bukkit.Chunk c -> lUeA
    14:18:void <init>(org.bukkit.Chunk) -> <init>
    22:36:react.glang.GMap getMS() -> esDo
    41:65:double totalMS() -> yBIO
    70:77:double getMS(react.api.ChunkIssue) -> QMiR
    82:88:void hit(react.api.ChunkIssue,double) -> QMiR
    92:93:void hit(react.api.ChunkIssue) -> VTgk
    97:97:int getX() -> getX
    102:102:int getZ() -> getZ
    107:114:double totalScore() -> cRjt
    119:119:react.glang.GMap getHits() -> gVgD
    124:133:void pump() -> WqlM
    138:138:int compareTo(react.lagmap.LagMapChunk) -> QMiR
    143:143:org.bukkit.Chunk getC() -> KvpX
    1:1:int compareTo(java.lang.Object) -> compareTo
react.papyrus.BufferedFrame -> yIsm:
    byte[][] frame -> DAFS
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> QMiR
    90:97:void write(byte) -> jhSs
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> QMiR
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> QMiR
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> QMiR
    153:167:java.awt.image.BufferedImage toBufferedImage() -> hjju
    175:182:void writeRainbowMul() -> ryJK
    189:196:void writeRainbowAdd() -> FNXo
    203:213:void writeSparks() -> aoLG
    217:223:boolean write(int,int,byte) -> QMiR
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> QMiR
    255:272:void write(react.papyrus.BufferedFrame) -> XJNA
    276:276:byte[][] getRawFrame() -> RHmD
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> OjPl:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> XJNA
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> QMiR
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> Rrxl:
    org.bukkit.map.MapView getView() -> UcXM
    react.papyrus.BufferedFrame getFrameBuffer() -> ivbq
    void addRenderer(react.papyrus.IRenderer) -> VTgk
    void clearRenderers() -> LOkt
    react.glang.GList getRenderers() -> rVhi
    void removeRenderer(react.papyrus.IRenderer) -> TFQj
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> eYUW
react.papyrus.IRenderer -> PCAA:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> QMiR
react.papyrus.Papyrus -> CgOB:
    org.bukkit.map.MapView map -> VDyh
    react.papyrus.BufferedFrame frameBuffer -> YFTF
    react.papyrus.BufferedFrame lastFrameBuffer -> vmIa
    react.glang.GList renderers -> THFQ
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> UcXM
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> ivbq
    51:52:void addRenderer(react.papyrus.IRenderer) -> VTgk
    57:58:void clearRenderers() -> LOkt
    63:63:react.glang.GList getRenderers() -> rVhi
    69:70:void removeRenderer(react.papyrus.IRenderer) -> TFQj
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> eYUW
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> VTgk
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> TFQj
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> XJNA
react.papyrus.Papyrus$1 -> CgOB$1:
    org.bukkit.map.MapCanvas val$c -> XSpg
    org.bukkit.map.MapView val$v -> OcJO
    react.papyrus.Papyrus this$0 -> JmLg
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> rNQW:
    int spaceSize -> TGdi
    java.lang.String fontChars -> wNHy
    int[][] fontData -> JJgI
    react.papyrus.ReactFont Font -> YFRO
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> LGTt:
    react.glang.GList subgoals -> NFRa
    java.lang.String tag -> NVrl
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> WaNT
    26:44:void propigate() -> CVSE
    49:50:void addGoal(react.rai.IGoal) -> QMiR
    55:65:react.glang.GList getFailingSubgoals() -> QyOd
    71:71:boolean isFailing() -> fTHN
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> CgVP
    void onPropigated() -> UJFj
react.rai.Goal$1 -> LGTt$1:
    react.rai.IGoal val$i -> WQLs
    react.rai.Goal this$0 -> xQKm
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> teYV:
    react.glang.GList getSubgoals() -> WaNT
    void propigate() -> CVSE
    void onPropigated() -> UJFj
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> QyOd
    boolean isFailing() -> fTHN
    boolean onCheckFailing() -> CgVP
    void update() -> update
    void addGoal(react.rai.IGoal) -> QMiR
react.rai.IRAI -> AiXw:
    react.glang.GList getGoals() -> RYlk
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> QMiR
    react.glang.GList getEvents() -> kswB
    void callEvent(react.rai.RAIEvent) -> QMiR
    react.glang.GList getListeners() -> DivR
react.rai.RAI -> gMpy:
    react.glang.GList goals -> JmJs
    react.glang.GList events -> woix
    react.glang.GList logEvents -> iwbt
    react.glang.GList listeners -> WrpM
    long since -> PfKk
    react.rai.RAI instance -> dOCU
    22:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> RYlk
    41:42:void addGoal(react.rai.IGoal) -> QMiR
    47:77:void tick() -> tick
    82:82:react.glang.GList getEvents() -> kswB
    88:95:void callEvent(react.rai.RAIEvent) -> QMiR
    100:100:react.glang.GList getListeners() -> DivR
react.rai.RAIEvent -> NDjO:
    react.rai.RAIEventType type -> pbeS
    java.lang.String[] pars -> QFkG
    java.lang.String ovt -> BvVJ
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> EeIt
    29:29:java.lang.String[] getPars() -> PKVd
    34:34:java.lang.String getOvt() -> pGps
react.rai.RAIEventType -> GPwL:
    react.rai.RAIEventType FIRE_ACTION -> SEBJ
    react.rai.RAIEventType NOTE_GOAL_FAILING -> pYxF
    react.rai.RAIEventType NOTE_GOAL_FIXED -> Iiio
    java.lang.String[] msgs -> DbkR
    react.rai.RAIEventType[] $VALUES -> ujIS
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> DPeI
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> QMiR
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedEntityCounts -> gFAr:
    boolean failing -> EoAB
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> CgVP
    91:134:void onPropigated() -> UJFj
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> QMiR
react.rai.goals.GoalReducedEntityCounts$1 -> gFAr$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> KNNS
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> gFAr$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> KNNS
    org.bukkit.Chunk val$lx -> hksL
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> bhyA:
    boolean failing -> EoAB
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> CgVP
    72:76:void onPropigated() -> UJFj
react.rai.goals.GoalStableChunkTime$1 -> bhyA$1:
    react.rai.goals.GoalStableChunkTime this$0 -> NFUf
    1:48:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> cSKC:
    boolean failing -> EoAB
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> UJFj
    35:35:void letUp() -> QMyT
    40:77:boolean onCheckFailing() -> CgVP
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> QMiR
react.rai.goals.GoalStableEntityTime$1 -> cSKC$1:
    react.rai.goals.GoalStableEntityTime this$0 -> hksO
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> fKQu:
    boolean failing -> EoAB
    react.glang.GMap reocc -> GBAw
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> UJFj
    88:125:boolean onCheckFailing() -> CgVP
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> QMiR
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> VTgk
react.rai.goals.GoalStableFluidTime$1 -> fKQu$1:
    react.rai.goals.GoalStableFluidTime this$0 -> dxxa
    org.bukkit.Chunk val$lx -> hksL
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> fKQu$2:
    react.rai.goals.GoalStableFluidTime this$0 -> dxxa
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> wfVF:
    boolean failing -> EoAB
    react.glang.GMap reocc -> GBAw
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> UJFj
    89:125:boolean onCheckFailing() -> CgVP
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> QMiR
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> VTgk
react.rai.goals.GoalStableHopperTime$1 -> wfVF$1:
    react.rai.goals.GoalStableHopperTime this$0 -> twfG
    org.bukkit.Chunk val$lx -> hksL
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> wfVF$2:
    react.rai.goals.GoalStableHopperTime this$0 -> twfG
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> tLJn:
    int d -> d
    boolean failing -> EoAB
    react.glang.GMap reocc -> GBAw
    32:37:void <init>() -> <init>
    42:86:void onPropigated() -> UJFj
    91:128:boolean onCheckFailing() -> CgVP
    28:28:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> QMiR
    27:27:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> VTgk
react.rai.goals.GoalStableRedstoneTime$1 -> tLJn$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> cKau
    org.bukkit.Chunk val$lx -> hksL
    1:68:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    73:83:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> tLJn$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> cKau
    1:110:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    115:124:void run() -> run
react.rai.goals.GoalStableTickTime -> cBHp:
    boolean failing -> EoAB
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> UJFj
    34:58:boolean onCheckFailing() -> CgVP
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> QMiR
react.rai.goals.GoalStableTickTime$1 -> cBHp$1:
    react.rai.goals.GoalStableTickTime this$0 -> dFTo
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.redstone.RedstoneEvent -> wTsS:
    react.surge.util.MaterialBlock block -> nBob
    org.bukkit.util.Vector vector -> brqy
    byte from -> xrpe
    byte to -> qTjT
    17:22:void <init>(org.bukkit.event.block.BlockRedstoneEvent) -> <init>
    26:26:react.surge.util.MaterialBlock getBlock() -> xOhV
    31:32:void setBlock(react.surge.util.MaterialBlock) -> QMiR
    36:36:org.bukkit.util.Vector getVector() -> qSeC
    41:42:void setVector(org.bukkit.util.Vector) -> QMiR
    46:46:byte getFrom() -> SmrI
    51:52:void setFrom(byte) -> JQek
    56:56:byte getTo() -> OHTN
    61:62:void setTo(byte) -> NMRH
react.redstone.RedstoneTracker -> MuNo:
    org.bukkit.World world -> world
    react.controller.FeatureController fc -> ifdq
    react.glang.GList events -> woix
    boolean ticking -> dphP
    react.surge.sched.Task task -> apPW
    boolean nms -> jHFW
    int tr -> jOuA
    react.gmath.Average aav -> YODv
    boolean handleTicking -> sJNm
    31:52:void <init>(org.bukkit.World) -> <init>
    56:58:void close() -> close
    62:90:void tick() -> tick
    95:111:void set(org.bukkit.Location,react.surge.util.MaterialBlock) -> VTgk
    115:131:void enact(react.redstone.RedstoneEvent) -> QMiR
    136:158:void on(org.bukkit.event.block.BlockRedstoneEvent) -> QMiR
react.redstone.RedstoneTracker$1 -> MuNo$1:
    react.redstone.RedstoneTracker this$0 -> uGcf
    1:44:void <init>(react.redstone.RedstoneTracker,java.lang.String,int) -> <init>
    49:50:void run() -> run
react.remote.client.RemoteClient -> JbtJ:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> XuuG
    boolean authenticated -> JAxE
    react.remote.server.ServerInfo info -> XCQG
    react.glang.GMap frems -> URyJ
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> tdpo
    51:51:react.glang.GMap getFrames() -> JsyO
    56:75:int computeFrames() -> PCFk
    80:92:boolean clearToken() -> imtC
    97:110:boolean updateServerInfo() -> SvfG
    115:129:boolean refreshToken() -> VDYy
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> TFQj
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> RkSI
    165:165:boolean isAuthenticated() -> UAWY
    170:170:react.remote.server.ServerInfo getInfo() -> qTJE
react.remote.client.packet.CPacketClearToken -> PmWC:
    java.lang.String token -> XuuG
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> QMiR
    33:34:void fromBytes(react.gnet.streams.ISS) -> QMiR
    38:38:java.lang.String getToken() -> RkSI
    43:44:void setToken(java.lang.String) -> Tgue
react.remote.client.packet.CPacketComputeFrames -> PugX:
    java.lang.String token -> XuuG
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> QMiR
    33:34:void fromBytes(react.gnet.streams.ISS) -> QMiR
    38:38:java.lang.String getToken() -> RkSI
    43:44:void setToken(java.lang.String) -> Tgue
react.remote.client.packet.CPacketGetInfo -> hQXX:
    java.lang.String token -> XuuG
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> QMiR
    33:34:void fromBytes(react.gnet.streams.ISS) -> QMiR
    38:38:java.lang.String getToken() -> RkSI
    43:44:void setToken(java.lang.String) -> Tgue
react.remote.client.packet.CPacketGetToken -> RkLn:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> QMiR
    36:38:void fromBytes(react.gnet.streams.ISS) -> QMiR
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> MBKO:
    java.lang.String token -> XuuG
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> QMiR
    33:34:void fromBytes(react.gnet.streams.ISS) -> QMiR
    38:38:java.lang.String getToken() -> RkSI
    43:44:void setToken(java.lang.String) -> Tgue
react.remote.client.packet.ClientPacket -> jppX:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> QMiR
    void fromBytes(react.gnet.streams.ISS) -> QMiR
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> wTsS
    42:42:java.lang.String getPacketName() -> MuNo
react.remote.client.packet.ClientPacketType -> lLbT:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> PCjF
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> SUdO
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> CNfp
    react.remote.client.packet.ClientPacketType GET_INFO -> MKar
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> BLDn
    react.remote.client.packet.ClientPacketType[] $VALUES -> kKIF
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> anfF:
    react.glang.GMap compute(long,long) -> TFQj
react.remote.server.KnownUser -> Daae:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> awWP:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> QMiR
    38:41:void fromBytes(react.gnet.streams.ISS) -> QMiR
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> qvDp:
    react.glang.GList users -> LbQc
    react.glang.GMap session -> Eelx
    react.glang.GMap lastCompute -> skpq
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> FyGl
    44:45:void registerUser(react.remote.server.KnownUser) -> QMiR
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> VTgk
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> cJNq
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> XJNA
    react.remote.server.IFrameComputer getFrameComputer() -> tuyB
    170:171:void markLastCompute(react.remote.server.KnownUser) -> TFQj
    175:180:long getLastCompute(react.remote.server.KnownUser) -> XJNA
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> QMiR
    190:191:void deleteSession(react.remote.server.KnownUser) -> qtwn
    195:195:java.lang.String createToken() -> fCHM
react.remote.server.ServerInfo -> URQU:
    java.lang.String motd -> tMRQ
    int gameProtocol -> IGey
    java.lang.String gameVersion -> jXeX
    java.lang.String reactVersion -> HDcY
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> nvTS
    int viewDistance -> viewDistance
    int gamePort -> LQQA
    java.lang.String gameAddress -> HUeM
    react.glang.GList remotePlugins -> pHti
    react.glang.GList worlds -> giOY
    react.glang.GList actions -> ETky
    react.glang.GList samplers -> XSrK
    26:26:react.remote.server.ServerInfo empty() -> NESg
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> QMiR
    146:159:void fromBytes(react.gnet.streams.ISS) -> QMiR
    java.lang.String dgetMotd() -> idwt
    int dgetGameProtocol() -> nkvr
    java.lang.String dgetGameVersion() -> mhtX
    java.lang.String dgetReactVersion() -> Usow
    int dgetMaxPlayers() -> Btif
    react.glang.GList dgetConnectedPlayers() -> QFBa
    int dgetViewDistance() -> upjs
    int dgetGamePort() -> oDeq
    java.lang.String dgetGameAddress() -> MRgX
    react.glang.GList dgetRemotePlugins() -> mPCG
    react.glang.GList dgetWorlds() -> nRdf
    react.glang.GList dgetActions() -> MuKU
    react.glang.GList dgetSamplers() -> ckxI
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> RtCi
    199:199:java.lang.String getGameVersion() -> VLkP
    204:204:java.lang.String getReactVersion() -> iecK
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> wCvu
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> IiJG
    229:229:java.lang.String getGameAddress() -> nlbP
    234:234:react.glang.GList getRemotePlugins() -> OQIA
    239:239:react.glang.GList getWorlds() -> EKXt
    244:244:react.glang.GList getActions() -> MAcU
    249:249:react.glang.GList getSamplers() -> tfCE
react.remote.server.ServerInfo$1 -> URQU$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> nRdf
    37:37:int dgetViewDistance() -> upjs
    43:43:react.glang.GList dgetRemotePlugins() -> mPCG
    49:49:java.lang.String dgetReactVersion() -> Usow
    55:55:java.lang.String dgetMotd() -> idwt
    61:61:int dgetMaxPlayers() -> Btif
    67:67:java.lang.String dgetGameVersion() -> mhtX
    73:73:int dgetGameProtocol() -> nkvr
    79:79:int dgetGamePort() -> oDeq
    85:85:java.lang.String dgetGameAddress() -> MRgX
    91:91:react.glang.GList dgetConnectedPlayers() -> QFBa
    97:97:react.glang.GList dgetActions() -> MuKU
    103:103:react.glang.GList dgetSamplers() -> ckxI
react.remote.server.packet.ComputedFrame -> DYRD:
    react.glang.GMap values -> qCkN
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> QMiR
    28:36:void fromBytes(react.gnet.streams.ISS) -> QMiR
    40:40:react.glang.GMap getValues() -> DHVV
    45:46:void setValues(react.glang.GMap) -> TFQj
react.remote.server.packet.SPacketOk -> Mckb:
    boolean ok -> qTlY
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> QMiR
    33:34:void fromBytes(react.gnet.streams.ISS) -> QMiR
    38:38:boolean isOk() -> OagV
    43:44:void setOk(boolean) -> Bkok
react.remote.server.packet.SPacketSendFrames -> LrJr:
    react.glang.GMap frames -> yduG
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> QMiR
    36:44:void fromBytes(react.gnet.streams.ISS) -> QMiR
    48:48:react.glang.GMap getFrames() -> JsyO
    53:54:void setFrames(react.glang.GMap) -> XJNA
react.remote.server.packet.SPacketSendInfo -> EJrW:
    react.remote.server.ServerInfo info -> XCQG
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> QMiR
    33:34:void fromBytes(react.gnet.streams.ISS) -> QMiR
    38:38:react.remote.server.ServerInfo getInfo() -> qTJE
    43:44:void setInfo(react.remote.server.ServerInfo) -> QMiR
react.remote.server.packet.SPacketSendToken -> DYQi:
    java.lang.String token -> XuuG
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> QMiR
    33:34:void fromBytes(react.gnet.streams.ISS) -> QMiR
    38:38:java.lang.String getToken() -> RkSI
    43:44:void setToken(java.lang.String) -> Tgue
react.remote.server.packet.ServerPacket -> VLcf:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> QMiR
    void fromBytes(react.gnet.streams.ISS) -> QMiR
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> wTsS
    42:42:java.lang.String getPacketName() -> MuNo
react.remote.server.packet.ServerPacketType -> jOMM:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> QOaF
    react.remote.server.packet.ServerPacketType SEND_INFO -> yCSF
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> COIV
    react.remote.server.packet.ServerPacketType OK -> dVvk
    react.remote.server.packet.ServerPacketType[] $VALUES -> iUet
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> TNnF:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleAsyncQueue$1 -> TNnF$1:
    react.sampler.SampleAsyncQueue this$0 -> rFmw
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleChunkTime -> pGkv:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleChunkTime$1 -> pGkv$1:
    react.sampler.SampleChunkTime this$0 -> MBtN
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleChunksLoaded -> Jbrn:
    react.graph.IFormatter formatter -> FWha
    17:27:void <init>() -> <init>
    32:38:void construct() -> PmKT
    43:44:void sample() -> eHDq
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleChunksLoaded$1 -> Jbrn$1:
    react.sampler.SampleChunksLoaded this$0 -> XCSj
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> wfHd
react.sampler.SampleChunksLoadedPerSecond -> XuNO:
    react.gmath.Average a -> pcKw
    react.graph.IFormatter formatter -> FWha
    16:29:void <init>() -> <init>
    34:40:void construct() -> PmKT
    45:47:void sample() -> eHDq
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleChunksLoadedPerSecond$1 -> XuNO$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> SVGn
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> wfHd
react.sampler.SampleEntitiesDrops -> WiYe:
    react.graph.IFormatter formatter -> FWha
    17:27:void <init>() -> <init>
    32:38:void construct() -> PmKT
    43:44:void sample() -> eHDq
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleEntitiesDrops$1 -> WiYe$1:
    react.sampler.SampleEntitiesDrops this$0 -> LkFQ
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> wfHd
react.sampler.SampleEntitiesLiving -> VvwI:
    react.graph.IFormatter formatter -> FWha
    17:27:void <init>() -> <init>
    32:38:void construct() -> PmKT
    43:44:void sample() -> eHDq
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleEntitiesLiving$1 -> VvwI$1:
    react.sampler.SampleEntitiesLiving this$0 -> VhBW
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> wfHd
react.sampler.SampleEntitiesTiles -> iCXh:
    react.graph.IFormatter formatter -> FWha
    17:27:void <init>() -> <init>
    32:38:void construct() -> PmKT
    43:44:void sample() -> eHDq
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleEntitiesTiles$1 -> iCXh$1:
    react.sampler.SampleEntitiesTiles this$0 -> LsVd
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> wfHd
react.sampler.SampleEntitiesTotal -> SLKk:
    react.graph.IFormatter formatter -> FWha
    17:27:void <init>() -> <init>
    32:38:void construct() -> PmKT
    43:44:void sample() -> eHDq
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleEntitiesTotal$1 -> SLKk$1:
    react.sampler.SampleEntitiesTotal this$0 -> WsUq
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> wfHd
react.sampler.SampleEntityDroppedTicks -> cIxC:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleEntityDroppedTicks$1 -> cIxC$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> dhYr
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleEntityTime -> wLaT:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleEntityTime$1 -> wLaT$1:
    react.sampler.SampleEntityTime this$0 -> jOwT
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleEntityTimeLock -> UJCt:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleEntityTimeLock$1 -> UJCt$1:
    react.sampler.SampleEntityTimeLock this$0 -> MnIX
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleExplosionTime -> qTDq:
    react.graph.IFormatter formatter -> FWha
    17:27:void <init>() -> <init>
    32:38:void construct() -> PmKT
    43:44:void sample() -> eHDq
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleExplosionTime$1 -> qTDq$1:
    react.sampler.SampleExplosionTime this$0 -> DRMU
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> wfHd
react.sampler.SampleFluidPerSecond -> XuQC:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleFluidPerSecond$1 -> XuQC$1:
    react.sampler.SampleFluidPerSecond this$0 -> mkDJ
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleFluidPerTick -> QMwj:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    46:53:void sample() -> eHDq
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleFluidPerTick$1 -> QMwj$1:
    react.sampler.SampleFluidPerTick this$0 -> HUhU
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleFluidTickTime -> McoG:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleFluidTickTime$1 -> McoG$1:
    react.sampler.SampleFluidTickTime this$0 -> qTku
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleFluidTickUtilization -> IXDC:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    46:53:void sample() -> eHDq
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleFluidTickUtilization$1 -> IXDC$1:
    react.sampler.SampleFluidTickUtilization this$0 -> gWpJ
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleHopperPerSecond -> flwN:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleHopperPerSecond$1 -> flwN$1:
    react.sampler.SampleHopperPerSecond this$0 -> ymeX
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleHopperPerTick -> wLeJ:
    react.graph.IFormatter formatter -> FWha
    18:29:void <init>() -> <init>
    34:40:void construct() -> PmKT
    47:54:void sample() -> eHDq
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleHopperPerTick$1 -> wLeJ$1:
    react.sampler.SampleHopperPerTick this$0 -> ndtQ
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleHopperTickTime -> NxTU:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleHopperTickTime$1 -> NxTU$1:
    react.sampler.SampleHopperTickTime this$0 -> grBk
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleHopperTickUtilization -> yAhw:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    46:53:void sample() -> eHDq
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleHopperTickUtilization$1 -> yAhw$1:
    react.sampler.SampleHopperTickUtilization this$0 -> WbRs
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleMemoryAllocated -> TWaf:
    react.graph.IFormatter formatter -> FWha
    17:27:void <init>() -> <init>
    32:38:void construct() -> PmKT
    43:44:void sample() -> eHDq
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleMemoryAllocated$1 -> TWaf$1:
    react.sampler.SampleMemoryAllocated this$0 -> iwhT
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> wfHd
react.sampler.SampleMemoryAllocationPerSecond -> paat:
    react.graph.IFormatter formatter -> FWha
    17:27:void <init>() -> <init>
    32:38:void construct() -> PmKT
    43:44:void sample() -> eHDq
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleMemoryAllocationPerSecond$1 -> paat$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> gaBE
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> wfHd
react.sampler.SampleMemoryFree -> PvJX:
    react.graph.IFormatter formatter -> FWha
    17:27:void <init>() -> <init>
    32:38:void construct() -> PmKT
    43:44:void sample() -> eHDq
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleMemoryFree$1 -> PvJX$1:
    react.sampler.SampleMemoryFree this$0 -> DcNB
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> wfHd
react.sampler.SampleMemoryMax -> YVPn:
    react.graph.IFormatter formatter -> FWha
    17:27:void <init>() -> <init>
    32:38:void construct() -> PmKT
    43:44:void sample() -> eHDq
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleMemoryMax$1 -> YVPn$1:
    react.sampler.SampleMemoryMax this$0 -> klkq
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> wfHd
react.sampler.SampleMemoryUse -> wMDr:
    react.graph.IFormatter formatter -> FWha
    17:27:void <init>() -> <init>
    32:38:void construct() -> PmKT
    43:44:void sample() -> eHDq
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleMemoryUse$1 -> wMDr$1:
    react.sampler.SampleMemoryUse this$0 -> RceD
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> wfHd
react.sampler.SamplePhysicsTickTime -> sYic:
    react.graph.IFormatter formatter -> FWha
    17:27:void <init>() -> <init>
    32:38:void construct() -> PmKT
    43:44:void sample() -> eHDq
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SamplePhysicsTickTime$1 -> sYic$1:
    react.sampler.SamplePhysicsTickTime this$0 -> xkBO
    1:19:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> wfHd
react.sampler.SampleRedstonePerSecond -> DXtV:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleRedstonePerSecond$1 -> DXtV$1:
    react.sampler.SampleRedstonePerSecond this$0 -> PwQh
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleRedstonePerTick -> UlHO:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    46:53:void sample() -> eHDq
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleRedstonePerTick$1 -> UlHO$1:
    react.sampler.SampleRedstonePerTick this$0 -> MnIE
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleRedstoneTickTime -> nSLQ:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleRedstoneTickTime$1 -> nSLQ$1:
    react.sampler.SampleRedstoneTickTime this$0 -> ixIB
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleRedstoneTickUtilization -> bOiS:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    46:53:void sample() -> eHDq
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleRedstoneTickUtilization$1 -> bOiS$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> ujJA
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleSyncQueue -> JJFD:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleSyncQueue$1 -> JJFD$1:
    react.sampler.SampleSyncQueue this$0 -> PTor
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleTickTime -> EeJG:
    react.graph.IFormatter formatter -> FWha
    react.gmath.Average aa -> EwTf
    17:29:void <init>() -> <init>
    34:40:void construct() -> PmKT
    45:47:void sample() -> eHDq
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleTickTime$1 -> EeJG$1:
    react.sampler.SampleTickTime this$0 -> MCWC
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> wfHd
react.sampler.SampleTickUtilization -> aLfN:
    react.graph.IFormatter formatter -> FWha
    react.gmath.Average aa -> EwTf
    17:29:void <init>() -> <init>
    34:40:void construct() -> PmKT
    45:47:void sample() -> eHDq
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleTickUtilization$1 -> aLfN$1:
    react.sampler.SampleTickUtilization this$0 -> dOId
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> wfHd
react.sampler.SampleTicksPerSecond -> VnjH:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleTicksPerSecond$1 -> VnjH$1:
    react.sampler.SampleTicksPerSecond this$0 -> vmPV
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleTileDroppedTicks -> PKVU:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleTileDroppedTicks$1 -> PKVU$1:
    react.sampler.SampleTileDroppedTicks this$0 -> PMAS
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleTileTime -> AGXs:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleTileTime$1 -> AGXs$1:
    react.sampler.SampleTileTime this$0 -> wgan
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.sampler.SampleTileTimeLock -> afXB:
    react.graph.IFormatter formatter -> FWha
    18:28:void <init>() -> <init>
    33:39:void construct() -> PmKT
    44:45:void sample() -> eHDq
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> AiOo
react.sampler.SampleTileTimeLock$1 -> afXB$1:
    react.sampler.SampleTileTimeLock this$0 -> sBDS
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> wfHd
react.security.checkpoints.SecurityCheckpointAlpha -> CDpL:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> HmtS
    78:148:void doScan(java.lang.Runnable) -> VTgk
    152:181:byte[] readResource(java.io.File,java.lang.String) -> QMiR
    186:217:react.glang.GMap scan(java.io.File) -> VTgk
    33:33:byte[] access$000(java.io.File,java.lang.String) -> VTgk
react.security.checkpoints.SecurityCheckpointAlpha$1 -> CDpL$1:
    java.lang.Runnable val$r -> PvsW
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> CDpL$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> AsWw
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> vAOy:
    java.lang.String ip -> KFAs
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> qCBa:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> qCBa$1:
    java.io.File val$f -> WavI
    react.security.locks.SecurityLockAlpha this$0 -> FWtW
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> xrJm:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> PRuW
react.slate.PhantomSlate -> EBck:
    react.glang.GList lines -> uGhV
    react.glang.GList viewers -> Ulpx
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> qwQw
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> LPNO
    44:45:void set(int,java.lang.String) -> VTgk
    50:51:void setLines(react.glang.GList) -> WWlK
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> lLbT
    91:95:void addViewer(org.bukkit.entity.Player) -> PRuW
    100:102:void removeViewer(org.bukkit.entity.Player) -> UcGD
    107:107:react.glang.GList getViewers() -> LqpM
    113:113:boolean isViewing(org.bukkit.entity.Player) -> cknP
    119:120:void addLine(java.lang.String) -> CUci
    125:126:void clearLines() -> IiHM
react.slate.Slate -> owoy:
    void build() -> lLbT
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> LPNO
    void set(int,java.lang.String) -> VTgk
    void setLines(react.glang.GList) -> WWlK
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> PRuW
    void addLine(java.lang.String) -> CUci
    void clearLines() -> IiHM
    void removeViewer(org.bukkit.entity.Player) -> UcGD
    react.glang.GList getViewers() -> LqpM
    boolean isViewing(org.bukkit.entity.Player) -> cknP
    void update() -> update
react.slate.SlateUtil -> eYRE:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> qukF
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> anke
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> QMiR
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> VTgk
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> TFQj
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> QMiR
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> QMiR
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> VTgk
    186:196:java.lang.String convertJSON(java.lang.String) -> HCRD
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> VTgk
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> QMiR
react.surge.Main -> CEPc:
    react.glang.GList plugins -> tMWJ
    react.glang.GMap pluginInstances -> VMqL
    react.glang.GList controllerSet -> JlrI
    react.glang.GMap anchors -> xPqN
    react.glang.GList classes -> RdFy
    java.lang.reflect.Field nsField -> bkFG
    java.lang.reflect.Field thField -> aNPK
    react.glang.GList tracks -> wMnI
    long nsf -> Sfhu
    42:46:void <clinit>() -> <clinit>
    48:51:void <init>() -> <init>
    57:57:void onControllerRegistry() -> ntrD
    62:81:long getNanoSync() -> AaRE
    86:87:void requestResetNanos() -> NVTU
    91:99:void requestReload() -> mPLe
    105:114:void requestReload(java.lang.Runnable) -> TFQj
    119:133:int getThreadCount() -> getThreadCount
    144:202:void onStart(react.surge.util.Protocol) -> QMiR
    210:252:void onStop() -> KCxr
    258:258:void onPostInit() -> jWcX
    264:264:void onPreInit() -> pYTw
    268:279:void shutDownAmps() -> gFKB
    283:492:void initializeAmps() -> AYAP
    497:538:void doScan() -> ndQJ
    542:564:void scanForPoolDefiners() -> EumY
    568:584:void scanForRawEvents() -> qSfm
    588:604:void scanForDynamicTrack() -> AaSR
    608:629:void scanForAmps() -> AXae
    634:645:void onTick() -> hIAM
react.surge.Main$1 -> CEPc$1:
    1:91:void <init>() -> <init>
    97:97:void run() -> run
react.surge.PluginAmp -> pGoV:
    react.surge.control.AmpedPlugin plugin -> rPAU
    boolean connected -> connected
    int masterTask -> GtiG
    java.lang.Runnable onReload -> pQkI
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> BdUm
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> fCJU
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> QMiR
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> QMiR
    123:124:void stopTask(int) -> eHDq
    128:128:react.surge.control.AmpedPlugin getPlugin() -> WXaA
    133:133:int getMasterTask() -> jiIe
    138:138:java.lang.Runnable getOnReload() -> oDru
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> QMiR
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> PmKT
    158:159:void setOnReload(java.lang.Runnable) -> XJNA
    67:67:void access$0(react.surge.PluginAmp) -> QMiR
react.surge.PluginAmp$1 -> pGoV$1:
    react.surge.PluginAmp this$0 -> XeXO
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> pGoV$2:
    react.surge.PluginAmp this$0 -> XeXO
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> pGoV$3:
    react.surge.PluginAmp this$0 -> XeXO
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> kbrs:
    react.surge.PluginAmp amp -> PfRD
    react.glang.GList tickComponents -> fepN
    react.glang.GList atickComponents -> huHB
    react.surge.sched.TaskManager taskmgr -> ptNX
    react.surge.hotload.HotloadManager hotloadmgr -> txIr
    java.lang.Thread mainThread -> PwTJ
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> QMiR
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> DXhB
    44:44:java.io.File folder() -> NMeq
    49:51:java.io.File getPluginJarFile() -> UkmO
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> XJNA
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> GtFj
    74:74:react.glang.GList getTickComponents() -> sscH
    79:79:react.glang.GList getAsyncTickComponents() -> bXaI
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> QMiR
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> VTgk
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> VTgk
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> lnmr
    126:126:boolean hasAmp() -> MKCv
    131:131:react.surge.PluginAmp getAmp() -> OPid
    136:136:react.surge.sched.TaskManager getTaskManager() -> FySx
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> EePK
react.surge.cluster.Cluster -> opAX:
    react.surge.cluster.ClusterType type -> IjNk
    java.lang.Object t -> BeKm
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> SLTu
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> OHRA:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> ObDf:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> TOPk:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> feFd:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> WqlM:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> xFuH:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> esDo:
    react.surge.cluster.ClusterType INT -> iEFW
    react.surge.cluster.ClusterType BOOLEAN -> xbRn
    react.surge.cluster.ClusterType STRING -> sIqf
    react.surge.cluster.ClusterType STRING_LIST -> whAX
    react.surge.cluster.ClusterType DOUBLE -> gqgO
    react.surge.cluster.ClusterType LONG -> RIwD
    react.surge.cluster.ClusterType[] ENUM$VALUES -> qwUA
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> yBIO:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> oEyb
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> QMiR
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> QMiR
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> aMKl
react.surge.cluster.ConfigurationDataOutput -> cRjt:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> VTgk
react.surge.cluster.DataCluster -> gVgD:
    react.glang.GMap clusters -> mkHi
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> Cohb
    29:33:void fromJson(react.json.JSONObject) -> qtwn
    37:44:react.json.JSONObject toJson() -> BBTH
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> wnmR
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> QMiR
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> hamt
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> jhSs
    194:195:void set(java.lang.String,int) -> qtwn
    199:200:void set(java.lang.String,boolean) -> TFQj
    204:205:void set(java.lang.String,double) -> TFQj
    209:210:void set(java.lang.String,long) -> TFQj
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> QMiR
react.surge.cluster.ICluster -> hjju:
    react.surge.cluster.ClusterType getType() -> SLTu
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> ryJK:
react.surge.cluster.IDataInput -> FNXo:
    react.surge.cluster.DataCluster read(java.io.File) -> TFQj
react.surge.cluster.IDataOutput -> aoLG:
    void write(react.surge.cluster.DataCluster,java.io.File) -> QMiR
react.surge.cluster.Key -> RHmD:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> UcXM:
    int value() -> value
react.surge.cluster.KeyStore -> ivbq:
react.surge.cluster.ReflectedConfigurationException -> LOkt:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> rVhi:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> TFQj
react.surge.cluster.YamlDataOutput -> eYUW:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> QMiR
react.surge.collection.GSound -> WaNT:
    java.lang.String sound -> txNB
    org.bukkit.Sound iSound -> PLbQ
    java.lang.Float volume -> IiqC
    java.lang.Float pitch -> PCqR
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> hrlv
    61:72:void play(org.bukkit.Location) -> qtwn
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> QMiR
    93:93:java.lang.String getSound() -> IykC
    98:99:void setSound(java.lang.String) -> rMhs
    103:103:org.bukkit.Sound getiSound() -> oMcd
    108:109:void setiSound(org.bukkit.Sound) -> QMiR
    113:113:java.lang.Float getVolume() -> XldT
    118:119:void setVolume(java.lang.Float) -> QMiR
    123:123:java.lang.Float getPitch() -> ylav
    128:129:void setPitch(java.lang.Float) -> VTgk
react.surge.control.AmpedPlugin -> CVSE:
    react.glang.GList controllers -> uYLl
    react.gconcurrent.ParallelPoolManager pp -> qncH
    react.surge.server.CoreTickThread ctt -> vKOD
    24:27:void <init>() -> <init>
    void doScan() -> ndQJ
    long getNanoSync() -> AaRE
    int getThreadCount() -> getThreadCount
    39:39:void onLoad() -> onLoad
    46:85:void onEnable() -> onEnable
    90:96:void onDisable() -> onDisable
    101:101:react.glang.GList getControllers() -> ooek
    107:108:void registerController(react.surge.control.IController) -> QMiR
    113:124:void onTick() -> hIAM
    129:129:java.lang.String getTickName() -> UblU
    135:135:react.gconcurrent.ParallelPoolManager getThreadPool() -> WPOq
    141:256:void destroyOldThreads() -> STcv
    void onControllerRegistry() -> ntrD
    void onStart(react.surge.util.Protocol) -> QMiR
    void onStop() -> KCxr
    void onPostInit() -> jWcX
    void onPreInit() -> pYTw
react.surge.control.AmpedPlugin$1 -> CVSE$1:
    react.surge.control.AmpedPlugin this$0 -> KMtQ
    1:56:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    61:61:long getNanoGate() -> HSys
react.surge.control.AmpedPlugin$2 -> CVSE$2:
    react.surge.control.AmpedPlugin this$0 -> KMtQ
    1:154:void <init>(react.surge.control.AmpedPlugin) -> <init>
    159:249:void run() -> run
react.surge.control.Control -> QyOd:
react.surge.control.Controller -> fTHN:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> CgVP:
react.surge.control.Enable -> UJFj:
react.surge.control.IController -> RYlk:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> kswB:
react.surge.control.Plugin -> DivR:
react.surge.control.SurgePlugin -> EeIt:
    void onStart(react.surge.util.Protocol) -> QMiR
    void onStop() -> KCxr
    void onPostInit() -> jWcX
    void onPreInit() -> pYTw
    void onControllerRegistry() -> ntrD
    void registerController(react.surge.control.IController) -> QMiR
    react.glang.GList getControllers() -> ooek
    react.gconcurrent.ParallelPoolManager getThreadPool() -> WPOq
react.surge.hotload.HotloadManager -> PKVd:
    react.glang.GMap filemods -> sthr
    react.glang.GMap filesizes -> tUiP
    react.glang.GMap fileacts -> bIFR
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> QMiR
    35:38:void untrack(java.io.File) -> XJNA
    42:45:void untrackall() -> XSSR
    50:86:void onTick() -> hIAM
    91:91:java.lang.String getTickName() -> UblU
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> QMiR
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> VTgk
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> TFQj
react.surge.hotload.HotloadManager$1 -> PKVd$1:
    react.surge.hotload.HotloadManager this$0 -> GAem
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> pGps:
    boolean init -> QhvA
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> KgeP
    java.lang.Class IChatBaseComponent -> Yplx
    java.lang.Class ChatSerializer -> VEaU
    java.lang.Class PacketPlayOutPlayerInfo -> GuLG
    java.lang.Class PlayerInfoData -> lgdG
    java.lang.Class EnumPlayerInfoAction -> EneI
    java.lang.Class GameProfile -> SUio
    java.lang.Class EnumGamemode -> vuaH
    java.lang.Class TileEntitySkull -> Dkam
    java.lang.Class LoadingCache -> GJWf
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> DPeI:
    react.surge.nms.NMSX bountifulAPI -> Pncw
    boolean useOldMethods -> ecOk
    java.lang.String nmsver -> AjjJ
    java.lang.Object eTimes -> PTrL
    java.lang.Object eTitle -> uilc
    java.lang.Object eSubtitle -> RBFn
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> QMiR
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> bhoC
    75:89:java.lang.Class getCBClass(java.lang.String) -> awMr
    96:104:java.lang.Object serializeChat(java.lang.String) -> AiOo
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> QMiR
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> QMiR
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> FySU
    151:151:java.lang.String craftPackage() -> oERc
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> QMiR
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> QMiR
    197:207:java.lang.Class getNMSClass(java.lang.String) -> gMij
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> QMiR
    279:280:void clearTitle(org.bukkit.entity.Player) -> DOrl
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> VTgk
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> QMiR
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> QMiR
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> tdpo
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> jhSs
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> NMRH
    434:447:int ping(org.bukkit.entity.Player) -> INbF
react.surge.nms.NMSX$1 -> DPeI$1:
    org.bukkit.entity.Player val$player -> oyRx
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> DPeI$2:
    org.bukkit.entity.Player val$player -> oyRx
    java.lang.String val$message -> psrc
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> QMyT:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> PeNI
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> QMiR
    68:82:void clearTitle(org.bukkit.entity.Player) -> DOrl
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> QMiR
react.surge.nms.PacketUtil$V -> QMyT$QMiR:
    react.surge.nms.PacketUtil$V R17 -> JBal
    react.surge.nms.PacketUtil$V R18 -> tEKQ
    react.surge.nms.PacketUtil$V R19 -> FrLB
    react.surge.nms.PacketUtil$V R111 -> yKiS
    react.surge.nms.PacketUtil$V R110 -> yLJS
    react.surge.nms.PacketUtil$V R112 -> UluL
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> OcTM
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> xOhV:
    java.lang.String title -> title
    java.lang.String subTitle -> AkKv
    java.lang.String action -> action
    java.lang.Integer fadeIn -> EoIJ
    java.lang.Integer fadeOut -> gPFx
    java.lang.Integer stayTime -> QhyV
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> ykmN
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> Nogy
    79:80:void setSubTitle(java.lang.String) -> eHDq
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> BmHE
    99:100:void setFadeIn(java.lang.Integer) -> TFQj
    104:104:java.lang.Integer getFadeOut() -> iCaP
    109:110:void setFadeOut(java.lang.Integer) -> XJNA
    114:114:java.lang.Integer getStayTime() -> eYXY
    119:120:void setStayTime(java.lang.Integer) -> qtwn
react.surge.nms.VersionBukkit -> qSeC:
    react.surge.nms.VersionBukkit VU -> fDSP
    react.surge.nms.VersionBukkit V7 -> UCCG
    react.surge.nms.VersionBukkit V8 -> iVMF
    react.surge.nms.VersionBukkit V9 -> TQBB
    react.surge.nms.VersionBukkit V11 -> xrxa
    react.surge.nms.VersionBukkit V111 -> bYhg
    react.surge.nms.VersionBukkit V112 -> cKjT
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> EfWr
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> qdkG
    27:32:boolean uc() -> eiyG
    37:67:react.surge.nms.VersionBukkit get() -> yBOL
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> SmrI:
    void burst(java.lang.Object) -> TFQw
    void setTimeLock(double) -> UcGD
    double getEstimatedTimeUse() -> mrTb
    int flush() -> NpLN
    int flush(react.gbench.Profiler) -> QMiR
    void queue(java.lang.Object) -> PRuW
    void queue(java.util.List) -> TFQj
    void queue(java.lang.Object[]) -> QMiR
react.surge.sched.ICancellable -> OHTN:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> JsyO:
    void onTick() -> hIAM
    java.lang.String getTickName() -> UblU
react.surge.sched.ITask -> PCFk:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> dUwR
    java.lang.String getName() -> getName
    double getComputeTime() -> anqS
    double getTotalComputeTime() -> dojJ
    double getActiveTime() -> ghRh
    boolean hasCompleted() -> LHBq
react.surge.sched.Task -> imtC:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> RBIs
    double computeTime -> Fhys
    double totalComputeTime -> TjSV
    double activeTime -> tDhi
    boolean completed -> completed
    react.gbench.Profiler profiler -> Fqic
    react.gbench.Profiler activeProfiler -> jsAm
    int ticks -> kTAo
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> XJNA
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> dUwR
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> anqS
    150:150:boolean hasCompleted() -> LHBq
    156:156:double getTotalComputeTime() -> dojJ
    162:162:double getActiveTime() -> ghRh
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> TFQj
    15:15:void access$1(react.surge.sched.Task,boolean) -> QMiR
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> XJNA
    14:14:void access$3(react.surge.sched.Task,double) -> QMiR
    12:12:void access$4(react.surge.sched.Task,double) -> VTgk
    14:14:double access$5(react.surge.sched.Task) -> qtwn
    13:13:void access$6(react.surge.sched.Task,double) -> TFQj
    13:13:double access$7(react.surge.sched.Task) -> jhSs
    12:12:double access$8(react.surge.sched.Task) -> JQek
react.surge.sched.Task$1 -> imtC$1:
    react.surge.sched.Task this$0 -> QrJJ
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> imtC$2:
    react.surge.sched.Task this$0 -> QrJJ
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> imtC$3:
    react.surge.sched.Task this$0 -> QrJJ
    int val$total -> RSJJ
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> SvfG:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> RBIs
    double computeTime -> Fhys
    double totalComputeTime -> TjSV
    double activeTime -> tDhi
    boolean completed -> completed
    react.gbench.Profiler profiler -> Fqic
    react.gbench.Profiler activeProfiler -> jsAm
    int ticks -> kTAo
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> XJNA
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> dUwR
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> anqS
    101:101:boolean hasCompleted() -> LHBq
    107:107:double getTotalComputeTime() -> dojJ
    113:113:double getActiveTime() -> ghRh
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> QMiR
    12:12:void access$1(react.surge.sched.TaskLater,double) -> QMiR
    13:13:double access$2(react.surge.sched.TaskLater) -> VTgk
    12:12:double access$3(react.surge.sched.TaskLater) -> TFQj
    13:13:void access$4(react.surge.sched.TaskLater,double) -> VTgk
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> XJNA
    14:14:double access$6(react.surge.sched.TaskLater) -> qtwn
    14:14:void access$7(react.surge.sched.TaskLater,double) -> TFQj
react.surge.sched.TaskLater$1 -> SvfG$1:
    react.surge.sched.TaskLater this$0 -> QqiW
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> VDYy:
    react.glang.GList tasks -> JAgR
    react.glang.GMap taskProfiles -> Traq
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> QMiR
    25:35:void onTick() -> hIAM
    39:40:void putFinishingTask(react.surge.sched.ITask) -> VTgk
    44:53:void putTask(react.surge.sched.ITask) -> TFQj
    58:58:java.lang.String getTickName() -> UblU
    63:63:react.glang.GList getTasks() -> ssed
    68:68:react.glang.GMap getTaskProfiles() -> yKCb
react.surge.sched.TaskProfile -> RkSI:
    double activeTime -> tDhi
    double computeTickTime -> VFDV
    double computeTime -> Fhys
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> ghRh
    23:24:void setActiveTime(double) -> cknP
    28:28:double getComputeTickTime() -> agAa
    33:34:void setComputeTickTime(double) -> hrlv
    38:38:double getComputeTime() -> anqS
    43:44:void setComputeTime(double) -> DOrl
react.surge.server.AsyncTick -> UAWY:
react.surge.server.CPS -> qTJE:
    react.glang.GMap keys -> kmTP
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> PmKT
    46:99:void scan() -> VgAt
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> TFQj
react.surge.server.CoreTickThread -> fCHM:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> NESg:
    long memoryFree -> BLLu
    long memoryUsed -> JvFg
    long memoryMax -> QWvg
    long lastMemoryUsed -> kdai
    long memoryUsedAfterGC -> mbXH
    long allocated -> kmSY
    long collected -> tEIg
    long collections -> Iaab
    long sms -> JeFJ
    long memoryAllocatedPerTick -> DtUb
    long memoryCollectedPerTick -> UmTs
    long memoryFullyAllocatedPerTick -> RuNC
    long mah -> QrMS
    long mahs -> IYTJ
    22:39:void <init>() -> <init>
    void onAllocationSet() -> nuWl
    46:107:void run() -> run
    111:111:long getMemoryFree() -> hjsq
    116:116:long getMemoryUsed() -> getMemoryUsed
    121:121:long getMemoryMax() -> MSWE
    126:126:long getLastMemoryUsed() -> RITT
    131:131:long getMemoryUsedAfterGC() -> sbcX
    136:136:long getAllocated() -> getAllocated
    141:141:long getCollected() -> Vnqv
    146:146:long getCollections() -> afaW
    151:151:long getSms() -> gWPf
    156:156:long getMemoryAllocatedPerTick() -> KxER
    161:161:long getMemoryCollectedPerTick() -> ivhc
    166:166:long getMemoryFullyAllocatedPerTick() -> YpLH
    171:171:long getMah() -> mqrw
    176:176:long getMahs() -> oNGQ
react.surge.server.SuperSampler -> RtCi:
    react.gmath.Average ticksPerSecondL -> keFa
    react.gmath.Average tickTimeL -> OARv
    react.gmath.Average mahL -> vScJ
    double ticksPerSecond -> Lrga
    double ticksPerSecondRaw -> vuej
    double tickTime -> DIcs
    double tickTimeRaw -> TQBw
    boolean running -> running
    boolean frozen -> UCDp
    double tickUtilizationRaw -> grJo
    double tickUtilization -> MKkr
    double leftoverTickTime -> vJpp
    long memoryUse -> iVMs
    long memoryAllocated -> dybY
    long memoryCollected -> UmVl
    long mahs -> IYTJ
    int totalChunks -> dqRN
    int totalEntities -> KEeo
    int totalDrops -> LYkH
    int totalTiles -> IQBb
    int totalLiving -> DtWR
    int chunksLoaded -> CiDK
    int chunksUnloaded -> HVOp
    react.surge.server.WorldMonitor worldMonitor -> dOOD
    react.surge.server.TPSMonitor tpsMonitor -> LYji
    react.surge.server.MemoryMonitor memoryMonitor -> CGAl
    java.lang.StackTraceElement[] lockStack -> mbYf
    react.glang.GMap spikes -> sRSP
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> hIAM
    154:154:java.lang.String getTickName() -> UblU
    159:159:react.gmath.Average getTicksPerSecondL() -> nSTW
    164:164:double getTicksPerSecond() -> TOMm
    169:169:double getTicksPerSecondRaw() -> XRtq
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> jXIj
    184:184:react.gmath.Average getTickTimeL() -> ivgj
    189:189:double getTickTime() -> AOsa
    194:194:double getTickTimeRaw() -> yctD
    199:199:double getTickUtilizationRaw() -> HLUv
    204:204:double getTickUtilization() -> wnoI
    209:209:double getLeftoverTickTime() -> Rjtj
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> mqrh
    219:219:long getMemoryUse() -> jOWo
    224:224:long getMemoryAllocated() -> WicV
    229:229:long getMemoryCollected() -> uNuc
    234:234:react.gmath.Average getMahL() -> nuVP
    239:239:long getMahs() -> oNGQ
    244:244:int getTotalChunks() -> ctva
    249:249:int getTotalEntities() -> IGIa
    254:254:int getTotalDrops() -> WHAl
    259:259:int getTotalTiles() -> jGFq
    264:264:int getTotalLiving() -> bPQS
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> Ywyp
    274:274:int getChunksLoaded() -> wVAX
    279:279:int getChunksUnloaded() -> FhVT
    284:285:void setTicksPerSecondL(react.gmath.Average) -> QMiR
    289:290:void setTickTimeL(react.gmath.Average) -> VTgk
    294:295:void setMahL(react.gmath.Average) -> TFQj
    299:300:void setTicksPerSecond(double) -> nIjv
    304:305:void setTicksPerSecondRaw(double) -> INbF
    309:310:void setTickTime(double) -> ykmN
    314:315:void setTickTimeRaw(double) -> ERuu
    319:320:void setRunning(boolean) -> wfHd
    324:325:void setTickUtilizationRaw(double) -> tvPT
    329:330:void setTickUtilization(double) -> wTdl
    334:335:void setLeftoverTickTime(double) -> WWkH
    339:340:void setMemoryUse(long) -> UcGD
    344:345:void setMemoryAllocated(long) -> cknP
    349:350:void setMemoryCollected(long) -> hrlv
    354:355:void setMahs(long) -> DOrl
    359:360:void setTotalChunks(int) -> tCMu
    364:365:void setTotalEntities(int) -> HTRG
    369:370:void setTotalDrops(int) -> oMPb
    374:375:void setTotalTiles(int) -> XcaC
    379:380:void setTotalLiving(int) -> NLqU
    384:385:void setChunksLoaded(int) -> lLWk
    389:390:void setChunksUnloaded(int) -> iusB
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> QMiR
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> QMiR
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> QMiR
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> GcIP
    419:419:react.glang.GMap getSpikes() -> ydEq
    31:31:void access$0(react.surge.server.SuperSampler,int) -> QMiR
    33:33:void access$1(react.surge.server.SuperSampler,int) -> VTgk
    34:34:void access$2(react.surge.server.SuperSampler,int) -> TFQj
    32:32:void access$3(react.surge.server.SuperSampler,int) -> XJNA
    35:35:void access$4(react.surge.server.SuperSampler,int) -> qtwn
    36:36:void access$5(react.surge.server.SuperSampler,int) -> jhSs
    37:37:void access$6(react.surge.server.SuperSampler,int) -> JQek
    19:19:void access$7(react.surge.server.SuperSampler,double) -> QMiR
    21:21:void access$8(react.surge.server.SuperSampler,double) -> VTgk
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> QMiR
    19:19:double access$10(react.surge.server.SuperSampler) -> VTgk
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> TFQj
    21:21:double access$12(react.surge.server.SuperSampler) -> XJNA
    18:18:void access$13(react.surge.server.SuperSampler,double) -> TFQj
    20:20:void access$14(react.surge.server.SuperSampler,double) -> XJNA
    24:24:void access$15(react.surge.server.SuperSampler,double) -> qtwn
    20:20:double access$16(react.surge.server.SuperSampler) -> qtwn
    25:25:void access$17(react.surge.server.SuperSampler,double) -> jhSs
    25:25:double access$18(react.surge.server.SuperSampler) -> jhSs
    26:26:void access$19(react.surge.server.SuperSampler,double) -> JQek
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> QMiR
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> JQek
    27:27:void access$22(react.surge.server.SuperSampler,long) -> QMiR
    28:28:void access$23(react.surge.server.SuperSampler,long) -> VTgk
    29:29:void access$24(react.surge.server.SuperSampler,long) -> TFQj
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> NMRH
    30:30:void access$26(react.surge.server.SuperSampler,long) -> XJNA
react.surge.server.SuperSampler$1 -> RtCi$1:
    react.surge.server.SuperSampler this$0 -> lpWy
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> QMiR
react.surge.server.SuperSampler$2 -> RtCi$2:
    react.surge.server.SuperSampler this$0 -> lpWy
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> LrWw
    106:107:void onSpike() -> YNJb
react.surge.server.SuperSampler$3 -> RtCi$3:
    react.surge.server.SuperSampler this$0 -> lpWy
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> nuWl
react.surge.server.TPSMonitor -> VLkP:
    double tickTimeMS -> AILJ
    double rawTicksPerSecond -> IGpl
    react.gbench.Profiler tickProfiler -> wNTi
    react.gbench.Profiler tickTimeProfiler -> Dbtr
    boolean ticked -> TacP
    java.lang.Thread$State lastState -> huNP
    double actualTickTimeMS -> Xmqe
    double ltt -> Socn
    long lastTick -> CggJ
    boolean frozen -> UCDp
    java.lang.StackTraceElement[] lockedStack -> iVPs
    double lmsx -> htpW
    23:40:void <init>() -> <init>
    void onTicked() -> LrWw
    void onSpike() -> YNJb
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> QMiR
    160:160:double getTickTimeMS() -> HKwx
    165:165:double getRawTicksPerSecond() -> ECPX
    170:170:react.gbench.Profiler getTickProfiler() -> XSXK
    175:175:boolean isTicked() -> rhSu
    180:181:void markTick() -> ydWX
    185:185:react.gbench.Profiler getTickTimeProfiler() -> DsRX
    190:190:java.lang.Thread$State getLastState() -> gqEb
    195:195:double getActualTickTimeMS() -> ePlW
    200:200:double getLtt() -> DapM
    205:205:long getLastTick() -> gyCn
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> ebOE
react.surge.server.WorldMonitor -> iecK:
    boolean chunksChanged -> dGBL
    boolean dropChanged -> kdgd
    boolean tileChanged -> KVje
    boolean livingChanged -> ifqh
    boolean totalChanged -> sAkX
    boolean updated -> UujP
    int totalChunks -> dqRN
    int totalDrops -> LYkH
    int totalTiles -> IQBb
    int totalLiving -> DtWR
    int totalEntities -> KEeo
    int chunksLoaded -> CiDK
    int chunksUnloaded -> HVOp
    long ms -> EumY
    24:43:void <init>() -> <init>
    48:73:void run() -> run
    void updated(int,int,int,int,int,int,int) -> QMiR
    80:85:void on(org.bukkit.event.world.ChunkLoadEvent) -> VTgk
    90:95:void on(org.bukkit.event.world.ChunkUnloadEvent) -> QMiR
    100:101:void on(org.bukkit.event.entity.EntitySpawnEvent) -> QMiR
    106:107:void on(org.bukkit.event.entity.EntityDeathEvent) -> QMiR
    112:113:void on(org.bukkit.event.player.PlayerDropItemEvent) -> QMiR
    118:119:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> QMiR
    124:125:void on(org.bukkit.event.block.BlockPlaceEvent) -> QMiR
    130:131:void on(org.bukkit.event.block.BlockBreakEvent) -> QMiR
    135:136:void doUpdate() -> prnU
    140:191:void sample() -> eHDq
    195:201:void sampleTotalCount() -> TFjr
    205:211:void sampleLivingCount() -> oEWo
    215:243:void sampleTileCount() -> ETSB
    247:253:void sampleDropCount() -> yAsR
    257:263:void sampleChunkCount() -> ComB
react.surge.text.PhantomSpinner -> wCvu:
    react.surge.text.ProgressSpinner s -> uYSQ
    react.surge.text.ProgressSpinner c -> GcqI
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> IiJG:
    java.lang.String[] chars -> MKob
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> kuhb
    react.surge.text.ProgressSpinner NETWORK -> lEfq
    react.surge.text.ProgressSpinner CIRCLES -> EoMY
    react.surge.text.ProgressSpinner RANDOMS -> gqmJ
    react.surge.text.ProgressSpinner MERGERS -> TYUo
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> sbeM
    65:65:int getIndex() -> getIndex
react.surge.util.Amounts -> nlbP:
    react.surge.util.Amounts SINGLE -> ECwr
    react.surge.util.Amounts DUAL -> tfqI
    react.surge.util.Amounts TRI -> TbGT
    react.surge.util.Amounts QUAD -> TGrC
    react.surge.util.Amounts HEX -> DAVU
    react.surge.util.Amounts OCTA -> bPyv
    int a -> a
    react.surge.util.Amounts[] ENUM$VALUES -> NNqT
    5:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:23:int a() -> a
    29:37:java.lang.String to(int) -> OYFk
    1:1:react.surge.util.Amounts[] values() -> values
    1:1:react.surge.util.Amounts valueOf(java.lang.String) -> valueOf
react.surge.util.Anchor -> OQIA:
    int value() -> value
react.surge.util.Area -> EKXt:
    org.bukkit.Location location -> TbEW
    java.lang.Double radius -> Jdgq
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> QMiR
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> RITa
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> jhSs
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> JQek
    109:109:boolean isWithin(org.bukkit.Location) -> NMRH
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> XJNA
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> QMiR
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> ydVf
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> mHAw
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> NVBo
    257:257:java.lang.Double getRadius() -> KMQT
    268:269:void setRadius(java.lang.Double) -> TFQj
    278:283:org.bukkit.Location random() -> tvjD
react.surge.util.Axis -> tfCE:
    react.surge.util.Axis X -> TYTO
    react.surge.util.Axis Y -> hcnM
    react.surge.util.Axis Z -> DkhO
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> LYll
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> hREV
    29:29:org.bukkit.util.Vector negative() -> SDGa
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> DHVV:
    react.surge.util.BlastResistance BARRIER -> pkee
    react.surge.util.BlastResistance BEDROCK -> vlvX
    react.surge.util.BlastResistance COMMAND -> ohbO
    react.surge.util.BlastResistance ENDER_PORTAL -> HEPp
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> kKTa
    react.surge.util.BlastResistance ANVIL -> QrOF
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> RdPV
    react.surge.util.BlastResistance OBSIDIAN -> NORl
    react.surge.util.BlastResistance ENDER_CHEST -> KMxr
    react.surge.util.BlastResistance WATER -> nLQF
    react.surge.util.BlastResistance LAVA -> LHnU
    react.surge.util.BlastResistance STATIONARY_WATER -> lFKG
    react.surge.util.BlastResistance DRAGON_EGG -> DkkJ
    react.surge.util.BlastResistance ENDER_STONE -> SNCv
    react.surge.util.BlastResistance COAL_BLOCK -> qLhk
    react.surge.util.BlastResistance DIAMOND_BLOCK -> eQvJ
    react.surge.util.BlastResistance EMERALD_BLOCK -> jaeo
    react.surge.util.BlastResistance GOLD_BLOCK -> GmDp
    react.surge.util.BlastResistance IRON_BLOCK -> SERu
    react.surge.util.BlastResistance REDSTONE_BLOCK -> bYoP
    react.surge.util.BlastResistance BRICK -> VhNl
    react.surge.util.BlastResistance BRICK_STAIRS -> jYVP
    react.surge.util.BlastResistance HARD_CLAY -> sBMf
    react.surge.util.BlastResistance STONE -> ORVx
    react.surge.util.BlastResistance SMOOTH_BRICK -> iocp
    react.surge.util.BlastResistance SMOOTH_STAIRS -> oWcR
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> uHRq
    react.surge.util.BlastResistance STONE_SLAB2 -> PCxE
    react.surge.util.BlastResistance IRON_DOOR -> tEOn
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> YGCW
    react.surge.util.BlastResistance IRON_TRAPDOOR -> XvdL
    react.surge.util.BlastResistance MOB_SPAWNER -> GAoL
    react.surge.util.BlastResistance WEB -> HMcW
    react.surge.util.BlastResistance DISPENSER -> jady
    react.surge.util.BlastResistance DROPPER -> YFbk
    react.surge.util.BlastResistance FURNACE -> AkSI
    react.surge.util.BlastResistance BURNING_FURNACE -> UBjC
    react.surge.util.BlastResistance BEACON -> oOUe
    react.surge.util.BlastResistance COAL_ORE -> IrlD
    react.surge.util.BlastResistance COCOA -> BUEl
    react.surge.util.BlastResistance DIAMOND_ORE -> diHl
    react.surge.util.BlastResistance EMERALD_ORE -> wFKl
    react.surge.util.BlastResistance FENCE -> YqYa
    react.surge.util.BlastResistance FENCE_GATE -> nUCy
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> mkRW
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> huUI
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> kSjB
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> ixWk
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> tESC
    react.surge.util.BlastResistance ACACIA_FENCE -> PMNN
    react.surge.util.BlastResistance BIRCH_FENCE -> kvMj
    react.surge.util.BlastResistance DARK_OAK_FENCE -> uYXA
    react.surge.util.BlastResistance SPRUCE_FENCE -> tftm
    react.surge.util.BlastResistance JUNGLE_FENCE -> qDYp
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> lxpP
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> QqsK
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> XUCo
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> BnXi
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> qLjE
    react.surge.util.BlastResistance QUARTZ_STAIRS -> cnTr
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> Mvfi
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> NiHy
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> AkUa
    react.surge.util.BlastResistance WOOD_STAIRS -> keLJ
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> diGc
    react.surge.util.BlastResistance ACACIA_DOOR -> xtBO
    react.surge.util.BlastResistance BIRCH_DOOR -> xINC
    react.surge.util.BlastResistance DARK_OAK_DOOR -> dqXf
    react.surge.util.BlastResistance SPRUCE_DOOR -> dXGL
    react.surge.util.BlastResistance JUNGLE_DOOR -> cwGI
    react.surge.util.BlastResistance GOLD_ORE -> grPn
    react.surge.util.BlastResistance HOPPER -> XnVU
    react.surge.util.BlastResistance IRON_ORE -> KyRa
    react.surge.util.BlastResistance LAPIS_BLOCK -> aqAD
    react.surge.util.BlastResistance LAPIS_ORE -> vCHD
    react.surge.util.BlastResistance QUARTZ_ORE -> Nhjt
    react.surge.util.BlastResistance REDSTONE_ORE -> Nhjw
    react.surge.util.BlastResistance TRAP_DOOR -> FrUk
    react.surge.util.BlastResistance WOOD -> Fqtp
    react.surge.util.BlastResistance CHEST -> uiyu
    react.surge.util.BlastResistance TRAPPED_CHEST -> dWhY
    react.surge.util.BlastResistance WORKBENCH -> dNvo
    react.surge.util.BlastResistance CAULDRON -> jPiD
    react.surge.util.BlastResistance LOG -> KqEQ
    react.surge.util.BlastResistance LOG_2 -> KqDo
    react.surge.util.BlastResistance BOOKSHELF -> KqEP
    react.surge.util.BlastResistance BANNER -> hSSl
    react.surge.util.BlastResistance STANDING_BANNER -> LsgR
    react.surge.util.BlastResistance WALL_BANNER -> FGbX
    react.surge.util.BlastResistance JACK_O_LANTERN -> bsej
    react.surge.util.BlastResistance MELON_BLOCK -> ywHL
    react.surge.util.BlastResistance SKULL -> wqBU
    react.surge.util.BlastResistance PUMPKIN -> gOpT
    react.surge.util.BlastResistance SIGN -> EVBP
    react.surge.util.BlastResistance SIGN_POST -> QHBe
    react.surge.util.BlastResistance WALL_SIGN -> iogq
    react.surge.util.BlastResistance QUARTZ_BLOCK -> YXIU
    react.surge.util.BlastResistance NOTE_BLOCK -> HUvp
    react.surge.util.BlastResistance RED_SANDSTONE -> gjCU
    react.surge.util.BlastResistance SANDSTONE -> rOoD
    react.surge.util.BlastResistance WOOL -> IGyE
    react.surge.util.BlastResistance MONSTER_EGG -> DJLN
    react.surge.util.BlastResistance RAILS -> aqBV
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> dqYp
    react.surge.util.BlastResistance DETECTOR_RAIL -> oFfG
    react.surge.util.BlastResistance POWERED_RAIL -> qxAT
    react.surge.util.BlastResistance CLAY -> AHsY
    react.surge.util.BlastResistance DIRT -> BmyY
    react.surge.util.BlastResistance GRASS -> yCbE
    react.surge.util.BlastResistance GRAVEL -> BCen
    react.surge.util.BlastResistance SPONGE -> PMOE
    react.surge.util.BlastResistance BREWING_STAND -> FGaW
    react.surge.util.BlastResistance STONE_BUTTON -> bRCH
    react.surge.util.BlastResistance WOOD_BUTTON -> FPSE
    react.surge.util.BlastResistance CAKE_BLOCK -> ahPy
    react.surge.util.BlastResistance ICE -> wElF
    react.surge.util.BlastResistance PACKED_ICE -> mQaJ
    react.surge.util.BlastResistance LEVER -> DdBB
    react.surge.util.BlastResistance MYCEL -> jrmu
    react.surge.util.BlastResistance PISTON_BASE -> yfIW
    react.surge.util.BlastResistance PISTON_EXTENSION -> wFPT
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> qVAN
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> gOrb
    react.surge.util.BlastResistance GOLD_PLATE -> htxi
    react.surge.util.BlastResistance IRON_PLATE -> kCLu
    react.surge.util.BlastResistance STONE_PLATE -> SomH
    react.surge.util.BlastResistance WOOD_PLATE -> xkVK
    react.surge.util.BlastResistance SAND -> veOg
    react.surge.util.BlastResistance SOUL_SAND -> yTfU
    react.surge.util.BlastResistance CACTUS -> nehX
    react.surge.util.BlastResistance LADDER -> SpMc
    react.surge.util.BlastResistance NETHERRACK -> tpJp
    react.surge.util.BlastResistance GLASS -> KEql
    react.surge.util.BlastResistance THIN_GLASS -> Pfck
    react.surge.util.BlastResistance STAINED_GLASS -> bYuO
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> HpOF
    react.surge.util.BlastResistance GLOWSTONE -> mITD
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> Gtxl
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> SMgn
    react.surge.util.BlastResistance SEA_LANTERN -> XLVc
    react.surge.util.BlastResistance BED_BLOCK -> GKGK
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> yefn
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> QjEv
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> nDEn
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> MDGX
    react.surge.util.BlastResistance LEAVES -> xcEO
    react.surge.util.BlastResistance LEAVES_2 -> MThJ
    react.surge.util.BlastResistance SNOW -> VqDo
    int br -> hmHb
    react.surge.util.BlastResistance[] ENUM$VALUES -> qLlu
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> BmKo
    175:190:int get(org.bukkit.Material) -> QMiR
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> OagV:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> JQek
react.surge.util.C -> HmtS:
    react.surge.util.C BLACK -> vdnC
    react.surge.util.C DARK_BLUE -> gXat
    react.surge.util.C DARK_GREEN -> btGn
    react.surge.util.C DARK_AQUA -> hJcn
    react.surge.util.C DARK_RED -> Trpw
    react.surge.util.C DARK_PURPLE -> WAFg
    react.surge.util.C GOLD -> FGeh
    react.surge.util.C GRAY -> YiPN
    react.surge.util.C DARK_GRAY -> hAuv
    react.surge.util.C BLUE -> hJhA
    react.surge.util.C GREEN -> sAue
    react.surge.util.C AQUA -> KyYY
    react.surge.util.C RED -> Qqxm
    react.surge.util.C LIGHT_PURPLE -> LIXU
    react.surge.util.C YELLOW -> rOsd
    react.surge.util.C WHITE -> GRwm
    react.surge.util.C MAGIC -> ubMw
    react.surge.util.C BOLD -> FPUk
    react.surge.util.C STRIKETHROUGH -> FjIH
    react.surge.util.C UNDERLINE -> hJfW
    react.surge.util.C ITALIC -> TbPE
    react.surge.util.C RESET -> oiNG
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> IjaJ
    char code -> LsjL
    boolean isFormat -> ekpL
    java.lang.String toString -> QihB
    java.util.Map BY_ID -> LAGI
    java.util.Map BY_CHAR -> LcJD
    java.util.Map dyeChatMap -> OkrI
    java.util.Map chatHexMap -> raUT
    java.util.Map dyeHexMap -> hmIp
    int[] $SWITCH_TABLE$surge$util$C -> Pfdg
    react.surge.util.C[] ENUM$VALUES -> Wsia
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> QFRS
    378:378:java.lang.String hex() -> cdXQ
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> NMRH
    434:442:react.surge.util.C getByChar(java.lang.String) -> tCMu
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> VTgk
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> QMiR
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> VTgk
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> TFQj
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> HTRG
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> oMPb
    560:578:java.lang.String generateColorTable() -> IXLs
    588:588:org.bukkit.ChatColor chatColor() -> hACO
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> NVBo
    632:679:byte getItemMeta() -> RQfF
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> mPQv
react.surge.util.C$1 -> HmtS$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> HmtS$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> HmtS$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> HmtS$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> HmtS$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> HmtS$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> HmtS$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> HmtS$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> HmtS$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> HmtS$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> HmtS$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> HmtS$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> HmtS$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> HmtS$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> HmtS$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> HmtS$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> HmtS$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> HmtS$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> HmtS$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> HmtS$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> HmtS$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> HmtS$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> LPNO:
    double number -> oXKo
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> jWPj
    23:25:react.surge.util.CDou add(double) -> wwHi
    30:32:react.surge.util.CDou sub(double) -> uFNj
    37:37:double get() -> get
    42:48:void circ() -> UuAt
react.surge.util.CMD -> LqpM:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> VEtm
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> VgCg
    51:53:void execute(org.bukkit.command.CommandSender) -> TFQj
    60:77:void execute() -> execute
react.surge.util.CNum -> IiHM:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> ogDD
    23:25:react.surge.util.CNum add(int) -> ESXv
    30:32:react.surge.util.CNum sub(int) -> CVFF
    37:37:int get() -> get
    42:48:void circ() -> UuAt
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> yknp
react.surge.util.Chunks -> qukF:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> wKtj
    33:40:react.glang.GList getLoadedChunks() -> xOpb
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> VTgk
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> QMiR
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> QMiR
    98:98:boolean unload(org.bukkit.Chunk) -> WWlK
    114:124:int unload(react.glang.GList,boolean,boolean) -> QMiR
    138:138:int unload(react.glang.GList,boolean) -> QMiR
    150:150:int unload(react.glang.GList) -> OjHJ
    166:166:boolean isLoaded(java.lang.String,int,int) -> QMiR
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> TFQj
    201:205:void load(react.glang.GList) -> Bkok
react.surge.util.Cuboid -> anke:
    java.lang.String worldName -> KWXN
    int x1 -> gGer
    int y1 -> VWWa
    int z1 -> rYHW
    int x2 -> dGMs
    int y2 -> kLBw
    int z2 -> xcIr
    int[] $SWITCH_TABLE$surge$util$Axis -> IrtW
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> edDE
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> QMiR
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> TFQj
    93:93:boolean hasPlayers() -> WOrq
    98:110:react.glang.GList getPlayers() -> fKMp
    115:166:react.glang.GList getEntities() -> HCiq
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> kYvG
    287:287:org.bukkit.Location getLowerNE() -> gNdR
    298:298:org.bukkit.Location getUpperSW() -> klSM
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> lwes
    348:348:int getSizeY() -> ySXQ
    358:358:int getSizeZ() -> AYIC
    368:368:int getLowerX() -> KoXB
    378:378:int getLowerY() -> FVvU
    388:388:int getLowerZ() -> JRbL
    398:398:int getUpperX() -> brYf
    408:408:int getUpperY() -> dNLV
    418:418:int getUpperZ() -> Lqyr
    428:438:org.bukkit.block.Block[] corners() -> mqwb
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> QMiR
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> VTgk
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> TFQj
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> XJNA
    546:546:boolean contains(int,int,int) -> qtwn
    558:558:boolean contains(org.bukkit.block.Block) -> NMRH
    570:570:boolean contains(org.bukkit.Location) -> YnsY
    580:580:int volume() -> ssiQ
    591:601:byte averageLightLevel() -> Qxvt
    612:612:react.surge.util.Cuboid contract() -> Wigd
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> QMiR
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> VTgk
    708:715:boolean containsOnly(org.bukkit.Material) -> VTgk
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> QMiR
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> jhSs
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> QMiR
    786:800:java.util.List getChunks() -> lUbQ
    815:819:void fill(int,byte) -> QMiR
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> YDyP
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> ymJK
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> xjFk
react.surge.util.Cuboid$1 -> anke$1:
    react.surge.util.Cuboid this$0 -> oFkw
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> NVBo
    1:1:java.lang.Object onAdapt(java.lang.Object) -> JQek
react.surge.util.Cuboid$CuboidDirection -> anke$QMiR:
    react.surge.util.Cuboid$CuboidDirection North -> UmgH
    react.surge.util.Cuboid$CuboidDirection East -> PMVO
    react.surge.util.Cuboid$CuboidDirection South -> sKHq
    react.surge.util.Cuboid$CuboidDirection West -> qfeR
    react.surge.util.Cuboid$CuboidDirection Up -> EwjN
    react.surge.util.Cuboid$CuboidDirection Down -> yKxf
    react.surge.util.Cuboid$CuboidDirection Horizontal -> DSEN
    react.surge.util.Cuboid$CuboidDirection Vertical -> Sxay
    react.surge.util.Cuboid$CuboidDirection Both -> BClj
    react.surge.util.Cuboid$CuboidDirection Unknown -> XTjw
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> edDE
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> Kxxl
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> SCiO
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> xjFk
react.surge.util.Cuboid$CuboidIterator -> anke$VTgk:
    org.bukkit.World w -> JTTJ
    int baseX -> Udso
    int baseY -> CiQn
    int baseZ -> WHvs
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> rYFq
    int sizeY -> Beod
    int sizeZ -> fwfn
    react.surge.util.Cuboid this$0 -> oFkw
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> ntrD:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> AaRE:
    react.glang.GList buffer -> kvVI
    boolean dbg -> ekqn
    int kf -> xsid
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> XJNA
    41:49:void l(java.lang.Object,java.lang.String) -> VTgk
    53:54:void s(java.lang.Object,java.lang.String) -> TFQj
    58:69:void cdb() -> XlkO
    73:79:void v(java.lang.Object,java.lang.String) -> XJNA
    83:84:void w(java.lang.Object,java.lang.String) -> qtwn
    88:89:void f(java.lang.Object,java.lang.String) -> jhSs
    93:106:void l(java.lang.String) -> XcaC
    110:117:void s(java.lang.String) -> NLqU
    121:135:void v(java.lang.String) -> lLWk
    139:146:void w(java.lang.String) -> iusB
    150:157:void f(java.lang.String) -> OYFk
react.surge.util.DMSRequire -> NVTU:
    react.surge.util.DMSRequirement value() -> nBUa
react.surge.util.DMSRequirement -> mPLe:
    react.surge.util.DMSRequirement SQL -> lWTo
    react.surge.util.DMSRequirement[] ENUM$VALUES -> iMjk
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> KCxr:
    react.surge.util.Depend VAULT -> PVFR
    react.surge.util.Depend FAWE -> oyot
    react.surge.util.Depend WORLDEDIT -> rXfH
    react.surge.util.Depend PROTOLIB -> ukAS
    react.surge.util.Depend CITIZENS -> aFUB
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> KVyO
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> jWcX:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> GtLP
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> pYTw:
    react.surge.util.DimensionFace X -> Asnu
    react.surge.util.DimensionFace Y -> UTVW
    react.surge.util.DimensionFace Z -> yTlb
    react.surge.util.DimensionFace[] ENUM$VALUES -> TPrd
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> gFKB:
    react.surge.util.Direction U -> GmPr
    react.surge.util.Direction D -> OuHl
    react.surge.util.Direction N -> kTUM
    react.surge.util.Direction S -> XUPM
    react.surge.util.Direction E -> CXRi
    react.surge.util.Direction W -> oWon
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> AcNU
    int[] $SWITCH_TABLE$surge$util$Direction -> PDgO
    react.surge.util.Direction[] ENUM$VALUES -> VplE
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> fCOl
    61:61:int x() -> mifO
    66:66:int y() -> RYxB
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> Edsm
    81:81:react.glang.GList news() -> HDKG
    86:86:react.glang.GList udnews() -> Aqyn
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> ERuu
    115:147:react.surge.util.Direction fromByte(byte) -> YnsY
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> EnFW
react.surge.util.DynamicConfiguration -> AYAP:
react.surge.util.DynamicTracker -> ndQJ:
react.surge.util.Embedded -> EumY:
    react.glang.GList get() -> proU
    void add(java.lang.Object) -> add
react.surge.util.FU -> qSfm:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> QMiR
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> VTgk
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> qtwn
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> jhSs
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> AaSR:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> ogDD
react.surge.util.Health -> AXae:
    double hp -> gikV
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> dNJp
    41:41:double getHearts() -> gyVr
    51:51:double getHalfHearts() -> JSBV
    61:61:int getFlatHalfHearts() -> cRvx
react.surge.util.IO -> BdUm:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> fCJU:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> QMiR
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> QMiR
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> QMiR
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> QMiR
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> QMiR
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> VTgk
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> TFQj
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> XJNA
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> QMiR
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> QMiR
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> QMiR
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> QMiR
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> qtwn
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> jhSs
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> JQek
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> NMRH
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> NVBo
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> QMiR
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> YnsY
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> nIjv
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> QMiR
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> QMiR
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> VTgk
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> QMiR
react.surge.util.MSound -> WXaA:
    react.surge.util.MSound AMBIENCE_CAVE -> Fiki
    react.surge.util.MSound AMBIENCE_RAIN -> vSsM
    react.surge.util.MSound AMBIENCE_THUNDER -> dGOX
    react.surge.util.MSound ANVIL_BREAK -> gPXb
    react.surge.util.MSound ANVIL_LAND -> nDKe
    react.surge.util.MSound ANVIL_USE -> VhYs
    react.surge.util.MSound ARROW_HIT -> GmPO
    react.surge.util.MSound BURP -> TYbj
    react.surge.util.MSound CHEST_CLOSE -> NWqW
    react.surge.util.MSound CHEST_OPEN -> EUgc
    react.surge.util.MSound CLICK -> qoXS
    react.surge.util.MSound DOOR_CLOSE -> WtNW
    react.surge.util.MSound DOOR_OPEN -> jjbe
    react.surge.util.MSound DRINK -> PEFg
    react.surge.util.MSound EAT -> bHxj
    react.surge.util.MSound EXPLODE -> fnwU
    react.surge.util.MSound FALL_BIG -> hKKO
    react.surge.util.MSound FALL_SMALL -> Pnxx
    react.surge.util.MSound FIRE -> UKdh
    react.surge.util.MSound FIRE_IGNITE -> iVbF
    react.surge.util.MSound FIZZ -> YGSO
    react.surge.util.MSound FUSE -> tWBO
    react.surge.util.MSound GLASS -> EUkB
    react.surge.util.MSound HURT_FLESH -> RKOe
    react.surge.util.MSound ITEM_BREAK -> wNho
    react.surge.util.MSound ITEM_PICKUP -> qVIb
    react.surge.util.MSound LAVA -> dFqQ
    react.surge.util.MSound LAVA_POP -> gHKM
    react.surge.util.MSound LEVEL_UP -> GdbQ
    react.surge.util.MSound MINECART_BASE -> tWAv
    react.surge.util.MSound MINECART_INSIDE -> FHLx
    react.surge.util.MSound NOTE_BASS -> rilY
    react.surge.util.MSound NOTE_PIANO -> Abnt
    react.surge.util.MSound NOTE_BASS_DRUM -> nfRE
    react.surge.util.MSound NOTE_STICKS -> iVaE
    react.surge.util.MSound NOTE_BASS_GUITAR -> mtNy
    react.surge.util.MSound NOTE_SNARE_DRUM -> YiTl
    react.surge.util.MSound NOTE_PLING -> knIW
    react.surge.util.MSound ORB_PICKUP -> oFoh
    react.surge.util.MSound PISTON_EXTEND -> tMnf
    react.surge.util.MSound PISTON_RETRACT -> PEHT
    react.surge.util.MSound PORTAL -> IrwS
    react.surge.util.MSound PORTAL_TRAVEL -> MTov
    react.surge.util.MSound PORTAL_TRIGGER -> kmhd
    react.surge.util.MSound SHOOT_ARROW -> nnbA
    react.surge.util.MSound SPLASH -> THcW
    react.surge.util.MSound SPLASH2 -> mcLy
    react.surge.util.MSound STEP_GRASS -> BwVP
    react.surge.util.MSound STEP_GRAVEL -> YaEO
    react.surge.util.MSound STEP_LADDER -> RdaG
    react.surge.util.MSound STEP_SAND -> mtOT
    react.surge.util.MSound STEP_SNOW -> NWvQ
    react.surge.util.MSound STEP_STONE -> tWDW
    react.surge.util.MSound STEP_WOOD -> plYq
    react.surge.util.MSound STEP_WOOL -> iyGg
    react.surge.util.MSound SWIM -> jYfj
    react.surge.util.MSound WATER -> WbqP
    react.surge.util.MSound WOOD_CLICK -> XetG
    react.surge.util.MSound BAT_DEATH -> GTDB
    react.surge.util.MSound BAT_HURT -> CGVC
    react.surge.util.MSound BAT_IDLE -> iNSl
    react.surge.util.MSound BAT_LOOP -> jYfX
    react.surge.util.MSound BAT_TAKEOFF -> YqiK
    react.surge.util.MSound BLAZE_BREATH -> XfUa
    react.surge.util.MSound BLAZE_DEATH -> CXWJ
    react.surge.util.MSound BLAZE_HIT -> FsCn
    react.surge.util.MSound CAT_HISS -> TkKR
    react.surge.util.MSound CAT_HIT -> qflD
    react.surge.util.MSound CAT_MEOW -> aNlV
    react.surge.util.MSound CAT_PURR -> tote
    react.surge.util.MSound CAT_PURREOW -> yUQX
    react.surge.util.MSound CHICKEN_IDLE -> QsBC
    react.surge.util.MSound CHICKEN_HURT -> nCoP
    react.surge.util.MSound CHICKEN_EGG_POP -> cvsk
    react.surge.util.MSound CHICKEN_WALK -> AcTK
    react.surge.util.MSound COW_IDLE -> PDhv
    react.surge.util.MSound COW_HURT -> LkbF
    react.surge.util.MSound COW_WALK -> pRev
    react.surge.util.MSound CREEPER_HISS -> uQUW
    react.surge.util.MSound CREEPER_DEATH -> uavH
    react.surge.util.MSound ENDERDRAGON_DEATH -> thDn
    react.surge.util.MSound ENDERDRAGON_GROWL -> LANc
    react.surge.util.MSound ENDERDRAGON_HIT -> lqNb
    react.surge.util.MSound ENDERDRAGON_WINGS -> JBxO
    react.surge.util.MSound ENDERMAN_DEATH -> LsrV
    react.surge.util.MSound ENDERMAN_HIT -> IYgj
    react.surge.util.MSound ENDERMAN_IDLE -> ixeY
    react.surge.util.MSound ENDERMAN_TELEPORT -> Lkas
    react.surge.util.MSound ENDERMAN_SCREAM -> PUjw
    react.surge.util.MSound ENDERMAN_STARE -> EEKc
    react.surge.util.MSound GHAST_SCREAM -> XCpV
    react.surge.util.MSound GHAST_SCREAM2 -> OBGs
    react.surge.util.MSound GHAST_CHARGE -> rXko
    react.surge.util.MSound GHAST_DEATH -> cUUQ
    react.surge.util.MSound GHAST_FIREBALL -> MfWc
    react.surge.util.MSound GHAST_MOAN -> RBax
    react.surge.util.MSound IRONGOLEM_DEATH -> BMFY
    react.surge.util.MSound IRONGOLEM_HIT -> lNmd
    react.surge.util.MSound IRONGOLEM_THROW -> OcmN
    react.surge.util.MSound IRONGOLEM_WALK -> jjil
    react.surge.util.MSound MAGMACUBE_WALK -> rjRA
    react.surge.util.MSound MAGMACUBE_WALK2 -> Glvf
    react.surge.util.MSound MAGMACUBE_JUMP -> GJsd
    react.surge.util.MSound PIG_IDLE -> kBxe
    react.surge.util.MSound PIG_DEATH -> RTFB
    react.surge.util.MSound PIG_WALK -> CPHb
    react.surge.util.MSound SHEEP_IDLE -> DRkv
    react.surge.util.MSound SHEEP_SHEAR -> mbrE
    react.surge.util.MSound SHEEP_WALK -> FsEt
    react.surge.util.MSound SILVERFISH_HIT -> dqiJ
    react.surge.util.MSound SILVERFISH_KILL -> dGVB
    react.surge.util.MSound SILVERFISH_IDLE -> iFCx
    react.surge.util.MSound SILVERFISH_WALK -> grah
    react.surge.util.MSound SKELETON_IDLE -> mANk
    react.surge.util.MSound SKELETON_DEATH -> iVeM
    react.surge.util.MSound SKELETON_HURT -> tpWY
    react.surge.util.MSound SKELETON_WALK -> SghC
    react.surge.util.MSound SLIME_ATTACK -> oWvI
    react.surge.util.MSound SLIME_WALK -> smTV
    react.surge.util.MSound SLIME_WALK2 -> qDin
    react.surge.util.MSound SPIDER_IDLE -> Qiqc
    react.surge.util.MSound SPIDER_DEATH -> tpVu
    react.surge.util.MSound SPIDER_WALK -> UCYu
    react.surge.util.MSound WITHER_DEATH -> vCYE
    react.surge.util.MSound WITHER_HURT -> cLcY
    react.surge.util.MSound WITHER_IDLE -> qLyd
    react.surge.util.MSound WITHER_SHOOT -> nMBj
    react.surge.util.MSound WITHER_SPAWN -> RCCE
    react.surge.util.MSound WOLF_BARK -> mROo
    react.surge.util.MSound WOLF_DEATH -> jPux
    react.surge.util.MSound WOLF_GROWL -> qDie
    react.surge.util.MSound WOLF_HOWL -> WtUJ
    react.surge.util.MSound WOLF_HURT -> bQpQ
    react.surge.util.MSound WOLF_PANT -> VNml
    react.surge.util.MSound WOLF_SHAKE -> WbuS
    react.surge.util.MSound WOLF_WALK -> UwBi
    react.surge.util.MSound WOLF_WHINE -> Xvyf
    react.surge.util.MSound ZOMBIE_METAL -> IIKl
    react.surge.util.MSound ZOMBIE_WOOD -> iVgl
    react.surge.util.MSound ZOMBIE_WOODBREAK -> MMGj
    react.surge.util.MSound ZOMBIE_IDLE -> ihKG
    react.surge.util.MSound ZOMBIE_DEATH -> bbtU
    react.surge.util.MSound ZOMBIE_HURT -> cCuS
    react.surge.util.MSound ZOMBIE_INFECT -> Bexd
    react.surge.util.MSound ZOMBIE_UNFECT -> hBcJ
    react.surge.util.MSound ZOMBIE_REMEDY -> pRkO
    react.surge.util.MSound ZOMBIE_WALK -> MCuq
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> dPIt
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> FsGw
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> PxTd
    react.surge.util.MSound ZOMBIE_PIG_HURT -> dqlP
    react.surge.util.MSound DIG_WOOL -> grch
    react.surge.util.MSound DIG_GRASS -> UmpA
    react.surge.util.MSound DIG_GRAVEL -> HNXW
    react.surge.util.MSound DIG_SAND -> wpph
    react.surge.util.MSound DIG_SNOW -> sddr
    react.surge.util.MSound DIG_STONE -> xtUM
    react.surge.util.MSound DIG_WOOD -> Beye
    react.surge.util.MSound FIREWORK_BLAST -> cfWr
    react.surge.util.MSound FIREWORK_BLAST2 -> fENM
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> ReHL
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> CPKk
    react.surge.util.MSound FIREWORK_TWINKLE -> WQrt
    react.surge.util.MSound FIREWORK_TWINKLE2 -> edNH
    react.surge.util.MSound FIREWORK_LAUNCH -> liBO
    react.surge.util.MSound SUCCESSFUL_HIT -> yMDW
    react.surge.util.MSound HORSE_ANGRY -> yMGl
    react.surge.util.MSound HORSE_ARMOR -> rHRl
    react.surge.util.MSound HORSE_BREATHE -> rGqu
    react.surge.util.MSound HORSE_DEATH -> kKnO
    react.surge.util.MSound HORSE_GALLOP -> tWJM
    react.surge.util.MSound HORSE_HIT -> OcqT
    react.surge.util.MSound HORSE_IDLE -> RCHU
    react.surge.util.MSound HORSE_JUMP -> GCHd
    react.surge.util.MSound HORSE_LAND -> vvam
    react.surge.util.MSound HORSE_SADDLE -> fgSd
    react.surge.util.MSound HORSE_SOFT -> FjYQ
    react.surge.util.MSound HORSE_WOOD -> XDXc
    react.surge.util.MSound DONKEY_ANGRY -> suiO
    react.surge.util.MSound DONKEY_DEATH -> yUWU
    react.surge.util.MSound DONKEY_HIT -> qgRS
    react.surge.util.MSound DONKEY_IDLE -> iWIp
    react.surge.util.MSound HORSE_SKELETON_DEATH -> fNAD
    react.surge.util.MSound HORSE_SKELETON_HIT -> Yqmd
    react.surge.util.MSound HORSE_SKELETON_IDLE -> IILp
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> vLNI
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> ahdB
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> tyME
    react.surge.util.MSound VILLAGER_DEATH -> PgSd
    react.surge.util.MSound VILLAGER_HAGGLE -> OuRV
    react.surge.util.MSound VILLAGER_HIT -> mkeh
    react.surge.util.MSound VILLAGER_IDLE -> TIMK
    react.surge.util.MSound VILLAGER_NO -> YOjq
    react.surge.util.MSound VILLAGER_YES -> Kyfm
    java.lang.String pre19sound -> hBco
    java.lang.String post19sound -> oFwk
    org.bukkit.Sound resolvedSound -> UKnv
    react.surge.util.MSound[] ENUM$VALUES -> YPLE
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> DICA
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> jiIe:
    org.bukkit.Material material -> UvcT
    java.lang.Byte data -> huhh
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> LjKm
    79:80:void setData(java.lang.Byte) -> QMiR
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> oDru:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> ESXv
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> KMUy
    68:68:boolean isAnyOnline() -> GQjg
    80:80:react.glang.GList inWorld(org.bukkit.World) -> TFQw
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> OjHJ
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> QMiR
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> QMiR
    143:144:void disable(org.bukkit.entity.Player) -> tvPT
    154:155:void enable(org.bukkit.entity.Player) -> wTdl
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> QMiR
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> VTgk
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> WWkH
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> QMiR
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> jWPj
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> TFQj
    300:300:boolean canFindPlayer(java.lang.String) -> CVFF
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> yknp
    338:345:react.glang.GList onlinePlayers() -> ePpM
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> wwHi
    368:371:void clear(org.bukkit.entity.Player) -> uFNj
    381:385:void clearEffects(org.bukkit.entity.Player) -> UADT
    398:399:void heal(org.bukkit.entity.Player,double) -> QMiR
    409:410:void heal(org.bukkit.entity.Player) -> imcR
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> aChT
    432:433:void resetHunger(org.bukkit.entity.Player) -> Tgue
    443:444:void kill(org.bukkit.entity.Player) -> cJNq
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> CUci
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> HCRD
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> QMiR
react.surge.util.P$1 -> oDru$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> NVBo
    1:1:java.lang.Object onAdapt(java.lang.Object) -> JQek
react.surge.util.P$2 -> oDru$2:
    java.lang.Double val$doff -> KFbe
    org.bukkit.entity.Player val$e -> OldL
    org.bukkit.entity.Entity[] val$result -> kUCI
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> nIjv
react.surge.util.PE -> NMeq:
    react.surge.util.PE ABSORPTION -> thNL
    react.surge.util.PE BLINDNESS -> rbGh
    react.surge.util.PE CONFUSION -> OdSk
    react.surge.util.PE DAMAGE_RESISTANCE -> SyPx
    react.surge.util.PE FAST_DIGGING -> jcBG
    react.surge.util.PE FIRE_RESISTANCE -> XCyT
    react.surge.util.PE GLOWING -> qfsb
    react.surge.util.PE HARM -> jjoo
    react.surge.util.PE HEAL -> Wbyk
    react.surge.util.PE HEALTH_BOOST -> gafp
    react.surge.util.PE HUNGER -> Akji
    react.surge.util.PE INCREASE_DAMAGE -> ujof
    react.surge.util.PE INVISIBILITY -> DdTr
    react.surge.util.PE JUMP -> vLPP
    react.surge.util.PE LEVITATION -> msyF
    react.surge.util.PE LUCK -> hShP
    react.surge.util.PE NIGHT_VISION -> JfEQ
    react.surge.util.PE POISON -> kfDG
    react.surge.util.PE REGENERATION -> Qiwh
    react.surge.util.PE SATURATION -> mtXt
    react.surge.util.PE SLOW -> Jvei
    react.surge.util.PE SLOW_DIGGING -> GTJq
    react.surge.util.PE SPEED -> DJaQ
    react.surge.util.PE UNLUCK -> ukOh
    react.surge.util.PE WATER_BREATHING -> wFbA
    react.surge.util.PE WEAKNESS -> EwxA
    react.surge.util.PE WITHER -> lWdB
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> QMiR
    144:144:react.surge.util.PE d(int) -> tnCB
    156:156:react.surge.util.PE a(int) -> ofak
    166:166:org.bukkit.potion.PotionEffect c() -> clmJ
    177:178:void c(org.bukkit.entity.LivingEntity) -> jhSs
    182:183:void crm(org.bukkit.entity.LivingEntity) -> JQek
    187:188:void rm(org.bukkit.entity.LivingEntity) -> NMRH
react.surge.util.ParticleEffect -> UkmO:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> Pfty
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> SxpD
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> rbGA
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> etts
    react.surge.util.ParticleEffect WATER_BUBBLE -> fwwx
    react.surge.util.ParticleEffect WATER_SPLASH -> mlLd
    react.surge.util.ParticleEffect WATER_WAKE -> blLi
    react.surge.util.ParticleEffect SUSPENDED -> wXHE
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> kTcv
    react.surge.util.ParticleEffect CRIT -> yoOO
    react.surge.util.ParticleEffect CRIT_MAGIC -> DJdN
    react.surge.util.ParticleEffect SMOKE_NORMAL -> pAoa
    react.surge.util.ParticleEffect SMOKE_LARGE -> SyTB
    react.surge.util.ParticleEffect SPELL -> IACE
    react.surge.util.ParticleEffect SPELL_INSTANT -> qDrl
    react.surge.util.ParticleEffect SPELL_MOB -> qgWO
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> qpGp
    react.surge.util.ParticleEffect SPELL_WITCH -> fgXI
    react.surge.util.ParticleEffect DRIP_WATER -> MLlR
    react.surge.util.ParticleEffect DRIP_LAVA -> hulr
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> FrlB
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> iWNW
    react.surge.util.ParticleEffect TOWN_AURA -> GTMI
    react.surge.util.ParticleEffect NOTE -> PNEu
    react.surge.util.ParticleEffect PORTAL -> DmGI
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> eldA
    react.surge.util.ParticleEffect FLAME -> txpE
    react.surge.util.ParticleEffect LAVA -> qUtK
    react.surge.util.ParticleEffect FOOTSTEP -> xcXy
    react.surge.util.ParticleEffect CLOUD -> xQwA
    react.surge.util.ParticleEffect REDSTONE -> VGGR
    react.surge.util.ParticleEffect SNOWBALL -> TIQN
    react.surge.util.ParticleEffect SNOW_SHOVEL -> rjXb
    react.surge.util.ParticleEffect SLIME -> ecsK
    react.surge.util.ParticleEffect HEART -> TQbC
    react.surge.util.ParticleEffect BARRIER -> ujpj
    react.surge.util.ParticleEffect ITEM_CRACK -> Gdmo
    react.surge.util.ParticleEffect BLOCK_CRACK -> Vylr
    react.surge.util.ParticleEffect BLOCK_DUST -> TtGl
    react.surge.util.ParticleEffect WATER_DROP -> fUwQ
    react.surge.util.ParticleEffect ITEM_TAKE -> Bwcg
    react.surge.util.ParticleEffect MOB_APPEARANCE -> IRFH
    react.surge.util.ParticleEffect DRAGON_BREATH -> RnBS
    react.surge.util.ParticleEffect END_ROD -> tqDA
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> rsNE
    react.surge.util.ParticleEffect SWEEP_ATTACK -> HhUA
    java.util.Map NAME_MAP -> RnBN
    java.util.Map ID_MAP -> jjst
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> DRux
    java.util.List properties -> Ijvk
    react.surge.util.ParticleEffect[] ENUM$VALUES -> VXLI
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> yRyP
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> QMiR
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> kYvG
    557:565:react.surge.util.ParticleEffect fromId(int) -> wTfw
    577:578:boolean isWater(org.bukkit.Location) -> HnDT
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> QMiR
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> QMiR
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> QMiR
    665:681:void display(float,int,org.bukkit.Location,double) -> QMiR
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> QMiR
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> QMiR
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> QMiR
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> QMiR
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> QMiR
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> QMiR
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> QMiR
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> QMiR
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> QMiR
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> QMiR
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> QMiR
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> QMiR
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> QMiR
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> QMiR
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> UkmO$QMiR:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> UkmO$VTgk:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> UkmO$TFQj:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> sRJJ
    1594:1594:float getValueY() -> IXRL
    1605:1605:float getValueZ() -> OQQw
react.surge.util.ParticleEffect$OrdinaryColor -> UkmO$XJNA:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> sRJJ
    1526:1526:float getValueY() -> IXRL
    1537:1537:float getValueZ() -> OQQw
react.surge.util.ParticleEffect$ParticleColor -> UkmO$qtwn:
    1383:1383:void <init>() -> <init>
    float getValueX() -> sRJJ
    float getValueY() -> IXRL
    float getValueZ() -> OQQw
react.surge.util.ParticleEffect$ParticleColorException -> UkmO$jhSs:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> UkmO$JQek:
    org.bukkit.Material material -> UvcT
    byte data -> PVYe
    int[] packetData -> HpeX
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> kBAi
    1309:1309:java.lang.String getPacketDataString() -> fduU
react.surge.util.ParticleEffect$ParticleDataException -> UkmO$NMRH:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> UkmO$NVBo:
    int version -> version
    java.lang.Class enumParticle -> djCk
    java.lang.reflect.Constructor packetConstructor -> DSVJ
    java.lang.reflect.Method getHandle -> fgXa
    java.lang.reflect.Field playerConnection -> Olfv
    java.lang.reflect.Method sendPacket -> NXcE
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> fUum
    float offsetX -> EMhL
    float offsetY -> wFfP
    float offsetZ -> eBSR
    float speed -> PfyY
    int amount -> CMyX
    boolean longDistance -> rYYU
    react.surge.util.ParticleEffect$ParticleData data -> ULUn
    java.lang.Object packet -> qMeU
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> BlQP
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> QMiR
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> VTgk
    2004:2018:void sendTo(org.bukkit.Location,double) -> VTgk
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> UkmO$NVBo$QMiR:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> UkmO$NVBo$VTgk:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> UkmO$NVBo$TFQj:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> UkmO$YnsY:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> Vyky
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> qMeV
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> sumw
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> VNxS
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> CaTx
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> UkmO$nIjv:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> GtFj:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> tnCB
react.surge.util.Persist -> sscH:
react.surge.util.Platform -> bXaI:
    boolean ENABLE -> ihUF
    double PROC_CPU -> Hxvi
    11:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    253:258:java.lang.String getVersion() -> getVersion
    263:268:java.lang.String getName() -> getName
    273:273:com.sun.management.OperatingSystemMXBean getSystem() -> IqdL
    271:271:com.sun.management.OperatingSystemMXBean access$0() -> psRu
react.surge.util.Platform$CPU -> bXaI$QMiR:
    198:198:void <init>() -> <init>
    202:207:int getAvailableProcessors() -> getAvailableProcessors
    212:217:double getCPULoad() -> DjeS
    222:227:double getProcessCPULoad() -> urBG
    232:237:double getLiveProcessCPULoad() -> ECTj
    242:247:java.lang.String getArchitecture() -> RblL
react.surge.util.Platform$ENVIRONMENT -> bXaI$VTgk:
    14:14:void <init>() -> <init>
    18:18:boolean canRunBatch() -> MAyx
    23:28:java.lang.String getJavaHome() -> lUeA
    33:38:java.lang.String getJavaVendor() -> sbjG
    43:48:java.lang.String getJavaVersion() -> GRKx
react.surge.util.Platform$MEMORY -> bXaI$TFQj:
    119:119:void <init>() -> <init>
react.surge.util.Platform$MEMORY$PHYSICAL -> bXaI$TFQj$QMiR:
    121:121:void <init>() -> <init>
    125:130:long getTotalMemory() -> rhWo
    135:140:long getFreeMemory() -> cBYm
    145:150:long getUsedMemory() -> pbPr
react.surge.util.Platform$MEMORY$VIRTUAL -> bXaI$TFQj$VTgk:
    154:154:void <init>() -> <init>
    158:163:long getTotalMemory() -> rhWo
    168:173:long getFreeMemory() -> cBYm
    178:183:long getUsedMemory() -> pbPr
    188:193:long getCommittedVirtualMemory() -> xqxW
react.surge.util.Platform$STORAGE -> bXaI$XJNA:
    52:52:void <init>() -> <init>
    56:63:long getAbsoluteTotalSpace() -> urAX
    68:68:long getTotalSpace() -> getTotalSpace
    73:73:long getTotalSpace(java.io.File) -> JQek
    78:85:long getAbsoluteFreeSpace() -> KEEL
    90:90:long getFreeSpace() -> getFreeSpace
    95:95:long getFreeSpace(java.io.File) -> NMRH
    100:100:long getUsedSpace() -> STkn
    105:105:long getUsedSpace(java.io.File) -> NVBo
    110:110:long getAbsoluteUsedSpace() -> JBAj
    115:115:java.io.File[] getRoots() -> getRoots
react.surge.util.PluginUtil -> lnmr:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> qtwn
    78:88:void enable(java.lang.String) -> ofak
    95:99:void enableAll() -> KUfC
    109:113:void disable(org.bukkit.plugin.Plugin) -> jhSs
    120:124:void disableAll() -> PBrC
    135:135:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> JQek
    149:156:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> QMiR
    168:173:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> wTfw
    183:186:java.util.List getPluginNames(boolean) -> upbr
    198:201:java.lang.String getPluginVersion(java.lang.String) -> jNbI
    214:236:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> NMRH
    251:330:java.util.List findByCommand(java.lang.String) -> jFQa
    351:352:void load(org.bukkit.plugin.Plugin) -> NVBo
    356:378:java.lang.String getPluginFileName(java.lang.String) -> EAvy
    383:405:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> QMiR
    418:470:void load(java.lang.String) -> load
    482:487:void reload(org.bukkit.plugin.Plugin) -> YnsY
    494:498:void reloadAll() -> gphU
    510:636:void unload(org.bukkit.plugin.Plugin) -> nIjv
react.surge.util.PoolCount -> MKCv:
react.surge.util.PoolDescriber -> OPid:
react.surge.util.PoolNanoThrottle -> FySx:
react.surge.util.PositionalSelector -> EePK:
    react.glang.GSet allowedChunks -> tWRd
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> EvWl
    39:40:void addChunk(org.bukkit.Chunk) -> Bkok
    44:44:react.glang.GSet getAllowedChunks() -> ELEI
react.surge.util.Protocol -> SLTu:
    react.surge.util.Protocol LATEST -> aGKO
    react.surge.util.Protocol R1_12_2 -> Mwei
    react.surge.util.Protocol R1_12_2_PRE -> fMhe
    react.surge.util.Protocol R1_12_1 -> MMRg
    react.surge.util.Protocol R1_12 -> tyTs
    react.surge.util.Protocol R1_11_2 -> WcaO
    react.surge.util.Protocol R1_11_1 -> KXMu
    react.surge.util.Protocol R1_11 -> Hguk
    react.surge.util.Protocol R1_10_2 -> Mwew
    react.surge.util.Protocol R1_10_1 -> YrXR
    react.surge.util.Protocol R1_10 -> eliV
    react.surge.util.Protocol R1_9_4 -> CGcc
    react.surge.util.Protocol R1_9_3 -> UUKG
    react.surge.util.Protocol R1_9_2 -> mJMD
    react.surge.util.Protocol R1_9_1 -> kLVn
    react.surge.util.Protocol R1_9 -> jkWO
    react.surge.util.Protocol R1_8_9 -> VWkL
    react.surge.util.Protocol R1_8_8 -> OBUp
    react.surge.util.Protocol R1_8_7 -> EEYe
    react.surge.util.Protocol R1_8_6 -> Qamg
    react.surge.util.Protocol R1_8_5 -> vegp
    react.surge.util.Protocol R1_8_4 -> pRtY
    react.surge.util.Protocol R1_8_3 -> wWhj
    react.surge.util.Protocol R1_8_2 -> wFfy
    react.surge.util.Protocol R1_8_1 -> noRW
    react.surge.util.Protocol R1_8 -> iVqK
    react.surge.util.Protocol R1_7_10 -> UwKy
    react.surge.util.Protocol R1_7_9 -> pKEW
    react.surge.util.Protocol R1_7_8 -> cfas
    react.surge.util.Protocol R1_7_7 -> MfdC
    react.surge.util.Protocol R1_7_6 -> RCNv
    react.surge.util.Protocol R1_7_5 -> KGMs
    react.surge.util.Protocol R1_7_4 -> KXOi
    react.surge.util.Protocol R1_7_3 -> aiOr
    react.surge.util.Protocol R1_7_2 -> thUr
    react.surge.util.Protocol R1_7_1 -> hBpO
    react.surge.util.Protocol B1_6_4 -> btcX
    react.surge.util.Protocol B1_6_3 -> FsTR
    react.surge.util.Protocol B1_6_2 -> RmeV
    react.surge.util.Protocol B1_6_1 -> orXp
    react.surge.util.Protocol B1_5_2 -> CaXi
    react.surge.util.Protocol B1_5_1 -> Kqal
    react.surge.util.Protocol B1_5 -> dOvE
    react.surge.util.Protocol B1_4_7 -> YGev
    react.surge.util.Protocol B1_4_6 -> LuFY
    react.surge.util.Protocol B1_4_5 -> iNdJ
    react.surge.util.Protocol B1_4_4 -> CXfu
    react.surge.util.Protocol B1_4_2 -> gPlu
    react.surge.util.Protocol B1_3_2 -> CjIf
    react.surge.util.Protocol B1_3_1 -> Vyox
    react.surge.util.Protocol B1_2_5 -> yVCD
    react.surge.util.Protocol B1_2_4 -> diff
    react.surge.util.Protocol EARLIEST -> TtJt
    react.surge.util.Protocol UNKNOWN -> CjIo
    int version -> version
    java.lang.String packageVersion -> PeaH
    java.lang.String versionName -> thTf
    boolean netty -> TIWV
    react.surge.util.Protocol[] ENUM$VALUES -> Rutd
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> JRcG
    118:118:java.lang.String getPackageVersion() -> wfOJ
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> NxbN
    142:150:react.surge.util.Protocol getProtocolVersion() -> pPmy
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> VTgk
    160:160:boolean isServerVersion() -> xjHV
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> vJOi
    175:175:boolean isActualVersion() -> DPrA
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> HClM
    200:200:int getMetaVersion() -> OsTk
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> aMKl:
    react.surge.util.Protocol from -> tVrS
    react.surge.util.Protocol to -> KFmL
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> nlkY
    21:21:react.surge.util.Protocol getTo() -> qCTV
    26:26:boolean contains(react.surge.util.Protocol) -> TFQj
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> Cohb:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> WOyj
    70:70:int randomNextInt() -> Vfic
    80:80:long randomNextLong() -> uhqo
    92:92:boolean isWithin(double) -> UADT
    104:104:boolean isWithin(int) -> jNbI
    116:116:boolean isWithin(long) -> INbF
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> imcR
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> upbr
react.surge.util.RawEvent -> BBTH:
react.surge.util.RayTrace -> wnmR:
    org.bukkit.Location start -> FbRQ
    org.bukkit.util.Vector direction -> whlh
    java.lang.Double maxDistance -> tEqN
    java.lang.Double distanceCovered -> Accd
    java.lang.Double step -> FYaK
    java.lang.Boolean stop -> xkrx
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> QFXr
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> nIjv
    89:89:org.bukkit.Location getStart() -> lMWO
    94:95:void setStart(org.bukkit.Location) -> NweN
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> rpjg
    114:115:void setMaxDistance(java.lang.Double) -> XJNA
    119:119:java.lang.Double getDistanceCovered() -> cJla
    124:125:void setDistanceCovered(java.lang.Double) -> qtwn
    129:129:java.lang.Double getStep() -> sbkb
    134:135:void setStep(java.lang.Double) -> jhSs
react.surge.util.ReflectionUtils -> IykC:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> QMiR
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> QMiR
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> QMiR
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> QMiR
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> QMiR
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> QMiR
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> QMiR
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> QMiR
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> QMiR
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> QMiR
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> QMiR
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> QMiR
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> QMiR
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> QMiR
react.surge.util.ReflectionUtils$DataType -> IykC$QMiR:
    react.surge.util.ReflectionUtils$DataType BYTE -> uHwX
    react.surge.util.ReflectionUtils$DataType SHORT -> fMmN
    react.surge.util.ReflectionUtils$DataType INTEGER -> bAaG
    react.surge.util.ReflectionUtils$DataType LONG -> SEvR
    react.surge.util.ReflectionUtils$DataType CHARACTER -> cEEJ
    react.surge.util.ReflectionUtils$DataType FLOAT -> LBCV
    react.surge.util.ReflectionUtils$DataType DOUBLE -> pmNP
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> XoXe
    java.util.Map CLASS_MAP -> ABBq
    java.lang.Class primitive -> RKcr
    java.lang.Class reference -> cnvk
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> rsSl
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> TXSc
    704:704:java.lang.Class getReference() -> PCVb
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> VTgk
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> TFQj
    741:742:java.lang.Class getReference(java.lang.Class) -> XJNA
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> QMiR
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> VTgk
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> VTgk
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> TFQj
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> QMiR
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> IykC$VTgk:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> txxY
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> RSuI
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> nECs
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> pRxw
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> VrEH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> pmMS
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> VaCJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> buGD
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> ItMd
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> UUMS
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> nVDl
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> wWnA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> snDy
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> bdCi
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> muER
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> GStQ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> LSCf
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> UvoP
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> GSss
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> oqyP
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> GKcn
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> oMcd:
    void refresh() -> refresh
react.surge.util.SQLOperation -> XldT:
    react.surge.util.SQLOperation LOAD -> HWXU
    react.surge.util.SQLOperation SAVE -> Rdtk
    react.surge.util.SQLOperation[] ENUM$VALUES -> ellc
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> ylav:
    react.surge.util.ServerState START -> MLuH
    react.surge.util.ServerState ENABLE -> qonR
    react.surge.util.ServerState DISABLE -> Exbg
    react.surge.util.ServerState STOP -> iOEh
    react.surge.util.ServerState RUNNING -> YjKJ
    react.surge.util.ServerState[] ENUM$VALUES -> RvXQ
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> ooek:
    org.bukkit.Location location -> TbEW
    org.bukkit.util.Vector offset -> ubhe
    org.bukkit.util.Vector size -> OJjg
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> WWlK
    90:94:org.bukkit.Location randomLocation() -> OPtL
    104:104:org.bukkit.Location randomSurface() -> RRNF
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> WOyx
    129:129:org.bukkit.util.Vector getSize() -> NMns
react.surge.util.SnowLevel -> WPOq:
    byte level -> GLHF
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> JJSv
    51:52:void setLevel(byte) -> nIjv
react.surge.util.SuperCaller -> STcv:
    void run() -> run
react.surge.util.T -> XSSR:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> VTgk
    32:35:void stop() -> stop
react.surge.util.TXT -> FySU:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> JQek
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> QMiR
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> QMiR
    99:99:java.lang.String line(react.surge.util.C,int) -> QMiR
    113:113:java.lang.String underline(react.surge.util.C,int) -> VTgk
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> QMiR
react.surge.util.Tag -> oERc:
    java.lang.String value() -> value
react.surge.util.Timer -> PeNI:
    long tns -> sduw
    long cns -> tFWX
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> VxKS
react.surge.util.VectorMath -> Nogy:
    int[] $SWITCH_TABLE$surge$util$Axis -> IrtW
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> Wkvp
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> QMiR
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> QMiR
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> VTgk
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> TFQj
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> VTgk
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> VTgk
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> TFQj
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> XJNA
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> qtwn
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> jhSs
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> JQek
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> NMRH
    111:111:double round(double,int) -> qtwn
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> QMiR
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> QMiR
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> QMiR
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> XJNA
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> qtwn
    268:268:org.bukkit.util.Vector toVector(float,float) -> QMiR
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> QMiR
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> QMiR
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> NVBo
    337:340:double getSpeed(org.bukkit.util.Vector) -> YnsY
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> QMiR
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> nIjv
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> QMiR
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> VTgk
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> TFQj
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> XJNA
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> HnDT
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> ymJK
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> dhBJ
react.surge.util.VectorMath$1 -> Nogy$1:
    org.bukkit.util.Vector val$vector -> ywjK
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> BlQP
    1:1:java.lang.Object onAdapt(java.lang.Object) -> JQek
react.surge.util.W -> BmHE:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> NVBo
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> QMiR
    75:86:org.bukkit.entity.Entity getEntity(int) -> jFQa
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> QMiR
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> QMiR
    143:143:int getChunkX(org.bukkit.block.Block) -> YnsY
    155:155:int getChunkY(org.bukkit.block.Block) -> nIjv
    168:169:void dropXp(org.bukkit.Location,int) -> VTgk
    180:180:int getChunkZ(org.bukkit.block.Block) -> HnDT
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> VTgk
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> QMiR
    232:239:react.glang.GList news(org.bukkit.Location) -> OjHJ
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> QMiR
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> wfHd
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> PRuW
    300:300:org.bukkit.World toSync(org.bukkit.World) -> UcGD
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> BlQP
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> Bkok
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> upbr
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> EJjg
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> QMiR
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> QMiR
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> QMiR
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> QMiR
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> QMiR
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> QMiR
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> QMiR
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> QMiR
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> wKtj
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> NweN
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> wfHd
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> TFQj
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> QMiR
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> QMiR
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> QMiR
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> QMiR
react.surge.util.W$1 -> BmHE$1:
    java.lang.Double val$doff -> KFbe
    org.bukkit.entity.Entity val$e -> XUgk
    org.bukkit.entity.Entity[] val$result -> kUCI
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> nIjv
react.surge.util.Worlds -> iCaP:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> EKXt
    33:33:boolean hasWorld(java.lang.String) -> XBAa
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> eYXY:
react.text.ColoredString -> qdkG:
    react.surge.util.C c -> xlVS
    java.lang.String s -> ayuA
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> UJSa
    42:43:void setC(react.surge.util.C) -> VTgk
    47:47:java.lang.String getS() -> KgIt
    52:53:void setS(java.lang.String) -> rpPH
react.text.RTEX -> eiyG:
    react.glang.GList extras -> venw
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> QNgl
    44:58:react.json.JSONObject toJSON() -> hamt
react.text.RTX -> yBOL:
    react.json.JSONArray base -> WAcq
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> jhSs
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> VTgk
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> QMiR
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> QMiR
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> VTgk
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> TFQj
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> QMiR
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> VTgk
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> TFQj
    265:265:react.json.JSONArray toJSON() -> DrvN
    276:277:void tellRawTo(org.bukkit.entity.Player) -> DXhB
react.text.RawText -> mrTb:
    java.lang.String COLOR_BLACK -> qoqX
    java.lang.String COLOR_DARK_BLUE -> sLEO
    java.lang.String COLOR_DARK_GREEN -> fpST
    java.lang.String COLOR_DARK_AQUA -> aaCs
    java.lang.String COLOR_DARK_RED -> WBDo
    java.lang.String COLOR_DARK_PURPLE -> cfgp
    java.lang.String COLOR_GOLD -> XVHT
    java.lang.String COLOR_GRAY -> YYKU
    java.lang.String COLOR_DARK_GRAY -> Kytl
    java.lang.String COLOR_BLUE -> tEuW
    java.lang.String COLOR_GREEN -> hBrn
    java.lang.String COLOR_AQUA -> gbSn
    java.lang.String COLOR_RED -> EWAv
    java.lang.String COLOR_LIGHT_PURPLE -> Pgas
    java.lang.String COLOR_YELLOW -> btfV
    java.lang.String COLOR_WHITE -> IRLu
    java.lang.String COLOR_NONE -> wFnB
    java.lang.String HEAD_TEXT -> UCmP
    java.lang.String HEAD_COLOR -> sduG
    java.lang.String HEAD_BOLD -> EWBg
    java.lang.String HEAD_ITALIC -> IAKn
    java.lang.String HEAD_UNDERLINED -> CGjk
    java.lang.String HEAD_STRIKETHROUGH -> QQSn
    java.lang.String HEAD_OBFUSCATED -> PgeS
    java.lang.String HEAD_CLICK_EVENT -> uRMg
    java.lang.String HEAD_HOVER_EVENT -> liVL
    java.lang.String HEAD_ACTION -> ENSk
    java.lang.String HEAD_VALUE -> Olqt
    java.lang.String HEAD_EXTRA -> SEyg
    java.lang.String HEAD_ACTION_SHOW_TEXT -> Kywn
    java.lang.String HEAD_ACTION_COMMAND -> fVaw
    java.util.ArrayList components -> mlXr
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> MdEU
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> qtwn
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> QMiR
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> QMiR
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> QMiR
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> QMiR
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> QMiR
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> QMiR
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> QMiR
    307:313:java.lang.String compile() -> vteX
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> QMiR

react.Config -> hrnU:
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> hrnU
    java.lang.String A_ENTITYCACHE_INTERVAL -> SeQd
    java.lang.String A_COMMANDOVERRIDE_TPS -> YxDt
    java.lang.String A_REACT_REMOTE_PORT -> aehl
    java.lang.String A_REACT_REMOTE_ENABLED -> EmJi
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> Ecxb
    java.lang.String A_POOL_MAXTHREADS -> pPSQ
    java.lang.String A_POOL_SYNC_NANOS -> AFix
    java.lang.String A_ENTITYCACHE_ENABLED -> yknP
    java.lang.String A_FASTLEAF_ENABLED -> FDyI
    java.lang.String A_FASTLEAF_ONDECAY -> OYFQ
    java.lang.String A_FASTLEAF_INSTANT -> NLqG
    java.lang.String A_FASTLEAF_DECAYPERIOD -> mGIR
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> iSmf
    java.lang.String A_ENTITYSTACK_ENABLED -> EBVk
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> bhmC
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> avjs
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> GbPG
    java.lang.String A_GLASS_SHOW_BLOCKS -> mylg
    java.lang.String A_GLASS_SHOW_PARTICLES -> NxFO
    java.lang.String A_ALLOW_CULL -> yIji
    java.lang.String A_ALLOW_PURGE -> ivRN
    java.lang.String A_ALLOW_CACHE -> TxvD
    java.lang.String A_CULL_RULES -> SLAE
    java.lang.String A_RAI_TPS_HIGH_TICK -> JIVP
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> DrYG
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> iSmr
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> Tpea
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> aKuX
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> uFOT
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> wKtU
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> NnrU
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> bOXu
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> rUwF
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> KThG
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> kjuT
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> pXbT
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> WiMA
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> VKug
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> kYrd
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> TyVL
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> oMNU
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> FMiX
    java.lang.String A_RAI_FLUID_TIME_CEIL -> IEpn
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> Ptxs
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> Cnsc
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> hPim
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> MlQM
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> turg
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> ArAl
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> Xtbu
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> mXMW
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> Cfei
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> wwLh
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> oVBs
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> BRaE
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> pOtM
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> xGKW
    java.lang.String A_LANGUAGE -> iusc
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> eGdB
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> romJ
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> nlPu
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> oLpU
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> kshd
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> KCjF
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> YDbH
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> NLsQ
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> byoo
    java.lang.String A_RAI_ENTITY_PROPIGATE -> dnuA
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> NoVn
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> UcJQ
    int ENTITYCACHE_CHUNK_RADIUS -> Oqxn
    int ENTITYCACHE_INTERVAL -> xXLV
    boolean COMMANDOVERRIDES_TPS -> gpMq
    int REACT_REMOTE_PORT -> OYGx
    boolean REACT_REMOTE_ENABLED -> TqGQ
    int ENTITY_STACK_MAX_COUNT -> bhmU
    int POOL_MAXTHREADS -> aKvy
    long POOL_SYNC_NANOS -> UkXk
    boolean ENTITYCACHE_ENABLED -> jVrV
    boolean FASTLEAF_ENABLED -> cIlu
    boolean FASTLEAF_ONDECAY -> aeit
    boolean FASTLEAF_INSTANT -> OjHT
    int FASTLEAF_DECAYPERIOD -> jVqw
    boolean COMMANDOVERRIDES_MEMORY -> NMSB
    boolean ENTITYSTACK_ENABLED -> Jbgw
    int ENTITYSTACK_MINIMUM_GROUP -> salv
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> onsN
    int ENTITYSTACK_MAXIMUM_HEALTH -> TxvY
    boolean GLASS_SHOW_BLOCKS -> BuEb
    boolean GLASS_SHOW_PARTICLES -> IVsw
    react.glang.GList ALLOW_CULL -> wwJm
    react.glang.GList ALLOW_PURGE -> kbfS
    react.glang.GList ALLOW_CACHE -> NDbJ
    react.glang.GList CULL_RULES -> gUyY
    double RAI_TPS_HIGH_TICK -> xGIb
    long RAI_REDSTONE_TIME_FLOOR -> DOxM
    long RAI_REDSTONE_TIME_CEIL -> tBpY
    long RAI_REDSTONE_TIME_MUDDING -> iCRJ
    double RAI_REDSTONE_TIME_FUNCTION -> idtN
    double RAI_REDSTONE_TIME_OVERBLEED -> FMmo
    int RAI_REDSTONE_TIME_RADIUS -> UHxT
    int RAI_REDSTONE_TIME_PROPIGATION -> uNdh
    long RAI_HOPPER_TIME_FLOOR -> DYJb
    long RAI_HOPPER_TIME_CEIL -> MtfI
    long RAI_HOPPER_TIME_MUDDING -> HnGm
    double RAI_HOPPER_TIME_FUNCTION -> kAHP
    double RAI_HOPPER_TIME_OVERBLEED -> Mccx
    int RAI_HOPPER_TIME_RADIUS -> XSCa
    int RAI_HOPPER_TIME_PROPIGATION -> HnHU
    int RAI_ENTITY_CHUNK_MULTIPLIER -> fKKD
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> ydCE
    int RAI_ENTITY_CHUNK_RADIUS -> CMTt
    long RAI_FLUID_TIME_FLOOR -> VwQD
    long RAI_FLUID_TIME_CEIL -> xiPD
    long RAI_FLUID_TIME_MUDDING -> YDco
    double RAI_FLUID_TIME_FUNCTION -> DGhc
    double RAI_FLUID_TIME_OVERBLEED -> myov
    int RAI_FLUID_TIME_RADIUS -> KemU
    int RAI_FLUID_TIME_PROPIGATION -> HTSg
    double SMEAR_TICK_ENTITIES_MAX_TICK -> dgFO
    double SMEAR_TICK_TILES_MAX_TICK -> GsSm
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> JRJH
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> XSAr
    double SMEAR_TICK_ENTITIES_AMOUNT -> byqE
    double SMEAR_TICK_TILES_AMOUNT -> APAi
    boolean SMEAR_TICK_ENTITIES_ENABLE -> IqIi
    boolean SMEAR_TICK_TILES_ENABLE -> uODf
    boolean HOPPER_OVERTICK_ENABLE -> hapR
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> oECE
    long RAI_CHUNK_TIME_CEIL -> sPnJ
    long RAI_CHUNK_TIME_MUDDING -> yIms
    double RAI_CHUNK_TIME_FUNCTION -> MBBA
    double RAI_CHUNK_TIME_OVERBLEED -> AaCQ
    int RAI_CHUNK_TIME_RADIUS -> BAbK
    int RAI_CHUNK_TIME_PROPIGATION -> onuD
    boolean RAI_CHUNK_TIME_PROPIGATE -> JQjB
    boolean RAI_FLUID_TIME_PROPIGATE -> MBAf
    boolean RAI_ENTITY_PROPIGATE -> VnaR
    boolean RAI_HOPPER_TIME_PROPIGATE -> dfgs
    boolean RAI_REDSTONE_TIME_PROPIGATE -> mXQV
    boolean hrld -> OYKb
    boolean rns -> IExC
    boolean rrl -> vIXx
    int[] $SWITCH_TABLE$org$bukkit$entity$EntityType -> uhYY
    258:648:void <clinit>() -> <clinit>
    34:34:void <init>() -> <init>
    653:670:void doTrack(org.bukkit.plugin.Plugin) -> hrnU
    675:697:void onRead(org.bukkit.plugin.Plugin) -> SeQd
    701:731:void read(java.io.File,boolean) -> hrnU
    736:849:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> hrnU
    854:891:react.surge.cluster.DataCluster defaultConfig(boolean) -> hrnU
    896:965:react.glang.GList getDefaultEntitiesForCaching() -> hrnU
    970:1039:react.glang.GList getDefaultEntitiesForCulling() -> SeQd
    1044:1075:react.glang.GList getDefaultEntitiesForRemoval() -> YxDt
    1080:1109:react.glang.GList getDefaultCullRules() -> aehl
    34:34:int[] $SWITCH_TABLE$org$bukkit$entity$EntityType() -> EmJi
react.Config$1 -> hrnU$1:
    java.io.File val$fConfig -> pHHm
    java.io.File val$fConfigExperimental -> UHyq
    org.bukkit.plugin.Plugin val$main -> rpRL
    1:656:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    661:665:void run() -> run
react.Gate -> SeQd:
    react.glang.GMap defaultSettings -> hYcO
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> vAHv
    37:37:void <clinit>() -> <clinit>
    35:35:void <init>() -> <init>
    41:127:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> hrnU
    131:156:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> hrnU
    161:161:int getChunkCountForView() -> Ecxb
    166:166:int getMaxChunksForView() -> pPSQ
    171:171:boolean hasFawe() -> AFix
    176:197:void tickEntityNextTickListTick(org.bukkit.World) -> hrnU
    201:205:void resetEntityMaxTick(org.bukkit.World) -> SeQd
    209:209:int getEntityTickMax(org.bukkit.World) -> YxDt
    214:214:int getTileTickMax(org.bukkit.World) -> aehl
    219:237:void tweakEntityTickMax(org.bukkit.World,int) -> hrnU
    241:258:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> hrnU
    263:267:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> hrnU
    271:283:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> hrnU
    288:292:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> SeQd
    296:314:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> hrnU
    318:322:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> EmJi
    327:330:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> hrnU
    335:338:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> SeQd
    343:343:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> YxDt
    348:348:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> aehl
    353:353:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> EmJi
    360:366:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    372:373:void unloadChunk(org.bukkit.World,int,int) -> hrnU
    377:383:void removeEntity(org.bukkit.entity.Entity) -> hrnU
    387:393:void purgeEntity(org.bukkit.entity.Entity) -> SeQd
    397:403:void cullEntity(org.bukkit.entity.Entity) -> YxDt
    407:413:void cachedEntity(org.bukkit.entity.Entity) -> aehl
    418:435:void updateBlock(org.bukkit.block.Block) -> hrnU
    439:443:java.lang.String header(java.lang.String,react.surge.util.C) -> hrnU
    448:448:java.lang.String header(react.surge.util.C) -> hrnU
    454:458:void updateFluid(org.bukkit.block.Block) -> SeQd
    35:35:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> yknP
react.Gate$1 -> SeQd$1:
    react.api.SelectorPosition val$sel -> LiTk
    react.glang.Callback val$prog -> GYdb
    react.glang.Callback val$cb -> DHJx
    1:41:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    46:125:void run() -> run
react.Gate$1$1 -> SeQd$1$1:
    react.Gate$1 this$1 -> vRJR
    java.lang.Object val$o -> FWBc
    java.lang.reflect.Constructor val$vectorConstruct -> NVIX
    java.lang.reflect.Constructor val$cuboidConstruct -> KnbO
    java.lang.reflect.Method val$faweFixMethod -> ghBG
    java.lang.Integer[] val$total -> LiTj
    java.lang.Integer[] val$sof -> QNPp
    react.glang.Callback val$prog -> GYdb
    java.lang.Integer val$tot -> ksmS
    1:73:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    80:94:void run() -> run
react.Gate$1$2 -> SeQd$1$2:
    react.Gate$1 this$1 -> vRJR
    react.glang.Callback val$prog -> GYdb
    react.glang.Callback val$cb -> DHJx
    java.lang.Integer[] val$total -> LiTj
    1:98:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    105:113:void run() -> run
react.Info -> YxDt:
    java.lang.String CORE_REACT_DOT -> FNQf
    java.lang.String CORE_NAME -> yktF
    java.lang.String CORE_CACHE -> gMnW
    java.lang.String CORE_DOTYML -> uqIb
    java.lang.String COMMAND_REACT -> QhAm
    java.lang.String COMMAND_RAI -> afOU
    java.lang.String COMMAND_ACT_DESCRIPTION -> INgg
    java.lang.String COMMAND_ACT -> nktK
    java.lang.String COMMAND_ACT_ALIAS_1 -> NLuc
    java.lang.String COMMAND_ACT_ALIAS_2 -> dnwO
    java.lang.String COMMAND_ACT_USAGE -> mrBy
    java.lang.String COMMAND_HELP_DESCRIPTION -> xWmt
    java.lang.String COMMAND_HELP -> hkDB
    java.lang.String COMMAND_HELP_ALIAS_1 -> Gjds
    java.lang.String COMMAND_HELP_ALIAS_2 -> WPBE
    java.lang.String COMMAND_HELP_USAGE -> qSYy
    java.lang.String COMMAND_STATUS_DESCRIPTION -> aDLc
    java.lang.String COMMAND_STATUS -> kYyU
    java.lang.String COMMAND_STATUS_ALIAS_1 -> nktA
    java.lang.String COMMAND_STATUS_ALIAS_2 -> kIXe
    java.lang.String COMMAND_STATUS_USAGE -> iBqb
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> iTTT
    java.lang.String COMMAND_CPUSCORE -> QWAT
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> YgLH
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> XAeI
    java.lang.String COMMAND_CPUSCORE_USAGE -> vAKS
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> yRdi
    java.lang.String COMMAND_RELOAD -> WGSR
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> gVai
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> VCoB
    java.lang.String COMMAND_RELOAD_USAGE -> WXSs
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> PvDK
    java.lang.String COMMAND_MONITOR -> HKhT
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> FVdB
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> lnab
    java.lang.String COMMAND_MONITOR_USAGE -> vbld
    java.lang.String COMMAND_MAP_DESCRIPTION -> vAKC
    java.lang.String COMMAND_MAP -> clYG
    java.lang.String COMMAND_MAP_ALIAS_1 -> loCI
    java.lang.String COMMAND_MAP_ALIAS_2 -> ghCn
    java.lang.String COMMAND_MAP_USAGE -> dLwb
    java.lang.String COMMAND_GLASS_DESCRIPTION -> AaHE
    java.lang.String COMMAND_GLASS -> UcNm
    java.lang.String COMMAND_GLASS_ALIAS_1 -> ntgW
    java.lang.String COMMAND_GLASS_ALIAS_2 -> aDNS
    java.lang.String COMMAND_GLASS_USAGE -> ArHo
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> FVbX
    java.lang.String COMMAND_CBLAME -> Gauc
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> GIEQ
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> tBsJ
    java.lang.String COMMAND_CBLAME_USAGE -> rNOS
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> dnyh
    java.lang.String COMMAND_ACTIONLOG -> NLxM
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> Nwkt
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> weoA
    java.lang.String COMMAND_ACTIONLOG_USAGE -> dVIK
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> ryDL
    java.lang.String COMMAND_CAPABILITIES -> pYJi
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> GkHa
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> Usof
    java.lang.String COMMAND_CAPABILITIES_USAGE -> ugyO
    java.lang.String MSG_PERMISSION -> oUgM
    java.lang.String MSG_MONITORING_STARTED -> nSHV
    java.lang.String MSG_MONITORING_STOPPED -> vcOx
    java.lang.String MSG_ACTIONLOGGING_STARTED -> UANf
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> VwUw
    java.lang.String MSG_GLASS_STARTED -> eHLl
    java.lang.String MSG_GLASS_STOPPED -> HKjT
    org.bukkit.Color COLOR_HOPPER -> DaaR
    org.bukkit.Color COLOR_BLOCK_UPDATE -> FFDu
    org.bukkit.Color COLOR_BLOCK_FROMTO -> werI
    org.bukkit.Color COLOR_BLOCK_BURN -> gMqn
    org.bukkit.Color COLOR_BLOCK_DECAY -> tLHQ
    org.bukkit.Color COLOR_BLOCK_FORM -> LaHp
    java.lang.String NAME_TICK -> ssYE
    java.lang.String NAME_MEMORY -> tdxr
    java.lang.String NAME_CHUNKS -> nkxj
    java.lang.String NAME_ENTITIES -> bqhL
    java.lang.String STATE_MONITORING_TAB -> HnLh
    java.lang.String STATE_MONITORING_ENABLED -> BSKX
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> xaEV
    java.lang.String STATE_MAPPING_ENABLED -> TqNt
    java.lang.String STATE_SOUND_PLAYS -> Oint
    java.lang.String STATE_MONITORING_POSTED -> YLxi
    java.lang.String STATE_MONITORING_LASTTAB -> NwnO
    java.lang.String STATE_GLASSES_ENABLED -> RQWO
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> Rjhd
    java.lang.String STATE_PLAYER_HOTBAR -> Drai
    java.lang.String STATE_PLAYER_SHIFT -> WyxG
    java.lang.String STATE_PLAYER_SCROLL -> YgLt
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> gVeg
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> XBIi
    java.lang.String PERM_ACCESS -> xXVj
    java.lang.String PERM_MONITOR -> QxjE
    java.lang.String PERM_MONITOR_TITLE -> IqRn
    java.lang.String PERM_MONITOR_ACTIONLOG -> dEKr
    java.lang.String PERM_MONITOR_MAP -> mGVQ
    java.lang.String PERM_MONITOR_ENVIRONMENT -> VDSe
    java.lang.String PERM_MONITOR_GLASSES -> JlFO
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> tBxh
    java.lang.String PERM_ACT -> wvuq
    java.lang.String PERM_RAI -> fTCV
    java.lang.String PERM_RAI_CONTROL -> ebAe
    java.lang.String PERM_RAI_ACCESS -> VoGu
    java.lang.String PERM_RAI_MONITOR -> nBIQ
    java.lang.String PERM_RELOAD -> KCtN
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> cuMw
    java.lang.String SAMPLER_REDSTONE_TICK -> kssL
    java.lang.String SAMPLER_ENTITY_TIME -> vbpg
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> xGUH
    java.lang.String SAMPLER_TILE_TIME_LOCK -> Rjkc
    java.lang.String SAMPLER_TILE_TIME -> LWyC
    java.lang.String SAMPLER_TILE_DROPTICK -> QEem
    java.lang.String SAMPLER_ENTITY_DROPTICK -> XRkA
    java.lang.String SAMPLER_REDSTONE_SECOND -> CobP
    java.lang.String SAMPLER_REDSTONE_TIME -> iKiq
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> WrKf
    java.lang.String SAMPLER_HOPPER_TICK -> DirN
    java.lang.String SAMPLER_HOPPER_SECOND -> Wyya
    java.lang.String SAMPLER_HOPPER_TIME -> FFFL
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> aUSe
    java.lang.String SAMPLER_FLUID_TICK -> YEKa
    java.lang.String SAMPLER_FLUID_SECOND -> eGmN
    java.lang.String SAMPLER_FLUID_TIME -> QNVD
    java.lang.String SAMPLER_TPS -> xWtm
    java.lang.String SAMPLER_TICK -> KDTM
    java.lang.String SAMPLER_TIU -> FMvC
    java.lang.String SAMPLER_MEM -> biYJ
    java.lang.String SAMPLER_FREEMEM -> bqhq
    java.lang.String SAMPLER_MAXMEM -> ownS
    java.lang.String SAMPLER_ALLOCMEM -> ggfO
    java.lang.String SAMPLER_MAHS -> Jbrs
    java.lang.String SAMPLER_CHK -> mhvj
    java.lang.String SAMPLER_ATASK -> FyJs
    java.lang.String SAMPLER_STASK -> wDQM
    java.lang.String SAMPLER_CHK_TIME -> JlGh
    java.lang.String SAMPLER_EXPLOSION_TIME -> hYjj
    java.lang.String SAMPLER_CHKS -> kIas
    java.lang.String SAMPLER_ENT -> sHiD
    java.lang.String SAMPLER_ENTLIV -> SvbA
    java.lang.String SAMPLER_ENTDROP -> GHkR
    java.lang.String SAMPLER_ENTTILE -> YENg
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> DaeY
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> uiAq
    java.lang.String ACTION_CULL_ENTITIES_NAME -> vlEP
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> Xcna
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> ccnG
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> GILb
    java.lang.String ACTION_UPDATE_FLUID_NAME -> EJvM
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> ggiW
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> oxRS
    java.lang.String ACTION_LOCK_FLUID_STATUS -> fSdE
    java.lang.String ACTION_LOCK_FLUID_NAME -> pbCG
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> lnfu
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> lTtb
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> JkfK
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> eHOv
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> rEdc
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> HKlp
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> hayx
    java.lang.String ACTION_LOCK_HOPPER_NAME -> sIIQ
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> fSbx
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> Kewl
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> lLdc
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> DbEU
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> qdeL
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> fBcC
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> rMsy
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> wTrw
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> upqD
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> mOfm
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> oDkb
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> LOib
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> IFbe
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> bOjk
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> XmAv
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> piuL
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> rVht
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> FFJt
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> qSgD
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> pQDb
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> wTvu
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> qBdk
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> tLNo
    java.lang.String ACTION_FIX_LIGHTING_NAME -> dxUD
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> yAkW
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> HTbE
    java.lang.String ACTION_COLLECT_GARBAGE -> DPeh
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> wLfU
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> XdRD
    8:226:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> aehl:
    java.lang.String BUNDLE_NAME -> ifBM
    java.util.ResourceBundle RESOURCE_BUNDLE -> uydi
    java.util.ResourceBundle PRIMARY_BUNDLE -> wCuQ
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> EmJi:
    react.React instance -> dfsA
    react.controller.SampleController sampleController -> VCuv
    react.controller.PlayerController playerController -> rgif
    react.controller.MonitorController monitorController -> IheT
    react.controller.CommandController commandController -> pjTs
    react.controller.ActionController actionController -> QEhi
    react.controller.FastDecayController fastDecayController -> VUYT
    react.controller.EntityStackController entityStackController -> fSfT
    react.controller.GlassController glassController -> UQtk
    react.controller.EntityCullController entityCullController -> uiCP
    react.controller.SpikeController spikeController -> PTIB
    react.controller.SecurityController securityController -> KTyJ
    react.controller.RedstoneController redstoneController -> Xtpi
    react.controller.HopperController hopperController -> gxlG
    react.controller.PhysicsController physicsController -> IXDt
    react.controller.TickTimeController tickTimeController -> vsua
    react.controller.RAIController raiController -> PCGO
    react.controller.FluidController fluidController -> wnlL
    react.controller.ChunkController chunkController -> WjAW
    react.controller.GraphController graphController -> xOki
    react.controller.ChronophyFluidController fluidChronophyController -> NwwN
    react.controller.EventController eventController -> sIMi
    react.controller.BlockInjectController blockInjectController -> AiaQ
    react.controller.SmearTickController smearTickController -> yuSV
    react.controller.FeatureController featureController -> QxpW
    react.controller.HopperOvertickController hopperPlungeController -> qTJC
    react.controller.BenchmarkController benchmarkController -> mrPe
    react.controller.LanguageController languageController -> FyRK
    react.controller.RemoteController remoteController -> HUDj
    react.controller.ExplosiveController explosiveController -> LjBY
    41:41:void <init>() -> <init>
    137:137:void enable() -> enable
    143:143:void disable() -> disable
react.action.ActionCollectGarbage -> Ecxb:
    19:22:void <init>() -> <init>
    27:61:void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
react.action.ActionCollectGarbage$1 -> Ecxb$1:
    react.action.ActionCollectGarbage this$0 -> YpGn
    react.api.IActionSource val$source -> SUCt
    1:29:void <init>(react.action.ActionCollectGarbage,react.api.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> hrnU
react.action.ActionCollectGarbage$1$1 -> Ecxb$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> ghMt
    long val$mbnex -> OrkE
    long val$mbmem -> ESjt
    react.api.IActionSource val$source -> SUCt
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.api.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> pPSQ:
    long ms -> oNBm
    int lcd -> SnVW
    32:59:void <init>() -> <init>
    64:150:void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> hrnU
    27:27:void access$0(react.action.ActionCullEntities,long) -> hrnU
    28:28:int access$1(react.action.ActionCullEntities) -> hrnU
    27:27:long access$2(react.action.ActionCullEntities) -> SeQd
react.action.ActionCullEntities$1 -> pPSQ$1:
    react.action.ActionCullEntities this$0 -> IOWO
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> pPSQ$2:
    react.action.ActionCullEntities this$0 -> IOWO
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> pPSQ$3:
    react.action.ActionCullEntities this$0 -> IOWO
    react.glang.FinalInteger val$completed -> dDqa
    react.glang.FinalInteger val$total -> RYqC
    react.glang.FinalInteger val$totalCulled -> LrQO
    react.glang.FinalInteger val$totalChunked -> Tygk
    react.api.IActionSource val$source -> SUCt
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> pPSQ$4:
    react.action.ActionCullEntities this$0 -> IOWO
    react.api.IActionSource val$source -> SUCt
    react.glang.FinalInteger val$totalCulled -> LrQO
    react.glang.FinalInteger val$totalChunked -> Tygk
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> AFix:
    24:38:void <init>() -> <init>
    43:95:void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
react.action.ActionFixLighting$1 -> AFix$1:
    react.action.ActionFixLighting this$0 -> aMIl
    1:27:void <init>(react.action.ActionFixLighting) -> <init>
    32:35:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> AFix$2:
    react.action.ActionFixLighting this$0 -> aMIl
    react.api.IActionSource val$source -> SUCt
    int val$ch -> pHSq
    1:69:void <init>(react.action.ActionFixLighting,react.api.IActionSource,int) -> <init>
    74:79:void run(java.lang.Integer) -> hrnU
    1:1:void run(java.lang.Object) -> hrnU
react.action.ActionFixLighting$3 -> AFix$3:
    react.action.ActionFixLighting this$0 -> aMIl
    1:80:void <init>(react.action.ActionFixLighting) -> <init>
    85:90:void run(java.lang.Double) -> hrnU
    1:1:void run(java.lang.Object) -> hrnU
react.action.ActionLockFluid -> yknP:
    int lcd -> SnVW
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
react.action.ActionLockFluid$1 -> yknP$1:
    react.action.ActionLockFluid this$0 -> ECIN
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> yknP$2:
    react.action.ActionLockFluid this$0 -> ECIN
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> FDyI:
    int lcd -> SnVW
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
react.action.ActionLockHopper$1 -> FDyI$1:
    react.action.ActionLockHopper this$0 -> jqVc
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> FDyI$2:
    react.action.ActionLockHopper this$0 -> jqVc
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> OYFQ:
    int lcd -> SnVW
    26:53:void <init>() -> <init>
    58:102:void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
react.action.ActionLockRedstone$1 -> OYFQ$1:
    react.action.ActionLockRedstone this$0 -> NUrl
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> OYFQ$2:
    react.action.ActionLockRedstone this$0 -> NUrl
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> NLqG:
    long ms -> oNBm
    int lcd -> SnVW
    boolean fail -> APPY
    31:46:void <init>() -> <init>
    51:144:void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> SeQd
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> hrnU
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> hrnU
    26:26:int access$2(react.action.ActionPurgeChunks) -> SeQd
    25:25:long access$3(react.action.ActionPurgeChunks) -> YxDt
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> hrnU
react.action.ActionPurgeChunks$1 -> NLqG$1:
    react.action.ActionPurgeChunks this$0 -> GINs
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> NLqG$2:
    react.action.ActionPurgeChunks this$0 -> GINs
    int val$dk -> OriS
    java.lang.Object val$j -> hINE
    react.api.IActionSource val$source -> SUCt
    react.api.ISelector[] val$selectors -> PKYJ
    react.glang.FinalInteger val$acompleted -> NwvU
    react.glang.FinalInteger val$completed -> dDqa
    react.glang.FinalInteger val$total -> RYqC
    react.glang.FinalInteger val$totalCulled -> LrQO
    react.glang.FinalInteger val$totalChunked -> Tygk
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.api.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> hrnU
react.action.ActionPurgeChunks$2$1 -> NLqG$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> HwGG
    react.glang.FinalInteger val$acompleted -> NwvU
    react.glang.FinalInteger val$completed -> dDqa
    react.glang.FinalInteger val$total -> RYqC
    react.glang.FinalInteger val$totalCulled -> LrQO
    react.glang.FinalInteger val$totalChunked -> Tygk
    react.api.IActionSource val$source -> SUCt
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> NLqG$3:
    react.action.ActionPurgeChunks this$0 -> GINs
    react.api.IActionSource val$source -> SUCt
    react.glang.FinalInteger val$acompleted -> NwvU
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> NLqG$4:
    react.action.ActionPurgeChunks this$0 -> GINs
    org.bukkit.Chunk val$chunk -> jFbF
    java.lang.Runnable val$cb -> MBPK
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> mGIR:
    long ms -> oNBm
    int lcd -> SnVW
    34:61:void <init>() -> <init>
    66:153:void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> SeQd
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> hrnU
    30:30:int access$1(react.action.ActionPurgeEntities) -> hrnU
    29:29:long access$2(react.action.ActionPurgeEntities) -> SeQd
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> hrnU
react.action.ActionPurgeEntities$1 -> mGIR$1:
    react.action.ActionPurgeEntities this$0 -> ejXN
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> mGIR$2:
    react.action.ActionPurgeEntities this$0 -> ejXN
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> mGIR$3:
    react.action.ActionPurgeEntities this$0 -> ejXN
    react.glang.FinalInteger val$completed -> dDqa
    react.glang.FinalInteger val$total -> RYqC
    react.glang.FinalInteger val$totalCulled -> LrQO
    react.glang.FinalInteger val$totalChunked -> Tygk
    react.api.IActionSource val$source -> SUCt
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> mGIR$4:
    react.action.ActionPurgeEntities this$0 -> ejXN
    react.api.IActionSource val$source -> SUCt
    react.glang.FinalInteger val$totalCulled -> LrQO
    react.glang.FinalInteger val$totalChunked -> Tygk
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> mGIR$5:
    react.action.ActionPurgeEntities this$0 -> ejXN
    org.bukkit.entity.Entity val$i -> TqWl
    react.glang.FinalInteger val$cu -> cdQk
    int val$k -> ePdq
    org.bukkit.Chunk val$chunk -> jFbF
    java.lang.Runnable val$cb -> MBPK
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> iSmf:
    int lcd -> SnVW
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
react.action.ActionUnlockFluid$1 -> iSmf$1:
    react.action.ActionUnlockFluid this$0 -> qlyK
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> EBVk:
    int lcd -> SnVW
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
react.action.ActionUnlockHopper$1 -> EBVk$1:
    react.action.ActionUnlockHopper this$0 -> RcBO
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> bhmC:
    int lcd -> SnVW
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
react.action.ActionUnlockRedstone$1 -> bhmC$1:
    react.action.ActionUnlockRedstone this$0 -> oVQs
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> FDyI
    1:1:java.lang.Object get() -> get
react.api.Action -> avjs:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> qTGs
    java.lang.String[] nodes -> IqYJ
    react.api.ActionHandle handle -> PCIT
    react.api.ActionState state -> xrMv
    react.api.ActionTargetType target -> EeLg
    react.api.ActionType type -> fTLJ
    react.api.IActionSource currentSource -> DsNB
    double progress -> SDCu
    react.glang.GMap defaultSelectors -> Bles
    23:24:void <init>(react.api.ActionType) -> <init>
    26:39:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    44:59:react.api.ISelector[] biselect(react.api.ISelector[]) -> hrnU
    65:66:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> hrnU
    71:71:java.lang.String getName() -> getName
    77:77:java.lang.String getDescription() -> getDescription
    83:83:react.api.ActionHandle getHandleType() -> OYFQ
    89:89:react.api.ActionState getState() -> NLqG
    95:95:java.lang.String getStatus() -> getStatus
    101:102:void setStatus(java.lang.String) -> hrnU
    107:107:double getProgress() -> getProgress
    113:114:void setProgress(double) -> setProgress
    119:119:react.api.ActionTargetType getTarget() -> mGIR
    125:125:react.api.ActionType getType() -> iSmf
    131:131:react.glang.GMap getDefaultSelectors() -> EBVk
    137:146:void act(react.api.IActionSource,react.api.ISelector[]) -> SeQd
    151:152:void completeAction() -> bhmC
    157:157:react.api.IActionSource getCurrentSource() -> avjs
    163:163:java.lang.String[] getNodes() -> GbPG
    169:170:void setNodes(java.lang.String[]) -> hrnU
    void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
react.api.ActionAlreadyRunningException -> GbPG:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> mylg:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> NxFO:
    react.api.ActionHandle AUTOMATIC -> mPOe
    react.api.ActionHandle MANUAL -> inWO
    react.api.ActionHandle MUTEX -> qunB
    react.api.ActionHandle[] ENUM$VALUES -> OsMS
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionHandle[] values() -> values
    1:1:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
react.api.ActionNotRunningException -> yIji:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> ivRN:
    react.api.ActionState IDLE -> OHXi
    react.api.ActionState RUNNING -> qSkD
    react.api.ActionState[] ENUM$VALUES -> jGFK
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> TxvD:
    react.api.ActionTargetType POSITIONAL -> BJbc
    react.api.ActionTargetType SYSTEM -> SUFU
    react.api.ActionTargetType[] ENUM$VALUES -> tvfR
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> SLAE:
    react.api.ActionType FIX_LIGHTING -> Wibc
    react.api.ActionType UNLOCK_FLUID -> MdVX
    react.api.ActionType LOCK_FLUID -> RYpm
    react.api.ActionType UNLOCK_HOPPER -> tUBs
    react.api.ActionType LOCK_HOPPER -> JIiP
    react.api.ActionType UNLOCK_REDSTONE -> hYpT
    react.api.ActionType LOCK_REDSTONE -> uFdD
    react.api.ActionType CULL_ENTITIES -> vIgQ
    react.api.ActionType COLLECT_GARBAGE -> XldV
    react.api.ActionType PURGE_ENTITIES -> hkQn
    react.api.ActionType PURGE_CHUNKS -> HnXD
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> PCIT
    react.api.ActionTargetType target -> EeLg
    react.api.ActionType[] ENUM$VALUES -> OXxc
    5:17:void <clinit>() -> <clinit>
    24:30:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    34:34:java.lang.String getName() -> getName
    39:39:java.lang.String getDescription() -> getDescription
    44:44:react.api.ActionHandle getHandle() -> mylg
    49:49:react.api.ActionTargetType getTarget() -> mGIR
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> JIVP:
    react.api.ActivationRangeType ANIMALS -> ggnP
    react.api.ActivationRangeType MONSTERS -> YDsd
    react.api.ActivationRangeType MISC -> Drkt
    react.api.ActivationRangeType[] ENUM$VALUES -> TNux
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> DrYG:
    int value() -> value
react.api.Async -> iSmr:
react.api.CPUBenchmark -> Tpea:
    org.bukkit.command.CommandSender sender -> sender
    int score -> nmDQ
    java.lang.Runnable onFinish -> gqCi
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:86:void run() -> run
    90:90:org.bukkit.command.CommandSender getSender() -> getSender
    95:95:int getScore() -> getScore
    100:100:java.lang.Runnable getOnFinish() -> NxFO
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> hrnU
    13:13:int access$1(react.api.CPUBenchmark) -> SeQd
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> YxDt
react.api.CPUBenchmark$1 -> Tpea$1:
    react.api.CPUBenchmark this$0 -> YUwc
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> Tpea$2:
    react.api.CPUBenchmark this$0 -> YUwc
    1:72:void <init>(react.api.CPUBenchmark) -> <init>
    77:84:void run() -> run
react.api.CPUResult -> aKuX:
    react.api.CPUResult ULTRA_SLOW -> MdWf
    react.api.CPUResult VERY_SLOW -> QVqP
    react.api.CPUResult SLOW -> HeiS
    react.api.CPUResult AVERAGE -> DbNV
    react.api.CPUResult GOOD -> MtxS
    react.api.CPUResult FAST -> vlNI
    react.api.CPUResult VERY_FAST -> mqsj
    react.api.CPUResult ULTRA_FAST -> jykw
    java.lang.String m -> XmGr
    react.api.CPUResult[] ENUM$VALUES -> xqsM
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> hrnU
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> uFOT:
    react.glang.GMap cache -> lfaE
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> SeQd
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> YxDt
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> yIji
    54:54:boolean has(java.lang.Object) -> aehl
react.api.Capabilities -> wKtU:
    react.api.Capabilities DUAL_WIELD -> ogYY
    react.api.Capabilities SCOREBOARD -> baRv
    react.api.Capabilities HOPPERS -> WHAv
    react.api.Capabilities ATTRIBUTES -> rEnV
    react.api.Capabilities ENTITY_AI -> ctwe
    react.api.Capabilities ACTION_BAR -> dVYA
    react.api.Capabilities ENTITY_NAMES -> ghQv
    react.surge.util.ProtocolRange r -> oohu
    java.lang.String n -> awbc
    react.api.Capabilities[] ENUM$VALUES -> OPkc
    10:18:void <clinit>() -> <clinit>
    23:27:void <init>(java.lang.String,int,java.lang.String,react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:boolean isCapable() -> ivRN
    42:43:void sendNotCapable(org.bukkit.command.CommandSender) -> hrnU
    47:48:void sendCapable(org.bukkit.command.CommandSender) -> SeQd
    1:1:react.api.Capabilities[] values() -> values
    1:1:react.api.Capabilities valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> NnrU:
    react.api.ChunkIssue ENTITY -> anqU
    react.api.ChunkIssue HOPPER -> qSks
    react.api.ChunkIssue REDSTONE -> LaTC
    react.api.ChunkIssue FLUID -> WYBi
    react.api.ChunkIssue PHYSICS -> pXxg
    react.api.ChunkIssue[] ENUM$VALUES -> fdmY
    3:9:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
react.api.Clip -> bOXu:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> rUwF:
    org.bukkit.command.CommandSender sender -> sender
    11:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> SeQd
    30:31:void sendResponseSuccess(java.lang.String) -> YxDt
    36:37:void sendResponseError(java.lang.String) -> aehl
    42:43:void sendResponseActing(java.lang.String) -> EmJi
react.api.ConsoleActionSource -> KThG:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> SeQd
    18:19:void sendResponseSuccess(java.lang.String) -> YxDt
    24:25:void sendResponseError(java.lang.String) -> aehl
    30:31:void sendResponseActing(java.lang.String) -> EmJi
react.api.CullList -> kjuT:
    react.glang.GSet toCull -> uFfF
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> EmJi
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> TxvD
react.api.DTest -> pXbT:
    3:3:void <init>() -> <init>
    7:58:int test() -> SLAE
react.api.EntityFlag -> WiMA:
    react.api.EntityFlag NAMED -> ctvN
    react.api.EntityFlag TAMED -> ogXS
    react.api.EntityFlag STACKED -> opJE
    react.api.EntityFlag RIDDEN -> DQKf
    react.api.EntityFlag LEASHED -> iLUL
    java.lang.String m -> XmGr
    react.api.EntityFlag[] ENUM$VALUES -> fJyx
    8:14:void <clinit>() -> <clinit>
    18:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> Ecxb
    40:60:boolean is(org.bukkit.entity.Entity) -> pPSQ
    66:66:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> VKug:
    react.glang.GSet entityTypes -> RIRf
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> JIVP
react.api.EntitySample -> kYrd:
    react.glang.GMap counts -> rgot
    react.glang.GMap sets -> uFfN
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> DrYG
    45:45:react.glang.GList getTypes() -> iSmr
    50:57:int total() -> Tpea
    62:67:int get(org.bukkit.entity.EntityType) -> hrnU
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> SeQd
    84:96:void add(org.bukkit.entity.Entity) -> EmJi
react.api.Experimental -> TyVL:
react.api.IAction -> oMNU:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> OYFQ
    void act(react.api.IActionSource,react.api.ISelector[]) -> SeQd
    void enact(react.api.IActionSource,react.api.ISelector[]) -> hrnU
    react.api.ActionState getState() -> NLqG
    react.api.ActionTargetType getTarget() -> mGIR
    void setNodes(java.lang.String[]) -> hrnU
    java.lang.String[] getNodes() -> GbPG
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> hrnU
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> iSmf
    react.glang.GMap getDefaultSelectors() -> EBVk
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> hrnU
    react.api.ISelector[] biselect(react.api.ISelector[]) -> hrnU
    react.api.IActionSource getCurrentSource() -> avjs
    void completeAction() -> bhmC
react.api.IActionSource -> FMiX:
    void sendResponse(java.lang.String) -> SeQd
    void sendResponseSuccess(java.lang.String) -> YxDt
    void sendResponseError(java.lang.String) -> aehl
    void sendResponseActing(java.lang.String) -> EmJi
react.api.ICache -> IEpn:
    react.glang.GSet get(java.lang.Object) -> SeQd
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> YxDt
    void clear() -> clear
    boolean has(java.lang.Object) -> aehl
    react.glang.GList k() -> yIji
react.api.ICommand -> Ptxs:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> aKuX
    java.lang.String[] getPermissions() -> uFOT
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> Ecxb
    react.api.SideGate getSideGate() -> wKtU
    void registerParameterDescription(java.lang.String,java.lang.String) -> hrnU
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> hrnU
react.api.IRecord -> Cnsc:
    java.lang.String getRecordType() -> NnrU
    long getRecordTime() -> bOXu
    react.json.JSONObject toJSON() -> rUwF
    java.lang.Object getRecordObject() -> KThG
    void fromJSON(react.json.JSONObject) -> hrnU
react.api.IRecordBook -> hPim:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> hrnU
    long getOldestRecordTime() -> kjuT
    void addRecord(react.api.IRecord) -> hrnU
    long getLatestRecordTime() -> pXbT
    int countRecords(long,long) -> hrnU
    react.glang.GMap getRecords(long,long) -> SeQd
    int purgeRecordsBefore(long) -> SeQd
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> MlQM:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> WiMA
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> VKug
    react.surge.util.C getAltColor() -> kYrd
    void setColor(react.surge.util.C,react.surge.util.C) -> hrnU
    int getInterval() -> getInterval
    void setInterval(int) -> SeQd
    void sample() -> TyVL
    java.lang.String get() -> get
    void construct() -> oMNU
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> turg:
    react.api.SelectionMode getMode() -> FMiX
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> EmJi
    react.glang.GSet getList() -> IEpn
    react.glang.GSet getPossibilities() -> Ptxs
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> Ecxb
    java.lang.String getName() -> getName
react.api.Injection -> ArAl:
    react.api.InjectionMethod value() -> Cnsc
react.api.InjectionMethod -> Xtbu:
    react.api.InjectionMethod SWAP -> JlPE
    react.api.InjectionMethod SUBSTRATE -> SDEg
    react.api.InjectionMethod RELOAD -> fTMX
    react.api.InjectionMethod[] ENUM$VALUES -> QhRy
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> mXMW:
    java.lang.String value() -> value
react.api.MSampler -> Cfei:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> hPim
react.api.MonitorHeading -> wwLh:
    react.api.ISampler head -> JkoM
    react.glang.GList children -> wMMA
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> hrnU
    27:27:react.api.ISampler getHead() -> MlQM
    32:33:void setHead(react.api.ISampler) -> SeQd
    37:37:react.glang.GList getChildren() -> turg
    42:42:java.lang.String getHeadText() -> ArAl
    47:60:java.lang.String getChildText() -> Xtbu
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> hrnU
react.api.NoiseGenerator -> oVBs:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> BRaE:
    react.api.NoiseGenerator[] octaves -> RkUw
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> mXMW
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> pOtM:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> qSjr
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> Cfei
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> xGKW:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> hrnU
react.api.Permissable -> iusc:
    react.api.Permissable ACCESS -> WOsi
    react.api.Permissable MONITOR -> dolJ
    react.api.Permissable MONITOR_TITLE -> Wifb
    react.api.Permissable MONITOR_ACTIONLOG -> palw
    react.api.Permissable MONITOR_MAP -> psPK
    react.api.Permissable MONITOR_ENVIRONMENT -> sADP
    react.api.Permissable MONITOR_GLASSES -> Xcxf
    react.api.Permissable MONITOR_CHUNK_BLAME -> xOrB
    react.api.Permissable RAI_MONITOR -> uylm
    react.api.Permissable RAI_CONTROL -> ObPN
    react.api.Permissable RAI_ACCESS -> RkXq
    react.api.Permissable RAI -> JJOc
    react.api.Permissable ACT -> FFTK
    react.api.Permissable RELOAD -> cSWW
    java.lang.String node -> SDHp
    react.api.Permissable[] ENUM$VALUES -> imyE
    7:22:void <clinit>() -> <clinit>
    26:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> YxDt
    46:46:java.lang.String getNode() -> wwLh
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PlayerActionSource -> eGdB:
    org.bukkit.entity.Player p -> uOXp
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> SeQd
    30:31:void sendResponseSuccess(java.lang.String) -> YxDt
    36:37:void sendResponseError(java.lang.String) -> aehl
    42:43:void sendResponseActing(java.lang.String) -> EmJi
react.api.PluginSelfDeleter -> romJ:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> GcGp
    java.lang.Runnable r -> vJKi
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> hrnU
react.api.RAIActionSource -> nlPu:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> SeQd
    16:17:void sendResponseSuccess(java.lang.String) -> YxDt
    22:23:void sendResponseError(java.lang.String) -> aehl
    28:29:void sendResponseActing(java.lang.String) -> EmJi
react.api.ReactCommand -> oLpU:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> rhRl
    java.lang.String usage -> QyUy
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> Puqx
    react.api.SideGate sideGate -> XRvA
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> Ecxb
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> hrnU
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> aKuX
    47:47:java.lang.String[] getPermissions() -> uFOT
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> wKtU
react.api.ReactException -> kshd:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> KCjF:
    react.glang.GMap keystore -> ssgA
    boolean monitoring -> monitoring
    boolean actionlogging -> OQMV
    boolean glasses -> FxvT
    boolean mapping -> qBlB
    int monitorSelection -> oDug
    int plays -> Drox
    boolean monitorPosted -> DPmY
    int monitorLastSelection -> kJKt
    int switchNotification -> Tymy
    int hotbarSlot -> tfID
    boolean shift -> NMib
    int scroll -> SUJC
    double lastHeight -> MljD
    boolean heightMovement -> APUi
    org.bukkit.entity.Player p -> uOXp
    24:39:void <clinit>() -> <clinit>
    42:89:void <init>(org.bukkit.entity.Player) -> <init>
    95:102:void save() -> save
    108:115:void load() -> load
    119:119:boolean isMonitoring() -> oVBs
    124:124:boolean isMapping() -> BRaE
    129:129:org.bukkit.entity.Player getP() -> pOtM
    134:136:void setMonitoring(boolean) -> SeQd
    140:142:void setMapping(boolean) -> YxDt
    146:146:int getMonitorSelection() -> xGKW
    151:153:void setMonitorSelection(int) -> YxDt
    157:157:int getHotbarSlot() -> iusc
    162:164:void setHotbarSlot(int) -> aehl
    168:168:boolean isShifting() -> eGdB
    173:175:void setShifting(boolean) -> aehl
    179:179:boolean isShift() -> romJ
    184:186:void setShift(boolean) -> EmJi
    190:190:int getScroll() -> nlPu
    195:197:void setScroll(int) -> EmJi
    201:201:int getMonitorLastSelection() -> oLpU
    206:208:void setMonitorLastSelection(int) -> Ecxb
    212:213:void setP(org.bukkit.entity.Player) -> hrnU
    217:217:double getLastHeight() -> kshd
    222:224:void setLastHeight(double) -> hrnU
    228:228:boolean isHeightMovement() -> KCjF
    233:235:void setHeightMovement(boolean) -> Ecxb
    239:239:int getSwitchNotification() -> YDbH
    244:246:void setSwitchNotification(int) -> pPSQ
    250:250:boolean getMonitorPosted() -> NLsQ
    255:257:void setMonitorPosted(boolean) -> pPSQ
    261:261:int getPlays() -> byoo
    266:268:void setPlays(int) -> AFix
    272:272:boolean isGlasses() -> dnuA
    277:279:void setGlasses(boolean) -> AFix
    283:283:boolean isActionlogging() -> NoVn
    288:290:void setActionlogging(boolean) -> yknP
react.api.Record -> YDbH:
    java.lang.String recordType -> VMQQ
    long recordTime -> qSqE
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> NnrU
    32:32:long getRecordTime() -> bOXu
    38:38:java.lang.Object getRecordObject() -> KThG
    react.json.JSONObject toJSON() -> rUwF
    void fromJSON(react.json.JSONObject) -> hrnU
react.api.RecordBook -> NLsQ:
    java.io.File recordFile -> yAug
    react.json.JSONObject js -> htJp
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> hrnU
    79:87:react.api.IRecord getRecord(long) -> hrnU
    react.api.IRecord createDummyRecord(long,java.lang.String) -> hrnU
    95:107:long getOldestRecordTime() -> kjuT
    113:125:long getLatestRecordTime() -> pXbT
    130:130:boolean within(long,long,long) -> hrnU
    136:144:int countRecords(long,long) -> hrnU
    150:162:react.glang.GMap getRecords(long,long) -> SeQd
    168:181:int purgeRecordsBefore(long) -> SeQd
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> byoo:
react.api.SampledChunk -> dnuA:
    org.bukkit.Chunk c -> aEBg
    react.glang.GMap counts -> rgot
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> UcJQ
    26:38:void hit(react.api.ChunkIssue,int) -> hrnU
    42:42:org.bukkit.Chunk getC() -> Oqxn
    47:47:react.glang.GMap getCounts() -> xXLV
react.api.SampledType -> NoVn:
    react.api.SampledType ENTITY_TIME_LOCK -> yKGq
    react.api.SampledType TILE_TIME_LOCK -> Rsjj
    react.api.SampledType ENTITY_TIME -> YooE
    react.api.SampledType TILE_TIME -> AHGY
    react.api.SampledType ENTITY_DROPTICK -> iDIf
    react.api.SampledType TILE_DROPTICK -> WPWA
    react.api.SampledType REDSTONE_TICK_USAGE -> WYHK
    react.api.SampledType REDSTONE_TICK -> tTid
    react.api.SampledType REDSTONE_SECOND -> EnGO
    react.api.SampledType REDSTONE_TIME -> OYaL
    react.api.SampledType HOPPER_TICK_USAGE -> WiiR
    react.api.SampledType HOPPER_TICK -> AjJM
    react.api.SampledType HOPPER_SECOND -> fnDb
    react.api.SampledType HOPPER_TIME -> ktcH
    react.api.SampledType FLUID_TICK_USAGE -> qnDO
    react.api.SampledType FLUID_TICK -> ycwt
    react.api.SampledType FLUID_SECOND -> Hvmb
    react.api.SampledType FLUID_TIME -> IhoQ
    react.api.SampledType TPS -> tmyu
    react.api.SampledType TICK -> LHFJ
    react.api.SampledType TIU -> HfMV
    react.api.SampledType MEM -> VwfF
    react.api.SampledType FREEMEM -> lgEB
    react.api.SampledType MAXMEM -> rODE
    react.api.SampledType ALLOCMEM -> afdE
    react.api.SampledType MAHS -> fvUA
    react.api.SampledType CHK_TIME -> XRxV
    react.api.SampledType EXPLOSION_TIME -> AijK
    react.api.SampledType CHK -> IhpF
    react.api.SampledType ATASK -> EeUL
    react.api.SampledType STASK -> QxxN
    react.api.SampledType CHKS -> QyYL
    react.api.SampledType ENT -> KxGw
    react.api.SampledType ENTLIV -> ifOC
    react.api.SampledType ENTDROP -> GblT
    react.api.SampledType ENTTILE -> lnvj
    java.lang.String node -> SDHp
    react.api.SampledType[] ENUM$VALUES -> VVFg
    6:43:void <clinit>() -> <clinit>
    49:49:react.api.ISampler get() -> gpMq
    55:55:java.lang.String toString() -> toString
    58:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> wwLh
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> UcJQ:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> DkFJ
    react.surge.util.C altColor -> EnHm
    int interval -> KwjJ
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> VKug
    49:49:react.surge.util.C getAltColor() -> kYrd
    55:55:int getInterval() -> getInterval
    void sample() -> TyVL
    void construct() -> oMNU
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> hrnU
    107:108:void setInterval(int) -> SeQd
react.api.Sector -> Oqxn:
    int value() -> value
react.api.SelectionException -> xXLV:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> gpMq:
    react.api.SelectionMode WHITELIST -> uyqP
    react.api.SelectionMode BLACKLIST -> WYJg
    react.api.SelectionMode[] ENUM$VALUES -> maXh
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> OYGx:
    java.lang.Class objectType -> sRIW
    react.api.SelectionMode mode -> VnxR
    react.glang.GSet list -> xGec
    react.glang.GSet possibilities -> wMSj
    int popoff -> WikP
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> FMiX
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> EmJi
    43:43:react.glang.GSet getList() -> IEpn
    49:49:react.glang.GSet getPossibilities() -> Ptxs
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> Ecxb
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> pPSQ
    98:100:int pop() -> pop
react.api.SelectorEntityType -> TqGQ:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> YxDt
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> Ecxb
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> AFix
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> bhmU:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> aKvy:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> SeQd
    29:30:void add(org.bukkit.Chunk,int) -> hrnU
    34:38:void add(org.bukkit.World) -> Ecxb
    42:46:void addAll() -> OYGx
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> Ecxb
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> AFix
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> UkXk:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> Ecxb
    87:87:java.lang.String getName() -> getName
react.api.Side -> jVrV:
    react.api.Side PLAYERS -> ivmq
    react.api.Side CONSOLE -> SULn
    java.lang.String ss -> qmcy
    react.api.Side[] ENUM$VALUES -> NMly
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> TqGQ
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> aehl
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> cIlu:
    react.api.SideGate PLAYERS_ONLY -> kIpJ
    react.api.SideGate CONSOLES_ONLY -> sbhu
    react.api.SideGate ANYTHING -> mOvM
    int[] $SWITCH_TABLE$react$api$SideGate -> JJSA
    react.api.SideGate[] ENUM$VALUES -> EKdK
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> hrnU
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> bhmU
react.api.SimplexNoiseGenerator -> aeit:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> WOvc
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> aKvy
react.api.SimplexOctaveGenerator -> OjHT:
    double wScale -> kSBX
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> hrnU
react.api.SpecializedTickLimiter -> jVqw:
    double rMaxTime -> kJOs
    long rStartTime -> JuFl
    double rLastTime -> TaAg
    long rMark -> ssil
    double tMaxTime -> DkDs
    react.gmath.Average atimes -> JIqg
    react.gmath.Average adropped -> scJI
    int droppedTicks -> uGLg
    boolean entityTick -> VEDh
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> NMSB:
    react.glang.GList sources -> dNLr
    react.glang.GList splooge -> AjNc
    react.glang.GSet destroy -> PdxK
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> hrnU
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> SeQd
    void clipped(org.bukkit.Location) -> hrnU
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> SeQd
    boolean isAllowedSource(org.bukkit.Location) -> YxDt
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> hrnU
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> SeQd
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> YxDt
react.api.SploogeCounter$1 -> NMSB$1:
    react.api.SploogeCounter this$0 -> sAIr
    java.util.Iterator val$it -> jFoe
    org.bukkit.Location val$start -> JJUY
    int val$maxDistance -> esVM
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> hrnU
react.api.SploogeCounter$1$1 -> NMSB$1$1:
    react.api.SploogeCounter$1 this$1 -> wDds
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> Jbgw:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> salv:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> rUwF
    38:49:void fromJSON(react.json.JSONObject) -> hrnU
react.api.StackTraceRecordBook -> onsN:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> SeQd
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> hrnU
react.api.StackedEntity -> TxvY:
    org.bukkit.entity.LivingEntity entity -> NWCI
    int count -> count
    double rmx -> GspR
    20:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> hrnU
    46:46:int getAbsoluteMaxCount() -> UkXk
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> SeQd
    56:58:void update() -> update
    62:68:void signalSize() -> jVrV
    72:123:void updateHealth() -> cIlu
    127:128:void heal(double) -> SeQd
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> aeit
    142:142:int getEffectiveCount(double) -> YxDt
    147:147:double getEffectiveMaxHealth(int) -> yknP
    152:152:double getRealMaxHealth() -> OjHT
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> hrnU
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> BuEb:
    react.glang.GList headings -> wLty
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> hrnU
    24:24:int getMaxSelection() -> jVqw
    29:37:int left(int) -> FDyI
    42:50:int right(int) -> OYFQ
    55:55:react.api.MonitorHeading getHeadFor(int) -> NLqG
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> hrnU
    83:100:java.lang.String getHotbarFor(int,boolean) -> hrnU
react.api.Unused -> IVsw:
react.binject.BlockInjector -> wwJm:
    react.surge.util.Protocol protocol -> uaCR
    java.lang.Class blocksClass -> xijo
    12:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> hrnU
    29:56:void inject() -> NMSB
    61:61:react.surge.util.Protocol getVersion() -> Jbgw
react.binject.IBlockInjector -> kbfS:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> hrnU
    void add(int,java.lang.String,java.lang.Object) -> hrnU
    java.lang.Object get(java.lang.String) -> get
    void inject() -> NMSB
    react.surge.util.Protocol getVersion() -> Jbgw
react.binject.InjectedBlock -> NDbJ:
    react.surge.util.Protocol getInjectProtocol() -> salv
    java.lang.String getInjectKey() -> onsN
    java.lang.String getInjectCKey() -> TxvY
    int getInjectId() -> BuEb
react.binject.ReflectionUtil -> gUyY:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> hrnU
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> hrnU
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> hrnU
    41:54:void setAccessible(java.lang.reflect.Field) -> hrnU
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> hrnU
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> hrnU
react.binject.V10.BlockInjector10 -> xGIb:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> pPSQ
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> hrnU
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> hrnU
react.binject.V11.BlockInjector11 -> DOxM:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> AFix
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> hrnU
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> hrnU
react.binject.V12.BlockInjector12 -> tBpY:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> yknP
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> hrnU
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> hrnU
react.binject.V8.BlockInjector8 -> iCRJ:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> FDyI
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> hrnU
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> hrnU
react.binject.V9.BlockInjector9 -> idtN:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> OYFQ
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> hrnU
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> hrnU
react.cache.CachedEntity -> FMmo:
    java.util.UUID uid -> pjde
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> QOJU
    double x -> x
    double y -> y
    double z -> z
    double vx -> Vwkd
    double vy -> TyvK
    double vz -> uhqc
    double dx -> DYef
    double dy -> TiUQ
    double dz -> UkwQ
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> AFix
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> IVsw
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> wwJm
    120:121:void setVx(double) -> aehl
    125:125:double getVy() -> kbfS
    130:131:void setVy(double) -> EmJi
    135:135:double getVz() -> NDbJ
    140:141:void setVz(double) -> Ecxb
    145:145:double getDx() -> gUyY
    150:151:void setDx(double) -> pPSQ
    155:155:double getDy() -> xGIb
    160:161:void setDy(double) -> AFix
    165:165:double getDz() -> DOxM
    170:171:void setDz(double) -> yknP
    175:175:java.util.UUID getUid() -> tBpY
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> UHxT:
    int age -> vuGV
    boolean ageLock -> NpUQ
    boolean breed -> bilU
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> AFix
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> iCRJ
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> idtN
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> uNdh:
    org.bukkit.DyeColor dye -> HCoS
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> AFix
    30:30:org.bukkit.DyeColor getDye() -> FMmo
    35:36:void setDye(org.bukkit.DyeColor) -> hrnU
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> DYJb:
    react.glang.GList potionEffects -> jWqR
    boolean canPickupItems -> rhYX
    org.bukkit.inventory.ItemStack[] armorContents -> gNfq
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> VUfq
    double maxHealth -> maxHealth
    int maxAir -> pPpa
    int air -> kRcR
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> AFix
    63:63:react.glang.GList getPotionEffects() -> UHxT
    68:69:void setPotionEffects(react.glang.GList) -> SeQd
    73:73:boolean isCanPickupItems() -> uNdh
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> DYJb
    138:139:void setMaxAir(int) -> mGIR
    143:143:int getAir() -> MtfI
    148:149:void setAir(int) -> iSmf
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> MtfI:
    boolean sheared -> jWox
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> AFix
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> HnGm:
    org.bukkit.inventory.ItemStack is -> gqJx
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> AFix
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> kAHP:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> Mccx:
    react.chronophysics.HopperDirection DOWN -> oopo
    react.chronophysics.HopperDirection NORTH -> FqML
    react.chronophysics.HopperDirection SOUTH -> opRP
    react.chronophysics.HopperDirection EAST -> dxcL
    react.chronophysics.HopperDirection WEST -> urBi
    int direction -> direction
    int[] $SWITCH_TABLE$react$chronophysics$HopperDirection -> pjcI
    react.chronophysics.HopperDirection[] ENUM$VALUES -> Hnar
    6:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> aehl
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> hrnU
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> SeQd
    1:1:react.chronophysics.HopperDirection[] values() -> values
    1:1:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    6:6:int[] $SWITCH_TABLE$react$chronophysics$HopperDirection() -> HnGm
react.chronophysics.HopperWormhole -> XSCa:
    org.bukkit.block.Hopper source -> Ihsi
    react.glang.GList path -> uGNi
    org.bukkit.block.Hopper destination -> BmRG
    17:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> kAHP
    31:31:react.glang.GList getPath() -> Mccx
    36:36:org.bukkit.block.Hopper getDestination() -> XSCa
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> hrnU
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> HnHU:
    org.bukkit.block.Hopper h -> GsrI
    13:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> hrnU
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> HnHU
    62:62:boolean isLockedByRedstone() -> fKKD
react.command.CommandAct -> fKKD:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> hrnU
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> hrnU
    186:192:react.text.RTX getBeginningRTX() -> ydCE
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> hrnU
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> SeQd
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> YxDt
    331:346:react.glang.GList getSortedCommands() -> CMTt
    351:358:int getPageSize(int) -> EBVk
    363:363:boolean isValidPage(int,int) -> hrnU
    368:377:react.glang.GList getPage(int,int) -> SeQd
react.command.CommandActionLog -> ydCE:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> hrnU
react.command.CommandCPUScore -> CMTt:
    15:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> hrnU
react.command.CommandCapabilities -> VwQD:
    15:23:void <init>() -> <init>
    28:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> hrnU
react.command.CommandChunkBlame -> xiPD:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> hrnU
react.command.CommandChunkBlame$1 -> xiPD$1:
    react.command.CommandChunkBlame this$0 -> jObq
    org.bukkit.command.CommandSender val$sender -> tCmn
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> xiPD$1$1:
    react.command.CommandChunkBlame$1 this$1 -> VgMK
    org.bukkit.command.CommandSender val$sender -> tCmn
    java.lang.String val$i -> kBEg
    react.glang.GMap val$top -> SUQw
    int val$totalx -> PmkW
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> YDco:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> hrnU
react.command.CommandHelp -> DGhc:
    27:36:void <init>() -> <init>
    41:42:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> hrnU
    46:65:void sendPage(org.bukkit.command.CommandSender,int,int) -> hrnU
    69:75:react.text.RTX getBeginningRTX() -> ydCE
    80:140:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> hrnU
    144:154:void sendHeader(org.bukkit.command.CommandSender,int,int) -> SeQd
    158:187:void sendFooter(org.bukkit.command.CommandSender,int,int) -> YxDt
    191:198:react.glang.GList getSortedCommands() -> CMTt
    203:210:int getPageSize(int) -> EBVk
    215:215:boolean isValidPage(int,int) -> hrnU
    220:229:react.glang.GList getPage(int,int) -> SeQd
react.command.CommandMap -> myov:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> hrnU
react.command.CommandMonitor -> KemU:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> hrnU
react.command.CommandReload -> HTSg:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> hrnU
react.command.CommandReload$1 -> HTSg$1:
    react.command.CommandReload this$0 -> cKOc
    org.bukkit.command.CommandSender val$sender -> tCmn
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> HTSg$1$1:
    react.command.CommandReload$1 this$1 -> Winy
    org.bukkit.command.CommandSender val$sender -> tCmn
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> dgFO:
    27:35:void <init>() -> <init>
    40:48:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> hrnU
    52:61:org.bukkit.inventory.ItemStack makeBook() -> VwQD
    66:92:void addSpikePages(react.glang.GList) -> YxDt
    96:106:void addStatusPages(react.glang.GList) -> aehl
    110:127:int findSlot(org.bukkit.entity.Player) -> SeQd
react.controller.ActionController -> GsSm:
    int kiv -> pbVE
    react.glang.GMap actions -> ECXo
    react.glang.GMap pending -> prvV
    react.glang.GList tasks -> YWDe
    20:20:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:70:void start() -> start
    74:75:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> hrnU
    79:100:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> SeQd
    105:105:react.api.IAction getAction(react.api.ActionType) -> hrnU
    110:111:void registerAction(react.api.IAction) -> hrnU
    117:117:void stop() -> stop
    122:187:void tick() -> tick
    191:191:react.glang.GList getActions() -> xiPD
    196:203:react.glang.GList getActionNames() -> YDco
react.controller.BenchmarkController -> JRJH:
    react.api.CPUBenchmark finished -> XdbT
    boolean done -> pYdh
    int score -> nmDQ
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    16:16:void access$0(react.controller.BenchmarkController,boolean) -> hrnU
    15:15:void access$1(react.controller.BenchmarkController,react.api.CPUBenchmark) -> hrnU
    15:15:react.api.CPUBenchmark access$2(react.controller.BenchmarkController) -> hrnU
react.controller.BenchmarkController$1 -> JRJH$1:
    react.controller.BenchmarkController this$0 -> MlsS
    1:26:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
    26:26:react.controller.BenchmarkController access$0(react.controller.BenchmarkController$1) -> hrnU
react.controller.BenchmarkController$1$1 -> JRJH$1$1:
    react.controller.BenchmarkController$1 this$1 -> WHMP
    1:31:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
    31:31:react.controller.BenchmarkController$1 access$0(react.controller.BenchmarkController$1$1) -> hrnU
react.controller.BenchmarkController$1$1$1 -> JRJH$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> LYPB
    1:36:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> XSAr:
    react.glang.GMap rangeMapping -> SMCD
    react.binject.IBlockInjector injector -> uPBo
    boolean injected -> dhDq
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> DGhc
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> myov
    115:115:react.binject.IBlockInjector getInjector() -> KemU
    120:120:boolean isInjected() -> HTSg
react.controller.ChronophyFluidController -> byqE:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> APAi:
    boolean firstTickList -> xYKg
    long firstTick -> RRMv
    long lastTick -> YhDr
    react.gmath.Average aCSMS -> vJTN
    react.glang.GMap pluginLoads -> jPCI
    react.glang.GMap playerLoads -> AGmH
    int serverLoads -> CyJU
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> dgFO
    63:73:void tickNextTickList() -> GsSm
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> hrnU
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> hrnU
    171:171:boolean isFirstTickList() -> JRJH
    176:176:long getFirstTick() -> XSAr
    181:181:long getLastTick() -> byqE
    186:186:react.gmath.Average getaCSMS() -> APAi
    191:191:react.glang.GMap getPluginLoads() -> IqIi
    196:196:react.glang.GMap getPlayerLoads() -> uODf
    201:201:int getServerLoads() -> hapR
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> hrnU
    29:29:int access$1(react.controller.ChunkController) -> SeQd
    29:29:void access$2(react.controller.ChunkController,int) -> hrnU
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> YxDt
react.controller.ChunkController$1 -> APAi$1:
    react.controller.ChunkController this$0 -> CMuI
    org.bukkit.event.world.ChunkLoadEvent val$e -> Rkbi
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> YxDt
    1:1:void run(java.lang.Object) -> hrnU
react.controller.CommandController -> IqIi:
    react.glang.GList commands -> ELLO
    boolean k -> IOgJ
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> yknP
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> FDyI
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> hrnU
    317:317:react.glang.GList getCommands() -> oECE
    322:323:void setCommands(react.glang.GList) -> EmJi
    327:327:boolean isK() -> sPnJ
    332:333:void setK(boolean) -> FDyI
react.controller.EntityCullController -> uODf:
    react.glang.GSet flags -> ndcL
    react.glang.GSet defer -> URiV
    react.glang.GMap maxs -> uOde
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> yIms
    172:180:int cull(org.bukkit.Chunk) -> YxDt
    185:285:int partialCull(org.bukkit.Chunk) -> aehl
react.controller.EntityStackController -> hapR:
    react.glang.GList stacks -> NyJV
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> Ecxb
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> YxDt
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> aehl
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> hrnU
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> hrnU
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> EmJi
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> hrnU
react.controller.EntityStackController$1 -> hapR$1:
    react.controller.EntityStackController this$0 -> ymSI
    org.bukkit.event.entity.EntitySpawnEvent val$e -> YyIb
    1:248:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> oECE:
    react.glang.GMap slots -> bHOA
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> hrnU
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> hrnU
react.controller.ExplosiveController -> sPnJ:
    boolean firstTickList -> xYKg
    long firstTick -> RRMv
    long lastTick -> YhDr
    react.gmath.Average aCSMS -> vJTN
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> dgFO
    50:60:void tickNextTickList() -> GsSm
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> hrnU
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> hrnU
    89:89:boolean isFirstTickList() -> JRJH
    94:94:long getFirstTick() -> XSAr
    99:99:long getLastTick() -> byqE
    104:104:react.gmath.Average getaCSMS() -> APAi
react.controller.FastDecayController -> yIms:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> hrnU
    47:123:void checkBreak(org.bukkit.block.Block) -> YxDt
    127:135:void decay(org.bukkit.block.Block) -> aehl
    141:141:void tick() -> tick
react.controller.FastDecayController$1 -> yIms$1:
    react.controller.FastDecayController this$0 -> BltS
    react.glang.GMap val$locs -> JSJu
    1:56:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    61:61:boolean isAllowedSplooge(org.bukkit.Location) -> SeQd
    67:67:boolean isAllowedSource(org.bukkit.Location) -> YxDt
    73:92:void clipped(org.bukkit.Location) -> hrnU
    97:120:void finished() -> finished
    56:56:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> hrnU
react.controller.FastDecayController$1$1 -> yIms$1$1:
    react.controller.FastDecayController$1 this$1 -> iLbE
    react.glang.GMap val$locs -> JSJu
    int val$i -> jywr
    1:101:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    106:116:void run() -> run
react.controller.FastDecayController$2 -> yIms$2:
    react.controller.FastDecayController this$0 -> BltS
    org.bukkit.block.Block val$b -> tMBU
    1:127:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    132:133:void run() -> run
react.controller.FeatureController -> MBBA:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.FluidController -> AaCQ:
    react.glang.GSet ignore -> jqhI
    int flowsPerTick -> HTuA
    int flowsPerSecond -> dWFE
    react.gmath.Average aFST -> htST
    react.gmath.Average aFSS -> vuKV
    react.gmath.Average aFSMS -> JuOA
    boolean firstTickList -> xYKg
    long firstTick -> RRMv
    long lastTick -> YhDr
    react.glang.GSet frozen -> uFsJ
    react.glang.GMap queue -> QqQj
    react.glang.GMap freezeTimes -> YovJ
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> EmJi
    68:76:void checkChunks() -> MBBA
    80:97:void checkChunk(org.bukkit.Chunk) -> Ecxb
    101:107:void queue(org.bukkit.block.Block) -> EmJi
    111:111:boolean isFrozen(org.bukkit.Chunk) -> pPSQ
    116:117:void freeze(org.bukkit.Chunk) -> AFix
    121:127:void unfreeze(org.bukkit.Chunk) -> yknP
    131:138:void freeze(org.bukkit.Chunk,long) -> hrnU
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> dgFO
    172:182:void tickNextTickList() -> GsSm
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> hrnU
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> hrnU
    248:248:react.glang.GSet getIgnore() -> AaCQ
    253:253:int getTransfersPerTick() -> BAbK
    258:258:int getTransfersPerSecond() -> onuD
    263:263:react.gmath.Average getaFST() -> JQjB
    268:268:react.gmath.Average getaFSS() -> MBAf
    273:273:react.gmath.Average getaFSMS() -> VnaR
    278:278:boolean isFirstTickList() -> JRJH
    283:283:long getFirstTick() -> XSAr
    288:288:long getLastTick() -> byqE
    293:293:react.glang.GSet getFrozen() -> dfgs
    298:298:react.glang.GMap getQueue() -> mXQV
    303:303:react.glang.GMap getFreezeTimes() -> OYKb
react.controller.GlassController -> BAbK:
    react.glang.GMap q -> XvDn
    react.glang.GList g -> LjQY
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> YxDt
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> aehl
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> EmJi
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> hrnU
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> hrnU
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> hrnU
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> hrnU
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> hrnU
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> hrnU
    36:36:react.glang.GList access$0(react.controller.GlassController) -> hrnU
react.controller.GlassController$1 -> BAbK$1:
    react.controller.GlassController this$0 -> qTXe
    react.glang.GMap val$cc -> ThwE
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> BAbK$1$1:
    react.controller.GlassController$1 this$1 -> dxey
    org.bukkit.Location val$i -> mYMv
    org.bukkit.entity.Player val$j -> nJnf
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> onuD:
    react.glang.GMap g -> pQUp
    react.glang.GMap gr -> UBGi
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> hrnU
    121:156:void toggleMapping(org.bukkit.entity.Player) -> Ecxb
    160:160:react.glang.GMap getG() -> IExC
    165:165:react.glang.GMap getGr() -> vIXx
    31:31:react.glang.GMap access$0(react.controller.GraphController) -> hrnU
    30:30:react.glang.GMap access$1(react.controller.GraphController) -> SeQd
react.controller.GraphController$1 -> onuD$1:
    react.controller.GraphController this$0 -> SDQo
    1:48:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> onuD$2:
    react.controller.GraphController this$0 -> SDQo
    1:84:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> onuD$3:
    react.controller.GraphController this$0 -> SDQo
    org.bukkit.event.player.PlayerJoinEvent val$e -> opUr
    1:100:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> JQjB:
    react.glang.GSet ignore -> jqhI
    int transfersPerTick -> stQm
    int transfersPerSecond -> tDOw
    react.gmath.Average aHST -> xjOF
    react.gmath.Average aHSS -> ierV
    react.gmath.Average aHSMS -> twSt
    boolean firstTickList -> xYKg
    long firstTick -> RRMv
    long lastTick -> YhDr
    react.glang.GSet frozen -> uFsJ
    react.glang.GMap queue -> QqQj
    react.glang.GMap freezeTimes -> YovJ
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> EmJi
    65:73:void checkChunks() -> MBBA
    77:94:void checkChunk(org.bukkit.Chunk) -> Ecxb
    98:104:void queue(org.bukkit.block.Block) -> EmJi
    108:108:boolean isFrozen(org.bukkit.Chunk) -> pPSQ
    113:114:void freeze(org.bukkit.Chunk) -> AFix
    118:124:void unfreeze(org.bukkit.Chunk) -> yknP
    128:135:void freeze(org.bukkit.Chunk,long) -> hrnU
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> dgFO
    169:179:void tickNextTickList() -> GsSm
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> hrnU
    207:207:react.glang.GSet getIgnore() -> AaCQ
    212:212:int getTransfersPerTick() -> BAbK
    217:217:int getTransfersPerSecond() -> onuD
    222:222:react.gmath.Average getaHST() -> uhYY
    227:227:react.gmath.Average getaHSS() -> pHHm
    232:232:react.gmath.Average getaHSMS() -> UHyq
    237:237:boolean isFirstTickList() -> JRJH
    242:242:long getFirstTick() -> XSAr
    247:247:long getLastTick() -> byqE
    252:252:react.glang.GSet getFrozen() -> dfgs
    257:257:react.glang.GMap getQueue() -> mXQV
    262:262:react.glang.GMap getFreezeTimes() -> OYKb
react.controller.HopperOvertickController -> MBAf:
    react.glang.GList possiblePlunge -> kIty
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> YxDt
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> hrnU
react.controller.LanguageController -> VnaR:
    java.io.File languageFolder -> biob
    int oldVersion -> sQlo
    java.io.File dlf -> rpmP
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> rpRL
    160:221:void downloadAll(boolean) -> OYFQ
    225:261:void downloadLanguage(java.lang.String) -> NLqG
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> mGIR
    315:315:java.io.File getFileForLanguage(java.lang.String) -> iSmf
    320:332:void writeDefaults() -> hYcO
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> hrnU
    263:263:void access$1(react.controller.LanguageController) -> hrnU
react.controller.LanguageController$1 -> VnaR$1:
    react.controller.LanguageController this$0 -> iTpo
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> VnaR$2:
    react.controller.LanguageController this$0 -> iTpo
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> hrnU
react.controller.LanguageController$2$1 -> VnaR$2$1:
    react.controller.LanguageController$2 this$1 -> FqRC
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> hrnU
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> hrnU
    121:121:void onDownloadStarted(react.gnet.download.Download) -> hrnU
    126:128:void onDownloadFinished(react.gnet.download.Download) -> SeQd
    134:134:void onDownloadFailed(react.gnet.download.Download) -> YxDt
react.controller.LanguageController$3 -> VnaR$3:
    react.controller.LanguageController this$0 -> iTpo
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> VnaR$3$1:
    react.controller.LanguageController$3 this$1 -> jhvF
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> VnaR$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> WsDq
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> VnaR$4:
    react.controller.LanguageController this$0 -> iTpo
    java.io.File val$dld -> lxQX
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> hrnU
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> hrnU
    245:245:void onDownloadStarted(react.gnet.download.Download) -> hrnU
    250:251:void onDownloadFinished(react.gnet.download.Download) -> SeQd
    257:257:void onDownloadFailed(react.gnet.download.Download) -> YxDt
react.controller.MonitorController -> dfgs:
    int maxCooldown -> nJqf
    react.api.TitleMonitor titleMonitor -> xHNs
    react.glang.GMap posts -> OYkG
    react.slate.PhantomSlate sb -> ydcs
    boolean ready -> vBHn
    36:36:void <clinit>() -> <clinit>
    42:47:void <init>() -> <init>
    52:87:void start() -> start
    91:91:react.slate.PhantomSlate constructActionLogBoard() -> vAHv
    96:114:void toggleActionLog(org.bukkit.entity.Player) -> pPSQ
    118:136:void toggleMonitoring(org.bukkit.entity.Player) -> AFix
    141:151:void stop() -> stop
    155:174:void constructMonitor() -> LiTk
    178:183:float calcVolume(react.api.ReactPlayer) -> hrnU
    188:188:boolean canMonitor(org.bukkit.entity.Player) -> yknP
    193:193:boolean canActionLog(org.bukkit.entity.Player) -> FDyI
    198:203:boolean isMonitoring(org.bukkit.entity.Player) -> OYFQ
    208:213:boolean isActionLogging(org.bukkit.entity.Player) -> NLqG
    218:222:void startMonitoring(org.bukkit.entity.Player) -> mGIR
    226:237:void stopMonitoring(org.bukkit.entity.Player) -> iSmf
    241:246:void startActionLogging(org.bukkit.entity.Player) -> EBVk
    250:261:void stopActionLogging(org.bukkit.entity.Player) -> bhmC
    267:267:void tick() -> tick
    271:274:void changePost(react.api.ReactPlayer) -> SeQd
    278:290:void processPlayer(react.api.ReactPlayer) -> YxDt
    295:295:void handleActionLog(org.bukkit.entity.Player) -> avjs
    299:323:void handleTriggers(react.api.ReactPlayer) -> aehl
    327:366:void handleScrolling(react.api.ReactPlayer) -> EmJi
    370:398:void handleShifting(react.api.ReactPlayer) -> Ecxb
    402:424:void handlePosting(react.api.ReactPlayer) -> pPSQ
    428:446:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> hrnU
    451:465:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> hrnU
    470:477:void tickMonitor(react.api.ReactPlayer) -> AFix
    481:481:react.api.TitleMonitor getTitleMonitor() -> GYdb
    487:496:void on(org.bukkit.event.player.PlayerJoinEvent) -> hrnU
    501:510:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> hrnU
    515:527:void onTick() -> DHJx
    531:553:void updateActionBoard() -> vRJR
    558:558:java.lang.String getTickName() -> FWBc
    89:89:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> hrnU
    39:39:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> hrnU
    40:40:void access$2(react.controller.MonitorController,boolean) -> hrnU
    40:40:boolean access$3(react.controller.MonitorController) -> SeQd
    39:39:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> YxDt
react.controller.MonitorController$1 -> dfgs$1:
    react.controller.MonitorController this$0 -> YpYd
    1:67:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    72:85:void run() -> run
react.controller.MonitorController$2 -> dfgs$2:
    react.controller.MonitorController this$0 -> YpYd
    1:531:void <init>(react.controller.MonitorController) -> <init>
    536:551:void run() -> run
react.controller.PhysicsController -> mXQV:
    react.glang.GMap samples -> yTCX
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> FDyI
    51:52:void onHopper(org.bukkit.Chunk) -> OYFQ
    56:57:void onFluid(org.bukkit.Chunk) -> NLqG
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> hrnU
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> hrnU
    80:91:void onTick() -> DHJx
    96:96:java.lang.String getTickName() -> FWBc
    101:101:react.glang.GMap getSamples() -> NVIX
react.controller.PlayerController -> OYKb:
    react.glang.GList players -> BeFy
    react.glang.GSet save -> vtmK
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> GbPG
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> hrnU
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> mylg
    113:113:react.glang.GList getPlayers() -> KnbO
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> hrnU
react.controller.PlayerController$1 -> OYKb$1:
    react.controller.PlayerController this$0 -> FhcM
    react.glang.GList val$toSave -> QydD
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> IExC:
    react.rai.IRAI rai -> urKG
    boolean raiEnabled -> sIaE
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    20:20:react.rai.IRAI access$0(react.controller.RAIController) -> hrnU
react.controller.RAIController$1 -> IExC$1:
    react.controller.RAIController this$0 -> cugS
    1:48:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> vIXx:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> YxDt
react.controller.ReactServerInfo -> uhYY:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> ghBG
    27:27:int dgetGameProtocol() -> LiTj
    33:33:java.lang.String dgetGameVersion() -> QNPp
    39:39:java.lang.String dgetReactVersion() -> ksmS
    45:45:int dgetMaxPlayers() -> FNQf
    51:58:react.glang.GList dgetConnectedPlayers() -> yktF
    64:64:int dgetViewDistance() -> gMnW
    70:70:int dgetGamePort() -> uqIb
    76:76:java.lang.String dgetGameAddress() -> QhAm
    82:89:react.glang.GList dgetRemotePlugins() -> afOU
    95:102:react.glang.GList dgetWorlds() -> INgg
    108:108:react.glang.GList dgetActions() -> nktK
    114:114:react.glang.GList dgetSamplers() -> NLuc
react.controller.RedstoneController -> pHHm:
    react.glang.GSet ignore -> jqhI
    react.glang.GSet frozen -> uFsJ
    react.glang.GMap queue -> QqQj
    react.glang.GMap freezeTimes -> YovJ
    int redstonePerTick -> OkNF
    int redstonePerSecond -> aVOX
    react.gmath.Average aRST -> neDt
    react.gmath.Average aRSS -> gqQl
    react.gmath.Average aRSMS -> WXrO
    boolean firstTickList -> xYKg
    long firstTick -> RRMv
    long lastTick -> YhDr
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> EmJi
    95:101:void tick() -> tick
    105:113:void checkChunks() -> MBBA
    117:134:void checkChunk(org.bukkit.Chunk) -> Ecxb
    138:144:void queue(org.bukkit.block.Block) -> EmJi
    148:148:boolean isFrozen(org.bukkit.Chunk) -> pPSQ
    153:154:void freeze(org.bukkit.Chunk) -> AFix
    158:165:void flushTickList() -> dgFO
    169:179:void tickNextTickList() -> GsSm
    183:189:void unfreeze(org.bukkit.Chunk) -> yknP
    193:200:void freeze(org.bukkit.Chunk,long) -> hrnU
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> hrnU
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> hrnU
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> hrnU
    246:246:react.glang.GSet getIgnore() -> AaCQ
    251:251:react.glang.GSet getFrozen() -> dfgs
    256:256:react.glang.GMap getQueue() -> mXQV
    261:261:react.glang.GMap getFreezeTimes() -> OYKb
    266:266:int getRedstonePerTick() -> dnwO
    271:271:int getRedstonePerSecond() -> mrBy
    276:276:react.gmath.Average getaRST() -> xWmt
    281:281:react.gmath.Average getaRSS() -> hkDB
    286:286:react.gmath.Average getaRSMS() -> Gjds
    291:291:boolean isFirstTickList() -> JRJH
    296:296:long getFirstTick() -> XSAr
    301:301:long getLastTick() -> byqE
react.controller.RemoteController -> UHyq:
    react.remote.server.RemoteServer remoteServer -> hlDg
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> WPBE
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> hrnU
react.controller.RemoteController$1 -> UHyq$1:
    react.controller.RemoteController this$0 -> Ngib
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> UHyq$2:
    react.controller.RemoteController this$0 -> Ngib
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> qSYy
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> aDLc
react.controller.SampleController -> rpRL:
    react.glang.GMap samplers -> XmVq
    react.surge.server.SuperSampler ss -> AYSB
    int cd -> uqhy
    28:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> kYyU
    69:74:void restartSuperSampler() -> nktA
    78:79:void registerSampler(react.api.ISampler) -> YxDt
    83:83:react.api.ISampler getSampler(java.lang.String) -> EBVk
    88:131:void constructSamplers() -> kIXe
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> iBqb
    187:209:void onTick() -> DHJx
    214:214:java.lang.String getTickName() -> FWBc
    219:219:react.glang.GMap getSamplers() -> iTTT
    224:224:react.surge.server.SuperSampler getSs() -> QWAT
    229:229:int getCd() -> YgLH
    234:241:react.glang.GList getSamplerNames() -> XAeI
    25:25:react.surge.server.SuperSampler access$0(react.controller.SampleController) -> hrnU
react.controller.SampleController$1 -> rpRL$1:
    react.controller.SampleController this$0 -> bQBC
    1:140:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> rpRL$2:
    react.controller.SampleController this$0 -> bQBC
    1:152:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> hYcO:
    java.lang.String ipa -> JRlc
    react.glang.GList failures -> XeGP
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> bhmC
    41:74:void checkForIP() -> vAKS
    78:91:void scan(java.lang.Runnable) -> hrnU
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> hYcO$1:
    react.controller.SecurityController this$0 -> UAiu
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> hYcO$2:
    java.lang.String val$ip -> wgOG
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> hYcO$3:
    java.lang.Thread val$t -> iLcR
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> vAHv:
    react.glang.GMap etl -> kckI
    react.glang.GMap ttl -> NEeP
    20:20:void <init>() -> <init>
    28:44:void start() -> start
    49:62:void stop() -> stop
    69:76:void on(org.bukkit.event.world.WorldLoadEvent) -> hrnU
    83:90:void on(org.bukkit.event.world.WorldUnloadEvent) -> hrnU
    96:96:void tick() -> tick
    100:112:void witholdWorld(org.bukkit.World) -> pPSQ
    116:128:void releaseWorld(org.bukkit.World) -> AFix
    132:144:double getUniversalEntityTick() -> yRdi
    149:161:double getUniversalEntityLimit() -> WGSR
    166:178:double getUniversalTileLimit() -> gVai
    183:195:double getUniversalTileTick() -> VCoB
    200:207:double getUniversalEntityDroppedTicks() -> WXSs
    212:219:double getUniversalTileDroppedTicks() -> PvDK
    224:225:void setEntityTickLimit(org.bukkit.World,double) -> hrnU
    229:230:void setTileTickLimit(org.bukkit.World,double) -> SeQd
    234:234:double getEntityTickLimit(org.bukkit.World) -> yknP
    239:239:double getTileTickLimit(org.bukkit.World) -> FDyI
    244:244:double getLastEntityTick(org.bukkit.World) -> OYFQ
    249:249:double getLastTileTick(org.bukkit.World) -> NLqG
    254:254:double getEntityDroppedTicks(org.bukkit.World) -> mGIR
    259:259:double getTileDroppedTicks(org.bukkit.World) -> iSmf
    264:281:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> hrnU
react.controller.SpikeController -> LiTk:
    react.glang.GMap spikes -> lDkH
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> DHJx
    111:111:java.lang.String getTickName() -> FWBc
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> HKhT
    128:160:void whoFuckingDidThis(react.glang.Callback) -> hrnU
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> hrnU
react.controller.SpikeController$1 -> LiTk$1:
    react.controller.SpikeController this$0 -> kBHQ
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> LiTk$1$1:
    react.controller.SpikeController$1 this$1 -> CFHO
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> LiTk$2:
    react.controller.SpikeController this$0 -> kBHQ
    react.glang.GMap val$vv -> IrLW
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> LiTk$3:
    react.controller.SpikeController this$0 -> kBHQ
    java.lang.Thread val$t -> iLcR
    react.glang.Callback val$callback -> tneY
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> GYdb:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.event.ReactEvent -> DHJx:
    org.bukkit.event.HandlerList handlers -> QiCH
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> vRJR:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> FWBc:
    react.event.ScrollDirection direction -> WXpd
    boolean cancellled -> nueJ
    int amount -> hRPu
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> FVdB
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> lnab
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> NVIX:
    react.event.ScrollDirection DOWN -> badR
    react.event.ScrollDirection UP -> ioIx
    react.event.ScrollDirection[] ENUM$VALUES -> BTHQ
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.gbench.Profiler -> KnbO:
    long nanos -> wxSP
    long startNano -> uPJI
    long millis -> KpEM
    long startMillis -> vSMH
    double time -> FWdA
    boolean profiling -> HDWl
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> bhmC
    78:78:double getTicks() -> vbld
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> vAKC
    93:93:double getHours() -> clYG
    98:98:double getMilliseconds() -> loCI
    103:103:long getNanoseconds() -> ghCn
    108:108:long getNanos() -> dLwb
    113:113:long getStartNano() -> AaHE
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> UcNm
    128:128:double getTime() -> ntgW
    133:133:boolean isProfiling() -> aDNS
react.gconcurrent.A -> ghBG:
    react.gconcurrent.ParallelPoolManager mgr -> PUAS
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> ghBG$1:
    react.gconcurrent.A this$0 -> hsuo
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> LiTj:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> QNPp:
    react.gconcurrent.QueueMode mode -> wxQs
    react.glang.GList threads -> DkQA
    int next -> cvIf
    int threadCount -> hJDP
    java.util.Queue squeue -> MvJE
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> kdMg
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> nKTM
    22:23:void syncQueue(react.gconcurrent.Execution) -> hrnU
    long getNanoGate() -> ArHo
    29:51:void tickSyncQueue() -> FVbX
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> Gauc
    102:109:int getTotalQueueSize() -> GIEQ
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> SeQd
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> tBsJ
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> rNOS
    161:188:void updateThreadInformation() -> dnyh
    192:224:react.gconcurrent.ParallelThread nextThread() -> NLxM
    229:235:void createThreads(int) -> avjs
    239:239:react.gconcurrent.QueueMode getMode() -> Nwkt
    244:244:int getNext() -> weoA
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> dVIK
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> ryDL
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> pYJi
react.gconcurrent.ParallelThread -> ksmS:
    java.util.Queue queue -> ghbV
    react.gconcurrent.ThreadInformation info -> kdMg
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> FDyI
    63:70:void execute(react.gconcurrent.Execution) -> YxDt
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> SeQd
    92:92:java.util.Queue getQueue() -> GkHa
    97:97:react.gconcurrent.ThreadInformation getInfo() -> Usof
react.gconcurrent.QueueMode -> FNQf:
    react.gconcurrent.QueueMode ROUND_ROBIN -> clut
    react.gconcurrent.QueueMode SMALLEST -> cCCk
    react.gconcurrent.QueueMode[] ENUM$VALUES -> rycN
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> yktF:
    react.gconcurrent.ParallelPoolManager mgr -> PUAS
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> yktF$1:
    react.gconcurrent.S this$0 -> JuQQ
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> gMnW:
    long tick -> KocJ
    long atick -> Wise
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> uqIb:
    double ticksPerSecond -> KocL
    int queuedSize -> gqTI
    boolean processing -> KpCp
    double utilization -> riAq
    react.gmath.Average ticksPerSecondAverage -> JcoP
    long tick -> KocJ
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> ugyO
    33:35:void setTicksPerSecond(double) -> OYFQ
    39:39:int getQueuedSize() -> oUgM
    44:45:void setQueuedSize(int) -> GbPG
    49:49:boolean isProcessing() -> nSHV
    54:55:void setProcessing(boolean) -> NLqG
    59:59:double getUtilization() -> vcOx
    64:65:void setUtilization(double) -> NLqG
    69:69:double getTicksPerSecondAverage() -> UANf
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> VwUw
    89:89:int getId() -> getId
react.gformat.F -> QhAm:
    java.text.NumberFormat NF -> jhyf
    java.text.DecimalFormat DF -> tnfy
    java.lang.String[] NAMES -> KDns
    java.math.BigInteger THOUSAND -> RQsl
    java.util.NavigableMap MAP -> YEfp
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> avjs
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> hrnU
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> hrnU
    201:221:java.lang.String timeLong(long,int) -> hrnU
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> YxDt
    236:236:java.lang.String b(double) -> mGIR
    241:258:java.lang.String b(java.math.BigInteger) -> hrnU
    263:267:void instantiate() -> eHLl
    279:279:java.lang.String fileSize(long) -> aehl
    292:292:java.lang.String memSize(long) -> EmJi
    305:306:java.lang.String stamp(long) -> Ecxb
    322:349:java.lang.String ofSize(long,int) -> SeQd
    363:368:java.lang.String trim(java.lang.String,int) -> SeQd
    381:401:java.lang.String cname(java.lang.String) -> GbPG
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> pPSQ
    459:477:java.lang.String memx(long) -> AFix
    491:492:java.lang.String f(long) -> yknP
    504:505:java.lang.String f(int) -> mylg
    519:528:java.lang.String f(double,int) -> SeQd
    544:553:java.lang.String fd(double,int) -> YxDt
    567:576:java.lang.String f(float,int) -> hrnU
    587:587:java.lang.String f(double) -> iSmf
    598:598:java.lang.String f(float) -> hrnU
    613:613:java.lang.String pc(double,int) -> aehl
    628:628:java.lang.String pc(float,int) -> SeQd
    641:641:java.lang.String pc(double) -> EBVk
    654:654:java.lang.String pc(float) -> SeQd
    670:670:java.lang.String pc(int,int,int) -> hrnU
    684:684:java.lang.String pc(int,int) -> YxDt
    700:700:java.lang.String pc(long,long,int) -> hrnU
    714:714:java.lang.String pc(long,long) -> aehl
    726:726:java.lang.String msSeconds(long) -> FDyI
    740:740:java.lang.String msSeconds(long,int) -> YxDt
    752:752:java.lang.String nsMs(long) -> OYFQ
    766:766:java.lang.String nsMs(long,int) -> aehl
    780:780:java.lang.String nsMsd(long,int) -> EmJi
react.glang.AccessCallback -> afOU:
    java.lang.Object get() -> get
react.glang.Adapter -> INgg:
    java.lang.Object adapt(java.lang.Object) -> Ecxb
    java.lang.Object onAdapt(java.lang.Object) -> pPSQ
react.glang.Callback -> nktK:
    java.lang.Object t -> tngV
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> hrnU
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> NLuc:
    double i -> XukV
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> bhmC
react.glang.FinalFloat -> dnwO:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> YxDt
react.glang.FinalInteger -> mrBy:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> NxFO
react.glang.FinalLong -> xWmt:
    long i -> iDWo
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> NLqG
react.glang.FinalString -> hkDB:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> Gjds:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> Ecxb
    java.lang.Object onAdapt(java.lang.Object) -> pPSQ
react.glang.GBiset -> WPBE:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> FqXO
    java.lang.Object b -> bafQ
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> HKjT
    53:54:void setA(java.lang.Object) -> AFix
    63:63:java.lang.Object getB() -> DaaR
    73:74:void setB(java.lang.Object) -> yknP
react.glang.GList -> qSYy:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> aehl
    45:52:react.glang.GList grepDistance(int,int) -> EmJi
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> SeQd
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> FFDu
    188:190:react.glang.GList shuffleCopy() -> werI
    198:199:void shuffle() -> gMqn
    210:236:react.glang.GList split() -> tLHQ
    248:248:boolean hasIndex(int) -> yIji
    258:259:java.lang.Object pickRandom() -> LaHp
    270:277:react.glang.GList stringList() -> ssYE
    288:292:void forEach(react.glang.Callback) -> SeQd
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> ivRN
    336:336:react.glang.GList cropFrom(int) -> TxvD
    341:373:react.glang.GList split(int) -> SLAE
    389:389:react.glang.GList cropTo(int) -> JIVP
    406:416:react.glang.GList crop(int,int) -> Ecxb
    427:431:react.glang.GList removeDuplicates() -> tdxr
    442:446:void removeAll(java.lang.Object) -> FDyI
    455:455:boolean hasDuplicates() -> nkxj
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> bqhL
    484:490:void push(java.lang.Object,int) -> hrnU
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> OYFQ
    528:532:void add(java.util.List) -> hrnU
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> HnLh
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> BSKX
    626:627:react.glang.GList qdel(java.lang.Object) -> NLqG
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> xaEV
    662:669:java.lang.Object popLast() -> TqNt
    674:683:java.lang.Object popRandom() -> Oint
react.glang.GListAdapter -> aDLc:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> SeQd
    java.lang.Object onAdapt(java.lang.Object) -> pPSQ
react.glang.GMap -> kYyU:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> YLxi
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> hrnU
    64:81:react.glang.GMap flip() -> NwnO
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> hrnU
    121:121:react.glang.GList k() -> yIji
    131:131:react.glang.GSet kset() -> RQWO
    141:141:react.glang.GList v() -> Rjhd
    151:151:react.glang.GSet vset() -> Drai
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> SeQd
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> pPSQ
    209:219:react.glang.GMap removeDuplicateValues() -> WyxG
    233:242:void put(react.glang.GList,react.glang.GList) -> hrnU
    251:267:react.glang.GList sortK() -> YgLt
    277:293:react.glang.GList sortV() -> gVeg
react.glang.GQuadraset -> nktA:
    java.lang.Object a -> FqXO
    java.lang.Object b -> bafQ
    java.lang.Object c -> hcWs
    java.lang.Object d -> jOka
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> HKjT
    25:26:void setA(java.lang.Object) -> AFix
    30:30:java.lang.Object getB() -> DaaR
    35:36:void setB(java.lang.Object) -> yknP
    40:40:java.lang.Object getC() -> XBIi
    45:46:void setC(java.lang.Object) -> mGIR
    50:50:java.lang.Object getD() -> xXVj
    55:56:void setD(java.lang.Object) -> iSmf
react.glang.GSet -> kIXe:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> iBqb:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> FqXO
    java.lang.Object b -> bafQ
    java.lang.Object c -> hcWs
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> HKjT
    26:27:void setA(java.lang.Object) -> AFix
    31:31:java.lang.Object getB() -> DaaR
    36:37:void setB(java.lang.Object) -> yknP
    41:41:java.lang.Object getC() -> XBIi
    46:47:void setC(java.lang.Object) -> mGIR
react.gmath.Average -> iTTT:
    double[] values -> agTU
    double average -> AXur
    boolean dirty -> EDAm
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> avjs
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> QxjE
react.gmath.DoubleArrayUtils -> QWAT:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> hrnU
    17:19:void wrapRight(double[]) -> hrnU
    23:27:void fill(double[],double) -> fill
react.gmath.M -> YgLH:
    int precision -> KfuJ
    int modulus -> MeLD
    float[] sin -> rqUW
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> hrnU
    31:36:boolean r(java.lang.Double) -> SeQd
    51:51:double tps(long,int) -> Ecxb
    63:63:double ticksFromNS(long) -> mGIR
    75:101:java.lang.String toRoman(int) -> DrYG
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> pPSQ
    144:216:int fromRoman(java.lang.String) -> mylg
    226:226:long ns() -> IqRn
    236:236:long ms() -> dEKr
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> SeQd
    333:333:float sinLookup(int) -> iSmr
react.gnet.client.Client -> XAeI:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> dEjB
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> hrnU
    74:74:react.gnet.packet.PacketHandler getHandler() -> mGVQ
react.gnet.client.IClient -> vAKS:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> hrnU
    react.gnet.packet.PacketHandler getHandler() -> mGVQ
react.gnet.download.Download -> yRdi:
    react.gnet.download.DownloadState state -> rFaY
    react.gnet.download.DownloadType type -> cJvf
    react.gnet.download.DownloadStatus status -> WYVk
    react.gnet.download.DownloadMonitor monitor -> gGAp
    java.net.URL url -> url
    java.io.File file -> JBMw
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> VDSe
    92:92:react.gnet.download.DownloadType getType() -> JlFO
    97:97:react.gnet.download.DownloadStatus getStatus() -> tBxh
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> wvuq
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> WGSR:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> hrnU
    void onDownloadStarted(react.gnet.download.Download) -> hrnU
    void onDownloadFinished(react.gnet.download.Download) -> SeQd
    void onDownloadFailed(react.gnet.download.Download) -> YxDt
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> hrnU
react.gnet.download.DownloadState -> gVai:
    react.gnet.download.DownloadState IDLE -> RcXL
    react.gnet.download.DownloadState DOWNLOADING -> Ngks
    react.gnet.download.DownloadState FAILED -> LPeE
    react.gnet.download.DownloadState FINISHED -> GJFl
    react.gnet.download.DownloadState[] $VALUES -> GIfL
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> VCoB:
    long bytesDownloaded -> Cxne
    long bytesTotal -> kdNw
    long bytesPerSecond -> gqTm
    long timeElapsed -> iMHM
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> fTCV
    25:25:long getBytesDownloaded() -> ebAe
    30:31:void setBytesDownloaded(long) -> iSmf
    35:35:long getBytesTotal() -> VoGu
    40:41:void setBytesTotal(long) -> EBVk
    45:45:long getBytesPerSecond() -> nBIQ
    50:51:void setBytesPerSecond(long) -> bhmC
    55:55:long getTimeElapsed() -> KCtN
    60:61:void setTimeElapsed(long) -> avjs
react.gnet.download.DownloadType -> WXSs:
    react.gnet.download.DownloadType DETERMINATE -> htXV
    react.gnet.download.DownloadType INDETERMINATE -> Cgme
    react.gnet.download.DownloadType[] $VALUES -> STyQ
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> PvDK:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> cuMw
    java.lang.String getPacketName() -> kssL
react.gnet.packet.IncompatablePacketException -> HKhT:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> FVdB:
    react.gnet.packet.PacketBinding SERVER_BOUND -> BdkJ
    react.gnet.packet.PacketBinding CLIENT_BOUND -> MTLE
    react.gnet.packet.PacketBinding[] $VALUES -> QWgD
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> lnab:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> vbld:
    react.glang.GList accept -> rFdL
    react.gnet.packet.PacketBinding side -> gFcj
    react.gnet.streams.OSS out -> GRYv
    react.gnet.streams.ISS in -> ogms
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> hrnU
    28:34:void accept(react.gnet.packet.IPacket) -> SeQd
    38:46:react.gnet.packet.IPacket findPacket(int) -> Tpea
    51:66:react.gnet.packet.IPacket read() -> vbpg
    71:77:void write(react.gnet.packet.IPacket) -> YxDt
react.gnet.packet.UnhandledPacketException -> vAKC:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> clYG:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> mGVQ
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> aehl
react.gnet.server.Server -> loCI:
    int port -> port
    java.net.ServerSocket socket -> IibJ
    react.gnet.packet.PacketHandler handler -> dEjB
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> mGVQ
    37:84:void run() -> run
    88:91:void pstart() -> xGUH
    95:96:void pstop() -> Rjkc
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> aehl
react.gnet.streams.ISS -> ghCn:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> JuUy
    boolean built -> LQHq
    byte[] readBuffer -> BBiX
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> aKuX
    64:72:react.glang.GList readStringList() -> LWyC
    77:85:react.glang.GList readDoubleList() -> QEem
    90:98:react.glang.GList readLongList() -> XRkA
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> hrnU
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> hrnU
    136:137:react.gnet.streams.ISS gzip() -> CobP
    142:147:void build() -> iKiq
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> SeQd
    435:436:void close() -> close
react.gnet.streams.OSS -> dLwb:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> wUqx
    react.gnet.streams.StreamBuilder bu -> JuUy
    boolean built -> LQHq
    byte[] writeBuffer -> FFew
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> uFOT
    41:42:react.gnet.streams.OSS gzip(int) -> wKtU
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> SeQd
    53:58:void build() -> iKiq
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> AFix
    102:108:void writeDoubleList(react.glang.GList) -> yknP
    112:118:void writeLongList(react.glang.GList) -> FDyI
    122:128:void writeStreamableList(react.glang.GList) -> OYFQ
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> WrKf
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> YxDt
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> AaHE:
    react.glang.GList constructors -> OYpw
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> hrnU
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> hrnU
    49:50:void bind(react.gnet.streams.StreamConstructor) -> hrnU
    54:55:void bindGZIP(int) -> NnrU
    59:60:void bindGZIP() -> DirN
    64:65:void bindCipher(javax.crypto.Cipher) -> YxDt
    69:70:void bindBuffer(int) -> bOXu
    74:75:void bindBuffer() -> Wyya
react.gnet.streams.StreamConstructor -> UcNm:
    java.io.InputStream constructInput(java.io.InputStream) -> hrnU
    java.io.OutputStream constructOutput(java.io.OutputStream) -> hrnU
react.gnet.streams.constructors.BufferedStreamConstructor -> ntgW:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> SeQd
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> SeQd
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> hrnU
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> hrnU
react.gnet.streams.constructors.CipherStreamConstructor -> aDNS:
    javax.crypto.Cipher cipher -> bsJt
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> YxDt
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> YxDt
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> hrnU
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> hrnU
react.gnet.streams.constructors.GZipStreamConstructor -> ArHo:
    int compressionLevel -> Jcsp
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> aehl
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> aehl
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> hrnU
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> hrnU
react.gnet.streams.overlays.CGZIPInputStream -> FVbX:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> Gauc:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> GIEQ:
    void toBytes(react.gnet.streams.OSS) -> hrnU
    void fromBytes(react.gnet.streams.ISS) -> hrnU
react.graph.ColossalView -> tBsJ:
    react.papyrus.BufferedFrame view -> mafw
    react.glang.GMap buffers -> lpFg
    react.glang.GMap graphs -> Ucru
    double level -> lERd
    double targetLevel -> fedW
    int maxX -> Pvfx
    int maxY -> FyiV
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> FFFL
    51:77:void render() -> aUSe
    81:98:void scroll(int) -> rUwF
    102:112:void recompile() -> YEKa
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> hrnU
    122:122:react.papyrus.BufferedFrame getView() -> eGmN
    127:127:react.glang.GMap getBuffers() -> QNVD
    132:132:react.glang.GMap getGraphs() -> xWtm
    137:137:double getLevel() -> KDTM
    142:142:double getTargetLevel() -> FMvC
    147:147:int getMaxX() -> biYJ
    152:152:int getMaxY() -> bqhq
react.graph.ColossalView$Builder -> tBsJ$hrnU:
    react.glang.GList graphs -> wgTY
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> hrnU
    171:191:react.graph.ColossalView compute() -> ownS
react.graph.CubicleIterator -> rNOS:
    int[][] mapping -> vAmV
    int xCubes -> NVld
    int yCubes -> uaMt
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> KThG
    47:130:void insert(react.graph.GraphSize,int) -> hrnU
    134:145:void print() -> print
react.graph.GraphSampleLine -> dnyh:
    double lx -> CgoP
    double ly -> nCGf
    react.api.ISampler sampler -> PTbm
    react.graph.IFormatter formatter -> VxWW
    byte graphColor -> cTHx
    byte backgroundColor -> WYWm
    byte borderColor -> UldE
    byte textColor -> NEkj
    int ticksLeftTitle -> wfrg
    int ticksOutTitle -> tnjs
    double nextPoint -> DAAM
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> TyVL
    51:183:void onRender(react.papyrus.BufferedFrame) -> hrnU
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> SeQd
    226:254:int getHue(int,int,int) -> YxDt
    259:281:void scaleFor(react.glang.GList) -> NLqG
    285:285:react.graph.IFormatter getFormatter() -> WiMA
    290:291:void setFormatter(react.graph.IFormatter) -> hrnU
    295:295:byte getGraphColor() -> ggfO
    300:301:void setGraphColor(byte) -> hrnU
    305:305:byte getBackgroundColor() -> Jbrs
    310:311:void setBackgroundColor(byte) -> SeQd
    315:315:byte getBorderColor() -> mhvj
    320:321:void setBorderColor(byte) -> YxDt
    325:325:byte getTextColor() -> FyJs
    330:331:void setTextColor(byte) -> aehl
    335:335:react.api.ISampler getSampler() -> wDQM
react.graph.GraphSize -> NLxM:
    react.graph.GraphSize WIDE -> bGtj
    react.graph.GraphSize FULL -> uaMb
    react.graph.GraphSize SQUARE -> wpEL
    int[] $SWITCH_TABLE$react$graph$GraphSize -> WXwF
    react.graph.GraphSize[] ENUM$VALUES -> Muma
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> JlGh
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> hYjj
react.graph.GraphText -> Nwkt:
    java.lang.String text -> text
    byte fontColor -> yKWG
    byte backgroundColor -> WYWm
    boolean wrote -> mQFK
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> hrnU
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> kIas
    68:69:void setFontColor(byte) -> EmJi
    73:73:byte getBackgroundColor() -> Jbrs
    78:79:void setBackgroundColor(byte) -> SeQd
react.graph.GraphingInstance -> weoA:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> wgTY
    react.graph.ColossalView view -> rGBv
    react.papyrus.Papyrus papyrus -> Ulew
    react.papyrus.IRenderer renderer -> kSTA
    boolean mapping -> qBlB
    react.glang.GList msgs -> Bdnd
    react.surge.sched.Task waiter -> bXyI
    react.surge.sched.Task waiter2 -> rOVt
    int shift -> BTMl
    boolean notif -> OIRb
    47:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> hrnU
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> hrnU
    138:142:void send(java.lang.String) -> NxFO
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> hrnU
    153:165:void on(react.event.ReactScrollEvent) -> hrnU
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> hrnU
    179:187:void destroy() -> destroy
    191:200:void toggle() -> sHiD
    204:205:void setGraphs(react.glang.GList) -> mGIR
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> SvbA
    243:259:void compile() -> GHkR
    40:40:boolean access$0(react.graph.GraphingInstance) -> hrnU
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> SeQd
    45:45:boolean access$2(react.graph.GraphingInstance) -> YxDt
    45:45:void access$3(react.graph.GraphingInstance,boolean) -> hrnU
    44:44:int access$4(react.graph.GraphingInstance) -> aehl
    44:44:void access$5(react.graph.GraphingInstance,int) -> hrnU
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> EmJi
react.graph.GraphingInstance$1 -> weoA$1:
    react.graph.GraphingInstance this$0 -> KgYp
    org.bukkit.entity.Player val$player -> EKvA
    1:51:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> weoA$2:
    react.graph.GraphingInstance this$0 -> KgYp
    1:76:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> weoA$3:
    react.graph.GraphingInstance this$0 -> KgYp
    1:106:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> hrnU
react.graph.IFormatter -> dVIK:
    java.lang.String from(double) -> GbPG
react.graph.IGraph -> ryDL:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> YENg
    long getTimeViewport() -> DaeY
    void render(react.papyrus.BufferedFrame) -> YxDt
    double getMax() -> getMax
    void setMax(double) -> mylg
react.graph.NormalGraph -> pYJi:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> aNFq
    long timeViewport -> kttp
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> YENg
    35:35:long getTimeViewport() -> DaeY
    41:42:void render(react.papyrus.BufferedFrame) -> YxDt
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> mylg
    void onRender(react.papyrus.BufferedFrame) -> hrnU
react.graph.PlotBoard -> GkHa:
    react.glang.GMap plots -> aoiU
    int maxRecordings -> CFOR
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> uiAq
    33:33:long getAccurateTimeSpan() -> vlEP
    38:50:long getMedian(long,long) -> EmJi
    55:55:long getMinimumAccuracyRange() -> Xcna
    60:70:double getMaxValue() -> ccnG
    75:85:double getMinValue() -> GILb
    90:90:react.glang.GList sort(react.glang.GMap) -> SeQd
    95:105:long earilestRecording() -> EJvM
    110:120:long latestRecording() -> ggiW
    125:126:void reduceBefore(long) -> GbPG
    130:148:void reduceBetween(long,long) -> Ecxb
    152:152:boolean before(long,long) -> pPSQ
    157:157:boolean after(long,long) -> AFix
    162:162:boolean within(long,long,long) -> hrnU
    167:177:react.glang.GMap getBetween(long,long) -> yknP
    182:184:void plot(long,double) -> hrnU
    188:188:boolean hasAt(long) -> mylg
    193:193:double getAt(long) -> NxFO
    198:198:int getSize() -> getSize
react.graph.Point -> Usof:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> ugyO:
    int iid -> GIka
    react.graph.IGraph graph -> GlPC
    react.graph.GraphSize size -> dySR
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> oxRS
    24:25:void setGraph(react.graph.IGraph) -> hrnU
    29:29:react.graph.GraphSize getSize() -> fSdE
    34:35:void setSize(react.graph.GraphSize) -> hrnU
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> oUgM:
    react.graph.RenderMaxType UNLIMITED -> opaO
    react.graph.RenderMaxType LIMITED -> AbNL
    react.graph.RenderMaxType[] ENUM$VALUES -> FiKI
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> nSHV:
    java.lang.String CRLF -> apIG
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> yIji
    162:198:java.lang.String toString(react.json.JSONObject) -> SeQd
react.json.HTTPTokener -> vcOx:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> UANf:
    java.util.ArrayList myArrayList -> dElY
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> hrnU
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> kjuT
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> pXbT
    394:399:react.json.JSONObject getJSONObject(int) -> WiMA
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> ivRN
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> VKug
    515:515:boolean optBoolean(int) -> kYrd
    533:536:boolean optBoolean(int,boolean) -> SeQd
    551:551:double optDouble(int) -> TyVL
    569:572:double optDouble(int,double) -> hrnU
    587:587:int optInt(int) -> oMNU
    605:608:int optInt(int,int) -> AFix
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> SeQd
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> hrnU
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> hrnU
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> hrnU
    722:723:react.json.JSONArray optJSONArray(int) -> FMiX
    737:738:react.json.JSONObject optJSONObject(int) -> IEpn
    752:752:long optLong(int) -> Ptxs
    770:773:long optLong(int,long) -> hrnU
    788:788:java.lang.String optString(int) -> Cnsc
    803:804:java.lang.String optString(int,java.lang.String) -> hrnU
    816:817:react.json.JSONArray put(boolean) -> mGIR
    830:831:react.json.JSONArray put(java.util.Collection) -> hrnU
    845:848:react.json.JSONArray put(double) -> NxFO
    860:861:react.json.JSONArray put(int) -> hPim
    873:874:react.json.JSONArray put(long) -> yIji
    887:888:react.json.JSONArray put(java.util.Map) -> hrnU
    902:903:react.json.JSONArray put(java.lang.Object) -> EBVk
    921:922:react.json.JSONArray put(int,boolean) -> YxDt
    939:940:react.json.JSONArray put(int,java.util.Collection) -> hrnU
    958:959:react.json.JSONArray put(int,double) -> SeQd
    977:978:react.json.JSONArray put(int,int) -> yknP
    996:997:react.json.JSONArray put(int,long) -> SeQd
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> hrnU
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> hrnU
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> bhmC
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> hrnU
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> hrnU
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> hrnU
react.json.JSONException -> VwUw:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> kKAv
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> eHLl:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> hrnU
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> TxvD
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> hrnU
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> SeQd
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> yIji
    379:456:java.lang.String toString(react.json.JSONArray) -> SeQd
    472:552:java.lang.String toString(react.json.JSONObject) -> SeQd
react.json.JSONObject -> HKjT:
    java.util.Map map -> map
    java.lang.Object NULL -> SxBJ
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> hrnU
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> SeQd
    480:499:java.lang.String doubleToString(double) -> yIji
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> SLAE
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> JIVP
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> DrYG
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> YxDt
    751:767:java.lang.String[] getNames(java.lang.Object) -> avjs
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> iSmr
    855:855:boolean isNull(java.lang.String) -> Tpea
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> pbCG
    917:937:java.lang.String numberToString(java.lang.Number) -> hrnU
    949:949:java.lang.Object opt(java.lang.String) -> aKuX
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> hrnU
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> hrnU
    1018:1018:boolean optBoolean(java.lang.String) -> uFOT
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> hrnU
    1054:1054:double optDouble(java.lang.String) -> wKtU
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> hrnU
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> hrnU
    1116:1119:double optDouble(java.lang.String,double) -> hrnU
    1134:1134:int optInt(java.lang.String) -> NnrU
    1152:1155:int optInt(java.lang.String,int) -> YxDt
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> bOXu
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> rUwF
    1198:1198:long optLong(java.lang.String) -> KThG
    1216:1219:long optLong(java.lang.String,long) -> hrnU
    1234:1234:java.lang.String optString(java.lang.String) -> kjuT
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> SeQd
    1255:1305:void populateMap(java.lang.Object) -> GbPG
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> SeQd
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> hrnU
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> SeQd
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> aehl
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> SeQd
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> hrnU
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> YxDt
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> aehl
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> EmJi
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> hrnU
    1590:1590:java.lang.Object remove(java.lang.String) -> pXbT
    1605:1640:boolean similar(java.lang.Object) -> bhmC
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> mylg
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> YxDt
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> hrnU
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> hrnU
    2000:2004:void indent(java.io.Writer,int) -> hrnU
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> hrnU
react.json.JSONObject$Null -> HKjT$hrnU:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> DaaR:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> FFDu:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> werI:
    long character -> JRrv
    boolean eof -> eof
    long index -> msKF
    long line -> BdoW
    char previous -> aETk
    java.io.Reader reader -> reader
    boolean usePrevious -> qecq
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> lnfu
    119:131:int dehexchar(char) -> hrnU
    136:136:boolean end() -> lTtb
    147:153:boolean more() -> JkfK
    164:198:char next() -> next
    213:218:char next(char) -> SeQd
    233:250:java.lang.String next(int) -> MlQM
    263:266:char nextClean() -> eHOv
    287:334:java.lang.String nextString(char) -> YxDt
    349:361:java.lang.String nextTo(char) -> aehl
    376:388:java.lang.String nextTo(java.lang.String) -> WiMA
    403:441:java.lang.Object nextValue() -> rEdc
    458:479:char skipTo(char) -> EmJi
    491:491:react.json.JSONException syntaxError(java.lang.String) -> VKug
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> gMqn:
    int maxdepth -> CWRC
    boolean comma -> URrp
    char mode -> QXKh
    react.json.JSONObject[] stack -> KMiH
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> kYrd
    157:164:react.json.JSONWriter array() -> HKlp
    180:193:react.json.JSONWriter end(char,char) -> hrnU
    206:206:react.json.JSONWriter endArray() -> hayx
    219:219:react.json.JSONWriter endObject() -> sIIQ
    235:258:react.json.JSONWriter key(java.lang.String) -> TyVL
    274:285:react.json.JSONWriter object() -> fSbx
    299:310:void pop(char) -> Ecxb
    322:329:void push(react.json.JSONObject) -> aehl
    342:342:react.json.JSONWriter value(boolean) -> iSmf
    356:356:react.json.JSONWriter value(double) -> ivRN
    369:369:react.json.JSONWriter value(long) -> ivRN
    385:385:react.json.JSONWriter value(java.lang.Object) -> NxFO
react.json.XML -> tLHQ:
    java.lang.Character AMP -> kBSo
    java.lang.Character APOS -> WbMm
    java.lang.Character BANG -> yvQP
    java.lang.Character EQ -> etGa
    java.lang.Character GT -> DYuf
    java.lang.Character LT -> DYvM
    java.lang.Character QUEST -> etFx
    java.lang.Character QUOT -> Ojvr
    java.lang.Character SLASH -> bbMg
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> oMNU
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> hrnU
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> yIji
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> LaHp:
    java.util.HashMap entity -> YyUq
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> Kewl
    108:133:java.lang.Object nextContent() -> lLdc
    149:166:java.lang.Object nextEntity(char) -> pPSQ
    186:239:java.lang.Object nextMeta() -> DbEU
    261:334:java.lang.Object nextToken() -> qdeL
    354:420:boolean skipPast(java.lang.String) -> FMiX
react.papyrus.BufferedFrame -> ssYE:
    byte[][] frame -> UJfA
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> hrnU
    90:97:void write(byte) -> Ecxb
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> hrnU
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> hrnU
    131:145:java.awt.image.BufferedImage toBufferedImage() -> fBcC
    153:160:void writeRainbowMul() -> rMsy
    167:174:void writeRainbowAdd() -> wTrw
    181:191:void writeSparks() -> upqD
    195:201:boolean write(int,int,byte) -> hrnU
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> hrnU
    233:250:void write(react.papyrus.BufferedFrame) -> aehl
    254:254:byte[][] getRawFrame() -> mOfm
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> tdxr:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> aehl
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> hrnU
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> nkxj:
    org.bukkit.map.MapView getView() -> oDkb
    react.papyrus.BufferedFrame getFrameBuffer() -> LOib
    void addRenderer(react.papyrus.IRenderer) -> hrnU
    void clearRenderers() -> IFbe
    react.glang.GList getRenderers() -> bOjk
    void removeRenderer(react.papyrus.IRenderer) -> SeQd
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> XmAv
react.papyrus.IRenderer -> bqhL:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> hrnU
react.papyrus.Papyrus -> HnLh:
    org.bukkit.map.MapView map -> fnYY
    react.papyrus.BufferedFrame frameBuffer -> qKuI
    react.papyrus.BufferedFrame lastFrameBuffer -> THCk
    react.glang.GList renderers -> vcts
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> oDkb
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> LOib
    51:52:void addRenderer(react.papyrus.IRenderer) -> hrnU
    57:58:void clearRenderers() -> IFbe
    63:63:react.glang.GList getRenderers() -> bOjk
    69:70:void removeRenderer(react.papyrus.IRenderer) -> SeQd
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> XmAv
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> hrnU
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> SeQd
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> YxDt
react.papyrus.Papyrus$1 -> HnLh$1:
    react.papyrus.Papyrus this$0 -> xbLF
    org.bukkit.map.MapCanvas val$c -> Aaln
    org.bukkit.map.MapView val$v -> xHYR
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> BSKX:
    int spaceSize -> HoSN
    java.lang.String fontChars -> SMOY
    int[][] fontData -> qTeR
    react.papyrus.ReactFont Font -> GlPQ
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> xaEV:
    react.glang.GList subgoals -> ffHO
    java.lang.String tag -> inpd
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> piuL
    26:44:void propigate() -> rVht
    49:50:void addGoal(react.rai.IGoal) -> hrnU
    55:65:react.glang.GList getFailingSubgoals() -> FFJt
    71:71:boolean isFailing() -> qSgD
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> pQDb
    void onPropigated() -> wTvu
react.rai.Goal$1 -> xaEV$1:
    react.rai.Goal this$0 -> MCNE
    react.rai.IGoal val$i -> aoia
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> TqNt:
    react.glang.GList getSubgoals() -> piuL
    void propigate() -> rVht
    void onPropigated() -> wTvu
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> FFJt
    boolean isFailing() -> qSgD
    boolean onCheckFailing() -> pQDb
    void update() -> update
    void addGoal(react.rai.IGoal) -> hrnU
react.rai.IRAI -> Oint:
    react.glang.GList getGoals() -> qBdk
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> hrnU
    react.glang.GList getEvents() -> tLNo
    void callEvent(react.rai.RAIEvent) -> hrnU
    react.glang.GList getListeners() -> dxUD
react.rai.RAI -> YLxi:
    react.glang.GList goals -> KEXM
    react.glang.GList events -> aVWc
    react.glang.GList logEvents -> ixCP
    react.glang.GList listeners -> ujCf
    long since -> cBkM
    react.rai.RAI instance -> URuO
    21:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> qBdk
    41:42:void addGoal(react.rai.IGoal) -> hrnU
    47:69:void tick() -> tick
    74:74:react.glang.GList getEvents() -> tLNo
    80:87:void callEvent(react.rai.RAIEvent) -> hrnU
    92:92:react.glang.GList getListeners() -> dxUD
react.rai.RAIEvent -> NwnO:
    react.rai.RAIEventType type -> uaRL
    java.lang.String[] pars -> nCKW
    java.lang.String ovt -> NEpP
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> yAkW
    29:29:java.lang.String[] getPars() -> HTbE
    34:34:java.lang.String getOvt() -> DPeh
react.rai.RAIEventType -> RQWO:
    react.rai.RAIEventType FIRE_ACTION -> wgWj
    react.rai.RAIEventType NOTE_GOAL_FAILING -> NFQL
    react.rai.RAIEventType NOTE_GOAL_FIXED -> aoip
    java.lang.String[] msgs -> jjDM
    react.rai.RAIEventType[] ENUM$VALUES -> XdoS
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> wLfU
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> hrnU
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedChunkLoad -> Rjhd:
    boolean failing -> FynX
    24:27:void <init>() -> <init>
    34:60:boolean onCheckFailing() -> pQDb
    66:79:void onPropigated() -> wTvu
react.rai.goals.GoalReducedChunkLoad$1 -> Rjhd$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> FFif
    1:42:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    47:56:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> Rjhd$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> FFif
    1:68:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    73:76:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> Drai:
    boolean failing -> FynX
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> pQDb
    91:134:void onPropigated() -> wTvu
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> hrnU
react.rai.goals.GoalReducedEntityCounts$1 -> Drai$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> Ygqw
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> Drai$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> Ygqw
    org.bukkit.Chunk val$lx -> RdBW
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> WyxG:
    boolean failing -> FynX
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> pQDb
    78:128:void onPropigated() -> wTvu
react.rai.goals.GoalStableChunkTime$1 -> WyxG$1:
    react.rai.goals.GoalStableChunkTime this$0 -> DHus
    1:54:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> WyxG$2:
    react.rai.goals.GoalStableChunkTime this$0 -> DHus
    java.lang.Object val$i -> LkBJ
    1:111:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> YgLt:
    boolean failing -> FynX
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> wTvu
    35:35:void letUp() -> XdRD
    40:77:boolean onCheckFailing() -> pQDb
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> hrnU
react.rai.goals.GoalStableEntityTime$1 -> YgLt$1:
    react.rai.goals.GoalStableEntityTime this$0 -> JmKn
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> gVeg:
    boolean failing -> FynX
    react.glang.GMap reocc -> TqxI
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> wTvu
    88:125:boolean onCheckFailing() -> pQDb
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> hrnU
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> SeQd
react.rai.goals.GoalStableFluidTime$1 -> gVeg$1:
    react.rai.goals.GoalStableFluidTime this$0 -> intG
    org.bukkit.Chunk val$lx -> RdBW
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> gVeg$2:
    react.rai.goals.GoalStableFluidTime this$0 -> intG
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> XBIi:
    boolean failing -> FynX
    react.glang.GMap reocc -> TqxI
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> wTvu
    89:125:boolean onCheckFailing() -> pQDb
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> hrnU
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> SeQd
react.rai.goals.GoalStableHopperTime$1 -> XBIi$1:
    react.rai.goals.GoalStableHopperTime this$0 -> LjaP
    org.bukkit.Chunk val$lx -> RdBW
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> XBIi$2:
    react.rai.goals.GoalStableHopperTime this$0 -> LjaP
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> xXVj:
    boolean failing -> FynX
    react.glang.GMap reocc -> TqxI
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> wTvu
    89:126:boolean onCheckFailing() -> pQDb
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> hrnU
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> SeQd
react.rai.goals.GoalStableRedstoneTime$1 -> xXVj$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> oqGB
    org.bukkit.Chunk val$lx -> RdBW
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> xXVj$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> oqGB
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> QxjE:
    boolean failing -> FynX
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> wTvu
    34:58:boolean onCheckFailing() -> pQDb
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> hrnU
react.rai.goals.GoalStableTickTime$1 -> QxjE$1:
    react.rai.goals.GoalStableTickTime this$0 -> UmKW
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> IqRn:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> jOsl
    boolean authenticated -> ejwq
    react.remote.server.ServerInfo info -> ejxM
    react.glang.GMap frems -> SMSJ
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> turg
    51:51:react.glang.GMap getFrames() -> ifBM
    56:75:int computeFrames() -> uydi
    80:92:boolean clearToken() -> wCuQ
    97:110:boolean updateServerInfo() -> dfsA
    115:129:boolean refreshToken() -> VCuv
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> YxDt
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> rgif
    165:165:boolean isAuthenticated() -> IheT
    170:170:react.remote.server.ServerInfo getInfo() -> pjTs
react.remote.client.packet.CPacketClearToken -> dEKr:
    java.lang.String token -> jOsl
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> hrnU
    33:34:void fromBytes(react.gnet.streams.ISS) -> hrnU
    38:38:java.lang.String getToken() -> rgif
    43:44:void setToken(java.lang.String) -> IEpn
react.remote.client.packet.CPacketComputeFrames -> mGVQ:
    java.lang.String token -> jOsl
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> hrnU
    33:34:void fromBytes(react.gnet.streams.ISS) -> hrnU
    38:38:java.lang.String getToken() -> rgif
    43:44:void setToken(java.lang.String) -> IEpn
react.remote.client.packet.CPacketGetInfo -> VDSe:
    java.lang.String token -> jOsl
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> hrnU
    33:34:void fromBytes(react.gnet.streams.ISS) -> hrnU
    38:38:java.lang.String getToken() -> rgif
    43:44:void setToken(java.lang.String) -> IEpn
react.remote.client.packet.CPacketGetToken -> JlFO:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> hrnU
    36:38:void fromBytes(react.gnet.streams.ISS) -> hrnU
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> tBxh:
    java.lang.String token -> jOsl
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> hrnU
    33:34:void fromBytes(react.gnet.streams.ISS) -> hrnU
    38:38:java.lang.String getToken() -> rgif
    43:44:void setToken(java.lang.String) -> IEpn
react.remote.client.packet.ClientPacket -> wvuq:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> hrnU
    void fromBytes(react.gnet.streams.ISS) -> hrnU
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> cuMw
    42:42:java.lang.String getPacketName() -> kssL
react.remote.client.packet.ClientPacketType -> fTCV:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> XeRv
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> uYEP
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> Npgd
    react.remote.client.packet.ClientPacketType GET_INFO -> MBpT
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> JKId
    react.remote.client.packet.ClientPacketType[] $VALUES -> EChK
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> ebAe:
    react.glang.GMap compute(long,long) -> YxDt
react.remote.server.KnownUser -> VoGu:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> nBIQ:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> hrnU
    38:41:void fromBytes(react.gnet.streams.ISS) -> hrnU
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> KCtN:
    react.glang.GList users -> MCPA
    react.glang.GMap session -> PUJE
    react.glang.GMap lastCompute -> SnsY
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> qSYy
    44:45:void registerUser(react.remote.server.KnownUser) -> hrnU
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> SeQd
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> Ptxs
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> aehl
    react.remote.server.IFrameComputer getFrameComputer() -> aDLc
    170:171:void markLastCompute(react.remote.server.KnownUser) -> YxDt
    175:180:long getLastCompute(react.remote.server.KnownUser) -> aehl
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> hrnU
    190:191:void deleteSession(react.remote.server.KnownUser) -> EmJi
    195:195:java.lang.String createToken() -> QEhi
react.remote.server.ServerInfo -> cuMw:
    java.lang.String motd -> nBmM
    int gameProtocol -> oVrF
    java.lang.String gameVersion -> dEpU
    java.lang.String reactVersion -> qKvY
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> dWSC
    int viewDistance -> viewDistance
    int gamePort -> TOtB
    java.lang.String gameAddress -> vlgX
    react.glang.GList remotePlugins -> RJOK
    react.glang.GList worlds -> wEVi
    react.glang.GList actions -> xGxj
    react.glang.GList samplers -> oVps
    26:26:react.remote.server.ServerInfo empty() -> VUYT
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> hrnU
    146:159:void fromBytes(react.gnet.streams.ISS) -> hrnU
    java.lang.String dgetMotd() -> ghBG
    int dgetGameProtocol() -> LiTj
    java.lang.String dgetGameVersion() -> QNPp
    java.lang.String dgetReactVersion() -> ksmS
    int dgetMaxPlayers() -> FNQf
    react.glang.GList dgetConnectedPlayers() -> yktF
    int dgetViewDistance() -> gMnW
    int dgetGamePort() -> uqIb
    java.lang.String dgetGameAddress() -> QhAm
    react.glang.GList dgetRemotePlugins() -> afOU
    react.glang.GList dgetWorlds() -> INgg
    react.glang.GList dgetActions() -> nktK
    react.glang.GList dgetSamplers() -> NLuc
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> fSfT
    199:199:java.lang.String getGameVersion() -> UQtk
    204:204:java.lang.String getReactVersion() -> uiCP
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> PTIB
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> KTyJ
    229:229:java.lang.String getGameAddress() -> Xtpi
    234:234:react.glang.GList getRemotePlugins() -> gxlG
    239:239:react.glang.GList getWorlds() -> IXDt
    244:244:react.glang.GList getActions() -> xiPD
    249:249:react.glang.GList getSamplers() -> vsua
react.remote.server.ServerInfo$1 -> cuMw$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> INgg
    37:37:int dgetViewDistance() -> gMnW
    43:43:react.glang.GList dgetRemotePlugins() -> afOU
    49:49:java.lang.String dgetReactVersion() -> ksmS
    55:55:java.lang.String dgetMotd() -> ghBG
    61:61:int dgetMaxPlayers() -> FNQf
    67:67:java.lang.String dgetGameVersion() -> QNPp
    73:73:int dgetGameProtocol() -> LiTj
    79:79:int dgetGamePort() -> uqIb
    85:85:java.lang.String dgetGameAddress() -> QhAm
    91:91:react.glang.GList dgetConnectedPlayers() -> yktF
    97:97:react.glang.GList dgetActions() -> nktK
    103:103:react.glang.GList dgetSamplers() -> NLuc
react.remote.server.packet.ComputedFrame -> kssL:
    react.glang.GMap values -> eYtt
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> hrnU
    28:36:void fromBytes(react.gnet.streams.ISS) -> hrnU
    40:40:react.glang.GMap getValues() -> PCGO
    45:46:void setValues(react.glang.GMap) -> YxDt
react.remote.server.packet.SPacketOk -> vbpg:
    boolean ok -> OYve
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> hrnU
    33:34:void fromBytes(react.gnet.streams.ISS) -> hrnU
    38:38:boolean isOk() -> wnlL
    43:44:void setOk(boolean) -> EBVk
react.remote.server.packet.SPacketSendFrames -> xGUH:
    react.glang.GMap frames -> ujHi
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> hrnU
    36:44:void fromBytes(react.gnet.streams.ISS) -> hrnU
    48:48:react.glang.GMap getFrames() -> ifBM
    53:54:void setFrames(react.glang.GMap) -> aehl
react.remote.server.packet.SPacketSendInfo -> Rjkc:
    react.remote.server.ServerInfo info -> ejxM
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> hrnU
    33:34:void fromBytes(react.gnet.streams.ISS) -> hrnU
    38:38:react.remote.server.ServerInfo getInfo() -> pjTs
    43:44:void setInfo(react.remote.server.ServerInfo) -> hrnU
react.remote.server.packet.SPacketSendToken -> LWyC:
    java.lang.String token -> jOsl
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> hrnU
    33:34:void fromBytes(react.gnet.streams.ISS) -> hrnU
    38:38:java.lang.String getToken() -> rgif
    43:44:void setToken(java.lang.String) -> IEpn
react.remote.server.packet.ServerPacket -> QEem:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> hrnU
    void fromBytes(react.gnet.streams.ISS) -> hrnU
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> cuMw
    42:42:java.lang.String getPacketName() -> kssL
react.remote.server.packet.ServerPacketType -> XRkA:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> EUMa
    react.remote.server.packet.ServerPacketType SEND_INFO -> oEsT
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> grAm
    react.remote.server.packet.ServerPacketType OK -> EfOW
    react.remote.server.packet.ServerPacketType[] $VALUES -> KNMy
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> CobP:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleAsyncQueue$1 -> CobP$1:
    react.sampler.SampleAsyncQueue this$0 -> LsTW
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleChunkTime -> iKiq:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleChunkTime$1 -> iKiq$1:
    react.sampler.SampleChunkTime this$0 -> femL
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleChunksLoaded -> WrKf:
    react.graph.IFormatter formatter -> VxWW
    17:27:void <init>() -> <init>
    32:38:void construct() -> oMNU
    43:44:void sample() -> TyVL
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleChunksLoaded$1 -> WrKf$1:
    react.sampler.SampleChunksLoaded this$0 -> DAHW
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> GbPG
react.sampler.SampleChunksLoadedPerSecond -> DirN:
    react.gmath.Average a -> IPYH
    react.graph.IFormatter formatter -> VxWW
    16:29:void <init>() -> <init>
    34:40:void construct() -> oMNU
    45:47:void sample() -> TyVL
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleChunksLoadedPerSecond$1 -> DirN$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> EUMr
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> GbPG
react.sampler.SampleEntitiesDrops -> Wyya:
    react.graph.IFormatter formatter -> VxWW
    17:27:void <init>() -> <init>
    32:38:void construct() -> oMNU
    43:44:void sample() -> TyVL
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleEntitiesDrops$1 -> Wyya$1:
    react.sampler.SampleEntitiesDrops this$0 -> KMmf
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> GbPG
react.sampler.SampleEntitiesLiving -> FFFL:
    react.graph.IFormatter formatter -> VxWW
    17:27:void <init>() -> <init>
    32:38:void construct() -> oMNU
    43:44:void sample() -> TyVL
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleEntitiesLiving$1 -> FFFL$1:
    react.sampler.SampleEntitiesLiving this$0 -> cTSY
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> GbPG
react.sampler.SampleEntitiesTiles -> aUSe:
    react.graph.IFormatter formatter -> VxWW
    17:27:void <init>() -> <init>
    32:38:void construct() -> oMNU
    43:44:void sample() -> TyVL
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleEntitiesTiles$1 -> aUSe$1:
    react.sampler.SampleEntitiesTiles this$0 -> RBBQ
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> GbPG
react.sampler.SampleEntitiesTotal -> YEKa:
    react.graph.IFormatter formatter -> VxWW
    17:27:void <init>() -> <init>
    32:38:void construct() -> oMNU
    43:44:void sample() -> TyVL
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleEntitiesTotal$1 -> YEKa$1:
    react.sampler.SampleEntitiesTotal this$0 -> Arrf
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> GbPG
react.sampler.SampleEntityDroppedTicks -> eGmN:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleEntityDroppedTicks$1 -> eGmN$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> mPnS
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleEntityTime -> QNVD:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleEntityTime$1 -> QNVD$1:
    react.sampler.SampleEntityTime this$0 -> bbQf
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleEntityTimeLock -> xWtm:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleEntityTimeLock$1 -> xWtm$1:
    react.sampler.SampleEntityTimeLock this$0 -> vcyX
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleExplosionTime -> KDTM:
    react.graph.IFormatter formatter -> VxWW
    17:27:void <init>() -> <init>
    32:38:void construct() -> oMNU
    43:44:void sample() -> TyVL
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleExplosionTime$1 -> KDTM$1:
    react.sampler.SampleExplosionTime this$0 -> tEAx
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> GbPG
react.sampler.SampleFluidPerSecond -> FMvC:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleFluidPerSecond$1 -> FMvC$1:
    react.sampler.SampleFluidPerSecond this$0 -> NEtv
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleFluidPerTick -> biYJ:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    46:53:void sample() -> TyVL
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleFluidPerTick$1 -> biYJ$1:
    react.sampler.SampleFluidPerTick this$0 -> Wrrn
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleFluidTickTime -> bqhq:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleFluidTickTime$1 -> bqhq$1:
    react.sampler.SampleFluidTickTime this$0 -> uqvq
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleFluidTickUtilization -> ownS:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    46:53:void sample() -> TyVL
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleFluidTickUtilization$1 -> ownS$1:
    react.sampler.SampleFluidTickUtilization this$0 -> fDIU
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleHopperPerSecond -> ggfO:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleHopperPerSecond$1 -> ggfO$1:
    react.sampler.SampleHopperPerSecond this$0 -> ynCl
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleHopperPerTick -> Jbrs:
    react.graph.IFormatter formatter -> VxWW
    18:29:void <init>() -> <init>
    34:40:void construct() -> oMNU
    47:54:void sample() -> TyVL
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleHopperPerTick$1 -> Jbrs$1:
    react.sampler.SampleHopperPerTick this$0 -> IjJM
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleHopperTickTime -> mhvj:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleHopperTickTime$1 -> mhvj$1:
    react.sampler.SampleHopperTickTime this$0 -> AYcC
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleHopperTickUtilization -> FyJs:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    46:53:void sample() -> TyVL
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleHopperTickUtilization$1 -> FyJs$1:
    react.sampler.SampleHopperTickUtilization this$0 -> TjHr
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleMemoryAllocated -> wDQM:
    react.graph.IFormatter formatter -> VxWW
    17:27:void <init>() -> <init>
    32:38:void construct() -> oMNU
    43:44:void sample() -> TyVL
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleMemoryAllocated$1 -> wDQM$1:
    react.sampler.SampleMemoryAllocated this$0 -> vcxj
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> GbPG
react.sampler.SampleMemoryAllocationPerSecond -> JlGh:
    react.graph.IFormatter formatter -> VxWW
    17:27:void <init>() -> <init>
    32:38:void construct() -> oMNU
    43:44:void sample() -> TyVL
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleMemoryAllocationPerSecond$1 -> JlGh$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> LsRx
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> GbPG
react.sampler.SampleMemoryFree -> hYjj:
    react.graph.IFormatter formatter -> VxWW
    17:27:void <init>() -> <init>
    32:38:void construct() -> oMNU
    43:44:void sample() -> TyVL
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleMemoryFree$1 -> hYjj$1:
    react.sampler.SampleMemoryFree this$0 -> dyXI
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> GbPG
react.sampler.SampleMemoryMax -> kIas:
    react.graph.IFormatter formatter -> VxWW
    17:27:void <init>() -> <init>
    32:38:void construct() -> oMNU
    43:44:void sample() -> TyVL
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleMemoryMax$1 -> kIas$1:
    react.sampler.SampleMemoryMax this$0 -> pbgr
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> GbPG
react.sampler.SampleMemoryUse -> sHiD:
    react.graph.IFormatter formatter -> VxWW
    17:27:void <init>() -> <init>
    32:38:void construct() -> oMNU
    43:44:void sample() -> TyVL
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleMemoryUse$1 -> sHiD$1:
    react.sampler.SampleMemoryUse this$0 -> AbTF
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> GbPG
react.sampler.SampleRedstonePerSecond -> SvbA:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleRedstonePerSecond$1 -> SvbA$1:
    react.sampler.SampleRedstonePerSecond this$0 -> mQNM
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleRedstonePerTick -> GHkR:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    46:53:void sample() -> TyVL
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleRedstonePerTick$1 -> GHkR$1:
    react.sampler.SampleRedstonePerTick this$0 -> XSrR
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleRedstoneTickTime -> YENg:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleRedstoneTickTime$1 -> YENg$1:
    react.sampler.SampleRedstoneTickTime this$0 -> YOEj
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleRedstoneTickUtilization -> DaeY:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    46:53:void sample() -> TyVL
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleRedstoneTickUtilization$1 -> DaeY$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> RtdV
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleSyncQueue -> uiAq:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleSyncQueue$1 -> uiAq$1:
    react.sampler.SampleSyncQueue this$0 -> RdCc
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleTickTime -> vlEP:
    react.graph.IFormatter formatter -> VxWW
    react.gmath.Average aa -> PfMt
    17:29:void <init>() -> <init>
    34:40:void construct() -> oMNU
    45:47:void sample() -> TyVL
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleTickTime$1 -> vlEP$1:
    react.sampler.SampleTickTime this$0 -> YxxL
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> GbPG
react.sampler.SampleTickUtilization -> Xcna:
    react.graph.IFormatter formatter -> VxWW
    react.gmath.Average aa -> PfMt
    17:29:void <init>() -> <init>
    34:40:void construct() -> oMNU
    45:47:void sample() -> TyVL
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleTickUtilization$1 -> Xcna$1:
    react.sampler.SampleTickUtilization this$0 -> felC
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> GbPG
react.sampler.SampleTicksPerSecond -> ccnG:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleTicksPerSecond$1 -> ccnG$1:
    react.sampler.SampleTicksPerSecond this$0 -> XKaa
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleTileDroppedTicks -> GILb:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleTileDroppedTicks$1 -> GILb$1:
    react.sampler.SampleTileDroppedTicks this$0 -> NNed
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleTileTime -> EJvM:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleTileTime$1 -> EJvM$1:
    react.sampler.SampleTileTime this$0 -> Ngvw
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.sampler.SampleTileTimeLock -> ggiW:
    react.graph.IFormatter formatter -> VxWW
    18:28:void <init>() -> <init>
    33:39:void construct() -> oMNU
    44:45:void sample() -> TyVL
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> WiMA
react.sampler.SampleTileTimeLock$1 -> ggiW$1:
    react.sampler.SampleTileTimeLock this$0 -> IPXN
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> GbPG
react.security.checkpoints.SecurityCheckpointAlpha -> oxRS:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> WjAW
    78:148:void doScan(java.lang.Runnable) -> SeQd
    152:181:byte[] readResource(java.io.File,java.lang.String) -> hrnU
    186:217:react.glang.GMap scan(java.io.File) -> SeQd
    150:150:byte[] access$0(java.io.File,java.lang.String) -> SeQd
react.security.checkpoints.SecurityCheckpointAlpha$1 -> oxRS$1:
    java.lang.Runnable val$r -> rFnO
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> oxRS$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> MnIN
    java.lang.Runnable val$r -> rFnO
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> fSdE:
    java.lang.String ip -> AHaw
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> pbCG:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> pbCG$1:
    react.security.locks.SecurityLockAlpha this$0 -> uYIX
    java.io.File val$f -> yuvX
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> lnfu:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> NxFO
react.slate.PhantomSlate -> lTtb:
    react.glang.GList lines -> bjca
    react.glang.GList viewers -> riRV
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> rWoO
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> xOki
    44:45:void set(int,java.lang.String) -> SeQd
    50:51:void setLines(react.glang.GList) -> iSmf
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> iKiq
    91:95:void addViewer(org.bukkit.entity.Player) -> NxFO
    100:102:void removeViewer(org.bukkit.entity.Player) -> yIji
    107:107:react.glang.GList getViewers() -> NwwN
    113:113:boolean isViewing(org.bukkit.entity.Player) -> ivRN
    119:120:void addLine(java.lang.String) -> Cnsc
    125:126:void clearLines() -> sIMi
react.slate.Slate -> JkfK:
    void build() -> iKiq
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> xOki
    void set(int,java.lang.String) -> SeQd
    void setLines(react.glang.GList) -> iSmf
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> NxFO
    void addLine(java.lang.String) -> Cnsc
    void clearLines() -> sIMi
    void removeViewer(org.bukkit.entity.Player) -> yIji
    react.glang.GList getViewers() -> NwwN
    boolean isViewing(org.bukkit.entity.Player) -> ivRN
    void update() -> update
react.slate.SlateUtil -> eHOv:
    18:18:void <init>() -> <init>
    27:27:org.bukkit.scoreboard.ScoreboardManager getManager() -> AiaQ
    37:37:org.bukkit.scoreboard.Scoreboard newBoard() -> yuSV
    51:61:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> hrnU
    66:76:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> SeQd
    90:100:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> YxDt
    115:121:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> hrnU
    134:146:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> hrnU
    160:172:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> SeQd
    177:187:java.lang.String convertJSON(java.lang.String) -> hPim
    192:208:java.lang.String[] convertJSON(java.lang.String[]) -> SeQd
    213:214:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> hrnU
react.surge.Main -> rEdc:
    react.glang.GList plugins -> kllk
    react.glang.GMap pluginInstances -> SVHY
    react.glang.GList controllerSet -> XmhP
    react.glang.GMap anchors -> HMXJ
    react.glang.GList classes -> jjKR
    java.lang.reflect.Field nsField -> VMoH
    java.lang.reflect.Field thField -> SVHa
    react.glang.GList tracks -> YWYM
    long nsf -> lxaG
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> QxpW
    90:109:long getNanoSync() -> qTJC
    114:115:void requestResetNanos() -> mrPe
    119:127:void requestReload() -> FyRK
    131:134:void requestReload(java.lang.Runnable) -> YxDt
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> hrnU
    201:218:void onStop() -> HUDj
    224:224:void onPostInit() -> LjBY
    230:230:void onPreInit() -> YpGn
    234:245:void shutDownAmps() -> SUCt
    249:458:void initializeAmps() -> ghMt
    463:504:void doScan() -> OrkE
    508:530:void scanForPoolDefiners() -> ESjt
    534:550:void scanForRawEvents() -> oNBm
    554:570:void scanForDynamicTrack() -> SnVW
    574:595:void scanForAmps() -> IOWO
    600:611:void onTick() -> DHJx
react.surge.Main$1 -> rEdc$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> HKlp:
    react.surge.control.AmpedPlugin plugin -> OsmN
    boolean connected -> connected
    int masterTask -> JJjp
    17:21:void <init>(react.surge.control.AmpedPlugin) -> <init>
    25:25:react.surge.control.AmpedPlugin getPluginInstance() -> dDqa
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> RYqC
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> hrnU
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> hrnU
    113:114:void stopTask(int) -> ArAl
    57:57:void access$0(react.surge.PluginAmp) -> hrnU
react.surge.PluginAmp$1 -> HKlp$1:
    react.surge.PluginAmp this$0 -> Dsmc
    1:37:void <init>(react.surge.PluginAmp) -> <init>
    42:44:void run() -> run
react.surge.PluginAmp$2 -> HKlp$2:
    react.surge.PluginAmp this$0 -> Dsmc
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:53:void run() -> run
react.surge.Surge -> hayx:
    react.surge.PluginAmp amp -> tLrm
    react.glang.GList tickComponents -> ryrH
    react.glang.GList atickComponents -> nnGF
    react.surge.sched.TaskManager taskmgr -> ynEe
    react.surge.hotload.HotloadManager hotloadmgr -> OQio
    java.lang.Thread mainThread -> Larh
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> hrnU
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> MlQM
    44:44:java.io.File folder() -> LrQO
    49:51:java.io.File getPluginJarFile() -> Tygk
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> aehl
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> aMIl
    74:74:react.glang.GList getTickComponents() -> pHSq
    79:79:react.glang.GList getAsyncTickComponents() -> ECIN
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> hrnU
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> SeQd
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> hrnU
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> jqVc
    126:126:boolean hasAmp() -> NUrl
    131:131:react.surge.PluginAmp getAmp() -> APPY
    136:136:react.surge.sched.TaskManager getTaskManager() -> GINs
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> OriS
react.surge.cluster.Cluster -> sIIQ:
    react.surge.cluster.ClusterType type -> fCjl
    java.lang.Object t -> tngV
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> hINE
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> fSbx:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> Kewl:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> lLdc:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> DbEU:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> qdeL:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> fBcC:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> rMsy:
    react.surge.cluster.ClusterType INT -> VhAi
    react.surge.cluster.ClusterType BOOLEAN -> JvAK
    react.surge.cluster.ClusterType STRING -> LPrL
    react.surge.cluster.ClusterType STRING_LIST -> ndtL
    react.surge.cluster.ClusterType DOUBLE -> cuyV
    react.surge.cluster.ClusterType LONG -> sBCk
    react.surge.cluster.ClusterType[] ENUM$VALUES -> aosT
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> wTrw:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> PUPq
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> hrnU
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> hrnU
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> PKYJ
react.surge.cluster.ConfigurationDataOutput -> upqD:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> SeQd
react.surge.cluster.DataCluster -> mOfm:
    react.glang.GMap clusters -> BSwa
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> NwvU
    29:33:void fromJson(react.json.JSONObject) -> EmJi
    37:44:react.json.JSONObject toJson() -> HwGG
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> jFbF
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> hrnU
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> turg
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> Ecxb
    194:195:void set(java.lang.String,int) -> EmJi
    199:200:void set(java.lang.String,boolean) -> YxDt
    204:205:void set(java.lang.String,double) -> YxDt
    209:210:void set(java.lang.String,long) -> YxDt
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> hrnU
react.surge.cluster.ICluster -> oDkb:
    react.surge.cluster.ClusterType getType() -> hINE
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> LOib:
react.surge.cluster.IDataInput -> IFbe:
    react.surge.cluster.DataCluster read(java.io.File) -> YxDt
react.surge.cluster.IDataOutput -> bOjk:
    void write(react.surge.cluster.DataCluster,java.io.File) -> hrnU
react.surge.cluster.Key -> XmAv:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> piuL:
    int value() -> value
react.surge.cluster.KeyStore -> rVht:
react.surge.cluster.ReflectedConfigurationException -> FFJt:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> qSgD:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> YxDt
react.surge.cluster.YamlDataOutput -> pQDb:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> hrnU
react.surge.collection.GSound -> wTvu:
    java.lang.String sound -> VVan
    org.bukkit.Sound iSound -> BCVo
    java.lang.Float volume -> YNib
    java.lang.Float pitch -> ecMv
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> TxvD
    61:72:void play(org.bukkit.Location) -> EmJi
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> hrnU
    93:93:java.lang.String getSound() -> MBPK
    98:99:void setSound(java.lang.String) -> ArAl
    103:103:org.bukkit.Sound getiSound() -> ejXN
    108:109:void setiSound(org.bukkit.Sound) -> hrnU
    113:113:java.lang.Float getVolume() -> TqWl
    118:119:void setVolume(java.lang.Float) -> hrnU
    123:123:java.lang.Float getPitch() -> cdQk
    128:129:void setPitch(java.lang.Float) -> SeQd
react.surge.control.AmpedPlugin -> qBdk:
    react.glang.GList controllers -> RchE
    react.gconcurrent.ParallelPoolManager pp -> Ljfv
    react.surge.server.CoreTickThread ctt -> Ajfp
    24:50:void <init>() -> <init>
    void doScan() -> OrkE
    long getNanoSync() -> qTJC
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:97:void onDisable() -> onDisable
    102:102:react.glang.GList getControllers() -> ePdq
    108:109:void registerController(react.surge.control.IController) -> hrnU
    114:125:void onTick() -> DHJx
    130:130:java.lang.String getTickName() -> FWBc
    136:136:react.gconcurrent.ParallelPoolManager getThreadPool() -> qlyK
    142:257:void destroyOldThreads() -> RcBO
    void onControllerRegistry() -> QxpW
    void onStart(react.surge.util.Protocol) -> hrnU
    void onStop() -> HUDj
    void onPostInit() -> LjBY
    void onPreInit() -> YpGn
react.surge.control.AmpedPlugin$1 -> qBdk$1:
    react.surge.control.AmpedPlugin this$0 -> kmQK
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> ArHo
react.surge.control.AmpedPlugin$2 -> qBdk$2:
    react.surge.control.AmpedPlugin this$0 -> kmQK
    1:155:void <init>(react.surge.control.AmpedPlugin) -> <init>
    160:250:void run() -> run
react.surge.control.Control -> tLNo:
react.surge.control.Controller -> dxUD:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> yAkW:
react.surge.control.Enable -> HTbE:
react.surge.control.IController -> DPeh:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> wLfU:
react.surge.control.Plugin -> XdRD:
react.surge.control.SurgePlugin -> ifBM:
    void onStart(react.surge.util.Protocol) -> hrnU
    void onStop() -> HUDj
    void onPostInit() -> LjBY
    void onPreInit() -> YpGn
    void onControllerRegistry() -> QxpW
    void registerController(react.surge.control.IController) -> hrnU
    react.glang.GList getControllers() -> ePdq
    react.gconcurrent.ParallelPoolManager getThreadPool() -> qlyK
react.surge.hotload.HotloadManager -> uydi:
    react.glang.GMap filemods -> Vgbw
    react.glang.GMap filesizes -> oNhf
    react.glang.GMap fileacts -> mPrQ
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> hrnU
    35:38:void untrack(java.io.File) -> aehl
    42:45:void untrackall() -> oVQs
    50:86:void onTick() -> DHJx
    91:91:java.lang.String getTickName() -> FWBc
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> hrnU
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> SeQd
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> YxDt
react.surge.hotload.HotloadManager$1 -> uydi$1:
    react.surge.hotload.HotloadManager this$0 -> gGRN
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> wCuQ:
    boolean init -> hAcM
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> JvDN
    java.lang.Class IChatBaseComponent -> WQTk
    java.lang.Class ChatSerializer -> pQjv
    java.lang.Class PacketPlayOutPlayerInfo -> gyuO
    java.lang.Class PlayerInfoData -> lpSB
    java.lang.Class EnumPlayerInfoAction -> GBDi
    java.lang.Class GameProfile -> HgKR
    java.lang.Class EnumGamemode -> VyEO
    java.lang.Class TileEntitySkull -> VNQF
    java.lang.Class LoadingCache -> Fyum
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> dfsA:
    react.surge.nms.NMSX bountifulAPI -> HwlE
    boolean useOldMethods -> NOJX
    java.lang.String nmsver -> KxeG
    java.lang.Object eTimes -> HxLi
    java.lang.Object eTitle -> nmfj
    java.lang.Object eSubtitle -> YplN
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> hrnU
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> Xtbu
    75:89:java.lang.Class getCBClass(java.lang.String) -> mXMW
    96:104:java.lang.Object serializeChat(java.lang.String) -> Cfei
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> SeQd
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> hrnU
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> qTGs
    151:151:java.lang.String craftPackage() -> IqYJ
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> hrnU
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> hrnU
    197:207:java.lang.Class getNMSClass(java.lang.String) -> wwLh
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> hrnU
    279:280:void clearTitle(org.bukkit.entity.Player) -> SLAE
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> SeQd
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> hrnU
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> hrnU
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> oVBs
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> Ecxb
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> yknP
    434:447:int ping(org.bukkit.entity.Player) -> JIVP
react.surge.nms.NMSX$1 -> dfsA$1:
    org.bukkit.entity.Player val$player -> EKvA
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> dfsA$2:
    org.bukkit.entity.Player val$player -> EKvA
    java.lang.String val$message -> IXkw
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> VCuv:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> PCIT
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> hrnU
    68:82:void clearTitle(org.bukkit.entity.Player) -> SLAE
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> hrnU
react.surge.nms.PacketUtil$V -> VCuv$hrnU:
    react.surge.nms.PacketUtil$V R17 -> SDgP
    react.surge.nms.PacketUtil$V R18 -> jHHv
    react.surge.nms.PacketUtil$V R19 -> nKcs
    react.surge.nms.PacketUtil$V R111 -> MTYv
    react.surge.nms.PacketUtil$V R110 -> TYOQ
    react.surge.nms.PacketUtil$V R112 -> TXnN
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> hJWI
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> rgif:
    java.lang.String title -> title
    java.lang.String subTitle -> mYep
    java.lang.String action -> action
    java.lang.Integer fadeIn -> cCXC
    java.lang.Integer fadeOut -> klqd
    java.lang.Integer stayTime -> fURL
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> DrYG
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> xrMv
    79:80:void setSubTitle(java.lang.String) -> BRaE
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> EeLg
    99:100:void setFadeIn(java.lang.Integer) -> YxDt
    104:104:java.lang.Integer getFadeOut() -> fTLJ
    109:110:void setFadeOut(java.lang.Integer) -> aehl
    114:114:java.lang.Integer getStayTime() -> DsNB
    119:120:void setStayTime(java.lang.Integer) -> EmJi
react.surge.nms.VersionBukkit -> IheT:
    react.surge.nms.VersionBukkit VU -> dqOH
    react.surge.nms.VersionBukkit V7 -> BLIt
    react.surge.nms.VersionBukkit V8 -> WYff
    react.surge.nms.VersionBukkit V9 -> aWDT
    react.surge.nms.VersionBukkit V11 -> IYPI
    react.surge.nms.VersionBukkit V111 -> Wjgv
    react.surge.nms.VersionBukkit V112 -> Jdbw
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> Jude
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> SDCu
    27:32:boolean uc() -> Bles
    37:67:react.surge.nms.VersionBukkit get() -> mPOe
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> pjTs:
    void burst(java.lang.Object) -> yIji
    void setTimeLock(double) -> TxvD
    double getEstimatedTimeUse() -> inWO
    int flush() -> qunB
    int flush(react.gbench.Profiler) -> hrnU
    void queue(java.lang.Object) -> ivRN
    void queue(java.util.List) -> YxDt
    void queue(java.lang.Object[]) -> hrnU
react.surge.sched.ICancellable -> QEhi:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> VUYT:
    void onTick() -> DHJx
    java.lang.String getTickName() -> FWBc
react.surge.sched.ITask -> fSfT:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> OsMS
    java.lang.String getName() -> getName
    double getComputeTime() -> OHXi
    double getTotalComputeTime() -> qSkD
    double getActiveTime() -> jGFK
    boolean hasCompleted() -> BJbc
react.surge.sched.Task -> UQtk:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> gWtD
    double computeTime -> KMsh
    double totalComputeTime -> JSbO
    double activeTime -> wWBe
    boolean completed -> completed
    react.gbench.Profiler profiler -> qwTP
    react.gbench.Profiler activeProfiler -> xjfV
    int ticks -> NNlj
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> aehl
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> OsMS
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> OHXi
    150:150:boolean hasCompleted() -> BJbc
    156:156:double getTotalComputeTime() -> qSkD
    162:162:double getActiveTime() -> jGFK
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> hrnU
    15:15:void access$1(react.surge.sched.Task,boolean) -> hrnU
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> SeQd
    14:14:void access$3(react.surge.sched.Task,double) -> hrnU
    12:12:void access$4(react.surge.sched.Task,double) -> SeQd
    14:14:double access$5(react.surge.sched.Task) -> YxDt
    13:13:void access$6(react.surge.sched.Task,double) -> YxDt
    13:13:double access$7(react.surge.sched.Task) -> aehl
    12:12:double access$8(react.surge.sched.Task) -> EmJi
react.surge.sched.Task$1 -> UQtk$1:
    react.surge.sched.Task this$0 -> RdKV
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> UQtk$2:
    react.surge.sched.Task this$0 -> RdKV
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> UQtk$3:
    react.surge.sched.Task this$0 -> RdKV
    int val$total -> GBGM
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> uiCP:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> gWtD
    double computeTime -> KMsh
    double totalComputeTime -> JSbO
    double activeTime -> wWBe
    boolean completed -> completed
    react.gbench.Profiler profiler -> qwTP
    react.gbench.Profiler activeProfiler -> xjfV
    int ticks -> NNlj
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> aehl
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> OsMS
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> OHXi
    101:101:boolean hasCompleted() -> BJbc
    107:107:double getTotalComputeTime() -> qSkD
    113:113:double getActiveTime() -> jGFK
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> hrnU
    12:12:void access$1(react.surge.sched.TaskLater,double) -> hrnU
    13:13:double access$2(react.surge.sched.TaskLater) -> SeQd
    12:12:double access$3(react.surge.sched.TaskLater) -> YxDt
    13:13:void access$4(react.surge.sched.TaskLater,double) -> SeQd
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> aehl
    14:14:double access$6(react.surge.sched.TaskLater) -> EmJi
    14:14:void access$7(react.surge.sched.TaskLater,double) -> YxDt
react.surge.sched.TaskLater$1 -> uiCP$1:
    react.surge.sched.TaskLater this$0 -> dNjN
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> PTIB:
    react.glang.GList tasks -> YWDe
    react.glang.GMap taskProfiles -> lyFJ
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> hrnU
    25:35:void onTick() -> DHJx
    39:40:void putFinishingTask(react.surge.sched.ITask) -> SeQd
    44:53:void putTask(react.surge.sched.ITask) -> YxDt
    58:58:java.lang.String getTickName() -> FWBc
    63:63:react.glang.GList getTasks() -> SUFU
    68:68:react.glang.GMap getTaskProfiles() -> tvfR
react.surge.sched.TaskProfile -> KTyJ:
    double activeTime -> wWBe
    double computeTickTime -> IioU
    double computeTime -> KMsh
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> jGFK
    23:24:void setActiveTime(double) -> SLAE
    28:28:double getComputeTickTime() -> Wibc
    33:34:void setComputeTickTime(double) -> JIVP
    38:38:double getComputeTime() -> OHXi
    43:44:void setComputeTime(double) -> DrYG
react.surge.server.AsyncTick -> Xtpi:
react.surge.server.CPS -> gxlG:
    react.glang.GMap keys -> eQmH
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> pOtM
    46:99:void scan() -> MdVX
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> YxDt
react.surge.server.CoreTickThread -> IXDt:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> vsua:
    long memoryFree -> sSGD
    long memoryUsed -> MCXQ
    long memoryMax -> nLHI
    long lastMemoryUsed -> twlD
    long memoryUsedAfterGC -> losm
    long allocated -> tMXF
    long collected -> neYB
    long collections -> QPDx
    long sms -> XmkU
    long memoryAllocatedPerTick -> tDfc
    long memoryCollectedPerTick -> GIwO
    long memoryFullyAllocatedPerTick -> feqe
    long mah -> PDQU
    long mahs -> FyyD
    22:39:void <init>() -> <init>
    void onAllocationSet() -> RYpm
    46:98:void run() -> run
    102:102:long getMemoryFree() -> tUBs
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> JIiP
    117:117:long getLastMemoryUsed() -> hYpT
    122:122:long getMemoryUsedAfterGC() -> uFdD
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> vIgQ
    137:137:long getCollections() -> XldV
    142:142:long getSms() -> hkQn
    147:147:long getMemoryAllocatedPerTick() -> HnXD
    152:152:long getMemoryCollectedPerTick() -> OXxc
    157:157:long getMemoryFullyAllocatedPerTick() -> ggnP
    162:162:long getMah() -> YDsd
    167:167:long getMahs() -> Drkt
react.surge.server.SuperSampler -> PCGO:
    react.gmath.Average ticksPerSecondL -> whGM
    react.gmath.Average tickTimeL -> fwWX
    react.gmath.Average mahL -> SxQQ
    double ticksPerSecond -> KocL
    double ticksPerSecondRaw -> OQpu
    double tickTime -> xYfy
    double tickTimeRaw -> TYPm
    boolean running -> running
    boolean frozen -> qesp
    double tickUtilizationRaw -> XnNY
    double tickUtilization -> SDkf
    double leftoverTickTime -> rOef
    long memoryUse -> OAQG
    long memoryAllocated -> hcjk
    long memoryCollected -> Swou
    long mahs -> FyyD
    int totalChunks -> VVfL
    int totalEntities -> Ajjq
    int totalDrops -> LYio
    int totalTiles -> fwVj
    int totalLiving -> vvDr
    int chunksLoaded -> twnW
    int chunksUnloaded -> Fqjy
    react.surge.server.WorldMonitor worldMonitor -> FFvr
    react.surge.server.TPSMonitor tpsMonitor -> QOga
    react.surge.server.MemoryMonitor memoryMonitor -> OQrK
    java.lang.StackTraceElement[] lockStack -> PwYK
    react.glang.GMap spikes -> lDkH
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> DHJx
    154:154:java.lang.String getTickName() -> FWBc
    159:159:react.gmath.Average getTicksPerSecondL() -> TNux
    164:164:double getTicksPerSecond() -> ugyO
    169:169:double getTicksPerSecondRaw() -> nmDQ
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> gqCi
    184:184:react.gmath.Average getTickTimeL() -> YUwc
    189:189:double getTickTime() -> MdWf
    194:194:double getTickTimeRaw() -> QVqP
    199:199:double getTickUtilizationRaw() -> HeiS
    204:204:double getTickUtilization() -> DbNV
    209:209:double getLeftoverTickTime() -> MtxS
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> vlNI
    219:219:long getMemoryUse() -> mqsj
    224:224:long getMemoryAllocated() -> jykw
    229:229:long getMemoryCollected() -> XmGr
    234:234:react.gmath.Average getMahL() -> xqsM
    239:239:long getMahs() -> Drkt
    244:244:int getTotalChunks() -> lfaE
    249:249:int getTotalEntities() -> ogYY
    254:254:int getTotalDrops() -> baRv
    259:259:int getTotalTiles() -> WHAv
    264:264:int getTotalLiving() -> rEnV
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> ctwe
    274:274:int getChunksLoaded() -> dVYA
    279:279:int getChunksUnloaded() -> ghQv
    284:285:void setTicksPerSecondL(react.gmath.Average) -> hrnU
    289:290:void setTickTimeL(react.gmath.Average) -> SeQd
    294:295:void setMahL(react.gmath.Average) -> YxDt
    299:300:void setTicksPerSecond(double) -> OYFQ
    304:305:void setTicksPerSecondRaw(double) -> iSmr
    309:310:void setTickTime(double) -> Tpea
    314:315:void setTickTimeRaw(double) -> aKuX
    319:320:void setRunning(boolean) -> bhmC
    324:325:void setTickUtilizationRaw(double) -> uFOT
    329:330:void setTickUtilization(double) -> wKtU
    334:335:void setLeftoverTickTime(double) -> NnrU
    339:340:void setMemoryUse(long) -> TxvD
    344:345:void setMemoryAllocated(long) -> SLAE
    349:350:void setMemoryCollected(long) -> JIVP
    354:355:void setMahs(long) -> DrYG
    359:360:void setTotalChunks(int) -> Xtbu
    364:365:void setTotalEntities(int) -> mXMW
    369:370:void setTotalDrops(int) -> Cfei
    374:375:void setTotalTiles(int) -> wwLh
    379:380:void setTotalLiving(int) -> oVBs
    384:385:void setChunksLoaded(int) -> BRaE
    389:390:void setChunksUnloaded(int) -> pOtM
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> hrnU
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> hrnU
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> hrnU
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> oohu
    419:419:react.glang.GMap getSpikes() -> HKhT
    31:31:void access$0(react.surge.server.SuperSampler,int) -> hrnU
    33:33:void access$1(react.surge.server.SuperSampler,int) -> SeQd
    34:34:void access$2(react.surge.server.SuperSampler,int) -> YxDt
    32:32:void access$3(react.surge.server.SuperSampler,int) -> aehl
    35:35:void access$4(react.surge.server.SuperSampler,int) -> EmJi
    36:36:void access$5(react.surge.server.SuperSampler,int) -> Ecxb
    37:37:void access$6(react.surge.server.SuperSampler,int) -> pPSQ
    19:19:void access$7(react.surge.server.SuperSampler,double) -> hrnU
    21:21:void access$8(react.surge.server.SuperSampler,double) -> SeQd
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> hrnU
    19:19:double access$10(react.surge.server.SuperSampler) -> SeQd
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> YxDt
    21:21:double access$12(react.surge.server.SuperSampler) -> aehl
    18:18:void access$13(react.surge.server.SuperSampler,double) -> YxDt
    20:20:void access$14(react.surge.server.SuperSampler,double) -> aehl
    24:24:void access$15(react.surge.server.SuperSampler,double) -> EmJi
    20:20:double access$16(react.surge.server.SuperSampler) -> EmJi
    25:25:void access$17(react.surge.server.SuperSampler,double) -> Ecxb
    25:25:double access$18(react.surge.server.SuperSampler) -> Ecxb
    26:26:void access$19(react.surge.server.SuperSampler,double) -> pPSQ
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> hrnU
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> pPSQ
    27:27:void access$22(react.surge.server.SuperSampler,long) -> hrnU
    28:28:void access$23(react.surge.server.SuperSampler,long) -> SeQd
    29:29:void access$24(react.surge.server.SuperSampler,long) -> YxDt
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> AFix
    30:30:void access$26(react.surge.server.SuperSampler,long) -> aehl
react.surge.server.SuperSampler$1 -> PCGO$1:
    react.surge.server.SuperSampler this$0 -> Gtla
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> hrnU
react.surge.server.SuperSampler$2 -> PCGO$2:
    react.surge.server.SuperSampler this$0 -> Gtla
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> awbc
    106:107:void onSpike() -> OPkc
react.surge.server.SuperSampler$3 -> PCGO$3:
    react.surge.server.SuperSampler this$0 -> Gtla
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> RYpm
react.surge.server.TPSMonitor -> wnlL:
    double tickTimeMS -> LPvt
    double rawTicksPerSecond -> LHfk
    react.gbench.Profiler tickProfiler -> opnc
    react.gbench.Profiler tickTimeProfiler -> jHMa
    boolean ticked -> rqfy
    java.lang.Thread$State lastState -> FPHG
    double actualTickTimeMS -> dOLc
    double ltt -> FrKL
    long lastTick -> YhDr
    boolean frozen -> qesp
    java.lang.StackTraceElement[] lockedStack -> WYgk
    22:38:void <init>() -> <init>
    void onTicked() -> awbc
    void onSpike() -> OPkc
    47:121:void run() -> run
    125:153:void processState(java.lang.Thread$State) -> hrnU
    157:157:double getTickTimeMS() -> anqU
    162:162:double getRawTicksPerSecond() -> qSks
    167:167:react.gbench.Profiler getTickProfiler() -> LaTC
    172:172:boolean isTicked() -> WYBi
    177:178:void markTick() -> pXxg
    182:182:react.gbench.Profiler getTickTimeProfiler() -> fdmY
    187:187:java.lang.Thread$State getLastState() -> uFfF
    192:192:double getActualTickTimeMS() -> ctvN
    197:197:double getLtt() -> ogXS
    202:202:long getLastTick() -> byqE
    207:207:boolean isFrozen() -> isFrozen
    212:212:java.lang.StackTraceElement[] getLockedStack() -> opJE
react.surge.server.WorldMonitor -> WjAW:
    boolean chunksChanged -> WaxU
    boolean dropChanged -> hBGM
    boolean tileChanged -> vdaX
    boolean livingChanged -> ECrg
    boolean totalChanged -> gaFo
    boolean updated -> GJYk
    int totalChunks -> VVfL
    int totalDrops -> LYio
    int totalTiles -> fwVj
    int totalLiving -> vvDr
    int totalEntities -> Ajjq
    int chunksLoaded -> twnW
    int chunksUnloaded -> Fqjy
    long ms -> oNBm
    25:44:void <init>() -> <init>
    49:69:void run() -> run
    void updated(int,int,int,int,int,int,int) -> hrnU
    76:81:void on(org.bukkit.event.world.ChunkLoadEvent) -> SeQd
    86:91:void on(org.bukkit.event.world.ChunkUnloadEvent) -> hrnU
    96:97:void on(org.bukkit.event.entity.EntitySpawnEvent) -> hrnU
    102:103:void on(org.bukkit.event.entity.EntityDeathEvent) -> hrnU
    108:109:void on(org.bukkit.event.player.PlayerDropItemEvent) -> hrnU
    114:115:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> hrnU
    120:121:void on(org.bukkit.event.entity.EntityPickupItemEvent) -> hrnU
    126:127:void on(org.bukkit.event.block.BlockPlaceEvent) -> hrnU
    132:133:void on(org.bukkit.event.block.BlockBreakEvent) -> hrnU
    137:138:void doUpdate() -> DQKf
    142:193:void sample() -> TyVL
    197:203:void sampleTotalCount() -> iLUL
    207:213:void sampleLivingCount() -> fJyx
    217:226:void sampleTileCount() -> RIRf
    230:236:void sampleDropCount() -> rgot
    240:246:void sampleChunkCount() -> uFfN
react.surge.text.PhantomSpinner -> xOki:
    react.surge.text.ProgressSpinner s -> CNnm
    react.surge.text.ProgressSpinner c -> hAfR
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> NwwN:
    java.lang.String[] chars -> riWN
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> QXWj
    react.surge.text.ProgressSpinner NETWORK -> JluQ
    react.surge.text.ProgressSpinner CIRCLES -> qfSg
    react.surge.text.ProgressSpinner RANDOMS -> txQc
    react.surge.text.ProgressSpinner MERGERS -> UTFL
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> JlPE
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> sIMi:
    int value() -> value
react.surge.util.Area -> AiaQ:
    org.bukkit.Location location -> Dbtx
    java.lang.Double radius -> jGoe
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> hrnU
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> SDEg
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> Ecxb
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> pPSQ
    109:109:boolean isWithin(org.bukkit.Location) -> AFix
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> aehl
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> hrnU
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> fTMX
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> QhRy
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> yknP
    257:257:java.lang.Double getRadius() -> JkoM
    268:269:void setRadius(java.lang.Double) -> YxDt
    278:283:org.bukkit.Location random() -> wMMA
react.surge.util.Axis -> yuSV:
    react.surge.util.Axis X -> DcVY
    react.surge.util.Axis Y -> Yprj
    react.surge.util.Axis Z -> oOPE
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> raJM
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> RkUw
    29:29:org.bukkit.util.Vector negative() -> qSjr
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> QxpW:
    react.surge.util.BlastResistance BARRIER -> Iacu
    react.surge.util.BlastResistance BEDROCK -> oOPK
    react.surge.util.BlastResistance COMMAND -> lMvP
    react.surge.util.BlastResistance ENDER_PORTAL -> iDmO
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> XnPa
    react.surge.util.BlastResistance ANVIL -> BnQU
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> qwXW
    react.surge.util.BlastResistance OBSIDIAN -> ahJb
    react.surge.util.BlastResistance ENDER_CHEST -> MwBn
    react.surge.util.BlastResistance WATER -> DkgR
    react.surge.util.BlastResistance LAVA -> axjr
    react.surge.util.BlastResistance STATIONARY_WATER -> FPJu
    react.surge.util.BlastResistance DRAGON_EGG -> CWaT
    react.surge.util.BlastResistance ENDER_STONE -> EMGB
    react.surge.util.BlastResistance COAL_BLOCK -> ORSR
    react.surge.util.BlastResistance DIAMOND_BLOCK -> veEF
    react.surge.util.BlastResistance EMERALD_BLOCK -> lowo
    react.surge.util.BlastResistance GOLD_BLOCK -> UugK
    react.surge.util.BlastResistance IRON_BLOCK -> keFK
    react.surge.util.BlastResistance REDSTONE_BLOCK -> xaxe
    react.surge.util.BlastResistance BRICK -> uipb
    react.surge.util.BlastResistance BRICK_STAIRS -> urah
    react.surge.util.BlastResistance HARD_CLAY -> Chbp
    react.surge.util.BlastResistance STONE -> hdLW
    react.surge.util.BlastResistance SMOOTH_BRICK -> sckH
    react.surge.util.BlastResistance SMOOTH_STAIRS -> IjUO
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> rrJS
    react.surge.util.BlastResistance STONE_SLAB2 -> nBxq
    react.surge.util.BlastResistance IRON_DOOR -> GAkP
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> Evyf
    react.surge.util.BlastResistance IRON_TRAPDOOR -> YWcN
    react.surge.util.BlastResistance MOB_SPAWNER -> EoLc
    react.surge.util.BlastResistance WEB -> EUYi
    react.surge.util.BlastResistance DISPENSER -> ayNB
    react.surge.util.BlastResistance DROPPER -> qUWh
    react.surge.util.BlastResistance FURNACE -> JJuv
    react.surge.util.BlastResistance BURNING_FURNACE -> tgQs
    react.surge.util.BlastResistance BEACON -> Wjng
    react.surge.util.BlastResistance COAL_ORE -> qoJi
    react.surge.util.BlastResistance COCOA -> qTvr
    react.surge.util.BlastResistance DIAMOND_ORE -> ELiN
    react.surge.util.BlastResistance EMERALD_ORE -> PoLV
    react.surge.util.BlastResistance FENCE -> ELiS
    react.surge.util.BlastResistance FENCE_GATE -> VglV
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> xjmG
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> mjmV
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> IQEt
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> IjWm
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> wWHs
    react.surge.util.BlastResistance ACACIA_FENCE -> ipDL
    react.surge.util.BlastResistance BIRCH_FENCE -> stoV
    react.surge.util.BlastResistance DARK_OAK_FENCE -> igRb
    react.surge.util.BlastResistance SPRUCE_FENCE -> kvIP
    react.surge.util.BlastResistance JUNGLE_FENCE -> dhcM
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> WYkr
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> UBdY
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> Gcnx
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> BTbH
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> keGg
    react.surge.util.BlastResistance QUARTZ_STAIRS -> ynPH
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> lyKb
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> QrOL
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> vCCa
    react.surge.util.BlastResistance WOOD_STAIRS -> qevm
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> GRna
    react.surge.util.BlastResistance ACACIA_DOOR -> uQAn
    react.surge.util.BlastResistance BIRCH_DOOR -> KVmD
    react.surge.util.BlastResistance DARK_OAK_DOOR -> lWKp
    react.surge.util.BlastResistance SPRUCE_DOOR -> AYpT
    react.surge.util.BlastResistance JUNGLE_DOOR -> WHnH
    react.surge.util.BlastResistance GOLD_ORE -> CiHi
    react.surge.util.BlastResistance HOPPER -> YpwB
    react.surge.util.BlastResistance IRON_ORE -> lFJj
    react.surge.util.BlastResistance LAPIS_BLOCK -> tpEg
    react.surge.util.BlastResistance LAPIS_ORE -> TPfY
    react.surge.util.BlastResistance QUARTZ_ORE -> smBd
    react.surge.util.BlastResistance REDSTONE_ORE -> JvMj
    react.surge.util.BlastResistance TRAP_DOOR -> tpEe
    react.surge.util.BlastResistance WOOD -> ahNG
    react.surge.util.BlastResistance CHEST -> IGuc
    react.surge.util.BlastResistance TRAPPED_CHEST -> PnmX
    react.surge.util.BlastResistance WORKBENCH -> bjoh
    react.surge.util.BlastResistance CAULDRON -> uQDo
    react.surge.util.BlastResistance LOG -> Bmsv
    react.surge.util.BlastResistance LOG_2 -> ebwu
    react.surge.util.BlastResistance BOOKSHELF -> Enmx
    react.surge.util.BlastResistance BANNER -> wVjY
    react.surge.util.BlastResistance STANDING_BANNER -> Jdko
    react.surge.util.BlastResistance WALL_BANNER -> RKAc
    react.surge.util.BlastResistance JACK_O_LANTERN -> qDXO
    react.surge.util.BlastResistance MELON_BLOCK -> NOUo
    react.surge.util.BlastResistance SKULL -> XnTG
    react.surge.util.BlastResistance PUMPKIN -> Jdiq
    react.surge.util.BlastResistance SIGN -> IjXW
    react.surge.util.BlastResistance SIGN_POST -> BvgO
    react.surge.util.BlastResistance WALL_SIGN -> mHlE
    react.surge.util.BlastResistance QUARTZ_BLOCK -> DkjN
    react.surge.util.BlastResistance NOTE_BLOCK -> kJvV
    react.surge.util.BlastResistance RED_SANDSTONE -> pRUm
    react.surge.util.BlastResistance SANDSTONE -> fTyJ
    react.surge.util.BlastResistance WOOL -> Glbm
    react.surge.util.BlastResistance MONSTER_EGG -> tVPr
    react.surge.util.BlastResistance RAILS -> bHld
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> rGYg
    react.surge.util.BlastResistance DETECTOR_RAIL -> sSNP
    react.surge.util.BlastResistance POWERED_RAIL -> BDCH
    react.surge.util.BlastResistance CLAY -> SMbe
    react.surge.util.BlastResistance DIRT -> MLRM
    react.surge.util.BlastResistance GRASS -> XwHQ
    react.surge.util.BlastResistance GRAVEL -> QjCO
    react.surge.util.BlastResistance SPONGE -> fnnY
    react.surge.util.BlastResistance BREWING_STAND -> lqAR
    react.surge.util.BlastResistance STONE_BUTTON -> ekkN
    react.surge.util.BlastResistance WOOD_BUTTON -> UeNL
    react.surge.util.BlastResistance CAKE_BLOCK -> TGwD
    react.surge.util.BlastResistance ICE -> ifuq
    react.surge.util.BlastResistance PACKED_ICE -> lFMN
    react.surge.util.BlastResistance LEVER -> GKDH
    react.surge.util.BlastResistance MYCEL -> mbae
    react.surge.util.BlastResistance PISTON_BASE -> QYBG
    react.surge.util.BlastResistance PISTON_EXTENSION -> nedi
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> nvey
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> GRsY
    react.surge.util.BlastResistance GOLD_PLATE -> yCaA
    react.surge.util.BlastResistance IRON_PLATE -> RBQv
    react.surge.util.BlastResistance STONE_PLATE -> uXvU
    react.surge.util.BlastResistance WOOD_PLATE -> sRqA
    react.surge.util.BlastResistance SAND -> Iajj
    react.surge.util.BlastResistance SOUL_SAND -> qCyO
    react.surge.util.BlastResistance CACTUS -> RtvN
    react.surge.util.BlastResistance LADDER -> JTKc
    react.surge.util.BlastResistance NETHERRACK -> KElT
    react.surge.util.BlastResistance GLASS -> tUrh
    react.surge.util.BlastResistance THIN_GLASS -> uYVg
    react.surge.util.BlastResistance STAINED_GLASS -> ayPc
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> eRXR
    react.surge.util.BlastResistance GLOWSTONE -> KWOM
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> wVkh
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> THVn
    react.surge.util.BlastResistance SEA_LANTERN -> GBQb
    react.surge.util.BlastResistance BED_BLOCK -> Ajsx
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> dpxF
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> uafi
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> pAUl
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> LHpL
    react.surge.util.BlastResistance LEAVES -> LYtI
    react.surge.util.BlastResistance LEAVES_2 -> LYtG
    react.surge.util.BlastResistance SNOW -> PwcA
    int br -> yfGV
    react.surge.util.BlastResistance[] ENUM$VALUES -> igXn
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> WOsi
    175:190:int get(org.bukkit.Material) -> hrnU
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> qTJC:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> Ecxb
react.surge.util.C -> mrPe:
    react.surge.util.C BLACK -> mjtM
    react.surge.util.C DARK_BLUE -> IrnL
    react.surge.util.C DARK_GREEN -> Dkno
    react.surge.util.C DARK_AQUA -> smGI
    react.surge.util.C DARK_RED -> vuoK
    react.surge.util.C DARK_PURPLE -> TsNY
    react.surge.util.C GOLD -> UBkh
    react.surge.util.C GRAY -> XCeU
    react.surge.util.C DARK_GRAY -> WtHF
    react.surge.util.C BLUE -> rjBj
    react.surge.util.C GREEN -> tpIP
    react.surge.util.C AQUA -> iVVm
    react.surge.util.C RED -> QXbl
    react.surge.util.C LIGHT_PURPLE -> hJbg
    react.surge.util.C YELLOW -> JBlo
    react.surge.util.C WHITE -> OkoO
    react.surge.util.C MAGIC -> xjsD
    react.surge.util.C BOLD -> nUFN
    react.surge.util.C STRIKETHROUGH -> NNyR
    react.surge.util.C UNDERLINE -> htuu
    react.surge.util.C ITALIC -> oiJY
    react.surge.util.C RESET -> igWi
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> hAqL
    char code -> XLUN
    boolean isFormat -> bIPq
    java.lang.String toString -> FidE
    java.util.Map BY_ID -> VFNm
    java.util.Map BY_CHAR -> dNuq
    java.util.Map dyeChatMap -> HDua
    java.util.Map chatHexMap -> CNyb
    java.util.Map dyeHexMap -> Ficl
    int[] $SWITCH_TABLE$surge$util$C -> btEV
    react.surge.util.C[] ENUM$VALUES -> dOWM
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> dolJ
    378:378:java.lang.String hex() -> Wifb
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> AFix
    434:442:react.surge.util.C getByChar(java.lang.String) -> xGKW
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> SeQd
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> hrnU
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> SeQd
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> YxDt
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> iusc
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> eGdB
    560:578:java.lang.String generateColorTable() -> palw
    588:588:org.bukkit.ChatColor chatColor() -> psPK
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> pPSQ
    632:679:byte getItemMeta() -> sADP
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> Xcxf
react.surge.util.C$1 -> mrPe$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> mrPe$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> mrPe$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> mrPe$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> mrPe$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> mrPe$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> mrPe$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> mrPe$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> mrPe$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> mrPe$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> mrPe$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> mrPe$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> mrPe$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> mrPe$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> mrPe$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> mrPe$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> mrPe$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> mrPe$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> mrPe$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> mrPe$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> mrPe$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> mrPe$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> FyRK:
    double number -> tofq
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> bOXu
    23:25:react.surge.util.CDou add(double) -> rUwF
    30:32:react.surge.util.CDou sub(double) -> KThG
    37:37:double get() -> get
    42:48:void circ() -> xOrB
react.surge.util.CMD -> HUDj:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> gPPG
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> uylm
    51:53:void execute(org.bukkit.command.CommandSender) -> EmJi
    60:77:void execute() -> execute
react.surge.util.CNum -> LjBY:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> xGKW
    23:25:react.surge.util.CNum add(int) -> iusc
    30:32:react.surge.util.CNum sub(int) -> eGdB
    37:37:int get() -> get
    42:48:void circ() -> xOrB
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> romJ
react.surge.util.Chunks -> YpGn:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> EBVk
    33:40:react.glang.GList getLoadedChunks() -> ObPN
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> SeQd
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> hrnU
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> hrnU
    98:98:boolean unload(org.bukkit.Chunk) -> mGIR
    114:124:int unload(react.glang.GList,boolean,boolean) -> hrnU
    138:138:int unload(react.glang.GList,boolean) -> hrnU
    150:150:int unload(react.glang.GList) -> EBVk
    166:166:boolean isLoaded(java.lang.String,int,int) -> hrnU
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> SeQd
    201:205:void load(react.glang.GList) -> bhmC
react.surge.util.Cuboid -> SUCt:
    java.lang.String worldName -> nwHB
    int x1 -> LjuL
    int y1 -> jsKe
    int z1 -> GtxA
    int x2 -> lVnJ
    int y2 -> nDBq
    int z2 -> BCfN
    int[] $SWITCH_TABLE$surge$util$Axis -> uHVd
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> BmyV
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> hrnU
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> YxDt
    93:93:boolean hasPlayers() -> RkXq
    98:110:react.glang.GList getPlayers() -> KnbO
    115:166:react.glang.GList getEntities() -> JJOc
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> nlPu
    287:287:org.bukkit.Location getLowerNE() -> FFTK
    298:298:org.bukkit.Location getUpperSW() -> cSWW
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> SDHp
    348:348:int getSizeY() -> imyE
    358:358:int getSizeZ() -> uOXp
    368:368:int getLowerX() -> GcGp
    378:378:int getLowerY() -> vJKi
    388:388:int getLowerZ() -> rhRl
    398:398:int getUpperX() -> QyUy
    408:408:int getUpperY() -> Puqx
    418:418:int getUpperZ() -> XRvA
    428:438:org.bukkit.block.Block[] corners() -> ssgA
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> hrnU
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> SeQd
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> YxDt
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> aehl
    546:546:boolean contains(int,int,int) -> EmJi
    558:558:boolean contains(org.bukkit.block.Block) -> pPSQ
    570:570:boolean contains(org.bukkit.Location) -> FDyI
    580:580:int volume() -> OQMV
    591:601:byte averageLightLevel() -> FxvT
    612:612:react.surge.util.Cuboid contract() -> qBlB
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> hrnU
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> SeQd
    708:715:boolean containsOnly(org.bukkit.Material) -> SeQd
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> hrnU
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> Ecxb
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> hrnU
    786:800:java.util.List getChunks() -> oDug
    815:819:void fill(int,byte) -> hrnU
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> Drox
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> DPmY
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> kJKt
react.surge.util.Cuboid$1 -> SUCt$1:
    react.surge.util.Cuboid this$0 -> Yhiq
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> FDyI
    1:1:java.lang.Object onAdapt(java.lang.Object) -> pPSQ
react.surge.util.Cuboid$CuboidDirection -> SUCt$hrnU:
    react.surge.util.Cuboid$CuboidDirection North -> FaSw
    react.surge.util.Cuboid$CuboidDirection East -> EnrG
    react.surge.util.Cuboid$CuboidDirection South -> PgDQ
    react.surge.util.Cuboid$CuboidDirection West -> BLXk
    react.surge.util.Cuboid$CuboidDirection Up -> Vgsl
    react.surge.util.Cuboid$CuboidDirection Down -> yvjJ
    react.surge.util.Cuboid$CuboidDirection Horizontal -> gqvA
    react.surge.util.Cuboid$CuboidDirection Vertical -> qwbl
    react.surge.util.Cuboid$CuboidDirection Both -> oXJv
    react.surge.util.Cuboid$CuboidDirection Unknown -> EMQq
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> BmyV
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> MLYG
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> Tymy
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> kJKt
react.surge.util.Cuboid$CuboidIterator -> SUCt$SeQd:
    org.bukkit.World w -> JvTT
    int baseX -> DtcC
    int baseY -> xQcQ
    int baseZ -> AcHU
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> EVDD
    int sizeY -> cKvh
    int sizeZ -> MDID
    react.surge.util.Cuboid this$0 -> Yhiq
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> ghMt:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> OrkE:
    react.glang.GList buffer -> suXd
    10:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    14:18:void flush() -> flush
    22:33:void log(java.lang.String,java.lang.String) -> aehl
    37:38:void l(java.lang.Object,java.lang.String) -> SeQd
    42:43:void s(java.lang.Object,java.lang.String) -> YxDt
    47:48:void v(java.lang.Object,java.lang.String) -> aehl
    52:53:void w(java.lang.Object,java.lang.String) -> EmJi
    57:58:void f(java.lang.Object,java.lang.String) -> Ecxb
    62:69:void l(java.lang.String) -> romJ
    73:80:void s(java.lang.String) -> nlPu
    84:91:void v(java.lang.String) -> oLpU
    95:102:void w(java.lang.String) -> kshd
    106:113:void f(java.lang.String) -> KCjF
react.surge.util.DMSRequire -> ESjt:
    react.surge.util.DMSRequirement value() -> tfID
react.surge.util.DMSRequirement -> oNBm:
    react.surge.util.DMSRequirement SQL -> AYvD
    react.surge.util.DMSRequirement[] ENUM$VALUES -> vBlN
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> SnVW:
    react.surge.util.Depend VAULT -> AjwO
    react.surge.util.Depend FAWE -> yKti
    react.surge.util.Depend WORLDEDIT -> lxsY
    react.surge.util.Depend PROTOLIB -> FXdY
    react.surge.util.Depend CITIZENS -> gjEY
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> rjDk
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> IOWO:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> NMib
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> dDqa:
    react.surge.util.DimensionFace X -> Vxst
    react.surge.util.DimensionFace Y -> slfk
    react.surge.util.DimensionFace Z -> PgBt
    react.surge.util.DimensionFace[] ENUM$VALUES -> aOAV
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> RYqC:
    react.surge.util.Direction U -> aEnm
    react.surge.util.Direction D -> gGaB
    react.surge.util.Direction N -> lVog
    react.surge.util.Direction S -> fMOf
    react.surge.util.Direction E -> PoTS
    react.surge.util.Direction W -> Ajwu
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> hAre
    int[] $SWITCH_TABLE$surge$util$Direction -> hmHP
    react.surge.util.Direction[] ENUM$VALUES -> yUIe
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> SUJC
    61:61:int x() -> MljD
    66:66:int y() -> APUi
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> VMQQ
    81:81:react.glang.GList news() -> qSqE
    86:86:react.glang.GList udnews() -> yAug
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> iSmr
    115:147:react.surge.util.Direction fromByte(byte) -> AFix
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> htJp
react.surge.util.DynamicConfiguration -> LrQO:
react.surge.util.DynamicTracker -> Tygk:
react.surge.util.Embedded -> aMIl:
    react.glang.GList get() -> aEBg
    void add(java.lang.Object) -> add
react.surge.util.FU -> pHSq:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> hrnU
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> SeQd
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> EmJi
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> Ecxb
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> ECIN:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> YDbH
react.surge.util.Health -> jqVc:
    double hp -> pdBC
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> yKGq
    41:41:double getHearts() -> Rsjj
    51:51:double getHalfHearts() -> YooE
    61:61:int getFlatHalfHearts() -> AHGY
react.surge.util.IO -> NUrl:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> APPY:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> hrnU
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> hrnU
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> hrnU
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> hrnU
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> hrnU
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> SeQd
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> YxDt
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> aehl
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> hrnU
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> hrnU
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> hrnU
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> hrnU
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> EmJi
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> Ecxb
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> pPSQ
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> AFix
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> yknP
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> hrnU
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> FDyI
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> OYFQ
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> hrnU
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> hrnU
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> SeQd
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> hrnU
react.surge.util.MSound -> GINs:
    react.surge.util.MSound AMBIENCE_CAVE -> CWnX
    react.surge.util.MSound AMBIENCE_RAIN -> hBWR
    react.surge.util.MSound AMBIENCE_THUNDER -> NXOF
    react.surge.util.MSound ANVIL_BREAK -> nLXo
    react.surge.util.MSound ANVIL_LAND -> Jdsd
    react.surge.util.MSound ANVIL_USE -> DdCl
    react.surge.util.MSound ARROW_HIT -> LRIR
    react.surge.util.MSound BURP -> qUbW
    react.surge.util.MSound CHEST_CLOSE -> NXNn
    react.surge.util.MSound CHEST_OPEN -> BwOH
    react.surge.util.MSound CLICK -> NWmu
    react.surge.util.MSound DOOR_CLOSE -> VphK
    react.surge.util.MSound DOOR_OPEN -> aguj
    react.surge.util.MSound DRINK -> AcJQ
    react.surge.util.MSound EAT -> XDJO
    react.surge.util.MSound EXPLODE -> gqvx
    react.surge.util.MSound FALL_BIG -> apgH
    react.surge.util.MSound FALL_SMALL -> btJF
    react.surge.util.MSound FIRE -> lOCS
    react.surge.util.MSound FIRE_IGNITE -> PgDq
    react.surge.util.MSound FIZZ -> mHsh
    react.surge.util.MSound FUSE -> PVDD
    react.surge.util.MSound GLASS -> CGOC
    react.surge.util.MSound HURT_FLESH -> KODd
    react.surge.util.MSound ITEM_BREAK -> VEqq
    react.surge.util.MSound ITEM_PICKUP -> LYvt
    react.surge.util.MSound LAVA -> nKwS
    react.surge.util.MSound LAVA_POP -> euAv
    react.surge.util.MSound LEVEL_UP -> KNcl
    react.surge.util.MSound MINECART_BASE -> CrAb
    react.surge.util.MSound MINECART_INSIDE -> hliF
    react.surge.util.MSound NOTE_BASS -> aFRe
    react.surge.util.MSound NOTE_PIANO -> Somc
    react.surge.util.MSound NOTE_BASS_DRUM -> oGJX
    react.surge.util.MSound NOTE_STICKS -> wpcj
    react.surge.util.MSound NOTE_BASS_GUITAR -> HpPB
    react.surge.util.MSound NOTE_SNARE_DRUM -> kSoP
    react.surge.util.MSound NOTE_PLING -> hJem
    react.surge.util.MSound ORB_PICKUP -> tUxd
    react.surge.util.MSound PISTON_EXTEND -> IQOf
    react.surge.util.MSound PISTON_RETRACT -> Qqwo
    react.surge.util.MSound PORTAL -> eIlx
    react.surge.util.MSound PORTAL_TRAVEL -> smMI
    react.surge.util.MSound PORTAL_TRIGGER -> EgIJ
    react.surge.util.MSound SHOOT_ARROW -> WQhp
    react.surge.util.MSound SPLASH -> orAy
    react.surge.util.MSound SPLASH2 -> vKaR
    react.surge.util.MSound STEP_GRASS -> XUMn
    react.surge.util.MSound STEP_GRAVEL -> YXQD
    react.surge.util.MSound STEP_LADDER -> PxIy
    react.surge.util.MSound STEP_SAND -> YGNv
    react.surge.util.MSound STEP_SNOW -> oXNW
    react.surge.util.MSound STEP_STONE -> qUcO
    react.surge.util.MSound STEP_WOOD -> bRGw
    react.surge.util.MSound STEP_WOOL -> Pffe
    react.surge.util.MSound SWIM -> drAl
    react.surge.util.MSound WATER -> Okst
    react.surge.util.MSound WOOD_CLICK -> xYwA
    react.surge.util.MSound BAT_DEATH -> JCRx
    react.surge.util.MSound BAT_HURT -> xIUm
    react.surge.util.MSound BAT_IDLE -> FHKI
    react.surge.util.MSound BAT_LOOP -> IICc
    react.surge.util.MSound BAT_TAKEOFF -> puGY
    react.surge.util.MSound BLAZE_BREATH -> BfRJ
    react.surge.util.MSound BLAZE_DEATH -> oGPN
    react.surge.util.MSound BLAZE_HIT -> cTmg
    react.surge.util.MSound CAT_HISS -> aNge
    react.surge.util.MSound CAT_HIT -> Otge
    react.surge.util.MSound CAT_MEOW -> fnyG
    react.surge.util.MSound CAT_PURR -> neoL
    react.surge.util.MSound CAT_PURREOW -> AbnA
    react.surge.util.MSound CHICKEN_IDLE -> neoP
    react.surge.util.MSound CHICKEN_HURT -> Vgyk
    react.surge.util.MSound CHICKEN_EGG_POP -> agyT
    react.surge.util.MSound CHICKEN_WALK -> Nhsb
    react.surge.util.MSound COW_IDLE -> veVa
    react.surge.util.MSound COW_HURT -> smMx
    react.surge.util.MSound COW_WALK -> xHxJ
    react.surge.util.MSound CREEPER_HISS -> UnIn
    react.surge.util.MSound CREEPER_DEATH -> kCSa
    react.surge.util.MSound ENDERDRAGON_DEATH -> Abls
    react.surge.util.MSound ENDERDRAGON_GROWL -> jPqS
    react.surge.util.MSound ENDERDRAGON_HIT -> pteo
    react.surge.util.MSound ENDERDRAGON_WINGS -> KExW
    react.surge.util.MSound ENDERMAN_DEATH -> Abll
    react.surge.util.MSound ENDERMAN_HIT -> mtMr
    react.surge.util.MSound ENDERMAN_IDLE -> fgHw
    react.surge.util.MSound ENDERMAN_TELEPORT -> nfOc
    react.surge.util.MSound ENDERMAN_SCREAM -> yelx
    react.surge.util.MSound ENDERMAN_STARE -> nDKf
    react.surge.util.MSound GHAST_SCREAM -> wpiE
    react.surge.util.MSound GHAST_SCREAM2 -> cwQI
    react.surge.util.MSound GHAST_CHARGE -> DIsP
    react.surge.util.MSound GHAST_DEATH -> rPXP
    react.surge.util.MSound GHAST_FIREBALL -> LcLu
    react.surge.util.MSound GHAST_MOAN -> QXid
    react.surge.util.MSound IRONGOLEM_DEATH -> Ijdj
    react.surge.util.MSound IRONGOLEM_HIT -> MvqV
    react.surge.util.MSound IRONGOLEM_THROW -> BUQS
    react.surge.util.MSound IRONGOLEM_WALK -> qgHQ
    react.surge.util.MSound MAGMACUBE_WALK -> ioqI
    react.surge.util.MSound MAGMACUBE_WALK2 -> qoWs
    react.surge.util.MSound MAGMACUBE_JUMP -> qECu
    react.surge.util.MSound PIG_IDLE -> uaqI
    react.surge.util.MSound PIG_DEATH -> QjMI
    react.surge.util.MSound PIG_WALK -> DBDp
    react.surge.util.MSound SHEEP_IDLE -> oiRG
    react.surge.util.MSound SHEEP_SHEAR -> vnEw
    react.surge.util.MSound SHEEP_WALK -> GucW
    react.surge.util.MSound SILVERFISH_HIT -> KNjj
    react.surge.util.MSound SILVERFISH_KILL -> EgMM
    react.surge.util.MSound SILVERFISH_IDLE -> iyEh
    react.surge.util.MSound SILVERFISH_WALK -> UBum
    react.surge.util.MSound SKELETON_IDLE -> oiTj
    react.surge.util.MSound SKELETON_DEATH -> ecfo
    react.surge.util.MSound SKELETON_HURT -> usVv
    react.surge.util.MSound SKELETON_WALK -> uatg
    react.surge.util.MSound SLIME_ATTACK -> iMpf
    react.surge.util.MSound SLIME_WALK -> vnJJ
    react.surge.util.MSound SLIME_WALK2 -> AlBG
    react.surge.util.MSound SPIDER_IDLE -> Tjgf
    react.surge.util.MSound SPIDER_DEATH -> HFBy
    react.surge.util.MSound SPIDER_WALK -> qwkQ
    react.surge.util.MSound WITHER_DEATH -> NhvX
    react.surge.util.MSound WITHER_HURT -> NqhD
    react.surge.util.MSound WITHER_IDLE -> HWEO
    react.surge.util.MSound WITHER_SHOOT -> VNkG
    react.surge.util.MSound WITHER_SPAWN -> vSvD
    react.surge.util.MSound WOLF_BARK -> BoFV
    react.surge.util.MSound WOLF_DEATH -> kTWC
    react.surge.util.MSound WOLF_GROWL -> YWsB
    react.surge.util.MSound WOLF_HOWL -> plWL
    react.surge.util.MSound WOLF_HURT -> eBCo
    react.surge.util.MSound WOLF_PANT -> fxKp
    react.surge.util.MSound WOLF_SHAKE -> YOao
    react.surge.util.MSound WOLF_WALK -> QXkt
    react.surge.util.MSound WOLF_WHINE -> xHxh
    react.surge.util.MSound ZOMBIE_METAL -> NGSW
    react.surge.util.MSound ZOMBIE_WOOD -> vKcy
    react.surge.util.MSound ZOMBIE_WOODBREAK -> aNlK
    react.surge.util.MSound ZOMBIE_IDLE -> hTBG
    react.surge.util.MSound ZOMBIE_DEATH -> jQWB
    react.surge.util.MSound ZOMBIE_HURT -> eBGT
    react.surge.util.MSound ZOMBIE_INFECT -> aOLg
    react.surge.util.MSound ZOMBIE_UNFECT -> AQpY
    react.surge.util.MSound ZOMBIE_REMEDY -> YWtx
    react.surge.util.MSound ZOMBIE_WALK -> RueM
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> UCXs
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> cfUP
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> OSIy
    react.surge.util.MSound ZOMBIE_PIG_HURT -> SEdI
    react.surge.util.MSound DIG_WOOL -> OckN
    react.surge.util.MSound DIG_GRASS -> kKhJ
    react.surge.util.MSound DIG_GRAVEL -> NqiW
    react.surge.util.MSound DIG_SAND -> SEdD
    react.surge.util.MSound DIG_SNOW -> WRPq
    react.surge.util.MSound DIG_STONE -> dGTg
    react.surge.util.MSound DIG_WOOD -> SFDp
    react.surge.util.MSound FIREWORK_BLAST -> KNmd
    react.surge.util.MSound FIREWORK_BLAST2 -> RmTv
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> Asrb
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> GJrM
    react.surge.util.MSound FIREWORK_TWINKLE -> LlBh
    react.surge.util.MSound FIREWORK_TWINKLE2 -> jbVq
    react.surge.util.MSound FIREWORK_LAUNCH -> LQoP
    react.surge.util.MSound SUCCESSFUL_HIT -> oqfU
    react.surge.util.MSound HORSE_ANGRY -> JnLn
    react.surge.util.MSound HORSE_ARMOR -> dywI
    react.surge.util.MSound HORSE_BREATHE -> SpVe
    react.surge.util.MSound HORSE_DEATH -> totT
    react.surge.util.MSound HORSE_GALLOP -> pSGJ
    react.surge.util.MSound HORSE_HIT -> plYD
    react.surge.util.MSound HORSE_IDLE -> ekxk
    react.surge.util.MSound HORSE_JUMP -> hKNr
    react.surge.util.MSound HORSE_LAND -> Fran
    react.surge.util.MSound HORSE_SADDLE -> oXSs
    react.surge.util.MSound HORSE_SOFT -> Asse
    react.surge.util.MSound HORSE_WOOD -> Cqhv
    react.surge.util.MSound DONKEY_ANGRY -> THek
    react.surge.util.MSound DONKEY_DEATH -> iVcD
    react.surge.util.MSound DONKEY_HIT -> yoFj
    react.surge.util.MSound DONKEY_IDLE -> FacK
    react.surge.util.MSound HORSE_SKELETON_DEATH -> wqPi
    react.surge.util.MSound HORSE_SKELETON_HIT -> bbqw
    react.surge.util.MSound HORSE_SKELETON_IDLE -> Jmny
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> DSLl
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> RmWR
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> GJtD
    react.surge.util.MSound VILLAGER_DEATH -> YXXu
    react.surge.util.MSound VILLAGER_HAGGLE -> NGWq
    react.surge.util.MSound VILLAGER_HIT -> tWFP
    react.surge.util.MSound VILLAGER_IDLE -> HxkT
    react.surge.util.MSound VILLAGER_NO -> FHRL
    react.surge.util.MSound VILLAGER_YES -> ukIh
    java.lang.String pre19sound -> BoIu
    java.lang.String post19sound -> QYPv
    org.bukkit.Sound resolvedSound -> EUmf
    react.surge.util.MSound[] ENUM$VALUES -> vCYG
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> iDIf
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> OriS:
    org.bukkit.Material material -> ARSr
    java.lang.Byte data -> ripS
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> WPWA
    79:80:void setData(java.lang.Byte) -> hrnU
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> hINE:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> NLsQ
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> WYHK
    68:68:boolean isAnyOnline() -> tTid
    80:80:react.glang.GList inWorld(org.bukkit.World) -> bhmC
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> iSmf
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> hrnU
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> hrnU
    143:144:void disable(org.bukkit.entity.Player) -> Tpea
    154:155:void enable(org.bukkit.entity.Player) -> aKuX
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> hrnU
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> SeQd
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> uFOT
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> hrnU
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> wKtU
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> YxDt
    300:300:boolean canFindPlayer(java.lang.String) -> byoo
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> dnuA
    338:345:react.glang.GList onlinePlayers() -> EnGO
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> NnrU
    368:371:void clear(org.bukkit.entity.Player) -> bOXu
    381:385:void clearEffects(org.bukkit.entity.Player) -> rUwF
    398:399:void heal(org.bukkit.entity.Player,double) -> hrnU
    409:410:void heal(org.bukkit.entity.Player) -> KThG
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> kjuT
    432:433:void resetHunger(org.bukkit.entity.Player) -> pXbT
    443:444:void kill(org.bukkit.entity.Player) -> WiMA
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> VKug
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> kYrd
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> hrnU
react.surge.util.P$1 -> hINE$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> FDyI
    1:1:java.lang.Object onAdapt(java.lang.Object) -> pPSQ
react.surge.util.P$2 -> hINE$2:
    java.lang.Double val$doff -> QbBa
    org.bukkit.entity.Player val$e -> vKgr
    org.bukkit.entity.Entity[] val$result -> Chyl
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> OYFQ
react.surge.util.PE -> PKYJ:
    react.surge.util.PE ABSORPTION -> UnOG
    react.surge.util.PE BLINDNESS -> HNVm
    react.surge.util.PE CONFUSION -> GJsM
    react.surge.util.PE DAMAGE_RESISTANCE -> PUnD
    react.surge.util.PE FAST_DIGGING -> LQtQ
    react.surge.util.PE FIRE_RESISTANCE -> VNpe
    react.surge.util.PE GLOWING -> VOPw
    react.surge.util.PE HARM -> RSfS
    react.surge.util.PE HEAL -> uIJR
    react.surge.util.PE HEALTH_BOOST -> ptnh
    react.surge.util.PE HUNGER -> NFxn
    react.surge.util.PE INCREASE_DAMAGE -> ixju
    react.surge.util.PE INVISIBILITY -> JfAm
    react.surge.util.PE JUMP -> smVt
    react.surge.util.PE LEVITATION -> QGrD
    react.surge.util.PE LUCK -> uQYx
    react.surge.util.PE NIGHT_VISION -> TkOO
    react.surge.util.PE POISON -> AlGj
    react.surge.util.PE REGENERATION -> bASS
    react.surge.util.PE SATURATION -> pRkI
    react.surge.util.PE SLOW -> hKTV
    react.surge.util.PE SLOW_DIGGING -> CrOW
    react.surge.util.PE SPEED -> eAkE
    react.surge.util.PE UNLUCK -> JmrI
    react.surge.util.PE WATER_BREATHING -> RvKD
    react.surge.util.PE WEAKNESS -> rYQs
    react.surge.util.PE WITHER -> GBfI
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> hrnU
    144:144:react.surge.util.PE d(int) -> oLpU
    156:156:react.surge.util.PE a(int) -> kshd
    166:166:org.bukkit.potion.PotionEffect c() -> OYaL
    177:178:void c(org.bukkit.entity.LivingEntity) -> Ecxb
    182:183:void crm(org.bukkit.entity.LivingEntity) -> pPSQ
    187:188:void rm(org.bukkit.entity.LivingEntity) -> AFix
react.surge.util.ParticleEffect -> NwvU:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> vmnM
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> yoHK
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> WlEx
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> SyKk
    react.surge.util.ParticleEffect WATER_BUBBLE -> AcXS
    react.surge.util.ParticleEffect WATER_SPLASH -> xcSc
    react.surge.util.ParticleEffect WATER_WAKE -> RSeP
    react.surge.util.ParticleEffect SUSPENDED -> mQrF
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> Wbsj
    react.surge.util.ParticleEffect CRIT -> YrKx
    react.surge.util.ParticleEffect CRIT_MAGIC -> kKkg
    react.surge.util.ParticleEffect SMOKE_NORMAL -> NPJQ
    react.surge.util.ParticleEffect SMOKE_LARGE -> hCDH
    react.surge.util.ParticleEffect SPELL -> sCAu
    react.surge.util.ParticleEffect SPELL_INSTANT -> rrcI
    react.surge.util.ParticleEffect SPELL_MOB -> QbDe
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> nwXS
    react.surge.util.ParticleEffect SPELL_WITCH -> OtpJ
    react.surge.util.ParticleEffect DRIP_WATER -> sKRh
    react.surge.util.ParticleEffect DRIP_LAVA -> iVff
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> btUs
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> mkdS
    react.surge.util.ParticleEffect TOWN_AURA -> mRQy
    react.surge.util.ParticleEffect NOTE -> MCxF
    react.surge.util.ParticleEffect PORTAL -> gjVd
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> gsHT
    react.surge.util.ParticleEffect FLAME -> kKnh
    react.surge.util.ParticleEffect LAVA -> tNXv
    react.surge.util.ParticleEffect FOOTSTEP -> rsGM
    react.surge.util.ParticleEffect CLOUD -> UnTU
    react.surge.util.ParticleEffect REDSTONE -> CPML
    react.surge.util.ParticleEffect SNOWBALL -> RKWq
    react.surge.util.ParticleEffect SNOW_SHOVEL -> LlJh
    react.surge.util.ParticleEffect SLIME -> xASW
    react.surge.util.ParticleEffect HEART -> YaMw
    react.surge.util.ParticleEffect BARRIER -> EfuO
    react.surge.util.ParticleEffect ITEM_CRACK -> tMwf
    react.surge.util.ParticleEffect BLOCK_CRACK -> wWaj
    react.surge.util.ParticleEffect BLOCK_DUST -> QHTB
    react.surge.util.ParticleEffect WATER_DROP -> mASR
    react.surge.util.ParticleEffect ITEM_TAKE -> OSOR
    react.surge.util.ParticleEffect MOB_APPEARANCE -> KiEk
    react.surge.util.ParticleEffect DRAGON_BREATH -> TYlv
    react.surge.util.ParticleEffect END_ROD -> UUAP
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> TILe
    react.surge.util.ParticleEffect SWEEP_ATTACK -> jYlU
    java.util.Map NAME_MAP -> nMGa
    java.util.Map ID_MAP -> gret
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> vmor
    java.util.List properties -> PDor
    react.surge.util.ParticleEffect[] ENUM$VALUES -> wprh
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> WiiR
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> hrnU
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> NoVn
    557:565:react.surge.util.ParticleEffect fromId(int) -> KCjF
    577:578:boolean isWater(org.bukkit.Location) -> NLqG
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> hrnU
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> hrnU
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> hrnU
    665:681:void display(float,int,org.bukkit.Location,double) -> hrnU
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> hrnU
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> hrnU
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> hrnU
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> hrnU
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> hrnU
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> hrnU
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> hrnU
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> hrnU
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> hrnU
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> hrnU
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> hrnU
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> hrnU
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> hrnU
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> hrnU
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> NwvU$hrnU:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> NwvU$SeQd:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> NwvU$YxDt:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> AjJM
    1594:1594:float getValueY() -> fnDb
    1605:1605:float getValueZ() -> ktcH
react.surge.util.ParticleEffect$OrdinaryColor -> NwvU$aehl:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> AjJM
    1526:1526:float getValueY() -> fnDb
    1537:1537:float getValueZ() -> ktcH
react.surge.util.ParticleEffect$ParticleColor -> NwvU$EmJi:
    1383:1383:void <init>() -> <init>
    float getValueX() -> AjJM
    float getValueY() -> fnDb
    float getValueZ() -> ktcH
react.surge.util.ParticleEffect$ParticleColorException -> NwvU$Ecxb:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> NwvU$pPSQ:
    org.bukkit.Material material -> ARSr
    byte data -> gGqe
    int[] packetData -> hdfw
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> qnDO
    1309:1309:java.lang.String getPacketDataString() -> ycwt
react.surge.util.ParticleEffect$ParticleDataException -> NwvU$AFix:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> NwvU$yknP:
    int version -> version
    java.lang.Class enumParticle -> YOjh
    java.lang.reflect.Constructor packetConstructor -> WlHi
    java.lang.reflect.Method getHandle -> vLNA
    java.lang.reflect.Field playerConnection -> Pfud
    java.lang.reflect.Method sendPacket -> lGCy
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> EMeA
    float offsetX -> fVSm
    float offsetY -> dqpH
    float offsetZ -> RvNW
    float speed -> plcE
    int amount -> hRPu
    boolean longDistance -> jbaC
    react.surge.util.ParticleEffect$ParticleData data -> ReMN
    java.lang.Object packet -> EDtH
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> mGIR
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> hrnU
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> SeQd
    2004:2018:void sendTo(org.bukkit.Location,double) -> SeQd
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> NwvU$yknP$hrnU:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> NwvU$yknP$SeQd:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> NwvU$yknP$YxDt:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> NwvU$FDyI:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> FXww
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> LRYi
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> oOlU
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> dqow
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> Ocqb
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> NwvU$OYFQ:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> HwGG:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> UcJQ
react.surge.util.Persist -> jFbF:
react.surge.util.PluginUtil -> MBPK:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> EmJi
    81:85:void enableAll() -> Hvmb
    95:99:void disable(org.bukkit.plugin.Plugin) -> Ecxb
    106:110:void disableAll() -> IhoQ
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> pPSQ
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> hrnU
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> Oqxn
    169:172:java.util.List getPluginNames(boolean) -> avjs
    184:187:java.lang.String getPluginVersion(java.lang.String) -> xXLV
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> AFix
    237:316:java.util.List findByCommand(java.lang.String) -> gpMq
    337:338:void load(org.bukkit.plugin.Plugin) -> yknP
    342:364:java.lang.String getPluginFileName(java.lang.String) -> OYGx
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> hrnU
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> FDyI
    480:484:void reloadAll() -> tmyu
    496:622:void unload(org.bukkit.plugin.Plugin) -> OYFQ
react.surge.util.PoolCount -> ejXN:
react.surge.util.PoolDescriber -> TqWl:
react.surge.util.PoolNanoThrottle -> cdQk:
react.surge.util.PositionalSelector -> ePdq:
    react.glang.GSet allowedChunks -> JKqV
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> LHFJ
    39:40:void addChunk(org.bukkit.Chunk) -> EBVk
    44:44:react.glang.GSet getAllowedChunks() -> HfMV
react.surge.util.Protocol -> qlyK:
    react.surge.util.Protocol LATEST -> ULQi
    react.surge.util.Protocol R1_12_2 -> Otry
    react.surge.util.Protocol R1_12_2_PRE -> ihNI
    react.surge.util.Protocol R1_12_1 -> gGru
    react.surge.util.Protocol R1_12 -> DcsA
    react.surge.util.Protocol R1_11_2 -> ORow
    react.surge.util.Protocol R1_11_1 -> pSOg
    react.surge.util.Protocol R1_11 -> JedU
    react.surge.util.Protocol R1_10_2 -> xIeL
    react.surge.util.Protocol R1_10_1 -> mIeK
    react.surge.util.Protocol R1_10 -> UfEL
    react.surge.util.Protocol R1_9_4 -> EDrh
    react.surge.util.Protocol R1_9_3 -> tVjR
    react.surge.util.Protocol R1_9_2 -> tglD
    react.surge.util.Protocol R1_9_1 -> eJak
    react.surge.util.Protocol R1_9 -> bAYF
    react.surge.util.Protocol R1_8_9 -> Ijsx
    react.surge.util.Protocol R1_8_8 -> PpJL
    react.surge.util.Protocol R1_8_7 -> qxYC
    react.surge.util.Protocol R1_8_6 -> DBSN
    react.surge.util.Protocol R1_8_5 -> JfGp
    react.surge.util.Protocol R1_8_4 -> rrkH
    react.surge.util.Protocol R1_8_3 -> yMKk
    react.surge.util.Protocol R1_8_2 -> fVUg
    react.surge.util.Protocol R1_8_1 -> SFOD
    react.surge.util.Protocol R1_8 -> CqtV
    react.surge.util.Protocol R1_7_10 -> RTMb
    react.surge.util.Protocol R1_7_9 -> AAYd
    react.surge.util.Protocol R1_7_8 -> Guov
    react.surge.util.Protocol R1_7_7 -> vver
    react.surge.util.Protocol R1_7_6 -> uscO
    react.surge.util.Protocol R1_7_5 -> FsLb
    react.surge.util.Protocol R1_7_4 -> YaQT
    react.surge.util.Protocol R1_7_3 -> eldD
    react.surge.util.Protocol R1_7_2 -> diaC
    react.surge.util.Protocol R1_7_1 -> QbKH
    react.surge.util.Protocol B1_6_4 -> JefT
    react.surge.util.Protocol B1_6_3 -> pRpf
    react.surge.util.Protocol B1_6_2 -> tFLU
    react.surge.util.Protocol B1_6_1 -> puTj
    react.surge.util.Protocol B1_5_2 -> QsKr
    react.surge.util.Protocol B1_5_1 -> JefW
    react.surge.util.Protocol B1_5 -> wqXE
    react.surge.util.Protocol B1_4_7 -> yTyg
    react.surge.util.Protocol B1_4_6 -> VGGP
    react.surge.util.Protocol B1_4_5 -> FPiR
    react.surge.util.Protocol B1_4_4 -> iWMa
    react.surge.util.Protocol B1_4_2 -> aiHx
    react.surge.util.Protocol B1_3_2 -> LlNL
    react.surge.util.Protocol B1_3_1 -> KGHJ
    react.surge.util.Protocol B1_2_5 -> kDAw
    react.surge.util.Protocol B1_2_4 -> nCxo
    react.surge.util.Protocol EARLIEST -> ubcm
    react.surge.util.Protocol UNKNOWN -> aOYW
    int version -> version
    java.lang.String packageVersion -> TISd
    java.lang.String versionName -> NOqv
    boolean netty -> Olgq
    react.surge.util.Protocol[] ENUM$VALUES -> ViMG
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> VwfF
    118:118:java.lang.String getPackageVersion() -> lgEB
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> rODE
    142:150:react.surge.util.Protocol getProtocolVersion() -> afdE
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> SeQd
    160:160:boolean isServerVersion() -> fvUA
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> XRxV
    175:175:boolean isActualVersion() -> AijK
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> IhpF
    200:200:int getMetaVersion() -> EeUL
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> RcBO:
    react.surge.util.Protocol from -> PMhM
    react.surge.util.Protocol to -> eRtM
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> QxxN
    21:21:react.surge.util.Protocol getTo() -> QyYL
    26:26:boolean contains(react.surge.util.Protocol) -> YxDt
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> oVQs:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> KxGw
    70:70:int randomNextInt() -> ifOC
    80:80:long randomNextLong() -> GblT
    92:92:boolean isWithin(double) -> kjuT
    104:104:boolean isWithin(int) -> YDbH
    116:116:boolean isWithin(long) -> iSmr
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> pXbT
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> mylg
react.surge.util.RawEvent -> qTGs:
react.surge.util.RayTrace -> IqYJ:
    org.bukkit.Location start -> lhkG
    org.bukkit.util.Vector direction -> rrle
    java.lang.Double maxDistance -> kKtT
    java.lang.Double distanceCovered -> SWSE
    java.lang.Double step -> wWgh
    java.lang.Boolean stop -> vmvn
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> lnvj
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> OYFQ
    89:89:org.bukkit.Location getStart() -> VVFg
    94:95:void setStart(org.bukkit.Location) -> iSmf
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> DkFJ
    114:115:void setMaxDistance(java.lang.Double) -> aehl
    119:119:java.lang.Double getDistanceCovered() -> EnHm
    124:125:void setDistanceCovered(java.lang.Double) -> EmJi
    129:129:java.lang.Double getStep() -> KwjJ
    134:135:void setStep(java.lang.Double) -> Ecxb
react.surge.util.ReflectionUtils -> PCIT:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> hrnU
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> hrnU
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> hrnU
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> hrnU
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> hrnU
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> hrnU
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> hrnU
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> hrnU
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> hrnU
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> hrnU
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> hrnU
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> hrnU
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> hrnU
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> hrnU
react.surge.util.ReflectionUtils$DataType -> PCIT$hrnU:
    react.surge.util.ReflectionUtils$DataType BYTE -> AJLj
    react.surge.util.ReflectionUtils$DataType SHORT -> wNwI
    react.surge.util.ReflectionUtils$DataType INTEGER -> vnWg
    react.surge.util.ReflectionUtils$DataType LONG -> qwxi
    react.surge.util.ReflectionUtils$DataType CHARACTER -> puVb
    react.surge.util.ReflectionUtils$DataType FLOAT -> iVnx
    react.surge.util.ReflectionUtils$DataType DOUBLE -> igqI
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> hdmj
    java.util.Map CLASS_MAP -> ipat
    java.lang.Class primitive -> Khju
    java.lang.Class reference -> XxBi
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> lpyq
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> uyqP
    704:704:java.lang.Class getReference() -> WYJg
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> SeQd
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> YxDt
    741:742:java.lang.Class getReference(java.lang.Class) -> aehl
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> hrnU
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> SeQd
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> SeQd
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> YxDt
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> hrnU
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> PCIT$SeQd:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> OAsL
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> lqYv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> eSTb
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> AImR
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> eArP
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> UnYQ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> ixrK
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> jtEh
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> eRrv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> jITf
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> WJOE
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> nVAm
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> wymh
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> MxGK
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> qolF
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> cfcC
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> HWTr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> Gusw
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> EMkT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> CGcl
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> tgra
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> xrMv:
    void refresh() -> refresh
react.surge.util.SQLOperation -> EeLg:
    react.surge.util.SQLOperation LOAD -> etyd
    react.surge.util.SQLOperation SAVE -> wGHy
    react.surge.util.SQLOperation[] ENUM$VALUES -> Tjwq
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> fTLJ:
    react.surge.util.ServerState START -> TRFN
    react.surge.util.ServerState ENABLE -> MEAO
    react.surge.util.ServerState DISABLE -> VXLU
    react.surge.util.ServerState STOP -> NaVD
    react.surge.util.ServerState RUNNING -> Vymx
    react.surge.util.ServerState[] ENUM$VALUES -> nLnd
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> DsNB:
    org.bukkit.Location location -> Dbtx
    org.bukkit.util.Vector offset -> yMNj
    org.bukkit.util.Vector size -> KXLh
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> EBVk
    90:94:org.bukkit.Location randomLocation() -> maXh
    104:104:org.bukkit.Location randomSurface() -> sRIW
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> VnxR
    129:129:org.bukkit.util.Vector getSize() -> xGec
react.surge.util.SnowLevel -> SDCu:
    byte level -> BEBp
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> wMSj
    51:52:void setLevel(byte) -> yknP
react.surge.util.SuperCaller -> Bles:
    void run() -> run
react.surge.util.T -> mPOe:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> SeQd
    32:35:void stop() -> stop
react.surge.util.TXT -> inWO:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> pPSQ
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> hrnU
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> hrnU
    99:99:java.lang.String line(react.surge.util.C,int) -> hrnU
    113:113:java.lang.String underline(react.surge.util.C,int) -> SeQd
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> hrnU
react.surge.util.Tag -> qunB:
    java.lang.String value() -> value
react.surge.util.Timer -> OsMS:
    long tns -> ynqR
    long cns -> Hxux
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> WikP
react.surge.util.VectorMath -> OHXi:
    int[] $SWITCH_TABLE$surge$util$Axis -> uHVd
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> NYEp
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> hrnU
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> hrnU
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> SeQd
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> YxDt
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> hrnU
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> SeQd
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> SeQd
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> YxDt
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> aehl
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> EmJi
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> Ecxb
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> pPSQ
    111:111:double round(double,int) -> EmJi
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> hrnU
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> hrnU
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> hrnU
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> aehl
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> EmJi
    268:268:org.bukkit.util.Vector toVector(float,float) -> hrnU
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> hrnU
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> hrnU
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> AFix
    337:340:double getSpeed(org.bukkit.util.Vector) -> yknP
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> hrnU
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> FDyI
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> hrnU
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> SeQd
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> YxDt
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> aehl
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> OYFQ
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> DPmY
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> ivmq
react.surge.util.VectorMath$1 -> OHXi$1:
    org.bukkit.util.Vector val$vector -> YOrx
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> NLqG
    1:1:java.lang.Object onAdapt(java.lang.Object) -> pPSQ
react.surge.util.W -> qSkD:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> AFix
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> hrnU
    75:86:org.bukkit.entity.Entity getEntity(int) -> NLsQ
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> hrnU
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> hrnU
    143:143:int getChunkX(org.bukkit.block.Block) -> yknP
    155:155:int getChunkY(org.bukkit.block.Block) -> FDyI
    168:169:void dropXp(org.bukkit.Location,int) -> SeQd
    180:180:int getChunkZ(org.bukkit.block.Block) -> OYFQ
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> SeQd
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> hrnU
    232:239:react.glang.GList news(org.bukkit.Location) -> bhmC
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> hrnU
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> bhmC
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> avjs
    300:300:org.bukkit.World toSync(org.bukkit.World) -> GbPG
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> NLqG
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> avjs
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> avjs
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> TqGQ
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> hrnU
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> hrnU
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> hrnU
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> hrnU
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> hrnU
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> hrnU
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> hrnU
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> hrnU
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> GbPG
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> mGIR
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> GbPG
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> YxDt
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> hrnU
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> hrnU
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> hrnU
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> hrnU
react.surge.util.W$1 -> qSkD$1:
    java.lang.Double val$doff -> QbBa
    org.bukkit.entity.Entity val$e -> GCOj
    org.bukkit.entity.Entity[] val$result -> Chyl
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> OYFQ
react.surge.util.Worlds -> jGFK:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> IXDt
    33:33:boolean hasWorld(java.lang.String) -> bhmU
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> BJbc:
react.text.ColoredString -> SUFU:
    react.surge.util.C c -> mlOT
    java.lang.String s -> BDbF
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> SULn
    42:43:void setC(react.surge.util.C) -> SeQd
    47:47:java.lang.String getS() -> qmcy
    52:53:void setS(java.lang.String) -> aKvy
react.text.RTEX -> tvfR:
    react.glang.GList extras -> KXMX
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> NMly
    44:58:react.json.JSONObject toJSON() -> rUwF
react.text.RTX -> Wibc:
    react.json.JSONArray base -> vTfP
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> Ecxb
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> SeQd
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> hrnU
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> hrnU
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> SeQd
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> YxDt
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> hrnU
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> SeQd
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> YxDt
    265:265:react.json.JSONArray toJSON() -> kIpJ
    276:277:void tellRawTo(org.bukkit.entity.Player) -> TyVL
react.text.RawText -> MdVX:
    java.lang.String COLOR_BLACK -> eAtI
    java.lang.String COLOR_DARK_BLUE -> oPVE
    java.lang.String COLOR_DARK_GREEN -> seSQ
    java.lang.String COLOR_DARK_AQUA -> xuDF
    java.lang.String COLOR_DARK_RED -> QQOp
    java.lang.String COLOR_DARK_PURPLE -> Lkrv
    java.lang.String COLOR_GOLD -> ipfx
    java.lang.String COLOR_GRAY -> vwMk
    java.lang.String COLOR_DARK_GRAY -> Ciil
    java.lang.String COLOR_BLUE -> VWmp
    java.lang.String COLOR_GREEN -> KXOp
    java.lang.String COLOR_AQUA -> kwMd
    java.lang.String COLOR_RED -> tFSD
    java.lang.String COLOR_LIGHT_PURPLE -> SyYd
    java.lang.String COLOR_YELLOW -> WdCt
    java.lang.String COLOR_WHITE -> MLsg
    java.lang.String COLOR_NONE -> uHuC
    java.lang.String HEAD_TEXT -> uRGY
    java.lang.String HEAD_COLOR -> SqJI
    java.lang.String HEAD_BOLD -> VFmO
    java.lang.String HEAD_ITALIC -> IkYy
    java.lang.String HEAD_UNDERLINED -> YrXj
    java.lang.String HEAD_STRIKETHROUGH -> sdps
    java.lang.String HEAD_OBFUSCATED -> eRvs
    java.lang.String HEAD_CLICK_EVENT -> TQgK
    java.lang.String HEAD_HOVER_EVENT -> TRHK
    java.lang.String HEAD_ACTION -> DRxu
    java.lang.String HEAD_VALUE -> tFQw
    java.lang.String HEAD_EXTRA -> HyXs
    java.lang.String HEAD_ACTION_SHOW_TEXT -> YrYD
    java.lang.String HEAD_ACTION_COMMAND -> sBmy
    java.util.ArrayList components -> EMks
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> UkXk
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> EmJi
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> hrnU
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> hrnU
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> hrnU
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> hrnU
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> hrnU
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> hrnU
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> hrnU
    307:313:java.lang.String compile() -> sbhu
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> hrnU

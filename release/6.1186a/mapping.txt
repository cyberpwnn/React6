react.Config -> wCdn:
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> wCdn
    java.lang.String A_ENTITYCACHE_INTERVAL -> rpKc
    java.lang.String A_COMMANDOVERRIDE_TPS -> TpeI
    java.lang.String A_REACT_REMOTE_PORT -> ooRp
    java.lang.String A_REACT_REMOTE_ENABLED -> Elil
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> RroX
    java.lang.String A_POOL_MAXTHREADS -> NfcV
    java.lang.String A_POOL_SYNC_NANOS -> DHEP
    java.lang.String A_ENTITYCACHE_ENABLED -> qdWH
    java.lang.String A_FASTLEAF_ENABLED -> IFSH
    java.lang.String A_FASTLEAF_ONDECAY -> EAvL
    java.lang.String A_FASTLEAF_INSTANT -> EKHT
    java.lang.String A_FASTLEAF_DECAYPERIOD -> lUHC
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> XJMl
    java.lang.String A_ENTITYSTACK_ENABLED -> wCeF
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> HBno
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> aUIF
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> paSk
    java.lang.String A_GLASS_SHOW_BLOCKS -> iupr
    java.lang.String A_GLASS_SHOW_PARTICLES -> fdWH
    java.lang.String A_ALLOW_CULL -> vjsv
    java.lang.String A_ALLOW_PURGE -> aehQ
    java.lang.String A_ALLOW_CACHE -> uxrd
    java.lang.String A_CULL_RULES -> DHCh
    java.lang.String A_RAI_TPS_HIGH_TICK -> KfIx
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> OqvB
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> kcEk
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> srlg
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> VUGm
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> LynL
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> bFhF
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> IWRq
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> tuns
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> tCKc
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> UshF
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> qKDK
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> VCfX
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> xWgw
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> YMOn
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> jyTN
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> rNGT
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> NEAD
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> KKvs
    java.lang.String A_RAI_FLUID_TIME_CEIL -> Sdrh
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> ssPe
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> HKac
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> DrYq
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> vbfj
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> dVBy
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> oMQg
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> Wyon
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> doUO
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> vtJF
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> fljb
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> FMks
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> fJhA
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> uyVT
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> tmbI
    java.lang.String A_LANGUAGE -> STSC
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> uNai
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> kYuo
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> RkAM
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> YoTl
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> iTOx
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> XcaE
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> Xtaf
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> McaX
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> vtII
    java.lang.String A_RAI_ENTITY_PROPIGATE -> aLWp
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> kYti
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> srnS
    int ENTITYCACHE_CHUNK_RADIUS -> pYDa
    int ENTITYCACHE_INTERVAL -> mymh
    boolean COMMANDOVERRIDES_TPS -> GbPl
    int REACT_REMOTE_PORT -> hQMK
    boolean REACT_REMOTE_ENABLED -> vcFf
    int ENTITY_STACK_MAX_COUNT -> fKJT
    int POOL_MAXTHREADS -> dDbh
    long POOL_SYNC_NANOS -> cdCi
    boolean ENTITYCACHE_ENABLED -> JcLb
    boolean FASTLEAF_ENABLED -> JQjQ
    boolean FASTLEAF_ONDECAY -> SCRj
    boolean FASTLEAF_INSTANT -> KClF
    int FASTLEAF_DECAYPERIOD -> mGLr
    boolean COMMANDOVERRIDES_MEMORY -> tutU
    boolean ENTITYSTACK_ENABLED -> afNb
    int ENTITYSTACK_MINIMUM_GROUP -> eijA
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> qmLQ
    int ENTITYSTACK_MAXIMUM_HEALTH -> IOHW
    boolean GLASS_SHOW_BLOCKS -> Foqe
    boolean GLASS_SHOW_PARTICLES -> hapc
    react.glang.GList ALLOW_CULL -> SStM
    react.glang.GList ALLOW_PURGE -> qBWp
    react.glang.GList ALLOW_CACHE -> uEqu
    react.glang.GList CULL_RULES -> haoq
    double RAI_TPS_HIGH_TICK -> kIVr
    long RAI_REDSTONE_TIME_FLOOR -> hrpf
    long RAI_REDSTONE_TIME_CEIL -> ofcq
    long RAI_REDSTONE_TIME_MUDDING -> jpfc
    double RAI_REDSTONE_TIME_FUNCTION -> qtyw
    double RAI_REDSTONE_TIME_OVERBLEED -> qAvG
    int RAI_REDSTONE_TIME_RADIUS -> prXc
    int RAI_REDSTONE_TIME_PROPIGATION -> FyBg
    long RAI_HOPPER_TIME_FLOOR -> yJNa
    long RAI_HOPPER_TIME_CEIL -> ivUT
    long RAI_HOPPER_TIME_MUDDING -> dgEr
    double RAI_HOPPER_TIME_FUNCTION -> SdwM
    double RAI_HOPPER_TIME_OVERBLEED -> oVFr
    int RAI_HOPPER_TIME_RADIUS -> ndEb
    int RAI_HOPPER_TIME_PROPIGATION -> pPXm
    int RAI_ENTITY_CHUNK_MULTIPLIER -> RbUI
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> ryBr
    int RAI_ENTITY_CHUNK_RADIUS -> ytfF
    long RAI_FLUID_TIME_FLOOR -> KvrL
    long RAI_FLUID_TIME_CEIL -> AWrT
    long RAI_FLUID_TIME_MUDDING -> pijd
    double RAI_FLUID_TIME_FUNCTION -> tLEI
    double RAI_FLUID_TIME_OVERBLEED -> iTVE
    int RAI_FLUID_TIME_RADIUS -> Xkud
    int RAI_FLUID_TIME_PROPIGATION -> aeoL
    double SMEAR_TICK_ENTITIES_MAX_TICK -> bhqn
    double SMEAR_TICK_TILES_MAX_TICK -> MlWc
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> fJkb
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> WhtB
    double SMEAR_TICK_ENTITIES_AMOUNT -> lemx
    double SMEAR_TICK_TILES_AMOUNT -> KfQj
    boolean SMEAR_TICK_ENTITIES_ENABLE -> AGPs
    boolean SMEAR_TICK_TILES_ENABLE -> RsVt
    boolean HOPPER_OVERTICK_ENABLE -> awQp
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> ytdi
    long RAI_CHUNK_TIME_CEIL -> NEGl
    long RAI_CHUNK_TIME_MUDDING -> xiQe
    double RAI_CHUNK_TIME_FUNCTION -> LWsE
    double RAI_CHUNK_TIME_OVERBLEED -> RQSm
    int RAI_CHUNK_TIME_RADIUS -> uqJW
    int RAI_CHUNK_TIME_PROPIGATION -> mGOG
    boolean RAI_CHUNK_TIME_PROPIGATE -> GkEa
    boolean RAI_FLUID_TIME_PROPIGATE -> Qopy
    boolean RAI_ENTITY_PROPIGATE -> DHJG
    boolean RAI_HOPPER_TIME_PROPIGATE -> kQiU
    boolean RAI_REDSTONE_TIME_PROPIGATE -> avob
    boolean hrld -> hbRm
    boolean rns -> MRdA
    boolean rrl -> LPAb
    int[] $SWITCH_TABLE$org$bukkit$entity$EntityType -> YgHf
    258:648:void <clinit>() -> <clinit>
    34:34:void <init>() -> <init>
    653:670:void doTrack(org.bukkit.plugin.Plugin) -> wCdn
    675:697:void onRead(org.bukkit.plugin.Plugin) -> rpKc
    701:731:void read(java.io.File,boolean) -> wCdn
    736:849:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> wCdn
    854:891:react.surge.cluster.DataCluster defaultConfig(boolean) -> wCdn
    896:965:react.glang.GList getDefaultEntitiesForCaching() -> wCdn
    970:1039:react.glang.GList getDefaultEntitiesForCulling() -> rpKc
    1044:1075:react.glang.GList getDefaultEntitiesForRemoval() -> TpeI
    1080:1109:react.glang.GList getDefaultCullRules() -> ooRp
    34:34:int[] $SWITCH_TABLE$org$bukkit$entity$EntityType() -> Elil
react.Config$1 -> wCdn$1:
    java.io.File val$fConfig -> KDLx
    java.io.File val$fConfigExperimental -> WFoA
    org.bukkit.plugin.Plugin val$main -> NDdv
    1:656:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    661:665:void run() -> run
react.Gate -> rpKc:
    react.glang.GMap defaultSettings -> XIqg
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> JcNK
    37:37:void <clinit>() -> <clinit>
    35:35:void <init>() -> <init>
    41:127:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> wCdn
    131:156:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> wCdn
    161:161:int getChunkCountForView() -> RroX
    166:166:int getMaxChunksForView() -> NfcV
    171:171:boolean hasFawe() -> DHEP
    176:197:void tickEntityNextTickListTick(org.bukkit.World) -> wCdn
    201:205:void resetEntityMaxTick(org.bukkit.World) -> rpKc
    209:209:int getEntityTickMax(org.bukkit.World) -> TpeI
    214:214:int getTileTickMax(org.bukkit.World) -> ooRp
    219:237:void tweakEntityTickMax(org.bukkit.World,int) -> wCdn
    241:258:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> wCdn
    263:267:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> wCdn
    271:283:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> wCdn
    288:292:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> rpKc
    296:314:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> wCdn
    318:322:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> Elil
    327:330:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> wCdn
    335:338:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> rpKc
    343:343:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> TpeI
    348:348:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> ooRp
    353:353:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> Elil
    360:366:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    372:373:void unloadChunk(org.bukkit.World,int,int) -> wCdn
    377:383:void removeEntity(org.bukkit.entity.Entity) -> wCdn
    387:393:void purgeEntity(org.bukkit.entity.Entity) -> rpKc
    397:403:void cullEntity(org.bukkit.entity.Entity) -> TpeI
    407:413:void cachedEntity(org.bukkit.entity.Entity) -> ooRp
    418:435:void updateBlock(org.bukkit.block.Block) -> wCdn
    439:443:java.lang.String header(java.lang.String,react.surge.util.C) -> wCdn
    448:448:java.lang.String header(react.surge.util.C) -> wCdn
    454:458:void updateFluid(org.bukkit.block.Block) -> rpKc
    35:35:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> qdWH
react.Gate$1 -> rpKc$1:
    react.api.SelectorPosition val$sel -> HKdy
    react.glang.Callback val$prog -> BBDi
    react.glang.Callback val$cb -> iBqf
    1:41:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    46:125:void run() -> run
react.Gate$1$1 -> rpKc$1$1:
    react.Gate$1 this$1 -> NDej
    java.lang.Object val$o -> skCU
    java.lang.reflect.Constructor val$vectorConstruct -> kYyX
    java.lang.reflect.Constructor val$cuboidConstruct -> CLyO
    java.lang.reflect.Method val$faweFixMethod -> NVKI
    java.lang.Integer[] val$total -> tmhc
    java.lang.Integer[] val$sof -> yRdf
    react.glang.Callback val$prog -> BBDi
    java.lang.Integer val$tot -> CUip
    1:73:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    80:94:void run() -> run
react.Gate$1$2 -> rpKc$1$2:
    react.Gate$1 this$1 -> NDej
    react.glang.Callback val$prog -> BBDi
    react.glang.Callback val$cb -> iBqf
    java.lang.Integer[] val$total -> tmhc
    1:98:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    105:113:void run() -> run
react.Info -> TpeI:
    java.lang.String CORE_REACT_DOT -> RQUV
    java.lang.String CORE_NAME -> sasx
    java.lang.String CORE_CACHE -> kcNk
    java.lang.String CORE_DOTYML -> yBCy
    java.lang.String COMMAND_REACT -> oMWs
    java.lang.String COMMAND_RAI -> Fots
    java.lang.String COMMAND_ACT_DESCRIPTION -> LywX
    java.lang.String COMMAND_ACT -> ieXx
    java.lang.String COMMAND_ACT_ALIAS_1 -> rpSp
    java.lang.String COMMAND_ACT_ALIAS_2 -> yJTK
    java.lang.String COMMAND_ACT_USAGE -> ghDE
    java.lang.String COMMAND_HELP_DESCRIPTION -> uqKt
    java.lang.String COMMAND_HELP -> WqgJ
    java.lang.String COMMAND_HELP_ALIAS_1 -> hYdW
    java.lang.String COMMAND_HELP_ALIAS_2 -> aDPE
    java.lang.String COMMAND_HELP_USAGE -> biVJ
    java.lang.String COMMAND_STATUS_DESCRIPTION -> tdwG
    java.lang.String COMMAND_STATUS -> xqcx
    java.lang.String COMMAND_STATUS_ALIAS_1 -> GYfj
    java.lang.String COMMAND_STATUS_ALIAS_2 -> aoCj
    java.lang.String COMMAND_STATUS_USAGE -> pYKq
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> KwUh
    java.lang.String COMMAND_CPUSCORE -> xPAt
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> yJTG
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> vRLX
    java.lang.String COMMAND_CPUSCORE_USAGE -> jqLU
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> lfQJ
    java.lang.String COMMAND_RELOAD -> GsWn
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> WGQk
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> nAcK
    java.lang.String COMMAND_RELOAD_USAGE -> XSFK
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> KncI
    java.lang.String COMMAND_MONITOR -> ghCa
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> Suyn
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> rNNv
    java.lang.String COMMAND_MONITOR_USAGE -> RIDd
    java.lang.String COMMAND_MAP_DESCRIPTION -> bGRE
    java.lang.String COMMAND_MAP -> qAyk
    java.lang.String COMMAND_MAP_ALIAS_1 -> GYei
    java.lang.String COMMAND_MAP_ALIAS_2 -> PKOQ
    java.lang.String COMMAND_MAP_USAGE -> uEut
    java.lang.String COMMAND_GLASS_DESCRIPTION -> xPAV
    java.lang.String COMMAND_GLASS -> OHKm
    java.lang.String COMMAND_GLASS_ALIAS_1 -> rgeF
    java.lang.String COMMAND_GLASS_ALIAS_2 -> ryFp
    java.lang.String COMMAND_GLASS_USAGE -> lDQP
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> RaxL
    java.lang.String COMMAND_CBLAME -> Vvuc
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> rouU
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> xPDg
    java.lang.String COMMAND_CBLAME_USAGE -> WiWl
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> dUjw
    java.lang.String COMMAND_ACTIONLOG -> iKgh
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> nIvB
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> hIFI
    java.lang.String COMMAND_ACTIONLOG_USAGE -> yRey
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> MIwl
    java.lang.String COMMAND_CAPABILITIES -> srvx
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> qlqc
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> iTXx
    java.lang.String COMMAND_CAPABILITIES_USAGE -> hkIS
    java.lang.String MSG_PERMISSION -> QhGi
    java.lang.String MSG_MONITORING_STARTED -> kROV
    java.lang.String MSG_MONITORING_STOPPED -> yAdT
    java.lang.String MSG_ACTIONLOGGING_STARTED -> lncS
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> qlqM
    java.lang.String MSG_GLASS_STARTED -> wDNt
    java.lang.String MSG_GLASS_STOPPED -> Edbj
    org.bukkit.Color COLOR_HOPPER -> DGlq
    org.bukkit.Color COLOR_BLOCK_UPDATE -> EeDO
    org.bukkit.Color COLOR_BLOCK_FROMTO -> esAQ
    org.bukkit.Color COLOR_BLOCK_BURN -> pXlK
    org.bukkit.Color COLOR_BLOCK_DECAY -> fvBx
    org.bukkit.Color COLOR_BLOCK_FORM -> bFri
    java.lang.String NAME_TICK -> iLGj
    java.lang.String NAME_MEMORY -> xhsr
    java.lang.String NAME_CHUNKS -> yuHl
    java.lang.String NAME_ENTITIES -> RHek
    java.lang.String STATE_MONITORING_TAB -> UbpX
    java.lang.String STATE_MONITORING_ENABLED -> BAhK
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> sryq
    java.lang.String STATE_MAPPING_ENABLED -> QoyB
    java.lang.String STATE_SOUND_PLAYS -> AGWn
    java.lang.String STATE_MONITORING_POSTED -> uqPi
    java.lang.String STATE_MONITORING_LASTTAB -> AaJf
    java.lang.String STATE_GLASSES_ENABLED -> eHOW
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> qKRJ
    java.lang.String STATE_PLAYER_HOTBAR -> miXp
    java.lang.String STATE_PLAYER_SHIFT -> pbAl
    java.lang.String STATE_PLAYER_SCROLL -> FFFo
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> WrKR
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> DHPw
    java.lang.String PERM_ACCESS -> VTsy
    java.lang.String PERM_MONITOR -> EvHd
    java.lang.String PERM_MONITOR_TITLE -> KoIW
    java.lang.String PERM_MONITOR_ACTIONLOG -> rxgb
    java.lang.String PERM_MONITOR_MAP -> VMEk
    java.lang.String PERM_MONITOR_ENVIRONMENT -> jqQN
    java.lang.String PERM_MONITOR_GLASSES -> APIE
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> QNVi
    java.lang.String PERM_ACT -> IXBH
    java.lang.String PERM_RAI -> hQWv
    java.lang.String PERM_RAI_CONTROL -> AWwh
    java.lang.String PERM_RAI_ACCESS -> VLeA
    java.lang.String PERM_RAI_MONITOR -> rpXD
    java.lang.String PERM_RELOAD -> MSMB
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> INmj
    java.lang.String SAMPLER_REDSTONE_TICK -> AaLH
    java.lang.String SAMPLER_ENTITY_TIME -> brIb
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> VLcN
    java.lang.String SAMPLER_TILE_TIME_LOCK -> fCAJ
    java.lang.String SAMPLER_TILE_TIME -> Qowf
    java.lang.String SAMPLER_TILE_DROPTICK -> tCXa
    java.lang.String SAMPLER_ENTITY_DROPTICK -> xaFh
    java.lang.String SAMPLER_REDSTONE_SECOND -> uqNw
    java.lang.String SAMPLER_REDSTONE_TIME -> MIyN
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> TNme
    java.lang.String SAMPLER_HOPPER_TICK -> LOfy
    java.lang.String SAMPLER_HOPPER_SECOND -> eXno
    java.lang.String SAMPLER_HOPPER_TIME -> WaIV
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> GPxm
    java.lang.String SAMPLER_FLUID_TICK -> brLk
    java.lang.String SAMPLER_FLUID_SECOND -> gEfT
    java.lang.String SAMPLER_FLUID_TIME -> NDmx
    java.lang.String SAMPLER_TPS -> mFwU
    java.lang.String SAMPLER_TICK -> KDVc
    java.lang.String SAMPLER_TIU -> qmVm
    java.lang.String SAMPLER_MEM -> dEMt
    java.lang.String SAMPLER_FREEMEM -> FhLQ
    java.lang.String SAMPLER_MAXMEM -> vARF
    java.lang.String SAMPLER_ALLOCMEM -> OQCp
    java.lang.String SAMPLER_MAHS -> uNnr
    java.lang.String SAMPLER_CHK -> baKQ
    java.lang.String SAMPLER_ATASK -> TqUA
    java.lang.String SAMPLER_STASK -> prce
    java.lang.String SAMPLER_CHK_TIME -> ECEx
    java.lang.String SAMPLER_EXPLOSION_TIME -> lwXm
    java.lang.String SAMPLER_CHKS -> bFxR
    java.lang.String SAMPLER_ENT -> VUWs
    java.lang.String SAMPLER_ENTLIV -> afXh
    java.lang.String SAMPLER_ENTDROP -> KoKb
    java.lang.String SAMPLER_ENTTILE -> YVPd
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> jqRv
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> ESft
    java.lang.String ACTION_CULL_ENTITIES_NAME -> HwCr
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> QEhL
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> VTwN
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> bPJO
    java.lang.String ACTION_UPDATE_FLUID_NAME -> qScU
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> fufj
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> mFum
    java.lang.String ACTION_LOCK_FLUID_STATUS -> pbBl
    java.lang.String ACTION_LOCK_FLUID_NAME -> avxG
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> ofnt
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> AaMb
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> WGXK
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> OQCO
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> ESed
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> bOgx
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> MdOJ
    java.lang.String ACTION_LOCK_HOPPER_NAME -> PmWk
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> aCtI
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> gFFX
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> cSKl
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> wDWA
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> rMxQ
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> fCFT
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> sYkx
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> qeHg
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> qKUw
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> Orgs
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> UlIT
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> VMIU
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> mqmh
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> ncoY
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> oEOw
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> QMyq
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> fKVl
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> GHma
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> qBcs
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> uXCC
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> pacs
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> uNqG
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> mFyK
    java.lang.String ACTION_FIX_LIGHTING_NAME -> TiGJ
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> jyfD
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> wnhh
    java.lang.String ACTION_COLLECT_GARBAGE -> pGpk
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> eacn
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> MRnV
    8:226:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> ooRp:
    java.lang.String BUNDLE_NAME -> vJDO
    java.util.ResourceBundle RESOURCE_BUNDLE -> rMvw
    java.util.ResourceBundle PRIMARY_BUNDLE -> yAjS
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> Elil:
    react.React instance -> WGYl
    react.controller.SampleController sampleController -> WaME
    react.controller.PlayerController playerController -> Drgd
    react.controller.MonitorController monitorController -> ktWk
    react.controller.CommandController commandController -> ESgj
    react.controller.ActionController actionController -> dobr
    react.controller.FastDecayController fastDecayController -> jOQS
    react.controller.EntityStackController entityStackController -> TqVW
    react.controller.GlassController glassController -> GtDY
    react.controller.EntityCullController entityCullController -> tKpO
    react.controller.SpikeController spikeController -> cKAC
    react.controller.SecurityController securityController -> aLjC
    react.controller.RedstoneController redstoneController -> FgoX
    react.controller.HopperController hopperController -> eiwU
    react.controller.PhysicsController physicsController -> NfvI
    react.controller.TickTimeController tickTimeController -> JAXQ
    react.controller.RAIController raiController -> Cfvf
    react.controller.FluidController fluidController -> QFLi
    react.controller.ChunkController chunkController -> QElT
    react.controller.GraphController graphController -> xaMg
    react.controller.ChronophyFluidController fluidChronophyController -> Daih
    react.controller.EventController eventController -> mOkw
    react.controller.BlockInjectController blockInjectController -> HwHX
    react.controller.SmearTickController smearTickController -> eGtc
    react.controller.FeatureController featureController -> GRAu
    react.controller.HopperOvertickController hopperPlungeController -> Mtrp
    react.controller.BenchmarkController benchmarkController -> rFJM
    react.controller.LanguageController languageController -> Iygw
    react.controller.RemoteController remoteController -> fujo
    react.controller.ExplosiveController explosiveController -> JRXT
    41:41:void <init>() -> <init>
    137:137:void enable() -> enable
    143:143:void disable() -> disable
react.action.ActionCollectGarbage -> RroX:
    19:22:void <init>() -> <init>
    27:61:void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
react.action.ActionCollectGarbage$1 -> RroX$1:
    react.action.ActionCollectGarbage this$0 -> nmBb
    react.api.IActionSource val$source -> CVVV
    1:29:void <init>(react.action.ActionCollectGarbage,react.api.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> wCdn
react.action.ActionCollectGarbage$1$1 -> RroX$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> ebFk
    long val$mbnex -> RjqD
    long val$mbmem -> RYoP
    react.api.IActionSource val$source -> CVVV
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.api.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> NfcV:
    long ms -> iKpL
    int lcd -> SwFY
    32:59:void <init>() -> <init>
    64:150:void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> wCdn
    27:27:void access$0(react.action.ActionCullEntities,long) -> wCdn
    28:28:int access$1(react.action.ActionCullEntities) -> wCdn
    27:27:long access$2(react.action.ActionCullEntities) -> rpKc
react.action.ActionCullEntities$1 -> NfcV$1:
    react.action.ActionCullEntities this$0 -> htAU
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> NfcV$2:
    react.action.ActionCullEntities this$0 -> htAU
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> NfcV$3:
    react.action.ActionCullEntities this$0 -> htAU
    react.glang.FinalInteger val$completed -> OQGY
    react.glang.FinalInteger val$total -> nRmi
    react.glang.FinalInteger val$totalCulled -> CgVg
    react.glang.FinalInteger val$totalChunked -> rFIW
    react.api.IActionSource val$source -> CVVV
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> NfcV$4:
    react.action.ActionCullEntities this$0 -> htAU
    react.api.IActionSource val$source -> CVVV
    react.glang.FinalInteger val$totalCulled -> CgVg
    react.glang.FinalInteger val$totalChunked -> rFIW
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> DHEP:
    24:38:void <init>() -> <init>
    43:95:void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
react.action.ActionFixLighting$1 -> DHEP$1:
    react.action.ActionFixLighting this$0 -> TNsr
    1:27:void <init>(react.action.ActionFixLighting) -> <init>
    32:35:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> DHEP$2:
    react.action.ActionFixLighting this$0 -> TNsr
    react.api.IActionSource val$source -> CVVV
    int val$ch -> RcAi
    1:69:void <init>(react.action.ActionFixLighting,react.api.IActionSource,int) -> <init>
    74:79:void run(java.lang.Integer) -> wCdn
    1:1:void run(java.lang.Object) -> wCdn
react.action.ActionFixLighting$3 -> DHEP$3:
    react.action.ActionFixLighting this$0 -> TNsr
    1:80:void <init>(react.action.ActionFixLighting) -> <init>
    85:90:void run(java.lang.Double) -> wCdn
    1:1:void run(java.lang.Object) -> wCdn
react.action.ActionLockFluid -> qdWH:
    int lcd -> SwFY
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
react.action.ActionLockFluid$1 -> qdWH$1:
    react.action.ActionLockFluid this$0 -> NEVD
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> qdWH$2:
    react.action.ActionLockFluid this$0 -> NEVD
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> IFSH:
    int lcd -> SwFY
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
react.action.ActionLockHopper$1 -> IFSH$1:
    react.action.ActionLockHopper this$0 -> CEUq
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> IFSH$2:
    react.action.ActionLockHopper this$0 -> CEUq
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> EAvL:
    int lcd -> SwFY
    26:53:void <init>() -> <init>
    58:102:void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
react.action.ActionLockRedstone$1 -> EAvL$1:
    react.action.ActionLockRedstone this$0 -> CNFv
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> EAvL$2:
    react.action.ActionLockRedstone this$0 -> CNFv
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> EKHT:
    long ms -> iKpL
    int lcd -> SwFY
    boolean fail -> Orki
    31:46:void <init>() -> <init>
    51:144:void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> rpKc
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> wCdn
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> wCdn
    26:26:int access$2(react.action.ActionPurgeChunks) -> rpKc
    25:25:long access$3(react.action.ActionPurgeChunks) -> TpeI
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> wCdn
react.action.ActionPurgeChunks$1 -> EKHT$1:
    react.action.ActionPurgeChunks this$0 -> Fgpu
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> EKHT$2:
    react.action.ActionPurgeChunks this$0 -> Fgpu
    int val$dk -> qunG
    java.lang.Object val$j -> mrSI
    react.api.IActionSource val$source -> CVVV
    react.api.ISelector[] val$selectors -> Gseb
    react.glang.FinalInteger val$acompleted -> Cwyq
    react.glang.FinalInteger val$completed -> OQGY
    react.glang.FinalInteger val$total -> nRmi
    react.glang.FinalInteger val$totalCulled -> CgVg
    react.glang.FinalInteger val$totalChunked -> rFIW
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.api.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> wCdn
react.action.ActionPurgeChunks$2$1 -> EKHT$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> hkTN
    react.glang.FinalInteger val$acompleted -> Cwyq
    react.glang.FinalInteger val$completed -> OQGY
    react.glang.FinalInteger val$total -> nRmi
    react.glang.FinalInteger val$totalCulled -> CgVg
    react.glang.FinalInteger val$totalChunked -> rFIW
    react.api.IActionSource val$source -> CVVV
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> EKHT$3:
    react.action.ActionPurgeChunks this$0 -> Fgpu
    react.api.IActionSource val$source -> CVVV
    react.glang.FinalInteger val$acompleted -> Cwyq
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> EKHT$4:
    react.action.ActionPurgeChunks this$0 -> Fgpu
    org.bukkit.Chunk val$chunk -> hIPn
    java.lang.Runnable val$cb -> miaG
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> lUHC:
    long ms -> iKpL
    int lcd -> SwFY
    34:61:void <init>() -> <init>
    66:153:void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> rpKc
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> wCdn
    30:30:int access$1(react.action.ActionPurgeEntities) -> wCdn
    29:29:long access$2(react.action.ActionPurgeEntities) -> rpKc
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> wCdn
react.action.ActionPurgeEntities$1 -> lUHC$1:
    react.action.ActionPurgeEntities this$0 -> maQD
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> lUHC$2:
    react.action.ActionPurgeEntities this$0 -> maQD
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> lUHC$3:
    react.action.ActionPurgeEntities this$0 -> maQD
    react.glang.FinalInteger val$completed -> OQGY
    react.glang.FinalInteger val$total -> nRmi
    react.glang.FinalInteger val$totalCulled -> CgVg
    react.glang.FinalInteger val$totalChunked -> rFIW
    react.api.IActionSource val$source -> CVVV
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> lUHC$4:
    react.action.ActionPurgeEntities this$0 -> maQD
    react.api.IActionSource val$source -> CVVV
    react.glang.FinalInteger val$totalCulled -> CgVg
    react.glang.FinalInteger val$totalChunked -> rFIW
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> lUHC$5:
    react.action.ActionPurgeEntities this$0 -> maQD
    org.bukkit.entity.Entity val$i -> AYBS
    react.glang.FinalInteger val$cu -> ycqg
    int val$k -> upxL
    org.bukkit.Chunk val$chunk -> hIPn
    java.lang.Runnable val$cb -> miaG
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> XJMl:
    int lcd -> SwFY
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
react.action.ActionUnlockFluid$1 -> XJMl$1:
    react.action.ActionUnlockFluid this$0 -> YUvM
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> wCeF:
    int lcd -> SwFY
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
react.action.ActionUnlockHopper$1 -> wCeF$1:
    react.action.ActionUnlockHopper this$0 -> mOnT
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> HBno:
    int lcd -> SwFY
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
react.action.ActionUnlockRedstone$1 -> HBno$1:
    react.action.ActionUnlockRedstone this$0 -> WrSo
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> IFSH
    1:1:java.lang.Object get() -> get
react.api.Action -> aUIF:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> HnXn
    java.lang.String[] nodes -> Nogk
    react.api.ActionHandle handle -> YNDw
    react.api.ActionState state -> NMdj
    react.api.ActionTargetType target -> annO
    react.api.ActionType type -> WOnb
    react.api.IActionSource currentSource -> JlLp
    double progress -> rgnK
    react.glang.GMap defaultSelectors -> AaTK
    23:24:void <init>(react.api.ActionType) -> <init>
    26:39:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    44:59:react.api.ISelector[] biselect(react.api.ISelector[]) -> wCdn
    65:66:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> wCdn
    71:71:java.lang.String getName() -> getName
    77:77:java.lang.String getDescription() -> getDescription
    83:83:react.api.ActionHandle getHandleType() -> EAvL
    89:89:react.api.ActionState getState() -> EKHT
    95:95:java.lang.String getStatus() -> getStatus
    101:102:void setStatus(java.lang.String) -> wCdn
    107:107:double getProgress() -> getProgress
    113:114:void setProgress(double) -> setProgress
    119:119:react.api.ActionTargetType getTarget() -> lUHC
    125:125:react.api.ActionType getType() -> XJMl
    131:131:react.glang.GMap getDefaultSelectors() -> wCeF
    137:146:void act(react.api.IActionSource,react.api.ISelector[]) -> rpKc
    151:152:void completeAction() -> HBno
    157:157:react.api.IActionSource getCurrentSource() -> aUIF
    163:163:java.lang.String[] getNodes() -> paSk
    169:170:void setNodes(java.lang.String[]) -> wCdn
    void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
react.api.ActionAlreadyRunningException -> paSk:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> iupr:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> fdWH:
    react.api.ActionHandle AUTOMATIC -> UlKy
    react.api.ActionHandle MANUAL -> SLTF
    react.api.ActionHandle MUTEX -> ccqq
    react.api.ActionHandle[] ENUM$VALUES -> PSjq
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionHandle[] values() -> values
    1:1:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
react.api.ActionNotRunningException -> vjsv:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> aehQ:
    react.api.ActionState IDLE -> HTeP
    react.api.ActionState RUNNING -> eHVm
    react.api.ActionState[] ENUM$VALUES -> jNtV
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> uxrd:
    react.api.ActionTargetType POSITIONAL -> HCdB
    react.api.ActionTargetType SYSTEM -> QElt
    react.api.ActionTargetType[] ENUM$VALUES -> klJt
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> DHCh:
    react.api.ActionType FIX_LIGHTING -> CUwJ
    react.api.ActionType UNLOCK_FLUID -> vsyi
    react.api.ActionType LOCK_FLUID -> bjAn
    react.api.ActionType UNLOCK_HOPPER -> TXIA
    react.api.ActionType LOCK_HOPPER -> pQFt
    react.api.ActionType UNLOCK_REDSTONE -> Gjsn
    react.api.ActionType LOCK_REDSTONE -> Knqq
    react.api.ActionType CULL_ENTITIES -> CMgx
    react.api.ActionType COLLECT_GARBAGE -> rpau
    react.api.ActionType PURGE_ENTITIES -> uXId
    react.api.ActionType PURGE_CHUNKS -> ETOj
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> YNDw
    react.api.ActionTargetType target -> annO
    react.api.ActionType[] ENUM$VALUES -> mPQf
    5:17:void <clinit>() -> <clinit>
    24:30:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    34:34:java.lang.String getName() -> getName
    39:39:java.lang.String getDescription() -> getDescription
    44:44:react.api.ActionHandle getHandle() -> iupr
    49:49:react.api.ActionTargetType getTarget() -> lUHC
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> KfIx:
    react.api.ActivationRangeType ANIMALS -> ESno
    react.api.ActivationRangeType MONSTERS -> lgBD
    react.api.ActivationRangeType MISC -> Jkoa
    react.api.ActivationRangeType[] ENUM$VALUES -> LYEJ
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> OqvB:
    int value() -> value
react.api.Async -> kcEk:
react.api.CPUBenchmark -> srlg:
    org.bukkit.command.CommandSender sender -> sender
    int score -> lgAF
    java.lang.Runnable onFinish -> gySc
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:86:void run() -> run
    90:90:org.bukkit.command.CommandSender getSender() -> getSender
    95:95:int getScore() -> getScore
    100:100:java.lang.Runnable getOnFinish() -> fdWH
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> wCdn
    13:13:int access$1(react.api.CPUBenchmark) -> rpKc
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> TpeI
react.api.CPUBenchmark$1 -> srlg$1:
    react.api.CPUBenchmark this$0 -> NVYh
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> srlg$2:
    react.api.CPUBenchmark this$0 -> NVYh
    1:72:void <init>(react.api.CPUBenchmark) -> <init>
    77:84:void run() -> run
react.api.CPUResult -> VUGm:
    react.api.CPUResult ULTRA_SLOW -> tLTb
    react.api.CPUResult VERY_SLOW -> vJJX
    react.api.CPUResult SLOW -> pPiK
    react.api.CPUResult AVERAGE -> uNwL
    react.api.CPUResult GOOD -> LPSj
    react.api.CPUResult FAST -> IFjH
    react.api.CPUResult VERY_FAST -> PTOj
    react.api.CPUResult ULTRA_FAST -> EBnL
    java.lang.String m -> OPlC
    react.api.CPUResult[] ENUM$VALUES -> Vnqp
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> wCdn
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> LynL:
    react.glang.GMap cache -> gVno
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> rpKc
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> TpeI
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> vjsv
    54:54:boolean has(java.lang.Object) -> ooRp
react.api.Capabilities -> bFhF:
    react.api.Capabilities DUAL_WIELD -> iUEi
    react.api.Capabilities SCOREBOARD -> sIQQ
    react.api.Capabilities HOPPERS -> KnqS
    react.api.Capabilities ATTRIBUTES -> bOof
    react.api.Capabilities ENTITY_AI -> IGHy
    react.api.Capabilities ACTION_BAR -> pYYi
    react.api.Capabilities ENTITY_NAMES -> nttq
    react.surge.util.ProtocolRange r -> jFei
    java.lang.String n -> ntuX
    react.api.Capabilities[] ENUM$VALUES -> LrUm
    10:18:void <clinit>() -> <clinit>
    23:27:void <init>(java.lang.String,int,java.lang.String,react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:boolean isCapable() -> aehQ
    42:43:void sendNotCapable(org.bukkit.command.CommandSender) -> wCdn
    47:48:void sendCapable(org.bukkit.command.CommandSender) -> rpKc
    1:1:react.api.Capabilities[] values() -> values
    1:1:react.api.Capabilities valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> IWRq:
    react.api.ChunkIssue ENTITY -> xiaT
    react.api.ChunkIssue HOPPER -> HUHY
    react.api.ChunkIssue REDSTONE -> PBlS
    react.api.ChunkIssue FLUID -> EnBU
    react.api.ChunkIssue PHYSICS -> HDHl
    react.api.ChunkIssue[] ENUM$VALUES -> WPTe
    3:9:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
react.api.Clip -> tuns:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> tCKc:
    org.bukkit.command.CommandSender sender -> sender
    11:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> rpKc
    30:31:void sendResponseSuccess(java.lang.String) -> TpeI
    36:37:void sendResponseError(java.lang.String) -> ooRp
    42:43:void sendResponseActing(java.lang.String) -> Elil
react.api.ConsoleActionSource -> UshF:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> rpKc
    18:19:void sendResponseSuccess(java.lang.String) -> TpeI
    24:25:void sendResponseError(java.lang.String) -> ooRp
    30:31:void sendResponseActing(java.lang.String) -> Elil
react.api.CullList -> qKDK:
    react.glang.GSet toCull -> PvTS
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> Elil
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> uxrd
react.api.DTest -> VCfX:
    3:3:void <init>() -> <init>
    7:58:int test() -> DHCh
react.api.EntityFlag -> xWgw:
    react.api.EntityFlag NAMED -> AjGy
    react.api.EntityFlag TAMED -> ncwY
    react.api.EntityFlag STACKED -> qvSJ
    react.api.EntityFlag RIDDEN -> oMhi
    react.api.EntityFlag LEASHED -> uGIr
    java.lang.String m -> OPlC
    react.api.EntityFlag[] ENUM$VALUES -> EnDg
    8:14:void <clinit>() -> <clinit>
    18:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> RroX
    40:60:boolean is(org.bukkit.entity.Entity) -> NfcV
    66:66:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> YMOn:
    react.glang.GSet entityTypes -> RIVU
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> KfIx
react.api.EntitySample -> jyTN:
    react.glang.GMap counts -> aMRE
    react.glang.GMap sets -> HUJt
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> OqvB
    45:45:react.glang.GList getTypes() -> kcEk
    50:57:int total() -> srlg
    62:67:int get(org.bukkit.entity.EntityType) -> wCdn
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> rpKc
    84:96:void add(org.bukkit.entity.Entity) -> Elil
react.api.Experimental -> rNGT:
react.api.IAction -> NEAD:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> EAvL
    void act(react.api.IActionSource,react.api.ISelector[]) -> rpKc
    void enact(react.api.IActionSource,react.api.ISelector[]) -> wCdn
    react.api.ActionState getState() -> EKHT
    react.api.ActionTargetType getTarget() -> lUHC
    void setNodes(java.lang.String[]) -> wCdn
    java.lang.String[] getNodes() -> paSk
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> wCdn
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> XJMl
    react.glang.GMap getDefaultSelectors() -> wCeF
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> wCdn
    react.api.ISelector[] biselect(react.api.ISelector[]) -> wCdn
    react.api.IActionSource getCurrentSource() -> aUIF
    void completeAction() -> HBno
react.api.IActionSource -> KKvs:
    void sendResponse(java.lang.String) -> rpKc
    void sendResponseSuccess(java.lang.String) -> TpeI
    void sendResponseError(java.lang.String) -> ooRp
    void sendResponseActing(java.lang.String) -> Elil
react.api.ICache -> Sdrh:
    react.glang.GSet get(java.lang.Object) -> rpKc
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> TpeI
    void clear() -> clear
    boolean has(java.lang.Object) -> ooRp
    react.glang.GList k() -> vjsv
react.api.ICommand -> ssPe:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> VUGm
    java.lang.String[] getPermissions() -> LynL
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> RroX
    react.api.SideGate getSideGate() -> bFhF
    void registerParameterDescription(java.lang.String,java.lang.String) -> wCdn
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wCdn
react.api.IRecord -> HKac:
    java.lang.String getRecordType() -> IWRq
    long getRecordTime() -> tuns
    react.json.JSONObject toJSON() -> tCKc
    java.lang.Object getRecordObject() -> UshF
    void fromJSON(react.json.JSONObject) -> wCdn
react.api.IRecordBook -> DrYq:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> wCdn
    long getOldestRecordTime() -> qKDK
    void addRecord(react.api.IRecord) -> wCdn
    long getLatestRecordTime() -> VCfX
    int countRecords(long,long) -> wCdn
    react.glang.GMap getRecords(long,long) -> rpKc
    int purgeRecordsBefore(long) -> rpKc
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> vbfj:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> xWgw
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> YMOn
    react.surge.util.C getAltColor() -> jyTN
    void setColor(react.surge.util.C,react.surge.util.C) -> wCdn
    int getInterval() -> getInterval
    void setInterval(int) -> rpKc
    void sample() -> rNGT
    java.lang.String get() -> get
    void construct() -> NEAD
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> dVBy:
    react.api.SelectionMode getMode() -> KKvs
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> Elil
    react.glang.GSet getList() -> Sdrh
    react.glang.GSet getPossibilities() -> ssPe
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> RroX
    java.lang.String getName() -> getName
react.api.Injection -> oMQg:
    react.api.InjectionMethod value() -> HKac
react.api.InjectionMethod -> Wyon:
    react.api.InjectionMethod SWAP -> hQeA
    react.api.InjectionMethod SUBSTRATE -> VEBQ
    react.api.InjectionMethod RELOAD -> hITY
    react.api.InjectionMethod[] ENUM$VALUES -> mjFM
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> doUO:
    java.lang.String value() -> value
react.api.MSampler -> vtJF:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> DrYq
react.api.MonitorHeading -> fljb:
    react.api.ISampler head -> UuBs
    react.glang.GList children -> PvUN
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> wCdn
    27:27:react.api.ISampler getHead() -> vbfj
    32:33:void setHead(react.api.ISampler) -> rpKc
    37:37:react.glang.GList getChildren() -> dVBy
    42:42:java.lang.String getHeadText() -> oMQg
    47:60:java.lang.String getChildText() -> Wyon
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> wCdn
react.api.NoiseGenerator -> FMks:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> fJhA:
    react.api.NoiseGenerator[] octaves -> FgvP
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> doUO
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> uyVT:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> LrXq
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> vtJF
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> tmbI:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> wCdn
react.api.Permissable -> STSC:
    react.api.Permissable ACCESS -> lgCQ
    react.api.Permissable MONITOR -> dpMU
    react.api.Permissable MONITOR_TITLE -> ArWj
    react.api.Permissable MONITOR_ACTIONLOG -> HLYt
    react.api.Permissable MONITOR_MAP -> Fgus
    react.api.Permissable MONITOR_ENVIRONMENT -> Vnrb
    react.api.Permissable MONITOR_GLASSES -> VUaL
    react.api.Permissable MONITOR_CHUNK_BLAME -> LaUf
    react.api.Permissable RAI_MONITOR -> Kwcx
    react.api.Permissable RAI_CONTROL -> ycuj
    react.api.Permissable RAI_ACCESS -> cJdf
    react.api.Permissable RAI -> OQMM
    react.api.Permissable ACT -> HTiB
    react.api.Permissable RELOAD -> nKEc
    java.lang.String node -> qTNg
    react.api.Permissable[] ENUM$VALUES -> mGbB
    7:22:void <clinit>() -> <clinit>
    26:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> TpeI
    46:46:java.lang.String getNode() -> fljb
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PlayerActionSource -> uNai:
    org.bukkit.entity.Player p -> awbp
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> rpKc
    30:31:void sendResponseSuccess(java.lang.String) -> TpeI
    36:37:void sendResponseError(java.lang.String) -> ooRp
    42:43:void sendResponseActing(java.lang.String) -> Elil
react.api.PluginSelfDeleter -> kYuo:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> RHtJ
    java.lang.Runnable r -> ealS
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> wCdn
react.api.RAIActionSource -> RkAM:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> rpKc
    16:17:void sendResponseSuccess(java.lang.String) -> TpeI
    22:23:void sendResponseError(java.lang.String) -> ooRp
    28:29:void sendResponseActing(java.lang.String) -> Elil
react.api.ReactCommand -> YoTl:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> dfxy
    java.lang.String usage -> aMOc
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> YpKx
    react.api.SideGate sideGate -> TXLQ
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> RroX
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> wCdn
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> VUGm
    47:47:java.lang.String[] getPermissions() -> LynL
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> bFhF
react.api.ReactException -> iTOx:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> XcaE:
    react.glang.GMap keystore -> XdXR
    boolean monitoring -> monitoring
    boolean actionlogging -> gFQP
    boolean glasses -> kJLP
    boolean mapping -> WHCo
    int monitorSelection -> xaSW
    int plays -> Embn
    boolean monitorPosted -> HKwm
    int monitorLastSelection -> nJcp
    int switchNotification -> VUaU
    int hotbarSlot -> stGQ
    boolean shift -> KMQl
    int scroll -> IhnL
    double lastHeight -> xPTs
    boolean heightMovement -> xHEK
    org.bukkit.entity.Player p -> awbp
    24:39:void <clinit>() -> <clinit>
    42:89:void <init>(org.bukkit.entity.Player) -> <init>
    95:102:void save() -> save
    108:115:void load() -> load
    119:119:boolean isMonitoring() -> FMks
    124:124:boolean isMapping() -> fJhA
    129:129:org.bukkit.entity.Player getP() -> uyVT
    134:136:void setMonitoring(boolean) -> rpKc
    140:142:void setMapping(boolean) -> TpeI
    146:146:int getMonitorSelection() -> tmbI
    151:153:void setMonitorSelection(int) -> TpeI
    157:157:int getHotbarSlot() -> STSC
    162:164:void setHotbarSlot(int) -> ooRp
    168:168:boolean isShifting() -> uNai
    173:175:void setShifting(boolean) -> ooRp
    179:179:boolean isShift() -> kYuo
    184:186:void setShift(boolean) -> Elil
    190:190:int getScroll() -> RkAM
    195:197:void setScroll(int) -> Elil
    201:201:int getMonitorLastSelection() -> YoTl
    206:208:void setMonitorLastSelection(int) -> RroX
    212:213:void setP(org.bukkit.entity.Player) -> wCdn
    217:217:double getLastHeight() -> iTOx
    222:224:void setLastHeight(double) -> wCdn
    228:228:boolean isHeightMovement() -> XcaE
    233:235:void setHeightMovement(boolean) -> RroX
    239:239:int getSwitchNotification() -> Xtaf
    244:246:void setSwitchNotification(int) -> NfcV
    250:250:boolean getMonitorPosted() -> McaX
    255:257:void setMonitorPosted(boolean) -> NfcV
    261:261:int getPlays() -> vtII
    266:268:void setPlays(int) -> DHEP
    272:272:boolean isGlasses() -> aLWp
    277:279:void setGlasses(boolean) -> DHEP
    283:283:boolean isActionlogging() -> kYti
    288:290:void setActionlogging(boolean) -> qdWH
react.api.Record -> Xtaf:
    java.lang.String recordType -> HCip
    long recordTime -> PvVP
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> IWRq
    32:32:long getRecordTime() -> tuns
    38:38:java.lang.Object getRecordObject() -> UshF
    react.json.JSONObject toJSON() -> tCKc
    void fromJSON(react.json.JSONObject) -> wCdn
react.api.RecordBook -> McaX:
    java.io.File recordFile -> rgtr
    react.json.JSONObject js -> DkDC
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> wCdn
    79:87:react.api.IRecord getRecord(long) -> wCdn
    react.api.IRecord createDummyRecord(long,java.lang.String) -> wCdn
    95:107:long getOldestRecordTime() -> qKDK
    113:125:long getLatestRecordTime() -> VCfX
    130:130:boolean within(long,long,long) -> wCdn
    136:144:int countRecords(long,long) -> wCdn
    150:162:react.glang.GMap getRecords(long,long) -> rpKc
    168:181:int purgeRecordsBefore(long) -> rpKc
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> vtII:
react.api.SampledChunk -> aLWp:
    org.bukkit.Chunk c -> qeSR
    react.glang.GMap counts -> aMRE
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> srnS
    26:38:void hit(react.api.ChunkIssue,int) -> wCdn
    42:42:org.bukkit.Chunk getC() -> pYDa
    47:47:react.glang.GMap getCounts() -> mymh
react.api.SampledType -> kYti:
    react.api.SampledType ENTITY_TIME_LOCK -> htKU
    react.api.SampledType TILE_TIME_LOCK -> qTRK
    react.api.SampledType ENTITY_TIME -> CpPn
    react.api.SampledType TILE_TIME -> FOFj
    react.api.SampledType ENTITY_DROPTICK -> antg
    react.api.SampledType TILE_DROPTICK -> qCOw
    react.api.SampledType REDSTONE_TICK_USAGE -> FgxF
    react.api.SampledType REDSTONE_TICK -> kIoO
    react.api.SampledType REDSTONE_SECOND -> BBYI
    react.api.SampledType REDSTONE_TIME -> iDIP
    react.api.SampledType HOPPER_TICK_USAGE -> KxHk
    react.api.SampledType HOPPER_TICK -> Fgwk
    react.api.SampledType HOPPER_SECOND -> lDaO
    react.api.SampledType HOPPER_TIME -> jXMc
    react.api.SampledType FLUID_TICK_USAGE -> BRxp
    react.api.SampledType FLUID_TICK -> hYvn
    react.api.SampledType FLUID_SECOND -> xjGW
    react.api.SampledType FLUID_TIME -> nBVq
    react.api.SampledType TPS -> lEBV
    react.api.SampledType TICK -> LOts
    react.api.SampledType TIU -> lEAY
    react.api.SampledType MEM -> rOCV
    react.api.SampledType FREEMEM -> AYIi
    react.api.SampledType MAXMEM -> jFkE
    react.api.SampledType ALLOCMEM -> ifLH
    react.api.SampledType MAHS -> migF
    react.api.SampledType CHK_TIME -> PnEU
    react.api.SampledType EXPLOSION_TIME -> BKKX
    react.api.SampledType CHK -> KfeT
    react.api.SampledType ATASK -> GQhK
    react.api.SampledType STASK -> nAvA
    react.api.SampledType CHKS -> aLqc
    react.api.SampledType ENT -> XmKf
    react.api.SampledType ENTLIV -> aEAp
    react.api.SampledType ENTDROP -> FFUT
    react.api.SampledType ENTTILE -> lVEm
    java.lang.String node -> qTNg
    react.api.SampledType[] ENUM$VALUES -> scKQ
    6:43:void <clinit>() -> <clinit>
    49:49:react.api.ISampler get() -> GbPl
    55:55:java.lang.String toString() -> toString
    58:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> fljb
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> srnS:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> oxaI
    react.surge.util.C altColor -> kIqN
    int interval -> rqIe
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> YMOn
    49:49:react.surge.util.C getAltColor() -> jyTN
    55:55:int getInterval() -> getInterval
    void sample() -> rNGT
    void construct() -> NEAD
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> wCdn
    107:108:void setInterval(int) -> rpKc
react.api.Sector -> pYDa:
    int value() -> value
react.api.SelectionException -> mymh:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> GbPl:
    react.api.SelectionMode WHITELIST -> WjLQ
    react.api.SelectionMode BLACKLIST -> Cgap
    react.api.SelectionMode[] ENUM$VALUES -> VMUy
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> hQMK:
    java.lang.Class objectType -> OPrD
    react.api.SelectionMode mode -> ebRn
    react.glang.GSet list -> iDJv
    react.glang.GSet possibilities -> afgV
    int popoff -> gNfI
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> KKvs
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> Elil
    43:43:react.glang.GSet getList() -> Sdrh
    49:49:react.glang.GSet getPossibilities() -> ssPe
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> RroX
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> NfcV
    98:100:int pop() -> pop
react.api.SelectorEntityType -> vcFf:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> TpeI
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> RroX
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> DHEP
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> fKJT:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> dDbh:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> rpKc
    29:30:void add(org.bukkit.Chunk,int) -> wCdn
    34:38:void add(org.bukkit.World) -> RroX
    42:46:void addAll() -> hQMK
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> RroX
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> DHEP
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> cdCi:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> RroX
    87:87:java.lang.String getName() -> getName
react.api.Side -> JcLb:
    react.api.Side PLAYERS -> papm
    react.api.Side CONSOLE -> DsWC
    java.lang.String ss -> iwNp
    react.api.Side[] ENUM$VALUES -> KMUS
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> vcFf
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> ooRp
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> JQjQ:
    react.api.SideGate PLAYERS_ONLY -> aUcx
    react.api.SideGate CONSOLES_ONLY -> RQhk
    react.api.SideGate ANYTHING -> IysI
    int[] $SWITCH_TABLE$react$api$SideGate -> fSqn
    react.api.SideGate[] ENUM$VALUES -> MAyG
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> wCdn
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> fKJT
react.api.SimplexNoiseGenerator -> SCRj:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> GsmE
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> dDbh
react.api.SimplexOctaveGenerator -> KClF:
    double wScale -> gpgu
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> wCdn
react.api.SpecializedTickLimiter -> mGLr:
    double rMaxTime -> dpPJ
    long rStartTime -> MJiy
    double rLastTime -> ycyd
    long rMark -> bOvg
    double tMaxTime -> wwfH
    react.gmath.Average atimes -> Vfff
    react.gmath.Average adropped -> sRHU
    int droppedTicks -> xXfS
    boolean entityTick -> WPXR
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> tutU:
    react.glang.GList sources -> twNV
    react.glang.GList splooge -> UdHB
    react.glang.GSet destroy -> wfgm
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> wCdn
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> rpKc
    void clipped(org.bukkit.Location) -> wCdn
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> rpKc
    boolean isAllowedSource(org.bukkit.Location) -> TpeI
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> wCdn
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> rpKc
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> TpeI
react.api.SploogeCounter$1 -> tutU$1:
    react.api.SploogeCounter this$0 -> VUgt
    java.util.Iterator val$it -> WGiY
    org.bukkit.Location val$start -> PLGS
    int val$maxDistance -> ChDn
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> wCdn
react.api.SploogeCounter$1$1 -> tutU$1$1:
    react.api.SploogeCounter$1 this$1 -> KfkB
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> afNb:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> eijA:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> tCKc
    38:49:void fromJSON(react.json.JSONObject) -> wCdn
react.api.StackTraceRecordBook -> qmLQ:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> rpKc
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> wCdn
react.api.StackedEntity -> IOHW:
    org.bukkit.entity.LivingEntity entity -> ieoV
    int count -> count
    double rmx -> TyvM
    20:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> wCdn
    46:46:int getAbsoluteMaxCount() -> cdCi
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> rpKc
    56:58:void update() -> update
    62:68:void signalSize() -> JcLb
    72:123:void updateHealth() -> JQjQ
    127:128:void heal(double) -> rpKc
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> SCRj
    142:142:int getEffectiveCount(double) -> TpeI
    147:147:double getEffectiveMaxHealth(int) -> qdWH
    152:152:double getRealMaxHealth() -> KClF
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> wCdn
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> Foqe:
    react.glang.GList headings -> RcNm
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> wCdn
    24:24:int getMaxSelection() -> mGLr
    29:37:int left(int) -> IFSH
    42:50:int right(int) -> EAvL
    55:55:react.api.MonitorHeading getHeadFor(int) -> EKHT
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> wCdn
    83:100:java.lang.String getHotbarFor(int,boolean) -> wCdn
react.api.Unused -> hapc:
react.binject.BlockInjector -> SStM:
    react.surge.util.Protocol protocol -> CWAv
    java.lang.Class blocksClass -> UcgX
    12:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> wCdn
    29:56:void inject() -> tutU
    61:61:react.surge.util.Protocol getVersion() -> afNb
react.binject.IBlockInjector -> qBWp:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> wCdn
    void add(int,java.lang.String,java.lang.Object) -> wCdn
    java.lang.Object get(java.lang.String) -> get
    void inject() -> tutU
    react.surge.util.Protocol getVersion() -> afNb
react.binject.InjectedBlock -> uEqu:
    react.surge.util.Protocol getInjectProtocol() -> eijA
    java.lang.String getInjectKey() -> qmLQ
    java.lang.String getInjectCKey() -> IOHW
    int getInjectId() -> Foqe
react.binject.ReflectionUtil -> haoq:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> wCdn
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> wCdn
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> wCdn
    41:54:void setAccessible(java.lang.reflect.Field) -> wCdn
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> wCdn
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> wCdn
react.binject.V10.BlockInjector10 -> kIVr:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> NfcV
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> wCdn
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> wCdn
react.binject.V11.BlockInjector11 -> hrpf:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> DHEP
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> wCdn
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> wCdn
react.binject.V12.BlockInjector12 -> ofcq:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> qdWH
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> wCdn
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> wCdn
react.binject.V8.BlockInjector8 -> jpfc:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> IFSH
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> wCdn
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> wCdn
react.binject.V9.BlockInjector9 -> qtyw:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> EAvL
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> wCdn
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> wCdn
react.cache.CachedEntity -> qAvG:
    java.util.UUID uid -> NotQ
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> aEFs
    double x -> x
    double y -> y
    double z -> z
    double vx -> ebTj
    double vy -> vlVK
    double vz -> tTmX
    double dx -> JBFM
    double dy -> SeqX
    double dz -> hAIa
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> DHEP
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> hapc
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> SStM
    120:121:void setVx(double) -> ooRp
    125:125:double getVy() -> qBWp
    130:131:void setVy(double) -> Elil
    135:135:double getVz() -> uEqu
    140:141:void setVz(double) -> RroX
    145:145:double getDx() -> haoq
    150:151:void setDx(double) -> NfcV
    155:155:double getDy() -> kIVr
    160:161:void setDy(double) -> DHEP
    165:165:double getDz() -> hrpf
    170:171:void setDz(double) -> qdWH
    175:175:java.util.UUID getUid() -> ofcq
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> prXc:
    int age -> DsWI
    boolean ageLock -> fuvy
    boolean breed -> feWC
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> DHEP
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> jpfc
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> qtyw
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> FyBg:
    org.bukkit.DyeColor dye -> vuEy
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> DHEP
    30:30:org.bukkit.DyeColor getDye() -> qAvG
    35:36:void setDye(org.bukkit.DyeColor) -> wCdn
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> yJNa:
    react.glang.GList potionEffects -> xGgJ
    boolean canPickupItems -> hRKV
    org.bukkit.inventory.ItemStack[] armorContents -> iUNV
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> vteX
    double maxHealth -> maxHealth
    int maxAir -> oMmc
    int air -> hHxt
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> DHEP
    63:63:react.glang.GList getPotionEffects() -> prXc
    68:69:void setPotionEffects(react.glang.GList) -> rpKc
    73:73:boolean isCanPickupItems() -> FyBg
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> yJNa
    138:139:void setMaxAir(int) -> lUHC
    143:143:int getAir() -> ivUT
    148:149:void setAir(int) -> XJMl
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> ivUT:
    boolean sheared -> lDeJ
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> DHEP
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> dgEr:
    org.bukkit.inventory.ItemStack is -> DkGO
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> DHEP
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> SdwM:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> oVFr:
    react.chronophysics.HopperDirection DOWN -> CMpt
    react.chronophysics.HopperDirection NORTH -> PCUV
    react.chronophysics.HopperDirection SOUTH -> vIpd
    react.chronophysics.HopperDirection EAST -> XloW
    react.chronophysics.HopperDirection WEST -> qKcL
    int direction -> direction
    int[] $SWITCH_TABLE$react$chronophysics$HopperDirection -> ejdQ
    react.chronophysics.HopperDirection[] ENUM$VALUES -> gEvH
    6:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> ooRp
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> wCdn
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> rpKc
    1:1:react.chronophysics.HopperDirection[] values() -> values
    1:1:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    6:6:int[] $SWITCH_TABLE$react$chronophysics$HopperDirection() -> dgEr
react.chronophysics.HopperWormhole -> ndEb:
    org.bukkit.block.Hopper source -> vdGp
    react.glang.GList path -> dFBN
    org.bukkit.block.Hopper destination -> nJmg
    17:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> SdwM
    31:31:react.glang.GList getPath() -> oVFr
    36:36:org.bukkit.block.Hopper getDestination() -> ndEb
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> wCdn
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> pPXm:
    org.bukkit.block.Hopper h -> nuao
    13:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> wCdn
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> pPXm
    62:62:boolean isLockedByRedstone() -> RbUI
react.command.CommandAct -> RbUI:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wCdn
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> wCdn
    186:192:react.text.RTX getBeginningRTX() -> ryBr
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> wCdn
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> rpKc
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> TpeI
    331:346:react.glang.GList getSortedCommands() -> ytfF
    351:358:int getPageSize(int) -> wCeF
    363:363:boolean isValidPage(int,int) -> wCdn
    368:377:react.glang.GList getPage(int,int) -> rpKc
react.command.CommandActionLog -> ryBr:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wCdn
react.command.CommandCPUScore -> ytfF:
    15:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wCdn
react.command.CommandCapabilities -> KvrL:
    15:23:void <init>() -> <init>
    28:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wCdn
react.command.CommandChunkBlame -> AWrT:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wCdn
react.command.CommandChunkBlame$1 -> AWrT$1:
    react.command.CommandChunkBlame this$0 -> vJUQ
    org.bukkit.command.CommandSender val$sender -> URfi
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> AWrT$1$1:
    react.command.CommandChunkBlame$1 this$1 -> iMAU
    org.bukkit.command.CommandSender val$sender -> URfi
    java.lang.String val$i -> ktiY
    react.glang.GMap val$top -> iUQa
    int val$totalx -> FNlS
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> pijd:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wCdn
react.command.CommandHelp -> tLEI:
    27:36:void <init>() -> <init>
    41:42:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wCdn
    46:65:void sendPage(org.bukkit.command.CommandSender,int,int) -> wCdn
    69:75:react.text.RTX getBeginningRTX() -> ryBr
    80:140:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> wCdn
    144:154:void sendHeader(org.bukkit.command.CommandSender,int,int) -> rpKc
    158:187:void sendFooter(org.bukkit.command.CommandSender,int,int) -> TpeI
    191:198:react.glang.GList getSortedCommands() -> ytfF
    203:210:int getPageSize(int) -> wCeF
    215:215:boolean isValidPage(int,int) -> wCdn
    220:229:react.glang.GList getPage(int,int) -> rpKc
react.command.CommandMap -> iTVE:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wCdn
react.command.CommandMonitor -> Xkud:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wCdn
react.command.CommandReload -> aeoL:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wCdn
react.command.CommandReload$1 -> aeoL$1:
    react.command.CommandReload this$0 -> xGis
    org.bukkit.command.CommandSender val$sender -> URfi
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> aeoL$1$1:
    react.command.CommandReload$1 this$1 -> ekHa
    org.bukkit.command.CommandSender val$sender -> URfi
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> bhqn:
    27:35:void <init>() -> <init>
    40:48:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wCdn
    52:61:org.bukkit.inventory.ItemStack makeBook() -> KvrL
    66:92:void addSpikePages(react.glang.GList) -> TpeI
    96:106:void addStatusPages(react.glang.GList) -> ooRp
    110:127:int findSlot(org.bukkit.entity.Player) -> rpKc
react.controller.ActionController -> MlWc:
    int kiv -> KLyk
    react.glang.GMap actions -> SfTW
    react.glang.GMap pending -> bHLd
    react.glang.GList tasks -> TFrr
    20:20:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:70:void start() -> start
    74:75:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> wCdn
    79:100:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> rpKc
    105:105:react.api.IAction getAction(react.api.ActionType) -> wCdn
    110:111:void registerAction(react.api.IAction) -> wCdn
    117:117:void stop() -> stop
    122:187:void tick() -> tick
    191:191:react.glang.GList getActions() -> AWrT
    196:203:react.glang.GList getActionNames() -> pijd
react.controller.BenchmarkController -> fJkb:
    react.api.CPUBenchmark finished -> qmhl
    boolean done -> QqOb
    int score -> lgAF
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    16:16:void access$0(react.controller.BenchmarkController,boolean) -> wCdn
    15:15:void access$1(react.controller.BenchmarkController,react.api.CPUBenchmark) -> wCdn
    15:15:react.api.CPUBenchmark access$2(react.controller.BenchmarkController) -> wCdn
react.controller.BenchmarkController$1 -> fJkb$1:
    react.controller.BenchmarkController this$0 -> sQlP
    1:26:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
    26:26:react.controller.BenchmarkController access$0(react.controller.BenchmarkController$1) -> wCdn
react.controller.BenchmarkController$1$1 -> fJkb$1$1:
    react.controller.BenchmarkController$1 this$1 -> uPCI
    1:31:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
    31:31:react.controller.BenchmarkController$1 access$0(react.controller.BenchmarkController$1$1) -> wCdn
react.controller.BenchmarkController$1$1$1 -> fJkb$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> sbmj
    1:36:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> WhtB:
    react.glang.GMap rangeMapping -> HvvA
    react.binject.IBlockInjector injector -> gEyO
    boolean injected -> Winq
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> tLEI
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> iTVE
    115:115:react.binject.IBlockInjector getInjector() -> Xkud
    120:120:boolean isInjected() -> aeoL
react.controller.ChronophyFluidController -> lemx:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> KfQj:
    boolean firstTickList -> cJmy
    long firstTick -> MeBO
    long lastTick -> dosS
    react.gmath.Average aCSMS -> nlpF
    react.glang.GMap pluginLoads -> nKNM
    react.glang.GMap playerLoads -> BdcP
    int serverLoads -> AYOe
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> bhqn
    63:73:void tickNextTickList() -> MlWc
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> wCdn
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> wCdn
    171:171:boolean isFirstTickList() -> fJkb
    176:176:long getFirstTick() -> WhtB
    181:181:long getLastTick() -> lemx
    186:186:react.gmath.Average getaCSMS() -> KfQj
    191:191:react.glang.GMap getPluginLoads() -> AGPs
    196:196:react.glang.GMap getPlayerLoads() -> RsVt
    201:201:int getServerLoads() -> awQp
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> wCdn
    29:29:int access$1(react.controller.ChunkController) -> rpKc
    29:29:void access$2(react.controller.ChunkController,int) -> wCdn
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> TpeI
react.controller.ChunkController$1 -> KfQj$1:
    react.controller.ChunkController this$0 -> dMqG
    org.bukkit.event.world.ChunkLoadEvent val$e -> gNiE
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> TpeI
    1:1:void run(java.lang.Object) -> wCdn
react.controller.CommandController -> AGPs:
    react.glang.GList commands -> gOId
    boolean k -> PCVs
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> qdWH
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> IFSH
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> wCdn
    317:317:react.glang.GList getCommands() -> ytdi
    322:323:void setCommands(react.glang.GList) -> Elil
    327:327:boolean isK() -> NEGl
    332:333:void setK(boolean) -> IFSH
react.controller.EntityCullController -> RsVt:
    react.glang.GSet flags -> BTBW
    react.glang.GSet defer -> mOyb
    react.glang.GMap maxs -> bYLe
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> xiQe
    172:180:int cull(org.bukkit.Chunk) -> TpeI
    185:285:int partialCull(org.bukkit.Chunk) -> ooRp
react.controller.EntityStackController -> awQp:
    react.glang.GList stacks -> lgNE
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> RroX
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> TpeI
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> ooRp
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> wCdn
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> wCdn
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> Elil
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> wCdn
react.controller.EntityStackController$1 -> awQp$1:
    react.controller.EntityStackController this$0 -> fCYK
    org.bukkit.event.entity.EntitySpawnEvent val$e -> XCAc
    1:248:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> ytdi:
    react.glang.GMap slots -> Vwny
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> wCdn
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> wCdn
react.controller.ExplosiveController -> NEGl:
    boolean firstTickList -> cJmy
    long firstTick -> MeBO
    long lastTick -> dosS
    react.gmath.Average aCSMS -> nlpF
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> bhqn
    50:60:void tickNextTickList() -> MlWc
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> wCdn
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> wCdn
    89:89:boolean isFirstTickList() -> fJkb
    94:94:long getFirstTick() -> WhtB
    99:99:long getLastTick() -> lemx
    104:104:react.gmath.Average getaCSMS() -> KfQj
react.controller.FastDecayController -> xiQe:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> wCdn
    47:123:void checkBreak(org.bukkit.block.Block) -> TpeI
    127:135:void decay(org.bukkit.block.Block) -> ooRp
    141:141:void tick() -> tick
react.controller.FastDecayController$1 -> xiQe$1:
    react.controller.FastDecayController this$0 -> JdKw
    react.glang.GMap val$locs -> Mltc
    1:56:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    61:61:boolean isAllowedSplooge(org.bukkit.Location) -> rpKc
    67:67:boolean isAllowedSource(org.bukkit.Location) -> TpeI
    73:92:void clipped(org.bukkit.Location) -> wCdn
    97:120:void finished() -> finished
    56:56:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> wCdn
react.controller.FastDecayController$1$1 -> xiQe$1$1:
    react.controller.FastDecayController$1 this$1 -> iCps
    react.glang.GMap val$locs -> Mltc
    int val$i -> YyIM
    1:101:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    106:116:void run() -> run
react.controller.FastDecayController$2 -> xiQe$2:
    react.controller.FastDecayController this$0 -> JdKw
    org.bukkit.block.Block val$b -> hRPd
    1:127:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    132:133:void run() -> run
react.controller.FeatureController -> LWsE:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.FluidController -> RQSm:
    react.glang.GSet ignore -> OQYA
    int flowsPerTick -> Mlti
    int flowsPerSecond -> MufR
    react.gmath.Average aFST -> WYQH
    react.gmath.Average aFSS -> SCqv
    react.gmath.Average aFSMS -> tMBJ
    boolean firstTickList -> cJmy
    long firstTick -> MeBO
    long lastTick -> dosS
    react.glang.GSet frozen -> yJoK
    react.glang.GMap queue -> JBIe
    react.glang.GMap freezeTimes -> GJAv
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> Elil
    68:76:void checkChunks() -> LWsE
    80:97:void checkChunk(org.bukkit.Chunk) -> RroX
    101:107:void queue(org.bukkit.block.Block) -> Elil
    111:111:boolean isFrozen(org.bukkit.Chunk) -> NfcV
    116:117:void freeze(org.bukkit.Chunk) -> DHEP
    121:127:void unfreeze(org.bukkit.Chunk) -> qdWH
    131:138:void freeze(org.bukkit.Chunk,long) -> wCdn
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> bhqn
    172:182:void tickNextTickList() -> MlWc
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> wCdn
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> wCdn
    248:248:react.glang.GSet getIgnore() -> RQSm
    253:253:int getTransfersPerTick() -> uqJW
    258:258:int getTransfersPerSecond() -> mGOG
    263:263:react.gmath.Average getaFST() -> GkEa
    268:268:react.gmath.Average getaFSS() -> Qopy
    273:273:react.gmath.Average getaFSMS() -> DHJG
    278:278:boolean isFirstTickList() -> fJkb
    283:283:long getFirstTick() -> WhtB
    288:288:long getLastTick() -> lemx
    293:293:react.glang.GSet getFrozen() -> kQiU
    298:298:react.glang.GMap getQueue() -> avob
    303:303:react.glang.GMap getFreezeTimes() -> hbRm
react.controller.GlassController -> uqJW:
    react.glang.GMap q -> dxgh
    react.glang.GList g -> cCAV
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> TpeI
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> ooRp
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> Elil
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> wCdn
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> wCdn
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> wCdn
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> wCdn
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> wCdn
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> wCdn
    36:36:react.glang.GList access$0(react.controller.GlassController) -> wCdn
react.controller.GlassController$1 -> uqJW$1:
    react.controller.GlassController this$0 -> oVdL
    react.glang.GMap val$cc -> eYgf
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> uqJW$1$1:
    react.controller.GlassController$1 this$1 -> aUkh
    org.bukkit.Location val$i -> CoyJ
    org.bukkit.entity.Player val$j -> awoL
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> mGOG:
    react.glang.GMap g -> TFsg
    react.glang.GMap gr -> MKPw
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> wCdn
    121:156:void toggleMapping(org.bukkit.entity.Player) -> RroX
    160:160:react.glang.GMap getG() -> MRdA
    165:165:react.glang.GMap getGr() -> LPAb
    31:31:react.glang.GMap access$0(react.controller.GraphController) -> wCdn
    30:30:react.glang.GMap access$1(react.controller.GraphController) -> rpKc
react.controller.GraphController$1 -> mGOG$1:
    react.controller.GraphController this$0 -> AHPf
    1:48:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> mGOG$2:
    react.controller.GraphController this$0 -> AHPf
    1:84:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> mGOG$3:
    react.controller.GraphController this$0 -> AHPf
    org.bukkit.event.player.PlayerJoinEvent val$e -> pbWU
    1:100:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> GkEa:
    react.glang.GSet ignore -> OQYA
    int transfersPerTick -> incs
    int transfersPerSecond -> YVcr
    react.gmath.Average aHST -> IyyN
    react.gmath.Average aHSS -> bjPP
    react.gmath.Average aHSMS -> iCpM
    boolean firstTickList -> cJmy
    long firstTick -> MeBO
    long lastTick -> dosS
    react.glang.GSet frozen -> yJoK
    react.glang.GMap queue -> JBIe
    react.glang.GMap freezeTimes -> GJAv
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> Elil
    65:73:void checkChunks() -> LWsE
    77:94:void checkChunk(org.bukkit.Chunk) -> RroX
    98:104:void queue(org.bukkit.block.Block) -> Elil
    108:108:boolean isFrozen(org.bukkit.Chunk) -> NfcV
    113:114:void freeze(org.bukkit.Chunk) -> DHEP
    118:124:void unfreeze(org.bukkit.Chunk) -> qdWH
    128:135:void freeze(org.bukkit.Chunk,long) -> wCdn
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> bhqn
    169:179:void tickNextTickList() -> MlWc
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> wCdn
    207:207:react.glang.GSet getIgnore() -> RQSm
    212:212:int getTransfersPerTick() -> uqJW
    217:217:int getTransfersPerSecond() -> mGOG
    222:222:react.gmath.Average getaHST() -> YgHf
    227:227:react.gmath.Average getaHSS() -> KDLx
    232:232:react.gmath.Average getaHSMS() -> WFoA
    237:237:boolean isFirstTickList() -> fJkb
    242:242:long getFirstTick() -> WhtB
    247:247:long getLastTick() -> lemx
    252:252:react.glang.GSet getFrozen() -> kQiU
    257:257:react.glang.GMap getQueue() -> avob
    262:262:react.glang.GMap getFreezeTimes() -> hbRm
react.controller.HopperOvertickController -> Qopy:
    react.glang.GList possiblePlunge -> SLav
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> TpeI
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> wCdn
react.controller.LanguageController -> DHJG:
    java.io.File languageFolder -> Emll
    int oldVersion -> tvtN
    java.io.File dlf -> NhFt
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> NDdv
    160:221:void downloadAll(boolean) -> EAvL
    225:261:void downloadLanguage(java.lang.String) -> EKHT
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> lUHC
    315:315:java.io.File getFileForLanguage(java.lang.String) -> XJMl
    320:332:void writeDefaults() -> XIqg
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> wCdn
    263:263:void access$1(react.controller.LanguageController) -> wCdn
react.controller.LanguageController$1 -> DHJG$1:
    react.controller.LanguageController this$0 -> ohEP
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> DHJG$2:
    react.controller.LanguageController this$0 -> ohEP
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> wCdn
react.controller.LanguageController$2$1 -> DHJG$2$1:
    react.controller.LanguageController$2 this$1 -> braM
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> wCdn
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> wCdn
    121:121:void onDownloadStarted(react.gnet.download.Download) -> wCdn
    126:128:void onDownloadFinished(react.gnet.download.Download) -> rpKc
    134:134:void onDownloadFailed(react.gnet.download.Download) -> TpeI
react.controller.LanguageController$3 -> DHJG$3:
    react.controller.LanguageController this$0 -> ohEP
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> DHJG$3$1:
    react.controller.LanguageController$3 this$1 -> ymQi
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> DHJG$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> XTAu
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> DHJG$4:
    react.controller.LanguageController this$0 -> ohEP
    java.io.File val$dld -> kJVd
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> wCdn
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> wCdn
    245:245:void onDownloadStarted(react.gnet.download.Download) -> wCdn
    250:251:void onDownloadFinished(react.gnet.download.Download) -> rpKc
    257:257:void onDownloadFailed(react.gnet.download.Download) -> TpeI
react.controller.MonitorController -> kQiU:
    int maxCooldown -> FqQb
    react.api.TitleMonitor titleMonitor -> GcSS
    react.glang.GMap posts -> TrId
    react.slate.PhantomSlate sb -> SoHs
    boolean ready -> oMuI
    36:36:void <clinit>() -> <clinit>
    42:47:void <init>() -> <init>
    52:87:void start() -> start
    91:91:react.slate.PhantomSlate constructActionLogBoard() -> JcNK
    96:114:void toggleActionLog(org.bukkit.entity.Player) -> NfcV
    118:136:void toggleMonitoring(org.bukkit.entity.Player) -> DHEP
    141:151:void stop() -> stop
    155:174:void constructMonitor() -> HKdy
    178:183:float calcVolume(react.api.ReactPlayer) -> wCdn
    188:188:boolean canMonitor(org.bukkit.entity.Player) -> qdWH
    193:193:boolean canActionLog(org.bukkit.entity.Player) -> IFSH
    198:203:boolean isMonitoring(org.bukkit.entity.Player) -> EAvL
    208:213:boolean isActionLogging(org.bukkit.entity.Player) -> EKHT
    218:222:void startMonitoring(org.bukkit.entity.Player) -> lUHC
    226:237:void stopMonitoring(org.bukkit.entity.Player) -> XJMl
    241:246:void startActionLogging(org.bukkit.entity.Player) -> wCeF
    250:261:void stopActionLogging(org.bukkit.entity.Player) -> HBno
    267:267:void tick() -> tick
    271:274:void changePost(react.api.ReactPlayer) -> rpKc
    278:290:void processPlayer(react.api.ReactPlayer) -> TpeI
    295:295:void handleActionLog(org.bukkit.entity.Player) -> aUIF
    299:323:void handleTriggers(react.api.ReactPlayer) -> ooRp
    327:366:void handleScrolling(react.api.ReactPlayer) -> Elil
    370:398:void handleShifting(react.api.ReactPlayer) -> RroX
    402:424:void handlePosting(react.api.ReactPlayer) -> NfcV
    428:446:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> wCdn
    451:465:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> wCdn
    470:477:void tickMonitor(react.api.ReactPlayer) -> DHEP
    481:481:react.api.TitleMonitor getTitleMonitor() -> BBDi
    487:496:void on(org.bukkit.event.player.PlayerJoinEvent) -> wCdn
    501:510:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> wCdn
    515:527:void onTick() -> iBqf
    531:553:void updateActionBoard() -> NDej
    558:558:java.lang.String getTickName() -> skCU
    89:89:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> wCdn
    39:39:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> wCdn
    40:40:void access$2(react.controller.MonitorController,boolean) -> wCdn
    40:40:boolean access$3(react.controller.MonitorController) -> rpKc
    39:39:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> TpeI
react.controller.MonitorController$1 -> kQiU$1:
    react.controller.MonitorController this$0 -> KfpV
    1:67:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    72:85:void run() -> run
react.controller.MonitorController$2 -> kQiU$2:
    react.controller.MonitorController this$0 -> KfpV
    1:531:void <init>(react.controller.MonitorController) -> <init>
    536:551:void run() -> run
react.controller.PhysicsController -> avob:
    react.glang.GMap samples -> JBJs
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> IFSH
    51:52:void onHopper(org.bukkit.Chunk) -> EAvL
    56:57:void onFluid(org.bukkit.Chunk) -> EKHT
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> wCdn
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> wCdn
    80:91:void onTick() -> iBqf
    96:96:java.lang.String getTickName() -> skCU
    101:101:react.glang.GMap getSamples() -> kYyX
react.controller.PlayerController -> hbRm:
    react.glang.GList players -> UIyg
    react.glang.GSet save -> XmVp
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> paSk
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> wCdn
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> iupr
    113:113:react.glang.GList getPlayers() -> CLyO
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> wCdn
react.controller.PlayerController$1 -> hbRm$1:
    react.controller.PlayerController this$0 -> kuMw
    react.glang.GList val$toSave -> IOhj
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> MRdA:
    react.rai.IRAI rai -> tUUP
    boolean raiEnabled -> vJYb
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    20:20:react.rai.IRAI access$0(react.controller.RAIController) -> wCdn
react.controller.RAIController$1 -> MRdA$1:
    react.controller.RAIController this$0 -> TrLY
    1:48:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> LPAb:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> TpeI
react.controller.ReactServerInfo -> YgHf:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> NVKI
    27:27:int dgetGameProtocol() -> tmhc
    33:33:java.lang.String dgetGameVersion() -> yRdf
    39:39:java.lang.String dgetReactVersion() -> CUip
    45:45:int dgetMaxPlayers() -> RQUV
    51:58:react.glang.GList dgetConnectedPlayers() -> sasx
    64:64:int dgetViewDistance() -> kcNk
    70:70:int dgetGamePort() -> yBCy
    76:76:java.lang.String dgetGameAddress() -> oMWs
    82:89:react.glang.GList dgetRemotePlugins() -> Fots
    95:102:react.glang.GList dgetWorlds() -> LywX
    108:108:react.glang.GList dgetActions() -> ieXx
    114:114:react.glang.GList dgetSamplers() -> rpSp
react.controller.RedstoneController -> KDLx:
    react.glang.GSet ignore -> OQYA
    react.glang.GSet frozen -> yJoK
    react.glang.GMap queue -> JBIe
    react.glang.GMap freezeTimes -> GJAv
    int redstonePerTick -> oxhw
    int redstonePerSecond -> DHjS
    react.gmath.Average aRST -> dxiU
    react.gmath.Average aRSS -> dxjU
    react.gmath.Average aRSMS -> JBKe
    boolean firstTickList -> cJmy
    long firstTick -> MeBO
    long lastTick -> dosS
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> Elil
    95:101:void tick() -> tick
    105:113:void checkChunks() -> LWsE
    117:134:void checkChunk(org.bukkit.Chunk) -> RroX
    138:144:void queue(org.bukkit.block.Block) -> Elil
    148:148:boolean isFrozen(org.bukkit.Chunk) -> NfcV
    153:154:void freeze(org.bukkit.Chunk) -> DHEP
    158:165:void flushTickList() -> bhqn
    169:179:void tickNextTickList() -> MlWc
    183:189:void unfreeze(org.bukkit.Chunk) -> qdWH
    193:200:void freeze(org.bukkit.Chunk,long) -> wCdn
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> wCdn
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> wCdn
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> wCdn
    246:246:react.glang.GSet getIgnore() -> RQSm
    251:251:react.glang.GSet getFrozen() -> kQiU
    256:256:react.glang.GMap getQueue() -> avob
    261:261:react.glang.GMap getFreezeTimes() -> hbRm
    266:266:int getRedstonePerTick() -> yJTK
    271:271:int getRedstonePerSecond() -> ghDE
    276:276:react.gmath.Average getaRST() -> uqKt
    281:281:react.gmath.Average getaRSS() -> WqgJ
    286:286:react.gmath.Average getaRSMS() -> hYdW
    291:291:boolean isFirstTickList() -> fJkb
    296:296:long getFirstTick() -> WhtB
    301:301:long getLastTick() -> lemx
react.controller.RemoteController -> WFoA:
    react.remote.server.RemoteServer remoteServer -> JSMT
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> aDPE
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> wCdn
react.controller.RemoteController$1 -> WFoA$1:
    react.controller.RemoteController this$0 -> IOiT
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> WFoA$2:
    react.controller.RemoteController this$0 -> IOiT
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> biVJ
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> tdwG
react.controller.SampleController -> NDdv:
    react.glang.GMap samplers -> cugN
    react.surge.server.SuperSampler ss -> dMuc
    int cd -> RlGJ
    28:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> xqcx
    69:74:void restartSuperSampler() -> GYfj
    78:79:void registerSampler(react.api.ISampler) -> TpeI
    83:83:react.api.ISampler getSampler(java.lang.String) -> wCeF
    88:131:void constructSamplers() -> aoCj
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> pYKq
    187:209:void onTick() -> iBqf
    214:214:java.lang.String getTickName() -> skCU
    219:219:react.glang.GMap getSamplers() -> KwUh
    224:224:react.surge.server.SuperSampler getSs() -> xPAt
    229:229:int getCd() -> yJTG
    234:241:react.glang.GList getSamplerNames() -> vRLX
    25:25:react.surge.server.SuperSampler access$0(react.controller.SampleController) -> wCdn
react.controller.SampleController$1 -> NDdv$1:
    react.controller.SampleController this$0 -> NyKx
    1:140:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> NDdv$2:
    react.controller.SampleController this$0 -> NyKx
    1:152:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> XIqg:
    java.lang.String ipa -> aELU
    react.glang.GList failures -> pHfc
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> HBno
    41:74:void checkForIP() -> jqLU
    78:91:void scan(java.lang.Runnable) -> wCdn
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> XIqg$1:
    react.controller.SecurityController this$0 -> lDkC
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> XIqg$2:
    java.lang.String val$ip -> cBaL
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> XIqg$3:
    java.lang.Thread val$t -> GRRp
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> JcNK:
    react.glang.GMap etl -> urIk
    react.glang.GMap ttl -> MScl
    20:20:void <init>() -> <init>
    28:44:void start() -> start
    49:62:void stop() -> stop
    69:76:void on(org.bukkit.event.world.WorldLoadEvent) -> wCdn
    83:90:void on(org.bukkit.event.world.WorldUnloadEvent) -> wCdn
    96:96:void tick() -> tick
    100:112:void witholdWorld(org.bukkit.World) -> NfcV
    116:128:void releaseWorld(org.bukkit.World) -> DHEP
    132:144:double getUniversalEntityTick() -> lfQJ
    149:161:double getUniversalEntityLimit() -> GsWn
    166:178:double getUniversalTileLimit() -> WGQk
    183:195:double getUniversalTileTick() -> nAcK
    200:207:double getUniversalEntityDroppedTicks() -> XSFK
    212:219:double getUniversalTileDroppedTicks() -> KncI
    224:225:void setEntityTickLimit(org.bukkit.World,double) -> wCdn
    229:230:void setTileTickLimit(org.bukkit.World,double) -> rpKc
    234:234:double getEntityTickLimit(org.bukkit.World) -> qdWH
    239:239:double getTileTickLimit(org.bukkit.World) -> IFSH
    244:244:double getLastEntityTick(org.bukkit.World) -> EAvL
    249:249:double getLastTileTick(org.bukkit.World) -> EKHT
    254:254:double getEntityDroppedTicks(org.bukkit.World) -> lUHC
    259:259:double getTileDroppedTicks(org.bukkit.World) -> XJMl
    264:281:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> wCdn
react.controller.SpikeController -> HKdy:
    react.glang.GMap spikes -> sAOY
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> iBqf
    111:111:java.lang.String getTickName() -> skCU
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> ghCa
    128:160:void whoFuckingDidThis(react.glang.Callback) -> wCdn
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> wCdn
react.controller.SpikeController$1 -> HKdy$1:
    react.controller.SpikeController this$0 -> KENB
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> HKdy$1$1:
    react.controller.SpikeController$1 this$1 -> xYOg
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> HKdy$2:
    react.controller.SpikeController this$0 -> KENB
    react.glang.GMap val$vv -> RJAr
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> HKdy$3:
    react.controller.SpikeController this$0 -> KENB
    java.lang.Thread val$t -> GRRp
    react.glang.Callback val$callback -> fSyl
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> BBDi:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.event.ReactEvent -> iBqf:
    org.bukkit.event.HandlerList handlers -> vSHr
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> NDej:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> skCU:
    react.event.ScrollDirection direction -> lfmV
    boolean cancellled -> wxOT
    int amount -> CVhb
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> Suyn
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> rNNv
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> kYyX:
    react.event.ScrollDirection DOWN -> toFN
    react.event.ScrollDirection UP -> kSJI
    react.event.ScrollDirection[] ENUM$VALUES -> EwBF
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.gbench.Profiler -> CLyO:
    long nanos -> AbEI
    long startNano -> EvaK
    long millis -> LGol
    long startMillis -> Qpql
    double time -> BJtN
    boolean profiling -> ineo
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> HBno
    78:78:double getTicks() -> RIDd
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> bGRE
    93:93:double getHours() -> qAyk
    98:98:double getMilliseconds() -> GYei
    103:103:long getNanoseconds() -> PKOQ
    108:108:long getNanos() -> uEut
    113:113:long getStartNano() -> xPAV
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> OHKm
    128:128:double getTime() -> rgeF
    133:133:boolean isProfiling() -> ryFp
react.gconcurrent.A -> NVKI:
    react.gconcurrent.ParallelPoolManager mgr -> mPbQ
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> NVKI$1:
    react.gconcurrent.A this$0 -> GRVK
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> tmhc:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> yRdf:
    react.gconcurrent.QueueMode mode -> RATL
    react.glang.GList threads -> IPKd
    int next -> AXtY
    int threadCount -> hJDU
    java.util.Queue squeue -> agRU
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> KpDf
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> AafA
    22:23:void syncQueue(react.gconcurrent.Execution) -> wCdn
    long getNanoGate() -> lDQP
    29:51:void tickSyncQueue() -> RaxL
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> Vvuc
    102:109:int getTotalQueueSize() -> rouU
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> rpKc
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> xPDg
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> WiWl
    161:188:void updateThreadInformation() -> dUjw
    192:224:react.gconcurrent.ParallelThread nextThread() -> iKgh
    229:235:void createThreads(int) -> aUIF
    239:239:react.gconcurrent.QueueMode getMode() -> nIvB
    244:244:int getNext() -> hIFI
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> yRey
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> MIwl
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> srvx
react.gconcurrent.ParallelThread -> CUip:
    java.util.Queue queue -> EfCG
    react.gconcurrent.ThreadInformation info -> KpDf
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> IFSH
    63:70:void execute(react.gconcurrent.Execution) -> TpeI
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> rpKc
    92:92:java.util.Queue getQueue() -> qlqc
    97:97:react.gconcurrent.ThreadInformation getInfo() -> iTXx
react.gconcurrent.QueueMode -> RQUV:
    react.gconcurrent.QueueMode ROUND_ROBIN -> WPcW
    react.gconcurrent.QueueMode SMALLEST -> NxmF
    react.gconcurrent.QueueMode[] ENUM$VALUES -> badK
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> sasx:
    react.gconcurrent.ParallelPoolManager mgr -> mPbQ
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> sasx$1:
    react.gconcurrent.S this$0 -> YMwe
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> kcNk:
    long tick -> hQtG
    long atick -> qwAv
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> yBCy:
    double ticksPerSecond -> xisN
    int queuedSize -> FWcf
    boolean processing -> yJsO
    double utilization -> UAlP
    react.gmath.Average ticksPerSecondAverage -> xjTC
    long tick -> hQtG
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> hkIS
    33:35:void setTicksPerSecond(double) -> EAvL
    39:39:int getQueuedSize() -> QhGi
    44:45:void setQueuedSize(int) -> paSk
    49:49:boolean isProcessing() -> kROV
    54:55:void setProcessing(boolean) -> EKHT
    59:59:double getUtilization() -> yAdT
    64:65:void setUtilization(double) -> EKHT
    69:69:double getTicksPerSecondAverage() -> lncS
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> qlqM
    89:89:int getId() -> getId
react.gformat.F -> oMWs:
    java.text.NumberFormat NF -> ySdL
    java.text.DecimalFormat DF -> APcV
    java.lang.String[] NAMES -> htWX
    java.math.BigInteger THOUSAND -> lfqF
    java.util.NavigableMap MAP -> DtAo
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> aUIF
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> wCdn
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> wCdn
    201:221:java.lang.String timeLong(long,int) -> wCdn
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> TpeI
    236:236:java.lang.String b(double) -> lUHC
    241:258:java.lang.String b(java.math.BigInteger) -> wCdn
    263:267:void instantiate() -> wDNt
    279:279:java.lang.String fileSize(long) -> ooRp
    292:292:java.lang.String memSize(long) -> Elil
    305:306:java.lang.String stamp(long) -> RroX
    322:349:java.lang.String ofSize(long,int) -> rpKc
    363:368:java.lang.String trim(java.lang.String,int) -> rpKc
    381:401:java.lang.String cname(java.lang.String) -> paSk
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> NfcV
    459:477:java.lang.String memx(long) -> DHEP
    491:492:java.lang.String f(long) -> qdWH
    504:505:java.lang.String f(int) -> iupr
    519:528:java.lang.String f(double,int) -> rpKc
    544:553:java.lang.String fd(double,int) -> TpeI
    567:576:java.lang.String f(float,int) -> wCdn
    587:587:java.lang.String f(double) -> XJMl
    598:598:java.lang.String f(float) -> wCdn
    613:613:java.lang.String pc(double,int) -> ooRp
    628:628:java.lang.String pc(float,int) -> rpKc
    641:641:java.lang.String pc(double) -> wCeF
    654:654:java.lang.String pc(float) -> rpKc
    670:670:java.lang.String pc(int,int,int) -> wCdn
    684:684:java.lang.String pc(int,int) -> TpeI
    700:700:java.lang.String pc(long,long,int) -> wCdn
    714:714:java.lang.String pc(long,long) -> ooRp
    726:726:java.lang.String msSeconds(long) -> IFSH
    740:740:java.lang.String msSeconds(long,int) -> TpeI
    752:752:java.lang.String nsMs(long) -> EAvL
    766:766:java.lang.String nsMs(long,int) -> ooRp
    780:780:java.lang.String nsMsd(long,int) -> Elil
react.glang.AccessCallback -> Fots:
    java.lang.Object get() -> get
react.glang.Adapter -> LywX:
    java.lang.Object adapt(java.lang.Object) -> RroX
    java.lang.Object onAdapt(java.lang.Object) -> NfcV
react.glang.Callback -> ieXx:
    java.lang.Object t -> PmpY
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> wCdn
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> rpSp:
    double i -> tDSx
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> HBno
react.glang.FinalFloat -> yJTK:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> TpeI
react.glang.FinalInteger -> ghDE:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> fdWH
react.glang.FinalLong -> uqKt:
    long i -> ooyO
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> EKHT
react.glang.FinalString -> WqgJ:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> hYdW:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> RroX
    java.lang.Object onAdapt(java.lang.Object) -> NfcV
react.glang.GBiset -> aDPE:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> MdgQ
    java.lang.Object b -> qmnb
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> Edbj
    53:54:void setA(java.lang.Object) -> DHEP
    63:63:java.lang.Object getB() -> DGlq
    73:74:void setB(java.lang.Object) -> qdWH
react.glang.GList -> biVJ:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> ooRp
    45:52:react.glang.GList grepDistance(int,int) -> Elil
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> rpKc
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> EeDO
    188:190:react.glang.GList shuffleCopy() -> esAQ
    198:199:void shuffle() -> pXlK
    210:236:react.glang.GList split() -> fvBx
    248:248:boolean hasIndex(int) -> vjsv
    258:259:java.lang.Object pickRandom() -> bFri
    270:277:react.glang.GList stringList() -> iLGj
    288:292:void forEach(react.glang.Callback) -> rpKc
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> aehQ
    336:336:react.glang.GList cropFrom(int) -> uxrd
    341:373:react.glang.GList split(int) -> DHCh
    389:389:react.glang.GList cropTo(int) -> KfIx
    406:416:react.glang.GList crop(int,int) -> RroX
    427:431:react.glang.GList removeDuplicates() -> xhsr
    442:446:void removeAll(java.lang.Object) -> IFSH
    455:455:boolean hasDuplicates() -> yuHl
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> RHek
    484:490:void push(java.lang.Object,int) -> wCdn
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> EAvL
    528:532:void add(java.util.List) -> wCdn
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> UbpX
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> BAhK
    626:627:react.glang.GList qdel(java.lang.Object) -> EKHT
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> sryq
    662:669:java.lang.Object popLast() -> QoyB
    674:683:java.lang.Object popRandom() -> AGWn
react.glang.GListAdapter -> tdwG:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> rpKc
    java.lang.Object onAdapt(java.lang.Object) -> NfcV
react.glang.GMap -> xqcx:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> uqPi
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> wCdn
    64:81:react.glang.GMap flip() -> AaJf
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> wCdn
    121:121:react.glang.GList k() -> vjsv
    131:131:react.glang.GSet kset() -> eHOW
    141:141:react.glang.GList v() -> qKRJ
    151:151:react.glang.GSet vset() -> miXp
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> rpKc
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> NfcV
    209:219:react.glang.GMap removeDuplicateValues() -> pbAl
    233:242:void put(react.glang.GList,react.glang.GList) -> wCdn
    251:267:react.glang.GList sortK() -> FFFo
    277:293:react.glang.GList sortV() -> WrKR
react.glang.GQuadraset -> GYfj:
    java.lang.Object a -> MdgQ
    java.lang.Object b -> qmnb
    java.lang.Object c -> AQFK
    java.lang.Object d -> IFyK
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> Edbj
    25:26:void setA(java.lang.Object) -> DHEP
    30:30:java.lang.Object getB() -> DGlq
    35:36:void setB(java.lang.Object) -> qdWH
    40:40:java.lang.Object getC() -> DHPw
    45:46:void setC(java.lang.Object) -> lUHC
    50:50:java.lang.Object getD() -> VTsy
    55:56:void setD(java.lang.Object) -> XJMl
react.glang.GSet -> aoCj:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> pYKq:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> MdgQ
    java.lang.Object b -> qmnb
    java.lang.Object c -> AQFK
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> Edbj
    26:27:void setA(java.lang.Object) -> DHEP
    31:31:java.lang.Object getB() -> DGlq
    36:37:void setB(java.lang.Object) -> qdWH
    41:41:java.lang.Object getC() -> DHPw
    46:47:void setC(java.lang.Object) -> lUHC
react.gmath.Average -> KwUh:
    double[] values -> VENd
    double average -> clum
    boolean dirty -> NWIu
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> aUIF
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> EvHd
react.gmath.DoubleArrayUtils -> xPAt:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> wCdn
    17:19:void wrapRight(double[]) -> wCdn
    23:27:void fill(double[],double) -> fill
react.gmath.M -> yJTG:
    int precision -> wgPC
    int modulus -> pkKq
    float[] sin -> Uton
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> wCdn
    31:36:boolean r(java.lang.Double) -> rpKc
    51:51:double tps(long,int) -> RroX
    63:63:double ticksFromNS(long) -> lUHC
    75:101:java.lang.String toRoman(int) -> OqvB
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> NfcV
    144:216:int fromRoman(java.lang.String) -> iupr
    226:226:long ns() -> KoIW
    236:236:long ms() -> rxgb
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> rpKc
    333:333:float sinLookup(int) -> kcEk
react.gnet.client.Client -> vRLX:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> xbAw
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> wCdn
    74:74:react.gnet.packet.PacketHandler getHandler() -> VMEk
react.gnet.client.IClient -> jqLU:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> wCdn
    react.gnet.packet.PacketHandler getHandler() -> VMEk
react.gnet.download.Download -> lfQJ:
    react.gnet.download.DownloadState state -> Gbuv
    react.gnet.download.DownloadType type -> OsbB
    react.gnet.download.DownloadStatus status -> rWcO
    react.gnet.download.DownloadMonitor monitor -> qnSH
    java.net.URL url -> url
    java.io.File file -> wUpm
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> jqQN
    92:92:react.gnet.download.DownloadType getType() -> APIE
    97:97:react.gnet.download.DownloadStatus getStatus() -> QNVi
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> IXBH
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> GsWn:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> wCdn
    void onDownloadStarted(react.gnet.download.Download) -> wCdn
    void onDownloadFinished(react.gnet.download.Download) -> rpKc
    void onDownloadFailed(react.gnet.download.Download) -> TpeI
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> wCdn
react.gnet.download.DownloadState -> WGQk:
    react.gnet.download.DownloadState IDLE -> GcYj
    react.gnet.download.DownloadState DOWNLOADING -> qfBQ
    react.gnet.download.DownloadState FAILED -> tLfs
    react.gnet.download.DownloadState FINISHED -> HnmW
    react.gnet.download.DownloadState[] $VALUES -> jPKh
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> nAcK:
    long bytesDownloaded -> kmAd
    long bytesTotal -> FOUb
    long bytesPerSecond -> uaMB
    long timeElapsed -> YEjO
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> hQWv
    25:25:long getBytesDownloaded() -> AWwh
    30:31:void setBytesDownloaded(long) -> XJMl
    35:35:long getBytesTotal() -> VLeA
    40:41:void setBytesTotal(long) -> wCeF
    45:45:long getBytesPerSecond() -> rpXD
    50:51:void setBytesPerSecond(long) -> HBno
    55:55:long getTimeElapsed() -> MSMB
    60:61:void setTimeElapsed(long) -> aUIF
react.gnet.download.DownloadType -> XSFK:
    react.gnet.download.DownloadType DETERMINATE -> aNCJ
    react.gnet.download.DownloadType INDETERMINATE -> KESW
    react.gnet.download.DownloadType[] $VALUES -> SLjL
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> KncI:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> INmj
    java.lang.String getPacketName() -> AaLH
react.gnet.packet.IncompatablePacketException -> ghCa:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> Suyn:
    react.gnet.packet.PacketBinding SERVER_BOUND -> BBhg
    react.gnet.packet.PacketBinding CLIENT_BOUND -> ejnW
    react.gnet.packet.PacketBinding[] $VALUES -> BSjV
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> rNNv:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> RIDd:
    react.glang.GList accept -> WGsQ
    react.gnet.packet.PacketBinding side -> xacx
    react.gnet.streams.OSS out -> Gkhm
    react.gnet.streams.ISS in -> xYTR
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> wCdn
    28:34:void accept(react.gnet.packet.IPacket) -> rpKc
    38:46:react.gnet.packet.IPacket findPacket(int) -> srlg
    51:66:react.gnet.packet.IPacket read() -> brIb
    71:77:void write(react.gnet.packet.IPacket) -> TpeI
react.gnet.packet.UnhandledPacketException -> bGRE:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> qAyk:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> VMEk
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> ooRp
react.gnet.server.Server -> GYei:
    int port -> port
    java.net.ServerSocket socket -> gyfM
    react.gnet.packet.PacketHandler handler -> xbAw
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> VMEk
    37:84:void run() -> run
    88:91:void pstart() -> VLcN
    95:96:void pstop() -> fCAJ
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> ooRp
react.gnet.streams.ISS -> PKOQ:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> LiwG
    boolean built -> Pmrb
    byte[] readBuffer -> baeG
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> VUGm
    64:72:react.glang.GList readStringList() -> Qowf
    77:85:react.glang.GList readDoubleList() -> tCXa
    90:98:react.glang.GList readLongList() -> xaFh
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> wCdn
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> wCdn
    136:137:react.gnet.streams.ISS gzip() -> uqNw
    142:147:void build() -> MIyN
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> rpKc
    435:436:void close() -> close
react.gnet.streams.OSS -> uEut:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> ohKV
    react.gnet.streams.StreamBuilder bu -> LiwG
    boolean built -> Pmrb
    byte[] writeBuffer -> cCGD
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> LynL
    41:42:react.gnet.streams.OSS gzip(int) -> bFhF
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> rpKc
    53:58:void build() -> MIyN
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> DHEP
    102:108:void writeDoubleList(react.glang.GList) -> qdWH
    112:118:void writeLongList(react.glang.GList) -> IFSH
    122:128:void writeStreamableList(react.glang.GList) -> EAvL
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> TNme
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> TpeI
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> xPAV:
    react.glang.GList constructors -> kuPj
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> wCdn
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> wCdn
    49:50:void bind(react.gnet.streams.StreamConstructor) -> wCdn
    54:55:void bindGZIP(int) -> IWRq
    59:60:void bindGZIP() -> LOfy
    64:65:void bindCipher(javax.crypto.Cipher) -> TpeI
    69:70:void bindBuffer(int) -> tuns
    74:75:void bindBuffer() -> eXno
react.gnet.streams.StreamConstructor -> OHKm:
    java.io.InputStream constructInput(java.io.InputStream) -> wCdn
    java.io.OutputStream constructOutput(java.io.OutputStream) -> wCdn
react.gnet.streams.constructors.BufferedStreamConstructor -> rgeF:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> rpKc
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> rpKc
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> wCdn
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> wCdn
react.gnet.streams.constructors.CipherStreamConstructor -> ryFp:
    javax.crypto.Cipher cipher -> MKXW
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> TpeI
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> TpeI
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> wCdn
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> wCdn
react.gnet.streams.constructors.GZipStreamConstructor -> lDQP:
    int compressionLevel -> Utqd
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> ooRp
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> ooRp
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> wCdn
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> wCdn
react.gnet.streams.overlays.CGZIPInputStream -> RaxL:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> Vvuc:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> rouU:
    void toBytes(react.gnet.streams.OSS) -> wCdn
    void fromBytes(react.gnet.streams.ISS) -> wCdn
react.graph.ColossalView -> xPDg:
    react.papyrus.BufferedFrame view -> JmFE
    react.glang.GMap buffers -> sbyA
    react.glang.GMap graphs -> IYAR
    double level -> CEmG
    double targetLevel -> uPNH
    int maxX -> IOno
    int maxY -> fDBI
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> WaIV
    51:77:void render() -> GPxm
    81:98:void scroll(int) -> tCKc
    102:112:void recompile() -> brLk
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> wCdn
    122:122:react.papyrus.BufferedFrame getView() -> gEfT
    127:127:react.glang.GMap getBuffers() -> NDmx
    132:132:react.glang.GMap getGraphs() -> mFwU
    137:137:double getLevel() -> KDVc
    142:142:double getTargetLevel() -> qmVm
    147:147:int getMaxX() -> dEMt
    152:152:int getMaxY() -> FhLQ
react.graph.ColossalView$Builder -> xPDg$wCdn:
    react.glang.GList graphs -> pIOU
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> wCdn
    171:191:react.graph.ColossalView compute() -> vARF
react.graph.CubicleIterator -> WiWl:
    int[][] mapping -> UBQP
    int xCubes -> UcsJ
    int yCubes -> dgmk
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> UshF
    47:130:void insert(react.graph.GraphSize,int) -> wCdn
    134:145:void print() -> print
react.graph.GraphSampleLine -> dUjw:
    double lx -> slJV
    double ly -> OkSl
    react.api.ISampler sampler -> xHTj
    react.graph.IFormatter formatter -> QNvM
    byte graphColor -> aofv
    byte backgroundColor -> Bdku
    byte borderColor -> xQFQ
    byte textColor -> OHof
    int ticksLeftTitle -> qnSx
    int ticksOutTitle -> Ulbs
    double nextPoint -> wDoy
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> rNGT
    51:183:void onRender(react.papyrus.BufferedFrame) -> wCdn
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> rpKc
    226:254:int getHue(int,int,int) -> TpeI
    259:281:void scaleFor(react.glang.GList) -> EKHT
    285:285:react.graph.IFormatter getFormatter() -> xWgw
    290:291:void setFormatter(react.graph.IFormatter) -> wCdn
    295:295:byte getGraphColor() -> OQCp
    300:301:void setGraphColor(byte) -> wCdn
    305:305:byte getBackgroundColor() -> uNnr
    310:311:void setBackgroundColor(byte) -> rpKc
    315:315:byte getBorderColor() -> baKQ
    320:321:void setBorderColor(byte) -> TpeI
    325:325:byte getTextColor() -> TqUA
    330:331:void setTextColor(byte) -> ooRp
    335:335:react.api.ISampler getSampler() -> prce
react.graph.GraphSize -> iKgh:
    react.graph.GraphSize WIDE -> mivq
    react.graph.GraphSize FULL -> NEjt
    react.graph.GraphSize SQUARE -> vuSS
    int[] $SWITCH_TABLE$react$graph$GraphSize -> nKWu
    react.graph.GraphSize[] ENUM$VALUES -> DkRu
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> ECEx
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> lwXm
react.graph.GraphText -> nIvB:
    java.lang.String text -> text
    byte fontColor -> toMN
    byte backgroundColor -> Bdku
    boolean wrote -> eHlm
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> wCdn
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> bFxR
    68:69:void setFontColor(byte) -> Elil
    73:73:byte getBackgroundColor() -> uNnr
    78:79:void setBackgroundColor(byte) -> rpKc
react.graph.GraphingInstance -> hIFI:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> pIOU
    react.graph.ColossalView view -> xGsJ
    react.papyrus.Papyrus papyrus -> KMdR
    react.papyrus.IRenderer renderer -> wpDm
    boolean mapping -> WHCo
    react.glang.GList msgs -> KgVp
    react.surge.sched.Task waiter -> mbFv
    react.surge.sched.Task waiter2 -> lVRm
    int shift -> MKYx
    boolean notif -> dWMQ
    47:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> wCdn
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> wCdn
    138:142:void send(java.lang.String) -> fdWH
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> wCdn
    153:165:void on(react.event.ReactScrollEvent) -> wCdn
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> wCdn
    179:187:void destroy() -> destroy
    191:200:void toggle() -> VUWs
    204:205:void setGraphs(react.glang.GList) -> lUHC
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> afXh
    243:259:void compile() -> KoKb
    40:40:boolean access$0(react.graph.GraphingInstance) -> wCdn
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> rpKc
    45:45:boolean access$2(react.graph.GraphingInstance) -> TpeI
    45:45:void access$3(react.graph.GraphingInstance,boolean) -> wCdn
    44:44:int access$4(react.graph.GraphingInstance) -> ooRp
    44:44:void access$5(react.graph.GraphingInstance,int) -> wCdn
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> Elil
react.graph.GraphingInstance$1 -> hIFI$1:
    react.graph.GraphingInstance this$0 -> VwwH
    org.bukkit.entity.Player val$player -> qvcl
    1:51:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> hIFI$2:
    react.graph.GraphingInstance this$0 -> VwwH
    1:76:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> hIFI$3:
    react.graph.GraphingInstance this$0 -> VwwH
    1:106:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> wCdn
react.graph.IFormatter -> yRey:
    java.lang.String from(double) -> paSk
react.graph.IGraph -> MIwl:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> YVPd
    long getTimeViewport() -> jqRv
    void render(react.papyrus.BufferedFrame) -> TpeI
    double getMax() -> getMax
    void setMax(double) -> iupr
react.graph.NormalGraph -> srvx:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> apGH
    long timeViewport -> OIOm
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> YVPd
    35:35:long getTimeViewport() -> jqRv
    41:42:void render(react.papyrus.BufferedFrame) -> TpeI
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> iupr
    void onRender(react.papyrus.BufferedFrame) -> wCdn
react.graph.PlotBoard -> qlqc:
    react.glang.GMap plots -> gFbt
    int maxRecordings -> rpua
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> ESft
    33:33:long getAccurateTimeSpan() -> HwCr
    38:50:long getMedian(long,long) -> Elil
    55:55:long getMinimumAccuracyRange() -> QEhL
    60:70:double getMaxValue() -> VTwN
    75:85:double getMinValue() -> bPJO
    90:90:react.glang.GList sort(react.glang.GMap) -> rpKc
    95:105:long earilestRecording() -> qScU
    110:120:long latestRecording() -> fufj
    125:126:void reduceBefore(long) -> paSk
    130:148:void reduceBetween(long,long) -> RroX
    152:152:boolean before(long,long) -> NfcV
    157:157:boolean after(long,long) -> DHEP
    162:162:boolean within(long,long,long) -> wCdn
    167:177:react.glang.GMap getBetween(long,long) -> qdWH
    182:184:void plot(long,double) -> wCdn
    188:188:boolean hasAt(long) -> iupr
    193:193:double getAt(long) -> fdWH
    198:198:int getSize() -> getSize
react.graph.Point -> iTXx:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> hkIS:
    int iid -> rWgV
    react.graph.IGraph graph -> ptDv
    react.graph.GraphSize size -> VUva
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> mFum
    24:25:void setGraph(react.graph.IGraph) -> wCdn
    29:29:react.graph.GraphSize getSize() -> pbBl
    34:35:void setSize(react.graph.GraphSize) -> wCdn
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> QhGi:
    react.graph.RenderMaxType UNLIMITED -> TYBa
    react.graph.RenderMaxType LIMITED -> xHVy
    react.graph.RenderMaxType[] ENUM$VALUES -> JmHO
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> kROV:
    java.lang.String CRLF -> dVnc
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> vjsv
    162:198:java.lang.String toString(react.json.JSONObject) -> rpKc
react.json.HTTPTokener -> yAdT:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> lncS:
    java.util.ArrayList myArrayList -> EwJc
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> wCdn
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> qKDK
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> VCfX
    394:399:react.json.JSONObject getJSONObject(int) -> xWgw
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> aehQ
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> YMOn
    515:515:boolean optBoolean(int) -> jyTN
    533:536:boolean optBoolean(int,boolean) -> rpKc
    551:551:double optDouble(int) -> rNGT
    569:572:double optDouble(int,double) -> wCdn
    587:587:int optInt(int) -> NEAD
    605:608:int optInt(int,int) -> DHEP
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> rpKc
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> wCdn
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> wCdn
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> wCdn
    722:723:react.json.JSONArray optJSONArray(int) -> KKvs
    737:738:react.json.JSONObject optJSONObject(int) -> Sdrh
    752:752:long optLong(int) -> ssPe
    770:773:long optLong(int,long) -> wCdn
    788:788:java.lang.String optString(int) -> HKac
    803:804:java.lang.String optString(int,java.lang.String) -> wCdn
    816:817:react.json.JSONArray put(boolean) -> lUHC
    830:831:react.json.JSONArray put(java.util.Collection) -> wCdn
    845:848:react.json.JSONArray put(double) -> fdWH
    860:861:react.json.JSONArray put(int) -> DrYq
    873:874:react.json.JSONArray put(long) -> vjsv
    887:888:react.json.JSONArray put(java.util.Map) -> wCdn
    902:903:react.json.JSONArray put(java.lang.Object) -> wCeF
    921:922:react.json.JSONArray put(int,boolean) -> TpeI
    939:940:react.json.JSONArray put(int,java.util.Collection) -> wCdn
    958:959:react.json.JSONArray put(int,double) -> rpKc
    977:978:react.json.JSONArray put(int,int) -> qdWH
    996:997:react.json.JSONArray put(int,long) -> rpKc
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> wCdn
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> wCdn
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> HBno
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> wCdn
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> wCdn
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> wCdn
react.json.JSONException -> qlqM:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> kBQw
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> wDNt:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> wCdn
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> uxrd
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> wCdn
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> rpKc
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> vjsv
    379:456:java.lang.String toString(react.json.JSONArray) -> rpKc
    472:552:java.lang.String toString(react.json.JSONObject) -> rpKc
react.json.JSONObject -> Edbj:
    java.util.Map map -> map
    java.lang.Object NULL -> uOoP
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> wCdn
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> rpKc
    480:499:java.lang.String doubleToString(double) -> vjsv
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> DHCh
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> KfIx
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> OqvB
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> TpeI
    751:767:java.lang.String[] getNames(java.lang.Object) -> aUIF
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> kcEk
    855:855:boolean isNull(java.lang.String) -> srlg
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> avxG
    917:937:java.lang.String numberToString(java.lang.Number) -> wCdn
    949:949:java.lang.Object opt(java.lang.String) -> VUGm
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> wCdn
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> wCdn
    1018:1018:boolean optBoolean(java.lang.String) -> LynL
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> wCdn
    1054:1054:double optDouble(java.lang.String) -> bFhF
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> wCdn
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> wCdn
    1116:1119:double optDouble(java.lang.String,double) -> wCdn
    1134:1134:int optInt(java.lang.String) -> IWRq
    1152:1155:int optInt(java.lang.String,int) -> TpeI
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> tuns
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> tCKc
    1198:1198:long optLong(java.lang.String) -> UshF
    1216:1219:long optLong(java.lang.String,long) -> wCdn
    1234:1234:java.lang.String optString(java.lang.String) -> qKDK
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> rpKc
    1255:1305:void populateMap(java.lang.Object) -> paSk
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> rpKc
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> wCdn
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> rpKc
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> ooRp
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> rpKc
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> wCdn
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> TpeI
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> ooRp
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> Elil
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> wCdn
    1590:1590:java.lang.Object remove(java.lang.String) -> VCfX
    1605:1640:boolean similar(java.lang.Object) -> HBno
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> iupr
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> TpeI
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> wCdn
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> wCdn
    2000:2004:void indent(java.io.Writer,int) -> wCdn
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> wCdn
react.json.JSONObject$Null -> Edbj$wCdn:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> DGlq:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> EeDO:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> esAQ:
    long character -> HfaO
    boolean eof -> eof
    long index -> GlOY
    long line -> ecDc
    char previous -> wogT
    java.io.Reader reader -> reader
    boolean usePrevious -> Jtwd
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> ofnt
    119:131:int dehexchar(char) -> wCdn
    136:136:boolean end() -> AaMb
    147:153:boolean more() -> WGXK
    164:198:char next() -> next
    213:218:char next(char) -> rpKc
    233:250:java.lang.String next(int) -> vbfj
    263:266:char nextClean() -> OQCO
    287:334:java.lang.String nextString(char) -> TpeI
    349:361:java.lang.String nextTo(char) -> ooRp
    376:388:java.lang.String nextTo(java.lang.String) -> xWgw
    403:441:java.lang.Object nextValue() -> ESed
    458:479:char skipTo(char) -> Elil
    491:491:react.json.JSONException syntaxError(java.lang.String) -> YMOn
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> pXlK:
    int maxdepth -> mQIK
    boolean comma -> wxXY
    char mode -> oyRJ
    react.json.JSONObject[] stack -> LGxx
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> jyTN
    157:164:react.json.JSONWriter array() -> bOgx
    180:193:react.json.JSONWriter end(char,char) -> wCdn
    206:206:react.json.JSONWriter endArray() -> MdOJ
    219:219:react.json.JSONWriter endObject() -> PmWk
    235:258:react.json.JSONWriter key(java.lang.String) -> rNGT
    274:285:react.json.JSONWriter object() -> aCtI
    299:310:void pop(char) -> RroX
    322:329:void push(react.json.JSONObject) -> ooRp
    342:342:react.json.JSONWriter value(boolean) -> XJMl
    356:356:react.json.JSONWriter value(double) -> aehQ
    369:369:react.json.JSONWriter value(long) -> aehQ
    385:385:react.json.JSONWriter value(java.lang.Object) -> fdWH
react.json.XML -> fvBx:
    java.lang.Character AMP -> ETgP
    java.lang.Character APOS -> ejsc
    java.lang.Character BANG -> EKvL
    java.lang.Character EQ -> YFNx
    java.lang.Character GT -> fDCv
    java.lang.Character LT -> mPgq
    java.lang.Character QUEST -> iMKw
    java.lang.Character QUOT -> KpIo
    java.lang.Character SLASH -> WXxW
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> NEAD
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> wCdn
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> vjsv
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> bFri:
    java.util.HashMap entity -> DcES
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> gFFX
    108:133:java.lang.Object nextContent() -> cSKl
    149:166:java.lang.Object nextEntity(char) -> NfcV
    186:239:java.lang.Object nextMeta() -> wDWA
    261:334:java.lang.Object nextToken() -> rMxQ
    354:420:boolean skipPast(java.lang.String) -> KKvs
react.papyrus.BufferedFrame -> iLGj:
    byte[][] frame -> LHXi
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> wCdn
    90:97:void write(byte) -> RroX
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> wCdn
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> wCdn
    131:145:java.awt.image.BufferedImage toBufferedImage() -> fCFT
    153:160:void writeRainbowMul() -> sYkx
    167:174:void writeRainbowAdd() -> qeHg
    181:191:void writeSparks() -> qKUw
    195:201:boolean write(int,int,byte) -> wCdn
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> wCdn
    233:250:void write(react.papyrus.BufferedFrame) -> ooRp
    254:254:byte[][] getRawFrame() -> Orgs
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> xhsr:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> ooRp
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> wCdn
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> yuHl:
    org.bukkit.map.MapView getView() -> UlIT
    react.papyrus.BufferedFrame getFrameBuffer() -> VMIU
    void addRenderer(react.papyrus.IRenderer) -> wCdn
    void clearRenderers() -> mqmh
    react.glang.GList getRenderers() -> ncoY
    void removeRenderer(react.papyrus.IRenderer) -> rpKc
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> oEOw
react.papyrus.IRenderer -> RHek:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> wCdn
react.papyrus.Papyrus -> UbpX:
    org.bukkit.map.MapView map -> awwd
    react.papyrus.BufferedFrame frameBuffer -> IHAU
    react.papyrus.BufferedFrame lastFrameBuffer -> hlLK
    react.glang.GList renderers -> eIQI
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> UlIT
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> VMIU
    51:52:void addRenderer(react.papyrus.IRenderer) -> wCdn
    57:58:void clearRenderers() -> mqmh
    63:63:react.glang.GList getRenderers() -> ncoY
    69:70:void removeRenderer(react.papyrus.IRenderer) -> rpKc
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> oEOw
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> wCdn
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> rpKc
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> TpeI
react.papyrus.Papyrus$1 -> UbpX$1:
    react.papyrus.Papyrus this$0 -> RQyo
    org.bukkit.map.MapCanvas val$c -> VDuB
    org.bukkit.map.MapView val$v -> KUwC
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> BAhK:
    int spaceSize -> sJHQ
    java.lang.String fontChars -> xrho
    int[][] fontData -> uqpc
    react.papyrus.ReactFont Font -> sbyX
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> sryq:
    react.glang.GList subgoals -> rWfJ
    java.lang.String tag -> ecEu
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> QMyq
    26:44:void propigate() -> fKVl
    49:50:void addGoal(react.rai.IGoal) -> wCdn
    55:65:react.glang.GList getFailingSubgoals() -> GHma
    71:71:boolean isFailing() -> qBcs
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> uXCC
    void onPropigated() -> pacs
react.rai.Goal$1 -> sryq$1:
    react.rai.Goal this$0 -> qLVR
    react.rai.IGoal val$i -> mHYt
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> QoyB:
    react.glang.GList getSubgoals() -> QMyq
    void propigate() -> fKVl
    void onPropigated() -> pacs
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> GHma
    boolean isFailing() -> qBcs
    boolean onCheckFailing() -> uXCC
    void update() -> update
    void addGoal(react.rai.IGoal) -> wCdn
react.rai.IRAI -> AGWn:
    react.glang.GList getGoals() -> uNqG
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> wCdn
    react.glang.GList getEvents() -> mFyK
    void callEvent(react.rai.RAIEvent) -> wCdn
    react.glang.GList getListeners() -> TiGJ
react.rai.RAI -> uqPi:
    react.glang.GList goals -> QWjf
    react.glang.GList events -> qCeE
    react.glang.GList logEvents -> PfKA
    react.glang.GList listeners -> kSVL
    long since -> DsiJ
    react.rai.RAI instance -> qCcq
    21:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> uNqG
    41:42:void addGoal(react.rai.IGoal) -> wCdn
    47:69:void tick() -> tick
    74:74:react.glang.GList getEvents() -> mFyK
    80:87:void callEvent(react.rai.RAIEvent) -> wCdn
    92:92:react.glang.GList getListeners() -> TiGJ
react.rai.RAIEvent -> AaJf:
    react.rai.RAIEventType type -> uicR
    java.lang.String[] pars -> eHri
    java.lang.String ovt -> sJKT
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> jyfD
    29:29:java.lang.String[] getPars() -> wnhh
    34:34:java.lang.String getOvt() -> pGpk
react.rai.RAIEventType -> eHOW:
    react.rai.RAIEventType FIRE_ACTION -> wVWY
    react.rai.RAIEventType NOTE_GOAL_FAILING -> dOAn
    react.rai.RAIEventType NOTE_GOAL_FIXED -> AroG
    java.lang.String[] msgs -> fehb
    react.rai.RAIEventType[] ENUM$VALUES -> kJcj
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> eacn
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> wCdn
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedChunkLoad -> qKRJ:
    boolean failing -> KpMc
    24:27:void <init>() -> <init>
    34:60:boolean onCheckFailing() -> uXCC
    66:79:void onPropigated() -> pacs
react.rai.goals.GoalReducedChunkLoad$1 -> qKRJ$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> MBmu
    1:42:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    47:56:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> qKRJ$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> MBmu
    1:68:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    73:76:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> miXp:
    boolean failing -> KpMc
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> uXCC
    91:134:void onPropigated() -> pacs
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> wCdn
react.rai.goals.GoalReducedEntityCounts$1 -> miXp$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> ySkt
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> miXp$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> ySkt
    org.bukkit.Chunk val$lx -> kArO
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> pbAl:
    boolean failing -> KpMc
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> uXCC
    78:128:void onPropigated() -> pacs
react.rai.goals.GoalStableChunkTime$1 -> pbAl$1:
    react.rai.goals.GoalStableChunkTime this$0 -> lUvh
    1:54:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> pbAl$2:
    react.rai.goals.GoalStableChunkTime this$0 -> lUvh
    java.lang.Object val$i -> KpLQ
    1:111:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> FFFo:
    boolean failing -> KpMc
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> pacs
    35:35:void letUp() -> MRnV
    40:77:boolean onCheckFailing() -> uXCC
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> wCdn
react.rai.goals.GoalStableEntityTime$1 -> FFFo$1:
    react.rai.goals.GoalStableEntityTime this$0 -> PmyK
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> WrKR:
    boolean failing -> KpMc
    react.glang.GMap reocc -> HoSU
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> pacs
    88:125:boolean onCheckFailing() -> uXCC
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> wCdn
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> rpKc
react.rai.goals.GoalStableFluidTime$1 -> WrKR$1:
    react.rai.goals.GoalStableFluidTime this$0 -> QWim
    org.bukkit.Chunk val$lx -> kArO
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> WrKR$2:
    react.rai.goals.GoalStableFluidTime this$0 -> QWim
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> DHPw:
    boolean failing -> KpMc
    react.glang.GMap reocc -> HoSU
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> pacs
    89:125:boolean onCheckFailing() -> uXCC
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> wCdn
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> rpKc
react.rai.goals.GoalStableHopperTime$1 -> DHPw$1:
    react.rai.goals.GoalStableHopperTime this$0 -> OITJ
    org.bukkit.Chunk val$lx -> kArO
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> DHPw$2:
    react.rai.goals.GoalStableHopperTime this$0 -> OITJ
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> VTsy:
    boolean failing -> KpMc
    react.glang.GMap reocc -> HoSU
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> pacs
    89:126:boolean onCheckFailing() -> uXCC
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> wCdn
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> rpKc
react.rai.goals.GoalStableRedstoneTime$1 -> VTsy$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> ELWg
    org.bukkit.Chunk val$lx -> kArO
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> VTsy$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> ELWg
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> EvHd:
    boolean failing -> KpMc
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> pacs
    34:58:boolean onCheckFailing() -> uXCC
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> wCdn
react.rai.goals.GoalStableTickTime$1 -> EvHd$1:
    react.rai.goals.GoalStableTickTime this$0 -> lgXh
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> KoIW:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> WbMU
    boolean authenticated -> dVoo
    react.remote.server.ServerInfo info -> BdqR
    react.glang.GMap frems -> DQeV
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> dVBy
    51:51:react.glang.GMap getFrames() -> vJDO
    56:75:int computeFrames() -> rMvw
    80:92:boolean clearToken() -> yAjS
    97:110:boolean updateServerInfo() -> WGYl
    115:129:boolean refreshToken() -> WaME
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> TpeI
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> Drgd
    165:165:boolean isAuthenticated() -> ktWk
    170:170:react.remote.server.ServerInfo getInfo() -> ESgj
react.remote.client.packet.CPacketClearToken -> rxgb:
    java.lang.String token -> WbMU
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wCdn
    33:34:void fromBytes(react.gnet.streams.ISS) -> wCdn
    38:38:java.lang.String getToken() -> Drgd
    43:44:void setToken(java.lang.String) -> Sdrh
react.remote.client.packet.CPacketComputeFrames -> VMEk:
    java.lang.String token -> WbMU
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wCdn
    33:34:void fromBytes(react.gnet.streams.ISS) -> wCdn
    38:38:java.lang.String getToken() -> Drgd
    43:44:void setToken(java.lang.String) -> Sdrh
react.remote.client.packet.CPacketGetInfo -> jqQN:
    java.lang.String token -> WbMU
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wCdn
    33:34:void fromBytes(react.gnet.streams.ISS) -> wCdn
    38:38:java.lang.String getToken() -> Drgd
    43:44:void setToken(java.lang.String) -> Sdrh
react.remote.client.packet.CPacketGetToken -> APIE:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> wCdn
    36:38:void fromBytes(react.gnet.streams.ISS) -> wCdn
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> QNVi:
    java.lang.String token -> WbMU
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wCdn
    33:34:void fromBytes(react.gnet.streams.ISS) -> wCdn
    38:38:java.lang.String getToken() -> Drgd
    43:44:void setToken(java.lang.String) -> Sdrh
react.remote.client.packet.ClientPacket -> IXBH:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> wCdn
    void fromBytes(react.gnet.streams.ISS) -> wCdn
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> INmj
    42:42:java.lang.String getPacketName() -> AaLH
react.remote.client.packet.ClientPacketType -> hQWv:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> uHCg
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> bsPd
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> XeSH
    react.remote.client.packet.ClientPacketType GET_INFO -> MvTt
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> YhUj
    react.remote.client.packet.ClientPacketType[] $VALUES -> pQdg
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> AWwh:
    react.glang.GMap compute(long,long) -> TpeI
react.remote.server.KnownUser -> VLeA:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> rpXD:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> wCdn
    38:41:void fromBytes(react.gnet.streams.ISS) -> wCdn
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> MSMB:
    react.glang.GList users -> ogtA
    react.glang.GMap session -> tfar
    react.glang.GMap lastCompute -> xPjt
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> biVJ
    44:45:void registerUser(react.remote.server.KnownUser) -> wCdn
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> rpKc
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> ssPe
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> ooRp
    react.remote.server.IFrameComputer getFrameComputer() -> tdwG
    170:171:void markLastCompute(react.remote.server.KnownUser) -> TpeI
    175:180:long getLastCompute(react.remote.server.KnownUser) -> ooRp
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> wCdn
    190:191:void deleteSession(react.remote.server.KnownUser) -> Elil
    195:195:java.lang.String createToken() -> dobr
react.remote.server.ServerInfo -> INmj:
    java.lang.String motd -> Iihb
    int gameProtocol -> TGeN
    java.lang.String gameVersion -> jXde
    java.lang.String reactVersion -> yePj
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> KpMj
    int viewDistance -> viewDistance
    int gamePort -> SVCE
    java.lang.String gameAddress -> lDwP
    react.glang.GList remotePlugins -> GuBu
    react.glang.GList worlds -> vKEb
    react.glang.GList actions -> TqvY
    react.glang.GList samplers -> rhkq
    26:26:react.remote.server.ServerInfo empty() -> jOQS
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> wCdn
    146:159:void fromBytes(react.gnet.streams.ISS) -> wCdn
    java.lang.String dgetMotd() -> NVKI
    int dgetGameProtocol() -> tmhc
    java.lang.String dgetGameVersion() -> yRdf
    java.lang.String dgetReactVersion() -> CUip
    int dgetMaxPlayers() -> RQUV
    react.glang.GList dgetConnectedPlayers() -> sasx
    int dgetViewDistance() -> kcNk
    int dgetGamePort() -> yBCy
    java.lang.String dgetGameAddress() -> oMWs
    react.glang.GList dgetRemotePlugins() -> Fots
    react.glang.GList dgetWorlds() -> LywX
    react.glang.GList dgetActions() -> ieXx
    react.glang.GList dgetSamplers() -> rpSp
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> TqVW
    199:199:java.lang.String getGameVersion() -> GtDY
    204:204:java.lang.String getReactVersion() -> tKpO
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> cKAC
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> aLjC
    229:229:java.lang.String getGameAddress() -> FgoX
    234:234:react.glang.GList getRemotePlugins() -> eiwU
    239:239:react.glang.GList getWorlds() -> NfvI
    244:244:react.glang.GList getActions() -> AWrT
    249:249:react.glang.GList getSamplers() -> JAXQ
react.remote.server.ServerInfo$1 -> INmj$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> LywX
    37:37:int dgetViewDistance() -> kcNk
    43:43:react.glang.GList dgetRemotePlugins() -> Fots
    49:49:java.lang.String dgetReactVersion() -> CUip
    55:55:java.lang.String dgetMotd() -> NVKI
    61:61:int dgetMaxPlayers() -> RQUV
    67:67:java.lang.String dgetGameVersion() -> yRdf
    73:73:int dgetGameProtocol() -> tmhc
    79:79:int dgetGamePort() -> yBCy
    85:85:java.lang.String dgetGameAddress() -> oMWs
    91:91:react.glang.GList dgetConnectedPlayers() -> sasx
    97:97:react.glang.GList dgetActions() -> ieXx
    103:103:react.glang.GList dgetSamplers() -> rpSp
react.remote.server.packet.ComputedFrame -> AaLH:
    react.glang.GMap values -> LrpX
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> wCdn
    28:36:void fromBytes(react.gnet.streams.ISS) -> wCdn
    40:40:react.glang.GMap getValues() -> Cfvf
    45:46:void setValues(react.glang.GMap) -> TpeI
react.remote.server.packet.SPacketOk -> brIb:
    boolean ok -> WsPV
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wCdn
    33:34:void fromBytes(react.gnet.streams.ISS) -> wCdn
    38:38:boolean isOk() -> QFLi
    43:44:void setOk(boolean) -> wCeF
react.remote.server.packet.SPacketSendFrames -> VLcN:
    react.glang.GMap frames -> kRuj
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> wCdn
    36:44:void fromBytes(react.gnet.streams.ISS) -> wCdn
    48:48:react.glang.GMap getFrames() -> vJDO
    53:54:void setFrames(react.glang.GMap) -> ooRp
react.remote.server.packet.SPacketSendInfo -> fCAJ:
    react.remote.server.ServerInfo info -> BdqR
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wCdn
    33:34:void fromBytes(react.gnet.streams.ISS) -> wCdn
    38:38:react.remote.server.ServerInfo getInfo() -> ESgj
    43:44:void setInfo(react.remote.server.ServerInfo) -> wCdn
react.remote.server.packet.SPacketSendToken -> Qowf:
    java.lang.String token -> WbMU
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wCdn
    33:34:void fromBytes(react.gnet.streams.ISS) -> wCdn
    38:38:java.lang.String getToken() -> Drgd
    43:44:void setToken(java.lang.String) -> Sdrh
react.remote.server.packet.ServerPacket -> tCXa:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> wCdn
    void fromBytes(react.gnet.streams.ISS) -> wCdn
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> INmj
    42:42:java.lang.String getPacketName() -> AaLH
react.remote.server.packet.ServerPacketType -> xaFh:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> UAtq
    react.remote.server.packet.ServerPacketType SEND_INFO -> inrk
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> Bmdg
    react.remote.server.packet.ServerPacketType OK -> DkYd
    react.remote.server.packet.ServerPacketType[] $VALUES -> ceQi
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> uqNw:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleAsyncQueue$1 -> uqNw$1:
    react.sampler.SampleAsyncQueue this$0 -> yeOq
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleChunkTime -> MIyN:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleChunkTime$1 -> MIyN$1:
    react.sampler.SampleChunkTime this$0 -> rhjv
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleChunksLoaded -> TNme:
    react.graph.IFormatter formatter -> QNvM
    17:27:void <init>() -> <init>
    32:38:void construct() -> NEAD
    43:44:void sample() -> rNGT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleChunksLoaded$1 -> TNme$1:
    react.sampler.SampleChunksLoaded this$0 -> QhnP
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> paSk
react.sampler.SampleChunksLoadedPerSecond -> LOfy:
    react.gmath.Average a -> AIAV
    react.graph.IFormatter formatter -> QNvM
    16:29:void <init>() -> <init>
    34:40:void construct() -> NEAD
    45:47:void sample() -> rNGT
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleChunksLoadedPerSecond$1 -> LOfy$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> cKbG
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> paSk
react.sampler.SampleEntitiesDrops -> eXno:
    react.graph.IFormatter formatter -> QNvM
    17:27:void <init>() -> <init>
    32:38:void construct() -> NEAD
    43:44:void sample() -> rNGT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleEntitiesDrops$1 -> eXno$1:
    react.sampler.SampleEntitiesDrops this$0 -> htcl
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> paSk
react.sampler.SampleEntitiesLiving -> WaIV:
    react.graph.IFormatter formatter -> QNvM
    17:27:void <init>() -> <init>
    32:38:void construct() -> NEAD
    43:44:void sample() -> rNGT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleEntitiesLiving$1 -> WaIV$1:
    react.sampler.SampleEntitiesLiving this$0 -> DRKB
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> paSk
react.sampler.SampleEntitiesTiles -> GPxm:
    react.graph.IFormatter formatter -> QNvM
    17:27:void <init>() -> <init>
    32:38:void construct() -> NEAD
    43:44:void sample() -> rNGT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleEntitiesTiles$1 -> GPxm$1:
    react.sampler.SampleEntitiesTiles this$0 -> uGdb
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> paSk
react.sampler.SampleEntitiesTotal -> brLk:
    react.graph.IFormatter formatter -> QNvM
    17:27:void <init>() -> <init>
    32:38:void construct() -> NEAD
    43:44:void sample() -> rNGT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleEntitiesTotal$1 -> brLk$1:
    react.sampler.SampleEntitiesTotal this$0 -> dyYM
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> paSk
react.sampler.SampleEntityDroppedTicks -> gEfT:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleEntityDroppedTicks$1 -> gEfT$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> tfdn
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleEntityTime -> NDmx:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleEntityTime$1 -> NDmx$1:
    react.sampler.SampleEntityTime this$0 -> txHA
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleEntityTimeLock -> mFwU:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleEntityTimeLock$1 -> mFwU$1:
    react.sampler.SampleEntityTimeLock this$0 -> Evoj
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleExplosionTime -> KDVc:
    react.graph.IFormatter formatter -> QNvM
    17:27:void <init>() -> <init>
    32:38:void construct() -> NEAD
    43:44:void sample() -> rNGT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleExplosionTime$1 -> KDVc$1:
    react.sampler.SampleExplosionTime this$0 -> TPWq
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> paSk
react.sampler.SampleFluidPerSecond -> qmVm:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleFluidPerSecond$1 -> qmVm$1:
    react.sampler.SampleFluidPerSecond this$0 -> FXPn
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleFluidPerTick -> dEMt:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    46:53:void sample() -> rNGT
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleFluidPerTick$1 -> dEMt$1:
    react.sampler.SampleFluidPerTick this$0 -> JAxq
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleFluidTickTime -> FhLQ:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleFluidTickTime$1 -> FhLQ$1:
    react.sampler.SampleFluidTickTime this$0 -> DAGt
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleFluidTickUtilization -> vARF:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    46:53:void sample() -> rNGT
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleFluidTickUtilization$1 -> vARF$1:
    react.sampler.SampleFluidTickUtilization this$0 -> XeVE
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleHopperPerSecond -> OQCp:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleHopperPerSecond$1 -> OQCp$1:
    react.sampler.SampleHopperPerSecond this$0 -> yeSU
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleHopperPerTick -> uNnr:
    react.graph.IFormatter formatter -> QNvM
    18:29:void <init>() -> <init>
    34:40:void construct() -> NEAD
    47:54:void sample() -> rNGT
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleHopperPerTick$1 -> uNnr$1:
    react.sampler.SampleHopperPerTick this$0 -> eskS
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleHopperTickTime -> baKQ:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleHopperTickTime$1 -> baKQ$1:
    react.sampler.SampleHopperTickTime this$0 -> kAwN
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleHopperTickUtilization -> TqUA:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    46:53:void sample() -> rNGT
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleHopperTickUtilization$1 -> TqUA$1:
    react.sampler.SampleHopperTickUtilization this$0 -> OAIP
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleMemoryAllocated -> prce:
    react.graph.IFormatter formatter -> QNvM
    17:27:void <init>() -> <init>
    32:38:void construct() -> NEAD
    43:44:void sample() -> rNGT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleMemoryAllocated$1 -> prce$1:
    react.sampler.SampleMemoryAllocated this$0 -> UllA
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> paSk
react.sampler.SampleMemoryAllocationPerSecond -> ECEx:
    react.graph.IFormatter formatter -> QNvM
    17:27:void <init>() -> <init>
    32:38:void construct() -> NEAD
    43:44:void sample() -> rNGT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleMemoryAllocationPerSecond$1 -> ECEx$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> dyWl
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> paSk
react.sampler.SampleMemoryFree -> lwXm:
    react.graph.IFormatter formatter -> QNvM
    17:27:void <init>() -> <init>
    32:38:void construct() -> NEAD
    43:44:void sample() -> rNGT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleMemoryFree$1 -> lwXm$1:
    react.sampler.SampleMemoryFree this$0 -> ynCc
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> paSk
react.sampler.SampleMemoryMax -> bFxR:
    react.graph.IFormatter formatter -> QNvM
    17:27:void <init>() -> <init>
    32:38:void construct() -> NEAD
    43:44:void sample() -> rNGT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleMemoryMax$1 -> bFxR$1:
    react.sampler.SampleMemoryMax this$0 -> DtLj
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> paSk
react.sampler.SampleMemoryUse -> VUWs:
    react.graph.IFormatter formatter -> QNvM
    17:27:void <init>() -> <init>
    32:38:void construct() -> NEAD
    43:44:void sample() -> rNGT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleMemoryUse$1 -> VUWs$1:
    react.sampler.SampleMemoryUse this$0 -> suCY
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> paSk
react.sampler.SampleRedstonePerSecond -> afXh:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleRedstonePerSecond$1 -> afXh$1:
    react.sampler.SampleRedstonePerSecond this$0 -> fChi
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleRedstonePerTick -> KoKb:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    46:53:void sample() -> rNGT
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleRedstonePerTick$1 -> KoKb$1:
    react.sampler.SampleRedstonePerTick this$0 -> ymbY
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleRedstoneTickTime -> YVPd:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleRedstoneTickTime$1 -> YVPd$1:
    react.sampler.SampleRedstoneTickTime this$0 -> AIBD
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleRedstoneTickUtilization -> jqRv:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    46:53:void sample() -> rNGT
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleRedstoneTickUtilization$1 -> jqRv$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> EUMT
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleSyncQueue -> ESft:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleSyncQueue$1 -> ESft$1:
    react.sampler.SampleSyncQueue this$0 -> KpPf
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleTickTime -> HwCr:
    react.graph.IFormatter formatter -> QNvM
    react.gmath.Average aa -> lMjS
    17:29:void <init>() -> <init>
    34:40:void construct() -> NEAD
    45:47:void sample() -> rNGT
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleTickTime$1 -> HwCr$1:
    react.sampler.SampleTickTime this$0 -> fTiq
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> paSk
react.sampler.SampleTickUtilization -> QEhL:
    react.graph.IFormatter formatter -> QNvM
    react.gmath.Average aa -> lMjS
    17:29:void <init>() -> <init>
    34:40:void construct() -> NEAD
    45:47:void sample() -> rNGT
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleTickUtilization$1 -> QEhL$1:
    react.sampler.SampleTickUtilization this$0 -> jYGC
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> paSk
react.sampler.SampleTicksPerSecond -> VTwN:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleTicksPerSecond$1 -> VTwN$1:
    react.sampler.SampleTicksPerSecond this$0 -> NgwV
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleTileDroppedTicks -> bPJO:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleTileDroppedTicks$1 -> bPJO$1:
    react.sampler.SampleTileDroppedTicks this$0 -> Kgag
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleTileTime -> qScU:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleTileTime$1 -> qScU$1:
    react.sampler.SampleTileTime this$0 -> COHx
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.sampler.SampleTileTimeLock -> fufj:
    react.graph.IFormatter formatter -> QNvM
    18:28:void <init>() -> <init>
    33:39:void construct() -> NEAD
    44:45:void sample() -> rNGT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xWgw
react.sampler.SampleTileTimeLock$1 -> fufj$1:
    react.sampler.SampleTileTimeLock this$0 -> gXQS
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> paSk
react.security.checkpoints.SecurityCheckpointAlpha -> mFum:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> QElT
    78:148:void doScan(java.lang.Runnable) -> rpKc
    152:181:byte[] readResource(java.io.File,java.lang.String) -> wCdn
    186:217:react.glang.GMap scan(java.io.File) -> rpKc
    150:150:byte[] access$0(java.io.File,java.lang.String) -> rpKc
react.security.checkpoints.SecurityCheckpointAlpha$1 -> mFum$1:
    java.lang.Runnable val$r -> nBqm
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> mFum$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> Kgal
    java.lang.Runnable val$r -> nBqm
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> pbBl:
    java.lang.String ip -> EnbB
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> avxG:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> avxG$1:
    react.security.locks.SecurityLockAlpha this$0 -> Rtfm
    java.io.File val$f -> WasP
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> ofnt:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> fdWH
react.slate.PhantomSlate -> AaMb:
    react.glang.GList lines -> RJSc
    react.glang.GList viewers -> ETnx
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> lMmY
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> xaMg
    44:45:void set(int,java.lang.String) -> rpKc
    50:51:void setLines(react.glang.GList) -> XJMl
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> MIyN
    91:95:void addViewer(org.bukkit.entity.Player) -> fdWH
    100:102:void removeViewer(org.bukkit.entity.Player) -> vjsv
    107:107:react.glang.GList getViewers() -> Daih
    113:113:boolean isViewing(org.bukkit.entity.Player) -> aehQ
    119:120:void addLine(java.lang.String) -> HKac
    125:126:void clearLines() -> mOkw
react.slate.Slate -> WGXK:
    void build() -> MIyN
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> xaMg
    void set(int,java.lang.String) -> rpKc
    void setLines(react.glang.GList) -> XJMl
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> fdWH
    void addLine(java.lang.String) -> HKac
    void clearLines() -> mOkw
    void removeViewer(org.bukkit.entity.Player) -> vjsv
    react.glang.GList getViewers() -> Daih
    boolean isViewing(org.bukkit.entity.Player) -> aehQ
    void update() -> update
react.slate.SlateUtil -> OQCO:
    18:18:void <init>() -> <init>
    27:27:org.bukkit.scoreboard.ScoreboardManager getManager() -> HwHX
    37:37:org.bukkit.scoreboard.Scoreboard newBoard() -> eGtc
    51:61:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> wCdn
    66:76:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> rpKc
    90:100:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> TpeI
    115:121:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> wCdn
    134:146:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> wCdn
    160:172:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> rpKc
    177:187:java.lang.String convertJSON(java.lang.String) -> DrYq
    192:208:java.lang.String[] convertJSON(java.lang.String[]) -> rpKc
    213:214:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> wCdn
react.surge.Main -> ESed:
    react.glang.GList plugins -> QqcG
    react.glang.GMap pluginInstances -> Npig
    react.glang.GList controllerSet -> GlVU
    react.glang.GMap anchors -> NEvA
    react.glang.GList classes -> THIC
    java.lang.reflect.Field nsField -> AYeA
    java.lang.reflect.Field thField -> uYHa
    react.glang.GList tracks -> NqJu
    long nsf -> QWpS
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> GRAu
    90:109:long getNanoSync() -> Mtrp
    114:115:void requestResetNanos() -> rFJM
    119:127:void requestReload() -> Iygw
    131:134:void requestReload(java.lang.Runnable) -> TpeI
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> wCdn
    201:218:void onStop() -> fujo
    224:224:void onPostInit() -> JRXT
    230:230:void onPreInit() -> nmBb
    234:245:void shutDownAmps() -> CVVV
    249:458:void initializeAmps() -> ebFk
    463:496:void doScan() -> RjqD
    500:522:void scanForPoolDefiners() -> RYoP
    526:542:void scanForRawEvents() -> iKpL
    546:562:void scanForDynamicTrack() -> SwFY
    566:587:void scanForAmps() -> htAU
    592:603:void onTick() -> iBqf
react.surge.Main$1 -> ESed$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> bOgx:
    react.surge.control.AmpedPlugin plugin -> WrtQ
    boolean connected -> connected
    int masterTask -> Cgyi
    17:21:void <init>(react.surge.control.AmpedPlugin) -> <init>
    25:25:react.surge.control.AmpedPlugin getPluginInstance() -> OQGY
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> nRmi
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> wCdn
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> wCdn
    113:114:void stopTask(int) -> oMQg
    57:57:void access$0(react.surge.PluginAmp) -> wCdn
react.surge.PluginAmp$1 -> bOgx$1:
    react.surge.PluginAmp this$0 -> wNLW
    1:37:void <init>(react.surge.PluginAmp) -> <init>
    42:44:void run() -> run
react.surge.PluginAmp$2 -> bOgx$2:
    react.surge.PluginAmp this$0 -> wNLW
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:53:void run() -> run
react.surge.Surge -> MdOJ:
    react.surge.PluginAmp amp -> hIpT
    react.glang.GList tickComponents -> ecKd
    react.glang.GList atickComponents -> FaDD
    react.surge.sched.TaskManager taskmgr -> Rcdm
    react.surge.hotload.HotloadManager hotloadmgr -> qvmq
    java.lang.Thread mainThread -> xkAt
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> wCdn
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> vbfj
    44:44:java.io.File folder() -> CgVg
    49:51:java.io.File getPluginJarFile() -> rFIW
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> ooRp
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> TNsr
    74:74:react.glang.GList getTickComponents() -> RcAi
    79:79:react.glang.GList getAsyncTickComponents() -> NEVD
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> wCdn
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> rpKc
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> wCdn
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> CEUq
    126:126:boolean hasAmp() -> CNFv
    131:131:react.surge.PluginAmp getAmp() -> Orki
    136:136:react.surge.sched.TaskManager getTaskManager() -> Fgpu
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> qunG
react.surge.cluster.Cluster -> PmWk:
    react.surge.cluster.ClusterType type -> GlXt
    java.lang.Object t -> PmpY
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> mrSI
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> aCtI:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> gFFX:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> cSKl:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> wDWA:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> rMxQ:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> fCFT:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> sYkx:
    react.surge.cluster.ClusterType INT -> EURF
    react.surge.cluster.ClusterType BOOLEAN -> jXkS
    react.surge.cluster.ClusterType STRING -> MnJv
    react.surge.cluster.ClusterType STRING_LIST -> sBDQ
    react.surge.cluster.ClusterType DOUBLE -> igJh
    react.surge.cluster.ClusterType LONG -> rWrH
    react.surge.cluster.ClusterType[] ENUM$VALUES -> GtjR
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> qeHg:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> FGTJ
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> wCdn
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> wCdn
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> Gseb
react.surge.cluster.ConfigurationDataOutput -> qKUw:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> rpKc
react.surge.cluster.DataCluster -> Orgs:
    react.glang.GMap clusters -> UJmw
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> Cwyq
    29:33:void fromJson(react.json.JSONObject) -> Elil
    37:44:react.json.JSONObject toJson() -> hkTN
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> hIPn
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> wCdn
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> dVBy
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> RroX
    194:195:void set(java.lang.String,int) -> Elil
    199:200:void set(java.lang.String,boolean) -> TpeI
    204:205:void set(java.lang.String,double) -> TpeI
    209:210:void set(java.lang.String,long) -> TpeI
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> wCdn
react.surge.cluster.ICluster -> UlIT:
    react.surge.cluster.ClusterType getType() -> mrSI
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> VMIU:
react.surge.cluster.IDataInput -> mqmh:
    react.surge.cluster.DataCluster read(java.io.File) -> TpeI
react.surge.cluster.IDataOutput -> ncoY:
    void write(react.surge.cluster.DataCluster,java.io.File) -> wCdn
react.surge.cluster.Key -> oEOw:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> QMyq:
    int value() -> value
react.surge.cluster.KeyStore -> fKVl:
react.surge.cluster.ReflectedConfigurationException -> GHma:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> qBcs:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> TpeI
react.surge.cluster.YamlDataOutput -> uXCC:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> wCdn
react.surge.collection.GSound -> pacs:
    java.lang.String sound -> uHJA
    org.bukkit.Sound iSound -> GAfK
    java.lang.Float volume -> QFqv
    java.lang.Float pitch -> UdaI
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> uxrd
    61:72:void play(org.bukkit.Location) -> Elil
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> wCdn
    93:93:java.lang.String getSound() -> miaG
    98:99:void setSound(java.lang.String) -> oMQg
    103:103:org.bukkit.Sound getiSound() -> maQD
    108:109:void setiSound(org.bukkit.Sound) -> wCdn
    113:113:java.lang.Float getVolume() -> AYBS
    118:119:void setVolume(java.lang.Float) -> wCdn
    123:123:java.lang.Float getPitch() -> ycqg
    128:129:void setPitch(java.lang.Float) -> rpKc
react.surge.control.AmpedPlugin -> uNqG:
    react.glang.GList controllers -> rPAW
    react.gconcurrent.ParallelPoolManager pp -> gPBK
    react.surge.server.CoreTickThread ctt -> PDOB
    24:50:void <init>() -> <init>
    void doScan() -> RjqD
    long getNanoSync() -> Mtrp
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:97:void onDisable() -> onDisable
    102:102:react.glang.GList getControllers() -> upxL
    108:109:void registerController(react.surge.control.IController) -> wCdn
    114:125:void onTick() -> iBqf
    130:130:java.lang.String getTickName() -> skCU
    136:136:react.gconcurrent.ParallelPoolManager getThreadPool() -> YUvM
    142:257:void destroyOldThreads() -> mOnT
    void onControllerRegistry() -> GRAu
    void onStart(react.surge.util.Protocol) -> wCdn
    void onStop() -> fujo
    void onPostInit() -> JRXT
    void onPreInit() -> nmBb
react.surge.control.AmpedPlugin$1 -> uNqG$1:
    react.surge.control.AmpedPlugin this$0 -> FGRX
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> lDQP
react.surge.control.AmpedPlugin$2 -> uNqG$2:
    react.surge.control.AmpedPlugin this$0 -> FGRX
    1:155:void <init>(react.surge.control.AmpedPlugin) -> <init>
    160:250:void run() -> run
react.surge.control.Control -> mFyK:
react.surge.control.Controller -> TiGJ:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> jyfD:
react.surge.control.Enable -> wnhh:
react.surge.control.IController -> pGpk:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> eacn:
react.surge.control.Plugin -> MRnV:
react.surge.control.SurgePlugin -> vJDO:
    void onStart(react.surge.util.Protocol) -> wCdn
    void onStop() -> fujo
    void onPostInit() -> JRXT
    void onPreInit() -> nmBb
    void onControllerRegistry() -> GRAu
    void registerController(react.surge.control.IController) -> wCdn
    react.glang.GList getControllers() -> upxL
    react.gconcurrent.ParallelPoolManager getThreadPool() -> YUvM
react.surge.hotload.HotloadManager -> rMvw:
    react.glang.GMap filemods -> tgHf
    react.glang.GMap filesizes -> mjdf
    react.glang.GMap fileacts -> FOcI
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> wCdn
    35:38:void untrack(java.io.File) -> ooRp
    42:45:void untrackall() -> WrSo
    50:86:void onTick() -> iBqf
    91:91:java.lang.String getTickName() -> skCU
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> wCdn
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> rpKc
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> TpeI
react.surge.hotload.HotloadManager$1 -> rMvw$1:
    react.surge.hotload.HotloadManager this$0 -> NNiT
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> yAjS:
    boolean init -> AbWf
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> brua
    java.lang.Class IChatBaseComponent -> RRdv
    java.lang.Class ChatSerializer -> qvoj
    java.lang.Class PacketPlayOutPlayerInfo -> Lrvb
    java.lang.Class PlayerInfoData -> FhuI
    java.lang.Class EnumPlayerInfoAction -> YqLq
    java.lang.Class GameProfile -> CpmW
    java.lang.Class EnumGamemode -> TYLd
    java.lang.Class TileEntitySkull -> bPqy
    java.lang.Class LoadingCache -> iDeU
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> WGYl:
    react.surge.nms.NMSX bountifulAPI -> hRcd
    boolean useOldMethods -> PfRT
    java.lang.String nmsver -> iDeX
    java.lang.Object eTimes -> LPtL
    java.lang.Object eTitle -> OcNt
    java.lang.Object eSubtitle -> xIEK
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> wCdn
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> Wyon
    75:89:java.lang.Class getCBClass(java.lang.String) -> doUO
    96:104:java.lang.Object serializeChat(java.lang.String) -> vtJF
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> rpKc
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> wCdn
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> HnXn
    151:151:java.lang.String craftPackage() -> Nogk
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> wCdn
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> wCdn
    197:207:java.lang.Class getNMSClass(java.lang.String) -> fljb
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> wCdn
    279:280:void clearTitle(org.bukkit.entity.Player) -> DHCh
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> rpKc
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> wCdn
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> wCdn
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> FMks
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> RroX
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> qdWH
    434:447:int ping(org.bukkit.entity.Player) -> KfIx
react.surge.nms.NMSX$1 -> WGYl$1:
    org.bukkit.entity.Player val$player -> qvcl
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> WGYl$2:
    org.bukkit.entity.Player val$player -> qvcl
    java.lang.String val$message -> EwVd
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> WaME:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> YNDw
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> wCdn
    68:82:void clearTitle(org.bukkit.entity.Player) -> DHCh
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> wCdn
react.surge.nms.PacketUtil$V -> WaME$wCdn:
    react.surge.nms.PacketUtil$V R17 -> Vxfm
    react.surge.nms.PacketUtil$V R18 -> Gkyx
    react.surge.nms.PacketUtil$V R19 -> sAdf
    react.surge.nms.PacketUtil$V R111 -> TYNk
    react.surge.nms.PacketUtil$V R110 -> ndyY
    react.surge.nms.PacketUtil$V R112 -> iDhc
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> Jlru
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> Drgd:
    java.lang.String title -> title
    java.lang.String subTitle -> AYgf
    java.lang.String action -> action
    java.lang.Integer fadeIn -> gaFe
    java.lang.Integer fadeOut -> fCns
    java.lang.Integer stayTime -> KVeF
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> OqvB
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> NMdj
    79:80:void setSubTitle(java.lang.String) -> fJhA
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> annO
    99:100:void setFadeIn(java.lang.Integer) -> TpeI
    104:104:java.lang.Integer getFadeOut() -> WOnb
    109:110:void setFadeOut(java.lang.Integer) -> ooRp
    114:114:java.lang.Integer getStayTime() -> JlLp
    119:120:void setStayTime(java.lang.Integer) -> Elil
react.surge.nms.VersionBukkit -> ktWk:
    react.surge.nms.VersionBukkit VU -> xHcX
    react.surge.nms.VersionBukkit V7 -> QhwS
    react.surge.nms.VersionBukkit V8 -> Udbq
    react.surge.nms.VersionBukkit V9 -> FaIE
    react.surge.nms.VersionBukkit V11 -> Vxfv
    react.surge.nms.VersionBukkit V111 -> ageV
    react.surge.nms.VersionBukkit V112 -> WjiH
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> UeCg
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> rgnK
    27:32:boolean uc() -> AaTK
    37:67:react.surge.nms.VersionBukkit get() -> UlKy
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> ESgj:
    void burst(java.lang.Object) -> vjsv
    void setTimeLock(double) -> uxrd
    double getEstimatedTimeUse() -> SLTF
    int flush() -> ccqq
    int flush(react.gbench.Profiler) -> wCdn
    void queue(java.lang.Object) -> aehQ
    void queue(java.util.List) -> TpeI
    void queue(java.lang.Object[]) -> wCdn
react.surge.sched.ICancellable -> dobr:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> jOQS:
    void onTick() -> iBqf
    java.lang.String getTickName() -> skCU
react.surge.sched.ITask -> TqVW:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> PSjq
    java.lang.String getName() -> getName
    double getComputeTime() -> HTeP
    double getTotalComputeTime() -> eHVm
    double getActiveTime() -> jNtV
    boolean hasCompleted() -> HCdB
react.surge.sched.Task -> GtDY:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> Rtkd
    double computeTime -> YFYu
    double totalComputeTime -> hthl
    double activeTime -> nSvh
    boolean completed -> completed
    react.gbench.Profiler profiler -> VNSI
    react.gbench.Profiler activeProfiler -> ifjd
    int ticks -> KEar
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> ooRp
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> PSjq
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> HTeP
    150:150:boolean hasCompleted() -> HCdB
    156:156:double getTotalComputeTime() -> eHVm
    162:162:double getActiveTime() -> jNtV
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> wCdn
    15:15:void access$1(react.surge.sched.Task,boolean) -> wCdn
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> rpKc
    14:14:void access$3(react.surge.sched.Task,double) -> wCdn
    12:12:void access$4(react.surge.sched.Task,double) -> rpKc
    14:14:double access$5(react.surge.sched.Task) -> TpeI
    13:13:void access$6(react.surge.sched.Task,double) -> TpeI
    13:13:double access$7(react.surge.sched.Task) -> ooRp
    12:12:double access$8(react.surge.sched.Task) -> Elil
react.surge.sched.Task$1 -> GtDY$1:
    react.surge.sched.Task this$0 -> OAMi
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> GtDY$2:
    react.surge.sched.Task this$0 -> OAMi
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> GtDY$3:
    react.surge.sched.Task this$0 -> OAMi
    int val$total -> YFYr
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> tKpO:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> Rtkd
    double computeTime -> YFYu
    double totalComputeTime -> hthl
    double activeTime -> nSvh
    boolean completed -> completed
    react.gbench.Profiler profiler -> VNSI
    react.gbench.Profiler activeProfiler -> ifjd
    int ticks -> KEar
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> ooRp
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> PSjq
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> HTeP
    101:101:boolean hasCompleted() -> HCdB
    107:107:double getTotalComputeTime() -> eHVm
    113:113:double getActiveTime() -> jNtV
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> wCdn
    12:12:void access$1(react.surge.sched.TaskLater,double) -> wCdn
    13:13:double access$2(react.surge.sched.TaskLater) -> rpKc
    12:12:double access$3(react.surge.sched.TaskLater) -> TpeI
    13:13:void access$4(react.surge.sched.TaskLater,double) -> rpKc
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> ooRp
    14:14:double access$6(react.surge.sched.TaskLater) -> Elil
    14:14:void access$7(react.surge.sched.TaskLater,double) -> TpeI
react.surge.sched.TaskLater$1 -> tKpO$1:
    react.surge.sched.TaskLater this$0 -> IYNq
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> cKAC:
    react.glang.GList tasks -> TFrr
    react.glang.GMap taskProfiles -> mauG
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> wCdn
    25:35:void onTick() -> iBqf
    39:40:void putFinishingTask(react.surge.sched.ITask) -> rpKc
    44:53:void putTask(react.surge.sched.ITask) -> TpeI
    58:58:java.lang.String getTickName() -> skCU
    63:63:react.glang.GList getTasks() -> QElt
    68:68:react.glang.GMap getTaskProfiles() -> klJt
react.surge.sched.TaskProfile -> aLjC:
    double activeTime -> nSvh
    double computeTickTime -> XmkG
    double computeTime -> YFYu
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> jNtV
    23:24:void setActiveTime(double) -> DHCh
    28:28:double getComputeTickTime() -> CUwJ
    33:34:void setComputeTickTime(double) -> KfIx
    38:38:double getComputeTime() -> HTeP
    43:44:void setComputeTime(double) -> OqvB
react.surge.server.AsyncTick -> FgoX:
react.surge.server.CPS -> eiwU:
    react.glang.GMap keys -> KxgU
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> uyVT
    46:99:void scan() -> vsyi
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> TpeI
react.surge.server.CoreTickThread -> NfvI:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> JAXQ:
    long memoryFree -> vlpD
    long memoryUsed -> AaxY
    long memoryMax -> Npps
    long lastMemoryUsed -> KNVX
    long memoryUsedAfterGC -> mbXx
    long allocated -> qTrb
    long collected -> etTL
    long collections -> qoFe
    long sms -> Wjiw
    long memoryAllocatedPerTick -> kSar
    long memoryCollectedPerTick -> wgfO
    long memoryFullyAllocatedPerTick -> mjih
    long mah -> NNmx
    long mahs -> Xmmp
    22:39:void <init>() -> <init>
    void onAllocationSet() -> bjAn
    46:98:void run() -> run
    102:102:long getMemoryFree() -> TXIA
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> pQFt
    117:117:long getLastMemoryUsed() -> Gjsn
    122:122:long getMemoryUsedAfterGC() -> Knqq
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> CMgx
    137:137:long getCollections() -> rpau
    142:142:long getSms() -> uXId
    147:147:long getMemoryAllocatedPerTick() -> ETOj
    152:152:long getMemoryCollectedPerTick() -> mPQf
    157:157:long getMemoryFullyAllocatedPerTick() -> ESno
    162:162:long getMah() -> lgBD
    167:167:long getMahs() -> Jkoa
react.surge.server.SuperSampler -> Cfvf:
    react.gmath.Average ticksPerSecondL -> aghA
    react.gmath.Average tickTimeL -> mIFq
    react.gmath.Average mahL -> QqkI
    double ticksPerSecond -> xisN
    double ticksPerSecondRaw -> wovJ
    double tickTime -> igMy
    double tickTimeRaw -> SDlU
    boolean running -> running
    boolean frozen -> wgdj
    double tickUtilizationRaw -> JCAh
    double tickUtilization -> qwVG
    double leftoverTickTime -> VhGb
    long memoryUse -> eRPL
    long memoryAllocated -> ekbE
    long memoryCollected -> Xmlf
    long mahs -> Xmmp
    int totalChunks -> WPvk
    int totalEntities -> SxPV
    int totalDrops -> EoGl
    int totalTiles -> nTYV
    int totalLiving -> ghuw
    int chunksLoaded -> JmVI
    int chunksUnloaded -> fetN
    react.surge.server.WorldMonitor worldMonitor -> wEbA
    react.surge.server.TPSMonitor tpsMonitor -> Hoba
    react.surge.server.MemoryMonitor memoryMonitor -> IYSj
    java.lang.StackTraceElement[] lockStack -> pstd
    react.glang.GMap spikes -> sAOY
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> iBqf
    154:154:java.lang.String getTickName() -> skCU
    159:159:react.gmath.Average getTicksPerSecondL() -> LYEJ
    164:164:double getTicksPerSecond() -> hkIS
    169:169:double getTicksPerSecondRaw() -> lgAF
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> gySc
    184:184:react.gmath.Average getTickTimeL() -> NVYh
    189:189:double getTickTime() -> tLTb
    194:194:double getTickTimeRaw() -> vJJX
    199:199:double getTickUtilizationRaw() -> pPiK
    204:204:double getTickUtilization() -> uNwL
    209:209:double getLeftoverTickTime() -> LPSj
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> IFjH
    219:219:long getMemoryUse() -> PTOj
    224:224:long getMemoryAllocated() -> EBnL
    229:229:long getMemoryCollected() -> OPlC
    234:234:react.gmath.Average getMahL() -> Vnqp
    239:239:long getMahs() -> Jkoa
    244:244:int getTotalChunks() -> gVno
    249:249:int getTotalEntities() -> iUEi
    254:254:int getTotalDrops() -> sIQQ
    259:259:int getTotalTiles() -> KnqS
    264:264:int getTotalLiving() -> bOof
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> IGHy
    274:274:int getChunksLoaded() -> pYYi
    279:279:int getChunksUnloaded() -> nttq
    284:285:void setTicksPerSecondL(react.gmath.Average) -> wCdn
    289:290:void setTickTimeL(react.gmath.Average) -> rpKc
    294:295:void setMahL(react.gmath.Average) -> TpeI
    299:300:void setTicksPerSecond(double) -> EAvL
    304:305:void setTicksPerSecondRaw(double) -> kcEk
    309:310:void setTickTime(double) -> srlg
    314:315:void setTickTimeRaw(double) -> VUGm
    319:320:void setRunning(boolean) -> HBno
    324:325:void setTickUtilizationRaw(double) -> LynL
    329:330:void setTickUtilization(double) -> bFhF
    334:335:void setLeftoverTickTime(double) -> IWRq
    339:340:void setMemoryUse(long) -> uxrd
    344:345:void setMemoryAllocated(long) -> DHCh
    349:350:void setMemoryCollected(long) -> KfIx
    354:355:void setMahs(long) -> OqvB
    359:360:void setTotalChunks(int) -> Wyon
    364:365:void setTotalEntities(int) -> doUO
    369:370:void setTotalDrops(int) -> vtJF
    374:375:void setTotalTiles(int) -> fljb
    379:380:void setTotalLiving(int) -> FMks
    384:385:void setChunksLoaded(int) -> fJhA
    389:390:void setChunksUnloaded(int) -> uyVT
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> wCdn
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> wCdn
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> wCdn
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> jFei
    419:419:react.glang.GMap getSpikes() -> ghCa
    31:31:void access$0(react.surge.server.SuperSampler,int) -> wCdn
    33:33:void access$1(react.surge.server.SuperSampler,int) -> rpKc
    34:34:void access$2(react.surge.server.SuperSampler,int) -> TpeI
    32:32:void access$3(react.surge.server.SuperSampler,int) -> ooRp
    35:35:void access$4(react.surge.server.SuperSampler,int) -> Elil
    36:36:void access$5(react.surge.server.SuperSampler,int) -> RroX
    37:37:void access$6(react.surge.server.SuperSampler,int) -> NfcV
    19:19:void access$7(react.surge.server.SuperSampler,double) -> wCdn
    21:21:void access$8(react.surge.server.SuperSampler,double) -> rpKc
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> wCdn
    19:19:double access$10(react.surge.server.SuperSampler) -> rpKc
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> TpeI
    21:21:double access$12(react.surge.server.SuperSampler) -> ooRp
    18:18:void access$13(react.surge.server.SuperSampler,double) -> TpeI
    20:20:void access$14(react.surge.server.SuperSampler,double) -> ooRp
    24:24:void access$15(react.surge.server.SuperSampler,double) -> Elil
    20:20:double access$16(react.surge.server.SuperSampler) -> Elil
    25:25:void access$17(react.surge.server.SuperSampler,double) -> RroX
    25:25:double access$18(react.surge.server.SuperSampler) -> RroX
    26:26:void access$19(react.surge.server.SuperSampler,double) -> NfcV
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> wCdn
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> NfcV
    27:27:void access$22(react.surge.server.SuperSampler,long) -> wCdn
    28:28:void access$23(react.surge.server.SuperSampler,long) -> rpKc
    29:29:void access$24(react.surge.server.SuperSampler,long) -> TpeI
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> DHEP
    30:30:void access$26(react.surge.server.SuperSampler,long) -> ooRp
react.surge.server.SuperSampler$1 -> Cfvf$1:
    react.surge.server.SuperSampler this$0 -> uQAd
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> wCdn
react.surge.server.SuperSampler$2 -> Cfvf$2:
    react.surge.server.SuperSampler this$0 -> uQAd
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> ntuX
    106:107:void onSpike() -> LrUm
react.surge.server.SuperSampler$3 -> Cfvf$3:
    react.surge.server.SuperSampler this$0 -> uQAd
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> bjAn
react.surge.server.TPSMonitor -> QFLi:
    double tickTimeMS -> XwBE
    double rawTicksPerSecond -> lgiL
    react.gbench.Profiler tickProfiler -> xYjD
    react.gbench.Profiler tickTimeProfiler -> dOPH
    boolean ticked -> TGpe
    java.lang.Thread$State lastState -> QOjB
    double actualTickTimeMS -> bIKC
    double ltt -> NWan
    long lastTick -> dosS
    boolean frozen -> wgdj
    java.lang.StackTraceElement[] lockedStack -> rhxh
    22:38:void <init>() -> <init>
    void onTicked() -> ntuX
    void onSpike() -> LrUm
    47:121:void run() -> run
    125:153:void processState(java.lang.Thread$State) -> wCdn
    157:157:double getTickTimeMS() -> xiaT
    162:162:double getRawTicksPerSecond() -> HUHY
    167:167:react.gbench.Profiler getTickProfiler() -> PBlS
    172:172:boolean isTicked() -> EnBU
    177:178:void markTick() -> HDHl
    182:182:react.gbench.Profiler getTickTimeProfiler() -> WPTe
    187:187:java.lang.Thread$State getLastState() -> PvTS
    192:192:double getActualTickTimeMS() -> AjGy
    197:197:double getLtt() -> ncwY
    202:202:long getLastTick() -> lemx
    207:207:boolean isFrozen() -> isFrozen
    212:212:java.lang.StackTraceElement[] getLockedStack() -> qvSJ
react.surge.server.WorldMonitor -> QElT:
    boolean chunksChanged -> dyci
    boolean dropChanged -> BnPn
    boolean tileChanged -> rOfl
    boolean livingChanged -> YXAr
    boolean totalChanged -> qCsP
    boolean updated -> Npsj
    int totalChunks -> WPvk
    int totalDrops -> EoGl
    int totalTiles -> nTYV
    int totalLiving -> ghuw
    int totalEntities -> SxPV
    int chunksLoaded -> JmVI
    int chunksUnloaded -> fetN
    long ms -> iKpL
    25:44:void <init>() -> <init>
    49:69:void run() -> run
    void updated(int,int,int,int,int,int,int) -> wCdn
    76:81:void on(org.bukkit.event.world.ChunkLoadEvent) -> rpKc
    86:91:void on(org.bukkit.event.world.ChunkUnloadEvent) -> wCdn
    96:97:void on(org.bukkit.event.entity.EntitySpawnEvent) -> wCdn
    102:103:void on(org.bukkit.event.entity.EntityDeathEvent) -> wCdn
    108:109:void on(org.bukkit.event.player.PlayerDropItemEvent) -> wCdn
    114:115:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> wCdn
    120:121:void on(org.bukkit.event.entity.EntityPickupItemEvent) -> wCdn
    126:127:void on(org.bukkit.event.block.BlockPlaceEvent) -> wCdn
    132:133:void on(org.bukkit.event.block.BlockBreakEvent) -> wCdn
    137:138:void doUpdate() -> oMhi
    142:193:void sample() -> rNGT
    197:203:void sampleTotalCount() -> uGIr
    207:213:void sampleLivingCount() -> EnDg
    217:226:void sampleTileCount() -> RIVU
    230:236:void sampleDropCount() -> aMRE
    240:246:void sampleChunkCount() -> HUJt
react.surge.text.PhantomSpinner -> xaMg:
    react.surge.text.ProgressSpinner s -> vlth
    react.surge.text.ProgressSpinner c -> vKRe
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> Daih:
    java.lang.String[] chars -> JJuR
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> GSLa
    react.surge.text.ProgressSpinner NETWORK -> foGr
    react.surge.text.ProgressSpinner CIRCLES -> IXrG
    react.surge.text.ProgressSpinner RANDOMS -> Bvbg
    react.surge.text.ProgressSpinner MERGERS -> SUmk
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> hQeA
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> mOkw:
    int value() -> value
react.surge.util.Area -> HwHX:
    org.bukkit.Location location -> GRko
    java.lang.Double radius -> MKlY
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> wCdn
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> VEBQ
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> RroX
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> NfcV
    109:109:boolean isWithin(org.bukkit.Location) -> DHEP
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> ooRp
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> wCdn
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> hITY
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> mjFM
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> qdWH
    257:257:java.lang.Double getRadius() -> UuBs
    268:269:void setRadius(java.lang.Double) -> TpeI
    278:283:org.bukkit.Location random() -> PvUN
react.surge.util.Axis -> eGtc:
    react.surge.util.Axis X -> dyal
    react.surge.util.Axis Y -> RBJq
    react.surge.util.Axis Z -> aoxf
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> HpBk
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> FgvP
    29:29:org.bukkit.util.Vector negative() -> LrXq
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> GRAu:
    react.surge.util.BlastResistance BARRIER -> ChcQ
    react.surge.util.BlastResistance BEDROCK -> ptSo
    react.surge.util.BlastResistance COMMAND -> OAQp
    react.surge.util.BlastResistance ENDER_PORTAL -> EDUl
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> jYPj
    react.surge.util.BlastResistance ANVIL -> GRkx
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> rFuP
    react.surge.util.BlastResistance OBSIDIAN -> PUVj
    react.surge.util.BlastResistance ENDER_CHEST -> YNoO
    react.surge.util.BlastResistance WATER -> aghS
    react.surge.util.BlastResistance LAVA -> LHjK
    react.surge.util.BlastResistance STATIONARY_WATER -> Hfpn
    react.surge.util.BlastResistance DRAGON_EGG -> SNAl
    react.surge.util.BlastResistance ENDER_STONE -> raKr
    react.surge.util.BlastResistance COAL_BLOCK -> AYnS
    react.surge.util.BlastResistance DIAMOND_BLOCK -> eASd
    react.surge.util.BlastResistance EMERALD_BLOCK -> veGk
    react.surge.util.BlastResistance GOLD_BLOCK -> iVPw
    react.surge.util.BlastResistance IRON_BLOCK -> VEhh
    react.surge.util.BlastResistance REDSTONE_BLOCK -> JSgl
    react.surge.util.BlastResistance BRICK -> bIKd
    react.surge.util.BlastResistance BRICK_STAIRS -> bYlX
    react.surge.util.BlastResistance HARD_CLAY -> cnSD
    react.surge.util.BlastResistance STONE -> MnTJ
    react.surge.util.BlastResistance SMOOTH_BRICK -> cLPB
    react.surge.util.BlastResistance SMOOTH_STAIRS -> kKVE
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> XebK
    react.surge.util.BlastResistance STONE_SLAB2 -> Yydm
    react.surge.util.BlastResistance IRON_DOOR -> VhKd
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> TsGJ
    react.surge.util.BlastResistance IRON_TRAPDOOR -> hBKi
    react.surge.util.BlastResistance MOB_SPAWNER -> LYmI
    react.surge.util.BlastResistance WEB -> mIJl
    react.surge.util.BlastResistance DISPENSER -> vvGm
    react.surge.util.BlastResistance DROPPER -> sBJb
    react.surge.util.BlastResistance FURNACE -> Hfrd
    react.surge.util.BlastResistance BURNING_FURNACE -> QrNb
    react.surge.util.BlastResistance BEACON -> MKoA
    react.surge.util.BlastResistance COAL_ORE -> YXCc
    react.surge.util.BlastResistance COCOA -> NOSD
    react.surge.util.BlastResistance DIAMOND_ORE -> AkQO
    react.surge.util.BlastResistance EMERALD_ORE -> gXYo
    react.surge.util.BlastResistance FENCE -> lghu
    react.surge.util.BlastResistance FENCE_GATE -> BUAr
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> oXBG
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> nmsF
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> AtDM
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> SpGL
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> qDXV
    react.surge.util.BlastResistance ACACIA_FENCE -> tfsQ
    react.surge.util.BlastResistance BIRCH_FENCE -> hmBt
    react.surge.util.BlastResistance DARK_OAK_FENCE -> GuUL
    react.surge.util.BlastResistance SPRUCE_FENCE -> etYm
    react.surge.util.BlastResistance JUNGLE_FENCE -> MCaT
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> GSQu
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> HgWH
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> dOTb
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> kShI
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> HVUe
    react.surge.util.BlastResistance QUARTZ_STAIRS -> gOkr
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> SpEn
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> LcAK
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> dWbx
    react.surge.util.BlastResistance WOOD_STAIRS -> HVSo
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> qoLJ
    react.surge.util.BlastResistance ACACIA_DOOR -> keIQ
    react.surge.util.BlastResistance BIRCH_DOOR -> eQvI
    react.surge.util.BlastResistance DARK_OAK_DOOR -> pRTr
    react.surge.util.BlastResistance SPRUCE_DOOR -> Vglx
    react.surge.util.BlastResistance JUNGLE_DOOR -> cwEI
    react.surge.util.BlastResistance GOLD_ORE -> eIdx
    react.surge.util.BlastResistance HOPPER -> bYnQ
    react.surge.util.BlastResistance IRON_ORE -> HpGX
    react.surge.util.BlastResistance LAPIS_BLOCK -> btBB
    react.surge.util.BlastResistance LAPIS_ORE -> Vglq
    react.surge.util.BlastResistance QUARTZ_ORE -> dOSX
    react.surge.util.BlastResistance REDSTONE_ORE -> iDpC
    react.surge.util.BlastResistance TRAP_DOOR -> XnTT
    react.surge.util.BlastResistance WOOD -> TrkT
    react.surge.util.BlastResistance CHEST -> hldP
    react.surge.util.BlastResistance TRAPPED_CHEST -> diIR
    react.surge.util.BlastResistance WORKBENCH -> RctF
    react.surge.util.BlastResistance CAULDRON -> slcg
    react.surge.util.BlastResistance LOG -> ynTs
    react.surge.util.BlastResistance LOG_2 -> mIOr
    react.surge.util.BlastResistance BOOKSHELF -> VFNE
    react.surge.util.BlastResistance BANNER -> JuoW
    react.surge.util.BlastResistance STANDING_BANNER -> mHmt
    react.surge.util.BlastResistance WALL_BANNER -> FjDS
    react.surge.util.BlastResistance JACK_O_LANTERN -> BCcH
    react.surge.util.BlastResistance MELON_BLOCK -> pbyU
    react.surge.util.BlastResistance SKULL -> QicG
    react.surge.util.BlastResistance PUMPKIN -> NGGm
    react.surge.util.BlastResistance SIGN -> SDuA
    react.surge.util.BlastResistance SIGN_POST -> TPhd
    react.surge.util.BlastResistance WALL_SIGN -> Nhgq
    react.surge.util.BlastResistance QUARTZ_BLOCK -> LkRy
    react.surge.util.BlastResistance NOTE_BLOCK -> CyjX
    react.surge.util.BlastResistance RED_SANDSTONE -> QrQr
    react.surge.util.BlastResistance SANDSTONE -> IQIH
    react.surge.util.BlastResistance WOOL -> SMcl
    react.surge.util.BlastResistance MONSTER_EGG -> hdSM
    react.surge.util.BlastResistance RAILS -> USjX
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> RJaS
    react.surge.util.BlastResistance DETECTOR_RAIL -> Okjw
    react.surge.util.BlastResistance POWERED_RAIL -> ujXG
    react.surge.util.BlastResistance CLAY -> qnlO
    react.surge.util.BlastResistance DIRT -> jQGD
    react.surge.util.BlastResistance GRASS -> WHnn
    react.surge.util.BlastResistance GRAVEL -> LIPm
    react.surge.util.BlastResistance SPONGE -> GuWD
    react.surge.util.BlastResistance BREWING_STAND -> JdmL
    react.surge.util.BlastResistance STONE_BUTTON -> kdiy
    react.surge.util.BlastResistance WOOD_BUTTON -> kulN
    react.surge.util.BlastResistance CAKE_BLOCK -> QOpy
    react.surge.util.BlastResistance ICE -> uPiB
    react.surge.util.BlastResistance PACKED_ICE -> WcFG
    react.surge.util.BlastResistance LEVER -> OlNq
    react.surge.util.BlastResistance MYCEL -> jbKj
    react.surge.util.BlastResistance PISTON_BASE -> huXB
    react.surge.util.BlastResistance PISTON_EXTENSION -> ymva
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> XLUa
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> Xmwb
    react.surge.util.BlastResistance GOLD_PLATE -> sJbi
    react.surge.util.BlastResistance IRON_PLATE -> AtHC
    react.surge.util.BlastResistance STONE_PLATE -> nmvW
    react.surge.util.BlastResistance WOOD_PLATE -> vvNn
    react.surge.util.BlastResistance SAND -> RBTb
    react.surge.util.BlastResistance SOUL_SAND -> bQcK
    react.surge.util.BlastResistance CACTUS -> Enrc
    react.surge.util.BlastResistance LADDER -> hArE
    react.surge.util.BlastResistance NETHERRACK -> BKtm
    react.surge.util.BlastResistance GLASS -> lVoQ
    react.surge.util.BlastResistance THIN_GLASS -> xbao
    react.surge.util.BlastResistance STAINED_GLASS -> WHqH
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> lFMe
    react.surge.util.BlastResistance GLOWSTONE -> HDtx
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> lxpu
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> Xmvn
    react.surge.util.BlastResistance SEA_LANTERN -> Bvjp
    react.surge.util.BlastResistance BED_BLOCK -> HgYa
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> lyQy
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> rPOi
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> cvfs
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> SMfU
    react.surge.util.BlastResistance LEAVES -> DIju
    react.surge.util.BlastResistance LEAVES_2 -> iMda
    react.surge.util.BlastResistance SNOW -> qLjt
    int br -> bQbO
    react.surge.util.BlastResistance[] ENUM$VALUES -> SojC
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> lgCQ
    175:190:int get(org.bukkit.Material) -> wCdn
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> Mtrp:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> RroX
react.surge.util.C -> rFJM:
    react.surge.util.C BLACK -> ohhV
    react.surge.util.C DARK_BLUE -> lEks
    react.surge.util.C DARK_GREEN -> gOnn
    react.surge.util.C DARK_AQUA -> RdWC
    react.surge.util.C DARK_RED -> QqtS
    react.surge.util.C DARK_PURPLE -> XDEL
    react.surge.util.C GOLD -> LkUo
    react.surge.util.C GRAY -> ifwI
    react.surge.util.C DARK_GRAY -> hSSW
    react.surge.util.C BLUE -> IsQI
    react.surge.util.C GREEN -> Xmyo
    react.surge.util.C AQUA -> JvTH
    react.surge.util.C RED -> ChnR
    react.surge.util.C LIGHT_PURPLE -> fxEN
    react.surge.util.C YELLOW -> cDFg
    react.surge.util.C WHITE -> TbOK
    react.surge.util.C MAGIC -> VWSX
    react.surge.util.C BOLD -> Bvkh
    react.surge.util.C STRIKETHROUGH -> oGHr
    react.surge.util.C UNDERLINE -> cvjv
    react.surge.util.C ITALIC -> tfyI
    react.surge.util.C RESET -> wWPr
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> IbOm
    char code -> NGKd
    boolean isFormat -> yLVQ
    java.lang.String toString -> kTOL
    java.util.Map BY_ID -> TkAH
    java.util.Map BY_CHAR -> CNyt
    java.util.Map dyeChatMap -> AkWo
    java.util.Map chatHexMap -> ipKp
    java.util.Map dyeHexMap -> aOBg
    int[] $SWITCH_TABLE$surge$util$C -> iMgq
    react.surge.util.C[] ENUM$VALUES -> whSK
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> dpMU
    378:378:java.lang.String hex() -> ArWj
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> DHEP
    434:442:react.surge.util.C getByChar(java.lang.String) -> tmbI
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> rpKc
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> wCdn
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> rpKc
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> TpeI
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> STSC
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> uNai
    560:578:java.lang.String generateColorTable() -> HLYt
    588:588:org.bukkit.ChatColor chatColor() -> Fgus
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> NfcV
    632:679:byte getItemMeta() -> Vnrb
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> VUaL
react.surge.util.C$1 -> rFJM$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> rFJM$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> rFJM$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> rFJM$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> rFJM$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> rFJM$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> rFJM$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> rFJM$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> rFJM$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> rFJM$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> rFJM$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> rFJM$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> rFJM$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> rFJM$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> rFJM$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> rFJM$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> rFJM$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> rFJM$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> rFJM$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> rFJM$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> rFJM$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> rFJM$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> Iygw:
    double number -> Ajvm
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> tuns
    23:25:react.surge.util.CDou add(double) -> tCKc
    30:32:react.surge.util.CDou sub(double) -> UshF
    37:37:double get() -> get
    42:48:void circ() -> LaUf
react.surge.util.CMD -> fujo:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> QGcg
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> Kwcx
    51:53:void execute(org.bukkit.command.CommandSender) -> Elil
    60:77:void execute() -> execute
react.surge.util.CNum -> JRXT:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> tmbI
    23:25:react.surge.util.CNum add(int) -> STSC
    30:32:react.surge.util.CNum sub(int) -> uNai
    37:37:int get() -> get
    42:48:void circ() -> LaUf
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> kYuo
react.surge.util.Chunks -> nmBb:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> wCeF
    33:40:react.glang.GList getLoadedChunks() -> ycuj
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> rpKc
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> wCdn
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> wCdn
    98:98:boolean unload(org.bukkit.Chunk) -> lUHC
    114:124:int unload(react.glang.GList,boolean,boolean) -> wCdn
    138:138:int unload(react.glang.GList,boolean) -> wCdn
    150:150:int unload(react.glang.GList) -> wCeF
    166:166:boolean isLoaded(java.lang.String,int,int) -> wCdn
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> rpKc
    201:205:void load(react.glang.GList) -> HBno
react.surge.util.Cuboid -> CVVV:
    java.lang.String worldName -> smHX
    int x1 -> AcId
    int y1 -> jrmW
    int z1 -> VqDw
    int x2 -> vSmA
    int y2 -> qwbN
    int z2 -> FaVF
    int[] $SWITCH_TABLE$surge$util$Axis -> jGxy
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> Glht
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> wCdn
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> TpeI
    93:93:boolean hasPlayers() -> cJdf
    98:110:react.glang.GList getPlayers() -> CLyO
    115:166:react.glang.GList getEntities() -> OQMM
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> RkAM
    287:287:org.bukkit.Location getLowerNE() -> HTiB
    298:298:org.bukkit.Location getUpperSW() -> nKEc
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> qTNg
    348:348:int getSizeY() -> mGbB
    358:358:int getSizeZ() -> awbp
    368:368:int getLowerX() -> RHtJ
    378:378:int getLowerY() -> ealS
    388:388:int getLowerZ() -> dfxy
    398:398:int getUpperX() -> aMOc
    408:408:int getUpperY() -> YpKx
    418:418:int getUpperZ() -> TXLQ
    428:438:org.bukkit.block.Block[] corners() -> XdXR
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> wCdn
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> rpKc
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> TpeI
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> ooRp
    546:546:boolean contains(int,int,int) -> Elil
    558:558:boolean contains(org.bukkit.block.Block) -> NfcV
    570:570:boolean contains(org.bukkit.Location) -> IFSH
    580:580:int volume() -> gFQP
    591:601:byte averageLightLevel() -> kJLP
    612:612:react.surge.util.Cuboid contract() -> WHCo
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> wCdn
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> rpKc
    708:715:boolean containsOnly(org.bukkit.Material) -> rpKc
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> wCdn
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> RroX
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> wCdn
    786:800:java.util.List getChunks() -> xaSW
    815:819:void fill(int,byte) -> wCdn
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> Embn
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> HKwm
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> nJcp
react.surge.util.Cuboid$1 -> CVVV$1:
    react.surge.util.Cuboid this$0 -> qnow
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> IFSH
    1:1:java.lang.Object onAdapt(java.lang.Object) -> NfcV
react.surge.util.Cuboid$CuboidDirection -> CVVV$wCdn:
    react.surge.util.Cuboid$CuboidDirection North -> yfHE
    react.surge.util.Cuboid$CuboidDirection East -> Trnd
    react.surge.util.Cuboid$CuboidDirection South -> jsNL
    react.surge.util.Cuboid$CuboidDirection West -> usLn
    react.surge.util.Cuboid$CuboidDirection Up -> BKxV
    react.surge.util.Cuboid$CuboidDirection Down -> MLWt
    react.surge.util.Cuboid$CuboidDirection Horizontal -> BChL
    react.surge.util.Cuboid$CuboidDirection Vertical -> GmKA
    react.surge.util.Cuboid$CuboidDirection Both -> QrVn
    react.surge.util.Cuboid$CuboidDirection Unknown -> XLVx
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> Glht
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> bACV
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> VUaU
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> nJcp
react.surge.util.Cuboid$CuboidIterator -> CVVV$rpKc:
    org.bukkit.World w -> pJOI
    int baseX -> etba
    int baseY -> ExHU
    int baseZ -> Dkrl
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> xIUX
    int sizeY -> usQF
    int sizeZ -> EMTR
    react.surge.util.Cuboid this$0 -> qnow
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> ebFk:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> RjqD:
    react.glang.GList buffer -> HyAT
    10:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    14:18:void flush() -> flush
    22:33:void log(java.lang.String,java.lang.String) -> ooRp
    37:38:void l(java.lang.Object,java.lang.String) -> rpKc
    42:43:void s(java.lang.Object,java.lang.String) -> TpeI
    47:48:void v(java.lang.Object,java.lang.String) -> ooRp
    52:53:void w(java.lang.Object,java.lang.String) -> Elil
    57:58:void f(java.lang.Object,java.lang.String) -> RroX
    62:69:void l(java.lang.String) -> kYuo
    73:80:void s(java.lang.String) -> RkAM
    84:91:void v(java.lang.String) -> YoTl
    95:102:void w(java.lang.String) -> iTOx
    106:113:void f(java.lang.String) -> XcaE
react.surge.util.DMSRequire -> RYoP:
    react.surge.util.DMSRequirement value() -> stGQ
react.surge.util.DMSRequirement -> iKpL:
    react.surge.util.DMSRequirement SQL -> yKwc
    react.surge.util.DMSRequirement[] ENUM$VALUES -> dypB
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> SwFY:
    react.surge.util.Depend VAULT -> hRxG
    react.surge.util.Depend FAWE -> yejO
    react.surge.util.Depend WORLDEDIT -> NXOS
    react.surge.util.Depend PROTOLIB -> HpPV
    react.surge.util.Depend CITIZENS -> rHEG
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> mITy
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> htAU:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> KMQl
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> OQGY:
    react.surge.util.DimensionFace X -> wgse
    react.surge.util.DimensionFace Y -> kuro
    react.surge.util.DimensionFace Z -> aOEL
    react.surge.util.DimensionFace[] ENUM$VALUES -> TPnm
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> nRmi:
    react.surge.util.Direction U -> vmbV
    react.surge.util.Direction D -> WtKe
    react.surge.util.Direction N -> ELrK
    react.surge.util.Direction S -> Fqwm
    react.surge.util.Direction E -> mjvl
    react.surge.util.Direction W -> xtHe
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> kmbP
    int[] $SWITCH_TABLE$surge$util$Direction -> FjHf
    react.surge.util.Direction[] ENUM$VALUES -> gqwB
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> IhnL
    61:61:int x() -> xPTs
    66:66:int y() -> xHEK
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> HCip
    81:81:react.glang.GList news() -> PvVP
    86:86:react.glang.GList udnews() -> rgtr
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> kcEk
    115:147:react.surge.util.Direction fromByte(byte) -> DHEP
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> DkDC
react.surge.util.DynamicConfiguration -> CgVg:
react.surge.util.DynamicTracker -> rFIW:
react.surge.util.Embedded -> TNsr:
    react.glang.GList get() -> qeSR
    void add(java.lang.Object) -> add
react.surge.util.FU -> RcAi:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> wCdn
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> rpKc
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> Elil
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> RroX
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> NEVD:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> Xtaf
react.surge.util.Health -> CEUq:
    double hp -> Udqo
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> htKU
    41:41:double getHearts() -> qTRK
    51:51:double getHalfHearts() -> CpPn
    61:61:int getFlatHalfHearts() -> FOFj
react.surge.util.IO -> CNFv:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> Orki:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> wCdn
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> wCdn
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> wCdn
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> wCdn
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> wCdn
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> rpKc
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> TpeI
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> ooRp
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> wCdn
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> wCdn
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> wCdn
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> wCdn
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> Elil
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> RroX
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> NfcV
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> DHEP
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> qdWH
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> wCdn
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> IFSH
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> EAvL
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> wCdn
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> wCdn
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> rpKc
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> wCdn
react.surge.util.MSound -> Fgpu:
    react.surge.util.MSound AMBIENCE_CAVE -> whSr
    react.surge.util.MSound AMBIENCE_RAIN -> VErC
    react.surge.util.MSound AMBIENCE_THUNDER -> WRGN
    react.surge.util.MSound ANVIL_BREAK -> ARJL
    react.surge.util.MSound ANVIL_LAND -> YXLt
    react.surge.util.MSound ANVIL_USE -> eImI
    react.surge.util.MSound ARROW_HIT -> SMjf
    react.surge.util.MSound BURP -> mADV
    react.surge.util.MSound CHEST_CLOSE -> JmdU
    react.surge.util.MSound CHEST_OPEN -> RmKm
    react.surge.util.MSound CLICK -> XekR
    react.surge.util.MSound DOOR_CLOSE -> lOCO
    react.surge.util.MSound DOOR_OPEN -> Xemm
    react.surge.util.MSound DRINK -> cTlF
    react.surge.util.MSound EAT -> oiPg
    react.surge.util.MSound EXPLODE -> FOwu
    react.surge.util.MSound FALL_BIG -> vCQb
    react.surge.util.MSound FALL_SMALL -> vnFK
    react.surge.util.MSound FIRE -> riiQ
    react.surge.util.MSound FIRE_IGNITE -> IsUT
    react.surge.util.MSound FIZZ -> tpOn
    react.surge.util.MSound FUSE -> usRl
    react.surge.util.MSound GLASS -> yCiH
    react.surge.util.MSound HURT_FLESH -> MDMK
    react.surge.util.MSound ITEM_BREAK -> OlUn
    react.surge.util.MSound ITEM_PICKUP -> AsmE
    react.surge.util.MSound LAVA -> dFnG
    react.surge.util.MSound LAVA_POP -> nULJ
    react.surge.util.MSound LEVEL_UP -> vBpE
    react.surge.util.MSound MINECART_BASE -> MfOs
    react.surge.util.MSound MINECART_INSIDE -> bIYF
    react.surge.util.MSound NOTE_BASS -> YaBJ
    react.surge.util.MSound NOTE_PIANO -> Irtf
    react.surge.util.MSound NOTE_BASS_DRUM -> Abjn
    react.surge.util.MSound NOTE_STICKS -> bHxE
    react.surge.util.MSound NOTE_BASS_GUITAR -> OceK
    react.surge.util.MSound NOTE_SNARE_DRUM -> dFkw
    react.surge.util.MSound NOTE_PLING -> vBny
    react.surge.util.MSound ORB_PICKUP -> XUKv
    react.surge.util.MSound PISTON_EXTEND -> XDJf
    react.surge.util.MSound PISTON_RETRACT -> gYGf
    react.surge.util.MSound PORTAL -> wNdB
    react.surge.util.MSound PORTAL_TRAVEL -> YrAv
    react.surge.util.MSound PORTAL_TRIGGER -> XDJj
    react.surge.util.MSound SHOOT_ARROW -> diPS
    react.surge.util.MSound SPLASH -> LYxv
    react.surge.util.MSound SPLASH2 -> KqJO
    react.surge.util.MSound STEP_GRASS -> dXNa
    react.surge.util.MSound STEP_GRAVEL -> cKxw
    react.surge.util.MSound STEP_LADDER -> foWH
    react.surge.util.MSound STEP_SAND -> Effo
    react.surge.util.MSound STEP_SNOW -> FXiC
    react.surge.util.MSound STEP_STONE -> UeUL
    react.surge.util.MSound STEP_WOOD -> AtNh
    react.surge.util.MSound STEP_WOOL -> Rllf
    react.surge.util.MSound SWIM -> NyrX
    react.surge.util.MSound WATER -> oyoe
    react.surge.util.MSound WOOD_CLICK -> lpfh
    react.surge.util.MSound BAT_DEATH -> Xvnn
    react.surge.util.MSound BAT_HURT -> mYwV
    react.surge.util.MSound BAT_IDLE -> bAGY
    react.surge.util.MSound BAT_LOOP -> AcOL
    react.surge.util.MSound BAT_TAKEOFF -> pIqn
    react.surge.util.MSound BLAZE_BREATH -> YOaW
    react.surge.util.MSound BLAZE_DEATH -> Mnac
    react.surge.util.MSound BLAZE_HIT -> fEEn
    react.surge.util.MSound CAT_HISS -> fnxh
    react.surge.util.MSound CAT_HIT -> tpQq
    react.surge.util.MSound CAT_MEOW -> dWqA
    react.surge.util.MSound CAT_PURR -> UKdv
    react.surge.util.MSound CAT_PURREOW -> KOJR
    react.surge.util.MSound CHICKEN_IDLE -> ExMJ
    react.surge.util.MSound CHICKEN_HURT -> rHHX
    react.surge.util.MSound CHICKEN_EGG_POP -> mQjF
    react.surge.util.MSound CHICKEN_WALK -> qEER
    react.surge.util.MSound COW_IDLE -> vLDQ
    react.surge.util.MSound COW_HURT -> cwRV
    react.surge.util.MSound COW_WALK -> xYyY
    react.surge.util.MSound CREEPER_HISS -> OtiA
    react.surge.util.MSound CREEPER_DEATH -> xskq
    react.surge.util.MSound ENDERDRAGON_DEATH -> vSse
    react.surge.util.MSound ENDERDRAGON_GROWL -> yvoT
    react.surge.util.MSound ENDERDRAGON_HIT -> DSGV
    react.surge.util.MSound ENDERDRAGON_WINGS -> DSFu
    react.surge.util.MSound ENDERMAN_DEATH -> lVvy
    react.surge.util.MSound ENDERMAN_HIT -> vnGW
    react.surge.util.MSound ENDERMAN_IDLE -> yemY
    react.surge.util.MSound ENDERMAN_TELEPORT -> cemy
    react.surge.util.MSound ENDERMAN_SCREAM -> oFnH
    react.surge.util.MSound ENDERMAN_STARE -> Lsml
    react.surge.util.MSound GHAST_SCREAM -> mbje
    react.surge.util.MSound GHAST_SCREAM2 -> mbkF
    react.surge.util.MSound GHAST_CHARGE -> CaEc
    react.surge.util.MSound GHAST_DEATH -> ohqH
    react.surge.util.MSound GHAST_FIREBALL -> fLtX
    react.surge.util.MSound GHAST_MOAN -> IQRt
    react.surge.util.MSound IRONGOLEM_DEATH -> IICN
    react.surge.util.MSound IRONGOLEM_HIT -> LbmE
    react.surge.util.MSound IRONGOLEM_THROW -> qwiB
    react.surge.util.MSound IRONGOLEM_WALK -> jsUJ
    react.surge.util.MSound MAGMACUBE_WALK -> LRKv
    react.surge.util.MSound MAGMACUBE_WALK2 -> hllj
    react.surge.util.MSound MAGMACUBE_JUMP -> tpPY
    react.surge.util.MSound PIG_IDLE -> aWYA
    react.surge.util.MSound PIG_DEATH -> oaAV
    react.surge.util.MSound PIG_WALK -> OBDA
    react.surge.util.MSound SHEEP_IDLE -> sAwi
    react.surge.util.MSound SHEEP_SHEAR -> HhCW
    react.surge.util.MSound SHEEP_WALK -> eSDL
    react.surge.util.MSound SILVERFISH_HIT -> NGPt
    react.surge.util.MSound SILVERFISH_KILL -> bsmQ
    react.surge.util.MSound SILVERFISH_IDLE -> CqeT
    react.surge.util.MSound SILVERFISH_WALK -> xskV
    react.surge.util.MSound SKELETON_IDLE -> tyAe
    react.surge.util.MSound SKELETON_DEATH -> hJiv
    react.surge.util.MSound SKELETON_HURT -> fgKQ
    react.surge.util.MSound SKELETON_WALK -> MwUX
    react.surge.util.MSound SLIME_ATTACK -> eRew
    react.surge.util.MSound SLIME_WALK -> BvtL
    react.surge.util.MSound SLIME_WALK2 -> oytl
    react.surge.util.MSound SPIDER_IDLE -> TjhC
    react.surge.util.MSound SPIDER_DEATH -> sJkw
    react.surge.util.MSound SPIDER_WALK -> iNQS
    react.surge.util.MSound WITHER_DEATH -> HNTD
    react.surge.util.MSound WITHER_HURT -> oWqq
    react.surge.util.MSound WITHER_IDLE -> KOLf
    react.surge.util.MSound WITHER_SHOOT -> GvDq
    react.surge.util.MSound WITHER_SPAWN -> OAdV
    react.surge.util.MSound WOLF_BARK -> PfjX
    react.surge.util.MSound WOLF_DEATH -> KNjH
    react.surge.util.MSound WOLF_GROWL -> bsnj
    react.surge.util.MSound WOLF_HOWL -> jQTD
    react.surge.util.MSound WOLF_HURT -> pAcG
    react.surge.util.MSound WOLF_PANT -> PDgU
    react.surge.util.MSound WOLF_SHAKE -> CGTg
    react.surge.util.MSound WOLF_WALK -> Akan
    react.surge.util.MSound WOLF_WHINE -> DdHp
    react.surge.util.MSound ZOMBIE_METAL -> DSGa
    react.surge.util.MSound ZOMBIE_WOOD -> plWY
    react.surge.util.MSound ZOMBIE_WOODBREAK -> UnJS
    react.surge.util.MSound ZOMBIE_IDLE -> BTrP
    react.surge.util.MSound ZOMBIE_DEATH -> qxJh
    react.surge.util.MSound ZOMBIE_HURT -> dPCV
    react.surge.util.MSound ZOMBIE_INFECT -> bcOK
    react.surge.util.MSound ZOMBIE_UNFECT -> vSsx
    react.surge.util.MSound ZOMBIE_REMEDY -> HxfJ
    react.surge.util.MSound ZOMBIE_WALK -> HyGJ
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> rYKP
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> eAcY
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> YyvL
    react.surge.util.MSound ZOMBIE_PIG_HURT -> vnGx
    react.surge.util.MSound DIG_WOOL -> SxeY
    react.surge.util.MSound DIG_GRASS -> IsYL
    react.surge.util.MSound DIG_GRAVEL -> CaGI
    react.surge.util.MSound DIG_SAND -> BDQO
    react.surge.util.MSound DIG_SNOW -> eSIJ
    react.surge.util.MSound DIG_STONE -> WbqN
    react.surge.util.MSound DIG_WOOD -> YFtV
    react.surge.util.MSound FIREWORK_BLAST -> OdKY
    react.surge.util.MSound FIREWORK_BLAST2 -> rjOt
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> XCph
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> JCYi
    react.surge.util.MSound FIREWORK_TWINKLE -> cncx
    react.surge.util.MSound FIREWORK_TWINKLE2 -> svDG
    react.surge.util.MSound FIREWORK_LAUNCH -> TYgx
    react.surge.util.MSound SUCCESSFUL_HIT -> WcSA
    react.surge.util.MSound HORSE_ANGRY -> sJmw
    react.surge.util.MSound HORSE_ARMOR -> ChyM
    react.surge.util.MSound HORSE_BREATHE -> veYu
    react.surge.util.MSound HORSE_DEATH -> Beuq
    react.surge.util.MSound HORSE_GALLOP -> gsAH
    react.surge.util.MSound HORSE_HIT -> Qiny
    react.surge.util.MSound HORSE_IDLE -> COft
    react.surge.util.MSound HORSE_JUMP -> qfkG
    react.surge.util.MSound HORSE_LAND -> XTrD
    react.surge.util.MSound HORSE_SADDLE -> GCAK
    react.surge.util.MSound HORSE_SOFT -> NaHA
    react.surge.util.MSound HORSE_WOOD -> Yhuh
    react.surge.util.MSound DONKEY_ANGRY -> WlBP
    react.surge.util.MSound DONKEY_DEATH -> pIuV
    react.surge.util.MSound DONKEY_HIT -> lpme
    react.surge.util.MSound DONKEY_IDLE -> xQlY
    react.surge.util.MSound HORSE_SKELETON_DEATH -> MwWD
    react.surge.util.MSound HORSE_SKELETON_HIT -> mALY
    react.surge.util.MSound HORSE_SKELETON_IDLE -> dGSk
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> rGjV
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> rYLh
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> rime
    react.surge.util.MSound VILLAGER_DEATH -> HNUJ
    react.surge.util.MSound VILLAGER_HAGGLE -> ubVU
    react.surge.util.MSound VILLAGER_HIT -> cTqS
    react.surge.util.MSound VILLAGER_IDLE -> wpok
    react.surge.util.MSound VILLAGER_NO -> Ruff
    react.surge.util.MSound VILLAGER_YES -> FYRd
    java.lang.String pre19sound -> IkMR
    java.lang.String post19sound -> iyJP
    org.bukkit.Sound resolvedSound -> WJAn
    react.surge.util.MSound[] ENUM$VALUES -> nwWm
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> antg
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> qunG:
    org.bukkit.Material material -> ARRr
    java.lang.Byte data -> FPag
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> qCOw
    79:80:void setData(java.lang.Byte) -> wCdn
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> mrSI:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> McaX
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> FgxF
    68:68:boolean isAnyOnline() -> kIoO
    80:80:react.glang.GList inWorld(org.bukkit.World) -> HBno
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> XJMl
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> wCdn
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> wCdn
    143:144:void disable(org.bukkit.entity.Player) -> srlg
    154:155:void enable(org.bukkit.entity.Player) -> VUGm
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> wCdn
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> rpKc
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> LynL
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> wCdn
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> bFhF
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> TpeI
    300:300:boolean canFindPlayer(java.lang.String) -> vtII
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> aLWp
    338:345:react.glang.GList onlinePlayers() -> BBYI
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> IWRq
    368:371:void clear(org.bukkit.entity.Player) -> tuns
    381:385:void clearEffects(org.bukkit.entity.Player) -> tCKc
    398:399:void heal(org.bukkit.entity.Player,double) -> wCdn
    409:410:void heal(org.bukkit.entity.Player) -> UshF
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> qKDK
    432:433:void resetHunger(org.bukkit.entity.Player) -> VCfX
    443:444:void kill(org.bukkit.entity.Player) -> xWgw
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> YMOn
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> jyTN
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> wCdn
react.surge.util.P$1 -> mrSI$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> IFSH
    1:1:java.lang.Object onAdapt(java.lang.Object) -> NfcV
react.surge.util.P$2 -> mrSI$2:
    java.lang.Double val$doff -> GTEh
    org.bukkit.entity.Player val$e -> cCrn
    org.bukkit.entity.Entity[] val$result -> aycD
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> EAvL
react.surge.util.PE -> Gseb:
    react.surge.util.PE ABSORPTION -> PVPH
    react.surge.util.PE BLINDNESS -> smSn
    react.surge.util.PE CONFUSION -> Kyau
    react.surge.util.PE DAMAGE_RESISTANCE -> bkbe
    react.surge.util.PE FAST_DIGGING -> MLdH
    react.surge.util.PE FIRE_RESISTANCE -> sKQV
    react.surge.util.PE GLOWING -> bsrg
    react.surge.util.PE HARM -> aONE
    react.surge.util.PE HEAL -> NFuj
    react.surge.util.PE HEALTH_BOOST -> vSxw
    react.surge.util.PE HUNGER -> fxPY
    react.surge.util.PE INCREASE_DAMAGE -> fDkL
    react.surge.util.PE INVISIBILITY -> fgOH
    react.surge.util.PE JUMP -> EfpD
    react.surge.util.PE LEVITATION -> DdMd
    react.surge.util.PE LUCK -> pAex
    react.surge.util.PE NIGHT_VISION -> BDTv
    react.surge.util.PE POISON -> GCDB
    react.surge.util.PE REGENERATION -> hJsd
    react.surge.util.PE SATURATION -> VWbL
    react.surge.util.PE SLOW -> dPIg
    react.surge.util.PE SLOW_DIGGING -> thIe
    react.surge.util.PE SPEED -> QbET
    react.surge.util.PE UNLUCK -> TjnG
    react.surge.util.PE WATER_BREATHING -> qUoH
    react.surge.util.PE WEAKNESS -> risX
    react.surge.util.PE WITHER -> ptoD
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> wCdn
    144:144:react.surge.util.PE d(int) -> YoTl
    156:156:react.surge.util.PE a(int) -> iTOx
    166:166:org.bukkit.potion.PotionEffect c() -> iDIP
    177:178:void c(org.bukkit.entity.LivingEntity) -> RroX
    182:183:void crm(org.bukkit.entity.LivingEntity) -> NfcV
    187:188:void rm(org.bukkit.entity.LivingEntity) -> DHEP
react.surge.util.ParticleEffect -> Cwyq:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> pRkb
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> CPKN
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> BTwO
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> MCvQ
    react.surge.util.ParticleEffect WATER_BUBBLE -> XoKP
    react.surge.util.ParticleEffect WATER_SPLASH -> Sgjg
    react.surge.util.ParticleEffect WATER_WAKE -> noHl
    react.surge.util.ParticleEffect SUSPENDED -> noHr
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> GBfD
    react.surge.util.ParticleEffect CRIT -> BUWi
    react.surge.util.ParticleEffect CRIT_MAGIC -> BMHA
    react.surge.util.ParticleEffect SMOKE_NORMAL -> PpCI
    react.surge.util.ParticleEffect SMOKE_LARGE -> vLLJ
    react.surge.util.ParticleEffect SPELL -> MMFf
    react.surge.util.ParticleEffect SPELL_INSTANT -> sScT
    react.surge.util.ParticleEffect SPELL_MOB -> UKkw
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> xRRH
    react.surge.util.ParticleEffect SPELL_WITCH -> dPIC
    react.surge.util.ParticleEffect DRIP_WATER -> xkdB
    react.surge.util.ParticleEffect DRIP_LAVA -> YFwM
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> gabb
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> dhyX
    react.surge.util.ParticleEffect TOWN_AURA -> EUol
    react.surge.util.ParticleEffect NOTE -> eBKL
    react.surge.util.ParticleEffect PORTAL -> WcVB
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> IIKb
    react.surge.util.ParticleEffect FLAME -> qxPk
    react.surge.util.ParticleEffect LAVA -> gHPg
    react.surge.util.ParticleEffect FOOTSTEP -> KOQa
    react.surge.util.ParticleEffect CLOUD -> cfWj
    react.surge.util.ParticleEffect REDSTONE -> lpqV
    react.surge.util.ParticleEffect SNOWBALL -> mcSl
    react.surge.util.ParticleEffect SNOW_SHOVEL -> MoKC
    react.surge.util.ParticleEffect SLIME -> nTwd
    react.surge.util.ParticleEffect HEART -> KOSq
    react.surge.util.ParticleEffect BARRIER -> UwDo
    react.surge.util.ParticleEffect ITEM_CRACK -> wydt
    react.surge.util.ParticleEffect BLOCK_CRACK -> DuTJ
    react.surge.util.ParticleEffect BLOCK_DUST -> tWIw
    react.surge.util.ParticleEffect WATER_DROP -> LlIr
    react.surge.util.ParticleEffect ITEM_TAKE -> tMxW
    react.surge.util.ParticleEffect MOB_APPEARANCE -> pBLv
    react.surge.util.ParticleEffect DRAGON_BREATH -> hBeL
    react.surge.util.ParticleEffect END_ROD -> MCww
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> SEjJ
    react.surge.util.ParticleEffect SWEEP_ATTACK -> CPMK
    java.util.Map NAME_MAP -> lOQr
    java.util.Map ID_MAP -> qgRh
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> PNDA
    java.util.List properties -> txlQ
    react.surge.util.ParticleEffect[] ENUM$VALUES -> KqWm
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> KxHk
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> wCdn
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> kYti
    557:565:react.surge.util.ParticleEffect fromId(int) -> XcaE
    577:578:boolean isWater(org.bukkit.Location) -> EKHT
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> wCdn
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> wCdn
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> wCdn
    665:681:void display(float,int,org.bukkit.Location,double) -> wCdn
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> wCdn
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> wCdn
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> wCdn
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> wCdn
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> wCdn
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> wCdn
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> wCdn
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> wCdn
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> wCdn
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> wCdn
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> wCdn
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> wCdn
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> wCdn
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> wCdn
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> Cwyq$wCdn:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> Cwyq$rpKc:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> Cwyq$TpeI:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> Fgwk
    1594:1594:float getValueY() -> lDaO
    1605:1605:float getValueZ() -> jXMc
react.surge.util.ParticleEffect$OrdinaryColor -> Cwyq$ooRp:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> Fgwk
    1526:1526:float getValueY() -> lDaO
    1537:1537:float getValueZ() -> jXMc
react.surge.util.ParticleEffect$ParticleColor -> Cwyq$Elil:
    1383:1383:void <init>() -> <init>
    float getValueX() -> Fgwk
    float getValueY() -> lDaO
    float getValueZ() -> jXMc
react.surge.util.ParticleEffect$ParticleColorException -> Cwyq$RroX:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> Cwyq$NfcV:
    org.bukkit.Material material -> ARRr
    byte data -> MoKp
    int[] packetData -> AQwb
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> BRxp
    1309:1309:java.lang.String getPacketDataString() -> hYvn
react.surge.util.ParticleEffect$ParticleDataException -> Cwyq$DHEP:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> Cwyq$qdWH:
    int version -> version
    java.lang.Class enumParticle -> RlyN
    java.lang.reflect.Constructor packetConstructor -> gbEd
    java.lang.reflect.Method getHandle -> vfAL
    java.lang.reflect.Field playerConnection -> bbuX
    java.lang.reflect.Method sendPacket -> wOQS
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> seGm
    float offsetX -> RmYu
    float offsetY -> xJCW
    float offsetZ -> JUBG
    float speed -> vLLv
    int amount -> CVhb
    boolean longDistance -> JKoh
    react.surge.util.ParticleEffect$ParticleData data -> xkeS
    java.lang.Object packet -> uHic
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> lUHC
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> wCdn
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> rpKc
    2004:2018:void sendTo(org.bukkit.Location,double) -> rpKc
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> Cwyq$qdWH$wCdn:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> Cwyq$qdWH$rpKc:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> Cwyq$qdWH$TpeI:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> Cwyq$IFSH:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> KqWO
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> newm
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> ViFJ
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> ukQR
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> lpvb
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> Cwyq$EAvL:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> hkTN:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> srnS
react.surge.util.Persist -> hIPn:
react.surge.util.PluginUtil -> miaG:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> Elil
    81:85:void enableAll() -> xjGW
    95:99:void disable(org.bukkit.plugin.Plugin) -> RroX
    106:110:void disableAll() -> nBVq
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> NfcV
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> wCdn
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> pYDa
    169:172:java.util.List getPluginNames(boolean) -> aUIF
    184:187:java.lang.String getPluginVersion(java.lang.String) -> mymh
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> DHEP
    237:316:java.util.List findByCommand(java.lang.String) -> GbPl
    337:338:void load(org.bukkit.plugin.Plugin) -> qdWH
    342:364:java.lang.String getPluginFileName(java.lang.String) -> hQMK
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> wCdn
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> IFSH
    480:484:void reloadAll() -> lEBV
    496:622:void unload(org.bukkit.plugin.Plugin) -> EAvL
react.surge.util.PoolCount -> maQD:
react.surge.util.PoolDescriber -> AYBS:
react.surge.util.PoolNanoThrottle -> ycqg:
react.surge.util.PositionalSelector -> upxL:
    react.glang.GSet allowedChunks -> qxVb
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> LOts
    39:40:void addChunk(org.bukkit.Chunk) -> wCeF
    44:44:react.glang.GSet getAllowedChunks() -> lEAY
react.surge.util.Protocol -> YUvM:
    react.surge.util.Protocol LATEST -> ORqQ
    react.surge.util.Protocol R1_12_2 -> RvNK
    react.surge.util.Protocol R1_12_2_PRE -> Dttk
    react.surge.util.Protocol R1_12_1 -> ecqS
    react.surge.util.Protocol R1_12 -> XoOQ
    react.surge.util.Protocol R1_11_2 -> fNCy
    react.surge.util.Protocol R1_11_1 -> vvcp
    react.surge.util.Protocol R1_11 -> LIhd
    react.surge.util.Protocol R1_10_2 -> pmBm
    react.surge.util.Protocol R1_10_1 -> Olbj
    react.surge.util.Protocol R1_10 -> PxWS
    react.surge.util.Protocol R1_9_4 -> sdiN
    react.surge.util.Protocol R1_9_3 -> xJEe
    react.surge.util.Protocol R1_9_2 -> AAXs
    react.surge.util.Protocol R1_9_1 -> qUrA
    react.surge.util.Protocol R1_9 -> AAXq
    react.surge.util.Protocol R1_8_9 -> vwDa
    react.surge.util.Protocol R1_8_8 -> cCxV
    react.surge.util.Protocol R1_8_7 -> bAUr
    react.surge.util.Protocol R1_8_6 -> rPdF
    react.surge.util.Protocol R1_8_5 -> puQn
    react.surge.util.Protocol R1_8_4 -> xtYK
    react.surge.util.Protocol R1_8_3 -> FbIf
    react.surge.util.Protocol R1_8_2 -> gXuO
    react.surge.util.Protocol R1_8_1 -> orOU
    react.surge.util.Protocol R1_8 -> Khio
    react.surge.util.Protocol R1_7_10 -> vmts
    react.surge.util.Protocol R1_7_9 -> eApc
    react.surge.util.Protocol R1_7_8 -> gGva
    react.surge.util.Protocol R1_7_7 -> UwHs
    react.surge.util.Protocol R1_7_6 -> keeb
    react.surge.util.Protocol R1_7_5 -> qgWS
    react.surge.util.Protocol R1_7_4 -> nnoC
    react.surge.util.Protocol R1_7_3 -> aiJL
    react.surge.util.Protocol R1_7_2 -> TIQk
    react.surge.util.Protocol R1_7_1 -> JwJG
    react.surge.util.Protocol B1_6_4 -> jcCb
    react.surge.util.Protocol B1_6_3 -> apyQ
    react.surge.util.Protocol B1_6_2 -> xbye
    react.surge.util.Protocol B1_6_1 -> lFeh
    react.surge.util.Protocol B1_5_2 -> TjtR
    react.surge.util.Protocol B1_5_1 -> fxYL
    react.surge.util.Protocol B1_5 -> kTca
    react.surge.util.Protocol B1_4_7 -> sTJr
    react.surge.util.Protocol B1_4_6 -> DAqW
    react.surge.util.Protocol B1_4_5 -> IQbv
    react.surge.util.Protocol B1_4_4 -> bAYL
    react.surge.util.Protocol B1_4_2 -> fETD
    react.surge.util.Protocol B1_3_2 -> JefK
    react.surge.util.Protocol B1_3_1 -> IkTX
    react.surge.util.Protocol B1_2_5 -> gixj
    react.surge.util.Protocol B1_2_4 -> HyRg
    react.surge.util.Protocol EARLIEST -> xbxk
    react.surge.util.Protocol UNKNOWN -> WQyN
    int version -> version
    java.lang.String packageVersion -> RvOY
    java.lang.String versionName -> mRYO
    boolean netty -> tyQH
    react.surge.util.Protocol[] ENUM$VALUES -> WAWq
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> rOCV
    118:118:java.lang.String getPackageVersion() -> AYIi
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> jFkE
    142:150:react.surge.util.Protocol getProtocolVersion() -> ifLH
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> rpKc
    160:160:boolean isServerVersion() -> migF
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> PnEU
    175:175:boolean isActualVersion() -> BKKX
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> KfeT
    200:200:int getMetaVersion() -> GQhK
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> mOnT:
    react.surge.util.Protocol from -> euUG
    react.surge.util.Protocol to -> lhgj
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> nAvA
    21:21:react.surge.util.Protocol getTo() -> aLqc
    26:26:boolean contains(react.surge.util.Protocol) -> TpeI
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> WrSo:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> XmKf
    70:70:int randomNextInt() -> aEAp
    80:80:long randomNextLong() -> FFUT
    92:92:boolean isWithin(double) -> qKDK
    104:104:boolean isWithin(int) -> Xtaf
    116:116:boolean isWithin(long) -> kcEk
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> VCfX
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> iupr
react.surge.util.RawEvent -> HnXn:
react.surge.util.RayTrace -> Nogk:
    org.bukkit.Location start -> RSkR
    org.bukkit.util.Vector direction -> UUEN
    java.lang.Double maxDistance -> cDYy
    java.lang.Double distanceCovered -> coPC
    java.lang.Double step -> liHN
    java.lang.Boolean stop -> QHXW
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> lVEm
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> EAvL
    89:89:org.bukkit.Location getStart() -> scKQ
    94:95:void setStart(org.bukkit.Location) -> XJMl
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> oxaI
    114:115:void setMaxDistance(java.lang.Double) -> ooRp
    119:119:java.lang.Double getDistanceCovered() -> kIqN
    124:125:void setDistanceCovered(java.lang.Double) -> Elil
    129:129:java.lang.Double getStep() -> rqIe
    134:135:void setStep(java.lang.Double) -> RroX
react.surge.util.ReflectionUtils -> YNDw:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> wCdn
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> wCdn
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> wCdn
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> wCdn
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> wCdn
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> wCdn
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> wCdn
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> wCdn
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> wCdn
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> wCdn
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> wCdn
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> wCdn
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> wCdn
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> wCdn
react.surge.util.ReflectionUtils$DataType -> YNDw$wCdn:
    react.surge.util.ReflectionUtils$DataType BYTE -> yDYY
    react.surge.util.ReflectionUtils$DataType SHORT -> JfHA
    react.surge.util.ReflectionUtils$DataType INTEGER -> fpHE
    react.surge.util.ReflectionUtils$DataType LONG -> GCLI
    react.surge.util.ReflectionUtils$DataType CHARACTER -> oOlw
    react.surge.util.ReflectionUtils$DataType FLOAT -> xkiV
    react.surge.util.ReflectionUtils$DataType DOUBLE -> sdkF
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> nCyL
    java.util.Map CLASS_MAP -> pBPF
    java.lang.Class primitive -> HVrE
    java.lang.Class reference -> DSWL
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> coQo
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> WjLQ
    704:704:java.lang.Class getReference() -> Cgap
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> rpKc
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> TpeI
    741:742:java.lang.Class getReference(java.lang.Class) -> ooRp
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> wCdn
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> rpKc
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> rpKc
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> TpeI
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> wCdn
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> YNDw$rpKc:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> eKEJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> jjtp
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> DJfO
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> WuAI
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> OJeT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> ShTV
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> vwHl
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> nLlo
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> iqDA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> ORvC
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> ubbu
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> nLmT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> JCfg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> Olhg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> XMOm
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> RmbD
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> lFgV
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> elfs
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> jABX
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> jQcK
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> bJJo
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> NMdj:
    void refresh() -> refresh
react.surge.util.SQLOperation -> annO:
    react.surge.util.SQLOperation LOAD -> cMMo
    react.surge.util.SQLOperation SAVE -> ipal
    react.surge.util.SQLOperation[] ENUM$VALUES -> CrVJ
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> WOnb:
    react.surge.util.ServerState START -> uHoq
    react.surge.util.ServerState ENABLE -> JLUy
    react.surge.util.ServerState DISABLE -> BLqA
    react.surge.util.ServerState STOP -> ojBy
    react.surge.util.ServerState RUNNING -> SgrL
    react.surge.util.ServerState[] ENUM$VALUES -> OSTy
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> JlLp:
    org.bukkit.Location location -> GRko
    org.bukkit.util.Vector offset -> xAYH
    org.bukkit.util.Vector size -> MwcM
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> wCeF
    90:94:org.bukkit.Location randomLocation() -> VMUy
    104:104:org.bukkit.Location randomSurface() -> OPrD
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> ebRn
    129:129:org.bukkit.util.Vector getSize() -> iDJv
react.surge.util.SnowLevel -> rgnK:
    byte level -> THrT
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> afgV
    51:52:void setLevel(byte) -> qdWH
react.surge.util.SuperCaller -> AaTK:
    void run() -> run
react.surge.util.T -> UlKy:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> rpKc
    32:35:void stop() -> stop
react.surge.util.TXT -> SLTF:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> NfcV
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> wCdn
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> wCdn
    99:99:java.lang.String line(react.surge.util.C,int) -> wCdn
    113:113:java.lang.String underline(react.surge.util.C,int) -> rpKc
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> wCdn
react.surge.util.Tag -> ccqq:
    java.lang.String value() -> value
react.surge.util.Timer -> PSjq:
    long tns -> aiKb
    long cns -> FsNu
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> gNfI
react.surge.util.VectorMath -> HTeP:
    int[] $SWITCH_TABLE$surge$util$Axis -> jGxy
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> wiIX
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> wCdn
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> wCdn
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> rpKc
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> TpeI
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> wCdn
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> rpKc
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> rpKc
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> TpeI
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> ooRp
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> Elil
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> RroX
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> NfcV
    111:111:double round(double,int) -> Elil
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> wCdn
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> wCdn
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> wCdn
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> ooRp
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> Elil
    268:268:org.bukkit.util.Vector toVector(float,float) -> wCdn
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> wCdn
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> wCdn
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> DHEP
    337:340:double getSpeed(org.bukkit.util.Vector) -> qdWH
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> wCdn
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> IFSH
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> wCdn
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> rpKc
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> TpeI
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> ooRp
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> EAvL
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> HKwm
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> papm
react.surge.util.VectorMath$1 -> HTeP$1:
    org.bukkit.util.Vector val$vector -> whhW
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> EKHT
    1:1:java.lang.Object onAdapt(java.lang.Object) -> NfcV
react.surge.util.W -> eHVm:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> DHEP
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> wCdn
    75:86:org.bukkit.entity.Entity getEntity(int) -> McaX
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> wCdn
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> wCdn
    143:143:int getChunkX(org.bukkit.block.Block) -> qdWH
    155:155:int getChunkY(org.bukkit.block.Block) -> IFSH
    168:169:void dropXp(org.bukkit.Location,int) -> rpKc
    180:180:int getChunkZ(org.bukkit.block.Block) -> EAvL
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> rpKc
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> wCdn
    232:239:react.glang.GList news(org.bukkit.Location) -> HBno
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> wCdn
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> HBno
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> aUIF
    300:300:org.bukkit.World toSync(org.bukkit.World) -> paSk
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> EKHT
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> aUIF
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> aUIF
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> vcFf
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> wCdn
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> wCdn
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> wCdn
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> wCdn
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> wCdn
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> wCdn
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> wCdn
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> wCdn
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> paSk
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> lUHC
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> paSk
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> TpeI
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> wCdn
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> wCdn
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> wCdn
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> wCdn
react.surge.util.W$1 -> eHVm$1:
    java.lang.Double val$doff -> GTEh
    org.bukkit.entity.Entity val$e -> jHpX
    org.bukkit.entity.Entity[] val$result -> aycD
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> EAvL
react.surge.util.Worlds -> jNtV:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> NfvI
    33:33:boolean hasWorld(java.lang.String) -> fKJT
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> HCdB:
react.text.ColoredString -> QElt:
    react.surge.util.C c -> iqCC
    java.lang.String s -> Xwat
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> DsWC
    42:43:void setC(react.surge.util.C) -> rpKc
    47:47:java.lang.String getS() -> iwNp
    52:53:void setS(java.lang.String) -> dDbh
react.text.RTEX -> klJt:
    react.glang.GList extras -> NjEb
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> KMUS
    44:58:react.json.JSONObject toJSON() -> tCKc
react.text.RTX -> CUwJ:
    react.json.JSONArray base -> OlhC
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> RroX
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> rpKc
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> wCdn
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> wCdn
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> rpKc
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> TpeI
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> wCdn
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> rpKc
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> TpeI
    265:265:react.json.JSONArray toJSON() -> aUcx
    276:277:void tellRawTo(org.bukkit.entity.Player) -> rNGT
react.text.RawText -> vsyi:
    java.lang.String COLOR_BLACK -> ecth
    java.lang.String COLOR_DARK_BLUE -> euVw
    java.lang.String COLOR_DARK_GREEN -> gHXh
    java.lang.String COLOR_DARK_AQUA -> pdTj
    java.lang.String COLOR_DARK_RED -> TbeO
    java.lang.String COLOR_DARK_PURPLE -> Wkpi
    java.lang.String COLOR_GOLD -> tgrr
    java.lang.String COLOR_GRAY -> ipeR
    java.lang.String COLOR_DARK_GRAY -> aGKO
    java.lang.String COLOR_BLUE -> dYDu
    java.lang.String COLOR_GREEN -> cMQL
    java.lang.String COLOR_AQUA -> jcGh
    java.lang.String COLOR_RED -> sCNW
    java.lang.String COLOR_LIGHT_PURPLE -> gamq
    java.lang.String COLOR_YELLOW -> eBVW
    java.lang.String COLOR_WHITE -> VXND
    java.lang.String COLOR_NONE -> jkVu
    java.lang.String HEAD_TEXT -> vUGl
    java.lang.String HEAD_COLOR -> XMRW
    java.lang.String HEAD_BOLD -> jjwB
    java.lang.String HEAD_ITALIC -> XgDh
    java.lang.String HEAD_UNDERLINED -> sCNM
    java.lang.String HEAD_STRIKETHROUGH -> Ibhh
    java.lang.String HEAD_OBFUSCATED -> UUKE
    java.lang.String HEAD_CLICK_EVENT -> KiPO
    java.lang.String HEAD_HOVER_EVENT -> QQOH
    java.lang.String HEAD_ACTION -> JKwX
    java.lang.String HEAD_VALUE -> lOYi
    java.lang.String HEAD_EXTRA -> MEAO
    java.lang.String HEAD_ACTION_SHOW_TEXT -> EMjD
    java.lang.String HEAD_ACTION_COMMAND -> VNyl
    java.util.ArrayList components -> fUxS
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> cdCi
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> Elil
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> wCdn
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> wCdn
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> wCdn
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> wCdn
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> wCdn
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> wCdn
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> wCdn
    307:313:java.lang.String compile() -> RQhk
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> wCdn

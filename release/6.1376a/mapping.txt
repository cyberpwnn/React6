react.Config -> wfHp:
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> wfHp
    java.lang.String A_ENTITYCACHE_INTERVAL -> KTiB
    java.lang.String A_COMMANDOVERRIDE_TPS -> WhmD
    java.lang.String A_REACT_REMOTE_PORT -> TEpd
    java.lang.String A_REACT_REMOTE_ENABLED -> UshV
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> IVri
    java.lang.String A_POOL_MAXTHREADS -> ogBf
    java.lang.String A_POOL_SYNC_NANOS -> UAEC
    java.lang.String A_ENTITYCACHE_ENABLED -> eaTY
    java.lang.String A_FASTLEAF_ENABLED -> cuAO
    java.lang.String A_FASTLEAF_ONDECAY -> UcHS
    java.lang.String A_FASTLEAF_INSTANT -> lwKC
    java.lang.String A_FASTLEAF_DECAYPERIOD -> mFgo
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> LGKf
    java.lang.String A_ENTITYSTACK_ENABLED -> quXW
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> IODS
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> UYuc
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> Keji
    java.lang.String A_GLASS_SHOW_BLOCKS -> Pcxd
    java.lang.String A_GLASS_SHOW_PARTICLES -> wKtl
    java.lang.String A_ALLOW_CULL -> UHre
    java.lang.String A_ALLOW_PURGE -> lTfO
    java.lang.String A_ALLOW_CACHE -> Ywbs
    java.lang.String A_CULL_RULES -> Yfac
    java.lang.String A_RAI_TPS_HIGH_TICK -> CwdX
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> gVYF
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> pYCR
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> bhkH
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> JHsa
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> kkUq
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> gDuv
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> AFkU
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> PliD
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> PtyI
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> MImH
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> rMek
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> VThG
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> FDxR
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> WXJy
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> sajf
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> OihS
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> lKxL
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> HvUj
    java.lang.String A_RAI_FLUID_TIME_CEIL -> dMRX
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> jFRf
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> KKyY
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> nuCW
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> vtJG
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> IxxW
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> cdBB
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> xyoE
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> Gjan
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> Hmdu
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> JRIX
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> AWmb
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> YECV
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> lLYC
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> KemN
    java.lang.String A_LANGUAGE -> LhpP
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> avmI
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> UtLA
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> TphE
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> qmJC
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> AWnw
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> RQMn
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> dwdX
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> FpOO
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> inBw
    java.lang.String A_RAI_ENTITY_PROPIGATE -> dVAo
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> eifa
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> nJLs
    int ENTITYCACHE_CHUNK_RADIUS -> lCfR
    int ENTITYCACHE_INTERVAL -> KTjQ
    boolean COMMANDOVERRIDES_TPS -> TguV
    int REACT_REMOTE_PORT -> INco
    boolean REACT_REMOTE_ENABLED -> UtJg
    int ENTITY_STACK_MAX_COUNT -> uEpB
    int POOL_MAXTHREADS -> UtKJ
    long POOL_SYNC_NANOS -> mXLF
    boolean ENTITYCACHE_ENABLED -> eGbu
    boolean FASTLEAF_ENABLED -> JQgY
    boolean FASTLEAF_ONDECAY -> HCQR
    boolean FASTLEAF_INSTANT -> CVES
    int FASTLEAF_DECAYPERIOD -> YDdA
    boolean COMMANDOVERRIDES_MEMORY -> oLrf
    boolean ENTITYSTACK_ENABLED -> ydBr
    int ENTITYSTACK_MINIMUM_GROUP -> MBAs
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> CoXq
    int ENTITYSTACK_MAXIMUM_HEALTH -> ntdS
    boolean GLASS_SHOW_BLOCKS -> dECh
    boolean GLASS_SHOW_PARTICLES -> WrBk
    react.glang.GList ALLOW_CULL -> bhpM
    react.glang.GList ALLOW_PURGE -> YMTg
    react.glang.GList ALLOW_CACHE -> QpPy
    react.glang.GList CULL_RULES -> Qopi
    double RAI_TPS_HIGH_TICK -> vYvx
    long RAI_REDSTONE_TIME_FLOOR -> UtNN
    long RAI_REDSTONE_TIME_CEIL -> WiPh
    long RAI_REDSTONE_TIME_MUDDING -> bWnD
    double RAI_REDSTONE_TIME_FUNCTION -> hkAu
    double RAI_REDSTONE_TIME_OVERBLEED -> rNLB
    int RAI_REDSTONE_TIME_RADIUS -> jNcx
    int RAI_REDSTONE_TIME_PROPIGATION -> GPpO
    long RAI_HOPPER_TIME_FLOOR -> XRaG
    long RAI_HOPPER_TIME_CEIL -> skAh
    long RAI_HOPPER_TIME_MUDDING -> ylQp
    double RAI_HOPPER_TIME_FUNCTION -> OjJY
    double RAI_HOPPER_TIME_OVERBLEED -> VfNX
    int RAI_HOPPER_TIME_RADIUS -> ckre
    int RAI_HOPPER_TIME_PROPIGATION -> ksih
    int RAI_ENTITY_CHUNK_MULTIPLIER -> ktKI
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> jyXM
    int RAI_ENTITY_CHUNK_RADIUS -> QyAi
    long RAI_FLUID_TIME_FLOOR -> PKKL
    long RAI_FLUID_TIME_CEIL -> jyWs
    long RAI_FLUID_TIME_MUDDING -> biQA
    double RAI_FLUID_TIME_FUNCTION -> mXQV
    double RAI_FLUID_TIME_OVERBLEED -> QorY
    int RAI_FLUID_TIME_RADIUS -> SmhN
    int RAI_FLUID_TIME_PROPIGATION -> BBCu
    double SMEAR_TICK_ENTITIES_MAX_TICK -> XIsI
    double SMEAR_TICK_TILES_MAX_TICK -> LrFT
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> NxLU
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> yBBH
    double SMEAR_TICK_ENTITIES_AMOUNT -> ydDY
    double SMEAR_TICK_TILES_AMOUNT -> jEvF
    boolean SMEAR_TICK_ENTITIES_ENABLE -> QNQN
    boolean SMEAR_TICK_TILES_ENABLE -> SCTH
    boolean HOPPER_OVERTICK_ENABLE -> rooi
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> AiVK
    long RAI_CHUNK_TIME_CEIL -> Dikh
    long RAI_CHUNK_TIME_MUDDING -> VwPo
    double RAI_CHUNK_TIME_FUNCTION -> oUdv
    double RAI_CHUNK_TIME_OVERBLEED -> HCUF
    int RAI_CHUNK_TIME_RADIUS -> aemi
    int RAI_CHUNK_TIME_PROPIGATION -> vtKs
    boolean RAI_CHUNK_TIME_PROPIGATE -> RsUh
    boolean RAI_FLUID_TIME_PROPIGATE -> rMlR
    boolean RAI_ENTITY_PROPIGATE -> hsTR
    boolean RAI_HOPPER_TIME_PROPIGATE -> BJTs
    boolean RAI_REDSTONE_TIME_PROPIGATE -> ncbv
    boolean hrld -> NEGN
    boolean rns -> nSBe
    boolean rrl -> KfPr
    34:34:void <init>() -> <init>
    653:670:void doTrack(org.bukkit.plugin.Plugin) -> wfHp
    675:697:void onRead(org.bukkit.plugin.Plugin) -> KTiB
    701:731:void read(java.io.File,boolean) -> wfHp
    736:849:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> wfHp
    854:891:react.surge.cluster.DataCluster defaultConfig(boolean) -> wfHp
    896:971:react.glang.GList getDefaultEntitiesForCaching() -> wfHp
    976:1051:react.glang.GList getDefaultEntitiesForCulling() -> KTiB
    1056:1093:react.glang.GList getDefaultEntitiesForRemoval() -> WhmD
    1098:1127:react.glang.GList getDefaultCullRules() -> TEpd
    258:648:void <clinit>() -> <clinit>
react.Config$1 -> wfHp$1:
    java.io.File val$fConfig -> hbRg
    java.io.File val$fConfigExperimental -> JtRI
    org.bukkit.plugin.Plugin val$main -> KTqH
    657:657:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    661:665:void run() -> run
react.Gate -> KTiB:
    react.glang.GMap defaultSettings -> ccfp
    35:35:void <init>() -> <init>
    41:127:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> wfHp
    131:156:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> wfHp
    161:161:int getChunkCountForView() -> UshV
    166:166:int getMaxChunksForView() -> IVri
    171:171:boolean hasFawe() -> ogBf
    176:197:void tickEntityNextTickListTick(org.bukkit.World) -> wfHp
    201:205:void resetEntityMaxTick(org.bukkit.World) -> KTiB
    209:209:int getEntityTickMax(org.bukkit.World) -> WhmD
    214:214:int getTileTickMax(org.bukkit.World) -> TEpd
    219:237:void tweakEntityTickMax(org.bukkit.World,int) -> wfHp
    241:258:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> wfHp
    263:267:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> wfHp
    271:283:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> wfHp
    288:292:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> KTiB
    296:314:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> wfHp
    318:322:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> UshV
    327:330:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> wfHp
    335:338:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> KTiB
    343:343:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> WhmD
    348:348:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> TEpd
    353:353:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> UshV
    360:366:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    372:373:void unloadChunk(org.bukkit.World,int,int) -> wfHp
    377:383:void removeEntity(org.bukkit.entity.Entity) -> wfHp
    387:393:void purgeEntity(org.bukkit.entity.Entity) -> KTiB
    397:403:void cullEntity(org.bukkit.entity.Entity) -> WhmD
    407:413:void cachedEntity(org.bukkit.entity.Entity) -> TEpd
    418:435:void updateBlock(org.bukkit.block.Block) -> wfHp
    439:443:java.lang.String header(java.lang.String,react.surge.util.C) -> wfHp
    448:448:java.lang.String header(react.surge.util.C) -> wfHp
    454:458:void updateFluid(org.bukkit.block.Block) -> KTiB
    37:37:void <clinit>() -> <clinit>
react.Gate$1 -> KTiB$1:
    react.api.SelectorPosition val$sel -> Btip
    react.glang.Callback val$prog -> tSvH
    react.glang.Callback val$cb -> sQSr
    42:42:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    46:125:void run() -> run
react.Gate$1$1 -> KTiB$1$1:
    java.lang.Object val$o -> rMop
    java.lang.reflect.Constructor val$vectorConstruct -> ssVu
    java.lang.reflect.Constructor val$cuboidConstruct -> YxLq
    java.lang.reflect.Method val$faweFixMethod -> pjNN
    java.lang.Integer[] val$total -> ySDs
    java.lang.Integer[] val$sof -> vQkR
    java.lang.Integer val$tot -> uOIQ
    react.Gate$1 this$0 -> NgLc
    74:74:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],java.lang.Integer) -> <init>
    80:94:void run() -> run
react.Gate$1$2 -> KTiB$1$2:
    java.lang.Integer[] val$total -> ySDs
    react.Gate$1 this$0 -> NgLc
    99:99:void <init>(react.Gate$1,java.lang.String,int,java.lang.Integer[]) -> <init>
    105:113:void run() -> run
react.Gate$2 -> KTiB$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> tTVY
    271:271:void <clinit>() -> <clinit>
react.Info -> WhmD:
    java.lang.String CORE_REACT_DOT -> MdIc
    java.lang.String CORE_NAME -> tmgo
    java.lang.String CORE_CACHE -> UQnQ
    java.lang.String CORE_DOTYML -> nlWc
    java.lang.String COMMAND_REACT -> myuS
    java.lang.String COMMAND_RAI -> jOIo
    java.lang.String COMMAND_ACT_DESCRIPTION -> UcOv
    java.lang.String COMMAND_ACT -> MIut
    java.lang.String COMMAND_ACT_ALIAS_1 -> SmkI
    java.lang.String COMMAND_ACT_ALIAS_2 -> wenw
    java.lang.String COMMAND_ACT_USAGE -> vtOH
    java.lang.String COMMAND_HELP_DESCRIPTION -> uOIF
    java.lang.String COMMAND_HELP -> Euaq
    java.lang.String COMMAND_HELP_ALIAS_1 -> MlXY
    java.lang.String COMMAND_HELP_ALIAS_2 -> NEHR
    java.lang.String COMMAND_HELP_USAGE -> gpSa
    java.lang.String COMMAND_STATUS_DESCRIPTION -> Ywjl
    java.lang.String COMMAND_STATUS -> aeor
    java.lang.String COMMAND_STATUS_ALIAS_1 -> NUiK
    java.lang.String COMMAND_STATUS_ALIAS_2 -> XdHC
    java.lang.String COMMAND_STATUS_USAGE -> gxcT
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> ndFW
    java.lang.String COMMAND_CPUSCORE -> Vnbh
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> cRdm
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> gNOo
    java.lang.String COMMAND_CPUSCORE_USAGE -> GYfM
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> DGlB
    java.lang.String COMMAND_RELOAD -> QhDi
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> ofgx
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> iKdq
    java.lang.String COMMAND_RELOAD_USAGE -> bqdf
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> HKjH
    java.lang.String COMMAND_MONITOR -> NVLd
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> RHfP
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> Lyxw
    java.lang.String COMMAND_MONITOR_USAGE -> cAfO
    java.lang.String COMMAND_VERSION_DESCRIPTION -> uEyc
    java.lang.String COMMAND_VERSION -> ogMM
    java.lang.String COMMAND_VERSION_ALIAS_1 -> ntkB
    java.lang.String COMMAND_VERSION_ALIAS_2 -> gFDA
    java.lang.String COMMAND_VERSION_USAGE -> jEye
    java.lang.String COMMAND_MAP_DESCRIPTION -> qeAp
    java.lang.String COMMAND_MAP -> Cfnc
    java.lang.String COMMAND_MAP_ALIAS_1 -> HCYv
    java.lang.String COMMAND_MAP_ALIAS_2 -> JcSR
    java.lang.String COMMAND_MAP_USAGE -> Fggc
    java.lang.String COMMAND_GLASS_DESCRIPTION -> nBGA
    java.lang.String COMMAND_GLASS -> JstH
    java.lang.String COMMAND_GLASS_ALIAS_1 -> cchV
    java.lang.String COMMAND_GLASS_ALIAS_2 -> vQmI
    java.lang.String COMMAND_GLASS_USAGE -> VndV
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> ofjd
    java.lang.String COMMAND_CBLAME -> ArKS
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> dEIP
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> VDPe
    java.lang.String COMMAND_CBLAME_USAGE -> dgKh
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> HLIv
    java.lang.String COMMAND_ACTIONLOG -> RsYn
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> loCc
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> OipL
    java.lang.String COMMAND_ACTIONLOG_USAGE -> RjiB
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> cJVf
    java.lang.String COMMAND_CAPABILITIES -> AXWb
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> nSGP
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> aMEF
    java.lang.String COMMAND_CAPABILITIES_USAGE -> WGVp
    java.lang.String MSG_PERMISSION -> prbP
    java.lang.String MSG_MONITORING_STARTED -> eXpG
    java.lang.String MSG_MONITORING_STOPPED -> UbsS
    java.lang.String MSG_ACTIONLOGGING_STARTED -> lTse
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> bGUt
    java.lang.String MSG_GLASS_STARTED -> INnr
    java.lang.String MSG_GLASS_STOPPED -> sQWq
    org.bukkit.Color COLOR_HOPPER -> fKQm
    org.bukkit.Color COLOR_BLOCK_UPDATE -> YELf
    org.bukkit.Color COLOR_BLOCK_FROMTO -> NgPl
    org.bukkit.Color COLOR_BLOCK_BURN -> vcQf
    org.bukkit.Color COLOR_BLOCK_DECAY -> DHRC
    org.bukkit.Color COLOR_BLOCK_FORM -> bGVb
    java.lang.String NAME_TICK -> aMDi
    java.lang.String NAME_MEMORY -> lLbn
    java.lang.String NAME_CHUNKS -> kbqL
    java.lang.String NAME_ENTITIES -> Mtls
    java.lang.String STATE_MONITORING_TAB -> KCsC
    java.lang.String STATE_MONITORING_ENABLED -> sIFn
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> uOLY
    java.lang.String STATE_MAPPING_ENABLED -> tBvl
    java.lang.String STATE_SOUND_PLAYS -> NEMH
    java.lang.String STATE_MONITORING_POSTED -> CDlt
    java.lang.String STATE_MONITORING_LASTTAB -> uqNs
    java.lang.String STATE_GLASSES_ENABLED -> ydJB
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> ETDs
    java.lang.String STATE_PLAYER_HOTBAR -> KLgI
    java.lang.String STATE_PLAYER_SHIFT -> lfWp
    java.lang.String STATE_PLAYER_SCROLL -> NpCg
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> eabq
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> KoJk
    java.lang.String PERM_ACCESS -> BdOc
    java.lang.String PERM_MONITOR -> eXrA
    java.lang.String PERM_MONITOR_TITLE -> QVhn
    java.lang.String PERM_MONITOR_ACTIONLOG -> twAV
    java.lang.String PERM_MONITOR_MAP -> AFyC
    java.lang.String PERM_MONITOR_ENVIRONMENT -> lMEg
    java.lang.String PERM_MONITOR_GLASSES -> FxmN
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> flvS
    java.lang.String PERM_ACT -> RIKf
    java.lang.String PERM_RAI -> LGYt
    java.lang.String PERM_RAI_CONTROL -> sjjs
    java.lang.String PERM_RAI_ACCESS -> OHRi
    java.lang.String PERM_RAI_MONITOR -> TiEB
    java.lang.String PERM_RELOAD -> XAjt
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> afXd
    java.lang.String SAMPLER_REDSTONE_TICK -> vtUN
    java.lang.String SAMPLER_ENTITY_TIME -> FhJm
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> KTvT
    java.lang.String SAMPLER_TILE_TIME_LOCK -> awYJ
    java.lang.String SAMPLER_TILE_TIME -> FFGu
    java.lang.String SAMPLER_TILE_DROPTICK -> rpXu
    java.lang.String SAMPLER_ENTITY_DROPTICK -> Whyn
    java.lang.String SAMPLER_REDSTONE_SECOND -> Iydd
    java.lang.String SAMPLER_REDSTONE_TIME -> OPav
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> bOhT
    java.lang.String SAMPLER_HOPPER_TICK -> dpAp
    java.lang.String SAMPLER_HOPPER_SECOND -> TGAL
    java.lang.String SAMPLER_HOPPER_TIME -> hayj
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> DPbp
    java.lang.String SAMPLER_FLUID_TICK -> mrJm
    java.lang.String SAMPLER_FLUID_SECOND -> OGqQ
    java.lang.String SAMPLER_FLUID_TIME -> eYUO
    java.lang.String SAMPLER_TPS -> fmYd
    java.lang.String SAMPLER_TICK -> mqnA
    java.lang.String SAMPLER_TIU -> ergD
    java.lang.String SAMPLER_MEM -> qlxO
    java.lang.String SAMPLER_FREEMEM -> lext
    java.lang.String SAMPLER_MAXMEM -> Edir
    java.lang.String SAMPLER_ALLOCMEM -> ncoT
    java.lang.String SAMPLER_MAHS -> Jsxx
    java.lang.String SAMPLER_CHK -> ofrT
    java.lang.String SAMPLER_ATASK -> qSeg
    java.lang.String SAMPLER_STASK -> IGCw
    java.lang.String SAMPLER_CHK_TIME -> Oivs
    java.lang.String SAMPLER_EXPLOSION_TIME -> TGDE
    java.lang.String SAMPLER_CHKS -> DjXf
    java.lang.String SAMPLER_ENT -> JcYW
    java.lang.String SAMPLER_ENTLIV -> kswU
    java.lang.String SAMPLER_ENTDROP -> yRmA
    java.lang.String SAMPLER_ENTTILE -> WPME
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> qeID
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> hkNv
    java.lang.String ACTION_CULL_ENTITIES_NAME -> hjnX
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> TiGL
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> lMGr
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> VnlJ
    java.lang.String ACTION_UPDATE_FLUID_NAME -> wMFx
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> QgmP
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> rMvr
    java.lang.String ACTION_LOCK_FLUID_STATUS -> sHjL
    java.lang.String ACTION_LOCK_FLUID_NAME -> esGB
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> KUYT
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> TNqf
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> baKq
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> CwuM
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> kJDa
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> vsvR
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> BlcI
    java.lang.String ACTION_LOCK_HOPPER_NAME -> SLOm
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> KoKy
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> CUsN
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> PSfy
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> RtAS
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> WOjn
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> qTEd
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> eQCp
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> dobn
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> jqTU
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> FMyo
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> BBNn
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> eGta
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> htCJ
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> pGtT
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> OXwO
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> AYAD
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> pPdv
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> HeeS
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> wLho
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> OrjU
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> CVUT
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> xaNM
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> BRpn
    java.lang.String ACTION_FIX_LIGHTING_NAME -> ogTc
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> JRYb
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> pPdd
    java.lang.String ACTION_COLLECT_GARBAGE -> pPeE
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> jqVx
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> kcYK
    6:6:void <init>() -> <init>
    8:232:void <clinit>() -> <clinit>
react.Lang -> TEpd:
    java.lang.String BUNDLE_NAME -> NpHe
    java.util.ResourceBundle RESOURCE_BUNDLE -> IGGB
    java.util.ResourceBundle PRIMARY_BUNDLE -> MJac
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> UshV:
    react.React instance -> Xlcd
    react.controller.SampleController sampleController -> gWKk
    react.controller.PlayerController playerController -> DbIL
    react.controller.MonitorController monitorController -> FVlc
    react.controller.CommandController commandController -> aoLh
    react.controller.ActionController actionController -> BBQf
    react.controller.FastDecayController fastDecayController -> CwwO
    react.controller.EntityStackController entityStackController -> HwFc
    react.controller.GlassController glassController -> dUqa
    react.controller.EntityCullController entityCullController -> kkhJ
    react.controller.SpikeController spikeController -> JlLA
    react.controller.SecurityController securityController -> gFJf
    react.controller.RedstoneController redstoneController -> VMJp
    react.controller.HopperController hopperController -> rxlf
    react.controller.PhysicsController physicsController -> PTIu
    react.controller.TickTimeController tickTimeController -> GYpV
    react.controller.RAIController raiController -> XmCe
    react.controller.FluidController fluidController -> NfxG
    react.controller.ChunkController chunkController -> CEUn
    react.controller.GraphController graphController -> WYAl
    react.controller.ChronophyFluidController fluidChronophyController -> HfGn
    react.controller.EventController eventController -> HCcp
    react.controller.BlockInjectController blockInjectController -> oESw
    react.controller.SmearTickController smearTickController -> Libm
    react.controller.FeatureController featureController -> RtEn
    react.controller.HopperOvertickController hopperPlungeController -> DPii
    react.controller.BenchmarkController benchmarkController -> IFfx
    react.controller.LanguageController languageController -> OYYy
    react.controller.RemoteController remoteController -> DGxd
    react.controller.ExplosiveController explosiveController -> GsfL
    41:41:void <init>() -> <init>
    137:137:void enable() -> enable
    143:143:void disable() -> disable
react.action.ActionCollectGarbage -> IVri:
    19:22:void <init>() -> <init>
    27:61:void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
react.action.ActionCollectGarbage$1 -> IVri$1:
    react.api.IActionSource val$source -> hRAY
    react.action.ActionCollectGarbage this$0 -> Rbce
    30:30:void <init>(react.action.ActionCollectGarbage,react.api.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> IVri$1$1:
    long val$mbnex -> GkUg
    long val$mbmem -> fCJc
    react.action.ActionCollectGarbage$1 this$1 -> SwIa
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> ogBf:
    long ms -> psKW
    int lcd -> erkR
    32:59:void <init>() -> <init>
    64:150:void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> wfHp
    25:25:long access$002(react.action.ActionCullEntities,long) -> wfHp
    25:25:int access$100(react.action.ActionCullEntities) -> wfHp
    25:25:long access$000(react.action.ActionCullEntities) -> KTiB
react.action.ActionCullEntities$1 -> ogBf$1:
    react.action.ActionCullEntities this$0 -> nBQL
    37:37:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> UAEC
    37:37:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> ogBf$2:
    react.action.ActionCullEntities this$0 -> nBQL
    49:49:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> UAEC
    49:49:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> ogBf$3:
    react.glang.FinalInteger val$completed -> kQxa
    react.glang.FinalInteger val$total -> LPOn
    react.glang.FinalInteger val$totalCulled -> woNM
    react.glang.FinalInteger val$totalChunked -> sINh
    react.api.IActionSource val$source -> hRAY
    react.action.ActionCullEntities this$0 -> nBQL
    105:105:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> ogBf$4:
    react.api.IActionSource val$source -> hRAY
    react.glang.FinalInteger val$totalCulled -> woNM
    react.glang.FinalInteger val$totalChunked -> sINh
    react.action.ActionCullEntities this$0 -> nBQL
    137:137:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> UAEC:
    24:38:void <init>() -> <init>
    43:95:void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
react.action.ActionFixLighting$1 -> UAEC$1:
    react.action.ActionFixLighting this$0 -> Jkkn
    28:28:void <init>(react.action.ActionFixLighting) -> <init>
    32:35:react.api.ISelector get() -> UAEC
    28:28:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> UAEC$2:
    react.api.IActionSource val$source -> hRAY
    int val$ch -> jyht
    react.action.ActionFixLighting this$0 -> Jkkn
    70:70:void <init>(react.action.ActionFixLighting,react.api.IActionSource,int) -> <init>
    74:79:void run(java.lang.Integer) -> wfHp
    70:70:void run(java.lang.Object) -> wfHp
react.action.ActionFixLighting$3 -> UAEC$3:
    react.action.ActionFixLighting this$0 -> Jkkn
    81:81:void <init>(react.action.ActionFixLighting) -> <init>
    85:90:void run(java.lang.Double) -> wfHp
    81:81:void run(java.lang.Object) -> wfHp
react.action.ActionLockFluid -> eaTY:
    int lcd -> erkR
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
react.action.ActionLockFluid$1 -> eaTY$1:
    react.action.ActionLockFluid this$0 -> WPNx
    31:31:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> UAEC
    31:31:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> eaTY$2:
    react.action.ActionLockFluid this$0 -> WPNx
    43:43:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> UAEC
    43:43:java.lang.Object get() -> get
react.action.ActionLockHopper -> cuAO:
    int lcd -> erkR
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
react.action.ActionLockHopper$1 -> cuAO$1:
    react.action.ActionLockHopper this$0 -> wMKP
    31:31:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> UAEC
    31:31:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> cuAO$2:
    react.action.ActionLockHopper this$0 -> wMKP
    43:43:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> UAEC
    43:43:java.lang.Object get() -> get
react.action.ActionLockRedstone -> UcHS:
    int lcd -> erkR
    26:53:void <init>() -> <init>
    58:102:void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
react.action.ActionLockRedstone$1 -> UcHS$1:
    react.action.ActionLockRedstone this$0 -> SUDk
    31:31:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> UAEC
    31:31:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> UcHS$2:
    react.action.ActionLockRedstone this$0 -> SUDk
    43:43:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> UAEC
    43:43:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> lwKC:
    long ms -> psKW
    int lcd -> erkR
    boolean fail -> Gjsh
    31:46:void <init>() -> <init>
    51:144:void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> KTiB
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> wfHp
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> wfHp
    23:23:int access$200(react.action.ActionPurgeChunks) -> KTiB
    23:23:long access$100(react.action.ActionPurgeChunks) -> WhmD
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> wfHp
react.action.ActionPurgeChunks$1 -> lwKC$1:
    react.action.ActionPurgeChunks this$0 -> CUwK
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> UAEC
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> lwKC$2:
    int val$dk -> pQGU
    java.lang.Object val$j -> QySF
    react.glang.FinalInteger val$acompleted -> QxrF
    react.glang.FinalInteger val$completed -> kQxa
    react.glang.FinalInteger val$total -> LPOn
    react.glang.FinalInteger val$totalCulled -> woNM
    react.glang.FinalInteger val$totalChunked -> sINh
    react.api.IActionSource val$source -> hRAY
    react.api.ISelector[] val$selectors -> dwwV
    react.action.ActionPurgeChunks this$0 -> CUwK
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> lwKC$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> RAAJ
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> lwKC$3:
    react.api.IActionSource val$source -> hRAY
    react.glang.FinalInteger val$acompleted -> QxrF
    react.action.ActionPurgeChunks this$0 -> CUwK
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> lwKC$4:
    org.bukkit.Chunk val$chunk -> jiHW
    java.lang.Runnable val$cb -> oEVS
    react.action.ActionPurgeChunks this$0 -> CUwK
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> mFgo:
    long ms -> psKW
    int lcd -> erkR
    34:61:void <init>() -> <init>
    66:153:void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> KTiB
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> wfHp
    27:27:int access$100(react.action.ActionPurgeEntities) -> wfHp
    27:27:long access$000(react.action.ActionPurgeEntities) -> KTiB
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> wfHp
react.action.ActionPurgeEntities$1 -> mFgo$1:
    react.action.ActionPurgeEntities this$0 -> QOBK
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> UAEC
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> mFgo$2:
    react.action.ActionPurgeEntities this$0 -> QOBK
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> UAEC
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> mFgo$3:
    react.glang.FinalInteger val$completed -> kQxa
    react.glang.FinalInteger val$total -> LPOn
    react.glang.FinalInteger val$totalCulled -> woNM
    react.glang.FinalInteger val$totalChunked -> sINh
    react.api.IActionSource val$source -> hRAY
    react.action.ActionPurgeEntities this$0 -> QOBK
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> mFgo$4:
    react.api.IActionSource val$source -> hRAY
    react.glang.FinalInteger val$totalCulled -> woNM
    react.glang.FinalInteger val$totalChunked -> sINh
    react.action.ActionPurgeEntities this$0 -> QOBK
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> mFgo$5:
    org.bukkit.entity.Entity val$i -> jXJN
    react.glang.FinalInteger val$cu -> Mlgo
    int val$k -> mrUG
    org.bukkit.Chunk val$chunk -> jiHW
    java.lang.Runnable val$cb -> oEVS
    react.action.ActionPurgeEntities this$0 -> QOBK
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> LGKf:
    int lcd -> erkR
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
react.action.ActionUnlockFluid$1 -> LGKf$1:
    react.action.ActionUnlockFluid this$0 -> VLoF
    30:30:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> UAEC
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> quXW:
    int lcd -> erkR
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
react.action.ActionUnlockHopper$1 -> quXW$1:
    react.action.ActionUnlockHopper this$0 -> sRBv
    30:30:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> UAEC
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> IODS:
    int lcd -> erkR
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
react.action.ActionUnlockRedstone$1 -> IODS$1:
    react.action.ActionUnlockRedstone this$0 -> YokA
    30:30:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> UAEC
    30:30:java.lang.Object get() -> get
react.api.Action -> UYuc:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> NUws
    java.lang.String[] nodes -> hABc
    react.api.ActionHandle handle -> fTND
    react.api.ActionState state -> BAsg
    react.api.ActionTargetType target -> qTND
    react.api.ActionType type -> bYCN
    react.api.IActionSource currentSource -> oohn
    double progress -> imvu
    react.glang.GMap defaultSelectors -> rpbK
    23:24:void <init>(react.api.ActionType) -> <init>
    27:39:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    44:59:react.api.ISelector[] biselect(react.api.ISelector[]) -> wfHp
    65:66:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> wfHp
    71:71:java.lang.String getName() -> getName
    77:77:java.lang.String getDescription() -> getDescription
    83:83:react.api.ActionHandle getHandleType() -> eaTY
    89:89:react.api.ActionState getState() -> cuAO
    95:95:java.lang.String getStatus() -> getStatus
    101:102:void setStatus(java.lang.String) -> wfHp
    107:107:double getProgress() -> getProgress
    113:114:void setProgress(double) -> setProgress
    119:119:react.api.ActionTargetType getTarget() -> UcHS
    125:125:react.api.ActionType getType() -> lwKC
    131:131:react.glang.GMap getDefaultSelectors() -> mFgo
    137:146:void act(react.api.IActionSource,react.api.ISelector[]) -> KTiB
    151:152:void completeAction() -> LGKf
    157:157:react.api.IActionSource getCurrentSource() -> quXW
    163:163:java.lang.String[] getNodes() -> IODS
    169:170:void setNodes(java.lang.String[]) -> wfHp
    void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
react.api.ActionAlreadyRunningException -> Keji:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> Pcxd:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> wKtl:
    react.api.ActionHandle AUTOMATIC -> brUb
    react.api.ActionHandle MANUAL -> hkTt
    react.api.ActionHandle MUTEX -> anqb
    react.api.ActionHandle[] $VALUES -> ggqY
    3:3:react.api.ActionHandle[] values() -> values
    3:3:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ActionNotRunningException -> UHre:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> lTfO:
    react.api.ActionState IDLE -> twIT
    react.api.ActionState RUNNING -> UlOj
    react.api.ActionState[] $VALUES -> UlOm
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> Ywbs:
    react.api.ActionTargetType POSITIONAL -> qdmc
    react.api.ActionTargetType SYSTEM -> Lieb
    react.api.ActionTargetType[] $VALUES -> FFQo
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> Yfac:
    react.api.ActionType FIX_LIGHTING -> iwIi
    react.api.ActionType UNLOCK_FLUID -> aMOU
    react.api.ActionType LOCK_FLUID -> HKwR
    react.api.ActionType UNLOCK_HOPPER -> tfGK
    react.api.ActionType LOCK_HOPPER -> Tykr
    react.api.ActionType UNLOCK_REDSTONE -> pQHx
    react.api.ActionType LOCK_REDSTONE -> kkmA
    react.api.ActionType CULL_ENTITIES -> WPQg
    react.api.ActionType COLLECT_GARBAGE -> NEWO
    react.api.ActionType PURGE_ENTITIES -> bOob
    react.api.ActionType PURGE_CHUNKS -> BRuv
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> fTND
    react.api.ActionTargetType target -> qTND
    react.api.ActionType[] $VALUES -> mjDC
    5:5:react.api.ActionType[] values() -> values
    5:5:react.api.ActionType valueOf(java.lang.String) -> valueOf
    25:30:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    34:34:java.lang.String getName() -> getName
    39:39:java.lang.String getDescription() -> getDescription
    44:44:react.api.ActionHandle getHandle() -> UYuc
    49:49:react.api.ActionTargetType getTarget() -> UcHS
    5:17:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> CwdX:
    react.api.ActivationRangeType ANIMALS -> UAYu
    react.api.ActivationRangeType MONSTERS -> FVps
    react.api.ActivationRangeType MISC -> pYYW
    react.api.ActivationRangeType[] $VALUES -> YpJr
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> gVYF:
    int value() -> value
react.api.Async -> pYCR:
react.api.CPUBenchmark -> bhkH:
    org.bukkit.command.CommandSender sender -> sender
    int score -> MdVr
    java.lang.Runnable onFinish -> YMgD
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:86:void run() -> run
    90:90:org.bukkit.command.CommandSender getSender() -> getSender
    95:95:int getScore() -> getScore
    100:100:java.lang.Runnable getOnFinish() -> Keji
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> wfHp
    10:10:int access$100(react.api.CPUBenchmark) -> KTiB
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> WhmD
react.api.CPUBenchmark$1 -> bhkH$1:
    react.api.CPUBenchmark this$0 -> GtHU
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> bhkH$2:
    react.api.CPUBenchmark this$0 -> GtHU
    73:73:void <init>(react.api.CPUBenchmark) -> <init>
    77:84:void run() -> run
react.api.CPUResult -> JHsa:
    react.api.CPUResult ULTRA_SLOW -> wLkc
    react.api.CPUResult VERY_SLOW -> fuoK
    react.api.CPUResult SLOW -> VfaD
    react.api.CPUResult AVERAGE -> hYqm
    react.api.CPUResult GOOD -> dDtg
    react.api.CPUResult FAST -> vAXX
    react.api.CPUResult VERY_FAST -> PLAI
    react.api.CPUResult ULTRA_FAST -> fTPO
    java.lang.String m -> wMPK
    react.api.CPUResult[] $VALUES -> RbgX
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> wfHp
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> kkUq:
    react.glang.GMap cache -> AigT
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> KTiB
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> WhmD
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> Pcxd
    54:54:boolean has(java.lang.Object) -> TEpd
react.api.Capabilities -> gDuv:
    react.api.Capabilities DUAL_WIELD -> FOEF
    react.api.Capabilities SCOREBOARD -> fnBv
    react.api.Capabilities HOPPERS -> hRFX
    react.api.Capabilities ATTRIBUTES -> BRwX
    react.api.Capabilities ENTITY_AI -> Aifh
    react.api.Capabilities ACTION_BAR -> rNaR
    react.api.Capabilities ENTITY_NAMES -> lfar
    react.surge.util.ProtocolRange r -> LrXp
    java.lang.String n -> aEAS
    react.api.Capabilities[] $VALUES -> ndXJ
    10:10:react.api.Capabilities[] values() -> values
    10:10:react.api.Capabilities valueOf(java.lang.String) -> valueOf
    24:27:void <init>(java.lang.String,int,java.lang.String,react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:boolean isCapable() -> wKtl
    42:43:void sendNotCapable(org.bukkit.command.CommandSender) -> wfHp
    47:48:void sendCapable(org.bukkit.command.CommandSender) -> KTiB
    10:18:void <clinit>() -> <clinit>
react.api.ChunkIssue -> AFkU:
    react.api.ChunkIssue ENTITY -> VfdI
    react.api.ChunkIssue HOPPER -> KfeH
    react.api.ChunkIssue REDSTONE -> FyYE
    react.api.ChunkIssue FLUID -> clgk
    react.api.ChunkIssue PHYSICS -> sHrS
    react.api.ChunkIssue[] $VALUES -> bXcV
    3:3:react.api.ChunkIssue[] values() -> values
    3:3:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.api.Clip -> PliD:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> PtyI:
    org.bukkit.command.CommandSender sender -> sender
    12:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> KTiB
    30:31:void sendResponseSuccess(java.lang.String) -> WhmD
    36:37:void sendResponseError(java.lang.String) -> TEpd
    42:43:void sendResponseActing(java.lang.String) -> UshV
react.api.ConsoleActionSource -> MImH:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> KTiB
    18:19:void sendResponseSuccess(java.lang.String) -> WhmD
    24:25:void sendResponseError(java.lang.String) -> TEpd
    30:31:void sendResponseActing(java.lang.String) -> UshV
react.api.CullList -> rMek:
    react.glang.GSet toCull -> fdnx
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> UshV
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> UHre
react.api.DTest -> VThG:
    3:3:void <init>() -> <init>
    7:58:int test() -> lTfO
react.api.EntityFlag -> FDxR:
    react.api.EntityFlag NAMED -> GQfB
    react.api.EntityFlag TAMED -> bGaa
    react.api.EntityFlag STACKED -> uGHt
    react.api.EntityFlag RIDDEN -> rgqu
    react.api.EntityFlag LEASHED -> YEWr
    java.lang.String m -> wMPK
    react.api.EntityFlag[] $VALUES -> sYsg
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> IVri
    40:60:boolean is(org.bukkit.entity.Entity) -> ogBf
    66:66:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> WXJy:
    react.glang.GSet entityTypes -> Bcyf
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> Ywbs
react.api.EntitySample -> sajf:
    react.glang.GMap counts -> mjDg
    react.glang.GMap sets -> Vnrx
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> Yfac
    45:45:react.glang.GList getTypes() -> CwdX
    50:57:int total() -> gVYF
    62:67:int get(org.bukkit.entity.EntityType) -> wfHp
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> KTiB
    84:96:void add(org.bukkit.entity.Entity) -> UshV
react.api.Experimental -> OihS:
react.api.IAction -> lKxL:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> eaTY
    void act(react.api.IActionSource,react.api.ISelector[]) -> KTiB
    void enact(react.api.IActionSource,react.api.ISelector[]) -> wfHp
    react.api.ActionState getState() -> cuAO
    react.api.ActionTargetType getTarget() -> UcHS
    void setNodes(java.lang.String[]) -> wfHp
    java.lang.String[] getNodes() -> IODS
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> wfHp
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> lwKC
    react.glang.GMap getDefaultSelectors() -> mFgo
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> wfHp
    react.api.ISelector[] biselect(react.api.ISelector[]) -> wfHp
    react.api.IActionSource getCurrentSource() -> quXW
    void completeAction() -> LGKf
react.api.IActionSource -> HvUj:
    void sendResponse(java.lang.String) -> KTiB
    void sendResponseSuccess(java.lang.String) -> WhmD
    void sendResponseError(java.lang.String) -> TEpd
    void sendResponseActing(java.lang.String) -> UshV
react.api.ICache -> dMRX:
    react.glang.GSet get(java.lang.Object) -> KTiB
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> WhmD
    void clear() -> clear
    boolean has(java.lang.Object) -> TEpd
    react.glang.GList k() -> Pcxd
react.api.ICommand -> jFRf:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> pYCR
    java.lang.String[] getPermissions() -> bhkH
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> IVri
    react.api.SideGate getSideGate() -> JHsa
    void registerParameterDescription(java.lang.String,java.lang.String) -> wfHp
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
react.api.IRecord -> KKyY:
    java.lang.String getRecordType() -> kkUq
    long getRecordTime() -> gDuv
    react.json.JSONObject toJSON() -> AFkU
    java.lang.Object getRecordObject() -> PliD
    void fromJSON(react.json.JSONObject) -> wfHp
react.api.IRecordBook -> nuCW:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> wfHp
    long getOldestRecordTime() -> PtyI
    void addRecord(react.api.IRecord) -> wfHp
    long getLatestRecordTime() -> MImH
    int countRecords(long,long) -> wfHp
    react.glang.GMap getRecords(long,long) -> KTiB
    int purgeRecordsBefore(long) -> KTiB
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> vtJG:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> rMek
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> VThG
    react.surge.util.C getAltColor() -> FDxR
    void setColor(react.surge.util.C,react.surge.util.C) -> wfHp
    int getInterval() -> getInterval
    void setInterval(int) -> KTiB
    void sample() -> WXJy
    java.lang.String get() -> get
    void construct() -> sajf
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> IxxW:
    react.api.SelectionMode getMode() -> OihS
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> UshV
    react.glang.GSet getList() -> lKxL
    react.glang.GSet getPossibilities() -> HvUj
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> IVri
    java.lang.String getName() -> getName
react.api.Injection -> cdBB:
    react.api.InjectionMethod value() -> dMRX
react.api.InjectionMethod -> xyoE:
    react.api.InjectionMethod SWAP -> hQca
    react.api.InjectionMethod SUBSTRATE -> IXMX
    react.api.InjectionMethod RELOAD -> HfLM
    react.api.InjectionMethod[] $VALUES -> xOqD
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> Gjan:
    java.lang.String value() -> value
react.api.MSampler -> Hmdu:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> jFRf
react.api.MonitorHeading -> JRIX:
    react.api.ISampler head -> BSXh
    react.glang.GList children -> NNLp
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> wfHp
    27:27:react.api.ISampler getHead() -> KKyY
    32:33:void setHead(react.api.ISampler) -> KTiB
    37:37:react.glang.GList getChildren() -> nuCW
    42:42:java.lang.String getHeadText() -> vtJG
    47:60:java.lang.String getChildText() -> IxxW
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> wfHp
react.api.NoiseGenerator -> AWmb:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> YECV:
    react.api.NoiseGenerator[] octaves -> BmNA
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> cdBB
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> lLYC:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> loUi
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> xyoE
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> KemN:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> wfHp
react.api.Permissable -> LhpP:
    react.api.Permissable ACCESS -> uXLy
    react.api.Permissable MONITOR -> ELDE
    react.api.Permissable MONITOR_TITLE -> TaAA
    react.api.Permissable MONITOR_ACTIONLOG -> mYGT
    react.api.Permissable MONITOR_MAP -> PLCP
    react.api.Permissable MONITOR_ENVIRONMENT -> qSpg
    react.api.Permissable MONITOR_GLASSES -> WaXU
    react.api.Permissable MONITOR_CHUNK_BLAME -> UIod
    react.api.Permissable RAI_MONITOR -> DPpX
    react.api.Permissable RAI_CONTROL -> iDHx
    react.api.Permissable RAI_ACCESS -> DarQ
    react.api.Permissable RAI -> KDcf
    react.api.Permissable ACT -> gOCl
    react.api.Permissable RELOAD -> mXeM
    java.lang.String node -> OjaM
    react.api.Permissable[] $VALUES -> rWTE
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    27:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> WhmD
    46:46:java.lang.String getNode() -> Gjan
    7:22:void <clinit>() -> <clinit>
react.api.PlayerActionSource -> avmI:
    org.bukkit.entity.Player p -> LrYS
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> KTiB
    30:31:void sendResponseSuccess(java.lang.String) -> WhmD
    36:37:void sendResponseError(java.lang.String) -> TEpd
    42:43:void sendResponseActing(java.lang.String) -> UshV
react.api.PluginSelfDeleter -> UtLA:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> JdBn
    java.lang.Runnable r -> PutP
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> wfHp
react.api.RAIActionSource -> TphE:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> KTiB
    16:17:void sendResponseSuccess(java.lang.String) -> WhmD
    22:23:void sendResponseError(java.lang.String) -> TEpd
    28:29:void sendResponseActing(java.lang.String) -> UshV
react.api.ReactCommand -> qmJC:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> XlkE
    java.lang.String usage -> oMic
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> nBUy
    react.api.SideGate sideGate -> EnFJ
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> IVri
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> wfHp
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> pYCR
    47:47:java.lang.String[] getPermissions() -> bhkH
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> JHsa
react.api.ReactException -> AWnw:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> RQMn:
    react.glang.GMap keystore -> qeQu
    boolean monitoring -> monitoring
    boolean actionlogging -> TFlD
    boolean glasses -> cljA
    boolean mapping -> kImn
    int monitorSelection -> lLpm
    int plays -> JIpD
    boolean monitorPosted -> AGfl
    int monitorLastSelection -> UIno
    int switchNotification -> VoUw
    int hotbarSlot -> KxGq
    boolean shift -> jFjS
    int scroll -> lnru
    double lastHeight -> wgDC
    boolean heightMovement -> uFig
    org.bukkit.entity.Player p -> LrYS
    41:89:void <init>(org.bukkit.entity.Player) -> <init>
    95:102:void save() -> save
    108:115:void load() -> load
    119:119:boolean isMonitoring() -> Hmdu
    124:124:boolean isMapping() -> JRIX
    129:129:org.bukkit.entity.Player getP() -> AWmb
    134:136:void setMonitoring(boolean) -> KTiB
    140:142:void setMapping(boolean) -> WhmD
    146:146:int getMonitorSelection() -> YECV
    151:153:void setMonitorSelection(int) -> WhmD
    157:157:int getHotbarSlot() -> lLYC
    162:164:void setHotbarSlot(int) -> TEpd
    168:168:boolean isShifting() -> KemN
    173:175:void setShifting(boolean) -> TEpd
    179:179:boolean isShift() -> LhpP
    184:186:void setShift(boolean) -> UshV
    190:190:int getScroll() -> avmI
    195:197:void setScroll(int) -> UshV
    201:201:int getMonitorLastSelection() -> UtLA
    206:208:void setMonitorLastSelection(int) -> IVri
    212:213:void setP(org.bukkit.entity.Player) -> wfHp
    217:217:double getLastHeight() -> TphE
    222:224:void setLastHeight(double) -> wfHp
    228:228:boolean isHeightMovement() -> qmJC
    233:235:void setHeightMovement(boolean) -> IVri
    239:239:int getSwitchNotification() -> AWnw
    244:246:void setSwitchNotification(int) -> ogBf
    250:250:boolean getMonitorPosted() -> RQMn
    255:257:void setMonitorPosted(boolean) -> ogBf
    261:261:int getPlays() -> dwdX
    266:268:void setPlays(int) -> UAEC
    272:272:boolean isGlasses() -> FpOO
    277:279:void setGlasses(boolean) -> UAEC
    283:283:boolean isActionlogging() -> inBw
    288:290:void setActionlogging(boolean) -> eaTY
    24:39:void <clinit>() -> <clinit>
react.api.Record -> dwdX:
    java.lang.String recordType -> PuuL
    long recordTime -> XmLJ
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> kkUq
    32:32:long getRecordTime() -> gDuv
    38:38:java.lang.Object getRecordObject() -> PliD
    react.json.JSONObject toJSON() -> AFkU
    void fromJSON(react.json.JSONObject) -> wfHp
react.api.RecordBook -> FpOO:
    java.io.File recordFile -> gODF
    react.json.JSONObject js -> SelU
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> wfHp
    79:87:react.api.IRecord getRecord(long) -> wfHp
    react.api.IRecord createDummyRecord(long,java.lang.String) -> wfHp
    95:107:long getOldestRecordTime() -> PtyI
    113:125:long getLatestRecordTime() -> MImH
    130:130:boolean within(long,long,long) -> wfHp
    136:144:int countRecords(long,long) -> wfHp
    150:162:react.glang.GMap getRecords(long,long) -> KTiB
    168:181:int purgeRecordsBefore(long) -> KTiB
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> inBw:
react.api.SampledChunk -> dVAo:
    org.bukkit.Chunk c -> KUcx
    react.glang.GMap counts -> mjDg
    12:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> dVAo
    26:38:void hit(react.api.ChunkIssue,int) -> wfHp
    42:42:org.bukkit.Chunk getC() -> eifa
    47:47:react.glang.GMap getCounts() -> nJLs
react.api.SampledType -> eifa:
    react.api.SampledType ENTITY_TIME_LOCK -> hAEY
    react.api.SampledType TILE_TIME_LOCK -> UlRp
    react.api.SampledType ENTITY_TIME -> ooku
    react.api.SampledType TILE_TIME -> IFll
    react.api.SampledType ENTITY_DROPTICK -> cAuh
    react.api.SampledType TILE_DROPTICK -> ETUk
    react.api.SampledType REDSTONE_TICK_USAGE -> OjdL
    react.api.SampledType REDSTONE_TICK -> TrDG
    react.api.SampledType REDSTONE_SECOND -> Rslw
    react.api.SampledType REDSTONE_TIME -> KVHK
    react.api.SampledType HOPPER_TICK_USAGE -> mqxv
    react.api.SampledType HOPPER_TICK -> KVHN
    react.api.SampledType HOPPER_SECOND -> jyqc
    react.api.SampledType HOPPER_TIME -> PdvS
    react.api.SampledType FLUID_TICK_USAGE -> ebSM
    react.api.SampledType FLUID_TICK -> aLsx
    react.api.SampledType FLUID_SECOND -> BAxy
    react.api.SampledType FLUID_TIME -> AGjB
    react.api.SampledType TPS -> bPVw
    react.api.SampledType TICK -> kSBM
    react.api.SampledType TIU -> qvVD
    react.api.SampledType MEM -> xGde
    react.api.SampledType FREEMEM -> LijP
    react.api.SampledType MAXMEM -> VoWb
    react.api.SampledType ALLOCMEM -> UteM
    react.api.SampledType MAHS -> qvUU
    react.api.SampledType CHK_TIME -> Drsw
    react.api.SampledType EXPLOSION_TIME -> NpRG
    react.api.SampledType CHK -> AilO
    react.api.SampledType ATASK -> AGhj
    react.api.SampledType STASK -> xjHe
    react.api.SampledType CHKS -> rOEJ
    react.api.SampledType ENT -> aDcT
    react.api.SampledType ENTLIV -> ETVB
    react.api.SampledType ENTDROP -> STlf
    react.api.SampledType ENTTILE -> aEDQ
    java.lang.String node -> OjaM
    react.api.SampledType[] $VALUES -> LGgi
    6:6:react.api.SampledType[] values() -> values
    6:6:react.api.SampledType valueOf(java.lang.String) -> valueOf
    49:49:react.api.ISampler get() -> lCfR
    55:55:java.lang.String toString() -> toString
    59:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> Gjan
    6:43:void <clinit>() -> <clinit>
react.api.Sampler -> nJLs:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> VUhS
    react.surge.util.C altColor -> qKeA
    int interval -> ooqh
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> VThG
    49:49:react.surge.util.C getAltColor() -> FDxR
    55:55:int getInterval() -> getInterval
    void sample() -> WXJy
    void construct() -> sajf
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> wfHp
    107:108:void setInterval(int) -> KTiB
react.api.Sector -> lCfR:
    int value() -> value
react.api.SelectionException -> KTjQ:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> TguV:
    react.api.SelectionMode WHITELIST -> HoCg
    react.api.SelectionMode BLACKLIST -> RALL
    react.api.SelectionMode[] $VALUES -> JSFh
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> INco:
    java.lang.Class objectType -> PLFy
    react.api.SelectionMode mode -> nKMO
    react.glang.GSet list -> FqNS
    react.glang.GSet possibilities -> QFXy
    int popoff -> ienw
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> OihS
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> UshV
    43:43:react.glang.GSet getList() -> lKxL
    49:49:react.glang.GSet getPossibilities() -> HvUj
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> IVri
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> ogBf
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> UtJg:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> WhmD
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> IVri
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> UAEC
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> uEpB:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> UtKJ:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> KTiB
    29:30:void add(org.bukkit.Chunk,int) -> wfHp
    34:38:void add(org.bukkit.World) -> IVri
    42:46:void addAll() -> KTjQ
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> IVri
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> UAEC
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> mXLF:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> IVri
    87:87:java.lang.String getName() -> getName
react.api.Side -> eGbu:
    react.api.Side PLAYERS -> Ihto
    react.api.Side CONSOLE -> uqcS
    java.lang.String ss -> qSse
    react.api.Side[] $VALUES -> iwQS
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> TguV
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> TEpd
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> JQgY:
    react.api.SideGate PLAYERS_ONLY -> scKq
    react.api.SideGate CONSOLES_ONLY -> dxbX
    react.api.SideGate ANYTHING -> Vfhf
    react.api.SideGate[] $VALUES -> ekDe
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> wfHp
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> JQgY$1:
    int[] $SwitchMap$react$api$SideGate -> LHJX
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> HCQR:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> RQkW
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> INco
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> CVES:
    double wScale -> lDeI
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> wfHp
react.api.SpecializedTickLimiter -> YDdA:
    double rMaxTime -> KwkR
    long rStartTime -> sAHa
    double rLastTime -> IiTh
    long rMark -> NWBX
    double tMaxTime -> Vfkc
    react.gmath.Average atimes -> uGQu
    react.gmath.Average adropped -> iCoG
    int droppedTicks -> JAfS
    boolean entityTick -> awla
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> oLrf:
    react.glang.GList sources -> VMYq
    react.glang.GList splooge -> qSvg
    react.glang.GSet destroy -> CovT
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> wfHp
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> KTiB
    void clipped(org.bukkit.Location) -> wfHp
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> KTiB
    boolean isAllowedSource(org.bukkit.Location) -> WhmD
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> wfHp
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> KTiB
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> WhmD
react.api.SploogeCounter$1 -> oLrf$1:
    java.util.Iterator val$it -> AXmj
    org.bukkit.Location val$start -> YyGM
    int val$maxDistance -> BTBB
    react.api.SploogeCounter this$0 -> Muce
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> oLrf$1$1:
    react.api.SploogeCounter$1 this$1 -> JuKr
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> ydBr:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> MBAs:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> AFkU
    38:49:void fromJSON(react.json.JSONObject) -> wfHp
react.api.StackTraceRecordBook -> CoXq:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> KTiB
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> wfHp
react.api.StackedEntity -> ntdS:
    org.bukkit.entity.LivingEntity entity -> aDiD
    int count -> count
    double rmx -> ioCb
    21:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> wfHp
    46:46:int getAbsoluteMaxCount() -> UtJg
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> KTiB
    56:58:void update() -> update
    62:68:void signalSize() -> uEpB
    72:123:void updateHealth() -> UtKJ
    127:128:void heal(double) -> KTiB
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> mXLF
    142:142:int getEffectiveCount(double) -> WhmD
    147:147:double getEffectiveMaxHealth(int) -> eaTY
    152:152:double getRealMaxHealth() -> eGbu
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> wfHp
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> dECh:
    react.glang.GList headings -> RAMp
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> wfHp
    24:24:int getMaxSelection() -> JQgY
    29:37:int left(int) -> cuAO
    42:50:int right(int) -> UcHS
    55:55:react.api.MonitorHeading getHeadFor(int) -> lwKC
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> wfHp
    83:100:java.lang.String getHotbarFor(int,boolean) -> wfHp
react.api.Unused -> WrBk:
react.binject.BlockInjector -> bhpM:
    react.surge.util.Protocol protocol -> jWri
    java.lang.Class blocksClass -> eIEU
    13:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> wfHp
    29:56:void inject() -> HCQR
    61:61:react.surge.util.Protocol getVersion() -> CVES
react.binject.IBlockInjector -> YMTg:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> wfHp
    void add(int,java.lang.String,java.lang.Object) -> wfHp
    java.lang.Object get(java.lang.String) -> get
    void inject() -> HCQR
    react.surge.util.Protocol getVersion() -> CVES
react.binject.InjectedBlock -> QpPy:
    react.surge.util.Protocol getInjectProtocol() -> YDdA
    java.lang.String getInjectKey() -> oLrf
    java.lang.String getInjectCKey() -> ydBr
    int getInjectId() -> MBAs
react.binject.ReflectionUtil -> Qopi:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> wfHp
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> wfHp
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> wfHp
    41:54:void setAccessible(java.lang.reflect.Field) -> wfHp
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> wfHp
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> wfHp
react.binject.V10.BlockInjector10 -> vYvx:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> ogBf
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> wfHp
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> wfHp
react.binject.V11.BlockInjector11 -> UtNN:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> UAEC
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> wfHp
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> wfHp
react.binject.V12.BlockInjector12 -> WiPh:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> eaTY
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> wfHp
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> wfHp
react.binject.V8.BlockInjector8 -> bWnD:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> cuAO
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> wfHp
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> wfHp
react.binject.V9.BlockInjector9 -> hkAu:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> UcHS
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> wfHp
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> wfHp
react.cache.CachedEntity -> rNLB:
    java.util.UUID uid -> KUlA
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> SfSE
    double x -> x
    double y -> y
    double z -> z
    double vx -> iDNe
    double vy -> DjhD
    double vz -> oyDp
    double dx -> LYNA
    double dy -> UchF
    double dz -> VxMK
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> UAEC
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> CoXq
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> ntdS
    120:121:void setVx(double) -> TEpd
    125:125:double getVy() -> dECh
    130:131:void setVy(double) -> UshV
    135:135:double getVz() -> WrBk
    140:141:void setVz(double) -> IVri
    145:145:double getDx() -> bhpM
    150:151:void setDx(double) -> ogBf
    155:155:double getDy() -> YMTg
    160:161:void setDy(double) -> UAEC
    165:165:double getDz() -> QpPy
    170:171:void setDz(double) -> eaTY
    175:175:java.util.UUID getUid() -> Qopi
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> jNcx:
    int age -> qLFh
    boolean ageLock -> UBFD
    boolean breed -> KLxf
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> UAEC
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> vYvx
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> UtNN
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> GPpO:
    org.bukkit.DyeColor dye -> urFA
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> UAEC
    30:30:org.bukkit.DyeColor getDye() -> WiPh
    35:36:void setDye(org.bukkit.DyeColor) -> wfHp
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> XRaG:
    react.glang.GList potionEffects -> cJnE
    boolean canPickupItems -> OYeo
    org.bukkit.inventory.ItemStack[] armorContents -> gFXu
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> WjNw
    double maxHealth -> maxHealth
    int maxAir -> uXRO
    int air -> DsYa
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> UAEC
    63:63:react.glang.GList getPotionEffects() -> bWnD
    68:69:void setPotionEffects(react.glang.GList) -> KTiB
    73:73:boolean isCanPickupItems() -> hkAu
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> rNLB
    138:139:void setMaxAir(int) -> mFgo
    143:143:int getAir() -> jNcx
    148:149:void setAir(int) -> LGKf
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> skAh:
    boolean sheared -> LHLj
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> UAEC
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> ylQp:
    org.bukkit.inventory.ItemStack is -> OHdg
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> UAEC
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> OjJY:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> VfNX:
    react.chronophysics.HopperDirection DOWN -> qmgy
    react.chronophysics.HopperDirection NORTH -> NNSL
    react.chronophysics.HopperDirection SOUTH -> vchr
    react.chronophysics.HopperDirection EAST -> vkyX
    react.chronophysics.HopperDirection WEST -> jiXM
    int direction -> direction
    react.chronophysics.HopperDirection[] $VALUES -> oWDq
    6:6:react.chronophysics.HopperDirection[] values() -> values
    6:6:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> TEpd
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> wfHp
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> KTiB
    6:12:void <clinit>() -> <clinit>
react.chronophysics.HopperDirection$1 -> VfNX$1:
    int[] $SwitchMap$react$chronophysics$HopperDirection -> YVdg
    23:23:void <clinit>() -> <clinit>
react.chronophysics.HopperWormhole -> ckre:
    org.bukkit.block.Hopper source -> qCYE
    react.glang.GList path -> oMrq
    org.bukkit.block.Hopper destination -> gqPe
    18:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> GPpO
    31:31:react.glang.GList getPath() -> XRaG
    36:36:org.bukkit.block.Hopper getDestination() -> skAh
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> wfHp
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> ksih:
    org.bukkit.block.Hopper h -> TOgC
    14:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> wfHp
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> ylQp
    62:62:boolean isLockedByRedstone() -> OjJY
react.command.CommandAct -> ktKI:
    41:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> wfHp
    186:192:react.text.RTX getBeginningRTX() -> VfNX
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> wfHp
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> KTiB
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> WhmD
    331:346:react.glang.GList getSortedCommands() -> ckre
    351:358:int getPageSize(int) -> quXW
    363:363:boolean isValidPage(int,int) -> wfHp
    368:377:react.glang.GList getPage(int,int) -> KTiB
react.command.CommandActionLog -> jyXM:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
react.command.CommandCPUScore -> QyAi:
    16:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
react.command.CommandCapabilities -> PKKL:
    16:23:void <init>() -> <init>
    28:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
react.command.CommandChunkBlame -> jyWs:
    24:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
react.command.CommandChunkBlame$1 -> jyWs$1:
    org.bukkit.command.CommandSender val$sender -> eaxY
    react.command.CommandChunkBlame this$0 -> yvCq
    37:37:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> jyWs$1$1:
    java.lang.String val$i -> GcTL
    react.glang.GMap val$top -> neBs
    int val$totalx -> EnOc
    react.command.CommandChunkBlame$1 this$1 -> WYOV
    66:66:void <init>(react.command.CommandChunkBlame$1,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> biQA:
    17:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
react.command.CommandHelp -> mXQV:
    28:36:void <init>() -> <init>
    41:42:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
    46:65:void sendPage(org.bukkit.command.CommandSender,int,int) -> wfHp
    69:75:react.text.RTX getBeginningRTX() -> VfNX
    80:140:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> wfHp
    144:154:void sendHeader(org.bukkit.command.CommandSender,int,int) -> KTiB
    158:187:void sendFooter(org.bukkit.command.CommandSender,int,int) -> WhmD
    191:198:react.glang.GList getSortedCommands() -> ckre
    203:210:int getPageSize(int) -> quXW
    215:215:boolean isValidPage(int,int) -> wfHp
    220:229:react.glang.GList getPage(int,int) -> KTiB
react.command.CommandMap -> QorY:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
react.command.CommandMonitor -> SmhN:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
react.command.CommandReload -> BBCu:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
react.command.CommandReload$1 -> BBCu$1:
    org.bukkit.command.CommandSender val$sender -> eaxY
    react.command.CommandReload this$0 -> PnMV
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> BBCu$1$1:
    react.command.CommandReload$1 this$1 -> ePts
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> XIsI:
    28:35:void <init>() -> <init>
    40:48:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
    52:61:org.bukkit.inventory.ItemStack makeBook() -> ksih
    66:92:void addSpikePages(react.glang.GList) -> WhmD
    96:106:void addStatusPages(react.glang.GList) -> TEpd
    110:127:int findSlot(org.bukkit.entity.Player) -> KTiB
react.command.CommandVersion -> LrFT:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> wfHp
react.controller.ActionController -> NxLU:
    int kiv -> USIL
    react.glang.GMap actions -> LGmW
    react.glang.GMap pending -> Hnec
    react.glang.GList tasks -> lLxm
    18:18:void <init>() -> <init>
    29:70:void start() -> start
    74:75:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> wfHp
    79:100:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> KTiB
    105:105:react.api.IAction getAction(react.api.ActionType) -> wfHp
    110:111:void registerAction(react.api.IAction) -> wfHp
    117:117:void stop() -> stop
    122:187:void tick() -> tick
    191:191:react.glang.GList getActions() -> ktKI
    196:203:react.glang.GList getActionNames() -> jyXM
    20:20:void <clinit>() -> <clinit>
react.controller.BenchmarkController -> yBBH:
    react.api.CPUBenchmark finished -> NNTW
    boolean done -> klYv
    int score -> MdVr
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    13:13:react.api.CPUBenchmark access$002(react.controller.BenchmarkController,react.api.CPUBenchmark) -> wfHp
    13:13:boolean access$102(react.controller.BenchmarkController,boolean) -> wfHp
    13:13:react.api.CPUBenchmark access$000(react.controller.BenchmarkController) -> wfHp
react.controller.BenchmarkController$1 -> yBBH$1:
    react.controller.BenchmarkController this$0 -> Xucj
    27:27:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
react.controller.BenchmarkController$1$1 -> yBBH$1$1:
    react.controller.BenchmarkController$1 this$1 -> ohFG
    32:32:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
react.controller.BenchmarkController$1$1$1 -> yBBH$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> toDX
    37:37:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> ydDY:
    react.glang.GMap rangeMapping -> sALm
    react.binject.IBlockInjector injector -> QqPm
    boolean injected -> hROS
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> QyAi
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> PKKL
    115:115:react.binject.IBlockInjector getInjector() -> jyWs
    120:120:boolean isInjected() -> biQA
react.controller.ChronophyFluidController -> jEvF:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> QNQN:
    boolean firstTickList -> hsqT
    long firstTick -> wUld
    long lastTick -> tUUH
    react.gmath.Average aCSMS -> aoaA
    react.glang.GMap pluginLoads -> MJsV
    react.glang.GMap playerLoads -> nufS
    int serverLoads -> mrcR
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> mXQV
    63:73:void tickNextTickList() -> QorY
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> wfHp
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> wfHp
    171:171:boolean isFirstTickList() -> SmhN
    176:176:long getFirstTick() -> BBCu
    181:181:long getLastTick() -> XIsI
    186:186:react.gmath.Average getaCSMS() -> LrFT
    191:191:react.glang.GMap getPluginLoads() -> NxLU
    196:196:react.glang.GMap getPlayerLoads() -> yBBH
    201:201:int getServerLoads() -> ydDY
    21:21:react.glang.GMap access$000(react.controller.ChunkController) -> wfHp
    21:21:int access$108(react.controller.ChunkController) -> KTiB
    21:21:react.glang.GMap access$200(react.controller.ChunkController) -> WhmD
react.controller.ChunkController$1 -> QNQN$1:
    org.bukkit.event.world.ChunkLoadEvent val$e -> HoJH
    react.controller.ChunkController this$0 -> LreK
    131:131:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> WhmD
    131:131:void run(java.lang.Object) -> wfHp
react.controller.CommandController -> SCTH:
    react.glang.GList commands -> FOQP
    boolean k -> NVgl
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> eaTY
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> cuAO
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> wfHp
    317:317:react.glang.GList getCommands() -> jEvF
    322:323:void setCommands(react.glang.GList) -> UshV
    327:327:boolean isK() -> QNQN
    332:333:void setK(boolean) -> cuAO
react.controller.EntityCullController -> rooi:
    react.glang.GSet flags -> JAkC
    react.glang.GSet defer -> Hnho
    react.glang.GMap maxs -> BeFr
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> SCTH
    172:180:int cull(org.bukkit.Chunk) -> WhmD
    185:285:int partialCull(org.bukkit.Chunk) -> TEpd
react.controller.EntityStackController -> AiVK:
    react.glang.GList stacks -> WbCw
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> IVri
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> WhmD
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> TEpd
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> wfHp
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> wfHp
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> UshV
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> wfHp
react.controller.EntityStackController$1 -> AiVK$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> Wrdg
    react.controller.EntityStackController this$0 -> tvvc
    249:249:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> Dikh:
    react.glang.GMap slots -> HMFy
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> wfHp
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> wfHp
react.controller.ExplosiveController -> VwPo:
    boolean firstTickList -> hsqT
    long firstTick -> wUld
    long lastTick -> tUUH
    react.gmath.Average aCSMS -> aoaA
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> mXQV
    50:60:void tickNextTickList() -> QorY
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> wfHp
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> wfHp
    89:89:boolean isFirstTickList() -> SmhN
    94:94:long getFirstTick() -> BBCu
    99:99:long getLastTick() -> XIsI
    104:104:react.gmath.Average getaCSMS() -> LrFT
react.controller.FastDecayController -> oUdv:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> wfHp
    47:123:void checkBreak(org.bukkit.block.Block) -> WhmD
    127:135:void decay(org.bukkit.block.Block) -> TEpd
    141:141:void tick() -> tick
react.controller.FastDecayController$1 -> oUdv$1:
    react.glang.GMap val$locs -> ChKa
    react.controller.FastDecayController this$0 -> kclB
    57:57:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    61:61:boolean isAllowedSplooge(org.bukkit.Location) -> KTiB
    67:67:boolean isAllowedSource(org.bukkit.Location) -> WhmD
    73:92:void clipped(org.bukkit.Location) -> wfHp
    97:120:void finished() -> finished
react.controller.FastDecayController$1$1 -> oUdv$1$1:
    int val$i -> bbBu
    react.controller.FastDecayController$1 this$1 -> uhxN
    102:102:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,int) -> <init>
    106:116:void run() -> run
react.controller.FastDecayController$2 -> oUdv$2:
    org.bukkit.block.Block val$b -> DYlV
    react.controller.FastDecayController this$0 -> kclB
    128:128:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    132:133:void run() -> run
react.controller.FeatureController -> HCUF:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.FluidController -> aemi:
    react.glang.GSet ignore -> BSer
    int flowsPerTick -> rpoe
    int flowsPerSecond -> iTry
    react.gmath.Average aFST -> ChIj
    react.gmath.Average aFSS -> ChIk
    react.gmath.Average aFSMS -> FiCM
    boolean firstTickList -> hsqT
    long firstTick -> wUld
    long lastTick -> tUUH
    react.glang.GSet frozen -> XJqd
    react.glang.GMap queue -> fKig
    react.glang.GMap freezeTimes -> XKSE
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> UshV
    68:76:void checkChunks() -> rooi
    80:97:void checkChunk(org.bukkit.Chunk) -> IVri
    101:107:void queue(org.bukkit.block.Block) -> UshV
    111:111:boolean isFrozen(org.bukkit.Chunk) -> ogBf
    116:117:void freeze(org.bukkit.Chunk) -> UAEC
    121:127:void unfreeze(org.bukkit.Chunk) -> eaTY
    131:138:void freeze(org.bukkit.Chunk,long) -> wfHp
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> mXQV
    172:182:void tickNextTickList() -> QorY
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> wfHp
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> wfHp
    248:248:react.glang.GSet getIgnore() -> AiVK
    253:253:int getTransfersPerTick() -> Dikh
    258:258:int getTransfersPerSecond() -> VwPo
    263:263:react.gmath.Average getaFST() -> oUdv
    268:268:react.gmath.Average getaFSS() -> HCUF
    273:273:react.gmath.Average getaFSMS() -> aemi
    278:278:boolean isFirstTickList() -> SmhN
    283:283:long getFirstTick() -> BBCu
    288:288:long getLastTick() -> XIsI
    293:293:react.glang.GSet getFrozen() -> vtKs
    298:298:react.glang.GMap getQueue() -> RsUh
    303:303:react.glang.GMap getFreezeTimes() -> rMlR
react.controller.GlassController -> vtKs:
    react.glang.GMap q -> ydbk
    react.glang.GList g -> KgPg
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> WhmD
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> TEpd
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> UshV
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> wfHp
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> wfHp
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> wfHp
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> wfHp
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> wfHp
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> wfHp
    33:33:react.glang.GList access$000(react.controller.GlassController) -> wfHp
react.controller.GlassController$1 -> vtKs$1:
    react.glang.GMap val$cc -> pbXk
    react.controller.GlassController this$0 -> yJpK
    85:85:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> vtKs$1$1:
    org.bukkit.Location val$i -> xsBH
    org.bukkit.entity.Player val$j -> CNXS
    react.controller.GlassController$1 this$1 -> jOeo
    107:107:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> RsUh:
    react.glang.GMap g -> BCDc
    react.glang.GMap gr -> WsFs
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> wfHp
    121:156:void toggleMapping(org.bukkit.entity.Player) -> IVri
    160:160:react.glang.GMap getG() -> hsTR
    165:165:react.glang.GMap getGr() -> BJTs
    28:28:react.glang.GMap access$000(react.controller.GraphController) -> wfHp
    28:28:react.glang.GMap access$100(react.controller.GraphController) -> KTiB
react.controller.GraphController$1 -> RsUh$1:
    react.controller.GraphController this$0 -> uqlF
    49:49:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> RsUh$2:
    react.controller.GraphController this$0 -> uqlF
    85:85:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> RsUh$3:
    org.bukkit.event.player.PlayerJoinEvent val$e -> xHQW
    react.controller.GraphController this$0 -> uqlF
    101:101:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> rMlR:
    react.glang.GSet ignore -> BSer
    int transfersPerTick -> rydS
    int transfersPerSecond -> VgSC
    react.gmath.Average aHST -> dEfi
    react.gmath.Average aHSS -> YEgv
    react.gmath.Average aHSMS -> yCCc
    boolean firstTickList -> hsqT
    long firstTick -> wUld
    long lastTick -> tUUH
    react.glang.GSet frozen -> XJqd
    react.glang.GMap queue -> fKig
    react.glang.GMap freezeTimes -> XKSE
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> UshV
    65:73:void checkChunks() -> rooi
    77:94:void checkChunk(org.bukkit.Chunk) -> IVri
    98:104:void queue(org.bukkit.block.Block) -> UshV
    108:108:boolean isFrozen(org.bukkit.Chunk) -> ogBf
    113:114:void freeze(org.bukkit.Chunk) -> UAEC
    118:124:void unfreeze(org.bukkit.Chunk) -> eaTY
    128:135:void freeze(org.bukkit.Chunk,long) -> wfHp
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> mXQV
    169:179:void tickNextTickList() -> QorY
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> wfHp
    207:207:react.glang.GSet getIgnore() -> AiVK
    212:212:int getTransfersPerTick() -> Dikh
    217:217:int getTransfersPerSecond() -> VwPo
    222:222:react.gmath.Average getaHST() -> ncbv
    227:227:react.gmath.Average getaHSS() -> NEGN
    232:232:react.gmath.Average getaHSMS() -> nSBe
    237:237:boolean isFirstTickList() -> SmhN
    242:242:long getFirstTick() -> BBCu
    247:247:long getLastTick() -> XIsI
    252:252:react.glang.GSet getFrozen() -> vtKs
    257:257:react.glang.GMap getQueue() -> RsUh
    262:262:react.glang.GMap getFreezeTimes() -> rMlR
react.controller.HopperOvertickController -> hsTR:
    react.glang.GList possiblePlunge -> pjlY
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> WhmD
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> wfHp
react.controller.LanguageController -> BJTs:
    java.io.File languageFolder -> OjoD
    int oldVersion -> EfCW
    java.io.File dlf -> WXsp
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> KfPr
    160:221:void downloadAll(boolean) -> UcHS
    225:261:void downloadLanguage(java.lang.String) -> lwKC
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> mFgo
    315:315:java.io.File getFileForLanguage(java.lang.String) -> LGKf
    320:332:void writeDefaults() -> hbRg
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    31:31:int access$002(react.controller.LanguageController,int) -> wfHp
    31:31:void access$100(react.controller.LanguageController) -> wfHp
react.controller.LanguageController$1 -> BJTs$1:
    react.controller.LanguageController this$0 -> WPby
    67:67:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> BJTs$2:
    react.controller.LanguageController this$0 -> WPby
    81:81:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
react.controller.LanguageController$2$1 -> BJTs$2$1:
    react.controller.LanguageController$2 this$1 -> macY
    104:104:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> wfHp
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> wfHp
    121:121:void onDownloadStarted(react.gnet.download.Download) -> wfHp
    126:128:void onDownloadFinished(react.gnet.download.Download) -> KTiB
    134:134:void onDownloadFailed(react.gnet.download.Download) -> WhmD
react.controller.LanguageController$3 -> BJTs$3:
    react.controller.LanguageController this$0 -> WPby
    194:194:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> BJTs$3$1:
    react.controller.LanguageController$3 this$1 -> VxTc
    199:199:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> BJTs$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> BKUr
    207:207:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> BJTs$4:
    java.io.File val$dld -> mabx
    react.controller.LanguageController this$0 -> WPby
    228:228:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> wfHp
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> wfHp
    245:245:void onDownloadStarted(react.gnet.download.Download) -> wfHp
    250:251:void onDownloadFinished(react.gnet.download.Download) -> KTiB
    257:257:void onDownloadFailed(react.gnet.download.Download) -> WhmD
react.controller.MonitorController -> ncbv:
    int maxCooldown -> ELNi
    react.api.TitleMonitor titleMonitor -> pkMO
    react.glang.GMap posts -> KfrF
    react.slate.PhantomSlate sb -> jrLa
    boolean ready -> BTIH
    43:47:void <init>() -> <init>
    52:87:void start() -> start
    91:91:react.slate.PhantomSlate constructActionLogBoard() -> JtRI
    96:114:void toggleActionLog(org.bukkit.entity.Player) -> ogBf
    118:136:void toggleMonitoring(org.bukkit.entity.Player) -> UAEC
    141:151:void stop() -> stop
    155:174:void constructMonitor() -> KTqH
    178:183:float calcVolume(react.api.ReactPlayer) -> wfHp
    188:188:boolean canMonitor(org.bukkit.entity.Player) -> eaTY
    193:193:boolean canActionLog(org.bukkit.entity.Player) -> cuAO
    198:203:boolean isMonitoring(org.bukkit.entity.Player) -> UcHS
    208:213:boolean isActionLogging(org.bukkit.entity.Player) -> lwKC
    218:222:void startMonitoring(org.bukkit.entity.Player) -> mFgo
    226:237:void stopMonitoring(org.bukkit.entity.Player) -> LGKf
    241:246:void startActionLogging(org.bukkit.entity.Player) -> quXW
    250:261:void stopActionLogging(org.bukkit.entity.Player) -> IODS
    267:267:void tick() -> tick
    271:274:void changePost(react.api.ReactPlayer) -> KTiB
    278:290:void processPlayer(react.api.ReactPlayer) -> WhmD
    295:295:void handleActionLog(org.bukkit.entity.Player) -> UYuc
    299:323:void handleTriggers(react.api.ReactPlayer) -> TEpd
    327:366:void handleScrolling(react.api.ReactPlayer) -> UshV
    370:398:void handleShifting(react.api.ReactPlayer) -> IVri
    402:424:void handlePosting(react.api.ReactPlayer) -> ogBf
    428:446:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> wfHp
    451:465:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> wfHp
    470:477:void tickMonitor(react.api.ReactPlayer) -> UAEC
    481:481:react.api.TitleMonitor getTitleMonitor() -> ccfp
    487:496:void on(org.bukkit.event.player.PlayerJoinEvent) -> wfHp
    501:510:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> wfHp
    515:527:void onTick() -> Btip
    531:553:void updateActionBoard() -> tSvH
    558:558:java.lang.String getTickName() -> sQSr
    34:34:react.slate.PhantomSlate access$002(react.controller.MonitorController,react.slate.PhantomSlate) -> wfHp
    34:34:react.slate.PhantomSlate access$100(react.controller.MonitorController) -> wfHp
    34:34:boolean access$202(react.controller.MonitorController,boolean) -> wfHp
    34:34:boolean access$200(react.controller.MonitorController) -> KTiB
    34:34:react.slate.PhantomSlate access$000(react.controller.MonitorController) -> WhmD
    36:36:void <clinit>() -> <clinit>
react.controller.MonitorController$1 -> ncbv$1:
    react.controller.MonitorController this$0 -> PfAV
    68:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    72:85:void run() -> run
react.controller.MonitorController$2 -> ncbv$2:
    react.controller.MonitorController this$0 -> PfAV
    532:532:void <init>(react.controller.MonitorController) -> <init>
    536:551:void run() -> run
react.controller.PhysicsController -> NEGN:
    react.glang.GMap samples -> xGoC
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> cuAO
    51:52:void onHopper(org.bukkit.Chunk) -> UcHS
    56:57:void onFluid(org.bukkit.Chunk) -> lwKC
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> wfHp
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> wfHp
    80:91:void onTick() -> Btip
    96:96:java.lang.String getTickName() -> sQSr
    101:101:react.glang.GMap getSamples() -> rMop
react.controller.PlayerController -> nSBe:
    react.glang.GList players -> DkPA
    react.glang.GSet save -> cTFL
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> Keji
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> wfHp
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> Pcxd
    113:113:react.glang.GList getPlayers() -> ssVu
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> wfHp
react.controller.PlayerController$1 -> nSBe$1:
    react.glang.GList val$toSave -> XmWr
    react.controller.PlayerController this$0 -> uhxt
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> KfPr:
    react.rai.IRAI rai -> JAnY
    boolean raiEnabled -> lwsx
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    18:18:react.rai.IRAI access$000(react.controller.RAIController) -> wfHp
react.controller.RAIController$1 -> KfPr$1:
    react.controller.RAIController this$0 -> EfDf
    49:49:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> hbRg:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> WhmD
react.controller.ReactServerInfo -> JtRI:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> YxLq
    27:27:int dgetGameProtocol() -> pjNN
    33:33:java.lang.String dgetGameVersion() -> ySDs
    39:39:java.lang.String dgetReactVersion() -> vQkR
    45:45:int dgetMaxPlayers() -> uOIQ
    51:58:react.glang.GList dgetConnectedPlayers() -> NgLc
    64:64:int dgetViewDistance() -> tTVY
    70:70:int dgetGamePort() -> MdIc
    76:76:java.lang.String dgetGameAddress() -> tmgo
    82:89:react.glang.GList dgetRemotePlugins() -> UQnQ
    95:102:react.glang.GList dgetWorlds() -> nlWc
    108:108:react.glang.GList dgetActions() -> myuS
    114:114:react.glang.GList dgetSamplers() -> jOIo
react.controller.RedstoneController -> KTqH:
    react.glang.GSet ignore -> BSer
    react.glang.GSet frozen -> XJqd
    react.glang.GMap queue -> fKig
    react.glang.GMap freezeTimes -> XKSE
    int redstonePerTick -> AixK
    int redstonePerSecond -> MBfr
    react.gmath.Average aRST -> ydgy
    react.gmath.Average aRSS -> FGDh
    react.gmath.Average aRSMS -> BSiR
    boolean firstTickList -> hsqT
    long firstTick -> wUld
    long lastTick -> tUUH
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> UshV
    95:101:void tick() -> tick
    105:113:void checkChunks() -> rooi
    117:134:void checkChunk(org.bukkit.Chunk) -> IVri
    138:144:void queue(org.bukkit.block.Block) -> UshV
    148:148:boolean isFrozen(org.bukkit.Chunk) -> ogBf
    153:154:void freeze(org.bukkit.Chunk) -> UAEC
    158:165:void flushTickList() -> mXQV
    169:179:void tickNextTickList() -> QorY
    183:189:void unfreeze(org.bukkit.Chunk) -> eaTY
    193:200:void freeze(org.bukkit.Chunk,long) -> wfHp
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> wfHp
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> wfHp
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> wfHp
    246:246:react.glang.GSet getIgnore() -> AiVK
    251:251:react.glang.GSet getFrozen() -> vtKs
    256:256:react.glang.GMap getQueue() -> RsUh
    261:261:react.glang.GMap getFreezeTimes() -> rMlR
    266:266:int getRedstonePerTick() -> UcOv
    271:271:int getRedstonePerSecond() -> MIut
    276:276:react.gmath.Average getaRST() -> SmkI
    281:281:react.gmath.Average getaRSS() -> wenw
    286:286:react.gmath.Average getaRSMS() -> vtOH
    291:291:boolean isFirstTickList() -> SmhN
    296:296:long getFirstTick() -> BBCu
    301:301:long getLastTick() -> XIsI
react.controller.RemoteController -> ccfp:
    react.remote.server.RemoteServer remoteServer -> ffCM
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> uOIF
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    12:12:void access$000(react.controller.RemoteController) -> wfHp
react.controller.RemoteController$1 -> ccfp$1:
    react.controller.RemoteController this$0 -> GQwQ
    20:20:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> ccfp$2:
    react.controller.RemoteController this$0 -> GQwQ
    37:37:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> Euaq
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> MlXY
react.controller.SampleController -> Btip:
    react.glang.GMap samplers -> FFdK
    react.surge.server.SuperSampler ss -> lNBU
    int cd -> QOTd
    29:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> NEHR
    69:74:void restartSuperSampler() -> gpSa
    78:79:void registerSampler(react.api.ISampler) -> WhmD
    83:83:react.api.ISampler getSampler(java.lang.String) -> quXW
    88:131:void constructSamplers() -> Ywjl
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> aeor
    187:209:void onTick() -> Btip
    214:214:java.lang.String getTickName() -> sQSr
    219:219:react.glang.GMap getSamplers() -> NUiK
    224:224:react.surge.server.SuperSampler getSs() -> XdHC
    229:229:int getCd() -> gxcT
    234:241:react.glang.GList getSamplerNames() -> ndFW
    22:22:react.surge.server.SuperSampler access$000(react.controller.SampleController) -> wfHp
react.controller.SampleController$1 -> Btip$1:
    react.controller.SampleController this$0 -> xYUP
    141:141:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> Btip$2:
    react.controller.SampleController this$0 -> xYUP
    153:153:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> tSvH:
    java.lang.String ipa -> lUrE
    react.glang.GList failures -> UuTL
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> IODS
    41:74:void checkForIP() -> Vnbh
    78:91:void scan(java.lang.Runnable) -> wfHp
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> tSvH$1:
    react.controller.SecurityController this$0 -> ymYM
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> tSvH$2:
    java.lang.String val$ip -> kAky
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> tSvH$3:
    java.lang.Thread val$t -> eHlb
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> sQSr:
    react.glang.GMap etl -> tnjP
    react.glang.GMap ttl -> CxpW
    20:20:void <init>() -> <init>
    28:44:void start() -> start
    49:62:void stop() -> stop
    69:76:void on(org.bukkit.event.world.WorldLoadEvent) -> wfHp
    83:90:void on(org.bukkit.event.world.WorldUnloadEvent) -> wfHp
    96:96:void tick() -> tick
    100:112:void witholdWorld(org.bukkit.World) -> ogBf
    116:128:void releaseWorld(org.bukkit.World) -> UAEC
    132:144:double getUniversalEntityTick() -> cRdm
    149:161:double getUniversalEntityLimit() -> gNOo
    166:178:double getUniversalTileLimit() -> GYfM
    183:195:double getUniversalTileTick() -> DGlB
    200:207:double getUniversalEntityDroppedTicks() -> QhDi
    212:219:double getUniversalTileDroppedTicks() -> ofgx
    224:225:void setEntityTickLimit(org.bukkit.World,double) -> wfHp
    229:230:void setTileTickLimit(org.bukkit.World,double) -> KTiB
    234:234:double getEntityTickLimit(org.bukkit.World) -> eaTY
    239:239:double getTileTickLimit(org.bukkit.World) -> cuAO
    244:244:double getLastEntityTick(org.bukkit.World) -> UcHS
    249:249:double getLastTileTick(org.bukkit.World) -> lwKC
    254:254:double getEntityDroppedTicks(org.bukkit.World) -> mFgo
    259:259:double getTileDroppedTicks(org.bukkit.World) -> LGKf
    264:281:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> wfHp
react.controller.SpikeController -> rMop:
    react.glang.GMap spikes -> nKWI
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> Btip
    111:111:java.lang.String getTickName() -> sQSr
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> iKdq
    128:160:void whoFuckingDidThis(react.glang.Callback) -> wfHp
    25:25:react.glang.GMap access$000(react.controller.SpikeController) -> wfHp
react.controller.SpikeController$1 -> rMop$1:
    react.controller.SpikeController this$0 -> OsbX
    35:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> rMop$1$1:
    react.controller.SpikeController$1 this$1 -> JtrJ
    40:40:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> rMop$2:
    react.glang.GMap val$vv -> Xlxo
    react.controller.SpikeController this$0 -> OsbX
    75:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> rMop$3:
    java.lang.Thread val$t -> eHlb
    react.glang.Callback val$callback -> yTGF
    react.controller.SpikeController this$0 -> OsbX
    131:131:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> ssVu:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.event.ReactEvent -> YxLq:
    org.bukkit.event.HandlerList handlers -> FNsM
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> pjNN:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> ySDs:
    react.event.ScrollDirection direction -> PebM
    boolean cancellled -> bGrT
    int amount -> oyMa
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> bqdf
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> HKjH
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> vQkR:
    react.event.ScrollDirection DOWN -> HMIp
    react.event.ScrollDirection UP -> ejnJ
    react.event.ScrollDirection[] $VALUES -> qmpn
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gbench.Profiler -> uOIQ:
    long nanos -> htWl
    long startNano -> eYmX
    long millis -> xisl
    long startMillis -> msFa
    double time -> bivG
    boolean profiling -> ETah
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> IODS
    78:78:double getTicks() -> NVLd
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> RHfP
    93:93:double getHours() -> Lyxw
    98:98:double getMilliseconds() -> cAfO
    103:103:long getNanoseconds() -> uEyc
    108:108:long getNanos() -> ogMM
    113:113:long getStartNano() -> ntkB
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> gFDA
    128:128:double getTime() -> jEye
    133:133:boolean isProfiling() -> qeAp
react.gconcurrent.A -> NgLc:
    react.gconcurrent.ParallelPoolManager mgr -> mXrl
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> NgLc$1:
    react.gconcurrent.A this$0 -> rhby
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> tTVY:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> MdIc:
    react.gconcurrent.QueueMode mode -> AahO
    react.glang.GList threads -> iTwT
    int next -> ndfy
    int threadCount -> giEN
    java.util.Queue squeue -> dgkX
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> nBhG
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> vuSk
    22:23:void syncQueue(react.gconcurrent.Execution) -> wfHp
    long getNanoGate() -> Cfnc
    29:51:void tickSyncQueue() -> HCYv
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> JcSR
    102:109:int getTotalQueueSize() -> Fggc
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> KTiB
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> nBGA
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> JstH
    161:188:void updateThreadInformation() -> cchV
    192:224:react.gconcurrent.ParallelThread nextThread() -> vQmI
    229:235:void createThreads(int) -> UYuc
    239:239:react.gconcurrent.QueueMode getMode() -> VndV
    244:244:int getNext() -> ofjd
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> ArKS
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> dEIP
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> VDPe
react.gconcurrent.ParallelThread -> tmgo:
    java.util.Queue queue -> yvLh
    react.gconcurrent.ThreadInformation info -> nBhG
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> cuAO
    63:70:void execute(react.gconcurrent.Execution) -> WhmD
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> KTiB
    92:92:java.util.Queue getQueue() -> dgKh
    97:97:react.gconcurrent.ThreadInformation getInfo() -> HLIv
react.gconcurrent.QueueMode -> UQnQ:
    react.gconcurrent.QueueMode ROUND_ROBIN -> lofY
    react.gconcurrent.QueueMode SMALLEST -> xYVg
    react.gconcurrent.QueueMode[] ENUM$VALUES -> KVVP
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> nlWc:
    react.gconcurrent.ParallelPoolManager mgr -> mXrl
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> nlWc$1:
    react.gconcurrent.S this$0 -> KgXA
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> myuS:
    long tick -> YqAV
    long atick -> MBjA
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> jOIo:
    double ticksPerSecond -> PwHP
    int queuedSize -> qLQn
    boolean processing -> QNvA
    double utilization -> bris
    react.gmath.Average ticksPerSecondAverage -> dWMu
    long tick -> YqAV
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> RsYn
    33:35:void setTicksPerSecond(double) -> UcHS
    39:39:int getQueuedSize() -> loCc
    44:45:void setQueuedSize(int) -> Keji
    49:49:boolean isProcessing() -> OipL
    54:55:void setProcessing(boolean) -> lwKC
    59:59:double getUtilization() -> RjiB
    64:65:void setUtilization(double) -> lwKC
    69:69:double getTicksPerSecondAverage() -> cJVf
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> AXWb
    89:89:int getId() -> getId
react.gformat.F -> UcOv:
    java.text.NumberFormat NF -> NgpJ
    java.text.DecimalFormat DF -> qTaa
    java.lang.String[] NAMES -> tCxV
    java.math.BigInteger THOUSAND -> MBjS
    java.util.NavigableMap MAP -> Qhhi
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> UYuc
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> wfHp
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> wfHp
    201:221:java.lang.String timeLong(long,int) -> wfHp
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> WhmD
    236:236:java.lang.String b(double) -> mFgo
    241:258:java.lang.String b(java.math.BigInteger) -> wfHp
    263:267:void instantiate() -> nSGP
    279:279:java.lang.String fileSize(long) -> TEpd
    292:292:java.lang.String memSize(long) -> UshV
    305:306:java.lang.String stamp(long) -> IVri
    322:349:java.lang.String ofSize(long,int) -> KTiB
    363:368:java.lang.String trim(java.lang.String,int) -> KTiB
    381:401:java.lang.String cname(java.lang.String) -> Keji
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> ogBf
    459:477:java.lang.String memx(long) -> UAEC
    491:492:java.lang.String f(long) -> eaTY
    504:505:java.lang.String f(int) -> Pcxd
    519:528:java.lang.String f(double,int) -> KTiB
    544:553:java.lang.String fd(double,int) -> WhmD
    567:576:java.lang.String f(float,int) -> wfHp
    587:587:java.lang.String f(double) -> LGKf
    598:598:java.lang.String f(float) -> wfHp
    613:613:java.lang.String pc(double,int) -> TEpd
    628:628:java.lang.String pc(float,int) -> KTiB
    641:641:java.lang.String pc(double) -> quXW
    654:654:java.lang.String pc(float) -> KTiB
    670:670:java.lang.String pc(int,int,int) -> wfHp
    684:684:java.lang.String pc(int,int) -> WhmD
    700:700:java.lang.String pc(long,long,int) -> wfHp
    714:714:java.lang.String pc(long,long) -> TEpd
    726:726:java.lang.String msSeconds(long) -> cuAO
    740:740:java.lang.String msSeconds(long,int) -> WhmD
    752:752:java.lang.String nsMs(long) -> UcHS
    766:766:java.lang.String nsMs(long,int) -> TEpd
    780:780:java.lang.String nsMsd(long,int) -> UshV
react.glang.AccessCallback -> MIut:
    java.lang.Object get() -> get
react.glang.Adapter -> SmkI:
    java.lang.Object adapt(java.lang.Object) -> IVri
    java.lang.Object onAdapt(java.lang.Object) -> ogBf
react.glang.Callback -> wenw:
    java.lang.Object t -> yShT
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> wfHp
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> vtOH:
    double i -> TrPy
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> IODS
react.glang.FinalFloat -> uOIF:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> WhmD
react.glang.FinalInteger -> Euaq:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> wKtl
react.glang.FinalLong -> MlXY:
    long i -> kRnw
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> lwKC
react.glang.FinalString -> NEHR:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> gpSa:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> IVri
    java.lang.Object onAdapt(java.lang.Object) -> ogBf
react.glang.GBiset -> Ywjl:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> fwEe
    java.lang.Object b -> gyhH
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> aMEF
    53:54:void setA(java.lang.Object) -> UAEC
    63:63:java.lang.Object getB() -> WGVp
    73:74:void setB(java.lang.Object) -> eaTY
react.glang.GList -> aeor:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> TEpd
    45:52:react.glang.GList grepDistance(int,int) -> UshV
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> KTiB
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> prbP
    188:190:react.glang.GList shuffleCopy() -> eXpG
    198:199:void shuffle() -> UbsS
    210:236:react.glang.GList split() -> lTse
    248:248:boolean hasIndex(int) -> UHre
    258:259:java.lang.Object pickRandom() -> bGUt
    270:277:react.glang.GList stringList() -> INnr
    288:292:void forEach(react.glang.Callback) -> KTiB
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> lTfO
    336:336:react.glang.GList cropFrom(int) -> Ywbs
    341:373:react.glang.GList split(int) -> Yfac
    389:389:react.glang.GList cropTo(int) -> CwdX
    406:416:react.glang.GList crop(int,int) -> IVri
    427:431:react.glang.GList removeDuplicates() -> sQWq
    442:446:void removeAll(java.lang.Object) -> cuAO
    455:455:boolean hasDuplicates() -> fKQm
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> YELf
    484:490:void push(java.lang.Object,int) -> wfHp
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> UcHS
    528:532:void add(java.util.List) -> wfHp
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> NgPl
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> vcQf
    626:627:react.glang.GList qdel(java.lang.Object) -> lwKC
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> DHRC
    662:669:java.lang.Object popLast() -> bGVb
    674:683:java.lang.Object popRandom() -> aMDi
react.glang.GListAdapter -> NUiK:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> KTiB
    java.lang.Object onAdapt(java.lang.Object) -> ogBf
react.glang.GMap -> XdHC:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> lLbn
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> wfHp
    64:81:react.glang.GMap flip() -> kbqL
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> wfHp
    121:121:react.glang.GList k() -> Pcxd
    131:131:react.glang.GSet kset() -> Mtls
    141:141:react.glang.GList v() -> KCsC
    151:151:react.glang.GSet vset() -> sIFn
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> KTiB
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> ogBf
    209:219:react.glang.GMap removeDuplicateValues() -> uOLY
    233:242:void put(react.glang.GList,react.glang.GList) -> wfHp
    251:267:react.glang.GList sortK() -> tBvl
    277:293:react.glang.GList sortV() -> NEMH
react.glang.GQuadraset -> gxcT:
    java.lang.Object a -> fwEe
    java.lang.Object b -> gyhH
    java.lang.Object c -> DHnm
    java.lang.Object d -> ssxm
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> aMEF
    25:26:void setA(java.lang.Object) -> UAEC
    30:30:java.lang.Object getB() -> WGVp
    35:36:void setB(java.lang.Object) -> eaTY
    40:40:java.lang.Object getC() -> CDlt
    45:46:void setC(java.lang.Object) -> mFgo
    50:50:java.lang.Object getD() -> uqNs
    55:56:void setD(java.lang.Object) -> LGKf
react.glang.GSet -> ndFW:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> Vnbh:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> fwEe
    java.lang.Object b -> gyhH
    java.lang.Object c -> DHnm
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> aMEF
    26:27:void setA(java.lang.Object) -> UAEC
    31:31:java.lang.Object getB() -> WGVp
    36:37:void setB(java.lang.Object) -> eaTY
    41:41:java.lang.Object getC() -> CDlt
    46:47:void setC(java.lang.Object) -> mFgo
react.gmath.Average -> cRdm:
    double[] values -> cSiF
    double average -> fecP
    boolean dirty -> xXth
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> UYuc
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> ydJB
react.gmath.DoubleArrayUtils -> gNOo:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> wfHp
    17:19:void wrapRight(double[]) -> wfHp
    23:27:void fill(double[],double) -> fill
react.gmath.M -> GYfM:
    int precision -> KUtQ
    int modulus -> fveJ
    float[] sin -> vtqd
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> wfHp
    31:36:boolean r(java.lang.Double) -> KTiB
    51:51:double tps(long,int) -> IVri
    63:63:double ticksFromNS(long) -> mFgo
    75:101:java.lang.String toRoman(int) -> gVYF
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> ogBf
    144:216:int fromRoman(java.lang.String) -> Pcxd
    226:226:long ns() -> ETDs
    236:236:long ms() -> KLgI
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> KTiB
    333:333:float sinLookup(int) -> pYCR
react.gnet.client.Client -> DGlB:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> GAWc
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> wfHp
    74:74:react.gnet.packet.PacketHandler getHandler() -> lfWp
react.gnet.client.IClient -> QhDi:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> wfHp
    react.gnet.packet.PacketHandler getHandler() -> lfWp
react.gnet.download.Download -> ofgx:
    react.gnet.download.DownloadState state -> ecAK
    react.gnet.download.DownloadType type -> HMLM
    react.gnet.download.DownloadStatus status -> TPOA
    react.gnet.download.DownloadMonitor monitor -> VNDM
    java.net.URL url -> url
    java.io.File file -> sQuv
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> NpCg
    92:92:react.gnet.download.DownloadType getType() -> eabq
    97:97:react.gnet.download.DownloadStatus getStatus() -> KoJk
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> BdOc
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> iKdq:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> wfHp
    void onDownloadStarted(react.gnet.download.Download) -> wfHp
    void onDownloadFinished(react.gnet.download.Download) -> KTiB
    void onDownloadFailed(react.gnet.download.Download) -> WhmD
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> wfHp
react.gnet.download.DownloadState -> bqdf:
    react.gnet.download.DownloadState IDLE -> Dban
    react.gnet.download.DownloadState DOWNLOADING -> SCxq
    react.gnet.download.DownloadState FAILED -> Dscd
    react.gnet.download.DownloadState FINISHED -> xGrh
    react.gnet.download.DownloadState[] $VALUES -> bjYN
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> HKjH:
    long bytesDownloaded -> tTxY
    long bytesTotal -> HCyt
    long bytesPerSecond -> VgVd
    long timeElapsed -> jOlP
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> eXrA
    25:25:long getBytesDownloaded() -> QVhn
    30:31:void setBytesDownloaded(long) -> LGKf
    35:35:long getBytesTotal() -> twAV
    40:41:void setBytesTotal(long) -> quXW
    45:45:long getBytesPerSecond() -> AFyC
    50:51:void setBytesPerSecond(long) -> IODS
    55:55:long getTimeElapsed() -> lMEg
    60:61:void setTimeElapsed(long) -> UYuc
react.gnet.download.DownloadType -> NVLd:
    react.gnet.download.DownloadType DETERMINATE -> XvMb
    react.gnet.download.DownloadType INDETERMINATE -> nBgA
    react.gnet.download.DownloadType[] $VALUES -> hcXj
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> RHfP:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> FxmN
    java.lang.String getPacketName() -> flvS
react.gnet.packet.IncompatablePacketException -> Lyxw:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> cAfO:
    react.gnet.packet.PacketBinding SERVER_BOUND -> VogC
    react.gnet.packet.PacketBinding CLIENT_BOUND -> uPKx
    react.gnet.packet.PacketBinding[] $VALUES -> Koif
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> uEyc:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> ogMM:
    react.glang.GList accept -> vSRi
    react.gnet.packet.PacketBinding side -> fDDQ
    react.gnet.streams.OSS out -> AGxl
    react.gnet.streams.ISS in -> iwaJ
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> wfHp
    28:34:void accept(react.gnet.packet.IPacket) -> KTiB
    38:46:react.gnet.packet.IPacket findPacket(int) -> bhkH
    51:66:react.gnet.packet.IPacket read() -> RIKf
    71:77:void write(react.gnet.packet.IPacket) -> WhmD
react.gnet.packet.UnhandledPacketException -> ntkB:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> gFDA:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> lfWp
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> TEpd
react.gnet.server.Server -> jEye:
    int port -> port
    java.net.ServerSocket socket -> DcFO
    react.gnet.packet.PacketHandler handler -> GAWc
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> lfWp
    37:84:void run() -> run
    88:91:void pstart() -> LGYt
    95:96:void pstop() -> sjjs
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> TEpd
react.gnet.streams.ISS -> qeAp:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> qmuv
    boolean built -> FiLU
    byte[] readBuffer -> hkki
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> JHsa
    64:72:react.glang.GList readStringList() -> OHRi
    77:85:react.glang.GList readDoubleList() -> TiEB
    90:98:react.glang.GList readLongList() -> XAjt
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> wfHp
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> wfHp
    136:137:react.gnet.streams.ISS gzip() -> afXd
    142:147:void build() -> vtUN
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> KTiB
    435:436:void close() -> close
react.gnet.streams.OSS -> Cfnc:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> pYpg
    react.gnet.streams.StreamBuilder bu -> qmuv
    boolean built -> FiLU
    byte[] writeBuffer -> OHrJ
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> kkUq
    41:42:react.gnet.streams.OSS gzip(int) -> gDuv
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> KTiB
    53:58:void build() -> vtUN
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> UAEC
    102:108:void writeDoubleList(react.glang.GList) -> eaTY
    112:118:void writeLongList(react.glang.GList) -> cuAO
    122:128:void writeStreamableList(react.glang.GList) -> UcHS
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> FhJm
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> WhmD
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> HCYv:
    react.glang.GList constructors -> jrRp
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> wfHp
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> wfHp
    49:50:void bind(react.gnet.streams.StreamConstructor) -> wfHp
    54:55:void bindGZIP(int) -> AFkU
    59:60:void bindGZIP() -> KTvT
    64:65:void bindCipher(javax.crypto.Cipher) -> WhmD
    69:70:void bindBuffer(int) -> PliD
    74:75:void bindBuffer() -> awYJ
react.gnet.streams.StreamConstructor -> JcSR:
    java.io.InputStream constructInput(java.io.InputStream) -> wfHp
    java.io.OutputStream constructOutput(java.io.OutputStream) -> wfHp
react.gnet.streams.constructors.BufferedStreamConstructor -> Fggc:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> KTiB
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> KTiB
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> wfHp
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> wfHp
react.gnet.streams.constructors.CipherStreamConstructor -> nBGA:
    javax.crypto.Cipher cipher -> KDvX
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> WhmD
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> WhmD
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> wfHp
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> wfHp
react.gnet.streams.constructors.GZipStreamConstructor -> JstH:
    int compressionLevel -> HgCB
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> TEpd
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> TEpd
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> wfHp
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> wfHp
react.gnet.streams.overlays.CGZIPInputStream -> cchV:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> vQmI:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> VndV:
    void toBytes(react.gnet.streams.OSS) -> wfHp
    void fromBytes(react.gnet.streams.ISS) -> wfHp
react.graph.ColossalView -> ofjd:
    react.papyrus.BufferedFrame view -> oWNr
    react.glang.GMap buffers -> TaQk
    react.glang.GMap graphs -> sQxO
    double level -> HwaT
    double targetLevel -> bPge
    int maxX -> Snnx
    int maxY -> mbJL
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> FFGu
    51:77:void render() -> rpXu
    81:98:void scroll(int) -> PtyI
    102:112:void recompile() -> Whyn
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> wfHp
    122:122:react.papyrus.BufferedFrame getView() -> Iydd
    127:127:react.glang.GMap getBuffers() -> OPav
    132:132:react.glang.GMap getGraphs() -> bOhT
    137:137:double getLevel() -> dpAp
    142:142:double getTargetLevel() -> TGAL
    147:147:int getMaxX() -> hayj
    152:152:int getMaxY() -> DPbp
react.graph.ColossalView$Builder -> ofjd$wfHp:
    react.glang.GList graphs -> qfFB
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> wfHp
    171:191:react.graph.ColossalView compute() -> mrJm
react.graph.CubicleIterator -> ArKS:
    int[][] mapping -> jrSB
    int xCubes -> DHps
    int yCubes -> UtuV
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> MImH
    47:130:void insert(react.graph.GraphSize,int) -> wfHp
    134:145:void print() -> print
react.graph.GraphSampleLine -> dEIP:
    double lx -> oFLt
    double ly -> APkM
    react.api.ISampler sampler -> AQKe
    react.graph.IFormatter formatter -> QNvj
    byte graphColor -> oqAL
    byte backgroundColor -> tnnC
    byte borderColor -> rqXe
    byte textColor -> qwGO
    int ticksLeftTitle -> qUCj
    int ticksOutTitle -> yTMj
    double nextPoint -> JJef
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> WXJy
    51:183:void onRender(react.papyrus.BufferedFrame) -> wfHp
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> KTiB
    226:254:int getHue(int,int,int) -> WhmD
    259:281:void scaleFor(react.glang.GList) -> lwKC
    285:285:react.graph.IFormatter getFormatter() -> rMek
    290:291:void setFormatter(react.graph.IFormatter) -> wfHp
    295:295:byte getGraphColor() -> OGqQ
    300:301:void setGraphColor(byte) -> wfHp
    305:305:byte getBackgroundColor() -> eYUO
    310:311:void setBackgroundColor(byte) -> KTiB
    315:315:byte getBorderColor() -> fmYd
    320:321:void setBorderColor(byte) -> WhmD
    325:325:byte getTextColor() -> mqnA
    330:331:void setTextColor(byte) -> TEpd
    335:335:react.api.ISampler getSampler() -> ergD
react.graph.GraphSize -> VDPe:
    react.graph.GraphSize WIDE -> Nxtp
    react.graph.GraphSize FULL -> jidY
    react.graph.GraphSize SQUARE -> afxw
    react.graph.GraphSize[] $VALUES -> fKtt
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> qlxO
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> VDPe$1:
    int[] $SwitchMap$react$graph$GraphSize -> GdAS
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> dgKh:
    java.lang.String text -> text
    byte fontColor -> fnXq
    byte backgroundColor -> tnnC
    boolean wrote -> pYsO
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> wfHp
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> lext
    68:69:void setFontColor(byte) -> UshV
    73:73:byte getBackgroundColor() -> eYUO
    78:79:void setBackgroundColor(byte) -> KTiB
react.graph.GraphingInstance -> HLIv:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> qfFB
    react.graph.ColossalView view -> wMfU
    react.papyrus.Papyrus papyrus -> pQcH
    react.papyrus.IRenderer renderer -> Mmaq
    boolean mapping -> kImn
    react.glang.GList msgs -> DYvU
    react.surge.sched.Task waiter -> oxrj
    react.surge.sched.Task waiter2 -> fwJJ
    int shift -> DbfI
    boolean notif -> vKDC
    48:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> wfHp
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> wfHp
    138:142:void send(java.lang.String) -> wKtl
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> wfHp
    153:165:void on(react.event.ReactScrollEvent) -> wfHp
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> wfHp
    179:187:void destroy() -> destroy
    191:200:void toggle() -> Edir
    204:205:void setGraphs(react.glang.GList) -> mFgo
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> ncoT
    243:259:void compile() -> Jsxx
    32:32:boolean access$000(react.graph.GraphingInstance) -> wfHp
    32:32:react.glang.GList access$100(react.graph.GraphingInstance) -> KTiB
    32:32:boolean access$200(react.graph.GraphingInstance) -> WhmD
    32:32:boolean access$202(react.graph.GraphingInstance,boolean) -> wfHp
    32:32:int access$300(react.graph.GraphingInstance) -> TEpd
    32:32:int access$310(react.graph.GraphingInstance) -> UshV
    32:32:int access$302(react.graph.GraphingInstance,int) -> wfHp
    32:32:react.graph.ColossalView access$400(react.graph.GraphingInstance) -> IVri
react.graph.GraphingInstance$1 -> HLIv$1:
    org.bukkit.entity.Player val$player -> GkoM
    react.graph.GraphingInstance this$0 -> PCeS
    52:52:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> HLIv$2:
    react.graph.GraphingInstance this$0 -> PCeS
    77:77:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> HLIv$3:
    react.graph.GraphingInstance this$0 -> PCeS
    107:107:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> wfHp
react.graph.IFormatter -> RsYn:
    java.lang.String from(double) -> Keji
react.graph.IGraph -> loCc:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> ofrT
    long getTimeViewport() -> qSeg
    void render(react.papyrus.BufferedFrame) -> WhmD
    double getMax() -> getMax
    void setMax(double) -> Pcxd
react.graph.NormalGraph -> OipL:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> WGyV
    long timeViewport -> SLmt
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> ofrT
    35:35:long getTimeViewport() -> qSeg
    41:42:void render(react.papyrus.BufferedFrame) -> WhmD
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> Pcxd
    void onRender(react.papyrus.BufferedFrame) -> wfHp
react.graph.PlotBoard -> RjiB:
    react.glang.GMap plots -> jjCc
    int maxRecordings -> TjFF
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> IGCw
    33:33:long getAccurateTimeSpan() -> Oivs
    38:50:long getMedian(long,long) -> UshV
    55:55:long getMinimumAccuracyRange() -> TGDE
    60:70:double getMaxValue() -> DjXf
    75:85:double getMinValue() -> JcYW
    90:90:react.glang.GList sort(react.glang.GMap) -> KTiB
    95:105:long earilestRecording() -> kswU
    110:120:long latestRecording() -> yRmA
    125:126:void reduceBefore(long) -> Keji
    130:148:void reduceBetween(long,long) -> IVri
    152:152:boolean before(long,long) -> ogBf
    157:157:boolean after(long,long) -> UAEC
    162:162:boolean within(long,long,long) -> wfHp
    167:177:react.glang.GMap getBetween(long,long) -> eaTY
    182:184:void plot(long,double) -> wfHp
    188:188:boolean hasAt(long) -> Pcxd
    193:193:double getAt(long) -> wKtl
    198:198:int getSize() -> getSize
react.graph.Point -> cJVf:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> AXWb:
    int iid -> DHtB
    react.graph.IGraph graph -> vApj
    react.graph.GraphSize size -> pIQY
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> WPME
    24:25:void setGraph(react.graph.IGraph) -> wfHp
    29:29:react.graph.GraphSize getSize() -> qeID
    34:35:void setSize(react.graph.GraphSize) -> wfHp
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> nSGP:
    react.graph.RenderMaxType UNLIMITED -> xajA
    react.graph.RenderMaxType LIMITED -> GImD
    react.graph.RenderMaxType[] $VALUES -> tnoa
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> aMEF:
    java.lang.String CRLF -> lMfQ
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> UHre
    162:198:java.lang.String toString(react.json.JSONObject) -> KTiB
react.json.HTTPTokener -> WGVp:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> prbP:
    java.util.ArrayList myArrayList -> HgDA
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> wfHp
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> rMek
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> VThG
    394:399:react.json.JSONObject getJSONObject(int) -> FDxR
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> lTfO
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> WXJy
    515:515:boolean optBoolean(int) -> sajf
    533:536:boolean optBoolean(int,boolean) -> KTiB
    551:551:double optDouble(int) -> OihS
    569:572:double optDouble(int,double) -> wfHp
    587:587:int optInt(int) -> lKxL
    605:608:int optInt(int,int) -> UAEC
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> KTiB
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> wfHp
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> wfHp
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> wfHp
    722:723:react.json.JSONArray optJSONArray(int) -> HvUj
    737:738:react.json.JSONObject optJSONObject(int) -> dMRX
    752:752:long optLong(int) -> jFRf
    770:773:long optLong(int,long) -> wfHp
    788:788:java.lang.String optString(int) -> KKyY
    803:804:java.lang.String optString(int,java.lang.String) -> wfHp
    816:817:react.json.JSONArray put(boolean) -> mFgo
    830:831:react.json.JSONArray put(java.util.Collection) -> wfHp
    845:848:react.json.JSONArray put(double) -> wKtl
    860:861:react.json.JSONArray put(int) -> nuCW
    873:874:react.json.JSONArray put(long) -> UHre
    887:888:react.json.JSONArray put(java.util.Map) -> wfHp
    902:903:react.json.JSONArray put(java.lang.Object) -> quXW
    921:922:react.json.JSONArray put(int,boolean) -> WhmD
    939:940:react.json.JSONArray put(int,java.util.Collection) -> wfHp
    958:959:react.json.JSONArray put(int,double) -> KTiB
    977:978:react.json.JSONArray put(int,int) -> eaTY
    996:997:react.json.JSONArray put(int,long) -> KTiB
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> wfHp
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> wfHp
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> IODS
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> wfHp
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> wfHp
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> wfHp
react.json.JSONException -> eXpG:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> lEXq
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> UbsS:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> wfHp
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> Ywbs
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> wfHp
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> KTiB
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> UHre
    379:456:java.lang.String toString(react.json.JSONArray) -> KTiB
    472:552:java.lang.String toString(react.json.JSONObject) -> KTiB
react.json.JSONObject -> lTse:
    java.util.Map map -> map
    java.lang.Object NULL -> NqGh
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> wfHp
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> KTiB
    480:499:java.lang.String doubleToString(double) -> UHre
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> Yfac
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> CwdX
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> gVYF
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> WhmD
    751:767:java.lang.String[] getNames(java.lang.Object) -> UYuc
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> pYCR
    855:855:boolean isNull(java.lang.String) -> bhkH
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> hkNv
    917:937:java.lang.String numberToString(java.lang.Number) -> wfHp
    949:949:java.lang.Object opt(java.lang.String) -> JHsa
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> wfHp
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> wfHp
    1018:1018:boolean optBoolean(java.lang.String) -> kkUq
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> wfHp
    1054:1054:double optDouble(java.lang.String) -> gDuv
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> wfHp
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> wfHp
    1116:1119:double optDouble(java.lang.String,double) -> wfHp
    1134:1134:int optInt(java.lang.String) -> AFkU
    1152:1155:int optInt(java.lang.String,int) -> WhmD
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> PliD
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> PtyI
    1198:1198:long optLong(java.lang.String) -> MImH
    1216:1219:long optLong(java.lang.String,long) -> wfHp
    1234:1234:java.lang.String optString(java.lang.String) -> rMek
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> KTiB
    1255:1305:void populateMap(java.lang.Object) -> Keji
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> KTiB
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> wfHp
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> KTiB
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> TEpd
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> KTiB
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> wfHp
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> WhmD
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> TEpd
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> UshV
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> wfHp
    1590:1590:java.lang.Object remove(java.lang.String) -> VThG
    1605:1640:boolean similar(java.lang.Object) -> IODS
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> Pcxd
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> WhmD
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> wfHp
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> wfHp
    2000:2004:void indent(java.io.Writer,int) -> wfHp
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> wfHp
react.json.JSONObject$Null -> lTse$wfHp:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> bGUt:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> INnr:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> sQWq:
    long character -> TYFg
    boolean eof -> eof
    long index -> klhw
    long line -> oEqL
    char previous -> cvSj
    java.io.Reader reader -> reader
    boolean usePrevious -> XutF
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> hjnX
    119:131:int dehexchar(char) -> wfHp
    136:136:boolean end() -> TiGL
    147:153:boolean more() -> lMGr
    164:198:char next() -> next
    213:218:char next(char) -> KTiB
    233:250:java.lang.String next(int) -> vtJG
    263:266:char nextClean() -> VnlJ
    287:334:java.lang.String nextString(char) -> WhmD
    349:361:java.lang.String nextTo(char) -> TEpd
    376:388:java.lang.String nextTo(java.lang.String) -> FDxR
    403:441:java.lang.Object nextValue() -> wMFx
    458:479:char skipTo(char) -> UshV
    491:491:react.json.JSONException syntaxError(java.lang.String) -> WXJy
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> fKQm:
    int maxdepth -> eRGB
    boolean comma -> cSoh
    char mode -> dNcB
    react.json.JSONObject[] stack -> LQNt
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> sajf
    157:164:react.json.JSONWriter array() -> QgmP
    180:193:react.json.JSONWriter end(char,char) -> wfHp
    206:206:react.json.JSONWriter endArray() -> rMvr
    219:219:react.json.JSONWriter endObject() -> sHjL
    235:258:react.json.JSONWriter key(java.lang.String) -> OihS
    274:285:react.json.JSONWriter object() -> esGB
    299:310:void pop(char) -> IVri
    322:329:void push(react.json.JSONObject) -> TEpd
    342:342:react.json.JSONWriter value(boolean) -> LGKf
    356:356:react.json.JSONWriter value(double) -> lTfO
    369:369:react.json.JSONWriter value(long) -> lTfO
    385:385:react.json.JSONWriter value(java.lang.Object) -> wKtl
react.json.XML -> YELf:
    java.lang.Character AMP -> KpOU
    java.lang.Character APOS -> klia
    java.lang.Character BANG -> LbQJ
    java.lang.Character EQ -> cmbX
    java.lang.Character GT -> ymaW
    java.lang.Character LT -> nmac
    java.lang.Character QUEST -> cdrN
    java.lang.Character QUOT -> IOvJ
    java.lang.Character SLASH -> Osje
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> lKxL
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> wfHp
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> UHre
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> NgPl:
    java.util.HashMap entity -> ejwb
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> KUYT
    108:133:java.lang.Object nextContent() -> TNqf
    149:166:java.lang.Object nextEntity(char) -> ogBf
    186:239:java.lang.Object nextMeta() -> baKq
    261:334:java.lang.Object nextToken() -> CwuM
    354:420:boolean skipPast(java.lang.String) -> HvUj
react.papyrus.BufferedFrame -> vcQf:
    byte[][] frame -> lEWn
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> wfHp
    90:97:void write(byte) -> IVri
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> wfHp
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> wfHp
    131:145:java.awt.image.BufferedImage toBufferedImage() -> kJDa
    153:160:void writeRainbowMul() -> vsvR
    167:174:void writeRainbowAdd() -> BlcI
    181:191:void writeSparks() -> SLOm
    195:201:boolean write(int,int,byte) -> wfHp
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> wfHp
    233:250:void write(react.papyrus.BufferedFrame) -> TEpd
    254:254:byte[][] getRawFrame() -> KoKy
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> DHRC:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> TEpd
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> wfHp
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> bGVb:
    org.bukkit.map.MapView getView() -> CUsN
    react.papyrus.BufferedFrame getFrameBuffer() -> PSfy
    void addRenderer(react.papyrus.IRenderer) -> wfHp
    void clearRenderers() -> RtAS
    react.glang.GList getRenderers() -> WOjn
    void removeRenderer(react.papyrus.IRenderer) -> KTiB
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> qTEd
react.papyrus.IRenderer -> aMDi:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> wfHp
react.papyrus.Papyrus -> lLbn:
    org.bukkit.map.MapView map -> PThe
    react.papyrus.BufferedFrame frameBuffer -> BCQk
    react.papyrus.BufferedFrame lastFrameBuffer -> mbNP
    react.glang.GList renderers -> gNyg
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> CUsN
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> PSfy
    51:52:void addRenderer(react.papyrus.IRenderer) -> wfHp
    57:58:void clearRenderers() -> RtAS
    63:63:react.glang.GList getRenderers() -> WOjn
    69:70:void removeRenderer(react.papyrus.IRenderer) -> KTiB
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> qTEd
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> wfHp
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> KTiB
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> WhmD
react.papyrus.Papyrus$1 -> lLbn$1:
    org.bukkit.map.MapCanvas val$c -> XTOt
    org.bukkit.map.MapView val$v -> iwcm
    react.papyrus.Papyrus this$0 -> xPkQ
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> kbqL:
    int spaceSize -> opda
    java.lang.String fontChars -> wDwF
    int[][] fontData -> AjbK
    react.papyrus.ReactFont Font -> tMPO
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> Mtls:
    react.glang.GList subgoals -> lMhc
    java.lang.String tag -> eRDx
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> eQCp
    26:44:void propigate() -> dobn
    49:50:void addGoal(react.rai.IGoal) -> wfHp
    55:65:react.glang.GList getFailingSubgoals() -> jqTU
    71:71:boolean isFailing() -> FMyo
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> BBNn
    void onPropigated() -> eGta
react.rai.Goal$1 -> Mtls$1:
    react.rai.IGoal val$i -> fnYr
    react.rai.Goal this$0 -> JKGv
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> KCsC:
    react.glang.GList getSubgoals() -> eQCp
    void propigate() -> dobn
    void onPropigated() -> eGta
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> jqTU
    boolean isFailing() -> FMyo
    boolean onCheckFailing() -> BBNn
    void update() -> update
    void addGoal(react.rai.IGoal) -> wfHp
react.rai.IRAI -> sIFn:
    react.glang.GList getGoals() -> htCJ
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> wfHp
    react.glang.GList getEvents() -> pGtT
    void callEvent(react.rai.RAIEvent) -> wfHp
    react.glang.GList getListeners() -> OXwO
react.rai.RAI -> uOLY:
    react.glang.GList goals -> ptHJ
    react.glang.GList events -> HEAw
    react.glang.GList logEvents -> Sfcd
    react.glang.GList listeners -> rWjK
    long since -> yBlQ
    react.rai.RAI instance -> NWUJ
    22:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> htCJ
    41:42:void addGoal(react.rai.IGoal) -> wfHp
    47:69:void tick() -> tick
    74:74:react.glang.GList getEvents() -> pGtT
    80:87:void callEvent(react.rai.RAIEvent) -> wfHp
    92:92:react.glang.GList getListeners() -> OXwO
react.rai.RAIEvent -> tBvl:
    react.rai.RAIEventType type -> YEpw
    java.lang.String[] pars -> cTOs
    java.lang.String ovt -> oqDq
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> AYAD
    29:29:java.lang.String[] getPars() -> pPdv
    34:34:java.lang.String getOvt() -> HeeS
react.rai.RAIEventType -> NEMH:
    react.rai.RAIEventType FIRE_ACTION -> xsMv
    react.rai.RAIEventType NOTE_GOAL_FAILING -> tgBY
    react.rai.RAIEventType NOTE_GOAL_FIXED -> DQfv
    java.lang.String[] msgs -> SUdh
    react.rai.RAIEventType[] $VALUES -> GRbW
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> wLho
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> wfHp
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedChunkLoad -> CDlt:
    boolean failing -> Lrrs
    24:27:void <init>() -> <init>
    34:60:boolean onCheckFailing() -> BBNn
    66:79:void onPropigated() -> eGta
react.rai.goals.GoalReducedChunkLoad$1 -> CDlt$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> huEL
    43:43:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    47:56:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> CDlt$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> huEL
    69:69:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    73:76:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> uqNs:
    boolean failing -> Lrrs
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> BBNn
    91:134:void onPropigated() -> eGta
    22:22:boolean access$000(react.rai.goals.GoalReducedEntityCounts) -> wfHp
react.rai.goals.GoalReducedEntityCounts$1 -> uqNs$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> TGfU
    68:68:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> uqNs$2:
    org.bukkit.Chunk val$lx -> nmcx
    react.rai.goals.GoalReducedEntityCounts this$0 -> TGfU
    120:120:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> ydJB:
    boolean failing -> Lrrs
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> BBNn
    78:128:void onPropigated() -> eGta
react.rai.goals.GoalStableChunkTime$1 -> ydJB$1:
    react.rai.goals.GoalStableChunkTime this$0 -> xanu
    55:55:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> ydJB$2:
    java.lang.Object val$i -> tLqw
    react.rai.goals.GoalStableChunkTime this$0 -> xanu
    112:112:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> ETDs:
    boolean failing -> Lrrs
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> eGta
    35:35:void letUp() -> OrjU
    40:77:boolean onCheckFailing() -> BBNn
    15:15:boolean access$000(react.rai.goals.GoalStableEntityTime) -> wfHp
react.rai.goals.GoalStableEntityTime$1 -> ETDs$1:
    react.rai.goals.GoalStableEntityTime this$0 -> rGLq
    60:60:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> KLgI:
    boolean failing -> Lrrs
    react.glang.GMap reocc -> IOxB
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> eGta
    88:125:boolean onCheckFailing() -> BBNn
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableFluidTime) -> wfHp
    24:24:boolean access$100(react.rai.goals.GoalStableFluidTime) -> KTiB
react.rai.goals.GoalStableFluidTime$1 -> KLgI$1:
    org.bukkit.Chunk val$lx -> nmcx
    react.rai.goals.GoalStableFluidTime this$0 -> NgxU
    67:67:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> KLgI$2:
    react.rai.goals.GoalStableFluidTime this$0 -> NgxU
    108:108:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> lfWp:
    boolean failing -> Lrrs
    react.glang.GMap reocc -> IOxB
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> eGta
    89:125:boolean onCheckFailing() -> BBNn
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableHopperTime) -> wfHp
    24:24:boolean access$100(react.rai.goals.GoalStableHopperTime) -> KTiB
react.rai.goals.GoalStableHopperTime$1 -> lfWp$1:
    org.bukkit.Chunk val$lx -> nmcx
    react.rai.goals.GoalStableHopperTime this$0 -> NqJW
    67:67:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> lfWp$2:
    react.rai.goals.GoalStableHopperTime this$0 -> NqJW
    108:108:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> NpCg:
    boolean failing -> Lrrs
    react.glang.GMap reocc -> IOxB
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> eGta
    89:126:boolean onCheckFailing() -> BBNn
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableRedstoneTime) -> wfHp
    24:24:boolean access$100(react.rai.goals.GoalStableRedstoneTime) -> KTiB
react.rai.goals.GoalStableRedstoneTime$1 -> NpCg$1:
    org.bukkit.Chunk val$lx -> nmcx
    react.rai.goals.GoalStableRedstoneTime this$0 -> QGOL
    67:67:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> NpCg$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> QGOL
    109:109:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> eabq:
    boolean failing -> Lrrs
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> eGta
    34:58:boolean onCheckFailing() -> BBNn
    14:14:boolean access$000(react.rai.goals.GoalStableTickTime) -> wfHp
react.rai.goals.GoalStableTickTime$1 -> eabq$1:
    react.rai.goals.GoalStableTickTime this$0 -> WQQV
    41:41:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> KoJk:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> brrY
    boolean authenticated -> jYHA
    react.remote.server.ServerInfo info -> BvVh
    react.glang.GMap frems -> VpPh
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> IxxW
    51:51:react.glang.GMap getFrames() -> CVUT
    56:75:int computeFrames() -> xaNM
    80:92:boolean clearToken() -> BRpn
    97:110:boolean updateServerInfo() -> ogTc
    115:129:boolean refreshToken() -> JRYb
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> WhmD
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> pPdd
    165:165:boolean isAuthenticated() -> pPeE
    170:170:react.remote.server.ServerInfo getInfo() -> jqVx
react.remote.client.packet.CPacketClearToken -> BdOc:
    java.lang.String token -> brrY
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wfHp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wfHp
    38:38:java.lang.String getToken() -> pPdd
    43:44:void setToken(java.lang.String) -> dMRX
react.remote.client.packet.CPacketComputeFrames -> eXrA:
    java.lang.String token -> brrY
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wfHp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wfHp
    38:38:java.lang.String getToken() -> pPdd
    43:44:void setToken(java.lang.String) -> dMRX
react.remote.client.packet.CPacketGetInfo -> QVhn:
    java.lang.String token -> brrY
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wfHp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wfHp
    38:38:java.lang.String getToken() -> pPdd
    43:44:void setToken(java.lang.String) -> dMRX
react.remote.client.packet.CPacketGetToken -> twAV:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> wfHp
    36:38:void fromBytes(react.gnet.streams.ISS) -> wfHp
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> AFyC:
    java.lang.String token -> brrY
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wfHp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wfHp
    38:38:java.lang.String getToken() -> pPdd
    43:44:void setToken(java.lang.String) -> dMRX
react.remote.client.packet.ClientPacket -> lMEg:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> wfHp
    void fromBytes(react.gnet.streams.ISS) -> wfHp
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> FxmN
    42:42:java.lang.String getPacketName() -> flvS
react.remote.client.packet.ClientPacketType -> FxmN:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> htcb
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> etKo
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> qvlo
    react.remote.client.packet.ClientPacketType GET_INFO -> gyqM
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> TPXU
    react.remote.client.packet.ClientPacketType[] $VALUES -> QWmm
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> flvS:
    react.glang.GMap compute(long,long) -> WhmD
react.remote.server.KnownUser -> RIKf:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> LGYt:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> wfHp
    38:41:void fromBytes(react.gnet.streams.ISS) -> wfHp
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> sjjs:
    react.glang.GList users -> YODx
    react.glang.GMap session -> bjaC
    react.glang.GMap lastCompute -> DtMA
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> Euaq
    44:45:void registerUser(react.remote.server.KnownUser) -> wfHp
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> KTiB
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> jFRf
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> TEpd
    react.remote.server.IFrameComputer getFrameComputer() -> MlXY
    170:171:void markLastCompute(react.remote.server.KnownUser) -> WhmD
    175:180:long getLastCompute(react.remote.server.KnownUser) -> TEpd
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> wfHp
    190:191:void deleteSession(react.remote.server.KnownUser) -> UshV
    195:195:java.lang.String createToken() -> kcYK
react.remote.server.ServerInfo -> OHRi:
    java.lang.String motd -> etKE
    int gameProtocol -> CEuj
    java.lang.String gameVersion -> RIpG
    java.lang.String reactVersion -> HwhG
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> Ucyo
    int viewDistance -> viewDistance
    int gamePort -> bsQb
    java.lang.String gameAddress -> FqbE
    react.glang.GList remotePlugins -> fekL
    react.glang.GList worlds -> FWnm
    react.glang.GList actions -> DtMN
    react.glang.GList samplers -> eHvQ
    26:26:react.remote.server.ServerInfo empty() -> NpHe
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> wfHp
    146:159:void fromBytes(react.gnet.streams.ISS) -> wfHp
    java.lang.String dgetMotd() -> YxLq
    int dgetGameProtocol() -> pjNN
    java.lang.String dgetGameVersion() -> ySDs
    java.lang.String dgetReactVersion() -> vQkR
    int dgetMaxPlayers() -> uOIQ
    react.glang.GList dgetConnectedPlayers() -> NgLc
    int dgetViewDistance() -> tTVY
    int dgetGamePort() -> MdIc
    java.lang.String dgetGameAddress() -> tmgo
    react.glang.GList dgetRemotePlugins() -> UQnQ
    react.glang.GList dgetWorlds() -> nlWc
    react.glang.GList dgetActions() -> myuS
    react.glang.GList dgetSamplers() -> jOIo
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> IGGB
    199:199:java.lang.String getGameVersion() -> MJac
    204:204:java.lang.String getReactVersion() -> Xlcd
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> gWKk
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> DbIL
    229:229:java.lang.String getGameAddress() -> FVlc
    234:234:react.glang.GList getRemotePlugins() -> aoLh
    239:239:react.glang.GList getWorlds() -> BBQf
    244:244:react.glang.GList getActions() -> ktKI
    249:249:react.glang.GList getSamplers() -> CwwO
react.remote.server.ServerInfo$1 -> OHRi$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> nlWc
    37:37:int dgetViewDistance() -> tTVY
    43:43:react.glang.GList dgetRemotePlugins() -> UQnQ
    49:49:java.lang.String dgetReactVersion() -> vQkR
    55:55:java.lang.String dgetMotd() -> YxLq
    61:61:int dgetMaxPlayers() -> uOIQ
    67:67:java.lang.String dgetGameVersion() -> ySDs
    73:73:int dgetGameProtocol() -> pjNN
    79:79:int dgetGamePort() -> MdIc
    85:85:java.lang.String dgetGameAddress() -> tmgo
    91:91:react.glang.GList dgetConnectedPlayers() -> NgLc
    97:97:react.glang.GList dgetActions() -> myuS
    103:103:react.glang.GList dgetSamplers() -> jOIo
react.remote.server.packet.ComputedFrame -> TiEB:
    react.glang.GMap values -> vBVN
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> wfHp
    28:36:void fromBytes(react.gnet.streams.ISS) -> wfHp
    40:40:react.glang.GMap getValues() -> HwFc
    45:46:void setValues(react.glang.GMap) -> WhmD
react.remote.server.packet.SPacketOk -> XAjt:
    boolean ok -> mPlj
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wfHp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wfHp
    38:38:boolean isOk() -> dUqa
    43:44:void setOk(boolean) -> quXW
react.remote.server.packet.SPacketSendFrames -> afXd:
    react.glang.GMap frames -> dFTO
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> wfHp
    36:44:void fromBytes(react.gnet.streams.ISS) -> wfHp
    48:48:react.glang.GMap getFrames() -> CVUT
    53:54:void setFrames(react.glang.GMap) -> TEpd
react.remote.server.packet.SPacketSendInfo -> vtUN:
    react.remote.server.ServerInfo info -> BvVh
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wfHp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wfHp
    38:38:react.remote.server.ServerInfo getInfo() -> jqVx
    43:44:void setInfo(react.remote.server.ServerInfo) -> wfHp
react.remote.server.packet.SPacketSendToken -> FhJm:
    java.lang.String token -> brrY
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> wfHp
    33:34:void fromBytes(react.gnet.streams.ISS) -> wfHp
    38:38:java.lang.String getToken() -> pPdd
    43:44:void setToken(java.lang.String) -> dMRX
react.remote.server.packet.ServerPacket -> KTvT:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> wfHp
    void fromBytes(react.gnet.streams.ISS) -> wfHp
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> FxmN
    42:42:java.lang.String getPacketName() -> flvS
react.remote.server.packet.ServerPacketType -> awYJ:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> IYHm
    react.remote.server.packet.ServerPacketType SEND_INFO -> cmco
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> VpOf
    react.remote.server.packet.ServerPacketType OK -> rynr
    react.remote.server.packet.ServerPacketType[] $VALUES -> aMjp
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> FFGu:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleAsyncQueue$1 -> FFGu$1:
    react.sampler.SampleAsyncQueue this$0 -> YphF
    21:21:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleChunkTime -> rpXu:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleChunkTime$1 -> rpXu$1:
    react.sampler.SampleChunkTime this$0 -> IYHu
    21:21:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleChunksLoaded -> Whyn:
    react.graph.IFormatter formatter -> QNvj
    18:27:void <init>() -> <init>
    32:38:void construct() -> sajf
    43:44:void sample() -> WXJy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleChunksLoaded$1 -> Whyn$1:
    react.sampler.SampleChunksLoaded this$0 -> VpPM
    20:20:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> Keji
react.sampler.SampleChunksLoadedPerSecond -> Iydd:
    react.gmath.Average a -> AHbY
    react.graph.IFormatter formatter -> QNvj
    16:29:void <init>() -> <init>
    34:40:void construct() -> sajf
    45:47:void sample() -> WXJy
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleChunksLoadedPerSecond$1 -> Iydd$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> qCjh
    22:22:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> Keji
react.sampler.SampleEntitiesDrops -> OPav:
    react.graph.IFormatter formatter -> QNvj
    18:27:void <init>() -> <init>
    32:38:void construct() -> sajf
    43:44:void sample() -> WXJy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleEntitiesDrops$1 -> OPav$1:
    react.sampler.SampleEntitiesDrops this$0 -> rqbT
    20:20:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> Keji
react.sampler.SampleEntitiesLiving -> bOhT:
    react.graph.IFormatter formatter -> QNvj
    18:27:void <init>() -> <init>
    32:38:void construct() -> sajf
    43:44:void sample() -> WXJy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleEntitiesLiving$1 -> bOhT$1:
    react.sampler.SampleEntitiesLiving this$0 -> yLCm
    20:20:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> Keji
react.sampler.SampleEntitiesTiles -> dpAp:
    react.graph.IFormatter formatter -> QNvj
    18:27:void <init>() -> <init>
    32:38:void construct() -> sajf
    43:44:void sample() -> WXJy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleEntitiesTiles$1 -> dpAp$1:
    react.sampler.SampleEntitiesTiles this$0 -> gqbn
    20:20:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> Keji
react.sampler.SampleEntitiesTotal -> TGAL:
    react.graph.IFormatter formatter -> QNvj
    18:27:void <init>() -> <init>
    32:38:void construct() -> sajf
    43:44:void sample() -> WXJy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleEntitiesTotal$1 -> TGAL$1:
    react.sampler.SampleEntitiesTotal this$0 -> QaBs
    20:20:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> Keji
react.sampler.SampleEntityDroppedTicks -> hayj:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleEntityDroppedTicks$1 -> hayj$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> Gkuw
    21:21:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleEntityTime -> DPbp:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleEntityTime$1 -> DPbp$1:
    react.sampler.SampleEntityTime this$0 -> bPpf
    21:21:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleEntityTimeLock -> mrJm:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleEntityTimeLock$1 -> mrJm$1:
    react.sampler.SampleEntityTimeLock this$0 -> MeWm
    21:21:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleExplosionTime -> OGqQ:
    react.graph.IFormatter formatter -> QNvj
    18:27:void <init>() -> <init>
    32:38:void construct() -> sajf
    43:44:void sample() -> WXJy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleExplosionTime$1 -> OGqQ$1:
    react.sampler.SampleExplosionTime this$0 -> vllq
    20:20:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> Keji
react.sampler.SampleFluidPerSecond -> eYUO:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleFluidPerSecond$1 -> eYUO$1:
    react.sampler.SampleFluidPerSecond this$0 -> YgyQ
    21:21:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleFluidPerTick -> fmYd:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    46:53:void sample() -> WXJy
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleFluidPerTick$1 -> fmYd$1:
    react.sampler.SampleFluidPerTick this$0 -> YNgV
    21:21:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleFluidTickTime -> mqnA:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleFluidTickTime$1 -> mqnA$1:
    react.sampler.SampleFluidTickTime this$0 -> fCkP
    21:21:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleFluidTickUtilization -> ergD:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    46:53:void sample() -> WXJy
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleFluidTickUtilization$1 -> ergD$1:
    react.sampler.SampleFluidTickUtilization this$0 -> Hwjm
    21:21:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleHopperPerSecond -> qlxO:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleHopperPerSecond$1 -> qlxO$1:
    react.sampler.SampleHopperPerSecond this$0 -> Snxq
    21:21:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleHopperPerTick -> lext:
    react.graph.IFormatter formatter -> QNvj
    19:29:void <init>() -> <init>
    34:40:void construct() -> sajf
    47:54:void sample() -> WXJy
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleHopperPerTick$1 -> lext$1:
    react.sampler.SampleHopperPerTick this$0 -> MLEv
    21:21:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleHopperTickTime -> Edir:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleHopperTickTime$1 -> Edir$1:
    react.sampler.SampleHopperTickTime this$0 -> Sfhh
    21:21:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleHopperTickUtilization -> ncoT:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    46:53:void sample() -> WXJy
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleHopperTickUtilization$1 -> ncoT$1:
    react.sampler.SampleHopperTickUtilization this$0 -> aWAC
    21:21:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleMemoryAllocated -> Jsxx:
    react.graph.IFormatter formatter -> QNvj
    18:27:void <init>() -> <init>
    32:38:void construct() -> sajf
    43:44:void sample() -> WXJy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleMemoryAllocated$1 -> Jsxx$1:
    react.sampler.SampleMemoryAllocated this$0 -> JvBK
    20:20:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> Keji
react.sampler.SampleMemoryAllocationPerSecond -> ofrT:
    react.graph.IFormatter formatter -> QNvj
    18:27:void <init>() -> <init>
    32:38:void construct() -> sajf
    43:44:void sample() -> WXJy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleMemoryAllocationPerSecond$1 -> ofrT$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> grDA
    20:20:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> Keji
react.sampler.SampleMemoryFree -> qSeg:
    react.graph.IFormatter formatter -> QNvj
    18:27:void <init>() -> <init>
    32:38:void construct() -> sajf
    43:44:void sample() -> WXJy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleMemoryFree$1 -> qSeg$1:
    react.sampler.SampleMemoryFree this$0 -> mQPw
    20:20:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> Keji
react.sampler.SampleMemoryMax -> IGCw:
    react.graph.IFormatter formatter -> QNvj
    18:27:void <init>() -> <init>
    32:38:void construct() -> sajf
    43:44:void sample() -> WXJy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleMemoryMax$1 -> IGCw$1:
    react.sampler.SampleMemoryMax this$0 -> vJib
    20:20:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> Keji
react.sampler.SampleMemoryUse -> Oivs:
    react.graph.IFormatter formatter -> QNvj
    18:27:void <init>() -> <init>
    32:38:void construct() -> sajf
    43:44:void sample() -> WXJy
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleMemoryUse$1 -> Oivs$1:
    react.sampler.SampleMemoryUse this$0 -> qenI
    20:20:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> Keji
react.sampler.SampleRedstonePerSecond -> TGDE:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleRedstonePerSecond$1 -> TGDE$1:
    react.sampler.SampleRedstonePerSecond this$0 -> dgyH
    21:21:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleRedstonePerTick -> DjXf:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    46:53:void sample() -> WXJy
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleRedstonePerTick$1 -> DjXf$1:
    react.sampler.SampleRedstonePerTick this$0 -> CEus
    21:21:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleRedstoneTickTime -> JcYW:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleRedstoneTickTime$1 -> JcYW$1:
    react.sampler.SampleRedstoneTickTime this$0 -> xsRo
    21:21:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleRedstoneTickUtilization -> kswU:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    46:53:void sample() -> WXJy
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleRedstoneTickUtilization$1 -> kswU$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> XCRt
    21:21:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleSyncQueue -> yRmA:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleSyncQueue$1 -> yRmA$1:
    react.sampler.SampleSyncQueue this$0 -> Ulmc
    21:21:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleTickTime -> WPME:
    react.graph.IFormatter formatter -> QNvj
    react.gmath.Average aa -> gqam
    17:29:void <init>() -> <init>
    34:40:void construct() -> sajf
    45:47:void sample() -> WXJy
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleTickTime$1 -> WPME$1:
    react.sampler.SampleTickTime this$0 -> vJiQ
    22:22:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> Keji
react.sampler.SampleTickUtilization -> qeID:
    react.graph.IFormatter formatter -> QNvj
    react.gmath.Average aa -> gqam
    17:29:void <init>() -> <init>
    34:40:void construct() -> sajf
    45:47:void sample() -> WXJy
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleTickUtilization$1 -> qeID$1:
    react.sampler.SampleTickUtilization this$0 -> apQC
    22:22:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> Keji
react.sampler.SampleTicksPerSecond -> hkNv:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleTicksPerSecond$1 -> hkNv$1:
    react.sampler.SampleTicksPerSecond this$0 -> OQir
    21:21:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleTileDroppedTicks -> hjnX:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleTileDroppedTicks$1 -> hjnX$1:
    react.sampler.SampleTileDroppedTicks this$0 -> pYyK
    21:21:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleTileTime -> TiGL:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleTileTime$1 -> TiGL$1:
    react.sampler.SampleTileTime this$0 -> uigy
    21:21:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.sampler.SampleTileTimeLock -> lMGr:
    react.graph.IFormatter formatter -> QNvj
    19:28:void <init>() -> <init>
    33:39:void construct() -> sajf
    44:45:void sample() -> WXJy
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> rMek
react.sampler.SampleTileTimeLock$1 -> lMGr$1:
    react.sampler.SampleTileTimeLock this$0 -> oqHj
    21:21:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> Keji
react.security.checkpoints.SecurityCheckpointAlpha -> VnlJ:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> kkhJ
    78:148:void doScan(java.lang.Runnable) -> KTiB
    152:181:byte[] readResource(java.io.File,java.lang.String) -> wfHp
    186:217:react.glang.GMap scan(java.io.File) -> KTiB
    33:33:byte[] access$000(java.io.File,java.lang.String) -> KTiB
react.security.checkpoints.SecurityCheckpointAlpha$1 -> VnlJ$1:
    java.lang.Runnable val$r -> dgxS
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> VnlJ$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> CEwc
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> wMFx:
    java.lang.String ip -> RdEg
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> QgmP:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> QgmP$1:
    java.io.File val$f -> AbVB
    react.security.locks.SecurityLockAlpha this$0 -> YqJj
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> rMvr:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> wKtl
react.slate.PhantomSlate -> sHjL:
    react.glang.GList lines -> ecKh
    react.glang.GList viewers -> GtgQ
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> pIXB
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> JlLA
    44:45:void set(int,java.lang.String) -> KTiB
    50:51:void setLines(react.glang.GList) -> LGKf
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> vtUN
    91:95:void addViewer(org.bukkit.entity.Player) -> wKtl
    100:102:void removeViewer(org.bukkit.entity.Player) -> UHre
    107:107:react.glang.GList getViewers() -> gFJf
    113:113:boolean isViewing(org.bukkit.entity.Player) -> lTfO
    119:120:void addLine(java.lang.String) -> KKyY
    125:126:void clearLines() -> VMJp
react.slate.Slate -> esGB:
    void build() -> vtUN
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> JlLA
    void set(int,java.lang.String) -> KTiB
    void setLines(react.glang.GList) -> LGKf
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> wKtl
    void addLine(java.lang.String) -> KKyY
    void clearLines() -> VMJp
    void removeViewer(org.bukkit.entity.Player) -> UHre
    react.glang.GList getViewers() -> gFJf
    boolean isViewing(org.bukkit.entity.Player) -> lTfO
    void update() -> update
react.slate.SlateUtil -> KUYT:
    18:18:void <init>() -> <init>
    27:27:org.bukkit.scoreboard.ScoreboardManager getManager() -> rxlf
    37:37:org.bukkit.scoreboard.Scoreboard newBoard() -> PTIu
    51:61:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> wfHp
    66:76:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> KTiB
    90:100:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> WhmD
    115:121:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> wfHp
    134:146:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> wfHp
    160:172:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> KTiB
    177:187:java.lang.String convertJSON(java.lang.String) -> nuCW
    192:208:java.lang.String[] convertJSON(java.lang.String[]) -> KTiB
    213:214:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> wfHp
react.surge.Main -> TNqf:
    react.glang.GList plugins -> BTVk
    react.glang.GMap pluginInstances -> mape
    react.glang.GList controllerSet -> sIog
    react.glang.GMap anchors -> suGu
    react.glang.GList classes -> hAdA
    java.lang.reflect.Field nsField -> SMXl
    java.lang.reflect.Field thField -> hIsk
    react.glang.GList tracks -> JJmu
    long nsf -> hRdu
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> GYpV
    90:109:long getNanoSync() -> XmCe
    114:115:void requestResetNanos() -> NfxG
    119:127:void requestReload() -> CEUn
    131:134:void requestReload(java.lang.Runnable) -> WhmD
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> wfHp
    201:218:void onStop() -> WYAl
    224:224:void onPostInit() -> HfGn
    230:230:void onPreInit() -> HCcp
    234:245:void shutDownAmps() -> oESw
    249:458:void initializeAmps() -> Libm
    463:504:void doScan() -> RtEn
    508:530:void scanForPoolDefiners() -> DPii
    534:550:void scanForRawEvents() -> IFfx
    554:570:void scanForDynamicTrack() -> OYYy
    574:595:void scanForAmps() -> DGxd
    600:611:void onTick() -> Btip
react.surge.Main$1 -> TNqf$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> baKq:
    react.surge.control.AmpedPlugin plugin -> RkxG
    boolean connected -> connected
    int masterTask -> dWYf
    17:21:void <init>(react.surge.control.AmpedPlugin) -> <init>
    25:25:react.surge.control.AmpedPlugin getPluginInstance() -> GsfL
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> hRAY
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> wfHp
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> wfHp
    113:114:void stopTask(int) -> cdBB
    57:57:void access$0(react.surge.PluginAmp) -> wfHp
react.surge.PluginAmp$1 -> baKq$1:
    react.surge.PluginAmp this$0 -> ayFK
    1:37:void <init>(react.surge.PluginAmp) -> <init>
    42:44:void run() -> run
react.surge.PluginAmp$2 -> baKq$2:
    react.surge.PluginAmp this$0 -> ayFK
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:53:void run() -> run
react.surge.Surge -> CwuM:
    react.surge.PluginAmp amp -> sIsB
    react.glang.GList tickComponents -> gGRQ
    react.glang.GList atickComponents -> BSwS
    react.surge.sched.TaskManager taskmgr -> qvpn
    react.surge.hotload.HotloadManager hotloadmgr -> GIvJ
    java.lang.Thread mainThread -> lNPY
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> wfHp
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> vtJG
    44:44:java.io.File folder() -> Rbce
    49:51:java.io.File getPluginJarFile() -> GkUg
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> TEpd
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> fCJc
    74:74:react.glang.GList getTickComponents() -> SwIa
    79:79:react.glang.GList getAsyncTickComponents() -> psKW
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> wfHp
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> KTiB
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> wfHp
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> erkR
    126:126:boolean hasAmp() -> nBQL
    131:131:react.surge.PluginAmp getAmp() -> kQxa
    136:136:react.surge.sched.TaskManager getTaskManager() -> LPOn
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> woNM
react.surge.cluster.Cluster -> kJDa:
    react.surge.cluster.ClusterType type -> RRgD
    java.lang.Object t -> yShT
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> sINh
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> vsvR:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> BlcI:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> SLOm:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> KoKy:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> CUsN:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> PSfy:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> RtAS:
    react.surge.cluster.ClusterType INT -> xjcw
    react.surge.cluster.ClusterType BOOLEAN -> TYNB
    react.surge.cluster.ClusterType STRING -> cLFn
    react.surge.cluster.ClusterType STRING_LIST -> JvBY
    react.surge.cluster.ClusterType DOUBLE -> hIrb
    react.surge.cluster.ClusterType LONG -> SVIL
    react.surge.cluster.ClusterType[] ENUM$VALUES -> NplQ
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> WOjn:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> qoAT
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> wfHp
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> wfHp
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> Jkkn
react.surge.cluster.ConfigurationDataOutput -> qTEd:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> KTiB
react.surge.cluster.DataCluster -> eQCp:
    react.glang.GMap clusters -> Hfio
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> jyht
    29:33:void fromJson(react.json.JSONObject) -> UshV
    37:44:react.json.JSONObject toJson() -> WPNx
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> wMKP
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> wfHp
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> IxxW
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> IVri
    194:195:void set(java.lang.String,int) -> UshV
    199:200:void set(java.lang.String,boolean) -> WhmD
    204:205:void set(java.lang.String,double) -> WhmD
    209:210:void set(java.lang.String,long) -> WhmD
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> wfHp
react.surge.cluster.ICluster -> dobn:
    react.surge.cluster.ClusterType getType() -> sINh
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> jqTU:
react.surge.cluster.IDataInput -> FMyo:
    react.surge.cluster.DataCluster read(java.io.File) -> WhmD
react.surge.cluster.IDataOutput -> BBNn:
    void write(react.surge.cluster.DataCluster,java.io.File) -> wfHp
react.surge.cluster.Key -> eGta:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> htCJ:
    int value() -> value
react.surge.cluster.KeyStore -> pGtT:
react.surge.cluster.ReflectedConfigurationException -> OXwO:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> AYAD:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> WhmD
react.surge.cluster.YamlDataOutput -> pPdv:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> wfHp
react.surge.collection.GSound -> HeeS:
    java.lang.String sound -> wpRI
    org.bukkit.Sound iSound -> vJju
    java.lang.Float volume -> MmiW
    java.lang.Float pitch -> sSDb
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> Ywbs
    61:72:void play(org.bukkit.Location) -> UshV
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> wfHp
    93:93:java.lang.String getSound() -> SUDk
    98:99:void setSound(java.lang.String) -> cdBB
    103:103:org.bukkit.Sound getiSound() -> Gjsh
    108:109:void setiSound(org.bukkit.Sound) -> wfHp
    113:113:java.lang.Float getVolume() -> CUwK
    118:119:void setVolume(java.lang.Float) -> wfHp
    123:123:java.lang.Float getPitch() -> pQGU
    128:129:void setPitch(java.lang.Float) -> KTiB
react.surge.control.AmpedPlugin -> wLho:
    react.glang.GList controllers -> HDgW
    react.gconcurrent.ParallelPoolManager pp -> KhCs
    react.surge.server.CoreTickThread ctt -> LYdi
    24:50:void <init>() -> <init>
    void doScan() -> RtEn
    long getNanoSync() -> XmCe
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:97:void onDisable() -> onDisable
    102:102:react.glang.GList getControllers() -> QySF
    108:109:void registerController(react.surge.control.IController) -> wfHp
    114:125:void onTick() -> Btip
    130:130:java.lang.String getTickName() -> sQSr
    136:136:react.gconcurrent.ParallelPoolManager getThreadPool() -> QxrF
    142:257:void destroyOldThreads() -> dwwV
    void onControllerRegistry() -> GYpV
    void onStart(react.surge.util.Protocol) -> wfHp
    void onStop() -> WYAl
    void onPostInit() -> HfGn
    void onPreInit() -> HCcp
react.surge.control.AmpedPlugin$1 -> wLho$1:
    react.surge.control.AmpedPlugin this$0 -> kmOM
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> Cfnc
react.surge.control.AmpedPlugin$2 -> wLho$2:
    react.surge.control.AmpedPlugin this$0 -> kmOM
    1:155:void <init>(react.surge.control.AmpedPlugin) -> <init>
    160:250:void run() -> run
react.surge.control.Control -> OrjU:
react.surge.control.Controller -> CVUT:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> xaNM:
react.surge.control.Enable -> BRpn:
react.surge.control.IController -> ogTc:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> JRYb:
react.surge.control.Plugin -> pPdd:
react.surge.control.SurgePlugin -> pPeE:
    void onStart(react.surge.util.Protocol) -> wfHp
    void onStop() -> WYAl
    void onPostInit() -> HfGn
    void onPreInit() -> HCcp
    void onControllerRegistry() -> GYpV
    void registerController(react.surge.control.IController) -> wfHp
    react.glang.GList getControllers() -> QySF
    react.gconcurrent.ParallelPoolManager getThreadPool() -> QxrF
react.surge.hotload.HotloadManager -> jqVx:
    react.glang.GMap filemods -> hJRu
    react.glang.GMap filesizes -> jYJa
    react.glang.GMap fileacts -> IHKg
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> wfHp
    35:38:void untrack(java.io.File) -> TEpd
    42:45:void untrackall() -> RAAJ
    50:86:void onTick() -> Btip
    91:91:java.lang.String getTickName() -> sQSr
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> wfHp
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> KTiB
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> WhmD
react.surge.hotload.HotloadManager$1 -> jqVx$1:
    react.surge.hotload.HotloadManager this$0 -> sAdk
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> kcYK:
    boolean init -> WPvE
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> Osqr
    java.lang.Class IChatBaseComponent -> opma
    java.lang.Class ChatSerializer -> TYON
    java.lang.Class PacketPlayOutPlayerInfo -> DRPf
    java.lang.Class PlayerInfoData -> vmQl
    java.lang.Class EnumPlayerInfoAction -> yCWK
    java.lang.Class GameProfile -> uHLW
    java.lang.Class EnumGamemode -> wFAq
    java.lang.Class TileEntitySkull -> wxeb
    java.lang.Class LoadingCache -> lhEf
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> NpHe:
    react.surge.nms.NMSX bountifulAPI -> MCYW
    boolean useOldMethods -> ETsV
    java.lang.String nmsver -> EeuI
    java.lang.Object eTimes -> OlCW
    java.lang.Object eTitle -> aVcb
    java.lang.Object eSubtitle -> xato
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> wfHp
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> xyoE
    75:89:java.lang.Class getCBClass(java.lang.String) -> Gjan
    96:104:java.lang.Object serializeChat(java.lang.String) -> Hmdu
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> KTiB
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> wfHp
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> jiHW
    151:151:java.lang.String craftPackage() -> oEVS
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> wfHp
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> wfHp
    197:207:java.lang.Class getNMSClass(java.lang.String) -> JRIX
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> wfHp
    279:280:void clearTitle(org.bukkit.entity.Player) -> Yfac
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> KTiB
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> wfHp
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> wfHp
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> AWmb
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> IVri
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> eaTY
    434:447:int ping(org.bukkit.entity.Player) -> CwdX
react.surge.nms.NMSX$1 -> NpHe$1:
    org.bukkit.entity.Player val$player -> GkoM
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> NpHe$2:
    org.bukkit.entity.Player val$player -> GkoM
    java.lang.String val$message -> pQmW
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> IGGB:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> QOBK
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> wfHp
    68:82:void clearTitle(org.bukkit.entity.Player) -> Yfac
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> wfHp
react.surge.nms.PacketUtil$V -> IGGB$wfHp:
    react.surge.nms.PacketUtil$V R17 -> JKPQ
    react.surge.nms.PacketUtil$V R18 -> GkyY
    react.surge.nms.PacketUtil$V R19 -> work
    react.surge.nms.PacketUtil$V R111 -> eQmJ
    react.surge.nms.PacketUtil$V R110 -> PndT
    react.surge.nms.PacketUtil$V R112 -> rOba
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> QGSl
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> MJac:
    java.lang.String title -> title
    java.lang.String subTitle -> rqfE
    java.lang.String action -> action
    java.lang.Integer fadeIn -> suJB
    java.lang.Integer fadeOut -> mPtO
    java.lang.Integer stayTime -> IsAd
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> gVYF
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> jXJN
    79:80:void setSubTitle(java.lang.String) -> YECV
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> Mlgo
    99:100:void setFadeIn(java.lang.Integer) -> WhmD
    104:104:java.lang.Integer getFadeOut() -> mrUG
    109:110:void setFadeOut(java.lang.Integer) -> TEpd
    114:114:java.lang.Integer getStayTime() -> VLoF
    119:120:void setStayTime(java.lang.Integer) -> UshV
react.surge.nms.VersionBukkit -> Xlcd:
    react.surge.nms.VersionBukkit VU -> GJXE
    react.surge.nms.VersionBukkit V7 -> XnLN
    react.surge.nms.VersionBukkit V8 -> hIsu
    react.surge.nms.VersionBukkit V9 -> XBvf
    react.surge.nms.VersionBukkit V11 -> oVxu
    react.surge.nms.VersionBukkit V111 -> ryto
    react.surge.nms.VersionBukkit V112 -> HUjr
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> ecPG
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> sRBv
    27:32:boolean uc() -> YokA
    37:67:react.surge.nms.VersionBukkit get() -> NUws
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> gWKk:
    void burst(java.lang.Object) -> UHre
    void setTimeLock(double) -> Ywbs
    double getEstimatedTimeUse() -> hABc
    int flush() -> fTND
    int flush(react.gbench.Profiler) -> wfHp
    void queue(java.lang.Object) -> lTfO
    void queue(java.util.List) -> WhmD
    void queue(java.lang.Object[]) -> wfHp
react.surge.sched.ICancellable -> DbIL:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> FVlc:
    void onTick() -> Btip
    java.lang.String getTickName() -> sQSr
react.surge.sched.ITask -> aoLh:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> BAsg
    java.lang.String getName() -> getName
    double getComputeTime() -> qTND
    double getTotalComputeTime() -> bYCN
    double getActiveTime() -> oohn
    boolean hasCompleted() -> imvu
react.surge.sched.Task -> BBQf:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> HEKH
    double computeTime -> AjjD
    double totalComputeTime -> TXmd
    double activeTime -> bayH
    boolean completed -> completed
    react.gbench.Profiler profiler -> NiBL
    react.gbench.Profiler activeProfiler -> wFCj
    int ticks -> PMDm
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> TEpd
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> BAsg
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> qTND
    150:150:boolean hasCompleted() -> imvu
    156:156:double getTotalComputeTime() -> bYCN
    162:162:double getActiveTime() -> oohn
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> wfHp
    15:15:void access$1(react.surge.sched.Task,boolean) -> wfHp
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> KTiB
    14:14:void access$3(react.surge.sched.Task,double) -> wfHp
    12:12:void access$4(react.surge.sched.Task,double) -> KTiB
    14:14:double access$5(react.surge.sched.Task) -> WhmD
    13:13:void access$6(react.surge.sched.Task,double) -> WhmD
    13:13:double access$7(react.surge.sched.Task) -> TEpd
    12:12:double access$8(react.surge.sched.Task) -> UshV
react.surge.sched.Task$1 -> BBQf$1:
    react.surge.sched.Task this$0 -> mkJa
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> BBQf$2:
    react.surge.sched.Task this$0 -> mkJa
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> BBQf$3:
    react.surge.sched.Task this$0 -> mkJa
    int val$total -> oNlb
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> CwwO:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> HEKH
    double computeTime -> AjjD
    double totalComputeTime -> TXmd
    double activeTime -> bayH
    boolean completed -> completed
    react.gbench.Profiler profiler -> NiBL
    react.gbench.Profiler activeProfiler -> wFCj
    int ticks -> PMDm
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> TEpd
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> BAsg
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> qTND
    101:101:boolean hasCompleted() -> imvu
    107:107:double getTotalComputeTime() -> bYCN
    113:113:double getActiveTime() -> oohn
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> wfHp
    12:12:void access$1(react.surge.sched.TaskLater,double) -> wfHp
    13:13:double access$2(react.surge.sched.TaskLater) -> KTiB
    12:12:double access$3(react.surge.sched.TaskLater) -> WhmD
    13:13:void access$4(react.surge.sched.TaskLater,double) -> KTiB
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> TEpd
    14:14:double access$6(react.surge.sched.TaskLater) -> UshV
    14:14:void access$7(react.surge.sched.TaskLater,double) -> WhmD
react.surge.sched.TaskLater$1 -> CwwO$1:
    react.surge.sched.TaskLater this$0 -> lpXI
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> HwFc:
    react.glang.GList tasks -> lLxm
    react.glang.GMap taskProfiles -> DAQL
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> wfHp
    25:35:void onTick() -> Btip
    39:40:void putFinishingTask(react.surge.sched.ITask) -> KTiB
    44:53:void putTask(react.surge.sched.ITask) -> WhmD
    58:58:java.lang.String getTickName() -> sQSr
    63:63:react.glang.GList getTasks() -> rpbK
    68:68:react.glang.GMap getTaskProfiles() -> brUb
react.surge.sched.TaskProfile -> dUqa:
    double activeTime -> bayH
    double computeTickTime -> eRPi
    double computeTime -> AjjD
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> oohn
    23:24:void setActiveTime(double) -> Yfac
    28:28:double getComputeTickTime() -> hkTt
    33:34:void setComputeTickTime(double) -> CwdX
    38:38:double getComputeTime() -> qTND
    43:44:void setComputeTime(double) -> gVYF
react.surge.server.AsyncTick -> kkhJ:
react.surge.server.CPS -> JlLA:
    react.glang.GMap keys -> hAgh
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> lLYC
    46:99:void scan() -> anqb
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> WhmD
react.surge.server.CoreTickThread -> gFJf:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> VMJp:
    long memoryFree -> mIHJ
    long memoryUsed -> VxiL
    long memoryMax -> THOr
    long lastMemoryUsed -> EvxY
    long memoryUsedAfterGC -> XnNr
    long allocated -> KpYd
    long collected -> dyag
    long collections -> rqhK
    long sms -> qCqB
    long memoryAllocatedPerTick -> opny
    long memoryCollectedPerTick -> SDkv
    long memoryFullyAllocatedPerTick -> aFDp
    long mah -> TGnv
    long mahs -> hSHm
    22:39:void <init>() -> <init>
    void onAllocationSet() -> ggqY
    46:98:void run() -> run
    102:102:long getMemoryFree() -> twIT
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> UlOj
    117:117:long getLastMemoryUsed() -> UlOm
    122:122:long getMemoryUsedAfterGC() -> qdmc
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> Lieb
    137:137:long getCollections() -> FFQo
    142:142:long getSms() -> iwIi
    147:147:long getMemoryAllocatedPerTick() -> aMOU
    152:152:long getMemoryCollectedPerTick() -> HKwR
    157:157:long getMemoryFullyAllocatedPerTick() -> tfGK
    162:162:long getMah() -> Tykr
    167:167:long getMahs() -> pQHx
react.surge.server.SuperSampler -> rxlf:
    react.gmath.Average ticksPerSecondL -> dpoP
    react.gmath.Average tickTimeL -> raGI
    react.gmath.Average mahL -> bkJL
    double ticksPerSecond -> PwHP
    double ticksPerSecondRaw -> HUld
    double tickTime -> BLLy
    double tickTimeRaw -> TGmh
    boolean running -> running
    boolean frozen -> EwWr
    double tickUtilizationRaw -> PoFr
    double tickUtilization -> ydyV
    double leftoverTickTime -> xbVu
    long memoryUse -> Trax
    long memoryAllocated -> UmTw
    long memoryCollected -> lpUw
    long mahs -> hSHm
    int totalChunks -> tUii
    int totalEntities -> LIHj
    int totalDrops -> tfkd
    int totalTiles -> tfka
    int totalLiving -> RckR
    int chunksLoaded -> OtTi
    int chunksUnloaded -> Cpsh
    react.surge.server.WorldMonitor worldMonitor -> QOiP
    react.surge.server.TPSMonitor tpsMonitor -> bHiQ
    react.surge.server.MemoryMonitor memoryMonitor -> ecTb
    java.lang.StackTraceElement[] lockStack -> Bmpa
    react.glang.GMap spikes -> nKWI
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> Btip
    154:154:java.lang.String getTickName() -> sQSr
    159:159:react.gmath.Average getTicksPerSecondL() -> kkmA
    164:164:double getTicksPerSecond() -> RsYn
    169:169:double getTicksPerSecondRaw() -> WPQg
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> NEWO
    184:184:react.gmath.Average getTickTimeL() -> bOob
    189:189:double getTickTime() -> BRuv
    194:194:double getTickTimeRaw() -> mjDC
    199:199:double getTickUtilizationRaw() -> UAYu
    204:204:double getTickUtilization() -> FVps
    209:209:double getLeftoverTickTime() -> pYYW
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> YpJr
    219:219:long getMemoryUse() -> MdVr
    224:224:long getMemoryAllocated() -> YMgD
    229:229:long getMemoryCollected() -> GtHU
    234:234:react.gmath.Average getMahL() -> wLkc
    239:239:long getMahs() -> pQHx
    244:244:int getTotalChunks() -> fuoK
    249:249:int getTotalEntities() -> VfaD
    254:254:int getTotalDrops() -> hYqm
    259:259:int getTotalTiles() -> dDtg
    264:264:int getTotalLiving() -> vAXX
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> PLAI
    274:274:int getChunksLoaded() -> fTPO
    279:279:int getChunksUnloaded() -> wMPK
    284:285:void setTicksPerSecondL(react.gmath.Average) -> wfHp
    289:290:void setTickTimeL(react.gmath.Average) -> KTiB
    294:295:void setMahL(react.gmath.Average) -> WhmD
    299:300:void setTicksPerSecond(double) -> UcHS
    304:305:void setTicksPerSecondRaw(double) -> pYCR
    309:310:void setTickTime(double) -> bhkH
    314:315:void setTickTimeRaw(double) -> JHsa
    319:320:void setRunning(boolean) -> IODS
    324:325:void setTickUtilizationRaw(double) -> kkUq
    329:330:void setTickUtilization(double) -> gDuv
    334:335:void setLeftoverTickTime(double) -> AFkU
    339:340:void setMemoryUse(long) -> Ywbs
    344:345:void setMemoryAllocated(long) -> Yfac
    349:350:void setMemoryCollected(long) -> CwdX
    354:355:void setMahs(long) -> gVYF
    359:360:void setTotalChunks(int) -> xyoE
    364:365:void setTotalEntities(int) -> Gjan
    369:370:void setTotalDrops(int) -> Hmdu
    374:375:void setTotalTiles(int) -> JRIX
    379:380:void setTotalLiving(int) -> AWmb
    384:385:void setChunksLoaded(int) -> YECV
    389:390:void setChunksUnloaded(int) -> lLYC
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> wfHp
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> wfHp
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> wfHp
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> RbgX
    419:419:react.glang.GMap getSpikes() -> iKdq
    31:31:void access$0(react.surge.server.SuperSampler,int) -> wfHp
    33:33:void access$1(react.surge.server.SuperSampler,int) -> KTiB
    34:34:void access$2(react.surge.server.SuperSampler,int) -> WhmD
    32:32:void access$3(react.surge.server.SuperSampler,int) -> TEpd
    35:35:void access$4(react.surge.server.SuperSampler,int) -> UshV
    36:36:void access$5(react.surge.server.SuperSampler,int) -> IVri
    37:37:void access$6(react.surge.server.SuperSampler,int) -> ogBf
    19:19:void access$7(react.surge.server.SuperSampler,double) -> wfHp
    21:21:void access$8(react.surge.server.SuperSampler,double) -> KTiB
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> wfHp
    19:19:double access$10(react.surge.server.SuperSampler) -> KTiB
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> WhmD
    21:21:double access$12(react.surge.server.SuperSampler) -> TEpd
    18:18:void access$13(react.surge.server.SuperSampler,double) -> WhmD
    20:20:void access$14(react.surge.server.SuperSampler,double) -> TEpd
    24:24:void access$15(react.surge.server.SuperSampler,double) -> UshV
    20:20:double access$16(react.surge.server.SuperSampler) -> UshV
    25:25:void access$17(react.surge.server.SuperSampler,double) -> IVri
    25:25:double access$18(react.surge.server.SuperSampler) -> IVri
    26:26:void access$19(react.surge.server.SuperSampler,double) -> ogBf
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> wfHp
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> ogBf
    27:27:void access$22(react.surge.server.SuperSampler,long) -> wfHp
    28:28:void access$23(react.surge.server.SuperSampler,long) -> KTiB
    29:29:void access$24(react.surge.server.SuperSampler,long) -> WhmD
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> UAEC
    30:30:void access$26(react.surge.server.SuperSampler,long) -> TEpd
react.surge.server.SuperSampler$1 -> rxlf$1:
    react.surge.server.SuperSampler this$0 -> DIcb
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> wfHp
react.surge.server.SuperSampler$2 -> rxlf$2:
    react.surge.server.SuperSampler this$0 -> DIcb
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> AigT
    106:107:void onSpike() -> FOEF
react.surge.server.SuperSampler$3 -> rxlf$3:
    react.surge.server.SuperSampler this$0 -> DIcb
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> ggqY
react.surge.server.TPSMonitor -> PTIu:
    double tickTimeMS -> JTGC
    double rawTicksPerSecond -> HpDC
    react.gbench.Profiler tickProfiler -> CXCG
    react.gbench.Profiler tickTimeProfiler -> kKSm
    boolean ticked -> PoIw
    java.lang.Thread$State lastState -> bQYj
    double actualTickTimeMS -> yLKo
    double ltt -> DIcm
    long lastTick -> tUUH
    boolean frozen -> EwWr
    java.lang.StackTraceElement[] lockedStack -> RSNB
    double lmsx -> GuPs
    23:40:void <init>() -> <init>
    void onTicked() -> AigT
    void onSpike() -> FOEF
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> wfHp
    160:160:double getTickTimeMS() -> fnBv
    165:165:double getRawTicksPerSecond() -> hRFX
    170:170:react.gbench.Profiler getTickProfiler() -> BRwX
    175:175:boolean isTicked() -> Aifh
    180:181:void markTick() -> rNaR
    185:185:react.gbench.Profiler getTickTimeProfiler() -> lfar
    190:190:java.lang.Thread$State getLastState() -> LrXp
    195:195:double getActualTickTimeMS() -> aEAS
    200:200:double getLtt() -> ndXJ
    205:205:long getLastTick() -> XIsI
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> VfdI
react.surge.server.WorldMonitor -> GYpV:
    boolean chunksChanged -> nKjq
    boolean dropChanged -> vSbs
    boolean tileChanged -> HfrL
    boolean livingChanged -> KMwm
    boolean totalChanged -> Eexw
    boolean updated -> Okdm
    int totalChunks -> tUii
    int totalDrops -> tfkd
    int totalTiles -> tfka
    int totalLiving -> RckR
    int totalEntities -> LIHj
    int chunksLoaded -> OtTi
    int chunksUnloaded -> Cpsh
    long ms -> psKW
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> wfHp
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> KTiB
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> wfHp
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> wfHp
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> wfHp
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> wfHp
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> wfHp
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> wfHp
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> wfHp
    130:131:void doUpdate() -> KfeH
    135:186:void sample() -> WXJy
    190:196:void sampleTotalCount() -> FyYE
    200:206:void sampleLivingCount() -> clgk
    210:219:void sampleTileCount() -> sHrS
    223:229:void sampleDropCount() -> bXcV
    233:239:void sampleChunkCount() -> fdnx
react.surge.text.PhantomSpinner -> XmCe:
    react.surge.text.ProgressSpinner s -> kTCk
    react.surge.text.ProgressSpinner c -> fTss
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> NfxG:
    java.lang.String[] chars -> xkKR
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> bYjB
    react.surge.text.ProgressSpinner NETWORK -> Nhat
    react.surge.text.ProgressSpinner CIRCLES -> yCYd
    react.surge.text.ProgressSpinner RANDOMS -> ghyU
    react.surge.text.ProgressSpinner MERGERS -> vBaP
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> GQfB
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> CEUn:
    int value() -> value
react.surge.util.Area -> WYAl:
    org.bukkit.Location location -> DJDL
    java.lang.Double radius -> BLOP
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> wfHp
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> bGaa
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> IVri
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> ogBf
    109:109:boolean isWithin(org.bukkit.Location) -> UAEC
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> TEpd
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> wfHp
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> uGHt
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> rgqu
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> eaTY
    257:257:java.lang.Double getRadius() -> YEWr
    268:269:void setRadius(java.lang.Double) -> WhmD
    278:283:org.bukkit.Location random() -> sYsg
react.surge.util.Axis -> HfGn:
    react.surge.util.Axis X -> VyLE
    react.surge.util.Axis Y -> urag
    react.surge.util.Axis Z -> Enhs
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> DbuM
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> Bcyf
    29:29:org.bukkit.util.Vector negative() -> mjDg
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> HCcp:
    react.surge.util.BlastResistance BARRIER -> CiCt
    react.surge.util.BlastResistance BEDROCK -> QaKL
    react.surge.util.BlastResistance COMMAND -> Nycu
    react.surge.util.BlastResistance ENDER_PORTAL -> riYL
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> Kxmc
    react.surge.util.BlastResistance ANVIL -> SVRV
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> BLQA
    react.surge.util.BlastResistance OBSIDIAN -> wEfi
    react.surge.util.BlastResistance ENDER_CHEST -> oWbN
    react.surge.util.BlastResistance WATER -> OcXQ
    react.surge.util.BlastResistance LAVA -> DATl
    react.surge.util.BlastResistance STATIONARY_WATER -> XwDG
    react.surge.util.BlastResistance DRAGON_EGG -> yvaX
    react.surge.util.BlastResistance ENDER_STONE -> grNb
    react.surge.util.BlastResistance COAL_BLOCK -> ORWH
    react.surge.util.BlastResistance DIAMOND_BLOCK -> FaOG
    react.surge.util.BlastResistance EMERALD_BLOCK -> KgmH
    react.surge.util.BlastResistance GOLD_BLOCK -> RAlp
    react.surge.util.BlastResistance IRON_BLOCK -> Dkhw
    react.surge.util.BlastResistance REDSTONE_BLOCK -> ynQK
    react.surge.util.BlastResistance BRICK -> AIMI
    react.surge.util.BlastResistance BRICK_STAIRS -> sAkL
    react.surge.util.BlastResistance HARD_CLAY -> DbxU
    react.surge.util.BlastResistance STONE -> RcpX
    react.surge.util.BlastResistance SMOOTH_BRICK -> RRmS
    react.surge.util.BlastResistance SMOOTH_STAIRS -> SDoE
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> Tacy
    react.surge.util.BlastResistance STONE_SLAB2 -> sBJm
    react.surge.util.BlastResistance IRON_DOOR -> aFHE
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> gaJp
    react.surge.util.BlastResistance IRON_TRAPDOOR -> EoLU
    react.surge.util.BlastResistance MOB_SPAWNER -> RmAX
    react.surge.util.BlastResistance WEB -> KEhe
    react.surge.util.BlastResistance DISPENSER -> FaNJ
    react.surge.util.BlastResistance DROPPER -> VhLY
    react.surge.util.BlastResistance FURNACE -> pbsm
    react.surge.util.BlastResistance BURNING_FURNACE -> PTwp
    react.surge.util.BlastResistance BEACON -> jPad
    react.surge.util.BlastResistance COAL_ORE -> JCGG
    react.surge.util.BlastResistance COCOA -> vdea
    react.surge.util.BlastResistance DIAMOND_ORE -> WIKn
    react.surge.util.BlastResistance EMERALD_ORE -> twqY
    react.surge.util.BlastResistance FENCE -> wNWI
    react.surge.util.BlastResistance FENCE_GATE -> vBeo
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> NWfD
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> XveT
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> opvQ
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> Soew
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> eJGC
    react.surge.util.BlastResistance ACACIA_FENCE -> hdQX
    react.surge.util.BlastResistance BIRCH_FENCE -> UKXu
    react.surge.util.BlastResistance DARK_OAK_FENCE -> kSgc
    react.surge.util.BlastResistance SPRUCE_FENCE -> XveW
    react.surge.util.BlastResistance JUNGLE_FENCE -> Becb
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> DJIb
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> wyNA
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> ahMU
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> Ypug
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> PnlS
    react.surge.util.BlastResistance QUARTZ_STAIRS -> lhMF
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> cLOo
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> FqpK
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> Xeau
    react.surge.util.BlastResistance WOOD_STAIRS -> SoeW
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> jsGv
    react.surge.util.BlastResistance ACACIA_DOOR -> oiFD
    react.surge.util.BlastResistance BIRCH_DOOR -> YOSb
    react.surge.util.BlastResistance DARK_OAK_DOOR -> EoMp
    react.surge.util.BlastResistance SPRUCE_DOOR -> fnjb
    react.surge.util.BlastResistance JUNGLE_DOOR -> grOE
    react.surge.util.BlastResistance GOLD_ORE -> pRUX
    react.surge.util.BlastResistance HOPPER -> qnil
    react.surge.util.BlastResistance IRON_ORE -> XwEe
    react.surge.util.BlastResistance LAPIS_BLOCK -> cUAg
    react.surge.util.BlastResistance LAPIS_ORE -> Okij
    react.surge.util.BlastResistance QUARTZ_ORE -> vBeG
    react.surge.util.BlastResistance REDSTONE_ORE -> WjpM
    react.surge.util.BlastResistance TRAP_DOOR -> YpvR
    react.surge.util.BlastResistance WOOD -> YiFg
    react.surge.util.BlastResistance CHEST -> TYWN
    react.surge.util.BlastResistance TRAPPED_CHEST -> tpCq
    react.surge.util.BlastResistance WORKBENCH -> YGCi
    react.surge.util.BlastResistance CAULDRON -> TYVj
    react.surge.util.BlastResistance LOG -> xHjb
    react.surge.util.BlastResistance LOG_2 -> ubHr
    react.surge.util.BlastResistance BOOKSHELF -> apaA
    react.surge.util.BlastResistance BANNER -> TXws
    react.surge.util.BlastResistance STANDING_BANNER -> YFdw
    react.surge.util.BlastResistance WALL_BANNER -> MKsd
    react.surge.util.BlastResistance JACK_O_LANTERN -> FqsT
    react.surge.util.BlastResistance MELON_BLOCK -> cwGq
    react.surge.util.BlastResistance SKULL -> AIPw
    react.surge.util.BlastResistance PUMPKIN -> yUBs
    react.surge.util.BlastResistance SIGN -> LseO
    react.surge.util.BlastResistance SIGN_POST -> IPjA
    react.surge.util.BlastResistance WALL_SIGN -> igUi
    react.surge.util.BlastResistance QUARTZ_BLOCK -> qMKF
    react.surge.util.BlastResistance NOTE_BLOCK -> Fqqk
    react.surge.util.BlastResistance RED_SANDSTONE -> cecl
    react.surge.util.BlastResistance SANDSTONE -> uXvD
    react.surge.util.BlastResistance WOOL -> nwEw
    react.surge.util.BlastResistance MONSTER_EGG -> dWeX
    react.surge.util.BlastResistance RAILS -> MwHK
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> cveY
    react.surge.util.BlastResistance DETECTOR_RAIL -> UvMp
    react.surge.util.BlastResistance POWERED_RAIL -> NFfE
    react.surge.util.BlastResistance CLAY -> qLho
    react.surge.util.BlastResistance DIRT -> pAVM
    react.surge.util.BlastResistance GRASS -> TXwm
    react.surge.util.BlastResistance GRAVEL -> KgpP
    react.surge.util.BlastResistance SPONGE -> NNvQ
    react.surge.util.BlastResistance BREWING_STAND -> COYk
    react.surge.util.BlastResistance STONE_BUTTON -> FjEf
    react.surge.util.BlastResistance WOOD_BUTTON -> LREE
    react.surge.util.BlastResistance CAKE_BLOCK -> FquQ
    react.surge.util.BlastResistance ICE -> RdVe
    react.surge.util.BlastResistance PACKED_ICE -> HVXo
    react.surge.util.BlastResistance LEVER -> KxtP
    react.surge.util.BlastResistance MYCEL -> VVpS
    react.surge.util.BlastResistance PISTON_BASE -> HDwH
    react.surge.util.BlastResistance PISTON_EXTENSION -> iDuW
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> RJct
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> qMMl
    react.surge.util.BlastResistance GOLD_PLATE -> KxtX
    react.surge.util.BlastResistance IRON_PLATE -> HNHt
    react.surge.util.BlastResistance STONE_PLATE -> SEVu
    react.surge.util.BlastResistance WOOD_PLATE -> Asex
    react.surge.util.BlastResistance SAND -> gPPq
    react.surge.util.BlastResistance SOUL_SAND -> togt
    react.surge.util.BlastResistance CACTUS -> aWQM
    react.surge.util.BlastResistance LADDER -> KEpR
    react.surge.util.BlastResistance NETHERRACK -> yLSg
    react.surge.util.BlastResistance GLASS -> JvQG
    react.surge.util.BlastResistance THIN_GLASS -> SxYy
    react.surge.util.BlastResistance STAINED_GLASS -> hApj
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> lEli
    react.surge.util.BlastResistance GLOWSTONE -> NXJA
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> jGwU
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> EMNq
    react.surge.util.BlastResistance SEA_LANTERN -> hApt
    react.surge.util.BlastResistance BED_BLOCK -> fLlH
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> GAsG
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> nmtw
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> bABB
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> pIhU
    react.surge.util.BlastResistance LEAVES -> Udmy
    react.surge.util.BlastResistance LEAVES_2 -> MviP
    react.surge.util.BlastResistance SNOW -> Iaki
    int br -> bYrS
    react.surge.util.BlastResistance[] ENUM$VALUES -> JvPy
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> Vnrx
    175:190:int get(org.bukkit.Material) -> wfHp
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> oESw:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> IVri
react.surge.util.C -> Libm:
    react.surge.util.C BLACK -> veLk
    react.surge.util.C DARK_BLUE -> EgBY
    react.surge.util.C DARK_GREEN -> ExDO
    react.surge.util.C DARK_AQUA -> Bviu
    react.surge.util.C DARK_RED -> kCNG
    react.surge.util.C DARK_PURPLE -> dFiU
    react.surge.util.C GOLD -> EEBC
    react.surge.util.C GRAY -> UdqK
    react.surge.util.C DARK_GRAY -> Kxui
    react.surge.util.C BLUE -> LbgX
    react.surge.util.C GREEN -> xbdv
    react.surge.util.C AQUA -> oOYp
    react.surge.util.C RED -> FGdI
    react.surge.util.C LIGHT_PURPLE -> FaWC
    react.surge.util.C YELLOW -> WQdx
    react.surge.util.C WHITE -> wxsb
    react.surge.util.C MAGIC -> vvRP
    react.surge.util.C BOLD -> LIUf
    react.surge.util.C STRIKETHROUGH -> bjum
    react.surge.util.C UNDERLINE -> vSnJ
    react.surge.util.C ITALIC -> yKtl
    react.surge.util.C RESET -> VyWO
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> rjDo
    char code -> wqDJ
    boolean isFormat -> nLWD
    java.lang.String toString -> ELrD
    java.util.Map BY_ID -> PoTq
    java.util.Map BY_CHAR -> JLAW
    java.util.Map dyeChatMap -> xHqn
    java.util.Map chatHexMap -> Asgx
    java.util.Map dyeHexMap -> XejQ
    int[] $SWITCH_TABLE$surge$util$C -> bbfV
    react.surge.util.C[] ENUM$VALUES -> VOBR
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> hQca
    378:378:java.lang.String hex() -> IXMX
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> UAEC
    434:442:react.surge.util.C getByChar(java.lang.String) -> KemN
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> KTiB
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> wfHp
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> KTiB
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> WhmD
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> LhpP
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> avmI
    560:578:java.lang.String generateColorTable() -> HfLM
    588:588:org.bukkit.ChatColor chatColor() -> xOqD
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> ogBf
    632:679:byte getItemMeta() -> BSXh
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> NNLp
react.surge.util.C$1 -> Libm$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> Libm$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> Libm$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> Libm$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> Libm$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> Libm$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> Libm$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> Libm$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> Libm$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> Libm$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> Libm$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> Libm$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> Libm$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> Libm$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> Libm$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> Libm$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> Libm$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> Libm$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> Libm$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> Libm$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> Libm$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> Libm$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> RtEn:
    double number -> cLUx
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> PliD
    23:25:react.surge.util.CDou add(double) -> PtyI
    30:32:react.surge.util.CDou sub(double) -> MImH
    37:37:double get() -> get
    42:48:void circ() -> BmNA
react.surge.util.CMD -> DPii:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> BelE
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> loUi
    51:53:void execute(org.bukkit.command.CommandSender) -> UshV
    60:77:void execute() -> execute
react.surge.util.CNum -> IFfx:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> KemN
    23:25:react.surge.util.CNum add(int) -> LhpP
    30:32:react.surge.util.CNum sub(int) -> avmI
    37:37:int get() -> get
    42:48:void circ() -> BmNA
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> UtLA
react.surge.util.Chunks -> OYYy:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> quXW
    33:40:react.glang.GList getLoadedChunks() -> uXLy
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> KTiB
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> wfHp
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> wfHp
    98:98:boolean unload(org.bukkit.Chunk) -> mFgo
    114:124:int unload(react.glang.GList,boolean,boolean) -> wfHp
    138:138:int unload(react.glang.GList,boolean) -> wfHp
    150:150:int unload(react.glang.GList) -> quXW
    166:166:boolean isLoaded(java.lang.String,int,int) -> wfHp
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> KTiB
    201:205:void load(react.glang.GList) -> IODS
react.surge.util.Cuboid -> DGxd:
    java.lang.String worldName -> wxsE
    int x1 -> dGHm
    int y1 -> MDFr
    int z1 -> NiNB
    int x2 -> diKh
    int y2 -> GKFq
    int z2 -> gqtN
    int[] $SWITCH_TABLE$surge$util$Axis -> MUIR
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> LtHq
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> wfHp
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> WhmD
    93:93:boolean hasPlayers() -> ELDE
    98:110:react.glang.GList getPlayers() -> ssVu
    115:166:react.glang.GList getEntities() -> TaAA
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> TphE
    287:287:org.bukkit.Location getLowerNE() -> mYGT
    298:298:org.bukkit.Location getUpperSW() -> PLCP
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> qSpg
    348:348:int getSizeY() -> WaXU
    358:358:int getSizeZ() -> UIod
    368:368:int getLowerX() -> DPpX
    378:378:int getLowerY() -> iDHx
    388:388:int getLowerZ() -> DarQ
    398:398:int getUpperX() -> KDcf
    408:408:int getUpperY() -> gOCl
    418:418:int getUpperZ() -> mXeM
    428:438:org.bukkit.block.Block[] corners() -> OjaM
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> wfHp
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> KTiB
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> WhmD
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> TEpd
    546:546:boolean contains(int,int,int) -> UshV
    558:558:boolean contains(org.bukkit.block.Block) -> ogBf
    570:570:boolean contains(org.bukkit.Location) -> cuAO
    580:580:int volume() -> rWTE
    591:601:byte averageLightLevel() -> LrYS
    612:612:react.surge.util.Cuboid contract() -> JdBn
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> wfHp
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> KTiB
    708:715:boolean containsOnly(org.bukkit.Material) -> KTiB
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> wfHp
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> IVri
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> wfHp
    786:800:java.util.List getChunks() -> PutP
    815:819:void fill(int,byte) -> wfHp
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> XlkE
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> oMic
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> nBUy
react.surge.util.Cuboid$1 -> DGxd$1:
    react.surge.util.Cuboid this$0 -> gPRR
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> cuAO
    1:1:java.lang.Object onAdapt(java.lang.Object) -> ogBf
react.surge.util.Cuboid$CuboidDirection -> DGxd$wfHp:
    react.surge.util.Cuboid$CuboidDirection North -> FPTb
    react.surge.util.Cuboid$CuboidDirection East -> EMRF
    react.surge.util.Cuboid$CuboidDirection South -> eJKw
    react.surge.util.Cuboid$CuboidDirection West -> oOXd
    react.surge.util.Cuboid$CuboidDirection Up -> edAo
    react.surge.util.Cuboid$CuboidDirection Down -> GmLj
    react.surge.util.Cuboid$CuboidDirection Horizontal -> elRT
    react.surge.util.Cuboid$CuboidDirection Vertical -> YFkm
    react.surge.util.Cuboid$CuboidDirection Both -> AYwt
    react.surge.util.Cuboid$CuboidDirection Unknown -> fMQn
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> LtHq
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> qgEN
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> EnFJ
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> nBUy
react.surge.util.Cuboid$CuboidIterator -> DGxd$KTiB:
    org.bukkit.World w -> JBpd
    int baseX -> fweT
    int baseY -> fLrK
    int baseZ -> mQed
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> oGKT
    int sizeY -> YWnM
    int sizeZ -> fMSF
    react.surge.util.Cuboid this$0 -> gPRR
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> GsfL:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> hRAY:
    react.glang.GList buffer -> GAwt
    10:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    14:18:void flush() -> flush
    22:33:void log(java.lang.String,java.lang.String) -> TEpd
    37:38:void l(java.lang.Object,java.lang.String) -> KTiB
    42:43:void s(java.lang.Object,java.lang.String) -> WhmD
    47:48:void v(java.lang.Object,java.lang.String) -> TEpd
    52:53:void w(java.lang.Object,java.lang.String) -> UshV
    57:58:void f(java.lang.Object,java.lang.String) -> IVri
    62:69:void l(java.lang.String) -> UtLA
    73:80:void s(java.lang.String) -> TphE
    84:91:void v(java.lang.String) -> qmJC
    95:102:void w(java.lang.String) -> AWnw
    106:113:void f(java.lang.String) -> RQMn
react.surge.util.DMSRequire -> Rbce:
    react.surge.util.DMSRequirement value() -> qeQu
react.surge.util.DMSRequirement -> GkUg:
    react.surge.util.DMSRequirement SQL -> rXda
    react.surge.util.DMSRequirement[] ENUM$VALUES -> nUIm
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> fCJc:
    react.surge.util.Depend VAULT -> kurr
    react.surge.util.Depend FAWE -> cwNN
    react.surge.util.Depend WORLDEDIT -> CqbN
    react.surge.util.Depend PROTOLIB -> gHEX
    react.surge.util.Depend CITIZENS -> FaYX
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> QqyS
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> SwIa:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> TFlD
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> psKW:
    react.surge.util.DimensionFace X -> Envl
    react.surge.util.DimensionFace Y -> lErF
    react.surge.util.DimensionFace Z -> XfLt
    react.surge.util.DimensionFace[] ENUM$VALUES -> toky
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> erkR:
    react.surge.util.Direction U -> aWTJ
    react.surge.util.Direction D -> EwfY
    react.surge.util.Direction N -> uamT
    react.surge.util.Direction S -> xtHk
    react.surge.util.Direction E -> xkWW
    react.surge.util.Direction W -> CaAQ
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> sBUM
    int[] $SWITCH_TABLE$surge$util$Direction -> xcFe
    react.surge.util.Direction[] ENUM$VALUES -> EgFX
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> cljA
    61:61:int x() -> kImn
    66:66:int y() -> lLpm
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> JIpD
    81:81:react.glang.GList news() -> AGfl
    86:86:react.glang.GList udnews() -> UIno
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> pYCR
    115:147:react.surge.util.Direction fromByte(byte) -> UAEC
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> VoUw
react.surge.util.DynamicConfiguration -> nBQL:
react.surge.util.DynamicTracker -> kQxa:
react.surge.util.Embedded -> LPOn:
    react.glang.GList get() -> KxGq
    void add(java.lang.Object) -> add
react.surge.util.FU -> woNM:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> wfHp
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> KTiB
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> UshV
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> IVri
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> sINh:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> dwdX
react.surge.util.Health -> Jkkn:
    double hp -> Gcyt
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> jFjS
    41:41:double getHearts() -> lnru
    51:51:double getHalfHearts() -> wgDC
    61:61:int getFlatHalfHearts() -> uFig
react.surge.util.IO -> jyht:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> WPNx:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> wfHp
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> wfHp
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> wfHp
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> wfHp
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> wfHp
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> KTiB
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> WhmD
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> TEpd
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> wfHp
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> wfHp
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> wfHp
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> wfHp
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> UshV
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> IVri
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> ogBf
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> UAEC
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> eaTY
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> wfHp
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> cuAO
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> UcHS
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> wfHp
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> wfHp
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> KTiB
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> wfHp
react.surge.util.MSound -> wMKP:
    react.surge.util.MSound AMBIENCE_CAVE -> FXfj
    react.surge.util.MSound AMBIENCE_RAIN -> wpdK
    react.surge.util.MSound AMBIENCE_THUNDER -> xITR
    react.surge.util.MSound ANVIL_BREAK -> cLXf
    react.surge.util.MSound ANVIL_LAND -> bjwb
    react.surge.util.MSound ANVIL_USE -> fMSy
    react.surge.util.MSound ARROW_HIT -> KVwM
    react.surge.util.MSound BURP -> xAFp
    react.surge.util.MSound CHEST_CLOSE -> qLsJ
    react.surge.util.MSound CHEST_OPEN -> nfNK
    react.surge.util.MSound CLICK -> cCjN
    react.surge.util.MSound DOOR_CLOSE -> qoWX
    react.surge.util.MSound DOOR_OPEN -> iMle
    react.surge.util.MSound DRINK -> gOvN
    react.surge.util.MSound EAT -> hJiJ
    react.surge.util.MSound EXPLODE -> HyDG
    react.surge.util.MSound FALL_BIG -> aNfN
    react.surge.util.MSound FALL_SMALL -> MfPU
    react.surge.util.MSound FIRE -> ukAx
    react.surge.util.MSound FIRE_IGNITE -> RBXo
    react.surge.util.MSound FIZZ -> xYvk
    react.surge.util.MSound FUSE -> CiQp
    react.surge.util.MSound GLASS -> HpPl
    react.surge.util.MSound HURT_FLESH -> WcJm
    react.surge.util.MSound ITEM_BREAK -> oWly
    react.surge.util.MSound ITEM_PICKUP -> qwfS
    react.surge.util.MSound LAVA -> JKcG
    react.surge.util.MSound LAVA_POP -> ipOa
    react.surge.util.MSound LEVEL_UP -> gHFL
    react.surge.util.MSound MINECART_BASE -> OteM
    react.surge.util.MSound MINECART_INSIDE -> AtNn
    react.surge.util.MSound NOTE_BASS -> YhpG
    react.surge.util.MSound NOTE_PIANO -> qwey
    react.surge.util.MSound NOTE_BASS_DRUM -> mjyX
    react.surge.util.MSound NOTE_STICKS -> jsRK
    react.surge.util.MSound NOTE_BASS_GUITAR -> Qiif
    react.surge.util.MSound NOTE_SNARE_DRUM -> rOsw
    react.surge.util.MSound NOTE_PLING -> oWmK
    react.surge.util.MSound ORB_PICKUP -> whVR
    react.surge.util.MSound PISTON_EXTEND -> Pnvt
    react.surge.util.MSound PISTON_RETRACT -> vutA
    react.surge.util.MSound PORTAL -> FGhC
    react.surge.util.MSound PORTAL_TRAVEL -> JvWi
    react.surge.util.MSound PORTAL_TRIGGER -> WQkY
    react.surge.util.MSound SHOOT_ARROW -> etgF
    react.surge.util.MSound SPLASH -> vvXM
    react.surge.util.MSound SPLASH2 -> NXRi
    react.surge.util.MSound STEP_GRASS -> XDNB
    react.surge.util.MSound STEP_GRAVEL -> ipSD
    react.surge.util.MSound STEP_LADDER -> NyuX
    react.surge.util.MSound STEP_SAND -> yUMd
    react.surge.util.MSound STEP_SNOW -> XvqX
    react.surge.util.MSound STEP_STONE -> NXRs
    react.surge.util.MSound STEP_WOOD -> Xvql
    react.surge.util.MSound STEP_WOOL -> THcF
    react.surge.util.MSound SWIM -> xHxL
    react.surge.util.MSound WATER -> Jdwm
    react.surge.util.MSound WOOD_CLICK -> vLDS
    react.surge.util.MSound BAT_DEATH -> lOGj
    react.surge.util.MSound BAT_HURT -> rXhb
    react.surge.util.MSound BAT_IDLE -> gjLQ
    react.surge.util.MSound BAT_LOOP -> SNPt
    react.surge.util.MSound BAT_TAKEOFF -> lxyu
    react.surge.util.MSound BLAZE_BREATH -> rPXc
    react.surge.util.MSound BLAZE_DEATH -> CqfV
    react.surge.util.MSound BLAZE_HIT -> sllg
    react.surge.util.MSound CAT_HISS -> RKLU
    react.surge.util.MSound CAT_HIT -> ELvS
    react.surge.util.MSound CAT_MEOW -> EEGK
    react.surge.util.MSound CAT_PURR -> MvqJ
    react.surge.util.MSound CAT_PURREOW -> DJSs
    react.surge.util.MSound CHICKEN_IDLE -> jPqA
    react.surge.util.MSound CHICKEN_HURT -> vvVu
    react.surge.util.MSound CHICKEN_EGG_POP -> SpRb
    react.surge.util.MSound CHICKEN_WALK -> WQjS
    react.surge.util.MSound COW_IDLE -> OlWH
    react.surge.util.MSound COW_HURT -> GmOv
    react.surge.util.MSound COW_WALK -> uQQM
    react.surge.util.MSound CREEPER_HISS -> UKdV
    react.surge.util.MSound CREEPER_DEATH -> bHxT
    react.surge.util.MSound ENDERDRAGON_DEATH -> aEtr
    react.surge.util.MSound ENDERDRAGON_GROWL -> YaCT
    react.surge.util.MSound ENDERDRAGON_HIT -> gOwR
    react.surge.util.MSound ENDERDRAGON_WINGS -> TjeC
    react.surge.util.MSound ENDERMAN_DEATH -> DReL
    react.surge.util.MSound ENDERMAN_HIT -> DthM
    react.surge.util.MSound ENDERMAN_IDLE -> dyrv
    react.surge.util.MSound ENDERMAN_TELEPORT -> HyEH
    react.surge.util.MSound ENDERMAN_SCREAM -> hBYf
    react.surge.util.MSound ENDERMAN_STARE -> Nhrj
    react.surge.util.MSound GHAST_SCREAM -> iNNR
    react.surge.util.MSound GHAST_SCREAM2 -> dqcK
    react.surge.util.MSound GHAST_CHARGE -> qVFJ
    react.surge.util.MSound GHAST_DEATH -> pktD
    react.surge.util.MSound GHAST_FIREBALL -> ELyT
    react.surge.util.MSound GHAST_MOAN -> iWBf
    react.surge.util.MSound IRONGOLEM_DEATH -> gHJs
    react.surge.util.MSound IRONGOLEM_HIT -> MvtM
    react.surge.util.MSound IRONGOLEM_THROW -> Berh
    react.surge.util.MSound IRONGOLEM_WALK -> CrHc
    react.surge.util.MSound MAGMACUBE_WALK -> LbpB
    react.surge.util.MSound MAGMACUBE_WALK2 -> HyGb
    react.surge.util.MSound MAGMACUBE_JUMP -> XToy
    react.surge.util.MSound PIG_IDLE -> YWsp
    react.surge.util.MSound PIG_DEATH -> DJXF
    react.surge.util.MSound PIG_WALK -> CGRy
    react.surge.util.MSound SHEEP_IDLE -> diVL
    react.surge.util.MSound SHEEP_SHEAR -> GKQB
    react.surge.util.MSound SHEEP_WALK -> yCmQ
    react.surge.util.MSound SILVERFISH_HIT -> QYOC
    react.surge.util.MSound SILVERFISH_KILL -> nnbJ
    react.surge.util.MSound SILVERFISH_IDLE -> iorv
    react.surge.util.MSound SILVERFISH_WALK -> wEvs
    react.surge.util.MSound SKELETON_IDLE -> lqLs
    react.surge.util.MSound SKELETON_DEATH -> vuxa
    react.surge.util.MSound SKELETON_HURT -> QGjY
    react.surge.util.MSound SKELETON_WALK -> KpmJ
    react.surge.util.MSound SLIME_ATTACK -> OAdW
    react.surge.util.MSound SLIME_WALK -> kLEv
    react.surge.util.MSound SLIME_WALK2 -> mAJm
    react.surge.util.MSound SPIDER_IDLE -> lEvt
    react.surge.util.MSound SPIDER_DEATH -> gXjp
    react.surge.util.MSound SPIDER_WALK -> urth
    react.surge.util.MSound WITHER_DEATH -> YFqE
    react.surge.util.MSound WITHER_HURT -> Sosc
    react.surge.util.MSound WITHER_IDLE -> uYby
    react.surge.util.MSound WITHER_SHOOT -> TYeJ
    react.surge.util.MSound WITHER_SPAWN -> sKMO
    react.surge.util.MSound WOLF_BARK -> ExNM
    react.surge.util.MSound WOLF_DEATH -> jatA
    react.surge.util.MSound WOLF_GROWL -> dyuX
    react.surge.util.MSound WOLF_HOWL -> qfgu
    react.surge.util.MSound WOLF_HURT -> xsmR
    react.surge.util.MSound WOLF_PANT -> dPBj
    react.surge.util.MSound WOLF_SHAKE -> hJku
    react.surge.util.MSound WOLF_WALK -> CWta
    react.surge.util.MSound WOLF_WHINE -> Sgch
    react.surge.util.MSound ZOMBIE_METAL -> OBFM
    react.surge.util.MSound ZOMBIE_WOOD -> iNOx
    react.surge.util.MSound ZOMBIE_WOODBREAK -> Nyxr
    react.surge.util.MSound ZOMBIE_IDLE -> yTqO
    react.surge.util.MSound ZOMBIE_DEATH -> NOfK
    react.surge.util.MSound ZOMBIE_HURT -> coFD
    react.surge.util.MSound ZOMBIE_INFECT -> gYOR
    react.surge.util.MSound ZOMBIE_UNFECT -> oOcy
    react.surge.util.MSound ZOMBIE_REMEDY -> qVJx
    react.surge.util.MSound ZOMBIE_WALK -> nfTT
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> XCpk
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> YqiK
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> mtQl
    react.surge.util.MSound ZOMBIE_PIG_HURT -> pIuc
    react.surge.util.MSound DIG_WOOL -> QiqN
    react.surge.util.MSound DIG_GRASS -> cDQi
    react.surge.util.MSound DIG_GRAVEL -> nesG
    react.surge.util.MSound DIG_SAND -> PwpE
    react.surge.util.MSound DIG_SNOW -> CGUV
    react.surge.util.MSound DIG_STONE -> lqNw
    react.surge.util.MSound DIG_WOOD -> OSJa
    react.surge.util.MSound FIREWORK_BLAST -> Metv
    react.surge.util.MSound FIREWORK_BLAST2 -> xALl
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> qEJA
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> YrJF
    react.surge.util.MSound FIREWORK_TWINKLE -> TbXP
    react.surge.util.MSound FIREWORK_TWINKLE2 -> xRNJ
    react.surge.util.MSound FIREWORK_LAUNCH -> cURL
    react.surge.util.MSound SUCCESSFUL_HIT -> knKX
    react.surge.util.MSound HORSE_ANGRY -> PwnK
    react.surge.util.MSound HORSE_ARMOR -> jIDx
    react.surge.util.MSound HORSE_BREATHE -> OuLL
    react.surge.util.MSound HORSE_DEATH -> dyvl
    react.surge.util.MSound HORSE_GALLOP -> sdaB
    react.surge.util.MSound HORSE_HIT -> yvsF
    react.surge.util.MSound HORSE_IDLE -> tgdP
    react.surge.util.MSound HORSE_JUMP -> WQmt
    react.surge.util.MSound HORSE_LAND -> tNRW
    react.surge.util.MSound HORSE_SADDLE -> lpnH
    react.surge.util.MSound HORSE_SOFT -> TQWD
    react.surge.util.MSound HORSE_WOOD -> RJpA
    react.surge.util.MSound DONKEY_ANGRY -> msoi
    react.surge.util.MSound DONKEY_DEATH -> diWJ
    react.surge.util.MSound DONKEY_HIT -> MTsI
    react.surge.util.MSound DONKEY_IDLE -> hmQv
    react.surge.util.MSound HORSE_SKELETON_DEATH -> lqNR
    react.surge.util.MSound HORSE_SKELETON_HIT -> oPCn
    react.surge.util.MSound HORSE_SKELETON_IDLE -> IjlR
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> gHOT
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> wppS
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> FsFF
    react.surge.util.MSound VILLAGER_DEATH -> GBcU
    react.surge.util.MSound VILLAGER_HAGGLE -> XfVl
    react.surge.util.MSound VILLAGER_HIT -> WIag
    react.surge.util.MSound VILLAGER_IDLE -> lqPl
    react.surge.util.MSound VILLAGER_NO -> Glvf
    react.surge.util.MSound VILLAGER_YES -> LAQs
    java.lang.String pre19sound -> HVgp
    java.lang.String post19sound -> gYPd
    org.bukkit.Sound resolvedSound -> mcRa
    react.surge.util.MSound[] ENUM$VALUES -> TIJT
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> PuuL
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> SUDk:
    org.bukkit.Material material -> smTi
    java.lang.Byte data -> RKSw
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> XmLJ
    79:80:void setData(java.lang.Byte) -> wfHp
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> Gjsh:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> FpOO
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> gODF
    68:68:boolean isAnyOnline() -> SelU
    80:80:react.glang.GList inWorld(org.bukkit.World) -> IODS
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> LGKf
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> wfHp
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> wfHp
    143:144:void disable(org.bukkit.entity.Player) -> bhkH
    154:155:void enable(org.bukkit.entity.Player) -> JHsa
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> wfHp
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> KTiB
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> kkUq
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> wfHp
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> gDuv
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> WhmD
    300:300:boolean canFindPlayer(java.lang.String) -> inBw
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> dVAo
    338:345:react.glang.GList onlinePlayers() -> KUcx
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> AFkU
    368:371:void clear(org.bukkit.entity.Player) -> PliD
    381:385:void clearEffects(org.bukkit.entity.Player) -> PtyI
    398:399:void heal(org.bukkit.entity.Player,double) -> wfHp
    409:410:void heal(org.bukkit.entity.Player) -> MImH
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> rMek
    432:433:void resetHunger(org.bukkit.entity.Player) -> VThG
    443:444:void kill(org.bukkit.entity.Player) -> FDxR
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> WXJy
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> sajf
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> wfHp
react.surge.util.P$1 -> Gjsh$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> cuAO
    1:1:java.lang.Object onAdapt(java.lang.Object) -> ogBf
react.surge.util.P$2 -> Gjsh$2:
    java.lang.Double val$doff -> cCrc
    org.bukkit.entity.Player val$e -> GTFW
    org.bukkit.entity.Entity[] val$result -> SFDu
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> UcHS
react.surge.util.PE -> CUwK:
    react.surge.util.PE ABSORPTION -> FHOx
    react.surge.util.PE BLINDNESS -> YaHe
    react.surge.util.PE CONFUSION -> rGlq
    react.surge.util.PE DAMAGE_RESISTANCE -> GTDf
    react.surge.util.PE FAST_DIGGING -> edKk
    react.surge.util.PE FIRE_RESISTANCE -> sdat
    react.surge.util.PE GLOWING -> uavq
    react.surge.util.PE HARM -> XTsr
    react.surge.util.PE HEAL -> QirL
    react.surge.util.PE HEALTH_BOOST -> SNUl
    react.surge.util.PE HUNGER -> LbsP
    react.surge.util.PE INCREASE_DAMAGE -> Kybo
    react.surge.util.PE INVISIBILITY -> pSHq
    react.surge.util.PE JUMP -> Efog
    react.surge.util.PE LEVITATION -> cCqe
    react.surge.util.PE LUCK -> pdKF
    react.surge.util.PE NIGHT_VISION -> KiBc
    react.surge.util.PE POISON -> cLbk
    react.surge.util.PE REGENERATION -> MwYH
    react.surge.util.PE SATURATION -> YaIU
    react.surge.util.PE SLOW -> LtUg
    react.surge.util.PE SLOW_DIGGING -> jbXo
    react.surge.util.PE SPEED -> RCDy
    react.surge.util.PE UNLUCK -> HMww
    react.surge.util.PE WATER_BREATHING -> nTvE
    react.surge.util.PE WEAKNESS -> liBy
    react.surge.util.PE WITHER -> foan
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> wfHp
    144:144:react.surge.util.PE d(int) -> qmJC
    156:156:react.surge.util.PE a(int) -> AWnw
    166:166:org.bukkit.potion.PotionEffect c() -> hAEY
    177:178:void c(org.bukkit.entity.LivingEntity) -> IVri
    182:183:void crm(org.bukkit.entity.LivingEntity) -> ogBf
    187:188:void rm(org.bukkit.entity.LivingEntity) -> UAEC
react.surge.util.ParticleEffect -> pQGU:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> ynhR
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> aycu
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> puPH
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> UfAR
    react.surge.util.ParticleEffect WATER_BUBBLE -> VhcV
    react.surge.util.ParticleEffect WATER_SPLASH -> fENQ
    react.surge.util.ParticleEffect WATER_WAKE -> RSem
    react.surge.util.ParticleEffect SUSPENDED -> AtWq
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> ihIo
    react.surge.util.ParticleEffect CRIT -> uHgv
    react.surge.util.ParticleEffect CRIT_MAGIC -> qVNj
    react.surge.util.ParticleEffect SMOKE_NORMAL -> JnSD
    react.surge.util.ParticleEffect SMOKE_LARGE -> iNVx
    react.surge.util.ParticleEffect SPELL -> oOhS
    react.surge.util.ParticleEffect SPELL_INSTANT -> PUqJ
    react.surge.util.ParticleEffect SPELL_MOB -> Nqmh
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> XTvl
    react.surge.util.ParticleEffect SPELL_WITCH -> bken
    react.surge.util.ParticleEffect DRIP_WATER -> LIde
    react.surge.util.ParticleEffect DRIP_LAVA -> ENBV
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> bkdi
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> ReGX
    react.surge.util.ParticleEffect TOWN_AURA -> CrNC
    react.surge.util.ParticleEffect NOTE -> lybk
    react.surge.util.ParticleEffect PORTAL -> JwAy
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> bRRl
    react.surge.util.ParticleEffect FLAME -> QQBq
    react.surge.util.ParticleEffect LAVA -> cDTW
    react.surge.util.ParticleEffect FOOTSTEP -> qfoX
    react.surge.util.ParticleEffect CLOUD -> OBKg
    react.surge.util.ParticleEffect REDSTONE -> jQYn
    react.surge.util.ParticleEffect SNOWBALL -> FsGF
    react.surge.util.ParticleEffect SNOW_SHOVEL -> IHjX
    react.surge.util.ParticleEffect SLIME -> puNN
    react.surge.util.ParticleEffect HEART -> mtTr
    react.surge.util.ParticleEffect BARRIER -> pIxb
    react.surge.util.ParticleEffect ITEM_CRACK -> EgRi
    react.surge.util.ParticleEffect BLOCK_CRACK -> yUSy
    react.surge.util.ParticleEffect BLOCK_DUST -> Xnhe
    react.surge.util.ParticleEffect WATER_DROP -> MoMP
    react.surge.util.ParticleEffect ITEM_TAKE -> TtBD
    react.surge.util.ParticleEffect MOB_APPEARANCE -> lXDL
    react.surge.util.ParticleEffect DRAGON_BREATH -> AJFv
    react.surge.util.ParticleEffect END_ROD -> LlIw
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> ShNF
    react.surge.util.ParticleEffect SWEEP_ATTACK -> whcn
    java.util.Map NAME_MAP -> msxO
    java.util.Map ID_MAP -> kLPM
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> WAVE
    java.util.List properties -> Pwub
    react.surge.util.ParticleEffect[] ENUM$VALUES -> DKAM
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> UlRp
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> wfHp
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> eifa
    557:565:react.surge.util.ParticleEffect fromId(int) -> RQMn
    577:578:boolean isWater(org.bukkit.Location) -> lwKC
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> wfHp
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> wfHp
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> wfHp
    665:681:void display(float,int,org.bukkit.Location,double) -> wfHp
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> wfHp
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> wfHp
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> wfHp
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> wfHp
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> wfHp
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> wfHp
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> wfHp
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> wfHp
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> wfHp
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> wfHp
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> wfHp
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> wfHp
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> wfHp
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> wfHp
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> pQGU$wfHp:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> pQGU$KTiB:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> pQGU$WhmD:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> ooku
    1594:1594:float getValueY() -> IFll
    1605:1605:float getValueZ() -> cAuh
react.surge.util.ParticleEffect$OrdinaryColor -> pQGU$TEpd:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> ooku
    1526:1526:float getValueY() -> IFll
    1537:1537:float getValueZ() -> cAuh
react.surge.util.ParticleEffect$ParticleColor -> pQGU$UshV:
    1383:1383:void <init>() -> <init>
    float getValueX() -> ooku
    float getValueY() -> IFll
    float getValueZ() -> cAuh
react.surge.util.ParticleEffect$ParticleColorException -> pQGU$IVri:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> pQGU$ogBf:
    org.bukkit.Material material -> smTi
    byte data -> EMcP
    int[] packetData -> QbGf
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> ETUk
    1309:1309:java.lang.String getPacketDataString() -> OjdL
react.surge.util.ParticleEffect$ParticleDataException -> pQGU$UAEC:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> pQGU$eaTY:
    int version -> version
    java.lang.Class enumParticle -> KFcc
    java.lang.reflect.Constructor packetConstructor -> oPKS
    java.lang.reflect.Method getHandle -> OuTL
    java.lang.reflect.Field playerConnection -> smYH
    java.lang.reflect.Method sendPacket -> Hgmm
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> yCto
    float offsetX -> oFyN
    float offsetY -> BoOA
    float offsetZ -> NOkN
    float speed -> pcmo
    int amount -> oyMa
    boolean longDistance -> FrhB
    react.surge.util.ParticleEffect$ParticleData data -> lqUK
    java.lang.Object packet -> Sgkb
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> mFgo
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> wfHp
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> KTiB
    2004:2018:void sendTo(org.bukkit.Location,double) -> KTiB
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> pQGU$eaTY$wfHp:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> pQGU$eaTY$KTiB:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> pQGU$eaTY$WhmD:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> pQGU$cuAO:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> TIMC
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> kvbT
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> nniK
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> JfBv
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> bbur
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> pQGU$UcHS:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> QySF:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> nJLs
react.surge.util.Persist -> QxrF:
react.surge.util.PluginUtil -> dwwV:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> UshV
    81:85:void enableAll() -> TrDG
    95:99:void disable(org.bukkit.plugin.Plugin) -> IVri
    106:110:void disableAll() -> Rslw
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> ogBf
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> wfHp
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> lCfR
    169:172:java.util.List getPluginNames(boolean) -> UYuc
    184:187:java.lang.String getPluginVersion(java.lang.String) -> KTjQ
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> UAEC
    237:316:java.util.List findByCommand(java.lang.String) -> TguV
    337:338:void load(org.bukkit.plugin.Plugin) -> eaTY
    342:364:java.lang.String getPluginFileName(java.lang.String) -> INco
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> wfHp
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> cuAO
    480:484:void reloadAll() -> KVHK
    496:622:void unload(org.bukkit.plugin.Plugin) -> UcHS
react.surge.util.PoolCount -> RAAJ:
react.surge.util.PoolDescriber -> jiHW:
react.surge.util.PoolNanoThrottle -> oEVS:
react.surge.util.PositionalSelector -> QOBK:
    react.glang.GSet allowedChunks -> iyMB
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> mqxv
    39:40:void addChunk(org.bukkit.Chunk) -> quXW
    44:44:react.glang.GSet getAllowedChunks() -> KVHN
react.surge.util.Protocol -> jXJN:
    react.surge.util.Protocol LATEST -> yMEr
    react.surge.util.Protocol R1_12_2 -> QPeB
    react.surge.util.Protocol R1_12_2_PRE -> FbHI
    react.surge.util.Protocol R1_12_1 -> SFIq
    react.surge.util.Protocol R1_12 -> iNXa
    react.surge.util.Protocol R1_11_2 -> NqoF
    react.surge.util.Protocol R1_11_1 -> LIgl
    react.surge.util.Protocol R1_11 -> qgTt
    react.surge.util.Protocol R1_10_2 -> TYoo
    react.surge.util.Protocol R1_10_1 -> LAWi
    react.surge.util.Protocol R1_10 -> Dtth
    react.surge.util.Protocol R1_9_4 -> Xnmc
    react.surge.util.Protocol R1_9_3 -> TtDE
    react.surge.util.Protocol R1_9_2 -> Pfuk
    react.surge.util.Protocol R1_9_1 -> mJGe
    react.surge.util.Protocol R1_9 -> OdTK
    react.surge.util.Protocol R1_8_9 -> FQIJ
    react.surge.util.Protocol R1_8_8 -> PDsJ
    react.surge.util.Protocol R1_8_7 -> PMcp
    react.surge.util.Protocol R1_8_6 -> aOUf
    react.surge.util.Protocol R1_8_5 -> TIOj
    react.surge.util.Protocol R1_8_4 -> AkkF
    react.surge.util.Protocol R1_8_3 -> YqqJ
    react.surge.util.Protocol R1_8_2 -> DleY
    react.surge.util.Protocol R1_8_1 -> GeMl
    react.surge.util.Protocol R1_8 -> qoeR
    react.surge.util.Protocol R1_7_10 -> NPMo
    react.surge.util.Protocol R1_7_9 -> AAYV
    react.surge.util.Protocol R1_7_8 -> GumE
    react.surge.util.Protocol R1_7_7 -> KhgQ
    react.surge.util.Protocol R1_7_6 -> DRqK
    react.surge.util.Protocol R1_7_5 -> WlJU
    react.surge.util.Protocol R1_7_4 -> apvK
    react.surge.util.Protocol R1_7_3 -> nTxk
    react.surge.util.Protocol R1_7_2 -> iyNy
    react.surge.util.Protocol R1_7_1 -> BoPV
    react.surge.util.Protocol B1_6_4 -> OAoG
    react.surge.util.Protocol B1_6_3 -> qMbA
    react.surge.util.Protocol B1_6_2 -> qpEK
    react.surge.util.Protocol B1_6_1 -> vwDI
    react.surge.util.Protocol B1_5_2 -> WbyI
    react.surge.util.Protocol B1_5_1 -> qNBK
    react.surge.util.Protocol B1_5 -> hlxx
    react.surge.util.Protocol B1_4_7 -> lFbN
    react.surge.util.Protocol B1_4_6 -> UCaE
    react.surge.util.Protocol B1_4_5 -> HxpU
    react.surge.util.Protocol B1_4_4 -> DmDu
    react.surge.util.Protocol B1_4_2 -> tgkd
    react.surge.util.Protocol B1_3_2 -> QbHt
    react.surge.util.Protocol B1_3_1 -> mIdw
    react.surge.util.Protocol B1_2_5 -> LlLG
    react.surge.util.Protocol B1_2_4 -> txlq
    react.surge.util.Protocol EARLIEST -> jkSc
    react.surge.util.Protocol UNKNOWN -> sunB
    int version -> version
    java.lang.String packageVersion -> VXHp
    java.lang.String versionName -> CrTh
    boolean netty -> ipaN
    react.surge.util.Protocol[] ENUM$VALUES -> aiIi
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> jyqc
    118:118:java.lang.String getPackageVersion() -> PdvS
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> ebSM
    142:150:react.surge.util.Protocol getProtocolVersion() -> aLsx
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> KTiB
    160:160:boolean isServerVersion() -> BAxy
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> AGjB
    175:175:boolean isActualVersion() -> bPVw
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> kSBM
    200:200:int getMetaVersion() -> qvVD
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> Mlgo:
    react.surge.util.Protocol from -> hTLX
    react.surge.util.Protocol to -> oibG
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> xGde
    21:21:react.surge.util.Protocol getTo() -> LijP
    26:26:boolean contains(react.surge.util.Protocol) -> WhmD
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> mrUG:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> VoWb
    70:70:int randomNextInt() -> UteM
    80:80:long randomNextLong() -> qvUU
    92:92:boolean isWithin(double) -> rMek
    104:104:boolean isWithin(int) -> dwdX
    116:116:boolean isWithin(long) -> pYCR
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> VThG
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> Pcxd
react.surge.util.RawEvent -> VLoF:
react.surge.util.RayTrace -> sRBv:
    org.bukkit.Location start -> lhhj
    org.bukkit.util.Vector direction -> qpIB
    java.lang.Double maxDistance -> Aklr
    java.lang.Double distanceCovered -> tyQe
    java.lang.Double step -> lXGa
    java.lang.Boolean stop -> Aklm
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> Drsw
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> UcHS
    89:89:org.bukkit.Location getStart() -> NpRG
    94:95:void setStart(org.bukkit.Location) -> LGKf
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> AilO
    114:115:void setMaxDistance(java.lang.Double) -> TEpd
    119:119:java.lang.Double getDistanceCovered() -> AGhj
    124:125:void setDistanceCovered(java.lang.Double) -> UshV
    129:129:java.lang.Double getStep() -> xjHe
    134:135:void setStep(java.lang.Double) -> IVri
react.surge.util.ReflectionUtils -> YokA:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> wfHp
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> wfHp
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> wfHp
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> wfHp
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> wfHp
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> wfHp
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> wfHp
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> wfHp
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> wfHp
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> wfHp
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> wfHp
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> wfHp
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> wfHp
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> wfHp
react.surge.util.ReflectionUtils$DataType -> YokA$wfHp:
    react.surge.util.ReflectionUtils$DataType BYTE -> yMLE
    react.surge.util.ReflectionUtils$DataType SHORT -> hdlV
    react.surge.util.ReflectionUtils$DataType INTEGER -> YPPw
    react.surge.util.ReflectionUtils$DataType LONG -> XgAC
    react.surge.util.ReflectionUtils$DataType CHARACTER -> OKEE
    react.surge.util.ReflectionUtils$DataType FLOAT -> DKDy
    react.surge.util.ReflectionUtils$DataType DOUBLE -> xbxg
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> UwGq
    java.util.Map CLASS_MAP -> NPOn
    java.lang.Class primitive -> etsi
    java.lang.Class reference -> DdVA
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> DSSo
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> rOEJ
    704:704:java.lang.Class getReference() -> aDcT
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> KTiB
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> WhmD
    741:742:java.lang.Class getReference(java.lang.Class) -> TEpd
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> wfHp
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> KTiB
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> KTiB
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> WhmD
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> wfHp
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> YokA$KTiB:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> GSki
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> ragv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> tqAA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> Akmu
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> nnnK
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> RTLR
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> Hpaf
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> svLo
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> WRYv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> FsLx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> dqpv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> DuWe
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> KFiP
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> eRss
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> xIjM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> lhje
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> pJce
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> jsfU
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> KGIw
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> jABe
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> oqsk
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> NUws:
    void refresh() -> refresh
react.surge.util.SQLOperation -> hABc:
    react.surge.util.SQLOperation LOAD -> YjDx
    react.surge.util.SQLOperation SAVE -> CifO
    react.surge.util.SQLOperation[] ENUM$VALUES -> LJNC
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> fTND:
    react.surge.util.ServerState START -> JLWk
    react.surge.util.ServerState ENABLE -> FQLu
    react.surge.util.ServerState DISABLE -> knWx
    react.surge.util.ServerState STOP -> TjvP
    react.surge.util.ServerState RUNNING -> Jmyn
    react.surge.util.ServerState[] ENUM$VALUES -> aGIU
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> BAsg:
    org.bukkit.Location location -> DJDL
    org.bukkit.util.Vector offset -> eBSE
    org.bukkit.util.Vector size -> fohp
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> quXW
    90:94:org.bukkit.Location randomLocation() -> ETVB
    104:104:org.bukkit.Location randomSurface() -> STlf
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> aEDQ
    129:129:org.bukkit.util.Vector getSize() -> LGgi
react.surge.util.SnowLevel -> qTND:
    byte level -> qgWw
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> VUhS
    51:52:void setLevel(byte) -> eaTY
react.surge.util.SuperCaller -> bYCN:
    void run() -> run
react.surge.util.T -> oohn:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> KTiB
    32:35:void stop() -> stop
react.surge.util.TXT -> imvu:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> ogBf
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> wfHp
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> wfHp
    99:99:java.lang.String line(react.surge.util.C,int) -> wfHp
    113:113:java.lang.String underline(react.surge.util.C,int) -> KTiB
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> wfHp
react.surge.util.Tag -> rpbK:
    java.lang.String value() -> value
react.surge.util.Timer -> brUb:
    long tns -> MnqW
    long cns -> PojM
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> qKeA
react.surge.util.VectorMath -> hkTt:
    int[] $SWITCH_TABLE$surge$util$Axis -> MUIR
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> VOXl
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> wfHp
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> wfHp
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> KTiB
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> WhmD
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> wfHp
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> KTiB
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> KTiB
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> WhmD
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> TEpd
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> UshV
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> IVri
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> ogBf
    111:111:double round(double,int) -> UshV
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> wfHp
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> wfHp
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> wfHp
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> TEpd
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> UshV
    268:268:org.bukkit.util.Vector toVector(float,float) -> wfHp
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> wfHp
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> wfHp
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> UAEC
    337:340:double getSpeed(org.bukkit.util.Vector) -> eaTY
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> wfHp
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> cuAO
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> wfHp
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> KTiB
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> WhmD
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> TEpd
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> UcHS
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> oMic
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> ooqh
react.surge.util.VectorMath$1 -> hkTt$1:
    org.bukkit.util.Vector val$vector -> jseU
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> lwKC
    1:1:java.lang.Object onAdapt(java.lang.Object) -> ogBf
react.surge.util.W -> anqb:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> UAEC
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> wfHp
    75:86:org.bukkit.entity.Entity getEntity(int) -> FpOO
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> wfHp
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> wfHp
    143:143:int getChunkX(org.bukkit.block.Block) -> eaTY
    155:155:int getChunkY(org.bukkit.block.Block) -> cuAO
    168:169:void dropXp(org.bukkit.Location,int) -> KTiB
    180:180:int getChunkZ(org.bukkit.block.Block) -> UcHS
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> KTiB
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> wfHp
    232:239:react.glang.GList news(org.bukkit.Location) -> IODS
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> wfHp
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> IODS
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> UYuc
    300:300:org.bukkit.World toSync(org.bukkit.World) -> Keji
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> lwKC
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> UYuc
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> UYuc
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> UtJg
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> wfHp
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> wfHp
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> wfHp
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> wfHp
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> wfHp
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> wfHp
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> wfHp
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> wfHp
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> Keji
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> mFgo
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> Keji
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> WhmD
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> wfHp
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> wfHp
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> wfHp
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> wfHp
react.surge.util.W$1 -> anqb$1:
    java.lang.Double val$doff -> cCrc
    org.bukkit.entity.Entity val$e -> elfC
    org.bukkit.entity.Entity[] val$result -> SFDu
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> UcHS
react.surge.util.Worlds -> ggqY:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> BBQf
    33:33:boolean hasWorld(java.lang.String) -> uEpB
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> twIT:
react.text.ColoredString -> UlOj:
    react.surge.util.C c -> NXcB
    java.lang.String s -> qwyK
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> HoCg
    42:43:void setC(react.surge.util.C) -> KTiB
    47:47:java.lang.String getS() -> RALL
    52:53:void setS(java.lang.String) -> UtKJ
react.text.RTEX -> UlOm:
    react.glang.GList extras -> oPPl
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> JSFh
    44:58:react.json.JSONObject toJSON() -> AFkU
react.text.RTX -> qdmc:
    react.json.JSONArray base -> ItGi
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> IVri
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> KTiB
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> wfHp
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> wfHp
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> KTiB
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> WhmD
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> wfHp
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> KTiB
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> WhmD
    265:265:react.json.JSONArray toJSON() -> PLFy
    276:277:void tellRawTo(org.bukkit.entity.Player) -> OihS
react.text.RawText -> Lieb:
    java.lang.String COLOR_BLACK -> iFNp
    java.lang.String COLOR_DARK_BLUE -> Lknc
    java.lang.String COLOR_DARK_GREEN -> BMQQ
    java.lang.String COLOR_DARK_AQUA -> jkSw
    java.lang.String COLOR_DARK_RED -> SpdD
    java.lang.String COLOR_DARK_PURPLE -> UTgE
    java.lang.String COLOR_GOLD -> HqEU
    java.lang.String COLOR_GRAY -> lhhu
    java.lang.String COLOR_DARK_GRAY -> cxBb
    java.lang.String COLOR_BLUE -> cMPr
    java.lang.String COLOR_GREEN -> xJLl
    java.lang.String COLOR_AQUA -> IbhS
    java.lang.String COLOR_RED -> Vynm
    java.lang.String COLOR_LIGHT_PURPLE -> tyUl
    java.lang.String COLOR_YELLOW -> qUxs
    java.lang.String COLOR_WHITE -> TRFt
    java.lang.String COLOR_NONE -> wXKf
    java.lang.String HEAD_TEXT -> IRHM
    java.lang.String HEAD_COLOR -> daUY
    java.lang.String HEAD_BOLD -> RmcQ
    java.lang.String HEAD_ITALIC -> UKwi
    java.lang.String HEAD_UNDERLINED -> sTOS
    java.lang.String HEAD_STRIKETHROUGH -> GCQE
    java.lang.String HEAD_OBFUSCATED -> mkoS
    java.lang.String HEAD_CLICK_EVENT -> uHsG
    java.lang.String HEAD_HOVER_EVENT -> noSY
    java.lang.String HEAD_ACTION -> SVso
    java.lang.String HEAD_VALUE -> TQfh
    java.lang.String HEAD_EXTRA -> vfIa
    java.lang.String HEAD_ACTION_SHOW_TEXT -> etxy
    java.lang.String HEAD_ACTION_COMMAND -> CPWI
    java.util.ArrayList components -> WIlb
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> mXLF
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> UshV
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> wfHp
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> wfHp
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> wfHp
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> wfHp
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> wfHp
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> wfHp
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> wfHp
    307:313:java.lang.String compile() -> nKMO
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> wfHp

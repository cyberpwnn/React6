react.Config -> AFjc:
    react.glang.GMap worldConfigs -> AFjc
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> HCNu
    java.lang.String A_REDSTONE_DYNAMIC_CLOCK -> flgt
    java.lang.String A_COMMANDOVERRIDE_TPS -> yuAA
    java.lang.String A_REACT_REMOTE_PORT -> flhV
    java.lang.String A_REACT_REMOTE_ENABLED -> TqFL
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> dLoR
    java.lang.String A_POOL_MAXTHREADS -> eGah
    java.lang.String A_POOL_SYNC_NANOS -> XuAe
    java.lang.String A_CULLING_ENABLED -> HTQM
    java.lang.String A_FASTLEAF_ENABLED -> DaVf
    java.lang.String A_FASTLEAF_ONDECAY -> DrWy
    java.lang.String A_FASTLEAF_INSTANT -> qKDo
    java.lang.String A_FASTLEAF_DECAYPERIOD -> DjHY
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> DqxC
    java.lang.String A_ENTITYSTACK_ENABLED -> gojj
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> NLqO
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> YLpO
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> bGJW
    java.lang.String A_GLASS_SHOW_BLOCKS -> PJdo
    java.lang.String A_GLASS_SHOW_PARTICLES -> oxCN
    java.lang.String A_ALLOW_CULL -> qAqx
    java.lang.String A_ALLOW_PURGE -> VUHT
    java.lang.String A_ALLOW_STACKING -> jgqm
    java.lang.String A_CULL_RULES -> gfyR
    java.lang.String A_RAI_TPS_HIGH_TICK -> Qojx
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> pHAg
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> TOBR
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> aCdb
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> yklp
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> CoSv
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> FDwj
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> JjwM
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> PSVf
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> hQKN
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> NLoi
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> eGaR
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> wLWx
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> PmKs
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> mhmh
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> aTjA
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> uNbc
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> AXNi
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> MuEG
    java.lang.String A_RAI_FLUID_TIME_CEIL -> vHtE
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> NffA
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> GaqN
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> STRp
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> GkCX
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> WFkm
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> VwOA
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> dUcD
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> PAwa
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> ivSW
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> prWJ
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> fdYG
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> YoTk
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> pYEO
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> fcxB
    java.lang.String A_USE_WORLD_CONFIGS -> VTho
    java.lang.String A_ENTITY_STACKER_SHOW_PARTICLES -> pjFe
    java.lang.String A_ENTITY_STACKER_SHOW_NAMETAG -> DrYY
    java.lang.String A_LANGUAGE -> mynB
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> JIVr
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> IOEX
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> CoVe
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> DaXY
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> UIUy
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> YnwL
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> sQPI
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> eqyY
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> lKyk
    java.lang.String A_RAI_ENTITY_PROPIGATE -> MlUV
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> FMmm
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> uxwd
    java.lang.String A_ENTITY_STACKER_NAME_TAG_FORMAT -> Cnwt
    double MAX_EXPLOSION_MS -> WXOn
    boolean REDSTONE_DYNAMIC_CLOCK -> SBqm
    boolean COMMANDOVERRIDES_TPS -> QMmY
    int REACT_REMOTE_PORT -> YVFP
    boolean REACT_REMOTE_ENABLED -> kRIa
    int ENTITY_STACK_MAX_COUNT -> QxbP
    int POOL_MAXTHREADS -> HKct
    long POOL_SYNC_NANOS -> MBCJ
    boolean CULLING_ENABLED -> XJRR
    boolean FASTLEAF_ENABLED -> ogEv
    boolean FASTLEAF_ONDECAY -> XAaL
    boolean FASTLEAF_INSTANT -> xWld
    int FASTLEAF_DECAYPERIOD -> DOwM
    boolean COMMANDOVERRIDES_MEMORY -> SBpe
    boolean ENTITYSTACK_ENABLED -> lwMs
    int ENTITYSTACK_MINIMUM_GROUP -> RaqE
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> NffQ
    int ENTITYSTACK_MAXIMUM_HEALTH -> qAux
    boolean GLASS_SHOW_BLOCKS -> cIoR
    boolean GLASS_SHOW_PARTICLES -> Mcby
    react.glang.GList ALLOW_CULL -> fRxO
    react.glang.GList ALLOW_PURGE -> KTlR
    react.glang.GList ALLOW_STACKING -> nlRr
    react.glang.GList CULL_RULES -> kAFo
    double RAI_TPS_HIGH_TICK -> tTRK
    long RAI_REDSTONE_TIME_FLOOR -> TNfA
    long RAI_REDSTONE_TIME_CEIL -> OYIV
    long RAI_REDSTONE_TIME_MUDDING -> mWlh
    double RAI_REDSTONE_TIME_FUNCTION -> UcJy
    double RAI_REDSTONE_TIME_OVERBLEED -> GarP
    int RAI_REDSTONE_TIME_RADIUS -> kAEy
    int RAI_REDSTONE_TIME_PROPIGATION -> eXgG
    long RAI_HOPPER_TIME_FLOOR -> jEsE
    long RAI_HOPPER_TIME_CEIL -> wekG
    long RAI_HOPPER_TIME_MUDDING -> DGhC
    double RAI_HOPPER_TIME_FUNCTION -> ncdb
    double RAI_HOPPER_TIME_OVERBLEED -> myrv
    int RAI_HOPPER_TIME_RADIUS -> kHxr
    int RAI_HOPPER_TIME_PROPIGATION -> SdwT
    int RAI_ENTITY_CHUNK_MULTIPLIER -> LiTd
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> vtNN
    int RAI_ENTITY_CHUNK_RADIUS -> xysD
    long RAI_FLUID_TIME_FLOOR -> SCUR
    long RAI_FLUID_TIME_CEIL -> xrCR
    long RAI_FLUID_TIME_MUDDING -> NEGc
    double RAI_FLUID_TIME_FUNCTION -> cJTD
    double RAI_FLUID_TIME_OVERBLEED -> Yfhr
    int RAI_FLUID_TIME_RADIUS -> oMUe
    int RAI_FLUID_TIME_PROPIGATION -> eXiE
    double SMEAR_TICK_ENTITIES_MAX_TICK -> RPpy
    double SMEAR_TICK_TILES_MAX_TICK -> JQjh
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> OXib
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> vskl
    double SMEAR_TICK_ENTITIES_AMOUNT -> MJSc
    double SMEAR_TICK_TILES_AMOUNT -> ePXQ
    boolean SMEAR_TICK_ENTITIES_ENABLE -> KfPb
    boolean SMEAR_TICK_TILES_ENABLE -> EJkw
    boolean HOPPER_OVERTICK_ENABLE -> Ahsy
    boolean USE_WORLD_CONFIGS -> eXiR
    boolean ENTITY_STACKER_SHOW_PARTICLES -> TVwi
    boolean ENTITY_STACKER_SHOW_NAME_TAG -> Tpja
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> CEGo
    long RAI_CHUNK_TIME_CEIL -> fBYv
    long RAI_CHUNK_TIME_MUDDING -> cJRc
    double RAI_CHUNK_TIME_FUNCTION -> JsnY
    double RAI_CHUNK_TIME_OVERBLEED -> QyFd
    int RAI_CHUNK_TIME_RADIUS -> LPEC
    int RAI_CHUNK_TIME_PROPIGATION -> SLHS
    boolean RAI_CHUNK_TIME_PROPIGATE -> OHKx
    boolean RAI_FLUID_TIME_PROPIGATE -> NxMi
    boolean RAI_ENTITY_PROPIGATE -> MdHs
    boolean RAI_HOPPER_TIME_PROPIGATE -> VoCy
    boolean RAI_REDSTONE_TIME_PROPIGATE -> tLGK
    java.lang.String ENTITY_STACKER_NAME_TAG_FORMAT -> uFXf
    boolean hrld -> oEGp
    boolean rns -> VDOf
    boolean rrl -> rpTP
    39:667:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    672:689:void doTrack(org.bukkit.plugin.Plugin) -> AFjc
    694:716:void onRead(org.bukkit.plugin.Plugin) -> HCNu
    720:750:void read(java.io.File,boolean) -> AFjc
    754:771:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> AFjc
    776:784:void closeWorldConfig(org.bukkit.World) -> HCNu
    789:902:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> AFjc
    907:944:react.surge.cluster.DataCluster defaultConfig(boolean) -> AFjc
    949:1028:react.glang.GList getDefaultEntitiesForStacking() -> AFjc
    1033:1052:react.glang.GList getDefaultEntitiesForCulling() -> HCNu
    1057:1094:react.glang.GList getDefaultEntitiesForRemoval() -> flgt
    1099:1140:react.glang.GList getDefaultCullRules() -> yuAA
react.Config$1 -> AFjc$1:
    java.io.File val$fConfig -> CUjG
    java.io.File val$fConfigExperimental -> jplG
    org.bukkit.plugin.Plugin val$main -> CgMY
    1:675:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    680:684:void run() -> run
react.Config$2 -> AFjc$2:
    react.api.WorldConfig val$wc -> INju
    org.bukkit.World val$w -> fKOD
    1:761:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    766:767:void run() -> run
react.Gate -> HCNu:
    react.glang.GMap defaultSettings -> Qxeq
    react.glang.GSet refresh -> rosB
    react.glang.GSet destroy -> lToO
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> srvD
    45:47:void <clinit>() -> <clinit>
    43:43:void <init>() -> <init>
    51:141:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> AFjc
    147:178:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> AFjc
    183:183:int getChunkCountForView() -> flhV
    188:188:int getMaxChunksForView() -> TqFL
    193:193:boolean hasFawe() -> dLoR
    198:219:void tickEntityNextTickListTick(org.bukkit.World) -> flgt
    223:227:void resetEntityMaxTick(org.bukkit.World) -> yuAA
    231:231:int getEntityTickMax(org.bukkit.World) -> flhV
    236:236:int getTileTickMax(org.bukkit.World) -> TqFL
    241:259:void tweakEntityTickMax(org.bukkit.World,int) -> AFjc
    263:280:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> AFjc
    285:289:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> AFjc
    293:305:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> AFjc
    310:314:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> HCNu
    318:336:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> AFjc
    340:344:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> dLoR
    349:352:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> AFjc
    357:360:java.lang.String msg(react.api.ReactPlayer,react.notification.Notification) -> AFjc
    365:368:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> HCNu
    373:373:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> flgt
    378:378:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> yuAA
    383:383:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> flhV
    388:388:boolean isBadForUnloading() -> eGah
    393:393:boolean canUnload(org.bukkit.World,int,int) -> AFjc
    400:416:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    422:433:void unloadChunk(org.bukkit.World,int,int) -> HCNu
    437:453:void removeEntity(org.bukkit.entity.Entity) -> AFjc
    457:473:void purgeEntity(org.bukkit.entity.Entity) -> HCNu
    477:498:void cullEntity(org.bukkit.entity.Entity) -> flgt
    503:520:void updateBlock(org.bukkit.block.Block) -> AFjc
    524:528:java.lang.String header(java.lang.String,react.surge.util.C) -> AFjc
    533:533:java.lang.String header(react.surge.util.C) -> AFjc
    539:543:void updateFluid(org.bukkit.block.Block) -> HCNu
    547:548:void refresh(org.bukkit.Chunk) -> HCNu
    553:572:void refreshChunks() -> XuAe
    576:577:void sendBlockChange(org.bukkit.Location) -> AFjc
    43:43:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> HTQM
react.Gate$1 -> HCNu$1:
    react.api.SelectorPosition val$sel -> bGRc
    react.glang.Callback val$prog -> NEJK
    react.glang.Callback val$cb -> Xkwy
    1:51:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    56:139:void run() -> run
react.Gate$1$1 -> HCNu$1$1:
    react.Gate$1 this$1 -> jFYI
    java.lang.Object val$o -> MkyU
    java.lang.reflect.Constructor val$vectorConstruct -> YUjE
    java.lang.reflect.Constructor val$cuboidConstruct -> xWpg
    java.lang.reflect.Method val$faweFixMethod -> TplU
    java.lang.Integer[] val$total -> NEHW
    java.lang.Integer[] val$sof -> iTVb
    react.glang.Callback val$prog -> NEJK
    java.lang.Integer val$tot -> HdyA
    1:83:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    90:108:void run() -> run
react.Gate$1$2 -> HCNu$1$2:
    react.Gate$1 this$1 -> jFYI
    react.glang.Callback val$prog -> NEJK
    react.glang.Callback val$cb -> Xkwy
    java.lang.Integer[] val$total -> NEHW
    1:112:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    119:127:void run() -> run
react.Info -> flgt:
    java.lang.String CORE_REACT_DOT -> GavC
    java.lang.String CORE_NAME -> DXmA
    java.lang.String CORE_CACHE -> QyFJ
    java.lang.String WORLD_CONFIGS -> BIwD
    java.lang.String CORE_DOTYML -> NUiQ
    java.lang.String COMMAND_REACT -> TFXq
    java.lang.String COMMAND_RAI -> AOdi
    java.lang.String COMMAND_ACT_DESCRIPTION -> jNiC
    java.lang.String COMMAND_ACT -> Cfjw
    java.lang.String COMMAND_ACT_ALIAS_1 -> oUfc
    java.lang.String COMMAND_ACT_ALIAS_2 -> brEt
    java.lang.String COMMAND_ACT_USAGE -> CEJV
    java.lang.String COMMAND_HELP_DESCRIPTION -> afQj
    java.lang.String COMMAND_HELP -> yAbE
    java.lang.String COMMAND_HELP_ALIAS_1 -> SSvi
    java.lang.String COMMAND_HELP_ALIAS_2 -> xXQR
    java.lang.String COMMAND_HELP_USAGE -> bXSW
    java.lang.String COMMAND_STATUS_DESCRIPTION -> ckwC
    java.lang.String COMMAND_STATUS -> mPBM
    java.lang.String COMMAND_STATUS_ALIAS_1 -> HBvX
    java.lang.String COMMAND_STATUS_ALIAS_2 -> mPER
    java.lang.String COMMAND_STATUS_USAGE -> cRhE
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> vspg
    java.lang.String COMMAND_CPUSCORE -> pHME
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> wDOs
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> VTqv
    java.lang.String COMMAND_CPUSCORE_USAGE -> ogMM
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> wMBG
    java.lang.String COMMAND_RELOAD -> UAOM
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> CUkk
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> HByM
    java.lang.String COMMAND_RELOAD_USAGE -> OrbV
    java.lang.String COMMAND_CTP_DESCRIPTION -> PSau
    java.lang.String COMMAND_CTP -> cdJe
    java.lang.String COMMAND_CTP_ALIAS_1 -> TONF
    java.lang.String COMMAND_CTP_ALIAS_2 -> cRhQ
    java.lang.String COMMAND_CTP_USAGE -> Qovh
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> pjNv
    java.lang.String COMMAND_MONITOR -> qKOb
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> ctkN
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> AFsq
    java.lang.String COMMAND_MONITOR_USAGE -> HnLl
    java.lang.String COMMAND_ENV_DESCRIPTION -> vbmq
    java.lang.String COMMAND_ENV -> oEIG
    java.lang.String COMMAND_ENV_ALIAS_1 -> dEHj
    java.lang.String COMMAND_ENV_ALIAS_2 -> kcPU
    java.lang.String COMMAND_ENV_USAGE -> gVbS
    java.lang.String COMMAND_VERSION_DESCRIPTION -> WrHe
    java.lang.String COMMAND_VERSION -> nthc
    java.lang.String COMMAND_VERSION_ALIAS_1 -> YEJY
    java.lang.String COMMAND_VERSION_ALIAS_2 -> oUhm
    java.lang.String COMMAND_VERSION_USAGE -> UbpT
    java.lang.String COMMAND_MAP_DESCRIPTION -> OGlp
    java.lang.String COMMAND_MAP -> EvFP
    java.lang.String COMMAND_MAP_ALIAS_1 -> BIwq
    java.lang.String COMMAND_MAP_ALIAS_2 -> wDNi
    java.lang.String COMMAND_MAP_USAGE -> sIHG
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> mFuO
    java.lang.String COMMAND_TOPCHUNK -> hjiy
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> Drcx
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> VCre
    java.lang.String COMMAND_TOPCHUNK_USAGE -> nJYV
    java.lang.String COMMAND_GLASS_DESCRIPTION -> FFGQ
    java.lang.String COMMAND_GLASS -> kAOs
    java.lang.String COMMAND_GLASS_ALIAS_1 -> PugL
    java.lang.String COMMAND_GLASS_ALIAS_2 -> gghG
    java.lang.String COMMAND_GLASS_USAGE -> tKiW
    java.lang.String COMMAND_SUB_DESCRIPTION -> gWFX
    java.lang.String COMMAND_SUB -> rEcV
    java.lang.String COMMAND_SUB_ALIAS_1 -> eGni
    java.lang.String COMMAND_SUB_ALIAS_2 -> UtVS
    java.lang.String COMMAND_SUB_USAGE -> Drdk
    java.lang.String COMMAND_USUB_DESCRIPTION -> queD
    java.lang.String COMMAND_USUB -> ryHc
    java.lang.String COMMAND_USUB_ALIAS_1 -> BBJP
    java.lang.String COMMAND_USUB_ALIAS_2 -> bhyF
    java.lang.String COMMAND_USUB_USAGE -> Vvwl
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> cRhe
    java.lang.String COMMAND_CBLAME -> Wyya
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> tCXe
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> QyJQ
    java.lang.String COMMAND_CBLAME_USAGE -> PluC
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> AOhm
    java.lang.String COMMAND_ACTIONLOG -> OGoA
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> OXpQ
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> lvuh
    java.lang.String COMMAND_ACTIONLOG_USAGE -> Fggv
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> APJJ
    java.lang.String COMMAND_CAPABILITIES -> yuKX
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> eaaA
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> XSJk
    java.lang.String COMMAND_CAPABILITIES_USAGE -> xaGL
    java.lang.String MSG_PERMISSION -> OsCq
    java.lang.String MSG_MONITORING_STARTED -> MRiw
    java.lang.String MSG_MONITORING_STOPPED -> XdKr
    java.lang.String MSG_ACTIONLOGGING_STARTED -> PmUt
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> XIwx
    java.lang.String MSG_GLASS_STARTED -> iCYL
    java.lang.String MSG_GLASS_STOPPED -> DGrP
    org.bukkit.Color COLOR_HOPPER -> lwYa
    org.bukkit.Color COLOR_BLOCK_UPDATE -> IORO
    org.bukkit.Color COLOR_BLOCK_FROMTO -> xOgc
    org.bukkit.Color COLOR_BLOCK_BURN -> VUXG
    org.bukkit.Color COLOR_BLOCK_DECAY -> HwBx
    org.bukkit.Color COLOR_BLOCK_FORM -> ggic
    java.lang.String NAME_TICK -> LaLf
    java.lang.String NAME_MEMORY -> xOhL
    java.lang.String NAME_CHUNKS -> awYf
    java.lang.String NAME_ENTITIES -> ogPs
    java.lang.String STATE_MONITORING_TAB -> pirt
    java.lang.String STATE_MONITORING_ENABLED -> sPyA
    java.lang.String STATE_MONITORING_HIGH -> MdPM
    java.lang.String STATE_CHANNELS -> jiBf
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> Diue
    java.lang.String STATE_MAPPING_ENABLED -> FNYj
    java.lang.String STATE_SOUND_PLAYS -> kstw
    java.lang.String STATE_MONITORING_POSTED -> gWID
    java.lang.String STATE_MONITORING_LASTTAB -> tLLb
    java.lang.String STATE_GLASSES_ENABLED -> qCDA
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> kkcs
    java.lang.String STATE_PLAYER_HOTBAR -> NUoN
    java.lang.String STATE_PLAYER_SHIFT -> sjkJ
    java.lang.String STATE_PLAYER_SCROLL -> pbBa
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> pHOi
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> wCqv
    java.lang.String PERM_ACCESS -> fugR
    java.lang.String PERM_TELEPORT -> vkdI
    java.lang.String PERM_MONITOR -> fJrP
    java.lang.String PERM_MONITOR_TITLE -> ETGF
    java.lang.String PERM_MONITOR_ACTIONLOG -> Oisd
    java.lang.String PERM_MONITOR_MAP -> VTvU
    java.lang.String PERM_MONITOR_ENVIRONMENT -> fltx
    java.lang.String PERM_MONITOR_GLASSES -> EBda
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> fTEI
    java.lang.String PERM_ACT -> sQYF
    java.lang.String PERM_RAI -> QNXS
    java.lang.String PERM_RAI_CONTROL -> LrNB
    java.lang.String PERM_RAI_ACCESS -> lMEQ
    java.lang.String PERM_RAI_MONITOR -> CftS
    java.lang.String PERM_RELOAD -> HnTO
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> aTwl
    java.lang.String SAMPLER_REDSTONE_TICK -> vARx
    java.lang.String SAMPLER_ENTITY_TIME -> gglC
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> KTxy
    java.lang.String SAMPLER_TILE_TIME_LOCK -> DbHS
    java.lang.String SAMPLER_TILE_TIME -> ogSY
    java.lang.String SAMPLER_TILE_DROPTICK -> PukP
    java.lang.String SAMPLER_ENTITY_DROPTICK -> eGqp
    java.lang.String SAMPLER_REDSTONE_SECOND -> qvKA
    java.lang.String SAMPLER_REDSTONE_TIME -> YDpL
    java.lang.String SAMPLER_PHYSICS_TIME -> DYVo
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> jiDk
    java.lang.String SAMPLER_HOPPER_TICK -> NoeV
    java.lang.String SAMPLER_HOPPER_SECOND -> NgTw
    java.lang.String SAMPLER_HOPPER_TIME -> uqTg
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> Diwm
    java.lang.String SAMPLER_FLUID_TICK -> ejWF
    java.lang.String SAMPLER_FLUID_SECOND -> jhdR
    java.lang.String SAMPLER_FLUID_TIME -> XSOk
    java.lang.String SAMPLER_TPS -> BmBX
    java.lang.String SAMPLER_TICK -> wnhy
    java.lang.String SAMPLER_TIU -> vkeg
    java.lang.String SAMPLER_MEM -> VCur
    java.lang.String SAMPLER_FREEMEM -> KTxS
    java.lang.String SAMPLER_MAXMEM -> vcTw
    java.lang.String SAMPLER_ALLOCMEM -> ivao
    java.lang.String SAMPLER_MAHS -> OHTI
    java.lang.String SAMPLER_CHK -> vASE
    java.lang.String SAMPLER_ATASK -> ncnX
    java.lang.String SAMPLER_STASK -> Yocf
    java.lang.String SAMPLER_CHK_TIME -> ksvO
    java.lang.String SAMPLER_EXPLOSION_TIME -> Qgkf
    java.lang.String SAMPLER_CHKS -> KCwW
    java.lang.String SAMPLER_ENT -> OjWU
    java.lang.String SAMPLER_ENTLIV -> Elyn
    java.lang.String SAMPLER_ENTDROP -> GtCy
    java.lang.String SAMPLER_ENTTILE -> qBfe
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> XcrT
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> TGEU
    java.lang.String ACTION_CULL_ENTITIES_NAME -> uheb
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> iTal
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> RtCa
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> xOkr
    java.lang.String ACTION_UPDATE_FLUID_NAME -> wDXh
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> yAlv
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> xaMw
    java.lang.String ACTION_LOCK_FLUID_STATUS -> NNDl
    java.lang.String ACTION_LOCK_FLUID_NAME -> woMN
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> bOlb
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> BldF
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> ssaA
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> PSiy
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> eHVI
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> wnka
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> Smtt
    java.lang.String ACTION_LOCK_HOPPER_NAME -> OsLC
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> KoPI
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> lCvq
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> DGtr
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> BleX
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> Yfsr
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> pQEW
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> TOUG
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> GHnW
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> QVkp
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> qukB
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> jGCe
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> HCaT
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> YgUL
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> NxWa
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> hILl
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> rFIU
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> BKCB
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> Gsbp
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> XRof
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> Nftx
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> VTyl
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> bPLt
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> Aqqe
    java.lang.String ACTION_FIX_LIGHTING_NAME -> pGrc
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> jNqy
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> ndPh
    java.lang.String ACTION_COLLECT_GARBAGE -> HCbE
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> DakN
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> BRtB
    8:267:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> yuAA:
    java.lang.String BUNDLE_NAME -> fvNo
    java.util.ResourceBundle RESOURCE_BUNDLE -> axAV
    java.util.ResourceBundle PRIMARY_BUNDLE -> tnUo
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> flhV:
    react.React instance -> ryRA
    react.controller.SampleController sampleController -> eYXp
    react.controller.PlayerController playerController -> ECLR
    react.controller.MonitorController monitorController -> uiIG
    react.controller.CommandController commandController -> PvOk
    react.controller.ActionController actionController -> WqsE
    react.controller.FastDecayController fastDecayController -> pbJT
    react.controller.EntityStackController entityStackController -> uhgs
    react.controller.GlassController glassController -> qTKf
    react.controller.EntityCullController entityCullController -> pbIv
    react.controller.SpikeController spikeController -> lxAT
    react.controller.SecurityController securityController -> GcEU
    react.controller.RedstoneController redstoneController -> jiIJ
    react.controller.HopperController hopperController -> ArSm
    react.controller.PhysicsController physicsController -> oUst
    react.controller.TickTimeController tickTimeController -> dEUL
    react.controller.RAIController raiController -> XAqg
    react.controller.FluidController fluidController -> hkRv
    react.controller.ChunkController chunkController -> sYok
    react.controller.GraphController graphController -> YUvK
    react.controller.ChronophyFluidController fluidChronophyController -> Sefs
    react.controller.EventController eventController -> bOoR
    react.controller.SmearTickController smearTickController -> OsMa
    react.controller.FeatureController featureController -> uXEx
    react.controller.HopperOvertickController hopperPlungeController -> QWON
    react.controller.LanguageController languageController -> ssas
    react.controller.RemoteController remoteController -> jOVH
    react.controller.ExplosiveController explosiveController -> jhhA
    react.controller.WorldController worldController -> Cwxj
    react.controller.MessageController messageController -> mqqA
    43:43:void <init>() -> <init>
    138:146:void enable() -> enable
    152:152:void disable() -> disable
react.React$1 -> flhV$1:
    react.React this$0 -> sHmu
    1:138:void <init>(react.React) -> <init>
    143:144:void run() -> run
react.action.ActionCollectGarbage -> TqFL:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
react.action.ActionCollectGarbage$1 -> TqFL$1:
    react.action.ActionCollectGarbage this$0 -> TyjI
    react.action.source.IActionSource val$source -> ylcF
    1:29:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> AFjc
react.action.ActionCollectGarbage$1$1 -> TqFL$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> yRpM
    long val$mbnex -> jyhv
    long val$mbmem -> QqBX
    react.action.source.IActionSource val$source -> ylcF
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.action.source.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> dLoR:
    long ms -> MBRR
    int lcd -> LYAe
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
    27:27:void access$0(react.action.ActionCullEntities,long) -> AFjc
    28:28:int access$1(react.action.ActionCullEntities) -> AFjc
    27:27:long access$2(react.action.ActionCullEntities) -> HCNu
react.action.ActionCullEntities$1 -> dLoR$1:
    react.action.ActionCullEntities this$0 -> INwC
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> dLoR$2:
    react.action.ActionCullEntities this$0 -> INwC
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> dLoR$3:
    react.action.ActionCullEntities this$0 -> INwC
    react.glang.FinalInteger val$completed -> UJJH
    react.glang.FinalInteger val$total -> Iyjp
    react.glang.FinalInteger val$totalCulled -> tnSy
    react.glang.FinalInteger val$totalChunked -> jiGo
    react.action.source.IActionSource val$source -> ylcF
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> dLoR$4:
    react.action.ActionCullEntities this$0 -> INwC
    react.action.source.IActionSource val$source -> ylcF
    react.glang.FinalInteger val$totalCulled -> tnSy
    react.glang.FinalInteger val$totalChunked -> jiGo
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> eGah:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
react.action.ActionFixLighting$1 -> eGah$1:
    react.action.ActionFixLighting this$0 -> bOnV
    1:28:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> eGah$2:
    react.action.ActionFixLighting this$0 -> bOnV
    react.action.source.IActionSource val$source -> ylcF
    int val$ch -> ydRH
    1:77:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> AFjc
    1:1:void run(java.lang.Object) -> AFjc
react.action.ActionFixLighting$3 -> eGah$3:
    react.action.ActionFixLighting this$0 -> bOnV
    1:88:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> AFjc
    1:1:void run(java.lang.Object) -> AFjc
react.action.ActionLockFluid -> XuAe:
    int lcd -> LYAe
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
react.action.ActionLockFluid$1 -> XuAe$1:
    react.action.ActionLockFluid this$0 -> hRAC
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> XuAe$2:
    react.action.ActionLockFluid this$0 -> hRAC
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> HTQM:
    int lcd -> LYAe
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
react.action.ActionLockHopper$1 -> HTQM$1:
    react.action.ActionLockHopper this$0 -> ndSL
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> HTQM$2:
    react.action.ActionLockHopper this$0 -> ndSL
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> DaVf:
    int lcd -> LYAe
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
react.action.ActionLockRedstone$1 -> DaVf$1:
    react.action.ActionLockRedstone this$0 -> kIgU
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> DaVf$2:
    react.action.ActionLockRedstone this$0 -> kIgU
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> DrWy:
    long ms -> MBRR
    int lcd -> LYAe
    boolean fail -> LrTG
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> HCNu
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> AFjc
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> AFjc
    26:26:int access$2(react.action.ActionPurgeChunks) -> HCNu
    25:25:long access$3(react.action.ActionPurgeChunks) -> flgt
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> AFjc
react.action.ActionPurgeChunks$1 -> DrWy$1:
    react.action.ActionPurgeChunks this$0 -> CgYT
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> DrWy$2:
    react.action.ActionPurgeChunks this$0 -> CgYT
    int val$dk -> uGGk
    java.lang.Object val$j -> wnpP
    react.action.source.IActionSource val$source -> ylcF
    react.api.ISelector[] val$selectors -> IXKb
    react.glang.FinalInteger val$acompleted -> lwbM
    react.glang.FinalInteger val$completed -> UJJH
    react.glang.FinalInteger val$total -> Iyjp
    react.glang.FinalInteger val$totalCulled -> tnSy
    react.glang.FinalInteger val$totalChunked -> jiGo
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.action.source.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> AFjc
react.action.ActionPurgeChunks$2$1 -> DrWy$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> JlPT
    react.glang.FinalInteger val$acompleted -> lwbM
    react.glang.FinalInteger val$completed -> UJJH
    react.glang.FinalInteger val$total -> Iyjp
    react.glang.FinalInteger val$totalCulled -> tnSy
    react.glang.FinalInteger val$totalChunked -> jiGo
    react.action.source.IActionSource val$source -> ylcF
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> DrWy$3:
    react.action.ActionPurgeChunks this$0 -> CgYT
    react.action.source.IActionSource val$source -> ylcF
    react.glang.FinalInteger val$acompleted -> lwbM
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> DrWy$4:
    react.action.ActionPurgeChunks this$0 -> CgYT
    org.bukkit.Chunk val$chunk -> MtxT
    java.lang.Runnable val$cb -> EnCD
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> qKDo:
    long ms -> MBRR
    int lcd -> LYAe
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> HCNu
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> AFjc
    30:30:int access$1(react.action.ActionPurgeEntities) -> AFjc
    29:29:long access$2(react.action.ActionPurgeEntities) -> HCNu
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> AFjc
react.action.ActionPurgeEntities$1 -> qKDo$1:
    react.action.ActionPurgeEntities this$0 -> opJc
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> qKDo$2:
    react.action.ActionPurgeEntities this$0 -> opJc
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> qKDo$3:
    react.action.ActionPurgeEntities this$0 -> opJc
    react.glang.FinalInteger val$completed -> UJJH
    react.glang.FinalInteger val$total -> Iyjp
    react.glang.FinalInteger val$totalCulled -> tnSy
    react.glang.FinalInteger val$totalChunked -> jiGo
    react.action.source.IActionSource val$source -> ylcF
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> qKDo$4:
    react.action.ActionPurgeEntities this$0 -> opJc
    react.action.source.IActionSource val$source -> ylcF
    react.glang.FinalInteger val$totalCulled -> tnSy
    react.glang.FinalInteger val$totalChunked -> jiGo
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> qKDo$5:
    react.action.ActionPurgeEntities this$0 -> opJc
    org.bukkit.entity.Entity val$i -> QFQM
    react.glang.FinalInteger val$cu -> baSo
    int val$k -> JlPd
    org.bukkit.Chunk val$chunk -> MtxT
    java.lang.Runnable val$cb -> EnCD
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> DjHY:
    int lcd -> LYAe
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
react.action.ActionUnlockFluid$1 -> DjHY$1:
    react.action.ActionUnlockFluid this$0 -> XuYO
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> DqxC:
    int lcd -> LYAe
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
react.action.ActionUnlockHopper$1 -> DqxC$1:
    react.action.ActionUnlockHopper this$0 -> jXJG
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> gojj:
    int lcd -> LYAe
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
react.action.ActionUnlockRedstone$1 -> gojj$1:
    react.action.ActionUnlockRedstone this$0 -> RQeC
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> DaVf
    1:1:java.lang.Object get() -> get
react.action.source.AccessActionSource -> NLqO:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> AFjc
    26:33:void sendResponseSuccess(java.lang.String) -> HCNu
    38:45:void sendResponseError(java.lang.String) -> flgt
    50:57:void sendResponseActing(java.lang.String) -> yuAA
react.action.source.ActionHandle -> YLpO:
    react.action.source.ActionHandle AUTOMATIC -> MKGA
    react.action.source.ActionHandle MANUAL -> oNEx
    react.action.source.ActionHandle MUTEX -> UlOA
    react.action.source.ActionHandle[] ENUM$VALUES -> vIiF
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.action.source.ActionHandle[] values() -> values
    1:1:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
react.action.source.ConsoleActionSource -> bGJW:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> AFjc
    18:19:void sendResponseSuccess(java.lang.String) -> HCNu
    24:25:void sendResponseError(java.lang.String) -> flgt
    30:31:void sendResponseActing(java.lang.String) -> yuAA
react.action.source.EmptyActionSource -> PJdo:
    3:3:void <init>() -> <init>
    9:9:void sendResponse(java.lang.String) -> AFjc
    15:15:void sendResponseSuccess(java.lang.String) -> HCNu
    21:21:void sendResponseError(java.lang.String) -> flgt
    27:27:void sendResponseActing(java.lang.String) -> yuAA
react.action.source.IActionSource -> oxCN:
    void sendResponse(java.lang.String) -> AFjc
    void sendResponseSuccess(java.lang.String) -> HCNu
    void sendResponseError(java.lang.String) -> flgt
    void sendResponseActing(java.lang.String) -> yuAA
react.action.source.PlayerActionSource -> qAqx:
    org.bukkit.entity.Player p -> sHpX
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> AFjc
    30:31:void sendResponseSuccess(java.lang.String) -> HCNu
    36:37:void sendResponseError(java.lang.String) -> flgt
    42:43:void sendResponseActing(java.lang.String) -> yuAA
react.action.source.RAIActionSource -> VUHT:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> AFjc
    16:17:void sendResponseSuccess(java.lang.String) -> HCNu
    22:23:void sendResponseError(java.lang.String) -> flgt
    28:29:void sendResponseActing(java.lang.String) -> yuAA
react.api.Action -> jgqm:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> vklQ
    java.lang.String[] nodes -> WXbY
    react.action.source.ActionHandle handle -> oNEi
    react.api.ActionState state -> HmyG
    react.api.ActionTargetType target -> QgrP
    react.api.ActionType type -> KgAu
    react.action.source.IActionSource currentSource -> LYCq
    double progress -> XuWk
    react.glang.GMap defaultSelectors -> Sego
    28:29:void <init>(react.api.ActionType) -> <init>
    31:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> AFjc
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> AFjc
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> DrWy
    94:94:react.api.ActionState getState() -> qKDo
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> flhV
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> DjHY
    130:130:react.api.ActionType getType() -> DqxC
    136:136:react.glang.GMap getDefaultSelectors() -> gojj
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> HCNu
    189:190:void completeAction() -> NLqO
    195:195:react.action.source.IActionSource getCurrentSource() -> YLpO
    201:201:java.lang.String[] getNodes() -> bGJW
    207:208:void setNodes(java.lang.String[]) -> AFjc
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
react.api.ActionAlreadyRunningException -> gfyR:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> Qojx:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> pHAg:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> TOBR:
    react.api.ActionState IDLE -> sIPb
    react.api.ActionState RUNNING -> inWa
    react.api.ActionState[] ENUM$VALUES -> Qgqs
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> aCdb:
    react.api.ActionTargetType POSITIONAL -> KEBN
    react.api.ActionTargetType SYSTEM -> QWSx
    react.api.ActionTargetType[] ENUM$VALUES -> wfak
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> yklp:
    react.api.ActionType FIX_LIGHTING -> IWlj
    react.api.ActionType UNLOCK_FLUID -> cuYh
    react.api.ActionType LOCK_FLUID -> ObPR
    react.api.ActionType UNLOCK_HOPPER -> uymL
    react.api.ActionType LOCK_HOPPER -> MRxD
    react.api.ActionType UNLOCK_REDSTONE -> nAtF
    react.api.ActionType LOCK_REDSTONE -> cBUo
    react.api.ActionType CULL_ENTITIES -> Thmt
    react.api.ActionType COLLECT_GARBAGE -> yRta
    react.api.ActionType PURGE_ENTITIES -> uGJA
    react.api.ActionType PURGE_CHUNKS -> RIUD
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> oNEi
    react.api.ActionTargetType target -> QgrP
    react.api.ActionType[] ENUM$VALUES -> iUGl
    6:18:void <clinit>() -> <clinit>
    25:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> PJdo
    50:50:react.api.ActionTargetType getTarget() -> DjHY
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> CoSv:
    react.api.ActivationRangeType ANIMALS -> xGaF
    react.api.ActivationRangeType MONSTERS -> bquO
    react.api.ActivationRangeType MISC -> cJdf
    react.api.ActivationRangeType[] ENUM$VALUES -> AHEu
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> FDwj:
    int value() -> value
react.api.Async -> JjwM:
react.api.CPUBenchmark -> PSVf:
    org.bukkit.command.CommandSender sender -> sender
    int score -> hkWM
    java.lang.Runnable onFinish -> jFhf
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> oxCN
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> AFjc
    13:13:int access$1(react.api.CPUBenchmark) -> HCNu
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> flgt
react.api.CPUBenchmark$1 -> PSVf$1:
    react.api.CPUBenchmark this$0 -> sYtG
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> PSVf$2:
    react.api.CPUBenchmark this$0 -> sYtG
    1:77:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> hQKN:
    react.api.CPUResult ULTRA_SLOW -> bOqe
    react.api.CPUResult VERY_SLOW -> FyVq
    react.api.CPUResult SLOW -> tUGL
    react.api.CPUResult AVERAGE -> vIix
    react.api.CPUResult GOOD -> RHtQ
    react.api.CPUResult FAST -> ggrX
    react.api.CPUResult VERY_FAST -> TFjI
    react.api.CPUResult ULTRA_FAST -> KUbL
    java.lang.String m -> LqwN
    react.api.CPUResult[] ENUM$VALUES -> rpbp
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> AFjc
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> NLoi:
    react.glang.GMap cache -> xPQf
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> HCNu
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> flgt
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> qAqx
    54:54:boolean has(java.lang.Object) -> yuAA
react.api.Capability -> eGaR:
    react.api.Capability DUAL_WEILD -> rFPD
    react.api.Capability SCOREBOARD -> VVAv
    react.api.Capability SCOREBOARD_ADVANCED -> hREH
    react.api.Capability HOPPER -> rEoF
    react.api.Capability ENTITY_ATTRIBUTES -> NpMf
    react.api.Capability ENTITY_AI -> XliL
    react.api.Capability ACTION_BAR -> IGMq
    react.api.Capability ENTITY_NAMES -> gEsB
    react.api.Capability TITLE_BAR -> sAEn
    react.api.Capability CHUNK_RELIGHTING -> lMRf
    react.api.Capability MONITOR_SUBMISSIVENESS -> Ihou
    react.api.Capability ACCELERATED_PING -> DsSk
    react.api.Capability ENTITY_THROTTLING -> CyBT
    react.api.Capability TILE_THROTTLING -> AHGT
    react.api.Capability PASSENGERS -> xrWp
    react.glang.GList capabilities -> TyqP
    react.surge.util.Protocol version -> nAwC
    react.api.Flavor flavor -> eaoV
    java.lang.String plugin -> pPmh
    java.lang.String name -> name
    14:48:void <clinit>() -> <clinit>
    55:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> VUHT
    100:100:boolean isFlavorCapable() -> jgqm
    105:105:boolean isVersionCapable() -> gfyR
    110:110:boolean isCapable() -> Qojx
    115:115:react.surge.util.Protocol getVersion() -> pHAg
    120:120:react.api.Flavor getFlavor() -> TOBR
    125:125:java.lang.String getPlugin() -> aCdb
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> AFjc
    153:167:void sendNotCapable(react.action.source.IActionSource) -> AFjc
react.api.CapabilityBasis -> wLWx:
    react.api.CapabilityBasis VERSION -> lDaL
    react.api.CapabilityBasis FLAVOR -> RAGm
    react.api.CapabilityBasis PLUGIN -> xrWh
    react.api.CapabilityBasis[] ENUM$VALUES -> Drrx
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.CapabilityBasis[] values() -> values
    1:1:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> PmKs:
    react.api.ChunkIssue ENTITY -> vdBC
    react.api.ChunkIssue HOPPER -> JSBt
    react.api.ChunkIssue TNT -> sjwo
    react.api.ChunkIssue REDSTONE -> KUeS
    react.api.ChunkIssue FLUID -> XmMM
    react.api.ChunkIssue PHYSICS -> IhqP
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> xYFO
    react.api.ChunkIssue[] ENUM$VALUES -> xqwC
    3:10:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    14:32:double getMS() -> yklp
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> CoSv
react.api.Clip -> mhmh:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> aTjA:
    org.bukkit.command.CommandSender sender -> sender
    12:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> AFjc
    31:32:void sendResponseSuccess(java.lang.String) -> HCNu
    37:38:void sendResponseError(java.lang.String) -> flgt
    43:44:void sendResponseActing(java.lang.String) -> yuAA
react.api.CullList -> uNbc:
    react.glang.GSet toCull -> opMw
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> yuAA
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> FDwj
react.api.DTest -> AXNi:
    6:6:void <init>() -> <init>
    11:62:int test() -> JjwM
react.api.EntityFlag -> MuEG:
    react.api.EntityFlag NAMED -> erqT
    react.api.EntityFlag TAMED -> rNbp
    react.api.EntityFlag STACKED -> agDk
    react.api.EntityFlag RIDDEN -> gFSB
    react.api.EntityFlag LIVING -> VgFB
    react.api.EntityFlag NON_LIVING -> UuCp
    react.api.EntityFlag PASSIVE -> KVEE
    react.api.EntityFlag HOSTILE -> GAFt
    react.api.EntityFlag MATURE -> BJit
    react.api.EntityFlag YOUNG -> KfeX
    react.api.EntityFlag UNDERWATER -> kkpo
    react.api.EntityFlag GROUNDED -> nJgH
    react.api.EntityFlag AIRBORNE -> loSr
    react.api.EntityFlag PROJECTILES -> VLqs
    react.api.EntityFlag CAVES -> nliR
    react.api.EntityFlag NEARBY -> xquj
    react.api.EntityFlag LIT -> fBoG
    react.api.EntityFlag LEASHED -> XAvd
    java.lang.String m -> LqwN
    react.api.EntityFlag[] ENUM$VALUES -> WGdj
    12:31:void <clinit>() -> <clinit>
    35:38:void <init>(java.lang.String,int,java.lang.String) -> <init>
    42:52:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> flhV
    57:152:boolean is(org.bukkit.entity.Entity) -> TqFL
    158:158:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> vHtE:
    react.glang.GSet entityTypes -> FEtT
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> PSVf
react.api.EntitySample -> NffA:
    react.glang.GMap counts -> nmIv
    react.glang.GMap sets -> gxyX
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> hQKN
    45:45:react.glang.GList getTypes() -> NLoi
    50:57:int total() -> eGaR
    62:67:int get(org.bukkit.entity.EntityType) -> AFjc
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> HCNu
    84:96:void add(org.bukkit.entity.Entity) -> yuAA
react.api.Experimental -> GaqN:
react.api.Flavor -> STRp:
    react.api.Flavor ANY -> Xlmc
    react.api.Flavor SAFE_MODE -> biim
    react.api.Flavor CRAFT_BUKKIT -> ryYd
    react.api.Flavor BUKKIT -> rxxp
    react.api.Flavor SPIGOT -> pPon
    react.api.Flavor SOGGY_SPIGOT -> vJPy
    react.api.Flavor PAPER_SPIGOT -> aoWi
    react.api.Flavor TACO_SPIGOT -> wMTX
    react.api.Flavor TORCH_SPIGOT -> PeVl
    react.api.Flavor FORGE_HACK -> fdsu
    react.api.Flavor SPONGE_HACK -> CNNs
    react.api.Flavor[] ENUM$VALUES -> BmOS
    6:18:void <clinit>() -> <clinit>
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> wLWx
    74:79:boolean compatableWith(react.api.Flavor) -> AFjc
    84:84:java.lang.String fancyName() -> PmKs
    1:1:react.api.Flavor[] values() -> values
    1:1:react.api.Flavor valueOf(java.lang.String) -> valueOf
react.api.IAction -> GkCX:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> DrWy
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> HCNu
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
    react.api.ActionState getState() -> qKDo
    react.api.ActionTargetType getTarget() -> DjHY
    void setNodes(java.lang.String[]) -> AFjc
    java.lang.String[] getNodes() -> bGJW
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> flhV
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> DqxC
    react.glang.GMap getDefaultSelectors() -> gojj
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> AFjc
    react.api.ISelector[] biselect(react.api.ISelector[]) -> AFjc
    react.action.source.IActionSource getCurrentSource() -> YLpO
    void completeAction() -> NLqO
react.api.ICache -> WFkm:
    react.glang.GSet get(java.lang.Object) -> HCNu
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> flgt
    void clear() -> clear
    boolean has(java.lang.Object) -> yuAA
    react.glang.GList k() -> qAqx
react.api.ICommand -> VwOA:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> mhmh
    java.lang.String[] getPermissions() -> aTjA
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> TqFL
    react.api.SideGate getSideGate() -> uNbc
    void registerParameterDescription(java.lang.String,java.lang.String) -> AFjc
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.api.IRecord -> dUcD:
    java.lang.String getRecordType() -> AXNi
    long getRecordTime() -> MuEG
    react.json.JSONObject toJSON() -> vHtE
    java.lang.Object getRecordObject() -> NffA
    void fromJSON(react.json.JSONObject) -> AFjc
react.api.IRecordBook -> PAwa:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> AFjc
    long getOldestRecordTime() -> GaqN
    void addRecord(react.api.IRecord) -> AFjc
    long getLatestRecordTime() -> STRp
    int countRecords(long,long) -> AFjc
    react.glang.GMap getRecords(long,long) -> HCNu
    int purgeRecordsBefore(long) -> HCNu
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> ivSW:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> GkCX
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> WFkm
    react.surge.util.C getAltColor() -> VwOA
    void setColor(react.surge.util.C,react.surge.util.C) -> AFjc
    int getInterval() -> getInterval
    void setInterval(int) -> HCNu
    void sample() -> dUcD
    java.lang.String get() -> get
    void construct() -> PAwa
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> prWJ:
    react.api.SelectionMode getMode() -> ivSW
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> flhV
    react.glang.GSet getList() -> prWJ
    react.glang.GSet getPossibilities() -> fdYG
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> TqFL
    java.lang.String getName() -> getName
react.api.Injection -> fdYG:
    react.api.InjectionMethod value() -> YoTk
react.api.InjectionMethod -> YoTk:
    react.api.InjectionMethod SWAP -> FEwJ
    react.api.InjectionMethod SUBSTRATE -> HoAr
    react.api.InjectionMethod RELOAD -> brYw
    react.api.InjectionMethod[] ENUM$VALUES -> SvoS
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> pYEO:
    java.lang.String value() -> value
react.api.MSampler -> fcxB:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> pYEO
react.api.MonitorHeading -> VTho:
    react.api.ISampler head -> kSAl
    react.glang.GList children -> KxIa
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> AFjc
    27:27:react.api.ISampler getHead() -> fcxB
    32:33:void setHead(react.api.ISampler) -> HCNu
    37:37:react.glang.GList getChildren() -> VTho
    42:42:java.lang.String getHeadText() -> pjFe
    47:60:java.lang.String getChildText() -> DrYY
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> AFjc
react.api.NoiseGenerator -> pjFe:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> DrYY:
    react.api.NoiseGenerator[] octaves -> cRyS
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> mynB
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> mynB:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> fnFY
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> JIVr
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> JIVr:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> AFjc
react.api.Permissable -> IOEX:
    react.api.Permissable ACCESS -> VxHj
    react.api.Permissable TELEPORT -> mPVU
    react.api.Permissable MONITOR -> rgug
    react.api.Permissable MONITOR_TITLE -> VgGu
    react.api.Permissable MONITOR_ACTIONLOG -> ChAt
    react.api.Permissable MONITOR_MAP -> Eduq
    react.api.Permissable MONITOR_ENVIRONMENT -> Rslf
    react.api.Permissable MONITOR_GLASSES -> nAwS
    react.api.Permissable MONITOR_CHUNK_BLAME -> bjIt
    react.api.Permissable RAI_MONITOR -> PnHB
    react.api.Permissable RAI_CONTROL -> QNgC
    react.api.Permissable RAI_ACCESS -> lnvA
    react.api.Permissable RAI -> anyY
    react.api.Permissable ACT -> aLuv
    react.api.Permissable RELOAD -> DIDd
    java.lang.String node -> jWqX
    react.api.Permissable[] ENUM$VALUES -> YyDq
    7:23:void <clinit>() -> <clinit>
    27:38:void <init>(java.lang.String,int,java.lang.String) -> <init>
    42:42:boolean has(org.bukkit.command.CommandSender) -> AFjc
    47:47:java.lang.String getNode() -> IOEX
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PluginSelfDeleter -> CoVe:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> IXTO
    java.lang.Runnable r -> xYKH
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> AFjc
react.api.ReactCommand -> DaXY:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> eQRk
    java.lang.String usage -> KxMO
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> iepP
    react.api.SideGate sideGate -> lEGK
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> TqFL
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> AFjc
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> mhmh
    47:47:java.lang.String[] getPermissions() -> aTjA
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> uNbc
react.api.ReactException -> UIUy:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> YnwL:
    react.glang.GMap keystore -> gqLa
    boolean monitoring -> monitoring
    boolean highMonitor -> Heqi
    boolean actionlogging -> Utgx
    boolean glasses -> UlWp
    boolean mapping -> eYcc
    int monitorSelection -> TOcB
    int plays -> rpiv
    boolean monitorPosted -> dhCO
    int monitorLastSelection -> wfhA
    int switchNotification -> YpSF
    int hotbarSlot -> fStO
    boolean shift -> BeBT
    int scroll -> rWXL
    double lastHeight -> UkvG
    react.glang.GList channels -> Seot
    boolean heightMovement -> aUgP
    org.bukkit.entity.Player p -> sHpX
    25:42:void <clinit>() -> <clinit>
    45:98:void <init>(org.bukkit.entity.Player) -> <init>
    102:102:boolean hasChannel(java.lang.String) -> dLoR
    109:116:void save() -> save
    122:129:void load() -> load
    133:133:boolean isMonitoring() -> CoVe
    138:138:boolean isMapping() -> DaXY
    143:143:org.bukkit.entity.Player getP() -> UIUy
    148:150:void addChannel(java.lang.String) -> addChannel
    154:156:void removeChannel(java.lang.String) -> removeChannel
    160:162:void removeAllChannels() -> YnwL
    166:168:void setMonitoring(boolean) -> HCNu
    172:174:void setMapping(boolean) -> flgt
    178:178:int getMonitorSelection() -> sQPI
    183:185:void setMonitorSelection(int) -> flgt
    189:189:int getHotbarSlot() -> eqyY
    194:196:void setHotbarSlot(int) -> yuAA
    200:200:boolean isShifting() -> lKyk
    205:207:void setShifting(boolean) -> yuAA
    211:211:boolean isShift() -> MlUV
    216:218:void setShift(boolean) -> flhV
    222:222:int getScroll() -> FMmm
    227:229:void setScroll(int) -> flhV
    233:233:int getMonitorLastSelection() -> uxwd
    238:240:void setMonitorLastSelection(int) -> TqFL
    244:245:void setP(org.bukkit.entity.Player) -> HCNu
    249:249:double getLastHeight() -> Cnwt
    254:256:void setLastHeight(double) -> AFjc
    260:260:boolean isHeightMovement() -> WXOn
    265:267:void setHeightMovement(boolean) -> TqFL
    271:271:int getSwitchNotification() -> SBqm
    276:278:void setSwitchNotification(int) -> dLoR
    282:282:boolean getMonitorPosted() -> QMmY
    287:289:void setMonitorPosted(boolean) -> dLoR
    293:293:int getPlays() -> YVFP
    298:300:void setPlays(int) -> eGah
    304:304:boolean isGlasses() -> kRIa
    309:311:void setGlasses(boolean) -> eGah
    315:315:boolean isActionlogging() -> QxbP
    320:322:void setActionlogging(boolean) -> XuAe
react.api.Record -> sQPI:
    java.lang.String recordType -> ggww
    long recordTime -> FNht
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> AXNi
    32:32:long getRecordTime() -> MuEG
    38:38:java.lang.Object getRecordObject() -> NffA
    react.json.JSONObject toJSON() -> vHtE
    void fromJSON(react.json.JSONObject) -> AFjc
react.api.RecordBook -> eqyY:
    java.io.File recordFile -> Jcfa
    react.json.JSONObject js -> HoBt
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> AFjc
    79:87:react.api.IRecord getRecord(long) -> AFjc
    react.api.IRecord createDummyRecord(long,java.lang.String) -> AFjc
    95:107:long getOldestRecordTime() -> GaqN
    113:125:long getLatestRecordTime() -> STRp
    130:130:boolean within(long,long,long) -> AFjc
    136:144:int countRecords(long,long) -> AFjc
    150:162:react.glang.GMap getRecords(long,long) -> HCNu
    168:181:int purgeRecordsBefore(long) -> HCNu
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> lKyk:
react.api.SampledChunk -> MlUV:
    org.bukkit.Chunk c -> CyEj
    react.glang.GMap counts -> nmIv
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> HKct
    26:38:void hit(react.api.ChunkIssue,int) -> AFjc
    42:42:org.bukkit.Chunk getC() -> MBCJ
    47:47:react.glang.GMap getCounts() -> XJRR
react.api.SampledType -> FMmm:
    react.api.SampledType ENTITY_TIME_LOCK -> wVEo
    react.api.SampledType TILE_TIME_LOCK -> fdxg
    react.api.SampledType ENTITY_TIME -> KwnB
    react.api.SampledType TILE_TIME -> dVaw
    react.api.SampledType ENTITY_DROPTICK -> tvsB
    react.api.SampledType TILE_DROPTICK -> vRfH
    react.api.SampledType REDSTONE_TICK_USAGE -> dMqM
    react.api.SampledType REDSTONE_TICK -> eHcd
    react.api.SampledType REDSTONE_SECOND -> eIDb
    react.api.SampledType REDSTONE_TIME -> SwVI
    react.api.SampledType PHYSICS_TIME -> LGmB
    react.api.SampledType HOPPER_TICK_USAGE -> SCoo
    react.api.SampledType HOPPER_TICK -> DPwB
    react.api.SampledType HOPPER_SECOND -> tDOK
    react.api.SampledType HOPPER_TIME -> milx
    react.api.SampledType FLUID_TICK_USAGE -> XlrS
    react.api.SampledType FLUID_TICK -> FNmC
    react.api.SampledType FLUID_SECOND -> HTpf
    react.api.SampledType FLUID_TIME -> xPYs
    react.api.SampledType TPS -> dxcx
    react.api.SampledType TICK -> TiVA
    react.api.SampledType TIU -> OIDr
    react.api.SampledType MEM -> prvM
    react.api.SampledType FREEMEM -> hspD
    react.api.SampledType MAXMEM -> urDn
    react.api.SampledType ALLOCMEM -> LHMB
    react.api.SampledType MAHS -> fnIe
    react.api.SampledType CHK_TIME -> EnKx
    react.api.SampledType EXPLOSION_TIME -> KflE
    react.api.SampledType CHK -> IPEX
    react.api.SampledType ATASK -> Thty
    react.api.SampledType STASK -> mjQK
    react.api.SampledType CHKS -> EnNi
    react.api.SampledType ENT -> lgNG
    react.api.SampledType ENTLIV -> NVek
    react.api.SampledType ENTDROP -> JSJo
    react.api.SampledType ENTTILE -> RlCt
    java.lang.String node -> jWqX
    react.api.SampledType[] ENUM$VALUES -> TaIE
    6:44:void <clinit>() -> <clinit>
    50:50:react.api.ISampler get() -> ogEv
    56:56:java.lang.String toString() -> toString
    59:70:void <init>(java.lang.String,int,java.lang.String) -> <init>
    74:74:java.lang.String getNode() -> IOEX
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> uxwd:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> oFCh
    react.surge.util.C altColor -> XmTe
    int interval -> OHhC
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> WFkm
    49:49:react.surge.util.C getAltColor() -> VwOA
    55:55:int getInterval() -> getInterval
    void sample() -> dUcD
    void construct() -> PAwa
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> AFjc
    107:108:void setInterval(int) -> HCNu
react.api.Sector -> Cnwt:
    int value() -> value
react.api.SelectionException -> WXOn:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> SBqm:
    react.api.SelectionMode WHITELIST -> YFDt
    react.api.SelectionMode BLACKLIST -> GJAu
    react.api.SelectionMode[] ENUM$VALUES -> prxX
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> QMmY:
    java.lang.Class objectType -> MJrG
    react.api.SelectionMode mode -> BTCX
    react.glang.GSet list -> NFDQ
    react.glang.GSet possibilities -> FNli
    int popoff -> ePto
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> ivSW
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> flhV
    43:43:react.glang.GSet getList() -> prWJ
    49:49:react.glang.GSet getPossibilities() -> fdYG
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> TqFL
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> dLoR
    98:100:int pop() -> pop
react.api.SelectorEntityType -> YVFP:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> flgt
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> TqFL
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> eGah
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> kRIa:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> QxbP:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> flgt
    29:30:void add(org.bukkit.Chunk,int) -> AFjc
    34:38:void add(org.bukkit.World) -> eGah
    42:46:void addAll() -> XAaL
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> TqFL
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> eGah
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> HKct:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> TqFL
    87:87:java.lang.String getName() -> getName
react.api.Side -> MBCJ:
    react.api.Side PLAYERS -> tTqL
    react.api.Side CONSOLE -> vkwi
    java.lang.String ss -> wUiQ
    react.api.Side[] ENUM$VALUES -> tfSF
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> xWld
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> HCNu
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> XJRR:
    react.api.SideGate PLAYERS_ONLY -> TiXV
    react.api.SideGate CONSOLES_ONLY -> ioEC
    react.api.SideGate ANYTHING -> Ojia
    int[] $SWITCH_TABLE$react$api$SideGate -> bsAg
    react.api.SideGate[] ENUM$VALUES -> vuJY
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> AFjc
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> DOwM
react.api.SimplexNoiseGenerator -> ogEv:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> LHOK
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> SBpe
react.api.SimplexOctaveGenerator -> XAaL:
    double wScale -> qLGt
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> AFjc
react.api.SpecializedTickLimiter -> xWld:
    double rMaxTime -> vRfU
    long rStartTime -> jGSb
    double rLastTime -> QyaR
    long rMark -> ioGr
    double tMaxTime -> cSca
    react.gmath.Average atimes -> DkNH
    react.gmath.Average adropped -> sQqJ
    int droppedTicks -> WbCc
    boolean entityTick -> GkfI
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> DOwM:
    react.glang.GList sources -> ryal
    react.glang.GList splooge -> CWHl
    react.glang.GSet destroy -> lToO
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> AFjc
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> HCNu
    void clipped(org.bukkit.Location) -> HCNu
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> flgt
    boolean isAllowedSource(org.bukkit.Location) -> yuAA
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> AFjc
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> HCNu
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> flgt
react.api.SploogeCounter$1 -> DOwM$1:
    react.api.SploogeCounter this$0 -> RJBx
    java.util.Iterator val$it -> QydK
    org.bukkit.Location val$start -> BTEf
    int val$maxDistance -> wfnY
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> AFjc
react.api.SploogeCounter$1$1 -> DOwM$1$1:
    react.api.SploogeCounter$1 this$1 -> Sngu
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> SBpe:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> lwMs:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> vHtE
    38:49:void fromJSON(react.json.JSONObject) -> AFjc
react.api.StackTraceRecordBook -> RaqE:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> HCNu
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> AFjc
react.api.StackedEntity -> NffQ:
    org.bukkit.entity.LivingEntity entity -> Ucld
    int count -> count
    double rmx -> CVgc
    org.bukkit.entity.Entity damager -> hstK
    24:36:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    41:46:double getMaxHealth(org.bukkit.entity.LivingEntity) -> AFjc
    51:51:int getAbsoluteMaxCount() -> lwMs
    56:56:int getMaxCount(org.bukkit.entity.LivingEntity) -> HCNu
    61:63:void update() -> update
    67:72:void destroy() -> destroy
    76:103:void signalSize() -> RaqE
    107:107:java.lang.String color(java.lang.String) -> eGah
    112:113:void setDamager(org.bukkit.entity.Entity) -> dLoR
    117:177:void updateHealth() -> NffQ
    181:182:void heal(double) -> HCNu
    186:187:void setHealth(double) -> setHealth
    191:191:int getEffectiveCount() -> qAux
    196:196:int getEffectiveCount(double) -> flgt
    201:201:double getEffectiveMaxHealth(int) -> XuAe
    206:206:double getRealMaxHealth() -> cIoR
    211:211:double getHealth() -> getHealth
    216:222:void setMaxHealth(double) -> setMaxHealth
    227:236:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> AFjc
    240:240:double getMaxHealth() -> getMaxHealth
    245:245:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    250:250:int getCount() -> getCount
react.api.TitleMonitor -> qAux:
    react.glang.GList headings -> Noyt
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> AFjc
    24:24:int getMaxSelection() -> Mcby
    29:37:int left(int) -> HTQM
    42:50:int right(int) -> DaVf
    55:55:react.api.MonitorHeading getHeadFor(int) -> DrWy
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> AFjc
    83:100:java.lang.String getHotbarFor(int,boolean) -> AFjc
react.api.Unused -> cIoR:
react.api.WorldConfig -> Mcby:
    boolean allowRai -> KDmm
    boolean allowActions -> FWan
    boolean allowRelighting -> Uckf
    boolean allowTileThrottling -> jaHa
    boolean allowEntityThrottling -> wUlC
    boolean allowFastLeafDecay -> NxjG
    java.util.List assumeNoSideEffectsEntities -> kAgc
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> XuAe
    48:62:void save(org.bukkit.World) -> HTQM
    66:80:void load(org.bukkit.World) -> DaVf
react.cache.CachedEntity -> fRxO:
    java.util.UUID uid -> LjSV
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> giAV
    double x -> x
    double y -> y
    double z -> z
    double vx -> dNUR
    double vy -> yKQS
    double vz -> jrKA
    double dx -> HnhU
    double dy -> jqiE
    double dz -> brbj
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> eGah
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> fRxO
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> KTlR
    120:121:void setVx(double) -> yuAA
    125:125:double getVy() -> nlRr
    130:131:void setVy(double) -> flhV
    135:135:double getVz() -> kAFo
    140:141:void setVz(double) -> TqFL
    145:145:double getDx() -> tTRK
    150:151:void setDx(double) -> dLoR
    155:155:double getDy() -> TNfA
    160:161:void setDy(double) -> eGah
    165:165:double getDz() -> OYIV
    170:171:void setDz(double) -> XuAe
    175:175:java.util.UUID getUid() -> mWlh
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> KTlR:
    int age -> UIyU
    boolean ageLock -> KVNw
    boolean breed -> OkMI
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> eGah
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> UcJy
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> GarP
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> nlRr:
    org.bukkit.DyeColor dye -> TFxl
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> eGah
    30:30:org.bukkit.DyeColor getDye() -> kAEy
    35:36:void setDye(org.bukkit.DyeColor) -> AFjc
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> kAFo:
    react.glang.GList potionEffects -> RcWF
    boolean canPickupItems -> hRUF
    org.bukkit.inventory.ItemStack[] armorContents -> dWHw
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> nKTs
    double maxHealth -> maxHealth
    int maxAir -> Fyfd
    int air -> DHlX
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> eGah
    63:63:react.glang.GList getPotionEffects() -> eXgG
    68:69:void setPotionEffects(react.glang.GList) -> HCNu
    73:73:boolean isCanPickupItems() -> jEsE
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> wekG
    138:139:void setMaxAir(int) -> qKDo
    143:143:int getAir() -> DGhC
    148:149:void setAir(int) -> DjHY
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> tTRK:
    boolean sheared -> HDWk
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> eGah
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> TNfA:
    org.bukkit.inventory.ItemStack is -> nCCt
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> eGah
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> OYIV:
    7:7:void <init>() -> <init>
react.command.CommandAct -> mWlh:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> AFjc
    186:192:react.text.RTX getBeginningRTX() -> ncdb
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> AFjc
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> HCNu
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> flgt
    331:346:react.glang.GList getSortedCommands() -> myrv
    351:358:int getPageSize(int) -> DqxC
    363:363:boolean isValidPage(int,int) -> AFjc
    368:377:react.glang.GList getPage(int,int) -> HCNu
react.command.CommandActionLog -> UcJy:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandBoom -> GarP:
    16:24:void <init>() -> <init>
    29:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandCPUScore -> kAEy:
    16:24:void <init>() -> <init>
    29:39:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandCapabilities -> eXgG:
    19:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandChunkBlame -> jEsE:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandChunkBlame$1 -> jEsE$1:
    react.command.CommandChunkBlame this$0 -> RcVv
    org.bukkit.command.CommandSender val$sender -> lDnA
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> jEsE$1$1:
    react.command.CommandChunkBlame$1 this$1 -> Pvby
    org.bukkit.command.CommandSender val$sender -> lDnA
    java.lang.String val$i -> NhLk
    react.glang.GMap val$top -> BKUm
    int val$totalx -> FXER
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandChunkTP -> wekG:
    18:26:void <init>() -> <init>
    33:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandEnvironment -> DGhC:
    24:32:void <init>() -> <init>
    37:74:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandGlasses -> ncdb:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandHelp -> myrv:
    28:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> AFjc
    81:87:react.text.RTX getBeginningRTX() -> ncdb
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> AFjc
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> HCNu
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> flgt
    208:215:react.glang.GList getSortedCommands() -> myrv
    220:227:int getPageSize(int) -> DqxC
    232:232:boolean isValidPage(int,int) -> AFjc
    237:246:react.glang.GList getPage(int,int) -> HCNu
react.command.CommandHighMonitor -> kHxr:
    16:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandMap -> SdwT:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandMonitor -> LiTd:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandReload -> vtNN:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandReload$1 -> vtNN$1:
    react.command.CommandReload this$0 -> Xlvk
    org.bukkit.command.CommandSender val$sender -> lDnA
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> vtNN$1$1:
    react.command.CommandReload$1 this$1 -> oMvK
    org.bukkit.command.CommandSender val$sender -> lDnA
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> xysD:
    28:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
    54:63:org.bukkit.inventory.ItemStack makeBook() -> kHxr
    68:94:void addSpikePages(react.glang.GList) -> flgt
    98:108:void addStatusPages(react.glang.GList) -> yuAA
    112:129:int findSlot(org.bukkit.entity.Player) -> flgt
react.command.CommandSubscribe -> SCUR:
    18:27:void <init>() -> <init>
    32:63:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandTopChunk -> xrCR:
    28:36:void <init>() -> <init>
    41:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandUnsubscribe -> NEGc:
    18:27:void <init>() -> <init>
    32:63:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.command.CommandVersion -> cJTD:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> AFjc
react.controller.ActionController -> Yfhr:
    int kiv -> xbCQ
    react.glang.GMap actions -> sIbC
    react.glang.GMap pending -> yufd
    react.glang.GList tasks -> dMuy
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> AFjc
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> HCNu
    141:141:react.api.IAction getAction(react.api.ActionType) -> AFjc
    146:147:void registerAction(react.api.IAction) -> AFjc
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> SdwT
    241:248:react.glang.GList getActionNames() -> LiTd
react.controller.ChronophyFluidController -> oMUe:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> eXiE:
    boolean firstTickList -> XJsn
    long firstTick -> SfXh
    long lastTick -> aDmR
    react.gmath.Average aCSMS -> KUok
    react.glang.GMap pluginLoads -> bHPn
    react.glang.GMap playerLoads -> RARp
    int serverLoads -> cmVn
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> vtNN
    63:73:void tickNextTickList() -> xysD
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> AFjc
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> AFjc
    171:171:boolean isFirstTickList() -> SCUR
    176:176:long getFirstTick() -> xrCR
    181:181:long getLastTick() -> NEGc
    186:186:react.gmath.Average getaCSMS() -> cJTD
    191:191:react.glang.GMap getPluginLoads() -> Yfhr
    196:196:react.glang.GMap getPlayerLoads() -> oMUe
    201:201:int getServerLoads() -> eXiE
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> AFjc
    29:29:int access$1(react.controller.ChunkController) -> HCNu
    29:29:void access$2(react.controller.ChunkController,int) -> AFjc
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> flgt
react.controller.ChunkController$1 -> eXiE$1:
    react.controller.ChunkController this$0 -> QyeS
    org.bukkit.event.world.ChunkLoadEvent val$e -> sJAk
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> flgt
    1:1:void run(java.lang.Object) -> AFjc
react.controller.CommandController -> RPpy:
    react.glang.GList commands -> Sewv
    boolean k -> YFGk
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> XuAe
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> HTQM
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> AFjc
    317:317:react.glang.GList getCommands() -> RPpy
    322:323:void setCommands(react.glang.GList) -> flhV
    327:327:boolean isK() -> JQjh
    332:333:void setK(boolean) -> HTQM
react.controller.EntityCullController -> JQjh:
    react.glang.GSet flags -> twXd
    react.glang.GSet defer -> sbro
    react.glang.GSet prefer -> ySbj
    react.glang.GMap maxs -> Sexc
    19:19:void <init>() -> <init>
    29:34:void start() -> start
    40:40:void stop() -> stop
    46:46:void tick() -> tick
    50:200:void repopulateRules() -> OXib
    204:217:int cull(org.bukkit.Chunk) -> yuAA
    222:346:int partialCull(org.bukkit.Chunk) -> flhV
react.controller.EntityStackController -> OXib:
    react.glang.GList stacks -> jGXF
    21:23:void <init>() -> <init>
    28:29:void start() -> start
    34:40:void stop() -> stop
    45:60:void tick() -> tick
    65:118:void stack(react.glang.GList) -> TqFL
    122:127:boolean isStacked(org.bukkit.entity.LivingEntity) -> flgt
    132:145:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> yuAA
    151:169:void on(org.bukkit.event.entity.EntityDamageEvent) -> AFjc
    174:193:void on(org.bukkit.event.entity.EntityDamageByEntityEvent) -> AFjc
    197:212:void merge(react.api.StackedEntity,react.api.StackedEntity) -> AFjc
    216:282:void checkNear(org.bukkit.entity.LivingEntity) -> flhV
    287:327:void on(org.bukkit.event.entity.EntitySpawnEvent) -> AFjc
react.controller.EntityStackController$1 -> OXib$1:
    react.controller.EntityStackController this$0 -> CxmR
    org.bukkit.event.entity.EntitySpawnEvent val$e -> KgRn
    1:294:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    299:324:void run() -> run
react.controller.EventController -> vskl:
    react.lagmap.LagMap map -> hlIV
    react.glang.GMap slots -> xGqv
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> AFjc
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> AFjc
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> AFjc
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> AFjc
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> AFjc
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> AFjc
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> AFjc
react.controller.ExplosiveController -> MJSc:
    boolean firstTickList -> XJsn
    long firstTick -> SfXh
    long lastTick -> aDmR
    react.gmath.Average aCSMS -> KUok
    15:15:void <init>() -> <init>
    25:30:void start() -> start
    34:47:void flushTickList() -> vtNN
    51:61:void tickNextTickList() -> xysD
    66:67:void stop() -> stop
    73:74:void tick() -> tick
    79:88:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> HCNu
    93:94:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> AFjc
    98:98:boolean isFirstTickList() -> SCUR
    103:103:long getFirstTick() -> xrCR
    108:108:long getLastTick() -> NEGc
    113:113:react.gmath.Average getaCSMS() -> cJTD
react.controller.FastDecayController -> ePXQ:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> JBNw
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> AFjc
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> AFjc
    74:155:void checkBreak(org.bukkit.block.Block) -> flgt
    159:190:void decay(org.bukkit.block.Block) -> yuAA
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> flhV
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> vskl
react.controller.FastDecayController$1 -> ePXQ$1:
    react.controller.FastDecayController this$0 -> tCuw
    react.glang.GMap val$locs -> Evdw
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> flgt
    99:99:boolean isAllowedSource(org.bukkit.Location) -> yuAA
    105:124:void clipped(org.bukkit.Location) -> HCNu
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> AFjc
react.controller.FastDecayController$1$1 -> ePXQ$1$1:
    react.controller.FastDecayController$1 this$1 -> UuSa
    react.glang.GMap val$locs -> Evdw
    int val$i -> pHko
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> ePXQ$2:
    react.controller.FastDecayController this$0 -> tCuw
    org.bukkit.block.Block val$b -> Rsyf
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FeatureController -> KfPb:
    react.feature.INMSBinding trueBinding -> EUDA
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> MJSc
    85:85:java.lang.String getPackageVersion() -> ePXQ
    90:90:boolean hasBinding() -> KfPb
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> AFjc
react.controller.FluidController -> EJkw:
    react.glang.GSet ignore -> ejoL
    int flowsPerTick -> CqAE
    int flowsPerSecond -> xHSH
    react.gmath.Average aFST -> VpGJ
    react.gmath.Average aFSS -> PfDk
    react.gmath.Average aFSMS -> uaMM
    boolean firstTickList -> XJsn
    long firstTick -> SfXh
    long lastTick -> aDmR
    react.glang.GSet frozen -> RAWD
    react.glang.GMap queue -> ktps
    react.glang.GMap freezeTimes -> nBeD
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> TqFL
    68:76:void checkChunks() -> EJkw
    80:97:void checkChunk(org.bukkit.Chunk) -> dLoR
    101:107:void queue(org.bukkit.block.Block) -> TqFL
    111:111:boolean isFrozen(org.bukkit.Chunk) -> eGah
    116:117:void freeze(org.bukkit.Chunk) -> XuAe
    121:127:void unfreeze(org.bukkit.Chunk) -> HTQM
    131:138:void freeze(org.bukkit.Chunk,long) -> AFjc
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> vtNN
    172:182:void tickNextTickList() -> xysD
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> AFjc
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> AFjc
    248:248:react.glang.GSet getIgnore() -> Ahsy
    253:253:int getTransfersPerTick() -> eXiR
    258:258:int getTransfersPerSecond() -> TVwi
    263:263:react.gmath.Average getaFST() -> Tpja
    268:268:react.gmath.Average getaFSS() -> CEGo
    273:273:react.gmath.Average getaFSMS() -> fBYv
    278:278:boolean isFirstTickList() -> SCUR
    283:283:long getFirstTick() -> xrCR
    288:288:long getLastTick() -> NEGc
    293:293:react.glang.GSet getFrozen() -> cJRc
    298:298:react.glang.GMap getQueue() -> JsnY
    303:303:react.glang.GMap getFreezeTimes() -> QyFd
react.controller.GlassController -> Ahsy:
    react.glang.GMap q -> mrer
    react.glang.GList g -> KgSx
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:137:void tick() -> tick
    141:141:boolean isUsingGlasses(org.bukkit.entity.Player) -> yuAA
    146:146:boolean canUseGlasses(org.bukkit.entity.Player) -> flhV
    151:167:void toggleGlasses(org.bukkit.entity.Player) -> TqFL
    172:177:void on(org.bukkit.event.block.BlockPhysicsEvent) -> AFjc
    182:187:void on(org.bukkit.event.block.BlockFromToEvent) -> AFjc
    192:197:void on(org.bukkit.event.block.BlockBurnEvent) -> AFjc
    202:207:void on(org.bukkit.event.block.BlockFormEvent) -> AFjc
    212:217:void on(org.bukkit.event.block.BlockFadeEvent) -> AFjc
    222:234:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> AFjc
    36:36:react.glang.GList access$0(react.controller.GlassController) -> AFjc
react.controller.GlassController$1 -> Ahsy$1:
    react.controller.GlassController this$0 -> MvKh
    react.glang.GMap val$cc -> rXBs
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:135:void run() -> run
react.controller.GlassController$1$1 -> Ahsy$1$1:
    react.controller.GlassController$1 this$1 -> FWct
    org.bukkit.Location val$i -> jaLg
    org.bukkit.entity.Player val$j -> BeME
    1:108:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    113:118:void run() -> run
react.controller.GraphController -> eXiR:
    react.glang.GMap g -> agRs
    react.glang.GMap gr -> lEOn
    react.glang.GMap gra -> badi
    41:41:void <init>() -> <init>
    50:85:void start() -> start
    90:96:void stop() -> stop
    101:128:void tick() -> tick
    133:150:void on(org.bukkit.event.player.PlayerJoinEvent) -> AFjc
    154:176:void createGraphs(react.graph.GraphMode,org.bukkit.entity.Player,react.glang.GList) -> AFjc
    180:183:void addSystem(org.bukkit.entity.Player,react.glang.GList) -> AFjc
    187:191:void addTick(org.bukkit.entity.Player,react.glang.GList) -> HCNu
    195:199:void addMemory(org.bukkit.entity.Player,react.glang.GList) -> flgt
    203:204:void addEod(org.bukkit.entity.Player,react.glang.GList) -> yuAA
    208:217:void addPhysics(org.bukkit.entity.Player,react.glang.GList) -> flhV
    221:224:void addReact(org.bukkit.entity.Player,react.glang.GList) -> TqFL
    228:274:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> AFjc
    279:319:void on(org.bukkit.event.player.PlayerMoveEvent) -> AFjc
    325:325:void on(react.event.ReactScrollEvent) -> AFjc
    329:360:void toggleMapping(org.bukkit.entity.Player) -> dLoR
    364:396:void toggleMappingEod(org.bukkit.entity.Player) -> eGah
    400:400:react.glang.GMap getG() -> LPEC
    405:405:react.glang.GMap getGr() -> SLHS
    44:44:react.glang.GMap access$0(react.controller.GraphController) -> AFjc
    43:43:react.glang.GMap access$1(react.controller.GraphController) -> HCNu
react.controller.GraphController$1 -> eXiR$1:
    react.controller.GraphController this$0 -> VDoy
    1:65:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    70:83:void run() -> run
react.controller.GraphController$2 -> eXiR$2:
    react.controller.GraphController this$0 -> VDoy
    1:101:void <init>(react.controller.GraphController) -> <init>
    106:110:void run() -> run
react.controller.GraphController$3 -> eXiR$3:
    react.controller.GraphController this$0 -> VDoy
    org.bukkit.event.player.PlayerJoinEvent val$e -> MTHu
    1:133:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    138:148:void run() -> run
react.controller.HopperController -> TVwi:
    react.glang.GSet ignore -> ejoL
    int transfersPerTick -> wwrX
    int transfersPerSecond -> gNqK
    react.gmath.Average aHST -> LagH
    react.gmath.Average aHSS -> cBfD
    react.gmath.Average aHSMS -> UlbG
    boolean firstTickList -> XJsn
    long firstTick -> SfXh
    long lastTick -> aDmR
    react.glang.GSet frozen -> RAWD
    react.glang.GMap queue -> ktps
    react.glang.GMap freezeTimes -> nBeD
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> TqFL
    65:73:void checkChunks() -> EJkw
    77:94:void checkChunk(org.bukkit.Chunk) -> dLoR
    98:104:void queue(org.bukkit.block.Block) -> TqFL
    108:108:boolean isFrozen(org.bukkit.Chunk) -> eGah
    113:114:void freeze(org.bukkit.Chunk) -> XuAe
    118:124:void unfreeze(org.bukkit.Chunk) -> HTQM
    128:135:void freeze(org.bukkit.Chunk,long) -> AFjc
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> vtNN
    169:179:void tickNextTickList() -> xysD
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> AFjc
    207:207:react.glang.GSet getIgnore() -> Ahsy
    212:212:int getTransfersPerTick() -> eXiR
    217:217:int getTransfersPerSecond() -> TVwi
    222:222:react.gmath.Average getaHST() -> OHKx
    227:227:react.gmath.Average getaHSS() -> NxMi
    232:232:react.gmath.Average getaHSMS() -> MdHs
    237:237:boolean isFirstTickList() -> SCUR
    242:242:long getFirstTick() -> xrCR
    247:247:long getLastTick() -> NEGc
    252:252:react.glang.GSet getFrozen() -> cJRc
    257:257:react.glang.GMap getQueue() -> JsnY
    262:262:react.glang.GMap getFreezeTimes() -> QyFd
react.controller.HopperOvertickController -> Tpja:
    react.glang.GList possiblePlunge -> gqUR
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> AFjc
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> AFjc
react.controller.LanguageController -> CEGo:
    java.io.File languageFolder -> cJud
    int oldVersion -> agTB
    java.io.File dlf -> nJuA
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> VoCy
    160:221:void downloadAll(boolean) -> DaVf
    225:261:void downloadLanguage(java.lang.String) -> XuAe
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> HTQM
    315:315:java.io.File getFileForLanguage(java.lang.String) -> DaVf
    320:332:void writeDefaults() -> tLGK
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> AFjc
    263:263:void access$1(react.controller.LanguageController) -> AFjc
react.controller.LanguageController$1 -> CEGo$1:
    react.controller.LanguageController this$0 -> iCui
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> CEGo$2:
    react.controller.LanguageController this$0 -> iCui
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> AFjc
react.controller.LanguageController$2$1 -> CEGo$2$1:
    react.controller.LanguageController$2 this$1 -> LbJX
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> AFjc
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> AFjc
    121:121:void onDownloadStarted(react.gnet.download.Download) -> AFjc
    126:128:void onDownloadFinished(react.gnet.download.Download) -> HCNu
    134:134:void onDownloadFailed(react.gnet.download.Download) -> flgt
react.controller.LanguageController$3 -> CEGo$3:
    react.controller.LanguageController this$0 -> iCui
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> CEGo$3$1:
    react.controller.LanguageController$3 this$1 -> NFMY
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> CEGo$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> PCbS
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> CEGo$4:
    react.controller.LanguageController this$0 -> iCui
    java.io.File val$dld -> UuUa
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> AFjc
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> AFjc
    245:245:void onDownloadStarted(react.gnet.download.Download) -> AFjc
    250:251:void onDownloadFinished(react.gnet.download.Download) -> HCNu
    257:257:void onDownloadFailed(react.gnet.download.Download) -> flgt
react.controller.MessageController -> fBYv:
    react.glang.GList notes -> XdlM
    17:17:void <init>() -> <init>
    23:24:void queue(react.notification.Notification) -> AFjc
    29:39:void start() -> start
    44:46:void stop() -> stop
    51:57:void tick() -> tick
    61:77:void subscribe(org.bukkit.entity.Player,react.notification.Note) -> AFjc
    81:97:void unsubscribe(org.bukkit.entity.Player,react.notification.Note) -> HCNu
    101:121:react.glang.GList getSubscriptions(org.bukkit.entity.Player) -> XuAe
    126:131:boolean isSubscribed(org.bukkit.entity.Player,react.notification.Note) -> flgt
    136:146:void unsubscribeAll(org.bukkit.entity.Player) -> HTQM
    150:163:void subscribeAll(org.bukkit.entity.Player) -> DaVf
    167:174:void process(react.notification.Notification) -> HCNu
    19:19:react.glang.GList access$0(react.controller.MessageController) -> AFjc
react.controller.MessageController$1 -> fBYv$1:
    react.controller.MessageController this$0 -> gqYG
    1:31:void <init>(react.controller.MessageController) -> <init>
    36:37:void run(java.lang.String) -> DrWy
    1:1:void run(java.lang.Object) -> AFjc
react.controller.MonitorController -> cJRc:
    int maxCooldown -> hQwh
    react.api.TitleMonitor titleMonitor -> ORBM
    react.glang.GMap posts -> wMcH
    react.slate.PhantomSlate sb -> fvet
    boolean ready -> oVlE
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> uFXf
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> DrWy
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> qKDo
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> oEGp
    179:184:float calcVolume(react.api.ReactPlayer) -> AFjc
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> DjHY
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> DqxC
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> gojj
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> NLqO
    219:223:void startMonitoring(org.bukkit.entity.Player) -> YLpO
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> bGJW
    242:247:void startActionLogging(org.bukkit.entity.Player) -> PJdo
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> oxCN
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> HCNu
    279:291:void processPlayer(react.api.ReactPlayer) -> flgt
    296:296:void handleActionLog(org.bukkit.entity.Player) -> qAqx
    300:324:void handleTriggers(react.api.ReactPlayer) -> yuAA
    328:367:void handleScrolling(react.api.ReactPlayer) -> flhV
    371:399:void handleShifting(react.api.ReactPlayer) -> TqFL
    403:425:void handlePosting(react.api.ReactPlayer) -> dLoR
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> AFjc
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> AFjc
    471:501:void tickMonitor(react.api.ReactPlayer) -> eGah
    505:505:react.api.TitleMonitor getTitleMonitor() -> VDOf
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> AFjc
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> AFjc
    539:552:void onTick() -> rpTP
    556:578:void updateActionBoard() -> CUjG
    583:583:java.lang.String getTickName() -> jplG
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> AFjc
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> AFjc
    41:41:void access$2(react.controller.MonitorController,boolean) -> AFjc
    41:41:boolean access$3(react.controller.MonitorController) -> HCNu
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> flgt
react.controller.MonitorController$1 -> cJRc$1:
    react.controller.MonitorController this$0 -> SLkg
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> cJRc$2:
    react.controller.MonitorController this$0 -> SLkg
    1:556:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> JsnY:
    react.glang.GMap samples -> USSH
    int redstonePerTick -> FWgk
    int redstonePerSecond -> VNEi
    boolean firstTickList -> XJsn
    long firstTick -> SfXh
    long lastTick -> aDmR
    react.gmath.Average aRSMS -> CpbI
    react.gmath.Average aRST -> USSG
    react.gmath.Average aRSS -> LHXW
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> AFjc
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> AFjc
    72:79:void flushTickList() -> vtNN
    83:93:void tickNextTickList() -> xysD
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> DaVf
    121:122:void onPhysics(org.bukkit.Chunk) -> DrWy
    126:127:void onHopper(org.bukkit.Chunk) -> qKDo
    131:132:void onFluid(org.bukkit.Chunk) -> DjHY
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> AFjc
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> AFjc
    156:176:void onTick() -> rpTP
    181:181:java.lang.String getTickName() -> jplG
    186:186:react.glang.GMap getSamples() -> CgMY
    191:191:int getRedstonePerTick() -> INju
    196:196:int getRedstonePerSecond() -> fKOD
    201:201:boolean isFirstTickList() -> SCUR
    206:206:long getFirstTick() -> xrCR
    211:211:long getLastTick() -> NEGc
    216:216:react.gmath.Average getaRSMS() -> Qxeq
    221:221:react.gmath.Average getaRST() -> rosB
    226:226:react.gmath.Average getaRSS() -> lToO
react.controller.PhysicsController$1 -> JsnY$1:
    react.controller.PhysicsController this$0 -> kcrC
    1:168:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> QyFd:
    react.glang.GList players -> xXvA
    react.glang.GSet save -> XeKf
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> VUHT
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> AFjc
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> jgqm
    113:113:react.glang.GList getPlayers() -> srvD
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> AFjc
react.controller.PlayerController$1 -> QyFd$1:
    react.controller.PlayerController this$0 -> GJIF
    react.glang.GList val$toSave -> IiaA
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> LPEC:
    react.rai.IRAI rai -> yJut
    boolean raiEnabled -> iLhe
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    19:19:react.rai.IRAI access$0(react.controller.RAIController) -> AFjc
react.controller.RAIController$1 -> LPEC$1:
    react.controller.RAIController this$0 -> hsxo
    1:46:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> SLHS:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> flgt
react.controller.ReactServerInfo -> OHKx:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> bGRc
    27:27:int dgetGameProtocol() -> NEJK
    33:33:java.lang.String dgetGameVersion() -> Xkwy
    39:39:java.lang.String dgetReactVersion() -> jFYI
    45:45:int dgetMaxPlayers() -> MkyU
    51:58:react.glang.GList dgetConnectedPlayers() -> YUjE
    64:64:int dgetViewDistance() -> xWpg
    70:70:int dgetGamePort() -> TplU
    76:76:java.lang.String dgetGameAddress() -> NEHW
    82:89:react.glang.GList dgetRemotePlugins() -> iTVb
    95:102:react.glang.GList dgetWorlds() -> HdyA
    108:108:react.glang.GList dgetActions() -> GavC
    114:114:react.glang.GList dgetSamplers() -> DXmA
react.controller.RedstoneController -> NxMi:
    react.glang.GSet ignore -> ejoL
    react.glang.GSet frozen -> RAWD
    react.glang.GMap queue -> ktps
    react.glang.GMap freezeTimes -> nBeD
    int redstonePerTick -> FWgk
    int redstonePerSecond -> VNEi
    react.gmath.Average aRST -> USSG
    react.gmath.Average aRSS -> LHXW
    react.gmath.Average aRSMS -> CpbI
    boolean firstTickList -> XJsn
    long firstTick -> SfXh
    long lastTick -> aDmR
    react.glang.GMap trackers -> RRXh
    27:27:void <init>() -> <init>
    46:82:void start() -> start
    87:88:void on(org.bukkit.event.world.WorldLoadEvent) -> AFjc
    93:95:void on(org.bukkit.event.world.WorldUnloadEvent) -> AFjc
    100:106:void stop() -> stop
    110:115:void releaseChunk(org.bukkit.Chunk) -> TqFL
    120:126:void tick() -> tick
    130:138:void checkChunks() -> EJkw
    142:159:void checkChunk(org.bukkit.Chunk) -> dLoR
    163:169:void queue(org.bukkit.block.Block) -> TqFL
    173:173:boolean isFrozen(org.bukkit.Chunk) -> eGah
    178:179:void freeze(org.bukkit.Chunk) -> XuAe
    183:190:void flushTickList() -> vtNN
    194:204:void tickNextTickList() -> xysD
    208:214:void unfreeze(org.bukkit.Chunk) -> HTQM
    218:225:void freeze(org.bukkit.Chunk,long) -> AFjc
    230:231:void on(org.bukkit.event.world.ChunkUnloadEvent) -> AFjc
    236:249:void on(org.bukkit.event.block.BlockPhysicsEvent) -> AFjc
    254:267:void on(org.bukkit.event.block.BlockFromToEvent) -> AFjc
    271:271:react.glang.GSet getIgnore() -> Ahsy
    276:276:react.glang.GSet getFrozen() -> cJRc
    281:281:react.glang.GMap getQueue() -> JsnY
    286:286:react.glang.GMap getFreezeTimes() -> QyFd
    291:291:int getRedstonePerTick() -> INju
    296:296:int getRedstonePerSecond() -> fKOD
    301:301:react.gmath.Average getaRST() -> rosB
    306:306:react.gmath.Average getaRSS() -> lToO
    311:311:react.gmath.Average getaRSMS() -> Qxeq
    316:316:boolean isFirstTickList() -> SCUR
    321:321:long getFirstTick() -> xrCR
    326:326:long getLastTick() -> NEGc
react.controller.RemoteController -> MdHs:
    react.remote.server.RemoteServer remoteServer -> vRmr
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> QyFJ
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> AFjc
react.controller.RemoteController$1 -> MdHs$1:
    react.controller.RemoteController this$0 -> xbGL
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> MdHs$2:
    react.controller.RemoteController this$0 -> xbGL
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> BIwD
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> NUiQ
react.controller.SampleController -> VoCy:
    react.glang.GMap samplers -> iMIo
    react.surge.server.SuperSampler ss -> GRYk
    int cd -> jOlS
    27:33:void <init>() -> <init>
    37:63:boolean checkThreads() -> TFXq
    68:73:void restartSuperSampler() -> AOdi
    77:78:void registerSampler(react.api.ISampler) -> flgt
    82:82:react.api.ISampler getSampler(java.lang.String) -> qKDo
    87:130:void constructSamplers() -> jNiC
    135:138:void start() -> start
    143:146:void stop() -> stop
    152:152:void tick() -> tick
    156:156:react.surge.server.SuperSampler getSuperSampler() -> Cfjw
    162:184:void onTick() -> rpTP
    189:189:java.lang.String getTickName() -> jplG
    194:194:react.glang.GMap getSamplers() -> oUfc
    199:199:react.surge.server.SuperSampler getSs() -> brEt
    204:204:int getCd() -> CEJV
    209:216:react.glang.GList getSamplerNames() -> afQj
react.controller.SecurityController -> tLGK:
    java.lang.String ipa -> oVkQ
    react.glang.GList failures -> aMfG
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> DjHY
    41:74:void checkForIP() -> yAbE
    78:91:void scan(java.lang.Runnable) -> AFjc
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> tLGK$1:
    react.controller.SecurityController this$0 -> Ygpm
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> tLGK$2:
    java.lang.String val$ip -> lwxc
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> tLGK$3:
    java.lang.Thread val$t -> lDsq
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> uFXf:
    react.glang.GMap etl -> rFfC
    react.glang.GMap ttl -> kctQ
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> AFjc
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> AFjc
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> DrWy
    143:160:void releaseWorld(org.bukkit.World) -> qKDo
    164:181:double getUniversalEntityTick() -> SSvi
    186:203:double getUniversalEntityLimit() -> xXQR
    208:225:double getUniversalTileLimit() -> bXSW
    230:247:double getUniversalTileTick() -> ckwC
    252:264:double getUniversalEntityDroppedTicks() -> mPBM
    269:281:double getUniversalTileDroppedTicks() -> HBvX
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> AFjc
    301:312:void setTileTickLimit(org.bukkit.World,double) -> HCNu
    316:321:double getEntityTickLimit(org.bukkit.World) -> DjHY
    326:331:double getTileTickLimit(org.bukkit.World) -> DqxC
    336:341:double getLastEntityTick(org.bukkit.World) -> gojj
    346:351:double getLastTileTick(org.bukkit.World) -> NLqO
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> YLpO
    366:371:double getTileDroppedTicks(org.bukkit.World) -> bGJW
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> AFjc
react.controller.SpikeController -> oEGp:
    react.glang.GMap spikes -> IXbX
    26:28:void <init>() -> <init>
    33:60:void start() -> start
    65:66:void stop() -> stop
    72:108:void onTick() -> rpTP
    113:113:java.lang.String getTickName() -> jplG
    121:121:void tick() -> tick
    125:125:react.glang.GMap getSpikes() -> mPER
    130:167:void whoFuckingDidThis(react.glang.Callback) -> AFjc
    28:28:react.glang.GMap access$0(react.controller.SpikeController) -> AFjc
react.controller.SpikeController$1 -> oEGp$1:
    react.controller.SpikeController this$0 -> FXKD
    1:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    40:58:void run() -> run
react.controller.SpikeController$1$1 -> oEGp$1$1:
    react.controller.SpikeController$1 this$1 -> dgpR
    1:40:void <init>(react.controller.SpikeController$1) -> <init>
    45:56:void run() -> run
react.controller.SpikeController$2 -> oEGp$2:
    react.controller.SpikeController this$0 -> FXKD
    react.glang.GMap val$vv -> fwHq
    1:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    80:106:void run() -> run
react.controller.SpikeController$3 -> oEGp$3:
    react.controller.SpikeController this$0 -> FXKD
    java.lang.Thread val$t -> lDsq
    react.glang.Callback val$callback -> SwbK
    1:132:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    137:165:void run() -> run
react.controller.TickTimeController -> VDOf:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> rpTP:
    16:16:void <init>() -> <init>
    21:27:void start() -> start
    32:38:void stop() -> stop
    43:55:void tick() -> tick
    60:61:void on(org.bukkit.event.world.WorldUnloadEvent) -> AFjc
react.event.ReactEvent -> CUjG:
    org.bukkit.event.HandlerList handlers -> oVnf
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> jplG:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> CgMY:
    react.event.ScrollDirection direction -> vRrP
    boolean cancellled -> PLVE
    int amount -> NhSC
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> cRhE
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> vspg
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> INju:
    react.event.ScrollDirection DOWN -> Osek
    react.event.ScrollDirection UP -> WrmK
    react.event.ScrollDirection[] ENUM$VALUES -> pYpm
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.feature.INMSBinding -> fKOD:
    java.lang.String getPackageVersion() -> ePXQ
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> AFjc
react.feature.NMSBinding -> Qxeq:
    java.lang.String packageVersion -> ptEG
    7:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> ePXQ
react.feature.NMSBinding10 -> rosB:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> AFjc
react.feature.NMSBinding11 -> lToO:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> AFjc
react.feature.NMSBinding12 -> srvD:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> AFjc
react.feature.NMSBinding8 -> bGRc:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> AFjc
react.feature.NMSBinding9 -> NEJK:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> AFjc
react.gbench.Profiler -> Xkwy:
    long nanos -> OjuM
    long startNano -> QWiS
    long millis -> wgVg
    long startMillis -> mrkQ
    double time -> psdO
    boolean profiling -> GuAQ
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> gojj
    78:78:double getTicks() -> pHME
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> wDOs
    93:93:double getHours() -> VTqv
    98:98:double getMilliseconds() -> ogMM
    103:103:long getNanoseconds() -> wMBG
    108:108:long getNanos() -> UAOM
    113:113:long getStartNano() -> CUkk
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> HByM
    128:128:double getTime() -> OrbV
    133:133:boolean isProfiling() -> PSau
react.gconcurrent.A -> jFYI:
    react.gconcurrent.ParallelPoolManager mgr -> TPRN
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> jFYI$1:
    react.gconcurrent.A this$0 -> lESl
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> MkyU:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> YUjE:
    react.gconcurrent.QueueMode mode -> fUDb
    react.glang.GList threads -> RIiW
    int next -> NySI
    int threadCount -> xXwI
    java.util.Queue squeue -> axYF
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> wDsD
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> JtvU
    22:23:void syncQueue(react.gconcurrent.Execution) -> AFjc
    long getNanoGate() -> cdJe
    29:42:void tickSyncQueue() -> TONF
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> cRhQ
    93:100:int getTotalQueueSize() -> Qovh
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> HCNu
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> pjNv
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> qKOb
    152:179:void updateThreadInformation() -> ctkN
    183:215:react.gconcurrent.ParallelThread nextThread() -> AFsq
    220:226:void createThreads(int) -> NLqO
    230:230:react.gconcurrent.QueueMode getMode() -> HnLl
    235:235:int getNext() -> vbmq
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> oEIG
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> dEHj
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> kcPU
react.gconcurrent.ParallelThread -> xWpg:
    java.util.Queue queue -> neLm
    react.gconcurrent.ThreadInformation info -> wDsD
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> HTQM
    68:75:void execute(react.gconcurrent.Execution) -> flgt
    79:88:void execute() -> execute
    92:93:void queue(react.gconcurrent.Execution) -> HCNu
    97:97:java.util.Queue getQueue() -> gVbS
    102:102:react.gconcurrent.ThreadInformation getInfo() -> WrHe
react.gconcurrent.QueueMode -> TplU:
    react.gconcurrent.QueueMode ROUND_ROBIN -> nSkE
    react.gconcurrent.QueueMode SMALLEST -> KVVx
    react.gconcurrent.QueueMode[] ENUM$VALUES -> EDDs
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> NEHW:
    react.gconcurrent.ParallelPoolManager mgr -> TPRN
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> NEHW$1:
    react.gconcurrent.S this$0 -> PTdu
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> iTVb:
    long tick -> KEVS
    long atick -> hRYS
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> HdyA:
    double ticksPerSecond -> cCKF
    int queuedSize -> ArnG
    boolean processing -> lMcf
    double utilization -> hAXE
    react.gmath.Average ticksPerSecondAverage -> MBjs
    long tick -> KEVS
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> nthc
    33:35:void setTicksPerSecond(double) -> DaVf
    39:39:int getQueuedSize() -> YEJY
    44:45:void setQueuedSize(int) -> YLpO
    49:49:boolean isProcessing() -> oUhm
    54:55:void setProcessing(boolean) -> DrWy
    59:59:double getUtilization() -> UbpT
    64:65:void setUtilization(double) -> DrWy
    69:69:double getTicksPerSecondAverage() -> OGlp
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> EvFP
    89:89:int getId() -> getId
react.gformat.F -> GavC:
    java.text.NumberFormat NF -> TXaY
    java.text.DecimalFormat DF -> LXye
    java.lang.String[] NAMES -> oVmS
    java.math.BigInteger THOUSAND -> qLSC
    java.util.NavigableMap MAP -> MnBf
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> DqxC
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> AFjc
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> AFjc
    201:221:java.lang.String timeLong(long,int) -> AFjc
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> flgt
    236:236:java.lang.String b(double) -> qKDo
    241:258:java.lang.String b(java.math.BigInteger) -> AFjc
    263:267:void instantiate() -> BIwq
    279:279:java.lang.String fileSize(long) -> yuAA
    292:292:java.lang.String memSize(long) -> flhV
    297:297:java.lang.String memSize(long,int) -> HCNu
    310:311:java.lang.String stamp(long) -> TqFL
    327:361:java.lang.String ofSize(long,int) -> flgt
    367:394:java.lang.String ofSize(long,int,int) -> AFjc
    408:413:java.lang.String trim(java.lang.String,int) -> HCNu
    426:446:java.lang.String cname(java.lang.String) -> gojj
    460:472:java.lang.String repeat(java.lang.String,int) -> repeat
    484:491:java.lang.String mem(long) -> dLoR
    504:522:java.lang.String memx(long) -> eGah
    536:537:java.lang.String f(long) -> XuAe
    549:550:java.lang.String f(int) -> bGJW
    564:573:java.lang.String f(double,int) -> HCNu
    589:598:java.lang.String fd(double,int) -> flgt
    612:621:java.lang.String f(float,int) -> AFjc
    632:632:java.lang.String f(double) -> DjHY
    643:643:java.lang.String f(float) -> AFjc
    658:658:java.lang.String pc(double,int) -> yuAA
    673:673:java.lang.String pc(float,int) -> HCNu
    686:686:java.lang.String pc(double) -> DqxC
    699:699:java.lang.String pc(float) -> HCNu
    715:715:java.lang.String pc(int,int,int) -> AFjc
    729:729:java.lang.String pc(int,int) -> flgt
    745:745:java.lang.String pc(long,long,int) -> AFjc
    759:759:java.lang.String pc(long,long) -> yuAA
    771:771:java.lang.String msSeconds(long) -> HTQM
    785:785:java.lang.String msSeconds(long,int) -> yuAA
    797:797:java.lang.String nsMs(long) -> DaVf
    811:811:java.lang.String nsMs(long,int) -> flhV
    825:825:java.lang.String nsMsd(long,int) -> TqFL
react.glang.AccessCallback -> DXmA:
    java.lang.Object get() -> get
react.glang.Adapter -> QyFJ:
    java.lang.Object adapt(java.lang.Object) -> TqFL
    java.lang.Object onAdapt(java.lang.Object) -> dLoR
react.glang.Callback -> BIwD:
    java.lang.Object t -> QynJ
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> AFjc
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> NUiQ:
    double i -> YhTN
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> gojj
react.glang.FinalFloat -> TFXq:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> flgt
react.glang.FinalInteger -> AOdi:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> PJdo
react.glang.FinalLong -> jNiC:
    long i -> pQdB
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> DrWy
react.glang.FinalString -> Cfjw:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> oUfc:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> TqFL
    java.lang.Object onAdapt(java.lang.Object) -> dLoR
react.glang.GBiset -> brEt:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> mPkF
    java.lang.Object b -> VUxq
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> wDNi
    53:54:void setA(java.lang.Object) -> eGah
    63:63:java.lang.Object getB() -> sIHG
    73:74:void setB(java.lang.Object) -> XuAe
react.glang.GList -> CEJV:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> yuAA
    45:52:react.glang.GList grepDistance(int,int) -> flhV
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> HCNu
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> mFuO
    188:190:react.glang.GList shuffleCopy() -> hjiy
    198:199:void shuffle() -> Drcx
    210:236:react.glang.GList split() -> VCre
    248:248:boolean hasIndex(int) -> oxCN
    258:259:java.lang.Object pickRandom() -> nJYV
    270:277:react.glang.GList stringList() -> FFGQ
    288:292:void forEach(react.glang.Callback) -> HCNu
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> qAqx
    336:336:react.glang.GList cropFrom(int) -> VUHT
    341:373:react.glang.GList split(int) -> jgqm
    389:389:react.glang.GList cropTo(int) -> gfyR
    406:416:react.glang.GList crop(int,int) -> TqFL
    427:431:react.glang.GList removeDuplicates() -> kAOs
    442:446:void removeAll(java.lang.Object) -> HTQM
    455:455:boolean hasDuplicates() -> PugL
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> gghG
    484:490:void push(java.lang.Object,int) -> AFjc
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> DaVf
    528:532:void add(java.util.List) -> AFjc
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> tKiW
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> gWFX
    626:627:react.glang.GList qdel(java.lang.Object) -> DrWy
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> rEcV
    662:669:java.lang.Object popLast() -> eGni
    674:683:java.lang.Object popRandom() -> UtVS
react.glang.GListAdapter -> afQj:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> HCNu
    java.lang.Object onAdapt(java.lang.Object) -> dLoR
react.glang.GMap -> yAbE:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> Drdk
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> AFjc
    64:81:react.glang.GMap flip() -> queD
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> AFjc
    121:121:react.glang.GList k() -> qAqx
    131:131:react.glang.GSet kset() -> ryHc
    141:141:react.glang.GList v() -> BBJP
    151:151:react.glang.GSet vset() -> bhyF
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> HCNu
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> dLoR
    209:219:react.glang.GMap removeDuplicateValues() -> Vvwl
    233:242:void put(react.glang.GList,react.glang.GList) -> AFjc
    251:267:react.glang.GList sortK() -> cRhe
    277:293:react.glang.GList sortV() -> Wyya
react.glang.GQuadraset -> SSvi:
    java.lang.Object a -> mPkF
    java.lang.Object b -> VUxq
    java.lang.Object c -> BTPJ
    java.lang.Object d -> OYvI
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> wDNi
    25:26:void setA(java.lang.Object) -> eGah
    30:30:java.lang.Object getB() -> sIHG
    35:36:void setB(java.lang.Object) -> XuAe
    40:40:java.lang.Object getC() -> tCXe
    45:46:void setC(java.lang.Object) -> qKDo
    50:50:java.lang.Object getD() -> QyJQ
    55:56:void setD(java.lang.Object) -> DjHY
react.glang.GSet -> xXQR:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> bXSW:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> mPkF
    java.lang.Object b -> VUxq
    java.lang.Object c -> BTPJ
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> wDNi
    26:27:void setA(java.lang.Object) -> eGah
    31:31:java.lang.Object getB() -> sIHG
    36:37:void setB(java.lang.Object) -> XuAe
    41:41:java.lang.Object getC() -> tCXe
    46:47:void setC(java.lang.Object) -> qKDo
react.gmath.Average -> ckwC:
    double[] values -> MSoh
    double average -> IqwM
    boolean dirty -> DcHf
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> NLqO
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> PluC
react.gmath.DoubleArrayUtils -> mPBM:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> AFjc
    17:19:void wrapRight(double[]) -> AFjc
    23:27:void fill(double[],double) -> fill
react.gmath.M -> HBvX:
    int precision -> WbLl
    int modulus -> uOpH
    float[] sin -> vRri
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> AFjc
    31:36:boolean r(java.lang.Double) -> HCNu
    51:51:double tps(long,int) -> dLoR
    63:63:double ticksFromNS(long) -> qKDo
    75:101:java.lang.String toRoman(int) -> Qojx
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> dLoR
    144:216:int fromRoman(java.lang.String) -> NLqO
    226:226:long ns() -> AOhm
    236:236:long ms() -> OGoA
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> HCNu
    333:333:float sinLookup(int) -> pHAg
react.gnet.client.Client -> mPER:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> xPho
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> AFjc
    74:74:react.gnet.packet.PacketHandler getHandler() -> OXpQ
react.gnet.client.IClient -> cRhE:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> AFjc
    react.gnet.packet.PacketHandler getHandler() -> OXpQ
react.gnet.download.Download -> vspg:
    react.gnet.download.DownloadState state -> hlOE
    react.gnet.download.DownloadType type -> fDEK
    react.gnet.download.DownloadStatus status -> FWkI
    react.gnet.download.DownloadMonitor monitor -> ioQN
    java.net.URL url -> url
    java.io.File file -> msMH
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    24:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> lvuh
    92:92:react.gnet.download.DownloadType getType() -> Fggv
    97:97:react.gnet.download.DownloadStatus getStatus() -> APJJ
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> yuKX
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> pHME:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> AFjc
    void onDownloadStarted(react.gnet.download.Download) -> AFjc
    void onDownloadFinished(react.gnet.download.Download) -> HCNu
    void onDownloadFailed(react.gnet.download.Download) -> flgt
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> AFjc
react.gnet.download.DownloadState -> wDOs:
    react.gnet.download.DownloadState IDLE -> XdpA
    react.gnet.download.DownloadState DOWNLOADING -> KDwX
    react.gnet.download.DownloadState FAILED -> UuXj
    react.gnet.download.DownloadState FINISHED -> OYtb
    react.gnet.download.DownloadState[] ENUM$VALUES -> SnrQ
    3:8:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadState[] values() -> values
    1:1:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
react.gnet.download.DownloadStatus -> VTqv:
    long bytesDownloaded -> MdsA
    long bytesTotal -> dpeg
    long bytesPerSecond -> ORGk
    long timeElapsed -> nBmo
    10:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> eaaA
    25:25:long getBytesDownloaded() -> XSJk
    30:31:void setBytesDownloaded(long) -> DjHY
    35:35:long getBytesTotal() -> xaGL
    40:41:void setBytesTotal(long) -> DqxC
    45:45:long getBytesPerSecond() -> OsCq
    50:51:void setBytesPerSecond(long) -> gojj
    55:55:long getTimeElapsed() -> MRiw
    60:61:void setTimeElapsed(long) -> NLqO
react.gnet.download.DownloadType -> ogMM:
    react.gnet.download.DownloadType DETERMINATE -> ySoT
    react.gnet.download.DownloadType INDETERMINATE -> TaWV
    react.gnet.download.DownloadType[] ENUM$VALUES -> yBlx
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadType[] values() -> values
    1:1:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
react.gnet.packet.IPacket -> wMBG:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> XdKr
    java.lang.String getPacketName() -> PmUt
react.gnet.packet.IncompatablePacketException -> UAOM:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> CUkk:
    react.gnet.packet.PacketBinding SERVER_BOUND -> QXMo
    react.gnet.packet.PacketBinding CLIENT_BOUND -> ydoo
    react.gnet.packet.PacketBinding[] ENUM$VALUES -> rWkF
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.packet.PacketBinding[] values() -> values
    1:1:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
react.gnet.packet.PacketException -> HByM:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> OrbV:
    react.glang.GList accept -> fDHc
    react.gnet.packet.PacketBinding side -> Gkrf
    react.gnet.streams.OSS out -> pbgD
    react.gnet.streams.ISS in -> nSoX
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> AFjc
    28:34:void accept(react.gnet.packet.IPacket) -> HCNu
    38:46:react.gnet.packet.IPacket findPacket(int) -> TOBR
    51:66:react.gnet.packet.IPacket read() -> XIwx
    71:77:void write(react.gnet.packet.IPacket) -> flgt
react.gnet.packet.UnhandledPacketException -> PSau:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> cdJe:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> OXpQ
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> yuAA
react.gnet.server.Server -> TONF:
    int port -> port
    java.net.ServerSocket socket -> igCq
    react.gnet.packet.PacketHandler handler -> xPho
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> OXpQ
    37:84:void run() -> run
    88:91:void pstart() -> iCYL
    95:96:void pstop() -> DGrP
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> yuAA
react.gnet.streams.ISS -> cRhQ:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> cdqa
    boolean built -> bQLl
    byte[] readBuffer -> vlhE
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> aCdb
    64:72:react.glang.GList readStringList() -> lwYa
    77:85:react.glang.GList readDoubleList() -> IORO
    90:98:react.glang.GList readLongList() -> xOgc
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> AFjc
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> AFjc
    136:137:react.gnet.streams.ISS gzip() -> VUXG
    142:147:void build() -> HwBx
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> HCNu
    435:436:void close() -> close
react.gnet.streams.OSS -> Qovh:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> RlQY
    react.gnet.streams.StreamBuilder bu -> cdqa
    boolean built -> bQLl
    byte[] writeBuffer -> rOYl
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> yklp
    41:42:react.gnet.streams.OSS gzip(int) -> CoSv
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> HCNu
    53:58:void build() -> HwBx
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> eGah
    102:108:void writeDoubleList(react.glang.GList) -> XuAe
    112:118:void writeLongList(react.glang.GList) -> HTQM
    122:128:void writeStreamableList(react.glang.GList) -> DaVf
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> ggic
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> flgt
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> pjNv:
    react.glang.GList constructors -> YFRQ
    18:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> AFjc
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> AFjc
    49:50:void bind(react.gnet.streams.StreamConstructor) -> AFjc
    54:55:void bindGZIP(int) -> FDwj
    59:60:void bindGZIP() -> LaLf
    64:65:void bindCipher(javax.crypto.Cipher) -> flgt
    69:70:void bindBuffer(int) -> JjwM
    74:75:void bindBuffer() -> xOhL
react.gnet.streams.StreamConstructor -> qKOb:
    java.io.InputStream constructInput(java.io.InputStream) -> AFjc
    java.io.OutputStream constructOutput(java.io.OutputStream) -> AFjc
react.gnet.streams.constructors.BufferedStreamConstructor -> ctkN:
    int bufferSize -> bufferSize
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> HCNu
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> HCNu
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> AFjc
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> AFjc
react.gnet.streams.constructors.CipherStreamConstructor -> AFsq:
    javax.crypto.Cipher cipher -> XdqQ
    17:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> flgt
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> flgt
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> AFjc
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> AFjc
react.gnet.streams.constructors.GZipStreamConstructor -> HnLl:
    int compressionLevel -> KNJp
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> yuAA
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> yuAA
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> AFjc
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> AFjc
react.gnet.streams.overlays.CGZIPInputStream -> vbmq:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> oEIG:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> dEHj:
    void toBytes(react.gnet.streams.OSS) -> AFjc
    void fromBytes(react.gnet.streams.ISS) -> AFjc
react.graph.ColossalView -> kcPU:
    react.papyrus.BufferedFrame view -> wokM
    react.glang.GMap buffers -> VEYO
    react.glang.GMap graphs -> vuYS
    double level -> vdXC
    double targetLevel -> uidi
    int maxX -> PChF
    int maxY -> UKGb
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> awYf
    51:77:void render() -> ogPs
    81:98:void scroll(int) -> PSVf
    102:112:void recompile() -> pirt
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> AFjc
    122:122:react.papyrus.BufferedFrame getView() -> sPyA
    127:127:react.glang.GMap getBuffers() -> MdPM
    132:132:react.glang.GMap getGraphs() -> jiBf
    137:137:double getLevel() -> Diue
    142:142:double getTargetLevel() -> FNYj
    147:147:int getMaxX() -> kstw
    152:152:int getMaxY() -> gWID
react.graph.ColossalView$Builder -> kcPU$AFjc:
    react.glang.GList graphs -> ffJc
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> AFjc
    171:191:react.graph.ColossalView compute() -> tLLb
react.graph.CubicleIterator -> gVbS:
    int[][] mapping -> eQeR
    int xCubes -> jHBo
    int yCubes -> uPSB
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> hQKN
    47:130:void insert(react.graph.GraphSize,int) -> AFjc
    134:145:void print() -> print
react.graph.Graph2D -> WrHe:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> AFjc
react.graph.GraphCPUArc -> nthc:
    byte fontColor -> nTNw
    byte backgroundColor -> cSoR
    double pct -> DQgY
    react.gmath.Average aax -> qmyG
    react.gmath.Average aay -> iUch
    react.gmath.Average aaz -> GSCX
    long msx -> GSCW
    26:38:void <init>(byte) -> <init>
    42:47:void sample() -> dUcD
    52:90:void onRender(react.papyrus.BufferedFrame) -> AFjc
    94:94:byte getFontColor() -> qCDA
    99:100:void setFontColor(byte) -> AFjc
    104:104:byte getBackgroundColor() -> kkcs
    109:110:void setBackgroundColor(byte) -> HCNu
react.graph.GraphLagMap -> YEJY:
    int grid -> GAaJ
    org.bukkit.entity.Player viewer -> pAFk
    org.bukkit.util.Vector lastVector -> dqIE
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> xYFO
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> NUoN
    49:55:void zoomOut() -> sjkJ
    60:164:void onRender(react.papyrus.BufferedFrame) -> AFjc
    21:21:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> CoSv
react.graph.GraphMemoryArc -> oUhm:
    byte fontColor -> nTNw
    byte backgroundColor -> cSoR
    double pct -> DQgY
    react.gmath.Average aax -> qmyG
    long msx -> GSCW
    long of -> DtMd
    26:37:void <init>(byte) -> <init>
    41:47:void sample() -> dUcD
    52:79:void onRender(react.papyrus.BufferedFrame) -> AFjc
    83:83:byte getFontColor() -> qCDA
    88:89:void setFontColor(byte) -> AFjc
    93:93:byte getBackgroundColor() -> kkcs
    98:99:void setBackgroundColor(byte) -> HCNu
react.graph.GraphMode -> UbpT:
    react.graph.GraphMode NORMAL -> tLrU
    react.graph.GraphMode ITEMFRAME -> uOts
    react.graph.GraphMode EOD -> Jlma
    react.graph.GraphMode[] ENUM$VALUES -> ebie
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.GraphMode[] values() -> values
    1:1:react.graph.GraphMode valueOf(java.lang.String) -> valueOf
react.graph.GraphSampleLine -> OGlp:
    double lx -> ndsB
    double ly -> eQgt
    react.api.ISampler sampler -> ECkd
    react.graph.IFormatter formatter -> uaWL
    byte graphColor -> WbQw
    byte backgroundColor -> cSoR
    byte borderColor -> dEsi
    byte textColor -> lNKw
    int ticksLeftTitle -> HoYQ
    int ticksOutTitle -> jGeW
    double nextPoint -> gWmN
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> dUcD
    51:183:void onRender(react.papyrus.BufferedFrame) -> AFjc
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> HCNu
    226:254:int getHue(int,int,int) -> flgt
    259:281:void scaleFor(react.glang.GList) -> DrWy
    285:285:react.graph.IFormatter getFormatter() -> GkCX
    290:291:void setFormatter(react.graph.IFormatter) -> AFjc
    295:295:byte getGraphColor() -> pbBa
    300:301:void setGraphColor(byte) -> flgt
    305:305:byte getBackgroundColor() -> kkcs
    310:311:void setBackgroundColor(byte) -> HCNu
    315:315:byte getBorderColor() -> pHOi
    320:321:void setBorderColor(byte) -> yuAA
    325:325:byte getTextColor() -> wCqv
    330:331:void setTextColor(byte) -> flhV
    335:335:react.api.ISampler getSampler() -> fugR
react.graph.GraphSize -> EvFP:
    react.graph.GraphSize WIDE -> aonN
    react.graph.GraphSize FULL -> aNLH
    react.graph.GraphSize SQUARE -> bPmh
    int[] $SWITCH_TABLE$react$graph$GraphSize -> Qhoe
    react.graph.GraphSize[] ENUM$VALUES -> DQiG
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> vkdI
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> fJrP
react.graph.GraphText -> BIwq:
    java.lang.String text -> text
    byte fontColor -> nTNw
    byte backgroundColor -> cSoR
    boolean wrote -> dEqr
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> AFjc
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> qCDA
    68:69:void setFontColor(byte) -> AFjc
    73:73:byte getBackgroundColor() -> kkcs
    78:79:void setBackgroundColor(byte) -> HCNu
react.graph.GraphingInstance -> wDNi:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> ffJc
    react.graph.ColossalView view -> yLAE
    react.papyrus.Papyrus papyrus -> Sfei
    react.papyrus.IRenderer renderer -> FXOp
    boolean mapping -> eYcc
    react.glang.GList msgs -> iMRP
    react.surge.sched.Task waiter -> TPVo
    react.surge.sched.Task waiter2 -> apNw
    int shift -> wDwl
    int iv -> NNdv
    boolean notif -> giOS
    boolean doScrolling -> YVtv
    49:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> ETGF
    127:128:void setDoScrolling(boolean) -> qKDo
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> AFjc
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> AFjc
    151:155:void send(java.lang.String) -> YLpO
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> AFjc
    166:205:void on(react.event.ReactScrollEvent) -> AFjc
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> AFjc
    219:227:void destroy() -> destroy
    231:240:void toggle() -> Oisd
    244:245:void setGraphs(react.glang.GList) -> qKDo
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> VTvU
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> fltx
    298:298:react.graph.ColossalView getView() -> EBda
    303:303:react.papyrus.Papyrus getPapyrus() -> fTEI
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> AFjc
    323:324:void setPapyrus(react.papyrus.Papyrus) -> AFjc
    328:329:void setRenderer(react.papyrus.IRenderer) -> AFjc
    333:334:void setMapping(boolean) -> flgt
    338:339:void setMsgs(react.glang.GList) -> DjHY
    343:344:void setWaiter(react.surge.sched.Task) -> AFjc
    348:349:void setWaiter2(react.surge.sched.Task) -> HCNu
    353:354:void setShift(int) -> NLoi
    358:359:void setNotif(boolean) -> DjHY
    363:363:react.papyrus.IRenderer getRenderer() -> sQYF
    368:368:boolean isMapping() -> DaXY
    373:373:react.glang.GList getMsgs() -> QNXS
    378:378:react.surge.sched.Task getWaiter() -> LrNB
    383:383:react.surge.sched.Task getWaiter2() -> lMEQ
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> CftS
    398:414:void compile() -> HnTO
    418:433:void enableSly() -> aTwl
    437:445:void disableSly() -> vARx
    40:40:boolean access$0(react.graph.GraphingInstance) -> AFjc
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> HCNu
    46:46:boolean access$2(react.graph.GraphingInstance) -> flgt
    46:46:void access$3(react.graph.GraphingInstance,boolean) -> AFjc
    44:44:int access$4(react.graph.GraphingInstance) -> yuAA
    44:44:void access$5(react.graph.GraphingInstance,int) -> AFjc
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> flhV
react.graph.GraphingInstance$1 -> wDNi$1:
    react.graph.GraphingInstance this$0 -> kAue
    org.bukkit.entity.Player val$player -> RteB
    1:54:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> wDNi$2:
    react.graph.GraphingInstance this$0 -> kAue
    1:79:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> wDNi$3:
    react.graph.GraphingInstance this$0 -> kAue
    1:109:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> AFjc
react.graph.IFormatter -> sIHG:
    java.lang.String from(double) -> YLpO
react.graph.IGraph -> mFuO:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> gglC
    long getTimeViewport() -> KTxy
    void render(react.papyrus.BufferedFrame) -> flgt
    double getMax() -> getMax
    void setMax(double) -> bGJW
react.graph.NormalGraph -> hjiy:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> FhqG
    long timeViewport -> msPx
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> gglC
    35:35:long getTimeViewport() -> KTxy
    41:42:void render(react.papyrus.BufferedFrame) -> flgt
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> bGJW
    void onRender(react.papyrus.BufferedFrame) -> AFjc
react.graph.PlotBoard -> Drcx:
    react.glang.GMap plots -> stak
    int maxRecordings -> lpNV
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> DbHS
    33:33:long getAccurateTimeSpan() -> ogSY
    38:50:long getMedian(long,long) -> flhV
    55:55:long getMinimumAccuracyRange() -> PukP
    60:70:double getMaxValue() -> eGqp
    75:85:double getMinValue() -> qvKA
    90:90:react.glang.GList sort(react.glang.GMap) -> HCNu
    95:105:long earilestRecording() -> YDpL
    110:120:long latestRecording() -> DYVo
    125:126:void reduceBefore(long) -> YLpO
    130:156:void reduceBetween(long,long) -> TqFL
    160:160:boolean before(long,long) -> dLoR
    165:165:boolean after(long,long) -> eGah
    170:170:boolean within(long,long,long) -> AFjc
    175:193:react.glang.GMap getBetween(long,long) -> XuAe
    198:200:void plot(long,double) -> AFjc
    204:204:boolean hasAt(long) -> bGJW
    209:209:double getAt(long) -> PJdo
    214:214:int getSize() -> getSize
react.graph.Point -> VCre:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> nJYV:
    int iid -> QXOa
    react.graph.IGraph graph -> nvWa
    react.graph.GraphSize size -> Xdut
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> jiDk
    24:25:void setGraph(react.graph.IGraph) -> AFjc
    29:29:react.graph.GraphSize getSize() -> NoeV
    34:35:void setSize(react.graph.GraphSize) -> AFjc
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> FFGQ:
    react.graph.RenderMaxType UNLIMITED -> dhYa
    react.graph.RenderMaxType LIMITED -> pAIO
    react.graph.RenderMaxType[] ENUM$VALUES -> Jlns
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> kAOs:
    java.lang.String CRLF -> iLuH
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> bGJW
    162:198:java.lang.String toString(react.json.JSONObject) -> HCNu
react.json.HTTPTokener -> PugL:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> gghG:
    java.util.ArrayList myArrayList -> AHar
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> AFjc
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> eGaR
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> wLWx
    394:399:react.json.JSONObject getJSONObject(int) -> PmKs
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> PJdo
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> mhmh
    515:515:boolean optBoolean(int) -> aTjA
    533:536:boolean optBoolean(int,boolean) -> HCNu
    551:551:double optDouble(int) -> uNbc
    569:572:double optDouble(int,double) -> AFjc
    587:587:int optInt(int) -> AXNi
    605:608:int optInt(int,int) -> eGah
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> HCNu
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> AFjc
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> AFjc
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> AFjc
    722:723:react.json.JSONArray optJSONArray(int) -> MuEG
    737:738:react.json.JSONObject optJSONObject(int) -> vHtE
    752:752:long optLong(int) -> NffA
    770:773:long optLong(int,long) -> AFjc
    788:788:java.lang.String optString(int) -> GaqN
    803:804:java.lang.String optString(int,java.lang.String) -> AFjc
    816:817:react.json.JSONArray put(boolean) -> DqxC
    830:831:react.json.JSONArray put(java.util.Collection) -> AFjc
    845:848:react.json.JSONArray put(double) -> PJdo
    860:861:react.json.JSONArray put(int) -> STRp
    873:874:react.json.JSONArray put(long) -> oxCN
    887:888:react.json.JSONArray put(java.util.Map) -> AFjc
    902:903:react.json.JSONArray put(java.lang.Object) -> DqxC
    921:922:react.json.JSONArray put(int,boolean) -> flgt
    939:940:react.json.JSONArray put(int,java.util.Collection) -> AFjc
    958:959:react.json.JSONArray put(int,double) -> HCNu
    977:978:react.json.JSONArray put(int,int) -> XuAe
    996:997:react.json.JSONArray put(int,long) -> HCNu
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> AFjc
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> AFjc
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> gojj
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> AFjc
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> AFjc
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> AFjc
react.json.JSONException -> tKiW:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> VxcA
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> gWFX:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> AFjc
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> oxCN
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> AFjc
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> HCNu
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> bGJW
    379:456:java.lang.String toString(react.json.JSONArray) -> HCNu
    472:552:java.lang.String toString(react.json.JSONObject) -> HCNu
react.json.JSONObject -> rEcV:
    java.util.Map map -> map
    java.lang.Object NULL -> rqbb
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> AFjc
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> HCNu
    480:499:java.lang.String doubleToString(double) -> oxCN
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> qAqx
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> VUHT
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> jgqm
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> flgt
    751:767:java.lang.String[] getNames(java.lang.Object) -> NLqO
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> gfyR
    855:855:boolean isNull(java.lang.String) -> Qojx
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> NgTw
    917:937:java.lang.String numberToString(java.lang.Number) -> AFjc
    949:949:java.lang.Object opt(java.lang.String) -> pHAg
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> AFjc
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> AFjc
    1018:1018:boolean optBoolean(java.lang.String) -> TOBR
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> AFjc
    1054:1054:double optDouble(java.lang.String) -> aCdb
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> AFjc
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> AFjc
    1116:1119:double optDouble(java.lang.String,double) -> AFjc
    1134:1134:int optInt(java.lang.String) -> yklp
    1152:1155:int optInt(java.lang.String,int) -> flgt
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> CoSv
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> FDwj
    1198:1198:long optLong(java.lang.String) -> JjwM
    1216:1219:long optLong(java.lang.String,long) -> AFjc
    1234:1234:java.lang.String optString(java.lang.String) -> PSVf
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> HCNu
    1255:1305:void populateMap(java.lang.Object) -> YLpO
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> HCNu
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> AFjc
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> HCNu
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> yuAA
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> HCNu
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> AFjc
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> flgt
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> yuAA
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> flhV
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> AFjc
    1590:1590:java.lang.Object remove(java.lang.String) -> hQKN
    1605:1640:boolean similar(java.lang.Object) -> gojj
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> bGJW
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> flgt
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> AFjc
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> AFjc
    2000:2004:void indent(java.io.Writer,int) -> AFjc
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> AFjc
react.json.JSONObject$Null -> rEcV$AFjc:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> eGni:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> UtVS:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> Drdk:
    long character -> axaj
    boolean eof -> eof
    long index -> wNNQ
    long line -> CWXt
    char previous -> MCUJ
    java.io.Reader reader -> reader
    boolean usePrevious -> hlTp
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> uqTg
    119:131:int dehexchar(char) -> AFjc
    136:136:boolean end() -> Diwm
    147:153:boolean more() -> ejWF
    164:198:char next() -> next
    213:218:char next(char) -> HCNu
    233:250:java.lang.String next(int) -> GkCX
    263:266:char nextClean() -> jhdR
    287:334:java.lang.String nextString(char) -> flgt
    349:361:java.lang.String nextTo(char) -> yuAA
    376:388:java.lang.String nextTo(java.lang.String) -> NLoi
    403:441:java.lang.Object nextValue() -> XSOk
    458:479:char skipTo(char) -> flhV
    491:491:react.json.JSONException syntaxError(java.lang.String) -> eGaR
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> queD:
    int maxdepth -> dEvQ
    boolean comma -> DAJY
    char mode -> uYHf
    react.json.JSONObject[] stack -> JJlb
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> wLWx
    157:164:react.json.JSONWriter array() -> BmBX
    180:193:react.json.JSONWriter end(char,char) -> AFjc
    206:206:react.json.JSONWriter endArray() -> wnhy
    219:219:react.json.JSONWriter endObject() -> vkeg
    235:258:react.json.JSONWriter key(java.lang.String) -> PmKs
    274:285:react.json.JSONWriter object() -> VCur
    299:310:void pop(char) -> TqFL
    322:329:void push(react.json.JSONObject) -> yuAA
    342:342:react.json.JSONWriter value(boolean) -> gojj
    356:356:react.json.JSONWriter value(double) -> qAqx
    369:369:react.json.JSONWriter value(long) -> qAqx
    385:385:react.json.JSONWriter value(java.lang.Object) -> PJdo
react.json.XML -> ryHc:
    java.lang.Character AMP -> tVFF
    java.lang.Character APOS -> THIh
    java.lang.Character BANG -> HgKA
    java.lang.Character EQ -> wNMV
    java.lang.Character GT -> oxxr
    java.lang.Character LT -> cvXY
    java.lang.Character QUEST -> xbQi
    java.lang.Character QUOT -> rhqD
    java.lang.Character SLASH -> gyrl
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> mhmh
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> AFjc
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> bGJW
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> BBJP:
    java.util.HashMap entity -> Xuwo
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> KTxS
    108:133:java.lang.Object nextContent() -> vcTw
    149:166:java.lang.Object nextEntity(char) -> dLoR
    186:239:java.lang.Object nextMeta() -> ivao
    261:334:java.lang.Object nextToken() -> OHTI
    354:420:boolean skipPast(java.lang.String) -> aTjA
react.lagmap.LagMap -> bhyF:
    react.glang.GMap chunks -> FyvA
    13:16:void <init>() -> <init>
    20:27:react.glang.GMap getGrandTotalMilliseconds() -> vASE
    32:47:react.glang.GMap getGrandTotal() -> ncnX
    52:61:void pump() -> Yocf
    65:71:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> AFjc
    75:81:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> AFjc
    85:85:react.glang.GMap getChunks() -> ksvO
react.lagmap.LagMapChunk -> Vvwl:
    react.glang.GMap hits -> dphi
    org.bukkit.Chunk c -> CyEj
    15:19:void <init>(org.bukkit.Chunk) -> <init>
    23:37:react.glang.GMap getMS() -> Qgkf
    42:66:double totalMS() -> KCwW
    71:78:double getMS(react.api.ChunkIssue) -> AFjc
    83:89:void hit(react.api.ChunkIssue,double) -> AFjc
    93:94:void hit(react.api.ChunkIssue) -> HCNu
    98:98:int getX() -> getX
    103:103:int getZ() -> getZ
    108:115:double totalScore() -> OjWU
    120:120:react.glang.GMap getHits() -> Elyn
    125:134:void pump() -> Yocf
    139:139:int compareTo(react.lagmap.LagMapChunk) -> AFjc
    144:144:org.bukkit.Chunk getC() -> MBCJ
    149:149:org.bukkit.World getWorld() -> getWorld
    1:1:int compareTo(java.lang.Object) -> compareTo
react.notification.Note -> cRhe:
    react.notification.Note RAI -> cTTM
    react.notification.Note VERBOSE -> LsUN
    react.notification.Note SPIKES -> uihg
    react.notification.Note GC -> ecJt
    react.notification.Note[] ENUM$VALUES -> lyAi
    5:10:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    14:15:void bake(java.lang.String) -> uNbc
    1:1:react.notification.Note[] values() -> values
    1:1:react.notification.Note valueOf(java.lang.String) -> valueOf
react.notification.Notification -> Wyya:
    react.notification.Note type -> LasK
    java.lang.String message -> message
    8:12:void <init>(react.notification.Note,java.lang.String) -> <init>
    16:16:react.notification.Note getType() -> GtCy
    21:22:void setType(react.notification.Note) -> AFjc
    26:26:java.lang.String getMessage() -> getMessage
    31:32:void setMessage(java.lang.String) -> setMessage
react.papyrus.BufferedFrame -> tCXe:
    byte[][] frame -> TYJN
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> AFjc
    90:97:void write(byte) -> TqFL
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> AFjc
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> AFjc
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> AFjc
    153:167:java.awt.image.BufferedImage toBufferedImage() -> qBfe
    175:182:void writeRainbowMul() -> XcrT
    189:196:void writeRainbowAdd() -> TGEU
    203:213:void writeSparks() -> uheb
    217:223:boolean write(int,int,byte) -> AFjc
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> AFjc
    255:272:void write(react.papyrus.BufferedFrame) -> yuAA
    276:276:byte[][] getRawFrame() -> iTal
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> QyJQ:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> yuAA
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> AFjc
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> PluC:
    org.bukkit.map.MapView getView() -> RtCa
    react.papyrus.BufferedFrame getFrameBuffer() -> xOkr
    void addRenderer(react.papyrus.IRenderer) -> HCNu
    void clearRenderers() -> wDXh
    react.glang.GList getRenderers() -> yAlv
    void removeRenderer(react.papyrus.IRenderer) -> flgt
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> xaMw
react.papyrus.IRenderer -> AOhm:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> AFjc
react.papyrus.Papyrus -> OGoA:
    org.bukkit.map.MapView map -> lMlK
    react.papyrus.BufferedFrame frameBuffer -> YqJp
    react.papyrus.BufferedFrame lastFrameBuffer -> NhYo
    react.glang.GList renderers -> CVyN
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> RtCa
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> xOkr
    51:52:void addRenderer(react.papyrus.IRenderer) -> HCNu
    57:58:void clearRenderers() -> wDXh
    63:63:react.glang.GList getRenderers() -> yAlv
    69:70:void removeRenderer(react.papyrus.IRenderer) -> flgt
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> xaMw
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> HCNu
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> flgt
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> yuAA
react.papyrus.Papyrus$1 -> OGoA$1:
    react.papyrus.Papyrus this$0 -> jXgd
    org.bukkit.map.MapCanvas val$c -> looU
    org.bukkit.map.MapView val$v -> Mmgb
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> OXpQ:
    int spaceSize -> qfQP
    java.lang.String fontChars -> wpRl
    int[][] fontData -> GAeO
    react.papyrus.ReactFont Font -> THKY
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> lvuh:
    react.glang.GList subgoals -> OlAF
    java.lang.String tag -> FWtI
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> NNDl
    26:44:void propigate() -> woMN
    49:50:void addGoal(react.rai.IGoal) -> AFjc
    55:65:react.glang.GList getFailingSubgoals() -> bOlb
    71:71:boolean isFailing() -> BldF
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> ssaA
    void onPropigated() -> PSiy
react.rai.Goal$1 -> lvuh$1:
    react.rai.Goal this$0 -> KNQy
    react.rai.IGoal val$i -> EndD
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> Fggv:
    react.glang.GList getSubgoals() -> NNDl
    void propigate() -> woMN
    void onPropigated() -> PSiy
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> bOlb
    boolean isFailing() -> BldF
    boolean onCheckFailing() -> ssaA
    void update() -> update
    void addGoal(react.rai.IGoal) -> AFjc
react.rai.IRAI -> APJJ:
    react.glang.GList getGoals() -> eHVI
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> AFjc
    react.glang.GList getEvents() -> wnka
    void callEvent(react.rai.RAIEvent) -> AFjc
    react.glang.GList getListeners() -> Smtt
react.rai.RAI -> yuKX:
    react.glang.GList goals -> axdR
    react.glang.GList events -> DRNi
    react.glang.GList logEvents -> SVJT
    react.glang.GList listeners -> xPqu
    long since -> BeYg
    react.rai.RAI instance -> pAKV
    22:31:void <init>() -> <init>
    36:36:react.glang.GList getGoals() -> eHVI
    42:43:void addGoal(react.rai.IGoal) -> AFjc
    48:83:void tick() -> tick
    88:88:react.glang.GList getEvents() -> wnka
    94:101:void callEvent(react.rai.RAIEvent) -> AFjc
    106:106:react.glang.GList getListeners() -> Smtt
react.rai.RAIEvent -> eaaA:
    react.rai.RAIEventType type -> raCU
    java.lang.String[] pars -> mbTe
    java.lang.String ovt -> nKdl
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> OsLC
    29:29:java.lang.String[] getPars() -> KoPI
    34:34:java.lang.String getOvt() -> lCvq
react.rai.RAIEventType -> XSJk:
    react.rai.RAIEventType FIRE_ACTION -> XnJs
    react.rai.RAIEventType NOTE_GOAL_FAILING -> Gkxj
    react.rai.RAIEventType NOTE_GOAL_FIXED -> QaEt
    java.lang.String[] msgs -> ymfw
    react.rai.RAIEventType[] ENUM$VALUES -> rGQE
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> DGtr
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> AFjc
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedEntityCounts -> xaGL:
    boolean failing -> gqeI
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> ssaA
    91:134:void onPropigated() -> PSiy
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> AFjc
react.rai.goals.GoalReducedEntityCounts$1 -> xaGL$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> ymfj
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> xaGL$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> ymfj
    org.bukkit.Chunk val$lx -> DtPf
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> OsCq:
    boolean failing -> gqeI
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> ssaA
    72:76:void onPropigated() -> PSiy
react.rai.goals.GoalStableChunkTime$1 -> OsCq$1:
    react.rai.goals.GoalStableChunkTime this$0 -> UlpH
    1:48:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> MRiw:
    boolean failing -> gqeI
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> PSiy
    35:35:void letUp() -> BleX
    40:77:boolean onCheckFailing() -> ssaA
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> AFjc
react.rai.goals.GoalStableEntityTime$1 -> MRiw$1:
    react.rai.goals.GoalStableEntityTime this$0 -> JmPq
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> XdKr:
    boolean failing -> gqeI
    react.glang.GMap reocc -> HMXY
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> PSiy
    88:125:boolean onCheckFailing() -> ssaA
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> AFjc
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> HCNu
react.rai.goals.GoalStableFluidTime$1 -> XdKr$1:
    react.rai.goals.GoalStableFluidTime this$0 -> LjfT
    org.bukkit.Chunk val$lx -> DtPf
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> XdKr$2:
    react.rai.goals.GoalStableFluidTime this$0 -> LjfT
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> PmUt:
    boolean failing -> gqeI
    react.glang.GMap reocc -> HMXY
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> PSiy
    89:125:boolean onCheckFailing() -> ssaA
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> AFjc
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> HCNu
react.rai.goals.GoalStableHopperTime$1 -> PmUt$1:
    react.rai.goals.GoalStableHopperTime this$0 -> Vgap
    org.bukkit.Chunk val$lx -> DtPf
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> PmUt$2:
    react.rai.goals.GoalStableHopperTime this$0 -> Vgap
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> XIwx:
    int d -> d
    boolean failing -> gqeI
    react.glang.GMap reocc -> HMXY
    32:37:void <init>() -> <init>
    42:86:void onPropigated() -> PSiy
    91:128:boolean onCheckFailing() -> ssaA
    28:28:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> AFjc
    27:27:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> HCNu
react.rai.goals.GoalStableRedstoneTime$1 -> XIwx$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> Enbd
    org.bukkit.Chunk val$lx -> DtPf
    1:68:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    73:83:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> XIwx$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> Enbd
    1:110:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    115:124:void run() -> run
react.rai.goals.GoalStableTickTime -> iCYL:
    boolean failing -> gqeI
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> PSiy
    34:58:boolean onCheckFailing() -> ssaA
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> AFjc
react.rai.goals.GoalStableTickTime$1 -> iCYL$1:
    react.rai.goals.GoalStableTickTime this$0 -> yvXQ
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.redstone.RedstoneEvent -> DGrP:
    react.surge.util.MaterialBlock block -> HMYC
    org.bukkit.util.Vector vector -> IHLC
    byte from -> MKfY
    byte to -> Fyuy
    16:22:void <init>(org.bukkit.event.block.BlockRedstoneEvent) -> <init>
    26:26:react.surge.util.MaterialBlock getBlock() -> Yfsr
    31:32:void setBlock(react.surge.util.MaterialBlock) -> AFjc
    36:36:org.bukkit.util.Vector getVector() -> pQEW
    41:42:void setVector(org.bukkit.util.Vector) -> AFjc
    46:46:byte getFrom() -> TOUG
    51:52:void setFrom(byte) -> dLoR
    56:56:byte getTo() -> GHnW
    61:62:void setTo(byte) -> eGah
react.redstone.RedstoneTracker -> lwYa:
    org.bukkit.World world -> world
    react.controller.FeatureController fc -> xrtI
    react.glang.GList events -> DRNi
    boolean ticking -> mjcq
    react.surge.sched.Task task -> bPrW
    boolean nms -> pAMN
    int tr -> hRfn
    react.gmath.Average aav -> SVKl
    boolean handleTicking -> YNlD
    33:55:void <init>(org.bukkit.World) -> <init>
    59:61:void close() -> close
    65:98:void tick() -> tick
    103:127:void set(org.bukkit.Location,react.surge.util.MaterialBlock) -> HCNu
    131:152:void enact(react.redstone.RedstoneEvent) -> AFjc
    157:184:void on(org.bukkit.event.block.BlockRedstoneEvent) -> AFjc
react.redstone.RedstoneTracker$1 -> lwYa$1:
    react.redstone.RedstoneTracker this$0 -> xIEQ
    1:47:void <init>(react.redstone.RedstoneTracker,java.lang.String,int) -> <init>
    52:53:void run() -> run
react.remote.client.RemoteClient -> IORO:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> PLan
    boolean authenticated -> yKfk
    react.remote.server.ServerInfo info -> XKhn
    react.glang.GMap frems -> fTqb
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> WFkm
    51:51:react.glang.GMap getFrames() -> QVkp
    56:75:int computeFrames() -> qukB
    80:92:boolean clearToken() -> jGCe
    97:110:boolean updateServerInfo() -> HCaT
    115:129:boolean refreshToken() -> YgUL
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> flgt
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> NxWa
    165:165:boolean isAuthenticated() -> hILl
    170:170:react.remote.server.ServerInfo getInfo() -> rFIU
react.remote.client.packet.CPacketClearToken -> xOgc:
    java.lang.String token -> PLan
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> AFjc
    33:34:void fromBytes(react.gnet.streams.ISS) -> AFjc
    38:38:java.lang.String getToken() -> NxWa
    43:44:void setToken(java.lang.String) -> AXNi
react.remote.client.packet.CPacketComputeFrames -> VUXG:
    java.lang.String token -> PLan
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> AFjc
    33:34:void fromBytes(react.gnet.streams.ISS) -> AFjc
    38:38:java.lang.String getToken() -> NxWa
    43:44:void setToken(java.lang.String) -> AXNi
react.remote.client.packet.CPacketGetInfo -> HwBx:
    java.lang.String token -> PLan
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> AFjc
    33:34:void fromBytes(react.gnet.streams.ISS) -> AFjc
    38:38:java.lang.String getToken() -> NxWa
    43:44:void setToken(java.lang.String) -> AXNi
react.remote.client.packet.CPacketGetToken -> ggic:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> AFjc
    36:38:void fromBytes(react.gnet.streams.ISS) -> AFjc
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> LaLf:
    java.lang.String token -> PLan
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> AFjc
    33:34:void fromBytes(react.gnet.streams.ISS) -> AFjc
    38:38:java.lang.String getToken() -> NxWa
    43:44:void setToken(java.lang.String) -> AXNi
react.remote.client.packet.ClientPacket -> xOhL:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> AFjc
    void fromBytes(react.gnet.streams.ISS) -> AFjc
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> XdKr
    42:42:java.lang.String getPacketName() -> PmUt
react.remote.client.packet.ClientPacketType -> awYf:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> LkKA
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> lMqP
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> FFtf
    react.remote.client.packet.ClientPacketType GET_INFO -> xauY
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> hSHC
    react.remote.client.packet.ClientPacketType[] $VALUES -> yKgD
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> ogPs:
    react.glang.GMap compute(long,long) -> flgt
react.remote.server.KnownUser -> pirt:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> sPyA:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> AFjc
    38:41:void fromBytes(react.gnet.streams.ISS) -> AFjc
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> MdPM:
    react.glang.GList users -> VVdX
    react.glang.GMap session -> Iraw
    react.glang.GMap lastCompute -> qUQV
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> BIwD
    44:45:void registerUser(react.remote.server.KnownUser) -> AFjc
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> HCNu
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> MuEG
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> yuAA
    react.remote.server.IFrameComputer getFrameComputer() -> NUiQ
    170:171:void markLastCompute(react.remote.server.KnownUser) -> flgt
    175:180:long getLastCompute(react.remote.server.KnownUser) -> yuAA
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> AFjc
    190:191:void deleteSession(react.remote.server.KnownUser) -> flhV
    195:195:java.lang.String createToken() -> BKCB
react.remote.server.ServerInfo -> jiBf:
    java.lang.String motd -> IbAd
    int gameProtocol -> fDQD
    java.lang.String gameVersion -> ujNa
    java.lang.String reactVersion -> QiWD
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> skwP
    int viewDistance -> viewDistance
    int gamePort -> DROf
    java.lang.String gameAddress -> LbXN
    react.glang.GList remotePlugins -> RBFe
    react.glang.GList worlds -> BKjU
    react.glang.GList actions -> Iinw
    react.glang.GList samplers -> tVIa
    26:26:react.remote.server.ServerInfo empty() -> Gsbp
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> AFjc
    146:159:void fromBytes(react.gnet.streams.ISS) -> AFjc
    java.lang.String dgetMotd() -> bGRc
    int dgetGameProtocol() -> NEJK
    java.lang.String dgetGameVersion() -> Xkwy
    java.lang.String dgetReactVersion() -> jFYI
    int dgetMaxPlayers() -> MkyU
    react.glang.GList dgetConnectedPlayers() -> YUjE
    int dgetViewDistance() -> xWpg
    int dgetGamePort() -> TplU
    java.lang.String dgetGameAddress() -> NEHW
    react.glang.GList dgetRemotePlugins() -> iTVb
    react.glang.GList dgetWorlds() -> HdyA
    react.glang.GList dgetActions() -> GavC
    react.glang.GList dgetSamplers() -> DXmA
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> XRof
    199:199:java.lang.String getGameVersion() -> Nftx
    204:204:java.lang.String getReactVersion() -> VTyl
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> bPLt
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> Aqqe
    229:229:java.lang.String getGameAddress() -> pGrc
    234:234:react.glang.GList getRemotePlugins() -> jNqy
    239:239:react.glang.GList getWorlds() -> ndPh
    244:244:react.glang.GList getActions() -> SdwT
    249:249:react.glang.GList getSamplers() -> HCbE
react.remote.server.ServerInfo$1 -> jiBf$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> HdyA
    37:37:int dgetViewDistance() -> xWpg
    43:43:react.glang.GList dgetRemotePlugins() -> iTVb
    49:49:java.lang.String dgetReactVersion() -> jFYI
    55:55:java.lang.String dgetMotd() -> bGRc
    61:61:int dgetMaxPlayers() -> MkyU
    67:67:java.lang.String dgetGameVersion() -> Xkwy
    73:73:int dgetGameProtocol() -> NEJK
    79:79:int dgetGamePort() -> TplU
    85:85:java.lang.String dgetGameAddress() -> NEHW
    91:91:react.glang.GList dgetConnectedPlayers() -> YUjE
    97:97:react.glang.GList dgetActions() -> GavC
    103:103:react.glang.GList dgetSamplers() -> DXmA
react.remote.server.packet.ComputedFrame -> Diue:
    react.glang.GMap values -> keBF
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> AFjc
    28:36:void fromBytes(react.gnet.streams.ISS) -> AFjc
    40:40:react.glang.GMap getValues() -> DakN
    45:46:void setValues(react.glang.GMap) -> flgt
react.remote.server.packet.SPacketOk -> FNYj:
    boolean ok -> vKNT
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> AFjc
    33:34:void fromBytes(react.gnet.streams.ISS) -> AFjc
    38:38:boolean isOk() -> BRtB
    43:44:void setOk(boolean) -> NLqO
react.remote.server.packet.SPacketSendFrames -> kstw:
    react.glang.GMap frames -> SgMC
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> AFjc
    36:44:void fromBytes(react.gnet.streams.ISS) -> AFjc
    48:48:react.glang.GMap getFrames() -> QVkp
    53:54:void setFrames(react.glang.GMap) -> yuAA
react.remote.server.packet.SPacketSendInfo -> gWID:
    react.remote.server.ServerInfo info -> XKhn
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> AFjc
    33:34:void fromBytes(react.gnet.streams.ISS) -> AFjc
    38:38:react.remote.server.ServerInfo getInfo() -> rFIU
    43:44:void setInfo(react.remote.server.ServerInfo) -> AFjc
react.remote.server.packet.SPacketSendToken -> tLLb:
    java.lang.String token -> PLan
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> AFjc
    33:34:void fromBytes(react.gnet.streams.ISS) -> AFjc
    38:38:java.lang.String getToken() -> NxWa
    43:44:void setToken(java.lang.String) -> AXNi
react.remote.server.packet.ServerPacket -> qCDA:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> AFjc
    void fromBytes(react.gnet.streams.ISS) -> AFjc
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> XdKr
    42:42:java.lang.String getPacketName() -> PmUt
react.remote.server.packet.ServerPacketType -> kkcs:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> MmkU
    react.remote.server.packet.ServerPacketType SEND_INFO -> sBDo
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> MSxf
    react.remote.server.packet.ServerPacketType OK -> APwW
    react.remote.server.packet.ServerPacketType[] $VALUES -> baur
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> NUoN:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleAsyncQueue$1 -> NUoN$1:
    react.sampler.SampleAsyncQueue this$0 -> QiVs
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleChunkTime -> sjkJ:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleChunkTime$1 -> sjkJ$1:
    react.sampler.SampleChunkTime this$0 -> cKfy
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleChunksLoaded -> pbBa:
    react.graph.IFormatter formatter -> uaWL
    17:27:void <init>() -> <init>
    32:38:void construct() -> PAwa
    43:44:void sample() -> dUcD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleChunksLoaded$1 -> pbBa$1:
    react.sampler.SampleChunksLoaded this$0 -> dOJw
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> YLpO
react.sampler.SampleChunksLoadedPerSecond -> pHOi:
    react.gmath.Average a -> pQlN
    react.graph.IFormatter formatter -> uaWL
    16:29:void <init>() -> <init>
    34:40:void construct() -> PAwa
    45:47:void sample() -> dUcD
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleChunksLoadedPerSecond$1 -> pHOi$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> VMqy
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> YLpO
react.sampler.SampleEntitiesDrops -> wCqv:
    react.graph.IFormatter formatter -> uaWL
    17:27:void <init>() -> <init>
    32:38:void construct() -> PAwa
    43:44:void sample() -> dUcD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleEntitiesDrops$1 -> wCqv$1:
    react.sampler.SampleEntitiesDrops this$0 -> fCnh
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> YLpO
react.sampler.SampleEntitiesLiving -> fugR:
    react.graph.IFormatter formatter -> uaWL
    17:27:void <init>() -> <init>
    32:38:void construct() -> PAwa
    43:44:void sample() -> dUcD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleEntitiesLiving$1 -> fugR$1:
    react.sampler.SampleEntitiesLiving this$0 -> WYet
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> YLpO
react.sampler.SampleEntitiesTiles -> vkdI:
    react.graph.IFormatter formatter -> uaWL
    17:27:void <init>() -> <init>
    32:38:void construct() -> PAwa
    43:44:void sample() -> dUcD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleEntitiesTiles$1 -> vkdI$1:
    react.sampler.SampleEntitiesTiles this$0 -> KhGC
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> YLpO
react.sampler.SampleEntitiesTotal -> fJrP:
    react.graph.IFormatter formatter -> uaWL
    17:27:void <init>() -> <init>
    32:38:void construct() -> PAwa
    43:44:void sample() -> dUcD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleEntitiesTotal$1 -> fJrP$1:
    react.sampler.SampleEntitiesTotal this$0 -> uGjD
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> YLpO
react.sampler.SampleEntityDroppedTicks -> ETGF:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleEntityDroppedTicks$1 -> ETGF$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> cdyL
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleEntityTime -> Oisd:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleEntityTime$1 -> Oisd$1:
    react.sampler.SampleEntityTime this$0 -> PwUh
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleEntityTimeLock -> VTvU:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleEntityTimeLock$1 -> VTvU$1:
    react.sampler.SampleEntityTimeLock this$0 -> opkt
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleExplosionTime -> fltx:
    react.graph.IFormatter formatter -> uaWL
    17:27:void <init>() -> <init>
    32:38:void construct() -> PAwa
    43:44:void sample() -> dUcD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleExplosionTime$1 -> fltx$1:
    react.sampler.SampleExplosionTime this$0 -> oOJV
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> YLpO
react.sampler.SampleFluidPerSecond -> EBda:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleFluidPerSecond$1 -> EBda$1:
    react.sampler.SampleFluidPerSecond this$0 -> OAQC
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleFluidPerTick -> fTEI:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    46:53:void sample() -> dUcD
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleFluidPerTick$1 -> fTEI$1:
    react.sampler.SampleFluidPerTick this$0 -> iUko
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleFluidTickTime -> sQYF:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleFluidTickTime$1 -> sQYF$1:
    react.sampler.SampleFluidTickTime this$0 -> pbqU
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleFluidTickUtilization -> QNXS:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    46:53:void sample() -> dUcD
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleFluidTickUtilization$1 -> QNXS$1:
    react.sampler.SampleFluidTickUtilization this$0 -> JmUs
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleHopperPerSecond -> LrNB:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleHopperPerSecond$1 -> LrNB$1:
    react.sampler.SampleHopperPerSecond this$0 -> FWxI
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleHopperPerTick -> lMEQ:
    react.graph.IFormatter formatter -> uaWL
    18:29:void <init>() -> <init>
    34:40:void construct() -> PAwa
    47:54:void sample() -> dUcD
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleHopperPerTick$1 -> lMEQ$1:
    react.sampler.SampleHopperPerTick this$0 -> Cybo
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleHopperTickTime -> CftS:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleHopperTickTime$1 -> CftS$1:
    react.sampler.SampleHopperTickTime this$0 -> ghwk
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleHopperTickUtilization -> HnTO:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    46:53:void sample() -> dUcD
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleHopperTickUtilization$1 -> HnTO$1:
    react.sampler.SampleHopperTickUtilization this$0 -> vvEU
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleMemoryAllocated -> aTwl:
    react.graph.IFormatter formatter -> uaWL
    17:27:void <init>() -> <init>
    32:38:void construct() -> PAwa
    43:44:void sample() -> dUcD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleMemoryAllocated$1 -> aTwl$1:
    react.sampler.SampleMemoryAllocated this$0 -> eQok
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> YLpO
react.sampler.SampleMemoryAllocationPerSecond -> vARx:
    react.graph.IFormatter formatter -> uaWL
    17:27:void <init>() -> <init>
    32:38:void construct() -> PAwa
    43:44:void sample() -> dUcD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleMemoryAllocationPerSecond$1 -> vARx$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> maxX
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> YLpO
react.sampler.SampleMemoryFree -> gglC:
    react.graph.IFormatter formatter -> uaWL
    17:27:void <init>() -> <init>
    32:38:void construct() -> PAwa
    43:44:void sample() -> dUcD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleMemoryFree$1 -> gglC$1:
    react.sampler.SampleMemoryFree this$0 -> iwny
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> YLpO
react.sampler.SampleMemoryMax -> KTxy:
    react.graph.IFormatter formatter -> uaWL
    17:27:void <init>() -> <init>
    32:38:void construct() -> PAwa
    43:44:void sample() -> dUcD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleMemoryMax$1 -> KTxy$1:
    react.sampler.SampleMemoryMax this$0 -> XByO
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> YLpO
react.sampler.SampleMemoryUse -> DbHS:
    react.graph.IFormatter formatter -> uaWL
    17:27:void <init>() -> <init>
    32:38:void construct() -> PAwa
    43:44:void sample() -> dUcD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleMemoryUse$1 -> DbHS$1:
    react.sampler.SampleMemoryUse this$0 -> Aaym
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> YLpO
react.sampler.SamplePhysicsTickTime -> ogSY:
    react.graph.IFormatter formatter -> uaWL
    17:27:void <init>() -> <init>
    32:38:void construct() -> PAwa
    43:44:void sample() -> dUcD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SamplePhysicsTickTime$1 -> ogSY$1:
    react.sampler.SamplePhysicsTickTime this$0 -> hAfn
    1:19:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> YLpO
react.sampler.SampleRedstonePerSecond -> PukP:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleRedstonePerSecond$1 -> PukP$1:
    react.sampler.SampleRedstonePerSecond this$0 -> Sfnn
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleRedstonePerTick -> eGqp:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    46:53:void sample() -> dUcD
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleRedstonePerTick$1 -> eGqp$1:
    react.sampler.SampleRedstonePerTick this$0 -> OAQP
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleRedstoneTickTime -> qvKA:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleRedstoneTickTime$1 -> qvKA$1:
    react.sampler.SampleRedstoneTickTime this$0 -> VEeT
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleRedstoneTickUtilization -> YDpL:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    46:53:void sample() -> dUcD
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleRedstoneTickUtilization$1 -> YDpL$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> kKQW
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleSyncQueue -> DYVo:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleSyncQueue$1 -> DYVo$1:
    react.sampler.SampleSyncQueue this$0 -> plBi
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleTickTime -> jiDk:
    react.graph.IFormatter formatter -> uaWL
    react.gmath.Average aa -> DcTn
    17:29:void <init>() -> <init>
    34:40:void construct() -> PAwa
    45:47:void sample() -> dUcD
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleTickTime$1 -> jiDk$1:
    react.sampler.SampleTickTime this$0 -> WYiY
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> YLpO
react.sampler.SampleTickUtilization -> NoeV:
    react.graph.IFormatter formatter -> uaWL
    react.gmath.Average aa -> DcTn
    17:29:void <init>() -> <init>
    34:40:void construct() -> PAwa
    45:47:void sample() -> dUcD
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleTickUtilization$1 -> NoeV$1:
    react.sampler.SampleTickUtilization this$0 -> ekcR
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> YLpO
react.sampler.SampleTicksPerSecond -> NgTw:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleTicksPerSecond$1 -> NgTw$1:
    react.sampler.SampleTicksPerSecond this$0 -> gqiI
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleTileDroppedTicks -> uqTg:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleTileDroppedTicks$1 -> uqTg$1:
    react.sampler.SampleTileDroppedTicks this$0 -> lVeJ
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleTileTime -> Diwm:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleTileTime$1 -> Diwm$1:
    react.sampler.SampleTileTime this$0 -> vdbJ
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.sampler.SampleTileTimeLock -> ejWF:
    react.graph.IFormatter formatter -> uaWL
    18:28:void <init>() -> <init>
    33:39:void construct() -> PAwa
    44:45:void sample() -> dUcD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> GkCX
react.sampler.SampleTileTimeLock$1 -> ejWF$1:
    react.sampler.SampleTileTimeLock this$0 -> wFCI
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> YLpO
react.security.checkpoints.SecurityCheckpointAlpha -> jhdR:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> fvNo
    78:148:void doScan(java.lang.Runnable) -> HCNu
    152:181:byte[] readResource(java.io.File,java.lang.String) -> AFjc
    186:217:react.glang.GMap scan(java.io.File) -> HCNu
    150:150:byte[] access$0(java.io.File,java.lang.String) -> HCNu
react.security.checkpoints.SecurityCheckpointAlpha$1 -> jhdR$1:
    java.lang.Runnable val$r -> SgOJ
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> jhdR$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> YOMW
    java.lang.Runnable val$r -> SgOJ
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> XSOk:
    java.lang.String ip -> IXos
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> BmBX:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> BmBX$1:
    react.security.locks.SecurityLockAlpha this$0 -> FrKO
    java.io.File val$f -> tMYd
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> wnhy:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> gfyR
react.slate.PhantomSlate -> vkeg:
    react.glang.GList lines -> bQXE
    react.glang.GList viewers -> xQVA
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> nmkR
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> axAV
    44:45:void set(int,java.lang.String) -> HCNu
    50:51:void setLines(react.glang.GList) -> DqxC
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> HwBx
    91:95:void addViewer(org.bukkit.entity.Player) -> gfyR
    100:102:void removeViewer(org.bukkit.entity.Player) -> Qojx
    107:107:react.glang.GList getViewers() -> tnUo
    113:113:boolean isViewing(org.bukkit.entity.Player) -> pHAg
    119:120:void addLine(java.lang.String) -> vHtE
    125:126:void clearLines() -> ryRA
react.slate.Slate -> VCur:
    void build() -> HwBx
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> axAV
    void set(int,java.lang.String) -> HCNu
    void setLines(react.glang.GList) -> DqxC
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> gfyR
    void addLine(java.lang.String) -> vHtE
    void clearLines() -> ryRA
    void removeViewer(org.bukkit.entity.Player) -> Qojx
    react.glang.GList getViewers() -> tnUo
    boolean isViewing(org.bukkit.entity.Player) -> pHAg
    void update() -> update
react.slate.SlateUtil -> KTxS:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> eYXp
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> ECLR
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> AFjc
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> HCNu
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> flgt
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> AFjc
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> AFjc
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> HCNu
    186:196:java.lang.String convertJSON(java.lang.String) -> NffA
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> HCNu
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> AFjc
react.surge.Main -> vcTw:
    react.glang.GList plugins -> KyJR
    react.glang.GMap pluginInstances -> qUQp
    react.glang.GList controllerSet -> PTsl
    react.glang.GMap anchors -> nmkV
    react.glang.GList classes -> TrcC
    java.lang.reflect.Field nsField -> ebpd
    java.lang.reflect.Field thField -> qDQI
    react.glang.GList tracks -> xjkU
    long nsf -> bPxs
    42:46:void <clinit>() -> <clinit>
    48:51:void <init>() -> <init>
    57:57:void onControllerRegistry() -> uiIG
    62:81:long getNanoSync() -> PvOk
    86:87:void requestResetNanos() -> WqsE
    91:99:void requestReload() -> pbJT
    105:114:void requestReload(java.lang.Runnable) -> flgt
    119:133:int getThreadCount() -> getThreadCount
    144:202:void onStart(react.surge.util.Protocol) -> AFjc
    210:252:void onStop() -> uhgs
    258:258:void onPostInit() -> qTKf
    264:264:void onPreInit() -> pbIv
    268:279:void shutDownAmps() -> lxAT
    283:492:void initializeAmps() -> GcEU
    497:538:void doScan() -> jiIJ
    542:564:void scanForPoolDefiners() -> ArSm
    568:584:void scanForRawEvents() -> oUst
    588:604:void scanForDynamicTrack() -> dEUL
    608:629:void scanForAmps() -> XAqg
    634:645:void onTick() -> rpTP
react.surge.Main$1 -> vcTw$1:
    1:91:void <init>() -> <init>
    97:97:void run() -> run
react.surge.PluginAmp -> ivao:
    react.surge.control.AmpedPlugin plugin -> PUVs
    boolean connected -> connected
    int masterTask -> QPIx
    java.lang.Runnable onReload -> jjTP
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> hkRv
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> sYok
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> AFjc
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> AFjc
    123:124:void stopTask(int) -> VwOA
    128:128:react.surge.control.AmpedPlugin getPlugin() -> YUvK
    133:133:int getMasterTask() -> Sefs
    138:138:java.lang.Runnable getOnReload() -> bOoR
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> AFjc
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> dUcD
    158:159:void setOnReload(java.lang.Runnable) -> yuAA
    67:67:void access$0(react.surge.PluginAmp) -> AFjc
react.surge.PluginAmp$1 -> ivao$1:
    react.surge.PluginAmp this$0 -> lFFk
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> ivao$2:
    react.surge.PluginAmp this$0 -> lFFk
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> ivao$3:
    react.surge.PluginAmp this$0 -> lFFk
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> OHTI:
    react.surge.PluginAmp amp -> YOQT
    react.glang.GList tickComponents -> tpAJ
    react.glang.GList atickComponents -> wWFh
    react.surge.sched.TaskManager taskmgr -> dXAd
    react.surge.hotload.HotloadManager hotloadmgr -> nByo
    java.lang.Thread mainThread -> urcS
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> AFjc
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> GaqN
    44:44:java.io.File folder() -> OsMa
    49:51:java.io.File getPluginJarFile() -> uXEx
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> yuAA
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> QWON
    74:74:react.glang.GList getTickComponents() -> ssas
    79:79:react.glang.GList getAsyncTickComponents() -> jOVH
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> AFjc
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> HCNu
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> HCNu
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> jhhA
    126:126:boolean hasAmp() -> Cwxj
    131:131:react.surge.PluginAmp getAmp() -> mqqA
    136:136:react.surge.sched.TaskManager getTaskManager() -> sHmu
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> TyjI
react.surge.cluster.Cluster -> vASE:
    react.surge.cluster.ClusterType type -> JeHl
    java.lang.Object t -> QynJ
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> ylcF
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> ncnX:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> Yocf:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> ksvO:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> Qgkf:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> KCwW:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> OjWU:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> Elyn:
    react.surge.cluster.ClusterType INT -> PTvj
    react.surge.cluster.ClusterType BOOLEAN -> SENu
    react.surge.cluster.ClusterType STRING -> jrbj
    react.surge.cluster.ClusterType STRING_LIST -> RRkR
    react.surge.cluster.ClusterType DOUBLE -> mQYE
    react.surge.cluster.ClusterType LONG -> hAiC
    react.surge.cluster.ClusterType[] ENUM$VALUES -> lWGR
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> GtCy:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> Trch
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> AFjc
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> AFjc
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> yRpM
react.surge.cluster.ConfigurationDataOutput -> qBfe:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> HCNu
react.surge.cluster.DataCluster -> XcrT:
    react.glang.GMap clusters -> FqlF
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> jyhv
    29:33:void fromJson(react.json.JSONObject) -> flhV
    37:44:react.json.JSONObject toJson() -> QqBX
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> MBRR
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> AFjc
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> STRp
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> TqFL
    194:195:void set(java.lang.String,int) -> flhV
    199:200:void set(java.lang.String,boolean) -> flgt
    204:205:void set(java.lang.String,double) -> flgt
    209:210:void set(java.lang.String,long) -> flgt
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> AFjc
react.surge.cluster.ICluster -> TGEU:
    react.surge.cluster.ClusterType getType() -> ylcF
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> uheb:
react.surge.cluster.IDataInput -> iTal:
    react.surge.cluster.DataCluster read(java.io.File) -> flgt
react.surge.cluster.IDataOutput -> RtCa:
    void write(react.surge.cluster.DataCluster,java.io.File) -> AFjc
react.surge.cluster.Key -> xOkr:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> wDXh:
    int value() -> value
react.surge.cluster.KeyStore -> yAlv:
react.surge.cluster.ReflectedConfigurationException -> xaMw:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> NNDl:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> flgt
react.surge.cluster.YamlDataOutput -> woMN:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> AFjc
react.surge.collection.GSound -> bOlb:
    java.lang.String sound -> UeGC
    org.bukkit.Sound iSound -> nnNe
    java.lang.Float volume -> jHOh
    java.lang.Float pitch -> Hwqf
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> TOBR
    61:72:void play(org.bukkit.Location) -> flhV
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> AFjc
    93:93:java.lang.String getSound() -> LYAe
    98:99:void setSound(java.lang.String) -> GkCX
    103:103:org.bukkit.Sound getiSound() -> INwC
    108:109:void setiSound(org.bukkit.Sound) -> AFjc
    113:113:java.lang.Float getVolume() -> UJJH
    118:119:void setVolume(java.lang.Float) -> AFjc
    123:123:java.lang.Float getPitch() -> Iyjp
    128:129:void setPitch(java.lang.Float) -> HCNu
react.surge.control.AmpedPlugin -> BldF:
    react.glang.GList controllers -> UugH
    react.gconcurrent.ParallelPoolManager pp -> Uddx
    react.surge.server.CoreTickThread ctt -> lVfY
    24:27:void <init>() -> <init>
    void doScan() -> jiIJ
    long getNanoSync() -> PvOk
    int getThreadCount() -> getThreadCount
    39:39:void onLoad() -> onLoad
    46:85:void onEnable() -> onEnable
    90:96:void onDisable() -> onDisable
    101:101:react.glang.GList getControllers() -> tnSy
    107:108:void registerController(react.surge.control.IController) -> AFjc
    113:124:void onTick() -> rpTP
    129:129:java.lang.String getTickName() -> jplG
    135:135:react.gconcurrent.ParallelPoolManager getThreadPool() -> jiGo
    141:256:void destroyOldThreads() -> bOnV
    void onControllerRegistry() -> uiIG
    void onStart(react.surge.util.Protocol) -> AFjc
    void onStop() -> uhgs
    void onPostInit() -> qTKf
    void onPreInit() -> pbIv
react.surge.control.AmpedPlugin$1 -> BldF$1:
    react.surge.control.AmpedPlugin this$0 -> pbrD
    1:56:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    61:61:long getNanoGate() -> cdJe
react.surge.control.AmpedPlugin$2 -> BldF$2:
    react.surge.control.AmpedPlugin this$0 -> pbrD
    1:154:void <init>(react.surge.control.AmpedPlugin) -> <init>
    159:249:void run() -> run
react.surge.control.Control -> ssaA:
react.surge.control.Controller -> PSiy:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> eHVI:
react.surge.control.Enable -> wnka:
react.surge.control.IController -> Smtt:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> OsLC:
react.surge.control.Plugin -> KoPI:
react.surge.control.SurgePlugin -> lCvq:
    void onStart(react.surge.util.Protocol) -> AFjc
    void onStop() -> uhgs
    void onPostInit() -> qTKf
    void onPreInit() -> pbIv
    void onControllerRegistry() -> uiIG
    void registerController(react.surge.control.IController) -> AFjc
    react.glang.GList getControllers() -> tnSy
    react.gconcurrent.ParallelPoolManager getThreadPool() -> jiGo
react.surge.hotload.HotloadManager -> DGtr:
    react.glang.GMap filemods -> rGVB
    react.glang.GMap filesizes -> TsDv
    react.glang.GMap fileacts -> LYkS
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> AFjc
    35:38:void untrack(java.io.File) -> yuAA
    42:45:void untrackall() -> ydRH
    50:86:void onTick() -> rpTP
    91:91:java.lang.String getTickName() -> jplG
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> AFjc
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> HCNu
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> flgt
react.surge.hotload.HotloadManager$1 -> DGtr$1:
    react.surge.hotload.HotloadManager this$0 -> Jlvh
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> BleX:
    boolean init -> TPbE
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> MwAt
    java.lang.Class IChatBaseComponent -> QGYA
    java.lang.Class ChatSerializer -> TsFB
    java.lang.Class PacketPlayOutPlayerInfo -> IXsA
    java.lang.Class PlayerInfoData -> wNUF
    java.lang.Class EnumPlayerInfoAction -> MKoU
    java.lang.Class GameProfile -> ekgO
    java.lang.Class EnumGamemode -> TsHN
    java.lang.Class TileEntitySkull -> kSeo
    java.lang.Class LoadingCache -> USfj
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> Yfsr:
    react.surge.nms.NMSX bountifulAPI -> vKUS
    boolean useOldMethods -> jaeD
    java.lang.String nmsver -> EUYq
    java.lang.Object eTimes -> RmAt
    java.lang.Object eTitle -> jbEf
    java.lang.Object eSubtitle -> dqUM
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> AFjc
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> WFkm
    75:89:java.lang.Class getCBClass(java.lang.String) -> VwOA
    96:104:java.lang.Object serializeChat(java.lang.String) -> dUcD
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> AFjc
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> AFjc
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> hRAC
    151:151:java.lang.String craftPackage() -> ndSL
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> AFjc
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> AFjc
    197:207:java.lang.Class getNMSClass(java.lang.String) -> PAwa
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> AFjc
    279:280:void clearTitle(org.bukkit.entity.Player) -> aCdb
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> HCNu
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> AFjc
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> AFjc
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> ivSW
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> TqFL
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> XuAe
    434:447:int ping(org.bukkit.entity.Player) -> yklp
react.surge.nms.NMSX$1 -> Yfsr$1:
    org.bukkit.entity.Player val$player -> RteB
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> Yfsr$2:
    org.bukkit.entity.Player val$player -> RteB
    java.lang.String val$message -> GRoS
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> pQEW:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> kIgU
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> AFjc
    68:82:void clearTitle(org.bukkit.entity.Player) -> aCdb
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> AFjc
react.surge.nms.PacketUtil$V -> pQEW$AFjc:
    react.surge.nms.PacketUtil$V R17 -> igRr
    react.surge.nms.PacketUtil$V R18 -> Nyfp
    react.surge.nms.PacketUtil$V R19 -> HftI
    react.surge.nms.PacketUtil$V R111 -> NNsH
    react.surge.nms.PacketUtil$V R110 -> aVis
    react.surge.nms.PacketUtil$V R112 -> Gtqt
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> MUBL
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> TOUG:
    java.lang.String title -> title
    java.lang.String subTitle -> jXsK
    java.lang.String action -> action
    java.lang.Integer fadeIn -> QrOl
    java.lang.Integer fadeOut -> UeJJ
    java.lang.Integer stayTime -> nKmY
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> CoSv
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> LrTG
    79:80:void setSubTitle(java.lang.String) -> prWJ
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> CgYT
    99:100:void setFadeIn(java.lang.Integer) -> flgt
    104:104:java.lang.Integer getFadeOut() -> uGGk
    109:110:void setFadeOut(java.lang.Integer) -> yuAA
    114:114:java.lang.Integer getStayTime() -> wnpP
    119:120:void setStayTime(java.lang.Integer) -> flhV
react.surge.nms.VersionBukkit -> GHnW:
    react.surge.nms.VersionBukkit VU -> diDt
    react.surge.nms.VersionBukkit V7 -> oyeI
    react.surge.nms.VersionBukkit V8 -> ebuk
    react.surge.nms.VersionBukkit V9 -> uGpf
    react.surge.nms.VersionBukkit V11 -> NNsN
    react.surge.nms.VersionBukkit V111 -> tgPs
    react.surge.nms.VersionBukkit V112 -> SUot
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> ObvG
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> IXKb
    27:32:boolean uc() -> lwbM
    37:67:react.surge.nms.VersionBukkit get() -> JlPT
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> QVkp:
    void burst(java.lang.Object) -> oxCN
    void setTimeLock(double) -> VUHT
    double getEstimatedTimeUse() -> MtxT
    int flush() -> EnCD
    int flush(react.gbench.Profiler) -> AFjc
    void queue(java.lang.Object) -> qAqx
    void queue(java.util.List) -> flgt
    void queue(java.lang.Object[]) -> AFjc
react.surge.sched.ICancellable -> qukB:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> jGCe:
    void onTick() -> rpTP
    java.lang.String getTickName() -> jplG
react.surge.sched.ITask -> HCaT:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> opJc
    java.lang.String getName() -> getName
    double getComputeTime() -> QFQM
    double getTotalComputeTime() -> baSo
    double getActiveTime() -> JlPd
    boolean hasCompleted() -> XuYO
react.surge.sched.Task -> YgUL:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> uiru
    double computeTime -> HxTd
    double totalComputeTime -> Ypsd
    double activeTime -> jjUH
    boolean completed -> completed
    react.gbench.Profiler profiler -> TXsT
    react.gbench.Profiler activeProfiler -> pARQ
    int ticks -> GcoU
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> yuAA
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> opJc
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> QFQM
    150:150:boolean hasCompleted() -> XuYO
    156:156:double getTotalComputeTime() -> baSo
    162:162:double getActiveTime() -> JlPd
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> flgt
    15:15:void access$1(react.surge.sched.Task,boolean) -> AFjc
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> yuAA
    14:14:void access$3(react.surge.sched.Task,double) -> AFjc
    12:12:void access$4(react.surge.sched.Task,double) -> HCNu
    14:14:double access$5(react.surge.sched.Task) -> flhV
    13:13:void access$6(react.surge.sched.Task,double) -> flgt
    13:13:double access$7(react.surge.sched.Task) -> TqFL
    12:12:double access$8(react.surge.sched.Task) -> dLoR
react.surge.sched.Task$1 -> YgUL$1:
    react.surge.sched.Task this$0 -> lVgs
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> YgUL$2:
    react.surge.sched.Task this$0 -> lVgs
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> YgUL$3:
    react.surge.sched.Task this$0 -> lVgs
    int val$total -> PDWC
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> NxWa:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> uiru
    double computeTime -> HxTd
    double totalComputeTime -> Ypsd
    double activeTime -> jjUH
    boolean completed -> completed
    react.gbench.Profiler profiler -> TXsT
    react.gbench.Profiler activeProfiler -> pARQ
    int ticks -> GcoU
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> yuAA
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> opJc
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> QFQM
    101:101:boolean hasCompleted() -> XuYO
    107:107:double getTotalComputeTime() -> baSo
    113:113:double getActiveTime() -> JlPd
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> AFjc
    12:12:void access$1(react.surge.sched.TaskLater,double) -> AFjc
    13:13:double access$2(react.surge.sched.TaskLater) -> HCNu
    12:12:double access$3(react.surge.sched.TaskLater) -> flgt
    13:13:void access$4(react.surge.sched.TaskLater,double) -> HCNu
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> yuAA
    14:14:double access$6(react.surge.sched.TaskLater) -> flhV
    14:14:void access$7(react.surge.sched.TaskLater,double) -> flgt
react.surge.sched.TaskLater$1 -> NxWa$1:
    react.surge.sched.TaskLater this$0 -> bkNK
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> hILl:
    react.glang.GList tasks -> dMuy
    react.glang.GMap taskProfiles -> lgjH
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> AFjc
    25:35:void onTick() -> rpTP
    39:40:void putFinishingTask(react.surge.sched.ITask) -> HCNu
    44:53:void putTask(react.surge.sched.ITask) -> flgt
    58:58:java.lang.String getTickName() -> jplG
    63:63:react.glang.GList getTasks() -> jXJG
    68:68:react.glang.GMap getTaskProfiles() -> RQeC
react.surge.sched.TaskProfile -> rFIU:
    double activeTime -> jjUH
    double computeTickTime -> RmAS
    double computeTime -> HxTd
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> JlPd
    23:24:void setActiveTime(double) -> jgqm
    28:28:double getComputeTickTime() -> MKGA
    33:34:void setComputeTickTime(double) -> gfyR
    38:38:double getComputeTime() -> QFQM
    43:44:void setComputeTime(double) -> Qojx
react.surge.server.AsyncTick -> BKCB:
react.surge.server.CPS -> Gsbp:
    react.glang.GMap keys -> Xvae
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> fdYG
    46:99:void scan() -> oNEx
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> flgt
react.surge.server.CoreTickThread -> XRof:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> Nftx:
    long memoryFree -> iENn
    long memoryUsed -> gOjA
    long memoryMax -> jbDM
    long lastMemoryUsed -> cwBm
    long memoryUsedAfterGC -> JKVe
    long allocated -> UdhS
    long collected -> tEMb
    long collections -> xkMF
    long sms -> TjUr
    long memoryAllocatedPerTick -> NpuF
    long memoryCollectedPerTick -> UmYQ
    long memoryFullyAllocatedPerTick -> HVTh
    long mah -> FrQf
    long mahs -> TixH
    22:39:void <init>() -> <init>
    void onAllocationSet() -> UlOA
    46:107:void run() -> run
    111:111:long getMemoryFree() -> vIiF
    116:116:long getMemoryUsed() -> getMemoryUsed
    121:121:long getMemoryMax() -> sHpX
    126:126:long getLastMemoryUsed() -> vklQ
    131:131:long getMemoryUsedAfterGC() -> WXbY
    136:136:long getAllocated() -> getAllocated
    141:141:long getCollected() -> oNEi
    146:146:long getCollections() -> HmyG
    151:151:long getSms() -> QgrP
    156:156:long getMemoryAllocatedPerTick() -> KgAu
    161:161:long getMemoryCollectedPerTick() -> LYCq
    166:166:long getMemoryFullyAllocatedPerTick() -> XuWk
    171:171:long getMah() -> Sego
    176:176:long getMahs() -> sIPb
react.surge.server.SuperSampler -> VTyl:
    react.gmath.Average ticksPerSecondL -> rOlE
    react.gmath.Average tickTimeL -> MwFc
    react.gmath.Average mahL -> VyOx
    double ticksPerSecond -> cCKF
    double ticksPerSecondRaw -> mINF
    double tickTime -> SMcI
    double tickTimeRaw -> JCIU
    boolean running -> running
    boolean frozen -> cwDy
    double tickUtilizationRaw -> mIMk
    double tickUtilization -> DkkN
    double leftoverTickTime -> lFJl
    long memoryUse -> usHc
    long memoryAllocated -> oheQ
    long memoryCollected -> TbIQ
    long mahs -> TixH
    int totalChunks -> btBl
    int totalEntities -> lFIo
    int totalDrops -> uivL
    int totalTiles -> TPgE
    int totalLiving -> oiFU
    int chunksLoaded -> jrhO
    int chunksUnloaded -> AYoW
    react.surge.server.WorldMonitor worldMonitor -> Dkib
    react.surge.server.TPSMonitor tpsMonitor -> dqVX
    react.surge.server.MemoryMonitor memoryMonitor -> ecXH
    java.lang.StackTraceElement[] lockStack -> nmrC
    react.glang.GMap spikes -> IXbX
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> rpTP
    154:154:java.lang.String getTickName() -> jplG
    159:159:react.gmath.Average getTicksPerSecondL() -> inWa
    164:164:double getTicksPerSecond() -> nthc
    169:169:double getTicksPerSecondRaw() -> Qgqs
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> KEBN
    184:184:react.gmath.Average getTickTimeL() -> QWSx
    189:189:double getTickTime() -> wfak
    194:194:double getTickTimeRaw() -> IWlj
    199:199:double getTickUtilizationRaw() -> cuYh
    204:204:double getTickUtilization() -> ObPR
    209:209:double getLeftoverTickTime() -> uymL
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> MRxD
    219:219:long getMemoryUse() -> nAtF
    224:224:long getMemoryAllocated() -> cBUo
    229:229:long getMemoryCollected() -> Thmt
    234:234:react.gmath.Average getMahL() -> yRta
    239:239:long getMahs() -> sIPb
    244:244:int getTotalChunks() -> uGJA
    249:249:int getTotalEntities() -> RIUD
    254:254:int getTotalDrops() -> iUGl
    259:259:int getTotalTiles() -> xGaF
    264:264:int getTotalLiving() -> bquO
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> cJdf
    274:274:int getChunksLoaded() -> AHEu
    279:279:int getChunksUnloaded() -> hkWM
    284:285:void setTicksPerSecondL(react.gmath.Average) -> AFjc
    289:290:void setTickTimeL(react.gmath.Average) -> HCNu
    294:295:void setMahL(react.gmath.Average) -> flgt
    299:300:void setTicksPerSecond(double) -> DaVf
    304:305:void setTicksPerSecondRaw(double) -> pHAg
    309:310:void setTickTime(double) -> TOBR
    314:315:void setTickTimeRaw(double) -> aCdb
    319:320:void setRunning(boolean) -> YLpO
    324:325:void setTickUtilizationRaw(double) -> yklp
    329:330:void setTickUtilization(double) -> CoSv
    334:335:void setLeftoverTickTime(double) -> FDwj
    339:340:void setMemoryUse(long) -> VUHT
    344:345:void setMemoryAllocated(long) -> jgqm
    349:350:void setMemoryCollected(long) -> gfyR
    354:355:void setMahs(long) -> Qojx
    359:360:void setTotalChunks(int) -> PAwa
    364:365:void setTotalEntities(int) -> ivSW
    369:370:void setTotalDrops(int) -> prWJ
    374:375:void setTotalTiles(int) -> fdYG
    379:380:void setTotalLiving(int) -> YoTk
    384:385:void setChunksLoaded(int) -> pYEO
    389:390:void setChunksUnloaded(int) -> fcxB
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> AFjc
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> AFjc
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> AFjc
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> jFhf
    419:419:react.glang.GMap getSpikes() -> mPER
    31:31:void access$0(react.surge.server.SuperSampler,int) -> AFjc
    33:33:void access$1(react.surge.server.SuperSampler,int) -> HCNu
    34:34:void access$2(react.surge.server.SuperSampler,int) -> flgt
    32:32:void access$3(react.surge.server.SuperSampler,int) -> yuAA
    35:35:void access$4(react.surge.server.SuperSampler,int) -> flhV
    36:36:void access$5(react.surge.server.SuperSampler,int) -> TqFL
    37:37:void access$6(react.surge.server.SuperSampler,int) -> dLoR
    19:19:void access$7(react.surge.server.SuperSampler,double) -> AFjc
    21:21:void access$8(react.surge.server.SuperSampler,double) -> HCNu
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> AFjc
    19:19:double access$10(react.surge.server.SuperSampler) -> HCNu
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> flgt
    21:21:double access$12(react.surge.server.SuperSampler) -> yuAA
    18:18:void access$13(react.surge.server.SuperSampler,double) -> flgt
    20:20:void access$14(react.surge.server.SuperSampler,double) -> yuAA
    24:24:void access$15(react.surge.server.SuperSampler,double) -> flhV
    20:20:double access$16(react.surge.server.SuperSampler) -> flhV
    25:25:void access$17(react.surge.server.SuperSampler,double) -> TqFL
    25:25:double access$18(react.surge.server.SuperSampler) -> TqFL
    26:26:void access$19(react.surge.server.SuperSampler,double) -> dLoR
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> AFjc
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> dLoR
    27:27:void access$22(react.surge.server.SuperSampler,long) -> AFjc
    28:28:void access$23(react.surge.server.SuperSampler,long) -> HCNu
    29:29:void access$24(react.surge.server.SuperSampler,long) -> flgt
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> eGah
    30:30:void access$26(react.surge.server.SuperSampler,long) -> yuAA
react.surge.server.SuperSampler$1 -> VTyl$1:
    react.surge.server.SuperSampler this$0 -> VyNn
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> AFjc
react.surge.server.SuperSampler$2 -> VTyl$2:
    react.surge.server.SuperSampler this$0 -> VyNn
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> sYtG
    106:107:void onSpike() -> bOqe
react.surge.server.SuperSampler$3 -> VTyl$3:
    react.surge.server.SuperSampler this$0 -> VyNn
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> UlOA
react.surge.server.TPSMonitor -> bPLt:
    double tickTimeMS -> nUAY
    double rawTicksPerSecond -> htqa
    react.gbench.Profiler tickProfiler -> Xvcl
    react.gbench.Profiler tickTimeProfiler -> mjnn
    boolean ticked -> usGP
    java.lang.Thread$State lastState -> jrgA
    double actualTickTimeMS -> lyNH
    double ltt -> lFHs
    long lastTick -> aDmR
    boolean frozen -> cwDy
    java.lang.StackTraceElement[] lockedStack -> HofT
    double lmsx -> GcrO
    23:40:void <init>() -> <init>
    void onTicked() -> sYtG
    void onSpike() -> bOqe
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> AFjc
    160:160:double getTickTimeMS() -> FyVq
    165:165:double getRawTicksPerSecond() -> tUGL
    170:170:react.gbench.Profiler getTickProfiler() -> vIix
    175:175:boolean isTicked() -> RHtQ
    180:181:void markTick() -> ggrX
    185:185:react.gbench.Profiler getTickTimeProfiler() -> TFjI
    190:190:java.lang.Thread$State getLastState() -> KUbL
    195:195:double getActualTickTimeMS() -> LqwN
    200:200:double getLtt() -> rpbp
    205:205:long getLastTick() -> NEGc
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> xPQf
react.surge.server.WorldMonitor -> Aqqe:
    boolean chunksChanged -> hmBE
    boolean dropChanged -> CXFv
    boolean tileChanged -> ahMW
    boolean livingChanged -> vdgc
    boolean totalChanged -> XefD
    boolean updated -> uGuV
    int totalChunks -> btBl
    int totalDrops -> uivL
    int totalTiles -> TPgE
    int totalLiving -> oiFU
    int totalEntities -> lFIo
    int chunksLoaded -> jrhO
    int chunksUnloaded -> AYoW
    long ms -> MBRR
    24:43:void <init>() -> <init>
    48:73:void run() -> run
    void updated(int,int,int,int,int,int,int) -> AFjc
    80:85:void on(org.bukkit.event.world.ChunkLoadEvent) -> HCNu
    90:95:void on(org.bukkit.event.world.ChunkUnloadEvent) -> AFjc
    100:101:void on(org.bukkit.event.entity.EntitySpawnEvent) -> AFjc
    106:107:void on(org.bukkit.event.entity.EntityDeathEvent) -> AFjc
    112:113:void on(org.bukkit.event.player.PlayerDropItemEvent) -> AFjc
    118:119:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> AFjc
    124:125:void on(org.bukkit.event.block.BlockPlaceEvent) -> AFjc
    130:131:void on(org.bukkit.event.block.BlockBreakEvent) -> AFjc
    135:136:void doUpdate() -> rFPD
    140:191:void sample() -> dUcD
    195:201:void sampleTotalCount() -> VVAv
    205:211:void sampleLivingCount() -> hREH
    215:251:void sampleTileCount() -> rEoF
    255:261:void sampleDropCount() -> NpMf
    265:271:void sampleChunkCount() -> XliL
react.surge.text.PhantomSpinner -> pGrc:
    react.surge.text.ProgressSpinner s -> fCyf
    react.surge.text.ProgressSpinner c -> ahPQ
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> jNqy:
    java.lang.String[] chars -> jaiI
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> pJIA
    react.surge.text.ProgressSpinner NETWORK -> kTJy
    react.surge.text.ProgressSpinner CIRCLES -> HVWQ
    react.surge.text.ProgressSpinner RANDOMS -> EMNQ
    react.surge.text.ProgressSpinner MERGERS -> dXGS
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> IGMq
    65:65:int getIndex() -> getIndex
react.surge.util.Amounts -> ndPh:
    react.surge.util.Amounts SINGLE -> opxQ
    react.surge.util.Amounts DUAL -> KFOK
    react.surge.util.Amounts TRI -> wgml
    react.surge.util.Amounts QUAD -> AkUe
    react.surge.util.Amounts HEX -> jriX
    react.surge.util.Amounts OCTA -> dOTr
    int a -> a
    react.surge.util.Amounts[] ENUM$VALUES -> Cpxt
    5:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:23:int a() -> a
    29:37:java.lang.String to(int) -> VTho
    1:1:react.surge.util.Amounts[] values() -> values
    1:1:react.surge.util.Amounts valueOf(java.lang.String) -> valueOf
react.surge.util.Anchor -> HCbE:
    int value() -> value
react.surge.util.Area -> DakN:
    org.bukkit.Location location -> jbII
    java.lang.Double radius -> GJai
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> AFjc
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> gEsB
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> TqFL
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> dLoR
    109:109:boolean isWithin(org.bukkit.Location) -> eGah
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> yuAA
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> AFjc
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> sAEn
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> lMRf
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> XuAe
    257:257:java.lang.Double getRadius() -> Ihou
    268:269:void setRadius(java.lang.Double) -> flgt
    278:283:org.bukkit.Location random() -> DsSk
react.surge.util.Axis -> BRtB:
    react.surge.util.Axis X -> oFce
    react.surge.util.Axis Y -> xIMv
    react.surge.util.Axis Z -> SwxJ
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> NyjU
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> CyBT
    29:29:org.bukkit.util.Vector negative() -> AHGT
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> fvNo:
    react.surge.util.BlastResistance BARRIER -> SUuE
    react.surge.util.BlastResistance BEDROCK -> stqp
    react.surge.util.BlastResistance COMMAND -> uPds
    react.surge.util.BlastResistance ENDER_PORTAL -> CWhV
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> DIjB
    react.surge.util.BlastResistance ANVIL -> yvck
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> qoLy
    react.surge.util.BlastResistance OBSIDIAN -> bsba
    react.surge.util.BlastResistance ENDER_CHEST -> qxAq
    react.surge.util.BlastResistance WATER -> kdnI
    react.surge.util.BlastResistance LAVA -> HVXt
    react.surge.util.BlastResistance STATIONARY_WATER -> gaRp
    react.surge.util.BlastResistance DRAGON_EGG -> RmHW
    react.surge.util.BlastResistance ENDER_STONE -> oyjx
    react.surge.util.BlastResistance COAL_BLOCK -> ARDf
    react.surge.util.BlastResistance DIAMOND_BLOCK -> AYtJ
    react.surge.util.BlastResistance EMERALD_BLOCK -> NiMF
    react.surge.util.BlastResistance GOLD_BLOCK -> YGIV
    react.surge.util.BlastResistance IRON_BLOCK -> OlPI
    react.surge.util.BlastResistance REDSTONE_BLOCK -> Xegv
    react.surge.util.BlastResistance BRICK -> TbLp
    react.surge.util.BlastResistance BRICK_STAIRS -> yedx
    react.surge.util.BlastResistance HARD_CLAY -> Ljut
    react.surge.util.BlastResistance STONE -> mbby
    react.surge.util.BlastResistance SMOOTH_BRICK -> UdoW
    react.surge.util.BlastResistance SMOOTH_STAIRS -> LIQw
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> wyQf
    react.surge.util.BlastResistance STONE_SLAB2 -> uYXk
    react.surge.util.BlastResistance IRON_DOOR -> Xmvk
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> FqtM
    react.surge.util.BlastResistance IRON_TRAPDOOR -> Ljsx
    react.surge.util.BlastResistance MOB_SPAWNER -> SgXm
    react.surge.util.BlastResistance WEB -> FPQv
    react.surge.util.BlastResistance DISPENSER -> iogb
    react.surge.util.BlastResistance DROPPER -> TPjD
    react.surge.util.BlastResistance FURNACE -> yDBb
    react.surge.util.BlastResistance BURNING_FURNACE -> scsI
    react.surge.util.BlastResistance BEACON -> AkVs
    react.surge.util.BlastResistance COAL_ORE -> BfJL
    react.surge.util.BlastResistance COCOA -> IbLl
    react.surge.util.BlastResistance DIAMOND_ORE -> plKw
    react.surge.util.BlastResistance EMERALD_ORE -> EEBC
    react.surge.util.BlastResistance FENCE -> Yymx
    react.surge.util.BlastResistance FENCE_GATE -> xQdA
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> aWRe
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> NiMr
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> lVqa
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> nmxs
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> gOsG
    react.surge.util.BlastResistance ACACIA_FENCE -> kvQf
    react.surge.util.BlastResistance BIRCH_FENCE -> nwKG
    react.surge.util.BlastResistance DARK_OAK_FENCE -> CFjL
    react.surge.util.BlastResistance SPRUCE_FENCE -> xRDS
    react.surge.util.BlastResistance JUNGLE_FENCE -> VOCa
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> Dcaa
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> JdpY
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> JTPH
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> vdnV
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> MLVw
    react.surge.util.BlastResistance QUARTZ_STAIRS -> GJeh
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> xkUR
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> Mvjo
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> twyp
    react.surge.util.BlastResistance WOOD_STAIRS -> qnpk
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> rGaE
    react.surge.util.BlastResistance ACACIA_DOOR -> rOqO
    react.surge.util.BlastResistance BIRCH_DOOR -> apcV
    react.surge.util.BlastResistance DARK_OAK_DOOR -> CXMe
    react.surge.util.BlastResistance SPRUCE_DOOR -> MDGg
    react.surge.util.BlastResistance JUNGLE_DOOR -> iUwM
    react.surge.util.BlastResistance GOLD_ORE -> dNyJ
    react.surge.util.BlastResistance HOPPER -> gYCV
    react.surge.util.BlastResistance IRON_ORE -> Bejo
    react.surge.util.BlastResistance LAPIS_BLOCK -> RliM
    react.surge.util.BlastResistance LAPIS_ORE -> NyoA
    react.surge.util.BlastResistance QUARTZ_ORE -> mIRa
    react.surge.util.BlastResistance REDSTONE_ORE -> vBkL
    react.surge.util.BlastResistance TRAP_DOOR -> LkXX
    react.surge.util.BlastResistance WOOD -> yLTe
    react.surge.util.BlastResistance CHEST -> LcGh
    react.surge.util.BlastResistance TRAPPED_CHEST -> LYvG
    react.surge.util.BlastResistance WORKBENCH -> Trnj
    react.surge.util.BlastResistance CAULDRON -> dymI
    react.surge.util.BlastResistance LOG -> Dtct
    react.surge.util.BlastResistance LOG_2 -> KVti
    react.surge.util.BlastResistance BOOKSHELF -> mcIC
    react.surge.util.BlastResistance BANNER -> jkAT
    react.surge.util.BlastResistance STANDING_BANNER -> CiPs
    react.surge.util.BlastResistance WALL_BANNER -> wVrn
    react.surge.util.BlastResistance JACK_O_LANTERN -> qEAg
    react.surge.util.BlastResistance MELON_BLOCK -> vTQK
    react.surge.util.BlastResistance SKULL -> tNKK
    react.surge.util.BlastResistance PUMPKIN -> BULI
    react.surge.util.BlastResistance SIGN -> QPVm
    react.surge.util.BlastResistance SIGN_POST -> MKyp
    react.surge.util.BlastResistance WALL_SIGN -> Dtdf
    react.surge.util.BlastResistance QUARTZ_BLOCK -> oWlI
    react.surge.util.BlastResistance NOTE_BLOCK -> KEtN
    react.surge.util.BlastResistance RED_SANDSTONE -> nwMO
    react.surge.util.BlastResistance SANDSTONE -> TrpX
    react.surge.util.BlastResistance WOOL -> TsPv
    react.surge.util.BlastResistance MONSTER_EGG -> nCfa
    react.surge.util.BlastResistance RAILS -> DtcW
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> HNKi
    react.surge.util.BlastResistance DETECTOR_RAIL -> HNKk
    react.surge.util.BlastResistance POWERED_RAIL -> kdqR
    react.surge.util.BlastResistance CLAY -> qoTU
    react.surge.util.BlastResistance DIRT -> puBU
    react.surge.util.BlastResistance GRASS -> gOsh
    react.surge.util.BlastResistance GRAVEL -> aFRO
    react.surge.util.BlastResistance SPONGE -> fxES
    react.surge.util.BlastResistance BREWING_STAND -> jbNW
    react.surge.util.BlastResistance STONE_BUTTON -> BCiv
    react.surge.util.BlastResistance WOOD_BUTTON -> bHuK
    react.surge.util.BlastResistance CAKE_BLOCK -> ywKW
    react.surge.util.BlastResistance ICE -> MfLj
    react.surge.util.BlastResistance PACKED_ICE -> WYwQ
    react.surge.util.BlastResistance LEVER -> kTOj
    react.surge.util.BlastResistance MYCEL -> NrAP
    react.surge.util.BlastResistance PISTON_BASE -> uPkQ
    react.surge.util.BlastResistance PISTON_EXTENSION -> TPnB
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> sdWu
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> fnsV
    react.surge.util.BlastResistance GOLD_PLATE -> sBTn
    react.surge.util.BlastResistance IRON_PLATE -> jbOE
    react.surge.util.BlastResistance STONE_PLATE -> PLqo
    react.surge.util.BlastResistance WOOD_PLATE -> fEAR
    react.surge.util.BlastResistance SAND -> lWWC
    react.surge.util.BlastResistance SOUL_SAND -> vCPs
    react.surge.util.BlastResistance CACTUS -> EMUs
    react.surge.util.BlastResistance LADDER -> Abkc
    react.surge.util.BlastResistance NETHERRACK -> gYHm
    react.surge.util.BlastResistance GLASS -> UBrQ
    react.surge.util.BlastResistance THIN_GLASS -> vutn
    react.surge.util.BlastResistance STAINED_GLASS -> kSqj
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> qDbU
    react.surge.util.BlastResistance GLOWSTONE -> aEti
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> KWYD
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> lWUq
    react.surge.util.BlastResistance SEA_LANTERN -> RlnD
    react.surge.util.BlastResistance BED_BLOCK -> ektG
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> CGNp
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> OIqv
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> tyAI
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> veSo
    react.surge.util.BlastResistance LEAVES -> DIrj
    react.surge.util.BlastResistance LEAVES_2 -> agwc
    react.surge.util.BlastResistance SNOW -> kTSX
    int br -> CrBt
    react.surge.util.BlastResistance[] ENUM$VALUES -> lFSj
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> xrWp
    175:190:int get(org.bukkit.Material) -> AFjc
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> axAV:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> dLoR
react.surge.util.C -> tnUo:
    react.surge.util.C BLACK -> lyXa
    react.surge.util.C DARK_BLUE -> rOuH
    react.surge.util.C DARK_GREEN -> rrYK
    react.surge.util.C DARK_AQUA -> xjxV
    react.surge.util.C DARK_RED -> oiPR
    react.surge.util.C DARK_PURPLE -> PwhO
    react.surge.util.C GOLD -> fECK
    react.surge.util.C GRAY -> kSrC
    react.surge.util.C DARK_GRAY -> btLA
    react.surge.util.C BLUE -> vvTp
    react.surge.util.C GREEN -> xAFX
    react.surge.util.C AQUA -> AtON
    react.surge.util.C RED -> hlkG
    react.surge.util.C LIGHT_PURPLE -> Kphu
    react.surge.util.C YELLOW -> dhoe
    react.surge.util.C WHITE -> PoXI
    react.surge.util.C MAGIC -> CysS
    react.surge.util.C BOLD -> qgDp
    react.surge.util.C STRIKETHROUGH -> gjHn
    react.surge.util.C UNDERLINE -> qLqd
    react.surge.util.C ITALIC -> OBBI
    react.surge.util.C RESET -> lEun
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> ywPl
    char code -> PgIx
    boolean isFormat -> mcMG
    java.lang.String toString -> Mvqi
    java.util.Map BY_ID -> gHIP
    java.util.Map BY_CHAR -> VNgq
    java.util.Map dyeChatMap -> cvqC
    java.util.Map chatHexMap -> vmfk
    java.util.Map dyeHexMap -> fDeJ
    int[] $SWITCH_TABLE$surge$util$C -> lpjb
    react.surge.util.C[] ENUM$VALUES -> fwjX
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> TyqP
    378:378:java.lang.String hex() -> nAwC
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> eGah
    434:442:react.surge.util.C getByChar(java.lang.String) -> YoTk
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> HCNu
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> AFjc
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> HCNu
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> flgt
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> pYEO
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> fcxB
    560:578:java.lang.String generateColorTable() -> eaoV
    588:588:org.bukkit.ChatColor chatColor() -> pPmh
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> XuAe
    632:679:byte getItemMeta() -> lDaL
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> RAGm
react.surge.util.C$1 -> tnUo$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> tnUo$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> tnUo$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> tnUo$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> tnUo$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> tnUo$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> tnUo$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> tnUo$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> tnUo$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> tnUo$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> tnUo$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> tnUo$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> tnUo$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> tnUo$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> tnUo$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> tnUo$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> tnUo$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> tnUo$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> tnUo$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> tnUo$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> tnUo$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> tnUo$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> ryRA:
    double number -> CXSM
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> JjwM
    23:25:react.surge.util.CDou add(double) -> PSVf
    30:32:react.surge.util.CDou sub(double) -> hQKN
    37:37:double get() -> get
    42:48:void circ() -> xrWh
react.surge.util.CMD -> eYXp:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> mYyo
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> Drrx
    51:53:void execute(org.bukkit.command.CommandSender) -> flgt
    60:77:void execute() -> execute
react.surge.util.CNum -> ECLR:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> pjFe
    23:25:react.surge.util.CNum add(int) -> DrYY
    30:32:react.surge.util.CNum sub(int) -> mynB
    37:37:int get() -> get
    42:48:void circ() -> xrWh
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> JIVr
react.surge.util.Chunks -> uiIG:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> PJdo
    33:40:react.glang.GList getLoadedChunks() -> vdBC
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> HCNu
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> AFjc
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> AFjc
    98:98:boolean unload(org.bukkit.Chunk) -> DqxC
    114:124:int unload(react.glang.GList,boolean,boolean) -> AFjc
    138:138:int unload(react.glang.GList,boolean) -> AFjc
    150:150:int unload(react.glang.GList) -> gojj
    166:166:boolean isLoaded(java.lang.String,int,int) -> AFjc
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> flgt
    201:205:void load(react.glang.GList) -> NLqO
react.surge.util.Cuboid -> PvOk:
    java.lang.String worldName -> xIYL
    int x1 -> msmN
    int y1 -> VExE
    int z1 -> OBDc
    int x2 -> ELxK
    int y2 -> lWWu
    int z2 -> etgI
    int[] $SWITCH_TABLE$surge$util$Axis -> Mepr
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> kCSi
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> AFjc
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> flgt
    93:93:boolean hasPlayers() -> JSBt
    98:110:react.glang.GList getPlayers() -> srvD
    115:166:react.glang.GList getEntities() -> sjwo
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> IOEX
    287:287:org.bukkit.Location getLowerNE() -> KUeS
    298:298:org.bukkit.Location getUpperSW() -> XmMM
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> IhqP
    348:348:int getSizeY() -> xYFO
    358:358:int getSizeZ() -> xqwC
    368:368:int getLowerX() -> opMw
    378:378:int getLowerY() -> erqT
    388:388:int getLowerZ() -> rNbp
    398:398:int getUpperX() -> agDk
    408:408:int getUpperY() -> gFSB
    418:418:int getUpperZ() -> VgFB
    428:438:org.bukkit.block.Block[] corners() -> UuCp
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> AFjc
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> HCNu
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> flgt
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> yuAA
    546:546:boolean contains(int,int,int) -> flhV
    558:558:boolean contains(org.bukkit.block.Block) -> eGah
    570:570:boolean contains(org.bukkit.Location) -> HTQM
    580:580:int volume() -> KVEE
    591:601:byte averageLightLevel() -> GAFt
    612:612:react.surge.util.Cuboid contract() -> BJit
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> AFjc
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> HCNu
    708:715:boolean containsOnly(org.bukkit.Material) -> HCNu
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> AFjc
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> TqFL
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> AFjc
    786:800:java.util.List getChunks() -> KfeX
    815:819:void fill(int,byte) -> AFjc
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> kkpo
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> nJgH
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> loSr
react.surge.util.Cuboid$1 -> PvOk$1:
    react.surge.util.Cuboid this$0 -> TPqV
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> HTQM
    1:1:java.lang.Object onAdapt(java.lang.Object) -> dLoR
react.surge.util.Cuboid$CuboidDirection -> PvOk$AFjc:
    react.surge.util.Cuboid$CuboidDirection North -> TIAm
    react.surge.util.Cuboid$CuboidDirection East -> yDKP
    react.surge.util.Cuboid$CuboidDirection South -> MDNF
    react.surge.util.Cuboid$CuboidDirection West -> Otfo
    react.surge.util.Cuboid$CuboidDirection Up -> YiSD
    react.surge.util.Cuboid$CuboidDirection Down -> XUNX
    react.surge.util.Cuboid$CuboidDirection Horizontal -> usSn
    react.surge.util.Cuboid$CuboidDirection Vertical -> Meom
    react.surge.util.Cuboid$CuboidDirection Both -> QHIh
    react.surge.util.Cuboid$CuboidDirection Unknown -> wqHp
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> kCSi
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> xYxW
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> VLqs
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> loSr
react.surge.util.Cuboid$CuboidIterator -> PvOk$HCNu:
    org.bukkit.World w -> YFoR
    int baseX -> hKJp
    int baseY -> VOIE
    int baseZ -> TjeI
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> RJlM
    int sizeY -> IQUo
    int sizeZ -> NaEw
    react.surge.util.Cuboid this$0 -> TPqV
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> WqsE:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> pbJT:
    react.glang.GList buffer -> SxfE
    boolean dbg -> sJlf
    int kf -> eAcl
    react.glang.Callback scall -> PgLc
    13:16:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    20:24:void flush() -> flush
    28:39:void log(java.lang.String,java.lang.String) -> yuAA
    43:51:void l(java.lang.Object,java.lang.String) -> HCNu
    55:56:void s(java.lang.Object,java.lang.String) -> flgt
    60:71:void cdb() -> nliR
    75:86:void v(java.lang.Object,java.lang.String) -> yuAA
    90:91:void w(java.lang.Object,java.lang.String) -> flhV
    95:96:void f(java.lang.Object,java.lang.String) -> TqFL
    100:113:void l(java.lang.String) -> VTho
    117:124:void s(java.lang.String) -> pjFe
    128:142:void v(java.lang.String) -> DrYY
    146:153:void w(java.lang.String) -> mynB
    157:164:void f(java.lang.String) -> JIVr
react.surge.util.DMSRequire -> uhgs:
    react.surge.util.DMSRequirement value() -> xquj
react.surge.util.DMSRequirement -> qTKf:
    react.surge.util.DMSRequirement SQL -> TbVs
    react.surge.util.DMSRequirement[] ENUM$VALUES -> NqgM
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> pbIv:
    react.surge.util.Depend VAULT -> dXSb
    react.surge.util.Depend FAWE -> lpld
    react.surge.util.Depend WORLDEDIT -> vTVq
    react.surge.util.Depend PROTOLIB -> PwmO
    react.surge.util.Depend CITIZENS -> qVIK
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> YOcg
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> lxAT:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> fBoG
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> GcEU:
    react.surge.util.DimensionFace X -> jatb
    react.surge.util.DimensionFace Y -> wNiA
    react.surge.util.DimensionFace Z -> HWEN
    react.surge.util.DimensionFace[] ENUM$VALUES -> jkGT
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> jiIJ:
    react.surge.util.Direction U -> lqMU
    react.surge.util.Direction D -> smPK
    react.surge.util.Direction N -> fEGW
    react.surge.util.Direction S -> VNhx
    react.surge.util.Direction E -> DJVR
    react.surge.util.Direction W -> NrGI
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> Dkwt
    int[] $SWITCH_TABLE$surge$util$Direction -> XnbY
    react.surge.util.Direction[] ENUM$VALUES -> yCmA
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> XAvd
    61:61:int x() -> WGdj
    66:66:int y() -> FEtT
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> nmIv
    81:81:react.glang.GList news() -> gxyX
    86:86:react.glang.GList udnews() -> Xlmc
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> FDwj
    115:147:react.surge.util.Direction fromByte(byte) -> HTQM
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> biim
react.surge.util.DynamicConfiguration -> ArSm:
react.surge.util.DynamicTracker -> oUst:
react.surge.util.Embedded -> dEUL:
    react.glang.GList get() -> ryYd
    void add(java.lang.Object) -> add
react.surge.util.FU -> XAqg:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> AFjc
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> HCNu
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> flhV
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> TqFL
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> hkRv:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> IOEX
react.surge.util.Health -> sYok:
    double hp -> eAcN
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> rxxp
    41:41:double getHearts() -> pPon
    51:51:double getHalfHearts() -> vJPy
    61:61:int getFlatHalfHearts() -> aoWi
react.surge.util.IO -> YUvK:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> Sefs:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> AFjc
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> AFjc
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> AFjc
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> AFjc
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> AFjc
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> HCNu
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> flgt
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> yuAA
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> AFjc
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> AFjc
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> AFjc
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> AFjc
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> flhV
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> TqFL
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> dLoR
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> eGah
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> XuAe
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> AFjc
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> HTQM
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> DaVf
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> AFjc
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> AFjc
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> HCNu
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> AFjc
react.surge.util.MSound -> bOoR:
    react.surge.util.MSound AMBIENCE_CAVE -> LAMA
    react.surge.util.MSound AMBIENCE_RAIN -> apkb
    react.surge.util.MSound AMBIENCE_THUNDER -> Wsnt
    react.surge.util.MSound ANVIL_BREAK -> dPBX
    react.surge.util.MSound ANVIL_LAND -> Bvtr
    react.surge.util.MSound ANVIL_USE -> Xnar
    react.surge.util.MSound ARROW_HIT -> wNgW
    react.surge.util.MSound BURP -> YhuA
    react.surge.util.MSound CHEST_CLOSE -> EMYc
    react.surge.util.MSound CHEST_OPEN -> Nhtk
    react.surge.util.MSound CLICK -> jsUq
    react.surge.util.MSound DOOR_CLOSE -> ursx
    react.surge.util.MSound DOOR_OPEN -> LALm
    react.surge.util.MSound DRINK -> jYbw
    react.surge.util.MSound EAT -> ReAm
    react.surge.util.MSound EXPLODE -> aExE
    react.surge.util.MSound FALL_BIG -> PLwv
    react.surge.util.MSound FALL_SMALL -> PMYW
    react.surge.util.MSound FIRE -> jIBq
    react.surge.util.MSound FIRE_IGNITE -> GCAf
    react.surge.util.MSound FIZZ -> kBvp
    react.surge.util.MSound FUSE -> lpna
    react.surge.util.MSound GLASS -> sJoH
    react.surge.util.MSound HURT_FLESH -> ywTu
    react.surge.util.MSound ITEM_BREAK -> wqNq
    react.surge.util.MSound ITEM_PICKUP -> yURK
    react.surge.util.MSound LAVA -> xAMI
    react.surge.util.MSound LAVA_POP -> HpXf
    react.surge.util.MSound LEVEL_UP -> ShHQ
    react.surge.util.MSound MINECART_BASE -> VOMg
    react.surge.util.MSound MINECART_INSIDE -> euLM
    react.surge.util.MSound NOTE_BASS -> Abrp
    react.surge.util.MSound NOTE_PIANO -> kKfx
    react.surge.util.MSound NOTE_BASS_DRUM -> CPGt
    react.surge.util.MSound NOTE_STICKS -> tpUJ
    react.surge.util.MSound NOTE_BASS_GUITAR -> cMBA
    react.surge.util.MSound NOTE_SNARE_DRUM -> RvEM
    react.surge.util.MSound NOTE_PLING -> OSIS
    react.surge.util.MSound ORB_PICKUP -> WcPi
    react.surge.util.MSound PISTON_EXTEND -> seAh
    react.surge.util.MSound PISTON_RETRACT -> jjge
    react.surge.util.MSound PORTAL -> DAgy
    react.surge.util.MSound PORTAL_TRAVEL -> ReCd
    react.surge.util.MSound PORTAL_TRIGGER -> nnbc
    react.surge.util.MSound SHOOT_ARROW -> thDS
    react.surge.util.MSound SPLASH -> uHcP
    react.surge.util.MSound SPLASH2 -> nfSE
    react.surge.util.MSound STEP_GRASS -> svBn
    react.surge.util.MSound STEP_GRAVEL -> iFAp
    react.surge.util.MSound STEP_LADDER -> oiXr
    react.surge.util.MSound STEP_SAND -> IkLl
    react.surge.util.MSound STEP_SNOW -> iWGI
    react.surge.util.MSound STEP_STONE -> jQYD
    react.surge.util.MSound STEP_WOOD -> iowc
    react.surge.util.MSound STEP_WOOL -> HhJQ
    react.surge.util.MSound SWIM -> AcTj
    react.surge.util.MSound WATER -> VqQv
    react.surge.util.MSound WOOD_CLICK -> oXWi
    react.surge.util.MSound BAT_DEATH -> RJsG
    react.surge.util.MSound BAT_HURT -> MnhV
    react.surge.util.MSound BAT_IDLE -> oWvl
    react.surge.util.MSound BAT_LOOP -> BfWe
    react.surge.util.MSound BAT_TAKEOFF -> aqRD
    react.surge.util.MSound BLAZE_BREATH -> xbqR
    react.surge.util.MSound BLAZE_DEATH -> NWyA
    react.surge.util.MSound BLAZE_HIT -> XTth
    react.surge.util.MSound CAT_HISS -> FQCP
    react.surge.util.MSound CAT_HIT -> fDlA
    react.surge.util.MSound CAT_MEOW -> ptlQ
    react.surge.util.MSound CAT_PURR -> BDSr
    react.surge.util.MSound CAT_PURREOW -> NWvn
    react.surge.util.MSound CHICKEN_IDLE -> rsAp
    react.surge.util.MSound CHICKEN_HURT -> KhaI
    react.surge.util.MSound CHICKEN_EGG_POP -> tVdS
    react.surge.util.MSound CHICKEN_WALK -> FYQg
    react.surge.util.MSound COW_IDLE -> XfVI
    react.surge.util.MSound COW_HURT -> DAjc
    react.surge.util.MSound COW_WALK -> bsrh
    react.surge.util.MSound CREEPER_HISS -> dGUW
    react.surge.util.MSound CREEPER_DEATH -> AIcM
    react.surge.util.MSound ENDERDRAGON_DEATH -> AsvV
    react.surge.util.MSound ENDERDRAGON_GROWL -> NOfp
    react.surge.util.MSound ENDERDRAGON_HIT -> Akej
    react.surge.util.MSound ENDERDRAGON_WINGS -> oWtl
    react.surge.util.MSound ENDERMAN_DEATH -> iFCo
    react.surge.util.MSound ENDERMAN_HIT -> YWwL
    react.surge.util.MSound ENDERMAN_IDLE -> ixge
    react.surge.util.MSound ENDERMAN_TELEPORT -> pkyf
    react.surge.util.MSound ENDERMAN_SCREAM -> bssU
    react.surge.util.MSound ENDERMAN_STARE -> iyKn
    react.surge.util.MSound GHAST_SCREAM -> mAQm
    react.surge.util.MSound GHAST_SCREAM2 -> tNVs
    react.surge.util.MSound GHAST_CHARGE -> PpDI
    react.surge.util.MSound GHAST_DEATH -> xRRk
    react.surge.util.MSound GHAST_FIREBALL -> XfXx
    react.surge.util.MSound GHAST_MOAN -> Vpsh
    react.surge.util.MSound IRONGOLEM_DEATH -> tWHb
    react.surge.util.MSound IRONGOLEM_HIT -> cwYj
    react.surge.util.MSound IRONGOLEM_THROW -> SMxH
    react.surge.util.MSound IRONGOLEM_WALK -> pBJu
    react.surge.util.MSound MAGMACUBE_WALK -> Gdgy
    react.surge.util.MSound MAGMACUBE_WALK2 -> GBdw
    react.surge.util.MSound MAGMACUBE_JUMP -> hScx
    react.surge.util.MSound PIG_IDLE -> Asvs
    react.surge.util.MSound PIG_DEATH -> rabW
    react.surge.util.MSound PIG_WALK -> ahby
    react.surge.util.MSound SHEEP_IDLE -> ipYt
    react.surge.util.MSound SHEEP_SHEAR -> qwqL
    react.surge.util.MSound SHEEP_WALK -> svHE
    react.surge.util.MSound SILVERFISH_HIT -> xbsJ
    react.surge.util.MSound SILVERFISH_KILL -> foab
    react.surge.util.MSound SILVERFISH_IDLE -> gQCC
    react.surge.util.MSound SILVERFISH_WALK -> DmAr
    react.surge.util.MSound SKELETON_IDLE -> SEhS
    react.surge.util.MSound SKELETON_DEATH -> ffpb
    react.surge.util.MSound SKELETON_HURT -> AtXG
    react.surge.util.MSound SKELETON_WALK -> tVgP
    react.surge.util.MSound SLIME_ATTACK -> EUrA
    react.surge.util.MSound SLIME_WALK -> DAln
    react.surge.util.MSound SLIME_WALK2 -> QPbJ
    react.surge.util.MSound SPIDER_IDLE -> NGYF
    react.surge.util.MSound SPIDER_DEATH -> MfYF
    react.surge.util.MSound SPIDER_WALK -> Pfpa
    react.surge.util.MSound WITHER_DEATH -> aqSQ
    react.surge.util.MSound WITHER_HURT -> DtpF
    react.surge.util.MSound WITHER_IDLE -> gisG
    react.surge.util.MSound WITHER_SHOOT -> CrNG
    react.surge.util.MSound WITHER_SPAWN -> eBJO
    react.surge.util.MSound WOLF_BARK -> NWyX
    react.surge.util.MSound WOLF_DEATH -> GuiI
    react.surge.util.MSound WOLF_GROWL -> LbuH
    react.surge.util.MSound WOLF_HOWL -> XfXP
    react.surge.util.MSound WOLF_HURT -> bcUP
    react.surge.util.MSound WOLF_PANT -> AkhJ
    react.surge.util.MSound WOLF_SHAKE -> GvIt
    react.surge.util.MSound WOLF_WALK -> svFq
    react.surge.util.MSound WOLF_WHINE -> AbvU
    react.surge.util.MSound ZOMBIE_METAL -> VqSo
    react.surge.util.MSound ZOMBIE_WOOD -> YaMm
    react.surge.util.MSound ZOMBIE_WOODBREAK -> Glyy
    react.surge.util.MSound ZOMBIE_IDLE -> JnSt
    react.surge.util.MSound ZOMBIE_DEATH -> aWcW
    react.surge.util.MSound ZOMBIE_HURT -> Otqv
    react.surge.util.MSound ZOMBIE_INFECT -> yTwD
    react.surge.util.MSound ZOMBIE_UNFECT -> JCaB
    react.surge.util.MSound ZOMBIE_REMEDY -> QsIf
    react.surge.util.MSound ZOMBIE_WALK -> coLW
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> ukNd
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> QHTw
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> XUXf
    react.surge.util.MSound ZOMBIE_PIG_HURT -> ihLB
    react.surge.util.MSound DIG_WOOL -> ecmv
    react.surge.util.MSound DIG_GRASS -> HyNg
    react.surge.util.MSound DIG_GRAVEL -> JKoW
    react.surge.util.MSound DIG_SAND -> qgQs
    react.surge.util.MSound DIG_SNOW -> OuQv
    react.surge.util.MSound DIG_STONE -> SyMo
    react.surge.util.MSound DIG_WOOD -> QivG
    react.surge.util.MSound FIREWORK_BLAST -> ShMM
    react.surge.util.MSound FIREWORK_BLAST2 -> ViFP
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> XoKr
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> AIgE
    react.surge.util.MSound FIREWORK_TWINKLE -> yoHs
    react.surge.util.MSound FIREWORK_TWINKLE2 -> PNCD
    react.surge.util.MSound FIREWORK_LAUNCH -> txkS
    react.surge.util.MSound SUCCESSFUL_HIT -> QQGm
    react.surge.util.MSound HORSE_ANGRY -> uYoB
    react.surge.util.MSound HORSE_ARMOR -> wyfu
    react.surge.util.MSound HORSE_BREATHE -> gQFu
    react.surge.util.MSound HORSE_DEATH -> UvfG
    react.surge.util.MSound HORSE_GALLOP -> VGDu
    react.surge.util.MSound HORSE_HIT -> CPOT
    react.surge.util.MSound HORSE_IDLE -> ynkm
    react.surge.util.MSound HORSE_JUMP -> gGuT
    react.surge.util.MSound HORSE_LAND -> gbHP
    react.surge.util.MSound HORSE_SADDLE -> VFeQ
    react.surge.util.MSound HORSE_SOFT -> qUqm
    react.surge.util.MSound HORSE_WOOD -> cnly
    react.surge.util.MSound DONKEY_ANGRY -> QjYq
    react.surge.util.MSound DONKEY_DEATH -> KqYg
    react.surge.util.MSound DONKEY_HIT -> vTaQ
    react.surge.util.MSound DONKEY_IDLE -> LlME
    react.surge.util.MSound HORSE_SKELETON_DEATH -> sCGb
    react.surge.util.MSound HORSE_SKELETON_HIT -> QQGM
    react.surge.util.MSound HORSE_SKELETON_IDLE -> xsxX
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> wheF
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> ukOl
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> JwGH
    react.surge.util.MSound VILLAGER_DEATH -> dOka
    react.surge.util.MSound VILLAGER_HAGGLE -> wiEX
    react.surge.util.MSound VILLAGER_HIT -> tMxe
    react.surge.util.MSound VILLAGER_IDLE -> WJHR
    react.surge.util.MSound VILLAGER_NO -> JLRh
    react.surge.util.MSound VILLAGER_YES -> wWbm
    java.lang.String pre19sound -> jtBG
    java.lang.String post19sound -> OuTh
    org.bukkit.Sound resolvedSound -> ahiP
    react.surge.util.MSound[] ENUM$VALUES -> qgVp
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> wMTX
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> OsMa:
    org.bukkit.Material material -> fUuP
    java.lang.Byte data -> OdUc
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> PeVl
    79:80:void setData(java.lang.Byte) -> AFjc
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> uXEx:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> CoVe
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> fdsu
    68:68:boolean isAnyOnline() -> CNNs
    80:80:react.glang.GList inWorld(org.bukkit.World) -> oxCN
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> gojj
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> AFjc
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> AFjc
    143:144:void disable(org.bukkit.entity.Player) -> JjwM
    154:155:void enable(org.bukkit.entity.Player) -> PSVf
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> AFjc
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> HCNu
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> hQKN
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> AFjc
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> NLoi
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> flgt
    300:300:boolean canFindPlayer(java.lang.String) -> DaXY
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> UIUy
    338:345:react.glang.GList onlinePlayers() -> BmOS
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> eGaR
    368:371:void clear(org.bukkit.entity.Player) -> wLWx
    381:385:void clearEffects(org.bukkit.entity.Player) -> PmKs
    398:399:void heal(org.bukkit.entity.Player,double) -> AFjc
    409:410:void heal(org.bukkit.entity.Player) -> mhmh
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> aTjA
    432:433:void resetHunger(org.bukkit.entity.Player) -> uNbc
    443:444:void kill(org.bukkit.entity.Player) -> AXNi
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> MuEG
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> vHtE
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> AFjc
react.surge.util.P$1 -> uXEx$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> HTQM
    1:1:java.lang.Object onAdapt(java.lang.Object) -> dLoR
react.surge.util.P$2 -> uXEx$2:
    java.lang.Double val$doff -> wGEt
    org.bukkit.entity.Player val$e -> Vyjk
    org.bukkit.entity.Entity[] val$result -> uYpf
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> DaVf
react.surge.util.PE -> QWON:
    react.surge.util.PE ABSORPTION -> FQJk
    react.surge.util.PE BLINDNESS -> SVoc
    react.surge.util.PE CONFUSION -> rYXW
    react.surge.util.PE DAMAGE_RESISTANCE -> yMLF
    react.surge.util.PE FAST_DIGGING -> xIge
    react.surge.util.PE FIRE_RESISTANCE -> oaQN
    react.surge.util.PE GLOWING -> BLld
    react.surge.util.PE HARM -> FHWv
    react.surge.util.PE HEAL -> kLSD
    react.surge.util.PE HEALTH_BOOST -> WRYj
    react.surge.util.PE HUNGER -> HxrH
    react.surge.util.PE INCREASE_DAMAGE -> VOVj
    react.surge.util.PE INVISIBILITY -> OmEu
    react.surge.util.PE JUMP -> fxWg
    react.surge.util.PE LEVITATION -> qwvP
    react.surge.util.PE LUCK -> GvOt
    react.surge.util.PE NIGHT_VISION -> rQFo
    react.surge.util.PE POISON -> HgsW
    react.surge.util.PE REGENERATION -> OSUw
    react.surge.util.PE SATURATION -> ixsX
    react.surge.util.PE SLOW -> fNGd
    react.surge.util.PE SLOW_DIGGING -> gHXy
    react.surge.util.PE SPEED -> Sgrh
    react.surge.util.PE UNLUCK -> DcxG
    react.surge.util.PE WATER_BREATHING -> euYH
    react.surge.util.PE WEAKNESS -> igqV
    react.surge.util.PE WITHER -> uYrN
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> AFjc
    144:144:react.surge.util.PE d(int) -> CoVe
    156:156:react.surge.util.PE a(int) -> DaXY
    166:166:org.bukkit.potion.PotionEffect c() -> FEwJ
    177:178:void c(org.bukkit.entity.LivingEntity) -> TqFL
    182:183:void crm(org.bukkit.entity.LivingEntity) -> dLoR
    187:188:void rm(org.bukkit.entity.LivingEntity) -> eGah
react.surge.util.ParticleEffect -> ssas:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> EMiX
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> YXbt
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> aNyC
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> JLWn
    react.surge.util.ParticleEffect WATER_BUBBLE -> uIQg
    react.surge.util.ParticleEffect WATER_SPLASH -> Famn
    react.surge.util.ParticleEffect WATER_WAKE -> suoX
    react.surge.util.ParticleEffect SUSPENDED -> TtHa
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> dqsw
    react.surge.util.ParticleEffect CRIT -> PVXY
    react.surge.util.ParticleEffect CRIT_MAGIC -> noQF
    react.surge.util.ParticleEffect SMOKE_NORMAL -> eRsO
    react.surge.util.ParticleEffect SMOKE_LARGE -> fohv
    react.surge.util.ParticleEffect SPELL -> plfH
    react.surge.util.ParticleEffect SPELL_INSTANT -> jHqM
    react.surge.util.ParticleEffect SPELL_MOB -> qfwa
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> Vykl
    react.surge.util.ParticleEffect SPELL_WITCH -> Pfxk
    react.surge.util.ParticleEffect DRIP_WATER -> JKuf
    react.surge.util.ParticleEffect DRIP_LAVA -> UDEm
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> sunR
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> rPgp
    react.surge.util.ParticleEffect TOWN_AURA -> gsLh
    react.surge.util.ParticleEffect NOTE -> IITO
    react.surge.util.ParticleEffect PORTAL -> MLoH
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> JKvS
    react.surge.util.ParticleEffect FLAME -> lNwC
    react.surge.util.ParticleEffect LAVA -> oiaq
    react.surge.util.ParticleEffect FOOTSTEP -> wiLp
    react.surge.util.ParticleEffect CLOUD -> rPlE
    react.surge.util.ParticleEffect REDSTONE -> wGIm
    react.surge.util.ParticleEffect SNOWBALL -> ecwa
    react.surge.util.ParticleEffect SNOW_SHOVEL -> COsw
    react.surge.util.ParticleEffect SLIME -> XfdN
    react.surge.util.ParticleEffect HEART -> NOuJ
    react.surge.util.ParticleEffect BARRIER -> FjaQ
    react.surge.util.ParticleEffect ITEM_CRACK -> TYwQ
    react.surge.util.ParticleEffect BLOCK_CRACK -> WlQn
    react.surge.util.ParticleEffect BLOCK_DUST -> kvkI
    react.surge.util.ParticleEffect WATER_DROP -> MLrK
    react.surge.util.ParticleEffect ITEM_TAKE -> qpKt
    react.surge.util.ParticleEffect MOB_APPEARANCE -> UfKq
    react.surge.util.ParticleEffect DRAGON_BREATH -> kTfn
    react.surge.util.ParticleEffect END_ROD -> LuAx
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> snBF
    react.surge.util.ParticleEffect SWEEP_ATTACK -> emHd
    java.util.Map NAME_MAP -> HhVD
    java.util.Map ID_MAP -> TshT
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> IRFi
    java.util.List properties -> qpKg
    react.surge.util.ParticleEffect[] ENUM$VALUES -> MfcU
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> HoAr
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> AFjc
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> YnwL
    557:565:react.surge.util.ParticleEffect fromId(int) -> UIUy
    577:578:boolean isWater(org.bukkit.Location) -> DrWy
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> AFjc
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> AFjc
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> AFjc
    665:681:void display(float,int,org.bukkit.Location,double) -> AFjc
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> AFjc
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> AFjc
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> AFjc
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> AFjc
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> AFjc
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> AFjc
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> AFjc
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> AFjc
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> AFjc
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> AFjc
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> AFjc
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> AFjc
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> AFjc
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> AFjc
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> ssas$AFjc:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> ssas$HCNu:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> ssas$flgt:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> brYw
    1594:1594:float getValueY() -> SvoS
    1605:1605:float getValueZ() -> kSAl
react.surge.util.ParticleEffect$OrdinaryColor -> ssas$yuAA:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> brYw
    1526:1526:float getValueY() -> SvoS
    1537:1537:float getValueZ() -> kSAl
react.surge.util.ParticleEffect$ParticleColor -> ssas$flhV:
    1383:1383:void <init>() -> <init>
    float getValueX() -> brYw
    float getValueY() -> SvoS
    float getValueZ() -> kSAl
react.surge.util.ParticleEffect$ParticleColorException -> ssas$TqFL:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> ssas$dLoR:
    org.bukkit.Material material -> fUuP
    byte data -> NHEB
    int[] packetData -> jHrX
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> KxIa
    1309:1309:java.lang.String getPacketDataString() -> cRyS
react.surge.util.ParticleEffect$ParticleDataException -> ssas$eGah:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> ssas$XuAe:
    int version -> version
    java.lang.Class enumParticle -> NPTn
    java.lang.reflect.Constructor packetConstructor -> SqGG
    java.lang.reflect.Method getHandle -> MoTo
    java.lang.reflect.Field playerConnection -> JThv
    java.lang.reflect.Method sendPacket -> MMRQ
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> rQJy
    float offsetX -> fojo
    float offsetY -> MUat
    float offsetZ -> TcGp
    float speed -> nMSG
    int amount -> NhSC
    boolean longDistance -> LdCq
    react.surge.util.ParticleEffect$ParticleData data -> eRww
    java.lang.Object packet -> wFjp
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> qKDo
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> AFjc
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> HCNu
    2004:2018:void sendTo(org.bukkit.Location,double) -> HCNu
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> ssas$XuAe$AFjc:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> ssas$XuAe$HCNu:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> ssas$XuAe$flgt:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> ssas$HTQM:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> IYyM
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> MLru
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> COwC
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> HpiF
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> HNej
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> ssas$DaVf:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> jOVH:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> sQPI
react.surge.util.Persist -> jhhA:
react.surge.util.Platform -> Cwxj:
    boolean ENABLE -> Mnvc
    double PROC_CPU -> vUKF
    11:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    253:258:java.lang.String getVersion() -> getVersion
    263:268:java.lang.String getName() -> getName
    273:273:com.sun.management.OperatingSystemMXBean getSystem() -> fnFY
    271:271:com.sun.management.OperatingSystemMXBean access$0() -> VxHj
react.surge.util.Platform$CPU -> Cwxj$AFjc:
    198:198:void <init>() -> <init>
    202:207:int getAvailableProcessors() -> getAvailableProcessors
    212:217:double getCPULoad() -> mPVU
    222:227:double getProcessCPULoad() -> rgug
    232:237:double getLiveProcessCPULoad() -> VgGu
    242:247:java.lang.String getArchitecture() -> ChAt
react.surge.util.Platform$ENVIRONMENT -> Cwxj$HCNu:
    14:14:void <init>() -> <init>
    18:18:boolean canRunBatch() -> Eduq
    23:28:java.lang.String getJavaHome() -> Rslf
    33:38:java.lang.String getJavaVendor() -> nAwS
    43:48:java.lang.String getJavaVersion() -> bjIt
react.surge.util.Platform$MEMORY -> Cwxj$flgt:
    119:119:void <init>() -> <init>
react.surge.util.Platform$MEMORY$PHYSICAL -> Cwxj$flgt$AFjc:
    121:121:void <init>() -> <init>
    125:130:long getTotalMemory() -> PnHB
    135:140:long getFreeMemory() -> QNgC
    145:150:long getUsedMemory() -> lnvA
react.surge.util.Platform$MEMORY$VIRTUAL -> Cwxj$flgt$HCNu:
    154:154:void <init>() -> <init>
    158:163:long getTotalMemory() -> PnHB
    168:173:long getFreeMemory() -> QNgC
    178:183:long getUsedMemory() -> lnvA
    188:193:long getCommittedVirtualMemory() -> anyY
react.surge.util.Platform$STORAGE -> Cwxj$yuAA:
    52:52:void <init>() -> <init>
    56:63:long getAbsoluteTotalSpace() -> aLuv
    68:68:long getTotalSpace() -> getTotalSpace
    73:73:long getTotalSpace(java.io.File) -> dLoR
    78:85:long getAbsoluteFreeSpace() -> DIDd
    90:90:long getFreeSpace() -> getFreeSpace
    95:95:long getFreeSpace(java.io.File) -> eGah
    100:100:long getUsedSpace() -> jWqX
    105:105:long getUsedSpace(java.io.File) -> XuAe
    110:110:long getAbsoluteUsedSpace() -> YyDq
    115:115:java.io.File[] getRoots() -> getRoots
react.surge.util.PluginUtil -> mqqA:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> flhV
    78:88:void enable(java.lang.String) -> eqyY
    95:99:void enableAll() -> IXTO
    109:113:void disable(org.bukkit.plugin.Plugin) -> TqFL
    120:124:void disableAll() -> xYKH
    135:135:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> dLoR
    149:156:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> AFjc
    168:173:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> lKyk
    183:186:java.util.List getPluginNames(boolean) -> bGJW
    198:201:java.lang.String getPluginVersion(java.lang.String) -> MlUV
    214:236:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> eGah
    251:330:java.util.List findByCommand(java.lang.String) -> FMmm
    351:352:void load(org.bukkit.plugin.Plugin) -> XuAe
    356:378:java.lang.String getPluginFileName(java.lang.String) -> uxwd
    383:405:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> AFjc
    418:470:void load(java.lang.String) -> load
    482:487:void reload(org.bukkit.plugin.Plugin) -> HTQM
    494:498:void reloadAll() -> eQRk
    510:636:void unload(org.bukkit.plugin.Plugin) -> DaVf
react.surge.util.PoolCount -> sHmu:
react.surge.util.PoolDescriber -> TyjI:
react.surge.util.PoolNanoThrottle -> ylcF:
react.surge.util.PositionalSelector -> yRpM:
    react.glang.GSet allowedChunks -> mInq
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> KxMO
    39:40:void addChunk(org.bukkit.Chunk) -> NLqO
    44:44:react.glang.GSet getAllowedChunks() -> iepP
react.surge.util.Protocol -> jyhv:
    react.surge.util.Protocol LATEST -> TcKE
    react.surge.util.Protocol R1_12_2 -> yoUV
    react.surge.util.Protocol R1_12_2_PRE -> vwMS
    react.surge.util.Protocol R1_12_1 -> oHDm
    react.surge.util.Protocol R1_12 -> sdrG
    react.surge.util.Protocol R1_11_2 -> NYHm
    react.surge.util.Protocol R1_11_1 -> CHFi
    react.surge.util.Protocol R1_11 -> SNfI
    react.surge.util.Protocol R1_10_2 -> gQNn
    react.surge.util.Protocol R1_10_1 -> GTUB
    react.surge.util.Protocol R1_10 -> OJjH
    react.surge.util.Protocol R1_9_4 -> ucGl
    react.surge.util.Protocol R1_9_3 -> Spfj
    react.surge.util.Protocol R1_9_2 -> LJOu
    react.surge.util.Protocol R1_9_1 -> KrAd
    react.surge.util.Protocol R1_9 -> tFRA
    react.surge.util.Protocol R1_8_9 -> XxGd
    react.surge.util.Protocol R1_8_8 -> WSAb
    react.surge.util.Protocol R1_8_7 -> Gdso
    react.surge.util.Protocol R1_8_6 -> OKJM
    react.surge.util.Protocol R1_8_5 -> dHDt
    react.surge.util.Protocol R1_8_4 -> XoUq
    react.surge.util.Protocol R1_8_3 -> EyBI
    react.surge.util.Protocol R1_8_2 -> LccD
    react.surge.util.Protocol R1_8_1 -> djHU
    react.surge.util.Protocol R1_8 -> GvWG
    react.surge.util.Protocol R1_7_10 -> eBVl
    react.surge.util.Protocol R1_7_9 -> jkYG
    react.surge.util.Protocol R1_7_8 -> HFUU
    react.surge.util.Protocol R1_7_7 -> JfNN
    react.surge.util.Protocol R1_7_6 -> FYcQ
    react.surge.util.Protocol R1_7_5 -> rbQv
    react.surge.util.Protocol R1_7_4 -> waAM
    react.surge.util.Protocol R1_7_3 -> XMVN
    react.surge.util.Protocol R1_7_2 -> PpRU
    react.surge.util.Protocol R1_7_1 -> nxHr
    react.surge.util.Protocol B1_6_4 -> aFnN
    react.surge.util.Protocol B1_6_3 -> mSCX
    react.surge.util.Protocol B1_6_2 -> QIBV
    react.surge.util.Protocol B1_6_1 -> sLCh
    react.surge.util.Protocol B1_5_2 -> YXiL
    react.surge.util.Protocol B1_5_1 -> yMSs
    react.surge.util.Protocol B1_5 -> Wktd
    react.surge.util.Protocol B1_4_7 -> mIpV
    react.surge.util.Protocol B1_4_6 -> ahrG
    react.surge.util.Protocol B1_4_5 -> cfhA
    react.surge.util.Protocol B1_4_4 -> XxKE
    react.surge.util.Protocol B1_4_2 -> ABBk
    react.surge.util.Protocol B1_3_2 -> lFly
    react.surge.util.Protocol B1_3_1 -> jbjY
    react.surge.util.Protocol B1_2_5 -> tyYU
    react.surge.util.Protocol B1_2_4 -> YjKl
    react.surge.util.Protocol EARLIEST -> RCUC
    react.surge.util.Protocol UNKNOWN -> VFoR
    int version -> version
    java.lang.String packageVersion -> ptEG
    java.lang.String versionName -> aFmy
    boolean netty -> XfhN
    react.surge.util.Protocol[] ENUM$VALUES -> BVHs
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> lEGK
    118:118:java.lang.String getPackageVersion() -> ePXQ
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> gqLa
    142:150:react.surge.util.Protocol getProtocolVersion() -> Heqi
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> HCNu
    160:160:boolean isServerVersion() -> Utgx
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> UlWp
    175:175:boolean isActualVersion() -> eYcc
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> TOcB
    200:200:int getMetaVersion() -> rpiv
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> QqBX:
    react.surge.util.Protocol from -> xcbQ
    react.surge.util.Protocol to -> YPXL
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> dhCO
    21:21:react.surge.util.Protocol getTo() -> wfhA
    26:26:boolean contains(react.surge.util.Protocol) -> flgt
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> MBRR:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> YpSF
    70:70:int randomNextInt() -> fStO
    80:80:long randomNextLong() -> BeBT
    92:92:boolean isWithin(double) -> NLoi
    104:104:boolean isWithin(int) -> YnwL
    116:116:boolean isWithin(long) -> pHAg
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> eGaR
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> bGJW
react.surge.util.RawEvent -> LYAe:
react.surge.util.RayTrace -> INwC:
    org.bukkit.Location start -> Kyrd
    org.bukkit.util.Vector direction -> aiQW
    java.lang.Double maxDistance -> GvXP
    java.lang.Double distanceCovered -> sKbG
    java.lang.Double step -> gkCW
    java.lang.Boolean stop -> fNLh
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> rWXL
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> DaVf
    89:89:org.bukkit.Location getStart() -> UkvG
    94:95:void setStart(org.bukkit.Location) -> DjHY
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> Seot
    114:115:void setMaxDistance(java.lang.Double) -> yuAA
    119:119:java.lang.Double getDistanceCovered() -> aUgP
    124:125:void setDistanceCovered(java.lang.Double) -> flhV
    129:129:java.lang.Double getStep() -> ggww
    134:135:void setStep(java.lang.Double) -> TqFL
react.surge.util.ReflectionUtils -> UJJH:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> AFjc
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> AFjc
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> AFjc
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> AFjc
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> AFjc
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> AFjc
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> AFjc
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> AFjc
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> AFjc
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> AFjc
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> AFjc
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> AFjc
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> AFjc
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> AFjc
react.surge.util.ReflectionUtils$DataType -> UJJH$AFjc:
    react.surge.util.ReflectionUtils$DataType BYTE -> TQhv
    react.surge.util.ReflectionUtils$DataType SHORT -> sSqi
    react.surge.util.ReflectionUtils$DataType INTEGER -> DJjr
    react.surge.util.ReflectionUtils$DataType LONG -> hBpt
    react.surge.util.ReflectionUtils$DataType CHARACTER -> DlnU
    react.surge.util.ReflectionUtils$DataType FLOAT -> SqJc
    react.surge.util.ReflectionUtils$DataType DOUBLE -> BLux
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> txwS
    java.util.Map CLASS_MAP -> LdEg
    java.lang.Class primitive -> sTVJ
    java.lang.Class reference -> YOyn
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> nLun
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> FNht
    704:704:java.lang.Class getReference() -> Jcfa
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> HCNu
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> flgt
    741:742:java.lang.Class getReference(java.lang.Class) -> yuAA
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> AFjc
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> HCNu
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> HCNu
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> flgt
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> AFjc
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> UJJH$HCNu:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> YYKx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> rrtg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> KWsK
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> pvAN
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> rjeJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> usnL
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> Jnbl
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> QjfX
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> dYKW
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> MMYK
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> xdEg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> LdHl
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> jcNB
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> bcdq
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> hdvM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> qMmb
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> sTTc
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> KXRp
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> tOGh
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> dYIy
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> Vqcm
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> Iyjp:
    void refresh() -> refresh
react.surge.util.SQLOperation -> tnSy:
    react.surge.util.SQLOperation LOAD -> JTnp
    react.surge.util.SQLOperation SAVE -> xAaP
    react.surge.util.SQLOperation[] ENUM$VALUES -> QbTl
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> jiGo:
    react.surge.util.ServerState START -> vfNe
    react.surge.util.ServerState ENABLE -> EFAR
    react.surge.util.ServerState DISABLE -> aWpx
    react.surge.util.ServerState STOP -> Lkvg
    react.surge.util.ServerState RUNNING -> BLxX
    react.surge.util.ServerState[] ENUM$VALUES -> GeXn
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> bOnV:
    org.bukkit.Location location -> jbII
    org.bukkit.util.Vector offset -> aWpu
    org.bukkit.util.Vector size -> kwQP
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> DqxC
    90:94:org.bukkit.Location randomLocation() -> HoBt
    104:104:org.bukkit.Location randomSurface() -> CyEj
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> wVEo
    129:129:org.bukkit.util.Vector getSize() -> fdxg
react.surge.util.SnowLevel -> ydRH:
    byte level -> uAHh
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> KwnB
    51:52:void setLevel(byte) -> DaVf
react.surge.util.SuperCaller -> hRAC:
    void run() -> run
react.surge.util.T -> ndSL:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> HCNu
    32:35:void stop() -> stop
react.surge.util.TXT -> kIgU:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> dLoR
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> AFjc
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> AFjc
    99:99:java.lang.String line(react.surge.util.C,int) -> AFjc
    113:113:java.lang.String underline(react.surge.util.C,int) -> HCNu
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> AFjc
react.surge.util.Tag -> LrTG:
    java.lang.String value() -> value
react.surge.util.Timer -> CgYT:
    long tns -> QPsP
    long cns -> OeAI
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> dVaw
react.surge.util.VectorMath -> uGGk:
    int[] $SWITCH_TABLE$surge$util$Axis -> Mepr
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> dGhV
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> AFjc
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> AFjc
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> HCNu
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> flgt
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> HCNu
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> HCNu
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> flgt
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> yuAA
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> flhV
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> TqFL
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> dLoR
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> eGah
    111:111:double round(double,int) -> flhV
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> AFjc
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> AFjc
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> AFjc
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> yuAA
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> flhV
    268:268:org.bukkit.util.Vector toVector(float,float) -> AFjc
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> AFjc
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> AFjc
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> XuAe
    337:340:double getSpeed(org.bukkit.util.Vector) -> HTQM
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> AFjc
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> DaVf
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> AFjc
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> HCNu
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> flgt
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> yuAA
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> DrWy
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> nJgH
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> tvsB
react.surge.util.VectorMath$1 -> uGGk$1:
    org.bukkit.util.Vector val$vector -> BMXm
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> qKDo
    1:1:java.lang.Object onAdapt(java.lang.Object) -> dLoR
react.surge.util.W -> wnpP:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> XuAe
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> AFjc
    75:86:org.bukkit.entity.Entity getEntity(int) -> sQPI
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> AFjc
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> AFjc
    143:143:int getChunkX(org.bukkit.block.Block) -> HTQM
    155:155:int getChunkY(org.bukkit.block.Block) -> DaVf
    168:169:void dropXp(org.bukkit.Location,int) -> HCNu
    180:180:int getChunkZ(org.bukkit.block.Block) -> DrWy
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> HCNu
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> AFjc
    232:239:react.glang.GList news(org.bukkit.Location) -> gojj
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> AFjc
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> YLpO
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> qAqx
    300:300:org.bukkit.World toSync(org.bukkit.World) -> VUHT
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> qKDo
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> NLqO
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> bGJW
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> Cnwt
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> AFjc
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> AFjc
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> AFjc
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> AFjc
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> AFjc
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> AFjc
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> AFjc
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> AFjc
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> PJdo
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> DjHY
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> YLpO
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> flgt
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> AFjc
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> AFjc
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> AFjc
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> AFjc
react.surge.util.W$1 -> wnpP$1:
    java.lang.Double val$doff -> wGEt
    org.bukkit.entity.Entity val$e -> PyEU
    org.bukkit.entity.Entity[] val$result -> uYpf
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> DaVf
react.surge.util.Worlds -> IXKb:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> ndPh
    33:33:boolean hasWorld(java.lang.String) -> WXOn
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> lwbM:
react.text.ColoredString -> JlPT:
    react.surge.util.C c -> UMBQ
    java.lang.String s -> Ninw
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> vRfH
    42:43:void setC(react.surge.util.C) -> HCNu
    47:47:java.lang.String getS() -> dMqM
    52:53:void setS(java.lang.String) -> SBqm
react.text.RTEX -> MtxT:
    react.glang.GList extras -> TRNv
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> eHcd
    44:58:react.json.JSONObject toJSON() -> vHtE
react.text.RTX -> EnCD:
    react.json.JSONArray base -> dHKs
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> TqFL
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> HCNu
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> AFjc
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> AFjc
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> HCNu
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> flgt
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> AFjc
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> HCNu
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> flgt
    265:265:react.json.JSONArray toJSON() -> eIDb
    276:277:void tellRawTo(org.bukkit.entity.Player) -> NffA
react.text.RawText -> opJc:
    java.lang.String COLOR_BLACK -> RLIR
    java.lang.String COLOR_DARK_BLUE -> hLGx
    java.lang.String COLOR_DARK_GREEN -> XLyF
    java.lang.String COLOR_DARK_AQUA -> GKhm
    java.lang.String COLOR_DARK_RED -> Lkyc
    java.lang.String COLOR_DARK_PURPLE -> ynyy
    java.lang.String COLOR_GOLD -> PhGD
    java.lang.String COLOR_GRAY -> pvCA
    java.lang.String COLOR_DARK_GRAY -> grvk
    java.lang.String COLOR_BLUE -> RLJF
    java.lang.String COLOR_GREEN -> rIDS
    java.lang.String COLOR_AQUA -> kCnX
    java.lang.String COLOR_RED -> RLIm
    java.lang.String COLOR_LIGHT_PURPLE -> JUTC
    java.lang.String COLOR_YELLOW -> QbXf
    java.lang.String COLOR_WHITE -> hnJm
    java.lang.String COLOR_NONE -> Ibpo
    java.lang.String HEAD_TEXT -> XEJO
    java.lang.String HEAD_COLOR -> Rmkm
    java.lang.String HEAD_BOLD -> ngLB
    java.lang.String HEAD_ITALIC -> hmis
    java.lang.String HEAD_UNDERLINED -> UDPG
    java.lang.String HEAD_STRIKETHROUGH -> ygIv
    java.lang.String HEAD_OBFUSCATED -> BDjd
    java.lang.String HEAD_CLICK_EVENT -> hTXH
    java.lang.String HEAD_HOVER_EVENT -> KFsF
    java.lang.String HEAD_ACTION -> cgJf
    java.lang.String HEAD_VALUE -> UTpY
    java.lang.String HEAD_EXTRA -> gbTy
    java.lang.String HEAD_ACTION_SHOW_TEXT -> gQSl
    java.lang.String HEAD_ACTION_COMMAND -> vvpt
    java.util.ArrayList components -> vTnU
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> QMmY
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> flhV
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> AFjc
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> AFjc
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> AFjc
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> AFjc
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> AFjc
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> AFjc
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> AFjc
    307:313:java.lang.String compile() -> SwVI
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> AFjc

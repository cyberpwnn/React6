react.BStats -> org.cyberpwn.react.kHre:
    int B_STATS_VERSION -> kHre
    java.lang.String URL -> URL
    boolean logFailedRequests -> AFkC
    java.lang.String serverUUID -> PmIn
    org.bukkit.plugin.java.JavaPlugin plugin -> CoTn
    java.util.List charts -> vsgG
    55:125:void <init>(org.bukkit.plugin.java.JavaPlugin) -> <init>
    135:140:void addCustomChart(react.BStats$CustomChart) -> kHre
    147:177:void startSubmitting() -> kHre
    187:207:org.json.simple.JSONObject getPluginData() -> AFkC
    225:257:org.json.simple.JSONObject getServerData() -> PmIn
    266:315:void submitData() -> CoTn
    327:357:void sendData(org.json.simple.JSONObject) -> kHre
    370:378:byte[] compress(java.lang.String) -> kHre
    46:46:boolean access$0() -> vsgG
    52:52:org.bukkit.plugin.java.JavaPlugin access$1(react.BStats) -> kHre
    264:264:void access$2(react.BStats) -> AFkC
    325:325:void access$3(org.json.simple.JSONObject) -> AFkC
react.BStats$1 -> org.cyberpwn.react.kHre$1:
    react.BStats this$0 -> tBlW
    java.util.Timer val$timer -> JHuE
    1:148:void <init>(react.BStats,java.util.Timer) -> <init>
    153:170:void run() -> run
    148:148:react.BStats access$0(react.BStats$1) -> kHre
react.BStats$1$1 -> org.cyberpwn.react.kHre$1$1:
    react.BStats$1 this$1 -> hbNQ
    1:162:void <init>(react.BStats$1) -> <init>
    167:168:void run() -> run
react.BStats$2 -> org.cyberpwn.react.kHre$2:
    react.BStats this$0 -> tBlW
    org.json.simple.JSONObject val$data -> XuBI
    1:295:void <init>(react.BStats,org.json.simple.JSONObject) -> <init>
    303:313:void run() -> run
react.BStats$AdvancedBarChart -> org.cyberpwn.react.kHre$kHre:
    java.util.concurrent.Callable callable -> HnCj
    745:747:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    753:782:org.json.simple.JSONObject getChartData() -> tBlW
react.BStats$AdvancedPie -> org.cyberpwn.react.kHre$AFkC:
    java.util.concurrent.Callable callable -> HnCj
    491:493:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    499:523:org.json.simple.JSONObject getChartData() -> tBlW
react.BStats$CustomChart -> org.cyberpwn.react.kHre$PmIn:
    java.lang.String chartId -> jEor
    396:403:void <init>(java.lang.String) -> <init>
    408:428:org.json.simple.JSONObject getRequestJsonObject() -> JHuE
    org.json.simple.JSONObject getChartData() -> tBlW
    406:406:org.json.simple.JSONObject access$0(react.BStats$CustomChart) -> AFkC
react.BStats$DrilldownPie -> org.cyberpwn.react.kHre$CoTn:
    java.util.concurrent.Callable callable -> HnCj
    545:547:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    553:583:org.json.simple.JSONObject getChartData() -> tBlW
react.BStats$MultiLineChart -> org.cyberpwn.react.kHre$vsgG:
    java.util.concurrent.Callable callable -> HnCj
    644:646:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    652:676:org.json.simple.JSONObject getChartData() -> tBlW
react.BStats$SimpleBarChart -> org.cyberpwn.react.kHre$tBlW:
    java.util.concurrent.Callable callable -> HnCj
    699:701:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    707:722:org.json.simple.JSONObject getChartData() -> tBlW
react.BStats$SimplePie -> org.cyberpwn.react.kHre$JHuE:
    java.util.concurrent.Callable callable -> HnCj
    453:455:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    461:469:org.json.simple.JSONObject getChartData() -> tBlW
react.BStats$SingleLineChart -> org.cyberpwn.react.kHre$hbNQ:
    java.util.concurrent.Callable callable -> HnCj
    605:607:void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    613:621:org.json.simple.JSONObject getChartData() -> tBlW
react.Config -> org.cyberpwn.react.AFkC:
    react.glang.GMap worldConfigs -> xylS
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> avjr
    java.lang.String A_REDSTONE_DYNAMIC_CLOCK -> UtIc
    java.lang.String A_COMMANDOVERRIDE_TPS -> WWke
    java.lang.String A_SAMPLE_VIEWPORT -> CxFc
    java.lang.String A_RAI -> eaTr
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> iSmg
    java.lang.String A_POOL_MAXTHREADS -> HBnj
    java.lang.String A_POOL_SYNC_NANOS -> rfxq
    java.lang.String A_CULLING_ENABLED -> eaUO
    java.lang.String A_FASTLEAF_ENABLED -> fBUO
    java.lang.String A_FASTLEAF_ONDECAY -> BtcN
    java.lang.String A_FASTLEAF_INSTANT -> XIke
    java.lang.String A_FASTLEAF_DECAYPERIOD -> SnAi
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> aegl
    java.lang.String A_ENTITYSTACK_ENABLED -> NgBu
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> kbcn
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> Kvjq
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> FpLr
    java.lang.String A_GLASS_SHOW_BLOCKS -> Nwcn
    java.lang.String A_GLASS_SHOW_PARTICLES -> VUID
    java.lang.String A_ALLOW_CULL -> FEYN
    java.lang.String A_ALLOW_PURGE -> XuBA
    java.lang.String A_ALLOW_STACKING -> IOCR
    java.lang.String A_CULL_RULES -> IqEw
    java.lang.String A_RAI_TPS_HIGH_TICK -> WFhj
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> Jsgx
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> lUFh
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> lUGI
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> KCgM
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> BJOI
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> kHuH
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> KelS
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> eOtV
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> NDak
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> eOss
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> qRwH
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> iTQa
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> TgvP
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> MuEL
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> FNLn
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> GrrV
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> SBpW
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> AGMS
    java.lang.String A_RAI_FLUID_TIME_CEIL -> CxIF
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> OYHT
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> pHCm
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> TVtc
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> QooA
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> vHso
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> OHGK
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> pqvc
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> aTim
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> kbgY
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> inDI
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> uOBu
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> FyBI
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> wfIq
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> qRvI
    java.lang.String A_USE_WORLD_CONFIGS -> KTjC
    java.lang.String A_ENTITY_STACKER_SHOW_PARTICLES -> IyXI
    java.lang.String A_ENTITY_STACKER_SHOW_NAMETAG -> SSot
    java.lang.String A_LANGUAGE -> JYwM
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> PRwd
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> WXLm
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> DihP
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> FNLP
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> vREa
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> TEqw
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> SdrW
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> vkWF
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> AXOb
    java.lang.String A_RAI_ENTITY_PROPIGATE -> UYvn
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> EKHw
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> jWSM
    java.lang.String A_ENTITY_STACKER_NAME_TAG_FORMAT -> WrAD
    double MAX_EXPLOSION_MS -> dgCt
    boolean REDSTONE_DYNAMIC_CLOCK -> NxFw
    boolean COMMANDOVERRIDES_TPS -> DOvI
    int SAMPLE_VIEWPORT -> rEXP
    boolean RAI -> aTlF
    int ENTITY_STACK_MAX_COUNT -> avoG
    int POOL_MAXTHREADS -> oxHO
    long POOL_SYNC_NANOS -> KvpL
    boolean CULLING_ENABLED -> rond
    boolean FASTLEAF_ENABLED -> YxIW
    boolean FASTLEAF_ONDECAY -> bFmN
    boolean FASTLEAF_INSTANT -> nccI
    int FASTLEAF_DECAYPERIOD -> TWXB
    boolean COMMANDOVERRIDES_MEMORY -> GsUQ
    boolean ENTITYSTACK_ENABLED -> YMUC
    int ENTITYSTACK_MINIMUM_GROUP -> NUem
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> SKcS
    int ENTITYSTACK_MAXIMUM_HEALTH -> myrC
    boolean GLASS_SHOW_BLOCKS -> AqcC
    boolean GLASS_SHOW_PARTICLES -> WaAp
    react.glang.GList ALLOW_CULL -> ncbN
    react.glang.GList ALLOW_PURGE -> tmcy
    react.glang.GList ALLOW_STACKING -> PAya
    react.glang.GList CULL_RULES -> FxcP
    double RAI_TPS_HIGH_TICK -> LrDX
    long RAI_REDSTONE_TIME_FLOOR -> GbTW
    long RAI_REDSTONE_TIME_CEIL -> qSYb
    long RAI_REDSTONE_TIME_MUDDING -> wDHo
    double RAI_REDSTONE_TIME_FUNCTION -> kbhb
    double RAI_REDSTONE_TIME_OVERBLEED -> ycaS
    int RAI_REDSTONE_TIME_RADIUS -> Sutu
    int RAI_REDSTONE_TIME_PROPIGATION -> xGKn
    long RAI_HOPPER_TIME_FLOOR -> UHve
    long RAI_HOPPER_TIME_CEIL -> XcbW
    long RAI_HOPPER_TIME_MUDDING -> BuHJ
    double RAI_HOPPER_TIME_FUNCTION -> MlTd
    double RAI_HOPPER_TIME_OVERBLEED -> LhqI
    int RAI_HOPPER_TIME_RADIUS -> PmNH
    int RAI_HOPPER_TIME_PROPIGATION -> eaWx
    int RAI_ENTITY_CHUNK_MULTIPLIER -> mhnS
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> MuEm
    int RAI_ENTITY_CHUNK_RADIUS -> NMUH
    long RAI_FLUID_TIME_FLOOR -> LiQs
    long RAI_FLUID_TIME_CEIL -> IgxV
    long RAI_FLUID_TIME_MUDDING -> bGOr
    double RAI_FLUID_TIME_FUNCTION -> ydDv
    double RAI_FLUID_TIME_OVERBLEED -> miRj
    int RAI_FLUID_TIME_RADIUS -> tmgL
    int RAI_FLUID_TIME_PROPIGATION -> fJjl
    double SMEAR_TICK_ENTITIES_MAX_TICK -> TFXR
    double SMEAR_TICK_TILES_MAX_TICK -> uVvp
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> TNgu
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> ssTV
    double SMEAR_TICK_ENTITIES_AMOUNT -> kYyq
    double SMEAR_TICK_TILES_AMOUNT -> AOaW
    boolean SMEAR_TICK_ENTITIES_ENABLE -> BSDu
    boolean SMEAR_TICK_TILES_ENABLE -> Vvqg
    boolean HOPPER_OVERTICK_ENABLE -> EKMG
    boolean USE_WORLD_CONFIGS -> aCkX
    boolean ENTITY_STACKER_SHOW_PARTICLES -> XJSK
    boolean ENTITY_STACKER_SHOW_NAME_TAG -> KoAc
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> rxaN
    long RAI_CHUNK_TIME_CEIL -> pHHN
    long RAI_CHUNK_TIME_MUDDING -> mGOR
    double RAI_CHUNK_TIME_FUNCTION -> tTSW
    double RAI_CHUNK_TIME_OVERBLEED -> rpPT
    int RAI_CHUNK_TIME_RADIUS -> VwRP
    int RAI_CHUNK_TIME_PROPIGATION -> MSEW
    boolean RAI_CHUNK_TIME_PROPIGATE -> eiiw
    boolean RAI_FLUID_TIME_PROPIGATE -> NEGJ
    boolean RAI_ENTITY_PROPIGATE -> EmPg
    boolean RAI_HOPPER_TIME_PROPIGATE -> WGPV
    boolean RAI_REDSTONE_TIME_PROPIGATE -> nIpa
    java.lang.String ENTITY_STACKER_NAME_TAG_FORMAT -> NUjH
    boolean hrld -> lCnL
    boolean rns -> RsXW
    boolean rrl -> FEaj
    39:667:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    672:689:void doTrack(org.bukkit.plugin.Plugin) -> kHre
    694:716:void onRead(org.bukkit.plugin.Plugin) -> AFkC
    720:750:void read(java.io.File,boolean) -> kHre
    754:771:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> kHre
    776:784:void closeWorldConfig(org.bukkit.World) -> AFkC
    789:902:surge.cluster.DataCluster read(surge.cluster.DataCluster,boolean) -> kHre
    907:944:surge.cluster.DataCluster defaultConfig(boolean) -> kHre
    949:1028:react.glang.GList getDefaultEntitiesForStacking() -> hbNQ
    1033:1052:react.glang.GList getDefaultEntitiesForCulling() -> XuBI
    1057:1094:react.glang.GList getDefaultEntitiesForRemoval() -> HnCj
    1099:1140:react.glang.GList getDefaultCullRules() -> jEor
react.Config$1 -> org.cyberpwn.react.AFkC$1:
    java.io.File val$fConfig -> XtiN
    java.io.File val$fConfigExperimental -> RYem
    org.bukkit.plugin.Plugin val$main -> gNRE
    1:675:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    680:684:void run() -> run
react.Config$2 -> org.cyberpwn.react.AFkC$2:
    react.api.WorldConfig val$wc -> sruq
    org.bukkit.World val$w -> lfRT
    1:761:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    766:767:void run() -> run
react.Gate -> org.cyberpwn.react.PmIn:
    react.glang.GMap defaultSettings -> CVKF
    react.glang.GSet refresh -> XBFT
    react.glang.GSet destroy -> LOdX
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> clXj
    46:48:void <clinit>() -> <clinit>
    44:44:void <init>() -> <init>
    52:142:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> kHre
    148:179:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> kHre
    184:184:int getChunkCountForView() -> xylS
    189:189:int getMaxChunksForView() -> avjr
    194:194:boolean hasFawe() -> UtIc
    199:220:void tickEntityNextTickListTick(org.bukkit.World) -> PmIn
    224:228:void resetEntityMaxTick(org.bukkit.World) -> CoTn
    232:232:int getEntityTickMax(org.bukkit.World) -> vsgG
    237:237:int getTileTickMax(org.bukkit.World) -> tBlW
    242:260:void tweakEntityTickMax(org.bukkit.World,int) -> kHre
    264:281:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> kHre
    286:290:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> kHre
    294:306:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> kHre
    311:315:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> AFkC
    319:337:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> kHre
    341:345:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> JHuE
    350:353:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> kHre
    358:361:java.lang.String msg(react.api.ReactPlayer,react.notification.Notification) -> kHre
    366:369:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> AFkC
    374:374:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> PmIn
    379:379:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> CoTn
    384:384:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> vsgG
    389:389:boolean isBadForUnloading() -> WWke
    394:394:boolean canUnload(org.bukkit.World,int,int) -> kHre
    401:417:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    423:434:void unloadChunk(org.bukkit.World,int,int) -> AFkC
    438:454:void removeEntity(org.bukkit.entity.Entity) -> kHre
    458:459:void purgeEntity(org.bukkit.entity.Entity) -> AFkC
    463:492:void purgeEntity(org.bukkit.entity.Entity,boolean) -> kHre
    496:517:void cullEntity(org.bukkit.entity.Entity) -> PmIn
    522:567:void updateBlock(org.bukkit.block.Block) -> kHre
    571:575:java.lang.String header(java.lang.String,surge.util.C) -> kHre
    580:580:java.lang.String header(surge.util.C) -> kHre
    586:590:void updateFluid(org.bukkit.block.Block) -> AFkC
    594:595:void refresh(org.bukkit.Chunk) -> AFkC
    600:619:void refreshChunks() -> CxFc
    623:624:void sendBlockChange(org.bukkit.Location) -> kHre
    44:44:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> eaTr
react.Gate$1 -> org.cyberpwn.react.PmIn$1:
    react.api.SelectorPosition val$sel -> gVaW
    react.glang.Callback val$prog -> xyta
    react.glang.Callback val$cb -> fuaX
    1:52:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    57:140:void run() -> run
react.Gate$1$1 -> org.cyberpwn.react.PmIn$1$1:
    react.Gate$1 this$1 -> VLaJ
    java.lang.Object val$o -> ydFj
    java.lang.reflect.Constructor val$vectorConstruct -> EudL
    java.lang.reflect.Constructor val$cuboidConstruct -> GbWw
    java.lang.reflect.Method val$faweFixMethod -> imiT
    java.lang.Integer[] val$total -> ArHt
    java.lang.Integer[] val$sof -> CEKE
    react.glang.Callback val$prog -> xyta
    java.lang.Integer val$tot -> upkC
    1:84:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    91:109:void run() -> run
react.Gate$1$2 -> org.cyberpwn.react.PmIn$1$2:
    react.Gate$1 this$1 -> VLaJ
    react.glang.Callback val$prog -> xyta
    react.glang.Callback val$cb -> fuaX
    java.lang.Integer[] val$total -> ArHt
    1:113:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    120:128:void run() -> run
react.Info -> org.cyberpwn.react.CoTn:
    java.lang.String CORE_REACT_DOT -> XBEG
    java.lang.String CORE_NAME -> VCnN
    java.lang.String CORE_CACHE -> wUOA
    java.lang.String WORLD_CONFIGS -> yAai
    java.lang.String CORE_DOTYML -> aCmP
    java.lang.String COMMAND_REACT -> BAey
    java.lang.String COMMAND_RAI -> MAcw
    java.lang.String COMMAND_ACT_DESCRIPTION -> mXRf
    java.lang.String COMMAND_ACT -> qlnn
    java.lang.String COMMAND_ACT_ALIAS_1 -> eHKE
    java.lang.String COMMAND_ACT_ALIAS_2 -> uEui
    java.lang.String COMMAND_ACT_USAGE -> dnyj
    java.lang.String COMMAND_HELP_DESCRIPTION -> YUhi
    java.lang.String COMMAND_HELP -> jEwC
    java.lang.String COMMAND_HELP_ALIAS_1 -> VfSB
    java.lang.String COMMAND_HELP_ALIAS_2 -> Bkxu
    java.lang.String COMMAND_HELP_USAGE -> NLxW
    java.lang.String COMMAND_STATUS_DESCRIPTION -> XdGk
    java.lang.String COMMAND_STATUS -> XBDm
    java.lang.String COMMAND_STATUS_ALIAS_1 -> oVHJ
    java.lang.String COMMAND_STATUS_ALIAS_2 -> aTqj
    java.lang.String COMMAND_STATUS_USAGE -> OYOk
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> VetE
    java.lang.String COMMAND_CPUSCORE -> UcQe
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> KMDK
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> xiVX
    java.lang.String COMMAND_CPUSCORE_USAGE -> KDSI
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> pHKt
    java.lang.String COMMAND_RELOAD -> bhwI
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> LrIv
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> vbmw
    java.lang.String COMMAND_RELOAD_USAGE -> RHeT
    java.lang.String COMMAND_FEATURE_DESCRIPTION -> WGSo
    java.lang.String COMMAND_FEATURE -> fdaN
    java.lang.String COMMAND_FEATURE_ALIAS_1 -> srvg
    java.lang.String COMMAND_FEATURE_ALIAS_2 -> fJnS
    java.lang.String COMMAND_FEATURE_USAGE -> VTqb
    java.lang.String COMMAND_CTP_DESCRIPTION -> xFqb
    java.lang.String COMMAND_CTP -> KMCJ
    java.lang.String COMMAND_CTP_ALIAS_1 -> OXnN
    java.lang.String COMMAND_CTP_ALIAS_2 -> CxPL
    java.lang.String COMMAND_CTP_USAGE -> dgMF
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> fJoF
    java.lang.String COMMAND_MONITOR -> wnbL
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> BRib
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> Whuy
    java.lang.String COMMAND_MONITOR_USAGE -> IqPd
    java.lang.String COMMAND_ENV_DESCRIPTION -> sYeI
    java.lang.String COMMAND_ENV -> UQoK
    java.lang.String COMMAND_ENV_ALIAS_1 -> pjRM
    java.lang.String COMMAND_ENV_ALIAS_2 -> RjkW
    java.lang.String COMMAND_ENV_USAGE -> NVOM
    java.lang.String COMMAND_VERSION_DESCRIPTION -> eGnX
    java.lang.String COMMAND_VERSION -> uyaN
    java.lang.String COMMAND_VERSION_ALIAS_1 -> gyJN
    java.lang.String COMMAND_VERSION_ALIAS_2 -> FNWV
    java.lang.String COMMAND_VERSION_USAGE -> OHPY
    java.lang.String COMMAND_MAP_DESCRIPTION -> wTrp
    java.lang.String COMMAND_MAP -> cJXt
    java.lang.String COMMAND_MAP_ALIAS_1 -> WXXo
    java.lang.String COMMAND_MAP_ALIAS_2 -> ytkY
    java.lang.String COMMAND_MAP_USAGE -> lwVq
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> xXUu
    java.lang.String COMMAND_TOPCHUNK -> dfnb
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> lnfO
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> Kvxf
    java.lang.String COMMAND_TOPCHUNK_USAGE -> eirA
    java.lang.String COMMAND_GLASS_DESCRIPTION -> VLeC
    java.lang.String COMMAND_GLASS -> KoJD
    java.lang.String COMMAND_GLASS_ALIAS_1 -> PmWU
    java.lang.String COMMAND_GLASS_ALIAS_2 -> IqRL
    java.lang.String COMMAND_GLASS_USAGE -> bPFe
    java.lang.String COMMAND_SUB_DESCRIPTION -> XRiX
    java.lang.String COMMAND_SUB -> qKQM
    java.lang.String COMMAND_SUB_ALIAS_1 -> EvGX
    java.lang.String COMMAND_SUB_ALIAS_2 -> WFuT
    java.lang.String COMMAND_SUB_USAGE -> JRRT
    java.lang.String COMMAND_USUB_DESCRIPTION -> FxjA
    java.lang.String COMMAND_USUB -> RayY
    java.lang.String COMMAND_USUB_ALIAS_1 -> kkay
    java.lang.String COMMAND_USUB_ALIAS_2 -> avuf
    java.lang.String COMMAND_USUB_USAGE -> ejQN
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> vRPO
    java.lang.String COMMAND_CBLAME -> CVPI
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> MclH
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> ArMA
    java.lang.String COMMAND_CBLAME_USAGE -> pjPe
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> byxs
    java.lang.String COMMAND_ACTIONLOG -> cSIk
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> KTtj
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> rgdw
    java.lang.String COMMAND_ACTIONLOG_USAGE -> ychd
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> lewQ
    java.lang.String COMMAND_CAPABILITIES -> pQBR
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> WOjA
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> fugo
    java.lang.String COMMAND_CAPABILITIES_USAGE -> ESgA
    java.lang.String MSG_PERMISSION -> DjUw
    java.lang.String MSG_MONITORING_STARTED -> KTvw
    java.lang.String MSG_MONITORING_STOPPED -> SvbL
    java.lang.String MSG_ACTIONLOGGING_STARTED -> aTvD
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> aUWD
    java.lang.String MSG_GLASS_STARTED -> EBdv
    java.lang.String MSG_GLASS_STOPPED -> IhdW
    org.bukkit.Color COLOR_HOPPER -> JkgX
    org.bukkit.Color COLOR_BLOCK_UPDATE -> CNAB
    org.bukkit.Color COLOR_BLOCK_FROMTO -> IXCe
    org.bukkit.Color COLOR_BLOCK_BURN -> VoJl
    org.bukkit.Color COLOR_BLOCK_DECAY -> OsGT
    org.bukkit.Color COLOR_BLOCK_FORM -> Ubue
    java.lang.String NAME_TICK -> DHSi
    java.lang.String NAME_MEMORY -> RIKp
    java.lang.String NAME_CHUNKS -> PJuT
    java.lang.String NAME_ENTITIES -> NgRq
    java.lang.String STATE_MONITORING_TAB -> Whyq
    java.lang.String STATE_MONITORING_ENABLED -> xXXN
    java.lang.String STATE_MONITORING_HIGH -> YpAr
    java.lang.String STATE_CHANNELS -> Jked
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> DHQr
    java.lang.String STATE_MAPPING_ENABLED -> gyKR
    java.lang.String STATE_SOUND_PLAYS -> eHPR
    java.lang.String STATE_MONITORING_POSTED -> ySJe
    java.lang.String STATE_MONITORING_LASTTAB -> mqjd
    java.lang.String STATE_GLASSES_ENABLED -> KniY
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> JIbv
    java.lang.String STATE_PLAYER_HOTBAR -> BmBE
    java.lang.String STATE_PLAYER_SHIFT -> cSKu
    java.lang.String STATE_PLAYER_SCROLL -> oxQJ
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> lfVf
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> tCYy
    java.lang.String PERM_ACCESS -> pjSA
    java.lang.String PERM_TELEPORT -> jFaU
    java.lang.String PERM_MONITOR -> ofrP
    java.lang.String PERM_MONITOR_TITLE -> ksxG
    java.lang.String PERM_MONITOR_ACTIONLOG -> DYVf
    java.lang.String PERM_MONITOR_MAP -> Rjoe
    java.lang.String PERM_MONITOR_ENVIRONMENT -> tfBO
    java.lang.String PERM_MONITOR_GLASSES -> OjXK
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> NgUJ
    java.lang.String PERM_ACT -> tKmo
    java.lang.String PERM_RAI -> EvLg
    java.lang.String PERM_RAI_CONTROL -> RINB
    java.lang.String PERM_RAI_ACCESS -> BuRn
    java.lang.String PERM_RAI_MONITOR -> VMJL
    java.lang.String PERM_RELOAD -> URVn
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> ofrB
    java.lang.String SAMPLER_REDSTONE_TICK -> nAjw
    java.lang.String SAMPLER_ENTITY_TIME -> kIcg
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> ksvu
    java.lang.String SAMPLER_TILE_TIME_LOCK -> rViE
    java.lang.String SAMPLER_TILE_TIME -> kcVc
    java.lang.String SAMPLER_TILE_DROPTICK -> Nwui
    java.lang.String SAMPLER_ENTITY_DROPTICK -> HTat
    java.lang.String SAMPLER_REDSTONE_SECOND -> SnTR
    java.lang.String SAMPLER_REDSTONE_TIME -> DYVD
    java.lang.String SAMPLER_PHYSICS_TIME -> yuPS
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> OXtW
    java.lang.String SAMPLER_HOPPER_TICK -> eGpr
    java.lang.String SAMPLER_HOPPER_SECOND -> loKF
    java.lang.String SAMPLER_HOPPER_TIME -> ETHe
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> VLfu
    java.lang.String SAMPLER_FLUID_TICK -> maLU
    java.lang.String SAMPLER_FLUID_SECOND -> YxSy
    java.lang.String SAMPLER_FLUID_TIME -> YpDh
    java.lang.String SAMPLER_TPS -> Qgki
    java.lang.String SAMPLER_TICK -> vARI
    java.lang.String SAMPLER_TIU -> lfXd
    java.lang.String SAMPLER_MEM -> wfXL
    java.lang.String SAMPLER_FREEMEM -> wfXJ
    java.lang.String SAMPLER_MAXMEM -> xWxg
    java.lang.String SAMPLER_ALLOCMEM -> kkep
    java.lang.String SAMPLER_MAHS -> inPu
    java.lang.String SAMPLER_CHK -> QxnA
    java.lang.String SAMPLER_ATASK -> upsB
    java.lang.String SAMPLER_STASK -> aMKN
    java.lang.String SAMPLER_CHK_TIME -> MttS
    java.lang.String SAMPLER_EXPLOSION_TIME -> CgWU
    java.lang.String SAMPLER_CHKS -> DHWU
    java.lang.String SAMPLER_ENT -> ncqL
    java.lang.String SAMPLER_ENTLIV -> xrOs
    java.lang.String SAMPLER_ENTDROP -> XdSU
    java.lang.String SAMPLER_ENTTILE -> GRBC
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> jygt
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> ebHK
    java.lang.String ACTION_CULL_ENTITIES_NAME -> DGvc
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> SDBh
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> fBhG
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> jhfO
    java.lang.String ACTION_UPDATE_FLUID_NAME -> eGuJ
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> gxne
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> sYmt
    java.lang.String ACTION_LOCK_FLUID_STATUS -> fvMG
    java.lang.String ACTION_LOCK_FLUID_NAME -> psIU
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> Qgnu
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> SnUt
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> FhPj
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> GHpN
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> VDXs
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> tLPO
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> OYWN
    java.lang.String ACTION_LOCK_HOPPER_NAME -> PTJH
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> MRpN
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> UcYK
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> PJxK
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> UJHB
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> EBgs
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> skOs
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> XSOx
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> wnkM
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> nBMY
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> EeLb
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> ncpF
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> sIMF
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> KMKh
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> kcXL
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> dERA
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> Hmtk
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> pPcn
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> xrRS
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> mPOb
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> INwY
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> tmtn
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> jqYi
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> yuTw
    java.lang.String ACTION_FIX_LIGHTING_NAME -> uyht
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> WOnw
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> tKqv
    java.lang.String ACTION_COLLECT_GARBAGE -> paiV
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> hQaR
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> ryQe
    8:273:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> org.cyberpwn.react.vsgG:
    java.lang.String BUNDLE_NAME -> PuoR
    java.util.ResourceBundle RESOURCE_BUNDLE -> tecy
    java.util.ResourceBundle PRIMARY_BUNDLE -> XBRe
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> org.cyberpwn.react.tBlW:
    react.React instance -> DbLf
    react.controller.SampleController sampleController -> DrmY
    react.controller.PlayerController playerController -> nSQt
    react.controller.MonitorController monitorController -> pXvw
    react.controller.CommandController commandController -> INxR
    react.controller.ActionController actionController -> YoiG
    react.controller.FastDecayController fastDecayController -> hcAw
    react.controller.EntityStackController entityStackController -> Mldk
    react.controller.GlassController glassController -> XtuF
    react.controller.EntityCullController entityCullController -> ydRd
    react.controller.SpikeController spikeController -> CpIa
    react.controller.SecurityController securityController -> DYYj
    react.controller.RedstoneController redstoneController -> fSjD
    react.controller.HopperController hopperController -> fBhR
    react.controller.PhysicsController physicsController -> DbKW
    react.controller.TickTimeController tickTimeController -> pjXv
    react.controller.RAIController raiController -> wLjN
    react.controller.FluidController fluidController -> gFKl
    react.controller.ChunkController chunkController -> fKYT
    react.controller.GraphController graphController -> CNHL
    react.controller.ChronophyFluidController fluidChronophyController -> Nfvt
    react.controller.EventController eventController -> iLQr
    react.controller.SmearTickController smearTickController -> WrSU
    react.controller.FeatureController featureController -> RRBT
    react.controller.HopperOvertickController hopperPlungeController -> gElA
    react.controller.LanguageController languageController -> Lqrf
    react.controller.ExplosiveController explosiveController -> nBSP
    react.controller.WorldController worldController -> tmvr
    react.controller.MessageController messageController -> YVYK
    react.controller.MetricsController metricsController -> oDts
    react.controller.FeatureSetController featureSetController -> qupK
    45:45:void <init>() -> <init>
    143:157:void enable() -> enable
    163:163:void disable() -> disable
react.React$1 -> org.cyberpwn.react.tBlW$1:
    react.React this$0 -> fBjo
    1:143:void <init>(react.React) -> <init>
    148:149:void run() -> run
react.action.ActionCollectGarbage -> org.cyberpwn.react.JHuE:
    20:23:void <init>() -> <init>
    28:62:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    67:67:java.lang.String getNode() -> iSmg
react.action.ActionCollectGarbage$1 -> org.cyberpwn.react.JHuE$1:
    react.action.ActionCollectGarbage this$0 -> PvRU
    react.action.source.IActionSource val$source -> tnXE
    1:30:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    36:60:void run() -> run
    30:30:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> kHre
react.action.ActionCollectGarbage$1$1 -> org.cyberpwn.react.JHuE$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> rEnA
    long val$mbnex -> bPRc
    long val$mbmem -> JJMa
    react.action.source.IActionSource val$source -> tnXE
    1:40:void <init>(react.action.ActionCollectGarbage$1,long,long,react.action.source.IActionSource) -> <init>
    45:58:void run() -> run
react.action.ActionCullEntities -> org.cyberpwn.react.hbNQ:
    long ms -> dDum
    int lcd -> imvy
    33:60:void <init>() -> <init>
    65:151:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    155:164:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    169:169:java.lang.String getNode() -> iSmg
    28:28:void access$0(react.action.ActionCullEntities,long) -> kHre
    29:29:int access$1(react.action.ActionCullEntities) -> kHre
    28:28:long access$2(react.action.ActionCullEntities) -> AFkC
    29:29:void access$3(react.action.ActionCullEntities,int) -> kHre
react.action.ActionCullEntities$1 -> org.cyberpwn.react.hbNQ$1:
    react.action.ActionCullEntities this$0 -> ySSh
    1:37:void <init>(react.action.ActionCullEntities) -> <init>
    42:45:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> org.cyberpwn.react.hbNQ$2:
    react.action.ActionCullEntities this$0 -> ySSh
    1:49:void <init>(react.action.ActionCullEntities) -> <init>
    54:57:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> org.cyberpwn.react.hbNQ$3:
    react.action.ActionCullEntities this$0 -> ySSh
    react.glang.FinalInteger val$completed -> RcGT
    react.glang.FinalInteger val$total -> kIiw
    react.glang.FinalInteger val$totalCulled -> GbeM
    react.glang.FinalInteger val$totalChunked -> RjuB
    react.action.source.IActionSource val$source -> tnXE
    1:105:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    110:130:void run() -> run
react.action.ActionCullEntities$4 -> org.cyberpwn.react.hbNQ$4:
    react.action.ActionCullEntities this$0 -> ySSh
    react.action.source.IActionSource val$source -> tnXE
    react.glang.FinalInteger val$totalCulled -> GbeM
    react.glang.FinalInteger val$totalChunked -> RjuB
    1:137:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    142:148:void run() -> run
react.action.ActionCullEntities$5 -> org.cyberpwn.react.hbNQ$5:
    react.action.ActionCullEntities this$0 -> ySSh
    org.bukkit.Chunk val$chunk -> gpak
    java.lang.Runnable val$cb -> Oajy
    1:155:void <init>(react.action.ActionCullEntities,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    160:162:void run() -> run
react.action.ActionFixLighting -> org.cyberpwn.react.XuBI:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    108:108:java.lang.String getNode() -> iSmg
react.action.ActionFixLighting$1 -> org.cyberpwn.react.XuBI$1:
    react.action.ActionFixLighting this$0 -> gWOu
    1:28:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> org.cyberpwn.react.XuBI$2:
    react.action.ActionFixLighting this$0 -> gWOu
    react.action.source.IActionSource val$source -> tnXE
    int val$ch -> ctvN
    1:77:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> kHre
    1:1:void run(java.lang.Object) -> kHre
react.action.ActionFixLighting$3 -> org.cyberpwn.react.XuBI$3:
    react.action.ActionFixLighting this$0 -> gWOu
    1:88:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> kHre
    1:1:void run(java.lang.Object) -> kHre
react.action.ActionLockFluid -> org.cyberpwn.react.HnCj:
    int lcd -> imvy
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    108:108:java.lang.String getNode() -> iSmg
react.action.ActionLockFluid$1 -> org.cyberpwn.react.HnCj$1:
    react.action.ActionLockFluid this$0 -> dMea
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> org.cyberpwn.react.HnCj$2:
    react.action.ActionLockFluid this$0 -> dMea
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> org.cyberpwn.react.jEor:
    int lcd -> imvy
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    108:108:java.lang.String getNode() -> iSmg
react.action.ActionLockHopper$1 -> org.cyberpwn.react.jEor$1:
    react.action.ActionLockHopper this$0 -> XBRm
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> org.cyberpwn.react.jEor$2:
    react.action.ActionLockHopper this$0 -> XBRm
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> org.cyberpwn.react.xylS:
    int lcd -> imvy
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    107:107:java.lang.String getNode() -> iSmg
react.action.ActionLockRedstone$1 -> org.cyberpwn.react.xylS$1:
    react.action.ActionLockRedstone this$0 -> tKrs
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> org.cyberpwn.react.xylS$2:
    react.action.ActionLockRedstone this$0 -> tKrs
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> org.cyberpwn.react.avjr:
    long ms -> dDum
    int lcd -> imvy
    boolean fail -> QhSE
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> AFkC
    169:169:java.lang.String getNode() -> iSmg
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> kHre
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> kHre
    26:26:int access$2(react.action.ActionPurgeChunks) -> AFkC
    25:25:long access$3(react.action.ActionPurgeChunks) -> PmIn
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> kHre
react.action.ActionPurgeChunks$1 -> org.cyberpwn.react.avjr$1:
    react.action.ActionPurgeChunks this$0 -> ESmo
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> org.cyberpwn.react.avjr$2:
    react.action.ActionPurgeChunks this$0 -> ESmo
    int val$dk -> Aqup
    java.lang.Object val$j -> rxqK
    react.action.source.IActionSource val$source -> tnXE
    react.api.ISelector[] val$selectors -> gFOG
    react.glang.FinalInteger val$acompleted -> yAoh
    react.glang.FinalInteger val$completed -> RcGT
    react.glang.FinalInteger val$total -> kIiw
    react.glang.FinalInteger val$totalCulled -> GbeM
    react.glang.FinalInteger val$totalChunked -> RjuB
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.action.source.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> kHre
react.action.ActionPurgeChunks$2$1 -> org.cyberpwn.react.avjr$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> KoRl
    react.glang.FinalInteger val$acompleted -> yAoh
    react.glang.FinalInteger val$completed -> RcGT
    react.glang.FinalInteger val$total -> kIiw
    react.glang.FinalInteger val$totalCulled -> GbeM
    react.glang.FinalInteger val$totalChunked -> RjuB
    react.action.source.IActionSource val$source -> tnXE
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> org.cyberpwn.react.avjr$3:
    react.action.ActionPurgeChunks this$0 -> ESmo
    react.action.source.IActionSource val$source -> tnXE
    react.glang.FinalInteger val$acompleted -> yAoh
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> org.cyberpwn.react.avjr$4:
    react.action.ActionPurgeChunks this$0 -> ESmo
    org.bukkit.Chunk val$chunk -> gpak
    java.lang.Runnable val$cb -> Oajy
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> org.cyberpwn.react.UtIc:
    long ms -> dDum
    int lcd -> imvy
    34:61:void <init>() -> <init>
    66:151:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    155:198:void purge(boolean,org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    203:203:java.lang.String getNode() -> iSmg
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> kHre
    30:30:int access$1(react.action.ActionPurgeEntities) -> kHre
    29:29:long access$2(react.action.ActionPurgeEntities) -> AFkC
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> kHre
react.action.ActionPurgeEntities$1 -> org.cyberpwn.react.UtIc$1:
    react.action.ActionPurgeEntities this$0 -> KDaJ
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> org.cyberpwn.react.UtIc$2:
    react.action.ActionPurgeEntities this$0 -> KDaJ
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> org.cyberpwn.react.UtIc$3:
    react.action.ActionPurgeEntities this$0 -> KDaJ
    react.glang.FinalInteger val$completed -> RcGT
    react.glang.FinalInteger val$total -> kIiw
    react.glang.FinalInteger val$totalCulled -> GbeM
    react.glang.FinalInteger val$totalChunked -> RjuB
    react.action.source.IActionSource val$source -> tnXE
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> org.cyberpwn.react.UtIc$4:
    react.action.ActionPurgeEntities this$0 -> KDaJ
    react.action.source.IActionSource val$source -> tnXE
    react.glang.FinalInteger val$totalCulled -> GbeM
    react.glang.FinalInteger val$totalChunked -> RjuB
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    143:149:void run() -> run
react.action.ActionPurgeEntities$5 -> org.cyberpwn.react.UtIc$5:
    react.action.ActionPurgeEntities this$0 -> KDaJ
    org.bukkit.entity.Entity val$i -> RADx
    boolean val$force -> FErY
    react.glang.FinalInteger val$cu -> iKvk
    int val$k -> RkYA
    org.bukkit.Chunk val$chunk -> gpak
    java.lang.Runnable val$cb -> Oajy
    1:176:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,boolean,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    181:189:void run() -> run
react.action.ActionUnlockFluid -> org.cyberpwn.react.WWke:
    int lcd -> imvy
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    89:89:java.lang.String getNode() -> iSmg
react.action.ActionUnlockFluid$1 -> org.cyberpwn.react.WWke$1:
    react.action.ActionUnlockFluid this$0 -> xGao
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> org.cyberpwn.react.CxFc:
    int lcd -> imvy
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    89:89:java.lang.String getNode() -> iSmg
react.action.ActionUnlockHopper$1 -> org.cyberpwn.react.CxFc$1:
    react.action.ActionUnlockHopper this$0 -> hHtO
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> org.cyberpwn.react.eaTr:
    int lcd -> imvy
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    89:89:java.lang.String getNode() -> iSmg
react.action.ActionUnlockRedstone$1 -> org.cyberpwn.react.eaTr$1:
    react.action.ActionUnlockRedstone this$0 -> rxtl
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> HBnj
    1:1:java.lang.Object get() -> get
react.action.source.AccessActionSource -> org.cyberpwn.react.iSmg:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> AFkC
    26:33:void sendResponseSuccess(java.lang.String) -> PmIn
    38:45:void sendResponseError(java.lang.String) -> CoTn
    50:57:void sendResponseActing(java.lang.String) -> vsgG
react.action.source.ActionHandle -> org.cyberpwn.react.HBnj:
    react.action.source.ActionHandle AUTOMATIC -> Thmd
    react.action.source.ActionHandle MANUAL -> nRvO
    react.action.source.ActionHandle MUTEX -> qCMu
    react.action.source.ActionHandle[] ENUM$VALUES -> ctyf
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.action.source.ActionHandle[] values() -> values
    1:1:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
react.action.source.ConsoleActionSource -> org.cyberpwn.react.rfxq:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> AFkC
    18:19:void sendResponseSuccess(java.lang.String) -> PmIn
    24:25:void sendResponseError(java.lang.String) -> CoTn
    30:31:void sendResponseActing(java.lang.String) -> vsgG
react.action.source.EmptyActionSource -> org.cyberpwn.react.eaUO:
    3:3:void <init>() -> <init>
    9:9:void sendResponse(java.lang.String) -> AFkC
    15:15:void sendResponseSuccess(java.lang.String) -> PmIn
    21:21:void sendResponseError(java.lang.String) -> CoTn
    27:27:void sendResponseActing(java.lang.String) -> vsgG
react.action.source.IActionSource -> org.cyberpwn.react.fBUO:
    void sendResponse(java.lang.String) -> AFkC
    void sendResponseSuccess(java.lang.String) -> PmIn
    void sendResponseError(java.lang.String) -> CoTn
    void sendResponseActing(java.lang.String) -> vsgG
react.action.source.PlayerActionSource -> org.cyberpwn.react.BtcN:
    org.bukkit.entity.Player p -> AGdL
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> AFkC
    30:31:void sendResponseSuccess(java.lang.String) -> PmIn
    36:37:void sendResponseError(java.lang.String) -> CoTn
    42:43:void sendResponseActing(java.lang.String) -> vsgG
react.action.source.RAIActionSource -> org.cyberpwn.react.XIke:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> AFkC
    16:17:void sendResponseSuccess(java.lang.String) -> PmIn
    22:23:void sendResponseError(java.lang.String) -> CoTn
    28:29:void sendResponseActing(java.lang.String) -> vsgG
react.api.Action -> org.cyberpwn.react.SnAi:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> sQdJ
    java.lang.String[] nodes -> AHEM
    react.action.source.ActionHandle handle -> vuAG
    react.api.ActionState state -> AGdH
    react.api.ActionTargetType target -> tDFY
    react.api.ActionType type -> gpeB
    react.action.source.IActionSource currentSource -> kkns
    double progress -> sjuk
    boolean forceful -> Svjn
    react.glang.GMap defaultSelectors -> ycvF
    30:31:void <init>(react.api.ActionType) -> <init>
    33:47:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    51:51:boolean isForceful() -> rfxq
    56:57:void setForceful(boolean) -> AFkC
    java.lang.String getNode() -> iSmg
    64:79:react.api.ISelector[] biselect(react.api.ISelector[]) -> kHre
    85:86:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> kHre
    91:91:java.lang.String getName() -> getName
    97:97:java.lang.String getDescription() -> getDescription
    103:103:react.action.source.ActionHandle getHandleType() -> eaUO
    109:109:react.api.ActionState getState() -> fBUO
    115:115:java.lang.String getStatus() -> getStatus
    121:122:void setStatus(java.lang.String) -> tBlW
    127:127:double getProgress() -> getProgress
    133:134:void setProgress(double) -> setProgress
    139:139:react.api.ActionTargetType getTarget() -> BtcN
    145:145:react.api.ActionType getType() -> XIke
    151:151:react.glang.GMap getDefaultSelectors() -> SnAi
    157:200:void act(react.action.source.IActionSource,react.api.ISelector[]) -> AFkC
    205:206:void completeAction() -> aegl
    211:211:react.action.source.IActionSource getCurrentSource() -> NgBu
    217:217:java.lang.String[] getNodes() -> kbcn
    223:224:void setNodes(java.lang.String[]) -> kHre
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
react.api.ActionAlreadyRunningException -> org.cyberpwn.react.aegl:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> org.cyberpwn.react.NgBu:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> org.cyberpwn.react.kbcn:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> org.cyberpwn.react.Kvjq:
    react.api.ActionState IDLE -> NEXh
    react.api.ActionState RUNNING -> TNyb
    react.api.ActionState[] ENUM$VALUES -> qvQh
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> org.cyberpwn.react.FpLr:
    react.api.ActionTargetType POSITIONAL -> sQcd
    react.api.ActionTargetType SYSTEM -> opKi
    react.api.ActionTargetType[] ENUM$VALUES -> nKEg
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> org.cyberpwn.react.Nwcn:
    react.api.ActionType FIX_LIGHTING -> brVF
    react.api.ActionType UNLOCK_FLUID -> pQLF
    react.api.ActionType LOCK_FLUID -> QVsE
    react.api.ActionType UNLOCK_HOPPER -> nuXS
    react.api.ActionType LOCK_HOPPER -> jGHn
    react.api.ActionType UNLOCK_REDSTONE -> pXyx
    react.api.ActionType LOCK_REDSTONE -> rWQL
    react.api.ActionType CULL_ENTITIES -> dpKy
    react.api.ActionType COLLECT_GARBAGE -> cdXO
    react.api.ActionType PURGE_ENTITIES -> IyoT
    react.api.ActionType PURGE_CHUNKS -> tDEX
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> vuAG
    react.api.ActionTargetType target -> tDFY
    react.api.ActionType[] ENUM$VALUES -> jhjt
    6:18:void <clinit>() -> <clinit>
    25:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> Kvjq
    50:50:react.api.ActionTargetType getTarget() -> BtcN
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> org.cyberpwn.react.VUID:
    react.api.ActivationRangeType ANIMALS -> GRFv
    react.api.ActivationRangeType MONSTERS -> XtyR
    react.api.ActivationRangeType MISC -> WjFh
    react.api.ActivationRangeType[] ENUM$VALUES -> Dann
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> org.cyberpwn.react.FEYN:
    int value() -> value
react.api.Async -> org.cyberpwn.react.XuBA:
react.api.CPUBenchmark -> org.cyberpwn.react.IOCR:
    org.bukkit.command.CommandSender sender -> sender
    int score -> vlNa
    java.lang.Runnable onFinish -> UuAx
    17:24:void <init>(org.bukkit.command.CommandSender) -> <init>
    28:30:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    35:92:void run() -> run
    96:96:org.bukkit.command.CommandSender getSender() -> getSender
    101:101:int getScore() -> getScore
    106:106:java.lang.Runnable getOnFinish() -> FpLr
    13:13:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> kHre
    14:14:int access$1(react.api.CPUBenchmark) -> AFkC
    15:15:java.lang.Runnable access$2(react.api.CPUBenchmark) -> PmIn
react.api.CPUBenchmark$1 -> org.cyberpwn.react.IOCR$1:
    react.api.CPUBenchmark this$0 -> JksU
    1:35:void <init>(react.api.CPUBenchmark) -> <init>
    40:41:void run() -> run
react.api.CPUBenchmark$2 -> org.cyberpwn.react.IOCR$2:
    react.api.CPUBenchmark this$0 -> JksU
    1:78:void <init>(react.api.CPUBenchmark) -> <init>
    83:90:void run() -> run
react.api.CPUResult -> org.cyberpwn.react.IqEw:
    react.api.CPUResult ULTRA_SLOW -> FyYg
    react.api.CPUResult VERY_SLOW -> Ukre
    react.api.CPUResult SLOW -> QNeL
    react.api.CPUResult AVERAGE -> gFTB
    react.api.CPUResult GOOD -> paoU
    react.api.CPUResult FAST -> JIpU
    react.api.CPUResult VERY_FAST -> qBoQ
    react.api.CPUResult ULTRA_FAST -> LjIn
    java.lang.String m -> m
    react.api.CPUResult[] ENUM$VALUES -> ylif
    6:15:void <clinit>() -> <clinit>
    19:22:void <init>(java.lang.String,int,java.lang.String) -> <init>
    27:27:java.lang.String toString() -> toString
    32:69:java.lang.String c(int) -> c
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> org.cyberpwn.react.WFhj:
    react.glang.GMap cache -> TWmx
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> AFkC
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> PmIn
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> Nwcn
    54:54:boolean has(java.lang.Object) -> CoTn
react.api.Capability -> org.cyberpwn.react.Jsgx:
    react.api.Capability DUAL_WEILD -> iKxp
    react.api.Capability SCOREBOARD -> eQNg
    react.api.Capability SCOREBOARD_ADVANCED -> aLre
    react.api.Capability HOPPER -> qnCg
    react.api.Capability ENTITY_ATTRIBUTES -> hQgC
    react.api.Capability ENTITY_AI -> fnDc
    react.api.Capability ACTION_BAR -> GAHf
    react.api.Capability ENTITY_NAMES -> AXfv
    react.api.Capability TITLE_BAR -> PCQv
    react.api.Capability CHUNK_RELIGHTING -> bYHD
    react.api.Capability MONITOR_SUBMISSIVENESS -> WrYG
    react.api.Capability ACCELERATED_PING -> AYJN
    react.api.Capability ENTITY_THROTTLING -> FhVw
    react.api.Capability TILE_THROTTLING -> QqGh
    react.api.Capability PASSENGERS -> YEYn
    react.glang.GList capabilities -> BJjX
    surge.util.Protocol version -> mYFS
    react.api.Flavor flavor -> DjbJ
    java.lang.String plugin -> Orqd
    java.lang.String name -> name
    15:49:void <clinit>() -> <clinit>
    56:62:void <init>(java.lang.String,surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    66:67:void <init>(java.lang.String,surge.util.Protocol,react.api.Flavor) -> <init>
    71:72:void <init>(java.lang.String,surge.util.Protocol,java.lang.String) -> <init>
    76:77:void <init>(java.lang.String,java.lang.String) -> <init>
    81:82:void <init>(java.lang.String,react.api.Flavor) -> <init>
    86:87:void <init>(java.lang.String,surge.util.Protocol) -> <init>
    91:96:boolean isPluginCapable() -> VUID
    101:101:boolean isFlavorCapable() -> FEYN
    106:106:boolean isVersionCapable() -> XuBA
    111:111:boolean isCapable() -> IOCR
    116:116:surge.util.Protocol getVersion() -> IqEw
    121:121:react.api.Flavor getFlavor() -> WFhj
    126:126:java.lang.String getPlugin() -> Jsgx
    131:131:java.lang.String getName() -> getName
    136:150:void sendNotCapable(org.bukkit.entity.Player) -> kHre
    154:168:void sendNotCapable(react.action.source.IActionSource) -> kHre
react.api.CapabilityBasis -> org.cyberpwn.react.lUFh:
    react.api.CapabilityBasis VERSION -> ytyI
    react.api.CapabilityBasis FLAVOR -> NDys
    react.api.CapabilityBasis PLUGIN -> gqGE
    react.api.CapabilityBasis[] ENUM$VALUES -> LXft
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.CapabilityBasis[] values() -> values
    1:1:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> org.cyberpwn.react.lUGI:
    react.api.ChunkIssue ENTITY -> uiNF
    react.api.ChunkIssue HOPPER -> ekAM
    react.api.ChunkIssue TNT -> KnvP
    react.api.ChunkIssue REDSTONE -> lLtF
    react.api.ChunkIssue FLUID -> PCSd
    react.api.ChunkIssue PHYSICS -> papu
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> iDKc
    react.api.ChunkIssue[] ENUM$VALUES -> RtMn
    3:10:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    14:32:double getMS() -> lUFh
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> lUGI
react.api.Clip -> org.cyberpwn.react.KCgM:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> org.cyberpwn.react.BJOI:
    org.bukkit.command.CommandSender sender -> sender
    12:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> AFkC
    31:32:void sendResponseSuccess(java.lang.String) -> PmIn
    37:38:void sendResponseError(java.lang.String) -> CoTn
    43:44:void sendResponseActing(java.lang.String) -> vsgG
react.api.CullList -> org.cyberpwn.react.kHuH:
    react.glang.GSet toCull -> Yxap
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> CoTn
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> KCgM
react.api.DTest -> org.cyberpwn.react.KelS:
    6:6:void <init>() -> <init>
    11:62:int test() -> BJOI
react.api.EntityFlag -> org.cyberpwn.react.eOtV:
    react.api.EntityFlag NAMED -> xGeg
    react.api.EntityFlag TAMED -> cJih
    react.api.EntityFlag STACKED -> aDcg
    react.api.EntityFlag RIDDEN -> PnGu
    react.api.EntityFlag LIVING -> bjJg
    react.api.EntityFlag NON_LIVING -> NyCf
    react.api.EntityFlag PASSIVE -> QOHR
    react.api.EntityFlag HOSTILE -> MloD
    react.api.EntityFlag MATURE -> fduS
    react.api.EntityFlag YOUNG -> IiTE
    react.api.EntityFlag UNDERWATER -> tvmk
    react.api.EntityFlag GROUNDED -> sIXD
    react.api.EntityFlag AIRBORNE -> rhXN
    react.api.EntityFlag PROJECTILES -> jWoJ
    react.api.EntityFlag CAVES -> ETWE
    react.api.EntityFlag NEARBY -> mXhI
    react.api.EntityFlag LIT -> KoYq
    react.api.EntityFlag LEASHED -> OarF
    java.lang.String m -> m
    react.api.EntityFlag[] ENUM$VALUES -> qvUa
    13:32:void <clinit>() -> <clinit>
    36:39:void <init>(java.lang.String,int,java.lang.String) -> <init>
    43:53:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> vsgG
    58:156:boolean is(org.bukkit.entity.Entity) -> tBlW
    162:162:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> org.cyberpwn.react.NDak:
    react.glang.GSet entityTypes -> tDIi
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> kHuH
react.api.EntitySample -> org.cyberpwn.react.eOss:
    react.glang.GMap counts -> gpgs
    react.glang.GMap sets -> GAHr
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> KelS
    45:45:react.glang.GList getTypes() -> eOtV
    50:57:int total() -> NDak
    62:67:int get(org.bukkit.entity.EntityType) -> kHre
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> AFkC
    84:96:void add(org.bukkit.entity.Entity) -> CoTn
react.api.Experimental -> org.cyberpwn.react.qRwH:
react.api.Flavor -> org.cyberpwn.react.iTQa:
    react.api.Flavor ANY -> vkqm
    react.api.Flavor SAFE_MODE -> iULV
    react.api.Flavor CRAFT_BUKKIT -> dMlJ
    react.api.Flavor BUKKIT -> Euvq
    react.api.Flavor SPIGOT -> OQQf
    react.api.Flavor SOGGY_SPIGOT -> XAxi
    react.api.Flavor PAPER_SPIGOT -> Gslq
    react.api.Flavor TACO_SPIGOT -> bOwC
    react.api.Flavor TORCH_SPIGOT -> FgyO
    react.api.Flavor FORGE_HACK -> EvYB
    react.api.Flavor SPONGE_HACK -> woVJ
    react.api.Flavor[] ENUM$VALUES -> qBom
    6:18:void <clinit>() -> <clinit>
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> eOss
    74:79:boolean compatableWith(react.api.Flavor) -> kHre
    84:84:java.lang.String fancyName() -> qRwH
    1:1:react.api.Flavor[] values() -> values
    1:1:react.api.Flavor valueOf(java.lang.String) -> valueOf
react.api.IAction -> org.cyberpwn.react.TgvP:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> eaUO
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> AFkC
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    react.api.ActionState getState() -> fBUO
    react.api.ActionTargetType getTarget() -> BtcN
    void setNodes(java.lang.String[]) -> kHre
    java.lang.String[] getNodes() -> kbcn
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> tBlW
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> XIke
    react.glang.GMap getDefaultSelectors() -> SnAi
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> kHre
    react.api.ISelector[] biselect(react.api.ISelector[]) -> kHre
    react.action.source.IActionSource getCurrentSource() -> NgBu
    void completeAction() -> aegl
react.api.ICache -> org.cyberpwn.react.MuEL:
    react.glang.GSet get(java.lang.Object) -> AFkC
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> PmIn
    void clear() -> clear
    boolean has(java.lang.Object) -> CoTn
    react.glang.GList k() -> Nwcn
react.api.ICommand -> org.cyberpwn.react.FNLn:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> iTQa
    java.lang.String[] getPermissions() -> TgvP
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> JHuE
    react.api.SideGate getSideGate() -> MuEL
    void registerParameterDescription(java.lang.String,java.lang.String) -> kHre
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.api.IRecord -> org.cyberpwn.react.GrrV:
    java.lang.String getRecordType() -> FNLn
    long getRecordTime() -> GrrV
    react.json.JSONObject toJSON() -> SBpW
    java.lang.Object getRecordObject() -> AGMS
    void fromJSON(react.json.JSONObject) -> kHre
react.api.IRecordBook -> org.cyberpwn.react.SBpW:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> kHre
    long getOldestRecordTime() -> CxIF
    void addRecord(react.api.IRecord) -> kHre
    long getLatestRecordTime() -> OYHT
    int countRecords(long,long) -> kHre
    react.glang.GMap getRecords(long,long) -> AFkC
    int purgeRecordsBefore(long) -> AFkC
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> org.cyberpwn.react.AGMS:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> pHCm
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    surge.util.C getColor() -> TVtc
    surge.util.C getAltColor() -> QooA
    void setColor(surge.util.C,surge.util.C) -> kHre
    int getInterval() -> vHso
    void setInterval(int) -> kHre
    void sample() -> OHGK
    java.lang.String get() -> get
    void construct() -> pqvc
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> org.cyberpwn.react.CxIF:
    react.api.SelectionMode getMode() -> aTim
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> vsgG
    react.glang.GSet getList() -> kbgY
    react.glang.GSet getPossibilities() -> inDI
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> tBlW
    java.lang.String getName() -> getName
react.api.Injection -> org.cyberpwn.react.OYHT:
    react.api.InjectionMethod value() -> uOBu
react.api.InjectionMethod -> org.cyberpwn.react.pHCm:
    react.api.InjectionMethod SWAP -> IFno
    react.api.InjectionMethod SUBSTRATE -> xaWS
    react.api.InjectionMethod RELOAD -> aMSy
    react.api.InjectionMethod[] ENUM$VALUES -> JAcn
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> org.cyberpwn.react.TVtc:
    java.lang.String value() -> value
react.api.MSampler -> org.cyberpwn.react.QooA:
    6:6:void <init>() -> <init>
    10:10:surge.server.SuperSampler ss() -> FyBI
react.api.MonitorHeading -> org.cyberpwn.react.vHso:
    react.api.ISampler head -> DjgA
    react.glang.GList children -> IWrg
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> kHre
    27:27:react.api.ISampler getHead() -> wfIq
    32:33:void setHead(react.api.ISampler) -> AFkC
    37:37:react.glang.GList getChildren() -> qRvI
    42:42:java.lang.String getHeadText() -> KTjC
    47:60:java.lang.String getChildText() -> IyXI
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> kHre
react.api.NoiseGenerator -> org.cyberpwn.react.OHGK:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> org.cyberpwn.react.pqvc:
    react.api.NoiseGenerator[] octaves -> tvqD
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> SSot
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> org.cyberpwn.react.aTim:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> Vwjv
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> JYwM
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> org.cyberpwn.react.kbgY:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> kHre
react.api.Permissable -> org.cyberpwn.react.inDI:
    react.api.Permissable ACCESS -> qBsT
    react.api.Permissable TELEPORT -> Iyuj
    react.api.Permissable MONITOR -> GspN
    react.api.Permissable MONITOR_TITLE -> eICE
    react.api.Permissable MONITOR_ACTIONLOG -> AYMF
    react.api.Permissable MONITOR_MAP -> oyCt
    react.api.Permissable MONITOR_ENVIRONMENT -> fTVe
    react.api.Permissable MONITOR_GLASSES -> dosD
    react.api.Permissable MONITOR_CHUNK_BLAME -> vIrB
    react.api.Permissable RAI_MONITOR -> YMpX
    react.api.Permissable RAI_CONTROL -> wUei
    react.api.Permissable RAI_ACCESS -> pkDk
    react.api.Permissable RAI -> hRLI
    react.api.Permissable ACT -> wVFv
    react.api.Permissable RELOAD -> MvBx
    java.lang.String node -> DsXd
    react.api.Permissable[] ENUM$VALUES -> dxca
    7:23:void <clinit>() -> <clinit>
    27:38:void <init>(java.lang.String,int,java.lang.String) -> <init>
    42:42:boolean has(org.bukkit.command.CommandSender) -> kHre
    47:47:java.lang.String getNode() -> iSmg
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PluginSelfDeleter -> org.cyberpwn.react.uOBu:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> HCno
    java.lang.Runnable r -> RHyf
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> kHre
react.api.ReactCommand -> org.cyberpwn.react.FyBI:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> KDeq
    java.lang.String usage -> ObTc
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> AXmM
    react.api.SideGate sideGate -> uysK
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> JHuE
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> kHre
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> iTQa
    47:47:java.lang.String[] getPermissions() -> TgvP
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> MuEL
react.api.ReactException -> org.cyberpwn.react.wfIq:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> org.cyberpwn.react.qRvI:
    react.glang.GMap keystore -> ebRy
    boolean monitoring -> monitoring
    boolean highMonitor -> aoXp
    boolean actionlogging -> ggxt
    boolean glasses -> tfOW
    boolean mapping -> qLDb
    int monitorSelection -> BeBO
    int plays -> HUOo
    boolean monitorPosted -> xXiA
    int monitorLastSelection -> OYcn
    int switchNotification -> DkGQ
    int hotbarSlot -> pjbn
    boolean shift -> wMUD
    int scroll -> HfQd
    double lastHeight -> lDco
    java.util.List channels -> pjcV
    boolean heightMovement -> GtPa
    org.bukkit.entity.Player p -> AGdL
    26:43:void <clinit>() -> <clinit>
    46:99:void <init>(org.bukkit.entity.Player) -> <init>
    103:103:boolean hasChannel(java.lang.String) -> hbNQ
    110:117:void save() -> save
    123:130:void load() -> load
    134:134:boolean isMonitoring() -> PRwd
    139:139:boolean isMapping() -> WXLm
    144:144:org.bukkit.entity.Player getP() -> DihP
    149:151:void addChannel(java.lang.String) -> addChannel
    155:161:void removeChannel(java.lang.String) -> removeChannel
    165:167:void removeAllChannels() -> FNLP
    171:173:void setMonitoring(boolean) -> PmIn
    177:179:void setMapping(boolean) -> CoTn
    183:183:int getMonitorSelection() -> vREa
    188:190:void setMonitorSelection(int) -> AFkC
    194:194:int getHotbarSlot() -> TEqw
    199:201:void setHotbarSlot(int) -> PmIn
    205:205:boolean isShifting() -> SdrW
    210:212:void setShifting(boolean) -> vsgG
    216:216:boolean isShift() -> vkWF
    221:223:void setShift(boolean) -> tBlW
    227:227:int getScroll() -> AXOb
    232:234:void setScroll(int) -> CoTn
    238:238:int getMonitorLastSelection() -> UYvn
    243:245:void setMonitorLastSelection(int) -> vsgG
    249:250:void setP(org.bukkit.entity.Player) -> AFkC
    254:254:double getLastHeight() -> EKHw
    259:261:void setLastHeight(double) -> kHre
    265:265:boolean isHeightMovement() -> jWSM
    270:272:void setHeightMovement(boolean) -> JHuE
    276:276:int getSwitchNotification() -> WrAD
    281:283:void setSwitchNotification(int) -> tBlW
    287:287:boolean getMonitorPosted() -> dgCt
    292:294:void setMonitorPosted(boolean) -> hbNQ
    298:298:int getPlays() -> NxFw
    303:305:void setPlays(int) -> JHuE
    309:309:boolean isGlasses() -> DOvI
    314:316:void setGlasses(boolean) -> XuBI
    320:320:boolean isActionlogging() -> rEXP
    325:327:void setActionlogging(boolean) -> HnCj
react.api.Record -> org.cyberpwn.react.KTjC:
    java.lang.String recordType -> UIuh
    long recordTime -> CgfE
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> FNLn
    32:32:long getRecordTime() -> GrrV
    38:38:java.lang.Object getRecordObject() -> AGMS
    react.json.JSONObject toJSON() -> SBpW
    void fromJSON(react.json.JSONObject) -> kHre
react.api.RecordBook -> org.cyberpwn.react.IyXI:
    java.io.File recordFile -> eHci
    react.json.JSONObject js -> CMra
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> kHre
    79:87:react.api.IRecord getRecord(long) -> kHre
    react.api.IRecord createDummyRecord(long,java.lang.String) -> kHre
    95:107:long getOldestRecordTime() -> CxIF
    113:125:long getLatestRecordTime() -> OYHT
    130:130:boolean within(long,long,long) -> kHre
    136:144:int countRecords(long,long) -> kHre
    150:162:react.glang.GMap getRecords(long,long) -> AFkC
    168:181:int purgeRecordsBefore(long) -> AFkC
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> org.cyberpwn.react.SSot:
react.api.SampledChunk -> org.cyberpwn.react.JYwM:
    org.bukkit.Chunk c -> EBxB
    react.glang.GMap counts -> gpgs
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> aTlF
    26:38:void hit(react.api.ChunkIssue,int) -> kHre
    42:42:org.bukkit.Chunk getC() -> avoG
    47:47:react.glang.GMap getCounts() -> oxHO
react.api.SampledType -> org.cyberpwn.react.PRwd:
    react.api.SampledType ENTITY_TIME_LOCK -> stQM
    react.api.SampledType TILE_TIME_LOCK -> JSHk
    react.api.SampledType ENTITY_TIME -> lUha
    react.api.SampledType TILE_TIME -> MJpG
    react.api.SampledType ENTITY_DROPTICK -> PKha
    react.api.SampledType TILE_DROPTICK -> uyuU
    react.api.SampledType REDSTONE_TICK_USAGE -> UAem
    react.api.SampledType REDSTONE_TICK -> TXUb
    react.api.SampledType REDSTONE_SECOND -> DIGX
    react.api.SampledType REDSTONE_TIME -> PmlK
    react.api.SampledType PHYSICS_TIME -> IGTt
    react.api.SampledType HOPPER_TICK_USAGE -> aVJB
    react.api.SampledType HOPPER_TICK -> htPU
    react.api.SampledType HOPPER_SECOND -> MlqX
    react.api.SampledType HOPPER_TIME -> eata
    react.api.SampledType FLUID_TICK_USAGE -> jOau
    react.api.SampledType FLUID_TICK -> tnac
    react.api.SampledType FLUID_SECOND -> OYed
    react.api.SampledType FLUID_TIME -> qCTf
    react.api.SampledType TPS -> ktga
    react.api.SampledType TICK -> JJWH
    react.api.SampledType TIU -> hsne
    react.api.SampledType MEM -> fCUs
    react.api.SampledType FREEMEM -> vkua
    react.api.SampledType MAXMEM -> gNhi
    react.api.SampledType ALLOCMEM -> mGhy
    react.api.SampledType MAHS -> OPuM
    react.api.SampledType CHK_TIME -> Ihut
    react.api.SampledType EXPLOSION_TIME -> cvFB
    react.api.SampledType CHK -> YWEt
    react.api.SampledType ATASK -> kSIW
    react.api.SampledType STASK -> jaGi
    react.api.SampledType CHKS -> xsAV
    react.api.SampledType ENT -> qSxs
    react.api.SampledType ENTLIV -> nmSs
    react.api.SampledType ENTDROP -> slBb
    react.api.SampledType ENTTILE -> QybB
    java.lang.String node -> DsXd
    react.api.SampledType[] ENUM$VALUES -> AbBQ
    6:44:void <clinit>() -> <clinit>
    50:50:react.api.ISampler get() -> KvpL
    56:56:java.lang.String toString() -> toString
    59:70:void <init>(java.lang.String,int,java.lang.String) -> <init>
    74:74:java.lang.String getNode() -> iSmg
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> org.cyberpwn.react.WXLm:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    surge.util.C color -> KVNU
    surge.util.C altColor -> sbpE
    int interval -> nKOt
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:surge.util.C getColor() -> TVtc
    49:49:surge.util.C getAltColor() -> QooA
    55:55:int getInterval() -> vHso
    void sample() -> OHGK
    void construct() -> pqvc
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(surge.util.C,surge.util.C) -> kHre
    107:108:void setInterval(int) -> kHre
react.api.Sector -> org.cyberpwn.react.DihP:
    int value() -> value
react.api.SelectionException -> org.cyberpwn.react.FNLP:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> org.cyberpwn.react.vREa:
    react.api.SelectionMode WHITELIST -> CFEN
    react.api.SelectionMode BLACKLIST -> iTqp
    react.api.SelectionMode[] ENUM$VALUES -> UdLQ
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> org.cyberpwn.react.TEqw:
    java.lang.Class objectType -> Fybl
    react.api.SelectionMode mode -> nlra
    react.glang.GSet list -> CyJr
    react.glang.GSet possibilities -> wVKB
    int popoff -> tURC
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> aTim
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> vsgG
    43:43:react.glang.GSet getList() -> kbgY
    49:49:react.glang.GSet getPossibilities() -> inDI
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> tBlW
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> JHuE
    98:100:int pop() -> pop
react.api.SelectorEntityType -> org.cyberpwn.react.SdrW:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> PmIn
    27:59:int parse(org.bukkit.command.CommandSender,java.lang.String) -> tBlW
    64:112:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> hbNQ
    118:118:java.lang.String getName() -> getName
react.api.SelectorParseException -> org.cyberpwn.react.vkWF:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> org.cyberpwn.react.AXOb:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> PmIn
    29:30:void add(org.bukkit.Chunk,int) -> kHre
    34:38:void add(org.bukkit.World) -> hbNQ
    42:46:void addAll() -> rond
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> tBlW
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> hbNQ
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> org.cyberpwn.react.UYvn:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> tBlW
    87:87:java.lang.String getName() -> getName
react.api.Side -> org.cyberpwn.react.EKHw:
    react.api.Side PLAYERS -> HwVm
    react.api.Side CONSOLE -> RANa
    java.lang.String ss -> fnLY
    react.api.Side[] ENUM$VALUES -> vlYT
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> YxIW
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> AFkC
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> org.cyberpwn.react.jWSM:
    react.api.SideGate PLAYERS_ONLY -> uqgF
    react.api.SideGate CONSOLES_ONLY -> KUkx
    react.api.SideGate ANYTHING -> hALx
    int[] $SWITCH_TABLE$react$api$SideGate -> rNip
    react.api.SideGate[] ENUM$VALUES -> pauf
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> kHre
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> bFmN
react.api.SimplexNoiseGenerator -> org.cyberpwn.react.WrAD:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> prvw
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> nccI
react.api.SimplexOctaveGenerator -> org.cyberpwn.react.dgCt:
    double wScale -> LaaJ
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> kHre
react.api.SpecializedTickLimiter -> org.cyberpwn.react.NxFw:
    double rMaxTime -> vAeE
    long rStartTime -> AHOi
    double rLastTime -> dhHs
    long rMark -> awpg
    double tMaxTime -> OHhs
    react.gmath.Average atimes -> ChKG
    react.gmath.Average adropped -> hQrB
    int droppedTicks -> TPHx
    boolean entityTick -> iwYH
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> org.cyberpwn.react.DOvI:
    react.glang.GList sources -> baab
    react.glang.GList splooge -> wwoU
    react.glang.GSet destroy -> LOdX
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> kHre
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> AFkC
    void clipped(org.bukkit.Location) -> AFkC
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> PmIn
    boolean isAllowedSource(org.bukkit.Location) -> CoTn
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> kHre
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> AFkC
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> PmIn
react.api.SploogeCounter$1 -> org.cyberpwn.react.DOvI$1:
    react.api.SploogeCounter this$0 -> Lisl
    java.util.Iterator val$it -> bHQJ
    org.bukkit.Location val$start -> PnQF
    int val$maxDistance -> hQqO
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> kHre
react.api.SploogeCounter$1$1 -> org.cyberpwn.react.DOvI$1$1:
    react.api.SploogeCounter$1 this$1 -> YhHc
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> org.cyberpwn.react.rEXP:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> org.cyberpwn.react.aTlF:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> SBpW
    38:49:void fromJSON(react.json.JSONObject) -> kHre
react.api.StackTraceRecordBook -> org.cyberpwn.react.avoG:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> AFkC
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> kHre
react.api.StackedEntity -> org.cyberpwn.react.oxHO:
    org.bukkit.entity.LivingEntity entity -> YEeA
    int count -> count
    double rmx -> HoIC
    org.bukkit.entity.Entity damager -> SCsE
    24:36:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    41:46:double getMaxHealth(org.bukkit.entity.LivingEntity) -> kHre
    51:51:int getAbsoluteMaxCount() -> TWXB
    56:56:int getMaxCount(org.bukkit.entity.LivingEntity) -> AFkC
    61:63:void update() -> update
    67:72:void destroy() -> destroy
    76:103:void signalSize() -> GsUQ
    107:107:java.lang.String color(java.lang.String) -> XuBI
    112:113:void setDamager(org.bukkit.entity.Entity) -> JHuE
    117:177:void updateHealth() -> YMUC
    181:182:void heal(double) -> AFkC
    186:187:void setHealth(double) -> setHealth
    191:191:int getEffectiveCount() -> NUem
    196:196:int getEffectiveCount(double) -> PmIn
    201:201:double getEffectiveMaxHealth(int) -> hbNQ
    206:206:double getRealMaxHealth() -> SKcS
    211:211:double getHealth() -> getHealth
    216:222:void setMaxHealth(double) -> setMaxHealth
    227:236:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> kHre
    240:240:double getMaxHealth() -> getMaxHealth
    245:245:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    250:250:int getCount() -> getCount
react.api.TitleMonitor -> org.cyberpwn.react.KvpL:
    react.glang.GList headings -> dpWv
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> kHre
    24:24:int getMaxSelection() -> myrC
    29:37:int left(int) -> XuBI
    42:50:int right(int) -> HnCj
    55:55:react.api.MonitorHeading getHeadFor(int) -> jEor
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> kHre
    83:100:java.lang.String getHotbarFor(int,boolean) -> kHre
react.api.Unused -> org.cyberpwn.react.rond:
react.api.WorldConfig -> org.cyberpwn.react.YxIW:
    boolean allowRai -> stSd
    boolean allowActions -> yCAU
    boolean allowRelighting -> HoIG
    boolean allowTileThrottling -> vAgX
    boolean allowEntityThrottling -> VDlB
    boolean allowFastLeafDecay -> jqhb
    java.util.List assumeNoSideEffectsEntities -> PnOh
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> XuBI
    48:62:void save(org.bukkit.World) -> HnCj
    66:80:void load(org.bukkit.World) -> jEor
react.cache.CachedEntity -> org.cyberpwn.react.bFmN:
    java.util.UUID uid -> UAhr
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> iDRe
    double x -> x
    double y -> y
    double z -> z
    double vx -> BKTl
    double vy -> uGXY
    double vz -> YWIw
    double dx -> cCDo
    double dy -> GJFG
    double dz -> JBLx
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> hbNQ
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> AqcC
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> WaAp
    120:121:void setVx(double) -> CoTn
    125:125:double getVy() -> ncbN
    130:131:void setVy(double) -> vsgG
    135:135:double getVz() -> tmcy
    140:141:void setVz(double) -> tBlW
    145:145:double getDx() -> PAya
    150:151:void setDx(double) -> JHuE
    155:155:double getDy() -> FxcP
    160:161:void setDy(double) -> hbNQ
    165:165:double getDz() -> LrDX
    170:171:void setDz(double) -> XuBI
    175:175:java.util.UUID getUid() -> GbTW
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> org.cyberpwn.react.nccI:
    int age -> ChLn
    boolean ageLock -> KEQB
    boolean breed -> VpCi
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> hbNQ
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> qSYb
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> wDHo
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> org.cyberpwn.react.TWXB:
    org.bukkit.DyeColor dye -> QqVC
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> hbNQ
    30:30:org.bukkit.DyeColor getDye() -> kbhb
    35:36:void setDye(org.bukkit.DyeColor) -> kHre
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> org.cyberpwn.react.GsUQ:
    react.glang.GList potionEffects -> XmXh
    boolean canPickupItems -> ohJj
    org.bukkit.inventory.ItemStack[] armorContents -> wwrL
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> GkhU
    double maxHealth -> maxHealth
    int maxAir -> MSgU
    int air -> cdhD
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> hbNQ
    63:63:react.glang.GList getPotionEffects() -> ycaS
    68:69:void setPotionEffects(react.glang.GList) -> AFkC
    73:73:boolean isCanPickupItems() -> Sutu
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> xGKn
    138:139:void setMaxAir(int) -> xylS
    143:143:int getAir() -> UHve
    148:149:void setAir(int) -> avjr
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> org.cyberpwn.react.YMUC:
    boolean sheared -> TPLC
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> hbNQ
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> org.cyberpwn.react.NUem:
    org.bukkit.inventory.ItemStack is -> gNoq
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> hbNQ
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> org.cyberpwn.react.SKcS:
    7:7:void <init>() -> <init>
react.command.CommandAct -> org.cyberpwn.react.myrC:
    41:52:void <init>() -> <init>
    57:177:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
    181:200:void sendPage(org.bukkit.command.CommandSender,int,int) -> kHre
    204:210:react.text.RTX getBeginningRTX() -> XcbW
    215:298:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> kHre
    302:312:void sendHeader(org.bukkit.command.CommandSender,int,int) -> AFkC
    316:345:void sendFooter(org.bukkit.command.CommandSender,int,int) -> PmIn
    349:364:react.glang.GList getSortedCommands() -> BuHJ
    369:376:int getPageSize(int) -> UtIc
    381:381:boolean isValidPage(int,int) -> kHre
    386:395:react.glang.GList getPage(int,int) -> AFkC
    400:401:void f(org.bukkit.command.CommandSender,java.lang.String) -> XuBI
react.command.CommandActionLog -> org.cyberpwn.react.AqcC:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandCPUScore -> org.cyberpwn.react.WaAp:
    16:24:void <init>() -> <init>
    29:39:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandCapabilities -> org.cyberpwn.react.ncbN:
    19:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandChunkBlame -> org.cyberpwn.react.tmcy:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandChunkBlame$1 -> org.cyberpwn.react.tmcy$1:
    react.command.CommandChunkBlame this$0 -> PwCw
    org.bukkit.command.CommandSender val$sender -> YyKv
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> org.cyberpwn.react.tmcy$1$1:
    react.command.CommandChunkBlame$1 this$1 -> xrcb
    org.bukkit.command.CommandSender val$sender -> YyKv
    java.lang.String val$i -> HoJf
    react.glang.GMap val$top -> uOhC
    int val$totalx -> Qhbp
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandChunkTP -> org.cyberpwn.react.PAya:
    19:31:void <init>() -> <init>
    38:49:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandEnvironment -> org.cyberpwn.react.FxcP:
    24:32:void <init>() -> <init>
    37:74:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandFeature -> org.cyberpwn.react.LrDX:
    25:33:void <init>() -> <init>
    38:161:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandFeature$1 -> org.cyberpwn.react.LrDX$1:
    react.command.CommandFeature this$0 -> axSB
    react.feature.IOption val$j -> YWHl
    org.bukkit.command.CommandSender val$sender -> YyKv
    java.lang.String[] val$args -> XmXE
    react.feature.IFeature val$i -> uXXr
    1:71:void <init>(react.command.CommandFeature,org.bukkit.entity.Player,react.feature.IOption,org.bukkit.command.CommandSender,java.lang.String[],react.feature.IFeature) -> <init>
    76:79:void onMessage(java.lang.String) -> HnCj
react.command.CommandFeature$2 -> org.cyberpwn.react.LrDX$2:
    react.command.CommandFeature this$0 -> axSB
    react.feature.IOption val$j -> YWHl
    org.bukkit.command.CommandSender val$sender -> YyKv
    java.lang.String[] val$args -> XmXE
    react.feature.IFeature val$i -> uXXr
    1:86:void <init>(react.command.CommandFeature,org.bukkit.entity.Player,react.feature.IOption,org.bukkit.command.CommandSender,java.lang.String[],react.feature.IFeature) -> <init>
    93:103:void onMessage(java.lang.String) -> HnCj
react.command.CommandFeature$3 -> org.cyberpwn.react.LrDX$3:
    react.command.CommandFeature this$0 -> axSB
    react.feature.IOption val$j -> YWHl
    org.bukkit.command.CommandSender val$sender -> YyKv
    java.lang.String[] val$args -> XmXE
    react.feature.IFeature val$i -> uXXr
    1:110:void <init>(react.command.CommandFeature,org.bukkit.entity.Player,react.feature.IOption,org.bukkit.command.CommandSender,java.lang.String[],react.feature.IFeature) -> <init>
    117:127:void onMessage(java.lang.String) -> HnCj
react.command.CommandFeature$4 -> org.cyberpwn.react.LrDX$4:
    react.command.CommandFeature this$0 -> axSB
    react.feature.IOption val$j -> YWHl
    org.bukkit.command.CommandSender val$sender -> YyKv
    java.lang.String[] val$args -> XmXE
    react.feature.IFeature val$i -> uXXr
    1:134:void <init>(react.command.CommandFeature,org.bukkit.entity.Player,react.feature.IOption,org.bukkit.command.CommandSender,java.lang.String[],react.feature.IFeature) -> <init>
    141:151:void onMessage(java.lang.String) -> HnCj
react.command.CommandGlasses -> org.cyberpwn.react.GbTW:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandHelp -> org.cyberpwn.react.qSYb:
    28:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> kHre
    81:87:react.text.RTX getBeginningRTX() -> XcbW
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> kHre
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> AFkC
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> PmIn
    208:215:react.glang.GList getSortedCommands() -> BuHJ
    220:227:int getPageSize(int) -> UtIc
    232:232:boolean isValidPage(int,int) -> kHre
    237:246:react.glang.GList getPage(int,int) -> AFkC
react.command.CommandMap -> org.cyberpwn.react.wDHo:
    17:27:void <init>() -> <init>
    32:41:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandMonitor -> org.cyberpwn.react.kbhb:
    18:28:void <init>() -> <init>
    33:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandReload -> org.cyberpwn.react.ycaS:
    18:26:void <init>() -> <init>
    31:41:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandStatus -> org.cyberpwn.react.Sutu:
    28:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
    54:63:org.bukkit.inventory.ItemStack makeBook() -> MlTd
    68:94:void addSpikePages(react.glang.GList) -> PmIn
    98:108:void addStatusPages(react.glang.GList) -> CoTn
    112:129:int findSlot(org.bukkit.entity.Player) -> PmIn
react.command.CommandSubscribe -> org.cyberpwn.react.xGKn:
    19:36:void <init>() -> <init>
    41:87:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandTopChunk -> org.cyberpwn.react.UHve:
    28:36:void <init>() -> <init>
    41:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandUnsubscribe -> org.cyberpwn.react.XcbW:
    18:27:void <init>() -> <init>
    32:63:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.command.CommandVersion -> org.cyberpwn.react.BuHJ:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> kHre
react.controller.ActionController -> org.cyberpwn.react.MlTd:
    int kiv -> FhdN
    react.glang.GMap actions -> KxTT
    react.glang.GMap pending -> iniC
    react.glang.GList tasks -> gqSg
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> kHre
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> AFkC
    141:141:react.api.IAction getAction(react.api.ActionType) -> kHre
    146:147:void registerAction(react.api.IAction) -> kHre
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> LhqI
    241:248:react.glang.GList getActionNames() -> PmNH
react.controller.ChronophyFluidController -> org.cyberpwn.react.LhqI:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> org.cyberpwn.react.PmNH:
    boolean firstTickList -> Xuhg
    long firstTick -> EKoA
    long lastTick -> bbCx
    react.gmath.Average aCSMS -> AbHf
    react.glang.GMap pluginLoads -> ekPV
    react.glang.GMap playerLoads -> xaeX
    int serverLoads -> tUXj
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> eaWx
    63:73:void tickNextTickList() -> mhnS
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> kHre
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> kHre
    171:171:boolean isFirstTickList() -> MuEm
    176:176:long getFirstTick() -> NMUH
    181:181:long getLastTick() -> LiQs
    186:186:react.gmath.Average getaCSMS() -> IgxV
    191:191:react.glang.GMap getPluginLoads() -> bGOr
    196:196:react.glang.GMap getPlayerLoads() -> ydDv
    201:201:int getServerLoads() -> miRj
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> kHre
    29:29:int access$1(react.controller.ChunkController) -> AFkC
    29:29:void access$2(react.controller.ChunkController,int) -> kHre
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> PmIn
react.controller.ChunkController$1 -> org.cyberpwn.react.PmNH$1:
    react.controller.ChunkController this$0 -> PfDN
    org.bukkit.event.world.ChunkLoadEvent val$e -> wgST
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> PmIn
    1:1:void run(java.lang.Object) -> kHre
react.controller.CommandController -> org.cyberpwn.react.eaWx:
    react.glang.GList commands -> XJwT
    boolean k -> k
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> HnCj
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> XuBI
    123:305:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    311:328:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> kHre
    332:332:react.glang.GList getCommands() -> tmgL
    337:338:void setCommands(react.glang.GList) -> vsgG
    342:342:boolean isK() -> fJjl
    347:348:void setK(boolean) -> jEor
react.controller.EntityCullController -> org.cyberpwn.react.mhnS:
    react.glang.GSet flags -> pYma
    react.glang.GSet defer -> maek
    react.glang.GSet prefer -> HCyI
    react.glang.GMap maxs -> qfBk
    19:19:void <init>() -> <init>
    29:34:void start() -> start
    40:40:void stop() -> stop
    46:46:void tick() -> tick
    50:200:void repopulateRules() -> TFXR
    204:209:int cull(org.bukkit.Chunk) -> CoTn
    214:343:int partialCull(org.bukkit.Chunk) -> vsgG
react.controller.EntityStackController -> org.cyberpwn.react.MuEm:
    react.glang.GList stacks -> AGuA
    22:24:void <init>() -> <init>
    29:30:void start() -> start
    35:41:void stop() -> stop
    46:61:void tick() -> tick
    66:119:void stack(react.glang.GList) -> tBlW
    123:128:boolean isStacked(org.bukkit.entity.LivingEntity) -> PmIn
    133:146:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> CoTn
    152:170:void on(org.bukkit.event.entity.EntityDamageEvent) -> kHre
    175:194:void on(org.bukkit.event.entity.EntityDamageByEntityEvent) -> kHre
    198:213:void merge(react.api.StackedEntity,react.api.StackedEntity) -> kHre
    217:283:void checkNear(org.bukkit.entity.LivingEntity) -> vsgG
    288:330:void on(org.bukkit.event.entity.EntitySpawnEvent) -> kHre
react.controller.EntityStackController$1 -> org.cyberpwn.react.MuEm$1:
    react.controller.EntityStackController this$0 -> inlD
    org.bukkit.event.entity.EntitySpawnEvent val$e -> Jcqe
    1:297:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    302:327:void run() -> run
react.controller.EventController -> org.cyberpwn.react.NMUH:
    react.lagmap.LagMap map -> Ngme
    react.glang.GMap slots -> xrfX
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> kHre
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> kHre
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> kHre
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> kHre
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> kHre
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> kHre
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> kHre
react.controller.ExplosiveController -> org.cyberpwn.react.LiQs:
    boolean firstTickList -> Xuhg
    long firstTick -> EKoA
    long lastTick -> bbCx
    react.gmath.Average aCSMS -> AbHf
    15:15:void <init>() -> <init>
    25:30:void start() -> start
    34:47:void flushTickList() -> eaWx
    51:61:void tickNextTickList() -> mhnS
    66:67:void stop() -> stop
    73:74:void tick() -> tick
    79:88:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> AFkC
    93:94:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> kHre
    98:98:boolean isFirstTickList() -> MuEm
    103:103:long getFirstTick() -> NMUH
    108:108:long getLastTick() -> LiQs
    113:113:react.gmath.Average getaCSMS() -> IgxV
react.controller.FastDecayController -> org.cyberpwn.react.IgxV:
    react.glang.GList leaves -> bsIQ
    react.glang.GList logs -> Aafi
    react.glang.GList queue -> ECbB
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> stXJ
    30:30:void <init>() -> <init>
    39:47:void start() -> start
    52:53:void stop() -> stop
    58:64:void on(org.bukkit.event.block.BlockBreakEvent) -> kHre
    69:75:void on(org.bukkit.event.block.LeavesDecayEvent) -> kHre
    79:121:void checkBreak(org.bukkit.block.Block) -> PmIn
    125:126:void decay(org.bukkit.block.Block) -> CoTn
    131:167:void doDecay(org.bukkit.block.Block) -> vsgG
    172:229:react.glang.GList getDrops(org.bukkit.block.Block) -> tBlW
    235:246:void tick() -> tick
    32:32:react.glang.GList access$0(react.controller.FastDecayController) -> kHre
    33:33:react.glang.GList access$1(react.controller.FastDecayController) -> AFkC
    30:30:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> uVvp
react.controller.FastDecayController$1 -> org.cyberpwn.react.IgxV$1:
    react.controller.FastDecayController this$0 -> nTFu
    org.bukkit.block.Block val$source -> Emrr
    1:79:void <init>(react.controller.FastDecayController,java.lang.String,int,org.bukkit.block.Block) -> <init>
    84:119:void run() -> run
    79:79:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> kHre
react.controller.FastDecayController$1$1 -> org.cyberpwn.react.IgxV$1$1:
    react.controller.FastDecayController$1 this$1 -> tUWq
    org.bukkit.block.Block val$i -> DYng
    1:107:void <init>(react.controller.FastDecayController$1,java.lang.String,int,org.bukkit.block.Block) -> <init>
    112:113:void run() -> run
react.controller.FeatureController -> org.cyberpwn.react.bGOr:
    react.nms.INMSBinding trueBinding -> KxUt
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> TNgu
    85:85:java.lang.String getPackageVersion() -> ssTV
    90:90:boolean hasBinding() -> kYyq
    96:100:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> kHre
react.controller.FeatureSetController -> org.cyberpwn.react.ydDv:
    react.feature.FeatureSet f -> KDpc
    21:21:void <init>() -> <init>
    28:30:void start() -> start
    34:71:void constructFeatureSet() -> AOaW
    75:122:void sendPage(org.bukkit.entity.Player,java.lang.String) -> kHre
    126:145:void toggle(org.bukkit.entity.Player,java.lang.String) -> AFkC
    149:185:void toggleElement(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> kHre
    189:218:void sendMain(org.bukkit.entity.Player) -> CoTn
    222:222:react.feature.FeatureSet getF() -> BSDu
    228:229:void stop() -> stop
    236:236:void tick() -> tick
react.controller.FluidController -> org.cyberpwn.react.miRj:
    react.glang.GSet ignore -> mrec
    int flowsPerTick -> IOlY
    int flowsPerSecond -> cSfs
    react.gmath.Average aFST -> bHTF
    react.gmath.Average aFSS -> aUpq
    react.gmath.Average aFSMS -> PUBY
    boolean firstTickList -> Xuhg
    long firstTick -> EKoA
    long lastTick -> bbCx
    react.glang.GSet frozen -> nCEY
    react.glang.GMap queue -> ySeN
    react.glang.GMap freezeTimes -> dNYd
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> tBlW
    68:76:void checkChunks() -> Vvqg
    80:97:void checkChunk(org.bukkit.Chunk) -> JHuE
    101:107:void queue(org.bukkit.block.Block) -> JHuE
    111:111:boolean isFrozen(org.bukkit.Chunk) -> hbNQ
    116:117:void freeze(org.bukkit.Chunk) -> XuBI
    121:127:void unfreeze(org.bukkit.Chunk) -> HnCj
    131:138:void freeze(org.bukkit.Chunk,long) -> kHre
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> eaWx
    172:182:void tickNextTickList() -> mhnS
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> kHre
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> kHre
    248:248:react.glang.GSet getIgnore() -> EKMG
    253:253:int getTransfersPerTick() -> aCkX
    258:258:int getTransfersPerSecond() -> XJSK
    263:263:react.gmath.Average getaFST() -> KoAc
    268:268:react.gmath.Average getaFSS() -> rxaN
    273:273:react.gmath.Average getaFSMS() -> pHHN
    278:278:boolean isFirstTickList() -> MuEm
    283:283:long getFirstTick() -> NMUH
    288:288:long getLastTick() -> LiQs
    293:293:react.glang.GSet getFrozen() -> mGOR
    298:298:react.glang.GMap getQueue() -> tTSW
    303:303:react.glang.GMap getFreezeTimes() -> rpPT
react.controller.GlassController -> org.cyberpwn.react.tmgL:
    react.glang.GMap q -> oViP
    react.glang.GList g -> Vodb
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:137:void tick() -> tick
    141:141:boolean isUsingGlasses(org.bukkit.entity.Player) -> vsgG
    146:146:boolean canUseGlasses(org.bukkit.entity.Player) -> tBlW
    151:167:void toggleGlasses(org.bukkit.entity.Player) -> JHuE
    172:177:void on(org.bukkit.event.block.BlockPhysicsEvent) -> kHre
    182:187:void on(org.bukkit.event.block.BlockFromToEvent) -> kHre
    192:197:void on(org.bukkit.event.block.BlockBurnEvent) -> kHre
    202:207:void on(org.bukkit.event.block.BlockFormEvent) -> kHre
    212:217:void on(org.bukkit.event.block.BlockFadeEvent) -> kHre
    222:234:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> kHre
    36:36:react.glang.GList access$0(react.controller.GlassController) -> kHre
react.controller.GlassController$1 -> org.cyberpwn.react.tmgL$1:
    react.controller.GlassController this$0 -> fvfG
    react.glang.GMap val$cc -> pjpm
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:135:void run() -> run
react.controller.GlassController$1$1 -> org.cyberpwn.react.tmgL$1$1:
    react.controller.GlassController$1 this$1 -> BJyj
    org.bukkit.Location val$i -> fLQr
    org.bukkit.entity.Player val$j -> uaPC
    1:108:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    113:118:void run() -> run
react.controller.GraphController -> org.cyberpwn.react.fJjl:
    react.glang.GMap g -> wVSq
    react.glang.GMap gr -> WQHR
    react.glang.GMap gra -> CpbE
    42:42:void <init>() -> <init>
    51:85:void start() -> start
    90:96:void stop() -> stop
    101:128:void tick() -> tick
    133:150:void on(org.bukkit.event.player.PlayerJoinEvent) -> kHre
    154:176:void createGraphs(react.graph.GraphMode,org.bukkit.entity.Player,react.glang.GList) -> kHre
    180:183:void addSystem(org.bukkit.entity.Player,react.glang.GList) -> kHre
    187:191:void addTick(org.bukkit.entity.Player,react.glang.GList) -> AFkC
    195:199:void addMemory(org.bukkit.entity.Player,react.glang.GList) -> PmIn
    203:204:void addEod(org.bukkit.entity.Player,react.glang.GList) -> CoTn
    208:217:void addPhysics(org.bukkit.entity.Player,react.glang.GList) -> vsgG
    221:224:void addReact(org.bukkit.entity.Player,react.glang.GList) -> tBlW
    228:274:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> kHre
    279:319:void on(org.bukkit.event.player.PlayerMoveEvent) -> kHre
    325:325:void on(react.event.ReactScrollEvent) -> kHre
    329:360:void toggleMapping(org.bukkit.entity.Player) -> hbNQ
    364:396:void toggleMappingEod(org.bukkit.entity.Player) -> XuBI
    400:400:react.glang.GMap getG() -> VwRP
    405:405:react.glang.GMap getGr() -> MSEW
    45:45:react.glang.GMap access$0(react.controller.GraphController) -> kHre
    44:44:react.glang.GMap access$1(react.controller.GraphController) -> AFkC
react.controller.GraphController$1 -> org.cyberpwn.react.fJjl$1:
    react.controller.GraphController this$0 -> ORAr
    1:65:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    70:83:void run() -> run
react.controller.GraphController$2 -> org.cyberpwn.react.fJjl$2:
    react.controller.GraphController this$0 -> ORAr
    1:101:void <init>(react.controller.GraphController) -> <init>
    106:110:void run() -> run
react.controller.GraphController$3 -> org.cyberpwn.react.fJjl$3:
    react.controller.GraphController this$0 -> ORAr
    org.bukkit.event.player.PlayerJoinEvent val$e -> ffEa
    1:133:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    138:148:void run() -> run
react.controller.HopperController -> org.cyberpwn.react.TFXR:
    react.glang.GSet ignore -> mrec
    int transfersPerTick -> stYx
    int transfersPerSecond -> dElB
    react.gmath.Average aHST -> jrPu
    react.gmath.Average aHSS -> aMcg
    react.gmath.Average aHSMS -> apHL
    boolean firstTickList -> Xuhg
    long firstTick -> EKoA
    long lastTick -> bbCx
    react.glang.GSet frozen -> nCEY
    react.glang.GMap queue -> ySeN
    react.glang.GMap freezeTimes -> dNYd
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> tBlW
    65:73:void checkChunks() -> Vvqg
    77:94:void checkChunk(org.bukkit.Chunk) -> JHuE
    98:104:void queue(org.bukkit.block.Block) -> JHuE
    108:108:boolean isFrozen(org.bukkit.Chunk) -> hbNQ
    113:114:void freeze(org.bukkit.Chunk) -> XuBI
    118:124:void unfreeze(org.bukkit.Chunk) -> HnCj
    128:135:void freeze(org.bukkit.Chunk,long) -> kHre
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> eaWx
    169:179:void tickNextTickList() -> mhnS
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> kHre
    207:207:react.glang.GSet getIgnore() -> EKMG
    212:212:int getTransfersPerTick() -> aCkX
    217:217:int getTransfersPerSecond() -> XJSK
    222:222:react.gmath.Average getaHST() -> eiiw
    227:227:react.gmath.Average getaHSS() -> NEGJ
    232:232:react.gmath.Average getaHSMS() -> EmPg
    237:237:boolean isFirstTickList() -> MuEm
    242:242:long getFirstTick() -> NMUH
    247:247:long getLastTick() -> LiQs
    252:252:react.glang.GSet getFrozen() -> mGOR
    257:257:react.glang.GMap getQueue() -> tTSW
    262:262:react.glang.GMap getFreezeTimes() -> rpPT
react.controller.HopperOvertickController -> org.cyberpwn.react.uVvp:
    react.glang.GList possiblePlunge -> wxUj
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> kHre
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> kHre
react.controller.LanguageController -> org.cyberpwn.react.TNgu:
    java.io.File languageFolder -> wgTX
    int oldVersion -> CyRA
    java.io.File dlf -> rheb
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> WGPV
    160:221:void downloadAll(boolean) -> xylS
    225:261:void downloadLanguage(java.lang.String) -> jEor
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> xylS
    315:315:java.io.File getFileForLanguage(java.lang.String) -> avjr
    320:332:void writeDefaults() -> nIpa
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> kHre
    263:263:void access$1(react.controller.LanguageController) -> kHre
react.controller.LanguageController$1 -> org.cyberpwn.react.TNgu$1:
    react.controller.LanguageController this$0 -> VESS
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> org.cyberpwn.react.TNgu$2:
    react.controller.LanguageController this$0 -> VESS
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> kHre
react.controller.LanguageController$2$1 -> org.cyberpwn.react.TNgu$2$1:
    react.controller.LanguageController$2 this$1 -> NWMr
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> kHre
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> kHre
    121:121:void onDownloadStarted(react.gnet.download.Download) -> kHre
    126:128:void onDownloadFinished(react.gnet.download.Download) -> AFkC
    134:134:void onDownloadFailed(react.gnet.download.Download) -> PmIn
react.controller.LanguageController$3 -> org.cyberpwn.react.TNgu$3:
    react.controller.LanguageController this$0 -> VESS
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> org.cyberpwn.react.TNgu$3$1:
    react.controller.LanguageController$3 this$1 -> toML
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> org.cyberpwn.react.TNgu$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> HCyk
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> org.cyberpwn.react.TNgu$4:
    react.controller.LanguageController this$0 -> VESS
    java.io.File val$dld -> WYWm
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> kHre
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> kHre
    245:245:void onDownloadStarted(react.gnet.download.Download) -> kHre
    250:251:void onDownloadFinished(react.gnet.download.Download) -> AFkC
    257:257:void onDownloadFailed(react.gnet.download.Download) -> PmIn
react.controller.MessageController -> org.cyberpwn.react.ssTV:
    react.glang.GList notes -> kmCC
    17:17:void <init>() -> <init>
    23:24:void queue(react.notification.Notification) -> kHre
    29:39:void start() -> start
    44:46:void stop() -> stop
    51:57:void tick() -> tick
    61:77:void subscribe(org.bukkit.entity.Player,react.notification.Note) -> kHre
    81:97:void unsubscribe(org.bukkit.entity.Player,react.notification.Note) -> AFkC
    101:121:react.glang.GList getSubscriptions(org.bukkit.entity.Player) -> HnCj
    126:131:boolean isSubscribed(org.bukkit.entity.Player,react.notification.Note) -> PmIn
    136:146:void unsubscribeAll(org.bukkit.entity.Player) -> jEor
    150:163:void subscribeAll(org.bukkit.entity.Player) -> xylS
    167:174:void process(react.notification.Notification) -> AFkC
    19:19:react.glang.GList access$0(react.controller.MessageController) -> kHre
react.controller.MessageController$1 -> org.cyberpwn.react.ssTV$1:
    react.controller.MessageController this$0 -> oVkG
    1:31:void <init>(react.controller.MessageController) -> <init>
    36:37:void run(java.lang.String) -> UtIc
    1:1:void run(java.lang.Object) -> kHre
react.controller.MetricsController -> org.cyberpwn.react.kYyq:
    react.BStats stats -> NVlx
    14:14:void <init>() -> <init>
    21:49:void start() -> start
    55:55:void stop() -> stop
    62:62:void tick() -> tick
react.controller.MetricsController$1 -> org.cyberpwn.react.kYyq$1:
    react.controller.MetricsController this$0 -> JcsK
    1:23:void <init>(react.controller.MetricsController) -> <init>
    28:28:java.lang.String call() -> call
    1:1:java.lang.Object call() -> call
react.controller.MetricsController$2 -> org.cyberpwn.react.kYyq$2:
    react.controller.MetricsController this$0 -> JcsK
    1:32:void <init>(react.controller.MetricsController) -> <init>
    37:37:java.lang.String call() -> call
    1:1:java.lang.Object call() -> call
react.controller.MetricsController$3 -> org.cyberpwn.react.kYyq$3:
    react.controller.MetricsController this$0 -> JcsK
    1:41:void <init>(react.controller.MetricsController) -> <init>
    46:46:java.lang.String call() -> call
    1:1:java.lang.Object call() -> call
react.controller.MonitorController -> org.cyberpwn.react.AOaW:
    int maxCooldown -> PDBe
    react.api.TitleMonitor titleMonitor -> ydhh
    react.glang.GMap posts -> xjVo
    react.slate.PhantomSlate sb -> RlKc
    boolean ready -> NyPu
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> NUjH
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> avjr
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> UtIc
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> lCnL
    179:184:float calcVolume(react.api.ReactPlayer) -> kHre
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> WWke
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> CxFc
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> eaTr
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> iSmg
    219:223:void startMonitoring(org.bukkit.entity.Player) -> HBnj
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> rfxq
    242:247:void startActionLogging(org.bukkit.entity.Player) -> eaUO
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> fBUO
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> AFkC
    279:291:void processPlayer(react.api.ReactPlayer) -> PmIn
    296:296:void handleActionLog(org.bukkit.entity.Player) -> BtcN
    300:324:void handleTriggers(react.api.ReactPlayer) -> CoTn
    328:367:void handleScrolling(react.api.ReactPlayer) -> vsgG
    371:399:void handleShifting(react.api.ReactPlayer) -> tBlW
    403:425:void handlePosting(react.api.ReactPlayer) -> JHuE
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> kHre
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,surge.util.C,int) -> kHre
    471:501:void tickMonitor(react.api.ReactPlayer) -> hbNQ
    505:505:react.api.TitleMonitor getTitleMonitor() -> RsXW
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> kHre
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> kHre
    539:552:void onTick() -> FEaj
    556:578:void updateActionBoard() -> XtiN
    583:583:java.lang.String getTickName() -> RYem
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> kHre
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> kHre
    41:41:void access$2(react.controller.MonitorController,boolean) -> kHre
    41:41:boolean access$3(react.controller.MonitorController) -> AFkC
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> PmIn
react.controller.MonitorController$1 -> org.cyberpwn.react.AOaW$1:
    react.controller.MonitorController this$0 -> qTaJ
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> org.cyberpwn.react.AOaW$2:
    react.controller.MonitorController this$0 -> qTaJ
    1:556:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> org.cyberpwn.react.BSDu:
    react.glang.GMap samples -> GklC
    int redstonePerTick -> scWu
    int redstonePerSecond -> lohX
    boolean firstTickList -> Xuhg
    long firstTick -> EKoA
    long lastTick -> bbCx
    react.gmath.Average aRSMS -> EKuQ
    react.gmath.Average aRST -> dpbB
    react.gmath.Average aRSS -> Ypaw
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> kHre
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> kHre
    72:79:void flushTickList() -> eaWx
    83:93:void tickNextTickList() -> mhnS
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> jEor
    121:122:void onPhysics(org.bukkit.Chunk) -> xylS
    126:127:void onHopper(org.bukkit.Chunk) -> avjr
    131:132:void onFluid(org.bukkit.Chunk) -> UtIc
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> kHre
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> kHre
    156:176:void onTick() -> FEaj
    181:181:java.lang.String getTickName() -> RYem
    186:186:react.glang.GMap getSamples() -> gNRE
    191:191:int getRedstonePerTick() -> sruq
    196:196:int getRedstonePerSecond() -> lfRT
    201:201:boolean isFirstTickList() -> MuEm
    206:206:long getFirstTick() -> NMUH
    211:211:long getLastTick() -> LiQs
    216:216:react.gmath.Average getaRSMS() -> CVKF
    221:221:react.gmath.Average getaRST() -> XBFT
    226:226:react.gmath.Average getaRSS() -> LOdX
react.controller.PhysicsController$1 -> org.cyberpwn.react.BSDu$1:
    react.controller.PhysicsController this$0 -> kdUQ
    1:168:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> org.cyberpwn.react.Vvqg:
    react.glang.GList players -> cCKT
    react.glang.GSet save -> Muos
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> XIke
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> kHre
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> SnAi
    113:113:react.glang.GList getPlayers() -> clXj
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> kHre
react.controller.PlayerController$1 -> org.cyberpwn.react.Vvqg$1:
    react.controller.PlayerController this$0 -> Qykp
    react.glang.GList val$toSave -> nvPE
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> org.cyberpwn.react.EKMG:
    react.rai.IRAI rai -> JtwY
    boolean raiEnabled -> GJLY
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    19:19:react.rai.IRAI access$0(react.controller.RAIController) -> kHre
react.controller.RAIController$1 -> org.cyberpwn.react.EKMG$1:
    react.controller.RAIController this$0 -> eQas
    1:46:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.RedstoneController -> org.cyberpwn.react.aCkX:
    react.glang.GSet ignore -> mrec
    react.glang.GSet frozen -> nCEY
    react.glang.GMap queue -> ySeN
    react.glang.GMap freezeTimes -> dNYd
    int redstonePerTick -> scWu
    int redstonePerSecond -> lohX
    react.gmath.Average aRST -> dpbB
    react.gmath.Average aRSS -> Ypaw
    react.gmath.Average aRSMS -> EKuQ
    boolean firstTickList -> Xuhg
    long firstTick -> EKoA
    long lastTick -> bbCx
    react.glang.GMap trackers -> pRBA
    26:26:void <init>() -> <init>
    45:81:void start() -> start
    86:87:void on(org.bukkit.event.world.WorldLoadEvent) -> kHre
    92:94:void on(org.bukkit.event.world.WorldUnloadEvent) -> kHre
    99:105:void stop() -> stop
    109:114:void releaseChunk(org.bukkit.Chunk) -> tBlW
    119:125:void tick() -> tick
    129:137:void checkChunks() -> Vvqg
    141:158:void checkChunk(org.bukkit.Chunk) -> JHuE
    162:168:void queue(org.bukkit.block.Block) -> JHuE
    172:172:boolean isFrozen(org.bukkit.Chunk) -> hbNQ
    177:178:void freeze(org.bukkit.Chunk) -> XuBI
    182:189:void flushTickList() -> eaWx
    193:203:void tickNextTickList() -> mhnS
    207:213:void unfreeze(org.bukkit.Chunk) -> HnCj
    217:224:void freeze(org.bukkit.Chunk,long) -> kHre
    229:230:void on(org.bukkit.event.world.ChunkUnloadEvent) -> kHre
    235:248:void on(org.bukkit.event.block.BlockPhysicsEvent) -> kHre
    252:252:react.glang.GSet getIgnore() -> EKMG
    257:257:react.glang.GSet getFrozen() -> mGOR
    262:262:react.glang.GMap getQueue() -> tTSW
    267:267:react.glang.GMap getFreezeTimes() -> rpPT
    272:272:int getRedstonePerTick() -> sruq
    277:277:int getRedstonePerSecond() -> lfRT
    282:282:react.gmath.Average getaRST() -> XBFT
    287:287:react.gmath.Average getaRSS() -> LOdX
    292:292:react.gmath.Average getaRSMS() -> CVKF
    297:297:boolean isFirstTickList() -> MuEm
    302:302:long getFirstTick() -> NMUH
    307:307:long getLastTick() -> LiQs
react.controller.SampleController -> org.cyberpwn.react.XJSK:
    react.glang.GMap samplers -> Swam
    int cd -> NpdA
    25:30:void <init>() -> <init>
    34:60:boolean checkThreads() -> gVaW
    65:70:void restartSuperSampler() -> xyta
    74:75:void registerSampler(react.api.ISampler) -> PmIn
    79:79:react.api.ISampler getSampler(java.lang.String) -> WWke
    84:127:void constructSamplers() -> fuaX
    132:134:void start() -> start
    139:141:void stop() -> stop
    147:147:void tick() -> tick
    151:151:surge.server.SuperSampler getSuperSampler() -> VLaJ
    157:183:void onTick() -> FEaj
    188:188:java.lang.String getTickName() -> RYem
    193:193:react.glang.GMap getSamplers() -> ydFj
    198:198:surge.server.SuperSampler getSs() -> EudL
    203:203:int getCd() -> GbWw
    208:215:react.glang.GList getSamplerNames() -> imiT
react.controller.SecurityController -> org.cyberpwn.react.KoAc:
    java.lang.String ipa -> ejsa
    react.glang.GList failures -> FiLh
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> CxFc
    41:74:void checkForIP() -> ArHt
    78:91:void scan(java.lang.Runnable) -> kHre
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> org.cyberpwn.react.KoAc$1:
    react.controller.SecurityController this$0 -> wfty
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> org.cyberpwn.react.KoAc$2:
    java.lang.String val$ip -> AGym
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> org.cyberpwn.react.KoAc$3:
    java.lang.Thread val$t -> IOop
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> org.cyberpwn.react.rxaN:
    react.glang.GMap etl -> DcET
    react.glang.GMap ttl -> GlNW
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> kHre
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> kHre
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> xylS
    143:160:void releaseWorld(org.bukkit.World) -> avjr
    164:181:double getUniversalEntityTick() -> CEKE
    186:203:double getUniversalEntityLimit() -> upkC
    208:225:double getUniversalTileLimit() -> XBEG
    230:247:double getUniversalTileTick() -> VCnN
    252:264:double getUniversalEntityDroppedTicks() -> wUOA
    269:281:double getUniversalTileDroppedTicks() -> yAai
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> kHre
    301:312:void setTileTickLimit(org.bukkit.World,double) -> AFkC
    316:321:double getEntityTickLimit(org.bukkit.World) -> UtIc
    326:331:double getTileTickLimit(org.bukkit.World) -> WWke
    336:341:double getLastEntityTick(org.bukkit.World) -> CxFc
    346:351:double getLastTileTick(org.bukkit.World) -> eaTr
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> iSmg
    366:371:double getTileDroppedTicks(org.bukkit.World) -> HBnj
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> kHre
react.controller.SpikeController -> org.cyberpwn.react.pHHN:
    react.glang.GMap spikes -> AQKj
    26:28:void <init>() -> <init>
    33:60:void start() -> start
    65:66:void stop() -> stop
    72:108:void onTick() -> FEaj
    113:113:java.lang.String getTickName() -> RYem
    121:121:void tick() -> tick
    125:125:react.glang.GMap getSpikes() -> aCmP
    130:167:void whoFuckingDidThis(react.glang.Callback) -> kHre
    28:28:react.glang.GMap access$0(react.controller.SpikeController) -> kHre
react.controller.SpikeController$1 -> org.cyberpwn.react.pHHN$1:
    react.controller.SpikeController this$0 -> xrhx
    1:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    40:58:void run() -> run
react.controller.SpikeController$1$1 -> org.cyberpwn.react.pHHN$1$1:
    react.controller.SpikeController$1 this$1 -> jPOL
    1:40:void <init>(react.controller.SpikeController$1) -> <init>
    45:56:void run() -> run
react.controller.SpikeController$2 -> org.cyberpwn.react.pHHN$2:
    react.controller.SpikeController this$0 -> xrhx
    react.glang.GMap val$vv -> CpcI
    1:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    80:106:void run() -> run
react.controller.SpikeController$3 -> org.cyberpwn.react.pHHN$3:
    react.controller.SpikeController this$0 -> xrhx
    java.lang.Thread val$t -> IOop
    react.glang.Callback val$callback -> UKDB
    1:132:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    137:165:void run() -> run
react.controller.TickTimeController -> org.cyberpwn.react.mGOR:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> org.cyberpwn.react.tTSW:
    16:16:void <init>() -> <init>
    21:27:void start() -> start
    32:38:void stop() -> stop
    43:55:void tick() -> tick
    60:61:void on(org.bukkit.event.world.WorldUnloadEvent) -> kHre
react.event.ReactEvent -> org.cyberpwn.react.rpPT:
    org.bukkit.event.HandlerList handlers -> qUDG
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> org.cyberpwn.react.VwRP:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> org.cyberpwn.react.MSEW:
    react.event.ScrollDirection direction -> CyTT
    boolean cancellled -> wMcM
    int amount -> jPOR
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> BAey
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> MAcw
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> org.cyberpwn.react.eiiw:
    react.event.ScrollDirection DOWN -> TaSD
    react.event.ScrollDirection UP -> rNtd
    react.event.ScrollDirection[] ENUM$VALUES -> hRYX
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.feature.BasicBooleanOption -> org.cyberpwn.react.NEGJ:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
    14:15:void <init>(java.lang.String,java.lang.String,int) -> <init>
react.feature.BasicConfigurationOption -> org.cyberpwn.react.EmPg:
    java.lang.String description -> description
    java.lang.String name -> name
    java.lang.reflect.Field configurationField -> CVpb
    14:29:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
    31:57:void <init>(java.lang.String,java.lang.String,int) -> <init>
    62:62:java.lang.String getDescription() -> getDescription
    68:68:java.lang.String getName() -> getName
    77:85:java.lang.Object getValue() -> getValue
    93:100:void setValue(java.lang.Object) -> setValue
    105:105:java.lang.String getID() -> getID
react.feature.BasicDoubleOption -> org.cyberpwn.react.WGPV:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
react.feature.BasicIntegerOption -> org.cyberpwn.react.nIpa:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
    14:15:void <init>(java.lang.String,java.lang.String,int) -> <init>
react.feature.BasicLongOption -> org.cyberpwn.react.NUjH:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
react.feature.BasicStringOption -> org.cyberpwn.react.lCnL:
    9:10:void <init>(java.lang.String,java.lang.String,java.lang.reflect.Field) -> <init>
react.feature.FeatureSet -> org.cyberpwn.react.RsXW:
    react.glang.GList features -> woey
    9:12:void <init>() -> <init>
    16:17:void addFeature(react.feature.IFeature) -> kHre
    21:21:react.glang.GList getFeatures() -> mXRf
react.feature.IBooleanOption -> org.cyberpwn.react.FEaj:
react.feature.IDoubleOption -> org.cyberpwn.react.XtiN:
react.feature.IFeature -> org.cyberpwn.react.RYem:
    java.lang.String getName() -> getName
    react.feature.IBooleanOption getToggle() -> qlnn
    react.glang.GList getOptions() -> eHKE
    java.lang.String getID() -> getID
    void addFeatureOption(react.feature.IOption) -> kHre
react.feature.IIntegerOption -> org.cyberpwn.react.gNRE:
react.feature.ILongOption -> org.cyberpwn.react.sruq:
react.feature.IOption -> org.cyberpwn.react.lfRT:
    java.lang.String getDescription() -> getDescription
    java.lang.String getName() -> getName
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    java.lang.String getID() -> getID
react.feature.IStringOption -> org.cyberpwn.react.CVKF:
react.feature.ReactFeature -> org.cyberpwn.react.XBFT:
    java.lang.String name -> name
    react.feature.IBooleanOption toggle -> OcDn
    react.glang.GList options -> DbeB
    11:16:void <init>(java.lang.String,react.feature.IBooleanOption) -> <init>
    21:22:void addFeatureOption(react.feature.IOption) -> kHre
    27:27:java.lang.String getName() -> getName
    33:33:react.feature.IBooleanOption getToggle() -> qlnn
    39:39:react.glang.GList getOptions() -> eHKE
    45:45:java.lang.String getID() -> getID
react.gbench.Profiler -> org.cyberpwn.react.LOdX:
    long nanos -> gWjN
    long startNano -> cupi
    long millis -> IXcx
    long startMillis -> wfxY
    double time -> WsOV
    boolean profiling -> oqCy
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> WWke
    78:78:double getTicks() -> uEui
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> dnyj
    93:93:double getHours() -> YUhi
    98:98:double getMilliseconds() -> jEwC
    103:103:long getNanoseconds() -> VfSB
    108:108:long getNanos() -> Bkxu
    113:113:long getStartNano() -> NLxW
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> XdGk
    128:128:double getTime() -> XBDm
    133:133:boolean isProfiling() -> isProfiling
react.gconcurrent.A -> org.cyberpwn.react.clXj:
    react.gconcurrent.ParallelPoolManager mgr -> MdqC
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> org.cyberpwn.react.clXj$1:
    react.gconcurrent.A this$0 -> NOCK
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> org.cyberpwn.react.gVaW:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> org.cyberpwn.react.xyta:
    react.gconcurrent.QueueMode mode -> Evkf
    react.glang.GList threads -> vJbu
    int next -> sIjU
    int threadCount -> LanI
    java.util.Queue squeue -> PUIT
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> VDxI
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> cmaK
    22:23:void syncQueue(react.gconcurrent.Execution) -> kHre
    long getNanoGate() -> oVHJ
    29:42:void tickSyncQueue() -> aTqj
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> OYOk
    93:100:int getTotalQueueSize() -> VetE
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> AFkC
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> UcQe
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> KMDK
    152:179:void updateThreadInformation() -> xiVX
    183:215:react.gconcurrent.ParallelThread nextThread() -> KDSI
    220:226:void createThreads(int) -> CxFc
    230:230:react.gconcurrent.QueueMode getMode() -> pHKt
    235:235:int getNext() -> bhwI
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> LrIv
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> vbmw
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> RHeT
react.gconcurrent.ParallelThread -> org.cyberpwn.react.fuaX:
    java.util.Queue queue -> qviR
    react.gconcurrent.ThreadInformation info -> VDxI
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> HnCj
    68:75:void execute(react.gconcurrent.Execution) -> PmIn
    79:88:void execute() -> execute
    92:93:void queue(react.gconcurrent.Execution) -> AFkC
    97:97:java.util.Queue getQueue() -> WGSo
    102:102:react.gconcurrent.ThreadInformation getInfo() -> fdaN
react.gconcurrent.QueueMode -> org.cyberpwn.react.VLaJ:
    react.gconcurrent.QueueMode ROUND_ROBIN -> DtIv
    react.gconcurrent.QueueMode SMALLEST -> rWhm
    react.gconcurrent.QueueMode[] ENUM$VALUES -> Walx
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> org.cyberpwn.react.ydFj:
    react.gconcurrent.ParallelPoolManager mgr -> MdqC
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> org.cyberpwn.react.ydFj$1:
    react.gconcurrent.S this$0 -> KNHg
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> org.cyberpwn.react.EudL:
    long tick -> EvjY
    long atick -> OHsA
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> org.cyberpwn.react.GbWw:
    double ticksPerSecond -> kcuT
    int queuedSize -> Ticp
    boolean processing -> uqsG
    double utilization -> HnrV
    react.gmath.Average ticksPerSecondAverage -> aEVV
    long tick -> EvjY
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> srvg
    33:35:void setTicksPerSecond(double) -> jEor
    39:39:int getQueuedSize() -> fJnS
    44:45:void setQueuedSize(int) -> eaTr
    49:49:boolean isProcessing() -> VTqb
    54:55:void setProcessing(boolean) -> avjr
    59:59:double getUtilization() -> xFqb
    64:65:void setUtilization(double) -> xylS
    69:69:double getTicksPerSecondAverage() -> KMCJ
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> OXnN
    89:89:int getId() -> getId
react.gformat.F -> org.cyberpwn.react.imiT:
    java.text.NumberFormat NF -> pHpv
    java.text.DecimalFormat DF -> qKsx
    java.lang.String[] NAMES -> Eeht
    java.math.BigInteger THOUSAND -> SoRm
    java.util.NavigableMap MAP -> aNGw
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> eaTr
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> kHre
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> kHre
    181:196:java.lang.String time(double,int) -> kHre
    201:221:java.lang.String timeLong(long,int) -> kHre
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> PmIn
    236:236:java.lang.String b(double) -> avjr
    241:258:java.lang.String b(java.math.BigInteger) -> kHre
    263:267:void instantiate() -> CxPL
    279:279:java.lang.String fileSize(long) -> CoTn
    292:292:java.lang.String memSize(long) -> vsgG
    297:297:java.lang.String memSize(long,int) -> AFkC
    310:311:java.lang.String stamp(long) -> tBlW
    327:361:java.lang.String ofSize(long,int) -> PmIn
    367:394:java.lang.String ofSize(long,int,int) -> kHre
    408:413:java.lang.String trim(java.lang.String,int) -> AFkC
    426:446:java.lang.String cname(java.lang.String) -> iSmg
    460:472:java.lang.String repeat(java.lang.String,int) -> repeat
    484:491:java.lang.String mem(long) -> JHuE
    504:522:java.lang.String memx(long) -> hbNQ
    536:537:java.lang.String f(long) -> XuBI
    549:550:java.lang.String f(int) -> iSmg
    564:573:java.lang.String f(double,int) -> AFkC
    589:598:java.lang.String fd(double,int) -> PmIn
    612:621:java.lang.String f(float,int) -> kHre
    632:632:java.lang.String f(double) -> UtIc
    643:643:java.lang.String f(float) -> kHre
    658:658:java.lang.String pc(double,int) -> CoTn
    673:673:java.lang.String pc(float,int) -> AFkC
    686:686:java.lang.String pc(double) -> WWke
    699:699:java.lang.String pc(float) -> AFkC
    715:715:java.lang.String pc(int,int,int) -> kHre
    729:729:java.lang.String pc(int,int) -> PmIn
    745:745:java.lang.String pc(long,long,int) -> kHre
    759:759:java.lang.String pc(long,long) -> PmIn
    771:771:java.lang.String msSeconds(long) -> HnCj
    785:785:java.lang.String msSeconds(long,int) -> CoTn
    797:797:java.lang.String nsMs(long) -> jEor
    811:811:java.lang.String nsMs(long,int) -> vsgG
    825:825:java.lang.String nsMsd(long,int) -> tBlW
react.glang.AccessCallback -> org.cyberpwn.react.ArHt:
    java.lang.Object get() -> get
react.glang.Adapter -> org.cyberpwn.react.CEKE:
    java.lang.Object adapt(java.lang.Object) -> tBlW
    java.lang.Object onAdapt(java.lang.Object) -> JHuE
react.glang.Callback -> org.cyberpwn.react.upkC:
    java.lang.Object t -> eABd
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> kHre
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> org.cyberpwn.react.XBEG:
    double i -> ObfI
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> CxFc
react.glang.FinalFloat -> org.cyberpwn.react.VCnN:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> PmIn
react.glang.FinalInteger -> org.cyberpwn.react.wUOA:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> HBnj
react.glang.FinalLong -> org.cyberpwn.react.yAai:
    long i -> EKvj
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> xylS
react.glang.FinalString -> org.cyberpwn.react.aCmP:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> org.cyberpwn.react.BAey:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> tBlW
    java.lang.Object onAdapt(java.lang.Object) -> JHuE
react.glang.GBiset -> org.cyberpwn.react.MAcw:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> Vojc
    java.lang.Object b -> UmHc
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> dgMF
    53:54:void setA(java.lang.Object) -> hbNQ
    63:63:java.lang.Object getB() -> fJoF
    73:74:void setB(java.lang.Object) -> XuBI
react.glang.GList -> org.cyberpwn.react.mXRf:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> CoTn
    45:52:react.glang.GList grepDistance(int,int) -> vsgG
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> AFkC
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> wnbL
    188:190:react.glang.GList shuffleCopy() -> BRib
    198:199:void shuffle() -> Whuy
    210:236:react.glang.GList split() -> IqPd
    248:248:boolean hasIndex(int) -> rfxq
    258:259:java.lang.Object pickRandom() -> sYeI
    270:277:react.glang.GList stringList() -> UQoK
    288:292:void forEach(react.glang.Callback) -> AFkC
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> eaUO
    336:336:react.glang.GList cropFrom(int) -> fBUO
    341:373:react.glang.GList split(int) -> BtcN
    389:389:react.glang.GList cropTo(int) -> XIke
    406:416:react.glang.GList crop(int,int) -> tBlW
    427:431:react.glang.GList removeDuplicates() -> pjRM
    442:446:void removeAll(java.lang.Object) -> HnCj
    455:455:boolean hasDuplicates() -> RjkW
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> NVOM
    484:490:void push(java.lang.Object,int) -> kHre
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> jEor
    528:532:void add(java.util.List) -> kHre
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> eGnX
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> uyaN
    626:627:react.glang.GList qdel(java.lang.Object) -> xylS
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> gyJN
    662:669:java.lang.Object popLast() -> FNWV
    674:683:java.lang.Object popRandom() -> OHPY
react.glang.GListAdapter -> org.cyberpwn.react.qlnn:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> AFkC
    java.lang.Object onAdapt(java.lang.Object) -> JHuE
react.glang.GMap -> org.cyberpwn.react.eHKE:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> wTrp
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> kHre
    64:81:react.glang.GMap flip() -> cJXt
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> kHre
    121:121:react.glang.GList k() -> Nwcn
    131:131:react.glang.GSet kset() -> WXXo
    141:141:react.glang.GList v() -> ytkY
    151:151:react.glang.GSet vset() -> lwVq
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> AFkC
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> JHuE
    209:219:react.glang.GMap removeDuplicateValues() -> xXUu
    233:242:void put(react.glang.GList,react.glang.GList) -> kHre
    251:267:react.glang.GList sortK() -> dfnb
    277:293:react.glang.GList sortV() -> lnfO
react.glang.GQuadraset -> org.cyberpwn.react.uEui:
    java.lang.Object a -> Vojc
    java.lang.Object b -> UmHc
    java.lang.Object c -> dWPm
    java.lang.Object d -> KNIb
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> dgMF
    25:26:void setA(java.lang.Object) -> hbNQ
    30:30:java.lang.Object getB() -> fJoF
    35:36:void setB(java.lang.Object) -> XuBI
    40:40:java.lang.Object getC() -> Kvxf
    45:46:void setC(java.lang.Object) -> avjr
    50:50:java.lang.Object getD() -> eirA
    55:56:void setD(java.lang.Object) -> UtIc
react.glang.GSet -> org.cyberpwn.react.dnyj:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> org.cyberpwn.react.YUhi:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> Vojc
    java.lang.Object b -> UmHc
    java.lang.Object c -> dWPm
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> dgMF
    26:27:void setA(java.lang.Object) -> hbNQ
    31:31:java.lang.Object getB() -> fJoF
    36:37:void setB(java.lang.Object) -> XuBI
    41:41:java.lang.Object getC() -> Kvxf
    46:47:void setC(java.lang.Object) -> avjr
react.gmath.Average -> org.cyberpwn.react.jEwC:
    double[] values -> YNcV
    double average -> jrWa
    boolean dirty -> JRxV
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> eaTr
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> VLeC
react.gmath.DoubleArrayUtils -> org.cyberpwn.react.VfSB:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> kHre
    17:19:void wrapRight(double[]) -> kHre
    23:27:void fill(double[],double) -> fill
react.gmath.M -> org.cyberpwn.react.Bkxu:
    int precision -> NFTK
    int modulus -> dFQr
    float[] sin -> OkYh
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> kHre
    31:36:boolean r(java.lang.Double) -> AFkC
    51:51:double tps(long,int) -> JHuE
    63:63:double ticksFromNS(long) -> avjr
    75:101:java.lang.String toRoman(int) -> SnAi
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> JHuE
    144:216:int fromRoman(java.lang.String) -> HBnj
    226:226:long ns() -> KoJD
    236:236:long ms() -> PmWU
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> AFkC
    333:333:float sinLookup(int) -> aegl
react.gnet.client.Client -> org.cyberpwn.react.NLxW:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> wDvn
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> kHre
    74:74:react.gnet.packet.PacketHandler getHandler() -> IqRL
react.gnet.client.IClient -> org.cyberpwn.react.XdGk:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> kHre
    react.gnet.packet.PacketHandler getHandler() -> IqRL
react.gnet.download.Download -> org.cyberpwn.react.XBDm:
    react.gnet.download.DownloadState state -> tVBD
    react.gnet.download.DownloadType type -> vcwK
    react.gnet.download.DownloadStatus status -> XSpt
    react.gnet.download.DownloadMonitor monitor -> tgCP
    java.net.URL url -> url
    java.io.File file -> file
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    24:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> bPFe
    92:92:react.gnet.download.DownloadType getType() -> XRiX
    97:97:react.gnet.download.DownloadStatus getStatus() -> qKQM
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> EvGX
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> org.cyberpwn.react.oVHJ:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> kHre
    void onDownloadStarted(react.gnet.download.Download) -> kHre
    void onDownloadFinished(react.gnet.download.Download) -> AFkC
    void onDownloadFailed(react.gnet.download.Download) -> PmIn
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> kHre
react.gnet.download.DownloadState -> org.cyberpwn.react.aTqj:
    react.gnet.download.DownloadState IDLE -> yBmF
    react.gnet.download.DownloadState DOWNLOADING -> pQdq
    react.gnet.download.DownloadState FAILED -> rGJI
    react.gnet.download.DownloadState FINISHED -> TYFG
    react.gnet.download.DownloadState[] ENUM$VALUES -> ebet
    3:8:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadState[] values() -> values
    1:1:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
react.gnet.download.DownloadStatus -> org.cyberpwn.react.OYOk:
    long bytesDownloaded -> RImb
    long bytesTotal -> SMQd
    long bytesPerSecond -> pshD
    long timeElapsed -> Swdj
    10:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> WFuT
    25:25:long getBytesDownloaded() -> JRRT
    30:31:void setBytesDownloaded(long) -> UtIc
    35:35:long getBytesTotal() -> FxjA
    40:41:void setBytesTotal(long) -> WWke
    45:45:long getBytesPerSecond() -> RayY
    50:51:void setBytesPerSecond(long) -> CxFc
    55:55:long getTimeElapsed() -> kkay
    60:61:void setTimeElapsed(long) -> eaTr
react.gnet.download.DownloadType -> org.cyberpwn.react.VetE:
    react.gnet.download.DownloadType DETERMINATE -> EvmJ
    react.gnet.download.DownloadType INDETERMINATE -> wojj
    react.gnet.download.DownloadType[] ENUM$VALUES -> CWVQ
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadType[] values() -> values
    1:1:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
react.gnet.packet.IPacket -> org.cyberpwn.react.UcQe:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> avuf
    java.lang.String getPacketName() -> ejQN
react.gnet.packet.IncompatablePacketException -> org.cyberpwn.react.KMDK:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> org.cyberpwn.react.xiVX:
    react.gnet.packet.PacketBinding SERVER_BOUND -> SxEv
    react.gnet.packet.PacketBinding CLIENT_BOUND -> IaWR
    react.gnet.packet.PacketBinding[] ENUM$VALUES -> vJdS
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.packet.PacketBinding[] values() -> values
    1:1:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
react.gnet.packet.PacketException -> org.cyberpwn.react.KDSI:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> org.cyberpwn.react.pHKt:
    react.glang.GList accept -> yuqB
    react.gnet.packet.PacketBinding side -> mamC
    react.gnet.streams.OSS out -> rymT
    react.gnet.streams.ISS in -> OslM
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> kHre
    28:34:void accept(react.gnet.packet.IPacket) -> AFkC
    38:46:react.gnet.packet.IPacket findPacket(int) -> NgBu
    51:66:react.gnet.packet.IPacket read() -> vRPO
    71:77:void write(react.gnet.packet.IPacket) -> PmIn
react.gnet.packet.UnhandledPacketException -> org.cyberpwn.react.bhwI:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> org.cyberpwn.react.LrIv:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> IqRL
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> CoTn
react.gnet.server.Server -> org.cyberpwn.react.vbmw:
    int port -> port
    java.net.ServerSocket socket -> GJQq
    react.gnet.packet.PacketHandler handler -> wDvn
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> IqRL
    37:84:void run() -> run
    88:91:void pstart() -> CVPI
    95:96:void pstop() -> MclH
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> CoTn
react.gnet.streams.ISS -> org.cyberpwn.react.RHeT:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> iMSc
    boolean built -> cuuN
    byte[] readBuffer -> LkDR
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> kbcn
    64:72:react.glang.GList readStringList() -> ArMA
    77:85:react.glang.GList readDoubleList() -> pjPe
    90:98:react.glang.GList readLongList() -> byxs
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> kHre
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> kHre
    136:137:react.gnet.streams.ISS gzip() -> cSIk
    142:147:void build() -> build
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> AFkC
    435:436:void close() -> close
react.gnet.streams.OSS -> org.cyberpwn.react.WGSo:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> rypg
    react.gnet.streams.StreamBuilder bu -> iMSc
    boolean built -> cuuN
    byte[] writeBuffer -> dyXe
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> Kvjq
    41:42:react.gnet.streams.OSS gzip(int) -> FpLr
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> AFkC
    53:58:void build() -> build
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> hbNQ
    102:108:void writeDoubleList(react.glang.GList) -> XuBI
    112:118:void writeLongList(react.glang.GList) -> HnCj
    122:128:void writeStreamableList(react.glang.GList) -> jEor
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> db
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> PmIn
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> org.cyberpwn.react.fdaN:
    react.glang.GList constructors -> vJgW
    18:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> kHre
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> kHre
    49:50:void bind(react.gnet.streams.StreamConstructor) -> kHre
    54:55:void bindGZIP(int) -> Nwcn
    59:60:void bindGZIP() -> KTtj
    64:65:void bindCipher(javax.crypto.Cipher) -> PmIn
    69:70:void bindBuffer(int) -> VUID
    74:75:void bindBuffer() -> rgdw
react.gnet.streams.StreamConstructor -> org.cyberpwn.react.srvg:
    java.io.InputStream constructInput(java.io.InputStream) -> kHre
    java.io.OutputStream constructOutput(java.io.OutputStream) -> kHre
react.gnet.streams.constructors.BufferedStreamConstructor -> org.cyberpwn.react.fJnS:
    int bufferSize -> bufferSize
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> AFkC
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> AFkC
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> kHre
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> kHre
react.gnet.streams.constructors.CipherStreamConstructor -> org.cyberpwn.react.VTqb:
    javax.crypto.Cipher cipher -> QaAe
    17:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> PmIn
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> PmIn
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> kHre
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> kHre
react.gnet.streams.constructors.GZipStreamConstructor -> org.cyberpwn.react.xFqb:
    int compressionLevel -> XBrC
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> CoTn
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> CoTn
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> kHre
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> kHre
react.gnet.streams.overlays.CGZIPInputStream -> org.cyberpwn.react.KMCJ:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> org.cyberpwn.react.OXnN:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> org.cyberpwn.react.CxPL:
    void toBytes(react.gnet.streams.OSS) -> kHre
    void fromBytes(react.gnet.streams.ISS) -> kHre
react.graph.ColossalView -> org.cyberpwn.react.dgMF:
    react.papyrus.BufferedFrame view -> skrA
    react.glang.GMap buffers -> hInr
    react.glang.GMap graphs -> hkqw
    double level -> ObkT
    double targetLevel -> msRU
    int maxX -> GRbq
    int maxY -> WsSl
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> ychd
    51:77:void render() -> lewQ
    81:98:void scroll(int) -> FEYN
    102:112:void recompile() -> pQBR
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> kHre
    122:122:react.papyrus.BufferedFrame getView() -> WOjA
    127:127:react.glang.GMap getBuffers() -> fugo
    132:132:react.glang.GMap getGraphs() -> ESgA
    137:137:double getLevel() -> DjUw
    142:142:double getTargetLevel() -> KTvw
    147:147:int getMaxX() -> SvbL
    152:152:int getMaxY() -> aTvD
react.graph.ColossalView$Builder -> org.cyberpwn.react.dgMF$kHre:
    react.glang.GList graphs -> CVue
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> kHre
    171:191:react.graph.ColossalView compute() -> aUWD
react.graph.CubicleIterator -> org.cyberpwn.react.fJoF:
    int[][] mapping -> mbPi
    int xCubes -> XLDD
    int yCubes -> RdEL
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> XuBA
    47:130:void insert(react.graph.GraphSize,int) -> kHre
    134:145:void print() -> print
react.graph.Graph2D -> org.cyberpwn.react.wnbL:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> kHre
react.graph.GraphCPUArc -> org.cyberpwn.react.BRib:
    byte fontColor -> nBoP
    byte backgroundColor -> HLsV
    double pct -> ETkd
    react.gmath.Average aax -> fUKA
    react.gmath.Average aay -> HECq
    react.gmath.Average aaz -> WQNv
    long msx -> QWnR
    26:38:void <init>(byte) -> <init>
    42:47:void sample() -> OHGK
    52:90:void onRender(react.papyrus.BufferedFrame) -> kHre
    94:94:byte getFontColor() -> EBdv
    99:100:void setFontColor(byte) -> kHre
    104:104:byte getBackgroundColor() -> IhdW
    109:110:void setBackgroundColor(byte) -> AFkC
react.graph.GraphLagMap -> org.cyberpwn.react.Whuy:
    int grid -> NEsf
    org.bukkit.entity.Player viewer -> UmLm
    org.bukkit.util.Vector lastVector -> QyrA
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> iDKc
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> JkgX
    49:55:void zoomOut() -> CNAB
    60:164:void onRender(react.papyrus.BufferedFrame) -> kHre
    21:21:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> lUGI
react.graph.GraphMemoryArc -> org.cyberpwn.react.IqPd:
    byte fontColor -> nBoP
    byte backgroundColor -> HLsV
    double pct -> ETkd
    react.gmath.Average aax -> fUKA
    long msx -> QWnR
    long of -> EULo
    26:37:void <init>(byte) -> <init>
    41:47:void sample() -> OHGK
    52:79:void onRender(react.papyrus.BufferedFrame) -> kHre
    83:83:byte getFontColor() -> EBdv
    88:89:void setFontColor(byte) -> kHre
    93:93:byte getBackgroundColor() -> IhdW
    98:99:void setBackgroundColor(byte) -> AFkC
react.graph.GraphMode -> org.cyberpwn.react.sYeI:
    react.graph.GraphMode NORMAL -> YhWg
    react.graph.GraphMode ITEMFRAME -> bjaP
    react.graph.GraphMode EOD -> QGNT
    react.graph.GraphMode[] ENUM$VALUES -> OHvy
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.GraphMode[] values() -> values
    1:1:react.graph.GraphMode valueOf(java.lang.String) -> valueOf
react.graph.GraphSampleLine -> org.cyberpwn.react.UQoK:
    double lx -> GuEo
    double ly -> MnIL
    react.api.ISampler sampler -> htei
    react.graph.IFormatter formatter -> vmMh
    byte graphColor -> oWWc
    byte backgroundColor -> HLsV
    byte borderColor -> qwQG
    byte textColor -> yvWL
    int ticksLeftTitle -> vAyI
    int ticksOutTitle -> WkEi
    double nextPoint -> cCSr
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> OHGK
    51:183:void onRender(react.papyrus.BufferedFrame) -> kHre
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> AFkC
    226:254:int getHue(int,int,int) -> PmIn
    259:281:void scaleFor(react.glang.GList) -> xylS
    285:285:react.graph.IFormatter getFormatter() -> pHCm
    290:291:void setFormatter(react.graph.IFormatter) -> kHre
    295:295:byte getGraphColor() -> IXCe
    300:301:void setGraphColor(byte) -> PmIn
    305:305:byte getBackgroundColor() -> IhdW
    310:311:void setBackgroundColor(byte) -> AFkC
    315:315:byte getBorderColor() -> VoJl
    320:321:void setBorderColor(byte) -> CoTn
    325:325:byte getTextColor() -> OsGT
    330:331:void setTextColor(byte) -> vsgG
    335:335:react.api.ISampler getSampler() -> Ubue
react.graph.GraphSize -> org.cyberpwn.react.pjRM:
    react.graph.GraphSize WIDE -> Mdvt
    react.graph.GraphSize FULL -> bbTP
    react.graph.GraphSize SQUARE -> nLCf
    int[] $SWITCH_TABLE$react$graph$GraphSize -> SgJK
    react.graph.GraphSize[] ENUM$VALUES -> DRLq
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> DHSi
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> RIKp
react.graph.GraphText -> org.cyberpwn.react.RjkW:
    java.lang.String text -> text
    byte fontColor -> nBoP
    byte backgroundColor -> HLsV
    boolean wrote -> BKeH
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> kHre
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> EBdv
    68:69:void setFontColor(byte) -> kHre
    73:73:byte getBackgroundColor() -> IhdW
    78:79:void setBackgroundColor(byte) -> AFkC
react.graph.GraphingInstance -> org.cyberpwn.react.NVOM:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> CVue
    react.graph.ColossalView view -> wonx
    react.papyrus.Papyrus papyrus -> xQPc
    react.papyrus.IRenderer renderer -> Enat
    boolean mapping -> qLDb
    react.glang.GList msgs -> EwRA
    surge.sched.Task waiter -> tffI
    surge.sched.Task waiter2 -> pQhW
    int shift -> Fysd
    int iv -> uGec
    boolean notif -> LjdI
    boolean doScrolling -> vRxx
    49:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> PJuT
    127:128:void setDoScrolling(boolean) -> UtIc
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> kHre
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> kHre
    151:155:void send(java.lang.String) -> rfxq
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> kHre
    166:205:void on(react.event.ReactScrollEvent) -> kHre
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> kHre
    219:227:void destroy() -> destroy
    231:240:void toggle() -> NgRq
    244:245:void setGraphs(react.glang.GList) -> avjr
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> Whyq
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> xXXN
    298:298:react.graph.ColossalView getView() -> YpAr
    303:303:react.papyrus.Papyrus getPapyrus() -> Jked
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> kHre
    323:324:void setPapyrus(react.papyrus.Papyrus) -> kHre
    328:329:void setRenderer(react.papyrus.IRenderer) -> kHre
    333:334:void setMapping(boolean) -> CoTn
    338:339:void setMsgs(react.glang.GList) -> UtIc
    343:344:void setWaiter(surge.sched.Task) -> kHre
    348:349:void setWaiter2(surge.sched.Task) -> AFkC
    353:354:void setShift(int) -> IOCR
    358:359:void setNotif(boolean) -> WWke
    363:363:react.papyrus.IRenderer getRenderer() -> DHQr
    368:368:boolean isMapping() -> WXLm
    373:373:react.glang.GList getMsgs() -> gyKR
    378:378:surge.sched.Task getWaiter() -> eHPR
    383:383:surge.sched.Task getWaiter2() -> ySJe
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> mqjd
    398:414:void compile() -> KniY
    418:433:void enableSly() -> JIbv
    437:445:void disableSly() -> BmBE
    40:40:boolean access$0(react.graph.GraphingInstance) -> kHre
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> AFkC
    46:46:boolean access$2(react.graph.GraphingInstance) -> PmIn
    46:46:void access$3(react.graph.GraphingInstance,boolean) -> kHre
    44:44:int access$4(react.graph.GraphingInstance) -> CoTn
    44:44:void access$5(react.graph.GraphingInstance,int) -> kHre
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> vsgG
react.graph.GraphingInstance$1 -> org.cyberpwn.react.NVOM$1:
    react.graph.GraphingInstance this$0 -> hSBr
    org.bukkit.entity.Player val$player -> Ygwj
    1:54:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> org.cyberpwn.react.NVOM$2:
    react.graph.GraphingInstance this$0 -> hSBr
    1:79:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> org.cyberpwn.react.NVOM$3:
    react.graph.GraphingInstance this$0 -> hSBr
    1:109:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> kHre
react.graph.IFormatter -> org.cyberpwn.react.eGnX:
    java.lang.String from(double) -> iSmg
react.graph.IGraph -> org.cyberpwn.react.uyaN:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> cSKu
    long getTimeViewport() -> oxQJ
    void render(react.papyrus.BufferedFrame) -> PmIn
    double getMax() -> getMax
    void setMax(double) -> HBnj
react.graph.NormalGraph -> org.cyberpwn.react.gyJN:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> EoAc
    long timeViewport -> IXig
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> cSKu
    35:35:long getTimeViewport() -> oxQJ
    41:42:void render(react.papyrus.BufferedFrame) -> PmIn
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> HBnj
    void onRender(react.papyrus.BufferedFrame) -> kHre
react.graph.PlotBoard -> org.cyberpwn.react.FNWV:
    react.glang.GMap plots -> FWpp
    int maxRecordings -> DQkQ
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> lfVf
    33:33:long getAccurateTimeSpan() -> tCYy
    38:50:long getMedian(long,long) -> CoTn
    55:55:long getMinimumAccuracyRange() -> pjSA
    60:70:double getMaxValue() -> jFaU
    75:85:double getMinValue() -> ofrP
    90:90:react.glang.GList sort(react.glang.GMap) -> AFkC
    95:105:long earilestRecording() -> ksxG
    110:120:long latestRecording() -> DYVf
    125:126:void reduceBefore(long) -> iSmg
    130:156:void reduceBetween(long,long) -> vsgG
    160:160:boolean before(long,long) -> tBlW
    165:165:boolean after(long,long) -> JHuE
    170:170:boolean within(long,long,long) -> kHre
    175:193:react.glang.GMap getBetween(long,long) -> hbNQ
    198:200:void plot(long,double) -> kHre
    204:204:boolean hasAt(long) -> HBnj
    209:209:double getAt(long) -> rfxq
    214:214:int getSize() -> getSize
react.graph.Point -> org.cyberpwn.react.OHPY:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> org.cyberpwn.react.wTrp:
    int iid -> ECmE
    react.graph.IGraph graph -> QrCs
    react.graph.GraphSize size -> ixHb
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> Rjoe
    24:25:void setGraph(react.graph.IGraph) -> kHre
    29:29:react.graph.GraphSize getSize() -> tfBO
    34:35:void setSize(react.graph.GraphSize) -> kHre
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> org.cyberpwn.react.cJXt:
    react.graph.RenderMaxType UNLIMITED -> RRcb
    react.graph.RenderMaxType LIMITED -> VNQc
    react.graph.RenderMaxType[] ENUM$VALUES -> FhuU
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> org.cyberpwn.react.WXXo:
    java.lang.String CRLF -> hIse
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> eaUO
    162:198:java.lang.String toString(react.json.JSONObject) -> AFkC
react.json.HTTPTokener -> org.cyberpwn.react.ytkY:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> org.cyberpwn.react.lwVq:
    java.util.ArrayList myArrayList -> LsXR
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> kHre
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> IqEw
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> WFhj
    394:399:react.json.JSONObject getJSONObject(int) -> Jsgx
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> fBUO
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> lUFh
    515:515:boolean optBoolean(int) -> lUGI
    533:536:boolean optBoolean(int,boolean) -> AFkC
    551:551:double optDouble(int) -> KCgM
    569:572:double optDouble(int,double) -> kHre
    587:587:int optInt(int) -> BJOI
    605:608:int optInt(int,int) -> hbNQ
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> AFkC
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> kHre
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> kHre
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> kHre
    722:723:react.json.JSONArray optJSONArray(int) -> kHuH
    737:738:react.json.JSONObject optJSONObject(int) -> KelS
    752:752:long optLong(int) -> eOtV
    770:773:long optLong(int,long) -> kHre
    788:788:java.lang.String optString(int) -> NDak
    803:804:java.lang.String optString(int,java.lang.String) -> kHre
    816:817:react.json.JSONArray put(boolean) -> CxFc
    830:831:react.json.JSONArray put(java.util.Collection) -> kHre
    845:848:react.json.JSONArray put(double) -> rfxq
    860:861:react.json.JSONArray put(int) -> eOss
    873:874:react.json.JSONArray put(long) -> eaUO
    887:888:react.json.JSONArray put(java.util.Map) -> kHre
    902:903:react.json.JSONArray put(java.lang.Object) -> WWke
    921:922:react.json.JSONArray put(int,boolean) -> PmIn
    939:940:react.json.JSONArray put(int,java.util.Collection) -> kHre
    958:959:react.json.JSONArray put(int,double) -> AFkC
    977:978:react.json.JSONArray put(int,int) -> XuBI
    996:997:react.json.JSONArray put(int,long) -> AFkC
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> kHre
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> kHre
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> CxFc
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> kHre
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> kHre
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> kHre
react.json.JSONException -> org.cyberpwn.react.xXUu:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> esoH
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> org.cyberpwn.react.dfnb:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> kHre
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> BtcN
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> kHre
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> AFkC
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> eaUO
    379:456:java.lang.String toString(react.json.JSONArray) -> AFkC
    472:552:java.lang.String toString(react.json.JSONObject) -> AFkC
react.json.JSONObject -> org.cyberpwn.react.lnfO:
    java.util.Map map -> map
    java.lang.Object NULL -> GuJg
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> kHre
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> AFkC
    480:499:java.lang.String doubleToString(double) -> eaUO
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> XIke
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> SnAi
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> aegl
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> PmIn
    751:767:java.lang.String[] getNames(java.lang.Object) -> eaTr
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> NgBu
    855:855:boolean isNull(java.lang.String) -> isNull
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> OjXK
    917:937:java.lang.String numberToString(java.lang.Number) -> kHre
    949:949:java.lang.Object opt(java.lang.String) -> kbcn
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> kHre
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> kHre
    1018:1018:boolean optBoolean(java.lang.String) -> Kvjq
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> kHre
    1054:1054:double optDouble(java.lang.String) -> FpLr
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> kHre
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> kHre
    1116:1119:double optDouble(java.lang.String,double) -> kHre
    1134:1134:int optInt(java.lang.String) -> Nwcn
    1152:1155:int optInt(java.lang.String,int) -> PmIn
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> VUID
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> FEYN
    1198:1198:long optLong(java.lang.String) -> XuBA
    1216:1219:long optLong(java.lang.String,long) -> kHre
    1234:1234:java.lang.String optString(java.lang.String) -> IOCR
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> AFkC
    1255:1305:void populateMap(java.lang.Object) -> iSmg
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> AFkC
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> kHre
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> AFkC
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> CoTn
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> AFkC
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> kHre
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> PmIn
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> CoTn
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> vsgG
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> kHre
    1590:1590:java.lang.Object remove(java.lang.String) -> IqEw
    1605:1640:boolean similar(java.lang.Object) -> CxFc
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> HBnj
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> PmIn
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> kHre
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> kHre
    2000:2004:void indent(java.io.Writer,int) -> kHre
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> kHre
react.json.JSONObject$Null -> org.cyberpwn.react.lnfO$kHre:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> org.cyberpwn.react.Kvxf:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> org.cyberpwn.react.eirA:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> org.cyberpwn.react.VLeC:
    long character -> NEyP
    boolean eof -> eof
    long index -> KMpw
    long line -> KVbd
    char previous -> MLHT
    java.io.Reader reader -> reader
    boolean usePrevious -> qepB
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> back
    119:131:int dehexchar(char) -> kHre
    136:136:boolean end() -> NgUJ
    147:153:boolean more() -> tKmo
    164:198:char next() -> next
    213:218:char next(char) -> AFkC
    233:250:java.lang.String next(int) -> qRwH
    263:266:char nextClean() -> EvLg
    287:334:java.lang.String nextString(char) -> PmIn
    349:361:java.lang.String nextTo(char) -> CoTn
    376:388:java.lang.String nextTo(java.lang.String) -> WFhj
    403:441:java.lang.Object nextValue() -> RINB
    458:479:char skipTo(char) -> vsgG
    491:491:react.json.JSONException syntaxError(java.lang.String) -> Jsgx
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> org.cyberpwn.react.KoJD:
    int maxdepth -> wWAE
    boolean comma -> AHcf
    char mode -> LsXc
    react.json.JSONObject[] stack -> ujKw
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> lUFh
    157:164:react.json.JSONWriter array() -> BuRn
    180:193:react.json.JSONWriter end(char,char) -> kHre
    206:206:react.json.JSONWriter endArray() -> VMJL
    219:219:react.json.JSONWriter endObject() -> URVn
    235:258:react.json.JSONWriter key(java.lang.String) -> lUGI
    274:285:react.json.JSONWriter object() -> ofrB
    299:310:void pop(char) -> tBlW
    322:329:void push(react.json.JSONObject) -> CoTn
    342:342:react.json.JSONWriter value(boolean) -> eaTr
    356:356:react.json.JSONWriter value(double) -> fBUO
    369:369:react.json.JSONWriter value(long) -> fBUO
    385:385:react.json.JSONWriter value(java.lang.Object) -> rfxq
react.json.XML -> org.cyberpwn.react.PmWU:
    java.lang.Character AMP -> MmkH
    java.lang.Character APOS -> pcNJ
    java.lang.Character BANG -> iVHg
    java.lang.Character EQ -> feqD
    java.lang.Character GT -> yeWC
    java.lang.Character LT -> VxdK
    java.lang.Character QUEST -> yLEL
    java.lang.Character QUOT -> iMVh
    java.lang.Character SLASH -> ebkv
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> KCgM
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> kHre
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> eaUO
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> org.cyberpwn.react.IqRL:
    java.util.HashMap entity -> Enbb
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> nAjw
    108:133:java.lang.Object nextContent() -> kIcg
    149:166:java.lang.Object nextEntity(char) -> JHuE
    186:239:java.lang.Object nextMeta() -> ksvu
    261:334:java.lang.Object nextToken() -> rViE
    354:420:boolean skipPast(java.lang.String) -> BJOI
react.lagmap.LagMap -> org.cyberpwn.react.bPFe:
    react.glang.GMap chunks -> JvCA
    13:16:void <init>() -> <init>
    20:27:react.glang.GMap getGrandTotalMilliseconds() -> kcVc
    32:47:react.glang.GMap getGrandTotal() -> Nwui
    52:61:void pump() -> HTat
    65:71:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> kHre
    75:81:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> kHre
    85:85:react.glang.GMap getChunks() -> SnTR
react.lagmap.LagMapChunk -> org.cyberpwn.react.XRiX:
    react.glang.GMap hits -> hRdT
    org.bukkit.Chunk c -> EBxB
    15:19:void <init>(org.bukkit.Chunk) -> <init>
    23:37:react.glang.GMap getMS() -> DYVD
    42:66:double totalMS() -> yuPS
    71:78:double getMS(react.api.ChunkIssue) -> kHre
    83:89:void hit(react.api.ChunkIssue,double) -> kHre
    93:94:void hit(react.api.ChunkIssue) -> AFkC
    98:98:int getX() -> getX
    103:103:int getZ() -> getZ
    108:115:double totalScore() -> OXtW
    120:120:react.glang.GMap getHits() -> eGpr
    125:134:void pump() -> HTat
    139:139:int compareTo(react.lagmap.LagMapChunk) -> kHre
    144:144:org.bukkit.Chunk getC() -> avoG
    149:149:org.bukkit.World getWorld() -> getWorld
    1:1:int compareTo(java.lang.Object) -> compareTo
react.nms.INMSBinding -> org.cyberpwn.react.qKQM:
    java.lang.String getPackageVersion() -> ssTV
    void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> kHre
react.nms.NMSBinding -> org.cyberpwn.react.EvGX:
    java.lang.String packageVersion -> dVxF
    7:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> ssTV
react.nms.NMSBinding10 -> org.cyberpwn.react.WFuT:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> kHre
react.nms.NMSBinding11 -> org.cyberpwn.react.JRRT:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> kHre
react.nms.NMSBinding12 -> org.cyberpwn.react.FxjA:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> kHre
react.nms.NMSBinding8 -> org.cyberpwn.react.RayY:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> kHre
react.nms.NMSBinding9 -> org.cyberpwn.react.kkay:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> kHre
react.notification.Note -> org.cyberpwn.react.avuf:
    react.notification.Note RAI -> HVIm
    react.notification.Note VERBOSE -> TGim
    react.notification.Note SPIKES -> RBEL
    react.notification.Note GC -> cBtP
    react.notification.Note[] ENUM$VALUES -> pslj
    5:10:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    14:15:void bake(java.lang.String) -> kHuH
    1:1:react.notification.Note[] values() -> values
    1:1:react.notification.Note valueOf(java.lang.String) -> valueOf
react.notification.Notification -> org.cyberpwn.react.ejQN:
    react.notification.Note type -> Qhsm
    java.lang.String message -> message
    8:12:void <init>(react.notification.Note,java.lang.String) -> <init>
    16:16:react.notification.Note getType() -> loKF
    21:22:void setType(react.notification.Note) -> kHre
    26:26:java.lang.String getMessage() -> getMessage
    31:32:void setMessage(java.lang.String) -> setMessage
react.papyrus.BufferedFrame -> org.cyberpwn.react.vRPO:
    byte[][] frame -> qfOf
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> kHre
    90:97:void write(byte) -> write
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> kHre
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> kHre
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> kHre
    153:167:java.awt.image.BufferedImage toBufferedImage() -> ETHe
    175:182:void writeRainbowMul() -> VLfu
    189:196:void writeRainbowAdd() -> maLU
    203:213:void writeSparks() -> YxSy
    217:223:boolean write(int,int,byte) -> kHre
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> kHre
    255:272:void write(react.papyrus.BufferedFrame) -> CoTn
    276:276:byte[][] getRawFrame() -> YpDh
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> org.cyberpwn.react.CVPI:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> CoTn
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> kHre
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> org.cyberpwn.react.MclH:
    org.bukkit.map.MapView getView() -> Qgki
    react.papyrus.BufferedFrame getFrameBuffer() -> vARI
    void addRenderer(react.papyrus.IRenderer) -> AFkC
    void clearRenderers() -> lfXd
    react.glang.GList getRenderers() -> wfXL
    void removeRenderer(react.papyrus.IRenderer) -> PmIn
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> wfXJ
react.papyrus.IRenderer -> org.cyberpwn.react.ArMA:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> kHre
react.papyrus.Papyrus -> org.cyberpwn.react.pjPe:
    org.bukkit.map.MapView map -> Wasy
    react.papyrus.BufferedFrame frameBuffer -> mbVt
    react.papyrus.BufferedFrame lastFrameBuffer -> jjPA
    react.glang.GList renderers -> eROP
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> Qgki
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> vARI
    51:52:void addRenderer(react.papyrus.IRenderer) -> AFkC
    57:58:void clearRenderers() -> lfXd
    63:63:react.glang.GList getRenderers() -> wfXL
    69:70:void removeRenderer(react.papyrus.IRenderer) -> PmIn
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> wfXJ
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> AFkC
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> PmIn
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> CoTn
react.papyrus.Papyrus$1 -> org.cyberpwn.react.pjPe$1:
    react.papyrus.Papyrus this$0 -> JKPr
    org.bukkit.map.MapCanvas val$c -> riUq
    org.bukkit.map.MapView val$v -> JeCs
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> org.cyberpwn.react.byxs:
    int spaceSize -> QGUK
    java.lang.String fontChars -> oqOK
    int[][] fontData -> tgKt
    react.papyrus.ReactFont Font -> gaFg
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> org.cyberpwn.react.cSIk:
    react.glang.GList subgoals -> hciL
    java.lang.String tag -> JueF
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> xWxg
    26:44:void propigate() -> kkep
    49:50:void addGoal(react.rai.IGoal) -> kHre
    55:65:react.glang.GList getFailingSubgoals() -> inPu
    71:71:boolean isFailing() -> QxnA
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> upsB
    void onPropigated() -> aMKN
react.rai.Goal$1 -> org.cyberpwn.react.cSIk$1:
    react.rai.Goal this$0 -> nmiq
    react.rai.IGoal val$i -> SUkY
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> org.cyberpwn.react.KTtj:
    react.glang.GList getSubgoals() -> xWxg
    void propigate() -> kkep
    void onPropigated() -> aMKN
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> inPu
    boolean isFailing() -> QxnA
    boolean onCheckFailing() -> upsB
    void update() -> update
    void addGoal(react.rai.IGoal) -> kHre
react.rai.IRAI -> org.cyberpwn.react.rgdw:
    react.glang.GList getGoals() -> MttS
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> kHre
    react.glang.GList getEvents() -> CgWU
    void callEvent(react.rai.RAIEvent) -> kHre
    react.glang.GList getListeners() -> DHWU
react.rai.RAI -> org.cyberpwn.react.ychd:
    react.glang.GList goals -> qoDN
    react.glang.GList events -> Arxh
    react.glang.GList logEvents -> SgNR
    react.glang.GList listeners -> vmQO
    long since -> lNRA
    react.rai.RAI instance -> gObm
    23:32:void <init>() -> <init>
    37:37:react.glang.GList getGoals() -> MttS
    43:44:void addGoal(react.rai.IGoal) -> kHre
    49:89:void tick() -> tick
    94:94:react.glang.GList getEvents() -> CgWU
    100:117:void callEvent(react.rai.RAIEvent) -> kHre
    122:122:react.glang.GList getListeners() -> DHWU
react.rai.RAIEvent -> org.cyberpwn.react.lewQ:
    react.rai.RAIEventType type -> bHdL
    java.lang.String[] pars -> foCo
    java.lang.String ovt -> pcNm
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> ncqL
    29:29:java.lang.String[] getPars() -> xrOs
    34:34:java.lang.String getOvt() -> XdSU
react.rai.RAIEventType -> org.cyberpwn.react.pQBR:
    react.rai.RAIEventType FIRE_ACTION -> IjPY
    react.rai.RAIEventType NOTE_GOAL_FAILING -> qCnW
    react.rai.RAIEventType NOTE_GOAL_FIXED -> nLFk
    java.lang.String[] msgs -> SLyR
    react.rai.RAIEventType[] ENUM$VALUES -> hcgS
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> GRBC
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> kHre
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedEntityCounts -> org.cyberpwn.react.WOjA:
    int spawned -> raEC
    boolean failing -> qoCT
    double cd -> RdJS
    double ad -> RJWW
    23:23:void <clinit>() -> <clinit>
    30:34:void <init>() -> <init>
    39:94:boolean onCheckFailing() -> upsB
    100:150:void onPropigated() -> aMKN
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> kHre
react.rai.goals.GoalReducedEntityCounts$1 -> org.cyberpwn.react.WOjA$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> txKo
    1:76:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    81:90:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> org.cyberpwn.react.WOjA$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> txKo
    org.bukkit.Chunk val$lx -> fCoC
    1:134:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    139:147:void run() -> run
react.rai.goals.GoalStableChunkTime -> org.cyberpwn.react.fugo:
    boolean failing -> qoCT
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> upsB
    72:76:void onPropigated() -> aMKN
react.rai.goals.GoalStableChunkTime$1 -> org.cyberpwn.react.fugo$1:
    react.rai.goals.GoalStableChunkTime this$0 -> cKgP
    1:48:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> org.cyberpwn.react.ESgA:
    boolean failing -> qoCT
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> aMKN
    35:35:void letUp() -> jygt
    40:77:boolean onCheckFailing() -> upsB
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> kHre
react.rai.goals.GoalStableEntityTime$1 -> org.cyberpwn.react.ESgA$1:
    react.rai.goals.GoalStableEntityTime this$0 -> pRPe
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> org.cyberpwn.react.DjUw:
    boolean failing -> qoCT
    react.glang.GMap reocc -> IjRw
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> aMKN
    88:125:boolean onCheckFailing() -> upsB
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> kHre
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> AFkC
react.rai.goals.GoalStableFluidTime$1 -> org.cyberpwn.react.DjUw$1:
    react.rai.goals.GoalStableFluidTime this$0 -> xIGI
    org.bukkit.Chunk val$lx -> fCoC
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> org.cyberpwn.react.DjUw$2:
    react.rai.goals.GoalStableFluidTime this$0 -> xIGI
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> org.cyberpwn.react.KTvw:
    boolean failing -> qoCT
    react.glang.GMap reocc -> IjRw
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> aMKN
    89:125:boolean onCheckFailing() -> upsB
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> kHre
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> AFkC
react.rai.goals.GoalStableHopperTime$1 -> org.cyberpwn.react.KTvw$1:
    react.rai.goals.GoalStableHopperTime this$0 -> mYgo
    org.bukkit.Chunk val$lx -> fCoC
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> org.cyberpwn.react.KTvw$2:
    react.rai.goals.GoalStableHopperTime this$0 -> mYgo
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> org.cyberpwn.react.SvbL:
    int d -> d
    boolean failing -> qoCT
    react.glang.GMap reocc -> IjRw
    38:43:void <init>() -> <init>
    48:92:void onPropigated() -> aMKN
    97:153:boolean onCheckFailing() -> upsB
    34:34:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> kHre
    33:33:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> AFkC
react.rai.goals.GoalStableRedstoneTime$1 -> org.cyberpwn.react.SvbL$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> GSLI
    org.bukkit.Chunk val$lx -> fCoC
    1:74:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    79:89:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> org.cyberpwn.react.SvbL$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> GSLI
    1:117:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    122:131:void run() -> run
react.rai.goals.GoalStableTickTime -> org.cyberpwn.react.aTvD:
    boolean failing -> qoCT
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> aMKN
    34:58:boolean onCheckFailing() -> upsB
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> kHre
react.rai.goals.GoalStableTickTime$1 -> org.cyberpwn.react.aTvD$1:
    react.rai.goals.GoalStableTickTime this$0 -> AHgv
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.redstone.RedstoneEvent -> org.cyberpwn.react.aUWD:
    surge.util.MaterialBlock block -> rOfH
    org.bukkit.util.Vector vector -> aowO
    byte from -> WkKY
    byte to -> nnMe
    16:22:void <init>(org.bukkit.event.block.BlockRedstoneEvent) -> <init>
    26:26:surge.util.MaterialBlock getBlock() -> ebHK
    31:32:void setBlock(surge.util.MaterialBlock) -> kHre
    36:36:org.bukkit.util.Vector getVector() -> DGvc
    41:42:void setVector(org.bukkit.util.Vector) -> kHre
    46:46:byte getFrom() -> SDBh
    51:52:void setFrom(byte) -> tBlW
    56:56:byte getTo() -> fBhG
    61:62:void setTo(byte) -> JHuE
react.redstone.RedstoneTracker -> org.cyberpwn.react.EBdv:
    org.bukkit.World world -> world
    react.controller.FeatureController fc -> PCrg
    react.glang.GList events -> Arxh
    boolean ticking -> lNTU
    surge.sched.Task task -> lEbj
    boolean nms -> RdLm
    int tr -> QWwb
    react.gmath.Average aav -> PMEe
    boolean handleTicking -> mHfU
    33:55:void <init>(org.bukkit.World) -> <init>
    59:61:void close() -> close
    65:98:void tick() -> tick
    103:127:void set(org.bukkit.Location,surge.util.MaterialBlock) -> AFkC
    131:152:void enact(react.redstone.RedstoneEvent) -> kHre
    157:184:void on(org.bukkit.event.block.BlockRedstoneEvent) -> kHre
react.redstone.RedstoneTracker$1 -> org.cyberpwn.react.EBdv$1:
    react.redstone.RedstoneTracker this$0 -> RAiW
    1:47:void <init>(react.redstone.RedstoneTracker,java.lang.String,int) -> <init>
    52:53:void run() -> run
react.sampler.SampleAsyncQueue -> org.cyberpwn.react.IhdW:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleAsyncQueue$1 -> org.cyberpwn.react.IhdW$1:
    react.sampler.SampleAsyncQueue this$0 -> AjkE
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleChunkTime -> org.cyberpwn.react.JkgX:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleChunkTime$1 -> org.cyberpwn.react.JkgX$1:
    react.sampler.SampleChunkTime this$0 -> wxgP
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleChunksLoaded -> org.cyberpwn.react.CNAB:
    react.graph.IFormatter formatter -> vmMh
    17:27:void <init>() -> <init>
    32:38:void construct() -> pqvc
    43:44:void sample() -> OHGK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleChunksLoaded$1 -> org.cyberpwn.react.CNAB$1:
    react.sampler.SampleChunksLoaded this$0 -> dOMO
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> iSmg
react.sampler.SampleChunksLoadedPerSecond -> org.cyberpwn.react.IXCe:
    react.gmath.Average a -> ekab
    react.graph.IFormatter formatter -> vmMh
    16:29:void <init>() -> <init>
    34:40:void construct() -> pqvc
    45:47:void sample() -> OHGK
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleChunksLoadedPerSecond$1 -> org.cyberpwn.react.IXCe$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> WIFw
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> iSmg
react.sampler.SampleEntitiesDrops -> org.cyberpwn.react.VoJl:
    react.graph.IFormatter formatter -> vmMh
    17:27:void <init>() -> <init>
    32:38:void construct() -> pqvc
    43:44:void sample() -> OHGK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleEntitiesDrops$1 -> org.cyberpwn.react.VoJl$1:
    react.sampler.SampleEntitiesDrops this$0 -> sdIs
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> iSmg
react.sampler.SampleEntitiesLiving -> org.cyberpwn.react.OsGT:
    react.graph.IFormatter formatter -> vmMh
    17:27:void <init>() -> <init>
    32:38:void construct() -> pqvc
    43:44:void sample() -> OHGK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleEntitiesLiving$1 -> org.cyberpwn.react.OsGT$1:
    react.sampler.SampleEntitiesLiving this$0 -> rFsY
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> iSmg
react.sampler.SampleEntitiesTiles -> org.cyberpwn.react.Ubue:
    react.graph.IFormatter formatter -> vmMh
    17:27:void <init>() -> <init>
    32:38:void construct() -> pqvc
    43:44:void sample() -> OHGK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleEntitiesTiles$1 -> org.cyberpwn.react.Ubue$1:
    react.sampler.SampleEntitiesTiles this$0 -> raGS
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> iSmg
react.sampler.SampleEntitiesTotal -> org.cyberpwn.react.DHSi:
    react.graph.IFormatter formatter -> vmMh
    17:27:void <init>() -> <init>
    32:38:void construct() -> pqvc
    43:44:void sample() -> OHGK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleEntitiesTotal$1 -> org.cyberpwn.react.DHSi$1:
    react.sampler.SampleEntitiesTotal this$0 -> FPGl
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> iSmg
react.sampler.SampleEntityDroppedTicks -> org.cyberpwn.react.RIKp:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleEntityDroppedTicks$1 -> org.cyberpwn.react.RIKp$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> fers
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleEntityTime -> org.cyberpwn.react.PJuT:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleEntityTime$1 -> org.cyberpwn.react.PJuT$1:
    react.sampler.SampleEntityTime this$0 -> dqQB
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleEntityTimeLock -> org.cyberpwn.react.NgRq:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleEntityTimeLock$1 -> org.cyberpwn.react.NgRq$1:
    react.sampler.SampleEntityTimeLock this$0 -> oNjk
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleExplosionTime -> org.cyberpwn.react.Whyq:
    react.graph.IFormatter formatter -> vmMh
    17:27:void <init>() -> <init>
    32:38:void construct() -> pqvc
    43:44:void sample() -> OHGK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleExplosionTime$1 -> org.cyberpwn.react.Whyq$1:
    react.sampler.SampleExplosionTime this$0 -> rhvC
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> iSmg
react.sampler.SampleFluidPerSecond -> org.cyberpwn.react.xXXN:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleFluidPerSecond$1 -> org.cyberpwn.react.xXXN$1:
    react.sampler.SampleFluidPerSecond this$0 -> AIJK
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleFluidPerTick -> org.cyberpwn.react.YpAr:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    46:53:void sample() -> OHGK
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleFluidPerTick$1 -> org.cyberpwn.react.YpAr$1:
    react.sampler.SampleFluidPerTick this$0 -> eAOI
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleFluidTickTime -> org.cyberpwn.react.Jked:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleFluidTickTime$1 -> org.cyberpwn.react.Jked$1:
    react.sampler.SampleFluidTickTime this$0 -> WkKH
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleFluidTickUtilization -> org.cyberpwn.react.DHQr:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    46:53:void sample() -> OHGK
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleFluidTickUtilization$1 -> org.cyberpwn.react.DHQr$1:
    react.sampler.SampleFluidTickUtilization this$0 -> vTAQ
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleHopperPerSecond -> org.cyberpwn.react.gyKR:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleHopperPerSecond$1 -> org.cyberpwn.react.gyKR$1:
    react.sampler.SampleHopperPerSecond this$0 -> sciF
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleHopperPerTick -> org.cyberpwn.react.eHPR:
    react.graph.IFormatter formatter -> vmMh
    18:29:void <init>() -> <init>
    34:40:void construct() -> pqvc
    47:54:void sample() -> OHGK
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleHopperPerTick$1 -> org.cyberpwn.react.eHPR$1:
    react.sampler.SampleHopperPerTick this$0 -> xYfS
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleHopperTickTime -> org.cyberpwn.react.ySJe:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleHopperTickTime$1 -> org.cyberpwn.react.ySJe$1:
    react.sampler.SampleHopperTickTime this$0 -> HfoI
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleHopperTickUtilization -> org.cyberpwn.react.mqjd:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    46:53:void sample() -> OHGK
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleHopperTickUtilization$1 -> org.cyberpwn.react.mqjd$1:
    react.sampler.SampleHopperTickUtilization this$0 -> Rtlf
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleMemoryAllocated -> org.cyberpwn.react.KniY:
    react.graph.IFormatter formatter -> vmMh
    17:27:void <init>() -> <init>
    32:38:void construct() -> pqvc
    43:44:void sample() -> OHGK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleMemoryAllocated$1 -> org.cyberpwn.react.KniY$1:
    react.sampler.SampleMemoryAllocated this$0 -> IGni
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> iSmg
react.sampler.SampleMemoryAllocationPerSecond -> org.cyberpwn.react.JIbv:
    react.graph.IFormatter formatter -> vmMh
    17:27:void <init>() -> <init>
    32:38:void construct() -> pqvc
    43:44:void sample() -> OHGK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleMemoryAllocationPerSecond$1 -> org.cyberpwn.react.JIbv$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> SELW
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> iSmg
react.sampler.SampleMemoryFree -> org.cyberpwn.react.BmBE:
    react.graph.IFormatter formatter -> vmMh
    17:27:void <init>() -> <init>
    32:38:void construct() -> pqvc
    43:44:void sample() -> OHGK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleMemoryFree$1 -> org.cyberpwn.react.BmBE$1:
    react.sampler.SampleMemoryFree this$0 -> lhEx
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> iSmg
react.sampler.SampleMemoryMax -> org.cyberpwn.react.cSKu:
    react.graph.IFormatter formatter -> vmMh
    17:27:void <init>() -> <init>
    32:38:void construct() -> pqvc
    43:44:void sample() -> OHGK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleMemoryMax$1 -> org.cyberpwn.react.cSKu$1:
    react.sampler.SampleMemoryMax this$0 -> lgdu
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> iSmg
react.sampler.SampleMemoryUse -> org.cyberpwn.react.oxQJ:
    react.graph.IFormatter formatter -> vmMh
    17:27:void <init>() -> <init>
    32:38:void construct() -> pqvc
    43:44:void sample() -> OHGK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleMemoryUse$1 -> org.cyberpwn.react.oxQJ$1:
    react.sampler.SampleMemoryUse this$0 -> pQnW
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> iSmg
react.sampler.SamplePhysicsTickTime -> org.cyberpwn.react.lfVf:
    react.graph.IFormatter formatter -> vmMh
    17:27:void <init>() -> <init>
    32:38:void construct() -> pqvc
    43:44:void sample() -> OHGK
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SamplePhysicsTickTime$1 -> org.cyberpwn.react.lfVf$1:
    react.sampler.SamplePhysicsTickTime this$0 -> ynNr
    1:19:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> iSmg
react.sampler.SampleRedstonePerSecond -> org.cyberpwn.react.tCYy:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleRedstonePerSecond$1 -> org.cyberpwn.react.tCYy$1:
    react.sampler.SampleRedstonePerSecond this$0 -> EfYY
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleRedstonePerTick -> org.cyberpwn.react.pjSA:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    46:53:void sample() -> OHGK
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleRedstonePerTick$1 -> org.cyberpwn.react.pjSA$1:
    react.sampler.SampleRedstonePerTick this$0 -> Voyi
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleRedstoneTickTime -> org.cyberpwn.react.jFaU:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleRedstoneTickTime$1 -> org.cyberpwn.react.jFaU$1:
    react.sampler.SampleRedstoneTickTime this$0 -> OlGQ
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleRedstoneTickUtilization -> org.cyberpwn.react.ofrP:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    46:53:void sample() -> OHGK
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleRedstoneTickUtilization$1 -> org.cyberpwn.react.ofrP$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> tfnn
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleSyncQueue -> org.cyberpwn.react.ksxG:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleSyncQueue$1 -> org.cyberpwn.react.ksxG$1:
    react.sampler.SampleSyncQueue this$0 -> KhJs
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleTickTime -> org.cyberpwn.react.DYVf:
    react.graph.IFormatter formatter -> vmMh
    react.gmath.Average aa -> ekeI
    17:29:void <init>() -> <init>
    34:40:void construct() -> pqvc
    45:47:void sample() -> OHGK
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleTickTime$1 -> org.cyberpwn.react.DYVf$1:
    react.sampler.SampleTickTime this$0 -> kTES
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> iSmg
react.sampler.SampleTickUtilization -> org.cyberpwn.react.Rjoe:
    react.graph.IFormatter formatter -> vmMh
    react.gmath.Average aa -> ekeI
    17:29:void <init>() -> <init>
    34:40:void construct() -> pqvc
    45:47:void sample() -> OHGK
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleTickUtilization$1 -> org.cyberpwn.react.Rjoe$1:
    react.sampler.SampleTickUtilization this$0 -> bjlM
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> iSmg
react.sampler.SampleTicksPerSecond -> org.cyberpwn.react.tfBO:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleTicksPerSecond$1 -> org.cyberpwn.react.tfBO$1:
    react.sampler.SampleTicksPerSecond this$0 -> yLKh
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleTileDroppedTicks -> org.cyberpwn.react.OjXK:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleTileDroppedTicks$1 -> org.cyberpwn.react.OjXK$1:
    react.sampler.SampleTileDroppedTicks this$0 -> NWad
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleTileTime -> org.cyberpwn.react.NgUJ:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleTileTime$1 -> org.cyberpwn.react.NgUJ$1:
    react.sampler.SampleTileTime this$0 -> bkMJ
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.sampler.SampleTileTimeLock -> org.cyberpwn.react.tKmo:
    react.graph.IFormatter formatter -> vmMh
    18:28:void <init>() -> <init>
    33:39:void construct() -> pqvc
    44:45:void sample() -> OHGK
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> pHCm
react.sampler.SampleTileTimeLock$1 -> org.cyberpwn.react.tKmo$1:
    react.sampler.SampleTileTimeLock this$0 -> TitH
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> iSmg
react.security.checkpoints.SecurityCheckpointAlpha -> org.cyberpwn.react.EvLg:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> jhfO
    77:141:void doScan(java.lang.Runnable) -> AFkC
    145:174:byte[] readResource(java.io.File,java.lang.String) -> kHre
    179:210:react.glang.GMap scan(java.io.File) -> AFkC
    143:143:byte[] access$0(java.io.File,java.lang.String) -> AFkC
react.security.checkpoints.SecurityCheckpointAlpha$1 -> org.cyberpwn.react.EvLg$1:
    java.lang.Runnable val$r -> IGrA
    1:77:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> org.cyberpwn.react.EvLg$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> FOjR
    java.lang.Runnable val$r -> IGrA
    1:130:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    135:137:void run() -> run
react.security.checkpoints.SecurityCheckpointBravo -> org.cyberpwn.react.RINB:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> jhfO
    77:141:void doScan(java.lang.Runnable) -> AFkC
    145:174:byte[] readResource(java.io.File,java.lang.String) -> kHre
    179:210:react.glang.GMap scan(java.io.File) -> AFkC
    143:143:byte[] access$0(java.io.File,java.lang.String) -> AFkC
react.security.checkpoints.SecurityCheckpointBravo$1 -> org.cyberpwn.react.RINB$1:
    java.lang.Runnable val$r -> IGrA
    1:77:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.checkpoints.SecurityCheckpointBravo$1$1 -> org.cyberpwn.react.RINB$1$1:
    react.security.checkpoints.SecurityCheckpointBravo$1 this$1 -> LYko
    java.lang.Runnable val$r -> IGrA
    1:130:void <init>(react.security.checkpoints.SecurityCheckpointBravo$1,java.lang.Runnable) -> <init>
    135:137:void run() -> run
react.security.checkpoints.SecurityCheckpointCharlie -> org.cyberpwn.react.BuRn:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> jhfO
    77:141:void doScan(java.lang.Runnable) -> AFkC
    145:174:byte[] readResource(java.io.File,java.lang.String) -> kHre
    179:210:react.glang.GMap scan(java.io.File) -> AFkC
    143:143:byte[] access$0(java.io.File,java.lang.String) -> AFkC
react.security.checkpoints.SecurityCheckpointCharlie$1 -> org.cyberpwn.react.BuRn$1:
    java.lang.Runnable val$r -> IGrA
    1:77:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.checkpoints.SecurityCheckpointCharlie$1$1 -> org.cyberpwn.react.BuRn$1$1:
    react.security.checkpoints.SecurityCheckpointCharlie$1 this$1 -> pJAg
    java.lang.Runnable val$r -> IGrA
    1:130:void <init>(react.security.checkpoints.SecurityCheckpointCharlie$1,java.lang.Runnable) -> <init>
    135:137:void run() -> run
react.security.checkpoints.SecurityCheckpointDelta -> org.cyberpwn.react.VMJL:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> jhfO
    77:141:void doScan(java.lang.Runnable) -> AFkC
    145:174:byte[] readResource(java.io.File,java.lang.String) -> kHre
    179:210:react.glang.GMap scan(java.io.File) -> AFkC
    143:143:byte[] access$0(java.io.File,java.lang.String) -> AFkC
react.security.checkpoints.SecurityCheckpointDelta$1 -> org.cyberpwn.react.VMJL$1:
    java.lang.Runnable val$r -> IGrA
    1:77:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.checkpoints.SecurityCheckpointDelta$1$1 -> org.cyberpwn.react.VMJL$1$1:
    react.security.checkpoints.SecurityCheckpointDelta$1 this$1 -> rFvB
    java.lang.Runnable val$r -> IGrA
    1:130:void <init>(react.security.checkpoints.SecurityCheckpointDelta$1,java.lang.Runnable) -> <init>
    135:137:void run() -> run
react.security.checkpoints.SecurityCheckpointEcho -> org.cyberpwn.react.URVn:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> jhfO
    77:141:void doScan(java.lang.Runnable) -> AFkC
    145:174:byte[] readResource(java.io.File,java.lang.String) -> kHre
    179:210:react.glang.GMap scan(java.io.File) -> AFkC
    143:143:byte[] access$0(java.io.File,java.lang.String) -> AFkC
react.security.checkpoints.SecurityCheckpointEcho$1 -> org.cyberpwn.react.URVn$1:
    java.lang.Runnable val$r -> IGrA
    1:77:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.checkpoints.SecurityCheckpointEcho$1$1 -> org.cyberpwn.react.URVn$1$1:
    react.security.checkpoints.SecurityCheckpointEcho$1 this$1 -> PTvc
    java.lang.Runnable val$r -> IGrA
    1:130:void <init>(react.security.checkpoints.SecurityCheckpointEcho$1,java.lang.Runnable) -> <init>
    135:137:void run() -> run
react.security.checkpoints.SecurityCheckpointFoxtrot -> org.cyberpwn.react.ofrB:
    32:32:void <init>() -> <init>
    36:73:void finishScan() -> jhfO
    77:141:void doScan(java.lang.Runnable) -> AFkC
    145:174:byte[] readResource(java.io.File,java.lang.String) -> kHre
    179:210:react.glang.GMap scan(java.io.File) -> AFkC
    143:143:byte[] access$0(java.io.File,java.lang.String) -> AFkC
react.security.checkpoints.SecurityCheckpointFoxtrot$1 -> org.cyberpwn.react.ofrB$1:
    java.lang.Runnable val$r -> IGrA
    1:77:void <init>(java.lang.Runnable) -> <init>
    84:139:void run() -> run
react.security.checkpoints.SecurityCheckpointFoxtrot$1$1 -> org.cyberpwn.react.ofrB$1$1:
    react.security.checkpoints.SecurityCheckpointFoxtrot$1 this$1 -> tUmO
    java.lang.Runnable val$r -> IGrA
    1:130:void <init>(react.security.checkpoints.SecurityCheckpointFoxtrot$1,java.lang.Runnable) -> <init>
    135:137:void run() -> run
react.security.ipsec.IPSecAlpha -> org.cyberpwn.react.nAjw:
    java.lang.String ip -> xQYN
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.ipsec.IPSecBravo -> org.cyberpwn.react.kIcg:
    java.lang.String ip -> xQYN
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.ipsec.IPSecCharlie -> org.cyberpwn.react.ksvu:
    java.lang.String ip -> xQYN
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.ipsec.IPSecDelta -> org.cyberpwn.react.rViE:
    java.lang.String ip -> xQYN
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.ipsec.IPSecEcho -> org.cyberpwn.react.kcVc:
    java.lang.String ip -> xQYN
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.ipsec.IPSecFoxtrot -> org.cyberpwn.react.Nwui:
    java.lang.String ip -> xQYN
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> org.cyberpwn.react.HTat:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> org.cyberpwn.react.HTat$1:
    react.security.locks.SecurityLockAlpha this$0 -> MmqO
    java.io.File val$f -> mjjv
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.security.locks.SecurityLockBravo -> org.cyberpwn.react.SnTR:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockBravo$1 -> org.cyberpwn.react.SnTR$1:
    react.security.locks.SecurityLockBravo this$0 -> pAQN
    java.io.File val$f -> mjjv
    1:22:void <init>(react.security.locks.SecurityLockBravo,java.io.File) -> <init>
    27:40:void run() -> run
react.security.locks.SecurityLockCharlie -> org.cyberpwn.react.DYVD:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockCharlie$1 -> org.cyberpwn.react.DYVD$1:
    react.security.locks.SecurityLockCharlie this$0 -> IGqp
    java.io.File val$f -> mjjv
    1:22:void <init>(react.security.locks.SecurityLockCharlie,java.io.File) -> <init>
    27:40:void run() -> run
react.security.locks.SecurityLockDelta -> org.cyberpwn.react.yuPS:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockDelta$1 -> org.cyberpwn.react.yuPS$1:
    react.security.locks.SecurityLockDelta this$0 -> plET
    java.io.File val$f -> mjjv
    1:22:void <init>(react.security.locks.SecurityLockDelta,java.io.File) -> <init>
    27:40:void run() -> run
react.security.locks.SecurityLockFoxtrot -> org.cyberpwn.react.OXtW:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockFoxtrot$1 -> org.cyberpwn.react.OXtW$1:
    react.security.locks.SecurityLockFoxtrot this$0 -> EMFb
    java.io.File val$f -> mjjv
    1:22:void <init>(react.security.locks.SecurityLockFoxtrot,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> org.cyberpwn.react.eGpr:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> aegl
react.slate.PhantomSlate -> org.cyberpwn.react.loKF:
    react.glang.GList lines -> hckd
    react.glang.GList viewers -> ifoF
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> sAhM
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> eGuJ
    44:45:void set(int,java.lang.String) -> AFkC
    50:51:void setLines(react.glang.GList) -> WWke
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> build
    91:95:void addViewer(org.bukkit.entity.Player) -> aegl
    100:102:void removeViewer(org.bukkit.entity.Player) -> NgBu
    107:107:react.glang.GList getViewers() -> gxne
    113:113:boolean isViewing(org.bukkit.entity.Player) -> kbcn
    119:120:void addLine(java.lang.String) -> KelS
    125:126:void clearLines() -> sYmt
react.slate.Slate -> org.cyberpwn.react.ETHe:
    void build() -> build
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> eGuJ
    void set(int,java.lang.String) -> AFkC
    void setLines(react.glang.GList) -> WWke
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> aegl
    void addLine(java.lang.String) -> KelS
    void clearLines() -> sYmt
    void removeViewer(org.bukkit.entity.Player) -> NgBu
    react.glang.GList getViewers() -> gxne
    boolean isViewing(org.bukkit.entity.Player) -> kbcn
    void update() -> update
react.slate.SlateUtil -> org.cyberpwn.react.VLfu:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> fvMG
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> psIU
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> kHre
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> AFkC
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> PmIn
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> kHre
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> kHre
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> AFkC
    186:196:java.lang.String convertJSON(java.lang.String) -> eOtV
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> AFkC
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> AFkC
react.text.ColoredString -> org.cyberpwn.react.maLU:
    surge.util.C c -> NOOp
    java.lang.String s -> kmVN
    23:27:void <init>(surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:surge.util.C getC() -> Qgnu
    42:43:void setC(surge.util.C) -> AFkC
    47:47:java.lang.String getS() -> SnUt
    52:53:void setS(java.lang.String) -> NDak
react.text.RTEX -> org.cyberpwn.react.YxSy:
    react.glang.GList extras -> QOhY
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> FhPj
    44:58:react.json.JSONObject toJSON() -> SBpW
react.text.RTX -> org.cyberpwn.react.YpDh:
    react.json.JSONArray base -> essj
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> vsgG
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,surge.util.C) -> AFkC
    81:90:void addTextHover(java.lang.String,react.text.RTEX,surge.util.C) -> kHre
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,surge.util.C) -> kHre
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,surge.util.C) -> AFkC
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,surge.util.C) -> PmIn
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,surge.util.C) -> kHre
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,surge.util.C) -> AFkC
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,surge.util.C) -> PmIn
    265:265:react.json.JSONArray toJSON() -> GHpN
    276:277:void tellRawTo(org.bukkit.entity.Player) -> Kvjq
react.text.RawText -> org.cyberpwn.react.Qgki:
    java.lang.String COLOR_BLACK -> YiAr
    java.lang.String COLOR_DARK_BLUE -> OIbQ
    java.lang.String COLOR_DARK_GREEN -> QPHt
    java.lang.String COLOR_DARK_AQUA -> vddP
    java.lang.String COLOR_DARK_RED -> nLJs
    java.lang.String COLOR_DARK_PURPLE -> qMCh
    java.lang.String COLOR_GOLD -> mQWw
    java.lang.String COLOR_GRAY -> CiCt
    java.lang.String COLOR_DARK_GRAY -> lFDt
    java.lang.String COLOR_BLUE -> CptC
    java.lang.String COLOR_GREEN -> JlwT
    java.lang.String COLOR_AQUA -> SVPE
    java.lang.String COLOR_RED -> gFyH
    java.lang.String COLOR_LIGHT_PURPLE -> raKs
    java.lang.String COLOR_YELLOW -> suPl
    java.lang.String COLOR_WHITE -> igRm
    java.lang.String COLOR_NONE -> NOSa
    java.lang.String HEAD_TEXT -> hcms
    java.lang.String HEAD_COLOR -> Udhu
    java.lang.String HEAD_BOLD -> keHR
    java.lang.String HEAD_ITALIC -> EDXp
    java.lang.String HEAD_UNDERLINED -> CORk
    java.lang.String HEAD_STRIKETHROUGH -> Ulxt
    java.lang.String HEAD_OBFUSCATED -> tENk
    java.lang.String HEAD_CLICK_EVENT -> kSei
    java.lang.String HEAD_HOVER_EVENT -> SpEb
    java.lang.String HEAD_ACTION -> uXrX
    java.lang.String HEAD_VALUE -> GdOs
    java.lang.String HEAD_EXTRA -> XKnD
    java.lang.String HEAD_ACTION_SHOW_TEXT -> RAlC
    java.lang.String HEAD_ACTION_COMMAND -> OQtX
    java.util.ArrayList components -> Hocb
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> eOss
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> PmIn
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> kHre
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> kHre
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> kHre
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> kHre
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> kHre
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> kHre
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> kHre
    307:313:java.lang.String compile() -> VDXs
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> kHre
surge.Main -> org.cyberpwn.react.vARI:
    react.glang.GList plugins -> TQCf
    react.glang.GMap pluginInstances -> plGH
    react.glang.GList controllerSet -> VEfx
    react.glang.GMap anchors -> NFaX
    react.glang.GList classes -> pIbh
    java.lang.reflect.Field nsField -> TQCp
    java.lang.reflect.Field thField -> NyfC
    react.glang.GList tracks -> ahJe
    long nsf -> esvf
    surge.server.SuperSampler ssx -> keFm
    42:47:void <clinit>() -> <clinit>
    49:52:void <init>() -> <init>
    58:58:void onControllerRegistry() -> tLPO
    63:82:long getNanoSync() -> OYWN
    87:88:void requestResetNanos() -> PTJH
    94:102:void requestReload() -> MRpN
    108:118:void requestReload(java.lang.Runnable) -> PmIn
    123:137:int getThreadCount() -> getThreadCount
    148:168:void onStart(surge.util.Protocol) -> kHre
    175:183:void onStop() -> UcYK
    189:189:void onPostInit() -> PJxK
    195:195:void onPreInit() -> UJHB
    199:210:void shutDownAmps() -> EBgs
    214:423:void initializeAmps() -> skOs
    428:469:void doScan() -> XSOx
    473:495:void scanForPoolDefiners() -> wnkM
    499:515:void scanForRawEvents() -> nBMY
    519:535:void scanForDynamicTrack() -> EeLb
    539:560:void scanForAmps() -> ncpF
    565:584:void onTick() -> FEaj
    588:588:surge.server.SuperSampler getSuperSampler() -> VLaJ
surge.PluginAmp -> org.cyberpwn.react.lfXd:
    surge.control.AmpedPlugin plugin -> grLd
    boolean connected -> connected
    int masterTask -> RuQa
    java.lang.Runnable onReload -> xYij
    18:31:void <init>(surge.control.AmpedPlugin) -> <init>
    35:35:surge.control.AmpedPlugin getPluginInstance() -> sIMF
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> KMKh
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> kHre
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> kHre
    123:124:void stopTask(int) -> iTQa
    128:128:surge.control.AmpedPlugin getPlugin() -> kcXL
    133:133:int getMasterTask() -> dERA
    138:138:java.lang.Runnable getOnReload() -> Hmtk
    143:144:void setPlugin(surge.control.AmpedPlugin) -> kHre
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> TgvP
    158:159:void setOnReload(java.lang.Runnable) -> CoTn
    67:67:void access$0(surge.PluginAmp) -> kHre
surge.PluginAmp$1 -> org.cyberpwn.react.lfXd$1:
    surge.PluginAmp this$0 -> jGpW
    1:23:void <init>(surge.PluginAmp) -> <init>
    29:29:void run() -> run
surge.PluginAmp$2 -> org.cyberpwn.react.lfXd$2:
    surge.PluginAmp this$0 -> jGpW
    1:47:void <init>(surge.PluginAmp) -> <init>
    52:54:void run() -> run
surge.PluginAmp$3 -> org.cyberpwn.react.lfXd$3:
    surge.PluginAmp this$0 -> jGpW
    1:57:void <init>(surge.PluginAmp) -> <init>
    62:63:void run() -> run
surge.Surge -> org.cyberpwn.react.wfXL:
    surge.PluginAmp amp -> CWcx
    react.glang.GList tickComponents -> DIdw
    react.glang.GList atickComponents -> uHPi
    surge.sched.TaskManager taskmgr -> fLer
    surge.hotload.HotloadManager hotloadmgr -> HEQQ
    java.lang.Thread mainThread -> plFU
    20:152:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:29:boolean isObfuscated() -> isObfuscated
    34:35:void register(org.bukkit.event.Listener) -> kHre
    39:40:void unregister(org.bukkit.event.Listener) -> unregister
    44:44:java.io.File folder(java.lang.String) -> qRwH
    49:49:java.io.File folder() -> pPcn
    54:56:java.io.File getPluginJarFile() -> xrRS
    61:63:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> CoTn
    68:70:void startup() -> startup
    74:74:java.lang.Thread getServerThread() -> mPOb
    79:79:react.glang.GList getTickComponents() -> INwY
    84:84:react.glang.GList getAsyncTickComponents() -> tmtn
    89:96:void registerTicked(surge.sched.IMasterTickComponent) -> kHre
    100:107:void unregisterTicked(surge.sched.IMasterTickComponent) -> AFkC
    111:116:surge.PluginAmp createAmp(surge.control.AmpedPlugin) -> AFkC
    121:121:boolean isMainThread() -> isMainThread
    126:127:void stopAmp() -> jqYi
    131:131:boolean hasAmp() -> yuTw
    136:136:surge.PluginAmp getAmp() -> uyht
    141:141:surge.sched.TaskManager getTaskManager() -> WOnw
    146:146:surge.hotload.HotloadManager getHotloadManager() -> tKqv
surge.cluster.Cluster -> org.cyberpwn.react.wfXJ:
    surge.cluster.ClusterType type -> hdRH
    java.lang.Object t -> eABd
    8:12:void <init>(surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:surge.cluster.ClusterType getType() -> paiV
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
surge.cluster.ClusterBoolean -> org.cyberpwn.react.xWxg:
    7:8:void <init>(java.lang.Boolean) -> <init>
surge.cluster.ClusterDouble -> org.cyberpwn.react.kkep:
    7:8:void <init>(java.lang.Double) -> <init>
surge.cluster.ClusterInt -> org.cyberpwn.react.inPu:
    7:8:void <init>(java.lang.Integer) -> <init>
surge.cluster.ClusterLong -> org.cyberpwn.react.QxnA:
    7:8:void <init>(java.lang.Long) -> <init>
surge.cluster.ClusterString -> org.cyberpwn.react.upsB:
    7:8:void <init>(java.lang.String) -> <init>
surge.cluster.ClusterStringList -> org.cyberpwn.react.aMKN:
    9:10:void <init>(java.util.List) -> <init>
surge.cluster.ClusterType -> org.cyberpwn.react.MttS:
    surge.cluster.ClusterType INT -> NOTs
    surge.cluster.ClusterType BOOLEAN -> yvdE
    surge.cluster.ClusterType STRING -> Qqop
    surge.cluster.ClusterType STRING_LIST -> XCaD
    surge.cluster.ClusterType DOUBLE -> NFcn
    surge.cluster.ClusterType LONG -> hAmm
    surge.cluster.ClusterType[] ENUM$VALUES -> veJY
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.cluster.ClusterType[] values() -> values
    1:1:surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
surge.cluster.ConfigurationDataInput -> org.cyberpwn.react.CgWU:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> cmro
    12:12:void <init>() -> <init>
    17:127:void read(surge.cluster.IConfigurable,java.io.File) -> kHre
    132:257:surge.cluster.DataCluster fillDefaults(surge.cluster.IConfigurable) -> kHre
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> hQaR
surge.cluster.ConfigurationDataOutput -> org.cyberpwn.react.DHWU:
    12:12:void <init>() -> <init>
    17:143:void write(surge.cluster.IConfigurable,java.io.File) -> AFkC
surge.cluster.DataCluster -> org.cyberpwn.react.ncqL:
    react.glang.GMap clusters -> gqpA
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> ryQe
    29:33:void fromJson(react.json.JSONObject) -> tBlW
    37:44:react.json.JSONObject toJson() -> PuoR
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> tecy
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> kHre
    104:104:boolean contains(java.lang.String) -> contains
    109:109:surge.cluster.ClusterType getType(java.lang.String) -> iTQa
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> tBlW
    194:195:void set(java.lang.String,int) -> vsgG
    199:200:void set(java.lang.String,boolean) -> PmIn
    204:205:void set(java.lang.String,double) -> PmIn
    209:210:void set(java.lang.String,long) -> PmIn
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> kHre
surge.cluster.ICluster -> org.cyberpwn.react.xrOs:
    surge.cluster.ClusterType getType() -> paiV
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
surge.cluster.IConfigurable -> org.cyberpwn.react.XdSU:
surge.cluster.IDataInput -> org.cyberpwn.react.GRBC:
    surge.cluster.DataCluster read(java.io.File) -> PmIn
surge.cluster.IDataOutput -> org.cyberpwn.react.jygt:
    void write(surge.cluster.DataCluster,java.io.File) -> kHre
surge.cluster.Key -> org.cyberpwn.react.ebHK:
    java.lang.String value() -> value
surge.cluster.KeyPointer -> org.cyberpwn.react.DGvc:
    int value() -> value
surge.cluster.KeyStore -> org.cyberpwn.react.SDBh:
surge.cluster.ReflectedConfigurationException -> org.cyberpwn.react.fBhG:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
surge.cluster.YamlDataInput -> org.cyberpwn.react.jhfO:
    8:8:void <init>() -> <init>
    13:27:surge.cluster.DataCluster read(java.io.File) -> PmIn
surge.cluster.YamlDataOutput -> org.cyberpwn.react.eGuJ:
    6:6:void <init>() -> <init>
    13:20:void write(surge.cluster.DataCluster,java.io.File) -> kHre
surge.collection.GSound -> org.cyberpwn.react.gxne:
    java.lang.String sound -> Nyhf
    org.bukkit.Sound iSound -> EnnS
    java.lang.Float volume -> nnTP
    java.lang.Float pitch -> GuTs
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> FpLr
    61:72:void play(org.bukkit.Location) -> vsgG
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> kHre
    93:93:java.lang.String getSound() -> XBRe
    98:99:void setSound(java.lang.String) -> TgvP
    103:103:org.bukkit.Sound getiSound() -> DbLf
    108:109:void setiSound(org.bukkit.Sound) -> kHre
    113:113:java.lang.Float getVolume() -> DrmY
    118:119:void setVolume(java.lang.Float) -> kHre
    123:123:java.lang.Float getPitch() -> nSQt
    128:129:void setPitch(java.lang.Float) -> AFkC
surge.control.AmpedPlugin -> org.cyberpwn.react.sYmt:
    react.glang.GList controllers -> VFLT
    react.gconcurrent.ParallelPoolManager pp -> UTKA
    surge.server.CoreTickThread ctt -> gPMG
    java.util.UUID idx -> qoLT
    20:20:void <init>() -> <init>
    void doScan() -> XSOx
    long getNanoSync() -> OYWN
    int getThreadCount() -> getThreadCount
    35:57:void onReload() -> pXvw
    62:104:void onEnable() -> onEnable
    109:118:void onDisable() -> onDisable
    123:123:react.glang.GList getControllers() -> INxR
    129:130:void registerController(surge.control.IController) -> kHre
    135:146:void onTick() -> FEaj
    151:151:java.lang.String getTickName() -> RYem
    157:157:react.gconcurrent.ParallelPoolManager getThreadPool() -> YoiG
    162:219:void destroyOldThreads() -> hcAw
    void onControllerRegistry() -> tLPO
    void onStart(surge.util.Protocol) -> kHre
    void onStop() -> UcYK
    void onPostInit() -> PJxK
    void onPreInit() -> UJHB
surge.control.AmpedPlugin$1 -> org.cyberpwn.react.sYmt$1:
    surge.control.AmpedPlugin this$0 -> KElK
    1:77:void <init>(surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    82:82:long getNanoGate() -> oVHJ
surge.control.AmpedPlugin$2 -> org.cyberpwn.react.sYmt$2:
    surge.control.AmpedPlugin this$0 -> KElK
    1:175:void <init>(surge.control.AmpedPlugin) -> <init>
    180:212:void run() -> run
surge.control.Control -> org.cyberpwn.react.fvMG:
surge.control.Controller -> org.cyberpwn.react.psIU:
    7:10:void <init>() -> <init>
surge.control.Disable -> org.cyberpwn.react.Qgnu:
surge.control.Enable -> org.cyberpwn.react.SnUt:
surge.control.IController -> org.cyberpwn.react.FhPj:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
surge.control.Instance -> org.cyberpwn.react.GHpN:
surge.control.Plugin -> org.cyberpwn.react.VDXs:
surge.control.SurgePlugin -> org.cyberpwn.react.tLPO:
    void onStart(surge.util.Protocol) -> kHre
    void onStop() -> UcYK
    void onPostInit() -> PJxK
    void onPreInit() -> UJHB
    void onControllerRegistry() -> tLPO
    void registerController(surge.control.IController) -> kHre
    react.glang.GList getControllers() -> INxR
    react.gconcurrent.ParallelPoolManager getThreadPool() -> YoiG
surge.hotload.HotloadManager -> org.cyberpwn.react.OYWN:
    react.glang.GMap filemods -> xILd
    react.glang.GMap filesizes -> YNsG
    react.glang.GMap fileacts -> Kxng
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> kHre
    35:38:void untrack(java.io.File) -> CoTn
    42:45:void untrackall() -> Mldk
    50:86:void onTick() -> FEaj
    91:91:java.lang.String getTickName() -> RYem
    14:14:react.glang.GMap access$0(surge.hotload.HotloadManager) -> kHre
    15:15:react.glang.GMap access$1(surge.hotload.HotloadManager) -> AFkC
    16:16:react.glang.GMap access$2(surge.hotload.HotloadManager) -> PmIn
surge.hotload.HotloadManager$1 -> org.cyberpwn.react.OYWN$1:
    surge.hotload.HotloadManager this$0 -> EMKH
    1:55:void <init>(surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
surge.nms.NMSClass -> org.cyberpwn.react.PTJH:
    boolean init -> PLhu
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> SxVg
    java.lang.Class IChatBaseComponent -> MwFQ
    java.lang.Class ChatSerializer -> KxoS
    java.lang.Class PacketPlayOutPlayerInfo -> WIMx
    java.lang.Class PlayerInfoData -> WjpN
    java.lang.Class EnumPlayerInfoAction -> SpFd
    java.lang.Class GameProfile -> IbIN
    java.lang.Class EnumGamemode -> hldP
    java.lang.Class TileEntitySkull -> AHqF
    java.lang.Class LoadingCache -> sBPQ
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
surge.nms.NMSX -> org.cyberpwn.react.MRpN:
    surge.nms.NMSX bountifulAPI -> oGFC
    boolean useOldMethods -> xHnX
    java.lang.String nmsver -> IXyY
    java.lang.Object eTimes -> pRXp
    java.lang.Object eTitle -> lxpF
    java.lang.Object eSubtitle -> KqCO
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> kHre
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> MuEL
    75:89:java.lang.Class getCBClass(java.lang.String) -> FNLn
    96:104:java.lang.Object serializeChat(java.lang.String) -> GrrV
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> kHre
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> kHre
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> XtuF
    151:151:java.lang.String craftPackage() -> ydRd
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> kHre
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> kHre
    197:207:java.lang.Class getNMSClass(java.lang.String) -> SBpW
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> kHre
    279:280:void clearTitle(org.bukkit.entity.Player) -> Nwcn
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> PmIn
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> PmIn
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> kHre
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> AGMS
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> tBlW
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> XuBI
    434:447:int ping(org.bukkit.entity.Player) -> VUID
surge.nms.NMSX$1 -> org.cyberpwn.react.MRpN$1:
    org.bukkit.entity.Player val$player -> Ygwj
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
surge.nms.NMSX$2 -> org.cyberpwn.react.MRpN$2:
    org.bukkit.entity.Player val$player -> Ygwj
    java.lang.String val$message -> Vxqj
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
surge.nms.PacketUtil -> org.cyberpwn.react.UcYK:
    6:6:void <init>() -> <init>
    20:45:surge.nms.PacketUtil$V getVersion() -> CpIa
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> kHre
    68:82:void clearTitle(org.bukkit.entity.Player) -> Nwcn
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> PmIn
surge.nms.PacketUtil$V -> org.cyberpwn.react.UcYK$kHre:
    surge.nms.PacketUtil$V R17 -> CFfM
    surge.nms.PacketUtil$V R18 -> nCaR
    surge.nms.PacketUtil$V R19 -> QqsD
    surge.nms.PacketUtil$V R111 -> NOXQ
    surge.nms.PacketUtil$V R110 -> AcDB
    surge.nms.PacketUtil$V R112 -> uPfT
    surge.nms.PacketUtil$V[] ENUM$VALUES -> qnlc
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:surge.nms.PacketUtil$V[] values() -> values
    1:1:surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
surge.nms.Title -> org.cyberpwn.react.PJxK:
    java.lang.String title -> title
    java.lang.String subTitle -> rPMf
    java.lang.String action -> action
    java.lang.Integer fadeIn -> CGHa
    java.lang.Integer fadeOut -> eJGm
    java.lang.Integer stayTime -> dhfl
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> FEYN
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> DYYj
    79:80:void setSubTitle(java.lang.String) -> CxIF
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> fSjD
    99:100:void setFadeIn(java.lang.Integer) -> PmIn
    104:104:java.lang.Integer getFadeOut() -> fBhR
    109:110:void setFadeOut(java.lang.Integer) -> CoTn
    114:114:java.lang.Integer getStayTime() -> DbKW
    119:120:void setStayTime(java.lang.Integer) -> vsgG
surge.nms.VersionBukkit -> org.cyberpwn.react.UJHB:
    surge.nms.VersionBukkit VU -> FrSN
    surge.nms.VersionBukkit V7 -> eIgH
    surge.nms.VersionBukkit V8 -> pRVy
    surge.nms.VersionBukkit V9 -> SVUc
    surge.nms.VersionBukkit V11 -> tNBj
    surge.nms.VersionBukkit V111 -> nDAO
    surge.nms.VersionBukkit V112 -> axpM
    surge.nms.VersionBukkit[] ENUM$VALUES -> Rlde
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> pjXv
    27:32:boolean uc() -> wLjN
    37:67:surge.nms.VersionBukkit get() -> gFKl
    1:1:surge.nms.VersionBukkit[] values() -> values
    1:1:surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
surge.sched.IBursterator -> org.cyberpwn.react.EBgs:
    void burst(java.lang.Object) -> eaUO
    void setTimeLock(double) -> BtcN
    double getEstimatedTimeUse() -> fKYT
    int flush() -> CNHL
    int flush(react.gbench.Profiler) -> kHre
    void queue(java.lang.Object) -> fBUO
    void queue(java.util.List) -> PmIn
    void queue(java.lang.Object[]) -> kHre
surge.sched.ICancellable -> org.cyberpwn.react.skOs:
    void cancel() -> cancel
surge.sched.IMasterTickComponent -> org.cyberpwn.react.XSOx:
    void onTick() -> FEaj
    java.lang.String getTickName() -> RYem
surge.sched.ITask -> org.cyberpwn.react.wnkM:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> Nfvt
    java.lang.String getName() -> getName
    double getComputeTime() -> iLQr
    double getTotalComputeTime() -> WrSU
    double getActiveTime() -> RRBT
    boolean hasCompleted() -> gElA
surge.sched.Task -> org.cyberpwn.react.nBMY:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> YiIM
    double computeTime -> MnWP
    double totalComputeTime -> negC
    double activeTime -> jrlU
    boolean completed -> completed
    react.gbench.Profiler profiler -> gqry
    react.gbench.Profiler activeProfiler -> usLc
    int ticks -> FieG
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> CoTn
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> Nfvt
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> iLQr
    150:150:boolean hasCompleted() -> gElA
    156:156:double getTotalComputeTime() -> WrSU
    162:162:double getActiveTime() -> RRBT
    17:17:react.gbench.Profiler access$0(surge.sched.Task) -> PmIn
    15:15:void access$1(surge.sched.Task,boolean) -> kHre
    16:16:react.gbench.Profiler access$2(surge.sched.Task) -> CoTn
    14:14:void access$3(surge.sched.Task,double) -> kHre
    12:12:void access$4(surge.sched.Task,double) -> AFkC
    14:14:double access$5(surge.sched.Task) -> vsgG
    13:13:void access$6(surge.sched.Task,double) -> PmIn
    13:13:double access$7(surge.sched.Task) -> tBlW
    12:12:double access$8(surge.sched.Task) -> JHuE
surge.sched.Task$1 -> org.cyberpwn.react.nBMY$1:
    surge.sched.Task this$0 -> NhkT
    1:25:void <init>(surge.sched.Task) -> <init>
    30:40:void run() -> run
surge.sched.Task$2 -> org.cyberpwn.react.nBMY$2:
    surge.sched.Task this$0 -> NhkT
    1:49:void <init>(surge.sched.Task) -> <init>
    54:65:void run() -> run
surge.sched.Task$3 -> org.cyberpwn.react.nBMY$3:
    surge.sched.Task this$0 -> NhkT
    int val$total -> Wbdh
    1:74:void <init>(surge.sched.Task,int) -> <init>
    79:95:void run() -> run
surge.sched.TaskLater -> org.cyberpwn.react.EeLb:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> YiIM
    double computeTime -> MnWP
    double totalComputeTime -> negC
    double activeTime -> jrlU
    boolean completed -> completed
    react.gbench.Profiler profiler -> gqry
    react.gbench.Profiler activeProfiler -> usLc
    int ticks -> FieG
    23:24:void <init>(java.lang.String) -> <init>
    26:57:void <init>(java.lang.String,int) -> <init>
    61:70:void setup(java.lang.String,boolean) -> CoTn
    75:81:void cancel() -> cancel
    86:86:int getId() -> getId
    92:92:boolean isRepeating() -> Nfvt
    98:98:java.lang.String getName() -> getName
    104:104:double getComputeTime() -> iLQr
    110:110:boolean hasCompleted() -> gElA
    116:116:double getTotalComputeTime() -> WrSU
    122:122:double getActiveTime() -> RRBT
    18:18:react.gbench.Profiler access$0(surge.sched.TaskLater) -> kHre
    13:13:void access$1(surge.sched.TaskLater,double) -> kHre
    14:14:double access$2(surge.sched.TaskLater) -> AFkC
    13:13:double access$3(surge.sched.TaskLater) -> PmIn
    14:14:void access$4(surge.sched.TaskLater,double) -> AFkC
    17:17:react.gbench.Profiler access$5(surge.sched.TaskLater) -> CoTn
    15:15:double access$6(surge.sched.TaskLater) -> vsgG
    15:15:void access$7(surge.sched.TaskLater,double) -> PmIn
    10:10:int access$8(surge.sched.TaskLater) -> tBlW
surge.sched.TaskLater$1 -> org.cyberpwn.react.EeLb$1:
    surge.sched.TaskLater this$0 -> xbbh
    1:31:void <init>(surge.sched.TaskLater) -> <init>
    38:55:void run() -> run
surge.sched.TaskManager -> org.cyberpwn.react.ncpF:
    react.glang.GList tasks -> gqSg
    react.glang.GMap taskProfiles -> tfxE
    11:15:void <init>() -> <init>
    19:20:void add(surge.sched.ITask) -> kHre
    25:35:void onTick() -> FEaj
    39:40:void putFinishingTask(surge.sched.ITask) -> AFkC
    44:53:void putTask(surge.sched.ITask) -> PmIn
    58:58:java.lang.String getTickName() -> RYem
    63:63:react.glang.GList getTasks() -> Lqrf
    68:68:react.glang.GMap getTaskProfiles() -> nBSP
surge.sched.TaskProfile -> org.cyberpwn.react.sIMF:
    double activeTime -> jrlU
    double computeTickTime -> aVoa
    double computeTime -> MnWP
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> RRBT
    23:24:void setActiveTime(double) -> XIke
    28:28:double getComputeTickTime() -> tmvr
    33:34:void setComputeTickTime(double) -> SnAi
    38:38:double getComputeTime() -> iLQr
    43:44:void setComputeTime(double) -> aegl
surge.server.AsyncTick -> org.cyberpwn.react.KMKh:
surge.server.CPS -> org.cyberpwn.react.kcXL:
    react.glang.GMap keys -> nnXP
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> OYHT
    46:99:void scan() -> YVYK
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> PmIn
surge.server.CoreTickThread -> org.cyberpwn.react.dERA:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:71:void run() -> run
surge.server.Cuboid -> org.cyberpwn.react.Hmtk:
    java.lang.String worldName -> cTdu
    int x1 -> fMNJ
    int y1 -> jGwv
    int z1 -> RcvP
    int x2 -> Gcvf
    int y2 -> slfG
    int z2 -> wWPH
    int[] $SWITCH_TABLE$surge$util$Axis -> UvQj
    int[] $SWITCH_TABLE$surge$server$Cuboid$CuboidDirection -> mYqe
    44:58:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    62:72:int depth(surge.util.Axis) -> kHre
    85:91:void set(org.bukkit.Location,org.bukkit.Location) -> PmIn
    95:95:boolean hasPlayers() -> oDts
    100:112:react.glang.GList getPlayers() -> clXj
    117:168:react.glang.GList getEntities() -> qupK
    179:180:void <init>(org.bukkit.Location) -> <init>
    190:191:void <init>(surge.server.Cuboid) -> <init>
    211:220:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    240:249:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    251:260:void <init>(java.util.Map) -> <init>
    265:273:java.util.Map serialize() -> serialize
    278:278:surge.server.Cuboid flatten(int) -> MuEL
    289:289:org.bukkit.Location getLowerNE() -> fBjo
    300:300:org.bukkit.Location getUpperSW() -> PvRU
    310:313:org.bukkit.Location getCenter() -> getCenter
    325:330:org.bukkit.World getWorld() -> getWorld
    340:340:int getSizeX() -> tnXE
    350:350:int getSizeY() -> rEnA
    360:360:int getSizeZ() -> bPRc
    370:370:int getLowerX() -> JJMa
    380:380:int getLowerY() -> dDum
    390:390:int getLowerZ() -> imvy
    400:400:int getUpperX() -> ySSh
    410:410:int getUpperY() -> RcGT
    420:420:int getUpperZ() -> kIiw
    430:440:org.bukkit.block.Block[] corners() -> GbeM
    456:471:surge.server.Cuboid expand(surge.server.Cuboid$CuboidDirection,int) -> kHre
    486:486:surge.server.Cuboid shift(surge.server.Cuboid$CuboidDirection,int) -> AFkC
    502:516:surge.server.Cuboid outset(surge.server.Cuboid$CuboidDirection,int) -> PmIn
    532:532:surge.server.Cuboid inset(surge.server.Cuboid$CuboidDirection,int) -> CoTn
    548:548:boolean contains(int,int,int) -> vsgG
    560:560:boolean contains(org.bukkit.block.Block) -> hbNQ
    572:572:boolean contains(org.bukkit.Location) -> tBlW
    582:582:int volume() -> RjuB
    593:603:byte averageLightLevel() -> gpak
    614:614:surge.server.Cuboid contract() -> Oajy
    628:668:surge.server.Cuboid contract(surge.server.Cuboid$CuboidDirection) -> kHre
    682:697:surge.server.Cuboid getFace(surge.server.Cuboid$CuboidDirection) -> AFkC
    710:717:boolean containsOnly(org.bukkit.Material) -> kHre
    729:741:surge.server.Cuboid getBoundingCuboid(surge.server.Cuboid) -> kHre
    757:757:org.bukkit.block.Block getRelativeBlock(int,int,int) -> tBlW
    777:777:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> kHre
    788:802:java.util.List getChunks() -> gWOu
    817:821:void fill(int,byte) -> kHre
    845:845:java.util.Iterator iterator() -> iterator
    856:856:surge.server.Cuboid clone() -> ctvN
    867:867:java.lang.String toString() -> toString
    963:972:int hashCode() -> hashCode
    978:1038:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    29:29:int[] $SWITCH_TABLE$surge$util$Axis() -> dMea
    29:29:int[] $SWITCH_TABLE$surge$server$Cuboid$CuboidDirection() -> XBRm
surge.server.Cuboid$1 -> org.cyberpwn.react.Hmtk$1:
    surge.server.Cuboid this$0 -> wqAk
    1:100:void <init>(surge.server.Cuboid) -> <init>
    105:110:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> HnCj
    1:1:java.lang.Object onAdapt(java.lang.Object) -> JHuE
surge.server.Cuboid$CuboidDirection -> org.cyberpwn.react.Hmtk$kHre:
    surge.server.Cuboid$CuboidDirection North -> fwaT
    surge.server.Cuboid$CuboidDirection East -> oGGV
    surge.server.Cuboid$CuboidDirection South -> MvjR
    surge.server.Cuboid$CuboidDirection West -> HpKx
    surge.server.Cuboid$CuboidDirection Up -> WYtC
    surge.server.Cuboid$CuboidDirection Down -> cTeh
    surge.server.Cuboid$CuboidDirection Horizontal -> nwIO
    surge.server.Cuboid$CuboidDirection Vertical -> Beid
    surge.server.Cuboid$CuboidDirection Both -> TQIq
    surge.server.Cuboid$CuboidDirection Unknown -> OlNR
    int[] $SWITCH_TABLE$surge$server$Cuboid$CuboidDirection -> mYqe
    surge.server.Cuboid$CuboidDirection[] ENUM$VALUES -> LcDo
    918:930:void <clinit>() -> <clinit>
    918:918:void <init>(java.lang.String,int) -> <init>
    934:955:surge.server.Cuboid$CuboidDirection opposite() -> tKrs
    1:1:surge.server.Cuboid$CuboidDirection[] values() -> values
    1:1:surge.server.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    918:918:int[] $SWITCH_TABLE$surge$server$Cuboid$CuboidDirection() -> XBRm
surge.server.Cuboid$CuboidIterator -> org.cyberpwn.react.Hmtk$AFkC:
    org.bukkit.World w -> dpxu
    int baseX -> BTgm
    int baseY -> MwIl
    int baseZ -> aEme
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> QaRy
    int sizeY -> XDDr
    int sizeZ -> WQcD
    surge.server.Cuboid this$0 -> wqAk
    877:887:void <init>(surge.server.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    892:892:boolean hasNext() -> hasNext
    898:908:org.bukkit.block.Block next() -> next
    915:915:void remove() -> remove
    1:1:java.lang.Object next() -> next
surge.server.MemoryMonitor -> org.cyberpwn.react.pPcn:
    long memoryFree -> iVUo
    long memoryUsed -> HfyS
    long memoryMax -> htuW
    long lastMemoryUsed -> vvRG
    long memoryUsedAfterGC -> plPK
    long allocated -> iDwO
    long collected -> PgCm
    long collections -> VhUO
    long sms -> OJNV
    long memoryAllocatedPerTick -> tEVw
    long memoryCollectedPerTick -> bkVv
    long memoryFullyAllocatedPerTick -> lhSq
    long mah -> xQdG
    long mahs -> yKtv
    22:39:void <init>() -> <init>
    void onAllocationSet() -> QhSE
    46:107:void run() -> run
    111:111:long getMemoryFree() -> ESmo
    116:116:long getMemoryUsed() -> getMemoryUsed
    121:121:long getMemoryMax() -> Aqup
    126:126:long getLastMemoryUsed() -> rxqK
    131:131:long getMemoryUsedAfterGC() -> gFOG
    136:136:long getAllocated() -> getAllocated
    141:141:long getCollected() -> yAoh
    146:146:long getCollections() -> KoRl
    151:151:long getSms() -> KDaJ
    156:156:long getMemoryAllocatedPerTick() -> RADx
    161:161:long getMemoryCollectedPerTick() -> FErY
    166:166:long getMemoryFullyAllocatedPerTick() -> iKvk
    171:171:long getMah() -> RkYA
    176:176:long getMahs() -> xGao
surge.server.SuperSampler -> org.cyberpwn.react.xrRS:
    react.gmath.Average ticksPerSecondL -> gPRl
    react.gmath.Average tickTimeL -> lxsm
    react.gmath.Average mahL -> gXcV
    double ticksPerSecond -> kcuT
    double ticksPerSecondRaw -> uQKR
    double tickTime -> hdXC
    double tickTimeRaw -> QrXH
    boolean running -> running
    boolean frozen -> NGLO
    double tickUtilizationRaw -> KhUs
    double tickUtilization -> tfxu
    double leftoverTickTime -> oOYc
    long memoryUse -> iMgn
    long memoryAllocated -> bYts
    long memoryCollected -> uPjY
    long mahs -> yKtv
    int totalChunks -> AkWp
    int totalEntities -> FXep
    int totalDrops -> rHAt
    int totalTiles -> BDIf
    int totalLiving -> kuov
    int chunksLoaded -> axsd
    int chunksUnloaded -> cKuS
    surge.server.WorldMonitor worldMonitor -> oNwr
    surge.server.TPSMonitor tpsMonitor -> gquE
    surge.server.MemoryMonitor memoryMonitor -> slfQ
    java.lang.StackTraceElement[] lockStack -> MThS
    react.glang.GMap spikes -> AQKj
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> FEaj
    154:154:java.lang.String getTickName() -> RYem
    159:159:react.gmath.Average getTicksPerSecondL() -> hHtO
    164:164:double getTicksPerSecond() -> srvg
    169:169:double getTicksPerSecondRaw() -> rxtl
    174:174:boolean isRunning() -> isRunning
    179:179:surge.server.TPSMonitor getTpsMonitor() -> Thmd
    184:184:react.gmath.Average getTickTimeL() -> nRvO
    189:189:double getTickTime() -> qCMu
    194:194:double getTickTimeRaw() -> ctyf
    199:199:double getTickUtilizationRaw() -> AGdL
    204:204:double getTickUtilization() -> sQdJ
    209:209:double getLeftoverTickTime() -> AHEM
    214:214:surge.server.MemoryMonitor getMemoryMonitor() -> vuAG
    219:219:long getMemoryUse() -> AGdH
    224:224:long getMemoryAllocated() -> tDFY
    229:229:long getMemoryCollected() -> gpeB
    234:234:react.gmath.Average getMahL() -> kkns
    239:239:long getMahs() -> xGao
    244:244:int getTotalChunks() -> sjuk
    249:249:int getTotalEntities() -> Svjn
    254:254:int getTotalDrops() -> ycvF
    259:259:int getTotalTiles() -> NEXh
    264:264:int getTotalLiving() -> TNyb
    269:269:surge.server.WorldMonitor getWorldMonitor() -> qvQh
    274:274:int getChunksLoaded() -> sQcd
    279:279:int getChunksUnloaded() -> opKi
    284:285:void setTicksPerSecondL(react.gmath.Average) -> kHre
    289:290:void setTickTimeL(react.gmath.Average) -> AFkC
    294:295:void setMahL(react.gmath.Average) -> PmIn
    299:300:void setTicksPerSecond(double) -> jEor
    304:305:void setTicksPerSecondRaw(double) -> NgBu
    309:310:void setTickTime(double) -> kbcn
    314:315:void setTickTimeRaw(double) -> Kvjq
    319:320:void setRunning(boolean) -> iSmg
    324:325:void setTickUtilizationRaw(double) -> FpLr
    329:330:void setTickUtilization(double) -> Nwcn
    334:335:void setLeftoverTickTime(double) -> VUID
    339:340:void setMemoryUse(long) -> BtcN
    344:345:void setMemoryAllocated(long) -> XIke
    349:350:void setMemoryCollected(long) -> SnAi
    354:355:void setMahs(long) -> aegl
    359:360:void setTotalChunks(int) -> FNLn
    364:365:void setTotalEntities(int) -> GrrV
    369:370:void setTotalDrops(int) -> SBpW
    374:375:void setTotalTiles(int) -> AGMS
    379:380:void setTotalLiving(int) -> CxIF
    384:385:void setChunksLoaded(int) -> OYHT
    389:390:void setChunksUnloaded(int) -> pHCm
    394:395:void setWorldMonitor(surge.server.WorldMonitor) -> kHre
    399:400:void setTpsMonitor(surge.server.TPSMonitor) -> kHre
    404:405:void setMemoryMonitor(surge.server.MemoryMonitor) -> kHre
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> nKEg
    419:419:react.glang.GMap getSpikes() -> aCmP
    31:31:void access$0(surge.server.SuperSampler,int) -> kHre
    33:33:void access$1(surge.server.SuperSampler,int) -> AFkC
    34:34:void access$2(surge.server.SuperSampler,int) -> PmIn
    32:32:void access$3(surge.server.SuperSampler,int) -> CoTn
    35:35:void access$4(surge.server.SuperSampler,int) -> vsgG
    36:36:void access$5(surge.server.SuperSampler,int) -> tBlW
    37:37:void access$6(surge.server.SuperSampler,int) -> JHuE
    19:19:void access$7(surge.server.SuperSampler,double) -> kHre
    21:21:void access$8(surge.server.SuperSampler,double) -> AFkC
    15:15:react.gmath.Average access$9(surge.server.SuperSampler) -> kHre
    19:19:double access$10(surge.server.SuperSampler) -> AFkC
    16:16:react.gmath.Average access$11(surge.server.SuperSampler) -> PmIn
    21:21:double access$12(surge.server.SuperSampler) -> CoTn
    18:18:void access$13(surge.server.SuperSampler,double) -> PmIn
    20:20:void access$14(surge.server.SuperSampler,double) -> CoTn
    24:24:void access$15(surge.server.SuperSampler,double) -> vsgG
    20:20:double access$16(surge.server.SuperSampler) -> vsgG
    25:25:void access$17(surge.server.SuperSampler,double) -> tBlW
    25:25:double access$18(surge.server.SuperSampler) -> tBlW
    26:26:void access$19(surge.server.SuperSampler,double) -> JHuE
    23:23:void access$20(surge.server.SuperSampler,boolean) -> kHre
    42:42:react.glang.GMap access$21(surge.server.SuperSampler) -> JHuE
    27:27:void access$22(surge.server.SuperSampler,long) -> kHre
    28:28:void access$23(surge.server.SuperSampler,long) -> AFkC
    29:29:void access$24(surge.server.SuperSampler,long) -> PmIn
    17:17:react.gmath.Average access$25(surge.server.SuperSampler) -> hbNQ
    30:30:void access$26(surge.server.SuperSampler,long) -> CoTn
surge.server.SuperSampler$1 -> org.cyberpwn.react.xrRS$1:
    surge.server.SuperSampler this$0 -> QrWR
    1:71:void <init>(surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> kHre
surge.server.SuperSampler$2 -> org.cyberpwn.react.xrRS$2:
    surge.server.SuperSampler this$0 -> QrWR
    1:86:void <init>(surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> brVF
    106:107:void onSpike() -> pQLF
surge.server.SuperSampler$3 -> org.cyberpwn.react.xrRS$3:
    surge.server.SuperSampler this$0 -> QrWR
    1:110:void <init>(surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> QhSE
surge.server.TPSMonitor -> org.cyberpwn.react.mPOb:
    double tickTimeMS -> DInE
    double rawTicksPerSecond -> UeTL
    react.gbench.Profiler tickProfiler -> lpfT
    react.gbench.Profiler tickTimeProfiler -> FjIe
    boolean ticked -> CiQN
    java.lang.Thread$State lastState -> Wjxt
    double actualTickTimeMS -> jbPU
    double ltt -> tUyp
    long lastTick -> bbCx
    boolean frozen -> NGLO
    java.lang.StackTraceElement[] lockedStack -> iMjd
    double lmsx -> nChO
    23:40:void <init>() -> <init>
    void onTicked() -> brVF
    void onSpike() -> pQLF
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> kHre
    160:160:double getTickTimeMS() -> QVsE
    165:165:double getRawTicksPerSecond() -> nuXS
    170:170:react.gbench.Profiler getTickProfiler() -> jGHn
    175:175:boolean isTicked() -> pXyx
    180:181:void markTick() -> rWQL
    185:185:react.gbench.Profiler getTickTimeProfiler() -> dpKy
    190:190:java.lang.Thread$State getLastState() -> cdXO
    195:195:double getActualTickTimeMS() -> IyoT
    200:200:double getLtt() -> tDEX
    205:205:long getLastTick() -> LiQs
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> jhjt
surge.server.WorldMonitor -> org.cyberpwn.react.INwY:
    boolean chunksChanged -> kTRG
    boolean dropChanged -> YiPE
    boolean tileChanged -> pdAh
    boolean livingChanged -> YyqK
    boolean totalChanged -> iUym
    boolean updated -> ARID
    int totalChunks -> AkWp
    int totalDrops -> rHAt
    int totalTiles -> BDIf
    int totalLiving -> kuov
    int totalEntities -> FXep
    int chunksLoaded -> axsd
    int chunksUnloaded -> cKuS
    long ms -> dDum
    24:43:void <init>() -> <init>
    48:73:void run() -> run
    void updated(int,int,int,int,int,int,int) -> kHre
    80:85:void on(org.bukkit.event.world.ChunkLoadEvent) -> AFkC
    90:95:void on(org.bukkit.event.world.ChunkUnloadEvent) -> kHre
    100:101:void on(org.bukkit.event.entity.EntitySpawnEvent) -> kHre
    106:107:void on(org.bukkit.event.entity.EntityDeathEvent) -> kHre
    112:113:void on(org.bukkit.event.player.PlayerDropItemEvent) -> kHre
    118:119:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> kHre
    124:125:void on(org.bukkit.event.block.BlockPlaceEvent) -> kHre
    130:131:void on(org.bukkit.event.block.BlockBreakEvent) -> kHre
    135:136:void doUpdate() -> GRFv
    140:191:void sample() -> OHGK
    195:201:void sampleTotalCount() -> XtyR
    205:211:void sampleLivingCount() -> WjFh
    215:251:void sampleTileCount() -> Dann
    255:261:void sampleDropCount() -> vlNa
    265:271:void sampleChunkCount() -> UuAx
surge.text.PhantomSpinner -> org.cyberpwn.react.tmtn:
    surge.text.ProgressSpinner s -> bYwX
    surge.text.ProgressSpinner c -> OuDq
    15:19:void <init>(surge.util.C,surge.util.C,surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
surge.text.ProgressSpinner -> org.cyberpwn.react.jqYi:
    java.lang.String[] chars -> Melp
    int index -> index
    surge.text.ProgressSpinner DEFAULT -> hmKP
    surge.text.ProgressSpinner NETWORK -> Udrv
    surge.text.ProgressSpinner CIRCLES -> sAuU
    surge.text.ProgressSpinner RANDOMS -> RRxq
    surge.text.ProgressSpinner MERGERS -> vnBr
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> JksU
    65:65:int getIndex() -> getIndex
surge.util.Amounts -> org.cyberpwn.react.yuTw:
    surge.util.Amounts SINGLE -> MwPA
    surge.util.Amounts DUAL -> SDyL
    surge.util.Amounts TRI -> Bvnt
    surge.util.Amounts QUAD -> GRxT
    surge.util.Amounts HEX -> euAy
    surge.util.Amounts OCTA -> CWoR
    int a -> a
    surge.util.Amounts[] ENUM$VALUES -> nejM
    5:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:23:int a() -> a
    29:37:java.lang.String to(int) -> TVtc
    1:1:surge.util.Amounts[] values() -> values
    1:1:surge.util.Amounts valueOf(java.lang.String) -> valueOf
surge.util.Anchor -> org.cyberpwn.react.uyht:
    int value() -> value
surge.util.Area -> org.cyberpwn.react.WOnw:
    org.bukkit.Location location -> xACw
    java.lang.Double radius -> hcww
    27:27:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> kHre
    39:43:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    47:47:surge.server.Cuboid toCuboid() -> FyYg
    59:63:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    77:85:java.lang.Double distance(org.bukkit.Location) -> JHuE
    99:99:java.lang.Double slowDistance(org.bukkit.Location) -> hbNQ
    111:111:boolean isWithin(org.bukkit.Location) -> XuBI
    121:121:boolean hasEntities() -> hasEntities
    133:143:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> CoTn
    155:165:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> kHre
    178:207:org.bukkit.entity.Entity[] getNearbyEntities() -> Ukre
    218:228:org.bukkit.entity.Player[] getNearbyPlayers() -> QNeL
    238:238:org.bukkit.Location getLocation() -> getLocation
    249:250:void setLocation(org.bukkit.Location) -> HnCj
    259:259:java.lang.Double getRadius() -> gFTB
    270:271:void setRadius(java.lang.Double) -> PmIn
    280:285:org.bukkit.Location random() -> paoU
surge.util.Axis -> org.cyberpwn.react.tKqv:
    surge.util.Axis X -> EDbO
    surge.util.Axis Y -> vvRk
    surge.util.Axis Z -> MChf
    int x -> x
    int y -> y
    int z -> z
    surge.util.Axis[] ENUM$VALUES -> cTiV
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> JIpU
    29:29:org.bukkit.util.Vector negative() -> qBoQ
    1:1:surge.util.Axis[] values() -> values
    1:1:surge.util.Axis valueOf(java.lang.String) -> valueOf
surge.util.BlastResistance -> org.cyberpwn.react.paiV:
    surge.util.BlastResistance BARRIER -> JCPj
    surge.util.BlastResistance BEDROCK -> Ewfg
    surge.util.BlastResistance COMMAND -> nvjb
    surge.util.BlastResistance ENDER_PORTAL -> gYEY
    surge.util.BlastResistance ENDER_PORTAL_FRAME -> TQNl
    surge.util.BlastResistance ANVIL -> lyVX
    surge.util.BlastResistance ENCHANTMENT_TABLE -> XLXx
    surge.util.BlastResistance OBSIDIAN -> dhpY
    surge.util.BlastResistance ENDER_CHEST -> wphD
    surge.util.BlastResistance WATER -> EDdi
    surge.util.BlastResistance LAVA -> YqbV
    surge.util.BlastResistance STATIONARY_WATER -> EoYV
    surge.util.BlastResistance DRAGON_EGG -> YrBl
    surge.util.BlastResistance ENDER_STONE -> SxbK
    surge.util.BlastResistance COAL_BLOCK -> TjcY
    surge.util.BlastResistance DIAMOND_BLOCK -> eSBU
    surge.util.BlastResistance EMERALD_BLOCK -> KEuh
    surge.util.BlastResistance GOLD_BLOCK -> Cqce
    surge.util.BlastResistance IRON_BLOCK -> jQPJ
    surge.util.BlastResistance REDSTONE_BLOCK -> AsmJ
    surge.util.BlastResistance BRICK -> DSDg
    surge.util.BlastResistance BRICK_STAIRS -> MTmW
    surge.util.BlastResistance HARD_CLAY -> qVEB
    surge.util.BlastResistance STONE -> dGOC
    surge.util.BlastResistance SMOOTH_BRICK -> YGNu
    surge.util.BlastResistance SMOOTH_STAIRS -> PfhL
    surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> lErl
    surge.util.BlastResistance STONE_SLAB2 -> FjKG
    surge.util.BlastResistance IRON_DOOR -> uanw
    surge.util.BlastResistance IRON_DOOR_BLOCK -> mAFh
    surge.util.BlastResistance IRON_TRAPDOOR -> HyBW
    surge.util.BlastResistance MOB_SPAWNER -> QYID
    surge.util.BlastResistance WEB -> hRyG
    surge.util.BlastResistance DISPENSER -> cCiM
    surge.util.BlastResistance DROPPER -> urpm
    surge.util.BlastResistance FURNACE -> Ocby
    surge.util.BlastResistance BURNING_FURNACE -> yUIv
    surge.util.BlastResistance BEACON -> jQNg
    surge.util.BlastResistance COAL_ORE -> kTQk
    surge.util.BlastResistance COCOA -> rigQ
    surge.util.BlastResistance DIAMOND_ORE -> xIVH
    surge.util.BlastResistance EMERALD_ORE -> YyrB
    surge.util.BlastResistance FENCE -> YhpR
    surge.util.BlastResistance FENCE_GATE -> sRwa
    surge.util.BlastResistance ACACIA_FENCE_GATE -> jjaM
    surge.util.BlastResistance BIRCH_FENCE_GATE -> ULCf
    surge.util.BlastResistance DARK_OAK_FENCE_GATE -> lpgR
    surge.util.BlastResistance SPRUCE_FENCE_GATE -> vKdC
    surge.util.BlastResistance JUNGLE_FENCE_GATE -> pIrO
    surge.util.BlastResistance ACACIA_FENCE -> Filp
    surge.util.BlastResistance BIRCH_FENCE -> agyW
    surge.util.BlastResistance DARK_OAK_FENCE -> dGOs
    surge.util.BlastResistance SPRUCE_FENCE -> xtNE
    surge.util.BlastResistance JUNGLE_FENCE -> qVHB
    surge.util.BlastResistance ACACIA_WOOD_STAIRS -> NXRq
    surge.util.BlastResistance BIRCH_WOOD_STAIRS -> Yhrg
    surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> Tjdv
    surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> agyU
    surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> mbkX
    surge.util.BlastResistance QUARTZ_STAIRS -> RKNJ
    surge.util.BlastResistance COBBLESTONE_STAIRS -> TjfB
    surge.util.BlastResistance SANDSTONE_STAIRS -> DJUe
    surge.util.BlastResistance NETHER_BRICK_STAIRS -> VNiP
    surge.util.BlastResistance WOOD_STAIRS -> aNhP
    surge.util.BlastResistance RED_SANDSTONE_STAIRS -> uaqt
    surge.util.BlastResistance ACACIA_DOOR -> OJUY
    surge.util.BlastResistance BIRCH_DOOR -> whXr
    surge.util.BlastResistance DARK_OAK_DOOR -> nvpV
    surge.util.BlastResistance SPRUCE_DOOR -> HNOj
    surge.util.BlastResistance JUNGLE_DOOR -> EwjY
    surge.util.BlastResistance GOLD_ORE -> ixac
    surge.util.BlastResistance HOPPER -> aqKI
    surge.util.BlastResistance IRON_ORE -> Nhqw
    surge.util.BlastResistance LAPIS_BLOCK -> RJjr
    surge.util.BlastResistance LAPIS_ORE -> Enxv
    surge.util.BlastResistance QUARTZ_ORE -> yvoD
    surge.util.BlastResistance REDSTONE_ORE -> AboA
    surge.util.BlastResistance TRAP_DOOR -> JeXI
    surge.util.BlastResistance WOOD -> NiTJ
    surge.util.BlastResistance CHEST -> CrEj
    surge.util.BlastResistance TRAPPED_CHEST -> Uuwt
    surge.util.BlastResistance WORKBENCH -> bIYm
    surge.util.BlastResistance CAULDRON -> QHJP
    surge.util.BlastResistance LOG -> Dtgu
    surge.util.BlastResistance LOG_2 -> CrEu
    surge.util.BlastResistance BOOKSHELF -> PLvT
    surge.util.BlastResistance BANNER -> OdIX
    surge.util.BlastResistance STANDING_BANNER -> AcQM
    surge.util.BlastResistance WALL_BANNER -> COcr
    surge.util.BlastResistance JACK_O_LANTERN -> OchT
    surge.util.BlastResistance MELON_BLOCK -> DkyY
    surge.util.BlastResistance SKULL -> yCmS
    surge.util.BlastResistance PUMPKIN -> XfSE
    surge.util.BlastResistance SIGN -> PLyI
    surge.util.BlastResistance SIGN_POST -> EEJS
    surge.util.BlastResistance WALL_SIGN -> nwSd
    surge.util.BlastResistance QUARTZ_BLOCK -> cnbY
    surge.util.BlastResistance NOTE_BLOCK -> PUil
    surge.util.BlastResistance RED_SANDSTONE -> edGj
    surge.util.BlastResistance SANDSTONE -> ffjL
    surge.util.BlastResistance WOOL -> cwTA
    surge.util.BlastResistance MONSTER_EGG -> HVdL
    surge.util.BlastResistance RAILS -> ARNh
    surge.util.BlastResistance ACTIVATOR_RAIL -> EwnR
    surge.util.BlastResistance DETECTOR_RAIL -> iMpS
    surge.util.BlastResistance POWERED_RAIL -> kBuD
    surge.util.BlastResistance CLAY -> MoFA
    surge.util.BlastResistance DIRT -> lVyW
    surge.util.BlastResistance GRASS -> YrHF
    surge.util.BlastResistance GRAVEL -> HFDB
    surge.util.BlastResistance SPONGE -> oFpg
    surge.util.BlastResistance BREWING_STAND -> yoBD
    surge.util.BlastResistance STONE_BUTTON -> CGUP
    surge.util.BlastResistance WOOD_BUTTON -> rGiI
    surge.util.BlastResistance CAKE_BLOCK -> oqcx
    surge.util.BlastResistance ICE -> Hosr
    surge.util.BlastResistance PACKED_ICE -> vKeC
    surge.util.BlastResistance LEVER -> aplH
    surge.util.BlastResistance MYCEL -> VqNB
    surge.util.BlastResistance PISTON_BASE -> Kplq
    surge.util.BlastResistance PISTON_EXTENSION -> IbWI
    surge.util.BlastResistance PISTON_MOVING_PIECE -> HMps
    surge.util.BlastResistance PISTON_STICKY_BASE -> nClq
    surge.util.BlastResistance GOLD_PLATE -> VExK
    surge.util.BlastResistance IRON_PLATE -> Lsow
    surge.util.BlastResistance STONE_PLATE -> Abpb
    surge.util.BlastResistance WOOD_PLATE -> pSEF
    surge.util.BlastResistance SAND -> fDgF
    surge.util.BlastResistance SOUL_SAND -> SNRL
    surge.util.BlastResistance CACTUS -> eJUJ
    surge.util.BlastResistance LADDER -> CXUh
    surge.util.BlastResistance NETHERRACK -> UBvH
    surge.util.BlastResistance GLASS -> lNhQ
    surge.util.BlastResistance THIN_GLASS -> jkFP
    surge.util.BlastResistance STAINED_GLASS -> NXUJ
    surge.util.BlastResistance STAINED_GLASS_PANE -> UnKG
    surge.util.BlastResistance GLOWSTONE -> ShDg
    surge.util.BlastResistance REDSTONE_LAMP_OFF -> YiWq
    surge.util.BlastResistance REDSTONE_LAMP_ON -> XoEv
    surge.util.BlastResistance SEA_LANTERN -> cvuI
    surge.util.BlastResistance BED_BLOCK -> HNUW
    surge.util.BlastResistance DAYLIGHT_DETECTOR -> JmmT
    surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> RueP
    surge.util.BlastResistance HUGE_MUSHROOM_1 -> ukIR
    surge.util.BlastResistance HUGE_MUSHROOM_2 -> XetK
    surge.util.BlastResistance LEAVES -> WkbR
    surge.util.BlastResistance LEAVES_2 -> AlCj
    surge.util.BlastResistance SNOW -> FjQy
    int br -> hucr
    surge.util.BlastResistance[] ENUM$VALUES -> bbpQ
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> LjIn
    175:190:int get(org.bukkit.Material) -> AFkC
    1:1:surge.util.BlastResistance[] values() -> values
    1:1:surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
surge.util.BlockFinder -> org.cyberpwn.react.hQaR:
    10:10:void <init>() -> <init>
    14:22:boolean follow(org.bukkit.block.Block,react.glang.GList,react.glang.GList,int) -> kHre
    27:48:boolean tail(surge.server.Cuboid,org.bukkit.block.Block,react.glang.GList,react.glang.GList,int) -> kHre
surge.util.Blocks -> org.cyberpwn.react.ryQe:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> XuBI
surge.util.C -> org.cyberpwn.react.PuoR:
    surge.util.C BLACK -> MMCw
    surge.util.C DARK_BLUE -> nUQm
    surge.util.C DARK_GREEN -> BnfH
    surge.util.C DARK_AQUA -> eSIX
    surge.util.C DARK_RED -> JKjY
    surge.util.C DARK_PURPLE -> MfVM
    surge.util.C GOLD -> EgOb
    surge.util.C GRAY -> xspc
    surge.util.C DARK_GRAY -> VqQG
    surge.util.C BLUE -> Besu
    surge.util.C GREEN -> ReBo
    surge.util.C AQUA -> yCnb
    surge.util.C RED -> FjQS
    surge.util.C LIGHT_PURPLE -> LcQg
    surge.util.C YELLOW -> nwTc
    surge.util.C WHITE -> iFAd
    surge.util.C MAGIC -> lOJn
    surge.util.C BOLD -> NaHF
    surge.util.C STRIKETHROUGH -> apnT
    surge.util.C UNDERLINE -> TjiN
    surge.util.C ITALIC -> knJs
    surge.util.C RESET -> smRB
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> BDTo
    char code -> rjRQ
    boolean isFormat -> QsDd
    java.lang.String toString -> ukKG
    java.util.Map BY_ID -> hTDQ
    java.util.Map BY_CHAR -> hBab
    java.util.Map dyeChatMap -> LRRt
    java.util.Map chatHexMap -> QsDl
    java.util.Map dyeHexMap -> yLcE
    int[] $SWITCH_TABLE$surge$util$C -> BCsb
    surge.util.C[] ENUM$VALUES -> LARO
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> ylif
    378:378:java.lang.String hex() -> TWmx
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:surge.util.C getByChar(char) -> hbNQ
    434:442:surge.util.C getByChar(java.lang.String) -> pHCm
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:surge.util.C dyeToChat(org.bukkit.DyeColor) -> AFkC
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> kHre
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> AFkC
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> PmIn
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> TVtc
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> QooA
    560:578:java.lang.String generateColorTable() -> iKxp
    588:588:org.bukkit.ChatColor chatColor() -> eQNg
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:surge.util.C fromItemMeta(byte) -> hbNQ
    632:679:byte getItemMeta() -> aLre
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:surge.util.C[] values() -> values
    1:1:surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> qnCg
surge.util.C$1 -> org.cyberpwn.react.PuoR$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$10 -> org.cyberpwn.react.PuoR$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$11 -> org.cyberpwn.react.PuoR$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$12 -> org.cyberpwn.react.PuoR$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$13 -> org.cyberpwn.react.PuoR$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$14 -> org.cyberpwn.react.PuoR$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$15 -> org.cyberpwn.react.PuoR$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$16 -> org.cyberpwn.react.PuoR$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$17 -> org.cyberpwn.react.PuoR$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$18 -> org.cyberpwn.react.PuoR$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$19 -> org.cyberpwn.react.PuoR$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$2 -> org.cyberpwn.react.PuoR$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$20 -> org.cyberpwn.react.PuoR$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$21 -> org.cyberpwn.react.PuoR$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$22 -> org.cyberpwn.react.PuoR$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$3 -> org.cyberpwn.react.PuoR$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$4 -> org.cyberpwn.react.PuoR$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$5 -> org.cyberpwn.react.PuoR$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$6 -> org.cyberpwn.react.PuoR$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$7 -> org.cyberpwn.react.PuoR$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$8 -> org.cyberpwn.react.PuoR$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$9 -> org.cyberpwn.react.PuoR$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.CDou -> org.cyberpwn.react.tecy:
    double number -> WAQa
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:surge.util.CDou set(double) -> FEYN
    23:25:surge.util.CDou add(double) -> XuBA
    30:32:surge.util.CDou sub(double) -> IOCR
    37:37:double get() -> get
    42:48:void circ() -> hQgC
surge.util.CMD -> org.cyberpwn.react.XBRe:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> FXqt
    25:30:void <init>(java.lang.String) -> <init>
    39:40:surge.util.CMD virtual() -> fnDc
    51:53:void execute(org.bukkit.command.CommandSender) -> PmIn
    60:77:void execute() -> execute
surge.util.CNum -> org.cyberpwn.react.DbLf:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:surge.util.CNum set(int) -> QooA
    23:25:surge.util.CNum add(int) -> vHso
    30:32:surge.util.CNum sub(int) -> OHGK
    37:37:int get() -> get
    42:48:void circ() -> hQgC
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> pqvc
surge.util.Chunks -> org.cyberpwn.react.DrmY:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> rfxq
    33:40:react.glang.GList getLoadedChunks() -> GAHf
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> AFkC
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> kHre
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> kHre
    98:98:boolean unload(org.bukkit.Chunk) -> WWke
    114:124:int unload(react.glang.GList,boolean,boolean) -> kHre
    138:138:int unload(react.glang.GList,boolean) -> kHre
    150:150:int unload(react.glang.GList) -> CxFc
    166:166:boolean isLoaded(java.lang.String,int,int) -> kHre
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> PmIn
    201:205:void load(react.glang.GList) -> eaTr
surge.util.CuboidException -> org.cyberpwn.react.nSQt:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
surge.util.D -> org.cyberpwn.react.pXvw:
    react.glang.GList buffer -> etlv
    boolean dbg -> AJCB
    int kf -> AtUj
    react.glang.Callback scall -> NrLe
    13:16:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    20:24:void flush() -> flush
    28:39:void log(java.lang.String,java.lang.String) -> log
    43:56:void l(java.lang.Object,java.lang.String) -> AFkC
    60:66:void s(java.lang.Object,java.lang.String) -> PmIn
    70:81:void cdb() -> AXfv
    85:96:void v(java.lang.Object,java.lang.String) -> CoTn
    100:106:void w(java.lang.Object,java.lang.String) -> vsgG
    110:116:void f(java.lang.Object,java.lang.String) -> tBlW
    120:138:void l(java.lang.String) -> vHso
    142:154:void s(java.lang.String) -> OHGK
    158:177:void v(java.lang.String) -> pqvc
    181:193:void w(java.lang.String) -> aTim
    197:209:void f(java.lang.String) -> kbgY
surge.util.DMSRequire -> org.cyberpwn.react.INxR:
    surge.util.DMSRequirement value() -> PCQv
surge.util.DMSRequirement -> org.cyberpwn.react.YoiG:
    surge.util.DMSRequirement SQL -> PxRh
    surge.util.DMSRequirement[] ENUM$VALUES -> AbsW
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.DMSRequirement[] values() -> values
    1:1:surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
surge.util.Depend -> org.cyberpwn.react.hcAw:
    surge.util.Depend VAULT -> aycA
    surge.util.Depend FAWE -> FPbU
    surge.util.Depend WORLDEDIT -> hTDE
    surge.util.Depend PROTOLIB -> Khba
    surge.util.Depend CITIZENS -> gsCG
    java.lang.String name -> name
    surge.util.Depend[] ENUM$VALUES -> uryQ
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:surge.util.Depend[] values() -> values
    1:1:surge.util.Depend valueOf(java.lang.String) -> valueOf
surge.util.Dimension -> org.cyberpwn.react.Mldk:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:surge.util.DimensionFace getPane() -> bYHD
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
surge.util.DimensionFace -> org.cyberpwn.react.XtuF:
    surge.util.DimensionFace X -> YWwH
    surge.util.DimensionFace Y -> SVeb
    surge.util.DimensionFace Z -> iVdo
    surge.util.DimensionFace[] ENUM$VALUES -> ARSs
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.DimensionFace[] values() -> values
    1:1:surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
surge.util.Direction -> org.cyberpwn.react.ydRd:
    surge.util.Direction U -> FsDh
    surge.util.Direction D -> DIyf
    surge.util.Direction N -> EgQD
    surge.util.Direction S -> iouu
    surge.util.Direction E -> XUTu
    surge.util.Direction W -> eJXi
    int x -> x
    int y -> y
    int z -> z
    surge.server.Cuboid$CuboidDirection f -> GvHT
    int[] $SWITCH_TABLE$surge$util$Direction -> nCpe
    surge.util.Direction[] ENUM$VALUES -> eJYH
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,surge.server.Cuboid$CuboidDirection) -> <init>
    38:56:surge.util.Direction reverse() -> WrYG
    61:61:int x() -> AYJN
    66:66:int y() -> FhVw
    71:71:int z() -> z
    76:76:surge.server.Cuboid$CuboidDirection f() -> QqGh
    81:81:react.glang.GList news() -> YEYn
    86:86:react.glang.GList udnews() -> BJjX
    91:101:surge.util.Direction facing(org.bukkit.entity.Player) -> XuBA
    115:147:surge.util.Direction fromByte(byte) -> XuBI
    158:176:byte byteValue() -> byteValue
    1:1:surge.util.Direction[] values() -> values
    1:1:surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> mYFS
surge.util.DynamicConfiguration -> org.cyberpwn.react.CpIa:
surge.util.DynamicTracker -> org.cyberpwn.react.DYYj:
surge.util.Embedded -> org.cyberpwn.react.fSjD:
    react.glang.GList get() -> DjbJ
    void add(java.lang.Object) -> add
surge.util.FU -> org.cyberpwn.react.fBhR:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> kHre
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> AFkC
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> vsgG
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> tBlW
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
surge.util.Fingerprint -> org.cyberpwn.react.DbKW:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> inDI
surge.util.Health -> org.cyberpwn.react.pjXv:
    double hp -> RKVC
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> Orqd
    41:41:double getHearts() -> ytyI
    51:51:double getHalfHearts() -> NDys
    61:61:int getFlatHalfHearts() -> gqGE
surge.util.IO -> org.cyberpwn.react.wLjN:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
surge.util.Items -> org.cyberpwn.react.gFKl:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> kHre
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> kHre
    55:55:boolean is(org.bukkit.inventory.ItemStack,surge.util.MaterialBlock) -> kHre
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> kHre
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> kHre
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> AFkC
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> PmIn
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> CoTn
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> kHre
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> kHre
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> kHre
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> kHre
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> vsgG
    216:221:surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> tBlW
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> JHuE
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> hbNQ
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> XuBI
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> kHre
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> HnCj
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> jEor
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> kHre
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> kHre
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> AFkC
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> kHre
surge.util.MSound -> org.cyberpwn.react.fKYT:
    surge.util.MSound AMBIENCE_CAVE -> hvHn
    surge.util.MSound AMBIENCE_RAIN -> fpBm
    surge.util.MSound AMBIENCE_THUNDER -> CPJv
    surge.util.MSound ANVIL_BREAK -> iyKq
    surge.util.MSound ANVIL_LAND -> jYkU
    surge.util.MSound ANVIL_USE -> igjD
    surge.util.MSound ARROW_HIT -> cnha
    surge.util.MSound BURP -> Fiua
    surge.util.MSound CHEST_CLOSE -> xJBh
    surge.util.MSound CHEST_OPEN -> UKmn
    surge.util.MSound CLICK -> qoaH
    surge.util.MSound DOOR_CLOSE -> kKlS
    surge.util.MSound DOOR_OPEN -> uHiD
    surge.util.MSound DRINK -> SxmF
    surge.util.MSound EAT -> jkMT
    surge.util.MSound EXPLODE -> rQAq
    surge.util.MSound FALL_BIG -> wpqc
    surge.util.MSound FALL_SMALL -> nLdY
    surge.util.MSound FIRE -> EfqP
    surge.util.MSound FIRE_IGNITE -> hugK
    surge.util.MSound FIZZ -> Khbk
    surge.util.MSound FUSE -> aiCF
    surge.util.MSound GLASS -> Pwqx
    surge.util.MSound HURT_FLESH -> iEeb
    surge.util.MSound ITEM_BREAK -> cfVw
    surge.util.MSound ITEM_PICKUP -> FPbb
    surge.util.MSound LAVA -> SWHo
    surge.util.MSound LAVA_POP -> BDXI
    surge.util.MSound LEVEL_UP -> dXYH
    surge.util.MSound MINECART_BASE -> mJBa
    surge.util.MSound MINECART_INSIDE -> OtoT
    surge.util.MSound NOTE_BASS -> tMuV
    surge.util.MSound NOTE_PIANO -> WkfM
    surge.util.MSound NOTE_BASS_DRUM -> CrMq
    surge.util.MSound NOTE_STICKS -> XoIl
    surge.util.MSound NOTE_BASS_GUITAR -> yCqs
    surge.util.MSound NOTE_SNARE_DRUM -> FYSu
    surge.util.MSound NOTE_PLING -> ViDN
    surge.util.MSound ORB_PICKUP -> jjjn
    surge.util.MSound PISTON_EXTEND -> Lkey
    surge.util.MSound PISTON_RETRACT -> LcUq
    surge.util.MSound PORTAL -> xssX
    surge.util.MSound PORTAL_TRAVEL -> XMFa
    surge.util.MSound PORTAL_TRIGGER -> MTvl
    surge.util.MSound SHOOT_ARROW -> VXAq
    surge.util.MSound SPLASH -> JwCS
    surge.util.MSound SPLASH2 -> BTye
    surge.util.MSound STEP_GRASS -> HEiq
    surge.util.MSound STEP_GRAVEL -> fDnx
    surge.util.MSound STEP_LADDER -> RTHt
    surge.util.MSound STEP_SAND -> EpGE
    surge.util.MSound STEP_SNOW -> Wbvm
    surge.util.MSound STEP_STONE -> rbFO
    surge.util.MSound STEP_WOOD -> yeyB
    surge.util.MSound STEP_WOOL -> Dtro
    surge.util.MSound SWIM -> fEOq
    surge.util.MSound WATER -> yvys
    surge.util.MSound WOOD_CLICK -> wpsa
    surge.util.MSound BAT_DEATH -> fxUC
    surge.util.MSound BAT_HURT -> qDnb
    surge.util.MSound BAT_IDLE -> Tjom
    surge.util.MSound BAT_LOOP -> sSfG
    surge.util.MSound BAT_TAKEOFF -> dqnY
    surge.util.MSound BLAZE_BREATH -> QHTy
    surge.util.MSound BLAZE_DEATH -> DdRk
    surge.util.MSound BLAZE_HIT -> gaeY
    surge.util.MSound CAT_HISS -> MTyl
    surge.util.MSound CAT_HIT -> NrOO
    surge.util.MSound CAT_MEOW -> qwsD
    surge.util.MSound CAT_PURR -> lqUA
    surge.util.MSound CAT_PURREOW -> IIMN
    surge.util.MSound CHICKEN_IDLE -> TIKx
    surge.util.MSound CHICKEN_HURT -> kmqD
    surge.util.MSound CHICKEN_EGG_POP -> rsGA
    surge.util.MSound CHICKEN_WALK -> Vpta
    surge.util.MSound COW_IDLE -> qobI
    surge.util.MSound COW_HURT -> gXsC
    surge.util.MSound COW_WALK -> Jvcg
    surge.util.MSound CREEPER_HISS -> aXCj
    surge.util.MSound CREEPER_DEATH -> mlGM
    surge.util.MSound ENDERDRAGON_DEATH -> ayfI
    surge.util.MSound ENDERDRAGON_GROWL -> yevx
    surge.util.MSound ENDERDRAGON_HIT -> eBLe
    surge.util.MSound ENDERDRAGON_WINGS -> MDXY
    surge.util.MSound ENDERMAN_DEATH -> CaNr
    surge.util.MSound ENDERMAN_HIT -> CPNC
    surge.util.MSound ENDERMAN_IDLE -> oFxM
    surge.util.MSound ENDERMAN_TELEPORT -> PDsD
    surge.util.MSound ENDERMAN_SCREAM -> MMKo
    surge.util.MSound ENDERMAN_STARE -> rbHN
    surge.util.MSound GHAST_SCREAM -> svMH
    surge.util.MSound GHAST_SCREAM2 -> EpII
    surge.util.MSound GHAST_CHARGE -> hShy
    surge.util.MSound GHAST_DEATH -> SyQU
    surge.util.MSound GHAST_FIREBALL -> nMKI
    surge.util.MSound GHAST_MOAN -> AJIN
    surge.util.MSound IRONGOLEM_DEATH -> TIPR
    surge.util.MSound IRONGOLEM_HIT -> Iscj
    surge.util.MSound IRONGOLEM_THROW -> GTLQ
    surge.util.MSound IRONGOLEM_WALK -> UfFP
    surge.util.MSound MAGMACUBE_WALK -> KpyJ
    surge.util.MSound MAGMACUBE_WALK2 -> RBhv
    surge.util.MSound MAGMACUBE_JUMP -> wFbb
    surge.util.MSound PIG_IDLE -> FPhY
    surge.util.MSound PIG_DEATH -> qNCT
    surge.util.MSound PIG_WALK -> TYqE
    surge.util.MSound SHEEP_IDLE -> pdQg
    surge.util.MSound SHEEP_SHEAR -> ujpC
    surge.util.MSound SHEEP_WALK -> kwDj
    surge.util.MSound SILVERFISH_HIT -> LbyD
    surge.util.MSound SILVERFISH_KILL -> vfCD
    surge.util.MSound SILVERFISH_IDLE -> sCFi
    surge.util.MSound SILVERFISH_WALK -> rivQ
    surge.util.MSound SKELETON_IDLE -> HhNx
    surge.util.MSound SKELETON_DEATH -> aFcB
    surge.util.MSound SKELETON_HURT -> mQvJ
    surge.util.MSound SKELETON_WALK -> xtXs
    surge.util.MSound SLIME_ATTACK -> kLPR
    surge.util.MSound SLIME_WALK -> FGuf
    surge.util.MSound SLIME_WALK2 -> JfEY
    surge.util.MSound SPIDER_IDLE -> bcXt
    surge.util.MSound SPIDER_DEATH -> VpwY
    surge.util.MSound SPIDER_WALK -> CrQv
    surge.util.MSound WITHER_DEATH -> VqWx
    surge.util.MSound WITHER_HURT -> puRO
    surge.util.MSound WITHER_IDLE -> bQva
    surge.util.MSound WITHER_SHOOT -> GSiw
    surge.util.MSound WITHER_SPAWN -> UwFX
    surge.util.MSound WOLF_BARK -> qMaO
    surge.util.MSound WOLF_DEATH -> kUAe
    surge.util.MSound WOLF_GROWL -> IHnl
    surge.util.MSound WOLF_HOWL -> QGxF
    surge.util.MSound WOLF_HURT -> puVF
    surge.util.MSound WOLF_PANT -> SqCH
    surge.util.MSound WOLF_SHAKE -> VWhT
    surge.util.MSound WOLF_WALK -> ayjY
    surge.util.MSound WOLF_WHINE -> THpg
    surge.util.MSound ZOMBIE_METAL -> vedo
    surge.util.MSound ZOMBIE_WOOD -> Sgpq
    surge.util.MSound ZOMBIE_WOODBREAK -> lNts
    surge.util.MSound ZOMBIE_IDLE -> emFY
    surge.util.MSound ZOMBIE_DEATH -> txom
    surge.util.MSound ZOMBIE_HURT -> IYry
    surge.util.MSound ZOMBIE_INFECT -> TkUO
    surge.util.MSound ZOMBIE_UNFECT -> gaiV
    surge.util.MSound ZOMBIE_REMEDY -> FGyS
    surge.util.MSound ZOMBIE_WALK -> NOqJ
    surge.util.MSound ZOMBIE_PIG_IDLE -> dqqu
    surge.util.MSound ZOMBIE_PIG_ANGRY -> MLmi
    surge.util.MSound ZOMBIE_PIG_DEATH -> LlLl
    surge.util.MSound ZOMBIE_PIG_HURT -> wFdG
    surge.util.MSound DIG_WOOL -> ReNI
    surge.util.MSound DIG_GRASS -> BVAB
    surge.util.MSound DIG_GRAVEL -> hdlJ
    surge.util.MSound DIG_SAND -> Hgoy
    surge.util.MSound DIG_SNOW -> mQwq
    surge.util.MSound DIG_STONE -> rbIQ
    surge.util.MSound DIG_WOOD -> euUG
    surge.util.MSound FIREWORK_BLAST -> SgpE
    surge.util.MSound FIREWORK_BLAST2 -> ptsS
    surge.util.MSound FIREWORK_LARGE_BLAST -> mJGm
    surge.util.MSound FIREWORK_LARGE_BLAST2 -> SpaY
    surge.util.MSound FIREWORK_TWINKLE -> JfGb
    surge.util.MSound FIREWORK_TWINKLE2 -> pmCi
    surge.util.MSound FIREWORK_LAUNCH -> DJcT
    surge.util.MSound SUCCESSFUL_HIT -> bbyk
    surge.util.MSound HORSE_ANGRY -> XoOl
    surge.util.MSound HORSE_ARMOR -> JCdJ
    surge.util.MSound HORSE_BREATHE -> qpFr
    surge.util.MSound HORSE_DEATH -> didM
    surge.util.MSound HORSE_GALLOP -> NPSV
    surge.util.MSound HORSE_HIT -> foir
    surge.util.MSound HORSE_IDLE -> hBke
    surge.util.MSound HORSE_JUMP -> DmJH
    surge.util.MSound HORSE_LAND -> HNbJ
    surge.util.MSound HORSE_SADDLE -> tqCJ
    surge.util.MSound HORSE_SOFT -> LtaI
    surge.util.MSound HORSE_WOOD -> aWin
    surge.util.MSound DONKEY_ANGRY -> Gdpn
    surge.util.MSound DONKEY_DEATH -> CGbB
    surge.util.MSound DONKEY_HIT -> Isgv
    surge.util.MSound DONKEY_IDLE -> oaSP
    surge.util.MSound HORSE_SKELETON_DEATH -> TtHb
    surge.util.MSound HORSE_SKELETON_HIT -> QPlE
    surge.util.MSound HORSE_SKELETON_IDLE -> MwdU
    surge.util.MSound HORSE_ZOMBIE_DEATH -> JDEk
    surge.util.MSound HORSE_ZOMBIE_HIT -> bIip
    surge.util.MSound HORSE_ZOMBIE_IDLE -> DKEb
    surge.util.MSound VILLAGER_DEATH -> Eoje
    surge.util.MSound VILLAGER_HAGGLE -> YjDS
    surge.util.MSound VILLAGER_HIT -> vefR
    surge.util.MSound VILLAGER_IDLE -> IYsu
    surge.util.MSound VILLAGER_NO -> cxBi
    surge.util.MSound VILLAGER_YES -> DBUc
    java.lang.String pre19sound -> HqER
    java.lang.String post19sound -> orSR
    org.bukkit.Sound resolvedSound -> RBlL
    surge.util.MSound[] ENUM$VALUES -> AkpN
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> LXft
    1:1:surge.util.MSound[] values() -> values
    1:1:surge.util.MSound valueOf(java.lang.String) -> valueOf
surge.util.MaterialBlock -> org.cyberpwn.react.CNHL:
    org.bukkit.Material material -> rQIV
    java.lang.Byte data -> xRYm
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> uiNF
    79:80:void setData(java.lang.Byte) -> kHre
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
surge.util.P -> org.cyberpwn.react.Nfvt:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> uOBu
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> ekAM
    68:68:boolean isAnyOnline() -> KnvP
    80:80:react.glang.GList inWorld(org.bukkit.World) -> eaUO
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> CxFc
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> kHre
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> kHre
    143:144:void disable(org.bukkit.entity.Player) -> IOCR
    154:155:void enable(org.bukkit.entity.Player) -> IqEw
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> kHre
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> AFkC
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> WFhj
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> kHre
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> Jsgx
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> PmIn
    300:300:boolean canFindPlayer(java.lang.String) -> FyBI
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> wfIq
    338:345:react.glang.GList onlinePlayers() -> lLtF
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> lUFh
    368:371:void clear(org.bukkit.entity.Player) -> lUGI
    381:385:void clearEffects(org.bukkit.entity.Player) -> KCgM
    398:399:void heal(org.bukkit.entity.Player,double) -> kHre
    409:410:void heal(org.bukkit.entity.Player) -> BJOI
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> kHuH
    432:433:void resetHunger(org.bukkit.entity.Player) -> KelS
    443:444:void kill(org.bukkit.entity.Player) -> eOtV
    455:455:surge.util.Shape getShape(org.bukkit.entity.Player) -> NDak
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> eOss
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> kHre
surge.util.P$1 -> org.cyberpwn.react.Nfvt$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> HnCj
    1:1:java.lang.Object onAdapt(java.lang.Object) -> JHuE
surge.util.P$2 -> org.cyberpwn.react.Nfvt$2:
    java.lang.Double val$doff -> mlMW
    org.bukkit.entity.Player val$e -> PVXq
    org.bukkit.entity.Entity[] val$result -> Jviu
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> jEor
surge.util.PE -> org.cyberpwn.react.iLQr:
    surge.util.PE ABSORPTION -> GmaU
    surge.util.PE BLINDNESS -> fMer
    surge.util.PE CONFUSION -> utEP
    surge.util.PE DAMAGE_RESISTANCE -> vwHR
    surge.util.PE FAST_DIGGING -> hunp
    surge.util.PE FIRE_RESISTANCE -> kwKr
    surge.util.PE GLOWING -> CPUf
    surge.util.PE HARM -> AuCk
    surge.util.PE HEAL -> ipdt
    surge.util.PE HEALTH_BOOST -> yoRl
    surge.util.PE HUNGER -> emJH
    surge.util.PE INCREASE_DAMAGE -> WdAY
    surge.util.PE INVISIBILITY -> tyUk
    surge.util.PE JUMP -> ASAB
    surge.util.PE LEVITATION -> TtIr
    surge.util.PE LUCK -> qMgq
    surge.util.PE NIGHT_VISION -> wWin
    surge.util.PE POISON -> LuDQ
    surge.util.PE REGENERATION -> MVDL
    surge.util.PE SATURATION -> rsOQ
    surge.util.PE SLOW -> iEoy
    surge.util.PE SLOW_DIGGING -> AuCV
    surge.util.PE SPEED -> nxED
    surge.util.PE UNLUCK -> Uvla
    surge.util.PE WATER_BREATHING -> kKwE
    surge.util.PE WEAKNESS -> lGJA
    surge.util.PE WITHER -> Spdn
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> kHre
    144:144:surge.util.PE d(int) -> aTim
    156:156:surge.util.PE a(int) -> kbgY
    166:166:org.bukkit.potion.PotionEffect c() -> PCSd
    177:178:void c(org.bukkit.entity.LivingEntity) -> tBlW
    182:183:void crm(org.bukkit.entity.LivingEntity) -> JHuE
    187:188:void rm(org.bukkit.entity.LivingEntity) -> hbNQ
surge.util.ParticleEffect -> org.cyberpwn.react.WrSU:
    surge.util.ParticleEffect EXPLOSION_NORMAL -> lylq
    surge.util.ParticleEffect EXPLOSION_LARGE -> hBlc
    surge.util.ParticleEffect EXPLOSION_HUGE -> Hgst
    surge.util.ParticleEffect FIREWORKS_SPARK -> svQb
    surge.util.ParticleEffect WATER_BUBBLE -> HNcD
    surge.util.ParticleEffect WATER_SPLASH -> CYHH
    surge.util.ParticleEffect WATER_WAKE -> Acau
    surge.util.ParticleEffect SUSPENDED -> AtdD
    surge.util.ParticleEffect SUSPENDED_DEPTH -> OliU
    surge.util.ParticleEffect CRIT -> cwcO
    surge.util.ParticleEffect CRIT_MAGIC -> IRGK
    surge.util.ParticleEffect SMOKE_NORMAL -> BoUx
    surge.util.ParticleEffect SMOKE_LARGE -> MUbO
    surge.util.ParticleEffect SPELL -> GBoI
    surge.util.ParticleEffect SPELL_INSTANT -> COuS
    surge.util.ParticleEffect SPELL_MOB -> yoQh
    surge.util.ParticleEffect SPELL_MOB_AMBIENT -> UDHJ
    surge.util.ParticleEffect SPELL_WITCH -> ptvt
    surge.util.ParticleEffect DRIP_WATER -> whiy
    surge.util.ParticleEffect DRIP_LAVA -> KGLK
    surge.util.ParticleEffect VILLAGER_ANGRY -> YjGH
    surge.util.ParticleEffect VILLAGER_HAPPY -> mlNw
    surge.util.ParticleEffect TOWN_AURA -> CPVM
    surge.util.ParticleEffect NOTE -> xIkE
    surge.util.ParticleEffect PORTAL -> nfaX
    surge.util.ParticleEffect ENCHANTMENT_TABLE -> sSlw
    surge.util.ParticleEffect FLAME -> Ibgk
    surge.util.ParticleEffect LAVA -> XnvI
    surge.util.ParticleEffect FOOTSTEP -> Mwgb
    surge.util.ParticleEffect CLOUD -> BfgA
    surge.util.ParticleEffect REDSTONE -> suse
    surge.util.ParticleEffect SNOWBALL -> kLYj
    surge.util.ParticleEffect SNOW_SHOVEL -> MoWU
    surge.util.ParticleEffect SLIME -> UUKk
    surge.util.ParticleEffect HEART -> YYHV
    surge.util.ParticleEffect BARRIER -> yEAe
    surge.util.ParticleEffect ITEM_CRACK -> SEso
    surge.util.ParticleEffect BLOCK_CRACK -> JwOl
    surge.util.ParticleEffect BLOCK_DUST -> vejy
    surge.util.ParticleEffect WATER_DROP -> RLBt
    surge.util.ParticleEffect ITEM_TAKE -> CaYP
    surge.util.ParticleEffect MOB_APPEARANCE -> EopP
    surge.util.ParticleEffect DRAGON_BREATH -> hCQQ
    surge.util.ParticleEffect END_ROD -> ViQD
    surge.util.ParticleEffect DAMAGE_INDICATOR -> RSrY
    surge.util.ParticleEffect SWEEP_ATTACK -> mInn
    java.util.Map NAME_MAP -> FQQT
    java.util.Map ID_MAP -> QQQG
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> sCPE
    java.util.List properties -> tNcN
    surge.util.ParticleEffect[] ENUM$VALUES -> MwhS
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> papu
    511:511:boolean hasProperty(surge.util.ParticleEffect$ParticleProperty) -> kHre
    521:525:boolean isSupported() -> isSupported
    537:545:surge.util.ParticleEffect fromName(java.lang.String) -> qRvI
    557:565:surge.util.ParticleEffect fromId(int) -> inDI
    577:578:boolean isWater(org.bukkit.Location) -> xylS
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> kHre
    615:615:boolean isDataCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleData) -> kHre
    629:629:boolean isColorCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor) -> kHre
    665:681:void display(float,int,org.bukkit.Location,double) -> kHre
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> kHre
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> kHre
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> kHre
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> kHre
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> kHre
    899:912:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> kHre
    934:947:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> kHre
    968:969:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> kHre
    1004:1020:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> kHre
    1055:1068:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> kHre
    1102:1103:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> kHre
    1130:1143:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> kHre
    1169:1182:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> kHre
    1207:1208:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> kHre
    1:1:surge.util.ParticleEffect[] values() -> values
    1:1:surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
surge.util.ParticleEffect$BlockData -> org.cyberpwn.react.WrSU$kHre:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$ItemData -> org.cyberpwn.react.WrSU$AFkC:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$NoteColor -> org.cyberpwn.react.WrSU$PmIn:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> iDKc
    1594:1594:float getValueY() -> RtMn
    1605:1605:float getValueZ() -> Yxap
surge.util.ParticleEffect$OrdinaryColor -> org.cyberpwn.react.WrSU$CoTn:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> iDKc
    1526:1526:float getValueY() -> RtMn
    1537:1537:float getValueZ() -> Yxap
surge.util.ParticleEffect$ParticleColor -> org.cyberpwn.react.WrSU$vsgG:
    1383:1383:void <init>() -> <init>
    float getValueX() -> iDKc
    float getValueY() -> RtMn
    float getValueZ() -> Yxap
surge.util.ParticleEffect$ParticleColorException -> org.cyberpwn.react.WrSU$tBlW:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticleData -> org.cyberpwn.react.WrSU$JHuE:
    org.bukkit.Material material -> rQIV
    byte data -> data
    int[] packetData -> pljT
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> xGeg
    1309:1309:java.lang.String getPacketDataString() -> cJih
surge.util.ParticleEffect$ParticleDataException -> org.cyberpwn.react.WrSU$hbNQ:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticlePacket -> org.cyberpwn.react.WrSU$XuBI:
    int version -> version
    java.lang.Class enumParticle -> daWw
    java.lang.reflect.Constructor packetConstructor -> XECt
    java.lang.reflect.Method getHandle -> KqbP
    java.lang.reflect.Field playerConnection -> bcaw
    java.lang.reflect.Method sendPacket -> RSsQ
    boolean initialized -> initialized
    surge.util.ParticleEffect effect -> ubhH
    float offsetX -> SOFb
    float offsetY -> lWlm
    float offsetZ -> JLYy
    float speed -> eliq
    int amount -> jPOR
    boolean longDistance -> OAvh
    surge.util.ParticleEffect$ParticleData data -> sdpt
    java.lang.Object packet -> eJgM
    1745:1764:void <init>(surge.util.ParticleEffect,float,float,float,float,int,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> avjr
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> kHre
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> AFkC
    2004:2018:void sendTo(org.bukkit.Location,double) -> AFkC
surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> org.cyberpwn.react.WrSU$XuBI$kHre:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> org.cyberpwn.react.WrSU$XuBI$AFkC:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> org.cyberpwn.react.WrSU$XuBI$PmIn:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticleProperty -> org.cyberpwn.react.WrSU$HnCj:
    surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> cUbY
    surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> AJRb
    surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> wynk
    surge.util.ParticleEffect$ParticleProperty COLORABLE -> KiQB
    surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> KXNo
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
surge.util.ParticleEffect$ParticleVersionException -> org.cyberpwn.react.WrSU$jEor:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
surge.util.Paste -> org.cyberpwn.react.RRBT:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> KTjC
surge.util.Persist -> org.cyberpwn.react.gElA:
surge.util.Platform -> org.cyberpwn.react.Lqrf:
    boolean ENABLE -> fpOD
    double PROC_CPU -> Mwfg
    11:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    253:258:java.lang.String getVersion() -> getVersion
    263:268:java.lang.String getName() -> getName
    273:273:com.sun.management.OperatingSystemMXBean getSystem() -> aDcg
    271:271:com.sun.management.OperatingSystemMXBean access$0() -> PnGu
surge.util.Platform$CPU -> org.cyberpwn.react.Lqrf$kHre:
    198:198:void <init>() -> <init>
    202:207:int getAvailableProcessors() -> getAvailableProcessors
    212:217:double getCPULoad() -> bjJg
    222:227:double getProcessCPULoad() -> NyCf
    232:237:double getLiveProcessCPULoad() -> QOHR
    242:247:java.lang.String getArchitecture() -> MloD
surge.util.Platform$ENVIRONMENT -> org.cyberpwn.react.Lqrf$AFkC:
    14:14:void <init>() -> <init>
    18:18:boolean canRunBatch() -> fduS
    23:28:java.lang.String getJavaHome() -> IiTE
    33:38:java.lang.String getJavaVendor() -> tvmk
    43:48:java.lang.String getJavaVersion() -> sIXD
surge.util.Platform$MEMORY -> org.cyberpwn.react.Lqrf$PmIn:
    119:119:void <init>() -> <init>
surge.util.Platform$MEMORY$PHYSICAL -> org.cyberpwn.react.Lqrf$PmIn$kHre:
    121:121:void <init>() -> <init>
    125:130:long getTotalMemory() -> rhXN
    135:140:long getFreeMemory() -> jWoJ
    145:150:long getUsedMemory() -> ETWE
surge.util.Platform$MEMORY$VIRTUAL -> org.cyberpwn.react.Lqrf$PmIn$AFkC:
    154:154:void <init>() -> <init>
    158:163:long getTotalMemory() -> rhXN
    168:173:long getFreeMemory() -> jWoJ
    178:183:long getUsedMemory() -> ETWE
    188:193:long getCommittedVirtualMemory() -> mXhI
surge.util.Platform$STORAGE -> org.cyberpwn.react.Lqrf$CoTn:
    52:52:void <init>() -> <init>
    56:63:long getAbsoluteTotalSpace() -> KoYq
    68:68:long getTotalSpace() -> getTotalSpace
    73:73:long getTotalSpace(java.io.File) -> JHuE
    78:85:long getAbsoluteFreeSpace() -> OarF
    90:90:long getFreeSpace() -> getFreeSpace
    95:95:long getFreeSpace(java.io.File) -> hbNQ
    100:100:long getUsedSpace() -> qvUa
    105:105:long getUsedSpace(java.io.File) -> XuBI
    110:110:long getAbsoluteUsedSpace() -> tDIi
    115:115:java.io.File[] getRoots() -> getRoots
surge.util.PluginUtil -> org.cyberpwn.react.nBSP:
    62:62:void <init>() -> <init>
    73:75:void enable(org.bukkit.plugin.Plugin) -> vsgG
    79:89:void enable(java.lang.String) -> IyXI
    96:100:void enableAll() -> gpgs
    110:114:void disable(org.bukkit.plugin.Plugin) -> tBlW
    121:125:void disableAll() -> GAHr
    136:136:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> JHuE
    150:157:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> kHre
    169:174:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> SSot
    184:187:java.util.List getPluginNames(boolean) -> HBnj
    199:202:java.lang.String getPluginVersion(java.lang.String) -> JYwM
    215:237:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> hbNQ
    252:331:java.util.List findByCommand(java.lang.String) -> PRwd
    352:353:void load(org.bukkit.plugin.Plugin) -> XuBI
    357:379:java.lang.String getPluginFileName(java.lang.String) -> WXLm
    384:406:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> kHre
    419:471:void load(java.lang.String) -> load
    482:487:void reload(org.bukkit.plugin.Plugin) -> HnCj
    494:498:void reloadAll() -> vkqm
    510:636:void unload(org.bukkit.plugin.Plugin) -> jEor
    642:764:void unloadForce(org.bukkit.plugin.Plugin) -> xylS
    769:771:void reloadSoft(surge.control.AmpedPlugin) -> PmIn
surge.util.PoolCount -> org.cyberpwn.react.tmvr:
surge.util.PoolDescriber -> org.cyberpwn.react.YVYK:
surge.util.PoolNanoThrottle -> org.cyberpwn.react.oDts:
surge.util.PositionalSelector -> org.cyberpwn.react.qupK:
    react.glang.GSet allowedChunks -> Tbhq
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> iULV
    39:40:void addChunk(org.bukkit.Chunk) -> eaTr
    44:44:react.glang.GSet getAllowedChunks() -> dMlJ
surge.util.Protocol -> org.cyberpwn.react.fBjo:
    surge.util.Protocol LATEST -> tqEo
    surge.util.Protocol R1_12_2 -> JCjA
    surge.util.Protocol R1_12_2_PRE -> JDJg
    surge.util.Protocol R1_12_1 -> XgEr
    surge.util.Protocol R1_12 -> pAuI
    surge.util.Protocol R1_11_2 -> IcKE
    surge.util.Protocol R1_11_1 -> NPVg
    surge.util.Protocol R1_11 -> vfJg
    surge.util.Protocol R1_10_2 -> mtai
    surge.util.Protocol R1_10_1 -> QPng
    surge.util.Protocol R1_10 -> hBnb
    surge.util.Protocol R1_9_4 -> Rdry
    surge.util.Protocol R1_9_3 -> NPWP
    surge.util.Protocol R1_9_2 -> MUdW
    surge.util.Protocol R1_9_1 -> XMUi
    surge.util.Protocol R1_9 -> hmfR
    surge.util.Protocol R1_8_9 -> dXiA
    surge.util.Protocol R1_8_8 -> vvoA
    surge.util.Protocol R1_8_7 -> BMWF
    surge.util.Protocol R1_8_6 -> wrAw
    surge.util.Protocol R1_8_5 -> tFTu
    surge.util.Protocol R1_8_4 -> DAyt
    surge.util.Protocol R1_8_3 -> pBYa
    surge.util.Protocol R1_8_2 -> cDdE
    surge.util.Protocol R1_8_1 -> UTlv
    surge.util.Protocol R1_8 -> kTmB
    surge.util.Protocol R1_7_10 -> DKLu
    surge.util.Protocol R1_7_9 -> LSEP
    surge.util.Protocol R1_7_8 -> dGgc
    surge.util.Protocol R1_7_7 -> bIrI
    surge.util.Protocol R1_7_6 -> LtgV
    surge.util.Protocol R1_7_5 -> xcbc
    surge.util.Protocol R1_7_4 -> jYyV
    surge.util.Protocol R1_7_3 -> uRIT
    surge.util.Protocol R1_7_2 -> kelm
    surge.util.Protocol R1_7_1 -> Bnyb
    surge.util.Protocol B1_6_4 -> yLrQ
    surge.util.Protocol B1_6_3 -> cnuo
    surge.util.Protocol B1_6_2 -> Ollx
    surge.util.Protocol B1_6_1 -> ENOS
    surge.util.Protocol B1_5_2 -> BUge
    surge.util.Protocol B1_5_1 -> IQjU
    surge.util.Protocol B1_5 -> Islx
    surge.util.Protocol B1_4_7 -> PMnA
    surge.util.Protocol B1_4_6 -> VXPk
    surge.util.Protocol B1_4_5 -> BMVt
    surge.util.Protocol B1_4_4 -> qDyn
    surge.util.Protocol B1_4_2 -> QjdF
    surge.util.Protocol B1_3_2 -> NjLK
    surge.util.Protocol B1_3_1 -> VqeU
    surge.util.Protocol B1_2_5 -> CYLl
    surge.util.Protocol B1_2_4 -> oOxp
    surge.util.Protocol EARLIEST -> Frvt
    surge.util.Protocol UNKNOWN -> FPsy
    int version -> version
    java.lang.String packageVersion -> dVxF
    java.lang.String versionName -> ygHd
    boolean netty -> Bwkb
    surge.util.Protocol[] ENUM$VALUES -> BMWu
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> Euvq
    118:118:java.lang.String getPackageVersion() -> ssTV
    124:124:java.lang.String toString() -> toString
    129:137:surge.util.Protocol getSupportedNMSVersion() -> OQQf
    142:150:surge.util.Protocol getProtocolVersion() -> XAxi
    155:155:surge.util.ProtocolRange to(surge.util.Protocol) -> AFkC
    160:160:boolean isServerVersion() -> Gslq
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> bOwC
    175:175:boolean isActualVersion() -> FgyO
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> EvYB
    200:200:int getMetaVersion() -> woVJ
    1:1:surge.util.Protocol[] values() -> values
    1:1:surge.util.Protocol valueOf(java.lang.String) -> valueOf
surge.util.ProtocolRange -> org.cyberpwn.react.PvRU:
    surge.util.Protocol from -> pKLS
    surge.util.Protocol to -> rQRb
    8:12:void <init>(surge.util.Protocol,surge.util.Protocol) -> <init>
    16:16:surge.util.Protocol getFrom() -> qBom
    21:21:surge.util.Protocol getTo() -> IFno
    26:26:boolean contains(surge.util.Protocol) -> PmIn
    32:32:java.lang.String toString() -> toString
surge.util.Query -> org.cyberpwn.react.tnXE:
    org.bukkit.entity.Player p -> AGdL
    17:21:void <init>(org.bukkit.entity.Player) -> <init>
    25:26:void close() -> close
    void onMessage(java.lang.String) -> HnCj
    33:37:void on(org.bukkit.event.player.PlayerQuitEvent) -> kHre
    42:46:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> kHre
    51:65:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> kHre
surge.util.Query$1 -> org.cyberpwn.react.tnXE$1:
    surge.util.Query this$0 -> AlWn
    org.bukkit.event.player.AsyncPlayerChatEvent val$e -> emPY
    1:53:void <init>(surge.util.Query,org.bukkit.event.player.AsyncPlayerChatEvent) -> <init>
    58:60:void run() -> run
surge.util.Range -> org.cyberpwn.react.rEnA:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> xaWS
    70:70:int randomNextInt() -> aMSy
    80:80:long randomNextLong() -> JAcn
    92:92:boolean isWithin(double) -> IqEw
    104:104:boolean isWithin(int) -> uOBu
    116:116:boolean isWithin(long) -> NgBu
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> WFhj
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> HBnj
surge.util.RawEvent -> org.cyberpwn.react.bPRc:
surge.util.RayTrace -> org.cyberpwn.react.JJMa:
    org.bukkit.Location start -> HpnC
    org.bukkit.util.Vector direction -> arEB
    java.lang.Double maxDistance -> mJRk
    java.lang.Double distanceCovered -> CXmQ
    java.lang.Double step -> xuGI
    java.lang.Boolean stop -> bBCG
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> DjgA
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> jEor
    89:89:org.bukkit.Location getStart() -> IWrg
    94:95:void setStart(org.bukkit.Location) -> UtIc
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> tvqD
    114:115:void setMaxDistance(java.lang.Double) -> CoTn
    119:119:java.lang.Double getDistanceCovered() -> Vwjv
    124:125:void setDistanceCovered(java.lang.Double) -> vsgG
    129:129:java.lang.Double getStep() -> qBsT
    134:135:void setStep(java.lang.Double) -> tBlW
surge.util.ReflectionUtils -> org.cyberpwn.react.dDum:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> kHre
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> kHre
    156:156:java.lang.Object instantiateObject(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> kHre
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> kHre
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> kHre
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> kHre
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> kHre
    359:359:java.lang.reflect.Field getField(java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> kHre
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> kHre
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> kHre
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> kHre
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> kHre
    508:509:void setValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> kHre
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> kHre
surge.util.ReflectionUtils$DataType -> org.cyberpwn.react.dDum$kHre:
    surge.util.ReflectionUtils$DataType BYTE -> hTVC
    surge.util.ReflectionUtils$DataType SHORT -> iWYE
    surge.util.ReflectionUtils$DataType INTEGER -> dHIE
    surge.util.ReflectionUtils$DataType LONG -> Gdwj
    surge.util.ReflectionUtils$DataType CHARACTER -> mIpw
    surge.util.ReflectionUtils$DataType FLOAT -> LuIV
    surge.util.ReflectionUtils$DataType DOUBLE -> UUOc
    surge.util.ReflectionUtils$DataType BOOLEAN -> Bfjo
    java.util.Map CLASS_MAP -> FjfX
    java.lang.Class primitive -> UvrP
    java.lang.Class reference -> gIBV
    surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> FsWg
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> Iyuj
    704:704:java.lang.Class getReference() -> GspN
    716:716:surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> AFkC
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> PmIn
    741:742:java.lang.Class getReference(java.lang.Class) -> CoTn
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> kHre
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> AFkC
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> AFkC
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> PmIn
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> kHre
    1:1:surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
surge.util.ReflectionUtils$PackageType -> org.cyberpwn.react.dDum$AFkC:
    surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> RnJF
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> OJnx
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> nxMU
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> mchC
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> ULaN
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> edaN
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> BxOT
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> YGlJ
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> qxeQ
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> PEbP
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> lhtm
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> hTXe
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> OvEJ
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> GSxw
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> sCUl
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> SNkb
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> fyFW
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> WAfY
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> mdGv
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> CGlR
    java.lang.String path -> path
    surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> GBwr
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
surge.util.Refreshable -> org.cyberpwn.react.imvy:
    void refresh() -> refresh
surge.util.SQLOperation -> org.cyberpwn.react.ySSh:
    surge.util.SQLOperation LOAD -> dGka
    surge.util.SQLOperation SAVE -> tVye
    surge.util.SQLOperation[] ENUM$VALUES -> fFBY
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.SQLOperation[] values() -> values
    1:1:surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
surge.util.ServerState -> org.cyberpwn.react.RcGT:
    surge.util.ServerState START -> Lcio
    surge.util.ServerState ENABLE -> BEIj
    surge.util.ServerState DISABLE -> iEyJ
    surge.util.ServerState STOP -> VOda
    surge.util.ServerState RUNNING -> nVIn
    surge.util.ServerState[] ENUM$VALUES -> qMpI
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.ServerState[] values() -> values
    1:1:surge.util.ServerState valueOf(java.lang.String) -> valueOf
surge.util.Shape -> org.cyberpwn.react.kIiw:
    org.bukkit.Location location -> xACw
    org.bukkit.util.Vector offset -> KFqx
    org.bukkit.util.Vector size -> jbnF
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> WWke
    90:94:org.bukkit.Location randomLocation() -> eICE
    104:104:org.bukkit.Location randomSurface() -> AYMF
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> oyCt
    129:129:org.bukkit.util.Vector getSize() -> fTVe
surge.util.SnowLevel -> org.cyberpwn.react.GbeM:
    byte level -> CGmf
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> dosD
    51:52:void setLevel(byte) -> HnCj
surge.util.SuperCaller -> org.cyberpwn.react.RjuB:
    void run() -> run
surge.util.T -> org.cyberpwn.react.gpak:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> AFkC
    32:35:void stop() -> stop
surge.util.TXT -> org.cyberpwn.react.Oajy:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> JHuE
    67:67:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> kHre
    85:85:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> kHre
    99:99:java.lang.String line(surge.util.C,int) -> kHre
    113:113:java.lang.String underline(surge.util.C,int) -> AFkC
    135:140:java.lang.String getLine(surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> kHre
surge.util.Tag -> org.cyberpwn.react.gWOu:
    java.lang.String value() -> value
surge.util.Timer -> org.cyberpwn.react.ctvN:
    long tns -> ARiT
    long cns -> QYfA
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> vIrB
surge.util.VectorMath -> org.cyberpwn.react.dMea:
    int[] $SWITCH_TABLE$surge$util$Axis -> UvQj
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> AIxK
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(surge.util.Axis,org.bukkit.util.Vector,double) -> kHre
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> kHre
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> AFkC
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> PmIn
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> AFkC
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> AFkC
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> PmIn
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> CoTn
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> vsgG
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> tBlW
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> JHuE
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> hbNQ
    111:111:double round(double,int) -> vsgG
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> kHre
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> kHre
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> kHre
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> CoTn
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> vsgG
    268:268:org.bukkit.util.Vector toVector(float,float) -> kHre
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> kHre
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> kHre
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> XuBI
    337:340:double getSpeed(org.bukkit.util.Vector) -> HnCj
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> kHre
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> jEor
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> kHre
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> AFkC
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> PmIn
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> CoTn
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> xylS
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> dMea
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> YMpX
surge.util.VectorMath$1 -> org.cyberpwn.react.dMea$1:
    org.bukkit.util.Vector val$vector -> iExR
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> avjr
    1:1:java.lang.Object onAdapt(java.lang.Object) -> JHuE
surge.util.W -> org.cyberpwn.react.XBRm:
    31:31:void <init>() -> <init>
    42:50:boolean visible(org.bukkit.block.Block) -> HnCj
    63:66:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> kHre
    77:88:org.bukkit.entity.Entity getEntity(int) -> FyBI
    103:116:int count(org.bukkit.entity.Player,surge.util.MaterialBlock) -> kHre
    133:133:boolean has(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> kHre
    145:145:int getChunkX(org.bukkit.block.Block) -> jEor
    157:157:int getChunkY(org.bukkit.block.Block) -> xylS
    170:171:void dropXp(org.bukkit.Location,int) -> AFkC
    182:182:int getChunkZ(org.bukkit.block.Block) -> avjr
    198:205:void take(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> AFkC
    221:229:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> kHre
    234:241:react.glang.GList news(org.bukkit.Location) -> CxFc
    258:266:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> kHre
    278:278:react.glang.GList getBlocks(org.bukkit.Chunk) -> iSmg
    290:290:org.bukkit.World getSyncWorld(org.bukkit.World) -> fBUO
    302:302:org.bukkit.World toSync(org.bukkit.World) -> BtcN
    314:314:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> UtIc
    326:326:org.bukkit.Location toSync(org.bukkit.Location) -> eaTr
    338:338:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> HBnj
    354:421:surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> DihP
    435:447:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> kHre
    462:463:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> kHre
    480:481:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> kHre
    495:496:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> kHre
    513:514:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> kHre
    527:528:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> kHre
    543:544:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> kHre
    560:570:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> kHre
    582:589:react.glang.GList chunkFaces(org.bukkit.Chunk) -> rfxq
    601:610:react.glang.GList blockFaces(org.bukkit.block.Block) -> WWke
    622:636:org.bukkit.Location simulateFall(org.bukkit.Location) -> iSmg
    650:665:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> PmIn
    679:691:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> kHre
    713:745:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> kHre
    763:770:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> kHre
    784:784:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> kHre
surge.util.W$1 -> org.cyberpwn.react.XBRm$1:
    java.lang.Double val$doff -> mlMW
    org.bukkit.entity.Entity val$e -> Olqb
    org.bukkit.entity.Entity[] val$result -> Jviu
    1:726:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    731:742:void onTrace(org.bukkit.Location) -> jEor
surge.util.Worlds -> org.cyberpwn.react.tKrs:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> wUei
    33:33:boolean hasWorld(java.lang.String) -> FNLP
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
surge.util.package-info -> org.cyberpwn.react.QhSE:

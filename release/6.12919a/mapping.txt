react.Config -> HTQG:
    react.glang.GMap worldConfigs -> HTQG
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> yknY
    java.lang.String A_ENTITYCACHE_INTERVAL -> DaVa
    java.lang.String A_COMMANDOVERRIDE_TPS -> Mtah
    java.lang.String A_REACT_REMOTE_PORT -> qKFF
    java.lang.String A_REACT_REMOTE_ENABLED -> hrnE
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> IguI
    java.lang.String A_POOL_MAXTHREADS -> mylb
    java.lang.String A_POOL_SYNC_NANOS -> qRsr
    java.lang.String A_ENTITYCACHE_ENABLED -> vbcw
    java.lang.String A_FASTLEAF_ENABLED -> rUvu
    java.lang.String A_FASTLEAF_ONDECAY -> aKwB
    java.lang.String A_FASTLEAF_INSTANT -> TguA
    java.lang.String A_FASTLEAF_DECAYPERIOD -> YxDw
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> JkYS
    java.lang.String A_ENTITYSTACK_ENABLED -> HSqA
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> jxsq
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> wDFB
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> NxFW
    java.lang.String A_GLASS_SHOW_BLOCKS -> JkWX
    java.lang.String A_GLASS_SHOW_PARTICLES -> bGHg
    java.lang.String A_ALLOW_CULL -> bOYL
    java.lang.String A_ALLOW_PURGE -> fKEA
    java.lang.String A_ALLOW_CACHE -> XIlB
    java.lang.String A_CULL_RULES -> sHYK
    java.lang.String A_RAI_TPS_HIGH_TICK -> wwIL
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> uWOp
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> FpMY
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> vIQl
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> cIjx
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> Jbff
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> pjDR
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> mhme
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> RapM
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> tSpI
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> ctbR
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> JQgp
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> samf
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> Ixwx
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> CEBh
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> erYD
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> kbfx
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> EmNE
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> bynd
    java.lang.String A_RAI_FLUID_TIME_CEIL -> TFRc
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> BteK
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> GjaG
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> XdAW
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> AXOk
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> DjIR
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> fBUw
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> rMgp
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> hbMw
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> Vvlk
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> CDcG
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> RQQX
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> PKKW
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> YoXQ
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> bFmS
    java.lang.String A_USE_WORLD_CONFIGS -> MBBP
    java.lang.String A_LANGUAGE -> nuDw
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> AqcI
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> eHFh
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> qRxo
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> UtMf
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> AXQH
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> HdvJ
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> awOx
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> tTQv
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> NxJQ
    java.lang.String A_RAI_ENTITY_PROPIGATE -> FWAD
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> INfu
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> IgyO
    int ENTITYCACHE_CHUNK_RADIUS -> XIqQ
    int ENTITYCACHE_INTERVAL -> OHHl
    boolean COMMANDOVERRIDES_TPS -> lUKm
    int REACT_REMOTE_PORT -> eOwA
    boolean REACT_REMOTE_ENABLED -> BktO
    int ENTITY_STACK_MAX_COUNT -> xrAJ
    int POOL_MAXTHREADS -> CLsn
    long POOL_SYNC_NANOS -> iTRs
    boolean ENTITYCACHE_ENABLED -> eYIE
    boolean FASTLEAF_ENABLED -> LiSQ
    boolean FASTLEAF_ONDECAY -> nIoO
    boolean FASTLEAF_INSTANT -> XIpC
    int FASTLEAF_DECAYPERIOD -> Iphm
    boolean COMMANDOVERRIDES_MEMORY -> lChW
    boolean ENTITYSTACK_ENABLED -> LGNi
    int ENTITYSTACK_MINIMUM_GROUP -> ooVD
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> MJRS
    int ENTITYSTACK_MAXIMUM_HEALTH -> OOwP
    boolean GLASS_SHOW_BLOCKS -> SSrj
    boolean GLASS_SHOW_PARTICLES -> oDeB
    react.glang.GList ALLOW_CULL -> LWrI
    react.glang.GList ALLOW_PURGE -> dEFQ
    react.glang.GList ALLOW_CACHE -> gWAE
    react.glang.GList CULL_RULES -> MJSx
    double RAI_TPS_HIGH_TICK -> kAIl
    long RAI_REDSTONE_TIME_FLOOR -> dgHk
    long RAI_REDSTONE_TIME_CEIL -> qmNq
    long RAI_REDSTONE_TIME_MUDDING -> ndFO
    double RAI_REDSTONE_TIME_FUNCTION -> SdwP
    double RAI_REDSTONE_TIME_OVERBLEED -> VUOV
    int RAI_REDSTONE_TIME_RADIUS -> HLGR
    int RAI_REDSTONE_TIME_PROPIGATION -> AOad
    long RAI_HOPPER_TIME_FLOOR -> Usnh
    long RAI_HOPPER_TIME_CEIL -> ycdC
    long RAI_HOPPER_TIME_MUDDING -> Fory
    double RAI_HOPPER_TIME_FUNCTION -> xiQk
    double RAI_HOPPER_TIME_OVERBLEED -> uOGO
    int RAI_HOPPER_TIME_RADIUS -> mysL
    int RAI_HOPPER_TIME_PROPIGATION -> PJln
    int RAI_ENTITY_CHUNK_MULTIPLIER -> nktf
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> ylUF
    int RAI_ENTITY_CHUNK_RADIUS -> VClt
    long RAI_FLUID_TIME_FLOOR -> CVHV
    long RAI_FLUID_TIME_CEIL -> xaAP
    long RAI_FLUID_TIME_MUDDING -> XAaa
    double RAI_FLUID_TIME_FUNCTION -> VeoJ
    double RAI_FLUID_TIME_OVERBLEED -> uqJC
    int RAI_FLUID_TIME_RADIUS -> uWWG
    int RAI_FLUID_TIME_PROPIGATION -> ySBg
    double SMEAR_TICK_ENTITIES_MAX_TICK -> SeWS
    double SMEAR_TICK_TILES_MAX_TICK -> Hdvb
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> uFVB
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> rpPp
    double SMEAR_TICK_ENTITIES_AMOUNT -> CDgY
    double SMEAR_TICK_TILES_AMOUNT -> gpRE
    boolean SMEAR_TICK_ENTITIES_ENABLE -> SeVm
    boolean SMEAR_TICK_TILES_ENABLE -> jqJH
    boolean HOPPER_OVERTICK_ENABLE -> ofep
    boolean USE_WORLD_CONFIGS -> IFXU
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> WytE
    long RAI_CHUNK_TIME_CEIL -> mWoN
    long RAI_CHUNK_TIME_MUDDING -> XBBo
    double RAI_CHUNK_TIME_FUNCTION -> qKIy
    double RAI_CHUNK_TIME_OVERBLEED -> wUPG
    int RAI_CHUNK_TIME_RADIUS -> cuJE
    int RAI_CHUNK_TIME_PROPIGATION -> sQSk
    boolean RAI_CHUNK_TIME_PROPIGATE -> DGkp
    boolean RAI_FLUID_TIME_PROPIGATE -> NflB
    boolean RAI_ENTITY_PROPIGATE -> KoEI
    boolean RAI_HOPPER_TIME_PROPIGATE -> AiWA
    boolean RAI_REDSTONE_TIME_PROPIGATE -> JtRU
    boolean hrld -> flpK
    boolean rns -> BdIU
    boolean rrl -> rNOt
    39:656:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    661:678:void doTrack(org.bukkit.plugin.Plugin) -> HTQG
    683:705:void onRead(org.bukkit.plugin.Plugin) -> yknY
    709:739:void read(java.io.File,boolean) -> HTQG
    743:760:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> HTQG
    765:773:void closeWorldConfig(org.bukkit.World) -> yknY
    778:891:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> HTQG
    896:933:react.surge.cluster.DataCluster defaultConfig(boolean) -> HTQG
    938:1013:react.glang.GList getDefaultEntitiesForCaching() -> HTQG
    1018:1093:react.glang.GList getDefaultEntitiesForCulling() -> yknY
    1098:1135:react.glang.GList getDefaultEntitiesForRemoval() -> DaVa
    1140:1169:react.glang.GList getDefaultCullRules() -> Mtah
react.Config$1 -> HTQG$1:
    java.io.File val$fConfig -> UROE
    java.io.File val$fConfigExperimental -> kRMJ
    org.bukkit.plugin.Plugin val$main -> skFQ
    1:664:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    669:673:void run() -> run
react.Config$2 -> HTQG$2:
    react.api.WorldConfig val$wc -> wfPb
    org.bukkit.World val$w -> OjOg
    1:750:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    755:756:void run() -> run
react.Gate -> yknY:
    react.glang.GMap defaultSettings -> cthp
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> RrxW
    39:39:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    43:133:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> HTQG
    139:170:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> HTQG
    175:175:int getChunkCountForView() -> qKFF
    180:180:int getMaxChunksForView() -> hrnE
    185:185:boolean hasFawe() -> IguI
    190:211:void tickEntityNextTickListTick(org.bukkit.World) -> DaVa
    215:219:void resetEntityMaxTick(org.bukkit.World) -> Mtah
    223:223:int getEntityTickMax(org.bukkit.World) -> qKFF
    228:228:int getTileTickMax(org.bukkit.World) -> hrnE
    233:251:void tweakEntityTickMax(org.bukkit.World,int) -> HTQG
    255:272:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> HTQG
    277:281:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> HTQG
    285:297:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> HTQG
    302:306:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> yknY
    310:328:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> HTQG
    332:336:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> IguI
    341:344:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> HTQG
    349:352:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> yknY
    357:357:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> DaVa
    362:362:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> Mtah
    367:367:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> qKFF
    372:372:boolean isBadForUnloading() -> mylb
    377:377:boolean canUnload(org.bukkit.World,int,int) -> HTQG
    384:400:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    406:417:void unloadChunk(org.bukkit.World,int,int) -> yknY
    421:432:void removeEntity(org.bukkit.entity.Entity) -> HTQG
    436:447:void purgeEntity(org.bukkit.entity.Entity) -> yknY
    451:462:void cullEntity(org.bukkit.entity.Entity) -> DaVa
    466:477:void cachedEntity(org.bukkit.entity.Entity) -> Mtah
    482:499:void updateBlock(org.bukkit.block.Block) -> HTQG
    503:507:java.lang.String header(java.lang.String,react.surge.util.C) -> HTQG
    512:512:java.lang.String header(react.surge.util.C) -> HTQG
    518:522:void updateFluid(org.bukkit.block.Block) -> yknY
    37:37:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> qRsr
react.Gate$1 -> yknY$1:
    react.api.SelectorPosition val$sel -> clXf
    react.glang.Callback val$prog -> SnKl
    react.glang.Callback val$cb -> bytl
    1:43:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    48:131:void run() -> run
react.Gate$1$1 -> yknY$1$1:
    react.Gate$1 this$1 -> MBEW
    java.lang.Object val$o -> ooYp
    java.lang.reflect.Constructor val$vectorConstruct -> oVHW
    java.lang.reflect.Constructor val$cuboidConstruct -> SCVI
    java.lang.reflect.Method val$faweFixMethod -> iuxc
    java.lang.Integer[] val$total -> Vnak
    java.lang.Integer[] val$sof -> AXVT
    react.glang.Callback val$prog -> SnKl
    java.lang.Integer val$tot -> ncdr
    1:75:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    82:100:void run() -> run
react.Gate$1$2 -> yknY$1$2:
    react.Gate$1 this$1 -> MBEW
    react.glang.Callback val$prog -> SnKl
    react.glang.Callback val$cb -> bytl
    java.lang.Integer[] val$total -> Vnak
    1:104:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    111:119:void run() -> run
react.Info -> DaVa:
    java.lang.String CORE_REACT_DOT -> qAyo
    java.lang.String CORE_NAME -> KfSS
    java.lang.String CORE_CACHE -> oUfi
    java.lang.String WORLD_CONFIGS -> mqcg
    java.lang.String CORE_DOTYML -> QEcT
    java.lang.String COMMAND_REACT -> rMrN
    java.lang.String COMMAND_RAI -> CVMU
    java.lang.String COMMAND_ACT_DESCRIPTION -> HByC
    java.lang.String COMMAND_ACT -> KeuA
    java.lang.String COMMAND_ACT_ALIAS_1 -> MAft
    java.lang.String COMMAND_ACT_ALIAS_2 -> gEbM
    java.lang.String COMMAND_ACT_USAGE -> cRhB
    java.lang.String COMMAND_HELP_DESCRIPTION -> QMtF
    java.lang.String COMMAND_HELP -> QNUG
    java.lang.String COMMAND_HELP_ALIAS_1 -> GHfp
    java.lang.String COMMAND_HELP_ALIAS_2 -> LWur
    java.lang.String COMMAND_HELP_USAGE -> hbXY
    java.lang.String COMMAND_STATUS_DESCRIPTION -> WyxX
    java.lang.String COMMAND_STATUS -> SLJY
    java.lang.String COMMAND_STATUS_ALIAS_1 -> FVfG
    java.lang.String COMMAND_STATUS_ALIAS_2 -> xWsY
    java.lang.String COMMAND_STATUS_USAGE -> ryFf
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> oEHr
    java.lang.String COMMAND_CPUSCORE -> wCnf
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> qJnU
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> gNSQ
    java.lang.String COMMAND_CPUSCORE_USAGE -> WWus
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> SCYY
    java.lang.String COMMAND_RELOAD -> srvx
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> vbnq
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> ktQs
    java.lang.String COMMAND_RELOAD_USAGE -> MRia
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> MdLT
    java.lang.String COMMAND_MONITOR -> mqfq
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> lCnj
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> rEaD
    java.lang.String COMMAND_MONITOR_USAGE -> VMAu
    java.lang.String COMMAND_VERSION_DESCRIPTION -> ycgY
    java.lang.String COMMAND_VERSION -> EKPo
    java.lang.String COMMAND_VERSION_ALIAS_1 -> SBwH
    java.lang.String COMMAND_VERSION_ALIAS_2 -> mPCx
    java.lang.String COMMAND_VERSION_USAGE -> EdcN
    java.lang.String COMMAND_MAP_DESCRIPTION -> mrFy
    java.lang.String COMMAND_MAP -> fKOL
    java.lang.String COMMAND_MAP_ALIAS_1 -> VTqX
    java.lang.String COMMAND_MAP_ALIAS_2 -> ogJr
    java.lang.String COMMAND_MAP_USAGE -> gNRO
    java.lang.String COMMAND_GLASS_DESCRIPTION -> rMot
    java.lang.String COMMAND_GLASS -> dUjO
    java.lang.String COMMAND_GLASS_ALIAS_1 -> xytt
    java.lang.String COMMAND_GLASS_ALIAS_2 -> PvDy
    java.lang.String COMMAND_GLASS_USAGE -> XuLF
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> ghER
    java.lang.String COMMAND_CBLAME -> HwAU
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> AFvm
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> ryIY
    java.lang.String COMMAND_CBLAME_USAGE -> PvGb
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> bhxY
    java.lang.String COMMAND_ACTIONLOG -> IiCK
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> JIak
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> lDRy
    java.lang.String COMMAND_ACTIONLOG_USAGE -> mrJc
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> tnNL
    java.lang.String COMMAND_CAPABILITIES -> eHOk
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> FVgg
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> cdMK
    java.lang.String COMMAND_CAPABILITIES_USAGE -> wetK
    java.lang.String MSG_PERMISSION -> MAjH
    java.lang.String MSG_MONITORING_STARTED -> hPvu
    java.lang.String MSG_MONITORING_STOPPED -> skJT
    java.lang.String MSG_ACTIONLOGGING_STARTED -> mGUf
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> PCCl
    java.lang.String MSG_GLASS_STARTED -> cIyG
    java.lang.String MSG_GLASS_STOPPED -> wCpn
    org.bukkit.Color COLOR_HOPPER -> lCqM
    org.bukkit.Color COLOR_BLOCK_UPDATE -> YxOy
    org.bukkit.Color COLOR_BLOCK_FROMTO -> fvFJ
    org.bukkit.Color COLOR_BLOCK_BURN -> tmke
    org.bukkit.Color COLOR_BLOCK_DECAY -> kRQA
    org.bukkit.Color COLOR_BLOCK_FORM -> ytjn
    java.lang.String NAME_TICK -> Wyxw
    java.lang.String NAME_MEMORY -> SmnB
    java.lang.String NAME_CHUNKS -> WGUg
    java.lang.String NAME_ENTITIES -> mOfB
    java.lang.String STATE_MONITORING_TAB -> gxfu
    java.lang.String STATE_MONITORING_ENABLED -> XIxa
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> hPuq
    java.lang.String STATE_MAPPING_ENABLED -> iLJL
    java.lang.String STATE_SOUND_PLAYS -> fSaj
    java.lang.String STATE_MONITORING_POSTED -> xiWG
    java.lang.String STATE_MONITORING_LASTTAB -> JQrC
    java.lang.String STATE_GLASSES_ENABLED -> QpXs
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> MIxv
    java.lang.String STATE_PLAYER_HOTBAR -> aCuA
    java.lang.String STATE_PLAYER_SHIFT -> IFaK
    java.lang.String STATE_PLAYER_SCROLL -> mFwX
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> qCDO
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> awYj
    java.lang.String PERM_ACCESS -> OGrB
    java.lang.String PERM_MONITOR -> eXqy
    java.lang.String PERM_MONITOR_TITLE -> OHSJ
    java.lang.String PERM_MONITOR_ACTIONLOG -> IXCh
    java.lang.String PERM_MONITOR_MAP -> HLPC
    java.lang.String PERM_MONITOR_ENVIRONMENT -> aoJV
    java.lang.String PERM_MONITOR_GLASSES -> EeJD
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> EeJE
    java.lang.String PERM_ACT -> Xtoh
    java.lang.String PERM_RAI -> ndND
    java.lang.String PERM_RAI_CONTROL -> NxUE
    java.lang.String PERM_RAI_ACCESS -> vlEB
    java.lang.String PERM_RAI_MONITOR -> JcVB
    java.lang.String PERM_RELOAD -> TNpD
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> NobI
    java.lang.String SAMPLER_REDSTONE_TICK -> LPIr
    java.lang.String SAMPLER_ENTITY_TIME -> vtTo
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> vQqO
    java.lang.String SAMPLER_TILE_TIME_LOCK -> esDs
    java.lang.String SAMPLER_TILE_TIME -> JlFu
    java.lang.String SAMPLER_TILE_DROPTICK -> baKI
    java.lang.String SAMPLER_ENTITY_DROPTICK -> EKUb
    java.lang.String SAMPLER_REDSTONE_SECOND -> gWHA
    java.lang.String SAMPLER_REDSTONE_TIME -> MAkU
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> vkcY
    java.lang.String SAMPLER_HOPPER_TICK -> gggs
    java.lang.String SAMPLER_HOPPER_SECOND -> UIcJ
    java.lang.String SAMPLER_HOPPER_TIME -> BBLn
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> xqiW
    java.lang.String SAMPLER_FLUID_TICK -> ObGY
    java.lang.String SAMPLER_FLUID_SECOND -> Orgi
    java.lang.String SAMPLER_FLUID_TIME -> eXsk
    java.lang.String SAMPLER_TPS -> OsIE
    java.lang.String SAMPLER_TICK -> DYVh
    java.lang.String SAMPLER_TIU -> TqWH
    java.lang.String SAMPLER_MEM -> XSNs
    java.lang.String SAMPLER_FREEMEM -> yAkX
    java.lang.String SAMPLER_MAXMEM -> KoLt
    java.lang.String SAMPLER_ALLOCMEM -> KDXq
    java.lang.String SAMPLER_MAHS -> QhNL
    java.lang.String SAMPLER_CHK -> aDXN
    java.lang.String SAMPLER_ATASK -> PJwP
    java.lang.String SAMPLER_STASK -> bPLX
    java.lang.String SAMPLER_CHK_TIME -> PvLe
    java.lang.String SAMPLER_EXPLOSION_TIME -> piuG
    java.lang.String SAMPLER_CHKS -> eQDh
    java.lang.String SAMPLER_ENT -> NUqQ
    java.lang.String SAMPLER_ENTLIV -> bOie
    java.lang.String SAMPLER_ENTDROP -> TiEP
    java.lang.String SAMPLER_ENTTILE -> YEPG
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> Aqoq
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> Drgh
    java.lang.String ACTION_CULL_ENTITIES_NAME -> rghw
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> JRWD
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> WPKb
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> Hmrg
    java.lang.String ACTION_UPDATE_FLUID_NAME -> TqUw
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> WqnD
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> LOlC
    java.lang.String ACTION_LOCK_FLUID_STATUS -> RjoT
    java.lang.String ACTION_LOCK_FLUID_NAME -> dDnc
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> ArPb
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> qJtD
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> XlaA
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> rVgn
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> ivbD
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> SUCg
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> bPNI
    java.lang.String ACTION_LOCK_HOPPER_NAME -> ycou
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> feJr
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> rxoF
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> ntsG
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> vlIq
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> IOVY
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> UAVv
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> xOkm
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> bOla
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> QVlp
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> HTdK
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> klJL
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> vkgu
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> WjAk
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> MdTM
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> quji
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> ggmT
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> BJaA
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> HefC
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> FEmK
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> jWde
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> NpGL
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> jyfh
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> DYXH
    java.lang.String ACTION_FIX_LIGHTING_NAME -> NpGR
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> Hmsx
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> Fgmv
    java.lang.String ACTION_COLLECT_GARBAGE -> eXuE
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> GtDF
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> qeIp
    8:233:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> Mtah:
    java.lang.String BUNDLE_NAME -> BdUB
    java.util.ResourceBundle RESOURCE_BUNDLE -> WjAG
    java.util.ResourceBundle PRIMARY_BUNDLE -> ESin
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> qKFF:
    react.React instance -> MmCs
    react.controller.SampleController sampleController -> TyiA
    react.controller.PlayerController playerController -> lLhP
    react.controller.MonitorController monitorController -> ifCQ
    react.controller.CommandController commandController -> ogSe
    react.controller.ActionController actionController -> KMLF
    react.controller.FastDecayController fastDecayController -> hYmk
    react.controller.EntityStackController entityStackController -> HmwR
    react.controller.GlassController glassController -> tfFI
    react.controller.EntityCullController entityCullController -> xqqS
    react.controller.SpikeController spikeController -> nKAy
    react.controller.SecurityController securityController -> Knop
    react.controller.RedstoneController redstoneController -> KgAP
    react.controller.HopperController hopperController -> oxYM
    react.controller.PhysicsController physicsController -> GsfB
    react.controller.TickTimeController tickTimeController -> mqrF
    react.controller.RAIController raiController -> CpJj
    react.controller.FluidController fluidController -> IylI
    react.controller.ChunkController chunkController -> brRc
    react.controller.GraphController graphController -> scAq
    react.controller.ChronophyFluidController fluidChronophyController -> Svgv
    react.controller.EventController eventController -> CVVj
    react.controller.BlockInjectController blockInjectController -> ivgB
    react.controller.SmearTickController smearTickController -> VxAp
    react.controller.FeatureController featureController -> uWep
    react.controller.HopperOvertickController hopperPlungeController -> gyQk
    react.controller.BenchmarkController benchmarkController -> Orlb
    react.controller.LanguageController languageController -> tLSC
    react.controller.RemoteController remoteController -> YoiH
    react.controller.ExplosiveController explosiveController -> hYon
    react.controller.WorldController worldController -> kQwa
    42:42:void <init>() -> <init>
    141:141:void enable() -> enable
    147:147:void disable() -> disable
react.action.ActionCollectGarbage -> hrnE:
    19:22:void <init>() -> <init>
    27:61:void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
react.action.ActionCollectGarbage$1 -> hrnE$1:
    react.action.ActionCollectGarbage this$0 -> vQwP
    react.api.IActionSource val$source -> NpHg
    1:29:void <init>(react.action.ActionCollectGarbage,react.api.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> HTQG
react.action.ActionCollectGarbage$1$1 -> hrnE$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> YxXe
    long val$mbnex -> AHAr
    long val$mbmem -> SKsJ
    react.api.IActionSource val$source -> NpHg
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.api.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> IguI:
    long ms -> CUvv
    int lcd -> qeLS
    32:59:void <init>() -> <init>
    64:150:void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> HTQG
    27:27:void access$0(react.action.ActionCullEntities,long) -> HTQG
    28:28:int access$1(react.action.ActionCullEntities) -> HTQG
    27:27:long access$2(react.action.ActionCullEntities) -> yknY
react.action.ActionCullEntities$1 -> IguI$1:
    react.action.ActionCullEntities this$0 -> PBjK
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> IguI$2:
    react.action.ActionCullEntities this$0 -> PBjK
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> IguI$3:
    react.action.ActionCullEntities this$0 -> PBjK
    react.glang.FinalInteger val$completed -> tTbP
    react.glang.FinalInteger val$total -> PSke
    react.glang.FinalInteger val$totalCulled -> EeNg
    react.glang.FinalInteger val$totalChunked -> rWLr
    react.api.IActionSource val$source -> NpHg
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> IguI$4:
    react.action.ActionCullEntities this$0 -> PBjK
    react.api.IActionSource val$source -> NpHg
    react.glang.FinalInteger val$totalCulled -> EeNg
    react.glang.FinalInteger val$totalChunked -> rWLr
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> mylb:
    25:39:void <init>() -> <init>
    44:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
react.action.ActionFixLighting$1 -> mylb$1:
    react.action.ActionFixLighting this$0 -> vAUs
    1:28:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> mylb$2:
    react.action.ActionFixLighting this$0 -> vAUs
    react.api.IActionSource val$source -> NpHg
    int val$ch -> bOnS
    1:77:void <init>(react.action.ActionFixLighting,react.api.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> HTQG
    1:1:void run(java.lang.Object) -> HTQG
react.action.ActionFixLighting$3 -> mylb$3:
    react.action.ActionFixLighting this$0 -> vAUs
    1:88:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> HTQG
    1:1:void run(java.lang.Object) -> HTQG
react.action.ActionLockFluid -> qRsr:
    int lcd -> qeLS
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
react.action.ActionLockFluid$1 -> qRsr$1:
    react.action.ActionLockFluid this$0 -> KgBi
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> qRsr$2:
    react.action.ActionLockFluid this$0 -> KgBi
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> vbcw:
    int lcd -> qeLS
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
react.action.ActionLockHopper$1 -> vbcw$1:
    react.action.ActionLockHopper this$0 -> YfyV
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> vbcw$2:
    react.action.ActionLockHopper this$0 -> YfyV
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> rUvu:
    int lcd -> qeLS
    26:53:void <init>() -> <init>
    58:102:void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
react.action.ActionLockRedstone$1 -> rUvu$1:
    react.action.ActionLockRedstone this$0 -> rgqS
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> rUvu$2:
    react.action.ActionLockRedstone this$0 -> rgqS
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> aKwB:
    long ms -> CUvv
    int lcd -> qeLS
    boolean fail -> AHCY
    31:46:void <init>() -> <init>
    51:144:void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> yknY
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> HTQG
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> HTQG
    26:26:int access$2(react.action.ActionPurgeChunks) -> yknY
    25:25:long access$3(react.action.ActionPurgeChunks) -> DaVa
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> HTQG
react.action.ActionPurgeChunks$1 -> aKwB$1:
    react.action.ActionPurgeChunks this$0 -> oEUv
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> aKwB$2:
    react.action.ActionPurgeChunks this$0 -> oEUv
    int val$dk -> QOAe
    java.lang.Object val$j -> MmIJ
    react.api.IActionSource val$source -> NpHg
    react.api.ISelector[] val$selectors -> DQLf
    react.glang.FinalInteger val$acompleted -> iLVL
    react.glang.FinalInteger val$completed -> tTbP
    react.glang.FinalInteger val$total -> PSke
    react.glang.FinalInteger val$totalCulled -> EeNg
    react.glang.FinalInteger val$totalChunked -> rWLr
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.api.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> HTQG
react.action.ActionPurgeChunks$2$1 -> aKwB$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> RHsS
    react.glang.FinalInteger val$acompleted -> iLVL
    react.glang.FinalInteger val$completed -> tTbP
    react.glang.FinalInteger val$total -> PSke
    react.glang.FinalInteger val$totalCulled -> EeNg
    react.glang.FinalInteger val$totalChunked -> rWLr
    react.api.IActionSource val$source -> NpHg
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> aKwB$3:
    react.action.ActionPurgeChunks this$0 -> oEUv
    react.api.IActionSource val$source -> NpHg
    react.glang.FinalInteger val$acompleted -> iLVL
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> aKwB$4:
    react.action.ActionPurgeChunks this$0 -> oEUv
    org.bukkit.Chunk val$chunk -> jpyt
    java.lang.Runnable val$cb -> ebMN
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> TguA:
    long ms -> CUvv
    int lcd -> qeLS
    34:61:void <init>() -> <init>
    66:153:void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> yknY
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> HTQG
    30:30:int access$1(react.action.ActionPurgeEntities) -> HTQG
    29:29:long access$2(react.action.ActionPurgeEntities) -> yknY
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> HTQG
react.action.ActionPurgeEntities$1 -> TguA$1:
    react.action.ActionPurgeEntities this$0 -> OamO
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> TguA$2:
    react.action.ActionPurgeEntities this$0 -> OamO
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> TguA$3:
    react.action.ActionPurgeEntities this$0 -> OamO
    react.glang.FinalInteger val$completed -> tTbP
    react.glang.FinalInteger val$total -> PSke
    react.glang.FinalInteger val$totalCulled -> EeNg
    react.glang.FinalInteger val$totalChunked -> rWLr
    react.api.IActionSource val$source -> NpHg
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> TguA$4:
    react.action.ActionPurgeEntities this$0 -> OamO
    react.api.IActionSource val$source -> NpHg
    react.glang.FinalInteger val$totalCulled -> EeNg
    react.glang.FinalInteger val$totalChunked -> rWLr
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> TguA$5:
    react.action.ActionPurgeEntities this$0 -> OamO
    org.bukkit.entity.Entity val$i -> PmaV
    react.glang.FinalInteger val$cu -> nRsT
    int val$k -> jWhb
    org.bukkit.Chunk val$chunk -> jpyt
    java.lang.Runnable val$cb -> ebMN
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> YxDw:
    int lcd -> qeLS
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
react.action.ActionUnlockFluid$1 -> YxDw$1:
    react.action.ActionUnlockFluid this$0 -> SfIu
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> JkYS:
    int lcd -> qeLS
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
react.action.ActionUnlockHopper$1 -> JkYS$1:
    react.action.ActionUnlockHopper this$0 -> APRj
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> HSqA:
    int lcd -> qeLS
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
react.action.ActionUnlockRedstone$1 -> HSqA$1:
    react.action.ActionUnlockRedstone this$0 -> maSG
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> vbcw
    1:1:java.lang.Object get() -> get
react.api.Action -> jxsq:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> RkVx
    java.lang.String[] nodes -> twHm
    react.api.ActionHandle handle -> QVrF
    react.api.ActionState state -> woPM
    react.api.ActionTargetType target -> xqrS
    react.api.ActionType type -> dMei
    react.api.IActionSource currentSource -> sjrk
    double progress -> dUuo
    react.glang.GMap defaultSelectors -> yleP
    26:27:void <init>(react.api.ActionType) -> <init>
    29:42:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    47:62:react.api.ISelector[] biselect(react.api.ISelector[]) -> HTQG
    68:69:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> HTQG
    74:74:java.lang.String getName() -> getName
    80:80:java.lang.String getDescription() -> getDescription
    86:86:react.api.ActionHandle getHandleType() -> rUvu
    92:92:react.api.ActionState getState() -> aKwB
    98:98:java.lang.String getStatus() -> getStatus
    104:105:void setStatus(java.lang.String) -> HTQG
    110:110:double getProgress() -> getProgress
    116:117:void setProgress(double) -> setProgress
    122:122:react.api.ActionTargetType getTarget() -> TguA
    128:128:react.api.ActionType getType() -> YxDw
    134:134:react.glang.GMap getDefaultSelectors() -> JkYS
    140:182:void act(react.api.IActionSource,react.api.ISelector[]) -> yknY
    187:188:void completeAction() -> HSqA
    193:193:react.api.IActionSource getCurrentSource() -> jxsq
    199:199:java.lang.String[] getNodes() -> wDFB
    205:206:void setNodes(java.lang.String[]) -> HTQG
    void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
react.api.ActionAlreadyRunningException -> wDFB:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> NxFW:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> JkWX:
    react.api.ActionHandle AUTOMATIC -> gWPW
    react.api.ActionHandle MANUAL -> uhhf
    react.api.ActionHandle MUTEX -> LaTB
    react.api.ActionHandle[] ENUM$VALUES -> fCJr
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionHandle[] values() -> values
    1:1:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
react.api.ActionNotRunningException -> bGHg:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> bOYL:
    react.api.ActionState IDLE -> loPf
    react.api.ActionState RUNNING -> WjCu
    react.api.ActionState[] ENUM$VALUES -> FFQA
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> fKEA:
    react.api.ActionTargetType POSITIONAL -> xqqd
    react.api.ActionTargetType SYSTEM -> BKGI
    react.api.ActionTargetType[] ENUM$VALUES -> uyig
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> XIlB:
    react.api.ActionType FIX_LIGHTING -> LOrD
    react.api.ActionType UNLOCK_FLUID -> KxCk
    react.api.ActionType LOCK_FLUID -> EeQH
    react.api.ActionType UNLOCK_HOPPER -> YojQ
    react.api.ActionType LOCK_HOPPER -> SviV
    react.api.ActionType UNLOCK_REDSTONE -> PTOH
    react.api.ActionType LOCK_REDSTONE -> gFOB
    react.api.ActionType CULL_ENTITIES -> TiKn
    react.api.ActionType COLLECT_GARBAGE -> vJMO
    react.api.ActionType PURGE_ENTITIES -> EdrT
    react.api.ActionType PURGE_CHUNKS -> ArXc
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> QVrF
    react.api.ActionTargetType target -> xqrS
    react.api.ActionType[] ENUM$VALUES -> SUIk
    5:17:void <clinit>() -> <clinit>
    24:30:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    34:34:java.lang.String getName() -> getName
    39:39:java.lang.String getDescription() -> getDescription
    44:44:react.api.ActionHandle getHandle() -> NxFW
    49:49:react.api.ActionTargetType getTarget() -> TguA
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> sHYK:
    react.api.ActivationRangeType ANIMALS -> uFiM
    react.api.ActivationRangeType MONSTERS -> kkpF
    react.api.ActivationRangeType MISC -> RADw
    react.api.ActivationRangeType[] ENUM$VALUES -> lMQD
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> wwIL:
    int value() -> value
react.api.Async -> uWOp:
react.api.CPUBenchmark -> FpMY:
    org.bukkit.command.CommandSender sender -> sender
    int score -> clhh
    java.lang.Runnable onFinish -> BdYm
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> JkWX
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> HTQG
    13:13:int access$1(react.api.CPUBenchmark) -> yknY
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> DaVa
react.api.CPUBenchmark$1 -> FpMY$1:
    react.api.CPUBenchmark this$0 -> lwcp
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> FpMY$2:
    react.api.CPUBenchmark this$0 -> lwcp
    1:77:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> vIQl:
    react.api.CPUResult ULTRA_SLOW -> AGdS
    react.api.CPUResult VERY_SLOW -> tvim
    react.api.CPUResult SLOW -> iLWT
    react.api.CPUResult AVERAGE -> nuYS
    react.api.CPUResult GOOD -> FpgO
    react.api.CPUResult FAST -> dDxU
    react.api.CPUResult VERY_FAST -> RbhM
    react.api.CPUResult ULTRA_FAST -> IWlt
    java.lang.String m -> sQcf
    react.api.CPUResult[] ENUM$VALUES -> lgCO
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> HTQG
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> cIjx:
    react.glang.GMap cache -> XRvp
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> yknY
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> DaVa
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> bGHg
    54:54:boolean has(java.lang.Object) -> Mtah
react.api.Capability -> Jbff:
    react.api.Capability DUAL_WEILD -> GADp
    react.api.Capability SCOREBOARD -> qCLm
    react.api.Capability SCOREBOARD_ADVANCED -> XmHv
    react.api.Capability HOPPER -> Vfau
    react.api.Capability ENTITY_ATTRIBUTES -> DbOe
    react.api.Capability ENTITY_AI -> fCMk
    react.api.Capability ACTION_BAR -> rxsO
    react.api.Capability ENTITY_NAMES -> ETPy
    react.api.Capability TITLE_BAR -> Qgsy
    react.api.Capability CHUNK_RELIGHTING -> eQKt
    react.api.Capability MONITOR_SUBMISSIVENESS -> GIVN
    react.api.Capability ACCELERATED_PING -> HDIG
    react.api.Capability ENTITY_THROTTLING -> hACX
    react.api.Capability TILE_THROTTLING -> HCio
    react.api.Capability PASSENGERS -> WPVf
    react.glang.GList capabilities -> jiOc
    react.surge.util.Protocol version -> bOuQ
    react.api.Flavor flavor -> ekBF
    java.lang.String plugin -> maWY
    java.lang.String name -> name
    13:47:void <clinit>() -> <clinit>
    54:60:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    64:65:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    69:70:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    74:75:void <init>(java.lang.String,java.lang.String) -> <init>
    79:80:void <init>(java.lang.String,react.api.Flavor) -> <init>
    84:85:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    89:94:boolean isPluginCapable() -> bOYL
    99:99:boolean isFlavorCapable() -> fKEA
    104:104:boolean isVersionCapable() -> XIlB
    109:109:boolean isCapable() -> sHYK
    114:114:react.surge.util.Protocol getVersion() -> wwIL
    119:119:react.api.Flavor getFlavor() -> uWOp
    124:124:java.lang.String getPlugin() -> FpMY
    129:129:java.lang.String getName() -> getName
    134:148:void sendNotCapable(org.bukkit.entity.Player) -> HTQG
    152:166:void sendNotCapable(react.api.IActionSource) -> HTQG
react.api.CapabilityBasis -> pjDR:
    react.api.CapabilityBasis VERSION -> YNMD
    react.api.CapabilityBasis FLAVOR -> URaS
    react.api.CapabilityBasis PLUGIN -> UuEG
    react.api.CapabilityBasis[] ENUM$VALUES -> KVFC
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.CapabilityBasis[] values() -> values
    1:1:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> mhme:
    react.api.ChunkIssue ENTITY -> rOEF
    react.api.ChunkIssue HOPPER -> pQOF
    react.api.ChunkIssue REDSTONE -> vImu
    react.api.ChunkIssue FLUID -> kJPP
    react.api.ChunkIssue PHYSICS -> QOFQ
    react.api.ChunkIssue[] ENUM$VALUES -> NNMX
    3:9:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
react.api.Clip -> RapM:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> tSpI:
    org.bukkit.command.CommandSender sender -> sender
    11:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> yknY
    30:31:void sendResponseSuccess(java.lang.String) -> DaVa
    36:37:void sendResponseError(java.lang.String) -> Mtah
    42:43:void sendResponseActing(java.lang.String) -> qKFF
react.api.ConsoleActionSource -> ctbR:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> yknY
    18:19:void sendResponseSuccess(java.lang.String) -> DaVa
    24:25:void sendResponseError(java.lang.String) -> Mtah
    30:31:void sendResponseActing(java.lang.String) -> qKFF
react.api.CullList -> JQgp:
    react.glang.GSet toCull -> gErs
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> qKFF
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> vIQl
react.api.DTest -> samf:
    6:6:void <init>() -> <init>
    11:62:int test() -> cIjx
react.api.EntityFlag -> Ixwx:
    react.api.EntityFlag NAMED -> wgCx
    react.api.EntityFlag TAMED -> APWS
    react.api.EntityFlag STACKED -> FVvb
    react.api.EntityFlag RIDDEN -> NMjo
    react.api.EntityFlag LEASHED -> NDyd
    java.lang.String m -> sQcf
    react.api.EntityFlag[] ENUM$VALUES -> uGJh
    8:14:void <clinit>() -> <clinit>
    18:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> hrnE
    40:65:boolean is(org.bukkit.entity.Entity) -> IguI
    71:71:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> CEBh:
    react.glang.GSet entityTypes -> QyWo
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> Jbff
react.api.EntitySample -> erYD:
    react.glang.GMap counts -> JuEE
    react.glang.GMap sets -> WHDs
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> pjDR
    45:45:react.glang.GList getTypes() -> mhme
    50:57:int total() -> RapM
    62:67:int get(org.bukkit.entity.EntityType) -> HTQG
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> yknY
    84:96:void add(org.bukkit.entity.Entity) -> qKFF
react.api.Experimental -> kbfx:
react.api.Flavor -> EmNE:
    react.api.Flavor ANY -> XBWP
    react.api.Flavor SAFE_MODE -> DrrO
    react.api.Flavor CRAFT_BUKKIT -> sADt
    react.api.Flavor BUKKIT -> ktbX
    react.api.Flavor SPIGOT -> VMRa
    react.api.Flavor SOGGY_SPIGOT -> DQOt
    react.api.Flavor PAPER_SPIGOT -> fmcA
    react.api.Flavor TACO_SPIGOT -> Typi
    react.api.Flavor TORCH_SPIGOT -> uXKi
    react.api.Flavor FORGE_HACK -> JuDq
    react.api.Flavor SPONGE_HACK -> VoVQ
    react.api.Flavor[] ENUM$VALUES -> pPoc
    6:18:void <clinit>() -> <clinit>
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> tSpI
    74:79:boolean compatableWith(react.api.Flavor) -> HTQG
    84:84:java.lang.String fancyName() -> ctbR
    1:1:react.api.Flavor[] values() -> values
    1:1:react.api.Flavor valueOf(java.lang.String) -> valueOf
react.api.IAction -> bynd:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> rUvu
    void act(react.api.IActionSource,react.api.ISelector[]) -> yknY
    void enact(react.api.IActionSource,react.api.ISelector[]) -> HTQG
    react.api.ActionState getState() -> aKwB
    react.api.ActionTargetType getTarget() -> TguA
    void setNodes(java.lang.String[]) -> HTQG
    java.lang.String[] getNodes() -> wDFB
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> HTQG
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> YxDw
    react.glang.GMap getDefaultSelectors() -> JkYS
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> HTQG
    react.api.ISelector[] biselect(react.api.ISelector[]) -> HTQG
    react.api.IActionSource getCurrentSource() -> jxsq
    void completeAction() -> HSqA
react.api.IActionSource -> TFRc:
    void sendResponse(java.lang.String) -> yknY
    void sendResponseSuccess(java.lang.String) -> DaVa
    void sendResponseError(java.lang.String) -> Mtah
    void sendResponseActing(java.lang.String) -> qKFF
react.api.ICache -> BteK:
    react.glang.GSet get(java.lang.Object) -> yknY
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> DaVa
    void clear() -> clear
    boolean has(java.lang.Object) -> Mtah
    react.glang.GList k() -> bGHg
react.api.ICommand -> GjaG:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> JQgp
    java.lang.String[] getPermissions() -> samf
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> hrnE
    react.api.SideGate getSideGate() -> Ixwx
    void registerParameterDescription(java.lang.String,java.lang.String) -> HTQG
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
react.api.IRecord -> XdAW:
    java.lang.String getRecordType() -> CEBh
    long getRecordTime() -> erYD
    react.json.JSONObject toJSON() -> kbfx
    java.lang.Object getRecordObject() -> EmNE
    void fromJSON(react.json.JSONObject) -> HTQG
react.api.IRecordBook -> AXOk:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> HTQG
    long getOldestRecordTime() -> bynd
    void addRecord(react.api.IRecord) -> HTQG
    long getLatestRecordTime() -> TFRc
    int countRecords(long,long) -> HTQG
    react.glang.GMap getRecords(long,long) -> yknY
    int purgeRecordsBefore(long) -> yknY
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> DjIR:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> BteK
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> GjaG
    react.surge.util.C getAltColor() -> XdAW
    void setColor(react.surge.util.C,react.surge.util.C) -> HTQG
    int getInterval() -> getInterval
    void setInterval(int) -> yknY
    void sample() -> AXOk
    java.lang.String get() -> get
    void construct() -> DjIR
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> fBUw:
    react.api.SelectionMode getMode() -> fBUw
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> qKFF
    react.glang.GSet getList() -> rMgp
    react.glang.GSet getPossibilities() -> hbMw
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> hrnE
    java.lang.String getName() -> getName
react.api.Injection -> rMgp:
    react.api.InjectionMethod value() -> Vvlk
react.api.InjectionMethod -> hbMw:
    react.api.InjectionMethod SWAP -> xiiS
    react.api.InjectionMethod SUBSTRATE -> Svon
    react.api.InjectionMethod RELOAD -> WikE
    react.api.InjectionMethod[] ENUM$VALUES -> cJjH
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> Vvlk:
    java.lang.String value() -> value
react.api.MSampler -> CDcG:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> CDcG
react.api.MonitorHeading -> RQQX:
    react.api.ISampler head -> Tyrq
    react.glang.GList children -> PnGq
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> HTQG
    27:27:react.api.ISampler getHead() -> RQQX
    32:33:void setHead(react.api.ISampler) -> yknY
    37:37:react.glang.GList getChildren() -> PKKW
    42:42:java.lang.String getHeadText() -> YoXQ
    47:60:java.lang.String getChildText() -> bFmS
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> HTQG
react.api.NoiseGenerator -> PKKW:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> YoXQ:
    react.api.NoiseGenerator[] octaves -> jGMs
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> MBBP
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> bFmS:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> OsUg
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> nuDw
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> MBBP:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> HTQG
react.api.Permissable -> nuDw:
    react.api.Permissable ACCESS -> UtgG
    react.api.Permissable MONITOR -> hRIg
    react.api.Permissable MONITOR_TITLE -> fmeg
    react.api.Permissable MONITOR_ACTIONLOG -> bHHV
    react.api.Permissable MONITOR_MAP -> tKyp
    react.api.Permissable MONITOR_ENVIRONMENT -> VgIL
    react.api.Permissable MONITOR_GLASSES -> pbRI
    react.api.Permissable MONITOR_CHUNK_BLAME -> VoYU
    react.api.Permissable RAI_MONITOR -> QVwk
    react.api.Permissable RAI_CONTROL -> PKeD
    react.api.Permissable RAI_ACCESS -> IFms
    react.api.Permissable RAI -> PvVw
    react.api.Permissable ACT -> jWnS
    react.api.Permissable RELOAD -> kkri
    java.lang.String node -> nKJC
    react.api.Permissable[] ENUM$VALUES -> AXjk
    7:22:void <clinit>() -> <clinit>
    26:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> HTQG
    46:46:java.lang.String getNode() -> AqcI
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PlayerActionSource -> AqcI:
    org.bukkit.entity.Player p -> STkj
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> yknY
    30:31:void sendResponseSuccess(java.lang.String) -> DaVa
    36:37:void sendResponseError(java.lang.String) -> Mtah
    42:43:void sendResponseActing(java.lang.String) -> qKFF
react.api.PluginSelfDeleter -> eHFh:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> aEDG
    java.lang.Runnable r -> xYHC
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> HTQG
react.api.RAIActionSource -> qRxo:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> yknY
    16:17:void sendResponseSuccess(java.lang.String) -> DaVa
    22:23:void sendResponseError(java.lang.String) -> Mtah
    28:29:void sendResponseActing(java.lang.String) -> qKFF
react.api.ReactCommand -> UtMf:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> IXPj
    java.lang.String usage -> gVvB
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> PvWg
    react.api.SideGate sideGate -> ifMP
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> hrnE
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> HTQG
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> JQgp
    47:47:java.lang.String[] getPermissions() -> samf
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> Ixwx
react.api.ReactException -> AXQH:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> HdvJ:
    react.glang.GMap keystore -> TysJ
    boolean monitoring -> monitoring
    boolean actionlogging -> rFTA
    boolean glasses -> OrtM
    boolean mapping -> xaWP
    int monitorSelection -> YyAq
    int plays -> QVwO
    boolean monitorPosted -> RAIW
    int monitorLastSelection -> qnES
    int switchNotification -> lLug
    int hotbarSlot -> uXRE
    boolean shift -> OPsV
    int scroll -> VDfb
    double lastHeight -> Aimb
    boolean heightMovement -> VVIT
    org.bukkit.entity.Player p -> STkj
    24:39:void <clinit>() -> <clinit>
    42:89:void <init>(org.bukkit.entity.Player) -> <init>
    95:102:void save() -> save
    108:115:void load() -> load
    119:119:boolean isMonitoring() -> eHFh
    124:124:boolean isMapping() -> qRxo
    129:129:org.bukkit.entity.Player getP() -> UtMf
    134:136:void setMonitoring(boolean) -> yknY
    140:142:void setMapping(boolean) -> DaVa
    146:146:int getMonitorSelection() -> AXQH
    151:153:void setMonitorSelection(int) -> DaVa
    157:157:int getHotbarSlot() -> HdvJ
    162:164:void setHotbarSlot(int) -> Mtah
    168:168:boolean isShifting() -> awOx
    173:175:void setShifting(boolean) -> Mtah
    179:179:boolean isShift() -> tTQv
    184:186:void setShift(boolean) -> qKFF
    190:190:int getScroll() -> NxJQ
    195:197:void setScroll(int) -> qKFF
    201:201:int getMonitorLastSelection() -> FWAD
    206:208:void setMonitorLastSelection(int) -> hrnE
    212:213:void setP(org.bukkit.entity.Player) -> yknY
    217:217:double getLastHeight() -> INfu
    222:224:void setLastHeight(double) -> HTQG
    228:228:boolean isHeightMovement() -> IgyO
    233:235:void setHeightMovement(boolean) -> hrnE
    239:239:int getSwitchNotification() -> XIqQ
    244:246:void setSwitchNotification(int) -> IguI
    250:250:boolean getMonitorPosted() -> OHHl
    255:257:void setMonitorPosted(boolean) -> IguI
    261:261:int getPlays() -> lUKm
    266:268:void setPlays(int) -> mylb
    272:272:boolean isGlasses() -> eOwA
    277:279:void setGlasses(boolean) -> mylb
    283:283:boolean isActionlogging() -> BktO
    288:290:void setActionlogging(boolean) -> qRsr
react.api.Record -> awOx:
    java.lang.String recordType -> vIrQ
    long recordTime -> ioBP
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> CEBh
    32:32:long getRecordTime() -> erYD
    38:38:java.lang.Object getRecordObject() -> EmNE
    react.json.JSONObject toJSON() -> kbfx
    void fromJSON(react.json.JSONObject) -> HTQG
react.api.RecordBook -> tTQv:
    java.io.File recordFile -> kSDp
    react.json.JSONObject js -> klWM
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> HTQG
    79:87:react.api.IRecord getRecord(long) -> HTQG
    react.api.IRecord createDummyRecord(long,java.lang.String) -> HTQG
    95:107:long getOldestRecordTime() -> bynd
    113:125:long getLatestRecordTime() -> TFRc
    130:130:boolean within(long,long,long) -> HTQG
    136:144:int countRecords(long,long) -> HTQG
    150:162:react.glang.GMap getRecords(long,long) -> yknY
    168:181:int purgeRecordsBefore(long) -> yknY
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> NxJQ:
react.api.SampledChunk -> FWAD:
    org.bukkit.Chunk c -> Vfig
    react.glang.GMap counts -> JuEE
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> xrAJ
    26:38:void hit(react.api.ChunkIssue,int) -> HTQG
    42:42:org.bukkit.Chunk getC() -> CLsn
    47:47:react.glang.GMap getCounts() -> iTRs
react.api.SampledType -> INfu:
    react.api.SampledType ENTITY_TIME_LOCK -> VDff
    react.api.SampledType TILE_TIME_LOCK -> iClh
    react.api.SampledType ENTITY_TIME -> kSET
    react.api.SampledType TILE_TIME -> Sepm
    react.api.SampledType ENTITY_DROPTICK -> DbVa
    react.api.SampledType TILE_DROPTICK -> fSti
    react.api.SampledType REDSTONE_TICK_USAGE -> aUfu
    react.api.SampledType REDSTONE_TICK -> opRk
    react.api.SampledType REDSTONE_SECOND -> fCUV
    react.api.SampledType REDSTONE_TIME -> PmjA
    react.api.SampledType HOPPER_TICK_USAGE -> hsnE
    react.api.SampledType HOPPER_TICK -> DIES
    react.api.SampledType HOPPER_SECOND -> JRes
    react.api.SampledType HOPPER_TIME -> NVbK
    react.api.SampledType FLUID_TICK_USAGE -> gOHf
    react.api.SampledType FLUID_TICK -> EdyR
    react.api.SampledType FLUID_SECOND -> vSCu
    react.api.SampledType FLUID_TIME -> qBsP
    react.api.SampledType TPS -> RALW
    react.api.SampledType TICK -> YWAx
    react.api.SampledType TIU -> kSDi
    react.api.SampledType MEM -> YWAL
    react.api.SampledType FREEMEM -> LXkF
    react.api.SampledType MAXMEM -> OHbL
    react.api.SampledType ALLOCMEM -> qTTn
    react.api.SampledType MAHS -> xHGp
    react.api.SampledType CHK_TIME -> xiio
    react.api.SampledType EXPLOSION_TIME -> Qpjt
    react.api.SampledType CHK -> HvrW
    react.api.SampledType ATASK -> BvBy
    react.api.SampledType STASK -> oopP
    react.api.SampledType CHKS -> HTny
    react.api.SampledType ENT -> yllg
    react.api.SampledType ENTLIV -> mGgW
    react.api.SampledType ENTDROP -> uFnI
    react.api.SampledType ENTTILE -> fmgK
    java.lang.String node -> nKJC
    react.api.SampledType[] ENUM$VALUES -> NyDr
    6:43:void <clinit>() -> <clinit>
    49:49:react.api.ISampler get() -> eYIE
    55:55:java.lang.String toString() -> toString
    58:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> AqcI
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> IgyO:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> YxfO
    react.surge.util.C altColor -> kItj
    int interval -> ssom
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> GjaG
    49:49:react.surge.util.C getAltColor() -> XdAW
    55:55:int getInterval() -> getInterval
    void sample() -> AXOk
    void construct() -> DjIR
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> HTQG
    107:108:void setInterval(int) -> yknY
react.api.Sector -> XIqQ:
    int value() -> value
react.api.SelectionException -> OHHl:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> lUKm:
    react.api.SelectionMode WHITELIST -> HCqG
    react.api.SelectionMode BLACKLIST -> ifRV
    react.api.SelectionMode[] ENUM$VALUES -> nubB
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> eOwA:
    java.lang.Class objectType -> HDRL
    react.api.SelectionMode mode -> cvDA
    react.glang.GSet list -> fnJp
    react.glang.GSet possibilities -> afjQ
    int popoff -> RtPt
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> fBUw
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> qKFF
    43:43:react.glang.GSet getList() -> rMgp
    49:49:react.glang.GSet getPossibilities() -> hbMw
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> hrnE
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> IguI
    98:100:int pop() -> pop
react.api.SelectorEntityType -> BktO:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> DaVa
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> hrnE
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> mylb
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> xrAJ:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> CLsn:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> yknY
    29:30:void add(org.bukkit.Chunk,int) -> HTQG
    34:38:void add(org.bukkit.World) -> mylb
    42:46:void addAll() -> LiSQ
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> hrnE
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> mylb
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> iTRs:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> hrnE
    87:87:java.lang.String getName() -> getName
react.api.Side -> eYIE:
    react.api.Side PLAYERS -> iToX
    react.api.Side CONSOLE -> ifRL
    java.lang.String ss -> LinT
    react.api.Side[] ENUM$VALUES -> ceAH
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> nIoO
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> yknY
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> LiSQ:
    react.api.SideGate PLAYERS_ONLY -> AsCD
    react.api.SideGate CONSOLES_ONLY -> QqMx
    react.api.SideGate ANYTHING -> dori
    int[] $SWITCH_TABLE$react$api$SideGate -> bGjH
    react.api.SideGate[] ENUM$VALUES -> FpnR
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> HTQG
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> XIpC
react.api.SimplexNoiseGenerator -> nIoO:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> gVyi
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> Iphm
react.api.SimplexOctaveGenerator -> XIpC:
    double wScale -> YEaM
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> HTQG
react.api.SpecializedTickLimiter -> Iphm:
    double rMaxTime -> vSDl
    long rStartTime -> CNSs
    double rLastTime -> qTVT
    long rMark -> KDhd
    double tMaxTime -> hcNY
    react.gmath.Average atimes -> UuKJ
    react.gmath.Average adropped -> fKfX
    int droppedTicks -> kRdg
    boolean entityTick -> DPvE
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> lChW:
    react.glang.GList sources -> ebVM
    react.glang.GList splooge -> HLdB
    react.glang.GSet destroy -> tLbF
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> HTQG
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> yknY
    void clipped(org.bukkit.Location) -> HTQG
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> yknY
    boolean isAllowedSource(org.bukkit.Location) -> DaVa
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> HTQG
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> yknY
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> DaVa
react.api.SploogeCounter$1 -> lChW$1:
    react.api.SploogeCounter this$0 -> USJY
    java.util.Iterator val$it -> ymRr
    org.bukkit.Location val$start -> QOMw
    int val$maxDistance -> nJnu
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> HTQG
react.api.SploogeCounter$1$1 -> lChW$1$1:
    react.api.SploogeCounter$1 this$1 -> mjOt
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> LGNi:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> ooVD:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> kbfx
    38:49:void fromJSON(react.json.JSONObject) -> HTQG
react.api.StackTraceRecordBook -> MJRS:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> yknY
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> HTQG
react.api.StackedEntity -> OOwP:
    org.bukkit.entity.LivingEntity entity -> KVNT
    int count -> count
    double rmx -> OHhE
    20:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> HTQG
    46:46:int getAbsoluteMaxCount() -> lChW
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> yknY
    56:58:void update() -> update
    62:68:void signalSize() -> LGNi
    72:123:void updateHealth() -> ooVD
    127:128:void heal(double) -> yknY
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> MJRS
    142:142:int getEffectiveCount(double) -> DaVa
    147:147:double getEffectiveMaxHealth(int) -> qRsr
    152:152:double getRealMaxHealth() -> OOwP
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> HTQG
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> SSrj:
    react.glang.GList headings -> qCXF
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> HTQG
    24:24:int getMaxSelection() -> SSrj
    29:37:int left(int) -> vbcw
    42:50:int right(int) -> rUvu
    55:55:react.api.MonitorHeading getHeadFor(int) -> aKwB
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> HTQG
    83:100:java.lang.String getHotbarFor(int,boolean) -> HTQG
react.api.Unused -> oDeB:
react.api.WorldConfig -> LWrI:
    boolean allowRai -> brbM
    boolean allowActions -> vSHY
    boolean allowRelighting -> qCXS
    boolean allowTileThrottling -> ivtt
    boolean allowEntityThrottling -> KUmb
    boolean allowFastLeafDecay -> DIIa
    java.util.List assumeNoSideEffectsEntities -> brbB
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> qRsr
    48:62:void save(org.bukkit.World) -> vbcw
    66:80:void load(org.bukkit.World) -> rUvu
react.binject.BlockInjector -> dEFQ:
    react.surge.util.Protocol protocol -> eIFQ
    java.lang.Class blocksClass -> wxNC
    12:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> HTQG
    29:56:void inject() -> oDeB
    61:61:react.surge.util.Protocol getVersion() -> wwIL
react.binject.IBlockInjector -> gWAE:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> HTQG
    void add(int,java.lang.String,java.lang.Object) -> HTQG
    java.lang.Object get(java.lang.String) -> get
    void inject() -> oDeB
    react.surge.util.Protocol getVersion() -> wwIL
react.binject.InjectedBlock -> MJSx:
    react.surge.util.Protocol getInjectProtocol() -> LWrI
    java.lang.String getInjectKey() -> dEFQ
    java.lang.String getInjectCKey() -> gWAE
    int getInjectId() -> MJSx
react.binject.ReflectionUtil -> kAIl:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> HTQG
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> HTQG
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> HTQG
    41:54:void setAccessible(java.lang.reflect.Field) -> HTQG
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> HTQG
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> HTQG
react.binject.V10.BlockInjector10 -> dgHk:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> IguI
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> HTQG
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> HTQG
react.binject.V11.BlockInjector11 -> qmNq:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> mylb
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> HTQG
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> HTQG
react.binject.V12.BlockInjector12 -> ndFO:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> qRsr
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> HTQG
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> HTQG
react.binject.V8.BlockInjector8 -> SdwP:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> vbcw
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> HTQG
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> HTQG
react.binject.V9.BlockInjector9 -> VUOV:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> rUvu
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> HTQG
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> HTQG
react.cache.CachedEntity -> HLGR:
    java.util.UUID uid -> AjSg
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> fBwG
    double x -> x
    double y -> y
    double z -> z
    double vx -> fSxV
    double vy -> skaE
    double vz -> APaG
    double dx -> YNTF
    double dy -> Ojia
    double dz -> VwoM
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> mylb
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> kAIl
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> dgHk
    120:121:void setVx(double) -> Mtah
    125:125:double getVy() -> qmNq
    130:131:void setVy(double) -> qKFF
    135:135:double getVz() -> ndFO
    140:141:void setVz(double) -> hrnE
    145:145:double getDx() -> SdwP
    150:151:void setDx(double) -> IguI
    155:155:double getDy() -> VUOV
    160:161:void setDy(double) -> mylb
    165:165:double getDz() -> HLGR
    170:171:void setDz(double) -> qRsr
    175:175:java.util.UUID getUid() -> AOad
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> AOad:
    int age -> IGUq
    boolean ageLock -> dVch
    boolean breed -> bsBH
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> mylb
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> Usnh
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> ycdC
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> Usnh:
    org.bukkit.DyeColor dye -> BScU
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> mylb
    30:30:org.bukkit.DyeColor getDye() -> Fory
    35:36:void setDye(org.bukkit.DyeColor) -> HTQG
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> ycdC:
    react.glang.GList potionEffects -> HfUu
    boolean canPickupItems -> Rsrk
    org.bukkit.inventory.ItemStack[] armorContents -> BJsi
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> biqy
    double maxHealth -> maxHealth
    int maxAir -> dFEp
    int air -> SewH
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> mylb
    63:63:react.glang.GList getPotionEffects() -> xiQk
    68:69:void setPotionEffects(react.glang.GList) -> yknY
    73:73:boolean isCanPickupItems() -> uOGO
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> mysL
    138:139:void setMaxAir(int) -> TguA
    143:143:int getAir() -> PJln
    148:149:void setAir(int) -> YxDw
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> Fory:
    boolean sheared -> dhIP
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> mylb
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> xiQk:
    org.bukkit.inventory.ItemStack is -> GtWQ
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> mylb
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> uOGO:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> mysL:
    react.chronophysics.HopperDirection DOWN -> pPwi
    react.chronophysics.HopperDirection NORTH -> cmVR
    react.chronophysics.HopperDirection SOUTH -> uFvD
    react.chronophysics.HopperDirection EAST -> eHhK
    react.chronophysics.HopperDirection WEST -> FqSu
    int direction -> direction
    int[] $SWITCH_TABLE$react$chronophysics$HopperDirection -> tTsm
    react.chronophysics.HopperDirection[] ENUM$VALUES -> ejjf
    6:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> Mtah
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> HTQG
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> yknY
    1:1:react.chronophysics.HopperDirection[] values() -> values
    1:1:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    6:6:int[] $SWITCH_TABLE$react$chronophysics$HopperDirection() -> nktf
react.chronophysics.HopperWormhole -> PJln:
    org.bukkit.block.Hopper source -> BeGT
    react.glang.GList path -> sQpW
    org.bukkit.block.Hopper destination -> kJYa
    17:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> ylUF
    31:31:react.glang.GList getPath() -> VClt
    36:36:org.bukkit.block.Hopper getDestination() -> CVHV
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> HTQG
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> nktf:
    org.bukkit.block.Hopper h -> MvIR
    13:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> HTQG
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> xaAP
    62:62:boolean isLockedByRedstone() -> XAaa
react.command.CommandAct -> ylUF:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> HTQG
    186:192:react.text.RTX getBeginningRTX() -> VeoJ
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> HTQG
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> yknY
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> DaVa
    331:346:react.glang.GList getSortedCommands() -> uqJC
    351:358:int getPageSize(int) -> JkYS
    363:363:boolean isValidPage(int,int) -> HTQG
    368:377:react.glang.GList getPage(int,int) -> yknY
react.command.CommandActionLog -> VClt:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
react.command.CommandCPUScore -> CVHV:
    15:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
react.command.CommandCapabilities -> xaAP:
    19:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
react.command.CommandChunkBlame -> XAaa:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
react.command.CommandChunkBlame$1 -> XAaa$1:
    react.command.CommandChunkBlame this$0 -> mXon
    org.bukkit.command.CommandSender val$sender -> awqQ
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> XAaa$1$1:
    react.command.CommandChunkBlame$1 this$1 -> ifVf
    org.bukkit.command.CommandSender val$sender -> awqQ
    java.lang.String val$i -> YgiR
    react.glang.GMap val$top -> QNoj
    int val$totalx -> htTv
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> VeoJ:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
react.command.CommandHelp -> uqJC:
    27:36:void <init>() -> <init>
    41:42:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
    46:65:void sendPage(org.bukkit.command.CommandSender,int,int) -> HTQG
    69:75:react.text.RTX getBeginningRTX() -> VeoJ
    80:140:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> HTQG
    144:154:void sendHeader(org.bukkit.command.CommandSender,int,int) -> yknY
    158:187:void sendFooter(org.bukkit.command.CommandSender,int,int) -> DaVa
    191:198:react.glang.GList getSortedCommands() -> uqJC
    203:210:int getPageSize(int) -> JkYS
    215:215:boolean isValidPage(int,int) -> HTQG
    220:229:react.glang.GList getPage(int,int) -> yknY
react.command.CommandMap -> uWWG:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
react.command.CommandMonitor -> ySBg:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
react.command.CommandReload -> SeWS:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
react.command.CommandReload$1 -> SeWS$1:
    react.command.CommandReload this$0 -> yJow
    org.bukkit.command.CommandSender val$sender -> awqQ
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> SeWS$1$1:
    react.command.CommandReload$1 this$1 -> vBGo
    org.bukkit.command.CommandSender val$sender -> awqQ
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> Hdvb:
    27:35:void <init>() -> <init>
    40:48:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
    52:61:org.bukkit.inventory.ItemStack makeBook() -> uWWG
    66:92:void addSpikePages(react.glang.GList) -> DaVa
    96:106:void addStatusPages(react.glang.GList) -> Mtah
    110:127:int findSlot(org.bukkit.entity.Player) -> DaVa
react.command.CommandVersion -> uFVB:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> HTQG
react.controller.ActionController -> rpPp:
    int kiv -> USJo
    react.glang.GMap actions -> OPxW
    react.glang.GMap pending -> bXpB
    react.glang.GList tasks -> nueS
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> HTQG
    83:136:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> yknY
    141:141:react.api.IAction getAction(react.api.ActionType) -> HTQG
    146:147:void registerAction(react.api.IAction) -> HTQG
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> ySBg
    241:248:react.glang.GList getActionNames() -> SeWS
react.controller.BenchmarkController -> CDgY:
    react.api.CPUBenchmark finished -> oWFS
    boolean done -> VgOa
    int score -> clhh
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    16:16:void access$0(react.controller.BenchmarkController,boolean) -> HTQG
    15:15:void access$1(react.controller.BenchmarkController,react.api.CPUBenchmark) -> HTQG
    15:15:react.api.CPUBenchmark access$2(react.controller.BenchmarkController) -> HTQG
react.controller.BenchmarkController$1 -> CDgY$1:
    react.controller.BenchmarkController this$0 -> oNTs
    1:26:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
    26:26:react.controller.BenchmarkController access$0(react.controller.BenchmarkController$1) -> HTQG
react.controller.BenchmarkController$1$1 -> CDgY$1$1:
    react.controller.BenchmarkController$1 this$1 -> AadP
    1:31:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
    31:31:react.controller.BenchmarkController$1 access$0(react.controller.BenchmarkController$1$1) -> HTQG
react.controller.BenchmarkController$1$1$1 -> CDgY$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> CNXX
    1:36:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> gpRE:
    react.glang.GMap rangeMapping -> yTAs
    react.binject.IBlockInjector injector -> xsBU
    boolean injected -> wfll
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> Hdvb
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> uFVB
    115:115:react.binject.IBlockInjector getInjector() -> rpPp
    120:120:boolean isInjected() -> CDgY
react.controller.ChronophyFluidController -> SeVm:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> jqJH:
    boolean firstTickList -> vdKK
    long firstTick -> ylra
    long lastTick -> Hevq
    react.gmath.Average aCSMS -> vdJg
    react.glang.GMap pluginLoads -> Hnha
    react.glang.GMap playerLoads -> GJFD
    int serverLoads -> FNqi
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> gpRE
    63:73:void tickNextTickList() -> SeVm
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> HTQG
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> HTQG
    171:171:boolean isFirstTickList() -> jqJH
    176:176:long getFirstTick() -> ofep
    181:181:long getLastTick() -> IFXU
    186:186:react.gmath.Average getaCSMS() -> WytE
    191:191:react.glang.GMap getPluginLoads() -> mWoN
    196:196:react.glang.GMap getPlayerLoads() -> XBBo
    201:201:int getServerLoads() -> qKIy
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> HTQG
    29:29:int access$1(react.controller.ChunkController) -> yknY
    29:29:void access$2(react.controller.ChunkController,int) -> HTQG
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> DaVa
react.controller.ChunkController$1 -> jqJH$1:
    react.controller.ChunkController this$0 -> XCFF
    org.bukkit.event.world.ChunkLoadEvent val$e -> gGAM
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> DaVa
    1:1:void run(java.lang.Object) -> HTQG
react.controller.CommandController -> ofep:
    react.glang.GList commands -> aDnP
    boolean k -> Wacy
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> qRsr
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> vbcw
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> HTQG
    317:317:react.glang.GList getCommands() -> wUPG
    322:323:void setCommands(react.glang.GList) -> qKFF
    327:327:boolean isK() -> cuJE
    332:333:void setK(boolean) -> vbcw
react.controller.EntityCullController -> IFXU:
    react.glang.GSet flags -> cCFE
    react.glang.GSet defer -> Nxly
    react.glang.GMap maxs -> VxUN
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> sQSk
    172:180:int cull(org.bukkit.Chunk) -> DaVa
    185:285:int partialCull(org.bukkit.Chunk) -> Mtah
react.controller.EntityStackController -> WytE:
    react.glang.GList stacks -> pjkx
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> hrnE
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> DaVa
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> Mtah
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> HTQG
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> HTQG
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> qKFF
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> HTQG
react.controller.EntityStackController$1 -> WytE$1:
    react.controller.EntityStackController this$0 -> QGBi
    org.bukkit.event.entity.EntitySpawnEvent val$e -> RIdj
    1:248:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> mWoN:
    react.glang.GMap slots -> OHlL
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> HTQG
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> HTQG
react.controller.ExplosiveController -> XBBo:
    boolean firstTickList -> vdKK
    long firstTick -> ylra
    long lastTick -> Hevq
    react.gmath.Average aCSMS -> vdJg
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> gpRE
    50:60:void tickNextTickList() -> SeVm
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> HTQG
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> HTQG
    89:89:boolean isFirstTickList() -> jqJH
    94:94:long getFirstTick() -> ofep
    99:99:long getLastTick() -> IFXU
    104:104:react.gmath.Average getaCSMS() -> WytE
react.controller.FastDecayController -> qKIy:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> HTQG
    47:128:void checkBreak(org.bukkit.block.Block) -> DaVa
    132:140:void decay(org.bukkit.block.Block) -> Mtah
    146:146:void tick() -> tick
react.controller.FastDecayController$1 -> qKIy$1:
    react.controller.FastDecayController this$0 -> xGpL
    react.glang.GMap val$locs -> TaLy
    1:61:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    66:66:boolean isAllowedSplooge(org.bukkit.Location) -> yknY
    72:72:boolean isAllowedSource(org.bukkit.Location) -> DaVa
    78:97:void clipped(org.bukkit.Location) -> HTQG
    102:125:void finished() -> finished
    61:61:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> HTQG
react.controller.FastDecayController$1$1 -> qKIy$1$1:
    react.controller.FastDecayController$1 this$1 -> yTDo
    react.glang.GMap val$locs -> TaLy
    int val$i -> Qhbo
    1:106:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    111:121:void run() -> run
react.controller.FastDecayController$2 -> qKIy$2:
    react.controller.FastDecayController this$0 -> xGpL
    org.bukkit.block.Block val$b -> NViG
    1:132:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    137:138:void run() -> run
react.controller.FeatureController -> wUPG:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.FluidController -> cuJE:
    react.glang.GSet ignore -> WbED
    int flowsPerTick -> gydE
    int flowsPerSecond -> uXXj
    react.gmath.Average aFST -> CVjr
    react.gmath.Average aFSS -> bsEX
    react.gmath.Average aFSMS -> WjUD
    boolean firstTickList -> vdKK
    long firstTick -> ylra
    long lastTick -> Hevq
    react.glang.GSet frozen -> vSLJ
    react.glang.GMap queue -> PLOH
    react.glang.GMap freezeTimes -> Gkfw
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> qKFF
    68:76:void checkChunks() -> DGkp
    80:97:void checkChunk(org.bukkit.Chunk) -> hrnE
    101:107:void queue(org.bukkit.block.Block) -> qKFF
    111:111:boolean isFrozen(org.bukkit.Chunk) -> IguI
    116:117:void freeze(org.bukkit.Chunk) -> mylb
    121:127:void unfreeze(org.bukkit.Chunk) -> qRsr
    131:138:void freeze(org.bukkit.Chunk,long) -> HTQG
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> gpRE
    172:182:void tickNextTickList() -> SeVm
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> HTQG
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> HTQG
    248:248:react.glang.GSet getIgnore() -> NflB
    253:253:int getTransfersPerTick() -> KoEI
    258:258:int getTransfersPerSecond() -> AiWA
    263:263:react.gmath.Average getaFST() -> JtRU
    268:268:react.gmath.Average getaFSS() -> flpK
    273:273:react.gmath.Average getaFSMS() -> BdIU
    278:278:boolean isFirstTickList() -> jqJH
    283:283:long getFirstTick() -> ofep
    288:288:long getLastTick() -> IFXU
    293:293:react.glang.GSet getFrozen() -> rNOt
    298:298:react.glang.GMap getQueue() -> UROE
    303:303:react.glang.GMap getFreezeTimes() -> kRMJ
react.controller.GlassController -> sQSk:
    react.glang.GMap q -> slDk
    react.glang.GList g -> iLdf
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> Mtah
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> qKFF
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> hrnE
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> HTQG
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> HTQG
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> HTQG
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> HTQG
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> HTQG
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> HTQG
    36:36:react.glang.GList access$0(react.controller.GlassController) -> HTQG
react.controller.GlassController$1 -> sQSk$1:
    react.controller.GlassController this$0 -> iMEf
    react.glang.GMap val$cc -> MdhD
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> sQSk$1$1:
    react.controller.GlassController$1 this$1 -> apCN
    org.bukkit.Location val$i -> WbEK
    org.bukkit.entity.Player val$j -> AGsQ
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> DGkp:
    react.glang.GMap g -> DILb
    react.glang.GMap gr -> wVMy
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> HTQG
    121:156:void toggleMapping(org.bukkit.entity.Player) -> IguI
    160:160:react.glang.GMap getG() -> skFQ
    165:165:react.glang.GMap getGr() -> wfPb
    31:31:react.glang.GMap access$0(react.controller.GraphController) -> HTQG
    30:30:react.glang.GMap access$1(react.controller.GraphController) -> yknY
react.controller.GraphController$1 -> DGkp$1:
    react.controller.GraphController this$0 -> mPaM
    1:48:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> DGkp$2:
    react.controller.GraphController this$0 -> mPaM
    1:84:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> DGkp$3:
    react.controller.GraphController this$0 -> mPaM
    org.bukkit.event.player.PlayerJoinEvent val$e -> BvKW
    1:100:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> NflB:
    react.glang.GSet ignore -> WbED
    int transfersPerTick -> Eecd
    int transfersPerSecond -> Jcpx
    react.gmath.Average aHST -> WbHL
    react.gmath.Average aHSS -> wwtE
    react.gmath.Average aHSMS -> neIm
    boolean firstTickList -> vdKK
    long firstTick -> ylra
    long lastTick -> Hevq
    react.glang.GSet frozen -> vSLJ
    react.glang.GMap queue -> PLOH
    react.glang.GMap freezeTimes -> Gkfw
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> qKFF
    65:73:void checkChunks() -> DGkp
    77:94:void checkChunk(org.bukkit.Chunk) -> hrnE
    98:104:void queue(org.bukkit.block.Block) -> qKFF
    108:108:boolean isFrozen(org.bukkit.Chunk) -> IguI
    113:114:void freeze(org.bukkit.Chunk) -> mylb
    118:124:void unfreeze(org.bukkit.Chunk) -> qRsr
    128:135:void freeze(org.bukkit.Chunk,long) -> HTQG
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> gpRE
    169:179:void tickNextTickList() -> SeVm
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> HTQG
    207:207:react.glang.GSet getIgnore() -> NflB
    212:212:int getTransfersPerTick() -> KoEI
    217:217:int getTransfersPerSecond() -> AiWA
    222:222:react.gmath.Average getaHST() -> OjOg
    227:227:react.gmath.Average getaHSS() -> cthp
    232:232:react.gmath.Average getaHSMS() -> RrxW
    237:237:boolean isFirstTickList() -> jqJH
    242:242:long getFirstTick() -> ofep
    247:247:long getLastTick() -> IFXU
    252:252:react.glang.GSet getFrozen() -> rNOt
    257:257:react.glang.GMap getQueue() -> UROE
    262:262:react.glang.GMap getFreezeTimes() -> kRMJ
react.controller.HopperOvertickController -> KoEI:
    react.glang.GList possiblePlunge -> pHkr
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> DaVa
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> HTQG
react.controller.LanguageController -> AiWA:
    java.io.File languageFolder -> ylxY
    int oldVersion -> yvKD
    java.io.File dlf -> HMJs
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> clXf
    160:221:void downloadAll(boolean) -> rUvu
    225:261:void downloadLanguage(java.lang.String) -> aKwB
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> TguA
    315:315:java.io.File getFileForLanguage(java.lang.String) -> YxDw
    320:332:void writeDefaults() -> SnKl
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> HTQG
    263:263:void access$1(react.controller.LanguageController) -> HTQG
react.controller.LanguageController$1 -> AiWA$1:
    react.controller.LanguageController this$0 -> WPed
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> AiWA$2:
    react.controller.LanguageController this$0 -> WPed
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> HTQG
react.controller.LanguageController$2$1 -> AiWA$2$1:
    react.controller.LanguageController$2 this$1 -> NhOI
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> HTQG
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> HTQG
    121:121:void onDownloadStarted(react.gnet.download.Download) -> HTQG
    126:128:void onDownloadFinished(react.gnet.download.Download) -> yknY
    134:134:void onDownloadFailed(react.gnet.download.Download) -> DaVa
react.controller.LanguageController$3 -> AiWA$3:
    react.controller.LanguageController this$0 -> WPed
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> AiWA$3$1:
    react.controller.LanguageController$3 this$1 -> awuT
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> AiWA$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> cTHm
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> AiWA$4:
    react.controller.LanguageController this$0 -> WPed
    java.io.File val$dld -> Rsyv
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> HTQG
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> HTQG
    245:245:void onDownloadStarted(react.gnet.download.Download) -> HTQG
    250:251:void onDownloadFinished(react.gnet.download.Download) -> yknY
    257:257:void onDownloadFailed(react.gnet.download.Download) -> DaVa
react.controller.MonitorController -> JtRU:
    int maxCooldown -> JcrR
    react.api.TitleMonitor titleMonitor -> wobw
    react.glang.GMap posts -> bYUu
    react.slate.PhantomSlate sb -> LixS
    boolean ready -> yJuI
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> bytl
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> mylb
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> qRsr
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> MBEW
    179:184:float calcVolume(react.api.ReactPlayer) -> HTQG
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> vbcw
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> rUvu
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> aKwB
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> TguA
    219:223:void startMonitoring(org.bukkit.entity.Player) -> YxDw
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> JkYS
    242:247:void startActionLogging(org.bukkit.entity.Player) -> HSqA
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> jxsq
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> yknY
    279:291:void processPlayer(react.api.ReactPlayer) -> DaVa
    296:296:void handleActionLog(org.bukkit.entity.Player) -> wDFB
    300:324:void handleTriggers(react.api.ReactPlayer) -> Mtah
    328:367:void handleScrolling(react.api.ReactPlayer) -> qKFF
    371:399:void handleShifting(react.api.ReactPlayer) -> hrnE
    403:425:void handlePosting(react.api.ReactPlayer) -> IguI
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> HTQG
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> HTQG
    471:481:void tickMonitor(react.api.ReactPlayer) -> mylb
    485:485:react.api.TitleMonitor getTitleMonitor() -> ooYp
    491:500:void on(org.bukkit.event.player.PlayerJoinEvent) -> HTQG
    505:514:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> HTQG
    519:532:void onTick() -> oVHW
    536:558:void updateActionBoard() -> SCVI
    563:563:java.lang.String getTickName() -> iuxc
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> HTQG
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> HTQG
    41:41:void access$2(react.controller.MonitorController,boolean) -> HTQG
    41:41:boolean access$3(react.controller.MonitorController) -> yknY
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> DaVa
react.controller.MonitorController$1 -> JtRU$1:
    react.controller.MonitorController this$0 -> cKUy
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> JtRU$2:
    react.controller.MonitorController this$0 -> cKUy
    1:536:void <init>(react.controller.MonitorController) -> <init>
    541:556:void run() -> run
react.controller.PhysicsController -> flpK:
    react.glang.GMap samples -> VEQL
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> vbcw
    51:52:void onHopper(org.bukkit.Chunk) -> rUvu
    56:57:void onFluid(org.bukkit.Chunk) -> aKwB
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> HTQG
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> HTQG
    80:91:void onTick() -> oVHW
    96:96:java.lang.String getTickName() -> iuxc
    101:101:react.glang.GMap getSamples() -> Vnak
react.controller.PlayerController -> BdIU:
    react.glang.GList players -> PwEC
    react.glang.GSet save -> rNpj
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> NxFW
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> HTQG
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> JkWX
    113:113:react.glang.GList getPlayers() -> AXVT
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> HTQG
react.controller.PlayerController$1 -> BdIU$1:
    react.controller.PlayerController this$0 -> VDom
    react.glang.GList val$toSave -> ghdW
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> rNOt:
    react.rai.IRAI rai -> NyNc
    boolean raiEnabled -> APgQ
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    20:20:react.rai.IRAI access$0(react.controller.RAIController) -> HTQG
react.controller.RAIController$1 -> rNOt$1:
    react.controller.RAIController this$0 -> BJxh
    1:48:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> UROE:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> DaVa
react.controller.ReactServerInfo -> kRMJ:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> ncdr
    27:27:int dgetGameProtocol() -> qAyo
    33:33:java.lang.String dgetGameVersion() -> KfSS
    39:39:java.lang.String dgetReactVersion() -> oUfi
    45:45:int dgetMaxPlayers() -> mqcg
    51:58:react.glang.GList dgetConnectedPlayers() -> QEcT
    64:64:int dgetViewDistance() -> rMrN
    70:70:int dgetGamePort() -> CVMU
    76:76:java.lang.String dgetGameAddress() -> HByC
    82:89:react.glang.GList dgetRemotePlugins() -> KeuA
    95:102:react.glang.GList dgetWorlds() -> MAft
    108:108:react.glang.GList dgetActions() -> gEbM
    114:114:react.glang.GList dgetSamplers() -> cRhB
react.controller.RedstoneController -> skFQ:
    react.glang.GSet ignore -> WbED
    react.glang.GSet frozen -> vSLJ
    react.glang.GMap queue -> PLOH
    react.glang.GMap freezeTimes -> Gkfw
    int redstonePerTick -> EKov
    int redstonePerSecond -> WYUY
    react.gmath.Average aRST -> TrOg
    react.gmath.Average aRSS -> qwBc
    react.gmath.Average aRSMS -> kcmv
    boolean firstTickList -> vdKK
    long firstTick -> ylra
    long lastTick -> Hevq
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> qKFF
    95:101:void tick() -> tick
    105:113:void checkChunks() -> DGkp
    117:134:void checkChunk(org.bukkit.Chunk) -> hrnE
    138:144:void queue(org.bukkit.block.Block) -> qKFF
    148:148:boolean isFrozen(org.bukkit.Chunk) -> IguI
    153:154:void freeze(org.bukkit.Chunk) -> mylb
    158:165:void flushTickList() -> gpRE
    169:179:void tickNextTickList() -> SeVm
    183:189:void unfreeze(org.bukkit.Chunk) -> qRsr
    193:200:void freeze(org.bukkit.Chunk,long) -> HTQG
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> HTQG
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> HTQG
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> HTQG
    246:246:react.glang.GSet getIgnore() -> NflB
    251:251:react.glang.GSet getFrozen() -> rNOt
    256:256:react.glang.GMap getQueue() -> UROE
    261:261:react.glang.GMap getFreezeTimes() -> kRMJ
    266:266:int getRedstonePerTick() -> QMtF
    271:271:int getRedstonePerSecond() -> QNUG
    276:276:react.gmath.Average getaRST() -> GHfp
    281:281:react.gmath.Average getaRSS() -> LWur
    286:286:react.gmath.Average getaRSMS() -> hbXY
    291:291:boolean isFirstTickList() -> jqJH
    296:296:long getFirstTick() -> ofep
    301:301:long getLastTick() -> IFXU
react.controller.RemoteController -> wfPb:
    react.remote.server.RemoteServer remoteServer -> xacf
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> WyxX
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> HTQG
react.controller.RemoteController$1 -> wfPb$1:
    react.controller.RemoteController this$0 -> uqlR
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> wfPb$2:
    react.controller.RemoteController this$0 -> uqlR
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> SLJY
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> FVfG
react.controller.SampleController -> OjOg:
    react.glang.GMap samplers -> TaMp
    react.surge.server.SuperSampler ss -> Vfrw
    int cd -> Qhef
    28:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> xWsY
    69:74:void restartSuperSampler() -> ryFf
    78:79:void registerSampler(react.api.ISampler) -> DaVa
    83:83:react.api.ISampler getSampler(java.lang.String) -> JkYS
    88:131:void constructSamplers() -> oEHr
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> wCnf
    187:209:void onTick() -> oVHW
    214:214:java.lang.String getTickName() -> iuxc
    219:219:react.glang.GMap getSamplers() -> qJnU
    224:224:react.surge.server.SuperSampler getSs() -> gNSQ
    229:229:int getCd() -> WWus
    234:241:react.glang.GList getSamplerNames() -> SCYY
    25:25:react.surge.server.SuperSampler access$0(react.controller.SampleController) -> HTQG
react.controller.SampleController$1 -> OjOg$1:
    react.controller.SampleController this$0 -> fvcB
    1:140:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> OjOg$2:
    react.controller.SampleController this$0 -> fvcB
    1:152:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> cthp:
    java.lang.String ipa -> mrfM
    react.glang.GList failures -> KVVM
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> HSqA
    41:74:void checkForIP() -> srvx
    78:91:void scan(java.lang.Runnable) -> HTQG
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> cthp$1:
    react.controller.SecurityController this$0 -> XCIi
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> cthp$2:
    java.lang.String val$ip -> xagX
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> cthp$3:
    java.lang.Thread val$t -> GRYt
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> RrxW:
    react.glang.GMap etl -> pbaB
    react.glang.GMap ttl -> iCxv
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> HTQG
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> HTQG
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> aKwB
    143:160:void releaseWorld(org.bukkit.World) -> TguA
    164:181:double getUniversalEntityTick() -> vbnq
    186:203:double getUniversalEntityLimit() -> ktQs
    208:225:double getUniversalTileLimit() -> MRia
    230:247:double getUniversalTileTick() -> MdLT
    252:264:double getUniversalEntityDroppedTicks() -> mqfq
    269:281:double getUniversalTileDroppedTicks() -> lCnj
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> HTQG
    301:312:void setTileTickLimit(org.bukkit.World,double) -> yknY
    316:321:double getEntityTickLimit(org.bukkit.World) -> YxDw
    326:331:double getTileTickLimit(org.bukkit.World) -> JkYS
    336:341:double getLastEntityTick(org.bukkit.World) -> HSqA
    346:351:double getLastTileTick(org.bukkit.World) -> jxsq
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> wDFB
    366:371:double getTileDroppedTicks(org.bukkit.World) -> NxFW
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> HTQG
react.controller.SpikeController -> clXf:
    react.glang.GMap spikes -> WXvu
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> oVHW
    111:111:java.lang.String getTickName() -> iuxc
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> rEaD
    128:160:void whoFuckingDidThis(react.glang.Callback) -> HTQG
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> HTQG
react.controller.SpikeController$1 -> clXf$1:
    react.controller.SpikeController this$0 -> XvMp
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> clXf$1$1:
    react.controller.SpikeController$1 this$1 -> kSRC
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> clXf$2:
    react.controller.SpikeController this$0 -> XvMp
    react.glang.GMap val$vv -> GIiQ
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> clXf$3:
    react.controller.SpikeController this$0 -> XvMp
    java.lang.Thread val$t -> GRYt
    react.glang.Callback val$callback -> IrSX
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> SnKl:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> bytl:
    12:12:void <init>() -> <init>
    17:23:void start() -> start
    28:34:void stop() -> stop
    40:40:void tick() -> tick
    45:46:void on(org.bukkit.event.world.WorldUnloadEvent) -> HTQG
react.event.ReactEvent -> MBEW:
    org.bukkit.event.HandlerList handlers -> WHWJ
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> ooYp:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> oVHW:
    react.event.ScrollDirection direction -> FykG
    boolean cancellled -> EefU
    int amount -> skjL
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> VMAu
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> ycgY
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> SCVI:
    react.event.ScrollDirection DOWN -> magS
    react.event.ScrollDirection UP -> qLPv
    react.event.ScrollDirection[] ENUM$VALUES -> lVTU
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.feature.INMSBinding -> iuxc:
    java.lang.String getPackageVersion() -> EKPo
react.feature.NMSBinding -> Vnak:
    java.lang.String packageVersion -> PfGP
    7:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> EKPo
react.feature.NMSBinding10 -> AXVT:
    7:8:void <init>(java.lang.String) -> <init>
react.feature.NMSBinding11 -> ncdr:
    7:8:void <init>(java.lang.String) -> <init>
react.feature.NMSBinding12 -> qAyo:
    7:8:void <init>(java.lang.String) -> <init>
react.feature.NMSBinding7 -> KfSS:
    7:8:void <init>(java.lang.String) -> <init>
react.feature.NMSBinding8 -> oUfi:
    7:8:void <init>(java.lang.String) -> <init>
react.feature.NMSBinding9 -> mqcg:
    7:8:void <init>(java.lang.String) -> <init>
react.gbench.Profiler -> QEcT:
    long nanos -> ECbG
    long startNano -> rWdU
    long millis -> Fpwr
    long startMillis -> nKXR
    double time -> UuTT
    boolean profiling -> vuSL
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> HSqA
    78:78:double getTicks() -> SBwH
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> mPCx
    93:93:double getHours() -> EdcN
    98:98:double getMilliseconds() -> mrFy
    103:103:long getNanoseconds() -> fKOL
    108:108:long getNanos() -> VTqX
    113:113:long getStartNano() -> ogJr
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> gNRO
    128:128:double getTime() -> rMot
    133:133:boolean isProfiling() -> dUjO
react.gconcurrent.A -> rMrN:
    react.gconcurrent.ParallelPoolManager mgr -> HLkU
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> rMrN$1:
    react.gconcurrent.A this$0 -> bQGT
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> CVMU:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> HByC:
    react.gconcurrent.QueueMode mode -> WXvp
    react.glang.GList threads -> wNBN
    int next -> uOkS
    int threadCount -> KgVq
    java.util.Queue squeue -> jPMO
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> bGtf
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> aoen
    22:23:void syncQueue(react.gconcurrent.Execution) -> HTQG
    long getNanoGate() -> xytt
    29:51:void tickSyncQueue() -> PvDy
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> XuLF
    102:109:int getTotalQueueSize() -> ghER
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> yknY
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> HwAU
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> AFvm
    161:188:void updateThreadInformation() -> ryIY
    192:224:react.gconcurrent.ParallelThread nextThread() -> PvGb
    229:235:void createThreads(int) -> jxsq
    239:239:react.gconcurrent.QueueMode getMode() -> bhxY
    244:244:int getNext() -> IiCK
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> JIak
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> lDRy
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> mrJc
react.gconcurrent.ParallelThread -> KeuA:
    java.util.Queue queue -> RIgm
    react.gconcurrent.ThreadInformation info -> bGtf
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> vbcw
    63:70:void execute(react.gconcurrent.Execution) -> DaVa
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> yknY
    92:92:java.util.Queue getQueue() -> tnNL
    97:97:react.gconcurrent.ThreadInformation getInfo() -> eHOk
react.gconcurrent.QueueMode -> MAft:
    react.gconcurrent.QueueMode ROUND_ROBIN -> OIOo
    react.gconcurrent.QueueMode SMALLEST -> tLkh
    react.gconcurrent.QueueMode[] ENUM$VALUES -> pbbg
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> gEbM:
    react.gconcurrent.ParallelPoolManager mgr -> HLkU
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> gEbM$1:
    react.gconcurrent.S this$0 -> ogon
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> cRhB:
    long tick -> KDub
    long atick -> jaRR
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> QMtF:
    double ticksPerSecond -> USUB
    int queuedSize -> YpbO
    boolean processing -> NWQS
    double utilization -> SoRM
    react.gmath.Average ticksPerSecondAverage -> IHAt
    long tick -> KDub
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> FVgg
    33:35:void setTicksPerSecond(double) -> rUvu
    39:39:int getQueuedSize() -> cdMK
    44:45:void setQueuedSize(int) -> wDFB
    49:49:boolean isProcessing() -> wetK
    54:55:void setProcessing(boolean) -> aKwB
    59:59:double getUtilization() -> MAjH
    64:65:void setUtilization(double) -> aKwB
    69:69:double getTicksPerSecondAverage() -> hPvu
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> skJT
    89:89:int getId() -> getId
react.gformat.F -> QNUG:
    java.text.NumberFormat NF -> HfaU
    java.text.DecimalFormat DF -> FNyE
    java.lang.String[] NAMES -> mQHi
    java.math.BigInteger THOUSAND -> OHqj
    java.util.NavigableMap MAP -> ptDl
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> jxsq
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> HTQG
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> HTQG
    201:221:java.lang.String timeLong(long,int) -> HTQG
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> DaVa
    236:236:java.lang.String b(double) -> TguA
    241:258:java.lang.String b(java.math.BigInteger) -> HTQG
    263:267:void instantiate() -> mGUf
    279:279:java.lang.String fileSize(long) -> Mtah
    292:292:java.lang.String memSize(long) -> qKFF
    305:306:java.lang.String stamp(long) -> hrnE
    322:349:java.lang.String ofSize(long,int) -> yknY
    363:368:java.lang.String trim(java.lang.String,int) -> yknY
    381:401:java.lang.String cname(java.lang.String) -> wDFB
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> IguI
    459:477:java.lang.String memx(long) -> mylb
    491:492:java.lang.String f(long) -> qRsr
    504:505:java.lang.String f(int) -> NxFW
    519:528:java.lang.String f(double,int) -> yknY
    544:553:java.lang.String fd(double,int) -> DaVa
    567:576:java.lang.String f(float,int) -> HTQG
    587:587:java.lang.String f(double) -> YxDw
    598:598:java.lang.String f(float) -> HTQG
    613:613:java.lang.String pc(double,int) -> Mtah
    628:628:java.lang.String pc(float,int) -> yknY
    641:641:java.lang.String pc(double) -> JkYS
    654:654:java.lang.String pc(float) -> yknY
    670:670:java.lang.String pc(int,int,int) -> HTQG
    684:684:java.lang.String pc(int,int) -> DaVa
    700:700:java.lang.String pc(long,long,int) -> HTQG
    714:714:java.lang.String pc(long,long) -> Mtah
    726:726:java.lang.String msSeconds(long) -> vbcw
    740:740:java.lang.String msSeconds(long,int) -> DaVa
    752:752:java.lang.String nsMs(long) -> rUvu
    766:766:java.lang.String nsMs(long,int) -> Mtah
    780:780:java.lang.String nsMsd(long,int) -> qKFF
react.glang.AccessCallback -> GHfp:
    java.lang.Object get() -> get
react.glang.Adapter -> LWur:
    java.lang.Object adapt(java.lang.Object) -> hrnE
    java.lang.Object onAdapt(java.lang.Object) -> IguI
react.glang.Callback -> hbXY:
    java.lang.Object t -> SgBI
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> HTQG
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> WyxX:
    double i -> fCcW
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> HSqA
react.glang.FinalFloat -> SLJY:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> DaVa
react.glang.FinalInteger -> FVfG:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> JkWX
react.glang.FinalLong -> xWsY:
    long i -> kKCQ
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> aKwB
react.glang.FinalString -> ryFf:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> oEHr:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> hrnE
    java.lang.Object onAdapt(java.lang.Object) -> IguI
react.glang.GBiset -> wCnf:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> CFQK
    java.lang.Object b -> oEkp
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> PCCl
    53:54:void setA(java.lang.Object) -> mylb
    63:63:java.lang.Object getB() -> cIyG
    73:74:void setB(java.lang.Object) -> qRsr
react.glang.GList -> qJnU:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> Mtah
    45:52:react.glang.GList grepDistance(int,int) -> qKFF
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> yknY
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> wCpn
    188:190:react.glang.GList shuffleCopy() -> lCqM
    198:199:void shuffle() -> YxOy
    210:236:react.glang.GList split() -> fvFJ
    248:248:boolean hasIndex(int) -> bGHg
    258:259:java.lang.Object pickRandom() -> tmke
    270:277:react.glang.GList stringList() -> kRQA
    288:292:void forEach(react.glang.Callback) -> yknY
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> bOYL
    336:336:react.glang.GList cropFrom(int) -> fKEA
    341:373:react.glang.GList split(int) -> XIlB
    389:389:react.glang.GList cropTo(int) -> sHYK
    406:416:react.glang.GList crop(int,int) -> hrnE
    427:431:react.glang.GList removeDuplicates() -> ytjn
    442:446:void removeAll(java.lang.Object) -> vbcw
    455:455:boolean hasDuplicates() -> Wyxw
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> SmnB
    484:490:void push(java.lang.Object,int) -> HTQG
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> rUvu
    528:532:void add(java.util.List) -> HTQG
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> WGUg
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> mOfB
    626:627:react.glang.GList qdel(java.lang.Object) -> aKwB
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> gxfu
    662:669:java.lang.Object popLast() -> XIxa
    674:683:java.lang.Object popRandom() -> hPuq
react.glang.GListAdapter -> gNSQ:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> yknY
    java.lang.Object onAdapt(java.lang.Object) -> IguI
react.glang.GMap -> WWus:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> iLJL
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> HTQG
    64:81:react.glang.GMap flip() -> fSaj
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> HTQG
    121:121:react.glang.GList k() -> bGHg
    131:131:react.glang.GSet kset() -> xiWG
    141:141:react.glang.GList v() -> JQrC
    151:151:react.glang.GSet vset() -> QpXs
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> yknY
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> IguI
    209:219:react.glang.GMap removeDuplicateValues() -> MIxv
    233:242:void put(react.glang.GList,react.glang.GList) -> HTQG
    251:267:react.glang.GList sortK() -> aCuA
    277:293:react.glang.GList sortV() -> IFaK
react.glang.GQuadraset -> SCYY:
    java.lang.Object a -> CFQK
    java.lang.Object b -> oEkp
    java.lang.Object c -> CyTG
    java.lang.Object d -> nBhn
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> PCCl
    25:26:void setA(java.lang.Object) -> mylb
    30:30:java.lang.Object getB() -> cIyG
    35:36:void setB(java.lang.Object) -> qRsr
    40:40:java.lang.Object getC() -> mFwX
    45:46:void setC(java.lang.Object) -> TguA
    50:50:java.lang.Object getD() -> qCDO
    55:56:void setD(java.lang.Object) -> YxDw
react.glang.GSet -> srvx:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> vbnq:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> CFQK
    java.lang.Object b -> oEkp
    java.lang.Object c -> CyTG
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> PCCl
    26:27:void setA(java.lang.Object) -> mylb
    31:31:java.lang.Object getB() -> cIyG
    36:37:void setB(java.lang.Object) -> qRsr
    41:41:java.lang.Object getC() -> mFwX
    46:47:void setC(java.lang.Object) -> TguA
react.gmath.Average -> ktQs:
    double[] values -> JArC
    double average -> lwxE
    boolean dirty -> RAYT
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> jxsq
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> awYj
react.gmath.DoubleArrayUtils -> MRia:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> HTQG
    17:19:void wrapRight(double[]) -> HTQG
    23:27:void fill(double[],double) -> fill
react.gmath.M -> MdLT:
    int precision -> oVme
    int modulus -> dqAV
    float[] sin -> USTL
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> HTQG
    31:36:boolean r(java.lang.Double) -> yknY
    51:51:double tps(long,int) -> hrnE
    63:63:double ticksFromNS(long) -> TguA
    75:101:java.lang.String toRoman(int) -> wwIL
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> IguI
    144:216:int fromRoman(java.lang.String) -> NxFW
    226:226:long ns() -> OGrB
    236:236:long ms() -> eXqy
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> yknY
    333:333:float sinLookup(int) -> uWOp
react.gnet.client.Client -> mqfq:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> tnmV
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> HTQG
    74:74:react.gnet.packet.PacketHandler getHandler() -> OHSJ
react.gnet.client.IClient -> lCnj:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> HTQG
    react.gnet.packet.PacketHandler getHandler() -> OHSJ
react.gnet.download.Download -> rEaD:
    react.gnet.download.DownloadState state -> EUGL
    react.gnet.download.DownloadType type -> ptCa
    react.gnet.download.DownloadStatus status -> wwwF
    react.gnet.download.DownloadMonitor monitor -> AbMS
    java.net.URL url -> url
    java.io.File file -> vuTd
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> IXCh
    92:92:react.gnet.download.DownloadType getType() -> HLPC
    97:97:react.gnet.download.DownloadStatus getStatus() -> aoJV
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> EeJD
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> VMAu:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> HTQG
    void onDownloadStarted(react.gnet.download.Download) -> HTQG
    void onDownloadFinished(react.gnet.download.Download) -> yknY
    void onDownloadFailed(react.gnet.download.Download) -> DaVa
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> HTQG
react.gnet.download.DownloadState -> ycgY:
    react.gnet.download.DownloadState IDLE -> kBQB
    react.gnet.download.DownloadState DOWNLOADING -> MTNE
    react.gnet.download.DownloadState FAILED -> rhgY
    react.gnet.download.DownloadState FINISHED -> FOXn
    react.gnet.download.DownloadState[] $VALUES -> kJdV
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> EKPo:
    long bytesDownloaded -> dgrY
    long bytesTotal -> GlPr
    long bytesPerSecond -> brnE
    long timeElapsed -> Ojvj
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> EeJE
    25:25:long getBytesDownloaded() -> Xtoh
    30:31:void setBytesDownloaded(long) -> YxDw
    35:35:long getBytesTotal() -> ndND
    40:41:void setBytesTotal(long) -> JkYS
    45:45:long getBytesPerSecond() -> NxUE
    50:51:void setBytesPerSecond(long) -> HSqA
    55:55:long getTimeElapsed() -> vlEB
    60:61:void setTimeElapsed(long) -> jxsq
react.gnet.download.DownloadType -> SBwH:
    react.gnet.download.DownloadType DETERMINATE -> iMOf
    react.gnet.download.DownloadType INDETERMINATE -> VEWm
    react.gnet.download.DownloadType[] $VALUES -> PKwD
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> mPCx:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> JcVB
    java.lang.String getPacketName() -> TNpD
react.gnet.packet.IncompatablePacketException -> EdcN:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> mrFy:
    react.gnet.packet.PacketBinding SERVER_BOUND -> fUFy
    react.gnet.packet.PacketBinding CLIENT_BOUND -> Cxun
    react.gnet.packet.PacketBinding[] $VALUES -> VpKw
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> fKOL:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> VTqX:
    react.glang.GList accept -> ndoU
    react.gnet.packet.PacketBinding side -> rFgn
    react.gnet.streams.OSS out -> JdXq
    react.gnet.streams.ISS in -> DHtb
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> HTQG
    28:34:void accept(react.gnet.packet.IPacket) -> yknY
    38:46:react.gnet.packet.IPacket findPacket(int) -> FpMY
    51:66:react.gnet.packet.IPacket read() -> NobI
    71:77:void write(react.gnet.packet.IPacket) -> DaVa
react.gnet.packet.UnhandledPacketException -> ogJr:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> gNRO:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> OHSJ
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> Mtah
react.gnet.server.Server -> rMot:
    int port -> port
    java.net.ServerSocket socket -> kmGk
    react.gnet.packet.PacketHandler handler -> tnmV
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> OHSJ
    37:84:void run() -> run
    88:91:void pstart() -> LPIr
    95:96:void pstop() -> vtTo
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> Mtah
react.gnet.streams.ISS -> dUjO:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> SoSh
    boolean built -> gylc
    byte[] readBuffer -> oxsX
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> vIQl
    64:72:react.glang.GList readStringList() -> vQqO
    77:85:react.glang.GList readDoubleList() -> esDs
    90:98:react.glang.GList readLongList() -> JlFu
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> HTQG
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> HTQG
    136:137:react.gnet.streams.ISS gzip() -> baKI
    142:147:void build() -> EKUb
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> yknY
    435:436:void close() -> close
react.gnet.streams.OSS -> xytt:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> jaTJ
    react.gnet.streams.StreamBuilder bu -> SoSh
    boolean built -> gylc
    byte[] writeBuffer -> NWTC
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> cIjx
    41:42:react.gnet.streams.OSS gzip(int) -> Jbff
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> yknY
    53:58:void build() -> EKUb
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> mylb
    102:108:void writeDoubleList(react.glang.GList) -> qRsr
    112:118:void writeLongList(react.glang.GList) -> vbcw
    122:128:void writeStreamableList(react.glang.GList) -> rUvu
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> gWHA
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> DaVa
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> PvDy:
    react.glang.GList constructors -> PKvt
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> HTQG
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> HTQG
    49:50:void bind(react.gnet.streams.StreamConstructor) -> HTQG
    54:55:void bindGZIP(int) -> pjDR
    59:60:void bindGZIP() -> MAkU
    64:65:void bindCipher(javax.crypto.Cipher) -> DaVa
    69:70:void bindBuffer(int) -> mhme
    74:75:void bindBuffer() -> vkcY
react.gnet.streams.StreamConstructor -> XuLF:
    java.io.InputStream constructInput(java.io.InputStream) -> HTQG
    java.io.OutputStream constructOutput(java.io.OutputStream) -> HTQG
react.gnet.streams.constructors.BufferedStreamConstructor -> ghER:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> yknY
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> yknY
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> HTQG
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> HTQG
react.gnet.streams.constructors.CipherStreamConstructor -> HwAU:
    javax.crypto.Cipher cipher -> vAqp
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> DaVa
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> DaVa
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> HTQG
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> HTQG
react.gnet.streams.constructors.GZipStreamConstructor -> AFvm:
    int compressionLevel -> IrXK
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> Mtah
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> Mtah
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> HTQG
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> HTQG
react.gnet.streams.overlays.CGZIPInputStream -> ryIY:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> PvGb:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> bhxY:
    void toBytes(react.gnet.streams.OSS) -> HTQG
    void fromBytes(react.gnet.streams.ISS) -> HTQG
react.graph.ColossalView -> IiCK:
    react.papyrus.BufferedFrame view -> RJMn
    react.glang.GMap buffers -> vJbe
    react.glang.GMap graphs -> NpdO
    double level -> fKtU
    double targetLevel -> SxDM
    int maxX -> JAtE
    int maxY -> ffHK
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> gggs
    51:77:void render() -> UIcJ
    81:98:void scroll(int) -> RapM
    102:112:void recompile() -> BBLn
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> HTQG
    122:122:react.papyrus.BufferedFrame getView() -> xqiW
    127:127:react.glang.GMap getBuffers() -> ObGY
    132:132:react.glang.GMap getGraphs() -> Orgi
    137:137:double getLevel() -> eXsk
    142:142:double getTargetLevel() -> OsIE
    147:147:int getMaxX() -> DYVh
    152:152:int getMaxY() -> TqWH
react.graph.ColossalView$Builder -> IiCK$HTQG:
    react.glang.GList graphs -> WPiv
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> HTQG
    171:191:react.graph.ColossalView compute() -> XSNs
react.graph.CubicleIterator -> JIak:
    int[][] mapping -> pYsE
    int xCubes -> oyRo
    int yCubes -> ogoy
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> tSpI
    47:130:void insert(react.graph.GraphSize,int) -> HTQG
    134:145:void print() -> print
react.graph.GraphSampleLine -> lDRy:
    double lx -> bGyH
    double ly -> QGJR
    react.api.ISampler sampler -> ghis
    react.graph.IFormatter formatter -> TOqp
    byte graphColor -> NWRb
    byte backgroundColor -> TGag
    byte borderColor -> uXcv
    byte textColor -> htae
    int ticksLeftTitle -> COES
    int ticksOutTitle -> ECiQ
    double nextPoint -> BTQx
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> AXOk
    51:183:void onRender(react.papyrus.BufferedFrame) -> HTQG
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> yknY
    226:254:int getHue(int,int,int) -> DaVa
    259:281:void scaleFor(react.glang.GList) -> aKwB
    285:285:react.graph.IFormatter getFormatter() -> BteK
    290:291:void setFormatter(react.graph.IFormatter) -> HTQG
    295:295:byte getGraphColor() -> yAkX
    300:301:void setGraphColor(byte) -> HTQG
    305:305:byte getBackgroundColor() -> KoLt
    310:311:void setBackgroundColor(byte) -> yknY
    315:315:byte getBorderColor() -> KDXq
    320:321:void setBorderColor(byte) -> DaVa
    325:325:byte getTextColor() -> QhNL
    330:331:void setTextColor(byte) -> Mtah
    335:335:react.api.ISampler getSampler() -> aDXN
react.graph.GraphSize -> mrJc:
    react.graph.GraphSize WIDE -> XmcN
    react.graph.GraphSize FULL -> eAEN
    react.graph.GraphSize SQUARE -> cdpr
    int[] $SWITCH_TABLE$react$graph$GraphSize -> QiOb
    react.graph.GraphSize[] ENUM$VALUES -> OHup
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> PJwP
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> bPLX
react.graph.GraphText -> tnNL:
    java.lang.String text -> text
    byte fontColor -> MCQQ
    byte backgroundColor -> TGag
    boolean wrote -> ifcH
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> HTQG
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> PvLe
    68:69:void setFontColor(byte) -> qKFF
    73:73:byte getBackgroundColor() -> KoLt
    78:79:void setBackgroundColor(byte) -> yknY
react.graph.GraphingInstance -> eHOk:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> WPiv
    react.graph.ColossalView view -> aNJv
    react.papyrus.Papyrus papyrus -> riLu
    react.papyrus.IRenderer renderer -> lEXc
    boolean mapping -> xaWP
    react.glang.GList msgs -> vBTh
    react.surge.sched.Task waiter -> uYDn
    react.surge.sched.Task waiter2 -> BCPT
    int shift -> manH
    boolean notif -> gWlI
    47:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> HTQG
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> HTQG
    138:142:void send(java.lang.String) -> JkWX
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> HTQG
    153:165:void on(react.event.ReactScrollEvent) -> HTQG
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> HTQG
    179:187:void destroy() -> destroy
    191:200:void toggle() -> piuG
    204:205:void setGraphs(react.glang.GList) -> TguA
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> eQDh
    243:259:void compile() -> NUqQ
    40:40:boolean access$0(react.graph.GraphingInstance) -> HTQG
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> yknY
    45:45:boolean access$2(react.graph.GraphingInstance) -> DaVa
    45:45:void access$3(react.graph.GraphingInstance,boolean) -> HTQG
    44:44:int access$4(react.graph.GraphingInstance) -> Mtah
    44:44:void access$5(react.graph.GraphingInstance,int) -> HTQG
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> qKFF
react.graph.GraphingInstance$1 -> eHOk$1:
    react.graph.GraphingInstance this$0 -> GlTN
    org.bukkit.entity.Player val$player -> vBUQ
    1:51:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> eHOk$2:
    react.graph.GraphingInstance this$0 -> GlTN
    1:76:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> eHOk$3:
    react.graph.GraphingInstance this$0 -> GlTN
    1:106:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> HTQG
react.graph.IFormatter -> FVgg:
    java.lang.String from(double) -> wDFB
react.graph.IGraph -> cdMK:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> bOie
    long getTimeViewport() -> TiEP
    void render(react.papyrus.BufferedFrame) -> DaVa
    double getMax() -> getMax
    void setMax(double) -> NxFW
react.graph.NormalGraph -> wetK:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> tgCC
    long timeViewport -> GdAh
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> bOie
    35:35:long getTimeViewport() -> TiEP
    41:42:void render(react.papyrus.BufferedFrame) -> DaVa
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> NxFW
    void onRender(react.papyrus.BufferedFrame) -> HTQG
react.graph.PlotBoard -> MAjH:
    react.glang.GMap plots -> kAtU
    int maxRecordings -> VUyh
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> YEPG
    33:33:long getAccurateTimeSpan() -> Aqoq
    38:50:long getMedian(long,long) -> qKFF
    55:55:long getMinimumAccuracyRange() -> Drgh
    60:70:double getMaxValue() -> rghw
    75:85:double getMinValue() -> JRWD
    90:90:react.glang.GList sort(react.glang.GMap) -> yknY
    95:105:long earilestRecording() -> WPKb
    110:120:long latestRecording() -> Hmrg
    125:126:void reduceBefore(long) -> wDFB
    130:156:void reduceBetween(long,long) -> hrnE
    160:160:boolean before(long,long) -> IguI
    165:165:boolean after(long,long) -> mylb
    170:170:boolean within(long,long,long) -> HTQG
    175:193:react.glang.GMap getBetween(long,long) -> qRsr
    198:200:void plot(long,double) -> HTQG
    204:204:boolean hasAt(long) -> NxFW
    209:209:double getAt(long) -> JkWX
    214:214:int getSize() -> getSize
react.graph.Point -> hPvu:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> skJT:
    int iid -> uieO
    react.graph.IGraph graph -> bQLc
    react.graph.GraphSize size -> TXdl
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> TqUw
    24:25:void setGraph(react.graph.IGraph) -> HTQG
    29:29:react.graph.GraphSize getSize() -> WqnD
    34:35:void setSize(react.graph.GraphSize) -> HTQG
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> mGUf:
    react.graph.RenderMaxType UNLIMITED -> nSoI
    react.graph.RenderMaxType LIMITED -> fKvS
    react.graph.RenderMaxType[] ENUM$VALUES -> IigS
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> PCCl:
    java.lang.String CRLF -> tLnq
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> bGHg
    162:198:java.lang.String toString(react.json.JSONObject) -> yknY
react.json.HTTPTokener -> cIyG:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> wCpn:
    java.util.ArrayList myArrayList -> fCeh
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> HTQG
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> ctbR
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> JQgp
    394:399:react.json.JSONObject getJSONObject(int) -> samf
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> bOYL
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> Ixwx
    515:515:boolean optBoolean(int) -> CEBh
    533:536:boolean optBoolean(int,boolean) -> yknY
    551:551:double optDouble(int) -> erYD
    569:572:double optDouble(int,double) -> HTQG
    587:587:int optInt(int) -> kbfx
    605:608:int optInt(int,int) -> mylb
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> yknY
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> HTQG
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> HTQG
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> HTQG
    722:723:react.json.JSONArray optJSONArray(int) -> EmNE
    737:738:react.json.JSONObject optJSONObject(int) -> bynd
    752:752:long optLong(int) -> TFRc
    770:773:long optLong(int,long) -> HTQG
    788:788:java.lang.String optString(int) -> BteK
    803:804:java.lang.String optString(int,java.lang.String) -> HTQG
    816:817:react.json.JSONArray put(boolean) -> TguA
    830:831:react.json.JSONArray put(java.util.Collection) -> HTQG
    845:848:react.json.JSONArray put(double) -> JkWX
    860:861:react.json.JSONArray put(int) -> GjaG
    873:874:react.json.JSONArray put(long) -> bGHg
    887:888:react.json.JSONArray put(java.util.Map) -> HTQG
    902:903:react.json.JSONArray put(java.lang.Object) -> JkYS
    921:922:react.json.JSONArray put(int,boolean) -> DaVa
    939:940:react.json.JSONArray put(int,java.util.Collection) -> HTQG
    958:959:react.json.JSONArray put(int,double) -> yknY
    977:978:react.json.JSONArray put(int,int) -> qRsr
    996:997:react.json.JSONArray put(int,long) -> yknY
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> HTQG
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> HTQG
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> HSqA
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> HTQG
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> HTQG
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> HTQG
react.json.JSONException -> lCqM:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> ioST
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> YxOy:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> HTQG
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> fKEA
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> HTQG
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> yknY
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> bGHg
    379:456:java.lang.String toString(react.json.JSONArray) -> yknY
    472:552:java.lang.String toString(react.json.JSONObject) -> yknY
react.json.JSONObject -> fvFJ:
    java.util.Map map -> map
    java.lang.Object NULL -> HwfL
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> HTQG
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> yknY
    480:499:java.lang.String doubleToString(double) -> bGHg
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> XIlB
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> sHYK
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> wwIL
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> DaVa
    751:767:java.lang.String[] getNames(java.lang.Object) -> jxsq
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> uWOp
    855:855:boolean isNull(java.lang.String) -> FpMY
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> LOlC
    917:937:java.lang.String numberToString(java.lang.Number) -> HTQG
    949:949:java.lang.Object opt(java.lang.String) -> vIQl
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> HTQG
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> HTQG
    1018:1018:boolean optBoolean(java.lang.String) -> cIjx
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> HTQG
    1054:1054:double optDouble(java.lang.String) -> Jbff
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> HTQG
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> HTQG
    1116:1119:double optDouble(java.lang.String,double) -> HTQG
    1134:1134:int optInt(java.lang.String) -> pjDR
    1152:1155:int optInt(java.lang.String,int) -> DaVa
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> mhme
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> RapM
    1198:1198:long optLong(java.lang.String) -> tSpI
    1216:1219:long optLong(java.lang.String,long) -> HTQG
    1234:1234:java.lang.String optString(java.lang.String) -> ctbR
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> yknY
    1255:1305:void populateMap(java.lang.Object) -> wDFB
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> yknY
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> HTQG
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> yknY
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> Mtah
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> yknY
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> HTQG
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> DaVa
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> Mtah
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> qKFF
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> HTQG
    1590:1590:java.lang.Object remove(java.lang.String) -> JQgp
    1605:1640:boolean similar(java.lang.Object) -> HSqA
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> NxFW
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> DaVa
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> HTQG
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> HTQG
    2000:2004:void indent(java.io.Writer,int) -> HTQG
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> HTQG
react.json.JSONObject$Null -> fvFJ$HTQG:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> tmke:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> kRQA:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> ytjn:
    long character -> kuYY
    boolean eof -> eof
    long index -> nCNC
    long line -> Evlv
    char previous -> CWUe
    java.io.Reader reader -> reader
    boolean usePrevious -> EfLg
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> RjoT
    119:131:int dehexchar(char) -> HTQG
    136:136:boolean end() -> dDnc
    147:153:boolean more() -> ArPb
    164:198:char next() -> next
    213:218:char next(char) -> yknY
    233:250:java.lang.String next(int) -> XdAW
    263:266:char nextClean() -> qJtD
    287:334:java.lang.String nextString(char) -> DaVa
    349:361:java.lang.String nextTo(char) -> Mtah
    376:388:java.lang.String nextTo(java.lang.String) -> samf
    403:441:java.lang.Object nextValue() -> XlaA
    458:479:char skipTo(char) -> qKFF
    491:491:react.json.JSONException syntaxError(java.lang.String) -> Ixwx
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> Wyxw:
    int maxdepth -> nCNG
    boolean comma -> ynAS
    char mode -> oguq
    react.json.JSONObject[] stack -> vmLK
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> CEBh
    157:164:react.json.JSONWriter array() -> rVgn
    180:193:react.json.JSONWriter end(char,char) -> HTQG
    206:206:react.json.JSONWriter endArray() -> ivbD
    219:219:react.json.JSONWriter endObject() -> SUCg
    235:258:react.json.JSONWriter key(java.lang.String) -> erYD
    274:285:react.json.JSONWriter object() -> bPNI
    299:310:void pop(char) -> hrnE
    322:329:void push(react.json.JSONObject) -> Mtah
    342:342:react.json.JSONWriter value(boolean) -> YxDw
    356:356:react.json.JSONWriter value(double) -> bOYL
    369:369:react.json.JSONWriter value(long) -> bOYL
    385:385:react.json.JSONWriter value(java.lang.Object) -> JkWX
react.json.XML -> SmnB:
    java.lang.Character AMP -> nLBU
    java.lang.Character APOS -> DbkQ
    java.lang.Character BANG -> tfeC
    java.lang.Character EQ -> yutW
    java.lang.Character GT -> qKyR
    java.lang.Character LT -> dphB
    java.lang.Character QUEST -> Jllt
    java.lang.Character QUOT -> nSqj
    java.lang.Character SLASH -> HDdX
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> kbfx
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> HTQG
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> bGHg
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> WGUg:
    java.util.HashMap entity -> eIWn
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> ycou
    108:133:java.lang.Object nextContent() -> feJr
    149:166:java.lang.Object nextEntity(char) -> IguI
    186:239:java.lang.Object nextMeta() -> rxoF
    261:334:java.lang.Object nextToken() -> ntsG
    354:420:boolean skipPast(java.lang.String) -> EmNE
react.papyrus.BufferedFrame -> mOfB:
    byte[][] frame -> HfhD
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> HTQG
    90:97:void write(byte) -> hrnE
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> HTQG
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> HTQG
    131:145:java.awt.image.BufferedImage toBufferedImage() -> vlIq
    153:160:void writeRainbowMul() -> IOVY
    167:174:void writeRainbowAdd() -> UAVv
    181:191:void writeSparks() -> xOkm
    195:201:boolean write(int,int,byte) -> HTQG
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> HTQG
    233:250:void write(react.papyrus.BufferedFrame) -> Mtah
    254:254:byte[][] getRawFrame() -> bOla
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> gxfu:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> Mtah
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> HTQG
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> XIxa:
    org.bukkit.map.MapView getView() -> QVlp
    react.papyrus.BufferedFrame getFrameBuffer() -> HTdK
    void addRenderer(react.papyrus.IRenderer) -> HTQG
    void clearRenderers() -> klJL
    react.glang.GList getRenderers() -> vkgu
    void removeRenderer(react.papyrus.IRenderer) -> yknY
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> WjAk
react.papyrus.IRenderer -> hPuq:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> HTQG
react.papyrus.Papyrus -> iLJL:
    org.bukkit.map.MapView map -> dVuW
    react.papyrus.BufferedFrame frameBuffer -> pAFc
    react.papyrus.BufferedFrame lastFrameBuffer -> BeUT
    react.glang.GList renderers -> urYD
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> QVlp
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> HTdK
    51:52:void addRenderer(react.papyrus.IRenderer) -> HTQG
    57:58:void clearRenderers() -> klJL
    63:63:react.glang.GList getRenderers() -> vkgu
    69:70:void removeRenderer(react.papyrus.IRenderer) -> yknY
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> WjAk
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> HTQG
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> yknY
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> DaVa
react.papyrus.Papyrus$1 -> iLJL$1:
    react.papyrus.Papyrus this$0 -> YEsO
    org.bukkit.map.MapCanvas val$c -> pIVR
    org.bukkit.map.MapView val$v -> EDJl
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> fSaj:
    int spaceSize -> UJgw
    java.lang.String fontChars -> Djyw
    int[][] fontData -> OskG
    react.papyrus.ReactFont Font -> WbQR
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> xiWG:
    react.glang.GList subgoals -> tfdB
    java.lang.String tag -> BSsy
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> MdTM
    26:44:void propigate() -> quji
    49:50:void addGoal(react.rai.IGoal) -> HTQG
    55:65:react.glang.GList getFailingSubgoals() -> ggmT
    71:71:boolean isFailing() -> BJaA
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> HefC
    void onPropigated() -> FEmK
react.rai.Goal$1 -> xiWG$1:
    react.rai.Goal this$0 -> wMjS
    react.rai.IGoal val$i -> mrqD
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> JQrC:
    react.glang.GList getSubgoals() -> MdTM
    void propigate() -> quji
    void onPropigated() -> FEmK
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> ggmT
    boolean isFailing() -> BJaA
    boolean onCheckFailing() -> HefC
    void update() -> update
    void addGoal(react.rai.IGoal) -> HTQG
react.rai.IRAI -> QpXs:
    react.glang.GList getGoals() -> jWde
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> HTQG
    react.glang.GList getEvents() -> NpGL
    void callEvent(react.rai.RAIEvent) -> HTQG
    react.glang.GList getListeners() -> jyfh
react.rai.RAI -> MIxv:
    react.glang.GList goals -> htcQ
    react.glang.GList events -> Pelb
    react.glang.GList logEvents -> fekL
    react.glang.GList listeners -> TiiI
    long since -> WbQc
    react.rai.RAI instance -> nnCj
    21:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> jWde
    41:42:void addGoal(react.rai.IGoal) -> HTQG
    47:69:void tick() -> tick
    74:74:react.glang.GList getEvents() -> NpGL
    80:87:void callEvent(react.rai.RAIEvent) -> HTQG
    92:92:react.glang.GList getListeners() -> jyfh
react.rai.RAIEvent -> aCuA:
    react.rai.RAIEventType type -> ndqa
    java.lang.String[] pars -> qvlI
    java.lang.String ovt -> AQRK
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> DYXH
    29:29:java.lang.String[] getPars() -> NpGR
    34:34:java.lang.String getOvt() -> Hmsx
react.rai.RAIEventType -> IFaK:
    react.rai.RAIEventType FIRE_ACTION -> jHDn
    react.rai.RAIEventType NOTE_GOAL_FAILING -> ObjP
    react.rai.RAIEventType NOTE_GOAL_FIXED -> Xutn
    java.lang.String[] msgs -> CFUs
    react.rai.RAIEventType[] ENUM$VALUES -> yeVB
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> Fgmv
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> HTQG
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedChunkLoad -> mFwX:
    boolean failing -> axax
    24:27:void <init>() -> <init>
    34:60:boolean onCheckFailing() -> HefC
    66:79:void onPropigated() -> FEmK
react.rai.goals.GoalReducedChunkLoad$1 -> mFwX$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> kAxt
    1:42:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    47:56:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> mFwX$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> kAxt
    1:68:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    73:76:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> qCDO:
    boolean failing -> axax
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> HefC
    91:134:void onPropigated() -> FEmK
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> HTQG
react.rai.goals.GoalReducedEntityCounts$1 -> qCDO$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> kKKb
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> qCDO$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> kKKb
    org.bukkit.Chunk val$lx -> LYby
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> awYj:
    boolean failing -> axax
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> HefC
    78:128:void onPropigated() -> FEmK
react.rai.goals.GoalStableChunkTime$1 -> awYj$1:
    react.rai.goals.GoalStableChunkTime this$0 -> MBsl
    1:54:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> awYj$2:
    react.rai.goals.GoalStableChunkTime this$0 -> MBsl
    java.lang.Object val$i -> toXV
    1:111:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> OGrB:
    boolean failing -> axax
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> FEmK
    35:35:void letUp() -> eXuE
    40:77:boolean onCheckFailing() -> HefC
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> HTQG
react.rai.goals.GoalStableEntityTime$1 -> OGrB$1:
    react.rai.goals.GoalStableEntityTime this$0 -> hRcX
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> eXqy:
    boolean failing -> axax
    react.glang.GMap reocc -> MSvF
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> FEmK
    88:125:boolean onCheckFailing() -> HefC
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> HTQG
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> yknY
react.rai.goals.GoalStableFluidTime$1 -> eXqy$1:
    react.rai.goals.GoalStableFluidTime this$0 -> qwOo
    org.bukkit.Chunk val$lx -> LYby
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> eXqy$2:
    react.rai.goals.GoalStableFluidTime this$0 -> qwOo
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> OHSJ:
    boolean failing -> axax
    react.glang.GMap reocc -> MSvF
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> FEmK
    89:125:boolean onCheckFailing() -> HefC
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> HTQG
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> yknY
react.rai.goals.GoalStableHopperTime$1 -> OHSJ$1:
    react.rai.goals.GoalStableHopperTime this$0 -> jijM
    org.bukkit.Chunk val$lx -> LYby
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> OHSJ$2:
    react.rai.goals.GoalStableHopperTime this$0 -> jijM
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> IXCh:
    boolean failing -> axax
    react.glang.GMap reocc -> MSvF
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> FEmK
    89:126:boolean onCheckFailing() -> HefC
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> HTQG
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> yknY
react.rai.goals.GoalStableRedstoneTime$1 -> IXCh$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> MnIX
    org.bukkit.Chunk val$lx -> LYby
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> IXCh$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> MnIX
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> HLPC:
    boolean failing -> axax
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> FEmK
    34:58:boolean onCheckFailing() -> HefC
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> HTQG
react.rai.goals.GoalStableTickTime$1 -> HLPC$1:
    react.rai.goals.GoalStableTickTime this$0 -> JJmB
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> aoJV:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> qenF
    boolean authenticated -> RJSw
    react.remote.server.ServerInfo info -> QObA
    react.glang.GMap frems -> KyEO
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> AXOk
    51:51:react.glang.GMap getFrames() -> GtDF
    56:75:int computeFrames() -> qeIp
    80:92:boolean clearToken() -> BdUB
    97:110:boolean updateServerInfo() -> WjAG
    115:129:boolean refreshToken() -> ESin
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> DaVa
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> MmCs
    165:165:boolean isAuthenticated() -> TyiA
    170:170:react.remote.server.ServerInfo getInfo() -> lLhP
react.remote.client.packet.CPacketClearToken -> EeJD:
    java.lang.String token -> qenF
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> HTQG
    33:34:void fromBytes(react.gnet.streams.ISS) -> HTQG
    38:38:java.lang.String getToken() -> MmCs
    43:44:void setToken(java.lang.String) -> bynd
react.remote.client.packet.CPacketComputeFrames -> EeJE:
    java.lang.String token -> qenF
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> HTQG
    33:34:void fromBytes(react.gnet.streams.ISS) -> HTQG
    38:38:java.lang.String getToken() -> MmCs
    43:44:void setToken(java.lang.String) -> bynd
react.remote.client.packet.CPacketGetInfo -> Xtoh:
    java.lang.String token -> qenF
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> HTQG
    33:34:void fromBytes(react.gnet.streams.ISS) -> HTQG
    38:38:java.lang.String getToken() -> MmCs
    43:44:void setToken(java.lang.String) -> bynd
react.remote.client.packet.CPacketGetToken -> ndND:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> HTQG
    36:38:void fromBytes(react.gnet.streams.ISS) -> HTQG
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> NxUE:
    java.lang.String token -> qenF
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> HTQG
    33:34:void fromBytes(react.gnet.streams.ISS) -> HTQG
    38:38:java.lang.String getToken() -> MmCs
    43:44:void setToken(java.lang.String) -> bynd
react.remote.client.packet.ClientPacket -> vlEB:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> HTQG
    void fromBytes(react.gnet.streams.ISS) -> HTQG
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> JcVB
    42:42:java.lang.String getPacketName() -> TNpD
react.remote.client.packet.ClientPacketType -> JcVB:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> txHo
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> sktD
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> wxaI
    react.remote.client.packet.ClientPacketType GET_INFO -> bQQt
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> aMll
    react.remote.client.packet.ClientPacketType[] $VALUES -> dyYq
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> TNpD:
    react.glang.GMap compute(long,long) -> DaVa
react.remote.server.KnownUser -> NobI:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> LPIr:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> HTQG
    38:41:void fromBytes(react.gnet.streams.ISS) -> HTQG
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> vtTo:
    react.glang.GList users -> AYdh
    react.glang.GMap session -> MTUT
    react.glang.GMap lastCompute -> vKIh
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> SLJY
    44:45:void registerUser(react.remote.server.KnownUser) -> HTQG
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> yknY
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> TFRc
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> Mtah
    react.remote.server.IFrameComputer getFrameComputer() -> FVfG
    170:171:void markLastCompute(react.remote.server.KnownUser) -> DaVa
    175:180:long getLastCompute(react.remote.server.KnownUser) -> Mtah
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> HTQG
    190:191:void deleteSession(react.remote.server.KnownUser) -> qKFF
    195:195:java.lang.String createToken() -> ifCQ
react.remote.server.ServerInfo -> vQqO:
    java.lang.String motd -> GRca
    int gameProtocol -> Iijr
    java.lang.String gameVersion -> qfNX
    java.lang.String reactVersion -> HEEw
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> EoBI
    int viewDistance -> viewDistance
    int gamePort -> YVvt
    java.lang.String gameAddress -> ArvR
    react.glang.GList remotePlugins -> FhsH
    react.glang.GList worlds -> fDKf
    react.glang.GList actions -> vJgs
    react.glang.GList samplers -> etLu
    26:26:react.remote.server.ServerInfo empty() -> ogSe
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> HTQG
    146:159:void fromBytes(react.gnet.streams.ISS) -> HTQG
    java.lang.String dgetMotd() -> ncdr
    int dgetGameProtocol() -> qAyo
    java.lang.String dgetGameVersion() -> KfSS
    java.lang.String dgetReactVersion() -> oUfi
    int dgetMaxPlayers() -> mqcg
    react.glang.GList dgetConnectedPlayers() -> QEcT
    int dgetViewDistance() -> rMrN
    int dgetGamePort() -> CVMU
    java.lang.String dgetGameAddress() -> HByC
    react.glang.GList dgetRemotePlugins() -> KeuA
    react.glang.GList dgetWorlds() -> MAft
    react.glang.GList dgetActions() -> gEbM
    react.glang.GList dgetSamplers() -> cRhB
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> KMLF
    199:199:java.lang.String getGameVersion() -> hYmk
    204:204:java.lang.String getReactVersion() -> HmwR
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> tfFI
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> xqqS
    229:229:java.lang.String getGameAddress() -> nKAy
    234:234:react.glang.GList getRemotePlugins() -> Knop
    239:239:react.glang.GList getWorlds() -> KgAP
    244:244:react.glang.GList getActions() -> ySBg
    249:249:react.glang.GList getSamplers() -> oxYM
react.remote.server.ServerInfo$1 -> vQqO$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> MAft
    37:37:int dgetViewDistance() -> rMrN
    43:43:react.glang.GList dgetRemotePlugins() -> KeuA
    49:49:java.lang.String dgetReactVersion() -> oUfi
    55:55:java.lang.String dgetMotd() -> ncdr
    61:61:int dgetMaxPlayers() -> mqcg
    67:67:java.lang.String dgetGameVersion() -> KfSS
    73:73:int dgetGameProtocol() -> qAyo
    79:79:int dgetGamePort() -> CVMU
    85:85:java.lang.String dgetGameAddress() -> HByC
    91:91:react.glang.GList dgetConnectedPlayers() -> QEcT
    97:97:react.glang.GList dgetActions() -> gEbM
    103:103:react.glang.GList dgetSamplers() -> cRhB
react.remote.server.packet.ComputedFrame -> esDs:
    react.glang.GMap values -> eHwk
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> HTQG
    28:36:void fromBytes(react.gnet.streams.ISS) -> HTQG
    40:40:react.glang.GMap getValues() -> GsfB
    45:46:void setValues(react.glang.GMap) -> DaVa
react.remote.server.packet.SPacketOk -> JlFu:
    boolean ok -> cLDM
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> HTQG
    33:34:void fromBytes(react.gnet.streams.ISS) -> HTQG
    38:38:boolean isOk() -> mqrF
    43:44:void setOk(boolean) -> JkYS
react.remote.server.packet.SPacketSendFrames -> baKI:
    react.glang.GMap frames -> gXOk
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> HTQG
    36:44:void fromBytes(react.gnet.streams.ISS) -> HTQG
    48:48:react.glang.GMap getFrames() -> GtDF
    53:54:void setFrames(react.glang.GMap) -> Mtah
react.remote.server.packet.SPacketSendInfo -> EKUb:
    react.remote.server.ServerInfo info -> QObA
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> HTQG
    33:34:void fromBytes(react.gnet.streams.ISS) -> HTQG
    38:38:react.remote.server.ServerInfo getInfo() -> lLhP
    43:44:void setInfo(react.remote.server.ServerInfo) -> HTQG
react.remote.server.packet.SPacketSendToken -> gWHA:
    java.lang.String token -> qenF
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> HTQG
    33:34:void fromBytes(react.gnet.streams.ISS) -> HTQG
    38:38:java.lang.String getToken() -> MmCs
    43:44:void setToken(java.lang.String) -> bynd
react.remote.server.packet.ServerPacket -> MAkU:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> HTQG
    void fromBytes(react.gnet.streams.ISS) -> HTQG
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> JcVB
    42:42:java.lang.String getPacketName() -> TNpD
react.remote.server.packet.ServerPacketType -> vkcY:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> cuvW
    react.remote.server.packet.ServerPacketType SEND_INFO -> GtgW
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> YWWo
    react.remote.server.packet.ServerPacketType OK -> qUKr
    react.remote.server.packet.ServerPacketType[] $VALUES -> FXUD
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> gggs:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleAsyncQueue$1 -> gggs$1:
    react.sampler.SampleAsyncQueue this$0 -> kvAi
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleChunkTime -> UIcJ:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleChunkTime$1 -> UIcJ$1:
    react.sampler.SampleChunkTime this$0 -> qeok
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleChunksLoaded -> BBLn:
    react.graph.IFormatter formatter -> TOqp
    17:27:void <init>() -> <init>
    32:38:void construct() -> DjIR
    43:44:void sample() -> AXOk
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleChunksLoaded$1 -> BBLn$1:
    react.sampler.SampleChunksLoaded this$0 -> QGRi
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> wDFB
react.sampler.SampleChunksLoadedPerSecond -> xqiW:
    react.gmath.Average a -> Fqfh
    react.graph.IFormatter formatter -> TOqp
    16:29:void <init>() -> <init>
    34:40:void construct() -> DjIR
    45:47:void sample() -> AXOk
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleChunksLoadedPerSecond$1 -> xqiW$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> HUih
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> wDFB
react.sampler.SampleEntitiesDrops -> ObGY:
    react.graph.IFormatter formatter -> TOqp
    17:27:void <init>() -> <init>
    32:38:void construct() -> DjIR
    43:44:void sample() -> AXOk
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleEntitiesDrops$1 -> ObGY$1:
    react.sampler.SampleEntitiesDrops this$0 -> gObX
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> wDFB
react.sampler.SampleEntitiesLiving -> Orgi:
    react.graph.IFormatter formatter -> TOqp
    17:27:void <init>() -> <init>
    32:38:void construct() -> DjIR
    43:44:void sample() -> AXOk
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleEntitiesLiving$1 -> Orgi$1:
    react.sampler.SampleEntitiesLiving this$0 -> JdaY
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> wDFB
react.sampler.SampleEntitiesTiles -> eXsk:
    react.graph.IFormatter formatter -> TOqp
    17:27:void <init>() -> <init>
    32:38:void construct() -> DjIR
    43:44:void sample() -> AXOk
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleEntitiesTiles$1 -> eXsk$1:
    react.sampler.SampleEntitiesTiles this$0 -> aotB
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> wDFB
react.sampler.SampleEntitiesTotal -> OsIE:
    react.graph.IFormatter formatter -> TOqp
    17:27:void <init>() -> <init>
    32:38:void construct() -> DjIR
    43:44:void sample() -> AXOk
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleEntitiesTotal$1 -> OsIE$1:
    react.sampler.SampleEntitiesTotal this$0 -> ceYV
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> wDFB
react.sampler.SampleEntityDroppedTicks -> DYVh:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleEntityDroppedTicks$1 -> DYVh$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> SLws
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleEntityTime -> TqWH:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleEntityTime$1 -> TqWH$1:
    react.sampler.SampleEntityTime this$0 -> KyGP
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleEntityTimeLock -> XSNs:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleEntityTimeLock$1 -> XSNs$1:
    react.sampler.SampleEntityTimeLock this$0 -> PfRn
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleExplosionTime -> yAkX:
    react.graph.IFormatter formatter -> TOqp
    17:27:void <init>() -> <init>
    32:38:void construct() -> DjIR
    43:44:void sample() -> AXOk
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleExplosionTime$1 -> yAkX$1:
    react.sampler.SampleExplosionTime this$0 -> dOIt
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> wDFB
react.sampler.SampleFluidPerSecond -> KoLt:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleFluidPerSecond$1 -> KoLt$1:
    react.sampler.SampleFluidPerSecond this$0 -> suGq
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleFluidPerTick -> KDXq:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    46:53:void sample() -> AXOk
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleFluidPerTick$1 -> KDXq$1:
    react.sampler.SampleFluidPerTick this$0 -> PLaC
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleFluidTickTime -> QhNL:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleFluidTickTime$1 -> QhNL$1:
    react.sampler.SampleFluidTickTime this$0 -> pHxu
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleFluidTickUtilization -> aDXN:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    46:53:void sample() -> AXOk
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleFluidTickUtilization$1 -> aDXN$1:
    react.sampler.SampleFluidTickUtilization this$0 -> AIFX
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleHopperPerSecond -> PJwP:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleHopperPerSecond$1 -> PJwP$1:
    react.sampler.SampleHopperPerSecond this$0 -> masU
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleHopperPerTick -> bPLX:
    react.graph.IFormatter formatter -> TOqp
    18:29:void <init>() -> <init>
    34:40:void construct() -> DjIR
    47:54:void sample() -> AXOk
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleHopperPerTick$1 -> bPLX$1:
    react.sampler.SampleHopperPerTick this$0 -> ndvV
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleHopperTickTime -> PvLe:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleHopperTickTime$1 -> PvLe$1:
    react.sampler.SampleHopperTickTime this$0 -> AbWo
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleHopperTickUtilization -> piuG:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    46:53:void sample() -> AXOk
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleHopperTickUtilization$1 -> piuG$1:
    react.sampler.SampleHopperTickUtilization this$0 -> pbkv
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleMemoryAllocated -> eQDh:
    react.graph.IFormatter formatter -> TOqp
    17:27:void <init>() -> <init>
    32:38:void construct() -> DjIR
    43:44:void sample() -> AXOk
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleMemoryAllocated$1 -> eQDh$1:
    react.sampler.SampleMemoryAllocated this$0 -> jOxk
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> wDFB
react.sampler.SampleMemoryAllocationPerSecond -> NUqQ:
    react.graph.IFormatter formatter -> TOqp
    17:27:void <init>() -> <init>
    32:38:void construct() -> DjIR
    43:44:void sample() -> AXOk
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleMemoryAllocationPerSecond$1 -> NUqQ$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> nuxK
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> wDFB
react.sampler.SampleMemoryFree -> bOie:
    react.graph.IFormatter formatter -> TOqp
    17:27:void <init>() -> <init>
    32:38:void construct() -> DjIR
    43:44:void sample() -> AXOk
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleMemoryFree$1 -> bOie$1:
    react.sampler.SampleMemoryFree this$0 -> GSGH
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> wDFB
react.sampler.SampleMemoryMax -> TiEP:
    react.graph.IFormatter formatter -> TOqp
    17:27:void <init>() -> <init>
    32:38:void construct() -> DjIR
    43:44:void sample() -> AXOk
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleMemoryMax$1 -> TiEP$1:
    react.sampler.SampleMemoryMax this$0 -> GRfJ
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> wDFB
react.sampler.SampleMemoryUse -> YEPG:
    react.graph.IFormatter formatter -> TOqp
    17:27:void <init>() -> <init>
    32:38:void construct() -> DjIR
    43:44:void sample() -> AXOk
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleMemoryUse$1 -> YEPG$1:
    react.sampler.SampleMemoryUse this$0 -> Iilx
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> wDFB
react.sampler.SampleRedstonePerSecond -> Aqoq:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleRedstonePerSecond$1 -> Aqoq$1:
    react.sampler.SampleRedstonePerSecond this$0 -> nKci
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleRedstonePerTick -> Drgh:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    46:53:void sample() -> AXOk
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleRedstonePerTick$1 -> Drgh$1:
    react.sampler.SampleRedstonePerTick this$0 -> tnxE
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleRedstoneTickTime -> rghw:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleRedstoneTickTime$1 -> rghw$1:
    react.sampler.SampleRedstoneTickTime this$0 -> nKcf
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleRedstoneTickUtilization -> JRWD:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    46:53:void sample() -> AXOk
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleRedstoneTickUtilization$1 -> JRWD$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> dNgx
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleSyncQueue -> WPKb:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleSyncQueue$1 -> WPKb$1:
    react.sampler.SampleSyncQueue this$0 -> esmw
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleTickTime -> Hmrg:
    react.graph.IFormatter formatter -> TOqp
    react.gmath.Average aa -> ymeq
    17:29:void <init>() -> <init>
    34:40:void construct() -> DjIR
    45:47:void sample() -> AXOk
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleTickTime$1 -> Hmrg$1:
    react.sampler.SampleTickTime this$0 -> tnwk
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> wDFB
react.sampler.SampleTickUtilization -> TqUw:
    react.graph.IFormatter formatter -> TOqp
    react.gmath.Average aa -> ymeq
    17:29:void <init>() -> <init>
    34:40:void construct() -> DjIR
    45:47:void sample() -> AXOk
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleTickUtilization$1 -> TqUw$1:
    react.sampler.SampleTickUtilization this$0 -> VMoi
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> wDFB
react.sampler.SampleTicksPerSecond -> WqnD:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleTicksPerSecond$1 -> WqnD$1:
    react.sampler.SampleTicksPerSecond this$0 -> GAeF
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleTileDroppedTicks -> LOlC:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleTileDroppedTicks$1 -> LOlC$1:
    react.sampler.SampleTileDroppedTicks this$0 -> sIrK
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleTileTime -> RjoT:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleTileTime$1 -> RjoT$1:
    react.sampler.SampleTileTime this$0 -> VhDD
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.sampler.SampleTileTimeLock -> dDnc:
    react.graph.IFormatter formatter -> TOqp
    18:28:void <init>() -> <init>
    33:39:void construct() -> DjIR
    44:45:void sample() -> AXOk
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> BteK
react.sampler.SampleTileTimeLock$1 -> dDnc$1:
    react.sampler.SampleTileTimeLock this$0 -> GSFy
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> wDFB
react.security.checkpoints.SecurityCheckpointAlpha -> ArPb:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> CpJj
    78:148:void doScan(java.lang.Runnable) -> yknY
    152:181:byte[] readResource(java.io.File,java.lang.String) -> HTQG
    186:217:react.glang.GMap scan(java.io.File) -> yknY
    150:150:byte[] access$0(java.io.File,java.lang.String) -> yknY
react.security.checkpoints.SecurityCheckpointAlpha$1 -> ArPb$1:
    java.lang.Runnable val$r -> SxOP
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> ArPb$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> rWtC
    java.lang.Runnable val$r -> SxOP
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> qJtD:
    java.lang.String ip -> Kgej
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> XlaA:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> XlaA$1:
    react.security.locks.SecurityLockAlpha this$0 -> apUu
    java.io.File val$f -> BBws
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> rVgn:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> bGHg
react.slate.PhantomSlate -> ivbD:
    react.glang.GList lines -> bPtn
    react.glang.GList viewers -> EoFe
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> KWEd
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> IylI
    44:45:void set(int,java.lang.String) -> yknY
    50:51:void setLines(react.glang.GList) -> YxDw
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> EKUb
    91:95:void addViewer(org.bukkit.entity.Player) -> bGHg
    100:102:void removeViewer(org.bukkit.entity.Player) -> bOYL
    107:107:react.glang.GList getViewers() -> brRc
    113:113:boolean isViewing(org.bukkit.entity.Player) -> fKEA
    119:120:void addLine(java.lang.String) -> BteK
    125:126:void clearLines() -> scAq
react.slate.Slate -> SUCg:
    void build() -> EKUb
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> IylI
    void set(int,java.lang.String) -> yknY
    void setLines(react.glang.GList) -> YxDw
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> bGHg
    void addLine(java.lang.String) -> BteK
    void clearLines() -> scAq
    void removeViewer(org.bukkit.entity.Player) -> bOYL
    react.glang.GList getViewers() -> brRc
    boolean isViewing(org.bukkit.entity.Player) -> fKEA
    void update() -> update
react.slate.SlateUtil -> bPNI:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> Svgv
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> CVVj
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> HTQG
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> yknY
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> DaVa
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> HTQG
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> HTQG
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> yknY
    186:196:java.lang.String convertJSON(java.lang.String) -> GjaG
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> yknY
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> HTQG
react.surge.Main -> ycou:
    react.glang.GList plugins -> PLbR
    react.glang.GMap pluginInstances -> yuyq
    react.glang.GList controllerSet -> mYex
    react.glang.GMap anchors -> eQmc
    react.glang.GList classes -> yeYU
    java.lang.reflect.Field nsField -> GdLB
    java.lang.reflect.Field thField -> fCpO
    react.glang.GList tracks -> PMBu
    long nsf -> tUiH
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> ivgB
    90:109:long getNanoSync() -> VxAp
    114:115:void requestResetNanos() -> uWep
    119:127:void requestReload() -> gyQk
    131:134:void requestReload(java.lang.Runnable) -> DaVa
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> HTQG
    201:218:void onStop() -> Orlb
    224:224:void onPostInit() -> tLSC
    230:230:void onPreInit() -> YoiH
    234:245:void shutDownAmps() -> hYon
    249:458:void initializeAmps() -> kQwa
    463:504:void doScan() -> vQwP
    508:530:void scanForPoolDefiners() -> NpHg
    534:550:void scanForRawEvents() -> YxXe
    554:570:void scanForDynamicTrack() -> AHAr
    574:595:void scanForAmps() -> SKsJ
    600:611:void onTick() -> oVHW
react.surge.Main$1 -> ycou$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> feJr:
    react.surge.control.AmpedPlugin plugin -> cnKx
    boolean connected -> connected
    int masterTask -> pALe
    17:21:void <init>(react.surge.control.AmpedPlugin) -> <init>
    25:25:react.surge.control.AmpedPlugin getPluginInstance() -> CUvv
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> qeLS
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> HTQG
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> HTQG
    113:114:void stopTask(int) -> DjIR
    57:57:void access$0(react.surge.PluginAmp) -> HTQG
react.surge.PluginAmp$1 -> feJr$1:
    react.surge.PluginAmp this$0 -> WQVm
    1:37:void <init>(react.surge.PluginAmp) -> <init>
    42:44:void run() -> run
react.surge.PluginAmp$2 -> feJr$2:
    react.surge.PluginAmp this$0 -> WQVm
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:53:void run() -> run
react.surge.Surge -> rxoF:
    react.surge.PluginAmp amp -> Bmkd
    react.glang.GList tickComponents -> rFql
    react.glang.GList atickComponents -> LPvp
    react.surge.sched.TaskManager taskmgr -> gqfM
    react.surge.hotload.HotloadManager hotloadmgr -> ahDf
    java.lang.Thread mainThread -> VyGD
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> HTQG
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> XdAW
    44:44:java.io.File folder() -> PBjK
    49:51:java.io.File getPluginJarFile() -> tTbP
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> Mtah
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> PSke
    74:74:react.glang.GList getTickComponents() -> EeNg
    79:79:react.glang.GList getAsyncTickComponents() -> rWLr
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> HTQG
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> yknY
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> HTQG
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> vAUs
    126:126:boolean hasAmp() -> bOnS
    131:131:react.surge.PluginAmp getAmp() -> KgBi
    136:136:react.surge.sched.TaskManager getTaskManager() -> YfyV
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> rgqS
react.surge.cluster.Cluster -> ntsG:
    react.surge.cluster.ClusterType type -> VVcE
    java.lang.Object t -> SgBI
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> AHCY
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> vlIq:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> IOVY:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> UAVv:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> xOkm:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> bOla:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> QVlp:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> HTdK:
    react.surge.cluster.ClusterType INT -> mHcd
    react.surge.cluster.ClusterType BOOLEAN -> gFrR
    react.surge.cluster.ClusterType STRING -> LryJ
    react.surge.cluster.ClusterType STRING_LIST -> xHas
    react.surge.cluster.ClusterType DOUBLE -> QiWO
    react.surge.cluster.ClusterType LONG -> qnbQ
    react.surge.cluster.ClusterType[] ENUM$VALUES -> Qhuy
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> klJL:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> dOJo
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> HTQG
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> HTQG
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> oEUv
react.surge.cluster.ConfigurationDataOutput -> vkgu:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> yknY
react.surge.cluster.DataCluster -> WjAk:
    react.glang.GMap clusters -> VNRq
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> QOAe
    29:33:void fromJson(react.json.JSONObject) -> qKFF
    37:44:react.json.JSONObject toJson() -> MmIJ
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> DQLf
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> HTQG
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> AXOk
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> hrnE
    194:195:void set(java.lang.String,int) -> qKFF
    199:200:void set(java.lang.String,boolean) -> DaVa
    204:205:void set(java.lang.String,double) -> DaVa
    209:210:void set(java.lang.String,long) -> DaVa
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> HTQG
react.surge.cluster.ICluster -> MdTM:
    react.surge.cluster.ClusterType getType() -> AHCY
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> quji:
react.surge.cluster.IDataInput -> ggmT:
    react.surge.cluster.DataCluster read(java.io.File) -> DaVa
react.surge.cluster.IDataOutput -> BJaA:
    void write(react.surge.cluster.DataCluster,java.io.File) -> HTQG
react.surge.cluster.Key -> HefC:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> FEmK:
    int value() -> value
react.surge.cluster.KeyStore -> jWde:
react.surge.cluster.ReflectedConfigurationException -> NpGL:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> jyfh:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> DaVa
react.surge.cluster.YamlDataOutput -> DYXH:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> HTQG
react.surge.collection.GSound -> NpGR:
    java.lang.String sound -> FFsr
    org.bukkit.Sound iSound -> Ljjp
    java.lang.Float volume -> wovT
    java.lang.Float pitch -> lFCy
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> XIlB
    61:72:void play(org.bukkit.Location) -> qKFF
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> HTQG
    93:93:java.lang.String getSound() -> iLVL
    98:99:void setSound(java.lang.String) -> DjIR
    103:103:org.bukkit.Sound getiSound() -> RHsS
    108:109:void setiSound(org.bukkit.Sound) -> HTQG
    113:113:java.lang.Float getVolume() -> jpyt
    118:119:void setVolume(java.lang.Float) -> HTQG
    123:123:java.lang.Float getPitch() -> ebMN
    128:129:void setPitch(java.lang.Float) -> yknY
react.surge.control.AmpedPlugin -> Hmsx:
    react.glang.GList controllers -> YNnD
    react.gconcurrent.ParallelPoolManager pp -> KMuS
    react.surge.server.CoreTickThread ctt -> CqRm
    24:50:void <init>() -> <init>
    void doScan() -> vQwP
    long getNanoSync() -> VxAp
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:97:void onDisable() -> onDisable
    102:102:react.glang.GList getControllers() -> OamO
    108:109:void registerController(react.surge.control.IController) -> HTQG
    114:125:void onTick() -> oVHW
    130:130:java.lang.String getTickName() -> iuxc
    136:136:react.gconcurrent.ParallelPoolManager getThreadPool() -> PmaV
    142:257:void destroyOldThreads() -> nRsT
    void onControllerRegistry() -> ivgB
    void onStart(react.surge.util.Protocol) -> HTQG
    void onStop() -> Orlb
    void onPostInit() -> tLSC
    void onPreInit() -> YoiH
react.surge.control.AmpedPlugin$1 -> Hmsx$1:
    react.surge.control.AmpedPlugin this$0 -> pssM
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> xytt
react.surge.control.AmpedPlugin$2 -> Hmsx$2:
    react.surge.control.AmpedPlugin this$0 -> pssM
    1:155:void <init>(react.surge.control.AmpedPlugin) -> <init>
    160:250:void run() -> run
react.surge.control.Control -> Fgmv:
react.surge.control.Controller -> eXuE:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> GtDF:
react.surge.control.Enable -> qeIp:
react.surge.control.IController -> BdUB:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> WjAG:
react.surge.control.Plugin -> ESin:
react.surge.control.SurgePlugin -> MmCs:
    void onStart(react.surge.util.Protocol) -> HTQG
    void onStop() -> Orlb
    void onPostInit() -> tLSC
    void onPreInit() -> YoiH
    void onControllerRegistry() -> ivgB
    void registerController(react.surge.control.IController) -> HTQG
    react.glang.GList getControllers() -> OamO
    react.gconcurrent.ParallelPoolManager getThreadPool() -> PmaV
react.surge.hotload.HotloadManager -> TyiA:
    react.glang.GMap filemods -> lNUN
    react.glang.GMap filesizes -> VWFh
    react.glang.GMap fileacts -> cmld
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> HTQG
    35:38:void untrack(java.io.File) -> Mtah
    42:45:void untrackall() -> jWhb
    50:86:void onTick() -> oVHW
    91:91:java.lang.String getTickName() -> iuxc
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> HTQG
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> yknY
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> DaVa
react.surge.hotload.HotloadManager$1 -> TyiA$1:
    react.surge.hotload.HotloadManager this$0 -> Uuel
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> lLhP:
    boolean init -> USbl
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> TsCx
    java.lang.Class IChatBaseComponent -> wxgJ
    java.lang.Class ChatSerializer -> PUVB
    java.lang.Class PacketPlayOutPlayerInfo -> nTYx
    java.lang.Class PlayerInfoData -> RIyS
    java.lang.Class EnumPlayerInfoAction -> suLK
    java.lang.Class GameProfile -> KWHT
    java.lang.Class EnumGamemode -> Yyax
    java.lang.Class TileEntitySkull -> CNpD
    java.lang.Class LoadingCache -> gWuU
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> ifCQ:
    react.surge.nms.NMSX bountifulAPI -> QOen
    boolean useOldMethods -> uHLm
    java.lang.String nmsver -> etRn
    java.lang.Object eTimes -> NONO
    java.lang.Object eTitle -> qvtn
    java.lang.Object eSubtitle -> iwmy
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> HTQG
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> fBUw
    75:89:java.lang.Class getCBClass(java.lang.String) -> rMgp
    96:104:java.lang.Object serializeChat(java.lang.String) -> hbMw
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> yknY
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> HTQG
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> SfIu
    151:151:java.lang.String craftPackage() -> APRj
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> HTQG
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> HTQG
    197:207:java.lang.Class getNMSClass(java.lang.String) -> Vvlk
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> HTQG
    279:280:void clearTitle(org.bukkit.entity.Player) -> sHYK
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> yknY
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> HTQG
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> HTQG
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> CDcG
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> hrnE
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> qRsr
    434:447:int ping(org.bukkit.entity.Player) -> wwIL
react.surge.nms.NMSX$1 -> ifCQ$1:
    org.bukkit.entity.Player val$player -> vBUQ
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> ifCQ$2:
    org.bukkit.entity.Player val$player -> vBUQ
    java.lang.String val$message -> mPvL
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> ogSe:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> maSG
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> HTQG
    68:82:void clearTitle(org.bukkit.entity.Player) -> sHYK
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> HTQG
react.surge.nms.PacketUtil$V -> ogSe$HTQG:
    react.surge.nms.PacketUtil$V R17 -> qDPw
    react.surge.nms.PacketUtil$V R18 -> GuNM
    react.surge.nms.PacketUtil$V R19 -> nmkN
    react.surge.nms.PacketUtil$V R111 -> RJYS
    react.surge.nms.PacketUtil$V R110 -> huLD
    react.surge.nms.PacketUtil$V R112 -> ifks
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> YppX
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> KMLF:
    java.lang.String title -> title
    java.lang.String subTitle -> UJqL
    java.lang.String action -> action
    java.lang.Integer fadeIn -> OstN
    java.lang.Integer fadeOut -> wouF
    java.lang.Integer stayTime -> rWwh
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> uWOp
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> RkVx
    79:80:void setSubTitle(java.lang.String) -> RQQX
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> twHm
    99:100:void setFadeIn(java.lang.Integer) -> DaVa
    104:104:java.lang.Integer getFadeOut() -> QVrF
    109:110:void setFadeOut(java.lang.Integer) -> Mtah
    114:114:java.lang.Integer getStayTime() -> woPM
    119:120:void setStayTime(java.lang.Integer) -> qKFF
react.surge.nms.VersionBukkit -> hYmk:
    react.surge.nms.VersionBukkit VU -> vBbH
    react.surge.nms.VersionBukkit V7 -> JuiD
    react.surge.nms.VersionBukkit V8 -> AYlL
    react.surge.nms.VersionBukkit V9 -> IjTx
    react.surge.nms.VersionBukkit V11 -> mkMJ
    react.surge.nms.VersionBukkit V111 -> UTFU
    react.surge.nms.VersionBukkit V112 -> BKmY
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> EUWr
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> xqrS
    27:32:boolean uc() -> dMei
    37:67:react.surge.nms.VersionBukkit get() -> sjrk
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> HmwR:
    void burst(java.lang.Object) -> bGHg
    void setTimeLock(double) -> fKEA
    double getEstimatedTimeUse() -> dUuo
    int flush() -> yleP
    int flush(react.gbench.Profiler) -> HTQG
    void queue(java.lang.Object) -> bOYL
    void queue(java.util.List) -> DaVa
    void queue(java.lang.Object[]) -> HTQG
react.surge.sched.ICancellable -> tfFI:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> xqqS:
    void onTick() -> oVHW
    java.lang.String getTickName() -> iuxc
react.surge.sched.ITask -> nKAy:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> gWPW
    java.lang.String getName() -> getName
    double getComputeTime() -> uhhf
    double getTotalComputeTime() -> LaTB
    double getActiveTime() -> fCJr
    boolean hasCompleted() -> loPf
react.surge.sched.Task -> Knop:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> GtpL
    double computeTime -> YNos
    double totalComputeTime -> CiDp
    double activeTime -> rGVh
    boolean completed -> completed
    react.gbench.Profiler profiler -> Hobq
    react.gbench.Profiler activeProfiler -> GBMF
    int ticks -> NXBt
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> Mtah
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> gWPW
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> uhhf
    150:150:boolean hasCompleted() -> loPf
    156:156:double getTotalComputeTime() -> LaTB
    162:162:double getActiveTime() -> fCJr
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> HTQG
    15:15:void access$1(react.surge.sched.Task,boolean) -> HTQG
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> yknY
    14:14:void access$3(react.surge.sched.Task,double) -> HTQG
    12:12:void access$4(react.surge.sched.Task,double) -> yknY
    14:14:double access$5(react.surge.sched.Task) -> DaVa
    13:13:void access$6(react.surge.sched.Task,double) -> DaVa
    13:13:double access$7(react.surge.sched.Task) -> Mtah
    12:12:double access$8(react.surge.sched.Task) -> qKFF
react.surge.sched.Task$1 -> Knop$1:
    react.surge.sched.Task this$0 -> axjj
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> Knop$2:
    react.surge.sched.Task this$0 -> axjj
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> Knop$3:
    react.surge.sched.Task this$0 -> axjj
    int val$total -> tfnf
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> KgAP:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> GtpL
    double computeTime -> YNos
    double totalComputeTime -> CiDp
    double activeTime -> rGVh
    boolean completed -> completed
    react.gbench.Profiler profiler -> Hobq
    react.gbench.Profiler activeProfiler -> GBMF
    int ticks -> NXBt
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> Mtah
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> gWPW
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> uhhf
    101:101:boolean hasCompleted() -> loPf
    107:107:double getTotalComputeTime() -> LaTB
    113:113:double getActiveTime() -> fCJr
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> HTQG
    12:12:void access$1(react.surge.sched.TaskLater,double) -> HTQG
    13:13:double access$2(react.surge.sched.TaskLater) -> yknY
    12:12:double access$3(react.surge.sched.TaskLater) -> DaVa
    13:13:void access$4(react.surge.sched.TaskLater,double) -> yknY
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> Mtah
    14:14:double access$6(react.surge.sched.TaskLater) -> qKFF
    14:14:void access$7(react.surge.sched.TaskLater,double) -> DaVa
react.surge.sched.TaskLater$1 -> KgAP$1:
    react.surge.sched.TaskLater this$0 -> XnQO
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> oxYM:
    react.glang.GList tasks -> nueS
    react.glang.GMap taskProfiles -> HxUA
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> HTQG
    25:35:void onTick() -> oVHW
    39:40:void putFinishingTask(react.surge.sched.ITask) -> yknY
    44:53:void putTask(react.surge.sched.ITask) -> DaVa
    58:58:java.lang.String getTickName() -> iuxc
    63:63:react.glang.GList getTasks() -> WjCu
    68:68:react.glang.GMap getTaskProfiles() -> FFQA
react.surge.sched.TaskProfile -> GsfB:
    double activeTime -> rGVh
    double computeTickTime -> lyKJ
    double computeTime -> YNos
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> fCJr
    23:24:void setActiveTime(double) -> XIlB
    28:28:double getComputeTickTime() -> xqqd
    33:34:void setComputeTickTime(double) -> sHYK
    38:38:double getComputeTime() -> uhhf
    43:44:void setComputeTime(double) -> wwIL
react.surge.server.AsyncTick -> mqrF:
react.surge.server.CPS -> CpJj:
    react.glang.GMap keys -> jXpS
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> PKKW
    46:99:void scan() -> BKGI
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> DaVa
react.surge.server.CoreTickThread -> IylI:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> brRc:
    long memoryFree -> ecTC
    long memoryUsed -> WQYi
    long memoryMax -> fMDi
    long lastMemoryUsed -> DQrj
    long memoryUsedAfterGC -> xkKV
    long allocated -> kdeG
    long collected -> VFFW
    long collections -> QOhV
    long sms -> vKRY
    long memoryAllocatedPerTick -> JdfT
    long memoryCollectedPerTick -> mjkF
    long memoryFullyAllocatedPerTick -> EniL
    long mah -> hJYu
    long mahs -> QGXM
    22:39:void <init>() -> <init>
    void onAllocationSet() -> uyig
    46:98:void run() -> run
    102:102:long getMemoryFree() -> LOrD
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> KxCk
    117:117:long getLastMemoryUsed() -> EeQH
    122:122:long getMemoryUsedAfterGC() -> YojQ
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> SviV
    137:137:long getCollections() -> PTOH
    142:142:long getSms() -> gFOB
    147:147:long getMemoryAllocatedPerTick() -> TiKn
    152:152:long getMemoryCollectedPerTick() -> vJMO
    157:157:long getMemoryFullyAllocatedPerTick() -> EdrT
    162:162:long getMah() -> ArXc
    167:167:long getMahs() -> SUIk
react.surge.server.SuperSampler -> scAq:
    react.gmath.Average ticksPerSecondL -> IPbH
    react.gmath.Average tickTimeL -> bYhs
    react.gmath.Average mahL -> rhxF
    double ticksPerSecond -> USUB
    double ticksPerSecondRaw -> EoIr
    double tickTime -> qwWW
    double tickTimeRaw -> hSJc
    boolean running -> running
    boolean frozen -> VhIt
    double tickUtilizationRaw -> Pevq
    double tickUtilization -> ELfW
    double leftoverTickTime -> PLfF
    long memoryUse -> Cydh
    long memoryAllocated -> qCrO
    long memoryCollected -> gWwR
    long mahs -> QGXM
    int totalChunks -> RAmD
    int totalEntities -> YXCo
    int totalDrops -> YqUf
    int totalTiles -> ffYa
    int totalLiving -> oydm
    int chunksLoaded -> dWat
    int chunksUnloaded -> NOTB
    react.surge.server.WorldMonitor worldMonitor -> SgTK
    react.surge.server.TPSMonitor tpsMonitor -> vJse
    react.surge.server.MemoryMonitor memoryMonitor -> rOiP
    java.lang.StackTraceElement[] lockStack -> ywBM
    react.glang.GMap spikes -> WXvu
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> oVHW
    154:154:java.lang.String getTickName() -> iuxc
    159:159:react.gmath.Average getTicksPerSecondL() -> uFiM
    164:164:double getTicksPerSecond() -> FVgg
    169:169:double getTicksPerSecondRaw() -> kkpF
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> RADw
    184:184:react.gmath.Average getTickTimeL() -> lMQD
    189:189:double getTickTime() -> clhh
    194:194:double getTickTimeRaw() -> BdYm
    199:199:double getTickUtilizationRaw() -> lwcp
    204:204:double getTickUtilization() -> AGdS
    209:209:double getLeftoverTickTime() -> tvim
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> iLWT
    219:219:long getMemoryUse() -> nuYS
    224:224:long getMemoryAllocated() -> FpgO
    229:229:long getMemoryCollected() -> dDxU
    234:234:react.gmath.Average getMahL() -> RbhM
    239:239:long getMahs() -> SUIk
    244:244:int getTotalChunks() -> IWlt
    249:249:int getTotalEntities() -> sQcf
    254:254:int getTotalDrops() -> lgCO
    259:259:int getTotalTiles() -> XRvp
    264:264:int getTotalLiving() -> GADp
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> qCLm
    274:274:int getChunksLoaded() -> XmHv
    279:279:int getChunksUnloaded() -> Vfau
    284:285:void setTicksPerSecondL(react.gmath.Average) -> HTQG
    289:290:void setTickTimeL(react.gmath.Average) -> yknY
    294:295:void setMahL(react.gmath.Average) -> DaVa
    299:300:void setTicksPerSecond(double) -> rUvu
    304:305:void setTicksPerSecondRaw(double) -> uWOp
    309:310:void setTickTime(double) -> FpMY
    314:315:void setTickTimeRaw(double) -> vIQl
    319:320:void setRunning(boolean) -> HSqA
    324:325:void setTickUtilizationRaw(double) -> cIjx
    329:330:void setTickUtilization(double) -> Jbff
    334:335:void setLeftoverTickTime(double) -> pjDR
    339:340:void setMemoryUse(long) -> fKEA
    344:345:void setMemoryAllocated(long) -> XIlB
    349:350:void setMemoryCollected(long) -> sHYK
    354:355:void setMahs(long) -> wwIL
    359:360:void setTotalChunks(int) -> fBUw
    364:365:void setTotalEntities(int) -> rMgp
    369:370:void setTotalDrops(int) -> hbMw
    374:375:void setTotalTiles(int) -> Vvlk
    379:380:void setTotalLiving(int) -> CDcG
    384:385:void setChunksLoaded(int) -> RQQX
    389:390:void setChunksUnloaded(int) -> PKKW
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> HTQG
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> HTQG
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> HTQG
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> DbOe
    419:419:react.glang.GMap getSpikes() -> rEaD
    31:31:void access$0(react.surge.server.SuperSampler,int) -> HTQG
    33:33:void access$1(react.surge.server.SuperSampler,int) -> yknY
    34:34:void access$2(react.surge.server.SuperSampler,int) -> DaVa
    32:32:void access$3(react.surge.server.SuperSampler,int) -> Mtah
    35:35:void access$4(react.surge.server.SuperSampler,int) -> qKFF
    36:36:void access$5(react.surge.server.SuperSampler,int) -> hrnE
    37:37:void access$6(react.surge.server.SuperSampler,int) -> IguI
    19:19:void access$7(react.surge.server.SuperSampler,double) -> HTQG
    21:21:void access$8(react.surge.server.SuperSampler,double) -> yknY
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> HTQG
    19:19:double access$10(react.surge.server.SuperSampler) -> yknY
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> DaVa
    21:21:double access$12(react.surge.server.SuperSampler) -> Mtah
    18:18:void access$13(react.surge.server.SuperSampler,double) -> DaVa
    20:20:void access$14(react.surge.server.SuperSampler,double) -> Mtah
    24:24:void access$15(react.surge.server.SuperSampler,double) -> qKFF
    20:20:double access$16(react.surge.server.SuperSampler) -> qKFF
    25:25:void access$17(react.surge.server.SuperSampler,double) -> hrnE
    25:25:double access$18(react.surge.server.SuperSampler) -> hrnE
    26:26:void access$19(react.surge.server.SuperSampler,double) -> IguI
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> HTQG
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> IguI
    27:27:void access$22(react.surge.server.SuperSampler,long) -> HTQG
    28:28:void access$23(react.surge.server.SuperSampler,long) -> yknY
    29:29:void access$24(react.surge.server.SuperSampler,long) -> DaVa
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> mylb
    30:30:void access$26(react.surge.server.SuperSampler,long) -> Mtah
react.surge.server.SuperSampler$1 -> scAq$1:
    react.surge.server.SuperSampler this$0 -> bHkc
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> HTQG
react.surge.server.SuperSampler$2 -> scAq$2:
    react.surge.server.SuperSampler this$0 -> bHkc
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> fCMk
    106:107:void onSpike() -> rxsO
react.surge.server.SuperSampler$3 -> scAq$3:
    react.surge.server.SuperSampler this$0 -> bHkc
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> uyig
react.surge.server.TPSMonitor -> Svgv:
    double tickTimeMS -> stnr
    double rawTicksPerSecond -> vSeM
    react.gbench.Profiler tickProfiler -> IGsi
    react.gbench.Profiler tickTimeProfiler -> Cygh
    boolean ticked -> xPyn
    java.lang.Thread$State lastState -> oOPx
    double actualTickTimeMS -> NhdL
    double ltt -> OASd
    long lastTick -> Hevq
    boolean frozen -> VhIt
    java.lang.StackTraceElement[] lockedStack -> fUVn
    double lmsx -> hBKm
    23:40:void <init>() -> <init>
    void onTicked() -> fCMk
    void onSpike() -> rxsO
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> HTQG
    160:160:double getTickTimeMS() -> ETPy
    165:165:double getRawTicksPerSecond() -> Qgsy
    170:170:react.gbench.Profiler getTickProfiler() -> eQKt
    175:175:boolean isTicked() -> GIVN
    180:181:void markTick() -> HDIG
    185:185:react.gbench.Profiler getTickTimeProfiler() -> hACX
    190:190:java.lang.Thread$State getLastState() -> HCio
    195:195:double getActualTickTimeMS() -> WPVf
    200:200:double getLtt() -> jiOc
    205:205:long getLastTick() -> IFXU
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> bOuQ
react.surge.server.WorldMonitor -> CVVj:
    boolean chunksChanged -> Yhby
    boolean dropChanged -> pASA
    boolean tileChanged -> FrNq
    boolean livingChanged -> QqmU
    boolean totalChanged -> iVQB
    boolean updated -> agjF
    int totalChunks -> RAmD
    int totalDrops -> YqUf
    int totalTiles -> ffYa
    int totalLiving -> oydm
    int totalEntities -> YXCo
    int chunksLoaded -> dWat
    int chunksUnloaded -> NOTB
    long ms -> CUvv
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> HTQG
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> yknY
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> HTQG
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> HTQG
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> HTQG
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> HTQG
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> HTQG
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> HTQG
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> HTQG
    130:131:void doUpdate() -> ekBF
    135:186:void sample() -> AXOk
    190:196:void sampleTotalCount() -> maWY
    200:206:void sampleLivingCount() -> YNMD
    210:219:void sampleTileCount() -> URaS
    223:229:void sampleDropCount() -> UuEG
    233:239:void sampleChunkCount() -> KVFC
react.surge.text.PhantomSpinner -> ivgB:
    react.surge.text.ProgressSpinner s -> rXXw
    react.surge.text.ProgressSpinner c -> WHjr
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> VxAp:
    java.lang.String[] chars -> uGpB
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> gaKS
    react.surge.text.ProgressSpinner NETWORK -> OtYD
    react.surge.text.ProgressSpinner CIRCLES -> NORc
    react.surge.text.ProgressSpinner RANDOMS -> ObvV
    react.surge.text.ProgressSpinner MERGERS -> mHiR
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> rOEF
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> uWep:
    int value() -> value
react.surge.util.Area -> gyQk:
    org.bukkit.Location location -> UeIL
    java.lang.Double radius -> TjUx
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> HTQG
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> pQOF
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> hrnE
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> IguI
    109:109:boolean isWithin(org.bukkit.Location) -> mylb
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> Mtah
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> HTQG
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> vImu
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> kJPP
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> qRsr
    257:257:java.lang.Double getRadius() -> QOFQ
    268:269:void setRadius(java.lang.Double) -> DaVa
    278:283:org.bukkit.Location random() -> NNMX
react.surge.util.Axis -> Orlb:
    react.surge.util.Axis X -> QaLt
    react.surge.util.Axis Y -> yKoV
    react.surge.util.Axis Z -> Soeo
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> NpwY
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> gErs
    29:29:org.bukkit.util.Vector negative() -> wgCx
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> tLSC:
    react.surge.util.BlastResistance BARRIER -> nLPc
    react.surge.util.BlastResistance BEDROCK -> ynRw
    react.surge.util.BlastResistance COMMAND -> eAVF
    react.surge.util.BlastResistance ENDER_PORTAL -> JCHp
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> kdjB
    react.surge.util.BlastResistance ANVIL -> MfDr
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> UTJO
    react.surge.util.BlastResistance OBSIDIAN -> TjXf
    react.surge.util.BlastResistance ENDER_CHEST -> RuTT
    react.surge.util.BlastResistance WATER -> GRpj
    react.surge.util.BlastResistance LAVA -> hmBr
    react.surge.util.BlastResistance STATIONARY_WATER -> TjYR
    react.surge.util.BlastResistance DRAGON_EGG -> MwFj
    react.surge.util.BlastResistance ENDER_STONE -> dNrm
    react.surge.util.BlastResistance COAL_BLOCK -> jsHy
    react.surge.util.BlastResistance DIAMOND_BLOCK -> WIOC
    react.surge.util.BlastResistance EMERALD_BLOCK -> QPNX
    react.surge.util.BlastResistance GOLD_BLOCK -> FPOX
    react.surge.util.BlastResistance IRON_BLOCK -> Hfuh
    react.surge.util.BlastResistance REDSTONE_BLOCK -> aWLo
    react.surge.util.BlastResistance BRICK -> tVQq
    react.surge.util.BlastResistance BRICK_STAIRS -> gOlK
    react.surge.util.BlastResistance HARD_CLAY -> JBhj
    react.surge.util.BlastResistance STONE -> RRqI
    react.surge.util.BlastResistance SMOOTH_BRICK -> SogD
    react.surge.util.BlastResistance SMOOTH_STAIRS -> ubGC
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> sSOF
    react.surge.util.BlastResistance STONE_SLAB2 -> UJvf
    react.surge.util.BlastResistance IRON_DOOR -> JCHS
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> JCHY
    react.surge.util.BlastResistance IRON_TRAPDOOR -> GSPl
    react.surge.util.BlastResistance MOB_SPAWNER -> TsHv
    react.surge.util.BlastResistance WEB -> Xvcj
    react.surge.util.BlastResistance DISPENSER -> twtL
    react.surge.util.BlastResistance DROPPER -> AIPV
    react.surge.util.BlastResistance FURNACE -> HDrG
    react.surge.util.BlastResistance BURNING_FURNACE -> xjmd
    react.surge.util.BlastResistance BEACON -> TjWu
    react.surge.util.BlastResistance COAL_ORE -> GlcP
    react.surge.util.BlastResistance COCOA -> ptWt
    react.surge.util.BlastResistance DIAMOND_ORE -> Yyfx
    react.surge.util.BlastResistance EMERALD_ORE -> GcrO
    react.surge.util.BlastResistance FENCE -> OIfk
    react.surge.util.BlastResistance FENCE_GATE -> BwGS
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> bjqx
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> uixX
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> OlMW
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> jixk
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> LYrK
    react.surge.util.BlastResistance ACACIA_FENCE -> nmtn
    react.surge.util.BlastResistance BIRCH_FENCE -> qCye
    react.surge.util.BlastResistance DARK_OAK_FENCE -> SfwO
    react.surge.util.BlastResistance SPRUCE_FENCE -> RApk
    react.surge.util.BlastResistance JUNGLE_FENCE -> NNwA
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> AtEc
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> gaPX
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> TXyI
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> TGvw
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> BmvV
    react.surge.util.BlastResistance QUARTZ_STAIRS -> pQvv
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> ARAy
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> uPey
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> hlci
    react.surge.util.BlastResistance WOOD_STAIRS -> tERj
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> vdjd
    react.surge.util.BlastResistance ACACIA_DOOR -> kSiT
    react.surge.util.BlastResistance BIRCH_DOOR -> nCaB
    react.surge.util.BlastResistance DARK_OAK_DOOR -> hBOk
    react.surge.util.BlastResistance SPRUCE_DOOR -> dGEK
    react.surge.util.BlastResistance JUNGLE_DOOR -> Sfuk
    react.surge.util.BlastResistance GOLD_ORE -> FaRF
    react.surge.util.BlastResistance HOPPER -> kBfp
    react.surge.util.BlastResistance IRON_ORE -> GAqJ
    react.surge.util.BlastResistance LAPIS_BLOCK -> ohfN
    react.surge.util.BlastResistance LAPIS_ORE -> PCyx
    react.surge.util.BlastResistance QUARTZ_ORE -> cmuA
    react.surge.util.BlastResistance REDSTONE_ORE -> XUCv
    react.surge.util.BlastResistance TRAP_DOOR -> YFeH
    react.surge.util.BlastResistance WOOD -> WIOp
    react.surge.util.BlastResistance CHEST -> MUGc
    react.surge.util.BlastResistance TRAPPED_CHEST -> BDGD
    react.surge.util.BlastResistance WORKBENCH -> CNxk
    react.surge.util.BlastResistance CAULDRON -> pkmG
    react.surge.util.BlastResistance LOG -> oXHu
    react.surge.util.BlastResistance LOG_2 -> GlhI
    react.surge.util.BlastResistance BOOKSHELF -> FGah
    react.surge.util.BlastResistance BANNER -> IPkN
    react.surge.util.BlastResistance STANDING_BANNER -> IPkO
    react.surge.util.BlastResistance WALL_BANNER -> jHYS
    react.surge.util.BlastResistance JACK_O_LANTERN -> bbcj
    react.surge.util.BlastResistance MELON_BLOCK -> cTdx
    react.surge.util.BlastResistance SKULL -> KWQs
    react.surge.util.BlastResistance PUMPKIN -> QYDR
    react.surge.util.BlastResistance SIGN -> XUGc
    react.surge.util.BlastResistance SIGN_POST -> rqqx
    react.surge.util.BlastResistance WALL_SIGN -> SEWW
    react.surge.util.BlastResistance QUARTZ_BLOCK -> ahRf
    react.surge.util.BlastResistance NOTE_BLOCK -> CGIN
    react.surge.util.BlastResistance RED_SANDSTONE -> wxpo
    react.surge.util.BlastResistance SANDSTONE -> cviM
    react.surge.util.BlastResistance WOOL -> rPQB
    react.surge.util.BlastResistance MONSTER_EGG -> tVVa
    react.surge.util.BlastResistance RAILS -> dWhj
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> mRBk
    react.surge.util.BlastResistance DETECTOR_RAIL -> uaih
    react.surge.util.BlastResistance POWERED_RAIL -> tpIU
    react.surge.util.BlastResistance CLAY -> cTee
    react.surge.util.BlastResistance DIRT -> HNHC
    react.surge.util.BlastResistance GRASS -> rrSH
    react.surge.util.BlastResistance GRAVEL -> SpIq
    react.surge.util.BlastResistance SPONGE -> IQJc
    react.surge.util.BlastResistance BREWING_STAND -> OIiq
    react.surge.util.BlastResistance STONE_BUTTON -> yLSP
    react.surge.util.BlastResistance WOOD_BUTTON -> pIiN
    react.surge.util.BlastResistance CAKE_BLOCK -> pQyV
    react.surge.util.BlastResistance ICE -> bRBX
    react.surge.util.BlastResistance PACKED_ICE -> plLi
    react.surge.util.BlastResistance LEVER -> fxBN
    react.surge.util.BlastResistance MYCEL -> FOpx
    react.surge.util.BlastResistance PISTON_BASE -> pIhS
    react.surge.util.BlastResistance PISTON_EXTENSION -> YOWy
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> XDDp
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> WtFc
    react.surge.util.BlastResistance GOLD_PLATE -> NylR
    react.surge.util.BlastResistance IRON_PLATE -> YGGu
    react.surge.util.BlastResistance STONE_PLATE -> BDGK
    react.surge.util.BlastResistance WOOD_PLATE -> Cylp
    react.surge.util.BlastResistance SAND -> LABl
    react.surge.util.BlastResistance SOUL_SAND -> QjED
    react.surge.util.BlastResistance CACTUS -> BmyN
    react.surge.util.BlastResistance LADDER -> wWNV
    react.surge.util.BlastResistance NETHERRACK -> VOBu
    react.surge.util.BlastResistance GLASS -> AHuI
    react.surge.util.BlastResistance THIN_GLASS -> VpeX
    react.surge.util.BlastResistance STAINED_GLASS -> mjvO
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> TbNb
    react.surge.util.BlastResistance GLOWSTONE -> JSom
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> VEpn
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> IsPm
    react.surge.util.BlastResistance SEA_LANTERN -> MTiN
    react.surge.util.BlastResistance BED_BLOCK -> xbdc
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> BejT
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> FGcu
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> fLpE
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> ioji
    react.surge.util.BlastResistance LEAVES -> hcwI
    react.surge.util.BlastResistance LEAVES_2 -> bsgf
    react.surge.util.BlastResistance SNOW -> QYFW
    int br -> Homc
    react.surge.util.BlastResistance[] ENUM$VALUES -> OIkr
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> APWS
    175:190:int get(org.bukkit.Material) -> HTQG
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> YoiH:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> hrnE
react.surge.util.C -> hYon:
    react.surge.util.C BLACK -> cfHm
    react.surge.util.C DARK_BLUE -> RKFN
    react.surge.util.C DARK_GREEN -> SEXQ
    react.surge.util.C DARK_AQUA -> GtyX
    react.surge.util.C DARK_RED -> kTMi
    react.surge.util.C DARK_PURPLE -> vvOq
    react.surge.util.C GOLD -> MUIT
    react.surge.util.C GRAY -> sBRe
    react.surge.util.C DARK_GRAY -> VgtB
    react.surge.util.C BLUE -> LQeT
    react.surge.util.C GREEN -> ipJn
    react.surge.util.C AQUA -> uHXo
    react.surge.util.C RED -> vSlW
    react.surge.util.C LIGHT_PURPLE -> fnpv
    react.surge.util.C YELLOW -> Dtao
    react.surge.util.C WHITE -> XvmX
    react.surge.util.C MAGIC -> ELsL
    react.surge.util.C BOLD -> jbOj
    react.surge.util.C STRIKETHROUGH -> HpOg
    react.surge.util.C UNDERLINE -> gXei
    react.surge.util.C ITALIC -> CWnR
    react.surge.util.C RESET -> bcIQ
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> mYwC
    char code -> rifm
    boolean isFormat -> Iapa
    java.lang.String toString -> kvTg
    java.util.Map BY_ID -> apev
    java.util.Map BY_CHAR -> wqGE
    java.util.Map dyeChatMap -> wyVl
    java.util.Map chatHexMap -> fwdu
    java.util.Map dyeHexMap -> Pwfo
    int[] $SWITCH_TABLE$surge$util$C -> CGMR
    react.surge.util.C[] ENUM$VALUES -> Rlkp
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> FVvb
    378:378:java.lang.String hex() -> NMjo
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> mylb
    434:442:react.surge.util.C getByChar(java.lang.String) -> YoXQ
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> yknY
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> HTQG
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> yknY
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> DaVa
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> bFmS
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> MBBP
    560:578:java.lang.String generateColorTable() -> NDyd
    588:588:org.bukkit.ChatColor chatColor() -> uGJh
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> IguI
    632:679:byte getItemMeta() -> QyWo
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> JuEE
react.surge.util.C$1 -> hYon$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> hYon$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> hYon$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> hYon$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> hYon$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> hYon$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> hYon$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> hYon$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> hYon$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> hYon$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> hYon$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> hYon$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> hYon$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> hYon$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> hYon$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> hYon$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> hYon$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> hYon$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> hYon$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> hYon$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> hYon$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> hYon$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> kQwa:
    double number -> XTkB
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> mhme
    23:25:react.surge.util.CDou add(double) -> RapM
    30:32:react.surge.util.CDou sub(double) -> tSpI
    37:37:double get() -> get
    42:48:void circ() -> WHDs
react.surge.util.CMD -> vQwP:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> hAui
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> XBWP
    51:53:void execute(org.bukkit.command.CommandSender) -> DaVa
    60:77:void execute() -> execute
react.surge.util.CNum -> NpHg:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> YoXQ
    23:25:react.surge.util.CNum add(int) -> bFmS
    30:32:react.surge.util.CNum sub(int) -> MBBP
    37:37:int get() -> get
    42:48:void circ() -> WHDs
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> nuDw
react.surge.util.Chunks -> YxXe:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> JkWX
    33:40:react.glang.GList getLoadedChunks() -> DrrO
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> yknY
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> HTQG
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> HTQG
    98:98:boolean unload(org.bukkit.Chunk) -> TguA
    114:124:int unload(react.glang.GList,boolean,boolean) -> HTQG
    138:138:int unload(react.glang.GList,boolean) -> HTQG
    150:150:int unload(react.glang.GList) -> JkYS
    166:166:boolean isLoaded(java.lang.String,int,int) -> HTQG
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> DaVa
    201:205:void load(react.glang.GList) -> HSqA
react.surge.util.Cuboid -> AHAr:
    java.lang.String worldName -> IbRX
    int x1 -> iolW
    int y1 -> hKFt
    int z1 -> NFkX
    int x2 -> kBnK
    int y2 -> xADL
    int z2 -> AHxE
    int[] $SWITCH_TABLE$surge$util$Axis -> OSAK
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> yehp
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> HTQG
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> DaVa
    93:93:boolean hasPlayers() -> sADt
    98:110:react.glang.GList getPlayers() -> AXVT
    115:166:react.glang.GList getEntities() -> ktbX
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> AqcI
    287:287:org.bukkit.Location getLowerNE() -> VMRa
    298:298:org.bukkit.Location getUpperSW() -> DQOt
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> fmcA
    348:348:int getSizeY() -> Typi
    358:358:int getSizeZ() -> uXKi
    368:368:int getLowerX() -> JuDq
    378:378:int getLowerY() -> VoVQ
    388:388:int getLowerZ() -> pPoc
    398:398:int getUpperX() -> xiiS
    408:408:int getUpperY() -> Svon
    418:418:int getUpperZ() -> WikE
    428:438:org.bukkit.block.Block[] corners() -> cJjH
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> HTQG
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> yknY
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> DaVa
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> Mtah
    546:546:boolean contains(int,int,int) -> qKFF
    558:558:boolean contains(org.bukkit.block.Block) -> IguI
    570:570:boolean contains(org.bukkit.Location) -> vbcw
    580:580:int volume() -> Tyrq
    591:601:byte averageLightLevel() -> PnGq
    612:612:react.surge.util.Cuboid contract() -> jGMs
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> HTQG
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> yknY
    708:715:boolean containsOnly(org.bukkit.Material) -> yknY
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> HTQG
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> hrnE
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> HTQG
    786:800:java.util.List getChunks() -> OsUg
    815:819:void fill(int,byte) -> HTQG
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> UtgG
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> hRIg
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> fmeg
react.surge.util.Cuboid$1 -> AHAr$1:
    react.surge.util.Cuboid this$0 -> qnsO
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> vbcw
    1:1:java.lang.Object onAdapt(java.lang.Object) -> IguI
react.surge.util.Cuboid$CuboidDirection -> AHAr$HTQG:
    react.surge.util.Cuboid$CuboidDirection North -> DBAR
    react.surge.util.Cuboid$CuboidDirection East -> fnsN
    react.surge.util.Cuboid$CuboidDirection South -> raTq
    react.surge.util.Cuboid$CuboidDirection West -> YWmB
    react.surge.util.Cuboid$CuboidDirection Up -> KhWR
    react.surge.util.Cuboid$CuboidDirection Down -> HMlC
    react.surge.util.Cuboid$CuboidDirection Horizontal -> aqJF
    react.surge.util.Cuboid$CuboidDirection Vertical -> MoAE
    react.surge.util.Cuboid$CuboidDirection Both -> Hopj
    react.surge.util.Cuboid$CuboidDirection Unknown -> LHxc
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> yehp
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> yvnN
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> bHHV
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> fmeg
react.surge.util.Cuboid$CuboidIterator -> AHAr$yknY:
    org.bukkit.World w -> qLrh
    int baseX -> wEtD
    int baseY -> UCRo
    int baseZ -> vvUm
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> btLw
    int sizeY -> CXPf
    int sizeZ -> aqJO
    react.surge.util.Cuboid this$0 -> qnsO
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> SKsJ:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> CUvv:
    react.glang.GList buffer -> WbkQ
    boolean dbg -> jPnp
    int kf -> qwgJ
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> Mtah
    41:49:void l(java.lang.Object,java.lang.String) -> yknY
    53:54:void s(java.lang.Object,java.lang.String) -> DaVa
    58:69:void cdb() -> tKyp
    73:79:void v(java.lang.Object,java.lang.String) -> Mtah
    83:84:void w(java.lang.Object,java.lang.String) -> qKFF
    88:89:void f(java.lang.Object,java.lang.String) -> hrnE
    93:106:void l(java.lang.String) -> nuDw
    110:117:void s(java.lang.String) -> AqcI
    121:135:void v(java.lang.String) -> eHFh
    139:146:void w(java.lang.String) -> qRxo
    150:157:void f(java.lang.String) -> UtMf
react.surge.util.DMSRequire -> qeLS:
    react.surge.util.DMSRequirement value() -> VgIL
react.surge.util.DMSRequirement -> PBjK:
    react.surge.util.DMSRequirement SQL -> EEGD
    react.surge.util.DMSRequirement[] ENUM$VALUES -> lOEn
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> tTbP:
    react.surge.util.Depend VAULT -> fDcV
    react.surge.util.Depend FAWE -> YFnX
    react.surge.util.Depend WORLDEDIT -> kutw
    react.surge.util.Depend PROTOLIB -> IjcD
    react.surge.util.Depend CITIZENS -> WtLW
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> RJht
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> PSke:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> pbRI
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> EeNg:
    react.surge.util.DimensionFace X -> oyou
    react.surge.util.DimensionFace Y -> vSqG
    react.surge.util.DimensionFace Z -> AHym
    react.surge.util.DimensionFace[] ENUM$VALUES -> gaXS
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> rWLr:
    react.surge.util.Direction U -> tpNc
    react.surge.util.Direction D -> YXOP
    react.surge.util.Direction N -> AtOR
    react.surge.util.Direction S -> OlTb
    react.surge.util.Direction E -> lFSu
    react.surge.util.Direction W -> Meml
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> sBVh
    int[] $SWITCH_TABLE$surge$util$Direction -> oiOb
    react.surge.util.Direction[] ENUM$VALUES -> DAai
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> VoYU
    61:61:int x() -> QVwk
    66:66:int y() -> PKeD
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> IFms
    81:81:react.glang.GList news() -> PvVw
    86:86:react.glang.GList udnews() -> jWnS
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> FpMY
    115:147:react.surge.util.Direction fromByte(byte) -> mylb
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> kkri
react.surge.util.DynamicConfiguration -> vAUs:
react.surge.util.DynamicTracker -> bOnS:
react.surge.util.Embedded -> KgBi:
    react.glang.GList get() -> nKJC
    void add(java.lang.Object) -> add
react.surge.util.FU -> YfyV:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> HTQG
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> yknY
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> qKFF
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> hrnE
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> rgqS:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> AXQH
react.surge.util.Health -> AHCY:
    double hp -> EUfR
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> AXjk
    41:41:double getHearts() -> STkj
    51:51:double getHalfHearts() -> aEDG
    61:61:int getFlatHalfHearts() -> xYHC
react.surge.util.IO -> oEUv:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> QOAe:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> HTQG
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> HTQG
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> HTQG
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> HTQG
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> HTQG
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> yknY
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> DaVa
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> Mtah
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> HTQG
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> HTQG
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> HTQG
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> HTQG
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> qKFF
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> hrnE
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> IguI
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> mylb
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> qRsr
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> HTQG
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> vbcw
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> rUvu
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> HTQG
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> HTQG
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> yknY
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> HTQG
react.surge.util.MSound -> MmIJ:
    react.surge.util.MSound AMBIENCE_CAVE -> yvlU
    react.surge.util.MSound AMBIENCE_RAIN -> NWpB
    react.surge.util.MSound AMBIENCE_THUNDER -> qnxP
    react.surge.util.MSound ANVIL_BREAK -> PDfW
    react.surge.util.MSound ANVIL_LAND -> keWP
    react.surge.util.MSound ANVIL_USE -> qDeC
    react.surge.util.MSound ARROW_HIT -> NWqt
    react.surge.util.MSound BURP -> jasW
    react.surge.util.MSound CHEST_CLOSE -> Yqck
    react.surge.util.MSound CHEST_OPEN -> rGgq
    react.surge.util.MSound CLICK -> nvqF
    react.surge.util.MSound DOOR_CLOSE -> Qilj
    react.surge.util.MSound DOOR_OPEN -> foYT
    react.surge.util.MSound DRINK -> wEth
    react.surge.util.MSound EAT -> WQlP
    react.surge.util.MSound EXPLODE -> EVIn
    react.surge.util.MSound FALL_BIG -> RJmF
    react.surge.util.MSound FALL_SMALL -> oaAs
    react.surge.util.MSound FIRE -> YWqf
    react.surge.util.MSound FIRE_IGNITE -> OBDj
    react.surge.util.MSound FIZZ -> qwhW
    react.surge.util.MSound FUSE -> yvoL
    react.surge.util.MSound GLASS -> lWXC
    react.surge.util.MSound HURT_FLESH -> JSuQ
    react.surge.util.MSound ITEM_BREAK -> Juwp
    react.surge.util.MSound ITEM_PICKUP -> VVwY
    react.surge.util.MSound LAVA -> YiSC
    react.surge.util.MSound LAVA_POP -> vKbj
    react.surge.util.MSound LEVEL_UP -> ohqW
    react.surge.util.MSound MINECART_BASE -> yemV
    react.surge.util.MSound MINECART_INSIDE -> wgwN
    react.surge.util.MSound NOTE_BASS -> xcKI
    react.surge.util.MSound NOTE_PIANO -> HWAh
    react.surge.util.MSound NOTE_BASS_DRUM -> OBDA
    react.surge.util.MSound NOTE_STICKS -> MwQx
    react.surge.util.MSound NOTE_BASS_GUITAR -> qgGS
    react.surge.util.MSound NOTE_SNARE_DRUM -> HNPa
    react.surge.util.MSound NOTE_PLING -> vSsD
    react.surge.util.MSound ORB_PICKUP -> nfNa
    react.surge.util.MSound PISTON_EXTEND -> nULn
    react.surge.util.MSound PISTON_RETRACT -> Bnay
    react.surge.util.MSound PORTAL -> XTmc
    react.surge.util.MSound PORTAL_TRAVEL -> Trtq
    react.surge.util.MSound PORTAL_TRIGGER -> ukFg
    react.surge.util.MSound SHOOT_ARROW -> qLwS
    react.surge.util.MSound SPLASH -> BwUX
    react.surge.util.MSound SPLASH2 -> WALc
    react.surge.util.MSound STEP_GRASS -> AlBK
    react.surge.util.MSound STEP_GRAVEL -> pAdR
    react.surge.util.MSound STEP_LADDER -> TPtb
    react.surge.util.MSound STEP_SAND -> RucI
    react.surge.util.MSound STEP_SNOW -> EVKo
    react.surge.util.MSound STEP_STONE -> vTVf
    react.surge.util.MSound STEP_WOOD -> oqeO
    react.surge.util.MSound STEP_WOOL -> iFAM
    react.surge.util.MSound SWIM -> bRMm
    react.surge.util.MSound WATER -> fwjn
    react.surge.util.MSound WOOD_CLICK -> etgb
    react.surge.util.MSound BAT_DEATH -> SMou
    react.surge.util.MSound BAT_HURT -> FHKo
    react.surge.util.MSound BAT_IDLE -> ubSw
    react.surge.util.MSound BAT_LOOP -> bsoD
    react.surge.util.MSound BAT_TAKEOFF -> TQTf
    react.surge.util.MSound BLAZE_BREATH -> rOxy
    react.surge.util.MSound BLAZE_DEATH -> aVyJ
    react.surge.util.MSound BLAZE_HIT -> ARPR
    react.surge.util.MSound CAT_HISS -> diTQ
    react.surge.util.MSound CAT_HIT -> qUgH
    react.surge.util.MSound CAT_MEOW -> Kplx
    react.surge.util.MSound CAT_PURR -> Lbnj
    react.surge.util.MSound CAT_PURREOW -> UnJp
    react.surge.util.MSound CHICKEN_IDLE -> yTlq
    react.surge.util.MSound CHICKEN_HURT -> dObN
    react.surge.util.MSound CHICKEN_EGG_POP -> IbVv
    react.surge.util.MSound CHICKEN_WALK -> hvBA
    react.surge.util.MSound COW_IDLE -> HNTo
    react.surge.util.MSound COW_HURT -> nMBU
    react.surge.util.MSound COW_WALK -> AlCu
    react.surge.util.MSound CREEPER_HISS -> tgdd
    react.surge.util.MSound CREEPER_DEATH -> GltS
    react.surge.util.MSound ENDERDRAGON_DEATH -> pciH
    react.surge.util.MSound ENDERDRAGON_GROWL -> JSyu
    react.surge.util.MSound ENDERDRAGON_HIT -> MTsX
    react.surge.util.MSound ENDERDRAGON_WINGS -> LbrH
    react.surge.util.MSound ENDERMAN_DEATH -> vCWO
    react.surge.util.MSound ENDERMAN_HIT -> SVeT
    react.surge.util.MSound ENDERMAN_IDLE -> vKfr
    react.surge.util.MSound ENDERMAN_TELEPORT -> nerd
    react.surge.util.MSound ENDERMAN_SCREAM -> KybS
    react.surge.util.MSound ENDERMAN_STARE -> pkxh
    react.surge.util.MSound GHAST_SCREAM -> FsBV
    react.surge.util.MSound GHAST_SCREAM2 -> YrHW
    react.surge.util.MSound GHAST_CHARGE -> vLGf
    react.surge.util.MSound GHAST_DEATH -> aNjk
    react.surge.util.MSound GHAST_FIREBALL -> OBFt
    react.surge.util.MSound GHAST_MOAN -> blBC
    react.surge.util.MSound IRONGOLEM_DEATH -> wqMc
    react.surge.util.MSound IRONGOLEM_HIT -> dWtJ
    react.surge.util.MSound IRONGOLEM_THROW -> COgR
    react.surge.util.MSound IRONGOLEM_WALK -> jPuI
    react.surge.util.MSound MAGMACUBE_WALK -> CFvF
    react.surge.util.MSound MAGMACUBE_WALK2 -> LRPX
    react.surge.util.MSound MAGMACUBE_JUMP -> qMXv
    react.surge.util.MSound PIG_IDLE -> daEh
    react.surge.util.MSound PIG_DEATH -> xbmk
    react.surge.util.MSound PIG_WALK -> ubVM
    react.surge.util.MSound SHEEP_IDLE -> Mesq
    react.surge.util.MSound SHEEP_SHEAR -> kmjN
    react.surge.util.MSound SHEEP_WALK -> hvCY
    react.surge.util.MSound SILVERFISH_HIT -> noCg
    react.surge.util.MSound SILVERFISH_KILL -> EgOD
    react.surge.util.MSound SILVERFISH_IDLE -> BMEB
    react.surge.util.MSound SILVERFISH_WALK -> GltH
    react.surge.util.MSound SKELETON_IDLE -> NXWF
    react.surge.util.MSound SKELETON_DEATH -> RvGh
    react.surge.util.MSound SKELETON_HURT -> DBKJ
    react.surge.util.MSound SKELETON_WALK -> uIHI
    react.surge.util.MSound SLIME_ATTACK -> AARH
    react.surge.util.MSound SLIME_WALK -> PDmO
    react.surge.util.MSound SLIME_WALK2 -> svEd
    react.surge.util.MSound SPIDER_IDLE -> pIxA
    react.surge.util.MSound SPIDER_DEATH -> HNXH
    react.surge.util.MSound SPIDER_WALK -> NOhc
    react.surge.util.MSound WITHER_DEATH -> ukJb
    react.surge.util.MSound WITHER_HURT -> eBJB
    react.surge.util.MSound WITHER_IDLE -> cLdN
    react.surge.util.MSound WITHER_SHOOT -> dXWt
    react.surge.util.MSound WITHER_SPAWN -> AtUb
    react.surge.util.MSound WOLF_BARK -> yLah
    react.surge.util.MSound WOLF_DEATH -> XfUq
    react.surge.util.MSound WOLF_GROWL -> coGC
    react.surge.util.MSound WOLF_HOWL -> yDQd
    react.surge.util.MSound WOLF_HURT -> eSIc
    react.surge.util.MSound WOLF_PANT -> iVdo
    react.surge.util.MSound WOLF_SHAKE -> tEbp
    react.surge.util.MSound WOLF_WALK -> BvyU
    react.surge.util.MSound WOLF_WHINE -> RufK
    react.surge.util.MSound ZOMBIE_METAL -> rraF
    react.surge.util.MSound ZOMBIE_WOOD -> KqSD
    react.surge.util.MSound ZOMBIE_WOODBREAK -> mRPV
    react.surge.util.MSound ZOMBIE_IDLE -> pJXM
    react.surge.util.MSound ZOMBIE_DEATH -> dGUc
    react.surge.util.MSound ZOMBIE_HURT -> Gdgk
    react.surge.util.MSound ZOMBIE_INFECT -> kwBH
    react.surge.util.MSound ZOMBIE_UNFECT -> xQqm
    react.surge.util.MSound ZOMBIE_REMEDY -> LcWF
    react.surge.util.MSound ZOMBIE_WALK -> PwsQ
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> ViEA
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> NPKW
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> rYSJ
    react.surge.util.MSound ZOMBIE_PIG_HURT -> FXtL
    react.surge.util.MSound DIG_WOOL -> Sxkq
    react.surge.util.MSound DIG_GRASS -> sJrs
    react.surge.util.MSound DIG_GRAVEL -> uPyY
    react.surge.util.MSound DIG_SAND -> FaeY
    react.surge.util.MSound DIG_SNOW -> orMD
    react.surge.util.MSound DIG_STONE -> rsEH
    react.surge.util.MSound DIG_WOOD -> FrgM
    react.surge.util.MSound FIREWORK_BLAST -> OSOH
    react.surge.util.MSound FIREWORK_BLAST2 -> nvwx
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> EodU
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> qgQE
    react.surge.util.MSound FIREWORK_TWINKLE -> mlFS
    react.surge.util.MSound FIREWORK_TWINKLE2 -> cCte
    react.surge.util.MSound FIREWORK_LAUNCH -> nwYC
    react.surge.util.MSound SUCCESSFUL_HIT -> seEg
    react.surge.util.MSound HORSE_ANGRY -> drLL
    react.surge.util.MSound HORSE_ARMOR -> GeGi
    react.surge.util.MSound HORSE_BREATHE -> ynfk
    react.surge.util.MSound HORSE_DEATH -> xRQh
    react.surge.util.MSound HORSE_GALLOP -> THic
    react.surge.util.MSound HORSE_HIT -> eAiQ
    react.surge.util.MSound HORSE_IDLE -> gXqB
    react.surge.util.MSound HORSE_JUMP -> nTsm
    react.surge.util.MSound HORSE_LAND -> WRTU
    react.surge.util.MSound HORSE_SADDLE -> Xnhn
    react.surge.util.MSound HORSE_SOFT -> CPKh
    react.surge.util.MSound HORSE_WOOD -> VhcP
    react.surge.util.MSound DONKEY_ANGRY -> IHkG
    react.surge.util.MSound DONKEY_DEATH -> xkcR
    react.surge.util.MSound DONKEY_HIT -> Pwre
    react.surge.util.MSound DONKEY_IDLE -> AsxF
    react.surge.util.MSound HORSE_SKELETON_DEATH -> yMHN
    react.surge.util.MSound HORSE_SKELETON_HIT -> lpuL
    react.surge.util.MSound HORSE_SKELETON_IDLE -> fDnt
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> Asxt
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> PxVe
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> WcYE
    react.surge.util.MSound VILLAGER_DEATH -> QGsq
    react.surge.util.MSound VILLAGER_HAGGLE -> qwsT
    react.surge.util.MSound VILLAGER_HIT -> qwrr
    react.surge.util.MSound VILLAGER_IDLE -> mbug
    react.surge.util.MSound VILLAGER_NO -> ReKJ
    react.surge.util.MSound VILLAGER_YES -> tWIf
    java.lang.String pre19sound -> HFKe
    java.lang.String post19sound -> wydo
    org.bukkit.Sound resolvedSound -> kLOX
    react.surge.util.MSound[] ENUM$VALUES -> yMGW
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> IXPj
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> DQLf:
    org.bukkit.Material material -> neyO
    java.lang.Byte data -> EgTS
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> gVvB
    79:80:void setData(java.lang.Byte) -> HTQG
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> iLVL:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> HdvJ
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> PvWg
    68:68:boolean isAnyOnline() -> ifMP
    80:80:react.glang.GList inWorld(org.bukkit.World) -> bGHg
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> YxDw
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> HTQG
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> HTQG
    143:144:void disable(org.bukkit.entity.Player) -> vIQl
    154:155:void enable(org.bukkit.entity.Player) -> cIjx
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> HTQG
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> yknY
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> Jbff
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> HTQG
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> pjDR
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> DaVa
    300:300:boolean canFindPlayer(java.lang.String) -> awOx
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> tTQv
    338:345:react.glang.GList onlinePlayers() -> TysJ
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> mhme
    368:371:void clear(org.bukkit.entity.Player) -> RapM
    381:385:void clearEffects(org.bukkit.entity.Player) -> tSpI
    398:399:void heal(org.bukkit.entity.Player,double) -> HTQG
    409:410:void heal(org.bukkit.entity.Player) -> ctbR
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> JQgp
    432:433:void resetHunger(org.bukkit.entity.Player) -> samf
    443:444:void kill(org.bukkit.entity.Player) -> Ixwx
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> CEBh
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> erYD
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> HTQG
react.surge.util.P$1 -> iLVL$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> vbcw
    1:1:java.lang.Object onAdapt(java.lang.Object) -> IguI
react.surge.util.P$2 -> iLVL$2:
    java.lang.Double val$doff -> yMFl
    org.bukkit.entity.Player val$e -> HhMT
    org.bukkit.entity.Entity[] val$result -> sKTo
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> rUvu
react.surge.util.PE -> RHsS:
    react.surge.util.PE ABSORPTION -> sBdH
    react.surge.util.PE BLINDNESS -> nfXt
    react.surge.util.PE CONFUSION -> AbyN
    react.surge.util.PE DAMAGE_RESISTANCE -> seGt
    react.surge.util.PE FAST_DIGGING -> hSeu
    react.surge.util.PE FIRE_RESISTANCE -> RdiA
    react.surge.util.PE GLOWING -> QjWG
    react.surge.util.PE HARM -> VGBX
    react.surge.util.PE HEAL -> LQuc
    react.surge.util.PE HEALTH_BOOST -> foax
    react.surge.util.PE HUNGER -> FHUE
    react.surge.util.PE INCREASE_DAMAGE -> GeKB
    react.surge.util.PE INVISIBILITY -> nLek
    react.surge.util.PE JUMP -> FQFQ
    react.surge.util.PE LEVITATION -> xcUJ
    react.surge.util.PE LUCK -> yDUL
    react.surge.util.PE NIGHT_VISION -> kmov
    react.surge.util.PE POISON -> uHic
    react.surge.util.PE REGENERATION -> mbuO
    react.surge.util.PE SATURATION -> yLeW
    react.surge.util.PE SLOW -> mJDS
    react.surge.util.PE SLOW_DIGGING -> fgSC
    react.surge.util.PE SPEED -> hmXb
    react.surge.util.PE UNLUCK -> hCDx
    react.surge.util.PE WATER_BREATHING -> kwEk
    react.surge.util.PE WEAKNESS -> GKYw
    react.surge.util.PE WITHER -> PwwU
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> HTQG
    144:144:react.surge.util.PE d(int) -> eHFh
    156:156:react.surge.util.PE a(int) -> qRxo
    166:166:org.bukkit.potion.PotionEffect c() -> rFTA
    177:178:void c(org.bukkit.entity.LivingEntity) -> hrnE
    182:183:void crm(org.bukkit.entity.LivingEntity) -> IguI
    187:188:void rm(org.bukkit.entity.LivingEntity) -> mylb
react.surge.util.ParticleEffect -> jpyt:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> FsLD
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> tFKU
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> ItEH
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> FHWd
    react.surge.util.ParticleEffect WATER_BUBBLE -> JLTD
    react.surge.util.ParticleEffect WATER_SPLASH -> FQHo
    react.surge.util.ParticleEffect WATER_WAKE -> FHWl
    react.surge.util.ParticleEffect SUSPENDED -> Tscb
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> gQFe
    react.surge.util.ParticleEffect CRIT -> slyo
    react.surge.util.ParticleEffect CRIT_MAGIC -> bkir
    react.surge.util.ParticleEffect SMOKE_NORMAL -> RTKa
    react.surge.util.ParticleEffect SMOKE_LARGE -> yMIN
    react.surge.util.ParticleEffect SPELL -> GSjC
    react.surge.util.ParticleEffect SPELL_INSTANT -> sKWP
    react.surge.util.ParticleEffect SPELL_MOB -> QPfJ
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> euSK
    react.surge.util.ParticleEffect SPELL_WITCH -> BLky
    react.surge.util.ParticleEffect DRIP_WATER -> CrRN
    react.surge.util.ParticleEffect DRIP_LAVA -> rsIA
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> WQwC
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> TtBw
    react.surge.util.ParticleEffect TOWN_AURA -> rXtT
    react.surge.util.ParticleEffect NOTE -> GSio
    react.surge.util.ParticleEffect PORTAL -> thKy
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> JLRe
    react.surge.util.ParticleEffect FLAME -> EDsM
    react.surge.util.ParticleEffect LAVA -> rHSk
    react.surge.util.ParticleEffect FOOTSTEP -> ptqV
    react.surge.util.ParticleEffect CLOUD -> XoMj
    react.surge.util.ParticleEffect REDSTONE -> ayhC
    react.surge.util.ParticleEffect SNOWBALL -> UmtR
    react.surge.util.ParticleEffect SNOW_SHOVEL -> ixpr
    react.surge.util.ParticleEffect SLIME -> DSUF
    react.surge.util.ParticleEffect HEART -> TtEk
    react.surge.util.ParticleEffect BARRIER -> iFNB
    react.surge.util.ParticleEffect ITEM_CRACK -> NHAM
    react.surge.util.ParticleEffect BLOCK_CRACK -> HxsD
    react.surge.util.ParticleEffect BLOCK_DUST -> UUFI
    react.surge.util.ParticleEffect WATER_DROP -> kLSl
    react.surge.util.ParticleEffect ITEM_TAKE -> qpIH
    react.surge.util.ParticleEffect MOB_APPEARANCE -> whhS
    react.surge.util.ParticleEffect DRAGON_BREATH -> hdmM
    react.surge.util.ParticleEffect END_ROD -> TIRH
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> jbbf
    react.surge.util.ParticleEffect SWEEP_ATTACK -> rYWw
    java.util.Map NAME_MAP -> yDYy
    java.util.Map ID_MAP -> IISD
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> eKBu
    java.util.List properties -> GePJ
    react.surge.util.ParticleEffect[] ENUM$VALUES -> kTcg
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> OrtM
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> HTQG
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> NxJQ
    557:565:react.surge.util.ParticleEffect fromId(int) -> UtMf
    577:578:boolean isWater(org.bukkit.Location) -> aKwB
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> HTQG
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> HTQG
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> HTQG
    665:681:void display(float,int,org.bukkit.Location,double) -> HTQG
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> HTQG
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> HTQG
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> HTQG
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> HTQG
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> HTQG
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> HTQG
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> HTQG
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> HTQG
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> HTQG
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> HTQG
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> HTQG
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> HTQG
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> HTQG
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> HTQG
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> jpyt$HTQG:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> jpyt$yknY:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> jpyt$DaVa:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> xaWP
    1594:1594:float getValueY() -> YyAq
    1605:1605:float getValueZ() -> QVwO
react.surge.util.ParticleEffect$OrdinaryColor -> jpyt$Mtah:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> xaWP
    1526:1526:float getValueY() -> YyAq
    1537:1537:float getValueZ() -> QVwO
react.surge.util.ParticleEffect$ParticleColor -> jpyt$qKFF:
    1383:1383:void <init>() -> <init>
    float getValueX() -> xaWP
    float getValueY() -> YyAq
    float getValueZ() -> QVwO
react.surge.util.ParticleEffect$ParticleColorException -> jpyt$hrnE:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> jpyt$IguI:
    org.bukkit.Material material -> neyO
    byte data -> GnAV
    int[] packetData -> xRWo
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> RAIW
    1309:1309:java.lang.String getPacketDataString() -> qnES
react.surge.util.ParticleEffect$ParticleDataException -> jpyt$mylb:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> jpyt$qRsr:
    int version -> version
    java.lang.Class enumParticle -> PDtC
    java.lang.reflect.Constructor packetConstructor -> ubaD
    java.lang.reflect.Method getHandle -> pSRA
    java.lang.reflect.Field playerConnection -> TYqL
    java.lang.reflect.Method sendPacket -> gPfw
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> YaPl
    float offsetX -> RBia
    float offsetY -> rriN
    float offsetZ -> xAUs
    float speed -> pAnd
    int amount -> skjL
    boolean longDistance -> plbg
    react.surge.util.ParticleEffect$ParticleData data -> eAok
    java.lang.Object packet -> TQaT
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> TguA
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> HTQG
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> yknY
    2004:2018:void sendTo(org.bukkit.Location,double) -> yknY
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> jpyt$qRsr$HTQG:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> jpyt$qRsr$yknY:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> jpyt$qRsr$DaVa:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> jpyt$vbcw:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> ecre
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> dPNs
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> sBgb
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> CqtE
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> OKDB
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> jpyt$rUvu:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> ebMN:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> FWAD
react.surge.util.Persist -> OamO:
react.surge.util.PluginUtil -> PmaV:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> qKFF
    81:85:void enableAll() -> lLug
    95:99:void disable(org.bukkit.plugin.Plugin) -> hrnE
    106:110:void disableAll() -> uXRE
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> IguI
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> HTQG
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> INfu
    169:172:java.util.List getPluginNames(boolean) -> jxsq
    184:187:java.lang.String getPluginVersion(java.lang.String) -> IgyO
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> mylb
    237:316:java.util.List findByCommand(java.lang.String) -> XIqQ
    337:338:void load(org.bukkit.plugin.Plugin) -> qRsr
    342:364:java.lang.String getPluginFileName(java.lang.String) -> OHHl
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> HTQG
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> vbcw
    480:484:void reloadAll() -> OPsV
    496:622:void unload(org.bukkit.plugin.Plugin) -> rUvu
react.surge.util.PoolCount -> nRsT:
react.surge.util.PoolDescriber -> jWhb:
react.surge.util.PoolNanoThrottle -> SfIu:
react.surge.util.PositionalSelector -> APRj:
    react.glang.GSet allowedChunks -> daTF
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> VDfb
    39:40:void addChunk(org.bukkit.Chunk) -> JkYS
    44:44:react.glang.GSet getAllowedChunks() -> Aimb
react.surge.util.Protocol -> maSG:
    react.surge.util.Protocol LATEST -> ptvh
    react.surge.util.Protocol R1_12_2 -> cgBJ
    react.surge.util.Protocol R1_12_2_PRE -> lykn
    react.surge.util.Protocol R1_12_1 -> JCfS
    react.surge.util.Protocol R1_12 -> KFiU
    react.surge.util.Protocol R1_11_2 -> sCKm
    react.surge.util.Protocol R1_11_1 -> DuYp
    react.surge.util.Protocol R1_11 -> kLUq
    react.surge.util.Protocol R1_10_2 -> wFfo
    react.surge.util.Protocol R1_10_1 -> KFhy
    react.surge.util.Protocol R1_10 -> mQyx
    react.surge.util.Protocol R1_9_4 -> yxAn
    react.surge.util.Protocol R1_9_3 -> qVVt
    react.surge.util.Protocol R1_9_2 -> cVAG
    react.surge.util.Protocol R1_9_1 -> IjwK
    react.surge.util.Protocol R1_9 -> jsfE
    react.surge.util.Protocol R1_8_9 -> wNwJ
    react.surge.util.Protocol R1_8_8 -> LuAq
    react.surge.util.Protocol R1_8_7 -> hSmP
    react.surge.util.Protocol R1_8_6 -> jsfL
    react.surge.util.Protocol R1_8_5 -> bkmS
    react.surge.util.Protocol R1_8_4 -> DRth
    react.surge.util.Protocol R1_8_3 -> VNwj
    react.surge.util.Protocol R1_8_2 -> bkmN
    react.surge.util.Protocol R1_8_1 -> kefb
    react.surge.util.Protocol R1_8 -> EVYL
    react.surge.util.Protocol R1_7_10 -> XxBp
    react.surge.util.Protocol R1_7_9 -> AtbA
    react.surge.util.Protocol R1_7_8 -> jYra
    react.surge.util.Protocol R1_7_7 -> OdWL
    react.surge.util.Protocol R1_7_6 -> MVAC
    react.surge.util.Protocol R1_7_5 -> KXJi
    react.surge.util.Protocol R1_7_4 -> QQKa
    react.surge.util.Protocol R1_7_3 -> XMNq
    react.surge.util.Protocol R1_7_2 -> EUxY
    react.surge.util.Protocol R1_7_1 -> ItHM
    react.surge.util.Protocol B1_6_4 -> aFhB
    react.surge.util.Protocol B1_6_3 -> rsKp
    react.surge.util.Protocol B1_6_2 -> NXbi
    react.surge.util.Protocol B1_6_1 -> GSmx
    react.surge.util.Protocol B1_5_2 -> ixrM
    react.surge.util.Protocol B1_5_1 -> uIPg
    react.surge.util.Protocol B1_5 -> eKDO
    react.surge.util.Protocol B1_4_7 -> GBnv
    react.surge.util.Protocol B1_4_6 -> oYEP
    react.surge.util.Protocol B1_4_5 -> ReSA
    react.surge.util.Protocol B1_4_4 -> LImx
    react.surge.util.Protocol B1_4_2 -> oHCh
    react.surge.util.Protocol B1_3_2 -> UUIr
    react.surge.util.Protocol B1_3_1 -> BxGB
    react.surge.util.Protocol B1_2_5 -> tNaa
    react.surge.util.Protocol B1_2_4 -> rala
    react.surge.util.Protocol EARLIEST -> tFQC
    react.surge.util.Protocol UNKNOWN -> Qrpf
    int version -> version
    java.lang.String packageVersion -> PfGP
    java.lang.String versionName -> rGyj
    boolean netty -> lynH
    react.surge.util.Protocol[] ENUM$VALUES -> ayoR
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> VVIT
    118:118:java.lang.String getPackageVersion() -> EKPo
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> vIrQ
    142:150:react.surge.util.Protocol getProtocolVersion() -> ioBP
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> yknY
    160:160:boolean isServerVersion() -> kSDp
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> klWM
    175:175:boolean isActualVersion() -> Vfig
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> VDff
    200:200:int getMetaVersion() -> iClh
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> RkVx:
    react.surge.util.Protocol from -> lFhw
    react.surge.util.Protocol to -> thSl
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> kSET
    21:21:react.surge.util.Protocol getTo() -> Sepm
    26:26:boolean contains(react.surge.util.Protocol) -> DaVa
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> twHm:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> DbVa
    70:70:int randomNextInt() -> fSti
    80:80:long randomNextLong() -> aUfu
    92:92:boolean isWithin(double) -> ctbR
    104:104:boolean isWithin(int) -> AXQH
    116:116:boolean isWithin(long) -> uWOp
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> JQgp
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> NxFW
react.surge.util.RawEvent -> QVrF:
react.surge.util.RayTrace -> woPM:
    org.bukkit.Location start -> oGbY
    org.bukkit.util.Vector direction -> iEpE
    java.lang.Double maxDistance -> OKGR
    java.lang.Double distanceCovered -> wGIL
    java.lang.Double step -> ReQa
    java.lang.Boolean stop -> liMG
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> opRk
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> rUvu
    89:89:org.bukkit.Location getStart() -> fCUV
    94:95:void setStart(org.bukkit.Location) -> YxDw
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> PmjA
    114:115:void setMaxDistance(java.lang.Double) -> Mtah
    119:119:java.lang.Double getDistanceCovered() -> hsnE
    124:125:void setDistanceCovered(java.lang.Double) -> qKFF
    129:129:java.lang.Double getStep() -> DIES
    134:135:void setStep(java.lang.Double) -> hrnE
react.surge.util.ReflectionUtils -> xqrS:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> HTQG
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> HTQG
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> HTQG
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> HTQG
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> HTQG
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> HTQG
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> HTQG
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> HTQG
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> HTQG
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> HTQG
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> HTQG
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> HTQG
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> HTQG
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> HTQG
react.surge.util.ReflectionUtils$DataType -> xqrS$HTQG:
    react.surge.util.ReflectionUtils$DataType BYTE -> YHCT
    react.surge.util.ReflectionUtils$DataType SHORT -> Pokw
    react.surge.util.ReflectionUtils$DataType INTEGER -> hurA
    react.surge.util.ReflectionUtils$DataType LONG -> Eolq
    react.surge.util.ReflectionUtils$DataType CHARACTER -> oieF
    react.surge.util.ReflectionUtils$DataType FLOAT -> ojEe
    react.surge.util.ReflectionUtils$DataType DOUBLE -> sTMm
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> QrpB
    java.util.Map CLASS_MAP -> FbOo
    java.lang.Class primitive -> hSmp
    java.lang.Class reference -> Dlle
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> IHwY
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> JRes
    704:704:java.lang.Class getReference() -> NVbK
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> yknY
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> DaVa
    741:742:java.lang.Class getReference(java.lang.Class) -> Mtah
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> HTQG
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> yknY
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> yknY
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> DaVa
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> HTQG
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> xqrS$yknY:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> BwhM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> tpgI
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> bcab
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> ixwg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> OBYV
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> lhmx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> vKxC
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> NYHy
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> CaYA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> sBoK
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> xuCB
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> JvnI
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> dXdy
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> Ocyr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> Isjj
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> xlQS
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> oqvo
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> Fjak
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> pcwj
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> qUyU
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> VWmk
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> dMei:
    void refresh() -> refresh
react.surge.util.SQLOperation -> sjrk:
    react.surge.util.SQLOperation LOAD -> COwO
    react.surge.util.SQLOperation SAVE -> YPVS
    react.surge.util.SQLOperation[] ENUM$VALUES -> Spis
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> dUuo:
    react.surge.util.ServerState START -> tFTw
    react.surge.util.ServerState ENABLE -> rsTJ
    react.surge.util.ServerState DISABLE -> FkEb
    react.surge.util.ServerState STOP -> SWXV
    react.surge.util.ServerState RUNNING -> kenI
    react.surge.util.ServerState[] ENUM$VALUES -> cLsq
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> yleP:
    org.bukkit.Location location -> UeIL
    org.bukkit.util.Vector offset -> XUfI
    org.bukkit.util.Vector size -> COyB
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> JkYS
    90:94:org.bukkit.Location randomLocation() -> gOHf
    104:104:org.bukkit.Location randomSurface() -> EdyR
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> vSCu
    129:129:org.bukkit.util.Vector getSize() -> qBsP
react.surge.util.SnowLevel -> gWPW:
    byte level -> EpRq
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> RALW
    51:52:void setLevel(byte) -> qRsr
react.surge.util.SuperCaller -> uhhf:
    void run() -> run
react.surge.util.T -> LaTB:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> yknY
    32:35:void stop() -> stop
react.surge.util.TXT -> fCJr:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> IguI
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> HTQG
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> HTQG
    99:99:java.lang.String line(react.surge.util.C,int) -> HTQG
    113:113:java.lang.String underline(react.surge.util.C,int) -> yknY
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> HTQG
react.surge.util.Tag -> loPf:
    java.lang.String value() -> value
react.surge.util.Timer -> WjCu:
    long tns -> OKKw
    long cns -> dGff
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> YWAx
react.surge.util.VectorMath -> FFQA:
    int[] $SWITCH_TABLE$surge$util$Axis -> OSAK
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> rbQh
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> HTQG
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> HTQG
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> yknY
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> DaVa
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> HTQG
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> yknY
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> yknY
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> DaVa
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> Mtah
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> qKFF
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> hrnE
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> IguI
    111:111:double round(double,int) -> qKFF
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> HTQG
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> HTQG
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> HTQG
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> Mtah
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> qKFF
    268:268:org.bukkit.util.Vector toVector(float,float) -> HTQG
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> HTQG
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> HTQG
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> mylb
    337:340:double getSpeed(org.bukkit.util.Vector) -> qRsr
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> HTQG
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> vbcw
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> HTQG
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> yknY
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> DaVa
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> Mtah
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> rUvu
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> hRIg
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> kSDi
react.surge.util.VectorMath$1 -> FFQA$1:
    org.bukkit.util.Vector val$vector -> QHbB
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> aKwB
    1:1:java.lang.Object onAdapt(java.lang.Object) -> IguI
react.surge.util.W -> xqqd:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> mylb
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> HTQG
    75:86:org.bukkit.entity.Entity getEntity(int) -> HdvJ
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> HTQG
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> HTQG
    143:143:int getChunkX(org.bukkit.block.Block) -> qRsr
    155:155:int getChunkY(org.bukkit.block.Block) -> vbcw
    168:169:void dropXp(org.bukkit.Location,int) -> yknY
    180:180:int getChunkZ(org.bukkit.block.Block) -> rUvu
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> yknY
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> HTQG
    232:239:react.glang.GList news(org.bukkit.Location) -> HSqA
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> HTQG
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> HSqA
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> bOYL
    300:300:org.bukkit.World toSync(org.bukkit.World) -> fKEA
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> aKwB
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> jxsq
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> jxsq
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> lUKm
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> HTQG
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> HTQG
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> HTQG
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> HTQG
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> HTQG
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> HTQG
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> HTQG
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> HTQG
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> wDFB
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> TguA
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> wDFB
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> DaVa
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> HTQG
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> HTQG
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> HTQG
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> HTQG
react.surge.util.W$1 -> xqqd$1:
    java.lang.Double val$doff -> yMFl
    org.bukkit.entity.Entity val$e -> AIrW
    org.bukkit.entity.Entity[] val$result -> sKTo
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> rUvu
react.surge.util.Worlds -> BKGI:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> KgAP
    33:33:boolean hasWorld(java.lang.String) -> eOwA
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> uyig:
react.text.ColoredString -> LOrD:
    react.surge.util.C c -> coYH
    java.lang.String s -> hTSm
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> YWAL
    42:43:void setC(react.surge.util.C) -> yknY
    47:47:java.lang.String getS() -> LXkF
    52:53:void setS(java.lang.String) -> BktO
react.text.RTEX -> KxCk:
    react.glang.GList extras -> arCl
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> OHbL
    44:58:react.json.JSONObject toJSON() -> kbfx
react.text.RTX -> EeQH:
    react.json.JSONArray base -> SqKi
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> hrnE
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> yknY
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> HTQG
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> HTQG
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> yknY
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> DaVa
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> HTQG
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> yknY
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> DaVa
    265:265:react.json.JSONArray toJSON() -> qTTn
    276:277:void tellRawTo(org.bukkit.entity.Player) -> kbfx
react.text.RawText -> YojQ:
    java.lang.String COLOR_BLACK -> hduF
    java.lang.String COLOR_DARK_BLUE -> pmLy
    java.lang.String COLOR_DARK_GREEN -> gsSW
    java.lang.String COLOR_DARK_AQUA -> daYJ
    java.lang.String COLOR_DARK_RED -> JfOU
    java.lang.String COLOR_DARK_PURPLE -> jRIS
    java.lang.String COLOR_GOLD -> ahpR
    java.lang.String COLOR_GRAY -> jIWl
    java.lang.String COLOR_DARK_GRAY -> WlTk
    java.lang.String COLOR_BLUE -> gYaF
    java.lang.String COLOR_GREEN -> VrBg
    java.lang.String COLOR_AQUA -> cVDv
    java.lang.String COLOR_RED -> BxKh
    java.lang.String COLOR_LIGHT_PURPLE -> RCSY
    java.lang.String COLOR_YELLOW -> kelX
    java.lang.String COLOR_WHITE -> KFoO
    java.lang.String COLOR_NONE -> jskK
    java.lang.String HEAD_TEXT -> UTlk
    java.lang.String HEAD_COLOR -> nEBy
    java.lang.String HEAD_BOLD -> UeqL
    java.lang.String HEAD_ITALIC -> qMne
    java.lang.String HEAD_UNDERLINED -> yoXw
    java.lang.String HEAD_STRIKETHROUGH -> BxLg
    java.lang.String HEAD_OBFUSCATED -> qxcV
    java.lang.String HEAD_CLICK_EVENT -> aGRI
    java.lang.String HEAD_HOVER_EVENT -> mBBp
    java.lang.String HEAD_ACTION -> tFWI
    java.lang.String HEAD_VALUE -> TcNu
    java.lang.String HEAD_EXTRA -> NYLw
    java.lang.String HEAD_ACTION_SHOW_TEXT -> ywiV
    java.lang.String HEAD_ACTION_COMMAND -> BMWu
    java.util.ArrayList components -> suvt
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> xrAJ
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> qKFF
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> HTQG
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> HTQG
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> HTQG
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> HTQG
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> HTQG
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> HTQG
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> HTQG
    307:313:java.lang.String compile() -> xHGp
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> HTQG

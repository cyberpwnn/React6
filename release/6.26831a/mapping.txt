react.Config -> Mkow:
    react.glang.GMap worldConfigs -> Mkow
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> IFRU
    java.lang.String A_REDSTONE_DYNAMIC_CLOCK -> rVYH
    java.lang.String A_COMMANDOVERRIDE_TPS -> Nnru
    java.lang.String A_REACT_REMOTE_PORT -> TNas
    java.lang.String A_REACT_REMOTE_ENABLED -> eXcP
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> uNaA
    java.lang.String A_POOL_MAXTHREADS -> KCga
    java.lang.String A_POOL_SYNC_NANOS -> ooRY
    java.lang.String A_CULLING_ENABLED -> QDxU
    java.lang.String A_FASTLEAF_ENABLED -> vtFt
    java.lang.String A_FASTLEAF_ONDECAY -> VLWv
    java.lang.String A_FASTLEAF_INSTANT -> Oifg
    java.lang.String A_FASTLEAF_DECAYPERIOD -> FpMD
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> BSAO
    java.lang.String A_ENTITYSTACK_ENABLED -> UkWJ
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> Pcvg
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> WGJF
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> oMOG
    java.lang.String A_GLASS_SHOW_BLOCKS -> jgqh
    java.lang.String A_GLASS_SHOW_PARTICLES -> EJfM
    java.lang.String A_ALLOW_CULL -> VvjN
    java.lang.String A_ALLOW_PURGE -> awIs
    java.lang.String A_ALLOW_STACKING -> FNJQ
    java.lang.String A_CULL_RULES -> Lymj
    java.lang.String A_RAI_TPS_HIGH_TICK -> ThTH
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> yIic
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> aTfr
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> lLTu
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> hbLY
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> paRd
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> NUaW
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> flfj
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> qBRp
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> CVCS
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> uhQg
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> HTSM
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> fdYe
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> upfI
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> YwfJ
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> nInK
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> Nfdt
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> iBoS
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> uVsM
    java.lang.String A_RAI_FLUID_TIME_CEIL -> eifd
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> gpOE
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> ylPg
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> hanX
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> uWRu
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> yIlh
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> uNbJ
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> Xtbw
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> HCRP
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> Smdg
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> lKwf
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> LqaU
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> MksN
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> gomS
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> hrot
    java.lang.String A_USE_WORLD_CONFIGS -> Ipfb
    java.lang.String A_LANGUAGE -> lwLT
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> NgDr
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> IyWh
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> xhkx
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> bGKP
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> JRGd
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> BktB
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> PBVq
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> TyVq
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> turM
    java.lang.String A_RAI_ENTITY_PROPIGATE -> xynB
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> Digp
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> wLVh
    double MAX_EXPLOSION_MS -> DaXQ
    boolean REDSTONE_DYNAMIC_CLOCK -> HLAs
    boolean COMMANDOVERRIDES_TPS -> bWkk
    int REACT_REMOTE_PORT -> LGMM
    boolean REACT_REMOTE_ENABLED -> ctbE
    int ENTITY_STACK_MAX_COUNT -> pHBy
    int POOL_MAXTHREADS -> UAEs
    long POOL_SYNC_NANOS -> cdAQ
    boolean CULLING_ENABLED -> CxIx
    boolean FASTLEAF_ENABLED -> BRbk
    boolean FASTLEAF_ONDECAY -> cBAD
    boolean FASTLEAF_INSTANT -> iuuf
    int FASTLEAF_DECAYPERIOD -> WWns
    boolean COMMANDOVERRIDES_MEMORY -> UtLs
    boolean ENTITYSTACK_ENABLED -> Jbkj
    int ENTITYSTACK_MINIMUM_GROUP -> qcyj
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> KTlw
    int ENTITYSTACK_MAXIMUM_HEALTH -> Bcci
    boolean GLASS_SHOW_BLOCKS -> PmON
    boolean GLASS_SHOW_PARTICLES -> BIqO
    react.glang.GList ALLOW_CULL -> jxxS
    react.glang.GList ALLOW_PURGE -> WysC
    react.glang.GList ALLOW_STACKING -> YgHP
    react.glang.GList CULL_RULES -> HSuH
    double RAI_TPS_HIGH_TICK -> nuEL
    long RAI_REDSTONE_TIME_FLOOR -> FMmG
    long RAI_REDSTONE_TIME_CEIL -> jOEQ
    long RAI_REDSTONE_TIME_MUDDING -> lKxi
    double RAI_REDSTONE_TIME_FUNCTION -> BRco
    double RAI_REDSTONE_TIME_OVERBLEED -> PKIo
    int RAI_REDSTONE_TIME_RADIUS -> YxHX
    int RAI_REDSTONE_TIME_PROPIGATION -> lCiG
    long RAI_HOPPER_TIME_FLOOR -> HmfJ
    long RAI_HOPPER_TIME_CEIL -> SnFW
    long RAI_HOPPER_TIME_MUDDING -> NUeF
    double RAI_HOPPER_TIME_FUNCTION -> sPmk
    double RAI_HOPPER_TIME_OVERBLEED -> IhXi
    int RAI_HOPPER_TIME_RADIUS -> MRbP
    int RAI_HOPPER_TIME_PROPIGATION -> TpiJ
    int RAI_ENTITY_CHUNK_MULTIPLIER -> wChH
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> ArCv
    int RAI_ENTITY_CHUNK_RADIUS -> OPWo
    long RAI_FLUID_TIME_FLOOR -> wUIu
    long RAI_FLUID_TIME_CEIL -> NUdv
    long RAI_FLUID_TIME_MUDDING -> rpMy
    double RAI_FLUID_TIME_FUNCTION -> pGhF
    double RAI_FLUID_TIME_OVERBLEED -> sHaC
    int RAI_FLUID_TIME_RADIUS -> qKKg
    int RAI_FLUID_TIME_PROPIGATION -> ckuY
    double SMEAR_TICK_ENTITIES_MAX_TICK -> QpRw
    double SMEAR_TICK_TILES_MAX_TICK -> JQlE
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> hruB
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> UbmO
    double SMEAR_TICK_ENTITIES_AMOUNT -> APBl
    double SMEAR_TICK_TILES_AMOUNT -> tTUS
    boolean SMEAR_TICK_ENTITIES_ENABLE -> QosC
    boolean SMEAR_TICK_TILES_ENABLE -> MSEm
    boolean HOPPER_OVERTICK_ENABLE -> Fort
    boolean USE_WORLD_CONFIGS -> SLFY
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> KoCH
    long RAI_CHUNK_TIME_CEIL -> XAcS
    long RAI_CHUNK_TIME_MUDDING -> Elox
    double RAI_CHUNK_TIME_FUNCTION -> biTL
    double RAI_CHUNK_TIME_OVERBLEED -> PlpE
    int RAI_CHUNK_TIME_RADIUS -> sbSS
    int RAI_CHUNK_TIME_PROPIGATION -> xqbL
    boolean RAI_CHUNK_TIME_PROPIGATE -> QNQQ
    boolean RAI_FLUID_TIME_PROPIGATE -> hrsx
    boolean RAI_ENTITY_PROPIGATE -> OimN
    boolean RAI_HOPPER_TIME_PROPIGATE -> YLtj
    boolean RAI_REDSTONE_TIME_PROPIGATE -> saps
    boolean hrld -> fKKM
    boolean rns -> BuIm
    boolean rrl -> ugxE
    37:37:void <init>() -> <init>
    659:676:void doTrack(org.bukkit.plugin.Plugin) -> Mkow
    681:703:void onRead(org.bukkit.plugin.Plugin) -> IFRU
    707:737:void read(java.io.File,boolean) -> Mkow
    741:758:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> Mkow
    763:771:void closeWorldConfig(org.bukkit.World) -> IFRU
    776:889:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> Mkow
    894:931:react.surge.cluster.DataCluster defaultConfig(boolean) -> Mkow
    936:1015:react.glang.GList getDefaultEntitiesForStacking() -> Mkow
    1020:1039:react.glang.GList getDefaultEntitiesForCulling() -> IFRU
    1044:1081:react.glang.GList getDefaultEntitiesForRemoval() -> rVYH
    1086:1127:react.glang.GList getDefaultCullRules() -> Nnru
    39:654:void <clinit>() -> <clinit>
react.Config$1 -> Mkow$1:
    java.io.File val$fConfig -> ooXP
    java.io.File val$fConfigExperimental -> FNPY
    org.bukkit.plugin.Plugin val$main -> McfE
    663:663:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    667:671:void run() -> run
react.Config$2 -> Mkow$2:
    react.api.WorldConfig val$wc -> oMTW
    org.bukkit.World val$w -> bGPI
    749:749:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    753:754:void run() -> run
react.Gate -> IFRU:
    react.glang.GMap defaultSettings -> bFoI
    react.glang.GSet refresh -> TFWY
    react.glang.GSet destroy -> KDNK
    40:40:void <init>() -> <init>
    48:138:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> Mkow
    144:175:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> Mkow
    180:180:int getChunkCountForView() -> TNas
    185:185:int getMaxChunksForView() -> eXcP
    190:190:boolean hasFawe() -> uNaA
    195:216:void tickEntityNextTickListTick(org.bukkit.World) -> rVYH
    220:224:void resetEntityMaxTick(org.bukkit.World) -> Nnru
    228:228:int getEntityTickMax(org.bukkit.World) -> TNas
    233:233:int getTileTickMax(org.bukkit.World) -> eXcP
    238:256:void tweakEntityTickMax(org.bukkit.World,int) -> Mkow
    260:277:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> Mkow
    282:286:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> Mkow
    290:302:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> Mkow
    307:311:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> IFRU
    315:333:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> Mkow
    337:341:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> uNaA
    346:349:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> Mkow
    354:357:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> IFRU
    362:362:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> rVYH
    367:367:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> Nnru
    372:372:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> TNas
    377:377:boolean isBadForUnloading() -> KCga
    382:382:boolean canUnload(org.bukkit.World,int,int) -> Mkow
    389:405:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    411:422:void unloadChunk(org.bukkit.World,int,int) -> IFRU
    426:442:void removeEntity(org.bukkit.entity.Entity) -> Mkow
    446:462:void purgeEntity(org.bukkit.entity.Entity) -> IFRU
    466:487:void cullEntity(org.bukkit.entity.Entity) -> rVYH
    492:509:void updateBlock(org.bukkit.block.Block) -> Mkow
    513:517:java.lang.String header(java.lang.String,react.surge.util.C) -> Mkow
    522:522:java.lang.String header(react.surge.util.C) -> Mkow
    528:532:void updateFluid(org.bukkit.block.Block) -> IFRU
    536:537:void refresh(org.bukkit.Chunk) -> IFRU
    542:561:void refreshChunks() -> ooRY
    565:566:void sendBlockChange(org.bukkit.Location) -> Mkow
    42:44:void <clinit>() -> <clinit>
react.Gate$1 -> IFRU$1:
    react.api.SelectorPosition val$sel -> WrDe
    react.glang.Callback val$prog -> JAKH
    react.glang.Callback val$cb -> AiTu
    49:49:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    53:136:void run() -> run
react.Gate$1$1 -> IFRU$1$1:
    java.lang.Object val$o -> Igyu
    java.lang.reflect.Constructor val$vectorConstruct -> MuGx
    java.lang.reflect.Constructor val$cuboidConstruct -> AaDe
    java.lang.reflect.Method val$faweFixMethod -> QyFd
    java.lang.Integer[] val$total -> maEC
    java.lang.Integer[] val$sof -> vHyy
    java.lang.Integer val$tot -> RbVf
    react.Gate$1 this$0 -> aTpD
    81:81:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],java.lang.Integer) -> <init>
    87:105:void run() -> run
react.Gate$1$2 -> IFRU$1$2:
    java.lang.Integer[] val$total -> maEC
    react.Gate$1 this$0 -> aTpD
    110:110:void <init>(react.Gate$1,java.lang.String,int,java.lang.Integer[]) -> <init>
    116:124:void run() -> run
react.Gate$2 -> IFRU$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> RIEX
    290:290:void <clinit>() -> <clinit>
react.Info -> rVYH:
    java.lang.String CORE_REACT_DOT -> MRfl
    java.lang.String CORE_NAME -> wUNw
    java.lang.String CORE_CACHE -> QouK
    java.lang.String WORLD_CONFIGS -> mrFA
    java.lang.String CORE_DOTYML -> bOcT
    java.lang.String COMMAND_REACT -> HKgx
    java.lang.String COMMAND_RAI -> uqKp
    java.lang.String COMMAND_ACT_DESCRIPTION -> QouH
    java.lang.String COMMAND_ACT -> CVJY
    java.lang.String COMMAND_ACT_ALIAS_1 -> VfSX
    java.lang.String COMMAND_ACT_ALIAS_2 -> PJno
    java.lang.String COMMAND_ACT_USAGE -> bPDI
    java.lang.String COMMAND_HELP_DESCRIPTION -> gyFC
    java.lang.String COMMAND_HELP -> owiu
    java.lang.String COMMAND_HELP_ALIAS_1 -> cuHe
    java.lang.String COMMAND_HELP_ALIAS_2 -> PKNW
    java.lang.String COMMAND_HELP_USAGE -> AFtN
    java.lang.String COMMAND_STATUS_DESCRIPTION -> OYLi
    java.lang.String COMMAND_STATUS -> IOKE
    java.lang.String COMMAND_STATUS_ALIAS_1 -> EJnK
    java.lang.String COMMAND_STATUS_ALIAS_2 -> nIsN
    java.lang.String COMMAND_STATUS_USAGE -> IVyp
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> mrDs
    java.lang.String COMMAND_CPUSCORE -> aDMq
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> yIrV
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> mhrv
    java.lang.String COMMAND_CPUSCORE_USAGE -> myuG
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> nlWU
    java.lang.String COMMAND_RELOAD -> EJmw
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> nBCR
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> jpjg
    java.lang.String COMMAND_RELOAD_USAGE -> XdGw
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> anah
    java.lang.String COMMAND_MONITOR -> EKOb
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> hHal
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> VCnU
    java.lang.String COMMAND_MONITOR_USAGE -> jWXw
    java.lang.String COMMAND_ENV_DESCRIPTION -> onxb
    java.lang.String COMMAND_ENV -> jqLS
    java.lang.String COMMAND_ENV_ALIAS_1 -> hkHu
    java.lang.String COMMAND_ENV_ALIAS_2 -> loDt
    java.lang.String COMMAND_ENV_USAGE -> UcRN
    java.lang.String COMMAND_VERSION_DESCRIPTION -> PmTY
    java.lang.String COMMAND_VERSION -> MBHU
    java.lang.String COMMAND_VERSION_ALIAS_1 -> biVx
    java.lang.String COMMAND_VERSION_ALIAS_2 -> gFBf
    java.lang.String COMMAND_VERSION_USAGE -> wvsn
    java.lang.String COMMAND_MAP_DESCRIPTION -> wLaF
    java.lang.String COMMAND_MAP -> DYQJ
    java.lang.String COMMAND_MAP_ALIAS_1 -> AaHY
    java.lang.String COMMAND_MAP_ALIAS_2 -> biXO
    java.lang.String COMMAND_MAP_USAGE -> RkKG
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> pioC
    java.lang.String COMMAND_TOPCHUNK -> dwmo
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> jNkT
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> brII
    java.lang.String COMMAND_TOPCHUNK_USAGE -> Jkab
    java.lang.String COMMAND_GLASS_DESCRIPTION -> Btlv
    java.lang.String COMMAND_GLASS -> FMrm
    java.lang.String COMMAND_GLASS_ALIAS_1 -> LPEa
    java.lang.String COMMAND_GLASS_ALIAS_2 -> nRfY
    java.lang.String COMMAND_GLASS_USAGE -> oLxP
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> PudI
    java.lang.String COMMAND_CBLAME -> LhwE
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> ckyO
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> fdbB
    java.lang.String COMMAND_CBLAME_USAGE -> rgcU
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> MAgO
    java.lang.String COMMAND_ACTIONLOG -> Lyxg
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> cSHO
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> xhse
    java.lang.String COMMAND_ACTIONLOG_USAGE -> NUkb
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> GjjC
    java.lang.String COMMAND_CAPABILITIES -> WPEb
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> UcQY
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> hbYo
    java.lang.String COMMAND_CAPABILITIES_USAGE -> EdfG
    java.lang.String MSG_PERMISSION -> KMEd
    java.lang.String MSG_MONITORING_STARTED -> KwXp
    java.lang.String MSG_MONITORING_STOPPED -> YfoD
    java.lang.String MSG_ACTIONLOGGING_STARTED -> eYQC
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> hPxI
    java.lang.String MSG_GLASS_STARTED -> eipl
    java.lang.String MSG_GLASS_STOPPED -> aetr
    org.bukkit.Color COLOR_HOPPER -> LOhW
    org.bukkit.Color COLOR_BLOCK_UPDATE -> Oirl
    org.bukkit.Color COLOR_BLOCK_FROMTO -> eXot
    org.bukkit.Color COLOR_BLOCK_BURN -> ogNd
    org.bukkit.Color COLOR_BLOCK_DECAY -> ntkm
    org.bukkit.Color COLOR_BLOCK_FORM -> UtUi
    java.lang.String NAME_TICK -> mFti
    java.lang.String NAME_MEMORY -> hHfs
    java.lang.String NAME_CHUNKS -> aCrc
    java.lang.String NAME_ENTITIES -> XBIu
    java.lang.String STATE_MONITORING_TAB -> BAhi
    java.lang.String STATE_MONITORING_ENABLED -> XRiY
    java.lang.String STATE_MONITORING_HIGH -> srxn
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> CVOx
    java.lang.String STATE_MAPPING_ENABLED -> xXUh
    java.lang.String STATE_SOUND_PLAYS -> HLLM
    java.lang.String STATE_MONITORING_POSTED -> FNUt
    java.lang.String STATE_MONITORING_LASTTAB -> gxhM
    java.lang.String STATE_GLASSES_ENABLED -> dEJr
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> Eddn
    java.lang.String STATE_PLAYER_HOTBAR -> GkLS
    java.lang.String STATE_PLAYER_SHIFT -> wesb
    java.lang.String STATE_PLAYER_SCROLL -> JtUS
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> lDRS
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> FWHE
    java.lang.String PERM_ACCESS -> CEMx
    java.lang.String PERM_MONITOR -> APIg
    java.lang.String PERM_MONITOR_TITLE -> ktSQ
    java.lang.String PERM_MONITOR_ACTIONLOG -> oVLO
    java.lang.String PERM_MONITOR_MAP -> ogMb
    java.lang.String PERM_MONITOR_ENVIRONMENT -> jpoS
    java.lang.String PERM_MONITOR_GLASSES -> miXI
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> WWyb
    java.lang.String PERM_ACT -> rNWQ
    java.lang.String PERM_RAI -> HmqQ
    java.lang.String PERM_RAI_CONTROL -> xqkQ
    java.lang.String PERM_RAI_ACCESS -> CNAG
    java.lang.String PERM_RAI_MONITOR -> vlFH
    java.lang.String PERM_RELOAD -> IXDH
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> ArNK
    java.lang.String SAMPLER_REDSTONE_TICK -> ogPd
    java.lang.String SAMPLER_ENTITY_TIME -> kbtH
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> bqlQ
    java.lang.String SAMPLER_TILE_TIME_LOCK -> xXYE
    java.lang.String SAMPLER_TILE_TIME -> aMGL
    java.lang.String SAMPLER_TILE_DROPTICK -> cRko
    java.lang.String SAMPLER_ENTITY_DROPTICK -> VTwO
    java.lang.String SAMPLER_REDSTONE_SECOND -> angi
    java.lang.String SAMPLER_REDSTONE_TIME -> HKlk
    java.lang.String SAMPLER_PHYSICS_TIME -> SmoW
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> OsEa
    java.lang.String SAMPLER_HOPPER_TICK -> rEeC
    java.lang.String SAMPLER_HOPPER_SECOND -> JRSu
    java.lang.String SAMPLER_HOPPER_TIME -> ejRq
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> iKlE
    java.lang.String SAMPLER_FLUID_TICK -> PTEk
    java.lang.String SAMPLER_FLUID_SECOND -> ofoS
    java.lang.String SAMPLER_FLUID_TIME -> afXP
    java.lang.String SAMPLER_TPS -> VLfL
    java.lang.String SAMPLER_TICK -> dgPg
    java.lang.String SAMPLER_TIU -> vlCn
    java.lang.String SAMPLER_MEM -> mqip
    java.lang.String SAMPLER_FREEMEM -> awYX
    java.lang.String SAMPLER_MAXMEM -> LaKr
    java.lang.String SAMPLER_ALLOCMEM -> NDmu
    java.lang.String SAMPLER_MAHS -> mGVj
    java.lang.String SAMPLER_CHK -> awYS
    java.lang.String SAMPLER_ATASK -> rMuB
    java.lang.String SAMPLER_STASK -> SwAv
    java.lang.String SAMPLER_CHK_TIME -> APMW
    java.lang.String SAMPLER_EXPLOSION_TIME -> vlHO
    java.lang.String SAMPLER_CHKS -> SKoc
    java.lang.String SAMPLER_ENT -> oocb
    java.lang.String SAMPLER_ENTLIV -> MSPT
    java.lang.String SAMPLER_ENTDROP -> klHd
    java.lang.String SAMPLER_ENTTILE -> mOjK
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> uiDT
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> bPLW
    java.lang.String ACTION_CULL_ENTITIES_NAME -> yRmA
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> YxVS
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> mPKL
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> FFLE
    java.lang.String ACTION_UPDATE_FLUID_NAME -> IXFO
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> vsve
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> ndOg
    java.lang.String ACTION_LOCK_FLUID_STATUS -> KTwp
    java.lang.String ACTION_LOCK_FLUID_NAME -> Keya
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> TXCc
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> rWIa
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> tnQS
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> XcoF
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> KoLP
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> SfAw
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> gMxQ
    java.lang.String ACTION_LOCK_HOPPER_NAME -> FxnS
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> tKkv
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> DPdp
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> dEPE
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> PBep
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> wTvG
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> kcVF
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> NUrC
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> AaOP
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> gWIh
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> kbuK
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> nAmj
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> HCaj
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> ncpq
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> jWdr
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> gWMY
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> YpGT
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> DYXt
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> UQwn
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> kkho
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> wnju
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> skPX
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> NgVp
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> HwHM
    java.lang.String ACTION_FIX_LIGHTING_NAME -> ntrP
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> lCwe
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> YESX
    java.lang.String ACTION_COLLECT_GARBAGE -> gFKb
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> Rjqx
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> prhU
    6:6:void <init>() -> <init>
    8:247:void <clinit>() -> <clinit>
react.Lang -> Nnru:
    java.lang.String BUNDLE_NAME -> INui
    java.util.ResourceBundle RESOURCE_BUNDLE -> GbcE
    java.util.ResourceBundle PRIMARY_BUNDLE -> BAoQ
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> TNas:
    react.React instance -> NDsW
    react.controller.SampleController sampleController -> rxnR
    react.controller.PlayerController playerController -> OjYx
    react.controller.MonitorController monitorController -> NDsX
    react.controller.CommandController commandController -> cuRn
    react.controller.ActionController actionController -> ejWa
    react.controller.FastDecayController fastDecayController -> IqWu
    react.controller.EntityStackController entityStackController -> jqWI
    react.controller.GlassController glassController -> GcAn
    react.controller.EntityCullController entityCullController -> UlIx
    react.controller.SpikeController spikeController -> tvby
    react.controller.SecurityController securityController -> gglL
    react.controller.RedstoneController redstoneController -> HnVA
    react.controller.HopperController hopperController -> oNBM
    react.controller.PhysicsController physicsController -> eXuU
    react.controller.TickTimeController tickTimeController -> ePdj
    react.controller.RAIController raiController -> Bcrq
    react.controller.FluidController fluidController -> TXIK
    react.controller.ChunkController chunkController -> UIhv
    react.controller.GraphController graphController -> QEmf
    react.controller.ChronophyFluidController fluidChronophyController -> Hefs
    react.controller.EventController eventController -> QVnw
    react.controller.SmearTickController smearTickController -> qSkE
    react.controller.FeatureController featureController -> GABP
    react.controller.HopperOvertickController hopperPlungeController -> AjDO
    react.controller.LanguageController languageController -> erja
    react.controller.RemoteController remoteController -> wMKp
    react.controller.ExplosiveController explosiveController -> RIRD
    react.controller.WorldController worldController -> HUGG
    42:42:void <init>() -> <init>
    134:142:void enable() -> enable
    148:148:void disable() -> disable
react.React$1 -> TNas$1:
    react.React this$0 -> XKDK
    135:135:void <init>(react.React) -> <init>
    139:140:void run() -> run
react.action.ActionCollectGarbage -> eXcP:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
react.action.ActionCollectGarbage$1 -> eXcP$1:
    react.action.source.IActionSource val$source -> nKAk
    react.action.ActionCollectGarbage this$0 -> CVWM
    30:30:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> eXcP$1$1:
    long val$mbnex -> xOmV
    long val$mbmem -> WrSk
    react.action.ActionCollectGarbage$1 this$1 -> OsMh
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> uNaA:
    long ms -> OGxY
    int lcd -> ArTD
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
    25:25:long access$002(react.action.ActionCullEntities,long) -> Mkow
    25:25:int access$100(react.action.ActionCullEntities) -> Mkow
    25:25:long access$000(react.action.ActionCullEntities) -> IFRU
react.action.ActionCullEntities$1 -> uNaA$1:
    react.action.ActionCullEntities this$0 -> fuln
    37:37:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> QDxU
    37:37:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> uNaA$2:
    react.action.ActionCullEntities this$0 -> fuln
    49:49:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> QDxU
    49:49:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> uNaA$3:
    react.glang.FinalInteger val$completed -> eHWA
    react.glang.FinalInteger val$total -> dofg
    react.glang.FinalInteger val$totalCulled -> FySF
    react.glang.FinalInteger val$totalChunked -> VnnW
    react.action.source.IActionSource val$source -> nKAk
    react.action.ActionCullEntities this$0 -> fuln
    105:105:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> uNaA$4:
    react.action.source.IActionSource val$source -> nKAk
    react.glang.FinalInteger val$totalCulled -> FySF
    react.glang.FinalInteger val$totalChunked -> VnnW
    react.action.ActionCullEntities this$0 -> fuln
    137:137:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> KCga:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
react.action.ActionFixLighting$1 -> KCga$1:
    react.action.ActionFixLighting this$0 -> uGDn
    29:29:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> QDxU
    29:29:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> KCga$2:
    react.action.source.IActionSource val$source -> nKAk
    int val$ch -> CNGp
    react.action.ActionFixLighting this$0 -> uGDn
    78:78:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> Mkow
    78:78:void run(java.lang.Object) -> Mkow
react.action.ActionFixLighting$3 -> KCga$3:
    react.action.ActionFixLighting this$0 -> uGDn
    89:89:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> Mkow
    89:89:void run(java.lang.Object) -> Mkow
react.action.ActionLockFluid -> ooRY:
    int lcd -> ArTD
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
react.action.ActionLockFluid$1 -> ooRY$1:
    react.action.ActionLockFluid this$0 -> uOUU
    31:31:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> QDxU
    31:31:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> ooRY$2:
    react.action.ActionLockFluid this$0 -> uOUU
    43:43:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> QDxU
    43:43:java.lang.Object get() -> get
react.action.ActionLockHopper -> QDxU:
    int lcd -> ArTD
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
react.action.ActionLockHopper$1 -> QDxU$1:
    react.action.ActionLockHopper this$0 -> NpIP
    31:31:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> QDxU
    31:31:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> QDxU$2:
    react.action.ActionLockHopper this$0 -> NpIP
    43:43:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> QDxU
    43:43:java.lang.Object get() -> get
react.action.ActionLockRedstone -> vtFt:
    int lcd -> ArTD
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
react.action.ActionLockRedstone$1 -> vtFt$1:
    react.action.ActionLockRedstone this$0 -> OrkP
    31:31:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> QDxU
    31:31:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> vtFt$2:
    react.action.ActionLockRedstone this$0 -> OrkP
    43:43:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> QDxU
    43:43:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> VLWv:
    long ms -> OGxY
    int lcd -> ArTD
    boolean fail -> Mttx
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> IFRU
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> Mkow
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> Mkow
    23:23:int access$200(react.action.ActionPurgeChunks) -> IFRU
    23:23:long access$100(react.action.ActionPurgeChunks) -> rVYH
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> Mkow
react.action.ActionPurgeChunks$1 -> VLWv$1:
    react.action.ActionPurgeChunks this$0 -> CNGk
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> QDxU
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> VLWv$2:
    int val$dk -> SnVq
    java.lang.Object val$j -> QqAx
    react.glang.FinalInteger val$acompleted -> hINp
    react.glang.FinalInteger val$completed -> eHWA
    react.glang.FinalInteger val$total -> dofg
    react.glang.FinalInteger val$totalCulled -> FySF
    react.glang.FinalInteger val$totalChunked -> VnnW
    react.action.source.IActionSource val$source -> nKAk
    react.api.ISelector[] val$selectors -> FhQd
    react.action.ActionPurgeChunks this$0 -> CNGk
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> VLWv$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> erjV
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> VLWv$3:
    react.action.source.IActionSource val$source -> nKAk
    react.glang.FinalInteger val$acompleted -> hINp
    react.action.ActionPurgeChunks this$0 -> CNGk
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> VLWv$4:
    org.bukkit.Chunk val$chunk -> HLTf
    java.lang.Runnable val$cb -> fdke
    react.action.ActionPurgeChunks this$0 -> CNGk
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> Oifg:
    long ms -> OGxY
    int lcd -> ArTD
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> IFRU
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> Mkow
    27:27:int access$100(react.action.ActionPurgeEntities) -> Mkow
    27:27:long access$000(react.action.ActionPurgeEntities) -> IFRU
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> Mkow
react.action.ActionPurgeEntities$1 -> Oifg$1:
    react.action.ActionPurgeEntities this$0 -> GcDa
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> QDxU
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> Oifg$2:
    react.action.ActionPurgeEntities this$0 -> GcDa
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> QDxU
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> Oifg$3:
    react.glang.FinalInteger val$completed -> eHWA
    react.glang.FinalInteger val$total -> dofg
    react.glang.FinalInteger val$totalCulled -> FySF
    react.glang.FinalInteger val$totalChunked -> VnnW
    react.action.source.IActionSource val$source -> nKAk
    react.action.ActionPurgeEntities this$0 -> GcDa
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> Oifg$4:
    react.action.source.IActionSource val$source -> nKAk
    react.glang.FinalInteger val$totalCulled -> FySF
    react.glang.FinalInteger val$totalChunked -> VnnW
    react.action.ActionPurgeEntities this$0 -> GcDa
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> Oifg$5:
    org.bukkit.entity.Entity val$i -> feLc
    react.glang.FinalInteger val$cu -> eYWy
    int val$k -> HTeQ
    org.bukkit.Chunk val$chunk -> HLTf
    java.lang.Runnable val$cb -> fdke
    react.action.ActionPurgeEntities this$0 -> GcDa
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> FpMD:
    int lcd -> ArTD
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
react.action.ActionUnlockFluid$1 -> FpMD$1:
    react.action.ActionUnlockFluid this$0 -> biaM
    30:30:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> QDxU
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> BSAO:
    int lcd -> ArTD
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
react.action.ActionUnlockHopper$1 -> BSAO$1:
    react.action.ActionUnlockHopper this$0 -> HLVr
    30:30:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> QDxU
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> UkWJ:
    int lcd -> ArTD
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
react.action.ActionUnlockRedstone$1 -> UkWJ$1:
    react.action.ActionUnlockRedstone this$0 -> aMOR
    30:30:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> QDxU
    30:30:java.lang.Object get() -> get
react.action.source.AccessActionSource -> Pcvg:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> Mkow
    26:33:void sendResponseSuccess(java.lang.String) -> IFRU
    38:45:void sendResponseError(java.lang.String) -> rVYH
    50:57:void sendResponseActing(java.lang.String) -> Nnru
react.action.source.ActionHandle -> WGJF:
    react.action.source.ActionHandle AUTOMATIC -> Fgrt
    react.action.source.ActionHandle MANUAL -> lLnB
    react.action.source.ActionHandle MUTEX -> LOrS
    react.action.source.ActionHandle[] $VALUES -> nmHD
    3:3:react.action.source.ActionHandle[] values() -> values
    3:3:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.action.source.ConsoleActionSource -> oMOG:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> Mkow
    18:19:void sendResponseSuccess(java.lang.String) -> IFRU
    24:25:void sendResponseError(java.lang.String) -> rVYH
    30:31:void sendResponseActing(java.lang.String) -> Nnru
react.action.source.EmptyActionSource -> jgqh:
    3:3:void <init>() -> <init>
    9:9:void sendResponse(java.lang.String) -> Mkow
    15:15:void sendResponseSuccess(java.lang.String) -> IFRU
    21:21:void sendResponseError(java.lang.String) -> rVYH
    27:27:void sendResponseActing(java.lang.String) -> Nnru
react.action.source.IActionSource -> EJfM:
    void sendResponse(java.lang.String) -> Mkow
    void sendResponseSuccess(java.lang.String) -> IFRU
    void sendResponseError(java.lang.String) -> rVYH
    void sendResponseActing(java.lang.String) -> Nnru
react.action.source.PlayerActionSource -> VvjN:
    org.bukkit.entity.Player p -> RbfD
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> Mkow
    30:31:void sendResponseSuccess(java.lang.String) -> IFRU
    36:37:void sendResponseError(java.lang.String) -> rVYH
    42:43:void sendResponseActing(java.lang.String) -> Nnru
react.action.source.RAIActionSource -> awIs:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> Mkow
    16:17:void sendResponseSuccess(java.lang.String) -> IFRU
    22:23:void sendResponseError(java.lang.String) -> rVYH
    28:29:void sendResponseActing(java.lang.String) -> Nnru
react.api.Action -> FNJQ:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> mqtN
    java.lang.String[] nodes -> FOBh
    react.action.source.ActionHandle handle -> Mcvu
    react.api.ActionState state -> SDFi
    react.api.ActionTargetType target -> HvkM
    react.api.ActionType type -> rWOj
    react.action.source.IActionSource currentSource -> yleR
    double progress -> Kwcq
    react.glang.GMap defaultSelectors -> bOpy
    28:29:void <init>(react.api.ActionType) -> <init>
    32:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> Mkow
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> Mkow
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> vtFt
    94:94:react.api.ActionState getState() -> VLWv
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> TNas
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> Oifg
    130:130:react.api.ActionType getType() -> FpMD
    136:136:react.glang.GMap getDefaultSelectors() -> BSAO
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> IFRU
    189:190:void completeAction() -> UkWJ
    195:195:react.action.source.IActionSource getCurrentSource() -> Pcvg
    201:201:java.lang.String[] getNodes() -> WGJF
    207:208:void setNodes(java.lang.String[]) -> Mkow
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
react.api.ActionAlreadyRunningException -> Lymj:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> ThTH:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> yIic:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> aTfr:
    react.api.ActionState IDLE -> VwcV
    react.api.ActionState RUNNING -> pYYx
    react.api.ActionState[] $VALUES -> nmFt
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> lLTu:
    react.api.ActionTargetType POSITIONAL -> Gbfj
    react.api.ActionTargetType SYSTEM -> iUEj
    react.api.ActionTargetType[] $VALUES -> cSSq
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> hbLY:
    react.api.ActionType FIX_LIGHTING -> EePQ
    react.api.ActionType UNLOCK_FLUID -> UlNa
    react.api.ActionType LOCK_FLUID -> AGbx
    react.api.ActionType UNLOCK_HOPPER -> KgAe
    react.api.ActionType LOCK_HOPPER -> jXHl
    react.api.ActionType UNLOCK_REDSTONE -> gVns
    react.api.ActionType LOCK_REDSTONE -> GcEm
    react.api.ActionType CULL_ENTITIES -> gVnu
    react.api.ActionType COLLECT_GARBAGE -> xPPH
    react.api.ActionType PURGE_ENTITIES -> Noiu
    react.api.ActionType PURGE_CHUNKS -> Rbdc
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> Mcvu
    react.api.ActionTargetType target -> HvkM
    react.api.ActionType[] $VALUES -> iUEq
    6:6:react.api.ActionType[] values() -> values
    6:6:react.api.ActionType valueOf(java.lang.String) -> valueOf
    26:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> oMOG
    50:50:react.api.ActionTargetType getTarget() -> Oifg
    6:18:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> paRd:
    react.api.ActivationRangeType ANIMALS -> yRrK
    react.api.ActivationRangeType MONSTERS -> Noiq
    react.api.ActivationRangeType MISC -> RACK
    react.api.ActivationRangeType[] $VALUES -> WOqU
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> NUaW:
    int value() -> value
react.api.Async -> flfj:
react.api.CPUBenchmark -> qBRp:
    org.bukkit.command.CommandSender sender -> sender
    int score -> RtGU
    java.lang.Runnable onFinish -> UJLV
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> jgqh
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> Mkow
    10:10:int access$100(react.api.CPUBenchmark) -> IFRU
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> rVYH
react.api.CPUBenchmark$1 -> qBRp$1:
    react.api.CPUBenchmark this$0 -> vklE
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> qBRp$2:
    react.api.CPUBenchmark this$0 -> vklE
    78:78:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> CVCS:
    react.api.CPUResult ULTRA_SLOW -> tfGA
    react.api.CPUResult VERY_SLOW -> rpaR
    react.api.CPUResult SLOW -> JIkd
    react.api.CPUResult AVERAGE -> gqCC
    react.api.CPUResult GOOD -> BAtY
    react.api.CPUResult FAST -> FhTP
    react.api.CPUResult VERY_FAST -> xiaW
    react.api.CPUResult ULTRA_FAST -> stDl
    java.lang.String m -> HfLP
    react.api.CPUResult[] $VALUES -> GIVU
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> Mkow
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> uhQg:
    react.glang.GMap cache -> IiNp
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> IFRU
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> rVYH
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> EJfM
    54:54:boolean has(java.lang.Object) -> Nnru
react.api.Capability -> HTSM:
    react.api.Capability DUAL_WEILD -> yBTh
    react.api.Capability SCOREBOARD -> wxCs
    react.api.Capability SCOREBOARD_ADVANCED -> QErA
    react.api.Capability HOPPER -> PnCe
    react.api.Capability ENTITY_ATTRIBUTES -> jXLT
    react.api.Capability ENTITY_AI -> yuXl
    react.api.Capability ACTION_BAR -> ivjv
    react.api.Capability ENTITY_NAMES -> UuCD
    react.api.Capability TITLE_BAR -> AHES
    react.api.Capability CHUNK_RELIGHTING -> hADf
    react.api.Capability MONITOR_SUBMISSIVENESS -> dEXv
    react.api.Capability ACCELERATED_PING -> hHrt
    react.api.Capability ENTITY_THROTTLING -> BJfi
    react.api.Capability TILE_THROTTLING -> QNcV
    react.api.Capability PASSENGERS -> VLpx
    react.glang.GList capabilities -> dNIv
    react.surge.util.Protocol version -> nSUx
    react.api.Flavor flavor -> OPnK
    java.lang.String plugin -> KLqo
    java.lang.String name -> name
    56:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> VvjN
    100:100:boolean isFlavorCapable() -> awIs
    105:105:boolean isVersionCapable() -> FNJQ
    110:110:boolean isCapable() -> Lymj
    115:115:react.surge.util.Protocol getVersion() -> ThTH
    120:120:react.api.Flavor getFlavor() -> yIic
    125:125:java.lang.String getPlugin() -> aTfr
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> Mkow
    153:167:void sendNotCapable(react.action.source.IActionSource) -> Mkow
    14:48:void <clinit>() -> <clinit>
react.api.CapabilityBasis -> fdYe:
    react.api.CapabilityBasis VERSION -> GITr
    react.api.CapabilityBasis FLAVOR -> GjwW
    react.api.CapabilityBasis PLUGIN -> vIkJ
    react.api.CapabilityBasis[] $VALUES -> QVql
    3:3:react.api.CapabilityBasis[] values() -> values
    3:3:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ChunkIssue -> upfI:
    react.api.ChunkIssue ENTITY -> xqsy
    react.api.ChunkIssue HOPPER -> rOAa
    react.api.ChunkIssue TNT -> qdoY
    react.api.ChunkIssue REDSTONE -> EnDF
    react.api.ChunkIssue FLUID -> AjHs
    react.api.ChunkIssue PHYSICS -> jiMK
    react.api.ChunkIssue[] $VALUES -> SThQ
    3:3:react.api.ChunkIssue[] values() -> values
    3:3:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    14:32:double getMS() -> lLTu
    3:10:void <clinit>() -> <clinit>
react.api.ChunkIssue$1 -> upfI$1:
    int[] $SwitchMap$react$api$ChunkIssue -> ggsQ
    14:14:void <clinit>() -> <clinit>
react.api.Clip -> YwfJ:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> nInK:
    org.bukkit.command.CommandSender sender -> sender
    13:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> Mkow
    31:32:void sendResponseSuccess(java.lang.String) -> IFRU
    37:38:void sendResponseError(java.lang.String) -> rVYH
    43:44:void sendResponseActing(java.lang.String) -> Nnru
react.api.CullList -> Nfdt:
    react.glang.GSet toCull -> XRub
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> Nnru
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> hbLY
react.api.DTest -> iBoS:
    6:6:void <init>() -> <init>
    11:62:int test() -> paRd
react.api.EntityFlag -> uVsM:
    react.api.EntityFlag NAMED -> hADJ
    react.api.EntityFlag TAMED -> tKuB
    react.api.EntityFlag STACKED -> nRsp
    react.api.EntityFlag RIDDEN -> Embl
    react.api.EntityFlag LIVING -> NMhy
    react.api.EntityFlag NON_LIVING -> bHBv
    react.api.EntityFlag PASSIVE -> YMhe
    react.api.EntityFlag HOSTILE -> bYDa
    react.api.EntityFlag MATURE -> pPjX
    react.api.EntityFlag YOUNG -> LXdq
    react.api.EntityFlag UNDERWATER -> qnAM
    react.api.EntityFlag GROUNDED -> oMgV
    react.api.EntityFlag AIRBORNE -> cBUG
    react.api.EntityFlag PROJECTILES -> KnvV
    react.api.EntityFlag CAVES -> mqwe
    react.api.EntityFlag NEARBY -> Qxwt
    react.api.EntityFlag LIT -> bigl
    react.api.EntityFlag LEASHED -> wDaD
    java.lang.String m -> HfLP
    react.api.EntityFlag[] $VALUES -> bYFy
    12:12:react.api.EntityFlag[] values() -> values
    12:12:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    36:38:void <init>(java.lang.String,int,java.lang.String) -> <init>
    42:52:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> TNas
    57:152:boolean is(org.bukkit.entity.Entity) -> eXcP
    158:158:java.lang.String toString() -> toString
    12:31:void <clinit>() -> <clinit>
react.api.EntityGroup -> eifd:
    react.glang.GSet entityTypes -> uWmH
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> NUaW
react.api.EntitySample -> gpOE:
    react.glang.GMap counts -> qeRv
    react.glang.GMap sets -> tDIQ
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> flfj
    45:45:react.glang.GList getTypes() -> qBRp
    50:57:int total() -> CVCS
    62:67:int get(org.bukkit.entity.EntityType) -> Mkow
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> IFRU
    84:96:void add(org.bukkit.entity.Entity) -> Nnru
react.api.Experimental -> ylPg:
react.api.Flavor -> hanX:
    react.api.Flavor ANY -> fmdA
    react.api.Flavor SAFE_MODE -> GslV
    react.api.Flavor CRAFT_BUKKIT -> jFkV
    react.api.Flavor BUKKIT -> jypF
    react.api.Flavor SPIGOT -> OkCd
    react.api.Flavor SOGGY_SPIGOT -> Edtm
    react.api.Flavor PAPER_SPIGOT -> Tqac
    react.api.Flavor TACO_SPIGOT -> lVDE
    react.api.Flavor TORCH_SPIGOT -> QNfE
    react.api.Flavor FORGE_HACK -> WOuo
    react.api.Flavor SPONGE_HACK -> DkCx
    react.api.Flavor[] $VALUES -> CoqA
    6:6:react.api.Flavor[] values() -> values
    6:6:react.api.Flavor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> uhQg
    74:79:boolean compatableWith(react.api.Flavor) -> Mkow
    84:84:java.lang.String fancyName() -> HTSM
    6:18:void <clinit>() -> <clinit>
react.api.IAction -> uWRu:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> vtFt
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> IFRU
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
    react.api.ActionState getState() -> VLWv
    react.api.ActionTargetType getTarget() -> Oifg
    void setNodes(java.lang.String[]) -> Mkow
    java.lang.String[] getNodes() -> WGJF
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> TNas
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> FpMD
    react.glang.GMap getDefaultSelectors() -> BSAO
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> Mkow
    react.api.ISelector[] biselect(react.api.ISelector[]) -> Mkow
    react.action.source.IActionSource getCurrentSource() -> Pcvg
    void completeAction() -> UkWJ
react.api.ICache -> yIlh:
    react.glang.GSet get(java.lang.Object) -> IFRU
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> rVYH
    void clear() -> clear
    boolean has(java.lang.Object) -> Nnru
    react.glang.GList k() -> EJfM
react.api.ICommand -> uNbJ:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> fdYe
    java.lang.String[] getPermissions() -> upfI
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> eXcP
    react.api.SideGate getSideGate() -> YwfJ
    void registerParameterDescription(java.lang.String,java.lang.String) -> Mkow
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.api.IRecord -> Xtbw:
    java.lang.String getRecordType() -> nInK
    long getRecordTime() -> Nfdt
    react.json.JSONObject toJSON() -> iBoS
    java.lang.Object getRecordObject() -> uVsM
    void fromJSON(react.json.JSONObject) -> Mkow
react.api.IRecordBook -> HCRP:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> Mkow
    long getOldestRecordTime() -> eifd
    void addRecord(react.api.IRecord) -> Mkow
    long getLatestRecordTime() -> gpOE
    int countRecords(long,long) -> Mkow
    react.glang.GMap getRecords(long,long) -> IFRU
    int purgeRecordsBefore(long) -> IFRU
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> Smdg:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> ylPg
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> hanX
    react.surge.util.C getAltColor() -> uWRu
    void setColor(react.surge.util.C,react.surge.util.C) -> Mkow
    int getInterval() -> getInterval
    void setInterval(int) -> IFRU
    void sample() -> yIlh
    java.lang.String get() -> get
    void construct() -> uNbJ
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> lKwf:
    react.api.SelectionMode getMode() -> Xtbw
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> TNas
    react.glang.GSet getList() -> HCRP
    react.glang.GSet getPossibilities() -> Smdg
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> eXcP
    java.lang.String getName() -> getName
react.api.Injection -> LqaU:
    react.api.InjectionMethod value() -> lKwf
react.api.InjectionMethod -> MksN:
    react.api.InjectionMethod SWAP -> Cxai
    react.api.InjectionMethod SUBSTRATE -> qCOf
    react.api.InjectionMethod RELOAD -> cKIQ
    react.api.InjectionMethod[] $VALUES -> gqGl
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> gomS:
    java.lang.String value() -> value
react.api.MSampler -> hrot:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> LqaU
react.api.MonitorHeading -> Ipfb:
    react.api.ISampler head -> qTPd
    react.glang.GList children -> Daou
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> Mkow
    27:27:react.api.ISampler getHead() -> MksN
    32:33:void setHead(react.api.ISampler) -> IFRU
    37:37:react.glang.GList getChildren() -> gomS
    42:42:java.lang.String getHeadText() -> hrot
    47:60:java.lang.String getChildText() -> Ipfb
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> Mkow
react.api.NoiseGenerator -> lwLT:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> NgDr:
    react.api.NoiseGenerator[] octaves -> XRxJ
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> lwLT
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> IyWh:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> cmJh
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> NgDr
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> xhkx:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> Mkow
react.api.Permissable -> bGKP:
    react.api.Permissable ACCESS -> LPUu
    react.api.Permissable MONITOR -> wUab
    react.api.Permissable MONITOR_TITLE -> xHCp
    react.api.Permissable MONITOR_ACTIONLOG -> oUyq
    react.api.Permissable MONITOR_MAP -> AXhY
    react.api.Permissable MONITOR_ENVIRONMENT -> dMjW
    react.api.Permissable MONITOR_GLASSES -> aUcF
    react.api.Permissable MONITOR_CHUNK_BLAME -> XKHj
    react.api.Permissable RAI_MONITOR -> bOtY
    react.api.Permissable RAI_CONTROL -> PuwX
    react.api.Permissable RAI_ACCESS -> hbkB
    react.api.Permissable RAI -> pPpE
    react.api.Permissable ACT -> Nopu
    react.api.Permissable RELOAD -> aoXS
    java.lang.String node -> hslU
    react.api.Permissable[] $VALUES -> OsTy
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    27:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> Mkow
    46:46:java.lang.String getNode() -> IyWh
    7:22:void <clinit>() -> <clinit>
react.api.PluginSelfDeleter -> JRGd:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> QOGt
    java.lang.Runnable r -> HUOQ
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> Mkow
react.api.ReactCommand -> BktB:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> YNNq
    java.lang.String usage -> CxdB
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> SClQ
    react.api.SideGate sideGate -> GHyj
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> eXcP
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> Mkow
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> fdYe
    47:47:java.lang.String[] getPermissions() -> upfI
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> YwfJ
react.api.ReactException -> PBVq:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> TyVq:
    react.glang.GMap keystore -> nJiT
    boolean monitoring -> monitoring
    boolean highMonitor -> fBqm
    boolean actionlogging -> ghXa
    boolean glasses -> STnI
    boolean mapping -> vtdR
    int monitorSelection -> YgaJ
    int plays -> TWqG
    boolean monitorPosted -> GQib
    int monitorLastSelection -> dooQ
    int switchNotification -> OQPu
    int hotbarSlot -> wEBd
    boolean shift -> qSrL
    int scroll -> EvWr
    double lastHeight -> ymKn
    boolean heightMovement -> GtNS
    org.bukkit.entity.Player p -> RbfD
    42:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> xhkx
    128:128:boolean isMapping() -> bGKP
    133:133:org.bukkit.entity.Player getP() -> JRGd
    138:140:void setMonitoring(boolean) -> IFRU
    144:146:void setMapping(boolean) -> rVYH
    150:150:int getMonitorSelection() -> BktB
    155:157:void setMonitorSelection(int) -> rVYH
    161:161:int getHotbarSlot() -> PBVq
    166:168:void setHotbarSlot(int) -> Nnru
    172:172:boolean isShifting() -> TyVq
    177:179:void setShifting(boolean) -> Nnru
    183:183:boolean isShift() -> turM
    188:190:void setShift(boolean) -> TNas
    194:194:int getScroll() -> xynB
    199:201:void setScroll(int) -> TNas
    205:205:int getMonitorLastSelection() -> Digp
    210:212:void setMonitorLastSelection(int) -> eXcP
    216:217:void setP(org.bukkit.entity.Player) -> IFRU
    221:221:double getLastHeight() -> wLVh
    226:228:void setLastHeight(double) -> Mkow
    232:232:boolean isHeightMovement() -> DaXQ
    237:239:void setHeightMovement(boolean) -> eXcP
    243:243:int getSwitchNotification() -> HLAs
    248:250:void setSwitchNotification(int) -> uNaA
    254:254:boolean getMonitorPosted() -> bWkk
    259:261:void setMonitorPosted(boolean) -> uNaA
    265:265:int getPlays() -> LGMM
    270:272:void setPlays(int) -> KCga
    276:276:boolean isGlasses() -> ctbE
    281:283:void setGlasses(boolean) -> KCga
    287:287:boolean isActionlogging() -> pHBy
    292:294:void setActionlogging(boolean) -> ooRY
    24:40:void <clinit>() -> <clinit>
react.api.Record -> turM:
    java.lang.String recordType -> SwPa
    long recordTime -> GtNW
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> nInK
    32:32:long getRecordTime() -> Nfdt
    38:38:java.lang.Object getRecordObject() -> uVsM
    react.json.JSONObject toJSON() -> iBoS
    void fromJSON(react.json.JSONObject) -> Mkow
react.api.RecordBook -> xynB:
    java.io.File recordFile -> gEsp
    react.json.JSONObject js -> XlmO
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> Mkow
    79:87:react.api.IRecord getRecord(long) -> Mkow
    react.api.IRecord createDummyRecord(long,java.lang.String) -> Mkow
    95:107:long getOldestRecordTime() -> eifd
    113:125:long getLatestRecordTime() -> gpOE
    130:130:boolean within(long,long,long) -> Mkow
    136:144:int countRecords(long,long) -> Mkow
    150:162:react.glang.GMap getRecords(long,long) -> IFRU
    168:181:int purgeRecordsBefore(long) -> IFRU
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> Digp:
react.api.SampledChunk -> wLVh:
    org.bukkit.Chunk c -> kIrd
    react.glang.GMap counts -> qeRv
    12:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> UAEs
    26:38:void hit(react.api.ChunkIssue,int) -> Mkow
    42:42:org.bukkit.Chunk getC() -> cdAQ
    47:47:react.glang.GMap getCounts() -> CxIx
react.api.SampledType -> DaXQ:
    react.api.SampledType ENTITY_TIME_LOCK -> rEux
    react.api.SampledType TILE_TIME_LOCK -> OjfQ
    react.api.SampledType ENTITY_TIME -> QEwi
    react.api.SampledType TILE_TIME -> bHIh
    react.api.SampledType ENTITY_DROPTICK -> dMnk
    react.api.SampledType TILE_DROPTICK -> IaDt
    react.api.SampledType REDSTONE_TICK_USAGE -> PCVQ
    react.api.SampledType REDSTONE_TICK -> PSwB
    react.api.SampledType REDSTONE_SECOND -> xGhT
    react.api.SampledType REDSTONE_TIME -> Hvrs
    react.api.SampledType PHYSICS_TIME -> xOxF
    react.api.SampledType HOPPER_TICK_USAGE -> sQjS
    react.api.SampledType HOPPER_TICK -> vlUc
    react.api.SampledType HOPPER_SECOND -> IqfT
    react.api.SampledType HOPPER_TIME -> Tyum
    react.api.SampledType FLUID_TICK_USAGE -> OauS
    react.api.SampledType FLUID_TICK -> teoL
    react.api.SampledType FLUID_SECOND -> IaEh
    react.api.SampledType FLUID_TIME -> DPuB
    react.api.SampledType TPS -> eICQ
    react.api.SampledType TICK -> SDNu
    react.api.SampledType TIU -> jFoa
    react.api.SampledType MEM -> DatY
    react.api.SampledType FREEMEM -> woWs
    react.api.SampledType MAXMEM -> pYbI
    react.api.SampledType ALLOCMEM -> JBCq
    react.api.SampledType MAHS -> kSDQ
    react.api.SampledType CHK_TIME -> JAbo
    react.api.SampledType EXPLOSION_TIME -> Mlnr
    react.api.SampledType CHK -> nAxy
    react.api.SampledType ATASK -> vdDu
    react.api.SampledType STASK -> aLuO
    react.api.SampledType CHKS -> WHHx
    react.api.SampledType ENT -> Orua
    react.api.SampledType ENTLIV -> kAbG
    react.api.SampledType ENTDROP -> VxJk
    react.api.SampledType ENTTILE -> Iytq
    java.lang.String node -> hslU
    react.api.SampledType[] $VALUES -> UJTV
    6:6:react.api.SampledType[] values() -> values
    6:6:react.api.SampledType valueOf(java.lang.String) -> valueOf
    50:50:react.api.ISampler get() -> BRbk
    56:56:java.lang.String toString() -> toString
    60:70:void <init>(java.lang.String,int,java.lang.String) -> <init>
    74:74:java.lang.String getNode() -> IyWh
    6:44:void <clinit>() -> <clinit>
react.api.Sampler -> HLAs:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> AGjp
    react.surge.util.C altColor -> nmNP
    int interval -> KxKs
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> hanX
    49:49:react.surge.util.C getAltColor() -> uWRu
    55:55:int getInterval() -> getInterval
    void sample() -> yIlh
    void construct() -> uNbJ
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> Mkow
    107:108:void setInterval(int) -> IFRU
react.api.Sector -> bWkk:
    int value() -> value
react.api.SelectionException -> LGMM:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> ctbE:
    react.api.SelectionMode WHITELIST -> Blpl
    react.api.SelectionMode BLACKLIST -> sAHf
    react.api.SelectionMode[] $VALUES -> TXRi
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> pHBy:
    java.lang.Class objectType -> fLDp
    react.api.SelectionMode mode -> Orwy
    react.glang.GSet list -> rOJa
    react.glang.GSet possibilities -> Yxen
    int popoff -> yJln
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> Xtbw
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> TNas
    43:43:react.glang.GSet getList() -> HCRP
    49:49:react.glang.GSet getPossibilities() -> Smdg
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> eXcP
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> uNaA
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> UAEs:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> rVYH
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> eXcP
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> KCga
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> cdAQ:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> CxIx:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> rVYH
    29:30:void add(org.bukkit.Chunk,int) -> Mkow
    34:38:void add(org.bukkit.World) -> KCga
    42:46:void addAll() -> cBAD
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> eXcP
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> KCga
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> BRbk:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> eXcP
    87:87:java.lang.String getName() -> getName
react.api.Side -> cBAD:
    react.api.Side PLAYERS -> XvDK
    react.api.Side CONSOLE -> LYNn
    java.lang.String ss -> SURd
    react.api.Side[] $VALUES -> KEJg
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> iuuf
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> IFRU
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> iuuf:
    react.api.SideGate PLAYERS_ONLY -> TGSs
    react.api.SideGate CONSOLES_ONLY -> EBwo
    react.api.SideGate ANYTHING -> vReI
    react.api.SideGate[] $VALUES -> JRhU
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> Mkow
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> iuuf$1:
    int[] $SwitchMap$react$api$SideGate -> GcRL
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> WWns:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> BeBd
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> WWns
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> UtLs:
    double wScale -> wnyl
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> Mkow
react.api.SpecializedTickLimiter -> Jbkj:
    double rMaxTime -> bGiq
    long rStartTime -> Xuam
    double rLastTime -> NxfB
    long rMark -> VVJK
    double tMaxTime -> ELHj
    react.gmath.Average atimes -> GlBJ
    react.gmath.Average adropped -> IGTB
    int droppedTicks -> CNTX
    boolean entityTick -> WjOW
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> qcyj:
    react.glang.GList sources -> wwim
    react.glang.GList splooge -> oNPU
    react.glang.GSet destroy -> KDNK
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> Mkow
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> IFRU
    void clipped(org.bukkit.Location) -> IFRU
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> rVYH
    boolean isAllowedSource(org.bukkit.Location) -> Nnru
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> Mkow
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> IFRU
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> rVYH
react.api.SploogeCounter$1 -> qcyj$1:
    java.util.Iterator val$it -> HUQy
    org.bukkit.Location val$start -> AbAH
    int val$maxDistance -> CyGk
    react.api.SploogeCounter this$0 -> Notr
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> qcyj$1$1:
    react.api.SploogeCounter$1 this$1 -> NEah
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> KTlw:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> Bcci:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> iBoS
    38:49:void fromJSON(react.json.JSONObject) -> Mkow
react.api.StackTraceRecordBook -> PmON:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> IFRU
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> Mkow
react.api.StackedEntity -> BIqO:
    org.bukkit.entity.LivingEntity entity -> HDQP
    int count -> count
    double rmx -> JuJx
    21:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> Mkow
    46:46:int getAbsoluteMaxCount() -> UtLs
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> IFRU
    56:58:void update() -> update
    62:68:void signalSize() -> Jbkj
    72:123:void updateHealth() -> qcyj
    127:128:void heal(double) -> IFRU
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> KTlw
    142:142:int getEffectiveCount(double) -> rVYH
    147:147:double getEffectiveMaxHealth(int) -> ooRY
    152:152:double getRealMaxHealth() -> Bcci
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> Mkow
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> jxxS:
    react.glang.GList headings -> fLGU
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> Mkow
    24:24:int getMaxSelection() -> PmON
    29:37:int left(int) -> QDxU
    42:50:int right(int) -> vtFt
    55:55:react.api.MonitorHeading getHeadFor(int) -> VLWv
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> Mkow
    83:100:java.lang.String getHotbarFor(int,boolean) -> Mkow
react.api.Unused -> WysC:
react.api.WorldConfig -> YgHP:
    boolean allowRai -> oNOx
    boolean allowActions -> VDhN
    boolean allowRelighting -> fTVx
    boolean allowTileThrottling -> WrbR
    boolean allowEntityThrottling -> iMCV
    boolean allowFastLeafDecay -> fTYp
    java.util.List assumeNoSideEffectsEntities -> lEKN
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> ooRY
    48:62:void save(org.bukkit.World) -> QDxU
    66:80:void load(org.bukkit.World) -> vtFt
react.cache.CachedEntity -> HSuH:
    java.util.UUID uid -> hQpF
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> hRPe
    double x -> x
    double y -> y
    double z -> z
    double vx -> WjRX
    double vy -> tndO
    double vz -> jWtm
    double dx -> QNnB
    double dy -> wgLj
    double dz -> yTAK
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> uNaA
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> BIqO
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> jxxS
    120:121:void setVx(double) -> Nnru
    125:125:double getVy() -> WysC
    130:131:void setVy(double) -> TNas
    135:135:double getVz() -> YgHP
    140:141:void setVz(double) -> eXcP
    145:145:double getDx() -> HSuH
    150:151:void setDx(double) -> uNaA
    155:155:double getDy() -> nuEL
    160:161:void setDy(double) -> KCga
    165:165:double getDz() -> FMmG
    170:171:void setDz(double) -> ooRY
    175:175:java.util.UUID getUid() -> jOEQ
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> nuEL:
    int age -> dEal
    boolean ageLock -> CNVg
    boolean breed -> lDhf
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> uNaA
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> lKxi
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> BRco
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> FMmG:
    org.bukkit.DyeColor dye -> Qpnq
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> uNaA
    30:30:org.bukkit.DyeColor getDye() -> PKIo
    35:36:void setDye(org.bukkit.DyeColor) -> Mkow
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> jOEQ:
    react.glang.GList potionEffects -> PCYF
    boolean canPickupItems -> hANJ
    org.bukkit.inventory.ItemStack[] armorContents -> GJAG
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> uiWA
    double maxHealth -> maxHealth
    int maxAir -> stQo
    int air -> JBGw
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> uNaA
    63:63:react.glang.GList getPotionEffects() -> YxHX
    68:69:void setPotionEffects(react.glang.GList) -> IFRU
    73:73:boolean isCanPickupItems() -> lCiG
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> HmfJ
    138:139:void setMaxAir(int) -> Oifg
    143:143:int getAir() -> SnFW
    148:149:void setAir(int) -> FpMD
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> lKxi:
    boolean sheared -> CowU
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> uNaA
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> BRco:
    org.bukkit.inventory.ItemStack is -> nmRk
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> uNaA
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> PKIo:
    7:7:void <init>() -> <init>
react.command.CommandAct -> YxHX:
    41:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> Mkow
    186:192:react.text.RTX getBeginningRTX() -> NUeF
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> Mkow
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> IFRU
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> rVYH
    331:346:react.glang.GList getSortedCommands() -> sPmk
    351:358:int getPageSize(int) -> BSAO
    363:363:boolean isValidPage(int,int) -> Mkow
    368:377:react.glang.GList getPage(int,int) -> IFRU
react.command.CommandActionLog -> lCiG:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.command.CommandCPUScore -> HmfJ:
    17:24:void <init>() -> <init>
    29:39:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.command.CommandCapabilities -> SnFW:
    20:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.command.CommandChunkBlame -> NUeF:
    24:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.command.CommandChunkBlame$1 -> NUeF$1:
    org.bukkit.command.CommandSender val$sender -> ootm
    react.command.CommandChunkBlame this$0 -> qmir
    37:37:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> NUeF$1$1:
    java.lang.String val$i -> afmD
    react.glang.GMap val$top -> iwUI
    int val$totalx -> bYOV
    react.command.CommandChunkBlame$1 this$1 -> fmkH
    66:66:void <init>(react.command.CommandChunkBlame$1,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandEnvironment -> sPmk:
    25:32:void <init>() -> <init>
    37:74:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.command.CommandGlasses -> IhXi:
    17:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.command.CommandHelp -> MRbP:
    29:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> Mkow
    81:87:react.text.RTX getBeginningRTX() -> NUeF
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> Mkow
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> IFRU
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> rVYH
    208:215:react.glang.GList getSortedCommands() -> sPmk
    220:227:int getPageSize(int) -> BSAO
    232:232:boolean isValidPage(int,int) -> Mkow
    237:246:react.glang.GList getPage(int,int) -> IFRU
react.command.CommandHighMonitor -> TpiJ:
    17:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.command.CommandMap -> wChH:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.command.CommandMonitor -> ArCv:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.command.CommandReload -> OPWo:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.command.CommandReload$1 -> OPWo$1:
    org.bukkit.command.CommandSender val$sender -> ootm
    react.command.CommandReload this$0 -> nKNw
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> OPWo$1$1:
    react.command.CommandReload$1 this$1 -> uGRn
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> wUIu:
    29:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
    54:63:org.bukkit.inventory.ItemStack makeBook() -> IhXi
    68:94:void addSpikePages(react.glang.GList) -> rVYH
    98:108:void addStatusPages(react.glang.GList) -> Nnru
    112:129:int findSlot(org.bukkit.entity.Player) -> rVYH
react.command.CommandTopChunk -> NUdv:
    25:32:void <init>() -> <init>
    37:58:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.command.CommandVersion -> rpMy:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> Mkow
react.controller.ActionController -> pGhF:
    int kiv -> PCYc
    react.glang.GMap actions -> oota
    react.glang.GMap pending -> Qpoh
    react.glang.GList tasks -> jqfm
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> Mkow
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> IFRU
    141:141:react.api.IAction getAction(react.api.ActionType) -> Mkow
    146:147:void registerAction(react.api.IAction) -> Mkow
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> MRbP
    241:248:react.glang.GList getActionNames() -> TpiJ
    24:24:void <clinit>() -> <clinit>
react.controller.ChronophyFluidController -> sHaC:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> qKKg:
    boolean firstTickList -> NFFt
    long firstTick -> NVge
    long lastTick -> nltf
    react.gmath.Average aCSMS -> stUG
    react.glang.GMap pluginLoads -> dNUt
    react.glang.GMap playerLoads -> iMDx
    int serverLoads -> FqTT
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> wChH
    63:73:void tickNextTickList() -> ArCv
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> Mkow
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> Mkow
    171:171:boolean isFirstTickList() -> OPWo
    176:176:long getFirstTick() -> wUIu
    181:181:long getLastTick() -> NUdv
    186:186:react.gmath.Average getaCSMS() -> rpMy
    191:191:react.glang.GMap getPluginLoads() -> pGhF
    196:196:react.glang.GMap getPlayerLoads() -> sHaC
    201:201:int getServerLoads() -> qKKg
    21:21:react.glang.GMap access$000(react.controller.ChunkController) -> Mkow
    21:21:int access$108(react.controller.ChunkController) -> IFRU
    21:21:react.glang.GMap access$200(react.controller.ChunkController) -> rVYH
react.controller.ChunkController$1 -> qKKg$1:
    org.bukkit.event.world.ChunkLoadEvent val$e -> mrcW
    react.controller.ChunkController this$0 -> bbCH
    131:131:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> rVYH
    131:131:void run(java.lang.Object) -> Mkow
react.controller.CommandController -> ckuY:
    react.glang.GList commands -> hcSv
    boolean k -> CFGS
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> ooRY
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> QDxU
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> Mkow
    317:317:react.glang.GList getCommands() -> ckuY
    322:323:void setCommands(react.glang.GList) -> TNas
    327:327:boolean isK() -> QpRw
    332:333:void setK(boolean) -> QDxU
react.controller.EntityCullController -> QpRw:
    react.glang.GSet flags -> bXqX
    react.glang.GSet defer -> yddB
    react.glang.GSet prefer -> aVOY
    react.glang.GMap maxs -> Yghv
    19:19:void <init>() -> <init>
    29:34:void start() -> start
    40:40:void stop() -> stop
    46:46:void tick() -> tick
    50:200:void repopulateRules() -> JQlE
    204:217:int cull(org.bukkit.Chunk) -> Nnru
    222:346:int partialCull(org.bukkit.Chunk) -> TNas
react.controller.EntityStackController -> JQlE:
    react.glang.GList stacks -> QNpQ
    20:22:void <init>() -> <init>
    27:28:void start() -> start
    33:34:void stop() -> stop
    39:54:void tick() -> tick
    59:112:void stack(react.glang.GList) -> eXcP
    116:121:boolean isStacked(org.bukkit.entity.LivingEntity) -> rVYH
    126:139:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> Nnru
    145:163:void on(org.bukkit.event.entity.EntityDamageEvent) -> Mkow
    167:182:void merge(react.api.StackedEntity,react.api.StackedEntity) -> Mkow
    186:252:void checkNear(org.bukkit.entity.LivingEntity) -> TNas
    257:297:void on(org.bukkit.event.entity.EntitySpawnEvent) -> Mkow
react.controller.EntityStackController$1 -> JQlE$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> hJAj
    react.controller.EntityStackController this$0 -> iwXT
    265:265:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    269:294:void run() -> run
react.controller.EventController -> hruB:
    react.lagmap.LagMap map -> nvGG
    react.glang.GMap slots -> KgQr
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> Mkow
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Mkow
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> Mkow
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> Mkow
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> Mkow
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> Mkow
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> Mkow
react.controller.ExplosiveController -> UbmO:
    boolean firstTickList -> NFFt
    long firstTick -> NVge
    long lastTick -> nltf
    react.gmath.Average aCSMS -> stUG
    15:15:void <init>() -> <init>
    25:30:void start() -> start
    34:47:void flushTickList() -> wChH
    51:61:void tickNextTickList() -> ArCv
    66:67:void stop() -> stop
    73:74:void tick() -> tick
    79:88:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> IFRU
    93:94:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> Mkow
    98:98:boolean isFirstTickList() -> OPWo
    103:103:long getFirstTick() -> wUIu
    108:108:long getLastTick() -> NUdv
    113:113:react.gmath.Average getaCSMS() -> rpMy
react.controller.FastDecayController -> APBl:
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> Mkow
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> Mkow
    74:155:void checkBreak(org.bukkit.block.Block) -> rVYH
    159:190:void decay(org.bukkit.block.Block) -> Nnru
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> TNas
    258:262:void tick() -> tick
react.controller.FastDecayController$1 -> APBl$1:
    react.glang.GMap val$locs -> NhIT
    react.controller.FastDecayController this$0 -> LXpf
    89:89:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> rVYH
    99:99:boolean isAllowedSource(org.bukkit.Location) -> Nnru
    105:124:void clipped(org.bukkit.Location) -> IFRU
    129:152:void finished() -> finished
react.controller.FastDecayController$1$1 -> APBl$1$1:
    int val$i -> fKjR
    react.controller.FastDecayController$1 this$1 -> jOer
    134:134:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> APBl$2:
    org.bukkit.block.Block val$b -> oxgn
    react.controller.FastDecayController this$0 -> LXpf
    160:160:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FastDecayController$3 -> APBl$3:
    int[] $SwitchMap$org$bukkit$TreeSpecies -> CNYI
    201:201:void <clinit>() -> <clinit>
react.controller.FeatureController -> tTUS:
    react.feature.INMSBinding trueBinding -> GIac
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> hruB
    85:85:java.lang.String getPackageVersion() -> UbmO
    90:90:boolean hasBinding() -> APBl
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Mkow
react.controller.FluidController -> QosC:
    react.glang.GSet ignore -> URim
    int flowsPerTick -> hstA
    int flowsPerSecond -> LQAe
    react.gmath.Average aFST -> ktla
    react.gmath.Average aFSS -> AXrn
    react.gmath.Average aFSMS -> ieuU
    boolean firstTickList -> NFFt
    long firstTick -> NVge
    long lastTick -> nltf
    react.glang.GSet frozen -> HoIT
    react.glang.GMap queue -> FprY
    react.glang.GMap freezeTimes -> MvGr
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> eXcP
    68:76:void checkChunks() -> tTUS
    80:97:void checkChunk(org.bukkit.Chunk) -> uNaA
    101:107:void queue(org.bukkit.block.Block) -> eXcP
    111:111:boolean isFrozen(org.bukkit.Chunk) -> KCga
    116:117:void freeze(org.bukkit.Chunk) -> ooRY
    121:127:void unfreeze(org.bukkit.Chunk) -> QDxU
    131:138:void freeze(org.bukkit.Chunk,long) -> Mkow
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> wChH
    172:182:void tickNextTickList() -> ArCv
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Mkow
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> Mkow
    248:248:react.glang.GSet getIgnore() -> QosC
    253:253:int getTransfersPerTick() -> MSEm
    258:258:int getTransfersPerSecond() -> Fort
    263:263:react.gmath.Average getaFST() -> SLFY
    268:268:react.gmath.Average getaFSS() -> KoCH
    273:273:react.gmath.Average getaFSMS() -> XAcS
    278:278:boolean isFirstTickList() -> OPWo
    283:283:long getFirstTick() -> wUIu
    288:288:long getLastTick() -> NUdv
    293:293:react.glang.GSet getFrozen() -> Elox
    298:298:react.glang.GMap getQueue() -> biTL
    303:303:react.glang.GMap getFreezeTimes() -> PlpE
react.controller.GlassController -> MSEm:
    react.glang.GMap q -> NxjS
    react.glang.GList g -> Nxir
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> Nnru
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> TNas
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> eXcP
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Mkow
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> Mkow
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> Mkow
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> Mkow
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> Mkow
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> Mkow
    33:33:react.glang.GList access$000(react.controller.GlassController) -> Mkow
react.controller.GlassController$1 -> MSEm$1:
    react.glang.GMap val$cc -> AbDk
    react.controller.GlassController this$0 -> nvFH
    85:85:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> MSEm$1$1:
    org.bukkit.Location val$i -> MeGM
    org.bukkit.entity.Player val$j -> KEMk
    react.controller.GlassController$1 this$1 -> LjTP
    107:107:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> Fort:
    react.glang.GMap g -> ceET
    react.glang.GMap gr -> AQDs
    react.glang.GMap gra -> cTGE
    41:41:void <init>() -> <init>
    50:83:void start() -> start
    88:94:void stop() -> stop
    99:126:void tick() -> tick
    131:148:void on(org.bukkit.event.player.PlayerJoinEvent) -> Mkow
    152:174:void createGraphs(react.graph.GraphMode,org.bukkit.entity.Player,react.glang.GList) -> Mkow
    178:181:void addSystem(org.bukkit.entity.Player,react.glang.GList) -> Mkow
    185:189:void addTick(org.bukkit.entity.Player,react.glang.GList) -> IFRU
    193:197:void addMemory(org.bukkit.entity.Player,react.glang.GList) -> rVYH
    201:202:void addEod(org.bukkit.entity.Player,react.glang.GList) -> Nnru
    206:215:void addPhysics(org.bukkit.entity.Player,react.glang.GList) -> TNas
    219:222:void addReact(org.bukkit.entity.Player,react.glang.GList) -> eXcP
    226:272:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> Mkow
    277:317:void on(org.bukkit.event.player.PlayerMoveEvent) -> Mkow
    323:323:void on(react.event.ReactScrollEvent) -> Mkow
    327:358:void toggleMapping(org.bukkit.entity.Player) -> uNaA
    362:394:void toggleMappingEod(org.bukkit.entity.Player) -> KCga
    398:398:react.glang.GMap getG() -> sbSS
    403:403:react.glang.GMap getGr() -> xqbL
    41:41:react.glang.GMap access$000(react.controller.GraphController) -> Mkow
    41:41:react.glang.GMap access$100(react.controller.GraphController) -> IFRU
react.controller.GraphController$1 -> Fort$1:
    react.controller.GraphController this$0 -> SfYk
    64:64:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    68:81:void run() -> run
react.controller.GraphController$2 -> Fort$2:
    react.controller.GraphController this$0 -> SfYk
    100:100:void <init>(react.controller.GraphController) -> <init>
    104:108:void run() -> run
react.controller.GraphController$3 -> Fort$3:
    org.bukkit.event.player.PlayerJoinEvent val$e -> XJtm
    react.controller.GraphController this$0 -> SfYk
    132:132:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    136:146:void run() -> run
react.controller.HopperController -> SLFY:
    react.glang.GSet ignore -> URim
    int transfersPerTick -> NMwy
    int transfersPerSecond -> lEOM
    react.gmath.Average aHST -> iTwC
    react.gmath.Average aHSS -> Djno
    react.gmath.Average aHSMS -> qwAt
    boolean firstTickList -> NFFt
    long firstTick -> NVge
    long lastTick -> nltf
    react.glang.GSet frozen -> HoIT
    react.glang.GMap queue -> FprY
    react.glang.GMap freezeTimes -> MvGr
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> eXcP
    65:73:void checkChunks() -> tTUS
    77:94:void checkChunk(org.bukkit.Chunk) -> uNaA
    98:104:void queue(org.bukkit.block.Block) -> eXcP
    108:108:boolean isFrozen(org.bukkit.Chunk) -> KCga
    113:114:void freeze(org.bukkit.Chunk) -> ooRY
    118:124:void unfreeze(org.bukkit.Chunk) -> QDxU
    128:135:void freeze(org.bukkit.Chunk,long) -> Mkow
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> wChH
    169:179:void tickNextTickList() -> ArCv
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> Mkow
    207:207:react.glang.GSet getIgnore() -> QosC
    212:212:int getTransfersPerTick() -> MSEm
    217:217:int getTransfersPerSecond() -> Fort
    222:222:react.gmath.Average getaHST() -> QNQQ
    227:227:react.gmath.Average getaHSS() -> hrsx
    232:232:react.gmath.Average getaHSMS() -> OimN
    237:237:boolean isFirstTickList() -> OPWo
    242:242:long getFirstTick() -> wUIu
    247:247:long getLastTick() -> NUdv
    252:252:react.glang.GSet getFrozen() -> Elox
    257:257:react.glang.GMap getQueue() -> biTL
    262:262:react.glang.GMap getFreezeTimes() -> PlpE
react.controller.HopperOvertickController -> KoCH:
    react.glang.GList possiblePlunge -> rpsN
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> Mkow
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> Mkow
react.controller.LanguageController -> XAcS:
    java.io.File languageFolder -> DILu
    int oldVersion -> AaeV
    java.io.File dlf -> aEOh
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> YLtj
    160:221:void downloadAll(boolean) -> vtFt
    225:261:void downloadLanguage(java.lang.String) -> uNaA
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> KCga
    315:315:java.io.File getFileForLanguage(java.lang.String) -> ooRY
    320:332:void writeDefaults() -> saps
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    31:31:int access$002(react.controller.LanguageController,int) -> Mkow
    31:31:void access$100(react.controller.LanguageController) -> Mkow
react.controller.LanguageController$1 -> XAcS$1:
    react.controller.LanguageController this$0 -> wEMc
    67:67:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> XAcS$2:
    react.controller.LanguageController this$0 -> wEMc
    81:81:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
react.controller.LanguageController$2$1 -> XAcS$2$1:
    react.controller.LanguageController$2 this$1 -> Yxlk
    104:104:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> Mkow
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> Mkow
    121:121:void onDownloadStarted(react.gnet.download.Download) -> Mkow
    126:128:void onDownloadFinished(react.gnet.download.Download) -> IFRU
    134:134:void onDownloadFailed(react.gnet.download.Download) -> rVYH
react.controller.LanguageController$3 -> XAcS$3:
    react.controller.LanguageController this$0 -> wEMc
    194:194:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> XAcS$3$1:
    react.controller.LanguageController$3 this$1 -> dWJM
    199:199:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> XAcS$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> iUVu
    207:207:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> XAcS$4:
    java.io.File val$dld -> JuSA
    react.controller.LanguageController this$0 -> wEMc
    228:228:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> Mkow
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> Mkow
    245:245:void onDownloadStarted(react.gnet.download.Download) -> Mkow
    250:251:void onDownloadFinished(react.gnet.download.Download) -> IFRU
    257:257:void onDownloadFailed(react.gnet.download.Download) -> rVYH
react.controller.MonitorController -> Elox:
    int maxCooldown -> sbsm
    react.api.TitleMonitor titleMonitor -> lgRF
    react.glang.GMap posts -> ELPf
    react.slate.PhantomSlate sb -> oWIN
    boolean ready -> kdOC
    44:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> fKKM
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> ooRY
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> QDxU
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> BuIm
    179:184:float calcVolume(react.api.ReactPlayer) -> Mkow
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> vtFt
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> VLWv
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> Oifg
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> FpMD
    219:223:void startMonitoring(org.bukkit.entity.Player) -> BSAO
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> UkWJ
    242:247:void startActionLogging(org.bukkit.entity.Player) -> Pcvg
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> WGJF
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> IFRU
    279:291:void processPlayer(react.api.ReactPlayer) -> rVYH
    296:296:void handleActionLog(org.bukkit.entity.Player) -> oMOG
    300:324:void handleTriggers(react.api.ReactPlayer) -> Nnru
    328:367:void handleScrolling(react.api.ReactPlayer) -> TNas
    371:399:void handleShifting(react.api.ReactPlayer) -> eXcP
    403:425:void handlePosting(react.api.ReactPlayer) -> uNaA
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> Mkow
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> Mkow
    471:501:void tickMonitor(react.api.ReactPlayer) -> KCga
    505:505:react.api.TitleMonitor getTitleMonitor() -> ugxE
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> Mkow
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> Mkow
    539:552:void onTick() -> ooXP
    556:578:void updateActionBoard() -> FNPY
    583:583:java.lang.String getTickName() -> McfE
    35:35:react.slate.PhantomSlate access$002(react.controller.MonitorController,react.slate.PhantomSlate) -> Mkow
    35:35:react.slate.PhantomSlate access$100(react.controller.MonitorController) -> Mkow
    35:35:boolean access$202(react.controller.MonitorController,boolean) -> Mkow
    35:35:boolean access$200(react.controller.MonitorController) -> IFRU
    35:35:react.slate.PhantomSlate access$000(react.controller.MonitorController) -> rVYH
    37:37:void <clinit>() -> <clinit>
react.controller.MonitorController$1 -> Elox$1:
    react.controller.MonitorController this$0 -> SMFp
    69:69:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> Elox$2:
    react.controller.MonitorController this$0 -> SMFp
    557:557:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> biTL:
    react.glang.GMap samples -> cBcQ
    int redstonePerTick -> JSMh
    int redstonePerSecond -> EvbW
    boolean firstTickList -> NFFt
    long firstTick -> NVge
    long lastTick -> nltf
    react.gmath.Average aRSMS -> dMvS
    react.gmath.Average aRST -> AQFL
    react.gmath.Average aRSS -> IGYf
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Mkow
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> Mkow
    72:79:void flushTickList() -> wChH
    83:93:void tickNextTickList() -> ArCv
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> vtFt
    121:122:void onPhysics(org.bukkit.Chunk) -> VLWv
    126:127:void onHopper(org.bukkit.Chunk) -> Oifg
    131:132:void onFluid(org.bukkit.Chunk) -> FpMD
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> Mkow
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> Mkow
    156:176:void onTick() -> ooXP
    181:181:java.lang.String getTickName() -> McfE
    186:186:react.glang.GMap getSamples() -> oMTW
    191:191:int getRedstonePerTick() -> bGPI
    196:196:int getRedstonePerSecond() -> bFoI
    201:201:boolean isFirstTickList() -> OPWo
    206:206:long getFirstTick() -> wUIu
    211:211:long getLastTick() -> NUdv
    216:216:react.gmath.Average getaRSMS() -> TFWY
    221:221:react.gmath.Average getaRST() -> KDNK
    226:226:react.gmath.Average getaRSS() -> WrDe
react.controller.PhysicsController$1 -> biTL$1:
    react.controller.PhysicsController this$0 -> jaKO
    169:169:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> PlpE:
    react.glang.GList players -> gNob
    react.glang.GSet save -> gNpF
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> jgqh
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> Mkow
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> EJfM
    113:113:react.glang.GList getPlayers() -> JAKH
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> Mkow
react.controller.PlayerController$1 -> PlpE$1:
    react.glang.GList val$toSave -> jaIr
    react.controller.PlayerController this$0 -> XCER
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> sbSS:
    react.rai.IRAI rai -> qKkX
    boolean raiEnabled -> XSfH
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    17:17:react.rai.IRAI access$000(react.controller.RAIController) -> Mkow
react.controller.RAIController$1 -> sbSS$1:
    react.controller.RAIController this$0 -> WPbh
    47:47:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> xqbL:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> rVYH
react.controller.ReactServerInfo -> QNQQ:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> AiTu
    27:27:int dgetGameProtocol() -> Igyu
    33:33:java.lang.String dgetGameVersion() -> MuGx
    39:39:java.lang.String dgetReactVersion() -> AaDe
    45:45:int dgetMaxPlayers() -> QyFd
    51:58:react.glang.GList dgetConnectedPlayers() -> maEC
    64:64:int dgetViewDistance() -> vHyy
    70:70:int dgetGamePort() -> RbVf
    76:76:java.lang.String dgetGameAddress() -> aTpD
    82:89:react.glang.GList dgetRemotePlugins() -> RIEX
    95:102:react.glang.GList dgetWorlds() -> MRfl
    108:108:react.glang.GList dgetActions() -> wUNw
    114:114:react.glang.GList dgetSamplers() -> QouK
react.controller.RedstoneController -> hrsx:
    react.glang.GSet ignore -> URim
    react.glang.GSet frozen -> HoIT
    react.glang.GMap queue -> FprY
    react.glang.GMap freezeTimes -> MvGr
    int redstonePerTick -> JSMh
    int redstonePerSecond -> EvbW
    react.gmath.Average aRST -> AQFL
    react.gmath.Average aRSS -> IGYf
    react.gmath.Average aRSMS -> dMvS
    boolean firstTickList -> NFFt
    long firstTick -> NVge
    long lastTick -> nltf
    react.glang.GMap trackers -> urKX
    27:27:void <init>() -> <init>
    46:82:void start() -> start
    86:87:void freezeRedstone(org.bukkit.Chunk) -> BSAO
    91:92:void thawRedstone(org.bukkit.Chunk) -> UkWJ
    97:98:void on(org.bukkit.event.world.WorldLoadEvent) -> Mkow
    103:105:void on(org.bukkit.event.world.WorldUnloadEvent) -> Mkow
    110:116:void stop() -> stop
    120:125:void releaseChunk(org.bukkit.Chunk) -> eXcP
    130:136:void tick() -> tick
    140:148:void checkChunks() -> tTUS
    152:169:void checkChunk(org.bukkit.Chunk) -> uNaA
    173:179:void queue(org.bukkit.block.Block) -> eXcP
    183:183:boolean isFrozen(org.bukkit.Chunk) -> KCga
    188:189:void freeze(org.bukkit.Chunk) -> ooRY
    193:200:void flushTickList() -> wChH
    204:214:void tickNextTickList() -> ArCv
    218:224:void unfreeze(org.bukkit.Chunk) -> QDxU
    228:235:void freeze(org.bukkit.Chunk,long) -> Mkow
    240:241:void on(org.bukkit.event.world.ChunkUnloadEvent) -> Mkow
    246:259:void on(org.bukkit.event.block.BlockPhysicsEvent) -> Mkow
    264:277:void on(org.bukkit.event.block.BlockFromToEvent) -> Mkow
    281:281:react.glang.GSet getIgnore() -> QosC
    286:286:react.glang.GSet getFrozen() -> Elox
    291:291:react.glang.GMap getQueue() -> biTL
    296:296:react.glang.GMap getFreezeTimes() -> PlpE
    301:301:int getRedstonePerTick() -> bGPI
    306:306:int getRedstonePerSecond() -> bFoI
    311:311:react.gmath.Average getaRST() -> KDNK
    316:316:react.gmath.Average getaRSS() -> WrDe
    321:321:react.gmath.Average getaRSMS() -> TFWY
    326:326:boolean isFirstTickList() -> OPWo
    331:331:long getFirstTick() -> wUIu
    336:336:long getLastTick() -> NUdv
react.controller.RemoteController -> OimN:
    react.remote.server.RemoteServer remoteServer -> jXXv
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> mrFA
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    12:12:void access$000(react.controller.RemoteController) -> Mkow
react.controller.RemoteController$1 -> OimN$1:
    react.controller.RemoteController this$0 -> MCEi
    20:20:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> OimN$2:
    react.controller.RemoteController this$0 -> MCEi
    37:37:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> bOcT
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> HKgx
react.controller.SampleController -> YLtj:
    react.glang.GMap samplers -> fLPX
    react.surge.server.SuperSampler ss -> KpGD
    int cd -> BKXk
    28:33:void <init>() -> <init>
    37:63:boolean checkThreads() -> uqKp
    68:73:void restartSuperSampler() -> QouH
    77:78:void registerSampler(react.api.ISampler) -> rVYH
    82:82:react.api.ISampler getSampler(java.lang.String) -> QDxU
    87:130:void constructSamplers() -> CVJY
    135:138:void start() -> start
    143:146:void stop() -> stop
    152:152:void tick() -> tick
    156:156:react.surge.server.SuperSampler getSuperSampler() -> VfSX
    162:184:void onTick() -> ooXP
    189:189:java.lang.String getTickName() -> McfE
    194:194:react.glang.GMap getSamplers() -> PJno
    199:199:react.surge.server.SuperSampler getSs() -> bPDI
    204:204:int getCd() -> gyFC
    209:216:react.glang.GList getSamplerNames() -> owiu
react.controller.SecurityController -> saps:
    java.lang.String ipa -> lMaV
    react.glang.GList failures -> lwtd
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> vtFt
    41:74:void checkForIP() -> cuHe
    78:91:void scan(java.lang.Runnable) -> Mkow
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> saps$1:
    react.controller.SecurityController this$0 -> cJuu
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> saps$2:
    java.lang.String val$ip -> aocy
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> saps$3:
    java.lang.Thread val$t -> sJEm
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> fKKM:
    react.glang.GMap etl -> xbEr
    react.glang.GMap ttl -> XKXK
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> Mkow
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> Mkow
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> VLWv
    143:160:void releaseWorld(org.bukkit.World) -> Oifg
    164:181:double getUniversalEntityTick() -> PKNW
    186:203:double getUniversalEntityLimit() -> AFtN
    208:225:double getUniversalTileLimit() -> OYLi
    230:247:double getUniversalTileTick() -> IOKE
    252:264:double getUniversalEntityDroppedTicks() -> EJnK
    269:281:double getUniversalTileDroppedTicks() -> nIsN
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> Mkow
    301:312:void setTileTickLimit(org.bukkit.World,double) -> IFRU
    316:321:double getEntityTickLimit(org.bukkit.World) -> FpMD
    326:331:double getTileTickLimit(org.bukkit.World) -> BSAO
    336:341:double getLastEntityTick(org.bukkit.World) -> UkWJ
    346:351:double getLastTileTick(org.bukkit.World) -> Pcvg
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> WGJF
    366:371:double getTileDroppedTicks(org.bukkit.World) -> oMOG
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> Mkow
react.controller.SpikeController -> BuIm:
    react.glang.GMap spikes -> mXsj
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> ooXP
    111:111:java.lang.String getTickName() -> McfE
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> IVyp
    128:160:void whoFuckingDidThis(react.glang.Callback) -> Mkow
    25:25:react.glang.GMap access$000(react.controller.SpikeController) -> Mkow
react.controller.SpikeController$1 -> BuIm$1:
    react.controller.SpikeController this$0 -> KgVL
    35:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> BuIm$1$1:
    react.controller.SpikeController$1 this$1 -> Tqog
    40:40:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> BuIm$2:
    react.glang.GMap val$vv -> qUAC
    react.controller.SpikeController this$0 -> KgVL
    75:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> BuIm$3:
    java.lang.Thread val$t -> sJEm
    react.glang.Callback val$callback -> AYVf
    react.controller.SpikeController this$0 -> KgVL
    131:131:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> ugxE:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> ooXP:
    16:16:void <init>() -> <init>
    21:27:void start() -> start
    32:38:void stop() -> stop
    43:55:void tick() -> tick
    60:61:void on(org.bukkit.event.world.WorldUnloadEvent) -> Mkow
react.event.ReactEvent -> FNPY:
    org.bukkit.event.HandlerList handlers -> HMLB
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> McfE:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> oMTW:
    react.event.ScrollDirection direction -> nuik
    boolean cancellled -> iMHn
    int amount -> SMJm
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> mrDs
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> aDMq
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> bGPI:
    react.event.ScrollDirection DOWN -> slGw
    react.event.ScrollDirection UP -> tLfv
    react.event.ScrollDirection[] $VALUES -> rpta
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.feature.INMSBinding -> bFoI:
    java.lang.String getPackageVersion() -> UbmO
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Mkow
react.feature.NMSBinding -> TFWY:
    java.lang.String packageVersion -> neID
    8:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> UbmO
react.feature.NMSBinding10 -> KDNK:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Mkow
react.feature.NMSBinding11 -> WrDe:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Mkow
react.feature.NMSBinding12 -> JAKH:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Mkow
react.feature.NMSBinding8 -> AiTu:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Mkow
react.feature.NMSBinding9 -> Igyu:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> Mkow
react.gbench.Profiler -> MuGx:
    long nanos -> hbum
    long startNano -> pkNi
    long millis -> OYnJ
    long startMillis -> WQEW
    double time -> tewy
    boolean profiling -> dFHo
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> UkWJ
    78:78:double getTicks() -> yIrV
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> mhrv
    93:93:double getHours() -> myuG
    98:98:double getMilliseconds() -> nlWU
    103:103:long getNanoseconds() -> EJmw
    108:108:long getNanos() -> nBCR
    113:113:long getStartNano() -> jpjg
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> XdGw
    128:128:double getTime() -> anah
    133:133:boolean isProfiling() -> EKOb
react.gconcurrent.A -> AaDe:
    react.gconcurrent.ParallelPoolManager mgr -> iDVr
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> AaDe$1:
    react.gconcurrent.A this$0 -> wxSp
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> QyFd:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> maEC:
    react.gconcurrent.QueueMode mode -> scWE
    react.glang.GList threads -> bbFK
    int next -> qKnO
    int threadCount -> FhfR
    java.util.Queue squeue -> yCDc
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> LPeQ
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> TrPE
    22:23:void syncQueue(react.gconcurrent.Execution) -> Mkow
    long getNanoGate() -> hHal
    29:42:void tickSyncQueue() -> VCnU
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> jWXw
    93:100:int getTotalQueueSize() -> onxb
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> IFRU
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> jqLS
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> hkHu
    152:179:void updateThreadInformation() -> loDt
    183:215:react.gconcurrent.ParallelThread nextThread() -> UcRN
    220:226:void createThreads(int) -> Pcvg
    230:230:react.gconcurrent.QueueMode getMode() -> PmTY
    235:235:int getNext() -> MBHU
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> biVx
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> gFBf
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> wvsn
react.gconcurrent.ParallelThread -> vHyy:
    java.util.Queue queue -> gWav
    react.gconcurrent.ThreadInformation info -> LPeQ
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> QDxU
    68:75:void execute(react.gconcurrent.Execution) -> rVYH
    79:88:void execute() -> execute
    92:93:void queue(react.gconcurrent.Execution) -> IFRU
    97:97:java.util.Queue getQueue() -> wLaF
    102:102:react.gconcurrent.ThreadInformation getInfo() -> DYQJ
react.gconcurrent.QueueMode -> RbVf:
    react.gconcurrent.QueueMode ROUND_ROBIN -> LjWu
    react.gconcurrent.QueueMode SMALLEST -> gqUS
    react.gconcurrent.QueueMode[] ENUM$VALUES -> MdjQ
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> aTpD:
    react.gconcurrent.ParallelPoolManager mgr -> iDVr
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> aTpD$1:
    react.gconcurrent.S this$0 -> xjTd
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> RIEX:
    long tick -> oxkq
    long atick -> OjpP
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> MRfl:
    double ticksPerSecond -> ktpT
    int queuedSize -> JKBc
    boolean processing -> ndkH
    double utilization -> qfDc
    react.gmath.Average ticksPerSecondAverage -> pHnF
    long tick -> oxkq
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> AaHY
    33:35:void setTicksPerSecond(double) -> vtFt
    39:39:int getQueuedSize() -> biXO
    44:45:void setQueuedSize(int) -> WGJF
    49:49:boolean isProcessing() -> RkKG
    54:55:void setProcessing(boolean) -> VLWv
    59:59:double getUtilization() -> pioC
    64:65:void setUtilization(double) -> VLWv
    69:69:double getTicksPerSecondAverage() -> dwmo
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> jNkT
    89:89:int getId() -> getId
react.gformat.F -> wUNw:
    java.text.NumberFormat NF -> EefL
    java.text.DecimalFormat DF -> pYnw
    java.lang.String[] NAMES -> bXwE
    java.math.BigInteger THOUSAND -> TqrB
    java.util.NavigableMap MAP -> KpIL
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> VLWv
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> Mkow
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> Mkow
    201:221:java.lang.String timeLong(long,int) -> Mkow
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> rVYH
    236:236:java.lang.String b(double) -> Oifg
    241:258:java.lang.String b(java.math.BigInteger) -> Mkow
    263:267:void instantiate() -> brII
    279:279:java.lang.String fileSize(long) -> Nnru
    292:292:java.lang.String memSize(long) -> TNas
    297:297:java.lang.String memSize(long,int) -> IFRU
    310:311:java.lang.String stamp(long) -> eXcP
    327:361:java.lang.String ofSize(long,int) -> rVYH
    367:394:java.lang.String ofSize(long,int,int) -> Mkow
    408:413:java.lang.String trim(java.lang.String,int) -> IFRU
    426:446:java.lang.String cname(java.lang.String) -> Oifg
    460:472:java.lang.String repeat(java.lang.String,int) -> repeat
    484:491:java.lang.String mem(long) -> uNaA
    504:522:java.lang.String memx(long) -> KCga
    536:537:java.lang.String f(long) -> ooRY
    549:550:java.lang.String f(int) -> oMOG
    564:573:java.lang.String f(double,int) -> IFRU
    589:598:java.lang.String fd(double,int) -> rVYH
    612:621:java.lang.String f(float,int) -> Mkow
    632:632:java.lang.String f(double) -> FpMD
    643:643:java.lang.String f(float) -> Mkow
    658:658:java.lang.String pc(double,int) -> Nnru
    673:673:java.lang.String pc(float,int) -> IFRU
    686:686:java.lang.String pc(double) -> BSAO
    699:699:java.lang.String pc(float) -> IFRU
    715:715:java.lang.String pc(int,int,int) -> Mkow
    729:729:java.lang.String pc(int,int) -> rVYH
    745:745:java.lang.String pc(long,long,int) -> Mkow
    759:759:java.lang.String pc(long,long) -> Nnru
    771:771:java.lang.String msSeconds(long) -> QDxU
    785:785:java.lang.String msSeconds(long,int) -> Nnru
    797:797:java.lang.String nsMs(long) -> vtFt
    811:811:java.lang.String nsMs(long,int) -> TNas
    825:825:java.lang.String nsMsd(long,int) -> eXcP
react.glang.AccessCallback -> QouK:
    java.lang.Object get() -> get
react.glang.Adapter -> mrFA:
    java.lang.Object adapt(java.lang.Object) -> eXcP
    java.lang.Object onAdapt(java.lang.Object) -> uNaA
react.glang.Callback -> bOcT:
    java.lang.Object t -> eHmn
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> Mkow
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> HKgx:
    double i -> VVUo
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> UkWJ
react.glang.FinalFloat -> uqKp:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> rVYH
react.glang.FinalInteger -> QouH:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> jgqh
react.glang.FinalLong -> CVJY:
    long i -> dxov
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> VLWv
react.glang.FinalString -> VfSX:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> PJno:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> eXcP
    java.lang.Object onAdapt(java.lang.Object) -> uNaA
react.glang.GBiset -> bPDI:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> slIs
    java.lang.Object b -> xHUT
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> Jkab
    53:54:void setA(java.lang.Object) -> KCga
    63:63:java.lang.Object getB() -> Btlv
    73:74:void setB(java.lang.Object) -> ooRY
react.glang.GList -> gyFC:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> Nnru
    45:52:react.glang.GList grepDistance(int,int) -> TNas
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> IFRU
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> FMrm
    188:190:react.glang.GList shuffleCopy() -> LPEa
    198:199:void shuffle() -> nRfY
    210:236:react.glang.GList split() -> oLxP
    248:248:boolean hasIndex(int) -> EJfM
    258:259:java.lang.Object pickRandom() -> PudI
    270:277:react.glang.GList stringList() -> LhwE
    288:292:void forEach(react.glang.Callback) -> IFRU
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> VvjN
    336:336:react.glang.GList cropFrom(int) -> awIs
    341:373:react.glang.GList split(int) -> FNJQ
    389:389:react.glang.GList cropTo(int) -> Lymj
    406:416:react.glang.GList crop(int,int) -> eXcP
    427:431:react.glang.GList removeDuplicates() -> ckyO
    442:446:void removeAll(java.lang.Object) -> QDxU
    455:455:boolean hasDuplicates() -> fdbB
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> rgcU
    484:490:void push(java.lang.Object,int) -> Mkow
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> vtFt
    528:532:void add(java.util.List) -> Mkow
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> MAgO
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> Lyxg
    626:627:react.glang.GList qdel(java.lang.Object) -> VLWv
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> cSHO
    662:669:java.lang.Object popLast() -> xhse
    674:683:java.lang.Object popRandom() -> NUkb
react.glang.GListAdapter -> owiu:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> IFRU
    java.lang.Object onAdapt(java.lang.Object) -> uNaA
react.glang.GMap -> cuHe:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> GjjC
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> Mkow
    64:81:react.glang.GMap flip() -> WPEb
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> Mkow
    121:121:react.glang.GList k() -> EJfM
    131:131:react.glang.GSet kset() -> UcQY
    141:141:react.glang.GList v() -> hbYo
    151:151:react.glang.GSet vset() -> EdfG
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> IFRU
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> uNaA
    209:219:react.glang.GMap removeDuplicateValues() -> KMEd
    233:242:void put(react.glang.GList,react.glang.GList) -> Mkow
    251:267:react.glang.GList sortK() -> KwXp
    277:293:react.glang.GList sortV() -> YfoD
react.glang.GQuadraset -> PKNW:
    java.lang.Object a -> slIs
    java.lang.Object b -> xHUT
    java.lang.Object c -> aUss
    java.lang.Object d -> MCJs
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> Jkab
    25:26:void setA(java.lang.Object) -> KCga
    30:30:java.lang.Object getB() -> Btlv
    35:36:void setB(java.lang.Object) -> ooRY
    40:40:java.lang.Object getC() -> eYQC
    45:46:void setC(java.lang.Object) -> Oifg
    50:50:java.lang.Object getD() -> hPxI
    55:56:void setD(java.lang.Object) -> FpMD
react.glang.GSet -> AFtN:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> OYLi:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> slIs
    java.lang.Object b -> xHUT
    java.lang.Object c -> aUss
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> Jkab
    26:27:void setA(java.lang.Object) -> KCga
    31:31:java.lang.Object getB() -> Btlv
    36:37:void setB(java.lang.Object) -> ooRY
    41:41:java.lang.Object getC() -> eYQC
    46:47:void setC(java.lang.Object) -> Oifg
react.gmath.Average -> IOKE:
    double[] values -> xXvB
    double average -> sRVn
    boolean dirty -> Dsbx
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> Pcvg
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> eipl
react.gmath.DoubleArrayUtils -> EJnK:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> Mkow
    17:19:void wrapRight(double[]) -> Mkow
    23:27:void fill(double[],double) -> fill
react.gmath.M -> nIsN:
    int precision -> MCIV
    int modulus -> QNsw
    float[] sin -> lfss
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> Mkow
    31:36:boolean r(java.lang.Double) -> IFRU
    51:51:double tps(long,int) -> uNaA
    63:63:double ticksFromNS(long) -> Oifg
    75:101:java.lang.String toRoman(int) -> ThTH
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> uNaA
    144:216:int fromRoman(java.lang.String) -> FpMD
    226:226:long ns() -> aetr
    236:236:long ms() -> LOhW
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> IFRU
    333:333:float sinLookup(int) -> yIic
react.gnet.client.Client -> IVyp:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> wMbI
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> Mkow
    74:74:react.gnet.packet.PacketHandler getHandler() -> Oirl
react.gnet.client.IClient -> mrDs:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> Mkow
    react.gnet.packet.PacketHandler getHandler() -> Oirl
react.gnet.download.Download -> aDMq:
    react.gnet.download.DownloadState state -> wxVO
    react.gnet.download.DownloadType type -> UBOj
    react.gnet.download.DownloadStatus status -> RIfx
    react.gnet.download.DownloadMonitor monitor -> dyPX
    java.net.URL url -> url
    java.io.File file -> UBPV
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    24:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> eXot
    92:92:react.gnet.download.DownloadType getType() -> ogNd
    97:97:react.gnet.download.DownloadStatus getStatus() -> ntkm
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> UtUi
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> yIrV:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> Mkow
    void onDownloadStarted(react.gnet.download.Download) -> Mkow
    void onDownloadFinished(react.gnet.download.Download) -> IFRU
    void onDownloadFailed(react.gnet.download.Download) -> rVYH
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> Mkow
react.gnet.download.DownloadState -> mhrv:
    react.gnet.download.DownloadState IDLE -> wDpE
    react.gnet.download.DownloadState DOWNLOADING -> YEkT
    react.gnet.download.DownloadState FAILED -> sATp
    react.gnet.download.DownloadState FINISHED -> UmFw
    react.gnet.download.DownloadState[] ENUM$VALUES -> aNFe
    3:8:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadState[] values() -> values
    1:1:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
react.gnet.download.DownloadStatus -> myuG:
    long bytesDownloaded -> AGyI
    long bytesTotal -> Yxqy
    long bytesPerSecond -> XTMX
    long timeElapsed -> bHXU
    10:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> mFti
    25:25:long getBytesDownloaded() -> hHfs
    30:31:void setBytesDownloaded(long) -> FpMD
    35:35:long getBytesTotal() -> aCrc
    40:41:void setBytesTotal(long) -> BSAO
    45:45:long getBytesPerSecond() -> XBIu
    50:51:void setBytesPerSecond(long) -> UkWJ
    55:55:long getTimeElapsed() -> BAhi
    60:61:void setTimeElapsed(long) -> Pcvg
react.gnet.download.DownloadType -> nlWU:
    react.gnet.download.DownloadType DETERMINATE -> maiq
    react.gnet.download.DownloadType INDETERMINATE -> VEUm
    react.gnet.download.DownloadType[] ENUM$VALUES -> ORDU
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadType[] values() -> values
    1:1:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
react.gnet.packet.IPacket -> EJmw:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> XRiY
    java.lang.String getPacketName() -> srxn
react.gnet.packet.IncompatablePacketException -> nBCR:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> jpjg:
    react.gnet.packet.PacketBinding SERVER_BOUND -> XSmP
    react.gnet.packet.PacketBinding CLIENT_BOUND -> PLUk
    react.gnet.packet.PacketBinding[] ENUM$VALUES -> pRAb
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.packet.PacketBinding[] values() -> values
    1:1:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
react.gnet.packet.PacketException -> XdGw:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> anah:
    react.glang.GList accept -> kJbL
    react.gnet.packet.PacketBinding side -> kuVT
    react.gnet.streams.OSS out -> jjCM
    react.gnet.streams.ISS in -> eQbJ
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> Mkow
    28:34:void accept(react.gnet.packet.IPacket) -> IFRU
    38:46:react.gnet.packet.IPacket findPacket(int) -> aTfr
    51:66:react.gnet.packet.IPacket read() -> CVOx
    71:77:void write(react.gnet.packet.IPacket) -> rVYH
react.gnet.packet.UnhandledPacketException -> EKOb:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> hHal:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> Oirl
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> Nnru
react.gnet.server.Server -> VCnU:
    int port -> port
    java.net.ServerSocket socket -> WPjF
    react.gnet.packet.PacketHandler handler -> wMbI
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> Oirl
    37:84:void run() -> run
    88:91:void pstart() -> xXUh
    95:96:void pstop() -> HLLM
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> Nnru
react.gnet.streams.ISS -> jWXw:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> qwGk
    boolean built -> XSjw
    byte[] readBuffer -> xYWl
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> lLTu
    64:72:react.glang.GList readStringList() -> FNUt
    77:85:react.glang.GList readDoubleList() -> gxhM
    90:98:react.glang.GList readLongList() -> dEJr
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> Mkow
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> Mkow
    136:137:react.gnet.streams.ISS gzip() -> Eddn
    142:147:void build() -> GkLS
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> IFRU
    435:436:void close() -> close
react.gnet.streams.OSS -> onxb:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> DjtQ
    react.gnet.streams.StreamBuilder bu -> qwGk
    boolean built -> XSjw
    byte[] writeBuffer -> xPfb
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> hbLY
    41:42:react.gnet.streams.OSS gzip(int) -> paRd
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> IFRU
    53:58:void build() -> GkLS
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> KCga
    102:108:void writeDoubleList(react.glang.GList) -> ooRY
    112:118:void writeLongList(react.glang.GList) -> QDxU
    122:128:void writeStreamableList(react.glang.GList) -> vtFt
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> wesb
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> rVYH
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> jqLS:
    react.glang.GList constructors -> XSjy
    18:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> Mkow
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> Mkow
    49:50:void bind(react.gnet.streams.StreamConstructor) -> Mkow
    54:55:void bindGZIP(int) -> NUaW
    59:60:void bindGZIP() -> JtUS
    64:65:void bindCipher(javax.crypto.Cipher) -> rVYH
    69:70:void bindBuffer(int) -> flfj
    74:75:void bindBuffer() -> lDRS
react.gnet.streams.StreamConstructor -> hkHu:
    java.io.InputStream constructInput(java.io.InputStream) -> Mkow
    java.io.OutputStream constructOutput(java.io.OutputStream) -> Mkow
react.gnet.streams.constructors.BufferedStreamConstructor -> loDt:
    int bufferSize -> bufferSize
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> IFRU
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> IFRU
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> Mkow
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> Mkow
react.gnet.streams.constructors.CipherStreamConstructor -> UcRN:
    javax.crypto.Cipher cipher -> uOme
    17:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> rVYH
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> rVYH
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> Mkow
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> Mkow
react.gnet.streams.constructors.GZipStreamConstructor -> PmTY:
    int compressionLevel -> yvMm
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> Nnru
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> Nnru
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> Mkow
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> Mkow
react.gnet.streams.overlays.CGZIPInputStream -> MBHU:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> biVx:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> gFBf:
    void toBytes(react.gnet.streams.OSS) -> Mkow
    void fromBytes(react.gnet.streams.ISS) -> Mkow
react.graph.ColossalView -> wvsn:
    react.papyrus.BufferedFrame view -> GQyx
    react.glang.GMap buffers -> OtFN
    react.glang.GMap graphs -> MvOu
    double level -> kKCB
    double targetLevel -> OtFL
    int maxX -> WYYr
    int maxY -> tCyP
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> FWHE
    51:77:void render() -> CEMx
    81:98:void scroll(int) -> qBRp
    102:112:void recompile() -> APIg
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> Mkow
    122:122:react.papyrus.BufferedFrame getView() -> ktSQ
    127:127:react.glang.GMap getBuffers() -> oVLO
    132:132:react.glang.GMap getGraphs() -> ogMb
    137:137:double getLevel() -> jpoS
    142:142:double getTargetLevel() -> miXI
    147:147:int getMaxX() -> WWyb
    152:152:int getMaxY() -> rNWQ
react.graph.ColossalView$Builder -> wvsn$Mkow:
    react.glang.GList graphs -> LPht
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> Mkow
    171:191:react.graph.ColossalView compute() -> HmqQ
react.graph.CubicleIterator -> wLaF:
    int[][] mapping -> TYAn
    int xCubes -> LrlW
    int yCubes -> Iqsb
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> CVCS
    47:130:void insert(react.graph.GraphSize,int) -> Mkow
    134:145:void print() -> print
react.graph.Graph2D -> DYQJ:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> Mkow
react.graph.GraphCPUArc -> AaHY:
    byte fontColor -> bHWf
    byte backgroundColor -> xrhp
    double pct -> esdK
    react.gmath.Average aax -> nvMt
    react.gmath.Average aay -> yKXk
    react.gmath.Average aaz -> bbIy
    long msx -> lNDo
    26:38:void <init>(byte) -> <init>
    42:47:void sample() -> yIlh
    52:90:void onRender(react.papyrus.BufferedFrame) -> Mkow
    94:94:byte getFontColor() -> xqkQ
    99:100:void setFontColor(byte) -> Mkow
    104:104:byte getBackgroundColor() -> CNAG
    109:110:void setBackgroundColor(byte) -> IFRU
react.graph.GraphLagMap -> biXO:
    int grid -> UdXU
    org.bukkit.entity.Player viewer -> dWRJ
    org.bukkit.util.Vector lastVector -> rOYX
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> vlFH
    49:55:void zoomOut() -> IXDH
    60:164:void onRender(react.papyrus.BufferedFrame) -> Mkow
react.graph.GraphLagMap$1 -> biXO$1:
    int[] $SwitchMap$react$api$ChunkIssue -> ggsQ
    107:107:void <clinit>() -> <clinit>
react.graph.GraphMemoryArc -> RkKG:
    byte fontColor -> bHWf
    byte backgroundColor -> xrhp
    double pct -> esdK
    react.gmath.Average aax -> nvMt
    long msx -> lNDo
    long of -> eYse
    26:37:void <init>(byte) -> <init>
    41:47:void sample() -> yIlh
    52:79:void onRender(react.papyrus.BufferedFrame) -> Mkow
    83:83:byte getFontColor() -> xqkQ
    88:89:void setFontColor(byte) -> Mkow
    93:93:byte getBackgroundColor() -> CNAG
    98:99:void setBackgroundColor(byte) -> IFRU
react.graph.GraphMode -> pioC:
    react.graph.GraphMode NORMAL -> wfyG
    react.graph.GraphMode ITEMFRAME -> gWjW
    react.graph.GraphMode EOD -> MvRr
    react.graph.GraphMode[] $VALUES -> qDET
    3:3:react.graph.GraphMode[] values() -> values
    3:3:react.graph.GraphMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSampleLine -> dwmo:
    double lx -> inqS
    double ly -> Xdpb
    react.api.ISampler sampler -> nTNL
    react.graph.IFormatter formatter -> OtJB
    byte graphColor -> bbMa
    byte backgroundColor -> xrhp
    byte borderColor -> ekWF
    byte textColor -> oxrs
    int ticksLeftTitle -> gWiI
    int ticksOutTitle -> lNFv
    double nextPoint -> pbdB
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> yIlh
    51:183:void onRender(react.papyrus.BufferedFrame) -> Mkow
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> IFRU
    226:254:int getHue(int,int,int) -> rVYH
    259:281:void scaleFor(react.glang.GList) -> VLWv
    285:285:react.graph.IFormatter getFormatter() -> ylPg
    290:291:void setFormatter(react.graph.IFormatter) -> Mkow
    295:295:byte getGraphColor() -> ArNK
    300:301:void setGraphColor(byte) -> rVYH
    305:305:byte getBackgroundColor() -> CNAG
    310:311:void setBackgroundColor(byte) -> IFRU
    315:315:byte getBorderColor() -> ogPd
    320:321:void setBorderColor(byte) -> Nnru
    325:325:byte getTextColor() -> kbtH
    330:331:void setTextColor(byte) -> TNas
    335:335:react.api.ISampler getSampler() -> bqlQ
react.graph.GraphSize -> jNkT:
    react.graph.GraphSize WIDE -> vtut
    react.graph.GraphSize FULL -> JcwK
    react.graph.GraphSize SQUARE -> txBV
    react.graph.GraphSize[] $VALUES -> PwJl
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> xXYE
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> jNkT$1:
    int[] $SwitchMap$react$graph$GraphSize -> makS
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> brII:
    java.lang.String text -> text
    byte fontColor -> bHWf
    byte backgroundColor -> xrhp
    boolean wrote -> uOpO
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> Mkow
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> xqkQ
    68:69:void setFontColor(byte) -> Mkow
    73:73:byte getBackgroundColor() -> CNAG
    78:79:void setBackgroundColor(byte) -> IFRU
react.graph.GraphingInstance -> Jkab:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> LPht
    react.graph.ColossalView view -> CqFH
    react.papyrus.Papyrus papyrus -> ecEe
    react.papyrus.IRenderer renderer -> URuN
    boolean mapping -> vtdR
    react.glang.GList msgs -> pAAP
    react.surge.sched.Task waiter -> DkWc
    react.surge.sched.Task waiter2 -> hklm
    int shift -> jjCh
    int iv -> wxXw
    boolean notif -> lVWR
    boolean doScrolling -> wUuW
    50:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> aMGL
    127:128:void setDoScrolling(boolean) -> Oifg
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> Mkow
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> Mkow
    151:155:void send(java.lang.String) -> BSAO
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> Mkow
    166:205:void on(react.event.ReactScrollEvent) -> Mkow
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> Mkow
    219:227:void destroy() -> destroy
    231:240:void toggle() -> cRko
    244:245:void setGraphs(react.glang.GList) -> Oifg
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> VTwO
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> angi
    298:298:react.graph.ColossalView getView() -> HKlk
    303:303:react.papyrus.Papyrus getPapyrus() -> SmoW
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> Mkow
    323:324:void setPapyrus(react.papyrus.Papyrus) -> Mkow
    328:329:void setRenderer(react.papyrus.IRenderer) -> Mkow
    333:334:void setMapping(boolean) -> rVYH
    338:339:void setMsgs(react.glang.GList) -> FpMD
    343:344:void setWaiter(react.surge.sched.Task) -> Mkow
    348:349:void setWaiter2(react.surge.sched.Task) -> IFRU
    353:354:void setShift(int) -> uhQg
    358:359:void setNotif(boolean) -> FpMD
    363:363:react.papyrus.IRenderer getRenderer() -> OsEa
    368:368:boolean isMapping() -> bGKP
    373:373:react.glang.GList getMsgs() -> rEeC
    378:378:react.surge.sched.Task getWaiter() -> JRSu
    383:383:react.surge.sched.Task getWaiter2() -> ejRq
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> iKlE
    398:414:void compile() -> PTEk
    418:433:void enableSly() -> ofoS
    437:445:void disableSly() -> afXP
    32:32:boolean access$000(react.graph.GraphingInstance) -> Mkow
    32:32:react.glang.GList access$100(react.graph.GraphingInstance) -> IFRU
    32:32:boolean access$200(react.graph.GraphingInstance) -> rVYH
    32:32:boolean access$202(react.graph.GraphingInstance,boolean) -> Mkow
    32:32:int access$300(react.graph.GraphingInstance) -> Nnru
    32:32:int access$310(react.graph.GraphingInstance) -> TNas
    32:32:int access$302(react.graph.GraphingInstance,int) -> Mkow
    32:32:react.graph.ColossalView access$400(react.graph.GraphingInstance) -> eXcP
react.graph.GraphingInstance$1 -> Jkab$1:
    org.bukkit.entity.Player val$player -> mYYx
    react.graph.GraphingInstance this$0 -> FXLR
    55:55:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> Jkab$2:
    react.graph.GraphingInstance this$0 -> FXLR
    80:80:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> Jkab$3:
    react.graph.GraphingInstance this$0 -> FXLR
    110:110:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> Mkow
react.graph.IFormatter -> Btlv:
    java.lang.String from(double) -> WGJF
react.graph.IGraph -> FMrm:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> VLfL
    long getTimeViewport() -> dgPg
    void render(react.papyrus.BufferedFrame) -> rVYH
    double getMax() -> getMax
    void setMax(double) -> oMOG
react.graph.NormalGraph -> LPEa:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> JSWI
    long timeViewport -> aUvx
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> VLfL
    35:35:long getTimeViewport() -> dgPg
    41:42:void render(react.papyrus.BufferedFrame) -> rVYH
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> oMOG
    void onRender(react.papyrus.BufferedFrame) -> Mkow
react.graph.PlotBoard -> nRfY:
    react.glang.GMap plots -> OcFp
    int maxRecordings -> IifD
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> vlCn
    33:33:long getAccurateTimeSpan() -> mqip
    38:50:long getMedian(long,long) -> TNas
    55:55:long getMinimumAccuracyRange() -> awYX
    60:70:double getMaxValue() -> LaKr
    75:85:double getMinValue() -> NDmu
    90:90:react.glang.GList sort(react.glang.GMap) -> IFRU
    95:105:long earilestRecording() -> mGVj
    110:120:long latestRecording() -> awYS
    125:126:void reduceBefore(long) -> WGJF
    130:156:void reduceBetween(long,long) -> eXcP
    160:160:boolean before(long,long) -> uNaA
    165:165:boolean after(long,long) -> KCga
    170:170:boolean within(long,long,long) -> Mkow
    175:193:react.glang.GMap getBetween(long,long) -> ooRY
    198:200:void plot(long,double) -> Mkow
    204:204:boolean hasAt(long) -> oMOG
    209:209:double getAt(long) -> jgqh
    214:214:int getSize() -> getSize
react.graph.Point -> oLxP:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> PudI:
    int iid -> lVWY
    react.graph.IGraph graph -> pITo
    react.graph.GraphSize size -> pYua
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> rMuB
    24:25:void setGraph(react.graph.IGraph) -> Mkow
    29:29:react.graph.GraphSize getSize() -> SwAv
    34:35:void setSize(react.graph.GraphSize) -> Mkow
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> LhwE:
    react.graph.RenderMaxType UNLIMITED -> MnDi
    react.graph.RenderMaxType LIMITED -> ixFL
    react.graph.RenderMaxType[] $VALUES -> skog
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> ckyO:
    java.lang.String CRLF -> Arpx
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> UkWJ
    162:198:java.lang.String toString(react.json.JSONObject) -> IFRU
react.json.HTTPTokener -> fdbB:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> rgcU:
    java.util.ArrayList myArrayList -> cTQH
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> Mkow
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> HTSM
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> fdYe
    394:399:react.json.JSONObject getJSONObject(int) -> upfI
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> Pcvg
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> YwfJ
    515:515:boolean optBoolean(int) -> nInK
    533:536:boolean optBoolean(int,boolean) -> IFRU
    551:551:double optDouble(int) -> Nfdt
    569:572:double optDouble(int,double) -> Mkow
    587:587:int optInt(int) -> iBoS
    605:608:int optInt(int,int) -> KCga
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> IFRU
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> Mkow
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> Mkow
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> Mkow
    722:723:react.json.JSONArray optJSONArray(int) -> uVsM
    737:738:react.json.JSONObject optJSONObject(int) -> eifd
    752:752:long optLong(int) -> gpOE
    770:773:long optLong(int,long) -> Mkow
    788:788:java.lang.String optString(int) -> ylPg
    803:804:java.lang.String optString(int,java.lang.String) -> Mkow
    816:817:react.json.JSONArray put(boolean) -> BSAO
    830:831:react.json.JSONArray put(java.util.Collection) -> Mkow
    845:848:react.json.JSONArray put(double) -> jgqh
    860:861:react.json.JSONArray put(int) -> hanX
    873:874:react.json.JSONArray put(long) -> EJfM
    887:888:react.json.JSONArray put(java.util.Map) -> Mkow
    902:903:react.json.JSONArray put(java.lang.Object) -> BSAO
    921:922:react.json.JSONArray put(int,boolean) -> rVYH
    939:940:react.json.JSONArray put(int,java.util.Collection) -> Mkow
    958:959:react.json.JSONArray put(int,double) -> IFRU
    977:978:react.json.JSONArray put(int,int) -> ooRY
    996:997:react.json.JSONArray put(int,long) -> IFRU
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> Mkow
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> Mkow
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> UkWJ
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> Mkow
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> Mkow
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> Mkow
react.json.JSONException -> MAgO:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> SEBg
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> Lyxg:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> Mkow
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> WGJF
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> Mkow
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> IFRU
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> UkWJ
    379:456:java.lang.String toString(react.json.JSONArray) -> IFRU
    472:552:java.lang.String toString(react.json.JSONObject) -> IFRU
react.json.JSONObject -> cSHO:
    java.util.Map map -> map
    java.lang.Object NULL -> pcFy
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> Mkow
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> IFRU
    480:499:java.lang.String doubleToString(double) -> EJfM
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> oMOG
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> jgqh
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> EJfM
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> rVYH
    751:767:java.lang.String[] getNames(java.lang.Object) -> Pcvg
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> VvjN
    855:855:boolean isNull(java.lang.String) -> awIs
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> APMW
    917:937:java.lang.String numberToString(java.lang.Number) -> Mkow
    949:949:java.lang.Object opt(java.lang.String) -> FNJQ
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> Mkow
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> Mkow
    1018:1018:boolean optBoolean(java.lang.String) -> Lymj
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> Mkow
    1054:1054:double optDouble(java.lang.String) -> ThTH
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> Mkow
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> Mkow
    1116:1119:double optDouble(java.lang.String,double) -> Mkow
    1134:1134:int optInt(java.lang.String) -> yIic
    1152:1155:int optInt(java.lang.String,int) -> rVYH
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> aTfr
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> lLTu
    1198:1198:long optLong(java.lang.String) -> hbLY
    1216:1219:long optLong(java.lang.String,long) -> Mkow
    1234:1234:java.lang.String optString(java.lang.String) -> paRd
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> IFRU
    1255:1305:void populateMap(java.lang.Object) -> WGJF
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> IFRU
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> Mkow
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> IFRU
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> Nnru
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> IFRU
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> Mkow
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> rVYH
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> Nnru
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> TNas
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> Mkow
    1590:1590:java.lang.Object remove(java.lang.String) -> NUaW
    1605:1640:boolean similar(java.lang.Object) -> UkWJ
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> oMOG
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> rVYH
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> Mkow
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> Mkow
    2000:2004:void indent(java.io.Writer,int) -> Mkow
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> Mkow
react.json.JSONObject$Null -> cSHO$Mkow:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> xhse:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> NUkb:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> GjjC:
    long character -> XBob
    boolean eof -> eof
    long index -> Iqxf
    long line -> lUxv
    char previous -> skpE
    java.io.Reader reader -> reader
    boolean usePrevious -> OIVx
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> vlHO
    119:131:int dehexchar(char) -> Mkow
    136:136:boolean end() -> SKoc
    147:153:boolean more() -> oocb
    164:198:char next() -> next
    213:218:char next(char) -> IFRU
    233:250:java.lang.String next(int) -> uWRu
    263:266:char nextClean() -> MSPT
    287:334:java.lang.String nextString(char) -> rVYH
    349:361:java.lang.String nextTo(char) -> Nnru
    376:388:java.lang.String nextTo(java.lang.String) -> flfj
    403:441:java.lang.Object nextValue() -> klHd
    458:479:char skipTo(char) -> TNas
    491:491:react.json.JSONException syntaxError(java.lang.String) -> qBRp
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> WPEb:
    int maxdepth -> OkYy
    boolean comma -> qKvg
    char mode -> NODG
    react.json.JSONObject[] stack -> mamP
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> CVCS
    157:164:react.json.JSONWriter array() -> mOjK
    180:193:react.json.JSONWriter end(char,char) -> Mkow
    206:206:react.json.JSONWriter endArray() -> uiDT
    219:219:react.json.JSONWriter endObject() -> bPLW
    235:258:react.json.JSONWriter key(java.lang.String) -> uhQg
    274:285:react.json.JSONWriter object() -> yRmA
    299:310:void pop(char) -> eXcP
    322:329:void push(react.json.JSONObject) -> Nnru
    342:342:react.json.JSONWriter value(boolean) -> UkWJ
    356:356:react.json.JSONWriter value(double) -> VvjN
    369:369:react.json.JSONWriter value(long) -> VvjN
    385:385:react.json.JSONWriter value(java.lang.Object) -> jgqh
react.json.XML -> UcQY:
    java.lang.Character AMP -> Bdsi
    java.lang.Character APOS -> wVYU
    java.lang.Character BANG -> KNJv
    java.lang.Character EQ -> DIWB
    java.lang.Character GT -> DRGr
    java.lang.Character LT -> JRwh
    java.lang.Character QUEST -> Wroi
    java.lang.Character QUOT -> rOYd
    java.lang.Character SLASH -> pYss
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> HTSM
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> Mkow
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> UkWJ
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> hbYo:
    java.util.HashMap entity -> kdXK
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> YxVS
    108:133:java.lang.Object nextContent() -> mPKL
    149:166:java.lang.Object nextEntity(char) -> uNaA
    186:239:java.lang.Object nextMeta() -> FFLE
    261:334:java.lang.Object nextToken() -> IXFO
    354:420:boolean skipPast(java.lang.String) -> fdYe
react.lagmap.LagMap -> EdfG:
    react.glang.GMap chunks -> hcav
    14:16:void <init>() -> <init>
    20:27:react.glang.GMap getGrandTotalMilliseconds() -> vsve
    32:47:react.glang.GMap getGrandTotal() -> ndOg
    52:61:void pump() -> KTwp
    65:71:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> Mkow
    75:81:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> Mkow
    85:85:react.glang.GMap getChunks() -> Keya
react.lagmap.LagMapChunk -> KMEd:
    react.glang.GMap hits -> NWVt
    org.bukkit.Chunk c -> kIrd
    15:18:void <init>(org.bukkit.Chunk) -> <init>
    22:36:react.glang.GMap getMS() -> TXCc
    41:65:double totalMS() -> rWIa
    70:77:double getMS(react.api.ChunkIssue) -> Mkow
    82:88:void hit(react.api.ChunkIssue,double) -> Mkow
    92:93:void hit(react.api.ChunkIssue) -> IFRU
    97:97:int getX() -> getX
    102:102:int getZ() -> getZ
    107:114:double totalScore() -> tnQS
    119:119:react.glang.GMap getHits() -> XcoF
    124:133:void pump() -> KTwp
    138:138:int compareTo(react.lagmap.LagMapChunk) -> Mkow
    143:143:org.bukkit.Chunk getC() -> cdAQ
    9:9:int compareTo(java.lang.Object) -> compareTo
react.papyrus.BufferedFrame -> KwXp:
    byte[][] frame -> rFlH
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> Mkow
    90:97:void write(byte) -> eXcP
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> Mkow
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> Mkow
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> Mkow
    153:167:java.awt.image.BufferedImage toBufferedImage() -> KoLP
    175:182:void writeRainbowMul() -> SfAw
    189:196:void writeRainbowAdd() -> gMxQ
    203:213:void writeSparks() -> FxnS
    217:223:boolean write(int,int,byte) -> Mkow
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> Mkow
    255:272:void write(react.papyrus.BufferedFrame) -> Nnru
    276:276:byte[][] getRawFrame() -> tKkv
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> YfoD:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> Nnru
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> Mkow
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> eYQC:
    org.bukkit.map.MapView getView() -> DPdp
    react.papyrus.BufferedFrame getFrameBuffer() -> dEPE
    void addRenderer(react.papyrus.IRenderer) -> IFRU
    void clearRenderers() -> PBep
    react.glang.GList getRenderers() -> wTvG
    void removeRenderer(react.papyrus.IRenderer) -> rVYH
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> kcVF
react.papyrus.IRenderer -> hPxI:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> Mkow
react.papyrus.Papyrus -> eipl:
    org.bukkit.map.MapView map -> IOwW
    react.papyrus.BufferedFrame frameBuffer -> TiiU
    react.papyrus.BufferedFrame lastFrameBuffer -> mPoA
    react.glang.GList renderers -> yTRG
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> DPdp
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> dEPE
    51:52:void addRenderer(react.papyrus.IRenderer) -> IFRU
    57:58:void clearRenderers() -> PBep
    63:63:react.glang.GList getRenderers() -> wTvG
    69:70:void removeRenderer(react.papyrus.IRenderer) -> rVYH
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> kcVF
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> IFRU
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> rVYH
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> Nnru
react.papyrus.Papyrus$1 -> eipl$1:
    org.bukkit.map.MapCanvas val$c -> lNMF
    org.bukkit.map.MapView val$v -> JmNY
    react.papyrus.Papyrus this$0 -> CFVC
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> aetr:
    int spaceSize -> klkg
    java.lang.String fontChars -> XTTQ
    int[][] fontData -> eIWq
    react.papyrus.ReactFont Font -> WYaX
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> LOhW:
    react.glang.GList subgoals -> Kopb
    java.lang.String tag -> Dbkc
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> NUrC
    26:44:void propigate() -> AaOP
    49:50:void addGoal(react.rai.IGoal) -> Mkow
    55:65:react.glang.GList getFailingSubgoals() -> gWIh
    71:71:boolean isFailing() -> kbuK
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> nAmj
    void onPropigated() -> HCaj
react.rai.Goal$1 -> LOhW$1:
    react.rai.IGoal val$i -> suCm
    react.rai.Goal this$0 -> urYH
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> Oirl:
    react.glang.GList getSubgoals() -> NUrC
    void propigate() -> AaOP
    void onPropigated() -> HCaj
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> gWIh
    boolean isFailing() -> kbuK
    boolean onCheckFailing() -> nAmj
    void update() -> update
    void addGoal(react.rai.IGoal) -> Mkow
react.rai.IRAI -> eXot:
    react.glang.GList getGoals() -> ncpq
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> Mkow
    react.glang.GList getEvents() -> jWdr
    void callEvent(react.rai.RAIEvent) -> Mkow
    react.glang.GList getListeners() -> gWMY
react.rai.RAI -> ogNd:
    react.glang.GList goals -> klju
    react.glang.GList events -> GSDV
    react.glang.GList logEvents -> FaBe
    react.glang.GList listeners -> RuEI
    long since -> HMTR
    react.rai.RAI instance -> ixGO
    22:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> ncpq
    41:42:void addGoal(react.rai.IGoal) -> Mkow
    47:77:void tick() -> tick
    82:82:react.glang.GList getEvents() -> jWdr
    88:95:void callEvent(react.rai.RAIEvent) -> Mkow
    100:100:react.glang.GList getListeners() -> gWMY
react.rai.RAIEvent -> ntkm:
    react.rai.RAIEventType type -> banu
    java.lang.String[] pars -> wolr
    java.lang.String ovt -> JBXi
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> YpGT
    29:29:java.lang.String[] getPars() -> DYXt
    34:34:java.lang.String getOvt() -> UQwn
react.rai.RAIEventType -> UtUi:
    react.rai.RAIEventType FIRE_ACTION -> SDbY
    react.rai.RAIEventType NOTE_GOAL_FAILING -> pIUv
    react.rai.RAIEventType NOTE_GOAL_FIXED -> mPmf
    java.lang.String[] msgs -> NhXH
    react.rai.RAIEventType[] $VALUES -> Cphk
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> kkho
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> Mkow
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedEntityCounts -> mFti:
    boolean failing -> qCfy
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> nAmj
    91:134:void onPropigated() -> HCaj
    22:22:boolean access$000(react.rai.goals.GoalReducedEntityCounts) -> Mkow
react.rai.goals.GoalReducedEntityCounts$1 -> mFti$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> jHEG
    68:68:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> mFti$2:
    org.bukkit.Chunk val$lx -> vdYL
    react.rai.goals.GoalReducedEntityCounts this$0 -> jHEG
    120:120:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> hHfs:
    boolean failing -> qCfy
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> nAmj
    72:76:void onPropigated() -> HCaj
react.rai.goals.GoalStableChunkTime$1 -> hHfs$1:
    react.rai.goals.GoalStableChunkTime this$0 -> RlSj
    49:49:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> aCrc:
    boolean failing -> qCfy
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> HCaj
    35:35:void letUp() -> wnju
    40:77:boolean onCheckFailing() -> nAmj
    15:15:boolean access$000(react.rai.goals.GoalStableEntityTime) -> Mkow
react.rai.goals.GoalStableEntityTime$1 -> aCrc$1:
    react.rai.goals.GoalStableEntityTime this$0 -> WsSN
    60:60:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> XBIu:
    boolean failing -> qCfy
    react.glang.GMap reocc -> iDaT
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> HCaj
    88:125:boolean onCheckFailing() -> nAmj
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableFluidTime) -> Mkow
    24:24:boolean access$100(react.rai.goals.GoalStableFluidTime) -> IFRU
react.rai.goals.GoalStableFluidTime$1 -> XBIu$1:
    org.bukkit.Chunk val$lx -> vdYL
    react.rai.goals.GoalStableFluidTime this$0 -> oyVw
    67:67:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> XBIu$2:
    react.rai.goals.GoalStableFluidTime this$0 -> oyVw
    108:108:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> BAhi:
    boolean failing -> qCfy
    react.glang.GMap reocc -> iDaT
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> HCaj
    89:125:boolean onCheckFailing() -> nAmj
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableHopperTime) -> Mkow
    24:24:boolean access$100(react.rai.goals.GoalStableHopperTime) -> IFRU
react.rai.goals.GoalStableHopperTime$1 -> BAhi$1:
    org.bukkit.Chunk val$lx -> vdYL
    react.rai.goals.GoalStableHopperTime this$0 -> wNMk
    67:67:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> BAhi$2:
    react.rai.goals.GoalStableHopperTime this$0 -> wNMk
    108:108:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> XRiY:
    int d -> d
    boolean failing -> qCfy
    react.glang.GMap reocc -> iDaT
    32:37:void <init>() -> <init>
    42:86:void onPropigated() -> HCaj
    91:128:boolean onCheckFailing() -> nAmj
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableRedstoneTime) -> Mkow
    24:24:boolean access$100(react.rai.goals.GoalStableRedstoneTime) -> IFRU
react.rai.goals.GoalStableRedstoneTime$1 -> XRiY$1:
    org.bukkit.Chunk val$lx -> vdYL
    react.rai.goals.GoalStableRedstoneTime this$0 -> OQkJ
    69:69:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    73:83:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> XRiY$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> OQkJ
    111:111:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    115:124:void run() -> run
react.rai.goals.GoalStableTickTime -> srxn:
    boolean failing -> qCfy
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> HCaj
    34:58:boolean onCheckFailing() -> nAmj
    14:14:boolean access$000(react.rai.goals.GoalStableTickTime) -> Mkow
react.rai.goals.GoalStableTickTime$1 -> srxn$1:
    react.rai.goals.GoalStableTickTime this$0 -> fTmJ
    41:41:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.redstone.RedstoneEvent -> CVOx:
    react.surge.util.MaterialBlock block -> toXP
    org.bukkit.util.Vector vector -> nCRs
    byte from -> nduT
    byte to -> WYcO
    17:22:void <init>(org.bukkit.event.block.BlockRedstoneEvent) -> <init>
    26:26:react.surge.util.MaterialBlock getBlock() -> skPX
    31:32:void setBlock(react.surge.util.MaterialBlock) -> Mkow
    36:36:org.bukkit.util.Vector getVector() -> NgVp
    41:42:void setVector(org.bukkit.util.Vector) -> Mkow
    46:46:byte getFrom() -> HwHM
    51:52:void setFrom(byte) -> uNaA
    56:56:byte getTo() -> ntrP
    61:62:void setTo(byte) -> KCga
react.redstone.RedstoneTracker -> xXUh:
    org.bukkit.World world -> world
    react.controller.FeatureController fc -> hdFA
    react.glang.GList events -> GSDV
    boolean ticking -> YhYm
    react.surge.sched.Task task -> raAk
    boolean nms -> THJA
    int tr -> Bmgm
    react.gmath.Average aav -> rhpu
    boolean handleTicking -> jPXT
    react.glang.GSet locked -> WsVW
    34:57:void <init>(org.bukkit.World) -> <init>
    61:62:void lock(org.bukkit.Chunk) -> Pcvg
    66:67:void unlock(org.bukkit.Chunk) -> WGJF
    71:73:void close() -> close
    77:115:void tick() -> tick
    120:141:void set(org.bukkit.Location,react.surge.util.MaterialBlock) -> IFRU
    145:166:void enact(react.redstone.RedstoneEvent) -> Mkow
    171:198:void on(org.bukkit.event.block.BlockRedstoneEvent) -> Mkow
react.redstone.RedstoneTracker$1 -> xXUh$1:
    react.redstone.RedstoneTracker this$0 -> ogxC
    50:50:void <init>(react.redstone.RedstoneTracker,java.lang.String,int) -> <init>
    54:55:void run() -> run
react.remote.client.RemoteClient -> HLLM:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> gqbb
    boolean authenticated -> bjcp
    react.remote.server.ServerInfo info -> gGPB
    react.glang.GMap frems -> Gkvn
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> yIlh
    51:51:react.glang.GMap getFrames() -> lCwe
    56:75:int computeFrames() -> YESX
    80:92:boolean clearToken() -> gFKb
    97:110:boolean updateServerInfo() -> Rjqx
    115:129:boolean refreshToken() -> prhU
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> rVYH
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> INui
    165:165:boolean isAuthenticated() -> GbcE
    170:170:react.remote.server.ServerInfo getInfo() -> BAoQ
react.remote.client.packet.CPacketClearToken -> FNUt:
    java.lang.String token -> gqbb
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Mkow
    33:34:void fromBytes(react.gnet.streams.ISS) -> Mkow
    38:38:java.lang.String getToken() -> INui
    43:44:void setToken(java.lang.String) -> upfI
react.remote.client.packet.CPacketComputeFrames -> gxhM:
    java.lang.String token -> gqbb
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Mkow
    33:34:void fromBytes(react.gnet.streams.ISS) -> Mkow
    38:38:java.lang.String getToken() -> INui
    43:44:void setToken(java.lang.String) -> upfI
react.remote.client.packet.CPacketGetInfo -> dEJr:
    java.lang.String token -> gqbb
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Mkow
    33:34:void fromBytes(react.gnet.streams.ISS) -> Mkow
    38:38:java.lang.String getToken() -> INui
    43:44:void setToken(java.lang.String) -> upfI
react.remote.client.packet.CPacketGetToken -> Eddn:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> Mkow
    36:38:void fromBytes(react.gnet.streams.ISS) -> Mkow
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> GkLS:
    java.lang.String token -> gqbb
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Mkow
    33:34:void fromBytes(react.gnet.streams.ISS) -> Mkow
    38:38:java.lang.String getToken() -> INui
    43:44:void setToken(java.lang.String) -> upfI
react.remote.client.packet.ClientPacket -> wesb:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> Mkow
    void fromBytes(react.gnet.streams.ISS) -> Mkow
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> XRiY
    42:42:java.lang.String getPacketName() -> srxn
react.remote.client.packet.ClientPacketType -> JtUS:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> uXhN
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> OYys
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> WPqA
    react.remote.client.packet.ClientPacketType GET_INFO -> dVup
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> SDcw
    react.remote.client.packet.ClientPacketType[] $VALUES -> THGt
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> lDRS:
    react.glang.GMap compute(long,long) -> rVYH
react.remote.server.KnownUser -> FWHE:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> CEMx:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> Mkow
    38:41:void fromBytes(react.gnet.streams.ISS) -> Mkow
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> APIg:
    react.glang.GList users -> Rted
    react.glang.GMap session -> raAD
    react.glang.GMap lastCompute -> huFQ
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> bOcT
    44:45:void registerUser(react.remote.server.KnownUser) -> Mkow
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> IFRU
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> YwfJ
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> Nnru
    react.remote.server.IFrameComputer getFrameComputer() -> HKgx
    170:171:void markLastCompute(react.remote.server.KnownUser) -> rVYH
    175:180:long getLastCompute(react.remote.server.KnownUser) -> Nnru
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> Mkow
    190:191:void deleteSession(react.remote.server.KnownUser) -> TNas
    195:195:java.lang.String createToken() -> NDsW
react.remote.server.ServerInfo -> ktSQ:
    java.lang.String motd -> WbRj
    int gameProtocol -> AIDN
    java.lang.String gameVersion -> kJih
    java.lang.String reactVersion -> TGgk
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> MBrn
    int viewDistance -> viewDistance
    int gamePort -> jOuw
    java.lang.String gameAddress -> Swic
    react.glang.GList remotePlugins -> WkED
    react.glang.GList worlds -> qwNw
    react.glang.GList actions -> iffS
    react.glang.GList samplers -> GlYT
    26:26:react.remote.server.ServerInfo empty() -> rxnR
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> Mkow
    146:159:void fromBytes(react.gnet.streams.ISS) -> Mkow
    java.lang.String dgetMotd() -> AiTu
    int dgetGameProtocol() -> Igyu
    java.lang.String dgetGameVersion() -> MuGx
    java.lang.String dgetReactVersion() -> AaDe
    int dgetMaxPlayers() -> QyFd
    react.glang.GList dgetConnectedPlayers() -> maEC
    int dgetViewDistance() -> vHyy
    int dgetGamePort() -> RbVf
    java.lang.String dgetGameAddress() -> aTpD
    react.glang.GList dgetRemotePlugins() -> RIEX
    react.glang.GList dgetWorlds() -> MRfl
    react.glang.GList dgetActions() -> wUNw
    react.glang.GList dgetSamplers() -> QouK
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> OjYx
    199:199:java.lang.String getGameVersion() -> NDsX
    204:204:java.lang.String getReactVersion() -> cuRn
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> ejWa
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> IqWu
    229:229:java.lang.String getGameAddress() -> jqWI
    234:234:react.glang.GList getRemotePlugins() -> GcAn
    239:239:react.glang.GList getWorlds() -> UlIx
    244:244:react.glang.GList getActions() -> MRbP
    249:249:react.glang.GList getSamplers() -> tvby
react.remote.server.ServerInfo$1 -> ktSQ$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> MRfl
    37:37:int dgetViewDistance() -> vHyy
    43:43:react.glang.GList dgetRemotePlugins() -> RIEX
    49:49:java.lang.String dgetReactVersion() -> AaDe
    55:55:java.lang.String dgetMotd() -> AiTu
    61:61:int dgetMaxPlayers() -> QyFd
    67:67:java.lang.String dgetGameVersion() -> MuGx
    73:73:int dgetGameProtocol() -> Igyu
    79:79:int dgetGamePort() -> RbVf
    85:85:java.lang.String dgetGameAddress() -> aTpD
    91:91:react.glang.GList dgetConnectedPlayers() -> maEC
    97:97:react.glang.GList dgetActions() -> wUNw
    103:103:react.glang.GList dgetSamplers() -> QouK
react.remote.server.packet.ComputedFrame -> oVLO:
    react.glang.GMap values -> vKLk
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> Mkow
    28:36:void fromBytes(react.gnet.streams.ISS) -> Mkow
    40:40:react.glang.GMap getValues() -> gglL
    45:46:void setValues(react.glang.GMap) -> rVYH
react.remote.server.packet.SPacketOk -> ogMb:
    boolean ok -> OcPC
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Mkow
    33:34:void fromBytes(react.gnet.streams.ISS) -> Mkow
    38:38:boolean isOk() -> HnVA
    43:44:void setOk(boolean) -> Pcvg
react.remote.server.packet.SPacketSendFrames -> jpoS:
    react.glang.GMap frames -> RBEY
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> Mkow
    36:44:void fromBytes(react.gnet.streams.ISS) -> Mkow
    48:48:react.glang.GMap getFrames() -> lCwe
    53:54:void setFrames(react.glang.GMap) -> Nnru
react.remote.server.packet.SPacketSendInfo -> miXI:
    react.remote.server.ServerInfo info -> gGPB
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Mkow
    33:34:void fromBytes(react.gnet.streams.ISS) -> Mkow
    38:38:react.remote.server.ServerInfo getInfo() -> BAoQ
    43:44:void setInfo(react.remote.server.ServerInfo) -> Mkow
react.remote.server.packet.SPacketSendToken -> WWyb:
    java.lang.String token -> gqbb
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> Mkow
    33:34:void fromBytes(react.gnet.streams.ISS) -> Mkow
    38:38:java.lang.String getToken() -> INui
    43:44:void setToken(java.lang.String) -> upfI
react.remote.server.packet.ServerPacket -> rNWQ:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> Mkow
    void fromBytes(react.gnet.streams.ISS) -> Mkow
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> XRiY
    42:42:java.lang.String getPacketName() -> srxn
react.remote.server.packet.ServerPacketType -> HmqQ:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> xjdd
    react.remote.server.packet.ServerPacketType SEND_INFO -> nSvI
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> aWAq
    react.remote.server.packet.ServerPacketType OK -> fToD
    react.remote.server.packet.ServerPacketType[] $VALUES -> cuxg
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> xqkQ:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleAsyncQueue$1 -> xqkQ$1:
    react.sampler.SampleAsyncQueue this$0 -> nLFH
    21:21:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleChunkTime -> CNAG:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleChunkTime$1 -> CNAG$1:
    react.sampler.SampleChunkTime this$0 -> Mmjf
    21:21:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleChunksLoaded -> vlFH:
    react.graph.IFormatter formatter -> OtJB
    18:27:void <init>() -> <init>
    32:38:void construct() -> uNbJ
    43:44:void sample() -> yIlh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleChunksLoaded$1 -> vlFH$1:
    react.sampler.SampleChunksLoaded this$0 -> SVKF
    20:20:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> WGJF
react.sampler.SampleChunksLoadedPerSecond -> IXDH:
    react.gmath.Average a -> Eerk
    react.graph.IFormatter formatter -> OtJB
    16:29:void <init>() -> <init>
    34:40:void construct() -> uNbJ
    45:47:void sample() -> yIlh
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleChunksLoadedPerSecond$1 -> IXDH$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> bICr
    22:22:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> WGJF
react.sampler.SampleEntitiesDrops -> ArNK:
    react.graph.IFormatter formatter -> OtJB
    18:27:void <init>() -> <init>
    32:38:void construct() -> uNbJ
    43:44:void sample() -> yIlh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleEntitiesDrops$1 -> ArNK$1:
    react.sampler.SampleEntitiesDrops this$0 -> WavC
    20:20:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> WGJF
react.sampler.SampleEntitiesLiving -> ogPd:
    react.graph.IFormatter formatter -> OtJB
    18:27:void <init>() -> <init>
    32:38:void construct() -> uNbJ
    43:44:void sample() -> yIlh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleEntitiesLiving$1 -> ogPd$1:
    react.sampler.SampleEntitiesLiving this$0 -> wpQj
    20:20:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> WGJF
react.sampler.SampleEntitiesTiles -> kbtH:
    react.graph.IFormatter formatter -> OtJB
    18:27:void <init>() -> <init>
    32:38:void construct() -> uNbJ
    43:44:void sample() -> yIlh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleEntitiesTiles$1 -> kbtH$1:
    react.sampler.SampleEntitiesTiles this$0 -> MCVL
    20:20:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> WGJF
react.sampler.SampleEntitiesTotal -> bqlQ:
    react.graph.IFormatter formatter -> OtJB
    18:27:void <init>() -> <init>
    32:38:void construct() -> uNbJ
    43:44:void sample() -> yIlh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleEntitiesTotal$1 -> bqlQ$1:
    react.sampler.SampleEntitiesTotal this$0 -> sIqx
    20:20:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> WGJF
react.sampler.SampleEntityDroppedTicks -> xXYE:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleEntityDroppedTicks$1 -> xXYE$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> JmPx
    21:21:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleEntityTime -> aMGL:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleEntityTime$1 -> aMGL$1:
    react.sampler.SampleEntityTime this$0 -> uHIU
    21:21:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleEntityTimeLock -> cRko:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleEntityTimeLock$1 -> cRko$1:
    react.sampler.SampleEntityTimeLock this$0 -> sAar
    21:21:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleExplosionTime -> VTwO:
    react.graph.IFormatter formatter -> OtJB
    18:27:void <init>() -> <init>
    32:38:void construct() -> uNbJ
    43:44:void sample() -> yIlh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleExplosionTime$1 -> VTwO$1:
    react.sampler.SampleExplosionTime this$0 -> AYgD
    20:20:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> WGJF
react.sampler.SampleFluidPerSecond -> angi:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleFluidPerSecond$1 -> angi$1:
    react.sampler.SampleFluidPerSecond this$0 -> nvYP
    21:21:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleFluidPerTick -> HKlk:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    46:53:void sample() -> yIlh
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleFluidPerTick$1 -> HKlk$1:
    react.sampler.SampleFluidPerTick this$0 -> OtOr
    21:21:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleFluidTickTime -> SmoW:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleFluidTickTime$1 -> SmoW$1:
    react.sampler.SampleFluidTickTime this$0 -> LQTb
    21:21:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleFluidTickUtilization -> OsEa:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    46:53:void sample() -> yIlh
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleFluidTickUtilization$1 -> OsEa$1:
    react.sampler.SampleFluidTickUtilization this$0 -> Juai
    21:21:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleHopperPerSecond -> rEeC:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleHopperPerSecond$1 -> rEeC$1:
    react.sampler.SampleHopperPerSecond this$0 -> oOGm
    21:21:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleHopperPerTick -> JRSu:
    react.graph.IFormatter formatter -> OtJB
    19:29:void <init>() -> <init>
    34:40:void construct() -> uNbJ
    47:54:void sample() -> yIlh
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleHopperPerTick$1 -> JRSu$1:
    react.sampler.SampleHopperPerTick this$0 -> huGb
    21:21:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleHopperTickTime -> ejRq:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleHopperTickTime$1 -> ejRq$1:
    react.sampler.SampleHopperTickTime this$0 -> eble
    21:21:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleHopperTickUtilization -> iKlE:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    46:53:void sample() -> yIlh
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleHopperTickUtilization$1 -> iKlE$1:
    react.sampler.SampleHopperTickUtilization this$0 -> TGis
    21:21:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleMemoryAllocated -> PTEk:
    react.graph.IFormatter formatter -> OtJB
    18:27:void <init>() -> <init>
    32:38:void construct() -> uNbJ
    43:44:void sample() -> yIlh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleMemoryAllocated$1 -> PTEk$1:
    react.sampler.SampleMemoryAllocated this$0 -> KVbO
    20:20:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> WGJF
react.sampler.SampleMemoryAllocationPerSecond -> ofoS:
    react.graph.IFormatter formatter -> OtJB
    18:27:void <init>() -> <init>
    32:38:void construct() -> uNbJ
    43:44:void sample() -> yIlh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleMemoryAllocationPerSecond$1 -> ofoS$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> qUMq
    20:20:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> WGJF
react.sampler.SampleMemoryFree -> afXP:
    react.graph.IFormatter formatter -> OtJB
    18:27:void <init>() -> <init>
    32:38:void construct() -> uNbJ
    43:44:void sample() -> yIlh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleMemoryFree$1 -> afXP$1:
    react.sampler.SampleMemoryFree this$0 -> Aauw
    20:20:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> WGJF
react.sampler.SampleMemoryMax -> VLfL:
    react.graph.IFormatter formatter -> OtJB
    18:27:void <init>() -> <init>
    32:38:void construct() -> uNbJ
    43:44:void sample() -> yIlh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleMemoryMax$1 -> VLfL$1:
    react.sampler.SampleMemoryMax this$0 -> htgJ
    20:20:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> WGJF
react.sampler.SampleMemoryUse -> dgPg:
    react.graph.IFormatter formatter -> OtJB
    18:27:void <init>() -> <init>
    32:38:void construct() -> uNbJ
    43:44:void sample() -> yIlh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleMemoryUse$1 -> dgPg$1:
    react.sampler.SampleMemoryUse this$0 -> lgcx
    20:20:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> WGJF
react.sampler.SamplePhysicsTickTime -> vlCn:
    react.graph.IFormatter formatter -> OtJB
    18:27:void <init>() -> <init>
    32:38:void construct() -> uNbJ
    43:44:void sample() -> yIlh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SamplePhysicsTickTime$1 -> vlCn$1:
    react.sampler.SamplePhysicsTickTime this$0 -> htio
    20:20:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> WGJF
react.sampler.SampleRedstonePerSecond -> mqip:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleRedstonePerSecond$1 -> mqip$1:
    react.sampler.SampleRedstonePerSecond this$0 -> QOdh
    21:21:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleRedstonePerTick -> awYX:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    46:53:void sample() -> yIlh
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleRedstonePerTick$1 -> awYX$1:
    react.sampler.SampleRedstonePerTick this$0 -> JJot
    21:21:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleRedstoneTickTime -> LaKr:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleRedstoneTickTime$1 -> LaKr$1:
    react.sampler.SampleRedstoneTickTime this$0 -> fDPV
    21:21:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleRedstoneTickUtilization -> NDmu:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    46:53:void sample() -> yIlh
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleRedstoneTickUtilization$1 -> NDmu$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> fUQc
    21:21:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleSyncQueue -> mGVj:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleSyncQueue$1 -> mGVj$1:
    react.sampler.SampleSyncQueue this$0 -> MKiU
    21:21:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleTickTime -> awYS:
    react.graph.IFormatter formatter -> OtJB
    react.gmath.Average aa -> qeqb
    17:29:void <init>() -> <init>
    34:40:void construct() -> uNbJ
    45:47:void sample() -> yIlh
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleTickTime$1 -> awYS$1:
    react.sampler.SampleTickTime this$0 -> qeqd
    22:22:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> WGJF
react.sampler.SampleTickUtilization -> rMuB:
    react.graph.IFormatter formatter -> OtJB
    react.gmath.Average aa -> qeqb
    17:29:void <init>() -> <init>
    34:40:void construct() -> uNbJ
    45:47:void sample() -> yIlh
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleTickUtilization$1 -> rMuB$1:
    react.sampler.SampleTickUtilization this$0 -> jYMb
    22:22:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> WGJF
react.sampler.SampleTicksPerSecond -> SwAv:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleTicksPerSecond$1 -> SwAv$1:
    react.sampler.SampleTicksPerSecond this$0 -> GdKg
    21:21:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleTileDroppedTicks -> APMW:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleTileDroppedTicks$1 -> APMW$1:
    react.sampler.SampleTileDroppedTicks this$0 -> gXUM
    21:21:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleTileTime -> vlHO:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleTileTime$1 -> vlHO$1:
    react.sampler.SampleTileTime this$0 -> elAo
    21:21:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.sampler.SampleTileTimeLock -> SKoc:
    react.graph.IFormatter formatter -> OtJB
    19:28:void <init>() -> <init>
    33:39:void construct() -> uNbJ
    44:45:void sample() -> yIlh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> ylPg
react.sampler.SampleTileTimeLock$1 -> SKoc$1:
    react.sampler.SampleTileTimeLock this$0 -> cmju
    21:21:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> WGJF
react.security.checkpoints.SecurityCheckpointAlpha -> oocb:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> oNBM
    78:148:void doScan(java.lang.Runnable) -> IFRU
    152:181:byte[] readResource(java.io.File,java.lang.String) -> Mkow
    186:217:react.glang.GMap scan(java.io.File) -> IFRU
    33:33:byte[] access$000(java.io.File,java.lang.String) -> IFRU
react.security.checkpoints.SecurityCheckpointAlpha$1 -> oocb$1:
    java.lang.Runnable val$r -> FGUp
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> oocb$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> apUw
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> MSPT:
    java.lang.String ip -> WIFi
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> klHd:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> klHd$1:
    java.io.File val$f -> esps
    react.security.locks.SecurityLockAlpha this$0 -> gyvs
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> mOjK:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> VvjN
react.slate.PhantomSlate -> uiDT:
    react.glang.GList lines -> ebpC
    react.glang.GList viewers -> wyDy
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> ixLp
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> eXuU
    44:45:void set(int,java.lang.String) -> IFRU
    50:51:void setLines(react.glang.GList) -> BSAO
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> GkLS
    91:95:void addViewer(org.bukkit.entity.Player) -> VvjN
    100:102:void removeViewer(org.bukkit.entity.Player) -> awIs
    107:107:react.glang.GList getViewers() -> ePdj
    113:113:boolean isViewing(org.bukkit.entity.Player) -> FNJQ
    119:120:void addLine(java.lang.String) -> nInK
    125:126:void clearLines() -> Bcrq
react.slate.Slate -> bPLW:
    void build() -> GkLS
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> eXuU
    void set(int,java.lang.String) -> IFRU
    void setLines(react.glang.GList) -> BSAO
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> VvjN
    void addLine(java.lang.String) -> nInK
    void clearLines() -> Bcrq
    void removeViewer(org.bukkit.entity.Player) -> awIs
    react.glang.GList getViewers() -> ePdj
    boolean isViewing(org.bukkit.entity.Player) -> FNJQ
    void update() -> update
react.slate.SlateUtil -> yRmA:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> TXIK
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> UIhv
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> Mkow
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> IFRU
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> rVYH
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> Mkow
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> Mkow
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> IFRU
    186:196:java.lang.String convertJSON(java.lang.String) -> Nfdt
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> IFRU
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> Mkow
react.surge.Main -> YxVS:
    react.glang.GList plugins -> Wrwf
    react.glang.GMap pluginInstances -> kmRF
    react.glang.GList controllerSet -> cnKH
    react.glang.GMap anchors -> tLvq
    react.glang.GList classes -> NOKx
    java.lang.reflect.Field nsField -> qUQL
    java.lang.reflect.Field thField -> uilr
    react.glang.GList tracks -> JSaF
    long nsf -> nnJi
    42:46:void <clinit>() -> <clinit>
    48:51:void <init>() -> <init>
    57:57:void onControllerRegistry() -> QEmf
    62:81:long getNanoSync() -> Hefs
    86:87:void requestResetNanos() -> QVnw
    91:99:void requestReload() -> qSkE
    105:114:void requestReload(java.lang.Runnable) -> rVYH
    119:133:int getThreadCount() -> getThreadCount
    144:202:void onStart(react.surge.util.Protocol) -> Mkow
    210:252:void onStop() -> GABP
    258:258:void onPostInit() -> AjDO
    264:264:void onPreInit() -> erja
    268:279:void shutDownAmps() -> wMKp
    283:492:void initializeAmps() -> RIRD
    497:538:void doScan() -> HUGG
    542:564:void scanForPoolDefiners() -> XKDK
    568:584:void scanForRawEvents() -> nKAk
    588:604:void scanForDynamicTrack() -> CVWM
    608:629:void scanForAmps() -> xOmV
    634:645:void onTick() -> ooXP
react.surge.Main$1 -> YxVS$1:
    1:91:void <init>() -> <init>
    97:97:void run() -> run
react.surge.PluginAmp -> mPKL:
    react.surge.control.AmpedPlugin plugin -> Qhuf
    boolean connected -> connected
    int masterTask -> LkIT
    java.lang.Runnable onReload -> TYNQ
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> WrSk
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> OsMh
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> Mkow
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> Mkow
    123:124:void stopTask(int) -> uNbJ
    128:128:react.surge.control.AmpedPlugin getPlugin() -> OGxY
    133:133:int getMasterTask() -> ArTD
    138:138:java.lang.Runnable getOnReload() -> fuln
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> Mkow
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> Xtbw
    158:159:void setOnReload(java.lang.Runnable) -> Nnru
    67:67:void access$0(react.surge.PluginAmp) -> Mkow
react.surge.PluginAmp$1 -> mPKL$1:
    react.surge.PluginAmp this$0 -> XnLO
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> mPKL$2:
    react.surge.PluginAmp this$0 -> XnLO
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> mPKL$3:
    react.surge.PluginAmp this$0 -> XnLO
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> FFLE:
    react.surge.PluginAmp amp -> UlrU
    react.glang.GList tickComponents -> THMM
    react.glang.GList atickComponents -> LbWx
    react.surge.sched.TaskManager taskmgr -> xrvI
    react.surge.hotload.HotloadManager hotloadmgr -> gPDA
    java.lang.Thread mainThread -> jGjT
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> Mkow
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> iBoS
    44:44:java.io.File folder() -> eHWA
    49:51:java.io.File getPluginJarFile() -> dofg
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> Nnru
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> FySF
    74:74:react.glang.GList getTickComponents() -> VnnW
    79:79:react.glang.GList getAsyncTickComponents() -> uGDn
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> Mkow
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> IFRU
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> IFRU
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> CNGp
    126:126:boolean hasAmp() -> uOUU
    131:131:react.surge.PluginAmp getAmp() -> NpIP
    136:136:react.surge.sched.TaskManager getTaskManager() -> OrkP
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> Mttx
react.surge.cluster.Cluster -> IXFO:
    react.surge.cluster.ClusterType type -> tgKG
    java.lang.Object t -> eHmn
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> CNGk
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> vsve:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> ndOg:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> KTwp:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> Keya:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> TXCc:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> rWIa:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> tnQS:
    react.surge.cluster.ClusterType INT -> hdHV
    react.surge.cluster.ClusterType BOOLEAN -> VVbu
    react.surge.cluster.ClusterType STRING -> KWEU
    react.surge.cluster.ClusterType STRING_LIST -> FFvV
    react.surge.cluster.ClusterType DOUBLE -> GSLC
    react.surge.cluster.ClusterType LONG -> kTBl
    react.surge.cluster.ClusterType[] ENUM$VALUES -> PCsF
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> XcoF:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> FhyY
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> Mkow
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> Mkow
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> SnVq
react.surge.cluster.ConfigurationDataOutput -> KoLP:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> IFRU
react.surge.cluster.DataCluster -> SfAw:
    react.glang.GMap clusters -> WPxL
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> QqAx
    29:33:void fromJson(react.json.JSONObject) -> TNas
    37:44:react.json.JSONObject toJson() -> hINp
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> FhQd
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> Mkow
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> uVsM
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> eXcP
    194:195:void set(java.lang.String,int) -> TNas
    199:200:void set(java.lang.String,boolean) -> rVYH
    204:205:void set(java.lang.String,double) -> rVYH
    209:210:void set(java.lang.String,long) -> rVYH
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> Mkow
react.surge.cluster.ICluster -> gMxQ:
    react.surge.cluster.ClusterType getType() -> CNGk
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> FxnS:
react.surge.cluster.IDataInput -> tKkv:
    react.surge.cluster.DataCluster read(java.io.File) -> rVYH
react.surge.cluster.IDataOutput -> DPdp:
    void write(react.surge.cluster.DataCluster,java.io.File) -> Mkow
react.surge.cluster.Key -> dEPE:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> PBep:
    int value() -> value
react.surge.cluster.KeyStore -> wTvG:
react.surge.cluster.ReflectedConfigurationException -> kcVF:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> NUrC:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> rVYH
react.surge.cluster.YamlDataOutput -> AaOP:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> Mkow
react.surge.collection.GSound -> gWIh:
    java.lang.String sound -> TabB
    org.bukkit.Sound iSound -> EoHi
    java.lang.Float volume -> MmnW
    java.lang.Float pitch -> ECtJ
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> Lymj
    61:72:void play(org.bukkit.Location) -> TNas
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> Mkow
    93:93:java.lang.String getSound() -> erjV
    98:99:void setSound(java.lang.String) -> eifd
    103:103:org.bukkit.Sound getiSound() -> HLTf
    108:109:void setiSound(org.bukkit.Sound) -> Mkow
    113:113:java.lang.Float getVolume() -> fdke
    118:119:void setVolume(java.lang.Float) -> Mkow
    123:123:java.lang.Float getPitch() -> GcDa
    128:129:void setPitch(java.lang.Float) -> IFRU
react.surge.control.AmpedPlugin -> kbuK:
    react.glang.GList controllers -> XnNt
    react.gconcurrent.ParallelPoolManager pp -> QOgY
    react.surge.server.CoreTickThread ctt -> ymjx
    24:27:void <init>() -> <init>
    void doScan() -> HUGG
    long getNanoSync() -> Hefs
    int getThreadCount() -> getThreadCount
    39:39:void onLoad() -> onLoad
    46:85:void onEnable() -> onEnable
    90:96:void onDisable() -> onDisable
    101:101:react.glang.GList getControllers() -> feLc
    107:108:void registerController(react.surge.control.IController) -> Mkow
    113:124:void onTick() -> ooXP
    129:129:java.lang.String getTickName() -> McfE
    135:135:react.gconcurrent.ParallelPoolManager getThreadPool() -> eYWy
    141:256:void destroyOldThreads() -> HTeQ
    void onControllerRegistry() -> QEmf
    void onStart(react.surge.util.Protocol) -> Mkow
    void onStop() -> GABP
    void onPostInit() -> AjDO
    void onPreInit() -> erja
react.surge.control.AmpedPlugin$1 -> kbuK$1:
    react.surge.control.AmpedPlugin this$0 -> xHfA
    1:56:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    61:61:long getNanoGate() -> hHal
react.surge.control.AmpedPlugin$2 -> kbuK$2:
    react.surge.control.AmpedPlugin this$0 -> xHfA
    1:154:void <init>(react.surge.control.AmpedPlugin) -> <init>
    159:249:void run() -> run
react.surge.control.Control -> nAmj:
react.surge.control.Controller -> HCaj:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> ncpq:
react.surge.control.Enable -> jWdr:
react.surge.control.IController -> gWMY:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> YpGT:
react.surge.control.Plugin -> DYXt:
react.surge.control.SurgePlugin -> UQwn:
    void onStart(react.surge.util.Protocol) -> Mkow
    void onStop() -> GABP
    void onPostInit() -> AjDO
    void onPreInit() -> erja
    void onControllerRegistry() -> QEmf
    void registerController(react.surge.control.IController) -> Mkow
    react.glang.GList getControllers() -> feLc
    react.gconcurrent.ParallelPoolManager getThreadPool() -> eYWy
react.surge.hotload.HotloadManager -> kkho:
    react.glang.GMap filemods -> iwnl
    react.glang.GMap filesizes -> IGnR
    react.glang.GMap fileacts -> cCYH
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> Mkow
    35:38:void untrack(java.io.File) -> Nnru
    42:45:void untrackall() -> biaM
    50:86:void onTick() -> ooXP
    91:91:java.lang.String getTickName() -> McfE
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> Mkow
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> IFRU
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> rVYH
react.surge.hotload.HotloadManager$1 -> kkho$1:
    react.surge.hotload.HotloadManager this$0 -> wyGY
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> wnju:
    boolean init -> QrJJ
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> SxOv
    java.lang.Class IChatBaseComponent -> Vxha
    java.lang.Class ChatSerializer -> wVcG
    java.lang.Class PacketPlayOutPlayerInfo -> JScP
    java.lang.Class PlayerInfoData -> CNnm
    java.lang.Class EnumPlayerInfoAction -> WYhe
    java.lang.Class GameProfile -> tgLg
    java.lang.Class EnumGamemode -> gPEe
    java.lang.Class TileEntitySkull -> MnNj
    java.lang.Class LoadingCache -> QaHt
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> skPX:
    react.surge.nms.NMSX bountifulAPI -> wxfP
    boolean useOldMethods -> ptQx
    java.lang.String nmsver -> YOPb
    java.lang.Object eTimes -> QGYG
    java.lang.Object eTitle -> rFux
    java.lang.Object eSubtitle -> eAQb
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> Mkow
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> gpOE
    75:89:java.lang.Class getCBClass(java.lang.String) -> ylPg
    96:104:java.lang.Object serializeChat(java.lang.String) -> hanX
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> Mkow
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> Mkow
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> HLVr
    151:151:java.lang.String craftPackage() -> aMOR
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> Mkow
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> Mkow
    197:207:java.lang.Class getNMSClass(java.lang.String) -> uWRu
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> Mkow
    279:280:void clearTitle(org.bukkit.entity.Player) -> ThTH
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> IFRU
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> Mkow
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> Mkow
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> yIlh
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> eXcP
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> KCga
    434:447:int ping(org.bukkit.entity.Player) -> yIic
react.surge.nms.NMSX$1 -> skPX$1:
    org.bukkit.entity.Player val$player -> mYYx
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> skPX$2:
    org.bukkit.entity.Player val$player -> mYYx
    java.lang.String val$message -> vKSP
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> NgVp:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> Fgrt
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> Mkow
    68:82:void clearTitle(org.bukkit.entity.Player) -> ThTH
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> Mkow
react.surge.nms.PacketUtil$V -> NgVp$Mkow:
    react.surge.nms.PacketUtil$V R17 -> eRSQ
    react.surge.nms.PacketUtil$V R18 -> oNoI
    react.surge.nms.PacketUtil$V R19 -> UuhJ
    react.surge.nms.PacketUtil$V R111 -> oiBa
    react.surge.nms.PacketUtil$V R110 -> YNpB
    react.surge.nms.PacketUtil$V R112 -> vluW
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> Enip
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> HwHM:
    java.lang.String title -> title
    java.lang.String subTitle -> aNXD
    java.lang.String action -> action
    java.lang.Integer fadeIn -> uQAG
    java.lang.Integer fadeOut -> BLNL
    java.lang.Integer stayTime -> pcTN
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> aTfr
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> lLnB
    79:80:void setSubTitle(java.lang.String) -> uNbJ
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> LOrS
    99:100:void setFadeIn(java.lang.Integer) -> rVYH
    104:104:java.lang.Integer getFadeOut() -> nmHD
    109:110:void setFadeOut(java.lang.Integer) -> Nnru
    114:114:java.lang.Integer getStayTime() -> RbfD
    119:120:void setStayTime(java.lang.Integer) -> TNas
react.surge.nms.VersionBukkit -> ntrP:
    react.surge.nms.VersionBukkit VU -> DbvR
    react.surge.nms.VersionBukkit V7 -> JSey
    react.surge.nms.VersionBukkit V8 -> DcTu
    react.surge.nms.VersionBukkit V9 -> elDk
    react.surge.nms.VersionBukkit V11 -> LIJO
    react.surge.nms.VersionBukkit V111 -> KFFk
    react.surge.nms.VersionBukkit V112 -> TrdF
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> WHhf
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> mqtN
    27:32:boolean uc() -> FOBh
    37:67:react.surge.nms.VersionBukkit get() -> Mcvu
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> lCwe:
    void burst(java.lang.Object) -> EJfM
    void setTimeLock(double) -> awIs
    double getEstimatedTimeUse() -> SDFi
    int flush() -> HvkM
    int flush(react.gbench.Profiler) -> Mkow
    void queue(java.lang.Object) -> VvjN
    void queue(java.util.List) -> rVYH
    void queue(java.lang.Object[]) -> Mkow
react.surge.sched.ICancellable -> YESX:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> gFKb:
    void onTick() -> ooXP
    java.lang.String getTickName() -> McfE
react.surge.sched.ITask -> Rjqx:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> rWOj
    java.lang.String getName() -> getName
    double getComputeTime() -> yleR
    double getTotalComputeTime() -> Kwcq
    double getActiveTime() -> bOpy
    boolean hasCompleted() -> VwcV
react.surge.sched.Task -> prhU:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> lhIG
    double computeTime -> uYPk
    double totalComputeTime -> tgOX
    double activeTime -> DtVq
    boolean completed -> completed
    react.gbench.Profiler profiler -> nLKe
    react.gbench.Profiler activeProfiler -> oybP
    int ticks -> lhHi
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> Nnru
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> rWOj
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> yleR
    150:150:boolean hasCompleted() -> VwcV
    156:156:double getTotalComputeTime() -> Kwcq
    162:162:double getActiveTime() -> bOpy
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> rVYH
    15:15:void access$1(react.surge.sched.Task,boolean) -> Mkow
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> Nnru
    14:14:void access$3(react.surge.sched.Task,double) -> Mkow
    12:12:void access$4(react.surge.sched.Task,double) -> IFRU
    14:14:double access$5(react.surge.sched.Task) -> TNas
    13:13:void access$6(react.surge.sched.Task,double) -> rVYH
    13:13:double access$7(react.surge.sched.Task) -> eXcP
    12:12:double access$8(react.surge.sched.Task) -> uNaA
react.surge.sched.Task$1 -> prhU$1:
    react.surge.sched.Task this$0 -> Obss
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> prhU$2:
    react.surge.sched.Task this$0 -> Obss
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> prhU$3:
    react.surge.sched.Task this$0 -> Obss
    int val$total -> rrIl
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> INui:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> lhIG
    double computeTime -> uYPk
    double totalComputeTime -> tgOX
    double activeTime -> DtVq
    boolean completed -> completed
    react.gbench.Profiler profiler -> nLKe
    react.gbench.Profiler activeProfiler -> oybP
    int ticks -> lhHi
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> Nnru
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> rWOj
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> yleR
    101:101:boolean hasCompleted() -> VwcV
    107:107:double getTotalComputeTime() -> Kwcq
    113:113:double getActiveTime() -> bOpy
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> Mkow
    12:12:void access$1(react.surge.sched.TaskLater,double) -> Mkow
    13:13:double access$2(react.surge.sched.TaskLater) -> IFRU
    12:12:double access$3(react.surge.sched.TaskLater) -> rVYH
    13:13:void access$4(react.surge.sched.TaskLater,double) -> IFRU
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> Nnru
    14:14:double access$6(react.surge.sched.TaskLater) -> TNas
    14:14:void access$7(react.surge.sched.TaskLater,double) -> rVYH
react.surge.sched.TaskLater$1 -> INui$1:
    react.surge.sched.TaskLater this$0 -> VhIv
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> GbcE:
    react.glang.GList tasks -> jqfm
    react.glang.GMap taskProfiles -> GRlW
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> Mkow
    25:35:void onTick() -> ooXP
    39:40:void putFinishingTask(react.surge.sched.ITask) -> IFRU
    44:53:void putTask(react.surge.sched.ITask) -> rVYH
    58:58:java.lang.String getTickName() -> McfE
    63:63:react.glang.GList getTasks() -> pYYx
    68:68:react.glang.GMap getTaskProfiles() -> nmFt
react.surge.sched.TaskProfile -> BAoQ:
    double activeTime -> DtVq
    double computeTickTime -> lxhf
    double computeTime -> uYPk
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> bOpy
    23:24:void setActiveTime(double) -> FNJQ
    28:28:double getComputeTickTime() -> Gbfj
    33:34:void setComputeTickTime(double) -> Lymj
    38:38:double getComputeTime() -> yleR
    43:44:void setComputeTime(double) -> ThTH
react.surge.server.AsyncTick -> NDsW:
react.surge.server.CPS -> rxnR:
    react.glang.GMap keys -> eAPh
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> Xtbw
    46:99:void scan() -> iUEj
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> rVYH
react.surge.server.CoreTickThread -> OjYx:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> NDsX:
    long memoryFree -> ujRI
    long memoryUsed -> pkcV
    long memoryMax -> BKme
    long lastMemoryUsed -> hRin
    long memoryUsedAfterGC -> SgSf
    long allocated -> scnO
    long collected -> dWbX
    long collections -> kmYQ
    long sms -> qUXP
    long memoryAllocatedPerTick -> dhdF
    long memoryCollectedPerTick -> HftE
    long memoryFullyAllocatedPerTick -> fTvj
    long mah -> hdPR
    long mahs -> FOks
    22:39:void <init>() -> <init>
    void onAllocationSet() -> cSSq
    46:107:void run() -> run
    111:111:long getMemoryFree() -> EePQ
    116:116:long getMemoryUsed() -> getMemoryUsed
    121:121:long getMemoryMax() -> UlNa
    126:126:long getLastMemoryUsed() -> AGbx
    131:131:long getMemoryUsedAfterGC() -> KgAe
    136:136:long getAllocated() -> getAllocated
    141:141:long getCollected() -> jXHl
    146:146:long getCollections() -> gVns
    151:151:long getSms() -> GcEm
    156:156:long getMemoryAllocatedPerTick() -> gVnu
    161:161:long getMemoryCollectedPerTick() -> xPPH
    166:166:long getMemoryFullyAllocatedPerTick() -> Noiu
    171:171:long getMah() -> Rbdc
    176:176:long getMahs() -> iUEq
react.surge.server.SuperSampler -> cuRn:
    react.gmath.Average ticksPerSecondL -> JJvh
    react.gmath.Average tickTimeL -> wyKo
    react.gmath.Average mahL -> ebuu
    double ticksPerSecond -> ktpT
    double ticksPerSecondRaw -> qfXc
    double tickTime -> ayMn
    double tickTimeRaw -> qfYF
    boolean running -> running
    boolean frozen -> jrfI
    double tickUtilizationRaw -> OlIj
    double tickUtilization -> pJDR
    double leftoverTickTime -> qevw
    long memoryUse -> qMGA
    long memoryAllocated -> foIt
    long memoryCollected -> hdOH
    long mahs -> FOks
    int totalChunks -> lhKF
    int totalEntities -> HwtO
    int totalDrops -> NGAv
    int totalTiles -> RBMJ
    int totalLiving -> DQtt
    int chunksLoaded -> GAla
    int chunksUnloaded -> IjVh
    react.surge.server.WorldMonitor worldMonitor -> HfsH
    react.surge.server.TPSMonitor tpsMonitor -> qCtD
    react.surge.server.MemoryMonitor memoryMonitor -> pJCV
    java.lang.StackTraceElement[] lockStack -> igUH
    react.glang.GMap spikes -> mXsj
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> ooXP
    154:154:java.lang.String getTickName() -> McfE
    159:159:react.gmath.Average getTicksPerSecondL() -> yRrK
    164:164:double getTicksPerSecond() -> AaHY
    169:169:double getTicksPerSecondRaw() -> Noiq
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> RACK
    184:184:react.gmath.Average getTickTimeL() -> WOqU
    189:189:double getTickTime() -> RtGU
    194:194:double getTickTimeRaw() -> UJLV
    199:199:double getTickUtilizationRaw() -> vklE
    204:204:double getTickUtilization() -> tfGA
    209:209:double getLeftoverTickTime() -> rpaR
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> JIkd
    219:219:long getMemoryUse() -> gqCC
    224:224:long getMemoryAllocated() -> BAtY
    229:229:long getMemoryCollected() -> FhTP
    234:234:react.gmath.Average getMahL() -> xiaW
    239:239:long getMahs() -> iUEq
    244:244:int getTotalChunks() -> stDl
    249:249:int getTotalEntities() -> HfLP
    254:254:int getTotalDrops() -> GIVU
    259:259:int getTotalTiles() -> IiNp
    264:264:int getTotalLiving() -> yBTh
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> wxCs
    274:274:int getChunksLoaded() -> QErA
    279:279:int getChunksUnloaded() -> PnCe
    284:285:void setTicksPerSecondL(react.gmath.Average) -> Mkow
    289:290:void setTickTimeL(react.gmath.Average) -> IFRU
    294:295:void setMahL(react.gmath.Average) -> rVYH
    299:300:void setTicksPerSecond(double) -> vtFt
    304:305:void setTicksPerSecondRaw(double) -> yIic
    309:310:void setTickTime(double) -> aTfr
    314:315:void setTickTimeRaw(double) -> lLTu
    319:320:void setRunning(boolean) -> WGJF
    324:325:void setTickUtilizationRaw(double) -> hbLY
    329:330:void setTickUtilization(double) -> paRd
    334:335:void setLeftoverTickTime(double) -> NUaW
    339:340:void setMemoryUse(long) -> awIs
    344:345:void setMemoryAllocated(long) -> FNJQ
    349:350:void setMemoryCollected(long) -> Lymj
    354:355:void setMahs(long) -> ThTH
    359:360:void setTotalChunks(int) -> HCRP
    364:365:void setTotalEntities(int) -> Smdg
    369:370:void setTotalDrops(int) -> lKwf
    374:375:void setTotalTiles(int) -> LqaU
    379:380:void setTotalLiving(int) -> MksN
    384:385:void setChunksLoaded(int) -> gomS
    389:390:void setChunksUnloaded(int) -> hrot
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> Mkow
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> Mkow
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> Mkow
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> jXLT
    419:419:react.glang.GMap getSpikes() -> IVyp
    31:31:void access$0(react.surge.server.SuperSampler,int) -> Mkow
    33:33:void access$1(react.surge.server.SuperSampler,int) -> IFRU
    34:34:void access$2(react.surge.server.SuperSampler,int) -> rVYH
    32:32:void access$3(react.surge.server.SuperSampler,int) -> Nnru
    35:35:void access$4(react.surge.server.SuperSampler,int) -> TNas
    36:36:void access$5(react.surge.server.SuperSampler,int) -> eXcP
    37:37:void access$6(react.surge.server.SuperSampler,int) -> uNaA
    19:19:void access$7(react.surge.server.SuperSampler,double) -> Mkow
    21:21:void access$8(react.surge.server.SuperSampler,double) -> IFRU
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> Mkow
    19:19:double access$10(react.surge.server.SuperSampler) -> IFRU
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> rVYH
    21:21:double access$12(react.surge.server.SuperSampler) -> Nnru
    18:18:void access$13(react.surge.server.SuperSampler,double) -> rVYH
    20:20:void access$14(react.surge.server.SuperSampler,double) -> Nnru
    24:24:void access$15(react.surge.server.SuperSampler,double) -> TNas
    20:20:double access$16(react.surge.server.SuperSampler) -> TNas
    25:25:void access$17(react.surge.server.SuperSampler,double) -> eXcP
    25:25:double access$18(react.surge.server.SuperSampler) -> eXcP
    26:26:void access$19(react.surge.server.SuperSampler,double) -> uNaA
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> Mkow
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> uNaA
    27:27:void access$22(react.surge.server.SuperSampler,long) -> Mkow
    28:28:void access$23(react.surge.server.SuperSampler,long) -> IFRU
    29:29:void access$24(react.surge.server.SuperSampler,long) -> rVYH
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> KCga
    30:30:void access$26(react.surge.server.SuperSampler,long) -> Nnru
react.surge.server.SuperSampler$1 -> cuRn$1:
    react.surge.server.SuperSampler this$0 -> YOUI
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> Mkow
react.surge.server.SuperSampler$2 -> cuRn$2:
    react.surge.server.SuperSampler this$0 -> YOUI
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> yuXl
    106:107:void onSpike() -> ivjv
react.surge.server.SuperSampler$3 -> cuRn$3:
    react.surge.server.SuperSampler this$0 -> YOUI
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> cSSq
react.surge.server.TPSMonitor -> ejWa:
    double tickTimeMS -> nmsK
    double rawTicksPerSecond -> hlav
    react.gbench.Profiler tickProfiler -> GSRN
    react.gbench.Profiler tickTimeProfiler -> jYWG
    boolean ticked -> GRqU
    java.lang.Thread$State lastState -> AHmr
    double actualTickTimeMS -> qnjt
    double ltt -> ELkW
    long lastTick -> nltf
    boolean frozen -> jrfI
    java.lang.StackTraceElement[] lockedStack -> jYUl
    double lmsx -> yfBd
    23:40:void <init>() -> <init>
    void onTicked() -> yuXl
    void onSpike() -> ivjv
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> Mkow
    160:160:double getTickTimeMS() -> UuCD
    165:165:double getRawTicksPerSecond() -> AHES
    170:170:react.gbench.Profiler getTickProfiler() -> hADf
    175:175:boolean isTicked() -> dEXv
    180:181:void markTick() -> hHrt
    185:185:react.gbench.Profiler getTickTimeProfiler() -> BJfi
    190:190:java.lang.Thread$State getLastState() -> QNcV
    195:195:double getActualTickTimeMS() -> VLpx
    200:200:double getLtt() -> dNIv
    205:205:long getLastTick() -> NUdv
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> nSUx
react.surge.server.WorldMonitor -> IqWu:
    boolean chunksChanged -> fDXn
    boolean dropChanged -> RKBF
    boolean tileChanged -> tfsJ
    boolean livingChanged -> optg
    boolean totalChanged -> uXsf
    boolean updated -> esxW
    int totalChunks -> lhKF
    int totalDrops -> NGAv
    int totalTiles -> RBMJ
    int totalLiving -> DQtt
    int totalEntities -> HwtO
    int chunksLoaded -> GAla
    int chunksUnloaded -> IjVh
    long ms -> OGxY
    24:43:void <init>() -> <init>
    48:73:void run() -> run
    void updated(int,int,int,int,int,int,int) -> Mkow
    80:85:void on(org.bukkit.event.world.ChunkLoadEvent) -> IFRU
    90:95:void on(org.bukkit.event.world.ChunkUnloadEvent) -> Mkow
    100:101:void on(org.bukkit.event.entity.EntitySpawnEvent) -> Mkow
    106:107:void on(org.bukkit.event.entity.EntityDeathEvent) -> Mkow
    112:113:void on(org.bukkit.event.player.PlayerDropItemEvent) -> Mkow
    118:119:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> Mkow
    124:125:void on(org.bukkit.event.block.BlockPlaceEvent) -> Mkow
    130:131:void on(org.bukkit.event.block.BlockBreakEvent) -> Mkow
    135:136:void doUpdate() -> OPnK
    140:191:void sample() -> yIlh
    195:201:void sampleTotalCount() -> KLqo
    205:211:void sampleLivingCount() -> GITr
    215:243:void sampleTileCount() -> GjwW
    247:253:void sampleDropCount() -> vIkJ
    257:263:void sampleChunkCount() -> QVql
react.surge.text.PhantomSpinner -> jqWI:
    react.surge.text.ProgressSpinner s -> sdOt
    react.surge.text.ProgressSpinner c -> FqpJ
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> GcAn:
    java.lang.String[] chars -> fLhJ
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> IQFc
    react.surge.text.ProgressSpinner NETWORK -> NXEd
    react.surge.text.ProgressSpinner CIRCLES -> QrOy
    react.surge.text.ProgressSpinner RANDOMS -> HDrB
    react.surge.text.ProgressSpinner MERGERS -> rqmi
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> xqsy
    65:65:int getIndex() -> getIndex
react.surge.util.Amounts -> UlIx:
    react.surge.util.Amounts SINGLE -> HERd
    react.surge.util.Amounts DUAL -> MfCu
    react.surge.util.Amounts TRI -> KhOH
    react.surge.util.Amounts QUAD -> Osye
    react.surge.util.Amounts HEX -> pIdL
    react.surge.util.Amounts OCTA -> lhLW
    int a -> a
    react.surge.util.Amounts[] ENUM$VALUES -> rOjP
    5:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:23:int a() -> a
    29:37:java.lang.String to(int) -> Ipfb
    1:1:react.surge.util.Amounts[] values() -> values
    1:1:react.surge.util.Amounts valueOf(java.lang.String) -> valueOf
react.surge.util.Anchor -> tvby:
    int value() -> value
react.surge.util.Area -> gglL:
    org.bukkit.Location location -> MnUG
    java.lang.Double radius -> UJwa
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> Mkow
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> rOAa
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> eXcP
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> uNaA
    109:109:boolean isWithin(org.bukkit.Location) -> KCga
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> Nnru
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> Mkow
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> qdoY
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> EnDF
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> ooRY
    257:257:java.lang.Double getRadius() -> AjHs
    268:269:void setRadius(java.lang.Double) -> rVYH
    278:283:org.bukkit.Location random() -> jiMK
react.surge.util.Axis -> HnVA:
    react.surge.util.Axis X -> JKXr
    react.surge.util.Axis Y -> dGCU
    react.surge.util.Axis Z -> elHt
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> vJth
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> SThQ
    29:29:org.bukkit.util.Vector negative() -> ggsQ
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> oNBM:
    react.surge.util.BlastResistance BARRIER -> HUvI
    react.surge.util.BlastResistance BEDROCK -> Vgoh
    react.surge.util.BlastResistance COMMAND -> eAWe
    react.surge.util.BlastResistance ENDER_PORTAL -> NiIo
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> Nyja
    react.surge.util.BlastResistance ANVIL -> QibX
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> nnVO
    react.surge.util.BlastResistance OBSIDIAN -> IGwb
    react.surge.util.BlastResistance ENDER_CHEST -> mjrT
    react.surge.util.BlastResistance WATER -> nnVU
    react.surge.util.BlastResistance LAVA -> xRAB
    react.surge.util.BlastResistance STATIONARY_WATER -> SpIV
    react.surge.util.BlastResistance DRAGON_EGG -> BCcP
    react.surge.util.BlastResistance ENDER_STONE -> LtFS
    react.surge.util.BlastResistance COAL_BLOCK -> IHXj
    react.surge.util.BlastResistance DIAMOND_BLOCK -> Xvgf
    react.surge.util.BlastResistance EMERALD_BLOCK -> uGte
    react.surge.util.BlastResistance GOLD_BLOCK -> AkTQ
    react.surge.util.BlastResistance IRON_BLOCK -> rqpY
    react.surge.util.BlastResistance REDSTONE_BLOCK -> GApV
    react.surge.util.BlastResistance BRICK -> nKqE
    react.surge.util.BlastResistance BRICK_STAIRS -> jjYN
    react.surge.util.BlastResistance HARD_CLAY -> QiaL
    react.surge.util.BlastResistance STONE -> oXEq
    react.surge.util.BlastResistance SMOOTH_BRICK -> JdlV
    react.surge.util.BlastResistance SMOOTH_STAIRS -> ujYB
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> wxnf
    react.surge.util.BlastResistance STONE_SLAB2 -> Asec
    react.surge.util.BlastResistance IRON_DOOR -> necO
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> Qqqh
    react.surge.util.BlastResistance IRON_TRAPDOOR -> hcqW
    react.surge.util.BlastResistance MOB_SPAWNER -> BfHQ
    react.surge.util.BlastResistance WEB -> AHpv
    react.surge.util.BlastResistance DISPENSER -> hmDB
    react.surge.util.BlastResistance DROPPER -> PxAL
    react.surge.util.BlastResistance FURNACE -> ayQT
    react.surge.util.BlastResistance BURNING_FURNACE -> hSQL
    react.surge.util.BlastResistance BEACON -> jQFg
    react.surge.util.BlastResistance COAL_ORE -> BfGi
    react.surge.util.BlastResistance COCOA -> VFMP
    react.surge.util.BlastResistance DIAMOND_ORE -> Asds
    react.surge.util.BlastResistance EMERALD_ORE -> KFMn
    react.surge.util.BlastResistance FENCE -> WYsY
    react.surge.util.BlastResistance FENCE_GATE -> LABp
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> nUFQ
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> HMhH
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> axsE
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> xcCu
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> NOYY
    react.surge.util.BlastResistance ACACIA_FENCE -> SUvv
    react.surge.util.BlastResistance BIRCH_FENCE -> nfGh
    react.surge.util.BlastResistance DARK_OAK_FENCE -> Qqta
    react.surge.util.BlastResistance SPRUCE_FENCE -> XnYG
    react.surge.util.BlastResistance JUNGLE_FENCE -> Irms
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> lySb
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> GdXL
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> nKru
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> BwKA
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> JmaT
    react.surge.util.BlastResistance QUARTZ_STAIRS -> hmFf
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> LQcs
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> kSlQ
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> MeiI
    react.surge.util.BlastResistance WOOD_STAIRS -> foPt
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> HNIa
    react.surge.util.BlastResistance ACACIA_DOOR -> Enpg
    react.surge.util.BlastResistance BIRCH_DOOR -> SEVK
    react.surge.util.BlastResistance DARK_OAK_DOOR -> vdks
    react.surge.util.BlastResistance SPRUCE_DOOR -> HojD
    react.surge.util.BlastResistance JUNGLE_DOOR -> bbbo
    react.surge.util.BlastResistance GOLD_ORE -> aqAy
    react.surge.util.BlastResistance HOPPER -> WHpm
    react.surge.util.BlastResistance IRON_ORE -> wyRA
    react.surge.util.BlastResistance LAPIS_BLOCK -> IPjH
    react.surge.util.BlastResistance LAPIS_ORE -> mHpM
    react.surge.util.BlastResistance QUARTZ_ORE -> AQeJ
    react.surge.util.BlastResistance REDSTONE_ORE -> lhPr
    react.surge.util.BlastResistance TRAP_DOOR -> Mvhh
    react.surge.util.BlastResistance WOOD -> rrSK
    react.surge.util.BlastResistance CHEST -> uPhF
    react.surge.util.BlastResistance TRAPPED_CHEST -> hBQv
    react.surge.util.BlastResistance WORKBENCH -> PxCQ
    react.surge.util.BlastResistance CAULDRON -> EwcC
    react.surge.util.BlastResistance LOG -> RBRs
    react.surge.util.BlastResistance LOG_2 -> tgVr
    react.surge.util.BlastResistance BOOKSHELF -> hmEi
    react.surge.util.BlastResistance BANNER -> KEnl
    react.surge.util.BlastResistance STANDING_BANNER -> BmyQ
    react.surge.util.BlastResistance WALL_BANNER -> lgpC
    react.surge.util.BlastResistance JACK_O_LANTERN -> mYqS
    react.surge.util.BlastResistance MELON_BLOCK -> dhkv
    react.surge.util.BlastResistance SKULL -> gYEG
    react.surge.util.BlastResistance PUMPKIN -> TQMS
    react.surge.util.BlastResistance SIGN -> nDGI
    react.surge.util.BlastResistance SIGN_POST -> gPSe
    react.surge.util.BlastResistance WALL_SIGN -> AjxB
    react.surge.util.BlastResistance QUARTZ_BLOCK -> oFhp
    react.surge.util.BlastResistance NOTE_BLOCK -> UmbO
    react.surge.util.BlastResistance RED_SANDSTONE -> QaVQ
    react.surge.util.BlastResistance SANDSTONE -> hJdb
    react.surge.util.BlastResistance WOOL -> Dtbb
    react.surge.util.BlastResistance MONSTER_EGG -> ExFc
    react.surge.util.BlastResistance RAILS -> NiOH
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> QjGe
    react.surge.util.BlastResistance DETECTOR_RAIL -> UTPe
    react.surge.util.BlastResistance POWERED_RAIL -> oFhX
    react.surge.util.BlastResistance CLAY -> AIUR
    react.surge.util.BlastResistance DIRT -> dGJY
    react.surge.util.BlastResistance GRASS -> IQNe
    react.surge.util.BlastResistance GRAVEL -> mjvE
    react.surge.util.BlastResistance SPONGE -> dFhT
    react.surge.util.BlastResistance BREWING_STAND -> IQMI
    react.surge.util.BlastResistance STONE_BUTTON -> aFOt
    react.surge.util.BlastResistance WOOD_BUTTON -> agqp
    react.surge.util.BlastResistance CAKE_BLOCK -> pknO
    react.surge.util.BlastResistance ICE -> EgCi
    react.surge.util.BlastResistance PACKED_ICE -> toik
    react.surge.util.BlastResistance LEVER -> HDxH
    react.surge.util.BlastResistance MYCEL -> jsNF
    react.surge.util.BlastResistance PISTON_BASE -> Ljvm
    react.surge.util.BlastResistance PISTON_EXTENSION -> XfIu
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> WQeF
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> ioih
    react.surge.util.BlastResistance GOLD_PLATE -> Pnre
    react.surge.util.BlastResistance IRON_PLATE -> BLYS
    react.surge.util.BlastResistance STONE_PLATE -> uQJY
    react.surge.util.BlastResistance WOOD_PLATE -> vTLw
    react.surge.util.BlastResistance SAND -> AbhG
    react.surge.util.BlastResistance SOUL_SAND -> jakb
    react.surge.util.BlastResistance CACTUS -> BDHf
    react.surge.util.BlastResistance LADDER -> nCge
    react.surge.util.BlastResistance NETHERRACK -> qVBn
    react.surge.util.BlastResistance GLASS -> fgEM
    react.surge.util.BlastResistance THIN_GLASS -> dFjj
    react.surge.util.BlastResistance STAINED_GLASS -> TapL
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> xRFd
    react.surge.util.BlastResistance GLOWSTONE -> ExHe
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> OJQG
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> Ijaw
    react.surge.util.BlastResistance SEA_LANTERN -> kSoo
    react.surge.util.BlastResistance BED_BLOCK -> KhWt
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> SpNX
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> vdox
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> qVAq
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> sBTy
    react.surge.util.BlastResistance LEAVES -> mtHq
    react.surge.util.BlastResistance LEAVES_2 -> nDHB
    react.surge.util.BlastResistance SNOW -> PntX
    int br -> bIUR
    react.surge.util.BlastResistance[] ENUM$VALUES -> rHCk
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> XRub
    175:190:int get(org.bukkit.Material) -> Mkow
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> eXuU:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> uNaA
react.surge.util.C -> ePdj:
    react.surge.util.C BLACK -> dFjJ
    react.surge.util.C DARK_BLUE -> KqHP
    react.surge.util.C DARK_GREEN -> MKyE
    react.surge.util.C DARK_AQUA -> bjxO
    react.surge.util.C DARK_RED -> sdWm
    react.surge.util.C DARK_PURPLE -> fUak
    react.surge.util.C GOLD -> PVDP
    react.surge.util.C GRAY -> mIUC
    react.surge.util.C DARK_GRAY -> sBUS
    react.surge.util.C BLUE -> UTRO
    react.surge.util.C GREEN -> gjFo
    react.surge.util.C AQUA -> rYHV
    react.surge.util.C RED -> qDbd
    react.surge.util.C LIGHT_PURPLE -> IkDb
    react.surge.util.C YELLOW -> LsmM
    react.surge.util.C WHITE -> axxo
    react.surge.util.C MAGIC -> lxyB
    react.surge.util.C BOLD -> bIWu
    react.surge.util.C STRIKETHROUGH -> hAxW
    react.surge.util.C UNDERLINE -> ukCL
    react.surge.util.C ITALIC -> lxxg
    react.surge.util.C RESET -> dGNO
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> WbkB
    char code -> KFVh
    boolean isFormat -> xHvM
    java.lang.String toString -> SMmi
    java.util.Map BY_ID -> BfNx
    java.util.Map BY_CHAR -> KVxC
    java.util.Map dyeChatMap -> kSqm
    java.util.Map chatHexMap -> qEBo
    java.util.Map dyeHexMap -> ohnw
    int[] $SWITCH_TABLE$surge$util$C -> dWoR
    react.surge.util.C[] ENUM$VALUES -> xjxf
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> hADJ
    378:378:java.lang.String hex() -> tKuB
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> KCga
    434:442:react.surge.util.C getByChar(java.lang.String) -> HCRP
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> IFRU
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> Mkow
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> IFRU
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> rVYH
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> Smdg
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> lKwf
    560:578:java.lang.String generateColorTable() -> nRsp
    588:588:org.bukkit.ChatColor chatColor() -> Embl
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> ooRY
    632:679:byte getItemMeta() -> NMhy
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> bHBv
react.surge.util.C$1 -> ePdj$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> ePdj$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> ePdj$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> ePdj$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> ePdj$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> ePdj$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> ePdj$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> ePdj$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> ePdj$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> ePdj$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> ePdj$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> ePdj$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> ePdj$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> ePdj$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> ePdj$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> ePdj$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> ePdj$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> ePdj$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> ePdj$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> ePdj$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> ePdj$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> ePdj$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> Bcrq:
    double number -> LblR
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> flfj
    23:25:react.surge.util.CDou add(double) -> qBRp
    30:32:react.surge.util.CDou sub(double) -> CVCS
    37:37:double get() -> get
    42:48:void circ() -> YMhe
react.surge.util.CMD -> TXIK:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> gaYI
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> bYDa
    51:53:void execute(org.bukkit.command.CommandSender) -> rVYH
    60:77:void execute() -> execute
react.surge.util.CNum -> UIhv:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> lwLT
    23:25:react.surge.util.CNum add(int) -> NgDr
    30:32:react.surge.util.CNum sub(int) -> IyWh
    37:37:int get() -> get
    42:48:void circ() -> YMhe
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> xhkx
react.surge.util.Chunks -> QEmf:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> jgqh
    33:40:react.glang.GList getLoadedChunks() -> pPjX
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> IFRU
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> Mkow
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> Mkow
    98:98:boolean unload(org.bukkit.Chunk) -> oMOG
    114:124:int unload(react.glang.GList,boolean,boolean) -> Mkow
    138:138:int unload(react.glang.GList,boolean) -> Mkow
    150:150:int unload(react.glang.GList) -> UkWJ
    166:166:boolean isLoaded(java.lang.String,int,int) -> Mkow
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> rVYH
    201:205:void load(react.glang.GList) -> Pcvg
react.surge.util.Cuboid -> Hefs:
    java.lang.String worldName -> lNeO
    int x1 -> vSqJ
    int y1 -> NGNU
    int z1 -> cwOE
    int x2 -> dGMQ
    int y2 -> oGMO
    int z2 -> lgur
    int[] $SWITCH_TABLE$surge$util$Axis -> AHyf
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> bAGO
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> Mkow
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> rVYH
    93:93:boolean hasPlayers() -> LXdq
    98:110:react.glang.GList getPlayers() -> JAKH
    115:166:react.glang.GList getEntities() -> qnAM
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> bGKP
    287:287:org.bukkit.Location getLowerNE() -> oMgV
    298:298:org.bukkit.Location getUpperSW() -> cBUG
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> KnvV
    348:348:int getSizeY() -> mqwe
    358:358:int getSizeZ() -> Qxwt
    368:368:int getLowerX() -> bigl
    378:378:int getLowerY() -> wDaD
    388:388:int getLowerZ() -> bYFy
    398:398:int getUpperX() -> uWmH
    408:408:int getUpperY() -> qeRv
    418:418:int getUpperZ() -> tDIQ
    428:438:org.bukkit.block.Block[] corners() -> fmdA
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> Mkow
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> IFRU
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> rVYH
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> Nnru
    546:546:boolean contains(int,int,int) -> TNas
    558:558:boolean contains(org.bukkit.block.Block) -> KCga
    570:570:boolean contains(org.bukkit.Location) -> QDxU
    580:580:int volume() -> GslV
    591:601:byte averageLightLevel() -> jFkV
    612:612:react.surge.util.Cuboid contract() -> jypF
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> Mkow
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> IFRU
    708:715:boolean containsOnly(org.bukkit.Material) -> IFRU
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> Mkow
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> eXcP
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> Mkow
    786:800:java.util.List getChunks() -> OkCd
    815:819:void fill(int,byte) -> Mkow
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> Edtm
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> Tqac
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> lVDE
react.surge.util.Cuboid$1 -> Hefs$1:
    react.surge.util.Cuboid this$0 -> oGMS
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> ooRY
    1:1:java.lang.Object onAdapt(java.lang.Object) -> uNaA
react.surge.util.Cuboid$CuboidDirection -> Hefs$Mkow:
    react.surge.util.Cuboid$CuboidDirection North -> GBYj
    react.surge.util.Cuboid$CuboidDirection East -> kusl
    react.surge.util.Cuboid$CuboidDirection South -> Xvnh
    react.surge.util.Cuboid$CuboidDirection West -> gHGB
    react.surge.util.Cuboid$CuboidDirection Up -> LIYQ
    react.surge.util.Cuboid$CuboidDirection Down -> pJOX
    react.surge.util.Cuboid$CuboidDirection Horizontal -> YaAJ
    react.surge.util.Cuboid$CuboidDirection Vertical -> dyqR
    react.surge.util.Cuboid$CuboidDirection Both -> DSCp
    react.surge.util.Cuboid$CuboidDirection Unknown -> XTlD
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> bAGO
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> rjHX
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> QNfE
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> lVDE
react.surge.util.Cuboid$CuboidIterator -> Hefs$IFRU:
    org.bukkit.World w -> bAFw
    int baseX -> DBCF
    int baseY -> ipNv
    int baseZ -> WRJF
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> oPAU
    int sizeY -> YPBM
    int sizeZ -> pSDY
    react.surge.util.Cuboid this$0 -> oGMS
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> QVnw:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> qSkE:
    react.glang.GList buffer -> iNOg
    boolean dbg -> thBI
    int kf -> lqLC
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> Nnru
    41:49:void l(java.lang.Object,java.lang.String) -> IFRU
    53:54:void s(java.lang.Object,java.lang.String) -> rVYH
    58:69:void cdb() -> WOuo
    73:79:void v(java.lang.Object,java.lang.String) -> Nnru
    83:84:void w(java.lang.Object,java.lang.String) -> TNas
    88:89:void f(java.lang.Object,java.lang.String) -> eXcP
    93:106:void l(java.lang.String) -> LqaU
    110:117:void s(java.lang.String) -> MksN
    121:135:void v(java.lang.String) -> gomS
    139:146:void w(java.lang.String) -> hrot
    150:157:void f(java.lang.String) -> Ipfb
react.surge.util.DMSRequire -> GABP:
    react.surge.util.DMSRequirement value() -> DkCx
react.surge.util.DMSRequirement -> AjDO:
    react.surge.util.DMSRequirement SQL -> JKfQ
    react.surge.util.DMSRequirement[] ENUM$VALUES -> ihBa
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> erja:
    react.surge.util.Depend VAULT -> xAIX
    react.surge.util.Depend FAWE -> sllx
    react.surge.util.Depend WORLDEDIT -> qwiG
    react.surge.util.Depend PROTOLIB -> cUNv
    react.surge.util.Depend CITIZENS -> QimF
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> uIAN
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> wMKp:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> CoqA
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> RIRD:
    react.surge.util.DimensionFace X -> TYcx
    react.surge.util.DimensionFace Y -> thAU
    react.surge.util.DimensionFace Z -> WIYr
    react.surge.util.DimensionFace[] ENUM$VALUES -> qDca
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> HUGG:
    react.surge.util.Direction U -> hAxt
    react.surge.util.Direction D -> qDcb
    react.surge.util.Direction N -> HorP
    react.surge.util.Direction S -> fMTs
    react.surge.util.Direction E -> pJRW
    react.surge.util.Direction W -> HpST
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> PMWC
    int[] $SWITCH_TABLE$surge$util$Direction -> UCSp
    react.surge.util.Direction[] ENUM$VALUES -> bHwq
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> Cxai
    61:61:int x() -> qCOf
    66:66:int y() -> cKIQ
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> gqGl
    81:81:react.glang.GList news() -> qTPd
    86:86:react.glang.GList udnews() -> Daou
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> lLTu
    115:147:react.surge.util.Direction fromByte(byte) -> QDxU
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> XRxJ
react.surge.util.DynamicConfiguration -> XKDK:
react.surge.util.DynamicTracker -> nKAk:
react.surge.util.Embedded -> CVWM:
    react.glang.GList get() -> cmJh
    void add(java.lang.Object) -> add
react.surge.util.FU -> xOmV:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> Mkow
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> IFRU
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> TNas
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> eXcP
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> WrSk:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> lwLT
react.surge.util.Health -> OsMh:
    double hp -> XoAN
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> LPUu
    41:41:double getHearts() -> wUab
    51:51:double getHalfHearts() -> xHCp
    61:61:int getFlatHalfHearts() -> oUyq
react.surge.util.IO -> OGxY:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> ArTD:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> Mkow
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> Mkow
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> Mkow
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> Mkow
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> Mkow
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> IFRU
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> rVYH
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> Nnru
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> Mkow
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> Mkow
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> Mkow
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> Mkow
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> TNas
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> eXcP
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> uNaA
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> KCga
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> ooRY
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> Mkow
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> QDxU
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> vtFt
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> Mkow
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> Mkow
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> IFRU
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> Mkow
react.surge.util.MSound -> fuln:
    react.surge.util.MSound AMBIENCE_CAVE -> diSK
    react.surge.util.MSound AMBIENCE_RAIN -> bIYp
    react.surge.util.MSound AMBIENCE_THUNDER -> vKbO
    react.surge.util.MSound ANVIL_BREAK -> YWqF
    react.surge.util.MSound ANVIL_LAND -> vBpn
    react.surge.util.MSound ANVIL_USE -> apim
    react.surge.util.MSound ARROW_HIT -> PxNL
    react.surge.util.MSound BURP -> YiVP
    react.surge.util.MSound CHEST_CLOSE -> DkyT
    react.surge.util.MSound CHEST_OPEN -> YqfW
    react.surge.util.MSound CLICK -> Ocgs
    react.surge.util.MSound DOOR_CLOSE -> YiUr
    react.surge.util.MSound DOOR_OPEN -> ginC
    react.surge.util.MSound DRINK -> BMBM
    react.surge.util.MSound EAT -> RmRf
    react.surge.util.MSound EXPLODE -> HyGa
    react.surge.util.MSound FALL_BIG -> WspY
    react.surge.util.MSound FALL_SMALL -> Berb
    react.surge.util.MSound FIRE -> oiUU
    react.surge.util.MSound FIRE_IGNITE -> RKOl
    react.surge.util.MSound FIZZ -> PLyQ
    react.surge.util.MSound FUSE -> ceqn
    react.surge.util.MSound GLASS -> uHar
    react.surge.util.MSound HURT_FLESH -> FYOQ
    react.surge.util.MSound ITEM_BREAK -> mRMM
    react.surge.util.MSound ITEM_PICKUP -> Jdyy
    react.surge.util.MSound LAVA -> eRen
    react.surge.util.MSound LAVA_POP -> oGRC
    react.surge.util.MSound LEVEL_UP -> gYMF
    react.surge.util.MSound MINECART_BASE -> xcNH
    react.surge.util.MSound MINECART_INSIDE -> QioP
    react.surge.util.MSound NOTE_BASS -> mbln
    react.surge.util.MSound NOTE_PIANO -> yDMa
    react.surge.util.MSound NOTE_BASS_DRUM -> daCk
    react.surge.util.MSound NOTE_STICKS -> fMVr
    react.surge.util.MSound NOTE_BASS_GUITAR -> rHJL
    react.surge.util.MSound NOTE_SNARE_DRUM -> xQkK
    react.surge.util.MSound NOTE_PLING -> Vpkx
    react.surge.util.MSound ORB_PICKUP -> ReAW
    react.surge.util.MSound PISTON_EXTEND -> dqeV
    react.surge.util.MSound PISTON_RETRACT -> ujdV
    react.surge.util.MSound PORTAL -> QXkx
    react.surge.util.MSound PORTAL_TRAVEL -> QHKj
    react.surge.util.MSound PORTAL_TRIGGER -> hloO
    react.surge.util.MSound SHOOT_ARROW -> RlqH
    react.surge.util.MSound SPLASH -> YGRb
    react.surge.util.MSound SPLASH2 -> CFru
    react.surge.util.MSound STEP_GRASS -> XDOS
    react.surge.util.MSound STEP_GRAVEL -> YWrf
    react.surge.util.MSound STEP_LADDER -> Ocgl
    react.surge.util.MSound STEP_SAND -> GlrJ
    react.surge.util.MSound STEP_SNOW -> BCrP
    react.surge.util.MSound STEP_STONE -> PVMM
    react.surge.util.MSound STEP_WOOD -> qxNW
    react.surge.util.MSound STEP_WOOL -> MLcS
    react.surge.util.MSound SWIM -> Iaxo
    react.surge.util.MSound WATER -> GeDv
    react.surge.util.MSound WOOD_CLICK -> YaHX
    react.surge.util.MSound BAT_DEATH -> Lbqm
    react.surge.util.MSound BAT_HURT -> gXnD
    react.surge.util.MSound BAT_IDLE -> knKm
    react.surge.util.MSound BAT_LOOP -> jIFP
    react.surge.util.MSound BAT_TAKEOFF -> euKo
    react.surge.util.MSound BLAZE_BREATH -> EUlx
    react.surge.util.MSound BLAZE_DEATH -> yfSK
    react.surge.util.MSound BLAZE_HIT -> ihDv
    react.surge.util.MSound CAT_HISS -> rGjj
    react.surge.util.MSound CAT_HIT -> CFvP
    react.surge.util.MSound CAT_MEOW -> Wsqa
    react.surge.util.MSound CAT_PURR -> iyFj
    react.surge.util.MSound CAT_PURREOW -> rYMY
    react.surge.util.MSound CHICKEN_IDLE -> HpWT
    react.surge.util.MSound CHICKEN_HURT -> etib
    react.surge.util.MSound CHICKEN_EGG_POP -> jauw
    react.surge.util.MSound CHICKEN_WALK -> BCsG
    react.surge.util.MSound COW_IDLE -> GmSx
    react.surge.util.MSound COW_HURT -> cCns
    react.surge.util.MSound COW_WALK -> MMBq
    react.surge.util.MSound CREEPER_HISS -> wOKO
    react.surge.util.MSound CREEPER_DEATH -> NiWg
    react.surge.util.MSound ENDERDRAGON_DEATH -> XDPk
    react.surge.util.MSound ENDERDRAGON_GROWL -> hmRM
    react.surge.util.MSound ENDERDRAGON_HIT -> QjQN
    react.surge.util.MSound ENDERDRAGON_WINGS -> BwWm
    react.surge.util.MSound ENDERMAN_DEATH -> uPsX
    react.surge.util.MSound ENDERMAN_HIT -> XCpd
    react.surge.util.MSound ENDERMAN_IDLE -> XMBl
    react.surge.util.MSound ENDERMAN_TELEPORT -> AQpf
    react.surge.util.MSound ENDERMAN_SCREAM -> NaHS
    react.surge.util.MSound ENDERMAN_STARE -> TaxD
    react.surge.util.MSound GHAST_SCREAM -> keYl
    react.surge.util.MSound GHAST_SCREAM2 -> KqSN
    react.surge.util.MSound GHAST_CHARGE -> XUVG
    react.surge.util.MSound GHAST_DEATH -> igga
    react.surge.util.MSound GHAST_FIREBALL -> ipXl
    react.surge.util.MSound GHAST_MOAN -> iyJW
    react.surge.util.MSound IRONGOLEM_DEATH -> gQAS
    react.surge.util.MSound IRONGOLEM_HIT -> LAQj
    react.surge.util.MSound IRONGOLEM_THROW -> ExRr
    react.surge.util.MSound IRONGOLEM_WALK -> KWaF
    react.surge.util.MSound MAGMACUBE_WALK -> Xevf
    react.surge.util.MSound MAGMACUBE_WALK2 -> jIHN
    react.surge.util.MSound MAGMACUBE_JUMP -> vLJW
    react.surge.util.MSound PIG_IDLE -> EUoV
    react.surge.util.MSound PIG_DEATH -> FsEq
    react.surge.util.MSound PIG_WALK -> oGUe
    react.surge.util.MSound SHEEP_IDLE -> rjRH
    react.surge.util.MSound SHEEP_SHEAR -> BevT
    react.surge.util.MSound SHEEP_WALK -> appP
    react.surge.util.MSound SILVERFISH_HIT -> Pwom
    react.surge.util.MSound SILVERFISH_KILL -> jrye
    react.surge.util.MSound SILVERFISH_IDLE -> GBbK
    react.surge.util.MSound SILVERFISH_WALK -> BTux
    react.surge.util.MSound SKELETON_IDLE -> BDUh
    react.surge.util.MSound SKELETON_DEATH -> Hxig
    react.surge.util.MSound SKELETON_HURT -> bbpr
    react.surge.util.MSound SKELETON_WALK -> MvwW
    react.surge.util.MSound SLIME_ATTACK -> wqOm
    react.surge.util.MSound SLIME_WALK -> hlrn
    react.surge.util.MSound SLIME_WALK2 -> UnOO
    react.surge.util.MSound SPIDER_IDLE -> RKSQ
    react.surge.util.MSound SPIDER_DEATH -> XoGm
    react.surge.util.MSound SPIDER_WALK -> QbCB
    react.surge.util.MSound WITHER_DEATH -> oPEh
    react.surge.util.MSound WITHER_HURT -> ukIa
    react.surge.util.MSound WITHER_IDLE -> Ewpv
    react.surge.util.MSound WITHER_SHOOT -> gHOC
    react.surge.util.MSound WITHER_SPAWN -> ihGU
    react.surge.util.MSound WOLF_BARK -> DcmL
    react.surge.util.MSound WOLF_DEATH -> Yqie
    react.surge.util.MSound WOLF_GROWL -> RKVC
    react.surge.util.MSound WOLF_HOWL -> aGAG
    react.surge.util.MSound WOLF_HURT -> QYSl
    react.surge.util.MSound WOLF_PANT -> PfrJ
    react.surge.util.MSound WOLF_SHAKE -> vmoS
    react.surge.util.MSound WOLF_WALK -> JKmy
    react.surge.util.MSound WOLF_WHINE -> kKmK
    react.surge.util.MSound ZOMBIE_METAL -> OAkm
    react.surge.util.MSound ZOMBIE_WOOD -> gacJ
    react.surge.util.MSound ZOMBIE_WOODBREAK -> xJBV
    react.surge.util.MSound ZOMBIE_IDLE -> SVhx
    react.surge.util.MSound ZOMBIE_DEATH -> pSLW
    react.surge.util.MSound ZOMBIE_HURT -> PVQd
    react.surge.util.MSound ZOMBIE_INFECT -> iEfY
    react.surge.util.MSound ZOMBIE_UNFECT -> RmXD
    react.surge.util.MSound ZOMBIE_REMEDY -> bcUC
    react.surge.util.MSound ZOMBIE_WALK -> gXqT
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> aqRk
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> kwAI
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> YPJA
    react.surge.util.MSound ZOMBIE_PIG_HURT -> JvaY
    react.surge.util.MSound DIG_WOOL -> CrMh
    react.surge.util.MSound DIG_GRASS -> rbCR
    react.surge.util.MSound DIG_GRAVEL -> yTsl
    react.surge.util.MSound DIG_SAND -> KhcY
    react.surge.util.MSound DIG_SNOW -> seDv
    react.surge.util.MSound DIG_STONE -> FsGM
    react.surge.util.MSound DIG_WOOD -> KXBf
    react.surge.util.MSound FIREWORK_BLAST -> XexF
    react.surge.util.MSound FIREWORK_BLAST2 -> tEcx
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> tFEY
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> xbqt
    react.surge.util.MSound FIREWORK_TWINKLE -> aXAd
    react.surge.util.MSound FIREWORK_TWINKLE2 -> BCuw
    react.surge.util.MSound FIREWORK_LAUNCH -> Vycu
    react.surge.util.MSound SUCCESSFUL_HIT -> SVkO
    react.surge.util.MSound HORSE_ANGRY -> PNCI
    react.surge.util.MSound HORSE_ARMOR -> ukOM
    react.surge.util.MSound HORSE_BREATHE -> nUXa
    react.surge.util.MSound HORSE_DEATH -> BCwq
    react.surge.util.MSound HORSE_GALLOP -> AcYN
    react.surge.util.MSound HORSE_HIT -> iEiF
    react.surge.util.MSound HORSE_IDLE -> EpGF
    react.surge.util.MSound HORSE_JUMP -> eAkq
    react.surge.util.MSound HORSE_LAND -> DlcH
    react.surge.util.MSound HORSE_SADDLE -> ARWY
    react.surge.util.MSound HORSE_SOFT -> wFaJ
    react.surge.util.MSound HORSE_WOOD -> jkNn
    react.surge.util.MSound DONKEY_ANGRY -> TjpO
    react.surge.util.MSound DONKEY_DEATH -> iWJa
    react.surge.util.MSound DONKEY_HIT -> EVTW
    react.surge.util.MSound DONKEY_IDLE -> IIOF
    react.surge.util.MSound HORSE_SKELETON_DEATH -> yfYL
    react.surge.util.MSound HORSE_SKELETON_HIT -> IjqL
    react.surge.util.MSound HORSE_SKELETON_IDLE -> Wbwb
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> XTxI
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> IILq
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> kKnF
    react.surge.util.MSound VILLAGER_DEATH -> sSea
    react.surge.util.MSound VILLAGER_HAGGLE -> PUqX
    react.surge.util.MSound VILLAGER_HIT -> huhu
    react.surge.util.MSound VILLAGER_IDLE -> fDnT
    react.surge.util.MSound VILLAGER_NO -> EVRm
    react.surge.util.MSound VILLAGER_YES -> ujmP
    java.lang.String pre19sound -> vnQR
    java.lang.String post19sound -> LJEs
    org.bukkit.Sound resolvedSound -> mASA
    react.surge.util.MSound[] ENUM$VALUES -> IYnQ
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> AXhY
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> eHWA:
    org.bukkit.Material material -> ItAm
    java.lang.Byte data -> puOl
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> dMjW
    79:80:void setData(java.lang.Byte) -> Mkow
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> dofg:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> NgDr
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> aUcF
    68:68:boolean isAnyOnline() -> XKHj
    80:80:react.glang.GList inWorld(org.bukkit.World) -> EJfM
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> jgqh
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> Mkow
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> Mkow
    143:144:void disable(org.bukkit.entity.Player) -> hbLY
    154:155:void enable(org.bukkit.entity.Player) -> paRd
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> Mkow
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> IFRU
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> NUaW
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> Mkow
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> flfj
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> rVYH
    300:300:boolean canFindPlayer(java.lang.String) -> IyWh
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> xhkx
    338:345:react.glang.GList onlinePlayers() -> bOtY
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> qBRp
    368:371:void clear(org.bukkit.entity.Player) -> CVCS
    381:385:void clearEffects(org.bukkit.entity.Player) -> uhQg
    398:399:void heal(org.bukkit.entity.Player,double) -> Mkow
    409:410:void heal(org.bukkit.entity.Player) -> HTSM
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> fdYe
    432:433:void resetHunger(org.bukkit.entity.Player) -> upfI
    443:444:void kill(org.bukkit.entity.Player) -> YwfJ
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> nInK
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> Nfdt
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> Mkow
react.surge.util.P$1 -> dofg$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> ooRY
    1:1:java.lang.Object onAdapt(java.lang.Object) -> uNaA
react.surge.util.P$2 -> dofg$2:
    java.lang.Double val$doff -> LQuk
    org.bukkit.entity.Player val$e -> sCEB
    org.bukkit.entity.Entity[] val$result -> mQry
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> vtFt
react.surge.util.PE -> FySF:
    react.surge.util.PE ABSORPTION -> UvcU
    react.surge.util.PE BLINDNESS -> LlIh
    react.surge.util.PE CONFUSION -> SEhs
    react.surge.util.PE DAMAGE_RESISTANCE -> MLiE
    react.surge.util.PE FAST_DIGGING -> emDJ
    react.surge.util.PE FIRE_RESISTANCE -> FbJS
    react.surge.util.PE GLOWING -> OmEG
    react.surge.util.PE HARM -> jtBo
    react.surge.util.PE HEAL -> bRXL
    react.surge.util.PE HEALTH_BOOST -> kTap
    react.surge.util.PE HUNGER -> HqBG
    react.surge.util.PE INCREASE_DAMAGE -> lWeV
    react.surge.util.PE INVISIBILITY -> Rulq
    react.surge.util.PE JUMP -> daOn
    react.surge.util.PE LEVITATION -> Tbad
    react.surge.util.PE LUCK -> gsIe
    react.surge.util.PE NIGHT_VISION -> fDqg
    react.surge.util.PE POISON -> edSE
    react.surge.util.PE REGENERATION -> sBej
    react.surge.util.PE SATURATION -> EEST
    react.surge.util.PE SLOW -> aygW
    react.surge.util.PE SLOW_DIGGING -> ShNY
    react.surge.util.PE SPEED -> wXEB
    react.surge.util.PE UNLUCK -> rPde
    react.surge.util.PE WATER_BREATHING -> svLF
    react.surge.util.PE WEAKNESS -> QXvY
    react.surge.util.PE WITHER -> Lbxk
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> Mkow
    144:144:react.surge.util.PE d(int) -> JRGd
    156:156:react.surge.util.PE a(int) -> BktB
    166:166:org.bukkit.potion.PotionEffect c() -> PuwX
    177:178:void c(org.bukkit.entity.LivingEntity) -> eXcP
    182:183:void crm(org.bukkit.entity.LivingEntity) -> uNaA
    187:188:void rm(org.bukkit.entity.LivingEntity) -> KCga
react.surge.util.ParticleEffect -> VnnW:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> sCGQ
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> qUrI
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> nnkN
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> ARYt
    react.surge.util.ParticleEffect WATER_BUBBLE -> lGBh
    react.surge.util.ParticleEffect WATER_SPLASH -> coLy
    react.surge.util.ParticleEffect WATER_WAKE -> BLlH
    react.surge.util.ParticleEffect SUSPENDED -> JKrJ
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> fpEh
    react.surge.util.ParticleEffect CRIT -> aWeA
    react.surge.util.ParticleEffect CRIT_MAGIC -> Qrkp
    react.surge.util.ParticleEffect SMOKE_NORMAL -> OtvU
    react.surge.util.ParticleEffect SMOKE_LARGE -> PwyY
    react.surge.util.ParticleEffect SPELL -> tFLq
    react.surge.util.ParticleEffect SPELL_INSTANT -> EVXI
    react.surge.util.ParticleEffect SPELL_MOB -> dOnm
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> TYrP
    react.surge.util.ParticleEffect SPELL_WITCH -> eSSN
    react.surge.util.ParticleEffect DRIP_WATER -> iElh
    react.surge.util.ParticleEffect DRIP_LAVA -> mklH
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> TRBo
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> thOv
    react.surge.util.ParticleEffect TOWN_AURA -> rsKe
    react.surge.util.ParticleEffect NOTE -> bkmB
    react.surge.util.ParticleEffect PORTAL -> EpJo
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> CrTx
    react.surge.util.ParticleEffect FLAME -> KiLC
    react.surge.util.ParticleEffect LAVA -> HqDP
    react.surge.util.ParticleEffect FOOTSTEP -> xbyO
    react.surge.util.ParticleEffect CLOUD -> daRL
    react.surge.util.ParticleEffect REDSTONE -> RvPh
    react.surge.util.ParticleEffect SNOWBALL -> UCcp
    react.surge.util.ParticleEffect SNOW_SHOVEL -> VGHK
    react.surge.util.ParticleEffect SLIME -> grkL
    react.surge.util.ParticleEffect HEART -> kvfj
    react.surge.util.ParticleEffect BARRIER -> eldK
    react.surge.util.ParticleEffect ITEM_CRACK -> xkio
    react.surge.util.ParticleEffect BLOCK_CRACK -> fDsB
    react.surge.util.ParticleEffect BLOCK_DUST -> OApe
    react.surge.util.ParticleEffect WATER_DROP -> aGFH
    react.surge.util.ParticleEffect ITEM_TAKE -> lqXm
    react.surge.util.ParticleEffect MOB_APPEARANCE -> DmFi
    react.surge.util.ParticleEffect DRAGON_BREATH -> wiGo
    react.surge.util.ParticleEffect END_ROD -> xbxd
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> jjpt
    react.surge.util.ParticleEffect SWEEP_ATTACK -> gsKE
    java.util.Map NAME_MAP -> UDDT
    java.util.Map ID_MAP -> dqpy
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> PNFd
    java.util.List properties -> fwwR
    react.surge.util.ParticleEffect[] ENUM$VALUES -> gXvq
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> hbkB
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> Mkow
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> bGKP
    557:565:react.surge.util.ParticleEffect fromId(int) -> PBVq
    577:578:boolean isWater(org.bukkit.Location) -> VLWv
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> Mkow
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> Mkow
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> Mkow
    665:681:void display(float,int,org.bukkit.Location,double) -> Mkow
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> Mkow
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> Mkow
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> Mkow
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> Mkow
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> Mkow
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> Mkow
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> Mkow
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> Mkow
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> Mkow
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> Mkow
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> Mkow
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> Mkow
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> Mkow
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> Mkow
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> VnnW$Mkow:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> VnnW$IFRU:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> VnnW$rVYH:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> pPpE
    1594:1594:float getValueY() -> Nopu
    1605:1605:float getValueZ() -> aoXS
react.surge.util.ParticleEffect$OrdinaryColor -> VnnW$Nnru:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> pPpE
    1526:1526:float getValueY() -> Nopu
    1537:1537:float getValueZ() -> aoXS
react.surge.util.ParticleEffect$ParticleColor -> VnnW$TNas:
    1383:1383:void <init>() -> <init>
    float getValueX() -> pPpE
    float getValueY() -> Nopu
    float getValueZ() -> aoXS
react.surge.util.ParticleEffect$ParticleColorException -> VnnW$eXcP:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> VnnW$uNaA:
    org.bukkit.Material material -> ItAm
    byte data -> pAoM
    int[] packetData -> qxWY
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> hslU
    1309:1309:java.lang.String getPacketDataString() -> OsTy
react.surge.util.ParticleEffect$ParticleDataException -> VnnW$KCga:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> VnnW$ooRY:
    int version -> version
    java.lang.Class enumParticle -> ULTU
    java.lang.reflect.Constructor packetConstructor -> EUwF
    java.lang.reflect.Method getHandle -> hBkb
    java.lang.reflect.Field playerConnection -> CjFa
    java.lang.reflect.Method sendPacket -> orUI
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> vLUR
    float offsetX -> cxBs
    float offsetY -> ipbv
    float offsetZ -> qMfi
    float speed -> IbfY
    int amount -> SMJm
    boolean longDistance -> Tbej
    react.surge.util.ParticleEffect$ParticleData data -> hvQJ
    java.lang.Object packet -> XxEC
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> Oifg
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> Mkow
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> IFRU
    2004:2018:void sendTo(org.bukkit.Location,double) -> IFRU
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> VnnW$ooRY$Mkow:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> VnnW$ooRY$IFRU:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> VnnW$ooRY$rVYH:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> VnnW$QDxU:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> CHBb
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> ojCs
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> cMMi
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> THqk
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> oqsO
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> VnnW$vtFt:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> uGDn:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> JRGd
react.surge.util.Persist -> CNGp:
react.surge.util.Platform -> uOUU:
    boolean ENABLE -> YaRq
    double PROC_CPU -> HNaI
    11:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    253:258:java.lang.String getVersion() -> getVersion
    263:268:java.lang.String getName() -> getName
    273:273:com.sun.management.OperatingSystemMXBean getSystem() -> QOGt
    271:271:com.sun.management.OperatingSystemMXBean access$0() -> HUOQ
react.surge.util.Platform$CPU -> uOUU$Mkow:
    198:198:void <init>() -> <init>
    202:207:int getAvailableProcessors() -> getAvailableProcessors
    212:217:double getCPULoad() -> YNNq
    222:227:double getProcessCPULoad() -> CxdB
    232:237:double getLiveProcessCPULoad() -> SClQ
    242:247:java.lang.String getArchitecture() -> GHyj
react.surge.util.Platform$ENVIRONMENT -> uOUU$IFRU:
    14:14:void <init>() -> <init>
    18:18:boolean canRunBatch() -> nJiT
    23:28:java.lang.String getJavaHome() -> fBqm
    33:38:java.lang.String getJavaVendor() -> ghXa
    43:48:java.lang.String getJavaVersion() -> STnI
react.surge.util.Platform$MEMORY -> uOUU$rVYH:
    119:119:void <init>() -> <init>
react.surge.util.Platform$MEMORY$PHYSICAL -> uOUU$rVYH$Mkow:
    121:121:void <init>() -> <init>
    125:130:long getTotalMemory() -> vtdR
    135:140:long getFreeMemory() -> YgaJ
    145:150:long getUsedMemory() -> TWqG
react.surge.util.Platform$MEMORY$VIRTUAL -> uOUU$rVYH$IFRU:
    154:154:void <init>() -> <init>
    158:163:long getTotalMemory() -> vtdR
    168:173:long getFreeMemory() -> YgaJ
    178:183:long getUsedMemory() -> TWqG
    188:193:long getCommittedVirtualMemory() -> GQib
react.surge.util.Platform$STORAGE -> uOUU$Nnru:
    52:52:void <init>() -> <init>
    56:63:long getAbsoluteTotalSpace() -> dooQ
    68:68:long getTotalSpace() -> getTotalSpace
    73:73:long getTotalSpace(java.io.File) -> uNaA
    78:85:long getAbsoluteFreeSpace() -> OQPu
    90:90:long getFreeSpace() -> getFreeSpace
    95:95:long getFreeSpace(java.io.File) -> KCga
    100:100:long getUsedSpace() -> wEBd
    105:105:long getUsedSpace(java.io.File) -> ooRY
    110:110:long getAbsoluteUsedSpace() -> qSrL
    115:115:java.io.File[] getRoots() -> getRoots
react.surge.util.PluginUtil -> NpIP:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> TNas
    78:88:void enable(java.lang.String) -> BktB
    95:99:void enableAll() -> EvWr
    109:113:void disable(org.bukkit.plugin.Plugin) -> eXcP
    120:124:void disableAll() -> ymKn
    135:135:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> uNaA
    149:156:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> Mkow
    168:173:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> PBVq
    183:186:java.util.List getPluginNames(boolean) -> oMOG
    198:201:java.lang.String getPluginVersion(java.lang.String) -> TyVq
    214:236:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> KCga
    251:330:java.util.List findByCommand(java.lang.String) -> turM
    351:352:void load(org.bukkit.plugin.Plugin) -> ooRY
    356:378:java.lang.String getPluginFileName(java.lang.String) -> xynB
    383:405:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> Mkow
    418:470:void load(java.lang.String) -> load
    482:487:void reload(org.bukkit.plugin.Plugin) -> QDxU
    494:498:void reloadAll() -> GtNS
    510:636:void unload(org.bukkit.plugin.Plugin) -> vtFt
react.surge.util.PoolCount -> OrkP:
react.surge.util.PoolDescriber -> Mttx:
react.surge.util.PoolNanoThrottle -> CNGk:
react.surge.util.PositionalSelector -> SnVq:
    react.glang.GSet allowedChunks -> GePd
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> SwPa
    39:40:void addChunk(org.bukkit.Chunk) -> EJfM
    44:44:react.glang.GSet getAllowedChunks() -> GtNW
react.surge.util.Protocol -> QqAx:
    react.surge.util.Protocol LATEST -> PEWR
    react.surge.util.Protocol R1_12_2 -> wiIX
    react.surge.util.Protocol R1_12_2_PRE -> mkkr
    react.surge.util.Protocol R1_12_1 -> gaix
    react.surge.util.Protocol R1_12 -> OlhG
    react.surge.util.Protocol R1_11_2 -> ukTM
    react.surge.util.Protocol R1_11_1 -> WknL
    react.surge.util.Protocol R1_11 -> YidK
    react.surge.util.Protocol R1_10_2 -> MoRk
    react.surge.util.Protocol R1_10_1 -> ASAM
    react.surge.util.Protocol R1_10 -> DAvQ
    react.surge.util.Protocol R1_9_4 -> smbE
    react.surge.util.Protocol R1_9_3 -> qNJJ
    react.surge.util.Protocol R1_9_2 -> nxEU
    react.surge.util.Protocol R1_9_1 -> RmcU
    react.surge.util.Protocol R1_9 -> Hguh
    react.surge.util.Protocol R1_8_9 -> edYU
    react.surge.util.Protocol R1_8_8 -> Qrpm
    react.surge.util.Protocol R1_8_7 -> jtIH
    react.surge.util.Protocol R1_8_6 -> OAva
    react.surge.util.Protocol R1_8_5 -> wNxn
    react.surge.util.Protocol R1_8_4 -> KWlx
    react.surge.util.Protocol R1_8_3 -> SODb
    react.surge.util.Protocol R1_8_2 -> SyUu
    react.surge.util.Protocol R1_8_1 -> cMPU
    react.surge.util.Protocol R1_8 -> UwLT
    react.surge.util.Protocol R1_7_10 -> XxEP
    react.surge.util.Protocol R1_7_9 -> OSVx
    react.surge.util.Protocol R1_7_8 -> qNHb
    react.surge.util.Protocol R1_7_7 -> oOqk
    react.surge.util.Protocol R1_7_6 -> keiJ
    react.surge.util.Protocol R1_7_5 -> vUHC
    react.surge.util.Protocol R1_7_4 -> GvTU
    react.surge.util.Protocol R1_7_3 -> TcGi
    react.surge.util.Protocol R1_7_2 -> aWkO
    react.surge.util.Protocol R1_7_1 -> KGKj
    react.surge.util.Protocol B1_6_4 -> ngAs
    react.surge.util.Protocol B1_6_3 -> SWSm
    react.surge.util.Protocol B1_6_2 -> Nifi
    react.surge.util.Protocol B1_6_1 -> jcFW
    react.surge.util.Protocol B1_5_2 -> Qrqw
    react.surge.util.Protocol B1_5_1 -> uHuV
    react.surge.util.Protocol B1_5 -> PNMU
    react.surge.util.Protocol B1_4_7 -> noUi
    react.surge.util.Protocol B1_4_6 -> pRwq
    react.surge.util.Protocol B1_4_5 -> svTp
    react.surge.util.Protocol B1_4_4 -> jIVo
    react.surge.util.Protocol B1_4_2 -> iNcy
    react.surge.util.Protocol B1_3_2 -> aWmX
    react.surge.util.Protocol B1_3_1 -> NjIu
    react.surge.util.Protocol B1_2_5 -> noUr
    react.surge.util.Protocol B1_2_4 -> dqxe
    react.surge.util.Protocol EARLIEST -> GmfT
    react.surge.util.Protocol UNKNOWN -> Faql
    int version -> version
    java.lang.String packageVersion -> neID
    java.lang.String versionName -> hCQA
    boolean netty -> vvkv
    react.surge.util.Protocol[] ENUM$VALUES -> pBVr
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> gEsp
    118:118:java.lang.String getPackageVersion() -> UbmO
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> XlmO
    142:150:react.surge.util.Protocol getProtocolVersion() -> kIrd
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> IFRU
    160:160:boolean isServerVersion() -> rEux
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> OjfQ
    175:175:boolean isActualVersion() -> QEwi
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> bHIh
    200:200:int getMetaVersion() -> dMnk
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> hINp:
    react.surge.util.Protocol from -> TcJu
    react.surge.util.Protocol to -> sCOT
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> IaDt
    21:21:react.surge.util.Protocol getTo() -> PCVQ
    26:26:boolean contains(react.surge.util.Protocol) -> rVYH
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> FhQd:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> PSwB
    70:70:int randomNextInt() -> xGhT
    80:80:long randomNextLong() -> Hvrs
    92:92:boolean isWithin(double) -> uhQg
    104:104:boolean isWithin(int) -> TyVq
    116:116:boolean isWithin(long) -> yIic
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> HTSM
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> oMOG
react.surge.util.RawEvent -> erjV:
react.surge.util.RayTrace -> HLTf:
    org.bukkit.Location start -> jIVH
    org.bukkit.util.Vector direction -> bkqT
    java.lang.Double maxDistance -> iqFp
    java.lang.Double distanceCovered -> YPVI
    java.lang.Double step -> wXMK
    java.lang.Boolean stop -> FkBf
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> xOxF
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> vtFt
    89:89:org.bukkit.Location getStart() -> sQjS
    94:95:void setStart(org.bukkit.Location) -> FpMD
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> vlUc
    114:115:void setMaxDistance(java.lang.Double) -> Nnru
    119:119:java.lang.Double getDistanceCovered() -> IqfT
    124:125:void setDistanceCovered(java.lang.Double) -> TNas
    129:129:java.lang.Double getStep() -> Tyum
    134:135:void setStep(java.lang.Double) -> eXcP
react.surge.util.ReflectionUtils -> fdke:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> Mkow
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> Mkow
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> Mkow
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> Mkow
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> Mkow
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> Mkow
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> Mkow
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> Mkow
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> Mkow
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> Mkow
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> Mkow
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> Mkow
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> Mkow
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> Mkow
react.surge.util.ReflectionUtils$DataType -> fdke$Mkow:
    react.surge.util.ReflectionUtils$DataType BYTE -> eSWo
    react.surge.util.ReflectionUtils$DataType SHORT -> dXdt
    react.surge.util.ReflectionUtils$DataType INTEGER -> smcG
    react.surge.util.ReflectionUtils$DataType LONG -> HyXv
    react.surge.util.ReflectionUtils$DataType CHARACTER -> ojGf
    react.surge.util.ReflectionUtils$DataType FLOAT -> MECU
    react.surge.util.ReflectionUtils$DataType DOUBLE -> BLsy
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> thTf
    java.util.Map CLASS_MAP -> nfcN
    java.lang.Class primitive -> iVsF
    java.lang.Class reference -> YihP
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> UKyW
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> OauS
    704:704:java.lang.Class getReference() -> teoL
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> IFRU
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> rVYH
    741:742:java.lang.Class getReference(java.lang.Class) -> Nnru
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> Mkow
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> IFRU
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> IFRU
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> rVYH
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> Mkow
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> fdke$IFRU:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> LIoi
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> AcdH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> yMPb
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> pAwv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> GSuK
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> OJkP
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> yVEe
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> bJRU
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> Acdy
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> Ltfm
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> XxIk
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> cMTo
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> LuHH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> NjKy
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> XVFn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> UfOv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> YHIR
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> MUft
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> iFTy
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> MxJq
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> kDJy
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> GcDa:
    void refresh() -> refresh
react.surge.util.SQLOperation -> feLc:
    react.surge.util.SQLOperation LOAD -> jtMK
    react.surge.util.SQLOperation SAVE -> hvWT
    react.surge.util.SQLOperation[] ENUM$VALUES -> cwiJ
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> eYWy:
    react.surge.util.ServerState START -> UDLu
    react.surge.util.ServerState ENABLE -> XMUH
    react.surge.util.ServerState DISABLE -> bccN
    react.surge.util.ServerState STOP -> EhBA
    react.surge.util.ServerState RUNNING -> VhqJ
    react.surge.util.ServerState[] ENUM$VALUES -> VrCU
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> HTeQ:
    org.bukkit.Location location -> MnUG
    org.bukkit.util.Vector offset -> NjKR
    org.bukkit.util.Vector size -> wFkl
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> BSAO
    90:94:org.bukkit.Location randomLocation() -> IaEh
    104:104:org.bukkit.Location randomSurface() -> DPuB
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> eICQ
    129:129:org.bukkit.util.Vector getSize() -> SDNu
react.surge.util.SnowLevel -> biaM:
    byte level -> AuHj
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> jFoa
    51:52:void setLevel(byte) -> vtFt
react.surge.util.SuperCaller -> HLVr:
    void run() -> run
react.surge.util.T -> aMOR:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> IFRU
    32:35:void stop() -> stop
react.surge.util.TXT -> Fgrt:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> uNaA
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> Mkow
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> Mkow
    99:99:java.lang.String line(react.surge.util.C,int) -> Mkow
    113:113:java.lang.String underline(react.surge.util.C,int) -> IFRU
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> Mkow
react.surge.util.Tag -> lLnB:
    java.lang.String value() -> value
react.surge.util.Timer -> LOrS:
    long tns -> kemK
    long cns -> iyYd
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> DatY
react.surge.util.VectorMath -> nmHD:
    int[] $SWITCH_TABLE$surge$util$Axis -> AHyf
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> LBAt
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> Mkow
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> Mkow
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> IFRU
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> rVYH
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> IFRU
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> IFRU
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> rVYH
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> Nnru
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> TNas
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> eXcP
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> uNaA
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> KCga
    111:111:double round(double,int) -> TNas
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> Mkow
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> Mkow
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> Mkow
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> Nnru
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> TNas
    268:268:org.bukkit.util.Vector toVector(float,float) -> Mkow
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> Mkow
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> Mkow
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> ooRY
    337:340:double getSpeed(org.bukkit.util.Vector) -> QDxU
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> Mkow
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> vtFt
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> Mkow
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> IFRU
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> rVYH
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> Nnru
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> VLWv
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> Tqac
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> woWs
react.surge.util.VectorMath$1 -> nmHD$1:
    org.bukkit.util.Vector val$vector -> FasE
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> Oifg
    1:1:java.lang.Object onAdapt(java.lang.Object) -> uNaA
react.surge.util.W -> RbfD:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> ooRY
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> Mkow
    75:86:org.bukkit.entity.Entity getEntity(int) -> turM
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> Mkow
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> Mkow
    143:143:int getChunkX(org.bukkit.block.Block) -> QDxU
    155:155:int getChunkY(org.bukkit.block.Block) -> vtFt
    168:169:void dropXp(org.bukkit.Location,int) -> IFRU
    180:180:int getChunkZ(org.bukkit.block.Block) -> VLWv
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> IFRU
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> Mkow
    232:239:react.glang.GList news(org.bukkit.Location) -> UkWJ
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> Mkow
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> VvjN
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> VvjN
    300:300:org.bukkit.World toSync(org.bukkit.World) -> awIs
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> Oifg
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> Pcvg
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> awIs
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> Digp
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> Mkow
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> Mkow
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> Mkow
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> Mkow
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> Mkow
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> Mkow
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> Mkow
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> Mkow
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> FNJQ
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> FpMD
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> WGJF
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> rVYH
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> Mkow
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> Mkow
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> Mkow
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> Mkow
react.surge.util.W$1 -> RbfD$1:
    java.lang.Double val$doff -> LQuk
    org.bukkit.entity.Entity val$e -> qNMJ
    org.bukkit.entity.Entity[] val$result -> mQry
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> vtFt
react.surge.util.Worlds -> mqtN:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> UlIx
    33:33:boolean hasWorld(java.lang.String) -> wLVh
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> FOBh:
react.text.ColoredString -> Mcvu:
    react.surge.util.C c -> CXjf
    java.lang.String s -> jHvv
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> pYbI
    42:43:void setC(react.surge.util.C) -> IFRU
    47:47:java.lang.String getS() -> JBCq
    52:53:void setS(java.lang.String) -> DaXQ
react.text.RTEX -> SDFi:
    react.glang.GList extras -> NOwk
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> kSDQ
    44:58:react.json.JSONObject toJSON() -> iBoS
react.text.RTX -> HvkM:
    react.json.JSONArray base -> RKca
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> eXcP
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> IFRU
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> Mkow
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> Mkow
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> IFRU
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> rVYH
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> Mkow
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> IFRU
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> rVYH
    265:265:react.json.JSONArray toJSON() -> JAbo
    276:277:void tellRawTo(org.bukkit.entity.Player) -> iBoS
react.text.RawText -> rWOj:
    java.lang.String COLOR_BLACK -> gkCB
    java.lang.String COLOR_DARK_BLUE -> IsmY
    java.lang.String COLOR_DARK_GREEN -> Gmfw
    java.lang.String COLOR_DARK_AQUA -> rQNr
    java.lang.String COLOR_DARK_RED -> FYbh
    java.lang.String COLOR_DARK_PURPLE -> MMVR
    java.lang.String COLOR_GOLD -> mcea
    java.lang.String COLOR_GRAY -> oGiA
    java.lang.String COLOR_DARK_GRAY -> PMos
    java.lang.String COLOR_BLUE -> wGOq
    java.lang.String COLOR_GREEN -> ViTo
    java.lang.String COLOR_AQUA -> rkFJ
    java.lang.String COLOR_RED -> pmOj
    java.lang.String COLOR_LIGHT_PURPLE -> seWL
    java.lang.String COLOR_YELLOW -> waAx
    java.lang.String COLOR_WHITE -> jtNl
    java.lang.String COLOR_NONE -> tpiy
    java.lang.String HEAD_TEXT -> liTE
    java.lang.String HEAD_COLOR -> thYp
    java.lang.String HEAD_BOLD -> CHJg
    java.lang.String HEAD_ITALIC -> WAdO
    java.lang.String HEAD_UNDERLINED -> RCTe
    java.lang.String HEAD_STRIKETHROUGH -> yDdV
    java.lang.String HEAD_OBFUSCATED -> mRcU
    java.lang.String HEAD_CLICK_EVENT -> QsUv
    java.lang.String HEAD_HOVER_EVENT -> heVn
    java.lang.String HEAD_ACTION -> tEua
    java.lang.String HEAD_VALUE -> yVFY
    java.lang.String HEAD_EXTRA -> Excy
    java.lang.String HEAD_ACTION_SHOW_TEXT -> rkDg
    java.lang.String HEAD_ACTION_COMMAND -> bIqk
    java.util.ArrayList components -> fMmh
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> HLAs
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> TNas
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> Mkow
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> Mkow
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> Mkow
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> Mkow
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> Mkow
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> Mkow
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> Mkow
    307:313:java.lang.String compile() -> Mlnr
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> Mkow

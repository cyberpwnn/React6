react.Config -> afIq:
    react.glang.GMap worldConfigs -> afIq
    java.lang.String A_COMMANDOVERRIDE_TPS -> YoSf
    java.lang.String A_REACT_REMOTE_PORT -> jEpI
    java.lang.String A_REACT_REMOTE_ENABLED -> UACx
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> Hmbb
    java.lang.String A_POOL_MAXTHREADS -> WhmJ
    java.lang.String A_POOL_SYNC_NANOS -> sQKk
    java.lang.String A_FASTLEAF_ENABLED -> Plhy
    java.lang.String A_FASTLEAF_ONDECAY -> kYuF
    java.lang.String A_FASTLEAF_INSTANT -> hPlA
    java.lang.String A_FASTLEAF_DECAYPERIOD -> HBne
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> tSmU
    java.lang.String A_ENTITYSTACK_ENABLED -> xGHf
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> PJfk
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> aTgj
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> MdAd
    java.lang.String A_GLASS_SHOW_BLOCKS -> mNyD
    java.lang.String A_GLASS_SHOW_PARTICLES -> FonC
    java.lang.String A_ALLOW_CULL -> RQLS
    java.lang.String A_ALLOW_PURGE -> OPRx
    java.lang.String A_ALLOW_STACKING -> XIlE
    java.lang.String A_CULL_RULES -> xykf
    java.lang.String A_RAI_TPS_HIGH_TICK -> hsNX
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> kcFE
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> lUGR
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> uVol
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> IWRm
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> NoTA
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> KUHl
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> dxBo
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> Tgrh
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> vIQd
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> prSv
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> oMMo
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> KTgu
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> hbKv
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> sXxv
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> wTeH
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> lCct
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> paRp
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> owbC
    java.lang.String A_RAI_FLUID_TIME_CEIL -> MuEB
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> KChq
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> qRve
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> HnFF
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> TWUT
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> eHDj
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> DaYB
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> kbge
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> oxFU
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> cJNi
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> IqHn
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> Fonq
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> GPoX
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> wmyg
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> WWnJ
    java.lang.String A_USE_WORLD_CONFIGS -> TNcy
    java.lang.String A_LANGUAGE -> MdDL
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> dfdU
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> pHCt
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> cuCa
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> pGcA
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> bWlF
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> hanJ
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> EBXA
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> rDxD
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> GQNo
    java.lang.String A_RAI_ENTITY_PROPIGATE -> BSCE
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> wehs
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> MSAE
    boolean COMMANDOVERRIDES_TPS -> McaU
    int REACT_REMOTE_PORT -> rVYp
    boolean REACT_REMOTE_ENABLED -> xWiq
    int ENTITY_STACK_MAX_COUNT -> yuAP
    int POOL_MAXTHREADS -> iBlw
    long POOL_SYNC_NANOS -> xiMI
    boolean FASTLEAF_ENABLED -> ktIG
    boolean FASTLEAF_ONDECAY -> CgFX
    boolean FASTLEAF_INSTANT -> miMV
    int FASTLEAF_DECAYPERIOD -> qJdn
    boolean COMMANDOVERRIDES_MEMORY -> qtxW
    boolean ENTITYSTACK_ENABLED -> DPVa
    int ENTITYSTACK_MINIMUM_GROUP -> SnEI
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> DGdy
    int ENTITYSTACK_MAXIMUM_HEALTH -> NxFx
    boolean GLASS_SHOW_BLOCKS -> dxFG
    boolean GLASS_SHOW_PARTICLES -> Gaos
    react.glang.GList ALLOW_CULL -> dwda
    react.glang.GList ALLOW_PURGE -> XSBo
    react.glang.GList ALLOW_STACKING -> RkDP
    react.glang.GList CULL_RULES -> JtMc
    double RAI_TPS_HIGH_TICK -> OPXW
    long RAI_REDSTONE_TIME_FLOOR -> dDcL
    long RAI_REDSTONE_TIME_CEIL -> qSYu
    long RAI_REDSTONE_TIME_MUDDING -> jhXW
    double RAI_REDSTONE_TIME_FUNCTION -> HCSd
    double RAI_REDSTONE_TIME_OVERBLEED -> BJRY
    int RAI_REDSTONE_TIME_RADIUS -> kHux
    int RAI_REDSTONE_TIME_PROPIGATION -> ofeN
    long RAI_HOPPER_TIME_FLOOR -> FyDF
    long RAI_HOPPER_TIME_CEIL -> wfMA
    long RAI_HOPPER_TIME_MUDDING -> dwgk
    double RAI_HOPPER_TIME_FUNCTION -> dwhL
    double RAI_HOPPER_TIME_OVERBLEED -> vHuq
    int RAI_HOPPER_TIME_RADIUS -> kIWd
    int RAI_HOPPER_TIME_PROPIGATION -> xypT
    int RAI_ENTITY_CHUNK_MULTIPLIER -> TVvn
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> bqbC
    int RAI_ENTITY_CHUNK_RADIUS -> hkCO
    long RAI_FLUID_TIME_FLOOR -> doVX
    long RAI_FLUID_TIME_CEIL -> xWmJ
    long RAI_FLUID_TIME_MUDDING -> GPot
    double RAI_FLUID_TIME_FUNCTION -> SvWI
    double RAI_FLUID_TIME_OVERBLEED -> FyCC
    int RAI_FLUID_TIME_RADIUS -> OPXM
    int RAI_FLUID_TIME_PROPIGATION -> CEFP
    double SMEAR_TICK_ENTITIES_MAX_TICK -> Ixya
    double SMEAR_TICK_TILES_MAX_TICK -> biPd
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> vYur
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> YgFh
    double SMEAR_TICK_ENTITIES_AMOUNT -> vbgg
    double SMEAR_TICK_TILES_AMOUNT -> BBBe
    boolean SMEAR_TICK_ENTITIES_ENABLE -> AiSL
    boolean SMEAR_TICK_TILES_ENABLE -> wUJU
    boolean HOPPER_OVERTICK_ENABLE -> aKya
    boolean USE_WORLD_CONFIGS -> eXid
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> LPCA
    long RAI_CHUNK_TIME_CEIL -> vsmE
    long RAI_CHUNK_TIME_MUDDING -> nRbn
    double RAI_CHUNK_TIME_FUNCTION -> bytJ
    double RAI_CHUNK_TIME_OVERBLEED -> AXRv
    int RAI_CHUNK_TIME_RADIUS -> VoAk
    int RAI_CHUNK_TIME_PROPIGATION -> KoBl
    boolean RAI_CHUNK_TIME_PROPIGATE -> vIYa
    boolean RAI_FLUID_TIME_PROPIGATE -> Cwkd
    boolean RAI_ENTITY_PROPIGATE -> ePXm
    boolean RAI_HOPPER_TIME_PROPIGATE -> FhDX
    boolean RAI_REDSTONE_TIME_PROPIGATE -> hIAg
    boolean hrld -> yksb
    boolean rns -> CLul
    boolean rrl -> HLHB
    39:644:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    649:666:void doTrack(org.bukkit.plugin.Plugin) -> afIq
    671:693:void onRead(org.bukkit.plugin.Plugin) -> YoSf
    697:727:void read(java.io.File,boolean) -> afIq
    731:748:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> afIq
    753:761:void closeWorldConfig(org.bukkit.World) -> YoSf
    766:879:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> afIq
    884:921:react.surge.cluster.DataCluster defaultConfig(boolean) -> afIq
    926:1005:react.glang.GList getDefaultEntitiesForStacking() -> afIq
    1010:1085:react.glang.GList getDefaultEntitiesForCulling() -> YoSf
    1090:1127:react.glang.GList getDefaultEntitiesForRemoval() -> jEpI
    1132:1161:react.glang.GList getDefaultCullRules() -> UACx
react.Config$1 -> afIq$1:
    java.io.File val$fConfig -> xrCB
    java.io.File val$fConfigExperimental -> hrrx
    org.bukkit.plugin.Plugin val$main -> sQPo
    1:652:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    657:661:void run() -> run
react.Config$2 -> afIq$2:
    react.api.WorldConfig val$wc -> WiRc
    org.bukkit.World val$w -> nJQn
    1:738:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    743:744:void run() -> run
react.Gate -> YoSf:
    react.glang.GMap defaultSettings -> NEEw
    react.glang.GSet refresh -> CxLD
    react.glang.GSet destroy -> gxan
    40:40:void <init>() -> <init>
    48:138:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> afIq
    144:175:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> afIq
    180:180:int getChunkCountForView() -> Hmbb
    185:185:int getMaxChunksForView() -> WhmJ
    190:190:boolean hasFawe() -> sQKk
    195:216:void tickEntityNextTickListTick(org.bukkit.World) -> jEpI
    220:224:void resetEntityMaxTick(org.bukkit.World) -> UACx
    228:228:int getEntityTickMax(org.bukkit.World) -> Hmbb
    233:233:int getTileTickMax(org.bukkit.World) -> WhmJ
    238:256:void tweakEntityTickMax(org.bukkit.World,int) -> afIq
    260:277:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> afIq
    282:286:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> afIq
    290:302:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> afIq
    307:311:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> YoSf
    315:333:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> afIq
    337:341:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> sQKk
    346:349:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> afIq
    354:357:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> YoSf
    362:362:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> jEpI
    367:367:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> UACx
    372:372:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> Hmbb
    377:377:boolean isBadForUnloading() -> Plhy
    382:382:boolean canUnload(org.bukkit.World,int,int) -> afIq
    389:405:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    411:422:void unloadChunk(org.bukkit.World,int,int) -> YoSf
    426:442:void removeEntity(org.bukkit.entity.Entity) -> afIq
    446:462:void purgeEntity(org.bukkit.entity.Entity) -> YoSf
    466:482:void cullEntity(org.bukkit.entity.Entity) -> jEpI
    487:504:void updateBlock(org.bukkit.block.Block) -> afIq
    508:512:java.lang.String header(java.lang.String,react.surge.util.C) -> afIq
    517:517:java.lang.String header(react.surge.util.C) -> afIq
    523:527:void updateFluid(org.bukkit.block.Block) -> YoSf
    531:532:void refresh(org.bukkit.Chunk) -> YoSf
    537:556:void refreshChunks() -> kYuF
    560:561:void sendBlockChange(org.bukkit.Location) -> afIq
    42:44:void <clinit>() -> <clinit>
react.Gate$1 -> YoSf$1:
    react.api.SelectorPosition val$sel -> AWsM
    react.glang.Callback val$prog -> OGgy
    react.glang.Callback val$cb -> FyEC
    49:49:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    53:136:void run() -> run
react.Gate$1$1 -> YoSf$1$1:
    java.lang.Object val$o -> RICC
    java.lang.reflect.Constructor val$vectorConstruct -> upgs
    java.lang.reflect.Constructor val$cuboidConstruct -> FxdB
    java.lang.reflect.Method val$faweFixMethod -> tdtH
    java.lang.Integer[] val$total -> SCTW
    java.lang.Integer[] val$sof -> YVHG
    java.lang.Integer val$tot -> flmN
    react.Gate$1 this$0 -> DYKn
    81:81:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],java.lang.Integer) -> <init>
    87:105:void run() -> run
react.Gate$1$2 -> YoSf$1$2:
    java.lang.Integer[] val$total -> SCTW
    react.Gate$1 this$0 -> DYKn
    110:110:void <init>(react.Gate$1,java.lang.String,int,java.lang.Integer[]) -> <init>
    116:124:void run() -> run
react.Gate$2 -> YoSf$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> tnEy
    290:290:void <clinit>() -> <clinit>
react.Info -> jEpI:
    java.lang.String CORE_REACT_DOT -> pOvd
    java.lang.String CORE_NAME -> XceL
    java.lang.String CORE_CACHE -> iCSF
    java.lang.String WORLD_CONFIGS -> DHKF
    java.lang.String CORE_DOTYML -> xXOW
    java.lang.String COMMAND_REACT -> FgeD
    java.lang.String COMMAND_RAI -> SBvJ
    java.lang.String COMMAND_ACT_DESCRIPTION -> cAdL
    java.lang.String COMMAND_ACT -> VCne
    java.lang.String COMMAND_ACT_ALIAS_1 -> kRNC
    java.lang.String COMMAND_ACT_ALIAS_2 -> WqfS
    java.lang.String COMMAND_ACT_USAGE -> NLyO
    java.lang.String COMMAND_HELP_DESCRIPTION -> KoDs
    java.lang.String COMMAND_HELP -> RIEe
    java.lang.String COMMAND_HELP_ALIAS_1 -> UkaE
    java.lang.String COMMAND_HELP_ALIAS_2 -> cJVI
    java.lang.String COMMAND_HELP_USAGE -> EeCW
    java.lang.String COMMAND_STATUS_DESCRIPTION -> sIBy
    java.lang.String COMMAND_STATUS -> Lywf
    java.lang.String COMMAND_STATUS_ALIAS_1 -> Grxf
    java.lang.String COMMAND_STATUS_ALIAS_2 -> loBn
    java.lang.String COMMAND_STATUS_USAGE -> BIuN
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> QWBb
    java.lang.String COMMAND_CPUSCORE -> cSEb
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> xXQd
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> IqMk
    java.lang.String COMMAND_CPUSCORE_USAGE -> RQTX
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> HCVb
    java.lang.String COMMAND_RELOAD -> pGiD
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> nlWM
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> hast
    java.lang.String COMMAND_RELOAD_USAGE -> doYn
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> WObd
    java.lang.String COMMAND_MONITOR -> GHcu
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> ggae
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> tnHQ
    java.lang.String COMMAND_MONITOR_USAGE -> ydFI
    java.lang.String COMMAND_VERSION_DESCRIPTION -> MuJT
    java.lang.String COMMAND_VERSION -> FVbh
    java.lang.String COMMAND_VERSION_ALIAS_1 -> VUPa
    java.lang.String COMMAND_VERSION_ALIAS_2 -> STXU
    java.lang.String COMMAND_VERSION_USAGE -> loBG
    java.lang.String COMMAND_MAP_DESCRIPTION -> oxJi
    java.lang.String COMMAND_MAP -> dDew
    java.lang.String COMMAND_MAP_ALIAS_1 -> tLEV
    java.lang.String COMMAND_MAP_ALIAS_2 -> pXjL
    java.lang.String COMMAND_MAP_USAGE -> dVLH
    java.lang.String COMMAND_GLASS_DESCRIPTION -> DaaD
    java.lang.String COMMAND_GLASS -> tnLI
    java.lang.String COMMAND_GLASS_ALIAS_1 -> wCoY
    java.lang.String COMMAND_GLASS_ALIAS_2 -> WPFX
    java.lang.String COMMAND_GLASS_USAGE -> NxPL
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> srwm
    java.lang.String COMMAND_CBLAME -> RIFr
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> ntjY
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> bqhB
    java.lang.String COMMAND_CBLAME_USAGE -> WGTs
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> KwWV
    java.lang.String COMMAND_ACTIONLOG -> WXVW
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> ogLn
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> afTl
    java.lang.String COMMAND_ACTIONLOG_USAGE -> ylXo
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> OYOu
    java.lang.String COMMAND_CAPABILITIES -> fTAm
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> gWCx
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> pinc
    java.lang.String COMMAND_CAPABILITIES_USAGE -> woDY
    java.lang.String MSG_PERMISSION -> iKgo
    java.lang.String MSG_MONITORING_STARTED -> qlrE
    java.lang.String MSG_MONITORING_STOPPED -> xOcV
    java.lang.String MSG_ACTIONLOGGING_STARTED -> Vnec
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> FVdT
    java.lang.String MSG_GLASS_STARTED -> hIDu
    java.lang.String MSG_GLASS_STOPPED -> cRgB
    org.bukkit.Color COLOR_HOPPER -> LyxN
    org.bukkit.Color COLOR_BLOCK_UPDATE -> gNSD
    org.bukkit.Color COLOR_BLOCK_FROMTO -> WrGl
    org.bukkit.Color COLOR_BLOCK_BURN -> dLws
    org.bukkit.Color COLOR_BLOCK_DECAY -> OYOS
    org.bukkit.Color COLOR_BLOCK_FORM -> wnbR
    java.lang.String NAME_TICK -> XciW
    java.lang.String NAME_MEMORY -> YxNm
    java.lang.String NAME_CHUNKS -> EJpb
    java.lang.String NAME_ENTITIES -> KCqT
    java.lang.String STATE_MONITORING_TAB -> Kvud
    java.lang.String STATE_MONITORING_ENABLED -> Fovh
    java.lang.String STATE_MONITORING_HIGH -> BAhN
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> inKQ
    java.lang.String STATE_MAPPING_ENABLED -> mrGP
    java.lang.String STATE_SOUND_PLAYS -> inKU
    java.lang.String STATE_MONITORING_POSTED -> skJg
    java.lang.String STATE_MONITORING_LASTTAB -> BSLY
    java.lang.String STATE_GLASSES_ENABLED -> xiYC
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> qTBp
    java.lang.String STATE_PLAYER_HOTBAR -> yuMA
    java.lang.String STATE_PLAYER_SHIFT -> pYPe
    java.lang.String STATE_PLAYER_SCROLL -> maHm
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> EdfR
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> UkdR
    java.lang.String PERM_ACCESS -> gFEG
    java.lang.String PERM_MONITOR -> VTuO
    java.lang.String PERM_MONITOR_TITLE -> inMk
    java.lang.String PERM_MONITOR_ACTIONLOG -> PvGv
    java.lang.String PERM_MONITOR_MAP -> hjjL
    java.lang.String PERM_MONITOR_ENVIRONMENT -> PmWJ
    java.lang.String PERM_MONITOR_GLASSES -> NgPi
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> wwVc
    java.lang.String PERM_ACT -> jNlr
    java.lang.String PERM_RAI -> Fxju
    java.lang.String PERM_RAI_CONTROL -> QEfM
    java.lang.String PERM_RAI_ACCESS -> jONW
    java.lang.String PERM_RAI_MONITOR -> DbBe
    java.lang.String PERM_RELOAD -> FVey
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> lvub
    java.lang.String SAMPLER_REDSTONE_TICK -> OQAB
    java.lang.String SAMPLER_ENTITY_TIME -> gowF
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> VTsU
    java.lang.String SAMPLER_TILE_TIME_LOCK -> HKkU
    java.lang.String SAMPLER_TILE_TIME -> Diqy
    java.lang.String SAMPLER_TILE_DROPTICK -> mXWK
    java.lang.String SAMPLER_ENTITY_DROPTICK -> SBxq
    java.lang.String SAMPLER_REDSTONE_SECOND -> vlCE
    java.lang.String SAMPLER_REDSTONE_TIME -> oxPB
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> ytiw
    java.lang.String SAMPLER_HOPPER_TICK -> MAiK
    java.lang.String SAMPLER_HOPPER_SECOND -> VLcg
    java.lang.String SAMPLER_HOPPER_TIME -> jqPK
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> Wyyt
    java.lang.String SAMPLER_FLUID_TICK -> upnV
    java.lang.String SAMPLER_FLUID_SECOND -> QhIE
    java.lang.String SAMPLER_FLUID_TIME -> sHeP
    java.lang.String SAMPLER_TPS -> anfO
    java.lang.String SAMPLER_TICK -> RkKo
    java.lang.String SAMPLER_TIU -> yAfD
    java.lang.String SAMPLER_MEM -> ydLy
    java.lang.String SAMPLER_FREEMEM -> MuPl
    java.lang.String SAMPLER_MAXMEM -> iKky
    java.lang.String SAMPLER_ALLOCMEM -> qBcF
    java.lang.String SAMPLER_MAHS -> IiDf
    java.lang.String SAMPLER_CHK -> IGAf
    java.lang.String SAMPLER_ATASK -> rgiJ
    java.lang.String SAMPLER_STASK -> RIJu
    java.lang.String SAMPLER_CHK_TIME -> qCDD
    java.lang.String SAMPLER_EXPLOSION_TIME -> iwBL
    java.lang.String SAMPLER_CHKS -> rFFl
    java.lang.String SAMPLER_ENT -> PCFG
    java.lang.String SAMPLER_ENTLIV -> ETHM
    java.lang.String SAMPLER_ENTDROP -> kbsb
    java.lang.String SAMPLER_ENTTILE -> UtXW
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> PBdo
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> VfYY
    java.lang.String ACTION_CULL_ENTITIES_NAME -> GkOe
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> inPW
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> mhyQ
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> oVNY
    java.lang.String ACTION_UPDATE_FLUID_NAME -> bhyW
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> JRTU
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> Ihbq
    java.lang.String ACTION_LOCK_FLUID_STATUS -> oDlV
    java.lang.String ACTION_LOCK_FLUID_NAME -> IiDR
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> hPyP
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> xaHl
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> bhyj
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> lCrj
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> JRUI
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> Gjmi
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> TqTP
    java.lang.String ACTION_LOCK_HOPPER_NAME -> PeHM
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> QMyd
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> lTwc
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> XBMq
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> cRnF
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> IGDU
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> xOjL
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> NUqt
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> fKUp
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> SvdU
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> HmtE
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> AaNY
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> CpGN
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> dEPi
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> FEkA
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> TWcp
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> MmBu
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> iLNs
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> aDWi
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> SLQW
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> ogSJ
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> jNpv
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> pPbj
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> jhdR
    java.lang.String ACTION_FIX_LIGHTING_NAME -> YVSL
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> vJDG
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> dwrk
    java.lang.String ACTION_COLLECT_GARBAGE -> MmAc
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> WrNT
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> MuRW
    6:6:void <init>() -> <init>
    8:234:void <clinit>() -> <clinit>
react.Lang -> UACx:
    java.lang.String BUNDLE_NAME -> lCuV
    java.util.ResourceBundle RESOURCE_BUNDLE -> yAjV
    java.util.ResourceBundle PRIMARY_BUNDLE -> IqUy
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> Hmbb:
    react.React instance -> upsQ
    react.controller.SampleController sampleController -> EKWa
    react.controller.PlayerController playerController -> yIyq
    react.controller.MonitorController monitorController -> KnkX
    react.controller.CommandController commandController -> preJ
    react.controller.ActionController actionController -> aDWH
    react.controller.FastDecayController fastDecayController -> AOlb
    react.controller.EntityStackController entityStackController -> vAQp
    react.controller.GlassController glassController -> JkiE
    react.controller.EntityCullController entityCullController -> SKnn
    react.controller.SpikeController spikeController -> hHix
    react.controller.SecurityController securityController -> Mcrb
    react.controller.RedstoneController redstoneController -> EeMP
    react.controller.HopperController hopperController -> Yftp
    react.controller.PhysicsController physicsController -> PJyB
    react.controller.TickTimeController tickTimeController -> CVTy
    react.controller.RAIController raiController -> KoOU
    react.controller.FluidController fluidController -> oUre
    react.controller.ChunkController chunkController -> TNtq
    react.controller.GraphController graphController -> DsKm
    react.controller.ChronophyFluidController fluidChronophyController -> WqqO
    react.controller.EventController eventController -> ESjm
    react.controller.BlockInjectController blockInjectController -> lUYs
    react.controller.SmearTickController smearTickController -> xrPC
    react.controller.FeatureController featureController -> CgWh
    react.controller.HopperOvertickController hopperPlungeController -> CgWi
    react.controller.BenchmarkController benchmarkController -> NgWP
    react.controller.LanguageController languageController -> AjBA
    react.controller.RemoteController remoteController -> qBgE
    react.controller.ExplosiveController explosiveController -> pHTd
    react.controller.WorldController worldController -> MtuI
    44:44:void <init>() -> <init>
    142:150:void enable() -> enable
    156:156:void disable() -> disable
react.React$1 -> Hmbb$1:
    react.React this$0 -> LrPn
    1:142:void <init>(react.React) -> <init>
    147:148:void run() -> run
react.action.ActionCollectGarbage -> WhmJ:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
react.action.ActionCollectGarbage$1 -> WhmJ$1:
    react.action.source.IActionSource val$source -> Mlbg
    react.action.ActionCollectGarbage this$0 -> DGuS
    30:30:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> WhmJ$1$1:
    long val$mbnex -> inTD
    long val$mbmem -> RkPy
    react.action.ActionCollectGarbage$1 this$1 -> paed
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> sQKk:
    long ms -> ytpt
    int lcd -> tmqi
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> afIq
    27:27:void access$0(react.action.ActionCullEntities,long) -> afIq
    28:28:int access$1(react.action.ActionCullEntities) -> afIq
    27:27:long access$2(react.action.ActionCullEntities) -> YoSf
react.action.ActionCullEntities$1 -> sQKk$1:
    react.action.ActionCullEntities this$0 -> FhNr
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> hPlA
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> sQKk$2:
    react.action.ActionCullEntities this$0 -> FhNr
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> hPlA
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> sQKk$3:
    react.action.ActionCullEntities this$0 -> FhNr
    react.glang.FinalInteger val$completed -> vQtx
    react.glang.FinalInteger val$total -> HLQx
    react.glang.FinalInteger val$totalCulled -> oUrI
    react.glang.FinalInteger val$totalChunked -> HvfE
    react.action.source.IActionSource val$source -> Mlbg
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> sQKk$4:
    react.action.ActionCullEntities this$0 -> FhNr
    react.action.source.IActionSource val$source -> Mlbg
    react.glang.FinalInteger val$totalCulled -> oUrI
    react.glang.FinalInteger val$totalChunked -> HvfE
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> Plhy:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
react.action.ActionFixLighting$1 -> Plhy$1:
    react.action.ActionFixLighting this$0 -> SLRM
    29:29:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> hPlA
    29:29:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> Plhy$2:
    react.action.source.IActionSource val$source -> Mlbg
    int val$ch -> DHVi
    react.action.ActionFixLighting this$0 -> SLRM
    78:78:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> afIq
    78:78:void run(java.lang.Object) -> afIq
react.action.ActionFixLighting$3 -> Plhy$3:
    react.action.ActionFixLighting this$0 -> SLRM
    89:89:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> afIq
    89:89:void run(java.lang.Object) -> afIq
react.action.ActionLockFluid -> kYuF:
    int lcd -> tmqi
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
react.action.ActionLockFluid$1 -> kYuF$1:
    react.action.ActionLockFluid this$0 -> YpGB
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> hPlA
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> kYuF$2:
    react.action.ActionLockFluid this$0 -> YpGB
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> hPlA
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> hPlA:
    int lcd -> tmqi
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
react.action.ActionLockHopper$1 -> hPlA$1:
    react.action.ActionLockHopper this$0 -> cdQd
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> hPlA
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> hPlA$2:
    react.action.ActionLockHopper this$0 -> cdQd
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> hPlA
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> HBne:
    int lcd -> tmqi
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
react.action.ActionLockRedstone$1 -> HBne$1:
    react.action.ActionLockRedstone this$0 -> yBLe
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> hPlA
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> HBne$2:
    react.action.ActionLockRedstone this$0 -> yBLe
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> hPlA
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> tSmU:
    long ms -> ytpt
    int lcd -> tmqi
    boolean fail -> SKqU
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> YoSf
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> afIq
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> afIq
    23:23:int access$200(react.action.ActionPurgeChunks) -> YoSf
    23:23:long access$100(react.action.ActionPurgeChunks) -> jEpI
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> afIq
react.action.ActionPurgeChunks$1 -> tSmU$1:
    react.action.ActionPurgeChunks this$0 -> cRoR
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> hPlA
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> tSmU$2:
    int val$dk -> vRVD
    java.lang.Object val$j -> NwwF
    react.glang.FinalInteger val$acompleted -> mqnV
    react.glang.FinalInteger val$completed -> vQtx
    react.glang.FinalInteger val$total -> HLQx
    react.glang.FinalInteger val$totalCulled -> oUrI
    react.glang.FinalInteger val$totalChunked -> HvfE
    react.action.source.IActionSource val$source -> Mlbg
    react.api.ISelector[] val$selectors -> DGwu
    react.action.ActionPurgeChunks this$0 -> cRoR
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> tSmU$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> VLmB
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> tSmU$3:
    react.action.source.IActionSource val$source -> Mlbg
    react.glang.FinalInteger val$acompleted -> mqnV
    react.action.ActionPurgeChunks this$0 -> cRoR
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> tSmU$4:
    org.bukkit.Chunk val$chunk -> TiJY
    java.lang.Runnable val$cb -> pXxG
    react.action.ActionPurgeChunks this$0 -> cRoR
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> xGHf:
    long ms -> ytpt
    int lcd -> tmqi
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> YoSf
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> afIq
    27:27:int access$100(react.action.ActionPurgeEntities) -> afIq
    27:27:long access$000(react.action.ActionPurgeEntities) -> YoSf
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> afIq
react.action.ActionPurgeEntities$1 -> xGHf$1:
    react.action.ActionPurgeEntities this$0 -> QVnj
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> hPlA
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> xGHf$2:
    react.action.ActionPurgeEntities this$0 -> QVnj
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> hPlA
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> xGHf$3:
    react.glang.FinalInteger val$completed -> vQtx
    react.glang.FinalInteger val$total -> HLQx
    react.glang.FinalInteger val$totalCulled -> oUrI
    react.glang.FinalInteger val$totalChunked -> HvfE
    react.action.source.IActionSource val$source -> Mlbg
    react.action.ActionPurgeEntities this$0 -> QVnj
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> xGHf$4:
    react.action.source.IActionSource val$source -> Mlbg
    react.glang.FinalInteger val$totalCulled -> oUrI
    react.glang.FinalInteger val$totalChunked -> HvfE
    react.action.ActionPurgeEntities this$0 -> QVnj
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> xGHf$5:
    org.bukkit.entity.Entity val$i -> nKAx
    react.glang.FinalInteger val$cu -> wMKt
    int val$k -> nldd
    org.bukkit.Chunk val$chunk -> TiJY
    java.lang.Runnable val$cb -> pXxG
    react.action.ActionPurgeEntities this$0 -> QVnj
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> PJfk:
    int lcd -> tmqi
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
react.action.ActionUnlockFluid$1 -> PJfk$1:
    react.action.ActionUnlockFluid this$0 -> hIOs
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> hPlA
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> aTgj:
    int lcd -> tmqi
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
react.action.ActionUnlockHopper$1 -> aTgj$1:
    react.action.ActionUnlockHopper this$0 -> YoiD
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> hPlA
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> MdAd:
    int lcd -> tmqi
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
react.action.ActionUnlockRedstone$1 -> MdAd$1:
    react.action.ActionUnlockRedstone this$0 -> xjAS
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> hPlA
    1:1:java.lang.Object get() -> get
react.action.source.AccessActionSource -> mNyD:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> afIq
    26:33:void sendResponseSuccess(java.lang.String) -> YoSf
    38:45:void sendResponseError(java.lang.String) -> jEpI
    50:57:void sendResponseActing(java.lang.String) -> UACx
react.action.source.ActionHandle -> FonC:
    react.action.source.ActionHandle AUTOMATIC -> HCeH
    react.action.source.ActionHandle MANUAL -> wnmI
    react.action.source.ActionHandle MUTEX -> mqpb
    react.action.source.ActionHandle[] $VALUES -> dMdF
    3:3:react.action.source.ActionHandle[] values() -> values
    3:3:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.action.source.ConsoleActionSource -> RQLS:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> afIq
    18:19:void sendResponseSuccess(java.lang.String) -> YoSf
    24:25:void sendResponseError(java.lang.String) -> jEpI
    30:31:void sendResponseActing(java.lang.String) -> UACx
react.action.source.IActionSource -> OPRx:
    void sendResponse(java.lang.String) -> afIq
    void sendResponseSuccess(java.lang.String) -> YoSf
    void sendResponseError(java.lang.String) -> jEpI
    void sendResponseActing(java.lang.String) -> UACx
react.action.source.PlayerActionSource -> XIlE:
    org.bukkit.entity.Player p -> cSRM
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> afIq
    30:31:void sendResponseSuccess(java.lang.String) -> YoSf
    36:37:void sendResponseError(java.lang.String) -> jEpI
    42:43:void sendResponseActing(java.lang.String) -> UACx
react.action.source.RAIActionSource -> xykf:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> afIq
    16:17:void sendResponseSuccess(java.lang.String) -> YoSf
    22:23:void sendResponseError(java.lang.String) -> jEpI
    28:29:void sendResponseActing(java.lang.String) -> UACx
react.api.Action -> hsNX:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> oNCy
    java.lang.String[] nodes -> Eunk
    react.action.source.ActionHandle handle -> ivet
    react.api.ActionState state -> JQyb
    react.api.ActionTargetType target -> dNER
    react.api.ActionType type -> IWgt
    react.action.source.IActionSource currentSource -> jyha
    double progress -> ESlY
    react.glang.GMap defaultSelectors -> rgnB
    28:29:void <init>(react.api.ActionType) -> <init>
    32:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> afIq
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> afIq
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> HBne
    94:94:react.api.ActionState getState() -> tSmU
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> Hmbb
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> xGHf
    130:130:react.api.ActionType getType() -> PJfk
    136:136:react.glang.GMap getDefaultSelectors() -> aTgj
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> YoSf
    189:190:void completeAction() -> MdAd
    195:195:react.action.source.IActionSource getCurrentSource() -> mNyD
    201:201:java.lang.String[] getNodes() -> FonC
    207:208:void setNodes(java.lang.String[]) -> afIq
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
react.api.ActionAlreadyRunningException -> kcFE:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> lUGR:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> uVol:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> IWRm:
    react.api.ActionState IDLE -> oNCs
    react.api.ActionState RUNNING -> priP
    react.api.ActionState[] $VALUES -> clcm
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> NoTA:
    react.api.ActionTargetType POSITIONAL -> MtvI
    react.api.ActionTargetType SYSTEM -> HCdG
    react.api.ActionTargetType[] $VALUES -> WjBe
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> KUHl:
    react.api.ActionType FIX_LIGHTING -> WPSC
    react.api.ActionType UNLOCK_FLUID -> eXys
    react.api.ActionType LOCK_FLUID -> SUGg
    react.api.ActionType UNLOCK_HOPPER -> XBTK
    react.api.ActionType LOCK_HOPPER -> aMNi
    react.api.ActionType UNLOCK_REDSTONE -> agAb
    react.api.ActionType LOCK_REDSTONE -> FVqk
    react.api.ActionType CULL_ENTITIES -> tefn
    react.api.ActionType COLLECT_GARBAGE -> JlQA
    react.api.ActionType PURGE_ENTITIES -> QVqa
    react.api.ActionType PURGE_CHUNKS -> iKtU
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> ivet
    react.api.ActionTargetType target -> dNER
    react.api.ActionType[] $VALUES -> HLXH
    6:6:react.api.ActionType[] values() -> values
    6:6:react.api.ActionType valueOf(java.lang.String) -> valueOf
    26:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> RQLS
    50:50:react.api.ActionTargetType getTarget() -> xGHf
    6:18:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> dxBo:
    react.api.ActivationRangeType ANIMALS -> yRsI
    react.api.ActivationRangeType MONSTERS -> IWjv
    react.api.ActivationRangeType MISC -> LjGE
    react.api.ActivationRangeType[] $VALUES -> xiap
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> Tgrh:
    int value() -> value
react.api.Async -> vIQd:
react.api.CPUBenchmark -> prSv:
    org.bukkit.command.CommandSender sender -> sender
    int score -> Sehu
    java.lang.Runnable onFinish -> GcGd
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> OPRx
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> afIq
    10:10:int access$100(react.api.CPUBenchmark) -> YoSf
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> jEpI
react.api.CPUBenchmark$1 -> prSv$1:
    react.api.CPUBenchmark this$0 -> QWRk
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> prSv$2:
    react.api.CPUBenchmark this$0 -> QWRk
    78:78:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> oMMo:
    react.api.CPUResult ULTRA_SLOW -> kAYm
    react.api.CPUResult VERY_SLOW -> gVpM
    react.api.CPUResult SLOW -> QgsU
    react.api.CPUResult AVERAGE -> dojO
    react.api.CPUResult GOOD -> anop
    react.api.CPUResult FAST -> bjCf
    react.api.CPUResult VERY_FAST -> tUDs
    react.api.CPUResult ULTRA_FAST -> uXHV
    java.lang.String m -> mjDB
    react.api.CPUResult[] $VALUES -> rhQW
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> afIq
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> KTgu:
    react.glang.GMap cache -> ndTv
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> YoSf
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> jEpI
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> XIlE
    54:54:boolean has(java.lang.Object) -> UACx
react.api.Capability -> hbKv:
    react.api.Capability DUAL_WEILD -> OsNU
    react.api.Capability SCOREBOARD -> CNIn
    react.api.Capability SCOREBOARD_ADVANCED -> KMOY
    react.api.Capability HOPPER -> XSTq
    react.api.Capability ENTITY_ATTRIBUTES -> HUGp
    react.api.Capability ENTITY_AI -> iCbm
    react.api.Capability ACTION_BAR -> AGbg
    react.api.Capability ENTITY_NAMES -> pQIK
    react.api.Capability TITLE_BAR -> fBkG
    react.api.Capability CHUNK_RELIGHTING -> wxAO
    react.api.Capability MONITOR_SUBMISSIVENESS -> uFeb
    react.api.Capability ACCELERATED_PING -> anoy
    react.api.Capability ENTITY_THROTTLING -> qeNH
    react.api.Capability TILE_THROTTLING -> RACO
    react.api.Capability PASSENGERS -> agCj
    react.glang.GList capabilities -> dDwf
    react.surge.util.Protocol version -> kImA
    react.api.Flavor flavor -> HTjD
    java.lang.String plugin -> Xcwy
    java.lang.String name -> name
    56:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> xykf
    100:100:boolean isFlavorCapable() -> hsNX
    105:105:boolean isVersionCapable() -> kcFE
    110:110:boolean isCapable() -> lUGR
    115:115:react.surge.util.Protocol getVersion() -> uVol
    120:120:react.api.Flavor getFlavor() -> IWRm
    125:125:java.lang.String getPlugin() -> NoTA
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> afIq
    153:167:void sendNotCapable(react.action.source.IActionSource) -> afIq
    14:48:void <clinit>() -> <clinit>
react.api.CapabilityBasis -> sXxv:
    react.api.CapabilityBasis VERSION -> BAvQ
    react.api.CapabilityBasis FLAVOR -> klQG
    react.api.CapabilityBasis PLUGIN -> ThnG
    react.api.CapabilityBasis[] $VALUES -> tfJT
    3:3:react.api.CapabilityBasis[] values() -> values
    3:3:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ChunkIssue -> wTeH:
    react.api.ChunkIssue ENTITY -> SThq
    react.api.ChunkIssue HOPPER -> nSWP
    react.api.ChunkIssue TNT -> ylgi
    react.api.ChunkIssue REDSTONE -> mrVn
    react.api.ChunkIssue FLUID -> BBVe
    react.api.ChunkIssue PHYSICS -> bYFG
    react.api.ChunkIssue[] ENUM$VALUES -> AYFU
    3:10:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
react.api.Clip -> lCct:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> paRp:
    org.bukkit.command.CommandSender sender -> sender
    13:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> afIq
    31:32:void sendResponseSuccess(java.lang.String) -> YoSf
    37:38:void sendResponseError(java.lang.String) -> jEpI
    43:44:void sendResponseActing(java.lang.String) -> UACx
react.api.CullList -> owbC:
    react.glang.GSet toCull -> GcIe
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> UACx
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> KUHl
react.api.DTest -> MuEB:
    6:6:void <init>() -> <init>
    11:62:int test() -> dxBo
react.api.EntityFlag -> KChq:
    react.api.EntityFlag NAMED -> KxFr
    react.api.EntityFlag TAMED -> IrAU
    react.api.EntityFlag STACKED -> EeSr
    react.api.EntityFlag RIDDEN -> wMNo
    react.api.EntityFlag LEASHED -> fSnO
    java.lang.String m -> mjDB
    react.api.EntityFlag[] $VALUES -> RkXC
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> Hmbb
    40:70:boolean is(org.bukkit.entity.Entity) -> WhmJ
    76:76:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> qRve:
    react.glang.GSet entityTypes -> HfKT
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> Tgrh
react.api.EntitySample -> HnFF:
    react.glang.GMap counts -> AGdu
    react.glang.GMap sets -> scEt
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> vIQd
    45:45:react.glang.GList getTypes() -> prSv
    50:57:int total() -> oMMo
    62:67:int get(org.bukkit.entity.EntityType) -> afIq
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> YoSf
    84:96:void add(org.bukkit.entity.Entity) -> UACx
react.api.Experimental -> TWUT:
react.api.Flavor -> eHDj:
    react.api.Flavor ANY -> axCs
    react.api.Flavor SAFE_MODE -> dVYG
    react.api.Flavor CRAFT_BUKKIT -> MAuU
    react.api.Flavor BUKKIT -> nJdJ
    react.api.Flavor SPIGOT -> OsPc
    react.api.Flavor SOGGY_SPIGOT -> iwJa
    react.api.Flavor PAPER_SPIGOT -> mGaN
    react.api.Flavor TACO_SPIGOT -> Fgtg
    react.api.Flavor TORCH_SPIGOT -> vlNg
    react.api.Flavor FORGE_HACK -> wwbQ
    react.api.Flavor SPONGE_HACK -> IFjh
    react.api.Flavor[] $VALUES -> Knsj
    6:6:react.api.Flavor[] values() -> values
    6:6:react.api.Flavor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> KTgu
    74:79:boolean compatableWith(react.api.Flavor) -> afIq
    84:84:java.lang.String fancyName() -> hbKv
    6:18:void <clinit>() -> <clinit>
react.api.IAction -> DaYB:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> HBne
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> YoSf
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> afIq
    react.api.ActionState getState() -> tSmU
    react.api.ActionTargetType getTarget() -> xGHf
    void setNodes(java.lang.String[]) -> afIq
    java.lang.String[] getNodes() -> FonC
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> Hmbb
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> PJfk
    react.glang.GMap getDefaultSelectors() -> aTgj
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> afIq
    react.api.ISelector[] biselect(react.api.ISelector[]) -> afIq
    react.action.source.IActionSource getCurrentSource() -> mNyD
    void completeAction() -> MdAd
react.api.ICache -> kbge:
    react.glang.GSet get(java.lang.Object) -> YoSf
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> jEpI
    void clear() -> clear
    boolean has(java.lang.Object) -> UACx
    react.glang.GList k() -> XIlE
react.api.ICommand -> oxFU:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> sXxv
    java.lang.String[] getPermissions() -> wTeH
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> WhmJ
    react.api.SideGate getSideGate() -> lCct
    void registerParameterDescription(java.lang.String,java.lang.String) -> afIq
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
react.api.IRecord -> cJNi:
    java.lang.String getRecordType() -> paRp
    long getRecordTime() -> owbC
    react.json.JSONObject toJSON() -> MuEB
    java.lang.Object getRecordObject() -> KChq
    void fromJSON(react.json.JSONObject) -> afIq
react.api.IRecordBook -> IqHn:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> afIq
    long getOldestRecordTime() -> qRve
    void addRecord(react.api.IRecord) -> afIq
    long getLatestRecordTime() -> HnFF
    int countRecords(long,long) -> afIq
    react.glang.GMap getRecords(long,long) -> YoSf
    int purgeRecordsBefore(long) -> YoSf
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> Fonq:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> TWUT
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> eHDj
    react.surge.util.C getAltColor() -> DaYB
    void setColor(react.surge.util.C,react.surge.util.C) -> afIq
    int getInterval() -> getInterval
    void setInterval(int) -> YoSf
    void sample() -> kbge
    java.lang.String get() -> get
    void construct() -> oxFU
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> GPoX:
    react.api.SelectionMode getMode() -> cJNi
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> Hmbb
    react.glang.GSet getList() -> IqHn
    react.glang.GSet getPossibilities() -> Fonq
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> WhmJ
    java.lang.String getName() -> getName
react.api.Injection -> wmyg:
    react.api.InjectionMethod value() -> GPoX
react.api.InjectionMethod -> WWnJ:
    react.api.InjectionMethod SWAP -> EeRn
    react.api.InjectionMethod SUBSTRATE -> SwMC
    react.api.InjectionMethod RELOAD -> Lqvj
    react.api.InjectionMethod[] $VALUES -> QVsF
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> TNcy:
    java.lang.String value() -> value
react.api.MSampler -> MdDL:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> wmyg
react.api.MonitorHeading -> dfdU:
    react.api.ISampler head -> qvPv
    react.glang.GList children -> ndVl
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> afIq
    27:27:react.api.ISampler getHead() -> WWnJ
    32:33:void setHead(react.api.ISampler) -> YoSf
    37:37:react.glang.GList getChildren() -> TNcy
    42:42:java.lang.String getHeadText() -> MdDL
    47:60:java.lang.String getChildText() -> dfdU
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> afIq
react.api.NoiseGenerator -> pHCt:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> cuCa:
    react.api.NoiseGenerator[] octaves -> wnpa
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> pHCt
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> pGcA:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> XBXV
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> cuCa
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> bWlF:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> afIq
react.api.Permissable -> hanJ:
    react.api.Permissable ACCESS -> QEtD
    react.api.Permissable MONITOR -> PeUG
    react.api.Permissable MONITOR_TITLE -> LPVr
    react.api.Permissable MONITOR_ACTIONLOG -> TXOO
    react.api.Permissable MONITOR_MAP -> GAGq
    react.api.Permissable MONITOR_ENVIRONMENT -> rWTl
    react.api.Permissable MONITOR_GLASSES -> XmKy
    react.api.Permissable MONITOR_CHUNK_BLAME -> RAHC
    react.api.Permissable RAI_MONITOR -> nKHg
    react.api.Permissable RAI_CONTROL -> oEYe
    react.api.Permissable RAI_ACCESS -> VoWW
    react.api.Permissable RAI -> cKJA
    react.api.Permissable ACT -> bOug
    react.api.Permissable RELOAD -> LPXE
    java.lang.String node -> gqHA
    react.api.Permissable[] $VALUES -> Xlkq
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    27:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> afIq
    46:46:java.lang.String getNode() -> pGcA
    7:22:void <clinit>() -> <clinit>
react.api.PluginSelfDeleter -> EBXA:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> kInT
    java.lang.Runnable r -> MmNJ
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> afIq
react.api.ReactCommand -> rDxD:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> vtbQ
    java.lang.String usage -> gVss
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> gOCk
    react.api.SideGate sideGate -> DsRj
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> WhmJ
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> afIq
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> sXxv
    47:47:java.lang.String[] getPermissions() -> wTeH
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> lCct
react.api.ReactException -> GQNo:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> BSCE:
    react.glang.GMap keystore -> vImY
    boolean monitoring -> monitoring
    boolean highMonitor -> XljV
    boolean actionlogging -> hRFv
    boolean glasses -> twLL
    boolean mapping -> mrWX
    int monitorSelection -> cRwa
    int plays -> JuEU
    boolean monitorPosted -> vIlh
    int monitorLastSelection -> vIlf
    int switchNotification -> twLV
    int hotbarSlot -> mjFw
    boolean shift -> iLYD
    int scroll -> xOrd
    double lastHeight -> cmMr
    boolean heightMovement -> TysY
    org.bukkit.entity.Player p -> cSRM
    24:40:void <clinit>() -> <clinit>
    43:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> bWlF
    128:128:boolean isMapping() -> hanJ
    133:133:org.bukkit.entity.Player getP() -> EBXA
    138:140:void setMonitoring(boolean) -> YoSf
    144:146:void setMapping(boolean) -> jEpI
    150:150:int getMonitorSelection() -> rDxD
    155:157:void setMonitorSelection(int) -> jEpI
    161:161:int getHotbarSlot() -> GQNo
    166:168:void setHotbarSlot(int) -> UACx
    172:172:boolean isShifting() -> BSCE
    177:179:void setShifting(boolean) -> UACx
    183:183:boolean isShift() -> wehs
    188:190:void setShift(boolean) -> Hmbb
    194:194:int getScroll() -> MSAE
    199:201:void setScroll(int) -> Hmbb
    205:205:int getMonitorLastSelection() -> McaU
    210:212:void setMonitorLastSelection(int) -> WhmJ
    216:217:void setP(org.bukkit.entity.Player) -> YoSf
    221:221:double getLastHeight() -> rVYp
    226:228:void setLastHeight(double) -> afIq
    232:232:boolean isHeightMovement() -> xWiq
    237:239:void setHeightMovement(boolean) -> WhmJ
    243:243:int getSwitchNotification() -> yuAP
    248:250:void setSwitchNotification(int) -> sQKk
    254:254:boolean getMonitorPosted() -> iBlw
    259:261:void setMonitorPosted(boolean) -> sQKk
    265:265:int getPlays() -> xiMI
    270:272:void setPlays(int) -> Plhy
    276:276:boolean isGlasses() -> ktIG
    281:283:void setGlasses(boolean) -> Plhy
    287:287:boolean isActionlogging() -> CgFX
    292:294:void setActionlogging(boolean) -> kYuF
react.api.Record -> wehs:
    java.lang.String recordType -> JAbQ
    long recordTime -> lgHB
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> paRp
    32:32:long getRecordTime() -> owbC
    38:38:java.lang.Object getRecordObject() -> KChq
    react.json.JSONObject toJSON() -> MuEB
    void fromJSON(react.json.JSONObject) -> afIq
react.api.RecordBook -> MSAE:
    java.io.File recordFile -> BvAE
    react.json.JSONObject js -> TaBd
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> afIq
    79:87:react.api.IRecord getRecord(long) -> afIq
    react.api.IRecord createDummyRecord(long,java.lang.String) -> afIq
    95:107:long getOldestRecordTime() -> qRve
    113:125:long getLatestRecordTime() -> HnFF
    130:130:boolean within(long,long,long) -> afIq
    136:144:int countRecords(long,long) -> afIq
    150:162:react.glang.GMap getRecords(long,long) -> YoSf
    168:181:int purgeRecordsBefore(long) -> YoSf
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> McaU:
react.api.SampledChunk -> rVYp:
    org.bukkit.Chunk c -> bGfg
    react.glang.GMap counts -> AGdu
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> miMV
    26:38:void hit(react.api.ChunkIssue,int) -> afIq
    42:42:org.bukkit.Chunk getC() -> qJdn
    47:47:react.glang.GMap getCounts() -> qtxW
react.api.SampledType -> xWiq:
    react.api.SampledType ENTITY_TIME_LOCK -> esSh
    react.api.SampledType TILE_TIME_LOCK -> AHIU
    react.api.SampledType ENTITY_TIME -> EvYV
    react.api.SampledType TILE_TIME -> AGgm
    react.api.SampledType ENTITY_DROPTICK -> JBDA
    react.api.SampledType TILE_DROPTICK -> lxIG
    react.api.SampledType REDSTONE_TICK_USAGE -> MmOl
    react.api.SampledType REDSTONE_TICK -> wUdR
    react.api.SampledType REDSTONE_SECOND -> DbUT
    react.api.SampledType REDSTONE_TIME -> Drud
    react.api.SampledType HOPPER_TICK_USAGE -> Vnvg
    react.api.SampledType HOPPER_TICK -> MmNT
    react.api.SampledType HOPPER_SECOND -> HCkR
    react.api.SampledType HOPPER_TIME -> HDKs
    react.api.SampledType FLUID_TICK_USAGE -> DrtO
    react.api.SampledType FLUID_TICK -> dpPJ
    react.api.SampledType FLUID_SECOND -> CoqT
    react.api.SampledType FLUID_TIME -> OQQd
    react.api.SampledType TPS -> GHyJ
    react.api.SampledType TICK -> YpQX
    react.api.SampledType TIU -> baXs
    react.api.SampledType MEM -> PTUN
    react.api.SampledType FREEMEM -> KfhG
    react.api.SampledType MAXMEM -> nJhT
    react.api.SampledType ALLOCMEM -> OrtJ
    react.api.SampledType MAHS -> QWXK
    react.api.SampledType CHK_TIME -> DQTk
    react.api.SampledType EXPLOSION_TIME -> vIqp
    react.api.SampledType CHK -> FqNG
    react.api.SampledType ATASK -> pICG
    react.api.SampledType STASK -> QqMY
    react.api.SampledType CHKS -> nKLm
    react.api.SampledType ENT -> twRJ
    react.api.SampledType ENTLIV -> doqg
    react.api.SampledType ENTDROP -> VgKU
    react.api.SampledType ENTTILE -> sIYc
    java.lang.String node -> gqHA
    react.api.SampledType[] ENUM$VALUES -> CFAH
    6:43:void <clinit>() -> <clinit>
    49:49:react.api.ISampler get() -> DPVa
    55:55:java.lang.String toString() -> toString
    58:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> pGcA
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> yuAP:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> fvYO
    react.surge.util.C altColor -> PLHK
    int interval -> JkxU
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> eHDj
    49:49:react.surge.util.C getAltColor() -> DaYB
    55:55:int getInterval() -> getInterval
    void sample() -> kbge
    void construct() -> oxFU
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> afIq
    107:108:void setInterval(int) -> YoSf
react.api.Sector -> iBlw:
    int value() -> value
react.api.SelectionException -> xiMI:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> ktIG:
    react.api.SelectionMode WHITELIST -> jWqS
    react.api.SelectionMode BLACKLIST -> nJjd
    react.api.SelectionMode[] $VALUES -> kIrJ
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> CgFX:
    java.lang.Class objectType -> SfQM
    react.api.SelectionMode mode -> fBrY
    react.glang.GSet list -> qvXL
    react.glang.GSet possibilities -> BmQw
    int popoff -> oxbT
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> cJNi
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> Hmbb
    43:43:react.glang.GSet getList() -> IqHn
    49:49:react.glang.GSet getPossibilities() -> Fonq
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> WhmJ
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> sQKk
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> miMV:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> jEpI
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> WhmJ
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> Plhy
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> qJdn:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> qtxW:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> jEpI
    29:30:void add(org.bukkit.Chunk,int) -> afIq
    34:38:void add(org.bukkit.World) -> Plhy
    42:46:void addAll() -> SnEI
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> WhmJ
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> Plhy
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> DPVa:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> WhmJ
    87:87:java.lang.String getName() -> getName
react.api.Side -> SnEI:
    react.api.Side PLAYERS -> NNPg
    react.api.Side CONSOLE -> jrCd
    java.lang.String ss -> SvrN
    react.api.Side[] $VALUES -> paqm
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> DGdy
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> YoSf
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> DGdy:
    react.api.SideGate PLAYERS_ONLY -> UReD
    react.api.SideGate CONSOLES_ONLY -> vAaC
    react.api.SideGate ANYTHING -> CVbP
    react.api.SideGate[] $VALUES -> IFpp
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> afIq
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> DGdy$1:
    int[] $SwitchMap$react$api$SideGate -> ioAI
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> NxFx:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> NNSW
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> NxFx
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> dxFG:
    double wScale -> gpmW
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> afIq
react.api.SpecializedTickLimiter -> Gaos:
    double rMaxTime -> CWDl
    long rStartTime -> gFYe
    double rLastTime -> jhtm
    long rMark -> vcgK
    double tMaxTime -> oNRH
    react.gmath.Average atimes -> rplk
    react.gmath.Average adropped -> VUjK
    int droppedTicks -> NyGh
    boolean entityTick -> dxeU
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> dwda:
    react.glang.GList sources -> Mucj
    react.glang.GList splooge -> VVKN
    react.glang.GSet destroy -> gxan
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> afIq
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> YoSf
    void clipped(org.bukkit.Location) -> YoSf
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> jEpI
    boolean isAllowedSource(org.bukkit.Location) -> UACx
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> afIq
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> YoSf
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> jEpI
react.api.SploogeCounter$1 -> dwda$1:
    java.util.Iterator val$it -> nJmo
    org.bukkit.Location val$start -> dFBY
    int val$maxDistance -> LXnV
    react.api.SploogeCounter this$0 -> vuIJ
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> dwda$1$1:
    react.api.SploogeCounter$1 this$1 -> SUSP
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> XSBo:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> RkDP:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> MuEB
    38:49:void fromJSON(react.json.JSONObject) -> afIq
react.api.StackTraceRecordBook -> JtMc:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> YoSf
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> afIq
react.api.StackedEntity -> OPXW:
    org.bukkit.entity.LivingEntity entity -> aVKM
    int count -> count
    double rmx -> DIGa
    21:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> afIq
    46:46:int getAbsoluteMaxCount() -> dxFG
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> YoSf
    56:58:void update() -> update
    62:68:void signalSize() -> Gaos
    72:123:void updateHealth() -> dwda
    127:128:void heal(double) -> YoSf
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> XSBo
    142:142:int getEffectiveCount(double) -> jEpI
    147:147:double getEffectiveMaxHealth(int) -> kYuF
    152:152:double getRealMaxHealth() -> RkDP
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> afIq
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> dDcL:
    react.glang.GList headings -> hQlT
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> afIq
    24:24:int getMaxSelection() -> JtMc
    29:37:int left(int) -> hPlA
    42:50:int right(int) -> HBne
    55:55:react.api.MonitorHeading getHeadFor(int) -> tSmU
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> afIq
    83:100:java.lang.String getHotbarFor(int,boolean) -> afIq
react.api.Unused -> qSYu:
react.api.WorldConfig -> jhXW:
    boolean allowRai -> Gspe
    boolean allowActions -> jrFS
    boolean allowRelighting -> uOae
    boolean allowTileThrottling -> anyq
    boolean allowEntityThrottling -> IPEI
    boolean allowFastLeafDecay -> aMWo
    java.util.List assumeNoSideEffectsEntities -> KxMi
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> kYuF
    48:62:void save(org.bukkit.World) -> hPlA
    66:80:void load(org.bukkit.World) -> HBne
react.binject.BlockInjector -> HCSd:
    react.surge.util.Protocol protocol -> UIuJ
    java.lang.Class blocksClass -> Xuak
    13:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> afIq
    29:56:void inject() -> OPXW
    61:61:react.surge.util.Protocol getVersion() -> uVol
react.binject.IBlockInjector -> BJRY:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> afIq
    void add(int,java.lang.String,java.lang.Object) -> afIq
    java.lang.Object get(java.lang.String) -> get
    void inject() -> OPXW
    react.surge.util.Protocol getVersion() -> uVol
react.binject.InjectedBlock -> kHux:
    react.surge.util.Protocol getInjectProtocol() -> dDcL
    java.lang.String getInjectKey() -> qSYu
    java.lang.String getInjectCKey() -> jhXW
    int getInjectId() -> HCSd
react.binject.ReflectionUtil -> ofeN:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> afIq
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> afIq
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> afIq
    41:54:void setAccessible(java.lang.reflect.Field) -> afIq
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> afIq
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> afIq
react.binject.V10.BlockInjector10 -> FyDF:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> sQKk
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> afIq
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> afIq
react.binject.V11.BlockInjector11 -> wfMA:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> Plhy
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> afIq
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> afIq
react.binject.V12.BlockInjector12 -> dwgk:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> kYuF
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> afIq
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> afIq
react.binject.V8.BlockInjector8 -> dwhL:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> hPlA
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> afIq
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> afIq
react.binject.V9.BlockInjector9 -> vHuq:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> HBne
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> afIq
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> afIq
react.cache.CachedEntity -> kIWd:
    java.util.UUID uid -> dMqF
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> Pdxy
    double x -> x
    double y -> y
    double z -> z
    double vx -> qLFQ
    double vy -> fuyN
    double vz -> ohBj
    double dx -> SURA
    double dy -> NxfX
    double dz -> Jkxp
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> sQKk
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> BJRY
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> kHux
    120:121:void setVx(double) -> UACx
    125:125:double getVy() -> ofeN
    130:131:void setVy(double) -> Hmbb
    135:135:double getVz() -> FyDF
    140:141:void setVz(double) -> WhmJ
    145:145:double getDx() -> wfMA
    150:151:void setDx(double) -> sQKk
    155:155:double getDy() -> dwgk
    160:161:void setDy(double) -> Plhy
    165:165:double getDz() -> dwhL
    170:171:void setDz(double) -> kYuF
    175:175:java.util.UUID getUid() -> vHuq
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> xypT:
    int age -> ogax
    boolean ageLock -> vSER
    boolean breed -> wMVi
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> sQKk
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> kIWd
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> xypT
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> TVvn:
    org.bukkit.DyeColor dye -> nlsH
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> sQKk
    30:30:org.bukkit.DyeColor getDye() -> TVvn
    35:36:void setDye(org.bukkit.DyeColor) -> afIq
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> bqbC:
    react.glang.GList potionEffects -> JBIS
    boolean canPickupItems -> gOMX
    org.bukkit.inventory.ItemStack[] armorContents -> oEbb
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> GJAd
    double maxHealth -> maxHealth
    int maxAir -> NFDo
    int air -> kJWn
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> sQKk
    63:63:react.glang.GList getPotionEffects() -> bqbC
    68:69:void setPotionEffects(react.glang.GList) -> YoSf
    73:73:boolean isCanPickupItems() -> hkCO
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> doVX
    138:139:void setMaxAir(int) -> xGHf
    143:143:int getAir() -> xWmJ
    148:149:void setAir(int) -> PJfk
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> hkCO:
    boolean sheared -> FiAi
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> sQKk
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> doVX:
    org.bukkit.inventory.ItemStack is -> VUlR
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> sQKk
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> xWmJ:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> GPot:
    react.chronophysics.HopperDirection DOWN -> Bued
    react.chronophysics.HopperDirection NORTH -> lflS
    react.chronophysics.HopperDirection SOUTH -> jyxJ
    react.chronophysics.HopperDirection EAST -> DHhY
    react.chronophysics.HopperDirection WEST -> ndav
    int direction -> direction
    react.chronophysics.HopperDirection[] $VALUES -> aVMO
    6:6:react.chronophysics.HopperDirection[] values() -> values
    6:6:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> Hmbb
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> afIq
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> YoSf
    6:12:void <clinit>() -> <clinit>
react.chronophysics.HopperDirection$1 -> GPot$1:
    int[] $SwitchMap$react$chronophysics$HopperDirection -> iwVS
    23:23:void <clinit>() -> <clinit>
react.chronophysics.HopperWormhole -> SvWI:
    org.bukkit.block.Hopper source -> cCAR
    react.glang.GList path -> LHNU
    org.bukkit.block.Hopper destination -> dpVY
    18:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> GPot
    31:31:react.glang.GList getPath() -> SvWI
    36:36:org.bukkit.block.Hopper getDestination() -> FyCC
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> afIq
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> FyCC:
    org.bukkit.block.Hopper h -> hROY
    14:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> afIq
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> OPXM
    62:62:boolean isLockedByRedstone() -> CEFP
react.command.CommandAct -> OPXM:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> afIq
    186:192:react.text.RTX getBeginningRTX() -> Ixya
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> afIq
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> YoSf
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> jEpI
    331:346:react.glang.GList getSortedCommands() -> biPd
    351:358:int getPageSize(int) -> aTgj
    363:363:boolean isValidPage(int,int) -> afIq
    368:377:react.glang.GList getPage(int,int) -> YoSf
react.command.CommandActionLog -> CEFP:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
react.command.CommandCPUScore -> Ixya:
    16:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
react.command.CommandCapabilities -> biPd:
    20:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
react.command.CommandChunkBlame -> vYur:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
react.command.CommandChunkBlame$1 -> vYur$1:
    react.command.CommandChunkBlame this$0 -> GlCf
    org.bukkit.command.CommandSender val$sender -> gOLb
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> vYur$1$1:
    react.command.CommandChunkBlame$1 this$1 -> JuMN
    org.bukkit.command.CommandSender val$sender -> gOLb
    java.lang.String val$i -> TOfB
    react.glang.GMap val$top -> GQou
    int val$totalx -> wxLl
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> YgFh:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
react.command.CommandHelp -> vbgg:
    28:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> afIq
    81:87:react.text.RTX getBeginningRTX() -> Ixya
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> afIq
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> YoSf
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> jEpI
    208:215:react.glang.GList getSortedCommands() -> biPd
    220:227:int getPageSize(int) -> aTgj
    232:232:boolean isValidPage(int,int) -> afIq
    237:246:react.glang.GList getPage(int,int) -> YoSf
react.command.CommandHighMonitor -> BBBe:
    16:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
react.command.CommandMap -> AiSL:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
react.command.CommandMonitor -> wUJU:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
react.command.CommandReload -> aKya:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
react.command.CommandReload$1 -> aKya$1:
    org.bukkit.command.CommandSender val$sender -> gOLb
    react.command.CommandReload this$0 -> dpVb
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> aKya$1$1:
    react.command.CommandReload$1 this$1 -> neBV
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> eXid:
    28:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
    54:63:org.bukkit.inventory.ItemStack makeBook() -> vYur
    68:94:void addSpikePages(react.glang.GList) -> jEpI
    98:108:void addStatusPages(react.glang.GList) -> UACx
    112:129:int findSlot(org.bukkit.entity.Player) -> jEpI
react.command.CommandVersion -> LPCA:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> afIq
react.controller.ActionController -> vsmE:
    int kiv -> BCCI
    react.glang.GMap actions -> YhGK
    react.glang.GMap pending -> hQmn
    react.glang.GList tasks -> Bltn
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> afIq
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> YoSf
    141:141:react.api.IAction getAction(react.api.ActionType) -> afIq
    146:147:void registerAction(react.api.IAction) -> afIq
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> YgFh
    241:248:react.glang.GList getActionNames() -> vbgg
    24:24:void <clinit>() -> <clinit>
react.controller.BenchmarkController -> nRbn:
    react.api.CPUBenchmark finished -> aEJV
    boolean done -> ekHr
    int score -> Sehu
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    13:13:react.api.CPUBenchmark access$002(react.controller.BenchmarkController,react.api.CPUBenchmark) -> afIq
    13:13:boolean access$102(react.controller.BenchmarkController,boolean) -> afIq
    13:13:react.api.CPUBenchmark access$000(react.controller.BenchmarkController) -> afIq
react.controller.BenchmarkController$1 -> nRbn$1:
    react.controller.BenchmarkController this$0 -> XTEQ
    27:27:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
react.controller.BenchmarkController$1$1 -> nRbn$1$1:
    react.controller.BenchmarkController$1 this$1 -> jhyK
    32:32:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
react.controller.BenchmarkController$1$1$1 -> nRbn$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> lxQU
    37:37:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> bytJ:
    react.glang.GMap rangeMapping -> SoHq
    react.binject.IBlockInjector injector -> RtUs
    boolean injected -> tLdI
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> BBBe
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> AiSL
    115:115:react.binject.IBlockInjector getInjector() -> wUJU
    120:120:boolean isInjected() -> aKya
react.controller.ChronophyFluidController -> AXRv:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> VoAk:
    boolean firstTickList -> tUUR
    long firstTick -> GASF
    long lastTick -> HniP
    react.gmath.Average aCSMS -> XvID
    react.glang.GMap pluginLoads -> nvFa
    react.glang.GMap playerLoads -> WYSJ
    int serverLoads -> Hewm
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> eXid
    63:73:void tickNextTickList() -> LPCA
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> afIq
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> afIq
    171:171:boolean isFirstTickList() -> vsmE
    176:176:long getFirstTick() -> nRbn
    181:181:long getLastTick() -> bytJ
    186:186:react.gmath.Average getaCSMS() -> AXRv
    191:191:react.glang.GMap getPluginLoads() -> VoAk
    196:196:react.glang.GMap getPlayerLoads() -> KoBl
    201:201:int getServerLoads() -> vIYa
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> afIq
    29:29:int access$1(react.controller.ChunkController) -> YoSf
    29:29:void access$2(react.controller.ChunkController,int) -> afIq
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> jEpI
react.controller.ChunkController$1 -> VoAk$1:
    react.controller.ChunkController this$0 -> uyxy
    org.bukkit.event.world.ChunkLoadEvent val$e -> tvux
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> jEpI
    1:1:void run(java.lang.Object) -> afIq
react.controller.CommandController -> KoBl:
    react.glang.GList commands -> NyKq
    boolean k -> LadK
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> kYuF
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> hPlA
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> afIq
    317:317:react.glang.GList getCommands() -> Cwkd
    322:323:void setCommands(react.glang.GList) -> Hmbb
    327:327:boolean isK() -> ePXm
    332:333:void setK(boolean) -> hPlA
react.controller.EntityCullController -> vIYa:
    react.glang.GSet flags -> DIKc
    react.glang.GSet defer -> uqht
    react.glang.GMap maxs -> nTBm
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> FhDX
    172:180:int cull(org.bukkit.Chunk) -> UACx
    185:295:int partialCull(org.bukkit.Chunk) -> Hmbb
react.controller.EntityStackController -> Cwkd:
    react.glang.GList stacks -> AsFp
    20:22:void <init>() -> <init>
    27:28:void start() -> start
    33:34:void stop() -> stop
    39:54:void tick() -> tick
    59:112:void stack(react.glang.GList) -> WhmJ
    116:121:boolean isStacked(org.bukkit.entity.LivingEntity) -> jEpI
    126:139:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> UACx
    145:163:void on(org.bukkit.event.entity.EntityDamageEvent) -> afIq
    167:182:void merge(react.api.StackedEntity,react.api.StackedEntity) -> afIq
    186:252:void checkNear(org.bukkit.entity.LivingEntity) -> Hmbb
    257:297:void on(org.bukkit.event.entity.EntitySpawnEvent) -> afIq
react.controller.EntityStackController$1 -> Cwkd$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> wVMA
    react.controller.EntityStackController this$0 -> NEdn
    265:265:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    269:294:void run() -> run
react.controller.EventController -> ePXm:
    react.lagmap.LagMap map -> dMtS
    react.glang.GMap slots -> kIxP
    21:21:void <init>() -> <init>
    29:37:void start() -> start
    42:43:void stop() -> stop
    48:93:void tick() -> tick
    98:99:void on(org.bukkit.event.entity.EntityExplodeEvent) -> afIq
    104:105:void on(org.bukkit.event.entity.EntitySpawnEvent) -> afIq
    110:111:void on(org.bukkit.event.entity.EntityDeathEvent) -> afIq
    116:117:void on(org.bukkit.event.entity.EntityDamageEvent) -> afIq
    122:123:void on(org.bukkit.event.player.PlayerJoinEvent) -> afIq
    128:129:void on(org.bukkit.event.player.PlayerQuitEvent) -> afIq
react.controller.ExplosiveController -> FhDX:
    boolean firstTickList -> tUUR
    long firstTick -> GASF
    long lastTick -> HniP
    react.gmath.Average aCSMS -> XvID
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> eXid
    50:60:void tickNextTickList() -> LPCA
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> YoSf
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> afIq
    89:89:boolean isFirstTickList() -> vsmE
    94:94:long getFirstTick() -> nRbn
    99:99:long getLastTick() -> bytJ
    104:104:react.gmath.Average getaCSMS() -> AXRv
react.controller.FastDecayController -> hIAg:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> pIHB
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> afIq
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> afIq
    74:155:void checkBreak(org.bukkit.block.Block) -> jEpI
    159:190:void decay(org.bukkit.block.Block) -> UACx
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> Hmbb
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> hIAg
react.controller.FastDecayController$1 -> hIAg$1:
    react.controller.FastDecayController this$0 -> Tqil
    react.glang.GMap val$locs -> pHgK
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> jEpI
    99:99:boolean isAllowedSource(org.bukkit.Location) -> UACx
    105:124:void clipped(org.bukkit.Location) -> YoSf
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> afIq
react.controller.FastDecayController$1$1 -> hIAg$1$1:
    react.controller.FastDecayController$1 this$1 -> dFEH
    react.glang.GMap val$locs -> pHgK
    int val$i -> lDkL
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> hIAg$2:
    react.controller.FastDecayController this$0 -> Tqil
    org.bukkit.block.Block val$b -> iCrS
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FastDecayController$3 -> hIAg$3:
    int[] $SwitchMap$org$bukkit$TreeSpecies -> bipk
    201:201:void <clinit>() -> <clinit>
react.controller.FeatureController -> yksb:
    react.feature.INMSBinding trueBinding -> xipS
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> yksb
    85:85:java.lang.String getPackageVersion() -> CLul
    90:90:boolean hasBinding() -> HLHB
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> afIq
react.controller.FluidController -> CLul:
    react.glang.GSet ignore -> FhbM
    int flowsPerTick -> gppd
    int flowsPerSecond -> jhxX
    react.gmath.Average aFST -> AXsK
    react.gmath.Average aFSS -> sAOE
    react.gmath.Average aFSMS -> uGTd
    boolean firstTickList -> tUUR
    long firstTick -> GASF
    long lastTick -> HniP
    react.glang.GSet frozen -> tetF
    react.glang.GMap queue -> xXmn
    react.glang.GMap freezeTimes -> MugQ
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> WhmJ
    68:76:void checkChunks() -> xrCB
    80:97:void checkChunk(org.bukkit.Chunk) -> sQKk
    101:107:void queue(org.bukkit.block.Block) -> WhmJ
    111:111:boolean isFrozen(org.bukkit.Chunk) -> Plhy
    116:117:void freeze(org.bukkit.Chunk) -> kYuF
    121:127:void unfreeze(org.bukkit.Chunk) -> hPlA
    131:138:void freeze(org.bukkit.Chunk,long) -> afIq
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> eXid
    172:182:void tickNextTickList() -> LPCA
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> afIq
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> afIq
    248:248:react.glang.GSet getIgnore() -> hrrx
    253:253:int getTransfersPerTick() -> sQPo
    258:258:int getTransfersPerSecond() -> WiRc
    263:263:react.gmath.Average getaFST() -> nJQn
    268:268:react.gmath.Average getaFSS() -> NEEw
    273:273:react.gmath.Average getaFSMS() -> CxLD
    278:278:boolean isFirstTickList() -> vsmE
    283:283:long getFirstTick() -> nRbn
    288:288:long getLastTick() -> bytJ
    293:293:react.glang.GSet getFrozen() -> gxan
    298:298:react.glang.GMap getQueue() -> AWsM
    303:303:react.glang.GMap getFreezeTimes() -> OGgy
react.controller.GlassController -> HLHB:
    react.glang.GMap q -> jXWT
    react.glang.GList g -> tMCS
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> UACx
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> Hmbb
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> WhmJ
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> afIq
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> afIq
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> afIq
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> afIq
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> afIq
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> afIq
    36:36:react.glang.GList access$0(react.controller.GlassController) -> afIq
react.controller.GlassController$1 -> HLHB$1:
    react.controller.GlassController this$0 -> jrJO
    react.glang.GMap val$cc -> htSv
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> HLHB$1$1:
    react.controller.GlassController$1 this$1 -> xYNu
    org.bukkit.Location val$i -> lVOw
    org.bukkit.entity.Player val$j -> QFaY
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> xrCB:
    react.glang.GMap g -> awrb
    react.glang.GMap gr -> wVPK
    react.glang.GMap gra -> jqlc
    38:38:void <init>() -> <init>
    47:80:void start() -> start
    85:91:void stop() -> stop
    96:123:void tick() -> tick
    128:145:void on(org.bukkit.event.player.PlayerJoinEvent) -> afIq
    149:207:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> afIq
    212:252:void on(org.bukkit.event.player.PlayerMoveEvent) -> afIq
    258:258:void on(react.event.ReactScrollEvent) -> afIq
    262:314:void toggleMapping(org.bukkit.entity.Player) -> sQKk
    318:318:react.glang.GMap getG() -> FyEC
    323:323:react.glang.GMap getGr() -> RICC
    41:41:react.glang.GMap access$0(react.controller.GraphController) -> afIq
    40:40:react.glang.GMap access$1(react.controller.GraphController) -> YoSf
react.controller.GraphController$1 -> xrCB$1:
    react.controller.GraphController this$0 -> YNYJ
    1:60:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    65:78:void run() -> run
react.controller.GraphController$2 -> xrCB$2:
    react.controller.GraphController this$0 -> YNYJ
    1:96:void <init>(react.controller.GraphController) -> <init>
    101:105:void run() -> run
react.controller.GraphController$3 -> xrCB$3:
    react.controller.GraphController this$0 -> YNYJ
    org.bukkit.event.player.PlayerJoinEvent val$e -> stWO
    1:128:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    133:143:void run() -> run
react.controller.HopperController -> hrrx:
    react.glang.GSet ignore -> FhbM
    int transfersPerTick -> OkPH
    int transfersPerSecond -> TPLE
    react.gmath.Average aHST -> wENA
    react.gmath.Average aHSS -> Nxlu
    react.gmath.Average aHSMS -> dxkp
    boolean firstTickList -> tUUR
    long firstTick -> GASF
    long lastTick -> HniP
    react.glang.GSet frozen -> tetF
    react.glang.GMap queue -> xXmn
    react.glang.GMap freezeTimes -> MugQ
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> WhmJ
    65:73:void checkChunks() -> xrCB
    77:94:void checkChunk(org.bukkit.Chunk) -> sQKk
    98:104:void queue(org.bukkit.block.Block) -> WhmJ
    108:108:boolean isFrozen(org.bukkit.Chunk) -> Plhy
    113:114:void freeze(org.bukkit.Chunk) -> kYuF
    118:124:void unfreeze(org.bukkit.Chunk) -> hPlA
    128:135:void freeze(org.bukkit.Chunk,long) -> afIq
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> eXid
    169:179:void tickNextTickList() -> LPCA
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> afIq
    207:207:react.glang.GSet getIgnore() -> hrrx
    212:212:int getTransfersPerTick() -> sQPo
    217:217:int getTransfersPerSecond() -> WiRc
    222:222:react.gmath.Average getaHST() -> upgs
    227:227:react.gmath.Average getaHSS() -> FxdB
    232:232:react.gmath.Average getaHSMS() -> tdtH
    237:237:boolean isFirstTickList() -> vsmE
    242:242:long getFirstTick() -> nRbn
    247:247:long getLastTick() -> bytJ
    252:252:react.glang.GSet getFrozen() -> gxan
    257:257:react.glang.GMap getQueue() -> AWsM
    262:262:react.glang.GMap getFreezeTimes() -> OGgy
react.controller.HopperOvertickController -> sQPo:
    react.glang.GList possiblePlunge -> qwAh
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> jEpI
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> afIq
react.controller.LanguageController -> WiRc:
    java.io.File languageFolder -> ySci
    int oldVersion -> VfrT
    java.io.File dlf -> Qhdi
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> SCTW
    160:221:void downloadAll(boolean) -> HBne
    225:261:void downloadLanguage(java.lang.String) -> tSmU
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> xGHf
    315:315:java.io.File getFileForLanguage(java.lang.String) -> PJfk
    320:332:void writeDefaults() -> YVHG
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> afIq
    263:263:void access$1(react.controller.LanguageController) -> afIq
react.controller.LanguageController$1 -> WiRc$1:
    react.controller.LanguageController this$0 -> UuQc
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> WiRc$2:
    react.controller.LanguageController this$0 -> UuQc
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> afIq
react.controller.LanguageController$2$1 -> WiRc$2$1:
    react.controller.LanguageController$2 this$1 -> aEPB
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> afIq
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> afIq
    121:121:void onDownloadStarted(react.gnet.download.Download) -> afIq
    126:128:void onDownloadFinished(react.gnet.download.Download) -> YoSf
    134:134:void onDownloadFailed(react.gnet.download.Download) -> jEpI
react.controller.LanguageController$3 -> WiRc$3:
    react.controller.LanguageController this$0 -> UuQc
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> WiRc$3$1:
    react.controller.LanguageController$3 this$1 -> rybl
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> WiRc$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> Rbtg
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> WiRc$4:
    react.controller.LanguageController this$0 -> UuQc
    java.io.File val$dld -> YNXR
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> afIq
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> afIq
    245:245:void onDownloadStarted(react.gnet.download.Download) -> afIq
    250:251:void onDownloadFinished(react.gnet.download.Download) -> YoSf
    257:257:void onDownloadFailed(react.gnet.download.Download) -> jEpI
react.controller.MonitorController -> nJQn:
    int maxCooldown -> MTGM
    react.api.TitleMonitor titleMonitor -> wVNl
    react.glang.GMap posts -> CWKk
    react.slate.PhantomSlate sb -> hsvH
    boolean ready -> rpql
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> flmN
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> Plhy
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> kYuF
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> DYKn
    179:184:float calcVolume(react.api.ReactPlayer) -> afIq
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> hPlA
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> HBne
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> tSmU
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> xGHf
    219:223:void startMonitoring(org.bukkit.entity.Player) -> PJfk
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> aTgj
    242:247:void startActionLogging(org.bukkit.entity.Player) -> MdAd
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> mNyD
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> YoSf
    279:291:void processPlayer(react.api.ReactPlayer) -> jEpI
    296:296:void handleActionLog(org.bukkit.entity.Player) -> FonC
    300:324:void handleTriggers(react.api.ReactPlayer) -> UACx
    328:367:void handleScrolling(react.api.ReactPlayer) -> Hmbb
    371:399:void handleShifting(react.api.ReactPlayer) -> WhmJ
    403:425:void handlePosting(react.api.ReactPlayer) -> sQKk
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> afIq
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> afIq
    471:501:void tickMonitor(react.api.ReactPlayer) -> Plhy
    505:505:react.api.TitleMonitor getTitleMonitor() -> tnEy
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> afIq
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> afIq
    539:552:void onTick() -> pOvd
    556:578:void updateActionBoard() -> XceL
    583:583:java.lang.String getTickName() -> iCSF
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> afIq
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> afIq
    41:41:void access$2(react.controller.MonitorController,boolean) -> afIq
    41:41:boolean access$3(react.controller.MonitorController) -> YoSf
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> jEpI
react.controller.MonitorController$1 -> nJQn$1:
    react.controller.MonitorController this$0 -> QXCG
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> nJQn$2:
    react.controller.MonitorController this$0 -> QXCG
    1:556:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> NEEw:
    react.glang.GMap samples -> Empv
    19:19:void <init>() -> <init>
    26:29:void start() -> start
    34:36:void stop() -> stop
    43:43:void tick() -> tick
    47:48:void onRedstone(org.bukkit.Chunk) -> HBne
    52:53:void onHopper(org.bukkit.Chunk) -> tSmU
    57:58:void onFluid(org.bukkit.Chunk) -> xGHf
    63:64:void on(org.bukkit.event.world.ChunkUnloadEvent) -> afIq
    68:75:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> afIq
    82:102:void onTick() -> pOvd
    107:107:java.lang.String getTickName() -> iCSF
    112:112:react.glang.GMap getSamples() -> DHKF
react.controller.PhysicsController$1 -> NEEw$1:
    react.controller.PhysicsController this$0 -> giBe
    1:94:void <init>(react.controller.PhysicsController) -> <init>
    99:100:void run() -> run
react.controller.PlayerController -> CxLD:
    react.glang.GList players -> MBeA
    react.glang.GSet save -> FXDL
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> RQLS
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> afIq
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> OPRx
    113:113:react.glang.GList getPlayers() -> xXOW
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> afIq
react.controller.PlayerController$1 -> CxLD$1:
    react.glang.GList val$toSave -> jWww
    react.controller.PlayerController this$0 -> wpEB
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> gxan:
    react.rai.IRAI rai -> wfrW
    boolean raiEnabled -> wwtF
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    17:17:react.rai.IRAI access$000(react.controller.RAIController) -> afIq
react.controller.RAIController$1 -> gxan$1:
    react.controller.RAIController this$0 -> DkQq
    47:47:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> AWsM:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> jEpI
react.controller.ReactServerInfo -> OGgy:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> FgeD
    27:27:int dgetGameProtocol() -> SBvJ
    33:33:java.lang.String dgetGameVersion() -> cAdL
    39:39:java.lang.String dgetReactVersion() -> VCne
    45:45:int dgetMaxPlayers() -> kRNC
    51:58:react.glang.GList dgetConnectedPlayers() -> WqfS
    64:64:int dgetViewDistance() -> NLyO
    70:70:int dgetGamePort() -> KoDs
    76:76:java.lang.String dgetGameAddress() -> RIEe
    82:89:react.glang.GList dgetRemotePlugins() -> UkaE
    95:102:react.glang.GList dgetWorlds() -> cJVI
    108:108:react.glang.GList dgetActions() -> EeCW
    114:114:react.glang.GList dgetSamplers() -> sIBy
react.controller.RedstoneController -> FyEC:
    react.glang.GSet ignore -> FhbM
    react.glang.GSet frozen -> tetF
    react.glang.GMap queue -> xXmn
    react.glang.GMap freezeTimes -> MugQ
    int redstonePerTick -> JtsT
    int redstonePerSecond -> sRUr
    react.gmath.Average aRST -> sIeM
    react.gmath.Average aRSS -> EedP
    react.gmath.Average aRSMS -> xiuY
    boolean firstTickList -> tUUR
    long firstTick -> GASF
    long lastTick -> HniP
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> WhmJ
    95:101:void tick() -> tick
    105:113:void checkChunks() -> xrCB
    117:134:void checkChunk(org.bukkit.Chunk) -> sQKk
    138:144:void queue(org.bukkit.block.Block) -> WhmJ
    148:148:boolean isFrozen(org.bukkit.Chunk) -> Plhy
    153:154:void freeze(org.bukkit.Chunk) -> kYuF
    158:165:void flushTickList() -> eXid
    169:179:void tickNextTickList() -> LPCA
    183:189:void unfreeze(org.bukkit.Chunk) -> hPlA
    193:200:void freeze(org.bukkit.Chunk,long) -> afIq
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> afIq
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> afIq
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> afIq
    246:246:react.glang.GSet getIgnore() -> hrrx
    251:251:react.glang.GSet getFrozen() -> gxan
    256:256:react.glang.GMap getQueue() -> AWsM
    261:261:react.glang.GMap getFreezeTimes() -> OGgy
    266:266:int getRedstonePerTick() -> Lywf
    271:271:int getRedstonePerSecond() -> Grxf
    276:276:react.gmath.Average getaRST() -> loBn
    281:281:react.gmath.Average getaRSS() -> BIuN
    286:286:react.gmath.Average getaRSMS() -> QWBb
    291:291:boolean isFirstTickList() -> vsmE
    296:296:long getFirstTick() -> nRbn
    301:301:long getLastTick() -> bytJ
react.controller.RemoteController -> RICC:
    react.remote.server.RemoteServer remoteServer -> AsJI
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> cSEb
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    12:12:void access$000(react.controller.RemoteController) -> afIq
react.controller.RemoteController$1 -> RICC$1:
    react.controller.RemoteController this$0 -> LPfR
    20:20:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> RICC$2:
    react.controller.RemoteController this$0 -> LPfR
    37:37:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> xXQd
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> IqMk
react.controller.SampleController -> upgs:
    react.glang.GMap samplers -> FGDw
    react.surge.server.SuperSampler ss -> tCuf
    int cd -> PwEq
    28:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> RQTX
    69:74:void restartSuperSampler() -> HCVb
    78:79:void registerSampler(react.api.ISampler) -> jEpI
    83:83:react.api.ISampler getSampler(java.lang.String) -> aTgj
    88:131:void constructSamplers() -> pGiD
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> nlWM
    187:209:void onTick() -> pOvd
    214:214:java.lang.String getTickName() -> iCSF
    219:219:react.glang.GMap getSamplers() -> hast
    224:224:react.surge.server.SuperSampler getSs() -> doYn
    229:229:int getCd() -> WObd
    234:241:react.glang.GList getSamplerNames() -> GHcu
    25:25:react.surge.server.SuperSampler access$0(react.controller.SampleController) -> afIq
react.controller.SampleController$1 -> upgs$1:
    react.controller.SampleController this$0 -> gptu
    1:140:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> upgs$2:
    react.controller.SampleController this$0 -> gptu
    1:152:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> FxdB:
    java.lang.String ipa -> TOmM
    react.glang.GList failures -> PCaF
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> MdAd
    41:74:void checkForIP() -> ggae
    78:91:void scan(java.lang.Runnable) -> afIq
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> FxdB$1:
    react.controller.SecurityController this$0 -> kuRW
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> FxdB$2:
    java.lang.String val$ip -> JcrV
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> FxdB$3:
    java.lang.Thread val$t -> kuRT
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> tdtH:
    react.glang.GMap etl -> aNBB
    react.glang.GMap ttl -> EnTO
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> afIq
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> afIq
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> tSmU
    143:160:void releaseWorld(org.bukkit.World) -> xGHf
    164:181:double getUniversalEntityTick() -> tnHQ
    186:203:double getUniversalEntityLimit() -> ydFI
    208:225:double getUniversalTileLimit() -> MuJT
    230:247:double getUniversalTileTick() -> FVbh
    252:264:double getUniversalEntityDroppedTicks() -> VUPa
    269:281:double getUniversalTileDroppedTicks() -> STXU
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> afIq
    301:312:void setTileTickLimit(org.bukkit.World,double) -> YoSf
    316:321:double getEntityTickLimit(org.bukkit.World) -> PJfk
    326:331:double getTileTickLimit(org.bukkit.World) -> aTgj
    336:341:double getLastEntityTick(org.bukkit.World) -> MdAd
    346:351:double getLastTileTick(org.bukkit.World) -> mNyD
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> FonC
    366:371:double getTileDroppedTicks(org.bukkit.World) -> RQLS
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> afIq
react.controller.SpikeController -> SCTW:
    react.glang.GMap spikes -> kBLk
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> pOvd
    111:111:java.lang.String getTickName() -> iCSF
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> loBG
    128:160:void whoFuckingDidThis(react.glang.Callback) -> afIq
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> afIq
react.controller.SpikeController$1 -> SCTW$1:
    react.controller.SpikeController this$0 -> XJuq
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> SCTW$1$1:
    react.controller.SpikeController$1 this$1 -> SDXS
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> SCTW$2:
    react.controller.SpikeController this$0 -> XJuq
    react.glang.GMap val$vv -> ylvu
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> SCTW$3:
    react.controller.SpikeController this$0 -> XJuq
    java.lang.Thread val$t -> kuRT
    react.glang.Callback val$callback -> fnRe
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> YVHG:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> flmN:
    12:12:void <init>() -> <init>
    17:23:void start() -> start
    28:34:void stop() -> stop
    40:40:void tick() -> tick
    45:46:void on(org.bukkit.event.world.WorldUnloadEvent) -> afIq
react.event.ReactEvent -> DYKn:
    org.bukkit.event.HandlerList handlers -> Cxnk
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> tnEy:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> pOvd:
    react.event.ScrollDirection direction -> vSLt
    boolean cancellled -> QiFa
    int amount -> xsEy
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> oxJi
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> dDew
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> XceL:
    react.event.ScrollDirection DOWN -> XJuw
    react.event.ScrollDirection UP -> WbIf
    react.event.ScrollDirection[] $VALUES -> IrSJ
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.feature.INMSBinding -> iCSF:
    java.lang.String getPackageVersion() -> CLul
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> afIq
react.feature.NMSBinding -> DHKF:
    java.lang.String packageVersion -> HoOh
    8:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> CLul
react.feature.NMSBinding10 -> xXOW:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> afIq
react.feature.NMSBinding11 -> FgeD:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> afIq
react.feature.NMSBinding12 -> SBvJ:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> afIq
react.feature.NMSBinding8 -> cAdL:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> afIq
react.feature.NMSBinding9 -> VCne:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> afIq
react.gbench.Profiler -> kRNC:
    long nanos -> Emuo
    long startNano -> Tqpu
    long millis -> yKWw
    long startMillis -> vmCh
    double time -> hJIB
    boolean profiling -> JtuS
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> MdAd
    78:78:double getTicks() -> tLEV
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> pXjL
    93:93:double getHours() -> dVLH
    98:98:double getMilliseconds() -> DaaD
    103:103:long getNanoseconds() -> tnLI
    108:108:long getNanos() -> wCoY
    113:113:long getStartNano() -> WPFX
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> NxPL
    128:128:double getTime() -> srwm
    133:133:boolean isProfiling() -> RIFr
react.gconcurrent.A -> WqfS:
    react.gconcurrent.ParallelPoolManager mgr -> RAXS
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> WqfS$1:
    react.gconcurrent.A this$0 -> lERw
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> NLyO:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> KoDs:
    react.gconcurrent.QueueMode mode -> ETeD
    react.glang.GList threads -> gNtl
    int next -> qTbE
    int threadCount -> ArkF
    java.util.Queue squeue -> DYrR
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> QqYl
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> vuSV
    22:23:void syncQueue(react.gconcurrent.Execution) -> afIq
    long getNanoGate() -> ntjY
    29:42:void tickSyncQueue() -> bqhB
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> WGTs
    93:100:int getTotalQueueSize() -> KwWV
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> YoSf
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> WXVW
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> ogLn
    152:179:void updateThreadInformation() -> afTl
    183:215:react.gconcurrent.ParallelThread nextThread() -> ylXo
    220:226:void createThreads(int) -> mNyD
    230:230:react.gconcurrent.QueueMode getMode() -> OYOu
    235:235:int getNext() -> fTAm
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> gWCx
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> pinc
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> woDY
react.gconcurrent.ParallelThread -> RIEe:
    java.util.Queue queue -> NpaQ
    react.gconcurrent.ThreadInformation info -> QqYl
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> hPlA
    63:70:void execute(react.gconcurrent.Execution) -> jEpI
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> YoSf
    92:92:java.util.Queue getQueue() -> iKgo
    97:97:react.gconcurrent.ThreadInformation getInfo() -> qlrE
react.gconcurrent.QueueMode -> UkaE:
    react.gconcurrent.QueueMode ROUND_ROBIN -> xXua
    react.gconcurrent.QueueMode SMALLEST -> NElm
    react.gconcurrent.QueueMode[] ENUM$VALUES -> mXvY
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> cJVI:
    react.gconcurrent.ParallelPoolManager mgr -> RAXS
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> cJVI$1:
    react.gconcurrent.S this$0 -> FFfd
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> EeCW:
    long tick -> GQyn
    long atick -> DtEs
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> sIBy:
    double ticksPerSecond -> BJyQ
    int queuedSize -> LPgF
    boolean processing -> pkPj
    double utilization -> PmtW
    react.gmath.Average ticksPerSecondAverage -> LHWF
    long tick -> GQyn
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> xOcV
    33:35:void setTicksPerSecond(double) -> HBne
    39:39:int getQueuedSize() -> Vnec
    44:45:void setQueuedSize(int) -> FonC
    49:49:boolean isProcessing() -> FVdT
    54:55:void setProcessing(boolean) -> tSmU
    59:59:double getUtilization() -> hIDu
    64:65:void setUtilization(double) -> tSmU
    69:69:double getTicksPerSecondAverage() -> cRgB
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> LyxN
    89:89:int getId() -> getId
react.gformat.F -> Lywf:
    java.text.NumberFormat NF -> fnTe
    java.text.DecimalFormat DF -> jqoc
    java.lang.String[] NAMES -> DAAS
    java.math.BigInteger THOUSAND -> PnUm
    java.util.NavigableMap MAP -> MeMJ
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> mNyD
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> afIq
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> afIq
    201:221:java.lang.String timeLong(long,int) -> afIq
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> jEpI
    236:236:java.lang.String b(double) -> xGHf
    241:258:java.lang.String b(java.math.BigInteger) -> afIq
    263:267:void instantiate() -> gNSD
    279:279:java.lang.String fileSize(long) -> UACx
    292:292:java.lang.String memSize(long) -> Hmbb
    305:306:java.lang.String stamp(long) -> WhmJ
    322:349:java.lang.String ofSize(long,int) -> YoSf
    363:368:java.lang.String trim(java.lang.String,int) -> YoSf
    381:401:java.lang.String cname(java.lang.String) -> FonC
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> sQKk
    459:477:java.lang.String memx(long) -> Plhy
    491:492:java.lang.String f(long) -> kYuF
    504:505:java.lang.String f(int) -> RQLS
    519:528:java.lang.String f(double,int) -> YoSf
    544:553:java.lang.String fd(double,int) -> jEpI
    567:576:java.lang.String f(float,int) -> afIq
    587:587:java.lang.String f(double) -> PJfk
    598:598:java.lang.String f(float) -> afIq
    613:613:java.lang.String pc(double,int) -> UACx
    628:628:java.lang.String pc(float,int) -> YoSf
    641:641:java.lang.String pc(double) -> aTgj
    654:654:java.lang.String pc(float) -> YoSf
    670:670:java.lang.String pc(int,int,int) -> afIq
    684:684:java.lang.String pc(int,int) -> jEpI
    700:700:java.lang.String pc(long,long,int) -> afIq
    714:714:java.lang.String pc(long,long) -> UACx
    726:726:java.lang.String msSeconds(long) -> hPlA
    740:740:java.lang.String msSeconds(long,int) -> jEpI
    752:752:java.lang.String nsMs(long) -> HBne
    766:766:java.lang.String nsMs(long,int) -> UACx
    780:780:java.lang.String nsMsd(long,int) -> Hmbb
react.glang.AccessCallback -> Grxf:
    java.lang.Object get() -> get
react.glang.Adapter -> loBn:
    java.lang.Object adapt(java.lang.Object) -> WhmJ
    java.lang.Object onAdapt(java.lang.Object) -> sQKk
react.glang.Callback -> BIuN:
    java.lang.Object t -> WbHw
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> afIq
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> QWBb:
    double i -> EUDg
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> MdAd
react.glang.FinalFloat -> cSEb:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> jEpI
react.glang.FinalInteger -> xXQd:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> OPRx
react.glang.FinalLong -> IqMk:
    long i -> xGsE
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> tSmU
react.glang.FinalString -> RQTX:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> HCVb:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> WhmJ
    java.lang.Object onAdapt(java.lang.Object) -> sQKk
react.glang.GBiset -> pGiD:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> FOWG
    java.lang.Object b -> hkiQ
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> WrGl
    53:54:void setA(java.lang.Object) -> Plhy
    63:63:java.lang.Object getB() -> dLws
    73:74:void setB(java.lang.Object) -> kYuF
react.glang.GList -> nlWM:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> UACx
    45:52:react.glang.GList grepDistance(int,int) -> Hmbb
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> YoSf
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> OYOS
    188:190:react.glang.GList shuffleCopy() -> wnbR
    198:199:void shuffle() -> XciW
    210:236:react.glang.GList split() -> YxNm
    248:248:boolean hasIndex(int) -> XIlE
    258:259:java.lang.Object pickRandom() -> EJpb
    270:277:react.glang.GList stringList() -> KCqT
    288:292:void forEach(react.glang.Callback) -> YoSf
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> xykf
    336:336:react.glang.GList cropFrom(int) -> hsNX
    341:373:react.glang.GList split(int) -> kcFE
    389:389:react.glang.GList cropTo(int) -> lUGR
    406:416:react.glang.GList crop(int,int) -> WhmJ
    427:431:react.glang.GList removeDuplicates() -> Kvud
    442:446:void removeAll(java.lang.Object) -> hPlA
    455:455:boolean hasDuplicates() -> Fovh
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> BAhN
    484:490:void push(java.lang.Object,int) -> afIq
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> HBne
    528:532:void add(java.util.List) -> afIq
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> inKQ
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> mrGP
    626:627:react.glang.GList qdel(java.lang.Object) -> tSmU
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> inKU
    662:669:java.lang.Object popLast() -> skJg
    674:683:java.lang.Object popRandom() -> BSLY
react.glang.GListAdapter -> hast:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> YoSf
    java.lang.Object onAdapt(java.lang.Object) -> sQKk
react.glang.GMap -> doYn:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> xiYC
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> afIq
    64:81:react.glang.GMap flip() -> qTBp
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> afIq
    121:121:react.glang.GList k() -> XIlE
    131:131:react.glang.GSet kset() -> yuMA
    141:141:react.glang.GList v() -> pYPe
    151:151:react.glang.GSet vset() -> maHm
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> YoSf
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> sQKk
    209:219:react.glang.GMap removeDuplicateValues() -> EdfR
    233:242:void put(react.glang.GList,react.glang.GList) -> afIq
    251:267:react.glang.GList sortK() -> UkdR
    277:293:react.glang.GList sortV() -> gFEG
react.glang.GQuadraset -> WObd:
    java.lang.Object a -> FOWG
    java.lang.Object b -> hkiQ
    java.lang.Object c -> fUCH
    java.lang.Object d -> HMME
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> WrGl
    25:26:void setA(java.lang.Object) -> Plhy
    30:30:java.lang.Object getB() -> dLws
    35:36:void setB(java.lang.Object) -> kYuF
    40:40:java.lang.Object getC() -> VTuO
    45:46:void setC(java.lang.Object) -> xGHf
    50:50:java.lang.Object getD() -> inMk
    55:56:void setD(java.lang.Object) -> PJfk
react.glang.GSet -> GHcu:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> ggae:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> FOWG
    java.lang.Object b -> hkiQ
    java.lang.Object c -> fUCH
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> WrGl
    26:27:void setA(java.lang.Object) -> Plhy
    31:31:java.lang.Object getB() -> dLws
    36:37:void setB(java.lang.Object) -> kYuF
    41:41:java.lang.Object getC() -> VTuO
    46:47:void setC(java.lang.Object) -> xGHf
react.gmath.Average -> tnHQ:
    double[] values -> uYAT
    double average -> skkj
    boolean dirty -> SLlt
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> mNyD
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> PvGv
react.gmath.DoubleArrayUtils -> ydFI:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> afIq
    17:19:void wrapRight(double[]) -> afIq
    23:27:void fill(double[],double) -> fill
react.gmath.M -> MuJT:
    int precision -> qfFn
    int modulus -> rWga
    float[] sin -> JSUU
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> afIq
    31:36:boolean r(java.lang.Double) -> YoSf
    51:51:double tps(long,int) -> WhmJ
    63:63:double ticksFromNS(long) -> xGHf
    75:101:java.lang.String toRoman(int) -> uVol
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> sQKk
    144:216:int fromRoman(java.lang.String) -> RQLS
    226:226:long ns() -> hjjL
    236:236:long ms() -> PmWJ
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> YoSf
    333:333:float sinLookup(int) -> IWRm
react.gnet.client.Client -> FVbh:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> vtuQ
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> afIq
    74:74:react.gnet.packet.PacketHandler getHandler() -> NgPi
react.gnet.client.IClient -> VUPa:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> afIq
    react.gnet.packet.PacketHandler getHandler() -> NgPi
react.gnet.download.Download -> STXU:
    react.gnet.download.DownloadState state -> VNFu
    react.gnet.download.DownloadType type -> ogpS
    react.gnet.download.DownloadStatus status -> EUGh
    react.gnet.download.DownloadMonitor monitor -> nBiV
    java.net.URL url -> url
    java.io.File file -> YOAE
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> wwVc
    92:92:react.gnet.download.DownloadType getType() -> jNlr
    97:97:react.gnet.download.DownloadStatus getStatus() -> Fxju
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> QEfM
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> loBG:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> afIq
    void onDownloadStarted(react.gnet.download.Download) -> afIq
    void onDownloadFinished(react.gnet.download.Download) -> YoSf
    void onDownloadFailed(react.gnet.download.Download) -> jEpI
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> afIq
react.gnet.download.DownloadState -> oxJi:
    react.gnet.download.DownloadState IDLE -> QWiU
    react.gnet.download.DownloadState DOWNLOADING -> XSmP
    react.gnet.download.DownloadState FAILED -> ETfo
    react.gnet.download.DownloadState FINISHED -> hlMW
    react.gnet.download.DownloadState[] $VALUES -> UJdH
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> dDew:
    long bytesDownloaded -> oyQr
    long bytesTotal -> bbIs
    long bytesPerSecond -> ORBl
    long timeElapsed -> VVVV
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> jONW
    25:25:long getBytesDownloaded() -> DbBe
    30:31:void setBytesDownloaded(long) -> PJfk
    35:35:long getBytesTotal() -> FVey
    40:41:void setBytesTotal(long) -> aTgj
    45:45:long getBytesPerSecond() -> lvub
    50:51:void setBytesPerSecond(long) -> MdAd
    55:55:long getTimeElapsed() -> OQAB
    60:61:void setTimeElapsed(long) -> mNyD
react.gnet.download.DownloadType -> tLEV:
    react.gnet.download.DownloadType DETERMINATE -> Bdoc
    react.gnet.download.DownloadType INDETERMINATE -> hQyJ
    react.gnet.download.DownloadType[] $VALUES -> cBiL
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> pXjL:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> gowF
    java.lang.String getPacketName() -> VTsU
react.gnet.packet.IncompatablePacketException -> dVLH:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> DaaD:
    react.gnet.packet.PacketBinding SERVER_BOUND -> MdnA
    react.gnet.packet.PacketBinding CLIENT_BOUND -> DbdV
    react.gnet.packet.PacketBinding[] $VALUES -> ceMe
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> tnLI:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> wCoY:
    react.glang.GList accept -> IrTb
    react.gnet.packet.PacketBinding side -> aMds
    react.gnet.streams.OSS out -> UtvV
    react.gnet.streams.ISS in -> NySd
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> afIq
    28:34:void accept(react.gnet.packet.IPacket) -> YoSf
    38:46:react.gnet.packet.IPacket findPacket(int) -> NoTA
    51:66:react.gnet.packet.IPacket read() -> HKkU
    71:77:void write(react.gnet.packet.IPacket) -> jEpI
react.gnet.packet.UnhandledPacketException -> WPFX:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> NxPL:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> NgPi
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> UACx
react.gnet.server.Server -> srwm:
    int port -> port
    java.net.ServerSocket socket -> kdTD
    react.gnet.packet.PacketHandler handler -> vtuQ
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> NgPi
    37:84:void run() -> run
    88:91:void pstart() -> Diqy
    95:96:void pstop() -> mXWK
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> UACx
react.gnet.streams.ISS -> RIFr:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> VNFb
    boolean built -> SwaW
    byte[] readBuffer -> yeLE
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> KUHl
    64:72:react.glang.GList readStringList() -> SBxq
    77:85:react.glang.GList readDoubleList() -> vlCE
    90:98:react.glang.GList readLongList() -> oxPB
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> afIq
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> afIq
    136:137:react.gnet.streams.ISS gzip() -> ytiw
    142:147:void build() -> MAiK
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> YoSf
    435:436:void close() -> close
react.gnet.streams.OSS -> ntjY:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> rWfL
    react.gnet.streams.StreamBuilder bu -> VNFb
    boolean built -> SwaW
    byte[] writeBuffer -> jqpx
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> dxBo
    41:42:react.gnet.streams.OSS gzip(int) -> Tgrh
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> YoSf
    53:58:void build() -> MAiK
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> Plhy
    102:108:void writeDoubleList(react.glang.GList) -> kYuF
    112:118:void writeLongList(react.glang.GList) -> hPlA
    122:128:void writeStreamableList(react.glang.GList) -> HBne
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> VLcg
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> jEpI
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> bqhB:
    react.glang.GList constructors -> OQay
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> afIq
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> afIq
    49:50:void bind(react.gnet.streams.StreamConstructor) -> afIq
    54:55:void bindGZIP(int) -> vIQd
    59:60:void bindGZIP() -> jqPK
    64:65:void bindCipher(javax.crypto.Cipher) -> jEpI
    69:70:void bindBuffer(int) -> prSv
    74:75:void bindBuffer() -> Wyyt
react.gnet.streams.StreamConstructor -> WGTs:
    java.io.InputStream constructInput(java.io.InputStream) -> afIq
    java.io.OutputStream constructOutput(java.io.OutputStream) -> afIq
react.gnet.streams.constructors.BufferedStreamConstructor -> KwWV:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> YoSf
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> YoSf
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> afIq
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> afIq
react.gnet.streams.constructors.CipherStreamConstructor -> WXVW:
    javax.crypto.Cipher cipher -> inmv
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> jEpI
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> jEpI
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> afIq
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> afIq
react.gnet.streams.constructors.GZipStreamConstructor -> ogLn:
    int compressionLevel -> VxYn
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> UACx
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> UACx
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> afIq
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> afIq
react.gnet.streams.overlays.CGZIPInputStream -> afTl:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> ylXo:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> OYOu:
    void toBytes(react.gnet.streams.OSS) -> afIq
    void fromBytes(react.gnet.streams.ISS) -> afIq
react.graph.ColossalView -> fTAm:
    react.papyrus.BufferedFrame view -> IXao
    react.glang.GMap buffers -> sIjj
    react.glang.GMap graphs -> qTey
    double level -> vSTl
    double targetLevel -> vSUJ
    int maxX -> Jlhl
    int maxY -> FGJo
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> upnV
    51:77:void render() -> QhIE
    81:98:void scroll(int) -> oMMo
    102:112:void recompile() -> sHeP
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> afIq
    122:122:react.papyrus.BufferedFrame getView() -> anfO
    127:127:react.glang.GMap getBuffers() -> RkKo
    132:132:react.glang.GMap getGraphs() -> yAfD
    137:137:double getLevel() -> ydLy
    142:142:double getTargetLevel() -> MuPl
    147:147:int getMaxX() -> iKky
    152:152:int getMaxY() -> qBcF
react.graph.ColossalView$Builder -> fTAm$afIq:
    react.glang.GList graphs -> XurC
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> afIq
    171:191:react.graph.ColossalView compute() -> IiDf
react.graph.CubicleIterator -> gWCx:
    int[][] mapping -> iMOc
    int xCubes -> WQLR
    int yCubes -> ChTw
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> KTgu
    47:130:void insert(react.graph.GraphSize,int) -> afIq
    134:145:void print() -> print
react.graph.Graph2D -> pinc:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> afIq
react.graph.GraphLagMap -> woDY:
    org.bukkit.entity.Player viewer -> kKEb
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> KNJU
    27:30:void <init>(org.bukkit.entity.Player,java.lang.String,long) -> <init>
    35:143:void onRender(react.papyrus.BufferedFrame) -> afIq
    21:21:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> IGAf
react.graph.GraphSampleLine -> iKgo:
    double lx -> VMhW
    double ly -> pbcu
    react.api.ISampler sampler -> HfcW
    react.graph.IFormatter formatter -> uYBb
    byte graphColor -> NOCR
    byte backgroundColor -> HMRA
    byte borderColor -> eREP
    byte textColor -> XeQT
    int ticksLeftTitle -> qnXj
    int ticksOutTitle -> Sfbk
    double nextPoint -> IjHE
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> kbge
    51:183:void onRender(react.papyrus.BufferedFrame) -> afIq
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> YoSf
    226:254:int getHue(int,int,int) -> jEpI
    259:281:void scaleFor(react.glang.GList) -> tSmU
    285:285:react.graph.IFormatter getFormatter() -> TWUT
    290:291:void setFormatter(react.graph.IFormatter) -> afIq
    295:295:byte getGraphColor() -> rgiJ
    300:301:void setGraphColor(byte) -> afIq
    305:305:byte getBackgroundColor() -> RIJu
    310:311:void setBackgroundColor(byte) -> YoSf
    315:315:byte getBorderColor() -> qCDD
    320:321:void setBorderColor(byte) -> jEpI
    325:325:byte getTextColor() -> iwBL
    330:331:void setTextColor(byte) -> UACx
    335:335:react.api.ISampler getSampler() -> rFFl
react.graph.GraphSize -> qlrE:
    react.graph.GraphSize WIDE -> Voix
    react.graph.GraphSize FULL -> HwcX
    react.graph.GraphSize SQUARE -> wxYv
    react.graph.GraphSize[] $VALUES -> TrUn
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> PCFG
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> qlrE$1:
    int[] $SwitchMap$react$graph$GraphSize -> gWhY
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> xOcV:
    java.lang.String text -> text
    byte fontColor -> THCE
    byte backgroundColor -> HMRA
    boolean wrote -> FXLL
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> afIq
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> ETHM
    68:69:void setFontColor(byte) -> Hmbb
    73:73:byte getBackgroundColor() -> RIJu
    78:79:void setBackgroundColor(byte) -> YoSf
react.graph.GraphingInstance -> Vnec:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> XurC
    react.graph.ColossalView view -> vuUy
    react.papyrus.Papyrus papyrus -> DtHl
    react.papyrus.IRenderer renderer -> aNGr
    boolean mapping -> mrWX
    react.glang.GList msgs -> wNEo
    react.surge.sched.Task waiter -> PmyM
    react.surge.sched.Task waiter2 -> SoRu
    int shift -> curn
    int iv -> SUcE
    boolean notif -> bPll
    48:116:void <init>(org.bukkit.entity.Player) -> <init>
    121:126:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> afIq
    131:135:void on(org.bukkit.event.player.PlayerQuitEvent) -> afIq
    139:143:void send(java.lang.String) -> OPRx
    149:149:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> afIq
    154:166:void on(react.event.ReactScrollEvent) -> afIq
    171:176:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> afIq
    180:188:void destroy() -> destroy
    192:201:void toggle() -> kbsb
    205:206:void setGraphs(react.glang.GList) -> xGHf
    210:223:void enable() -> enable
    227:227:org.bukkit.inventory.ItemStack getItem() -> getItem
    232:237:void disable() -> disable
    241:245:void disableNoSave() -> UtXW
    249:249:org.bukkit.entity.Player getPlayer() -> getPlayer
    254:254:react.glang.GList getGraphs() -> PBdo
    259:259:react.graph.ColossalView getView() -> VfYY
    264:264:react.papyrus.Papyrus getPapyrus() -> GkOe
    269:270:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    274:275:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    279:280:void setView(react.graph.ColossalView) -> afIq
    284:285:void setPapyrus(react.papyrus.Papyrus) -> afIq
    289:290:void setRenderer(react.papyrus.IRenderer) -> afIq
    294:295:void setMapping(boolean) -> jEpI
    299:300:void setMsgs(react.glang.GList) -> PJfk
    304:305:void setWaiter(react.surge.sched.Task) -> afIq
    309:310:void setWaiter2(react.surge.sched.Task) -> YoSf
    314:315:void setShift(int) -> hbKv
    319:320:void setNotif(boolean) -> xGHf
    324:324:react.papyrus.IRenderer getRenderer() -> inPW
    329:329:boolean isMapping() -> hanJ
    334:334:react.glang.GList getMsgs() -> mhyQ
    339:339:react.surge.sched.Task getWaiter() -> oVNY
    344:344:react.surge.sched.Task getWaiter2() -> bhyW
    349:349:int getShift() -> getShift
    354:354:boolean isNotif() -> JRTU
    359:375:void compile() -> Ihbq
    379:394:void enableSly() -> oDlV
    398:406:void disableSly() -> IiDR
    40:40:boolean access$0(react.graph.GraphingInstance) -> afIq
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> YoSf
    46:46:boolean access$2(react.graph.GraphingInstance) -> jEpI
    46:46:void access$3(react.graph.GraphingInstance,boolean) -> afIq
    44:44:int access$4(react.graph.GraphingInstance) -> UACx
    44:44:void access$5(react.graph.GraphingInstance,int) -> afIq
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> Hmbb
react.graph.GraphingInstance$1 -> Vnec$1:
    react.graph.GraphingInstance this$0 -> uifG
    org.bukkit.entity.Player val$player -> htbO
    1:52:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    57:74:void run() -> run
react.graph.GraphingInstance$2 -> Vnec$2:
    react.graph.GraphingInstance this$0 -> uifG
    1:77:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    82:101:void run() -> run
react.graph.GraphingInstance$3 -> Vnec$3:
    react.graph.GraphingInstance this$0 -> uifG
    1:107:void <init>(react.graph.GraphingInstance) -> <init>
    112:114:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> afIq
react.graph.IFormatter -> FVdT:
    java.lang.String from(double) -> FonC
react.graph.IGraph -> hIDu:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> hPyP
    long getTimeViewport() -> xaHl
    void render(react.papyrus.BufferedFrame) -> jEpI
    double getMax() -> getMax
    void setMax(double) -> RQLS
react.graph.NormalGraph -> cRgB:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> LbQH
    long timeViewport -> DRIH
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> hPyP
    35:35:long getTimeViewport() -> xaHl
    41:42:void render(react.papyrus.BufferedFrame) -> jEpI
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> RQLS
    void onRender(react.papyrus.BufferedFrame) -> afIq
react.graph.PlotBoard -> LyxN:
    react.glang.GMap plots -> YODT
    int maxRecordings -> kmIi
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> bhyj
    33:33:long getAccurateTimeSpan() -> lCrj
    38:50:long getMedian(long,long) -> Hmbb
    55:55:long getMinimumAccuracyRange() -> JRUI
    60:70:double getMaxValue() -> Gjmi
    75:85:double getMinValue() -> TqTP
    90:90:react.glang.GList sort(react.glang.GMap) -> YoSf
    95:105:long earilestRecording() -> PeHM
    110:120:long latestRecording() -> QMyd
    125:126:void reduceBefore(long) -> FonC
    130:156:void reduceBetween(long,long) -> WhmJ
    160:160:boolean before(long,long) -> sQKk
    165:165:boolean after(long,long) -> Plhy
    170:170:boolean within(long,long,long) -> afIq
    175:193:react.glang.GMap getBetween(long,long) -> kYuF
    198:200:void plot(long,double) -> afIq
    204:204:boolean hasAt(long) -> RQLS
    209:209:double getAt(long) -> OPRx
    214:214:int getSize() -> getSize
react.graph.Point -> gNSD:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> WrGl:
    int iid -> ynBV
    react.graph.IGraph graph -> jaVD
    react.graph.GraphSize size -> xsOa
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> lTwc
    24:25:void setGraph(react.graph.IGraph) -> afIq
    29:29:react.graph.GraphSize getSize() -> XBMq
    34:35:void setSize(react.graph.GraphSize) -> afIq
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> dLws:
    react.graph.RenderMaxType UNLIMITED -> ebga
    react.graph.RenderMaxType LIMITED -> twcm
    react.graph.RenderMaxType[] $VALUES -> QWmb
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> OYOS:
    java.lang.String CRLF -> AsRA
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> XIlE
    162:198:java.lang.String toString(react.json.JSONObject) -> YoSf
react.json.HTTPTokener -> wnbR:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> XciW:
    java.util.ArrayList myArrayList -> dhVC
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> afIq
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> sXxv
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> wTeH
    394:399:react.json.JSONObject getJSONObject(int) -> lCct
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> xykf
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> paRp
    515:515:boolean optBoolean(int) -> owbC
    533:536:boolean optBoolean(int,boolean) -> YoSf
    551:551:double optDouble(int) -> MuEB
    569:572:double optDouble(int,double) -> afIq
    587:587:int optInt(int) -> KChq
    605:608:int optInt(int,int) -> Plhy
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> YoSf
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> afIq
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> afIq
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> afIq
    722:723:react.json.JSONArray optJSONArray(int) -> qRve
    737:738:react.json.JSONObject optJSONObject(int) -> HnFF
    752:752:long optLong(int) -> TWUT
    770:773:long optLong(int,long) -> afIq
    788:788:java.lang.String optString(int) -> eHDj
    803:804:java.lang.String optString(int,java.lang.String) -> afIq
    816:817:react.json.JSONArray put(boolean) -> PJfk
    830:831:react.json.JSONArray put(java.util.Collection) -> afIq
    845:848:react.json.JSONArray put(double) -> OPRx
    860:861:react.json.JSONArray put(int) -> DaYB
    873:874:react.json.JSONArray put(long) -> XIlE
    887:888:react.json.JSONArray put(java.util.Map) -> afIq
    902:903:react.json.JSONArray put(java.lang.Object) -> aTgj
    921:922:react.json.JSONArray put(int,boolean) -> jEpI
    939:940:react.json.JSONArray put(int,java.util.Collection) -> afIq
    958:959:react.json.JSONArray put(int,double) -> YoSf
    977:978:react.json.JSONArray put(int,int) -> kYuF
    996:997:react.json.JSONArray put(int,long) -> YoSf
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> afIq
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> afIq
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> MdAd
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> afIq
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> afIq
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> afIq
react.json.JSONException -> YxNm:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> VNIy
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> EJpb:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> afIq
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> hsNX
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> afIq
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> YoSf
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> XIlE
    379:456:java.lang.String toString(react.json.JSONArray) -> YoSf
    472:552:java.lang.String toString(react.json.JSONObject) -> YoSf
react.json.JSONObject -> KCqT:
    java.util.Map map -> map
    java.lang.Object NULL -> NpfI
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> afIq
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> YoSf
    480:499:java.lang.String doubleToString(double) -> XIlE
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> kcFE
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> lUGR
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> uVol
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> jEpI
    751:767:java.lang.String[] getNames(java.lang.Object) -> mNyD
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> IWRm
    855:855:boolean isNull(java.lang.String) -> NoTA
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> cRnF
    917:937:java.lang.String numberToString(java.lang.Number) -> afIq
    949:949:java.lang.Object opt(java.lang.String) -> KUHl
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> afIq
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> afIq
    1018:1018:boolean optBoolean(java.lang.String) -> dxBo
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> afIq
    1054:1054:double optDouble(java.lang.String) -> Tgrh
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> afIq
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> afIq
    1116:1119:double optDouble(java.lang.String,double) -> afIq
    1134:1134:int optInt(java.lang.String) -> vIQd
    1152:1155:int optInt(java.lang.String,int) -> jEpI
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> prSv
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> oMMo
    1198:1198:long optLong(java.lang.String) -> KTgu
    1216:1219:long optLong(java.lang.String,long) -> afIq
    1234:1234:java.lang.String optString(java.lang.String) -> hbKv
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> YoSf
    1255:1305:void populateMap(java.lang.Object) -> FonC
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> YoSf
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> afIq
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> YoSf
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> UACx
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> YoSf
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> afIq
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> jEpI
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> UACx
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> Hmbb
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> afIq
    1590:1590:java.lang.Object remove(java.lang.String) -> sXxv
    1605:1640:boolean similar(java.lang.Object) -> MdAd
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> RQLS
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> jEpI
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> afIq
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> afIq
    2000:2004:void indent(java.io.Writer,int) -> afIq
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> afIq
react.json.JSONObject$Null -> KCqT$afIq:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> Kvud:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> Fovh:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> BAhN:
    long character -> wpKe
    boolean eof -> eof
    long index -> oEoo
    long line -> OYun
    char previous -> WanS
    java.io.Reader reader -> reader
    boolean usePrevious -> ioSf
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> IGDU
    119:131:int dehexchar(char) -> afIq
    136:136:boolean end() -> xOjL
    147:153:boolean more() -> NUqt
    164:198:char next() -> next
    213:218:char next(char) -> YoSf
    233:250:java.lang.String next(int) -> kbge
    263:266:char nextClean() -> fKUp
    287:334:java.lang.String nextString(char) -> jEpI
    349:361:java.lang.String nextTo(char) -> UACx
    376:388:java.lang.String nextTo(java.lang.String) -> wTeH
    403:441:java.lang.Object nextValue() -> SvdU
    458:479:char skipTo(char) -> Hmbb
    491:491:react.json.JSONException syntaxError(java.lang.String) -> lCct
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> inKQ:
    int maxdepth -> LbOe
    boolean comma -> ogrx
    char mode -> wEVo
    react.json.JSONObject[] stack -> ioSN
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> paRp
    157:164:react.json.JSONWriter array() -> HmtE
    180:193:react.json.JSONWriter end(char,char) -> afIq
    206:206:react.json.JSONWriter endArray() -> AaNY
    219:219:react.json.JSONWriter endObject() -> CpGN
    235:258:react.json.JSONWriter key(java.lang.String) -> owbC
    274:285:react.json.JSONWriter object() -> dEPi
    299:310:void pop(char) -> WhmJ
    322:329:void push(react.json.JSONObject) -> UACx
    342:342:react.json.JSONWriter value(boolean) -> aTgj
    356:356:react.json.JSONWriter value(double) -> xykf
    369:369:react.json.JSONWriter value(long) -> xykf
    385:385:react.json.JSONWriter value(java.lang.Object) -> OPRx
react.json.XML -> mrGP:
    java.lang.Character AMP -> klgf
    java.lang.Character APOS -> pITB
    java.lang.Character BANG -> DHuh
    java.lang.Character EQ -> UAug
    java.lang.Character GT -> HxGR
    java.lang.Character LT -> ejvd
    java.lang.Character QUEST -> YOCd
    java.lang.Character QUOT -> EChh
    java.lang.Character SLASH -> AbRp
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> MuEB
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> afIq
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> XIlE
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> inKU:
    java.util.HashMap entity -> YWWA
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> FEkA
    108:133:java.lang.Object nextContent() -> TWcp
    149:166:java.lang.Object nextEntity(char) -> sQKk
    186:239:java.lang.Object nextMeta() -> MmBu
    261:334:java.lang.Object nextToken() -> iLNs
    354:420:boolean skipPast(java.lang.String) -> KChq
react.lagmap.LagMap -> skJg:
    react.glang.GMap chunks -> oNcu
    13:16:void <init>() -> <init>
    20:29:void pump() -> aDWi
    33:39:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> afIq
    43:49:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> afIq
    53:53:react.glang.GMap getChunks() -> SLQW
react.lagmap.LagMapChunk -> BSLY:
    int x -> x
    int z -> z
    react.glang.GMap hits -> HfgM
    13:16:void <init>(int,int) -> <init>
    20:26:void hit(react.api.ChunkIssue,double) -> afIq
    30:31:void hit(react.api.ChunkIssue) -> afIq
    35:35:int getX() -> getX
    40:40:int getZ() -> getZ
    45:45:react.glang.GMap getHits() -> ogSJ
    50:59:void pump() -> aDWi
react.papyrus.BufferedFrame -> xiYC:
    byte[][] frame -> qelT
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> afIq
    90:97:void write(byte) -> WhmJ
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> afIq
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> afIq
    131:145:java.awt.image.BufferedImage toBufferedImage() -> jNpv
    153:160:void writeRainbowMul() -> pPbj
    167:174:void writeRainbowAdd() -> jhdR
    181:191:void writeSparks() -> YVSL
    195:201:boolean write(int,int,byte) -> afIq
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> afIq
    233:250:void write(react.papyrus.BufferedFrame) -> UACx
    254:254:byte[][] getRawFrame() -> vJDG
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> qTBp:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> UACx
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> afIq
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> yuMA:
    org.bukkit.map.MapView getView() -> dwrk
    react.papyrus.BufferedFrame getFrameBuffer() -> MmAc
    void addRenderer(react.papyrus.IRenderer) -> YoSf
    void clearRenderers() -> WrNT
    react.glang.GList getRenderers() -> MuRW
    void removeRenderer(react.papyrus.IRenderer) -> jEpI
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> lCuV
react.papyrus.IRenderer -> pYPe:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> afIq
react.papyrus.Papyrus -> maHm:
    org.bukkit.map.MapView map -> XLCO
    react.papyrus.BufferedFrame frameBuffer -> dFSx
    react.papyrus.BufferedFrame lastFrameBuffer -> kBXY
    react.glang.GList renderers -> iEDB
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> dwrk
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> MmAc
    51:52:void addRenderer(react.papyrus.IRenderer) -> YoSf
    57:58:void clearRenderers() -> WrNT
    63:63:react.glang.GList getRenderers() -> MuRW
    69:70:void removeRenderer(react.papyrus.IRenderer) -> jEpI
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> lCuV
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> YoSf
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> jEpI
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> UACx
react.papyrus.Papyrus$1 -> maHm$1:
    org.bukkit.map.MapCanvas val$c -> rhoX
    org.bukkit.map.MapView val$v -> nmdb
    react.papyrus.Papyrus this$0 -> oWVK
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> EdfR:
    int spaceSize -> LIAP
    java.lang.String fontChars -> kljk
    int[][] fontData -> ujIC
    react.papyrus.ReactFont Font -> yBoG
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> UkdR:
    react.glang.GList subgoals -> OYyn
    java.lang.String tag -> MCSU
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> yAjV
    26:44:void propigate() -> IqUy
    49:50:void addGoal(react.rai.IGoal) -> afIq
    55:65:react.glang.GList getFailingSubgoals() -> upsQ
    71:71:boolean isFailing() -> EKWa
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> yIyq
    void onPropigated() -> KnkX
react.rai.Goal$1 -> UkdR$1:
    react.rai.IGoal val$i -> CgyR
    react.rai.Goal this$0 -> DQiy
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> gFEG:
    react.glang.GList getSubgoals() -> yAjV
    void propigate() -> IqUy
    void onPropigated() -> KnkX
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> upsQ
    boolean isFailing() -> EKWa
    boolean onCheckFailing() -> yIyq
    void update() -> update
    void addGoal(react.rai.IGoal) -> afIq
react.rai.IRAI -> VTuO:
    react.glang.GList getGoals() -> preJ
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> afIq
    react.glang.GList getEvents() -> aDWH
    void callEvent(react.rai.RAIEvent) -> afIq
    react.glang.GList getListeners() -> AOlb
react.rai.RAI -> inMk:
    react.glang.GList goals -> cLCJ
    react.glang.GList events -> iVDf
    react.glang.GList logEvents -> eRHJ
    react.glang.GList listeners -> Ljai
    long since -> HoVp
    react.rai.RAI instance -> tMRJ
    22:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> preJ
    41:42:void addGoal(react.rai.IGoal) -> afIq
    47:77:void tick() -> tick
    82:82:react.glang.GList getEvents() -> aDWH
    88:95:void callEvent(react.rai.RAIEvent) -> afIq
    100:100:react.glang.GList getListeners() -> AOlb
react.rai.RAIEvent -> PvGv:
    react.rai.RAIEventType type -> bbOy
    java.lang.String[] pars -> ETka
    java.lang.String ovt -> huCm
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> vAQp
    29:29:java.lang.String[] getPars() -> JkiE
    34:34:java.lang.String getOvt() -> SKnn
react.rai.RAIEventType -> hjjL:
    react.rai.RAIEventType FIRE_ACTION -> IGel
    react.rai.RAIEventType NOTE_GOAL_FAILING -> OQgs
    react.rai.RAIEventType NOTE_GOAL_FIXED -> tnst
    java.lang.String[] msgs -> PULQ
    react.rai.RAIEventType[] $VALUES -> SUdW
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> hHix
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> afIq
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedEntityCounts -> PmWJ:
    boolean failing -> YqHo
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> yIyq
    91:134:void onPropigated() -> KnkX
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> afIq
react.rai.goals.GoalReducedEntityCounts$1 -> PmWJ$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> Cphp
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> PmWJ$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> Cphp
    org.bukkit.Chunk val$lx -> oNbh
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> NgPi:
    boolean failing -> YqHo
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> yIyq
    78:128:void onPropigated() -> KnkX
react.rai.goals.GoalStableChunkTime$1 -> NgPi$1:
    react.rai.goals.GoalStableChunkTime this$0 -> kmKM
    1:54:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> NgPi$2:
    react.rai.goals.GoalStableChunkTime this$0 -> kmKM
    java.lang.Object val$i -> nSoo
    1:111:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> wwVc:
    boolean failing -> YqHo
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> KnkX
    35:35:void letUp() -> Mcrb
    40:77:boolean onCheckFailing() -> yIyq
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> afIq
react.rai.goals.GoalStableEntityTime$1 -> wwVc$1:
    react.rai.goals.GoalStableEntityTime this$0 -> ceTI
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> jNlr:
    boolean failing -> YqHo
    react.glang.GMap reocc -> xPlb
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> KnkX
    88:125:boolean onCheckFailing() -> yIyq
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> afIq
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> YoSf
react.rai.goals.GoalStableFluidTime$1 -> jNlr$1:
    react.rai.goals.GoalStableFluidTime this$0 -> EDLH
    org.bukkit.Chunk val$lx -> oNbh
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> jNlr$2:
    react.rai.goals.GoalStableFluidTime this$0 -> EDLH
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> Fxju:
    boolean failing -> YqHo
    react.glang.GMap reocc -> xPlb
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> KnkX
    89:125:boolean onCheckFailing() -> yIyq
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> afIq
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> YoSf
react.rai.goals.GoalStableHopperTime$1 -> Fxju$1:
    react.rai.goals.GoalStableHopperTime this$0 -> dyXW
    org.bukkit.Chunk val$lx -> oNbh
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> Fxju$2:
    react.rai.goals.GoalStableHopperTime this$0 -> dyXW
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> QEfM:
    boolean failing -> YqHo
    react.glang.GMap reocc -> xPlb
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> KnkX
    89:126:boolean onCheckFailing() -> yIyq
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> afIq
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> YoSf
react.rai.goals.GoalStableRedstoneTime$1 -> QEfM$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> BBrT
    org.bukkit.Chunk val$lx -> oNbh
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> QEfM$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> BBrT
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> jONW:
    boolean failing -> YqHo
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> KnkX
    34:58:boolean onCheckFailing() -> yIyq
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> afIq
react.rai.goals.GoalStableTickTime$1 -> jONW$1:
    react.rai.goals.GoalStableTickTime this$0 -> NhXY
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> DbBe:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> UJiL
    boolean authenticated -> TXij
    react.remote.server.ServerInfo info -> fenY
    react.glang.GMap frems -> IGiS
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> oxFU
    51:51:react.glang.GMap getFrames() -> EeMP
    56:75:int computeFrames() -> Yftp
    80:92:boolean clearToken() -> PJyB
    97:110:boolean updateServerInfo() -> CVTy
    115:129:boolean refreshToken() -> KoOU
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> jEpI
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> oUre
    165:165:boolean isAuthenticated() -> TNtq
    170:170:react.remote.server.ServerInfo getInfo() -> DsKm
react.remote.client.packet.CPacketClearToken -> FVey:
    java.lang.String token -> UJiL
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> afIq
    33:34:void fromBytes(react.gnet.streams.ISS) -> afIq
    38:38:java.lang.String getToken() -> oUre
    43:44:void setToken(java.lang.String) -> qRve
react.remote.client.packet.CPacketComputeFrames -> lvub:
    java.lang.String token -> UJiL
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> afIq
    33:34:void fromBytes(react.gnet.streams.ISS) -> afIq
    38:38:java.lang.String getToken() -> oUre
    43:44:void setToken(java.lang.String) -> qRve
react.remote.client.packet.CPacketGetInfo -> OQAB:
    java.lang.String token -> UJiL
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> afIq
    33:34:void fromBytes(react.gnet.streams.ISS) -> afIq
    38:38:java.lang.String getToken() -> oUre
    43:44:void setToken(java.lang.String) -> qRve
react.remote.client.packet.CPacketGetToken -> gowF:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> afIq
    36:38:void fromBytes(react.gnet.streams.ISS) -> afIq
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> VTsU:
    java.lang.String token -> UJiL
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> afIq
    33:34:void fromBytes(react.gnet.streams.ISS) -> afIq
    38:38:java.lang.String getToken() -> oUre
    43:44:void setToken(java.lang.String) -> qRve
react.remote.client.packet.ClientPacket -> HKkU:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> afIq
    void fromBytes(react.gnet.streams.ISS) -> afIq
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> gowF
    42:42:java.lang.String getPacketName() -> VTsU
react.remote.client.packet.ClientPacketType -> Diqy:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> apRI
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> nStG
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> RJTE
    react.remote.client.packet.ClientPacketType GET_INFO -> oNei
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> AbUC
    react.remote.client.packet.ClientPacketType[] $VALUES -> xaqP
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> mXWK:
    react.glang.GMap compute(long,long) -> jEpI
react.remote.server.KnownUser -> SBxq:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> vlCE:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> afIq
    38:41:void fromBytes(react.gnet.streams.ISS) -> afIq
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> oxPB:
    react.glang.GList users -> PoBV
    react.glang.GMap session -> XTVY
    react.glang.GMap lastCompute -> Fqds
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> xXQd
    44:45:void registerUser(react.remote.server.KnownUser) -> afIq
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> YoSf
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> HnFF
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> UACx
    react.remote.server.IFrameComputer getFrameComputer() -> IqMk
    170:171:void markLastCompute(react.remote.server.KnownUser) -> jEpI
    175:180:long getLastCompute(react.remote.server.KnownUser) -> UACx
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> afIq
    190:191:void deleteSession(react.remote.server.KnownUser) -> Hmbb
    195:195:java.lang.String createToken() -> WqqO
react.remote.server.ServerInfo -> ytiw:
    java.lang.String motd -> aNNw
    int gameProtocol -> wNNA
    java.lang.String gameVersion -> JKNL
    java.lang.String reactVersion -> THIn
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> MeWC
    int viewDistance -> viewDistance
    int gamePort -> jXhK
    java.lang.String gameAddress -> VoqB
    react.glang.GList remotePlugins -> vJhi
    react.glang.GList worlds -> bQPk
    react.glang.GList actions -> TYJP
    react.glang.GList samplers -> vJhm
    26:26:react.remote.server.ServerInfo empty() -> ESjm
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> afIq
    146:159:void fromBytes(react.gnet.streams.ISS) -> afIq
    java.lang.String dgetMotd() -> FgeD
    int dgetGameProtocol() -> SBvJ
    java.lang.String dgetGameVersion() -> cAdL
    java.lang.String dgetReactVersion() -> VCne
    int dgetMaxPlayers() -> kRNC
    react.glang.GList dgetConnectedPlayers() -> WqfS
    int dgetViewDistance() -> NLyO
    int dgetGamePort() -> KoDs
    java.lang.String dgetGameAddress() -> RIEe
    react.glang.GList dgetRemotePlugins() -> UkaE
    react.glang.GList dgetWorlds() -> cJVI
    react.glang.GList dgetActions() -> EeCW
    react.glang.GList dgetSamplers() -> sIBy
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> lUYs
    199:199:java.lang.String getGameVersion() -> xrPC
    204:204:java.lang.String getReactVersion() -> CgWh
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> CgWi
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> NgWP
    229:229:java.lang.String getGameAddress() -> AjBA
    234:234:react.glang.GList getRemotePlugins() -> qBgE
    239:239:react.glang.GList getWorlds() -> pHTd
    244:244:react.glang.GList getActions() -> YgFh
    249:249:react.glang.GList getSamplers() -> MtuI
react.remote.server.ServerInfo$1 -> ytiw$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> cJVI
    37:37:int dgetViewDistance() -> NLyO
    43:43:react.glang.GList dgetRemotePlugins() -> UkaE
    49:49:java.lang.String dgetReactVersion() -> VCne
    55:55:java.lang.String dgetMotd() -> FgeD
    61:61:int dgetMaxPlayers() -> kRNC
    67:67:java.lang.String dgetGameVersion() -> cAdL
    73:73:int dgetGameProtocol() -> SBvJ
    79:79:int dgetGamePort() -> KoDs
    85:85:java.lang.String dgetGameAddress() -> RIEe
    91:91:react.glang.GList dgetConnectedPlayers() -> WqfS
    97:97:react.glang.GList dgetActions() -> EeCW
    103:103:react.glang.GList dgetSamplers() -> sIBy
react.remote.server.packet.ComputedFrame -> MAiK:
    react.glang.GMap values -> AICl
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> afIq
    28:36:void fromBytes(react.gnet.streams.ISS) -> afIq
    40:40:react.glang.GMap getValues() -> LrPn
    45:46:void setValues(react.glang.GMap) -> jEpI
react.remote.server.packet.SPacketOk -> VLcg:
    boolean ok -> OcLi
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> afIq
    33:34:void fromBytes(react.gnet.streams.ISS) -> afIq
    38:38:boolean isOk() -> Mlbg
    43:44:void setOk(boolean) -> MdAd
react.remote.server.packet.SPacketSendFrames -> jqPK:
    react.glang.GMap frames -> EUNu
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> afIq
    36:44:void fromBytes(react.gnet.streams.ISS) -> afIq
    48:48:react.glang.GMap getFrames() -> EeMP
    53:54:void setFrames(react.glang.GMap) -> UACx
react.remote.server.packet.SPacketSendInfo -> Wyyt:
    react.remote.server.ServerInfo info -> fenY
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> afIq
    33:34:void fromBytes(react.gnet.streams.ISS) -> afIq
    38:38:react.remote.server.ServerInfo getInfo() -> DsKm
    43:44:void setInfo(react.remote.server.ServerInfo) -> afIq
react.remote.server.packet.SPacketSendToken -> upnV:
    java.lang.String token -> UJiL
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> afIq
    33:34:void fromBytes(react.gnet.streams.ISS) -> afIq
    38:38:java.lang.String getToken() -> oUre
    43:44:void setToken(java.lang.String) -> qRve
react.remote.server.packet.ServerPacket -> QhIE:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> afIq
    void fromBytes(react.gnet.streams.ISS) -> afIq
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> gowF
    42:42:java.lang.String getPacketName() -> VTsU
react.remote.server.packet.ServerPacketType -> sHeP:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> NVwk
    react.remote.server.packet.ServerPacketType SEND_INFO -> sSAp
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> ohXH
    react.remote.server.packet.ServerPacketType OK -> bHcI
    react.remote.server.packet.ServerPacketType[] $VALUES -> fClx
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> anfO:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleAsyncQueue$1 -> anfO$1:
    react.sampler.SampleAsyncQueue this$0 -> bPrn
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleChunkTime -> RkKo:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleChunkTime$1 -> RkKo$1:
    react.sampler.SampleChunkTime this$0 -> Vgbs
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleChunksLoaded -> yAfD:
    react.graph.IFormatter formatter -> uYBb
    17:27:void <init>() -> <init>
    32:38:void construct() -> oxFU
    43:44:void sample() -> kbge
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleChunksLoaded$1 -> yAfD$1:
    react.sampler.SampleChunksLoaded this$0 -> Qyux
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> FonC
react.sampler.SampleChunksLoadedPerSecond -> ydLy:
    react.gmath.Average a -> vJko
    react.graph.IFormatter formatter -> uYBb
    16:29:void <init>() -> <init>
    34:40:void construct() -> oxFU
    45:47:void sample() -> kbge
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleChunksLoadedPerSecond$1 -> ydLy$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> axdO
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> FonC
react.sampler.SampleEntitiesDrops -> MuPl:
    react.graph.IFormatter formatter -> uYBb
    17:27:void <init>() -> <init>
    32:38:void construct() -> oxFU
    43:44:void sample() -> kbge
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleEntitiesDrops$1 -> MuPl$1:
    react.sampler.SampleEntitiesDrops this$0 -> iUgy
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> FonC
react.sampler.SampleEntitiesLiving -> iKky:
    react.graph.IFormatter formatter -> uYBb
    17:27:void <init>() -> <init>
    32:38:void construct() -> oxFU
    43:44:void sample() -> kbge
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleEntitiesLiving$1 -> iKky$1:
    react.sampler.SampleEntitiesLiving this$0 -> iEFk
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> FonC
react.sampler.SampleEntitiesTiles -> qBcF:
    react.graph.IFormatter formatter -> uYBb
    17:27:void <init>() -> <init>
    32:38:void construct() -> oxFU
    43:44:void sample() -> kbge
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleEntitiesTiles$1 -> qBcF$1:
    react.sampler.SampleEntitiesTiles this$0 -> LsYG
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> FonC
react.sampler.SampleEntitiesTotal -> IiDf:
    react.graph.IFormatter formatter -> uYBb
    17:27:void <init>() -> <init>
    32:38:void construct() -> oxFU
    43:44:void sample() -> kbge
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleEntitiesTotal$1 -> IiDf$1:
    react.sampler.SampleEntitiesTotal this$0 -> sIrb
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> FonC
react.sampler.SampleEntityDroppedTicks -> IGAf:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleEntityDroppedTicks$1 -> IGAf$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> ySuG
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleEntityTime -> rgiJ:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleEntityTime$1 -> rgiJ$1:
    react.sampler.SampleEntityTime this$0 -> FiWI
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleEntityTimeLock -> RIJu:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleEntityTimeLock$1 -> RIJu$1:
    react.sampler.SampleEntityTimeLock this$0 -> AIEH
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleExplosionTime -> qCDD:
    react.graph.IFormatter formatter -> uYBb
    17:27:void <init>() -> <init>
    32:38:void construct() -> oxFU
    43:44:void sample() -> kbge
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleExplosionTime$1 -> qCDD$1:
    react.sampler.SampleExplosionTime this$0 -> RJUn
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> FonC
react.sampler.SampleFluidPerSecond -> iwBL:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleFluidPerSecond$1 -> iwBL$1:
    react.sampler.SampleFluidPerSecond this$0 -> aWBa
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleFluidPerTick -> rFFl:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    46:53:void sample() -> kbge
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleFluidPerTick$1 -> rFFl$1:
    react.sampler.SampleFluidPerTick this$0 -> rysx
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleFluidTickTime -> PCFG:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleFluidTickTime$1 -> PCFG$1:
    react.sampler.SampleFluidTickTime this$0 -> FPEX
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleFluidTickUtilization -> ETHM:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    46:53:void sample() -> kbge
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleFluidTickUtilization$1 -> ETHM$1:
    react.sampler.SampleFluidTickUtilization this$0 -> rPBO
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleHopperPerSecond -> kbsb:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleHopperPerSecond$1 -> kbsb$1:
    react.sampler.SampleHopperPerSecond this$0 -> HUiy
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleHopperPerTick -> UtXW:
    react.graph.IFormatter formatter -> uYBb
    18:29:void <init>() -> <init>
    34:40:void construct() -> oxFU
    47:54:void sample() -> kbge
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleHopperPerTick$1 -> UtXW$1:
    react.sampler.SampleHopperPerTick this$0 -> DRMc
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleHopperTickTime -> PBdo:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleHopperTickTime$1 -> PBdo$1:
    react.sampler.SampleHopperTickTime this$0 -> kloD
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleHopperTickUtilization -> VfYY:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    46:53:void sample() -> kbge
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleHopperTickUtilization$1 -> VfYY$1:
    react.sampler.SampleHopperTickUtilization this$0 -> GAco
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleMemoryAllocated -> GkOe:
    react.graph.IFormatter formatter -> uYBb
    17:27:void <init>() -> <init>
    32:38:void construct() -> oxFU
    43:44:void sample() -> kbge
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleMemoryAllocated$1 -> GkOe$1:
    react.sampler.SampleMemoryAllocated this$0 -> MCVC
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> FonC
react.sampler.SampleMemoryAllocationPerSecond -> inPW:
    react.graph.IFormatter formatter -> uYBb
    17:27:void <init>() -> <init>
    32:38:void construct() -> oxFU
    43:44:void sample() -> kbge
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleMemoryAllocationPerSecond$1 -> inPW$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> vKKg
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> FonC
react.sampler.SampleMemoryFree -> mhyQ:
    react.graph.IFormatter formatter -> uYBb
    17:27:void <init>() -> <init>
    32:38:void construct() -> oxFU
    43:44:void sample() -> kbge
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleMemoryFree$1 -> mhyQ$1:
    react.sampler.SampleMemoryFree this$0 -> UvBP
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> FonC
react.sampler.SampleMemoryMax -> oVNY:
    react.graph.IFormatter formatter -> uYBb
    17:27:void <init>() -> <init>
    32:38:void construct() -> oxFU
    43:44:void sample() -> kbge
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleMemoryMax$1 -> oVNY$1:
    react.sampler.SampleMemoryMax this$0 -> tnxO
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> FonC
react.sampler.SampleMemoryUse -> bhyW:
    react.graph.IFormatter formatter -> uYBb
    17:27:void <init>() -> <init>
    32:38:void construct() -> oxFU
    43:44:void sample() -> kbge
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleMemoryUse$1 -> bhyW$1:
    react.sampler.SampleMemoryUse this$0 -> twjB
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> FonC
react.sampler.SampleRedstonePerSecond -> JRTU:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleRedstonePerSecond$1 -> JRTU$1:
    react.sampler.SampleRedstonePerSecond this$0 -> wgaK
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleRedstonePerTick -> Ihbq:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    46:53:void sample() -> kbge
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleRedstonePerTick$1 -> Ihbq$1:
    react.sampler.SampleRedstonePerTick this$0 -> Xuxa
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleRedstoneTickTime -> oDlV:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleRedstoneTickTime$1 -> oDlV$1:
    react.sampler.SampleRedstoneTickTime this$0 -> ynFy
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleRedstoneTickUtilization -> IiDR:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    46:53:void sample() -> kbge
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleRedstoneTickUtilization$1 -> IiDR$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> VyDy
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleSyncQueue -> hPyP:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleSyncQueue$1 -> hPyP$1:
    react.sampler.SampleSyncQueue this$0 -> nBsA
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleTickTime -> xaHl:
    react.graph.IFormatter formatter -> uYBb
    react.gmath.Average aa -> wxbG
    17:29:void <init>() -> <init>
    34:40:void construct() -> oxFU
    45:47:void sample() -> kbge
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleTickTime$1 -> xaHl$1:
    react.sampler.SampleTickTime this$0 -> txIj
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> FonC
react.sampler.SampleTickUtilization -> bhyj:
    react.graph.IFormatter formatter -> uYBb
    react.gmath.Average aa -> wxbG
    17:29:void <init>() -> <init>
    34:40:void construct() -> oxFU
    45:47:void sample() -> kbge
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleTickUtilization$1 -> bhyj$1:
    react.sampler.SampleTickUtilization this$0 -> JJmd
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> FonC
react.sampler.SampleTicksPerSecond -> lCrj:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleTicksPerSecond$1 -> lCrj$1:
    react.sampler.SampleTicksPerSecond this$0 -> ohYb
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleTileDroppedTicks -> JRUI:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleTileDroppedTicks$1 -> JRUI$1:
    react.sampler.SampleTileDroppedTicks this$0 -> vlmf
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleTileTime -> Gjmi:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleTileTime$1 -> Gjmi$1:
    react.sampler.SampleTileTime this$0 -> sktk
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.sampler.SampleTileTimeLock -> TqTP:
    react.graph.IFormatter formatter -> uYBb
    18:28:void <init>() -> <init>
    33:39:void construct() -> oxFU
    44:45:void sample() -> kbge
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> TWUT
react.sampler.SampleTileTimeLock$1 -> TqTP$1:
    react.sampler.SampleTileTimeLock this$0 -> FPCt
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> FonC
react.security.checkpoints.SecurityCheckpointAlpha -> PeHM:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> DGuS
    78:148:void doScan(java.lang.Runnable) -> YoSf
    152:181:byte[] readResource(java.io.File,java.lang.String) -> afIq
    186:217:react.glang.GMap scan(java.io.File) -> YoSf
    33:33:byte[] access$000(java.io.File,java.lang.String) -> YoSf
react.security.checkpoints.SecurityCheckpointAlpha$1 -> PeHM$1:
    java.lang.Runnable val$r -> LQUH
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> PeHM$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> WkFd
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> QMyd:
    java.lang.String ip -> XmiK
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> lTwc:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> lTwc$1:
    java.io.File val$f -> cLFN
    react.security.locks.SecurityLockAlpha this$0 -> opma
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> XBMq:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> XIlE
react.slate.PhantomSlate -> cRnF:
    react.glang.GList lines -> MKiR
    react.glang.GList viewers -> sdHm
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> lgeF
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> inTD
    44:45:void set(int,java.lang.String) -> YoSf
    50:51:void setLines(react.glang.GList) -> aTgj
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> MAiK
    91:95:void addViewer(org.bukkit.entity.Player) -> XIlE
    100:102:void removeViewer(org.bukkit.entity.Player) -> xykf
    107:107:react.glang.GList getViewers() -> RkPy
    113:113:boolean isViewing(org.bukkit.entity.Player) -> hsNX
    119:120:void addLine(java.lang.String) -> TWUT
    125:126:void clearLines() -> paed
react.slate.Slate -> IGDU:
    void build() -> MAiK
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> inTD
    void set(int,java.lang.String) -> YoSf
    void setLines(react.glang.GList) -> aTgj
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> XIlE
    void addLine(java.lang.String) -> TWUT
    void clearLines() -> paed
    void removeViewer(org.bukkit.entity.Player) -> xykf
    react.glang.GList getViewers() -> RkPy
    boolean isViewing(org.bukkit.entity.Player) -> hsNX
    void update() -> update
react.slate.SlateUtil -> xOjL:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> ytpt
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> tmqi
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> afIq
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> YoSf
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> jEpI
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> afIq
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> afIq
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> YoSf
    186:196:java.lang.String convertJSON(java.lang.String) -> eHDj
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> YoSf
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> afIq
react.surge.Main -> NUqt:
    react.glang.GList plugins -> tVJN
    react.glang.GMap pluginInstances -> dqOa
    react.glang.GList controllerSet -> ndxe
    react.glang.GMap anchors -> RcjM
    react.glang.GList classes -> EMDN
    java.lang.reflect.Field nsField -> Udbn
    java.lang.reflect.Field thField -> mHdP
    react.glang.GList tracks -> mPsu
    long nsf -> VxgX
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> FhNr
    90:109:long getNanoSync() -> vQtx
    114:115:void requestResetNanos() -> HLQx
    119:127:void requestReload() -> oUrI
    131:134:void requestReload(java.lang.Runnable) -> jEpI
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> afIq
    201:218:void onStop() -> HvfE
    224:224:void onPostInit() -> SLRM
    230:230:void onPreInit() -> DHVi
    234:245:void shutDownAmps() -> YpGB
    249:458:void initializeAmps() -> cdQd
    463:504:void doScan() -> yBLe
    508:530:void scanForPoolDefiners() -> SKqU
    534:550:void scanForRawEvents() -> cRoR
    554:570:void scanForDynamicTrack() -> vRVD
    574:595:void scanForAmps() -> NwwF
    600:611:void onTick() -> pOvd
react.surge.Main$1 -> NUqt$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> fKUp:
    react.surge.control.AmpedPlugin plugin -> xYdo
    boolean connected -> connected
    int masterTask -> yBtn
    java.lang.Runnable onReload -> QWvJ
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> mqnV
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> DGwu
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> afIq
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> afIq
    123:124:void stopTask(int) -> cJNi
    128:128:react.surge.control.AmpedPlugin getPlugin() -> VLmB
    133:133:int getMasterTask() -> TiJY
    138:138:java.lang.Runnable getOnReload() -> pXxG
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> afIq
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> IqHn
    158:159:void setOnReload(java.lang.Runnable) -> UACx
    67:67:void access$0(react.surge.PluginAmp) -> afIq
react.surge.PluginAmp$1 -> fKUp$1:
    react.surge.PluginAmp this$0 -> wWCM
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> fKUp$2:
    react.surge.PluginAmp this$0 -> wWCM
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> fKUp$3:
    react.surge.PluginAmp this$0 -> wWCM
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> SvdU:
    react.surge.PluginAmp amp -> xsWb
    react.glang.GList tickComponents -> tDgL
    react.glang.GList atickComponents -> OcQA
    react.surge.sched.TaskManager taskmgr -> bsWr
    react.surge.hotload.HotloadManager hotloadmgr -> VWDP
    java.lang.Thread mainThread -> cSvo
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> afIq
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> DaYB
    44:44:java.io.File folder() -> QVnj
    49:51:java.io.File getPluginJarFile() -> nKAx
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> UACx
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> wMKt
    74:74:react.glang.GList getTickComponents() -> nldd
    79:79:react.glang.GList getAsyncTickComponents() -> hIOs
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> afIq
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> YoSf
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> YoSf
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> YoiD
    126:126:boolean hasAmp() -> xjAS
    131:131:react.surge.PluginAmp getAmp() -> HCeH
    136:136:react.surge.sched.TaskManager getTaskManager() -> wnmI
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> mqpb
react.surge.cluster.Cluster -> HmtE:
    react.surge.cluster.ClusterType type -> WjhC
    java.lang.Object t -> WbHw
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> dMdF
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> AaNY:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> CpGN:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> dEPi:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> FEkA:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> TWcp:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> MmBu:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> iLNs:
    react.surge.cluster.ClusterType INT -> jXlW
    react.surge.cluster.ClusterType BOOLEAN -> UKPI
    react.surge.cluster.ClusterType STRING -> twlH
    react.surge.cluster.ClusterType STRING_LIST -> whDQ
    react.surge.cluster.ClusterType DOUBLE -> Kgdp
    react.surge.cluster.ClusterType LONG -> RAfB
    react.surge.cluster.ClusterType[] ENUM$VALUES -> DtRo
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> aDWi:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> NOKs
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> afIq
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> afIq
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> cSRM
react.surge.cluster.ConfigurationDataOutput -> SLQW:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> YoSf
react.surge.cluster.DataCluster -> ogSJ:
    react.glang.GMap clusters -> KVce
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> oNCy
    29:33:void fromJson(react.json.JSONObject) -> Hmbb
    37:44:react.json.JSONObject toJson() -> Eunk
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> ivet
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> afIq
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> kbge
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> WhmJ
    194:195:void set(java.lang.String,int) -> Hmbb
    199:200:void set(java.lang.String,boolean) -> jEpI
    204:205:void set(java.lang.String,double) -> jEpI
    209:210:void set(java.lang.String,long) -> jEpI
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> afIq
react.surge.cluster.ICluster -> jNpv:
    react.surge.cluster.ClusterType getType() -> dMdF
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> pPbj:
react.surge.cluster.IDataInput -> jhdR:
    react.surge.cluster.DataCluster read(java.io.File) -> jEpI
react.surge.cluster.IDataOutput -> YVSL:
    void write(react.surge.cluster.DataCluster,java.io.File) -> afIq
react.surge.cluster.Key -> vJDG:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> dwrk:
    int value() -> value
react.surge.cluster.KeyStore -> MmAc:
react.surge.cluster.ReflectedConfigurationException -> WrNT:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> MuRW:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> jEpI
react.surge.cluster.YamlDataOutput -> lCuV:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> afIq
react.surge.collection.GSound -> yAjV:
    java.lang.String sound -> wMpR
    org.bukkit.Sound iSound -> JvEL
    java.lang.Float volume -> nTVv
    java.lang.Float pitch -> nCUj
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> kcFE
    61:72:void play(org.bukkit.Location) -> WhmJ
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> afIq
    93:93:java.lang.String getSound() -> JQyb
    98:99:void setSound(java.lang.String) -> oxFU
    103:103:org.bukkit.Sound getiSound() -> dNER
    108:109:void setiSound(org.bukkit.Sound) -> afIq
    113:113:java.lang.Float getVolume() -> IWgt
    118:119:void setVolume(java.lang.Float) -> afIq
    123:123:java.lang.Float getPitch() -> jyha
    128:129:void setPitch(java.lang.Float) -> YoSf
react.surge.control.AmpedPlugin -> IqUy:
    react.glang.GList controllers -> aVcB
    react.gconcurrent.ParallelPoolManager pp -> yuyD
    react.surge.server.CoreTickThread ctt -> UTDK
    24:50:void <init>() -> <init>
    void doScan() -> yBLe
    long getNanoSync() -> vQtx
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:91:void onDisable() -> onDisable
    96:96:react.glang.GList getControllers() -> ESlY
    102:103:void registerController(react.surge.control.IController) -> afIq
    108:119:void onTick() -> pOvd
    124:124:java.lang.String getTickName() -> iCSF
    130:130:react.gconcurrent.ParallelPoolManager getThreadPool() -> rgnB
    136:251:void destroyOldThreads() -> oNCs
    void onControllerRegistry() -> FhNr
    void onStart(react.surge.util.Protocol) -> afIq
    void onStop() -> HvfE
    void onPostInit() -> SLRM
    void onPreInit() -> DHVi
react.surge.control.AmpedPlugin$1 -> IqUy$1:
    react.surge.control.AmpedPlugin this$0 -> JKSS
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> ntjY
react.surge.control.AmpedPlugin$2 -> IqUy$2:
    react.surge.control.AmpedPlugin this$0 -> JKSS
    1:149:void <init>(react.surge.control.AmpedPlugin) -> <init>
    154:244:void run() -> run
react.surge.control.Control -> upsQ:
react.surge.control.Controller -> EKWa:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> yIyq:
react.surge.control.Enable -> KnkX:
react.surge.control.IController -> preJ:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> aDWH:
react.surge.control.Plugin -> AOlb:
react.surge.control.SurgePlugin -> vAQp:
    void onStart(react.surge.util.Protocol) -> afIq
    void onStop() -> HvfE
    void onPostInit() -> SLRM
    void onPreInit() -> DHVi
    void onControllerRegistry() -> FhNr
    void registerController(react.surge.control.IController) -> afIq
    react.glang.GList getControllers() -> ESlY
    react.gconcurrent.ParallelPoolManager getThreadPool() -> rgnB
react.surge.hotload.HotloadManager -> JkiE:
    react.glang.GMap filemods -> UmUj
    react.glang.GMap filesizes -> Chab
    react.glang.GMap fileacts -> mQWk
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> afIq
    35:38:void untrack(java.io.File) -> UACx
    42:45:void untrackall() -> priP
    50:86:void onTick() -> pOvd
    91:91:java.lang.String getTickName() -> iCSF
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> afIq
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> YoSf
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> jEpI
react.surge.hotload.HotloadManager$1 -> JkiE$1:
    react.surge.hotload.HotloadManager this$0 -> OIaP
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> SKnn:
    boolean init -> mIHK
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> aMsg
    java.lang.Class IChatBaseComponent -> QhyM
    java.lang.Class ChatSerializer -> UufK
    java.lang.Class PacketPlayOutPlayerInfo -> SgOe
    java.lang.Class PlayerInfoData -> nmmJ
    java.lang.Class EnumPlayerInfoAction -> nnLo
    java.lang.Class GameProfile -> gWvH
    java.lang.Class EnumGamemode -> pkbM
    java.lang.Class TileEntitySkull -> xjha
    java.lang.Class LoadingCache -> ifls
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> hHix:
    react.surge.nms.NMSX bountifulAPI -> mHfR
    boolean useOldMethods -> Aaya
    java.lang.String nmsver -> LjlK
    java.lang.Object eTimes -> fLbp
    java.lang.Object eTitle -> WIIL
    java.lang.Object eSubtitle -> nLIx
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> afIq
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> cJNi
    75:89:java.lang.Class getCBClass(java.lang.String) -> IqHn
    96:104:java.lang.Object serializeChat(java.lang.String) -> Fonq
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> YoSf
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> afIq
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> clcm
    151:151:java.lang.String craftPackage() -> MtvI
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> afIq
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> afIq
    197:207:java.lang.Class getNMSClass(java.lang.String) -> GPoX
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> afIq
    279:280:void clearTitle(org.bukkit.entity.Player) -> lUGR
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> YoSf
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> afIq
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> afIq
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> wmyg
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> WhmJ
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> Plhy
    434:447:int ping(org.bukkit.entity.Player) -> uVol
react.surge.nms.NMSX$1 -> hHix$1:
    org.bukkit.entity.Player val$player -> htbO
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> hHix$2:
    org.bukkit.entity.Player val$player -> htbO
    java.lang.String val$message -> BByY
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> Mcrb:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> HCdG
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> afIq
    68:82:void clearTitle(org.bukkit.entity.Player) -> lUGR
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> afIq
react.surge.nms.PacketUtil$V -> Mcrb$afIq:
    react.surge.nms.PacketUtil$V R17 -> SVLn
    react.surge.nms.PacketUtil$V R18 -> CqQf
    react.surge.nms.PacketUtil$V R19 -> FXXK
    react.surge.nms.PacketUtil$V R111 -> EvwK
    react.surge.nms.PacketUtil$V R110 -> sAfK
    react.surge.nms.PacketUtil$V R112 -> JSbc
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> aNTL
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> EeMP:
    java.lang.String title -> title
    java.lang.String subTitle -> tEJR
    java.lang.String action -> action
    java.lang.Integer fadeIn -> IaaW
    java.lang.Integer fadeOut -> AkLr
    java.lang.Integer stayTime -> dONA
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> IWRm
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> WjBe
    79:80:void setSubTitle(java.lang.String) -> WWnJ
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> WPSC
    99:100:void setFadeIn(java.lang.Integer) -> jEpI
    104:104:java.lang.Integer getFadeOut() -> eXys
    109:110:void setFadeOut(java.lang.Integer) -> UACx
    114:114:java.lang.Integer getStayTime() -> SUGg
    119:120:void setStayTime(java.lang.Integer) -> Hmbb
react.surge.nms.VersionBukkit -> Yftp:
    react.surge.nms.VersionBukkit VU -> DlDp
    react.surge.nms.VersionBukkit V7 -> MCYt
    react.surge.nms.VersionBukkit V8 -> msYY
    react.surge.nms.VersionBukkit V9 -> xHdV
    react.surge.nms.VersionBukkit V11 -> YqQU
    react.surge.nms.VersionBukkit V111 -> LQXh
    react.surge.nms.VersionBukkit V112 -> veBb
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> LIID
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> XBTK
    27:32:boolean uc() -> aMNi
    37:67:react.surge.nms.VersionBukkit get() -> agAb
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> PJyB:
    void burst(java.lang.Object) -> XIlE
    void setTimeLock(double) -> hsNX
    double getEstimatedTimeUse() -> FVqk
    int flush() -> tefn
    int flush(react.gbench.Profiler) -> afIq
    void queue(java.lang.Object) -> xykf
    void queue(java.util.List) -> jEpI
    void queue(java.lang.Object[]) -> afIq
react.surge.sched.ICancellable -> CVTy:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> KoOU:
    void onTick() -> pOvd
    java.lang.String getTickName() -> iCSF
react.surge.sched.ITask -> oUre:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> JlQA
    java.lang.String getName() -> getName
    double getComputeTime() -> QVqa
    double getTotalComputeTime() -> iKtU
    double getActiveTime() -> HLXH
    boolean hasCompleted() -> yRsI
react.surge.sched.Task -> TNtq:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> mHdx
    double computeTime -> WkKN
    double totalComputeTime -> nCWn
    double activeTime -> sRfq
    boolean completed -> completed
    react.gbench.Profiler profiler -> Qqib
    react.gbench.Profiler activeProfiler -> QOgB
    int ticks -> NiCh
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> UACx
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> JlQA
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> QVqa
    150:150:boolean hasCompleted() -> yRsI
    156:156:double getTotalComputeTime() -> iKtU
    162:162:double getActiveTime() -> HLXH
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> jEpI
    15:15:void access$1(react.surge.sched.Task,boolean) -> afIq
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> UACx
    14:14:void access$3(react.surge.sched.Task,double) -> afIq
    12:12:void access$4(react.surge.sched.Task,double) -> YoSf
    14:14:double access$5(react.surge.sched.Task) -> Hmbb
    13:13:void access$6(react.surge.sched.Task,double) -> jEpI
    13:13:double access$7(react.surge.sched.Task) -> WhmJ
    12:12:double access$8(react.surge.sched.Task) -> sQKk
react.surge.sched.Task$1 -> TNtq$1:
    react.surge.sched.Task this$0 -> VhKH
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> TNtq$2:
    react.surge.sched.Task this$0 -> VhKH
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> TNtq$3:
    react.surge.sched.Task this$0 -> VhKH
    int val$total -> PCtc
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> DsKm:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> mHdx
    double computeTime -> WkKN
    double totalComputeTime -> nCWn
    double activeTime -> sRfq
    boolean completed -> completed
    react.gbench.Profiler profiler -> Qqib
    react.gbench.Profiler activeProfiler -> QOgB
    int ticks -> NiCh
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> UACx
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> JlQA
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> QVqa
    101:101:boolean hasCompleted() -> yRsI
    107:107:double getTotalComputeTime() -> iKtU
    113:113:double getActiveTime() -> HLXH
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> afIq
    12:12:void access$1(react.surge.sched.TaskLater,double) -> afIq
    13:13:double access$2(react.surge.sched.TaskLater) -> YoSf
    12:12:double access$3(react.surge.sched.TaskLater) -> jEpI
    13:13:void access$4(react.surge.sched.TaskLater,double) -> YoSf
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> UACx
    14:14:double access$6(react.surge.sched.TaskLater) -> Hmbb
    14:14:void access$7(react.surge.sched.TaskLater,double) -> jEpI
react.surge.sched.TaskLater$1 -> DsKm$1:
    react.surge.sched.TaskLater this$0 -> vTDd
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> WqqO:
    react.glang.GList tasks -> Bltn
    react.glang.GMap taskProfiles -> gXYd
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> afIq
    25:35:void onTick() -> pOvd
    39:40:void putFinishingTask(react.surge.sched.ITask) -> YoSf
    44:53:void putTask(react.surge.sched.ITask) -> jEpI
    58:58:java.lang.String getTickName() -> iCSF
    63:63:react.glang.GList getTasks() -> IWjv
    68:68:react.glang.GMap getTaskProfiles() -> LjGE
react.surge.sched.TaskProfile -> ESjm:
    double activeTime -> sRfq
    double computeTickTime -> IXro
    double computeTime -> WkKN
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> HLXH
    23:24:void setActiveTime(double) -> kcFE
    28:28:double getComputeTickTime() -> xiap
    33:34:void setComputeTickTime(double) -> lUGR
    38:38:double getComputeTime() -> QVqa
    43:44:void setComputeTime(double) -> uVol
react.surge.server.AsyncTick -> lUYs:
react.surge.server.CPS -> xrPC:
    react.glang.GMap keys -> VVhN
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> TNcy
    46:99:void scan() -> Sehu
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> jEpI
react.surge.server.CoreTickThread -> CgWh:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> CgWi:
    long memoryFree -> vScK
    long memoryUsed -> xHgf
    long memoryMax -> GBML
    long lastMemoryUsed -> VMwS
    long memoryUsedAfterGC -> htmk
    long allocated -> PTvk
    long collected -> gGXI
    long collections -> yBxh
    long sms -> DASs
    long memoryAllocatedPerTick -> apYS
    long memoryCollectedPerTick -> lxhp
    long memoryFullyAllocatedPerTick -> etUO
    long mah -> WYiv
    long mahs -> lghE
    22:39:void <init>() -> <init>
    void onAllocationSet() -> GcGd
    46:98:void run() -> run
    102:102:long getMemoryFree() -> QWRk
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> kAYm
    117:117:long getLastMemoryUsed() -> gVpM
    122:122:long getMemoryUsedAfterGC() -> QgsU
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> dojO
    137:137:long getCollections() -> anop
    142:142:long getSms() -> bjCf
    147:147:long getMemoryAllocatedPerTick() -> tUDs
    152:152:long getMemoryCollectedPerTick() -> uXHV
    157:157:long getMemoryFullyAllocatedPerTick() -> mjDB
    162:162:long getMah() -> rhQW
    167:167:long getMahs() -> ndTv
react.surge.server.SuperSampler -> NgWP:
    react.gmath.Average ticksPerSecondL -> bQXj
    react.gmath.Average tickTimeL -> KVhL
    react.gmath.Average mahL -> aghC
    double ticksPerSecond -> BJyQ
    double ticksPerSecondRaw -> PMFR
    double tickTime -> ubBO
    double tickTimeRaw -> rGVG
    boolean running -> running
    boolean frozen -> urai
    double tickUtilizationRaw -> QqlA
    double tickUtilization -> FOiT
    double leftoverTickTime -> uaaC
    long memoryUse -> DIcV
    long memoryAllocated -> vKQi
    long memoryCollected -> Gcmk
    long mahs -> lghE
    int totalChunks -> tEKh
    int totalEntities -> aVjC
    int totalDrops -> KhLv
    int totalTiles -> DIed
    int totalLiving -> Peyd
    int chunksLoaded -> ymoy
    int chunksUnloaded -> nwCN
    react.surge.server.WorldMonitor worldMonitor -> dydv
    react.surge.server.TPSMonitor tpsMonitor -> OAUO
    react.surge.server.MemoryMonitor memoryMonitor -> hdPM
    java.lang.StackTraceElement[] lockStack -> dOQm
    react.glang.GMap spikes -> kBLk
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> pOvd
    154:154:java.lang.String getTickName() -> iCSF
    159:159:react.gmath.Average getTicksPerSecondL() -> OsNU
    164:164:double getTicksPerSecond() -> xOcV
    169:169:double getTicksPerSecondRaw() -> CNIn
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> KMOY
    184:184:react.gmath.Average getTickTimeL() -> XSTq
    189:189:double getTickTime() -> HUGp
    194:194:double getTickTimeRaw() -> iCbm
    199:199:double getTickUtilizationRaw() -> AGbg
    204:204:double getTickUtilization() -> pQIK
    209:209:double getLeftoverTickTime() -> fBkG
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> wxAO
    219:219:long getMemoryUse() -> uFeb
    224:224:long getMemoryAllocated() -> anoy
    229:229:long getMemoryCollected() -> qeNH
    234:234:react.gmath.Average getMahL() -> RACO
    239:239:long getMahs() -> ndTv
    244:244:int getTotalChunks() -> agCj
    249:249:int getTotalEntities() -> dDwf
    254:254:int getTotalDrops() -> kImA
    259:259:int getTotalTiles() -> HTjD
    264:264:int getTotalLiving() -> Xcwy
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> BAvQ
    274:274:int getChunksLoaded() -> klQG
    279:279:int getChunksUnloaded() -> ThnG
    284:285:void setTicksPerSecondL(react.gmath.Average) -> afIq
    289:290:void setTickTimeL(react.gmath.Average) -> YoSf
    294:295:void setMahL(react.gmath.Average) -> jEpI
    299:300:void setTicksPerSecond(double) -> HBne
    304:305:void setTicksPerSecondRaw(double) -> IWRm
    309:310:void setTickTime(double) -> NoTA
    314:315:void setTickTimeRaw(double) -> KUHl
    319:320:void setRunning(boolean) -> mNyD
    324:325:void setTickUtilizationRaw(double) -> dxBo
    329:330:void setTickUtilization(double) -> Tgrh
    334:335:void setLeftoverTickTime(double) -> vIQd
    339:340:void setMemoryUse(long) -> hsNX
    344:345:void setMemoryAllocated(long) -> kcFE
    349:350:void setMemoryCollected(long) -> lUGR
    354:355:void setMahs(long) -> uVol
    359:360:void setTotalChunks(int) -> Fonq
    364:365:void setTotalEntities(int) -> GPoX
    369:370:void setTotalDrops(int) -> wmyg
    374:375:void setTotalTiles(int) -> WWnJ
    379:380:void setTotalLiving(int) -> TNcy
    384:385:void setChunksLoaded(int) -> MdDL
    389:390:void setChunksUnloaded(int) -> dfdU
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> afIq
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> afIq
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> afIq
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> tfJT
    419:419:react.glang.GMap getSpikes() -> loBG
    31:31:void access$0(react.surge.server.SuperSampler,int) -> afIq
    33:33:void access$1(react.surge.server.SuperSampler,int) -> YoSf
    34:34:void access$2(react.surge.server.SuperSampler,int) -> jEpI
    32:32:void access$3(react.surge.server.SuperSampler,int) -> UACx
    35:35:void access$4(react.surge.server.SuperSampler,int) -> Hmbb
    36:36:void access$5(react.surge.server.SuperSampler,int) -> WhmJ
    37:37:void access$6(react.surge.server.SuperSampler,int) -> sQKk
    19:19:void access$7(react.surge.server.SuperSampler,double) -> afIq
    21:21:void access$8(react.surge.server.SuperSampler,double) -> YoSf
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> afIq
    19:19:double access$10(react.surge.server.SuperSampler) -> YoSf
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> jEpI
    21:21:double access$12(react.surge.server.SuperSampler) -> UACx
    18:18:void access$13(react.surge.server.SuperSampler,double) -> jEpI
    20:20:void access$14(react.surge.server.SuperSampler,double) -> UACx
    24:24:void access$15(react.surge.server.SuperSampler,double) -> Hmbb
    20:20:double access$16(react.surge.server.SuperSampler) -> Hmbb
    25:25:void access$17(react.surge.server.SuperSampler,double) -> WhmJ
    25:25:double access$18(react.surge.server.SuperSampler) -> WhmJ
    26:26:void access$19(react.surge.server.SuperSampler,double) -> sQKk
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> afIq
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> sQKk
    27:27:void access$22(react.surge.server.SuperSampler,long) -> afIq
    28:28:void access$23(react.surge.server.SuperSampler,long) -> YoSf
    29:29:void access$24(react.surge.server.SuperSampler,long) -> jEpI
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> Plhy
    30:30:void access$26(react.surge.server.SuperSampler,long) -> UACx
react.surge.server.SuperSampler$1 -> NgWP$1:
    react.surge.server.SuperSampler this$0 -> qexa
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> afIq
react.surge.server.SuperSampler$2 -> NgWP$2:
    react.surge.server.SuperSampler this$0 -> qexa
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> SThq
    106:107:void onSpike() -> nSWP
react.surge.server.SuperSampler$3 -> NgWP$3:
    react.surge.server.SuperSampler this$0 -> qexa
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> GcGd
react.surge.server.TPSMonitor -> AjBA:
    double tickTimeMS -> qTvq
    double rawTicksPerSecond -> tgRW
    react.gbench.Profiler tickProfiler -> Rtpv
    react.gbench.Profiler tickTimeProfiler -> Dkhq
    boolean ticked -> kKUU
    java.lang.Thread$State lastState -> tVPS
    double actualTickTimeMS -> qCti
    double ltt -> vvHk
    long lastTick -> HniP
    boolean frozen -> urai
    java.lang.StackTraceElement[] lockedStack -> suPQ
    double lmsx -> ptVt
    23:40:void <init>() -> <init>
    void onTicked() -> SThq
    void onSpike() -> nSWP
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> afIq
    160:160:double getTickTimeMS() -> ylgi
    165:165:double getRawTicksPerSecond() -> mrVn
    170:170:react.gbench.Profiler getTickProfiler() -> BBVe
    175:175:boolean isTicked() -> bYFG
    180:181:void markTick() -> AYFU
    185:185:react.gbench.Profiler getTickTimeProfiler() -> GcIe
    190:190:java.lang.Thread$State getLastState() -> KxFr
    195:195:double getActualTickTimeMS() -> IrAU
    200:200:double getLtt() -> EeSr
    205:205:long getLastTick() -> bytJ
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> wMNo
react.surge.server.WorldMonitor -> qBgE:
    boolean chunksChanged -> FOkx
    boolean dropChanged -> wxkY
    boolean tileChanged -> NqWR
    boolean livingChanged -> jQCh
    boolean totalChanged -> RBMv
    boolean updated -> sSLa
    int totalChunks -> tEKh
    int totalDrops -> KhLv
    int totalTiles -> DIed
    int totalLiving -> Peyd
    int totalEntities -> aVjC
    int chunksLoaded -> ymoy
    int chunksUnloaded -> nwCN
    long ms -> ytpt
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> afIq
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> YoSf
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> afIq
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> afIq
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> afIq
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> afIq
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> afIq
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> afIq
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> afIq
    130:131:void doUpdate() -> fSnO
    135:186:void sample() -> kbge
    190:196:void sampleTotalCount() -> RkXC
    200:206:void sampleLivingCount() -> HfKT
    210:238:void sampleTileCount() -> AGdu
    242:248:void sampleDropCount() -> scEt
    252:258:void sampleChunkCount() -> axCs
react.surge.text.PhantomSpinner -> pHTd:
    react.surge.text.ProgressSpinner s -> BveN
    react.surge.text.ProgressSpinner c -> elFl
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> MtuI:
    java.lang.String[] chars -> ptVb
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> woyR
    react.surge.text.ProgressSpinner NETWORK -> KWJi
    react.surge.text.ProgressSpinner CIRCLES -> jHRL
    react.surge.text.ProgressSpinner RANDOMS -> ELhK
    react.surge.text.ProgressSpinner MERGERS -> txRj
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> dVYG
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> LrPn:
    int value() -> value
react.surge.util.Area -> Mlbg:
    org.bukkit.Location location -> nwBQ
    java.lang.Double radius -> ywAW
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> afIq
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> MAuU
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> sQKk
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> Plhy
    109:109:boolean isWithin(org.bukkit.Location) -> kYuF
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> UACx
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> afIq
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> nJdJ
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> OsPc
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> hPlA
    257:257:java.lang.Double getRadius() -> iwJa
    268:269:void setRadius(java.lang.Double) -> jEpI
    278:283:org.bukkit.Location random() -> mGaN
react.surge.util.Axis -> DGuS:
    react.surge.util.Axis X -> bjmH
    react.surge.util.Axis Y -> xYjc
    react.surge.util.Axis Z -> TaeO
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> MLOe
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> Fgtg
    29:29:org.bukkit.util.Vector negative() -> vlNg
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> inTD:
    react.surge.util.BlastResistance BARRIER -> PLgb
    react.surge.util.BlastResistance BEDROCK -> hRlE
    react.surge.util.BlastResistance COMMAND -> KVin
    react.surge.util.BlastResistance ENDER_PORTAL -> Jlxl
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> Ajop
    react.surge.util.BlastResistance ANVIL -> xYjX
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> VMxR
    react.surge.util.BlastResistance OBSIDIAN -> FaNN
    react.surge.util.BlastResistance ENDER_CHEST -> plFY
    react.surge.util.BlastResistance WATER -> vCCc
    react.surge.util.BlastResistance LAVA -> YXCY
    react.surge.util.BlastResistance STATIONARY_WATER -> uHTX
    react.surge.util.BlastResistance DRAGON_EGG -> AYov
    react.surge.util.BlastResistance ENDER_STONE -> GBPX
    react.surge.util.BlastResistance COAL_BLOCK -> jHUK
    react.surge.util.BlastResistance DIAMOND_BLOCK -> HgWB
    react.surge.util.BlastResistance EMERALD_BLOCK -> strP
    react.surge.util.BlastResistance GOLD_BLOCK -> cnSl
    react.surge.util.BlastResistance IRON_BLOCK -> jrgy
    react.surge.util.BlastResistance REDSTONE_BLOCK -> FrRP
    react.surge.util.BlastResistance BRICK -> ymqp
    react.surge.util.BlastResistance BRICK_STAIRS -> iVSc
    react.surge.util.BlastResistance HARD_CLAY -> tfrc
    react.surge.util.BlastResistance STONE -> VEkY
    react.surge.util.BlastResistance SMOOTH_BRICK -> jafU
    react.surge.util.BlastResistance SMOOTH_STAIRS -> LcCH
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> oGCU
    react.surge.util.BlastResistance STONE_SLAB2 -> dWeI
    react.surge.util.BlastResistance IRON_DOOR -> dyhG
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> XLQq
    react.surge.util.BlastResistance IRON_TRAPDOOR -> qLhB
    react.surge.util.BlastResistance MOB_SPAWNER -> jPcu
    react.surge.util.BlastResistance WEB -> PCwy
    react.surge.util.BlastResistance DISPENSER -> PLib
    react.surge.util.BlastResistance DROPPER -> EMKW
    react.surge.util.BlastResistance FURNACE -> FaOk
    react.surge.util.BlastResistance BURNING_FURNACE -> ywCE
    react.surge.util.BlastResistance BEACON -> BLSL
    react.surge.util.BlastResistance COAL_ORE -> tUpX
    react.surge.util.BlastResistance COCOA -> NykG
    react.surge.util.BlastResistance DIAMOND_ORE -> gYAC
    react.surge.util.BlastResistance EMERALD_ORE -> DAYT
    react.surge.util.BlastResistance FENCE -> RSTA
    react.surge.util.BlastResistance FENCE_GATE -> lqAV
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> YpyD
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> Fqro
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> AAAX
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> sSQo
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> sRpj
    react.surge.util.BlastResistance ACACIA_FENCE -> EgAL
    react.surge.util.BlastResistance BIRCH_FENCE -> BfFs
    react.surge.util.BlastResistance DARK_OAK_FENCE -> NWgh
    react.surge.util.BlastResistance SPRUCE_FENCE -> pkjS
    react.surge.util.BlastResistance JUNGLE_FENCE -> Wjrw
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> iogD
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> jsKD
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> vSiN
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> pIfy
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> QjCb
    react.surge.util.BlastResistance QUARTZ_STAIRS -> fLjQ
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> jixK
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> ubGo
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> VFMI
    react.surge.util.BlastResistance WOOD_STAIRS -> NXGj
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> XnVB
    react.surge.util.BlastResistance ACACIA_DOOR -> tUsO
    react.surge.util.BlastResistance BIRCH_DOOR -> wWMH
    react.surge.util.BlastResistance DARK_OAK_DOOR -> DIiP
    react.surge.util.BlastResistance SPRUCE_DOOR -> rqoh
    react.surge.util.BlastResistance JUNGLE_DOOR -> ohfg
    react.surge.util.BlastResistance GOLD_ORE -> LIPf
    react.surge.util.BlastResistance HOPPER -> Hogp
    react.surge.util.BlastResistance IRON_ORE -> CNvw
    react.surge.util.BlastResistance LAPIS_BLOCK -> ahPB
    react.surge.util.BlastResistance LAPIS_ORE -> QqrE
    react.surge.util.BlastResistance QUARTZ_ORE -> JdmH
    react.surge.util.BlastResistance REDSTONE_ORE -> SMdh
    react.surge.util.BlastResistance TRAP_DOOR -> GmEx
    react.surge.util.BlastResistance WOOD -> UCIv
    react.surge.util.BlastResistance CHEST -> YiHl
    react.surge.util.BlastResistance TRAPPED_CHEST -> xHmE
    react.surge.util.BlastResistance WORKBENCH -> CXJt
    react.surge.util.BlastResistance CAULDRON -> igYK
    react.surge.util.BlastResistance LOG -> plMh
    react.surge.util.BlastResistance LOG_2 -> WHrL
    react.surge.util.BlastResistance BOOKSHELF -> bAAl
    react.surge.util.BlastResistance BANNER -> hArW
    react.surge.util.BlastResistance STANDING_BANNER -> DIkv
    react.surge.util.BlastResistance WALL_BANNER -> VqDc
    react.surge.util.BlastResistance JACK_O_LANTERN -> lxqk
    react.surge.util.BlastResistance MELON_BLOCK -> raQo
    react.surge.util.BlastResistance SKULL -> CNwq
    react.surge.util.BlastResistance PUMPKIN -> DuBL
    react.surge.util.BlastResistance SIGN -> hRrs
    react.surge.util.BlastResistance SIGN_POST -> MwJx
    react.surge.util.BlastResistance WALL_SIGN -> QOqk
    react.surge.util.BlastResistance QUARTZ_BLOCK -> kSlR
    react.surge.util.BlastResistance NOTE_BLOCK -> VqCR
    react.surge.util.BlastResistance RED_SANDSTONE -> plMA
    react.surge.util.BlastResistance SANDSTONE -> agpU
    react.surge.util.BlastResistance WOOL -> OAYt
    react.surge.util.BlastResistance MONSTER_EGG -> AIUA
    react.surge.util.BlastResistance RAILS -> HUwS
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> HNHO
    react.surge.util.BlastResistance DETECTOR_RAIL -> Nyku
    react.surge.util.BlastResistance POWERED_RAIL -> MDFE
    react.surge.util.BlastResistance CLAY -> cKtI
    react.surge.util.BlastResistance DIRT -> eAXs
    react.surge.util.BlastResistance GRASS -> QYBy
    react.surge.util.BlastResistance GRAVEL -> EoRe
    react.surge.util.BlastResistance SPONGE -> yUCk
    react.surge.util.BlastResistance BREWING_STAND -> yUHF
    react.surge.util.BlastResistance STONE_BUTTON -> QaUg
    react.surge.util.BlastResistance WOOD_BUTTON -> IsPl
    react.surge.util.BlastResistance CAKE_BLOCK -> IPmL
    react.surge.util.BlastResistance ICE -> AsiP
    react.surge.util.BlastResistance PACKED_ICE -> KqGF
    react.surge.util.BlastResistance LEVER -> RliO
    react.surge.util.BlastResistance MYCEL -> EVBw
    react.surge.util.BlastResistance PISTON_BASE -> AjxG
    react.surge.util.BlastResistance PISTON_EXTENSION -> VOBx
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> FjGl
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> JLAI
    react.surge.util.BlastResistance GOLD_PLATE -> XThN
    react.surge.util.BlastResistance IRON_PLATE -> usNj
    react.surge.util.BlastResistance STONE_PLATE -> stxR
    react.surge.util.BlastResistance WOOD_PLATE -> qfae
    react.surge.util.BlastResistance SAND -> LYvU
    react.surge.util.BlastResistance SOUL_SAND -> DImx
    react.surge.util.BlastResistance CACTUS -> hmID
    react.surge.util.BlastResistance LADDER -> jsNh
    react.surge.util.BlastResistance NETHERRACK -> nKuX
    react.surge.util.BlastResistance GLASS -> AbgQ
    react.surge.util.BlastResistance THIN_GLASS -> NXMS
    react.surge.util.BlastResistance STAINED_GLASS -> gXbv
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> scvF
    react.surge.util.BlastResistance GLOWSTONE -> Nynu
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> nmyD
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> NiNr
    react.surge.util.BlastResistance SEA_LANTERN -> XTha
    react.surge.util.BlastResistance BED_BLOCK -> oFiA
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> cUHi
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> UTPi
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> cTfc
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> TPju
    react.surge.util.BlastResistance LEAVES -> AAGF
    react.surge.util.BlastResistance LEAVES_2 -> IQMH
    react.surge.util.BlastResistance SNOW -> tUwK
    int br -> dXKA
    react.surge.util.BlastResistance[] ENUM$VALUES -> VpdX
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> wwbQ
    175:190:int get(org.bukkit.Material) -> afIq
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> RkPy:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> sQKk
react.surge.util.C -> paed:
    react.surge.util.C BLACK -> yegK
    react.surge.util.C DARK_BLUE -> XKvD
    react.surge.util.C DARK_GREEN -> mbdn
    react.surge.util.C DARK_AQUA -> tNGf
    react.surge.util.C DARK_RED -> huYH
    react.surge.util.C DARK_PURPLE -> yvgr
    react.surge.util.C GOLD -> gqtL
    react.surge.util.C GRAY -> BvmF
    react.surge.util.C DARK_GRAY -> LkWn
    react.surge.util.C BLUE -> kvQM
    react.surge.util.C GREEN -> NGKE
    react.surge.util.C AQUA -> XfJL
    react.surge.util.C RED -> XDFo
    react.surge.util.C LIGHT_PURPLE -> hdVg
    react.surge.util.C YELLOW -> PVED
    react.surge.util.C WHITE -> TbPh
    react.surge.util.C MAGIC -> SpOW
    react.surge.util.C BOLD -> rqvh
    react.surge.util.C STRIKETHROUGH -> rXeO
    react.surge.util.C UNDERLINE -> cCgr
    react.surge.util.C ITALIC -> nKxP
    react.surge.util.C RESET -> mjxV
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> RSYg
    char code -> MDJa
    boolean isFormat -> BelW
    java.lang.String toString -> PECb
    java.util.Map BY_ID -> vBmh
    java.util.Map BY_CHAR -> gXeV
    java.util.Map dyeChatMap -> XDJY
    java.util.Map chatHexMap -> Kgvu
    java.util.Map dyeHexMap -> uPmA
    int[] $SWITCH_TABLE$surge$util$C -> gaWI
    react.surge.util.C[] ENUM$VALUES -> WQga
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> IFjh
    378:378:java.lang.String hex() -> Knsj
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> Plhy
    434:442:react.surge.util.C getByChar(java.lang.String) -> MdDL
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> YoSf
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> afIq
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> YoSf
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> jEpI
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> dfdU
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> pHCt
    560:578:java.lang.String generateColorTable() -> EeRn
    588:588:org.bukkit.ChatColor chatColor() -> SwMC
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> sQKk
    632:679:byte getItemMeta() -> Lqvj
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> QVsF
react.surge.util.C$1 -> paed$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> paed$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> paed$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> paed$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> paed$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> paed$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> paed$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> paed$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> paed$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> paed$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> paed$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> paed$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> paed$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> paed$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> paed$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> paed$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> paed$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> paed$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> paed$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> paed$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> paed$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> paed$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> ytpt:
    double number -> FGgC
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> prSv
    23:25:react.surge.util.CDou add(double) -> oMMo
    30:32:react.surge.util.CDou sub(double) -> KTgu
    37:37:double get() -> get
    42:48:void circ() -> qvPv
react.surge.util.CMD -> tmqi:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> XTjb
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> ndVl
    51:53:void execute(org.bukkit.command.CommandSender) -> jEpI
    60:77:void execute() -> execute
react.surge.util.CNum -> FhNr:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> pHCt
    23:25:react.surge.util.CNum add(int) -> cuCa
    30:32:react.surge.util.CNum sub(int) -> pGcA
    37:37:int get() -> get
    42:48:void circ() -> qvPv
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> bWlF
react.surge.util.Chunks -> vQtx:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> OPRx
    33:40:react.glang.GList getLoadedChunks() -> wnpa
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> YoSf
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> afIq
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> afIq
    98:98:boolean unload(org.bukkit.Chunk) -> PJfk
    114:124:int unload(react.glang.GList,boolean,boolean) -> afIq
    138:138:int unload(react.glang.GList,boolean) -> afIq
    150:150:int unload(react.glang.GList) -> MdAd
    166:166:boolean isLoaded(java.lang.String,int,int) -> afIq
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> jEpI
    201:205:void load(react.glang.GList) -> mNyD
react.surge.util.Cuboid -> HLQx:
    java.lang.String worldName -> AkYo
    int x1 -> lEqK
    int y1 -> tokg
    int z1 -> Irpg
    int x2 -> xHsW
    int y2 -> hmIw
    int z2 -> Bemc
    int[] $SWITCH_TABLE$surge$util$Axis -> KyWm
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> jrpA
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> afIq
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> jEpI
    93:93:boolean hasPlayers() -> XBXV
    98:110:react.glang.GList getPlayers() -> xXOW
    115:166:react.glang.GList getEntities() -> QEtD
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> hanJ
    287:287:org.bukkit.Location getLowerNE() -> PeUG
    298:298:org.bukkit.Location getUpperSW() -> LPVr
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> TXOO
    348:348:int getSizeY() -> GAGq
    358:358:int getSizeZ() -> rWTl
    368:368:int getLowerX() -> XmKy
    378:378:int getLowerY() -> RAHC
    388:388:int getLowerZ() -> nKHg
    398:398:int getUpperX() -> oEYe
    408:408:int getUpperY() -> VoWW
    418:418:int getUpperZ() -> cKJA
    428:438:org.bukkit.block.Block[] corners() -> bOug
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> afIq
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> YoSf
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> jEpI
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> UACx
    546:546:boolean contains(int,int,int) -> Hmbb
    558:558:boolean contains(org.bukkit.block.Block) -> Plhy
    570:570:boolean contains(org.bukkit.Location) -> HBne
    580:580:int volume() -> LPXE
    591:601:byte averageLightLevel() -> gqHA
    612:612:react.surge.util.Cuboid contract() -> Xlkq
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> afIq
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> YoSf
    708:715:boolean containsOnly(org.bukkit.Material) -> YoSf
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> afIq
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> WhmJ
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> afIq
    786:800:java.util.List getChunks() -> kInT
    815:819:void fill(int,byte) -> afIq
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> MmNJ
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> vtbQ
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> gVss
react.surge.util.Cuboid$1 -> HLQx$1:
    react.surge.util.Cuboid this$0 -> KNci
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> kYuF
    1:1:java.lang.Object onAdapt(java.lang.Object) -> sQKk
react.surge.util.Cuboid$CuboidDirection -> HLQx$afIq:
    react.surge.util.Cuboid$CuboidDirection North -> iDxX
    react.surge.util.Cuboid$CuboidDirection East -> vSnl
    react.surge.util.Cuboid$CuboidDirection South -> Glju
    react.surge.util.Cuboid$CuboidDirection West -> AAGt
    react.surge.util.Cuboid$CuboidDirection Up -> dyoS
    react.surge.util.Cuboid$CuboidDirection Down -> wxtb
    react.surge.util.Cuboid$CuboidDirection Horizontal -> TQOM
    react.surge.util.Cuboid$CuboidDirection Vertical -> Abik
    react.surge.util.Cuboid$CuboidDirection Both -> Nhnl
    react.surge.util.Cuboid$CuboidDirection Unknown -> XwMe
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> jrpA
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> BemJ
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> gOCk
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> gVss
react.surge.util.Cuboid$CuboidIterator -> HLQx$YoSf:
    org.bukkit.World w -> BDLi
    int baseX -> sJhe
    int baseY -> TbSI
    int baseZ -> XTky
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> EEFM
    int sizeY -> KEvG
    int sizeZ -> xbiQ
    react.surge.util.Cuboid this$0 -> KNci
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> oUrI:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> HvfE:
    react.glang.GList buffer -> jsSg
    boolean dbg -> lxxk
    int kf -> rPVp
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> UACx
    41:49:void l(java.lang.Object,java.lang.String) -> YoSf
    53:54:void s(java.lang.Object,java.lang.String) -> jEpI
    58:69:void cdb() -> DsRj
    73:79:void v(java.lang.Object,java.lang.String) -> UACx
    83:84:void w(java.lang.Object,java.lang.String) -> Hmbb
    88:89:void f(java.lang.Object,java.lang.String) -> WhmJ
    93:106:void l(java.lang.String) -> cuCa
    110:117:void s(java.lang.String) -> pGcA
    121:135:void v(java.lang.String) -> bWlF
    139:146:void w(java.lang.String) -> hanJ
    150:157:void f(java.lang.String) -> EBXA
react.surge.util.DMSRequire -> SLRM:
    react.surge.util.DMSRequirement value() -> vImY
react.surge.util.DMSRequirement -> DHVi:
    react.surge.util.DMSRequirement SQL -> EwjH
    react.surge.util.DMSRequirement[] ENUM$VALUES -> rHEq
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> YpGB:
    react.surge.util.Depend VAULT -> pdBq
    react.surge.util.Depend FAWE -> OdEm
    react.surge.util.Depend WORLDEDIT -> GJka
    react.surge.util.Depend PROTOLIB -> jQOq
    react.surge.util.Depend CITIZENS -> QPXs
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> gYIF
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> cdQd:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> XljV
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> yBLe:
    react.surge.util.DimensionFace X -> DuFU
    react.surge.util.DimensionFace Y -> QjJX
    react.surge.util.DimensionFace Z -> DSBv
    react.surge.util.DimensionFace[] ENUM$VALUES -> CrBv
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> SKqU:
    react.surge.util.Direction U -> SMmA
    react.surge.util.Direction D -> sRxU
    react.surge.util.Direction N -> vmch
    react.surge.util.Direction S -> GJit
    react.surge.util.Direction E -> Oksn
    react.surge.util.Direction W -> QXgr
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> OIqH
    int[] $SWITCH_TABLE$surge$util$Direction -> oypG
    react.surge.util.Direction[] ENUM$VALUES -> PfgD
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> hRFv
    61:61:int x() -> twLL
    66:66:int y() -> mrWX
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> cRwa
    81:81:react.glang.GList news() -> JuEU
    86:86:react.glang.GList udnews() -> vIlh
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> NoTA
    115:147:react.surge.util.Direction fromByte(byte) -> Plhy
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> vIlf
react.surge.util.DynamicConfiguration -> cRoR:
react.surge.util.DynamicTracker -> vRVD:
react.surge.util.Embedded -> NwwF:
    react.glang.GList get() -> twLV
    void add(java.lang.Object) -> add
react.surge.util.FU -> mqnV:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> afIq
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> YoSf
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> Hmbb
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> WhmJ
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> DGwu:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> rDxD
react.surge.util.Health -> VLmB:
    double hp -> cwOS
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> mjFw
    41:41:double getHearts() -> iLYD
    51:51:double getHalfHearts() -> xOrd
    61:61:int getFlatHalfHearts() -> cmMr
react.surge.util.IO -> TiJY:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> pXxG:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> afIq
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> afIq
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> afIq
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> afIq
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> afIq
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> YoSf
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> jEpI
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> UACx
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> afIq
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> afIq
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> afIq
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> afIq
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> Hmbb
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> WhmJ
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> sQKk
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> Plhy
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> kYuF
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> afIq
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> hPlA
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> HBne
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> afIq
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> afIq
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> YoSf
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> afIq
react.surge.util.MSound -> QVnj:
    react.surge.util.MSound AMBIENCE_CAVE -> etcl
    react.surge.util.MSound AMBIENCE_RAIN -> rXek
    react.surge.util.MSound AMBIENCE_THUNDER -> BCkn
    react.surge.util.MSound ANVIL_BREAK -> xIVP
    react.surge.util.MSound ANVIL_LAND -> gPVY
    react.surge.util.MSound ANVIL_USE -> ptbi
    react.surge.util.MSound ARROW_HIT -> fDeP
    react.surge.util.MSound BURP -> FHKO
    react.surge.util.MSound CHEST_CLOSE -> JCUa
    react.surge.util.MSound CHEST_OPEN -> PVIP
    react.surge.util.MSound CLICK -> puHA
    react.surge.util.MSound DOOR_CLOSE -> LbnG
    react.surge.util.MSound DOOR_OPEN -> rPXs
    react.surge.util.MSound DRINK -> TsWC
    react.surge.util.MSound EAT -> YXQv
    react.surge.util.MSound EXPLODE -> YaCb
    react.surge.util.MSound FALL_BIG -> fgHg
    react.surge.util.MSound FALL_SMALL -> XTmw
    react.surge.util.MSound FIRE -> aNhW
    react.surge.util.MSound FIRE_IGNITE -> kmfe
    react.surge.util.MSound FIZZ -> SyDp
    react.surge.util.MSound FUSE -> xcKo
    react.surge.util.MSound GLASS -> gPXw
    react.surge.util.MSound HURT_FLESH -> lWXW
    react.surge.util.MSound ITEM_BREAK -> YiSw
    react.surge.util.MSound ITEM_PICKUP -> usTM
    react.surge.util.MSound LAVA -> QGhS
    react.surge.util.MSound LAVA_POP -> aFUy
    react.surge.util.MSound LEVEL_UP -> lEuR
    react.surge.util.MSound MINECART_BASE -> pRbR
    react.surge.util.MSound MINECART_INSIDE -> VFWU
    react.surge.util.MSound NOTE_BASS -> LbmC
    react.surge.util.MSound NOTE_PIANO -> rHGm
    react.surge.util.MSound NOTE_BASS_DRUM -> ShBV
    react.surge.util.MSound NOTE_STICKS -> kduX
    react.surge.util.MSound NOTE_BASS_GUITAR -> rHGU
    react.surge.util.MSound NOTE_SNARE_DRUM -> fEFD
    react.surge.util.MSound NOTE_PLING -> lVvM
    react.surge.util.MSound ORB_PICKUP -> jQPk
    react.surge.util.MSound PISTON_EXTEND -> AALW
    react.surge.util.MSound PISTON_RETRACT -> nTlK
    react.surge.util.MSound PORTAL -> bHxd
    react.surge.util.MSound PORTAL_TRAVEL -> FHMK
    react.surge.util.MSound PORTAL_TRIGGER -> mcOK
    react.surge.util.MSound SHOOT_ARROW -> IkHi
    react.surge.util.MSound SPLASH -> svBS
    react.surge.util.MSound SPLASH2 -> PUjK
    react.surge.util.MSound STEP_GRASS -> ohsq
    react.surge.util.MSound STEP_GRAVEL -> iMpb
    react.surge.util.MSound STEP_LADDER -> dWrg
    react.surge.util.MSound STEP_SAND -> wFYG
    react.surge.util.MSound STEP_SNOW -> hJmg
    react.surge.util.MSound STEP_STONE -> GvEE
    react.surge.util.MSound STEP_WOOD -> NqgL
    react.surge.util.MSound STEP_WOOL -> BMAh
    react.surge.util.MSound SWIM -> KEym
    react.surge.util.MSound WATER -> PgMA
    react.surge.util.MSound WOOD_CLICK -> IbXL
    react.surge.util.MSound BAT_DEATH -> YrHI
    react.surge.util.MSound BAT_HURT -> HgeW
    react.surge.util.MSound BAT_IDLE -> hmPo
    react.surge.util.MSound BAT_LOOP -> YWtR
    react.surge.util.MSound BAT_TAKEOFF -> oqeO
    react.surge.util.MSound BLAZE_BREATH -> JSxj
    react.surge.util.MSound BLAZE_DEATH -> VNkE
    react.surge.util.MSound BLAZE_HIT -> CObv
    react.surge.util.MSound CAT_HISS -> XDOK
    react.surge.util.MSound CAT_HIT -> EgKk
    react.surge.util.MSound CAT_MEOW -> JmjM
    react.surge.util.MSound CAT_PURR -> NObc
    react.surge.util.MSound CAT_PURREOW -> DJVV
    react.surge.util.MSound CHICKEN_IDLE -> Qilu
    react.surge.util.MSound CHICKEN_HURT -> qfiL
    react.surge.util.MSound CHICKEN_EGG_POP -> lWYm
    react.surge.util.MSound CHICKEN_WALK -> CFtB
    react.surge.util.MSound COW_IDLE -> ELxf
    react.surge.util.MSound COW_HURT -> eAdA
    react.surge.util.MSound COW_WALK -> nwQr
    react.surge.util.MSound CREEPER_HISS -> lEvf
    react.surge.util.MSound CREEPER_DEATH -> FioF
    react.surge.util.MSound ENDERDRAGON_DEATH -> hJlV
    react.surge.util.MSound ENDERDRAGON_GROWL -> yoAP
    react.surge.util.MSound ENDERDRAGON_HIT -> IHgJ
    react.surge.util.MSound ENDERDRAGON_WINGS -> WlBu
    react.surge.util.MSound ENDERMAN_DEATH -> EELP
    react.surge.util.MSound ENDERMAN_HIT -> NiXj
    react.surge.util.MSound ENDERMAN_IDLE -> Glsx
    react.surge.util.MSound ENDERMAN_TELEPORT -> ffkn
    react.surge.util.MSound ENDERMAN_SCREAM -> DtmK
    react.surge.util.MSound ENDERMAN_STARE -> WtTO
    react.surge.util.MSound GHAST_SCREAM -> dFsn
    react.surge.util.MSound GHAST_SCREAM2 -> pAeY
    react.surge.util.MSound GHAST_CHARGE -> HyIm
    react.surge.util.MSound GHAST_DEATH -> oGTG
    react.surge.util.MSound GHAST_FIREBALL -> yCoE
    react.surge.util.MSound GHAST_MOAN -> pkyK
    react.surge.util.MSound IRONGOLEM_DEATH -> TkJp
    react.surge.util.MSound IRONGOLEM_HIT -> MUTk
    react.surge.util.MSound IRONGOLEM_THROW -> XwWM
    react.surge.util.MSound IRONGOLEM_WALK -> cDRA
    react.surge.util.MSound MAGMACUBE_WALK -> yerC
    react.surge.util.MSound MAGMACUBE_WALK2 -> jYel
    react.surge.util.MSound MAGMACUBE_JUMP -> WbpE
    react.surge.util.MSound PIG_IDLE -> SxgO
    react.surge.util.MSound PIG_DEATH -> UCXV
    react.surge.util.MSound PIG_WALK -> tWCX
    react.surge.util.MSound SHEEP_IDLE -> TIFY
    react.surge.util.MSound SHEEP_SHEAR -> CWwQ
    react.surge.util.MSound SHEEP_WALK -> BTso
    react.surge.util.MSound SILVERFISH_HIT -> xRMX
    react.surge.util.MSound SILVERFISH_KILL -> knJk
    react.surge.util.MSound SILVERFISH_IDLE -> gjNq
    react.surge.util.MSound SILVERFISH_WALK -> BLca
    react.surge.util.MSound SKELETON_IDLE -> MwVh
    react.surge.util.MSound SKELETON_DEATH -> kLHP
    react.surge.util.MSound SKELETON_HURT -> heBR
    react.surge.util.MSound SKELETON_WALK -> HMtK
    react.surge.util.MSound SLIME_ATTACK -> UCYD
    react.surge.util.MSound SLIME_WALK -> QsBY
    react.surge.util.MSound SLIME_WALK2 -> WRSB
    react.surge.util.MSound SPIDER_IDLE -> EoaY
    react.surge.util.MSound SPIDER_DEATH -> oaHk
    react.surge.util.MSound SPIDER_WALK -> Eoab
    react.surge.util.MSound WITHER_DEATH -> NrLQ
    react.surge.util.MSound WITHER_HURT -> JnOy
    react.surge.util.MSound WITHER_IDLE -> Frdg
    react.surge.util.MSound WITHER_SHOOT -> bstD
    react.surge.util.MSound WITHER_SPAWN -> COgh
    react.surge.util.MSound WOLF_BARK -> tEbw
    react.surge.util.MSound WOLF_DEATH -> Hoyc
    react.surge.util.MSound WOLF_GROWL -> Khay
    react.surge.util.MSound WOLF_HOWL -> Tjke
    react.surge.util.MSound WOLF_HURT -> pBIB
    react.surge.util.MSound WOLF_PANT -> QreB
    react.surge.util.MSound WOLF_SHAKE -> yfUK
    react.surge.util.MSound WOLF_WALK -> BfVt
    react.surge.util.MSound WOLF_WHINE -> sJoi
    react.surge.util.MSound ZOMBIE_METAL -> CrLE
    react.surge.util.MSound ZOMBIE_WOOD -> iNUH
    react.surge.util.MSound ZOMBIE_WOODBREAK -> CGYJ
    react.surge.util.MSound ZOMBIE_IDLE -> mtTL
    react.surge.util.MSound ZOMBIE_DEATH -> MLcl
    react.surge.util.MSound ZOMBIE_HURT -> mlDB
    react.surge.util.MSound ZOMBIE_INFECT -> bcSQ
    react.surge.util.MSound ZOMBIE_UNFECT -> mlBd
    react.surge.util.MSound ZOMBIE_REMEDY -> HxjP
    react.surge.util.MSound ZOMBIE_WALK -> KXAI
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> BoId
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> vKiB
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> UKkT
    react.surge.util.MSound ZOMBIE_PIG_HURT -> MoHc
    react.surge.util.MSound DIG_WOOL -> GJsM
    react.surge.util.MSound DIG_GRASS -> sudJ
    react.surge.util.MSound DIG_GRAVEL -> eSIk
    react.surge.util.MSound DIG_SAND -> DAkm
    react.surge.util.MSound DIG_SNOW -> gisb
    react.surge.util.MSound DIG_STONE -> ORmQ
    react.surge.util.MSound DIG_WOOD -> bcVB
    react.surge.util.MSound FIREWORK_BLAST -> LJDl
    react.surge.util.MSound FIREWORK_BLAST2 -> BeyP
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> iVgq
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> Umow
    react.surge.util.MSound FIREWORK_TWINKLE -> ENBB
    react.surge.util.MSound FIREWORK_TWINKLE2 -> mkfB
    react.surge.util.MSound FIREWORK_LAUNCH -> hdfd
    react.surge.util.MSound SUCCESSFUL_HIT -> wpqs
    react.surge.util.MSound HORSE_ANGRY -> WJCu
    react.surge.util.MSound HORSE_ARMOR -> QPbn
    react.surge.util.MSound HORSE_BREATHE -> ExUP
    react.surge.util.MSound HORSE_DEATH -> aWah
    react.surge.util.MSound HORSE_GALLOP -> AkgK
    react.surge.util.MSound HORSE_HIT -> DlaJ
    react.surge.util.MSound HORSE_IDLE -> lycV
    react.surge.util.MSound HORSE_JUMP -> BDVa
    react.surge.util.MSound HORSE_LAND -> BUWo
    react.surge.util.MSound HORSE_SADDLE -> RSev
    react.surge.util.MSound HORSE_SOFT -> XMGn
    react.surge.util.MSound HORSE_WOOD -> msuU
    react.surge.util.MSound DONKEY_ANGRY -> lqRq
    react.surge.util.MSound DONKEY_DEATH -> QsGV
    react.surge.util.MSound DONKEY_HIT -> yeui
    react.surge.util.MSound DONKEY_IDLE -> ujke
    react.surge.util.MSound HORSE_SKELETON_DEATH -> SgkT
    react.surge.util.MSound HORSE_SKELETON_HIT -> Asvf
    react.surge.util.MSound HORSE_SKELETON_IDLE -> WlHJ
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> XoIS
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> Qacb
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> vKjq
    react.surge.util.MSound VILLAGER_DEATH -> tMtt
    react.surge.util.MSound VILLAGER_HAGGLE -> CqmM
    react.surge.util.MSound VILLAGER_HIT -> kmmm
    react.surge.util.MSound VILLAGER_IDLE -> QjUO
    react.surge.util.MSound VILLAGER_NO -> DuPt
    react.surge.util.MSound VILLAGER_YES -> hKRv
    java.lang.String pre19sound -> IYlW
    java.lang.String post19sound -> FsFv
    org.bukkit.Sound resolvedSound -> nnft
    react.surge.util.MSound[] ENUM$VALUES -> jjna
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> TysY
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> nKAx:
    org.bukkit.Material material -> ORnr
    java.lang.Byte data -> SVjl
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> JAbQ
    79:80:void setData(java.lang.Byte) -> afIq
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> wMKt:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> GQNo
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> lgHB
    68:68:boolean isAnyOnline() -> BvAE
    80:80:react.glang.GList inWorld(org.bukkit.World) -> XIlE
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> aTgj
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> afIq
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> afIq
    143:144:void disable(org.bukkit.entity.Player) -> KUHl
    154:155:void enable(org.bukkit.entity.Player) -> dxBo
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> afIq
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> YoSf
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> Tgrh
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> afIq
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> vIQd
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> jEpI
    300:300:boolean canFindPlayer(java.lang.String) -> BSCE
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> wehs
    338:345:react.glang.GList onlinePlayers() -> TaBd
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> prSv
    368:371:void clear(org.bukkit.entity.Player) -> oMMo
    381:385:void clearEffects(org.bukkit.entity.Player) -> KTgu
    398:399:void heal(org.bukkit.entity.Player,double) -> afIq
    409:410:void heal(org.bukkit.entity.Player) -> hbKv
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> sXxv
    432:433:void resetHunger(org.bukkit.entity.Player) -> wTeH
    443:444:void kill(org.bukkit.entity.Player) -> lCct
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> paRp
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> owbC
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> afIq
react.surge.util.P$1 -> wMKt$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> kYuF
    1:1:java.lang.Object onAdapt(java.lang.Object) -> sQKk
react.surge.util.P$2 -> wMKt$2:
    java.lang.Double val$doff -> KiFi
    org.bukkit.entity.Player val$e -> GeKP
    org.bukkit.entity.Entity[] val$result -> giuf
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> tSmU
react.surge.util.PE -> nldd:
    react.surge.util.PE ABSORPTION -> xswX
    react.surge.util.PE BLINDNESS -> veaD
    react.surge.util.PE CONFUSION -> KiGN
    react.surge.util.PE DAMAGE_RESISTANCE -> UKpH
    react.surge.util.PE FAST_DIGGING -> SWKr
    react.surge.util.PE FIRE_RESISTANCE -> nnjf
    react.surge.util.PE GLOWING -> PVSa
    react.surge.util.PE HARM -> OuTD
    react.surge.util.PE HEAL -> rsFe
    react.surge.util.PE HEALTH_BOOST -> heHp
    react.surge.util.PE HUNGER -> Wbwk
    react.surge.util.PE INCREASE_DAMAGE -> Vher
    react.surge.util.PE INVISIBILITY -> SxoI
    react.surge.util.PE JUMP -> thKf
    react.surge.util.PE LEVITATION -> vKme
    react.surge.util.PE LUCK -> cMIT
    react.surge.util.PE NIGHT_VISION -> UfCg
    react.surge.util.PE POISON -> bJDi
    react.surge.util.PE REGENERATION -> ixkm
    react.surge.util.PE SATURATION -> QGsD
    react.surge.util.PE SLOW -> PNBK
    react.surge.util.PE SLOW_DIGGING -> FXtd
    react.surge.util.PE SPEED -> uHjJ
    react.surge.util.PE UNLUCK -> wNpW
    react.surge.util.PE WATER_BREATHING -> oFwx
    react.surge.util.PE WEAKNESS -> yLeg
    react.surge.util.PE WITHER -> fwtA
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> afIq
    144:144:react.surge.util.PE d(int) -> EBXA
    156:156:react.surge.util.PE a(int) -> rDxD
    166:166:org.bukkit.potion.PotionEffect c() -> bGfg
    177:178:void c(org.bukkit.entity.LivingEntity) -> WhmJ
    182:183:void crm(org.bukkit.entity.LivingEntity) -> sQKk
    187:188:void rm(org.bukkit.entity.LivingEntity) -> Plhy
react.surge.util.ParticleEffect -> hIOs:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> MMHr
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> eAkm
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> nfXb
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> JUBG
    react.surge.util.ParticleEffect WATER_BUBBLE -> gHRn
    react.surge.util.ParticleEffect WATER_SPLASH -> YqnU
    react.surge.util.ParticleEffect WATER_WAKE -> rPaf
    react.surge.util.ParticleEffect SUSPENDED -> hlwY
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> DcqI
    react.surge.util.ParticleEffect CRIT -> VOSY
    react.surge.util.ParticleEffect CRIT_MAGIC -> pSMM
    react.surge.util.ParticleEffect SMOKE_NORMAL -> EMas
    react.surge.util.ParticleEffect SMOKE_LARGE -> PUqd
    react.surge.util.ParticleEffect SPELL -> ARXG
    react.surge.util.ParticleEffect SPELL_INSTANT -> HMys
    react.surge.util.ParticleEffect SPELL_MOB -> QXwV
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> Pfuc
    react.surge.util.ParticleEffect SPELL_WITCH -> GJyX
    react.surge.util.ParticleEffect DRIP_WATER -> heLE
    react.surge.util.ParticleEffect DRIP_LAVA -> hJwl
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> aFcc
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> iWMW
    react.surge.util.ParticleEffect TOWN_AURA -> PETK
    react.surge.util.ParticleEffect NOTE -> uHlv
    react.surge.util.ParticleEffect PORTAL -> yUYp
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> SyQW
    react.surge.util.ParticleEffect FLAME -> Tsbn
    react.surge.util.ParticleEffect LAVA -> eBNr
    react.surge.util.ParticleEffect FOOTSTEP -> AQxW
    react.surge.util.ParticleEffect CLOUD -> DKCM
    react.surge.util.ParticleEffect REDSTONE -> YjAo
    react.surge.util.ParticleEffect SNOWBALL -> Dlds
    react.surge.util.ParticleEffect SNOW_SHOVEL -> vvdD
    react.surge.util.ParticleEffect SLIME -> lheq
    react.surge.util.ParticleEffect HEART -> aFdU
    react.surge.util.ParticleEffect BARRIER -> HhQP
    react.surge.util.ParticleEffect ITEM_CRACK -> ItDx
    react.surge.util.ParticleEffect BLOCK_CRACK -> KpwS
    react.surge.util.ParticleEffect BLOCK_DUST -> tgkl
    react.surge.util.ParticleEffect WATER_DROP -> xQtp
    react.surge.util.ParticleEffect ITEM_TAKE -> CaQm
    react.surge.util.ParticleEffect MOB_APPEARANCE -> etqk
    react.surge.util.ParticleEffect DRAGON_BREATH -> PofH
    react.surge.util.ParticleEffect END_ROD -> OcrJ
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> yLge
    react.surge.util.ParticleEffect SWEEP_ATTACK -> hJwP
    java.util.Map NAME_MAP -> Akku
    java.util.Map ID_MAP -> nLiC
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> LAWQ
    java.util.List properties -> NaPH
    react.surge.util.ParticleEffect[] ENUM$VALUES -> utAH
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> esSh
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> afIq
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> MSAE
    557:565:react.surge.util.ParticleEffect fromId(int) -> GQNo
    577:578:boolean isWater(org.bukkit.Location) -> xGHf
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> afIq
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> afIq
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> afIq
    665:681:void display(float,int,org.bukkit.Location,double) -> afIq
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> afIq
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> afIq
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> afIq
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> afIq
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> afIq
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> afIq
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> afIq
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> afIq
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> afIq
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> afIq
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> afIq
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> afIq
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> afIq
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> afIq
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> hIOs$afIq:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> hIOs$YoSf:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> hIOs$jEpI:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> AHIU
    1594:1594:float getValueY() -> EvYV
    1605:1605:float getValueZ() -> AGgm
react.surge.util.ParticleEffect$OrdinaryColor -> hIOs$UACx:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> AHIU
    1526:1526:float getValueY() -> EvYV
    1537:1537:float getValueZ() -> AGgm
react.surge.util.ParticleEffect$ParticleColor -> hIOs$Hmbb:
    1383:1383:void <init>() -> <init>
    float getValueX() -> AHIU
    float getValueY() -> EvYV
    float getValueZ() -> AGgm
react.surge.util.ParticleEffect$ParticleColorException -> hIOs$WhmJ:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> hIOs$sQKk:
    org.bukkit.Material material -> ORnr
    byte data -> TIOK
    int[] packetData -> FbJG
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> JBDA
    1309:1309:java.lang.String getPacketDataString() -> lxIG
react.surge.util.ParticleEffect$ParticleDataException -> hIOs$Plhy:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> hIOs$kYuF:
    int version -> version
    java.lang.Class enumParticle -> LJID
    java.lang.reflect.Constructor packetConstructor -> NaPV
    java.lang.reflect.Method getHandle -> vvbj
    java.lang.reflect.Field playerConnection -> heNB
    java.lang.reflect.Method sendPacket -> kUEN
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> PgYC
    float offsetX -> OuVs
    float offsetY -> fVUl
    float offsetZ -> OdUn
    float speed -> fDsX
    int amount -> xsEy
    boolean longDistance -> DAqf
    react.surge.util.ParticleEffect$ParticleData data -> CrTs
    java.lang.Object packet -> AJJr
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> PJfk
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> afIq
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> YoSf
    2004:2018:void sendTo(org.bukkit.Location,double) -> YoSf
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> hIOs$kYuF$afIq:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> hIOs$kYuF$YoSf:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> hIOs$kYuF$jEpI:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> hIOs$hPlA:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> rPgO
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> xRYC
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> aiJW
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> JCde
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> MxBu
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> hIOs$HBne:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> YoiD:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> McaU
react.surge.util.Persist -> xjAS:
react.surge.util.PluginUtil -> HCeH:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> Hmbb
    81:85:void enableAll() -> MmOl
    95:99:void disable(org.bukkit.plugin.Plugin) -> WhmJ
    106:110:void disableAll() -> wUdR
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> sQKk
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> afIq
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> rVYp
    169:172:java.util.List getPluginNames(boolean) -> FonC
    184:187:java.lang.String getPluginVersion(java.lang.String) -> xWiq
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> Plhy
    237:316:java.util.List findByCommand(java.lang.String) -> yuAP
    337:338:void load(org.bukkit.plugin.Plugin) -> kYuF
    342:364:java.lang.String getPluginFileName(java.lang.String) -> iBlw
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> afIq
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> hPlA
    480:484:void reloadAll() -> DbUT
    496:622:void unload(org.bukkit.plugin.Plugin) -> HBne
react.surge.util.PoolCount -> wnmI:
react.surge.util.PoolDescriber -> mqpb:
react.surge.util.PoolNanoThrottle -> dMdF:
react.surge.util.PositionalSelector -> cSRM:
    react.glang.GSet allowedChunks -> uIOh
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> Drud
    39:40:void addChunk(org.bukkit.Chunk) -> MdAd
    44:44:react.glang.GSet getAllowedChunks() -> Vnvg
react.surge.util.Protocol -> oNCy:
    react.surge.util.Protocol LATEST -> aWga
    react.surge.util.Protocol R1_12_2 -> UUDk
    react.surge.util.Protocol R1_12_2_PRE -> iWMo
    react.surge.util.Protocol R1_12_1 -> BMOa
    react.surge.util.Protocol R1_12 -> Vyiq
    react.surge.util.Protocol R1_11_2 -> EVVh
    react.surge.util.Protocol R1_11_1 -> NYAV
    react.surge.util.Protocol R1_11 -> oaPU
    react.surge.util.Protocol R1_10_2 -> yLit
    react.surge.util.Protocol R1_10_1 -> JCbm
    react.surge.util.Protocol R1_10 -> PETa
    react.surge.util.Protocol R1_9_4 -> iVmV
    react.surge.util.Protocol R1_9_3 -> noNg
    react.surge.util.Protocol R1_9_2 -> qwus
    react.surge.util.Protocol R1_9_1 -> EEUh
    react.surge.util.Protocol R1_9 -> HhQb
    react.surge.util.Protocol R1_8_9 -> RTMJ
    react.surge.util.Protocol R1_8_8 -> xRXK
    react.surge.util.Protocol R1_8_7 -> eRqY
    react.surge.util.Protocol R1_8_6 -> edTF
    react.surge.util.Protocol R1_8_5 -> dicl
    react.surge.util.Protocol R1_8_4 -> MgCI
    react.surge.util.Protocol R1_8_3 -> yoQW
    react.surge.util.Protocol R1_8_2 -> OdWc
    react.surge.util.Protocol R1_8_1 -> FPlH
    react.surge.util.Protocol R1_8 -> kCdh
    react.surge.util.Protocol R1_7_10 -> SWSF
    react.surge.util.Protocol R1_7_9 -> RvRe
    react.surge.util.Protocol R1_7_8 -> oHAH
    react.surge.util.Protocol R1_7_7 -> XMOt
    react.surge.util.Protocol R1_7_6 -> fEWR
    react.surge.util.Protocol R1_7_5 -> ViMW
    react.surge.util.Protocol R1_7_4 -> aXKO
    react.surge.util.Protocol R1_7_3 -> liKS
    react.surge.util.Protocol R1_7_2 -> Ibfe
    react.surge.util.Protocol R1_7_1 -> ojDQ
    react.surge.util.Protocol B1_6_4 -> DcxU
    react.surge.util.Protocol B1_6_3 -> whjC
    react.surge.util.Protocol B1_6_2 -> Bnqf
    react.surge.util.Protocol B1_6_1 -> dPQQ
    react.surge.util.Protocol B1_5_2 -> OuXY
    react.surge.util.Protocol B1_5_1 -> wFes
    react.surge.util.Protocol B1_5 -> WIiy
    react.surge.util.Protocol B1_4_7 -> nMMf
    react.surge.util.Protocol B1_4_6 -> PfyL
    react.surge.util.Protocol B1_4_5 -> IkWH
    react.surge.util.Protocol B1_4_4 -> CrUx
    react.surge.util.Protocol B1_4_2 -> OdWY
    react.surge.util.Protocol B1_3_2 -> Bnrr
    react.surge.util.Protocol B1_3_1 -> YPRX
    react.surge.util.Protocol B1_2_5 -> kefW
    react.surge.util.Protocol B1_2_4 -> XLnM
    react.surge.util.Protocol EARLIEST -> kCbt
    react.surge.util.Protocol UNKNOWN -> aXIb
    int version -> version
    java.lang.String packageVersion -> HoOh
    java.lang.String versionName -> wNug
    boolean netty -> jIQa
    react.surge.util.Protocol[] ENUM$VALUES -> OtxN
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> MmNT
    118:118:java.lang.String getPackageVersion() -> CLul
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> HCkR
    142:150:react.surge.util.Protocol getProtocolVersion() -> HDKs
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> YoSf
    160:160:boolean isServerVersion() -> DrtO
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> dpPJ
    175:175:boolean isActualVersion() -> CoqT
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> OQQd
    200:200:int getMetaVersion() -> GHyJ
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> Eunk:
    react.surge.util.Protocol from -> qMds
    react.surge.util.Protocol to -> RCOe
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> YpQX
    21:21:react.surge.util.Protocol getTo() -> baXs
    26:26:boolean contains(react.surge.util.Protocol) -> jEpI
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> ivet:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> PTUN
    70:70:int randomNextInt() -> KfhG
    80:80:long randomNextLong() -> nJhT
    92:92:boolean isWithin(double) -> hbKv
    104:104:boolean isWithin(int) -> BSCE
    116:116:boolean isWithin(long) -> IWRm
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> sXxv
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> RQLS
react.surge.util.RawEvent -> JQyb:
react.surge.util.RayTrace -> dNER:
    org.bukkit.Location start -> lNyq
    org.bukkit.util.Vector direction -> qNIi
    java.lang.Double maxDistance -> GnDj
    java.lang.Double distanceCovered -> jcGk
    java.lang.Double step -> vfJS
    java.lang.Boolean stop -> rPlH
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> OrtJ
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> tSmU
    89:89:org.bukkit.Location getStart() -> QWXK
    94:95:void setStart(org.bukkit.Location) -> aTgj
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> DQTk
    114:115:void setMaxDistance(java.lang.Double) -> UACx
    119:119:java.lang.Double getDistanceCovered() -> vIqp
    124:125:void setDistanceCovered(java.lang.Double) -> Hmbb
    129:129:java.lang.Double getStep() -> FqNG
    134:135:void setStep(java.lang.Double) -> WhmJ
react.surge.util.ReflectionUtils -> IWgt:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> afIq
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> afIq
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> afIq
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> afIq
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> afIq
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> afIq
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> afIq
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> afIq
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> afIq
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> afIq
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> afIq
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> afIq
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> afIq
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> afIq
react.surge.util.ReflectionUtils$DataType -> IWgt$afIq:
    react.surge.util.ReflectionUtils$DataType BYTE -> TYux
    react.surge.util.ReflectionUtils$DataType SHORT -> GeTG
    react.surge.util.ReflectionUtils$DataType INTEGER -> FsRU
    react.surge.util.ReflectionUtils$DataType LONG -> wWil
    react.surge.util.ReflectionUtils$DataType CHARACTER -> TcIW
    react.surge.util.ReflectionUtils$DataType FLOAT -> puYb
    react.surge.util.ReflectionUtils$DataType DOUBLE -> ramL
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> tWQx
    java.util.Map CLASS_MAP -> gPlO
    java.lang.Class primitive -> dGcP
    java.lang.Class reference -> iqFM
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> lymS
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> pICG
    704:704:java.lang.Class getReference() -> QqMY
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> YoSf
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> jEpI
    741:742:java.lang.Class getReference(java.lang.Class) -> UACx
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> afIq
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> YoSf
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> YoSf
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> jEpI
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> afIq
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> IWgt$YoSf:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> NHCp
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> thSQ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> wFhJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> bknn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> SEqN
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> iOBX
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> Fror
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> wiKq
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> ItIp
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> EpNX
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> TtHx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> Vhlj
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> JDIH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> IYwF
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> grnQ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> Olkr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> fpNv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> Wkrh
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> xcaS
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> hBok
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> YGfF
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> jyha:
    void refresh() -> refresh
react.surge.util.SQLOperation -> ESlY:
    react.surge.util.SQLOperation LOAD -> yweW
    react.surge.util.SQLOperation SAVE -> ygEI
    react.surge.util.SQLOperation[] ENUM$VALUES -> NaXt
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> rgnB:
    react.surge.util.ServerState START -> cDbF
    react.surge.util.ServerState ENABLE -> pJhG
    react.surge.util.ServerState DISABLE -> OJhw
    react.surge.util.ServerState STOP -> vChA
    react.surge.util.ServerState RUNNING -> dOvJ
    react.surge.util.ServerState[] ENUM$VALUES -> pdYk
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> oNCs:
    org.bukkit.Location location -> nwBQ
    org.bukkit.util.Vector offset -> IHxO
    org.bukkit.util.Vector size -> YGet
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> MdAd
    90:94:org.bukkit.Location randomLocation() -> nKLm
    104:104:org.bukkit.Location randomSurface() -> twRJ
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> doqg
    129:129:org.bukkit.util.Vector getSize() -> VgKU
react.surge.util.SnowLevel -> priP:
    byte level -> cUdJ
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> sIYc
    51:52:void setLevel(byte) -> kYuF
react.surge.util.SuperCaller -> clcm:
    void run() -> run
react.surge.util.T -> MtvI:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> YoSf
    32:35:void stop() -> stop
react.surge.util.TXT -> HCdG:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> sQKk
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> afIq
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> afIq
    99:99:java.lang.String line(react.surge.util.C,int) -> afIq
    113:113:java.lang.String underline(react.surge.util.C,int) -> YoSf
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> afIq
react.surge.util.Tag -> WjBe:
    java.lang.String value() -> value
react.surge.util.Timer -> WPSC:
    long tns -> ipgH
    long cns -> utIu
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> CFAH
react.surge.util.VectorMath -> eXys:
    int[] $SWITCH_TABLE$surge$util$Axis -> KyWm
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> ENOC
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> afIq
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> afIq
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> YoSf
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> jEpI
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> afIq
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> YoSf
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> YoSf
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> jEpI
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> UACx
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> Hmbb
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> WhmJ
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> sQKk
    111:111:double round(double,int) -> Hmbb
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> afIq
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> afIq
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> afIq
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> UACx
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> Hmbb
    268:268:org.bukkit.util.Vector toVector(float,float) -> afIq
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> afIq
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> afIq
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> Plhy
    337:340:double getSpeed(org.bukkit.util.Vector) -> kYuF
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> afIq
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> hPlA
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> afIq
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> YoSf
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> jEpI
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> UACx
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> HBne
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> vtbQ
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> fvYO
react.surge.util.VectorMath$1 -> eXys$1:
    org.bukkit.util.Vector val$vector -> QrsJ
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> tSmU
    1:1:java.lang.Object onAdapt(java.lang.Object) -> sQKk
react.surge.util.W -> SUGg:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> kYuF
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> afIq
    75:86:org.bukkit.entity.Entity getEntity(int) -> wehs
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> afIq
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> afIq
    143:143:int getChunkX(org.bukkit.block.Block) -> hPlA
    155:155:int getChunkY(org.bukkit.block.Block) -> HBne
    168:169:void dropXp(org.bukkit.Location,int) -> YoSf
    180:180:int getChunkZ(org.bukkit.block.Block) -> tSmU
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> YoSf
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> afIq
    232:239:react.glang.GList news(org.bukkit.Location) -> mNyD
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> afIq
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> mNyD
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> xykf
    300:300:org.bukkit.World toSync(org.bukkit.World) -> hsNX
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> xGHf
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> FonC
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> FonC
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> xiMI
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> afIq
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> afIq
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> afIq
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> afIq
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> afIq
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> afIq
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> afIq
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> afIq
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> RQLS
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> PJfk
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> RQLS
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> jEpI
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> afIq
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> afIq
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> afIq
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> afIq
react.surge.util.W$1 -> SUGg$1:
    java.lang.Double val$doff -> KiFi
    org.bukkit.entity.Entity val$e -> RCQF
    org.bukkit.entity.Entity[] val$result -> giuf
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> tSmU
react.surge.util.Worlds -> XBTK:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> pHTd
    33:33:boolean hasWorld(java.lang.String) -> ktIG
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> aMNi:
react.text.ColoredString -> agAb:
    react.surge.util.C c -> eAvI
    java.lang.String s -> XwfO
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> PLHK
    42:43:void setC(react.surge.util.C) -> YoSf
    47:47:java.lang.String getS() -> JkxU
    52:53:void setS(java.lang.String) -> CgFX
react.text.RTEX -> FVqk:
    react.glang.GList extras -> HqHf
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> jWqS
    44:58:react.json.JSONObject toJSON() -> MuEB
react.text.RTX -> tefn:
    react.json.JSONArray base -> ULYo
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> WhmJ
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> YoSf
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> afIq
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> afIq
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> YoSf
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> jEpI
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> afIq
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> YoSf
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> jEpI
    265:265:react.json.JSONArray toJSON() -> nJjd
    276:277:void tellRawTo(org.bukkit.entity.Player) -> MuEB
react.text.RawText -> JlQA:
    java.lang.String COLOR_BLACK -> IQhI
    java.lang.String COLOR_DARK_BLUE -> sCOX
    java.lang.String COLOR_DARK_GREEN -> gQOA
    java.lang.String COLOR_DARK_AQUA -> KhpE
    java.lang.String COLOR_DARK_RED -> kUJB
    java.lang.String COLOR_DARK_PURPLE -> LSBK
    java.lang.String COLOR_GOLD -> pKGS
    java.lang.String COLOR_GRAY -> gPlg
    java.lang.String COLOR_DARK_GRAY -> qEYF
    java.lang.String COLOR_BLUE -> iWTJ
    java.lang.String COLOR_GREEN -> bSAK
    java.lang.String COLOR_AQUA -> qMhy
    java.lang.String COLOR_RED -> fpNN
    java.lang.String COLOR_LIGHT_PURPLE -> GSsD
    java.lang.String COLOR_YELLOW -> KXRJ
    java.lang.String COLOR_WHITE -> vfNO
    java.lang.String COLOR_NONE -> tWVd
    java.lang.String HEAD_TEXT -> IQkM
    java.lang.String HEAD_COLOR -> XLuB
    java.lang.String HEAD_BOLD -> mcdG
    java.lang.String HEAD_ITALIC -> Gmgk
    java.lang.String HEAD_UNDERLINED -> VXPr
    java.lang.String HEAD_STRIKETHROUGH -> coXM
    java.lang.String HEAD_OBFUSCATED -> buGN
    java.lang.String HEAD_CLICK_EVENT -> hSrm
    java.lang.String HEAD_HOVER_EVENT -> Gmgw
    java.lang.String HEAD_ACTION -> rapm
    java.lang.String HEAD_VALUE -> Wcdh
    java.lang.String HEAD_EXTRA -> FYck
    java.lang.String HEAD_ACTION_SHOW_TEXT -> UfOG
    java.lang.String HEAD_ACTION_COMMAND -> JCjx
    java.util.ArrayList components -> NaYi
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> miMV
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> Hmbb
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> afIq
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> afIq
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> afIq
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> afIq
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> afIq
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> afIq
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> afIq
    307:313:java.lang.String compile() -> kIrJ
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> afIq

react.Config -> FNJd:
    react.glang.GMap worldConfigs -> FNJd
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> KCgV
    java.lang.String A_ENTITYCACHE_INTERVAL -> kjvN
    java.lang.String A_COMMANDOVERRIDE_TPS -> wmxT
    java.lang.String A_REACT_REMOTE_PORT -> afJO
    java.lang.String A_REACT_REMOTE_ENABLED -> gVYg
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> oLoP
    java.lang.String A_POOL_MAXTHREADS -> qcvH
    java.lang.String A_POOL_SYNC_NANOS -> uWPs
    java.lang.String A_ENTITYCACHE_ENABLED -> XJNY
    java.lang.String A_FASTLEAF_ENABLED -> JHtm
    java.lang.String A_FASTLEAF_ONDECAY -> uhSC
    java.lang.String A_FASTLEAF_INSTANT -> KUIt
    java.lang.String A_FASTLEAF_DECAYPERIOD -> ESXa
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> Mtam
    java.lang.String A_ENTITYSTACK_ENABLED -> pXbi
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> IhUo
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> gVXt
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> RsPi
    java.lang.String A_GLASS_SHOW_BLOCKS -> Hmby
    java.lang.String A_GLASS_SHOW_PARTICLES -> MuBA
    java.lang.String A_ALLOW_CULL -> vQax
    java.lang.String A_ALLOW_PURGE -> mWiV
    java.lang.String A_ALLOW_CACHE -> FMiI
    java.lang.String A_CULL_RULES -> LGIw
    java.lang.String A_RAI_TPS_HIGH_TICK -> Etxs
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> erUL
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> RQKu
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> IhUC
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> wvgn
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> IVrU
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> IFQj
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> XuBA
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> rVVu
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> FMhw
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> BlQj
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> wnXL
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> rpIs
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> fSUY
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> paRl
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> HTRg
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> oDaC
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> CLsB
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> OPWC
    java.lang.String A_RAI_FLUID_TIME_CEIL -> dUat
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> qBWD
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> dVCT
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> jhVT
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> uWSi
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> oMRP
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> ooSy
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> XcbR
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> jpfB
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> BJPT
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> mFjX
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> IVub
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> CMSM
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> hsPr
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> ThVI
    java.lang.String A_USE_WORLD_CONFIGS -> NxGA
    java.lang.String A_LANGUAGE -> OPUT
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> XtbU
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> xymk
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> aDHO
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> uxuB
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> bFjM
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> clQL
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> GPmo
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> clPh
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> McbA
    java.lang.String A_RAI_ENTITY_PROPIGATE -> cInC
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> vREL
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> JjyT
    int ENTITYCACHE_CHUNK_RADIUS -> lehy
    int ENTITYCACHE_INTERVAL -> UQgG
    boolean COMMANDOVERRIDES_TPS -> fliO
    int REACT_REMOTE_PORT -> MuCu
    boolean REACT_REMOTE_ENABLED -> XdAl
    int ENTITY_STACK_MAX_COUNT -> YxIT
    int POOL_MAXTHREADS -> tTSJ
    long POOL_SYNC_NANOS -> tLBa
    boolean ENTITYCACHE_ENABLED -> EmNi
    boolean FASTLEAF_ENABLED -> dMSu
    boolean FASTLEAF_ONDECAY -> NLsx
    boolean FASTLEAF_INSTANT -> hsTD
    int FASTLEAF_DECAYPERIOD -> cdDE
    boolean COMMANDOVERRIDES_MEMORY -> tuuM
    boolean ENTITYSTACK_ENABLED -> pXfb
    int ENTITYSTACK_MINIMUM_GROUP -> aTkv
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> sapC
    int ENTITYSTACK_MAXIMUM_HEALTH -> mWnJ
    boolean GLASS_SHOW_BLOCKS -> IFVp
    boolean GLASS_SHOW_PARTICLES -> qmKr
    react.glang.GList ALLOW_CULL -> mXNm
    react.glang.GList ALLOW_PURGE -> Xtdx
    react.glang.GList ALLOW_CACHE -> Elnb
    react.glang.GList CULL_RULES -> XAaK
    double RAI_TPS_HIGH_TICK -> ktLO
    long RAI_REDSTONE_TIME_FLOOR -> CoWk
    long RAI_REDSTONE_TIME_CEIL -> wDHq
    long RAI_REDSTONE_TIME_MUDDING -> lfLl
    double RAI_REDSTONE_TIME_FUNCTION -> YoVa
    double RAI_REDSTONE_TIME_OVERBLEED -> Huuv
    int RAI_REDSTONE_TIME_RADIUS -> Grrv
    int RAI_REDSTONE_TIME_PROPIGATION -> JAIA
    long RAI_HOPPER_TIME_FLOOR -> HTTT
    long RAI_HOPPER_TIME_CEIL -> VwOg
    long RAI_HOPPER_TIME_MUDDING -> PRyh
    double RAI_HOPPER_TIME_FUNCTION -> yJOK
    double RAI_HOPPER_TIME_OVERBLEED -> Lqao
    int RAI_HOPPER_TIME_RADIUS -> ylRN
    int RAI_HOPPER_TIME_PROPIGATION -> MuFW
    int RAI_ENTITY_CHUNK_MULTIPLIER -> WiPt
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> LWrI
    int RAI_ENTITY_CHUNK_RADIUS -> GQSl
    long RAI_FLUID_TIME_FLOOR -> FhCd
    long RAI_FLUID_TIME_CEIL -> xWoc
    long RAI_FLUID_TIME_MUDDING -> Fgbi
    double RAI_FLUID_TIME_FUNCTION -> tLEL
    double RAI_FLUID_TIME_OVERBLEED -> YVHM
    int RAI_FLUID_TIME_RADIUS -> TNgx
    int RAI_FLUID_TIME_PROPIGATION -> LrEi
    double SMEAR_TICK_ENTITIES_MAX_TICK -> iBsX
    double SMEAR_TICK_TILES_MAX_TICK -> Rjdu
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> LiTk
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> vAIE
    double SMEAR_TICK_ENTITIES_AMOUNT -> rxbC
    double SMEAR_TICK_TILES_AMOUNT -> xqas
    boolean SMEAR_TICK_ENTITIES_ENABLE -> lTmF
    boolean SMEAR_TICK_TILES_ENABLE -> VfPr
    boolean HOPPER_OVERTICK_ENABLE -> jqKN
    boolean USE_WORLD_CONFIGS -> FWBn
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> kHxg
    long RAI_CHUNK_TIME_CEIL -> xFnJ
    long RAI_CHUNK_TIME_MUDDING -> paYr
    double RAI_CHUNK_TIME_FUNCTION -> xGOH
    double RAI_CHUNK_TIME_OVERBLEED -> hbSK
    int RAI_CHUNK_TIME_RADIUS -> Nwif
    int RAI_CHUNK_TIME_PROPIGATION -> CEIB
    boolean RAI_CHUNK_TIME_PROPIGATE -> Lysf
    boolean RAI_FLUID_TIME_PROPIGATE -> mWoY
    boolean RAI_ENTITY_PROPIGATE -> bXQE
    boolean RAI_HOPPER_TIME_PROPIGATE -> qAyB
    boolean RAI_REDSTONE_TIME_PROPIGATE -> qJik
    boolean hrld -> NxJu
    boolean rns -> EKLy
    boolean rrl -> paXn
    39:656:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    661:678:void doTrack(org.bukkit.plugin.Plugin) -> FNJd
    683:705:void onRead(org.bukkit.plugin.Plugin) -> KCgV
    709:739:void read(java.io.File,boolean) -> FNJd
    743:760:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> FNJd
    765:773:void closeWorldConfig(org.bukkit.World) -> KCgV
    778:891:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> FNJd
    896:933:react.surge.cluster.DataCluster defaultConfig(boolean) -> FNJd
    938:1013:react.glang.GList getDefaultEntitiesForCaching() -> FNJd
    1018:1093:react.glang.GList getDefaultEntitiesForCulling() -> KCgV
    1098:1135:react.glang.GList getDefaultEntitiesForRemoval() -> kjvN
    1140:1169:react.glang.GList getDefaultCullRules() -> wmxT
react.Config$1 -> FNJd$1:
    java.io.File val$fConfig -> HnIW
    java.io.File val$fConfigExperimental -> jOGI
    org.bukkit.plugin.Plugin val$main -> mqaa
    1:664:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    669:673:void run() -> run
react.Config$2 -> FNJd$2:
    react.api.WorldConfig val$wc -> LaDK
    org.bukkit.World val$w -> bhqa
    1:750:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    755:756:void run() -> run
react.Gate -> KCgV:
    react.glang.GMap defaultSettings -> kskq
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> cAaU
    37:37:void <clinit>() -> <clinit>
    35:35:void <init>() -> <init>
    41:131:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> FNJd
    135:160:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> FNJd
    165:165:int getChunkCountForView() -> afJO
    170:170:int getMaxChunksForView() -> gVYg
    175:175:boolean hasFawe() -> oLoP
    180:201:void tickEntityNextTickListTick(org.bukkit.World) -> kjvN
    205:209:void resetEntityMaxTick(org.bukkit.World) -> wmxT
    213:213:int getEntityTickMax(org.bukkit.World) -> afJO
    218:218:int getTileTickMax(org.bukkit.World) -> gVYg
    223:241:void tweakEntityTickMax(org.bukkit.World,int) -> FNJd
    245:262:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> FNJd
    267:271:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> FNJd
    275:287:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> FNJd
    292:296:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> KCgV
    300:318:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> FNJd
    322:326:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> oLoP
    331:334:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> FNJd
    339:342:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> KCgV
    347:347:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> kjvN
    352:352:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> wmxT
    357:357:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> afJO
    364:375:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    381:387:void unloadChunk(org.bukkit.World,int,int) -> FNJd
    391:402:void removeEntity(org.bukkit.entity.Entity) -> FNJd
    406:417:void purgeEntity(org.bukkit.entity.Entity) -> KCgV
    421:432:void cullEntity(org.bukkit.entity.Entity) -> kjvN
    436:447:void cachedEntity(org.bukkit.entity.Entity) -> wmxT
    452:469:void updateBlock(org.bukkit.block.Block) -> FNJd
    473:477:java.lang.String header(java.lang.String,react.surge.util.C) -> FNJd
    482:482:java.lang.String header(react.surge.util.C) -> FNJd
    488:492:void updateFluid(org.bukkit.block.Block) -> KCgV
    35:35:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> qcvH
react.Gate$1 -> KCgV$1:
    react.api.SelectorPosition val$sel -> ejJv
    react.glang.Callback val$prog -> rWBR
    react.glang.Callback val$cb -> BRft
    1:41:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    46:129:void run() -> run
react.Gate$1$1 -> KCgV$1$1:
    react.Gate$1 this$1 -> BdJF
    java.lang.Object val$o -> PJmy
    java.lang.reflect.Constructor val$vectorConstruct -> lnbW
    java.lang.reflect.Constructor val$cuboidConstruct -> APEQ
    java.lang.reflect.Method val$faweFixMethod -> ccfq
    java.lang.Integer[] val$total -> VURA
    java.lang.Integer[] val$sof -> WWtB
    react.glang.Callback val$prog -> rWBR
    java.lang.Integer val$tot -> Xkwe
    1:73:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    80:98:void run() -> run
react.Gate$1$2 -> KCgV$1$2:
    react.Gate$1 this$1 -> BdJF
    react.glang.Callback val$prog -> rWBR
    react.glang.Callback val$cb -> BRft
    java.lang.Integer[] val$total -> VURA
    1:102:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    109:117:void run() -> run
react.Info -> kjvN:
    java.lang.String CORE_REACT_DOT -> FFCM
    java.lang.String CORE_NAME -> rpSt
    java.lang.String CORE_CACHE -> MuJq
    java.lang.String WORLD_CONFIGS -> gyFP
    java.lang.String CORE_DOTYML -> AOcg
    java.lang.String COMMAND_REACT -> VUQV
    java.lang.String COMMAND_RAI -> AhvB
    java.lang.String COMMAND_ACT_DESCRIPTION -> rVaX
    java.lang.String COMMAND_ACT -> eXkX
    java.lang.String COMMAND_ACT_ALIAS_1 -> QhDv
    java.lang.String COMMAND_ACT_ALIAS_2 -> dxLX
    java.lang.String COMMAND_ACT_USAGE -> lvre
    java.lang.String COMMAND_HELP_DESCRIPTION -> Plql
    java.lang.String COMMAND_HELP -> HCXO
    java.lang.String COMMAND_HELP_ALIAS_1 -> hrvS
    java.lang.String COMMAND_HELP_ALIAS_2 -> oVIF
    java.lang.String COMMAND_HELP_USAGE -> dMYG
    java.lang.String COMMAND_STATUS_DESCRIPTION -> uFXS
    java.lang.String COMMAND_STATUS -> YgLO
    java.lang.String COMMAND_STATUS_ALIAS_1 -> BJVQ
    java.lang.String COMMAND_STATUS_ALIAS_2 -> BAeH
    java.lang.String COMMAND_STATUS_USAGE -> cSGJ
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> DYNw
    java.lang.String COMMAND_CPUSCORE -> yJTI
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> Yfjr
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> ssVL
    java.lang.String COMMAND_CPUSCORE_USAGE -> Euar
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> FpTm
    java.lang.String COMMAND_RELOAD -> yuHF
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> tTUh
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> XBEJ
    java.lang.String COMMAND_RELOAD_USAGE -> HSvo
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> iBsr
    java.lang.String COMMAND_MONITOR -> ksnd
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> bqcv
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> LiUb
    java.lang.String COMMAND_MONITOR_USAGE -> xaBp
    java.lang.String COMMAND_VERSION_DESCRIPTION -> Qxdf
    java.lang.String COMMAND_VERSION -> MItl
    java.lang.String COMMAND_VERSION_ALIAS_1 -> IOKX
    java.lang.String COMMAND_VERSION_ALIAS_2 -> WrFe
    java.lang.String COMMAND_VERSION_USAGE -> OinE
    java.lang.String COMMAND_MAP_DESCRIPTION -> aUPU
    java.lang.String COMMAND_MAP -> JAML
    java.lang.String COMMAND_MAP_ALIAS_1 -> WyvP
    java.lang.String COMMAND_MAP_ALIAS_2 -> TNjA
    java.lang.String COMMAND_MAP_USAGE -> FMqa
    java.lang.String COMMAND_GLASS_DESCRIPTION -> bObJ
    java.lang.String COMMAND_GLASS -> dwjk
    java.lang.String COMMAND_GLASS_ALIAS_1 -> kRKq
    java.lang.String COMMAND_GLASS_ALIAS_2 -> KCoV
    java.lang.String COMMAND_GLASS_USAGE -> XBEO
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> QNRM
    java.lang.String COMMAND_CBLAME -> XIwO
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> QNSw
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> oDiN
    java.lang.String COMMAND_CBLAME_USAGE -> aTqb
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> pGkm
    java.lang.String COMMAND_ACTIONLOG -> Xtjt
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> gNSk
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> KDSL
    java.lang.String COMMAND_ACTIONLOG_USAGE -> upmV
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> BuLc
    java.lang.String COMMAND_CAPABILITIES -> VoFl
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> NUlX
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> MSKC
    java.lang.String COMMAND_CAPABILITIES_USAGE -> HnNa
    java.lang.String MSG_PERMISSION -> xPCw
    java.lang.String MSG_MONITORING_STARTED -> lDQH
    java.lang.String MSG_MONITORING_STOPPED -> jqOT
    java.lang.String MSG_ACTIONLOGGING_STARTED -> gWDc
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> JtRk
    java.lang.String MSG_GLASS_STARTED -> vcOR
    java.lang.String MSG_GLASS_STOPPED -> ogKq
    org.bukkit.Color COLOR_HOPPER -> VoDm
    org.bukkit.Color COLOR_BLOCK_UPDATE -> UtRU
    org.bukkit.Color COLOR_BLOCK_FROMTO -> rFAk
    org.bukkit.Color COLOR_BLOCK_BURN -> nchK
    org.bukkit.Color COLOR_BLOCK_DECAY -> wvsO
    org.bukkit.Color COLOR_BLOCK_FORM -> fmRh
    java.lang.String NAME_TICK -> CfmX
    java.lang.String NAME_MEMORY -> eHLJ
    java.lang.String NAME_CHUNKS -> flqj
    java.lang.String NAME_ENTITIES -> vtPY
    java.lang.String STATE_MONITORING_TAB -> LGTs
    java.lang.String STATE_MONITORING_ENABLED -> Elsk
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> goxB
    java.lang.String STATE_MAPPING_ENABLED -> IOOo
    java.lang.String STATE_SOUND_PLAYS -> RIIU
    java.lang.String STATE_MONITORING_POSTED -> EJrw
    java.lang.String STATE_MONITORING_LASTTAB -> ebAi
    java.lang.String STATE_GLASSES_ENABLED -> KewE
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> Veui
    java.lang.String STATE_PLAYER_HOTBAR -> IiBp
    java.lang.String STATE_PLAYER_SHIFT -> kQpf
    java.lang.String STATE_PLAYER_SCROLL -> maIS
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> mXWh
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> FWII
    java.lang.String PERM_ACCESS -> fJqk
    java.lang.String PERM_MONITOR -> QFGN
    java.lang.String PERM_MONITOR_TITLE -> ObCn
    java.lang.String PERM_MONITOR_ACTIONLOG -> VTuJ
    java.lang.String PERM_MONITOR_MAP -> AXYE
    java.lang.String PERM_MONITOR_ENVIRONMENT -> DGqK
    java.lang.String PERM_MONITOR_GLASSES -> TiBf
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> cAgX
    java.lang.String PERM_ACT -> dxPJ
    java.lang.String PERM_RAI -> CVOx
    java.lang.String PERM_RAI_CONTROL -> skIb
    java.lang.String PERM_RAI_ACCESS -> xiWc
    java.lang.String PERM_RAI_MONITOR -> ycho
    java.lang.String PERM_RELOAD -> pXoD
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> tCYI
    java.lang.String SAMPLER_REDSTONE_TICK -> gyHp
    java.lang.String SAMPLER_ENTITY_TIME -> aCpn
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> FMua
    java.lang.String SAMPLER_TILE_TIME_LOCK -> vROX
    java.lang.String SAMPLER_TILE_TIME -> ArMF
    java.lang.String SAMPLER_TILE_DROPTICK -> OjSH
    java.lang.String SAMPLER_ENTITY_DROPTICK -> SmnE
    java.lang.String SAMPLER_REDSTONE_SECOND -> cRiP
    java.lang.String SAMPLER_REDSTONE_TIME -> IqSF
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> Kvwe
    java.lang.String SAMPLER_HOPPER_TICK -> DjSk
    java.lang.String SAMPLER_HOPPER_SECOND -> YxQF
    java.lang.String SAMPLER_HOPPER_TIME -> FyKW
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> JkgH
    java.lang.String SAMPLER_FLUID_TICK -> DXtA
    java.lang.String SAMPLER_FLUID_SECOND -> fSdc
    java.lang.String SAMPLER_FLUID_TIME -> eHPy
    java.lang.String SAMPLER_TPS -> wTuI
    java.lang.String SAMPLER_TICK -> oVOb
    java.lang.String SAMPLER_TIU -> eirt
    java.lang.String SAMPLER_MEM -> rghm
    java.lang.String SAMPLER_FREEMEM -> YpCf
    java.lang.String SAMPLER_MAXMEM -> psEB
    java.lang.String SAMPLER_ALLOCMEM -> XtpQ
    java.lang.String SAMPLER_MAHS -> hPxw
    java.lang.String SAMPLER_CHK -> oDmC
    java.lang.String SAMPLER_ATASK -> FxmT
    java.lang.String SAMPLER_STASK -> XSNC
    java.lang.String SAMPLER_CHK_TIME -> bGYJ
    java.lang.String SAMPLER_EXPLOSION_TIME -> bqjj
    java.lang.String SAMPLER_CHKS -> VMFX
    java.lang.String SAMPLER_ENT -> mrJv
    java.lang.String SAMPLER_ENTLIV -> INpU
    java.lang.String SAMPLER_ENTDROP -> DHQw
    java.lang.String SAMPLER_ENTTILE -> AOjm
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> AqnK
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> TXBR
    java.lang.String ACTION_CULL_ENTITIES_NAME -> Wqkk
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> rxiO
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> TNpR
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> eYQo
    java.lang.String ACTION_UPDATE_FLUID_NAME -> Qgik
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> SnQO
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> TNpN
    java.lang.String ACTION_LOCK_FLUID_STATUS -> SfCW
    java.lang.String ACTION_LOCK_FLUID_NAME -> rgjl
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> opCy
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> EKXV
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> tfBC
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> ECHQ
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> dUqF
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> jWbn
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> SvdP
    java.lang.String ACTION_LOCK_HOPPER_NAME -> bqma
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> yRmI
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> TiGI
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> rhJy
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> fmYX
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> wfYW
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> aCwF
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> DPfW
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> UJFi
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> SKop
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> uXBU
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> pGqJ
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> wDTy
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> dNAB
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> UtXg
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> xqkq
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> fJsv
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> psGC
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> oEOQ
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> yRlF
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> UASr
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> sPyt
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> nBJw
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> MAmJ
    java.lang.String ACTION_FIX_LIGHTING_NAME -> cdPH
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> dfrH
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> NEQX
    java.lang.String ACTION_COLLECT_GARBAGE -> CERR
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> OYXS
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> fvMM
    8:233:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> wmxT:
    java.lang.String BUNDLE_NAME -> tLPl
    java.util.ResourceBundle RESOURCE_BUNDLE -> ndQu
    java.util.ResourceBundle PRIMARY_BUNDLE -> vJFn
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> afJO:
    react.React instance -> dUre
    react.controller.SampleController sampleController -> inTj
    react.controller.PlayerController playerController -> XdRk
    react.controller.MonitorController monitorController -> hkQj
    react.controller.CommandController commandController -> XmCr
    react.controller.ActionController actionController -> WjAg
    react.controller.FastDecayController fastDecayController -> SUCw
    react.controller.EntityStackController entityStackController -> BKBF
    react.controller.GlassController glassController -> XSQp
    react.controller.EntityCullController entityCullController -> ggmQ
    react.controller.SpikeController spikeController -> UlLF
    react.controller.SecurityController securityController -> ydQK
    react.controller.RedstoneController redstoneController -> FqBV
    react.controller.HopperController hopperController -> rxnS
    react.controller.PhysicsController physicsController -> BJav
    react.controller.TickTimeController tickTimeController -> xqnP
    react.controller.RAIController raiController -> DsKD
    react.controller.FluidController fluidController -> fdiP
    react.controller.ChunkController chunkController -> rhLo
    react.controller.GraphController graphController -> MAnc
    react.controller.ChronophyFluidController fluidChronophyController -> YDpl
    react.controller.EventController eventController -> YgTk
    react.controller.BlockInjectController blockInjectController -> DXwR
    react.controller.SmearTickController smearTickController -> ydOl
    react.controller.FeatureController featureController -> xGYk
    react.controller.HopperOvertickController hopperPlungeController -> tUAN
    react.controller.BenchmarkController benchmarkController -> jORu
    react.controller.LanguageController languageController -> Cofs
    react.controller.RemoteController remoteController -> GkSN
    react.controller.ExplosiveController explosiveController -> vtXb
    react.controller.WorldController worldController -> WaRR
    42:42:void <init>() -> <init>
    141:141:void enable() -> enable
    147:147:void disable() -> disable
react.action.ActionCollectGarbage -> gVYg:
    19:22:void <init>() -> <init>
    27:61:void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
react.action.ActionCollectGarbage$1 -> gVYg$1:
    react.action.ActionCollectGarbage this$0 -> DHYX
    react.api.IActionSource val$source -> XtvG
    1:29:void <init>(react.action.ActionCollectGarbage,react.api.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> FNJd
react.action.ActionCollectGarbage$1$1 -> gVYg$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> SCcb
    long val$mbnex -> eYYK
    long val$mbmem -> nBQU
    react.api.IActionSource val$source -> XtvG
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.api.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> oLoP:
    long ms -> sjqs
    int lcd -> sYqD
    32:59:void <init>() -> <init>
    64:150:void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> FNJd
    27:27:void access$0(react.action.ActionCullEntities,long) -> FNJd
    28:28:int access$1(react.action.ActionCullEntities) -> FNJd
    27:27:long access$2(react.action.ActionCullEntities) -> KCgV
react.action.ActionCullEntities$1 -> oLoP$1:
    react.action.ActionCullEntities this$0 -> MJcO
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> oLoP$2:
    react.action.ActionCullEntities this$0 -> MJcO
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> oLoP$3:
    react.action.ActionCullEntities this$0 -> MJcO
    react.glang.FinalInteger val$completed -> JJJw
    react.glang.FinalInteger val$total -> Qgpq
    react.glang.FinalInteger val$totalCulled -> tCaV
    react.glang.FinalInteger val$totalChunked -> qTKO
    react.api.IActionSource val$source -> XtvG
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> oLoP$4:
    react.action.ActionCullEntities this$0 -> MJcO
    react.api.IActionSource val$source -> XtvG
    react.glang.FinalInteger val$totalCulled -> tCaV
    react.glang.FinalInteger val$totalChunked -> qTKO
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> qcvH:
    25:39:void <init>() -> <init>
    44:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
react.action.ActionFixLighting$1 -> qcvH$1:
    react.action.ActionFixLighting this$0 -> PBjn
    1:28:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> qcvH$2:
    react.action.ActionFixLighting this$0 -> PBjn
    react.api.IActionSource val$source -> XtvG
    int val$ch -> Rsdv
    1:77:void <init>(react.action.ActionFixLighting,react.api.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> FNJd
    1:1:void run(java.lang.Object) -> FNJd
react.action.ActionFixLighting$3 -> qcvH$3:
    react.action.ActionFixLighting this$0 -> PBjn
    1:88:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> FNJd
    1:1:void run(java.lang.Object) -> FNJd
react.action.ActionLockFluid -> uWPs:
    int lcd -> sYqD
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
react.action.ActionLockFluid$1 -> uWPs$1:
    react.action.ActionLockFluid this$0 -> dpIT
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> uWPs$2:
    react.action.ActionLockFluid this$0 -> dpIT
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> XJNY:
    int lcd -> sYqD
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
react.action.ActionLockHopper$1 -> XJNY$1:
    react.action.ActionLockHopper this$0 -> rElE
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> XJNY$2:
    react.action.ActionLockHopper this$0 -> rElE
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> JHtm:
    int lcd -> sYqD
    26:53:void <init>() -> <init>
    58:102:void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
react.action.ActionLockRedstone$1 -> JHtm$1:
    react.action.ActionLockRedstone this$0 -> PCKu
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> JHtm$2:
    react.action.ActionLockRedstone this$0 -> PCKu
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> uhSC:
    long ms -> sjqs
    int lcd -> sYqD
    boolean fail -> TWhb
    31:46:void <init>() -> <init>
    51:144:void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> KCgV
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> FNJd
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> FNJd
    26:26:int access$2(react.action.ActionPurgeChunks) -> KCgV
    25:25:long access$3(react.action.ActionPurgeChunks) -> kjvN
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> FNJd
react.action.ActionPurgeChunks$1 -> uhSC$1:
    react.action.ActionPurgeChunks this$0 -> Dakl
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> uhSC$2:
    react.action.ActionPurgeChunks this$0 -> Dakl
    int val$dk -> bPOt
    java.lang.Object val$j -> sjqP
    react.api.IActionSource val$source -> XtvG
    react.api.ISelector[] val$selectors -> tUCW
    react.glang.FinalInteger val$acompleted -> UAWo
    react.glang.FinalInteger val$completed -> JJJw
    react.glang.FinalInteger val$total -> Qgpq
    react.glang.FinalInteger val$totalCulled -> tCaV
    react.glang.FinalInteger val$totalChunked -> qTKO
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.api.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> FNJd
react.action.ActionPurgeChunks$2$1 -> uhSC$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> uWfB
    react.glang.FinalInteger val$acompleted -> UAWo
    react.glang.FinalInteger val$completed -> JJJw
    react.glang.FinalInteger val$total -> Qgpq
    react.glang.FinalInteger val$totalCulled -> tCaV
    react.glang.FinalInteger val$totalChunked -> qTKO
    react.api.IActionSource val$source -> XtvG
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> uhSC$3:
    react.action.ActionPurgeChunks this$0 -> Dakl
    react.api.IActionSource val$source -> XtvG
    react.glang.FinalInteger val$acompleted -> UAWo
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> uhSC$4:
    react.action.ActionPurgeChunks this$0 -> Dakl
    org.bukkit.Chunk val$chunk -> oxXM
    java.lang.Runnable val$cb -> LjBr
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> KUIt:
    long ms -> sjqs
    int lcd -> sYqD
    34:61:void <init>() -> <init>
    66:153:void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> KCgV
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> FNJd
    30:30:int access$1(react.action.ActionPurgeEntities) -> FNJd
    29:29:long access$2(react.action.ActionPurgeEntities) -> KCgV
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> FNJd
react.action.ActionPurgeEntities$1 -> KUIt$1:
    react.action.ActionPurgeEntities this$0 -> qeKp
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> KUIt$2:
    react.action.ActionPurgeEntities this$0 -> qeKp
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> KUIt$3:
    react.action.ActionPurgeEntities this$0 -> qeKp
    react.glang.FinalInteger val$completed -> JJJw
    react.glang.FinalInteger val$total -> Qgpq
    react.glang.FinalInteger val$totalCulled -> tCaV
    react.glang.FinalInteger val$totalChunked -> qTKO
    react.api.IActionSource val$source -> XtvG
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> KUIt$4:
    react.action.ActionPurgeEntities this$0 -> qeKp
    react.api.IActionSource val$source -> XtvG
    react.glang.FinalInteger val$totalCulled -> tCaV
    react.glang.FinalInteger val$totalChunked -> qTKO
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> KUIt$5:
    react.action.ActionPurgeEntities this$0 -> qeKp
    org.bukkit.entity.Entity val$i -> nKAb
    react.glang.FinalInteger val$cu -> ylbe
    int val$k -> nAnw
    org.bukkit.Chunk val$chunk -> oxXM
    java.lang.Runnable val$cb -> LjBr
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> ESXa:
    int lcd -> sYqD
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
react.action.ActionUnlockFluid$1 -> ESXa$1:
    react.action.ActionUnlockFluid this$0 -> MRrX
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> Mtam:
    int lcd -> sYqD
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
react.action.ActionUnlockHopper$1 -> Mtam$1:
    react.action.ActionUnlockHopper this$0 -> QVnR
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> pXbi:
    int lcd -> sYqD
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
react.action.ActionUnlockRedstone$1 -> pXbi$1:
    react.action.ActionUnlockRedstone this$0 -> eYWc
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> uWPs
    1:1:java.lang.Object get() -> get
react.api.Action -> IhUo:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> YfwD
    java.lang.String[] nodes -> hjpq
    react.api.ActionHandle handle -> OsKx
    react.api.ActionState state -> FWOu
    react.api.ActionTargetType target -> Qgoi
    react.api.ActionType type -> ebIe
    react.api.IActionSource currentSource -> eriu
    double progress -> FySV
    react.glang.GMap defaultSelectors -> upvg
    26:27:void <init>(react.api.ActionType) -> <init>
    29:42:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    47:62:react.api.ISelector[] biselect(react.api.ISelector[]) -> FNJd
    68:69:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> FNJd
    74:74:java.lang.String getName() -> getName
    80:80:java.lang.String getDescription() -> getDescription
    86:86:react.api.ActionHandle getHandleType() -> XJNY
    92:92:react.api.ActionState getState() -> JHtm
    98:98:java.lang.String getStatus() -> getStatus
    104:105:void setStatus(java.lang.String) -> FNJd
    110:110:double getProgress() -> getProgress
    116:117:void setProgress(double) -> setProgress
    122:122:react.api.ActionTargetType getTarget() -> uhSC
    128:128:react.api.ActionType getType() -> KUIt
    134:134:react.glang.GMap getDefaultSelectors() -> ESXa
    140:182:void act(react.api.IActionSource,react.api.ISelector[]) -> KCgV
    187:188:void completeAction() -> Mtam
    193:193:react.api.IActionSource getCurrentSource() -> pXbi
    199:199:java.lang.String[] getNodes() -> IhUo
    205:206:void setNodes(java.lang.String[]) -> FNJd
    void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
react.api.ActionAlreadyRunningException -> gVXt:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> RsPi:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> Hmby:
    react.api.ActionHandle AUTOMATIC -> jWec
    react.api.ActionHandle MANUAL -> FWPY
    react.api.ActionHandle MUTEX -> GRBq
    react.api.ActionHandle[] ENUM$VALUES -> BRsg
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionHandle[] values() -> values
    1:1:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
react.api.ActionNotRunningException -> MuBA:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> vQax:
    react.api.ActionState IDLE -> jFdU
    react.api.ActionState RUNNING -> rVlQ
    react.api.ActionState[] ENUM$VALUES -> RbcN
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> mWiV:
    react.api.ActionTargetType POSITIONAL -> qShp
    react.api.ActionTargetType SYSTEM -> LrSh
    react.api.ActionTargetType[] ENUM$VALUES -> aLnR
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> FMiI:
    react.api.ActionType FIX_LIGHTING -> NpKo
    react.api.ActionType UNLOCK_FLUID -> STgG
    react.api.ActionType LOCK_FLUID -> vklu
    react.api.ActionType UNLOCK_HOPPER -> PeQH
    react.api.ActionType LOCK_HOPPER -> HKwA
    react.api.ActionType UNLOCK_REDSTONE -> ogXx
    react.api.ActionType LOCK_REDSTONE -> skUU
    react.api.ActionType CULL_ENTITIES -> XKDx
    react.api.ActionType COLLECT_GARBAGE -> Xlfy
    react.api.ActionType PURGE_ENTITIES -> rhRV
    react.api.ActionType PURGE_CHUNKS -> eajn
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> OsKx
    react.api.ActionTargetType target -> Qgoi
    react.api.ActionType[] ENUM$VALUES -> Gsgm
    5:17:void <clinit>() -> <clinit>
    24:30:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    34:34:java.lang.String getName() -> getName
    39:39:java.lang.String getDescription() -> getDescription
    44:44:react.api.ActionHandle getHandle() -> gVXt
    49:49:react.api.ActionTargetType getTarget() -> uhSC
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> LGIw:
    react.api.ActivationRangeType ANIMALS -> fBkn
    react.api.ActivationRangeType MONSTERS -> vAYU
    react.api.ActivationRangeType MISC -> ealN
    react.api.ActivationRangeType[] ENUM$VALUES -> ETOt
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> Etxs:
    int value() -> value
react.api.Async -> erUL:
react.api.CPUBenchmark -> RQKu:
    org.bukkit.command.CommandSender sender -> sender
    int score -> yRsI
    java.lang.Runnable onFinish -> INyn
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:86:void run() -> run
    90:90:org.bukkit.command.CommandSender getSender() -> getSender
    95:95:int getScore() -> getScore
    100:100:java.lang.Runnable getOnFinish() -> RsPi
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> FNJd
    13:13:int access$1(react.api.CPUBenchmark) -> KCgV
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> kjvN
react.api.CPUBenchmark$1 -> RQKu$1:
    react.api.CPUBenchmark this$0 -> xYBO
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> RQKu$2:
    react.api.CPUBenchmark this$0 -> xYBO
    1:72:void <init>(react.api.CPUBenchmark) -> <init>
    77:84:void run() -> run
react.api.CPUResult -> IhUC:
    react.api.CPUResult ULTRA_SLOW -> iDDs
    react.api.CPUResult VERY_SLOW -> twIR
    react.api.CPUResult SLOW -> hQcE
    react.api.CPUResult AVERAGE -> tKtF
    react.api.CPUResult GOOD -> HLXP
    react.api.CPUResult FAST -> LjFc
    react.api.CPUResult VERY_FAST -> pPiT
    react.api.CPUResult ULTRA_FAST -> GcHJ
    java.lang.String m -> BBVU
    react.api.CPUResult[] ENUM$VALUES -> bibe
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> FNJd
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> wvgn:
    react.glang.GMap cache -> tDDF
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> KCgV
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> kjvN
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> Hmby
    54:54:boolean has(java.lang.Object) -> wmxT
react.api.Capability -> IVrU:
    react.api.Capability DUAL_WEILD -> LYCa
    react.api.Capability SCOREBOARD -> AaVK
    react.api.Capability SCOREBOARD_ADVANCED -> Aquy
    react.api.Capability HOPPER -> eHXW
    react.api.Capability ENTITY_ATTRIBUTES -> ySRn
    react.api.Capability ENTITY_AI -> cctr
    react.api.Capability ACTION_BAR -> CDwe
    react.api.Capability ENTITY_NAMES -> Gbdy
    react.api.Capability TITLE_BAR -> prkN
    react.api.Capability CHUNK_RELIGHTING -> PvQb
    react.api.Capability MONITOR_SUBMISSIVENESS -> XSTt
    react.api.Capability ACCELERATED_PING -> FhTD
    react.api.Capability ENTITY_THROTTLING -> vbyo
    react.api.Capability TILE_THROTTLING -> loPR
    react.glang.GList capabilities -> cleu
    react.surge.util.Protocol version -> iDCq
    react.api.Flavor flavor -> cdVH
    java.lang.String plugin -> iTdh
    java.lang.String name -> name
    13:45:void <clinit>() -> <clinit>
    52:58:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    62:63:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    67:68:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    72:73:void <init>(java.lang.String,java.lang.String) -> <init>
    77:78:void <init>(java.lang.String,react.api.Flavor) -> <init>
    82:83:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    87:92:boolean isPluginCapable() -> MuBA
    97:97:boolean isFlavorCapable() -> vQax
    102:102:boolean isVersionCapable() -> mWiV
    107:107:boolean isCapable() -> FMiI
    112:112:react.surge.util.Protocol getVersion() -> LGIw
    117:117:react.api.Flavor getFlavor() -> Etxs
    122:122:java.lang.String getPlugin() -> erUL
    127:127:java.lang.String getName() -> getName
    132:146:void sendNotCapable(org.bukkit.entity.Player) -> FNJd
    150:164:void sendNotCapable(react.api.IActionSource) -> FNJd
react.api.CapabilityBasis -> IFQj:
    react.api.CapabilityBasis VERSION -> CUxg
    react.api.CapabilityBasis FLAVOR -> HChM
    react.api.CapabilityBasis PLUGIN -> gpeP
    react.api.CapabilityBasis[] ENUM$VALUES -> LaVb
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.CapabilityBasis[] values() -> values
    1:1:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> XuBA:
    react.api.ChunkIssue ENTITY -> PeRj
    react.api.ChunkIssue HOPPER -> anri
    react.api.ChunkIssue REDSTONE -> mqvQ
    react.api.ChunkIssue FLUID -> dokc
    react.api.ChunkIssue PHYSICS -> EnEK
    react.api.ChunkIssue[] ENUM$VALUES -> PvUE
    3:9:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
react.api.Clip -> rVVu:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> FMhw:
    org.bukkit.command.CommandSender sender -> sender
    11:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> KCgV
    30:31:void sendResponseSuccess(java.lang.String) -> kjvN
    36:37:void sendResponseError(java.lang.String) -> wmxT
    42:43:void sendResponseActing(java.lang.String) -> afJO
react.api.ConsoleActionSource -> BlQj:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> KCgV
    18:19:void sendResponseSuccess(java.lang.String) -> kjvN
    24:25:void sendResponseError(java.lang.String) -> wmxT
    30:31:void sendResponseActing(java.lang.String) -> afJO
react.api.CullList -> wnXL:
    react.glang.GSet toCull -> CNJm
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> afJO
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> RQKu
react.api.DTest -> rpIs:
    3:3:void <init>() -> <init>
    7:58:int test() -> IhUC
react.api.EntityFlag -> fSUY:
    react.api.EntityFlag NAMED -> LqxH
    react.api.EntityFlag TAMED -> wgAv
    react.api.EntityFlag STACKED -> BmKM
    react.api.EntityFlag RIDDEN -> Qxvb
    react.api.EntityFlag LEASHED -> wxCq
    java.lang.String m -> BBVU
    react.api.EntityFlag[] ENUM$VALUES -> oEXO
    8:14:void <clinit>() -> <clinit>
    18:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> gVYg
    40:60:boolean is(org.bukkit.entity.Entity) -> oLoP
    66:66:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> paRl:
    react.glang.GSet entityTypes -> gEqC
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> wvgn
react.api.EntitySample -> HTRg:
    react.glang.GMap counts -> WXcm
    react.glang.GMap sets -> nAsP
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> IVrU
    45:45:react.glang.GList getTypes() -> IFQj
    50:57:int total() -> XuBA
    62:67:int get(org.bukkit.entity.EntityType) -> FNJd
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> KCgV
    84:96:void add(org.bukkit.entity.Entity) -> afJO
react.api.Experimental -> oDaC:
react.api.Flavor -> CLsB:
    react.api.Flavor ANY -> bqto
    react.api.Flavor SAFE_MODE -> Gbft
    react.api.Flavor CRAFT_BUKKIT -> tCdq
    react.api.Flavor BUKKIT -> HfJw
    react.api.Flavor SPIGOT -> OQLy
    react.api.Flavor SOGGY_SPIGOT -> RtHr
    react.api.Flavor PAPER_SPIGOT -> xidF
    react.api.Flavor TACO_SPIGOT -> dUwk
    react.api.Flavor TORCH_SPIGOT -> ieiJ
    react.api.Flavor FORGE_HACK -> RHse
    react.api.Flavor SPONGE_HACK -> GYvU
    react.api.Flavor[] ENUM$VALUES -> YDxF
    6:18:void <clinit>() -> <clinit>
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> rVVu
    74:79:boolean compatableWith(react.api.Flavor) -> FNJd
    84:84:java.lang.String fancyName() -> FMhw
    1:1:react.api.Flavor[] values() -> values
    1:1:react.api.Flavor valueOf(java.lang.String) -> valueOf
react.api.IAction -> OPWC:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> XJNY
    void act(react.api.IActionSource,react.api.ISelector[]) -> KCgV
    void enact(react.api.IActionSource,react.api.ISelector[]) -> FNJd
    react.api.ActionState getState() -> JHtm
    react.api.ActionTargetType getTarget() -> uhSC
    void setNodes(java.lang.String[]) -> FNJd
    java.lang.String[] getNodes() -> IhUo
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> FNJd
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> KUIt
    react.glang.GMap getDefaultSelectors() -> ESXa
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> FNJd
    react.api.ISelector[] biselect(react.api.ISelector[]) -> FNJd
    react.api.IActionSource getCurrentSource() -> pXbi
    void completeAction() -> Mtam
react.api.IActionSource -> dUat:
    void sendResponse(java.lang.String) -> KCgV
    void sendResponseSuccess(java.lang.String) -> kjvN
    void sendResponseError(java.lang.String) -> wmxT
    void sendResponseActing(java.lang.String) -> afJO
react.api.ICache -> qBWD:
    react.glang.GSet get(java.lang.Object) -> KCgV
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> kjvN
    void clear() -> clear
    boolean has(java.lang.Object) -> wmxT
    react.glang.GList k() -> Hmby
react.api.ICommand -> dVCT:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> BlQj
    java.lang.String[] getPermissions() -> wnXL
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> gVYg
    react.api.SideGate getSideGate() -> rpIs
    void registerParameterDescription(java.lang.String,java.lang.String) -> FNJd
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
react.api.IRecord -> jhVT:
    java.lang.String getRecordType() -> fSUY
    long getRecordTime() -> paRl
    react.json.JSONObject toJSON() -> HTRg
    java.lang.Object getRecordObject() -> oDaC
    void fromJSON(react.json.JSONObject) -> FNJd
react.api.IRecordBook -> uWSi:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> FNJd
    long getOldestRecordTime() -> CLsB
    void addRecord(react.api.IRecord) -> FNJd
    long getLatestRecordTime() -> OPWC
    int countRecords(long,long) -> FNJd
    react.glang.GMap getRecords(long,long) -> KCgV
    int purgeRecordsBefore(long) -> KCgV
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> oMRP:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> dUat
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> qBWD
    react.surge.util.C getAltColor() -> dVCT
    void setColor(react.surge.util.C,react.surge.util.C) -> FNJd
    int getInterval() -> getInterval
    void setInterval(int) -> KCgV
    void sample() -> jhVT
    java.lang.String get() -> get
    void construct() -> uWSi
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> ooSy:
    react.api.SelectionMode getMode() -> oMRP
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> afJO
    react.glang.GSet getList() -> ooSy
    react.glang.GSet getPossibilities() -> XcbR
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> gVYg
    java.lang.String getName() -> getName
react.api.Injection -> XcbR:
    react.api.InjectionMethod value() -> jpfB
react.api.InjectionMethod -> jpfB:
    react.api.InjectionMethod SWAP -> iDFM
    react.api.InjectionMethod SUBSTRATE -> VEAL
    react.api.InjectionMethod RELOAD -> kJLQ
    react.api.InjectionMethod[] ENUM$VALUES -> rVpN
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> BJPT:
    java.lang.String value() -> value
react.api.MSampler -> mFjX:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> BJPT
react.api.MonitorHeading -> IVub:
    react.api.ISampler head -> KVCS
    react.glang.GList children -> XliH
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> FNJd
    27:27:react.api.ISampler getHead() -> mFjX
    32:33:void setHead(react.api.ISampler) -> KCgV
    37:37:react.glang.GList getChildren() -> IVub
    42:42:java.lang.String getHeadText() -> CMSM
    47:60:java.lang.String getChildText() -> hsPr
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> FNJd
react.api.NoiseGenerator -> CMSM:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> hsPr:
    react.api.NoiseGenerator[] octaves -> QEpt
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> ThVI
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> ThVI:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> LYFV
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> NxGA
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> NxGA:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> FNJd
react.api.Permissable -> OPUT:
    react.api.Permissable ACCESS -> dfyh
    react.api.Permissable MONITOR -> ObOV
    react.api.Permissable MONITOR_TITLE -> TrAi
    react.api.Permissable MONITOR_ACTIONLOG -> DbRU
    react.api.Permissable MONITOR_MAP -> rFRu
    react.api.Permissable MONITOR_ENVIRONMENT -> nljb
    react.api.Permissable MONITOR_GLASSES -> GbjV
    react.api.Permissable MONITOR_CHUNK_BLAME -> fdqy
    react.api.Permissable RAI_MONITOR -> aDae
    react.api.Permissable RAI_CONTROL -> vlRU
    react.api.Permissable RAI_ACCESS -> VVEL
    react.api.Permissable RAI -> fBor
    react.api.Permissable ACT -> IWnr
    react.api.Permissable RELOAD -> QVug
    java.lang.String node -> ChAR
    react.api.Permissable[] ENUM$VALUES -> mXfE
    7:22:void <clinit>() -> <clinit>
    26:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> FNJd
    46:46:java.lang.String getNode() -> OPUT
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PlayerActionSource -> XtbU:
    org.bukkit.entity.Player p -> iUJh
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> KCgV
    30:31:void sendResponseSuccess(java.lang.String) -> kjvN
    36:37:void sendResponseError(java.lang.String) -> wmxT
    42:43:void sendResponseActing(java.lang.String) -> afJO
react.api.PluginSelfDeleter -> xymk:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> iUKK
    java.lang.Runnable r -> bPUw
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> FNJd
react.api.RAIActionSource -> aDHO:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> KCgV
    16:17:void sendResponseSuccess(java.lang.String) -> kjvN
    22:23:void sendResponseError(java.lang.String) -> wmxT
    28:29:void sendResponseActing(java.lang.String) -> afJO
react.api.ReactCommand -> uxuB:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> eapE
    java.lang.String usage -> NopI
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> tLWv
    react.api.SideGate sideGate -> HCiS
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> gVYg
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> FNJd
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> BlQj
    47:47:java.lang.String[] getPermissions() -> wnXL
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> rpIs
react.api.ReactException -> bFjM:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> clQL:
    react.glang.GMap keystore -> lnsg
    boolean monitoring -> monitoring
    boolean actionlogging -> XJgb
    boolean glasses -> WihB
    boolean mapping -> qBmm
    int monitorSelection -> rEqO
    int plays -> wfcE
    boolean monitorPosted -> XRxL
    int monitorLastSelection -> RsjX
    int switchNotification -> hIUm
    int hotbarSlot -> agDe
    boolean shift -> KxHC
    int scroll -> qvTH
    double lastHeight -> JuEH
    boolean heightMovement -> YDxq
    org.bukkit.entity.Player p -> iUJh
    24:39:void <clinit>() -> <clinit>
    42:89:void <init>(org.bukkit.entity.Player) -> <init>
    95:102:void save() -> save
    108:115:void load() -> load
    119:119:boolean isMonitoring() -> XtbU
    124:124:boolean isMapping() -> xymk
    129:129:org.bukkit.entity.Player getP() -> aDHO
    134:136:void setMonitoring(boolean) -> KCgV
    140:142:void setMapping(boolean) -> kjvN
    146:146:int getMonitorSelection() -> uxuB
    151:153:void setMonitorSelection(int) -> kjvN
    157:157:int getHotbarSlot() -> bFjM
    162:164:void setHotbarSlot(int) -> wmxT
    168:168:boolean isShifting() -> clQL
    173:175:void setShifting(boolean) -> wmxT
    179:179:boolean isShift() -> GPmo
    184:186:void setShift(boolean) -> afJO
    190:190:int getScroll() -> clPh
    195:197:void setScroll(int) -> afJO
    201:201:int getMonitorLastSelection() -> McbA
    206:208:void setMonitorLastSelection(int) -> gVYg
    212:213:void setP(org.bukkit.entity.Player) -> KCgV
    217:217:double getLastHeight() -> cInC
    222:224:void setLastHeight(double) -> FNJd
    228:228:boolean isHeightMovement() -> vREL
    233:235:void setHeightMovement(boolean) -> gVYg
    239:239:int getSwitchNotification() -> JjyT
    244:246:void setSwitchNotification(int) -> oLoP
    250:250:boolean getMonitorPosted() -> lehy
    255:257:void setMonitorPosted(boolean) -> oLoP
    261:261:int getPlays() -> UQgG
    266:268:void setPlays(int) -> qcvH
    272:272:boolean isGlasses() -> fliO
    277:279:void setGlasses(boolean) -> qcvH
    283:283:boolean isActionlogging() -> MuCu
    288:290:void setActionlogging(boolean) -> uWPs
react.api.Record -> GPmo:
    java.lang.String recordType -> wLpT
    long recordTime -> RHvV
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> fSUY
    32:32:long getRecordTime() -> paRl
    38:38:java.lang.Object getRecordObject() -> oDaC
    react.json.JSONObject toJSON() -> HTRg
    void fromJSON(react.json.JSONObject) -> FNJd
react.api.RecordBook -> clPh:
    java.io.File recordFile -> lnsT
    react.json.JSONObject js -> Fgvh
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> FNJd
    79:87:react.api.IRecord getRecord(long) -> FNJd
    react.api.IRecord createDummyRecord(long,java.lang.String) -> FNJd
    95:107:long getOldestRecordTime() -> CLsB
    113:125:long getLatestRecordTime() -> OPWC
    130:130:boolean within(long,long,long) -> FNJd
    136:144:int countRecords(long,long) -> FNJd
    150:162:react.glang.GMap getRecords(long,long) -> KCgV
    168:181:int purgeRecordsBefore(long) -> KCgV
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> McbA:
react.api.SampledChunk -> cInC:
    org.bukkit.Chunk c -> imyx
    react.glang.GMap counts -> WXcm
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> XdAl
    26:38:void hit(react.api.ChunkIssue,int) -> FNJd
    42:42:org.bukkit.Chunk getC() -> YxIT
    47:47:react.glang.GMap getCounts() -> tTSJ
react.api.SampledType -> vREL:
    react.api.SampledType ENTITY_TIME_LOCK -> UlSW
    react.api.SampledType TILE_TIME_LOCK -> gEqm
    react.api.SampledType ENTITY_TIME -> rNbI
    react.api.SampledType TILE_TIME -> JdCd
    react.api.SampledType ENTITY_DROPTICK -> KMSj
    react.api.SampledType TILE_DROPTICK -> JksQ
    react.api.SampledType REDSTONE_TICK_USAGE -> wwcn
    react.api.SampledType REDSTONE_TICK -> RRHa
    react.api.SampledType REDSTONE_SECOND -> lwhO
    react.api.SampledType REDSTONE_TIME -> ggwg
    react.api.SampledType HOPPER_TICK_USAGE -> pQQE
    react.api.SampledType HOPPER_TICK -> IytF
    react.api.SampledType HOPPER_SECOND -> aoXY
    react.api.SampledType HOPPER_TIME -> JAak
    react.api.SampledType FLUID_TICK_USAGE -> afgG
    react.api.SampledType FLUID_TICK -> wUdb
    react.api.SampledType FLUID_SECOND -> kkso
    react.api.SampledType FLUID_TIME -> fTTF
    react.api.SampledType TPS -> Gsmq
    react.api.SampledType TICK -> Vwie
    react.api.SampledType TIU -> stKm
    react.api.SampledType MEM -> dhAS
    react.api.SampledType FREEMEM -> tfMd
    react.api.SampledType MAXMEM -> lnuf
    react.api.SampledType ALLOCMEM -> OQQU
    react.api.SampledType MAHS -> FpjE
    react.api.SampledType CHK_TIME -> HUMe
    react.api.SampledType EXPLOSION_TIME -> TXPW
    react.api.SampledType CHK -> HUMo
    react.api.SampledType ATASK -> opOg
    react.api.SampledType STASK -> PeVL
    react.api.SampledType CHKS -> CgaK
    react.api.SampledType ENT -> xjHl
    react.api.SampledType ENTLIV -> fKbY
    react.api.SampledType ENTDROP -> OsTa
    react.api.SampledType ENTTILE -> oonN
    java.lang.String node -> ChAR
    react.api.SampledType[] ENUM$VALUES -> LjLJ
    6:43:void <clinit>() -> <clinit>
    49:49:react.api.ISampler get() -> tLBa
    55:55:java.lang.String toString() -> toString
    58:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> OPUT
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> JjyT:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> UdDh
    react.surge.util.C altColor -> mHFX
    int interval -> aDeo
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> qBWD
    49:49:react.surge.util.C getAltColor() -> dVCT
    55:55:int getInterval() -> getInterval
    void sample() -> jhVT
    void construct() -> uWSi
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> FNJd
    107:108:void setInterval(int) -> KCgV
react.api.Sector -> lehy:
    int value() -> value
react.api.SelectionException -> UQgG:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> fliO:
    react.api.SelectionMode WHITELIST -> AXks
    react.api.SelectionMode BLACKLIST -> Cxdq
    react.api.SelectionMode[] ENUM$VALUES -> iUOX
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> MuCu:
    java.lang.Class objectType -> sAIl
    react.api.SelectionMode mode -> wLtr
    react.glang.GSet list -> SCnJ
    react.glang.GSet possibilities -> jOaX
    int popoff -> KxMM
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> oMRP
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> afJO
    43:43:react.glang.GSet getList() -> ooSy
    49:49:react.glang.GSet getPossibilities() -> XcbR
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> gVYg
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> oLoP
    98:100:int pop() -> pop
react.api.SelectorEntityType -> XdAl:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> kjvN
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> gVYg
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> qcvH
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> YxIT:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> tTSJ:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> KCgV
    29:30:void add(org.bukkit.Chunk,int) -> FNJd
    34:38:void add(org.bukkit.World) -> qcvH
    42:46:void addAll() -> EmNi
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> gVYg
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> qcvH
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> tLBa:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> gVYg
    87:87:java.lang.String getName() -> getName
react.api.Side -> EmNi:
    react.api.Side PLAYERS -> KLwc
    react.api.Side CONSOLE -> sbka
    java.lang.String ss -> ssls
    react.api.Side[] ENUM$VALUES -> AimQ
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> dMSu
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> KCgV
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> dMSu:
    react.api.SideGate PLAYERS_ONLY -> HCoH
    react.api.SideGate CONSOLES_ONLY -> gNhG
    react.api.SideGate ANYTHING -> WHJi
    int[] $SWITCH_TABLE$react$api$SideGate -> lEEt
    react.api.SideGate[] ENUM$VALUES -> HvrG
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> FNJd
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> NLsx
react.api.SimplexNoiseGenerator -> NLsx:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> qeUs
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> hsTD
react.api.SimplexOctaveGenerator -> hsTD:
    double wScale -> OkEk
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> FNJd
react.api.SpecializedTickLimiter -> cdDE:
    double rMaxTime -> HnbG
    long rStartTime -> TFpJ
    double rLastTime -> JuHe
    long rMark -> STnX
    double tMaxTime -> EKfM
    react.gmath.Average atimes -> qKbl
    react.gmath.Average adropped -> wxHl
    int droppedTicks -> YMoX
    boolean entityTick -> SoAv
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> tuuM:
    react.glang.GList sources -> xaXp
    react.glang.GList splooge -> dNOY
    react.glang.GSet destroy -> JBDj
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> FNJd
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> KCgV
    void clipped(org.bukkit.Location) -> FNJd
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> KCgV
    boolean isAllowedSource(org.bukkit.Location) -> kjvN
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> FNJd
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> KCgV
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> kjvN
react.api.SploogeCounter$1 -> tuuM$1:
    react.api.SploogeCounter this$0 -> PTXy
    java.util.Iterator val$it -> VMYm
    org.bukkit.Location val$start -> lwkq
    int val$maxDistance -> aEHm
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> FNJd
react.api.SploogeCounter$1$1 -> tuuM$1$1:
    react.api.SploogeCounter$1 this$1 -> NyGe
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> pXfb:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> aTkv:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> HTRg
    38:49:void fromJSON(react.json.JSONObject) -> FNJd
react.api.StackTraceRecordBook -> sapC:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> KCgV
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> FNJd
react.api.StackedEntity -> mWnJ:
    org.bukkit.entity.LivingEntity entity -> wgJs
    int count -> count
    double rmx -> cJoA
    20:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> FNJd
    46:46:int getAbsoluteMaxCount() -> cdDE
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> KCgV
    56:58:void update() -> update
    62:68:void signalSize() -> tuuM
    72:123:void updateHealth() -> pXfb
    127:128:void heal(double) -> KCgV
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> aTkv
    142:142:int getEffectiveCount(double) -> kjvN
    147:147:double getEffectiveMaxHealth(int) -> uWPs
    152:152:double getRealMaxHealth() -> sapC
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> FNJd
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> IFVp:
    react.glang.GList headings -> Winq
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> FNJd
    24:24:int getMaxSelection() -> mWnJ
    29:37:int left(int) -> XJNY
    42:50:int right(int) -> JHtm
    55:55:react.api.MonitorHeading getHeadFor(int) -> uhSC
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> FNJd
    83:100:java.lang.String getHotbarFor(int,boolean) -> FNJd
react.api.Unused -> qmKr:
react.api.WorldConfig -> mXNm:
    boolean allowRai -> xHKF
    boolean allowActions -> qLGU
    boolean allowRelighting -> uXRw
    boolean allowTileThrottling -> UuKa
    boolean allowEntityThrottling -> hcNc
    boolean allowFastLeafDecay -> DPuJ
    java.util.List assumeNoSideEffectsEntities -> jrEp
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> uWPs
    48:62:void save(org.bukkit.World) -> XJNY
    66:80:void load(org.bukkit.World) -> JHtm
react.binject.BlockInjector -> Xtdx:
    react.surge.util.Protocol protocol -> cvAx
    java.lang.Class blocksClass -> jObR
    12:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> FNJd
    29:56:void inject() -> IFVp
    61:61:react.surge.util.Protocol getVersion() -> LGIw
react.binject.IBlockInjector -> Elnb:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> FNJd
    void add(int,java.lang.String,java.lang.Object) -> FNJd
    java.lang.Object get(java.lang.String) -> get
    void inject() -> IFVp
    react.surge.util.Protocol getVersion() -> LGIw
react.binject.InjectedBlock -> XAaK:
    react.surge.util.Protocol getInjectProtocol() -> qmKr
    java.lang.String getInjectKey() -> mXNm
    java.lang.String getInjectCKey() -> Xtdx
    int getInjectId() -> Elnb
react.binject.ReflectionUtil -> ktLO:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> FNJd
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> FNJd
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> FNJd
    41:54:void setAccessible(java.lang.reflect.Field) -> FNJd
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> FNJd
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> FNJd
react.binject.V10.BlockInjector10 -> CoWk:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> oLoP
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> FNJd
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> FNJd
react.binject.V11.BlockInjector11 -> wDHq:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> qcvH
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> FNJd
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> FNJd
react.binject.V12.BlockInjector12 -> lfLl:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> uWPs
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> FNJd
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> FNJd
react.binject.V8.BlockInjector8 -> YoVa:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> XJNY
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> FNJd
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> FNJd
react.binject.V9.BlockInjector9 -> Huuv:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> JHtm
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> FNJd
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> FNJd
react.cache.CachedEntity -> Grrv:
    java.util.UUID uid -> BSbL
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> rqMA
    double x -> x
    double y -> y
    double z -> z
    double vx -> LjOS
    double vy -> LHKt
    double vz -> xGhj
    double dx -> IGTE
    double dy -> VVIp
    double dz -> UtjE
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> qcvH
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> XAaK
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> ktLO
    120:121:void setVx(double) -> wmxT
    125:125:double getVy() -> CoWk
    130:131:void setVy(double) -> afJO
    135:135:double getVz() -> wDHq
    140:141:void setVz(double) -> gVYg
    145:145:double getDx() -> lfLl
    150:151:void setDx(double) -> oLoP
    155:155:double getDy() -> YoVa
    160:161:void setDy(double) -> qcvH
    165:165:double getDz() -> Huuv
    170:171:void setDz(double) -> uWPs
    175:175:java.util.UUID getUid() -> Grrv
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> JAIA:
    int age -> RtQc
    boolean ageLock -> hcMu
    boolean breed -> uWpq
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> qcvH
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> JAIA
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> HTTT
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> HTTT:
    org.bukkit.DyeColor dye -> BKQQ
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> qcvH
    30:30:org.bukkit.DyeColor getDye() -> VwOg
    35:36:void setDye(org.bukkit.DyeColor) -> FNJd
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> VwOg:
    react.glang.GList potionEffects -> YFBS
    boolean canPickupItems -> PLHg
    org.bukkit.inventory.ItemStack[] armorContents -> tDQV
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> sbou
    double maxHealth -> maxHealth
    int maxAir -> DHgf
    int air -> kRhX
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> qcvH
    63:63:react.glang.GList getPotionEffects() -> PRyh
    68:69:void setPotionEffects(react.glang.GList) -> KCgV
    73:73:boolean isCanPickupItems() -> yJOK
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> Lqao
    138:139:void setMaxAir(int) -> KUIt
    143:143:int getAir() -> ylRN
    148:149:void setAir(int) -> ESXa
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> PRyh:
    boolean sheared -> hcQo
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> qcvH
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> yJOK:
    org.bukkit.inventory.ItemStack is -> eIFg
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> qcvH
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> Lqao:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> ylRN:
    react.chronophysics.HopperDirection DOWN -> VVMO
    react.chronophysics.HopperDirection NORTH -> qTYt
    react.chronophysics.HopperDirection SOUTH -> EnNy
    react.chronophysics.HopperDirection EAST -> bYOr
    react.chronophysics.HopperDirection WEST -> gqOm
    int direction -> direction
    int[] $SWITCH_TABLE$react$chronophysics$HopperDirection -> DQYg
    react.chronophysics.HopperDirection[] ENUM$VALUES -> Blsm
    6:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> wmxT
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> FNJd
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> KCgV
    1:1:react.chronophysics.HopperDirection[] values() -> values
    1:1:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    6:6:int[] $SWITCH_TABLE$react$chronophysics$HopperDirection() -> MuFW
react.chronophysics.HopperWormhole -> MuFW:
    org.bukkit.block.Hopper source -> vJWM
    react.glang.GList path -> FOPC
    org.bukkit.block.Hopper destination -> oyHH
    17:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> WiPt
    31:31:react.glang.GList getPath() -> LWrI
    36:36:org.bukkit.block.Hopper getDestination() -> GQSl
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> FNJd
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> WiPt:
    org.bukkit.block.Hopper h -> AGmg
    13:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> FNJd
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> FhCd
    62:62:boolean isLockedByRedstone() -> xWoc
react.command.CommandAct -> LWrI:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> FNJd
    186:192:react.text.RTX getBeginningRTX() -> Fgbi
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> FNJd
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> KCgV
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> kjvN
    331:346:react.glang.GList getSortedCommands() -> tLEL
    351:358:int getPageSize(int) -> Mtam
    363:363:boolean isValidPage(int,int) -> FNJd
    368:377:react.glang.GList getPage(int,int) -> KCgV
react.command.CommandActionLog -> GQSl:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
react.command.CommandCPUScore -> FhCd:
    15:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
react.command.CommandCapabilities -> xWoc:
    19:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
react.command.CommandChunkBlame -> Fgbi:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
react.command.CommandChunkBlame$1 -> Fgbi$1:
    react.command.CommandChunkBlame this$0 -> TPGc
    org.bukkit.command.CommandSender val$sender -> VwnV
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> Fgbi$1$1:
    react.command.CommandChunkBlame$1 this$1 -> Arcp
    org.bukkit.command.CommandSender val$sender -> VwnV
    java.lang.String val$i -> Bluf
    react.glang.GMap val$top -> XKPj
    int val$totalx -> EnNI
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> tLEL:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
react.command.CommandHelp -> YVHM:
    27:36:void <init>() -> <init>
    41:42:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
    46:65:void sendPage(org.bukkit.command.CommandSender,int,int) -> FNJd
    69:75:react.text.RTX getBeginningRTX() -> Fgbi
    80:140:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> FNJd
    144:154:void sendHeader(org.bukkit.command.CommandSender,int,int) -> KCgV
    158:187:void sendFooter(org.bukkit.command.CommandSender,int,int) -> kjvN
    191:198:react.glang.GList getSortedCommands() -> tLEL
    203:210:int getPageSize(int) -> Mtam
    215:215:boolean isValidPage(int,int) -> FNJd
    220:229:react.glang.GList getPage(int,int) -> KCgV
react.command.CommandMap -> TNgx:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
react.command.CommandMonitor -> LrEi:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
react.command.CommandReload -> iBsX:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
react.command.CommandReload$1 -> iBsX$1:
    react.command.CommandReload this$0 -> terQ
    org.bukkit.command.CommandSender val$sender -> VwnV
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> iBsX$1$1:
    react.command.CommandReload$1 this$1 -> dgdf
    org.bukkit.command.CommandSender val$sender -> VwnV
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> Rjdu:
    27:35:void <init>() -> <init>
    40:48:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
    52:61:org.bukkit.inventory.ItemStack makeBook() -> YVHM
    66:92:void addSpikePages(react.glang.GList) -> kjvN
    96:106:void addStatusPages(react.glang.GList) -> wmxT
    110:127:int findSlot(org.bukkit.entity.Player) -> kjvN
react.command.CommandVersion -> LiTk:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNJd
react.controller.ActionController -> vAIE:
    int kiv -> SLat
    react.glang.GMap actions -> tDPY
    react.glang.GMap pending -> YEay
    react.glang.GList tasks -> CEds
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> FNJd
    83:136:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> KCgV
    141:141:react.api.IAction getAction(react.api.ActionType) -> FNJd
    146:147:void registerAction(react.api.IAction) -> FNJd
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> TNgx
    241:248:react.glang.GList getActionNames() -> LrEi
react.controller.BenchmarkController -> rxbC:
    react.api.CPUBenchmark finished -> gOLc
    boolean done -> SoGB
    int score -> yRsI
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    16:16:void access$0(react.controller.BenchmarkController,boolean) -> FNJd
    15:15:void access$1(react.controller.BenchmarkController,react.api.CPUBenchmark) -> FNJd
    15:15:react.api.CPUBenchmark access$2(react.controller.BenchmarkController) -> FNJd
react.controller.BenchmarkController$1 -> rxbC$1:
    react.controller.BenchmarkController this$0 -> ohEQ
    1:26:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
    26:26:react.controller.BenchmarkController access$0(react.controller.BenchmarkController$1) -> FNJd
react.controller.BenchmarkController$1$1 -> rxbC$1$1:
    react.controller.BenchmarkController$1 this$1 -> jWsi
    1:31:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
    31:31:react.controller.BenchmarkController$1 access$0(react.controller.BenchmarkController$1$1) -> FNJd
react.controller.BenchmarkController$1$1$1 -> rxbC$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> HUTb
    1:36:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> xqas:
    react.glang.GMap rangeMapping -> YhFm
    react.binject.IBlockInjector injector -> AabD
    boolean injected -> YFFb
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> iBsX
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> Rjdu
    115:115:react.binject.IBlockInjector getInjector() -> LiTk
    120:120:boolean isInjected() -> vAIE
react.controller.ChronophyFluidController -> lTmF:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> VfPr:
    boolean firstTickList -> vtmE
    long firstTick -> nJrM
    long lastTick -> uiXv
    react.gmath.Average aCSMS -> hbsN
    react.glang.GMap pluginLoads -> MeFo
    react.glang.GMap playerLoads -> brbx
    int serverLoads -> SewS
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> rxbC
    63:73:void tickNextTickList() -> xqas
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> FNJd
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> FNJd
    171:171:boolean isFirstTickList() -> lTmF
    176:176:long getFirstTick() -> VfPr
    181:181:long getLastTick() -> jqKN
    186:186:react.gmath.Average getaCSMS() -> FWBn
    191:191:react.glang.GMap getPluginLoads() -> kHxg
    196:196:react.glang.GMap getPlayerLoads() -> xFnJ
    201:201:int getServerLoads() -> paYr
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> FNJd
    29:29:int access$1(react.controller.ChunkController) -> KCgV
    29:29:void access$2(react.controller.ChunkController,int) -> FNJd
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> kjvN
react.controller.ChunkController$1 -> VfPr$1:
    react.controller.ChunkController this$0 -> yJpr
    org.bukkit.event.world.ChunkLoadEvent val$e -> KxRx
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> kjvN
    1:1:void run(java.lang.Object) -> FNJd
react.controller.CommandController -> jqKN:
    react.glang.GList commands -> iwXJ
    boolean k -> FXCD
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> uWPs
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> XJNY
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> FNJd
    317:317:react.glang.GList getCommands() -> xGOH
    322:323:void setCommands(react.glang.GList) -> afJO
    327:327:boolean isK() -> hbSK
    332:333:void setK(boolean) -> XJNY
react.controller.EntityCullController -> FWBn:
    react.glang.GSet flags -> uGVI
    react.glang.GSet defer -> tfUe
    react.glang.GMap maxs -> SUWH
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> Nwif
    172:180:int cull(org.bukkit.Chunk) -> kjvN
    185:285:int partialCull(org.bukkit.Chunk) -> wmxT
react.controller.EntityStackController -> kHxg:
    react.glang.GList stacks -> aDmD
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> gVYg
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> kjvN
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> wmxT
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> FNJd
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> FNJd
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> afJO
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> FNJd
react.controller.EntityStackController$1 -> kHxg$1:
    react.controller.EntityStackController this$0 -> Qhbi
    org.bukkit.event.entity.EntitySpawnEvent val$e -> ydby
    1:248:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> xFnJ:
    react.glang.GMap slots -> mrbe
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> FNJd
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> FNJd
react.controller.ExplosiveController -> paYr:
    boolean firstTickList -> vtmE
    long firstTick -> nJrM
    long lastTick -> uiXv
    react.gmath.Average aCSMS -> hbsN
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> rxbC
    50:60:void tickNextTickList() -> xqas
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> FNJd
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> FNJd
    89:89:boolean isFirstTickList() -> lTmF
    94:94:long getFirstTick() -> VfPr
    99:99:long getLastTick() -> jqKN
    104:104:react.gmath.Average getaCSMS() -> FWBn
react.controller.FastDecayController -> xGOH:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> FNJd
    47:128:void checkBreak(org.bukkit.block.Block) -> kjvN
    132:140:void decay(org.bukkit.block.Block) -> wmxT
    146:146:void tick() -> tick
react.controller.FastDecayController$1 -> xGOH$1:
    react.controller.FastDecayController this$0 -> CNVo
    react.glang.GMap val$locs -> JRmA
    1:61:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    66:66:boolean isAllowedSplooge(org.bukkit.Location) -> KCgV
    72:72:boolean isAllowedSource(org.bukkit.Location) -> kjvN
    78:97:void clipped(org.bukkit.Location) -> FNJd
    102:125:void finished() -> finished
    61:61:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> FNJd
react.controller.FastDecayController$1$1 -> xGOH$1$1:
    react.controller.FastDecayController$1 this$1 -> uPFa
    react.glang.GMap val$locs -> JRmA
    int val$i -> aVNF
    1:106:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    111:121:void run() -> run
react.controller.FastDecayController$2 -> xGOH$2:
    react.controller.FastDecayController this$0 -> CNVo
    org.bukkit.block.Block val$b -> qnNB
    1:132:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    137:138:void run() -> run
react.controller.FeatureController -> hbSK:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.FluidController -> Nwif:
    react.glang.GSet ignore -> JIyd
    int flowsPerTick -> BuiL
    int flowsPerSecond -> nKRN
    react.gmath.Average aFST -> AYTN
    react.gmath.Average aFSS -> pPvp
    react.gmath.Average aFSMS -> axQV
    boolean firstTickList -> vtmE
    long firstTick -> nJrM
    long lastTick -> uiXv
    react.glang.GSet frozen -> yeCb
    react.glang.GMap queue -> JIyk
    react.glang.GMap freezeTimes -> Xddt
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> afJO
    68:76:void checkChunks() -> CEIB
    80:97:void checkChunk(org.bukkit.Chunk) -> gVYg
    101:107:void queue(org.bukkit.block.Block) -> afJO
    111:111:boolean isFrozen(org.bukkit.Chunk) -> oLoP
    116:117:void freeze(org.bukkit.Chunk) -> qcvH
    121:127:void unfreeze(org.bukkit.Chunk) -> uWPs
    131:138:void freeze(org.bukkit.Chunk,long) -> FNJd
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> rxbC
    172:182:void tickNextTickList() -> xqas
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> FNJd
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> FNJd
    248:248:react.glang.GSet getIgnore() -> Lysf
    253:253:int getTransfersPerTick() -> mWoY
    258:258:int getTransfersPerSecond() -> bXQE
    263:263:react.gmath.Average getaFST() -> qAyB
    268:268:react.gmath.Average getaFSS() -> qJik
    273:273:react.gmath.Average getaFSMS() -> NxJu
    278:278:boolean isFirstTickList() -> lTmF
    283:283:long getFirstTick() -> VfPr
    288:288:long getLastTick() -> jqKN
    293:293:react.glang.GSet getFrozen() -> EKLy
    298:298:react.glang.GMap getQueue() -> paXn
    303:303:react.glang.GMap getFreezeTimes() -> HnIW
react.controller.GlassController -> CEIB:
    react.glang.GMap q -> SDSr
    react.glang.GList g -> IaJl
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> wmxT
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> afJO
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> gVYg
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> FNJd
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> FNJd
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> FNJd
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> FNJd
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> FNJd
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> FNJd
    36:36:react.glang.GList access$0(react.controller.GlassController) -> FNJd
react.controller.GlassController$1 -> CEIB$1:
    react.controller.GlassController this$0 -> bGoA
    react.glang.GMap val$cc -> WHOp
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> CEIB$1$1:
    react.controller.GlassController$1 this$1 -> Blvn
    org.bukkit.Location val$i -> oEfc
    org.bukkit.entity.Player val$j -> VDnl
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> Lysf:
    react.glang.GMap g -> bYSg
    react.glang.GMap gr -> SfYg
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> FNJd
    121:156:void toggleMapping(org.bukkit.entity.Player) -> oLoP
    160:160:react.glang.GMap getG() -> jOGI
    165:165:react.glang.GMap getGr() -> mqaa
    31:31:react.glang.GMap access$0(react.controller.GraphController) -> FNJd
    30:30:react.glang.GMap access$1(react.controller.GraphController) -> KCgV
react.controller.GraphController$1 -> Lysf$1:
    react.controller.GraphController this$0 -> QGAx
    1:48:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> Lysf$2:
    react.controller.GraphController this$0 -> QGAx
    1:84:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> Lysf$3:
    react.controller.GraphController this$0 -> QGAx
    org.bukkit.event.player.PlayerJoinEvent val$e -> lDnQ
    1:100:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> mWoY:
    react.glang.GSet ignore -> JIyd
    int transfersPerTick -> sQsQ
    int transfersPerSecond -> Rswm
    react.gmath.Average aHST -> PnSG
    react.gmath.Average aHSS -> hIbe
    react.gmath.Average aHSMS -> NFIb
    boolean firstTickList -> vtmE
    long firstTick -> nJrM
    long lastTick -> uiXv
    react.glang.GSet frozen -> yeCb
    react.glang.GMap queue -> JIyk
    react.glang.GMap freezeTimes -> Xddt
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> afJO
    65:73:void checkChunks() -> CEIB
    77:94:void checkChunk(org.bukkit.Chunk) -> gVYg
    98:104:void queue(org.bukkit.block.Block) -> afJO
    108:108:boolean isFrozen(org.bukkit.Chunk) -> oLoP
    113:114:void freeze(org.bukkit.Chunk) -> qcvH
    118:124:void unfreeze(org.bukkit.Chunk) -> uWPs
    128:135:void freeze(org.bukkit.Chunk,long) -> FNJd
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> rxbC
    169:179:void tickNextTickList() -> xqas
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> FNJd
    207:207:react.glang.GSet getIgnore() -> Lysf
    212:212:int getTransfersPerTick() -> mWoY
    217:217:int getTransfersPerSecond() -> bXQE
    222:222:react.gmath.Average getaHST() -> LaDK
    227:227:react.gmath.Average getaHSS() -> bhqa
    232:232:react.gmath.Average getaHSMS() -> kskq
    237:237:boolean isFirstTickList() -> lTmF
    242:242:long getFirstTick() -> VfPr
    247:247:long getLastTick() -> jqKN
    252:252:react.glang.GSet getFrozen() -> EKLy
    257:257:react.glang.GMap getQueue() -> paXn
    262:262:react.glang.GMap getFreezeTimes() -> HnIW
react.controller.HopperOvertickController -> bXQE:
    react.glang.GList possiblePlunge -> RQth
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> kjvN
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> FNJd
react.controller.LanguageController -> qAyB:
    java.io.File languageFolder -> cTFk
    int oldVersion -> mbCx
    java.io.File dlf -> ghcK
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> cAaU
    160:221:void downloadAll(boolean) -> JHtm
    225:261:void downloadLanguage(java.lang.String) -> uhSC
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> KUIt
    315:315:java.io.File getFileForLanguage(java.lang.String) -> ESXa
    320:332:void writeDefaults() -> ejJv
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> FNJd
    263:263:void access$1(react.controller.LanguageController) -> FNJd
react.controller.LanguageController$1 -> qAyB$1:
    react.controller.LanguageController this$0 -> oEfX
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> qAyB$2:
    react.controller.LanguageController this$0 -> oEfX
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> FNJd
react.controller.LanguageController$2$1 -> qAyB$2$1:
    react.controller.LanguageController$2 this$1 -> lfqE
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> FNJd
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> FNJd
    121:121:void onDownloadStarted(react.gnet.download.Download) -> FNJd
    126:128:void onDownloadFinished(react.gnet.download.Download) -> KCgV
    134:134:void onDownloadFailed(react.gnet.download.Download) -> kjvN
react.controller.LanguageController$3 -> qAyB$3:
    react.controller.LanguageController this$0 -> oEfX
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> qAyB$3$1:
    react.controller.LanguageController$3 this$1 -> jqkU
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> qAyB$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> sAPy
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> qAyB$4:
    react.controller.LanguageController this$0 -> oEfX
    java.io.File val$dld -> LPcE
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> FNJd
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> FNJd
    245:245:void onDownloadStarted(react.gnet.download.Download) -> FNJd
    250:251:void onDownloadFinished(react.gnet.download.Download) -> KCgV
    257:257:void onDownloadFailed(react.gnet.download.Download) -> kjvN
react.controller.MonitorController -> qJik:
    int maxCooldown -> TGYF
    react.api.TitleMonitor titleMonitor -> UcnB
    react.glang.GMap posts -> tUUq
    react.slate.PhantomSlate sb -> fKlJ
    boolean ready -> TqlY
    36:36:void <clinit>() -> <clinit>
    42:47:void <init>() -> <init>
    52:87:void start() -> start
    91:91:react.slate.PhantomSlate constructActionLogBoard() -> rWBR
    96:114:void toggleActionLog(org.bukkit.entity.Player) -> qcvH
    118:136:void toggleMonitoring(org.bukkit.entity.Player) -> uWPs
    141:151:void stop() -> stop
    155:174:void constructMonitor() -> BRft
    178:183:float calcVolume(react.api.ReactPlayer) -> FNJd
    188:188:boolean canMonitor(org.bukkit.entity.Player) -> XJNY
    193:193:boolean canActionLog(org.bukkit.entity.Player) -> JHtm
    198:203:boolean isMonitoring(org.bukkit.entity.Player) -> uhSC
    208:213:boolean isActionLogging(org.bukkit.entity.Player) -> KUIt
    218:222:void startMonitoring(org.bukkit.entity.Player) -> ESXa
    226:237:void stopMonitoring(org.bukkit.entity.Player) -> Mtam
    241:246:void startActionLogging(org.bukkit.entity.Player) -> pXbi
    250:261:void stopActionLogging(org.bukkit.entity.Player) -> IhUo
    267:267:void tick() -> tick
    271:274:void changePost(react.api.ReactPlayer) -> KCgV
    278:290:void processPlayer(react.api.ReactPlayer) -> kjvN
    295:295:void handleActionLog(org.bukkit.entity.Player) -> gVXt
    299:323:void handleTriggers(react.api.ReactPlayer) -> wmxT
    327:366:void handleScrolling(react.api.ReactPlayer) -> afJO
    370:398:void handleShifting(react.api.ReactPlayer) -> gVYg
    402:424:void handlePosting(react.api.ReactPlayer) -> oLoP
    428:446:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> FNJd
    451:465:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> FNJd
    470:477:void tickMonitor(react.api.ReactPlayer) -> qcvH
    481:481:react.api.TitleMonitor getTitleMonitor() -> BdJF
    487:496:void on(org.bukkit.event.player.PlayerJoinEvent) -> FNJd
    501:510:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> FNJd
    515:527:void onTick() -> PJmy
    531:553:void updateActionBoard() -> lnbW
    558:558:java.lang.String getTickName() -> APEQ
    89:89:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> FNJd
    39:39:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> FNJd
    40:40:void access$2(react.controller.MonitorController,boolean) -> FNJd
    40:40:boolean access$3(react.controller.MonitorController) -> KCgV
    39:39:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> kjvN
react.controller.MonitorController$1 -> qJik$1:
    react.controller.MonitorController this$0 -> uXYO
    1:67:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    72:85:void run() -> run
react.controller.MonitorController$2 -> qJik$2:
    react.controller.MonitorController this$0 -> uXYO
    1:531:void <init>(react.controller.MonitorController) -> <init>
    536:551:void run() -> run
react.controller.PhysicsController -> NxJu:
    react.glang.GMap samples -> BShD
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> XJNY
    51:52:void onHopper(org.bukkit.Chunk) -> JHtm
    56:57:void onFluid(org.bukkit.Chunk) -> uhSC
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> FNJd
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> FNJd
    80:91:void onTick() -> PJmy
    96:96:java.lang.String getTickName() -> APEQ
    101:101:react.glang.GMap getSamples() -> ccfq
react.controller.PlayerController -> EKLy:
    react.glang.GList players -> PnQc
    react.glang.GSet save -> XCDj
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> RsPi
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> FNJd
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> Hmby
    113:113:react.glang.GList getPlayers() -> VURA
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> FNJd
react.controller.PlayerController$1 -> EKLy$1:
    react.controller.PlayerController this$0 -> FpuD
    react.glang.GList val$toSave -> BTGu
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> paXn:
    react.rai.IRAI rai -> XBgI
    boolean raiEnabled -> gGCL
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    20:20:react.rai.IRAI access$0(react.controller.RAIController) -> FNJd
react.controller.RAIController$1 -> paXn$1:
    react.controller.RAIController this$0 -> KMcE
    1:48:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> HnIW:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> kjvN
react.controller.ReactServerInfo -> jOGI:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> WWtB
    27:27:int dgetGameProtocol() -> Xkwe
    33:33:java.lang.String dgetGameVersion() -> FFCM
    39:39:java.lang.String dgetReactVersion() -> rpSt
    45:45:int dgetMaxPlayers() -> MuJq
    51:58:react.glang.GList dgetConnectedPlayers() -> gyFP
    64:64:int dgetViewDistance() -> AOcg
    70:70:int dgetGamePort() -> VUQV
    76:76:java.lang.String dgetGameAddress() -> AhvB
    82:89:react.glang.GList dgetRemotePlugins() -> rVaX
    95:102:react.glang.GList dgetWorlds() -> eXkX
    108:108:react.glang.GList dgetActions() -> QhDv
    114:114:react.glang.GList dgetSamplers() -> dxLX
react.controller.RedstoneController -> mqaa:
    react.glang.GSet ignore -> JIyd
    react.glang.GSet frozen -> yeCb
    react.glang.GMap queue -> JIyk
    react.glang.GMap freezeTimes -> Xddt
    int redstonePerTick -> STyg
    int redstonePerSecond -> MdkB
    react.gmath.Average aRST -> mHTR
    react.gmath.Average aRSS -> bjWT
    react.gmath.Average aRSMS -> JmCo
    boolean firstTickList -> vtmE
    long firstTick -> nJrM
    long lastTick -> uiXv
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> afJO
    95:101:void tick() -> tick
    105:113:void checkChunks() -> CEIB
    117:134:void checkChunk(org.bukkit.Chunk) -> gVYg
    138:144:void queue(org.bukkit.block.Block) -> afJO
    148:148:boolean isFrozen(org.bukkit.Chunk) -> oLoP
    153:154:void freeze(org.bukkit.Chunk) -> qcvH
    158:165:void flushTickList() -> rxbC
    169:179:void tickNextTickList() -> xqas
    183:189:void unfreeze(org.bukkit.Chunk) -> uWPs
    193:200:void freeze(org.bukkit.Chunk,long) -> FNJd
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> FNJd
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> FNJd
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> FNJd
    246:246:react.glang.GSet getIgnore() -> Lysf
    251:251:react.glang.GSet getFrozen() -> EKLy
    256:256:react.glang.GMap getQueue() -> paXn
    261:261:react.glang.GMap getFreezeTimes() -> HnIW
    266:266:int getRedstonePerTick() -> lvre
    271:271:int getRedstonePerSecond() -> Plql
    276:276:react.gmath.Average getaRST() -> HCXO
    281:281:react.gmath.Average getaRSS() -> hrvS
    286:286:react.gmath.Average getaRSMS() -> oVIF
    291:291:boolean isFirstTickList() -> lTmF
    296:296:long getFirstTick() -> VfPr
    301:301:long getLastTick() -> jqKN
react.controller.RemoteController -> LaDK:
    react.remote.server.RemoteServer remoteServer -> WsIR
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> dMYG
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> FNJd
react.controller.RemoteController$1 -> LaDK$1:
    react.controller.RemoteController this$0 -> yJuL
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> LaDK$2:
    react.controller.RemoteController this$0 -> yJuL
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> uFXS
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> YgLO
react.controller.SampleController -> bhqa:
    react.glang.GMap samplers -> QGDc
    react.surge.server.SuperSampler ss -> yTFt
    int cd -> Wiwa
    28:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> BJVQ
    69:74:void restartSuperSampler() -> BAeH
    78:79:void registerSampler(react.api.ISampler) -> kjvN
    83:83:react.api.ISampler getSampler(java.lang.String) -> Mtam
    88:131:void constructSamplers() -> cSGJ
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> DYNw
    187:209:void onTick() -> PJmy
    214:214:java.lang.String getTickName() -> APEQ
    219:219:react.glang.GMap getSamplers() -> yJTI
    224:224:react.surge.server.SuperSampler getSs() -> Yfjr
    229:229:int getCd() -> ssVL
    234:241:react.glang.GList getSamplerNames() -> Euar
    25:25:react.surge.server.SuperSampler access$0(react.controller.SampleController) -> FNJd
react.controller.SampleController$1 -> bhqa$1:
    react.controller.SampleController this$0 -> wpCw
    1:140:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> bhqa$2:
    react.controller.SampleController this$0 -> wpCw
    1:152:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> kskq:
    java.lang.String ipa -> xsFq
    react.glang.GList failures -> EUBR
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> pXbi
    41:74:void checkForIP() -> FpTm
    78:91:void scan(java.lang.Runnable) -> FNJd
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> kskq$1:
    react.controller.SecurityController this$0 -> IOlI
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> kskq$2:
    java.lang.String val$ip -> SCwK
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> kskq$3:
    java.lang.Thread val$t -> tvyk
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> cAaU:
    react.glang.GMap etl -> MSgh
    react.glang.GMap ttl -> msFu
    21:21:void <init>() -> <init>
    29:45:void start() -> start
    50:63:void stop() -> stop
    70:77:void on(org.bukkit.event.world.WorldLoadEvent) -> FNJd
    84:91:void on(org.bukkit.event.world.WorldUnloadEvent) -> FNJd
    97:97:void tick() -> tick
    101:113:void witholdWorld(org.bukkit.World) -> uhSC
    117:129:void releaseWorld(org.bukkit.World) -> KUIt
    133:145:double getUniversalEntityTick() -> yuHF
    150:162:double getUniversalEntityLimit() -> tTUh
    167:179:double getUniversalTileLimit() -> XBEJ
    184:196:double getUniversalTileTick() -> HSvo
    201:208:double getUniversalEntityDroppedTicks() -> iBsr
    213:220:double getUniversalTileDroppedTicks() -> ksnd
    225:231:void setEntityTickLimit(org.bukkit.World,double) -> FNJd
    235:241:void setTileTickLimit(org.bukkit.World,double) -> KCgV
    245:245:double getEntityTickLimit(org.bukkit.World) -> ESXa
    250:250:double getTileTickLimit(org.bukkit.World) -> Mtam
    255:255:double getLastEntityTick(org.bukkit.World) -> pXbi
    260:260:double getLastTileTick(org.bukkit.World) -> IhUo
    265:265:double getEntityDroppedTicks(org.bukkit.World) -> gVXt
    270:270:double getTileDroppedTicks(org.bukkit.World) -> RsPi
    275:292:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> FNJd
react.controller.SpikeController -> ejJv:
    react.glang.GMap spikes -> AiyI
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> PJmy
    111:111:java.lang.String getTickName() -> APEQ
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> bqcv
    128:160:void whoFuckingDidThis(react.glang.Callback) -> FNJd
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> FNJd
react.controller.SpikeController$1 -> ejJv$1:
    react.controller.SpikeController this$0 -> xiuC
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> ejJv$1$1:
    react.controller.SpikeController$1 this$1 -> dNYV
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> ejJv$2:
    react.controller.SpikeController this$0 -> xiuC
    react.glang.GMap val$vv -> cTFw
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> ejJv$3:
    react.controller.SpikeController this$0 -> xiuC
    java.lang.Thread val$t -> tvyk
    react.glang.Callback val$callback -> Vocn
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> rWBR:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> BRft:
    12:12:void <init>() -> <init>
    17:23:void start() -> start
    28:34:void stop() -> stop
    40:40:void tick() -> tick
    45:46:void on(org.bukkit.event.world.WorldUnloadEvent) -> FNJd
react.event.ReactEvent -> BdJF:
    org.bukkit.event.HandlerList handlers -> RATp
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> PJmy:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> lnbW:
    react.event.ScrollDirection direction -> biuN
    boolean cancellled -> bjVm
    int amount -> kBLU
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> LiUb
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> xaBp
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> APEQ:
    react.event.ScrollDirection DOWN -> wgQg
    react.event.ScrollDirection UP -> riCr
    react.event.ScrollDirection[] ENUM$VALUES -> GkiW
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.gbench.Profiler -> ccfq:
    long nanos -> vcnC
    long startNano -> FOUE
    long millis -> kmAG
    long startMillis -> mita
    double time -> hbvJ
    boolean profiling -> RJHv
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> pXbi
    78:78:double getTicks() -> Qxdf
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> MItl
    93:93:double getHours() -> IOKX
    98:98:double getMilliseconds() -> WrFe
    103:103:long getNanoseconds() -> OinE
    108:108:long getNanos() -> aUPU
    113:113:long getStartNano() -> JAML
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> WyvP
    128:128:double getTime() -> TNjA
    133:133:boolean isProfiling() -> FMqa
react.gconcurrent.A -> VURA:
    react.gconcurrent.ParallelPoolManager mgr -> BvOY
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> VURA$1:
    react.gconcurrent.A this$0 -> PwHH
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> WWtB:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> Xkwe:
    react.gconcurrent.QueueMode mode -> sJHH
    react.glang.GList threads -> PfEu
    int next -> awvn
    int threadCount -> bagu
    java.util.Queue squeue -> eIOT
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> lDqm
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> HxAU
    22:23:void syncQueue(react.gconcurrent.Execution) -> FNJd
    long getNanoGate() -> bObJ
    29:51:void tickSyncQueue() -> dwjk
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> kRKq
    102:109:int getTotalQueueSize() -> KCoV
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> KCgV
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> XBEO
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> QNRM
    161:188:void updateThreadInformation() -> XIwO
    192:224:react.gconcurrent.ParallelThread nextThread() -> QNSw
    229:235:void createThreads(int) -> IhUo
    239:239:react.gconcurrent.QueueMode getMode() -> oDiN
    244:244:int getNext() -> aTqb
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> pGkm
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> Xtjt
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> gNSk
react.gconcurrent.ParallelThread -> FFCM:
    java.util.Queue queue -> KVVO
    react.gconcurrent.ThreadInformation info -> lDqm
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> XJNY
    63:70:void execute(react.gconcurrent.Execution) -> kjvN
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> KCgV
    92:92:java.util.Queue getQueue() -> KDSL
    97:97:react.gconcurrent.ThreadInformation getInfo() -> upmV
react.gconcurrent.QueueMode -> rpSt:
    react.gconcurrent.QueueMode ROUND_ROBIN -> toND
    react.gconcurrent.QueueMode SMALLEST -> OIPX
    react.gconcurrent.QueueMode[] ENUM$VALUES -> cdkP
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> MuJq:
    react.gconcurrent.ParallelPoolManager mgr -> BvOY
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> MuJq$1:
    react.gconcurrent.S this$0 -> WQHO
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> gyFP:
    long tick -> wxVq
    long atick -> DYqh
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> AOcg:
    double ticksPerSecond -> qUCW
    int queuedSize -> bHUo
    boolean processing -> lDrV
    double utilization -> NyQp
    react.gmath.Average ticksPerSecondAverage -> hAWA
    long tick -> wxVq
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> BuLc
    33:35:void setTicksPerSecond(double) -> JHtm
    39:39:int getQueuedSize() -> VoFl
    44:45:void setQueuedSize(int) -> gVXt
    49:49:boolean isProcessing() -> NUlX
    54:55:void setProcessing(boolean) -> uhSC
    59:59:double getUtilization() -> MSKC
    64:65:void setUtilization(double) -> uhSC
    69:69:double getTicksPerSecondAverage() -> HnNa
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> xPCw
    89:89:int getId() -> getId
react.gformat.F -> VUQV:
    java.text.NumberFormat NF -> UctC
    java.text.DecimalFormat DF -> SoPD
    java.lang.String[] NAMES -> Ojrv
    java.math.BigInteger THOUSAND -> wwua
    java.util.NavigableMap MAP -> oEkD
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> IhUo
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> FNJd
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> FNJd
    201:221:java.lang.String timeLong(long,int) -> FNJd
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> kjvN
    236:236:java.lang.String b(double) -> KUIt
    241:258:java.lang.String b(java.math.BigInteger) -> FNJd
    263:267:void instantiate() -> lDQH
    279:279:java.lang.String fileSize(long) -> wmxT
    292:292:java.lang.String memSize(long) -> afJO
    305:306:java.lang.String stamp(long) -> gVYg
    322:349:java.lang.String ofSize(long,int) -> KCgV
    363:368:java.lang.String trim(java.lang.String,int) -> KCgV
    381:401:java.lang.String cname(java.lang.String) -> gVXt
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> oLoP
    459:477:java.lang.String memx(long) -> qcvH
    491:492:java.lang.String f(long) -> uWPs
    504:505:java.lang.String f(int) -> RsPi
    519:528:java.lang.String f(double,int) -> KCgV
    544:553:java.lang.String fd(double,int) -> kjvN
    567:576:java.lang.String f(float,int) -> FNJd
    587:587:java.lang.String f(double) -> ESXa
    598:598:java.lang.String f(float) -> FNJd
    613:613:java.lang.String pc(double,int) -> wmxT
    628:628:java.lang.String pc(float,int) -> KCgV
    641:641:java.lang.String pc(double) -> Mtam
    654:654:java.lang.String pc(float) -> KCgV
    670:670:java.lang.String pc(int,int,int) -> FNJd
    684:684:java.lang.String pc(int,int) -> kjvN
    700:700:java.lang.String pc(long,long,int) -> FNJd
    714:714:java.lang.String pc(long,long) -> wmxT
    726:726:java.lang.String msSeconds(long) -> XJNY
    740:740:java.lang.String msSeconds(long,int) -> kjvN
    752:752:java.lang.String nsMs(long) -> JHtm
    766:766:java.lang.String nsMs(long,int) -> wmxT
    780:780:java.lang.String nsMsd(long,int) -> afJO
react.glang.AccessCallback -> AhvB:
    java.lang.Object get() -> get
react.glang.Adapter -> rVaX:
    java.lang.Object adapt(java.lang.Object) -> gVYg
    java.lang.Object onAdapt(java.lang.Object) -> oLoP
react.glang.Callback -> eXkX:
    java.lang.Object t -> RklM
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> FNJd
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> QhDv:
    double i -> wDox
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> pXbi
react.glang.FinalFloat -> dxLX:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> kjvN
react.glang.FinalInteger -> lvre:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> Hmby
react.glang.FinalLong -> Plql:
    long i -> DtDV
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> uhSC
react.glang.FinalString -> HCXO:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> hrvS:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> gVYg
    java.lang.Object onAdapt(java.lang.Object) -> oLoP
react.glang.GBiset -> oVIF:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> fLQW
    java.lang.Object b -> aoee
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> jqOT
    53:54:void setA(java.lang.Object) -> qcvH
    63:63:java.lang.Object getB() -> gWDc
    73:74:void setB(java.lang.Object) -> uWPs
react.glang.GList -> dMYG:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> wmxT
    45:52:react.glang.GList grepDistance(int,int) -> afJO
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> KCgV
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> JtRk
    188:190:react.glang.GList shuffleCopy() -> vcOR
    198:199:void shuffle() -> ogKq
    210:236:react.glang.GList split() -> VoDm
    248:248:boolean hasIndex(int) -> MuBA
    258:259:java.lang.Object pickRandom() -> UtRU
    270:277:react.glang.GList stringList() -> rFAk
    288:292:void forEach(react.glang.Callback) -> KCgV
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> vQax
    336:336:react.glang.GList cropFrom(int) -> mWiV
    341:373:react.glang.GList split(int) -> FMiI
    389:389:react.glang.GList cropTo(int) -> LGIw
    406:416:react.glang.GList crop(int,int) -> gVYg
    427:431:react.glang.GList removeDuplicates() -> nchK
    442:446:void removeAll(java.lang.Object) -> XJNY
    455:455:boolean hasDuplicates() -> wvsO
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> fmRh
    484:490:void push(java.lang.Object,int) -> FNJd
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> JHtm
    528:532:void add(java.util.List) -> FNJd
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> CfmX
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> eHLJ
    626:627:react.glang.GList qdel(java.lang.Object) -> uhSC
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> flqj
    662:669:java.lang.Object popLast() -> vtPY
    674:683:java.lang.Object popRandom() -> LGTs
react.glang.GListAdapter -> uFXS:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> KCgV
    java.lang.Object onAdapt(java.lang.Object) -> oLoP
react.glang.GMap -> YgLO:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> Elsk
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> FNJd
    64:81:react.glang.GMap flip() -> goxB
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> FNJd
    121:121:react.glang.GList k() -> Hmby
    131:131:react.glang.GSet kset() -> IOOo
    141:141:react.glang.GList v() -> RIIU
    151:151:react.glang.GSet vset() -> EJrw
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> KCgV
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> oLoP
    209:219:react.glang.GMap removeDuplicateValues() -> ebAi
    233:242:void put(react.glang.GList,react.glang.GList) -> FNJd
    251:267:react.glang.GList sortK() -> KewE
    277:293:react.glang.GList sortV() -> Veui
react.glang.GQuadraset -> BJVQ:
    java.lang.Object a -> fLQW
    java.lang.Object b -> aoee
    java.lang.Object c -> BdnG
    java.lang.Object d -> AHXk
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> jqOT
    25:26:void setA(java.lang.Object) -> qcvH
    30:30:java.lang.Object getB() -> gWDc
    35:36:void setB(java.lang.Object) -> uWPs
    40:40:java.lang.Object getC() -> IiBp
    45:46:void setC(java.lang.Object) -> KUIt
    50:50:java.lang.Object getD() -> kQpf
    55:56:void setD(java.lang.Object) -> ESXa
react.glang.GSet -> BAeH:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> cSGJ:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> fLQW
    java.lang.Object b -> aoee
    java.lang.Object c -> BdnG
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> jqOT
    26:27:void setA(java.lang.Object) -> qcvH
    31:31:java.lang.Object getB() -> gWDc
    36:37:void setB(java.lang.Object) -> uWPs
    41:41:java.lang.Object getC() -> IiBp
    46:47:void setC(java.lang.Object) -> KUIt
react.gmath.Average -> DYNw:
    double[] values -> GQxW
    double average -> LGvF
    boolean dirty -> PvfO
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> IhUo
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> maIS
react.gmath.DoubleArrayUtils -> yJTI:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> FNJd
    17:19:void wrapRight(double[]) -> FNJd
    23:27:void fill(double[],double) -> fill
react.gmath.M -> Yfjr:
    int precision -> KNDi
    int modulus -> WQHI
    float[] sin -> inlL
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> FNJd
    31:36:boolean r(java.lang.Double) -> KCgV
    51:51:double tps(long,int) -> gVYg
    63:63:double ticksFromNS(long) -> KUIt
    75:101:java.lang.String toRoman(int) -> Etxs
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> oLoP
    144:216:int fromRoman(java.lang.String) -> RsPi
    226:226:long ns() -> mXWh
    236:236:long ms() -> FWII
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> KCgV
    333:333:float sinLookup(int) -> erUL
react.gnet.client.Client -> ssVL:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> Xulk
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> FNJd
    74:74:react.gnet.packet.PacketHandler getHandler() -> fJqk
react.gnet.client.IClient -> Euar:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> FNJd
    react.gnet.packet.PacketHandler getHandler() -> fJqk
react.gnet.download.Download -> FpTm:
    react.gnet.download.DownloadState state -> pIMV
    react.gnet.download.DownloadType type -> JAom
    react.gnet.download.DownloadStatus status -> nKXD
    react.gnet.download.DownloadMonitor monitor -> YhNu
    java.net.URL url -> url
    java.io.File file -> EfHh
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> QFGN
    92:92:react.gnet.download.DownloadType getType() -> ObCn
    97:97:react.gnet.download.DownloadStatus getStatus() -> VTuJ
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> AXYE
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> yuHF:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> FNJd
    void onDownloadStarted(react.gnet.download.Download) -> FNJd
    void onDownloadFinished(react.gnet.download.Download) -> KCgV
    void onDownloadFailed(react.gnet.download.Download) -> kjvN
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> FNJd
react.gnet.download.DownloadState -> tTUh:
    react.gnet.download.DownloadState IDLE -> qwGx
    react.gnet.download.DownloadState DOWNLOADING -> cTMF
    react.gnet.download.DownloadState FAILED -> SMNT
    react.gnet.download.DownloadState FINISHED -> eIPt
    react.gnet.download.DownloadState[] $VALUES -> majQ
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> XBEJ:
    long bytesDownloaded -> SxCL
    long bytesTotal -> GJKs
    long bytesPerSecond -> LQJn
    long timeElapsed -> qwIA
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> DGqK
    25:25:long getBytesDownloaded() -> TiBf
    30:31:void setBytesDownloaded(long) -> ESXa
    35:35:long getBytesTotal() -> cAgX
    40:41:void setBytesTotal(long) -> Mtam
    45:45:long getBytesPerSecond() -> dxPJ
    50:51:void setBytesPerSecond(long) -> pXbi
    55:55:long getTimeElapsed() -> CVOx
    60:61:void setTimeElapsed(long) -> IhUo
react.gnet.download.DownloadType -> HSvo:
    react.gnet.download.DownloadType DETERMINATE -> kAqX
    react.gnet.download.DownloadType INDETERMINATE -> FymI
    react.gnet.download.DownloadType[] $VALUES -> NOAW
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> iBsr:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> skIb
    java.lang.String getPacketName() -> xiWc
react.gnet.packet.IncompatablePacketException -> ksnd:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> bqcv:
    react.gnet.packet.PacketBinding SERVER_BOUND -> fUFR
    react.gnet.packet.PacketBinding CLIENT_BOUND -> vJaP
    react.gnet.packet.PacketBinding[] $VALUES -> ptEN
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> LiUb:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> xaBp:
    react.glang.GList accept -> dFOA
    react.gnet.packet.PacketBinding side -> vcro
    react.gnet.streams.OSS out -> AGwr
    react.gnet.streams.ISS in -> inmx
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> FNJd
    28:34:void accept(react.gnet.packet.IPacket) -> KCgV
    38:46:react.gnet.packet.IPacket findPacket(int) -> RQKu
    51:66:react.gnet.packet.IPacket read() -> ycho
    71:77:void write(react.gnet.packet.IPacket) -> kjvN
react.gnet.packet.UnhandledPacketException -> Qxdf:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> MItl:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> fJqk
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> wmxT
react.gnet.server.Server -> IOKX:
    int port -> port
    java.net.ServerSocket socket -> vuUK
    react.gnet.packet.PacketHandler handler -> Xulk
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> fJqk
    37:84:void run() -> run
    88:91:void pstart() -> pXoD
    95:96:void pstop() -> tCYI
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> wmxT
react.gnet.streams.ISS -> WrFe:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> vtse
    boolean built -> gWgS
    byte[] readBuffer -> FGGv
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> IhUC
    64:72:react.glang.GList readStringList() -> gyHp
    77:85:react.glang.GList readDoubleList() -> aCpn
    90:98:react.glang.GList readLongList() -> FMua
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> FNJd
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> FNJd
    136:137:react.gnet.streams.ISS gzip() -> vROX
    142:147:void build() -> ArMF
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> KCgV
    435:436:void close() -> close
react.gnet.streams.OSS -> OinE:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> yeLH
    react.gnet.streams.StreamBuilder bu -> vtse
    boolean built -> gWgS
    byte[] writeBuffer -> tMJv
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> wvgn
    41:42:react.gnet.streams.OSS gzip(int) -> IVrU
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> KCgV
    53:58:void build() -> ArMF
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> qcvH
    102:108:void writeDoubleList(react.glang.GList) -> uWPs
    112:118:void writeLongList(react.glang.GList) -> XJNY
    122:128:void writeStreamableList(react.glang.GList) -> JHtm
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> OjSH
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> kjvN
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> aUPU:
    react.glang.GList constructors -> QykW
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> FNJd
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> FNJd
    49:50:void bind(react.gnet.streams.StreamConstructor) -> FNJd
    54:55:void bindGZIP(int) -> IFQj
    59:60:void bindGZIP() -> SmnE
    64:65:void bindCipher(javax.crypto.Cipher) -> kjvN
    69:70:void bindBuffer(int) -> XuBA
    74:75:void bindBuffer() -> cRiP
react.gnet.streams.StreamConstructor -> JAML:
    java.io.InputStream constructInput(java.io.InputStream) -> FNJd
    java.io.OutputStream constructOutput(java.io.OutputStream) -> FNJd
react.gnet.streams.constructors.BufferedStreamConstructor -> WyvP:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> KCgV
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> KCgV
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> FNJd
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> FNJd
react.gnet.streams.constructors.CipherStreamConstructor -> TNjA:
    javax.crypto.Cipher cipher -> qDBO
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> kjvN
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> kjvN
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> FNJd
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> FNJd
react.gnet.streams.constructors.GZipStreamConstructor -> FMqa:
    int compressionLevel -> lMci
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> wmxT
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> wmxT
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> FNJd
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> FNJd
react.gnet.streams.overlays.CGZIPInputStream -> bObJ:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> dwjk:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> kRKq:
    void toBytes(react.gnet.streams.OSS) -> FNJd
    void fromBytes(react.gnet.streams.ISS) -> FNJd
react.graph.ColossalView -> KCoV:
    react.papyrus.BufferedFrame view -> QykS
    react.glang.GMap buffers -> sIfs
    react.glang.GMap graphs -> cunU
    double level -> Dsen
    double targetLevel -> Npay
    int maxX -> fwKK
    int maxY -> AbNj
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> IqSF
    51:77:void render() -> Kvwe
    81:98:void scroll(int) -> rVVu
    102:112:void recompile() -> DjSk
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> FNJd
    122:122:react.papyrus.BufferedFrame getView() -> YxQF
    127:127:react.glang.GMap getBuffers() -> FyKW
    132:132:react.glang.GMap getGraphs() -> JkgH
    137:137:double getLevel() -> DXtA
    142:142:double getTargetLevel() -> fSdc
    147:147:int getMaxX() -> eHPy
    152:152:int getMaxY() -> wTuI
react.graph.ColossalView$Builder -> KCoV$FNJd:
    react.glang.GList graphs -> xrmP
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> FNJd
    171:191:react.graph.ColossalView compute() -> oVOb
react.graph.CubicleIterator -> XBEO:
    int[][] mapping -> rhjf
    int xCubes -> bPkB
    int yCubes -> sIkR
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> FMhw
    47:130:void insert(react.graph.GraphSize,int) -> FNJd
    134:145:void print() -> print
react.graph.GraphSampleLine -> QNRM:
    double lx -> XSnV
    double ly -> yCLT
    react.api.ISampler sampler -> KDxH
    react.graph.IFormatter formatter -> Eeis
    byte graphColor -> WPju
    byte backgroundColor -> SVAh
    byte borderColor -> cePN
    byte textColor -> BTPK
    int ticksLeftTitle -> nSlp
    int ticksOutTitle -> FyoV
    double nextPoint -> TGbh
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> jhVT
    51:183:void onRender(react.papyrus.BufferedFrame) -> FNJd
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> KCgV
    226:254:int getHue(int,int,int) -> kjvN
    259:281:void scaleFor(react.glang.GList) -> uhSC
    285:285:react.graph.IFormatter getFormatter() -> dUat
    290:291:void setFormatter(react.graph.IFormatter) -> FNJd
    295:295:byte getGraphColor() -> eirt
    300:301:void setGraphColor(byte) -> FNJd
    305:305:byte getBackgroundColor() -> rghm
    310:311:void setBackgroundColor(byte) -> KCgV
    315:315:byte getBorderColor() -> YpCf
    320:321:void setBorderColor(byte) -> kjvN
    325:325:byte getTextColor() -> psEB
    330:331:void setTextColor(byte) -> wmxT
    335:335:react.api.ISampler getSampler() -> XtpQ
react.graph.GraphSize -> XIwO:
    react.graph.GraphSize WIDE -> EDIH
    react.graph.GraphSize FULL -> lEWK
    react.graph.GraphSize SQUARE -> oqCR
    int[] $SWITCH_TABLE$react$graph$GraphSize -> MBle
    react.graph.GraphSize[] ENUM$VALUES -> eseX
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> hPxw
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> oDmC
react.graph.GraphText -> QNSw:
    java.lang.String text -> text
    byte fontColor -> lwyQ
    byte backgroundColor -> SVAh
    boolean wrote -> TGab
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> FNJd
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> FxmT
    68:69:void setFontColor(byte) -> afJO
    73:73:byte getBackgroundColor() -> rghm
    78:79:void setBackgroundColor(byte) -> KCgV
react.graph.GraphingInstance -> oDiN:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> xrmP
    react.graph.ColossalView view -> IPTC
    react.papyrus.Papyrus papyrus -> MCNU
    react.papyrus.IRenderer renderer -> aUvx
    boolean mapping -> qBmm
    react.glang.GList msgs -> TrUq
    react.surge.sched.Task waiter -> cdoA
    react.surge.sched.Task waiter2 -> qCfg
    int shift -> qDHH
    boolean notif -> opfB
    47:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> FNJd
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> FNJd
    138:142:void send(java.lang.String) -> Hmby
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> FNJd
    153:165:void on(react.event.ReactScrollEvent) -> FNJd
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> FNJd
    179:187:void destroy() -> destroy
    191:200:void toggle() -> XSNC
    204:205:void setGraphs(react.glang.GList) -> KUIt
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> bGYJ
    243:259:void compile() -> bqjj
    40:40:boolean access$0(react.graph.GraphingInstance) -> FNJd
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> KCgV
    45:45:boolean access$2(react.graph.GraphingInstance) -> kjvN
    45:45:void access$3(react.graph.GraphingInstance,boolean) -> FNJd
    44:44:int access$4(react.graph.GraphingInstance) -> wmxT
    44:44:void access$5(react.graph.GraphingInstance,int) -> FNJd
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> afJO
react.graph.GraphingInstance$1 -> oDiN$1:
    react.graph.GraphingInstance this$0 -> hlQg
    org.bukkit.entity.Player val$player -> mbNr
    1:51:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> oDiN$2:
    react.graph.GraphingInstance this$0 -> hlQg
    1:76:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> oDiN$3:
    react.graph.GraphingInstance this$0 -> hlQg
    1:106:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> FNJd
react.graph.IFormatter -> aTqb:
    java.lang.String from(double) -> gVXt
react.graph.IGraph -> pGkm:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> VMFX
    long getTimeViewport() -> mrJv
    void render(react.papyrus.BufferedFrame) -> kjvN
    double getMax() -> getMax
    void setMax(double) -> RsPi
react.graph.NormalGraph -> Xtjt:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> PvmT
    long timeViewport -> CyXm
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> VMFX
    35:35:long getTimeViewport() -> mrJv
    41:42:void render(react.papyrus.BufferedFrame) -> kjvN
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> RsPi
    void onRender(react.papyrus.BufferedFrame) -> FNJd
react.graph.PlotBoard -> gNSk:
    react.glang.GMap plots -> NpgN
    int maxRecordings -> CVsr
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> INpU
    33:33:long getAccurateTimeSpan() -> DHQw
    38:50:long getMedian(long,long) -> afJO
    55:55:long getMinimumAccuracyRange() -> AOjm
    60:70:double getMaxValue() -> AqnK
    75:85:double getMinValue() -> TXBR
    90:90:react.glang.GList sort(react.glang.GMap) -> KCgV
    95:105:long earilestRecording() -> Wqkk
    110:120:long latestRecording() -> rxiO
    125:126:void reduceBefore(long) -> gVXt
    130:148:void reduceBetween(long,long) -> gVYg
    152:152:boolean before(long,long) -> oLoP
    157:157:boolean after(long,long) -> qcvH
    162:162:boolean within(long,long,long) -> FNJd
    167:177:react.glang.GMap getBetween(long,long) -> uWPs
    182:184:void plot(long,double) -> FNJd
    188:188:boolean hasAt(long) -> RsPi
    193:193:double getAt(long) -> Hmby
    198:198:int getSize() -> getSize
react.graph.Point -> KDSL:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> upmV:
    int iid -> KonW
    react.graph.IGraph graph -> qDHP
    react.graph.GraphSize size -> ydop
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> TNpR
    24:25:void setGraph(react.graph.IGraph) -> FNJd
    29:29:react.graph.GraphSize getSize() -> eYQo
    34:35:void setSize(react.graph.GraphSize) -> FNJd
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> BuLc:
    react.graph.RenderMaxType UNLIMITED -> BSpi
    react.graph.RenderMaxType LIMITED -> HEDB
    react.graph.RenderMaxType[] ENUM$VALUES -> CNdx
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> VoFl:
    java.lang.String CRLF -> TaVN
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> MuBA
    162:198:java.lang.String toString(react.json.JSONObject) -> KCgV
react.json.HTTPTokener -> NUlX:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> MSKC:
    java.util.ArrayList myArrayList -> IjHM
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> FNJd
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> BlQj
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> wnXL
    394:399:react.json.JSONObject getJSONObject(int) -> rpIs
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> vQax
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> fSUY
    515:515:boolean optBoolean(int) -> paRl
    533:536:boolean optBoolean(int,boolean) -> KCgV
    551:551:double optDouble(int) -> HTRg
    569:572:double optDouble(int,double) -> FNJd
    587:587:int optInt(int) -> oDaC
    605:608:int optInt(int,int) -> qcvH
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> KCgV
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> FNJd
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> FNJd
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> FNJd
    722:723:react.json.JSONArray optJSONArray(int) -> CLsB
    737:738:react.json.JSONObject optJSONObject(int) -> OPWC
    752:752:long optLong(int) -> dUat
    770:773:long optLong(int,long) -> FNJd
    788:788:java.lang.String optString(int) -> qBWD
    803:804:java.lang.String optString(int,java.lang.String) -> FNJd
    816:817:react.json.JSONArray put(boolean) -> KUIt
    830:831:react.json.JSONArray put(java.util.Collection) -> FNJd
    845:848:react.json.JSONArray put(double) -> Hmby
    860:861:react.json.JSONArray put(int) -> dVCT
    873:874:react.json.JSONArray put(long) -> MuBA
    887:888:react.json.JSONArray put(java.util.Map) -> FNJd
    902:903:react.json.JSONArray put(java.lang.Object) -> Mtam
    921:922:react.json.JSONArray put(int,boolean) -> kjvN
    939:940:react.json.JSONArray put(int,java.util.Collection) -> FNJd
    958:959:react.json.JSONArray put(int,double) -> KCgV
    977:978:react.json.JSONArray put(int,int) -> uWPs
    996:997:react.json.JSONArray put(int,long) -> KCgV
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> FNJd
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> FNJd
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> pXbi
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> FNJd
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> FNJd
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> FNJd
react.json.JSONException -> HnNa:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> GJOQ
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> xPCw:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> FNJd
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> mWiV
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> FNJd
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> KCgV
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> MuBA
    379:456:java.lang.String toString(react.json.JSONArray) -> KCgV
    472:552:java.lang.String toString(react.json.JSONObject) -> KCgV
react.json.JSONObject -> lDQH:
    java.util.Map map -> map
    java.lang.Object NULL -> UdYW
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> FNJd
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> KCgV
    480:499:java.lang.String doubleToString(double) -> MuBA
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> FMiI
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> LGIw
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> Etxs
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> kjvN
    751:767:java.lang.String[] getNames(java.lang.Object) -> IhUo
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> erUL
    855:855:boolean isNull(java.lang.String) -> RQKu
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> Qgik
    917:937:java.lang.String numberToString(java.lang.Number) -> FNJd
    949:949:java.lang.Object opt(java.lang.String) -> IhUC
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> FNJd
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> FNJd
    1018:1018:boolean optBoolean(java.lang.String) -> wvgn
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> FNJd
    1054:1054:double optDouble(java.lang.String) -> IVrU
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> FNJd
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> FNJd
    1116:1119:double optDouble(java.lang.String,double) -> FNJd
    1134:1134:int optInt(java.lang.String) -> IFQj
    1152:1155:int optInt(java.lang.String,int) -> kjvN
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> XuBA
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> rVVu
    1198:1198:long optLong(java.lang.String) -> FMhw
    1216:1219:long optLong(java.lang.String,long) -> FNJd
    1234:1234:java.lang.String optString(java.lang.String) -> BlQj
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> KCgV
    1255:1305:void populateMap(java.lang.Object) -> gVXt
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> KCgV
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> FNJd
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> KCgV
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> wmxT
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> KCgV
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> FNJd
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> kjvN
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> wmxT
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> afJO
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> FNJd
    1590:1590:java.lang.Object remove(java.lang.String) -> wnXL
    1605:1640:boolean similar(java.lang.Object) -> pXbi
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> RsPi
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> kjvN
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> FNJd
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> FNJd
    2000:2004:void indent(java.io.Writer,int) -> FNJd
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> FNJd
react.json.JSONObject$Null -> lDQH$FNJd:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> jqOT:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> gWDc:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> JtRk:
    long character -> UmKB
    boolean eof -> eof
    long index -> aolC
    long line -> rhkt
    char previous -> Rtak
    java.io.Reader reader -> reader
    boolean usePrevious -> ekVt
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> SnQO
    119:131:int dehexchar(char) -> FNJd
    136:136:boolean end() -> TNpN
    147:153:boolean more() -> SfCW
    164:198:char next() -> next
    213:218:char next(char) -> KCgV
    233:250:java.lang.String next(int) -> jhVT
    263:266:char nextClean() -> rgjl
    287:334:java.lang.String nextString(char) -> kjvN
    349:361:java.lang.String nextTo(char) -> wmxT
    376:388:java.lang.String nextTo(java.lang.String) -> rpIs
    403:441:java.lang.Object nextValue() -> opCy
    458:479:char skipTo(char) -> afJO
    491:491:react.json.JSONException syntaxError(java.lang.String) -> fSUY
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> vcOR:
    int maxdepth -> Land
    boolean comma -> TOso
    char mode -> Oshy
    react.json.JSONObject[] stack -> NxwA
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> paRl
    157:164:react.json.JSONWriter array() -> EKXV
    180:193:react.json.JSONWriter end(char,char) -> FNJd
    206:206:react.json.JSONWriter endArray() -> tfBC
    219:219:react.json.JSONWriter endObject() -> ECHQ
    235:258:react.json.JSONWriter key(java.lang.String) -> HTRg
    274:285:react.json.JSONWriter object() -> dUqF
    299:310:void pop(char) -> gVYg
    322:329:void push(react.json.JSONObject) -> wmxT
    342:342:react.json.JSONWriter value(boolean) -> ESXa
    356:356:react.json.JSONWriter value(double) -> vQax
    369:369:react.json.JSONWriter value(long) -> vQax
    385:385:react.json.JSONWriter value(java.lang.Object) -> Hmby
react.json.XML -> ogKq:
    java.lang.Character AMP -> RlQn
    java.lang.Character APOS -> PekG
    java.lang.Character BANG -> nTNo
    java.lang.Character EQ -> Ngtk
    java.lang.Character GT -> LaoM
    java.lang.Character LT -> HUcN
    java.lang.Character QUEST -> WQMh
    java.lang.Character QUOT -> GJOh
    java.lang.Character SLASH -> ptHO
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> oDaC
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> FNJd
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> MuBA
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> VoDm:
    java.util.HashMap entity -> oOBN
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> jWbn
    108:133:java.lang.Object nextContent() -> SvdP
    149:166:java.lang.Object nextEntity(char) -> oLoP
    186:239:java.lang.Object nextMeta() -> bqma
    261:334:java.lang.Object nextToken() -> yRmI
    354:420:boolean skipPast(java.lang.String) -> CLsB
react.papyrus.BufferedFrame -> UtRU:
    byte[][] frame -> RdDY
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> FNJd
    90:97:void write(byte) -> gVYg
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> FNJd
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> FNJd
    131:145:java.awt.image.BufferedImage toBufferedImage() -> TiGI
    153:160:void writeRainbowMul() -> rhJy
    167:174:void writeRainbowAdd() -> fmYX
    181:191:void writeSparks() -> wfYW
    195:201:boolean write(int,int,byte) -> FNJd
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> FNJd
    233:250:void write(react.papyrus.BufferedFrame) -> wmxT
    254:254:byte[][] getRawFrame() -> aCwF
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> rFAk:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> wmxT
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> FNJd
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> nchK:
    org.bukkit.map.MapView getView() -> DPfW
    react.papyrus.BufferedFrame getFrameBuffer() -> UJFi
    void addRenderer(react.papyrus.IRenderer) -> FNJd
    void clearRenderers() -> SKop
    react.glang.GList getRenderers() -> uXBU
    void removeRenderer(react.papyrus.IRenderer) -> KCgV
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> pGqJ
react.papyrus.IRenderer -> wvsO:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> FNJd
react.papyrus.Papyrus -> fmRh:
    org.bukkit.map.MapView map -> nLBV
    react.papyrus.BufferedFrame frameBuffer -> cLCI
    react.papyrus.BufferedFrame lastFrameBuffer -> Bdtp
    react.glang.GList renderers -> YWVc
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> DPfW
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> UJFi
    51:52:void addRenderer(react.papyrus.IRenderer) -> FNJd
    57:58:void clearRenderers() -> SKop
    63:63:react.glang.GList getRenderers() -> uXBU
    69:70:void removeRenderer(react.papyrus.IRenderer) -> KCgV
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> pGqJ
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> FNJd
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> KCgV
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> kjvN
react.papyrus.Papyrus$1 -> fmRh$1:
    react.papyrus.Papyrus this$0 -> SnwK
    org.bukkit.map.MapCanvas val$c -> fULC
    org.bukkit.map.MapView val$v -> LbRe
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> CfmX:
    int spaceSize -> HVGF
    java.lang.String fontChars -> vdYq
    int[][] fontData -> VpPp
    react.papyrus.ReactFont Font -> COFf
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> eHLJ:
    react.glang.GList subgoals -> mrpp
    java.lang.String tag -> Nphx
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> wDTy
    26:44:void propigate() -> dNAB
    49:50:void addGoal(react.rai.IGoal) -> FNJd
    55:65:react.glang.GList getFailingSubgoals() -> UtXg
    71:71:boolean isFailing() -> xqkq
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> fJsv
    void onPropigated() -> psGC
react.rai.Goal$1 -> eHLJ$1:
    react.rai.Goal this$0 -> cBph
    react.rai.IGoal val$i -> NWXM
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> flqj:
    react.glang.GList getSubgoals() -> wDTy
    void propigate() -> dNAB
    void onPropigated() -> psGC
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> UtXg
    boolean isFailing() -> xqkq
    boolean onCheckFailing() -> fJsv
    void update() -> update
    void addGoal(react.rai.IGoal) -> FNJd
react.rai.IRAI -> vtPY:
    react.glang.GList getGoals() -> oEOQ
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> FNJd
    react.glang.GList getEvents() -> yRlF
    void callEvent(react.rai.RAIEvent) -> FNJd
    react.glang.GList getListeners() -> UASr
react.rai.RAI -> LGTs:
    react.glang.GList goals -> ObkW
    react.glang.GList events -> eRHo
    react.glang.GList logEvents -> GtdY
    react.glang.GList listeners -> fvls
    long since -> oWTg
    react.rai.RAI instance -> PDKC
    21:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> oEOQ
    41:42:void addGoal(react.rai.IGoal) -> FNJd
    47:69:void tick() -> tick
    74:74:react.glang.GList getEvents() -> yRlF
    80:87:void callEvent(react.rai.RAIEvent) -> FNJd
    92:92:react.glang.GList getListeners() -> UASr
react.rai.RAIEvent -> Elsk:
    react.rai.RAIEventType type -> jOtg
    java.lang.String[] pars -> hdCC
    java.lang.String ovt -> VpPP
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> sPyt
    29:29:java.lang.String[] getPars() -> nBJw
    34:34:java.lang.String getOvt() -> MAmJ
react.rai.RAIEventType -> goxB:
    react.rai.RAIEventType FIRE_ACTION -> MTSc
    react.rai.RAIEventType NOTE_GOAL_FAILING -> BStN
    react.rai.RAIEventType NOTE_GOAL_FIXED -> WPoU
    java.lang.String[] msgs -> CgxL
    react.rai.RAIEventType[] ENUM$VALUES -> gGLb
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> cdPH
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> FNJd
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedChunkLoad -> IOOo:
    boolean failing -> aDyj
    24:27:void <init>() -> <init>
    34:60:boolean onCheckFailing() -> fJsv
    66:79:void onPropigated() -> psGC
react.rai.goals.GoalReducedChunkLoad$1 -> IOOo$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> MSuS
    1:42:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    47:56:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> IOOo$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> MSuS
    1:68:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    73:76:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> RIIU:
    boolean failing -> aDyj
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> fJsv
    91:134:void onPropigated() -> psGC
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> FNJd
react.rai.goals.GoalReducedEntityCounts$1 -> RIIU$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> CWYd
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> RIIU$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> CWYd
    org.bukkit.Chunk val$lx -> jYIk
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> EJrw:
    boolean failing -> aDyj
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> fJsv
    78:128:void onPropigated() -> psGC
react.rai.goals.GoalStableChunkTime$1 -> EJrw$1:
    react.rai.goals.GoalStableChunkTime this$0 -> uHHL
    1:54:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> EJrw$2:
    react.rai.goals.GoalStableChunkTime this$0 -> uHHL
    java.lang.Object val$i -> SUgI
    1:111:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> ebAi:
    boolean failing -> aDyj
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> psGC
    35:35:void letUp() -> dfrH
    40:77:boolean onCheckFailing() -> fJsv
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> FNJd
react.rai.goals.GoalStableEntityTime$1 -> ebAi$1:
    react.rai.goals.GoalStableEntityTime this$0 -> lNNc
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> KewE:
    boolean failing -> aDyj
    react.glang.GMap reocc -> JloR
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> psGC
    88:125:boolean onCheckFailing() -> fJsv
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> FNJd
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> KCgV
react.rai.goals.GoalStableFluidTime$1 -> KewE$1:
    react.rai.goals.GoalStableFluidTime this$0 -> Fyth
    org.bukkit.Chunk val$lx -> jYIk
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> KewE$2:
    react.rai.goals.GoalStableFluidTime this$0 -> Fyth
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> Veui:
    boolean failing -> aDyj
    react.glang.GMap reocc -> JloR
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> psGC
    89:125:boolean onCheckFailing() -> fJsv
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> FNJd
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> KCgV
react.rai.goals.GoalStableHopperTime$1 -> Veui$1:
    react.rai.goals.GoalStableHopperTime this$0 -> VpRf
    org.bukkit.Chunk val$lx -> jYIk
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> Veui$2:
    react.rai.goals.GoalStableHopperTime this$0 -> VpRf
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> IiBp:
    boolean failing -> aDyj
    react.glang.GMap reocc -> JloR
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> psGC
    89:126:boolean onCheckFailing() -> fJsv
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> FNJd
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> KCgV
react.rai.goals.GoalStableRedstoneTime$1 -> IiBp$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> iMUi
    org.bukkit.Chunk val$lx -> jYIk
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> IiBp$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> iMUi
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> kQpf:
    boolean failing -> aDyj
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> psGC
    34:58:boolean onCheckFailing() -> fJsv
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> FNJd
react.rai.goals.GoalStableTickTime$1 -> kQpf$1:
    react.rai.goals.GoalStableTickTime this$0 -> Ygxp
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> maIS:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> BLFN
    boolean authenticated -> GlWa
    react.remote.server.ServerInfo info -> SMVr
    react.glang.GMap frems -> CNgi
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> uWSi
    51:51:react.glang.GMap getFrames() -> NEQX
    56:75:int computeFrames() -> CERR
    80:92:boolean clearToken() -> OYXS
    97:110:boolean updateServerInfo() -> fvMM
    115:129:boolean refreshToken() -> tLPl
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> kjvN
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> ndQu
    165:165:boolean isAuthenticated() -> vJFn
    170:170:react.remote.server.ServerInfo getInfo() -> dUre
react.remote.client.packet.CPacketClearToken -> mXWh:
    java.lang.String token -> BLFN
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNJd
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNJd
    38:38:java.lang.String getToken() -> ndQu
    43:44:void setToken(java.lang.String) -> OPWC
react.remote.client.packet.CPacketComputeFrames -> FWII:
    java.lang.String token -> BLFN
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNJd
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNJd
    38:38:java.lang.String getToken() -> ndQu
    43:44:void setToken(java.lang.String) -> OPWC
react.remote.client.packet.CPacketGetInfo -> fJqk:
    java.lang.String token -> BLFN
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNJd
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNJd
    38:38:java.lang.String getToken() -> ndQu
    43:44:void setToken(java.lang.String) -> OPWC
react.remote.client.packet.CPacketGetToken -> QFGN:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> FNJd
    36:38:void fromBytes(react.gnet.streams.ISS) -> FNJd
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> ObCn:
    java.lang.String token -> BLFN
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNJd
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNJd
    38:38:java.lang.String getToken() -> ndQu
    43:44:void setToken(java.lang.String) -> OPWC
react.remote.client.packet.ClientPacket -> VTuJ:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> FNJd
    void fromBytes(react.gnet.streams.ISS) -> FNJd
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> skIb
    42:42:java.lang.String getPacketName() -> xiWc
react.remote.client.packet.ClientPacketType -> AXYE:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> GReM
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> jijM
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> hIqT
    react.remote.client.packet.ClientPacketType GET_INFO -> pIYB
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> lpQR
    react.remote.client.packet.ClientPacketType[] $VALUES -> oqIj
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> DGqK:
    react.glang.GMap compute(long,long) -> kjvN
react.remote.server.KnownUser -> TiBf:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> cAgX:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> FNJd
    38:41:void fromBytes(react.gnet.streams.ISS) -> FNJd
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> dxPJ:
    react.glang.GList users -> eQir
    react.glang.GMap session -> xPoa
    react.glang.GMap lastCompute -> WQRo
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> uFXS
    44:45:void registerUser(react.remote.server.KnownUser) -> FNJd
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> KCgV
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> dUat
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> wmxT
    react.remote.server.IFrameComputer getFrameComputer() -> YgLO
    170:171:void markLastCompute(react.remote.server.KnownUser) -> kjvN
    175:180:long getLastCompute(react.remote.server.KnownUser) -> wmxT
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> FNJd
    190:191:void deleteSession(react.remote.server.KnownUser) -> afJO
    195:195:java.lang.String createToken() -> inTj
react.remote.server.ServerInfo -> CVOx:
    java.lang.String motd -> cLCb
    int gameProtocol -> tVDs
    java.lang.String gameVersion -> uaXj
    java.lang.String reactVersion -> CqKf
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> nSsH
    int viewDistance -> viewDistance
    int gamePort -> Jlmt
    java.lang.String gameAddress -> EDLx
    react.glang.GList remotePlugins -> QXPv
    react.glang.GList worlds -> dWXA
    react.glang.GList actions -> ySpv
    react.glang.GList samplers -> MTVN
    26:26:react.remote.server.ServerInfo empty() -> XdRk
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> FNJd
    146:159:void fromBytes(react.gnet.streams.ISS) -> FNJd
    java.lang.String dgetMotd() -> WWtB
    int dgetGameProtocol() -> Xkwe
    java.lang.String dgetGameVersion() -> FFCM
    java.lang.String dgetReactVersion() -> rpSt
    int dgetMaxPlayers() -> MuJq
    react.glang.GList dgetConnectedPlayers() -> gyFP
    int dgetViewDistance() -> AOcg
    int dgetGamePort() -> VUQV
    java.lang.String dgetGameAddress() -> AhvB
    react.glang.GList dgetRemotePlugins() -> rVaX
    react.glang.GList dgetWorlds() -> eXkX
    react.glang.GList dgetActions() -> QhDv
    react.glang.GList dgetSamplers() -> dxLX
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> hkQj
    199:199:java.lang.String getGameVersion() -> XmCr
    204:204:java.lang.String getReactVersion() -> WjAg
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> SUCw
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> BKBF
    229:229:java.lang.String getGameAddress() -> XSQp
    234:234:react.glang.GList getRemotePlugins() -> ggmQ
    239:239:react.glang.GList getWorlds() -> UlLF
    244:244:react.glang.GList getActions() -> TNgx
    249:249:react.glang.GList getSamplers() -> ydQK
react.remote.server.ServerInfo$1 -> CVOx$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> eXkX
    37:37:int dgetViewDistance() -> AOcg
    43:43:react.glang.GList dgetRemotePlugins() -> rVaX
    49:49:java.lang.String dgetReactVersion() -> rpSt
    55:55:java.lang.String dgetMotd() -> WWtB
    61:61:int dgetMaxPlayers() -> MuJq
    67:67:java.lang.String dgetGameVersion() -> FFCM
    73:73:int dgetGameProtocol() -> Xkwe
    79:79:int dgetGamePort() -> VUQV
    85:85:java.lang.String dgetGameAddress() -> AhvB
    91:91:react.glang.GList dgetConnectedPlayers() -> gyFP
    97:97:react.glang.GList dgetActions() -> QhDv
    103:103:react.glang.GList dgetSamplers() -> dxLX
react.remote.server.packet.ComputedFrame -> skIb:
    react.glang.GMap values -> iECs
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> FNJd
    28:36:void fromBytes(react.gnet.streams.ISS) -> FNJd
    40:40:react.glang.GMap getValues() -> FqBV
    45:46:void setValues(react.glang.GMap) -> kjvN
react.remote.server.packet.SPacketOk -> xiWc:
    boolean ok -> HgIh
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNJd
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNJd
    38:38:boolean isOk() -> rxnS
    43:44:void setOk(boolean) -> Mtam
react.remote.server.packet.SPacketSendFrames -> ycho:
    react.glang.GMap frames -> DcNL
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> FNJd
    36:44:void fromBytes(react.gnet.streams.ISS) -> FNJd
    48:48:react.glang.GMap getFrames() -> NEQX
    53:54:void setFrames(react.glang.GMap) -> wmxT
react.remote.server.packet.SPacketSendInfo -> pXoD:
    react.remote.server.ServerInfo info -> SMVr
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNJd
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNJd
    38:38:react.remote.server.ServerInfo getInfo() -> dUre
    43:44:void setInfo(react.remote.server.ServerInfo) -> FNJd
react.remote.server.packet.SPacketSendToken -> tCYI:
    java.lang.String token -> BLFN
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNJd
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNJd
    38:38:java.lang.String getToken() -> ndQu
    43:44:void setToken(java.lang.String) -> OPWC
react.remote.server.packet.ServerPacket -> gyHp:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> FNJd
    void fromBytes(react.gnet.streams.ISS) -> FNJd
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> skIb
    42:42:java.lang.String getPacketName() -> xiWc
react.remote.server.packet.ServerPacketType -> aCpn:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> cLCk
    react.remote.server.packet.ServerPacketType SEND_INFO -> QhrT
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> UJjm
    react.remote.server.packet.ServerPacketType OK -> HEIO
    react.remote.server.packet.ServerPacketType[] $VALUES -> aMoq
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> FMua:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleAsyncQueue$1 -> FMua$1:
    react.sampler.SampleAsyncQueue this$0 -> ecMy
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleChunkTime -> vROX:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleChunkTime$1 -> vROX$1:
    react.sampler.SampleChunkTime this$0 -> aMpL
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleChunksLoaded -> ArMF:
    react.graph.IFormatter formatter -> Eeis
    17:27:void <init>() -> <init>
    32:38:void construct() -> uWSi
    43:44:void sample() -> jhVT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleChunksLoaded$1 -> ArMF$1:
    react.sampler.SampleChunksLoaded this$0 -> IHLW
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> gVXt
react.sampler.SampleChunksLoadedPerSecond -> OjSH:
    react.gmath.Average a -> QhuM
    react.graph.IFormatter formatter -> Eeis
    16:29:void <init>() -> <init>
    34:40:void construct() -> uWSi
    45:47:void sample() -> jhVT
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleChunksLoadedPerSecond$1 -> OjSH$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> kJle
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> gVXt
react.sampler.SampleEntitiesDrops -> SmnE:
    react.graph.IFormatter formatter -> Eeis
    17:27:void <init>() -> <init>
    32:38:void construct() -> uWSi
    43:44:void sample() -> jhVT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleEntitiesDrops$1 -> SmnE$1:
    react.sampler.SampleEntitiesDrops this$0 -> dNiF
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> gVXt
react.sampler.SampleEntitiesLiving -> cRiP:
    react.graph.IFormatter formatter -> Eeis
    17:27:void <init>() -> <init>
    32:38:void construct() -> uWSi
    43:44:void sample() -> jhVT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleEntitiesLiving$1 -> cRiP$1:
    react.sampler.SampleEntitiesLiving this$0 -> OcPE
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> gVXt
react.sampler.SampleEntitiesTiles -> IqSF:
    react.graph.IFormatter formatter -> Eeis
    17:27:void <init>() -> <init>
    32:38:void construct() -> uWSi
    43:44:void sample() -> jhVT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleEntitiesTiles$1 -> IqSF$1:
    react.sampler.SampleEntitiesTiles this$0 -> AsXW
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> gVXt
react.sampler.SampleEntitiesTotal -> Kvwe:
    react.graph.IFormatter formatter -> Eeis
    17:27:void <init>() -> <init>
    32:38:void construct() -> uWSi
    43:44:void sample() -> jhVT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleEntitiesTotal$1 -> Kvwe$1:
    react.sampler.SampleEntitiesTotal this$0 -> FOci
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> gVXt
react.sampler.SampleEntityDroppedTicks -> DjSk:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleEntityDroppedTicks$1 -> DjSk$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> igKL
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleEntityTime -> YxQF:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleEntityTime$1 -> YxQF$1:
    react.sampler.SampleEntityTime this$0 -> dFYU
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleEntityTimeLock -> FyKW:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleEntityTimeLock$1 -> FyKW$1:
    react.sampler.SampleEntityTimeLock this$0 -> jHJL
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleExplosionTime -> JkgH:
    react.graph.IFormatter formatter -> Eeis
    17:27:void <init>() -> <init>
    32:38:void construct() -> uWSi
    43:44:void sample() -> jhVT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleExplosionTime$1 -> JkgH$1:
    react.sampler.SampleExplosionTime this$0 -> EndM
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> gVXt
react.sampler.SampleFluidPerSecond -> DXtA:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleFluidPerSecond$1 -> DXtA$1:
    react.sampler.SampleFluidPerSecond this$0 -> oVwp
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleFluidPerTick -> fSdc:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    46:53:void sample() -> jhVT
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleFluidPerTick$1 -> fSdc$1:
    react.sampler.SampleFluidPerTick this$0 -> qTmk
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleFluidTickTime -> eHPy:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleFluidTickTime$1 -> eHPy$1:
    react.sampler.SampleFluidTickTime this$0 -> Fhuk
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleFluidTickUtilization -> wTuI:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    46:53:void sample() -> jhVT
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleFluidTickUtilization$1 -> wTuI$1:
    react.sampler.SampleFluidTickUtilization this$0 -> lhBo
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleHopperPerSecond -> oVOb:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleHopperPerSecond$1 -> oVOb$1:
    react.sampler.SampleHopperPerSecond this$0 -> pbli
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleHopperPerTick -> eirt:
    react.graph.IFormatter formatter -> Eeis
    18:29:void <init>() -> <init>
    34:40:void construct() -> uWSi
    47:54:void sample() -> jhVT
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleHopperPerTick$1 -> eirt$1:
    react.sampler.SampleHopperPerTick this$0 -> woqb
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleHopperTickTime -> rghm:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleHopperTickTime$1 -> rghm$1:
    react.sampler.SampleHopperTickTime this$0 -> SMWc
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleHopperTickUtilization -> YpCf:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    46:53:void sample() -> jhVT
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleHopperTickUtilization$1 -> YpCf$1:
    react.sampler.SampleHopperTickUtilization this$0 -> huGm
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleMemoryAllocated -> psEB:
    react.graph.IFormatter formatter -> Eeis
    17:27:void <init>() -> <init>
    32:38:void construct() -> uWSi
    43:44:void sample() -> jhVT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleMemoryAllocated$1 -> psEB$1:
    react.sampler.SampleMemoryAllocated this$0 -> cTVP
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> gVXt
react.sampler.SampleMemoryAllocationPerSecond -> XtpQ:
    react.graph.IFormatter formatter -> Eeis
    17:27:void <init>() -> <init>
    32:38:void construct() -> uWSi
    43:44:void sample() -> jhVT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleMemoryAllocationPerSecond$1 -> XtpQ$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> HfjQ
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> gVXt
react.sampler.SampleMemoryFree -> hPxw:
    react.graph.IFormatter formatter -> Eeis
    17:27:void <init>() -> <init>
    32:38:void construct() -> uWSi
    43:44:void sample() -> jhVT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleMemoryFree$1 -> hPxw$1:
    react.sampler.SampleMemoryFree this$0 -> RSFT
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> gVXt
react.sampler.SampleMemoryMax -> oDmC:
    react.graph.IFormatter formatter -> Eeis
    17:27:void <init>() -> <init>
    32:38:void construct() -> uWSi
    43:44:void sample() -> jhVT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleMemoryMax$1 -> oDmC$1:
    react.sampler.SampleMemoryMax this$0 -> wpQv
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> gVXt
react.sampler.SampleMemoryUse -> FxmT:
    react.graph.IFormatter formatter -> Eeis
    17:27:void <init>() -> <init>
    32:38:void construct() -> uWSi
    43:44:void sample() -> jhVT
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleMemoryUse$1 -> FxmT$1:
    react.sampler.SampleMemoryUse this$0 -> gPAq
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> gVXt
react.sampler.SampleRedstonePerSecond -> XSNC:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleRedstonePerSecond$1 -> XSNC$1:
    react.sampler.SampleRedstonePerSecond this$0 -> SUgs
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleRedstonePerTick -> bGYJ:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    46:53:void sample() -> jhVT
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleRedstonePerTick$1 -> bGYJ$1:
    react.sampler.SampleRedstonePerTick this$0 -> RthQ
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleRedstoneTickTime -> bqjj:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleRedstoneTickTime$1 -> bqjj$1:
    react.sampler.SampleRedstoneTickTime this$0 -> NFYL
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleRedstoneTickUtilization -> VMFX:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    46:53:void sample() -> jhVT
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleRedstoneTickUtilization$1 -> VMFX$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> skuB
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleSyncQueue -> mrJv:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleSyncQueue$1 -> mrJv$1:
    react.sampler.SampleSyncQueue this$0 -> klnP
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleTickTime -> INpU:
    react.graph.IFormatter formatter -> Eeis
    react.gmath.Average aa -> oqJn
    17:29:void <init>() -> <init>
    34:40:void construct() -> uWSi
    45:47:void sample() -> jhVT
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleTickTime$1 -> INpU$1:
    react.sampler.SampleTickTime this$0 -> pHyG
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> gVXt
react.sampler.SampleTickUtilization -> DHQw:
    react.graph.IFormatter formatter -> Eeis
    react.gmath.Average aa -> oqJn
    17:29:void <init>() -> <init>
    34:40:void construct() -> uWSi
    45:47:void sample() -> jhVT
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleTickUtilization$1 -> DHQw$1:
    react.sampler.SampleTickUtilization this$0 -> FFrF
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> gVXt
react.sampler.SampleTicksPerSecond -> AOjm:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleTicksPerSecond$1 -> AOjm$1:
    react.sampler.SampleTicksPerSecond this$0 -> WrvY
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleTileDroppedTicks -> AqnK:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleTileDroppedTicks$1 -> AqnK$1:
    react.sampler.SampleTileDroppedTicks this$0 -> HEHe
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleTileTime -> TXBR:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleTileTime$1 -> TXBR$1:
    react.sampler.SampleTileTime this$0 -> pHxh
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.sampler.SampleTileTimeLock -> Wqkk:
    react.graph.IFormatter formatter -> Eeis
    18:28:void <init>() -> <init>
    33:39:void construct() -> uWSi
    44:45:void sample() -> jhVT
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dUat
react.sampler.SampleTileTimeLock$1 -> Wqkk$1:
    react.sampler.SampleTileTimeLock this$0 -> tMXv
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> gVXt
react.security.checkpoints.SecurityCheckpointAlpha -> rxiO:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> BJav
    78:148:void doScan(java.lang.Runnable) -> KCgV
    152:181:byte[] readResource(java.io.File,java.lang.String) -> FNJd
    186:217:react.glang.GMap scan(java.io.File) -> KCgV
    150:150:byte[] access$0(java.io.File,java.lang.String) -> KCgV
react.security.checkpoints.SecurityCheckpointAlpha$1 -> rxiO$1:
    java.lang.Runnable val$r -> jioB
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> rxiO$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> TsAe
    java.lang.Runnable val$r -> jioB
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> TNpR:
    java.lang.String ip -> klqd
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> eYQo:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> eYQo$1:
    react.security.locks.SecurityLockAlpha this$0 -> lpUf
    java.io.File val$f -> tEHt
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> Qgik:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> MuBA
react.slate.PhantomSlate -> SnQO:
    react.glang.GList lines -> KEbq
    react.glang.GList viewers -> hAfL
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> QhwR
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> xqnP
    44:45:void set(int,java.lang.String) -> KCgV
    50:51:void setLines(react.glang.GList) -> ESXa
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> ArMF
    91:95:void addViewer(org.bukkit.entity.Player) -> MuBA
    100:102:void removeViewer(org.bukkit.entity.Player) -> vQax
    107:107:react.glang.GList getViewers() -> DsKD
    113:113:boolean isViewing(org.bukkit.entity.Player) -> mWiV
    119:120:void addLine(java.lang.String) -> qBWD
    125:126:void clearLines() -> fdiP
react.slate.Slate -> TNpN:
    void build() -> ArMF
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> xqnP
    void set(int,java.lang.String) -> KCgV
    void setLines(react.glang.GList) -> ESXa
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> MuBA
    void addLine(java.lang.String) -> qBWD
    void clearLines() -> fdiP
    void removeViewer(org.bukkit.entity.Player) -> vQax
    react.glang.GList getViewers() -> DsKD
    boolean isViewing(org.bukkit.entity.Player) -> mWiV
    void update() -> update
react.slate.SlateUtil -> SfCW:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> rhLo
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> MAnc
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> FNJd
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> KCgV
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> kjvN
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> FNJd
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> FNJd
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> KCgV
    186:196:java.lang.String convertJSON(java.lang.String) -> dVCT
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> KCgV
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> FNJd
react.surge.Main -> rgjl:
    react.glang.GList plugins -> Dbqk
    react.glang.GMap pluginInstances -> lyGC
    react.glang.GList controllerSet -> KMtP
    react.glang.GMap anchors -> Rtik
    react.glang.GList classes -> LkHi
    java.lang.reflect.Field nsField -> qnbV
    java.lang.reflect.Field thField -> HUjd
    react.glang.GList tracks -> etQK
    long nsf -> Obok
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> YDpl
    90:109:long getNanoSync() -> YgTk
    114:115:void requestResetNanos() -> DXwR
    119:127:void requestReload() -> ydOl
    131:134:void requestReload(java.lang.Runnable) -> kjvN
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> FNJd
    201:218:void onStop() -> xGYk
    224:224:void onPostInit() -> tUAN
    230:230:void onPreInit() -> jORu
    234:245:void shutDownAmps() -> Cofs
    249:458:void initializeAmps() -> GkSN
    463:504:void doScan() -> vtXb
    508:530:void scanForPoolDefiners() -> WaRR
    534:550:void scanForRawEvents() -> DHYX
    554:570:void scanForDynamicTrack() -> XtvG
    574:595:void scanForAmps() -> SCcb
    600:611:void onTick() -> PJmy
react.surge.Main$1 -> rgjl$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> opCy:
    react.surge.control.AmpedPlugin plugin -> iLxP
    boolean connected -> connected
    int masterTask -> JTBF
    17:21:void <init>(react.surge.control.AmpedPlugin) -> <init>
    25:25:react.surge.control.AmpedPlugin getPluginInstance() -> eYYK
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> nBQU
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> FNJd
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> FNJd
    113:114:void stopTask(int) -> oMRP
    57:57:void access$0(react.surge.PluginAmp) -> FNJd
react.surge.PluginAmp$1 -> opCy$1:
    react.surge.PluginAmp this$0 -> fUPd
    1:37:void <init>(react.surge.PluginAmp) -> <init>
    42:44:void run() -> run
react.surge.PluginAmp$2 -> opCy$2:
    react.surge.PluginAmp this$0 -> fUPd
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:53:void run() -> run
react.surge.Surge -> EKXV:
    react.surge.PluginAmp amp -> vmPt
    react.glang.GList tickComponents -> mPsS
    react.glang.GList atickComponents -> AjjO
    react.surge.sched.TaskManager taskmgr -> yCTs
    react.surge.hotload.HotloadManager hotloadmgr -> bYfK
    java.lang.Thread mainThread -> nLFh
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> FNJd
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> jhVT
    44:44:java.io.File folder() -> sjqs
    49:51:java.io.File getPluginJarFile() -> sYqD
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> wmxT
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> MJcO
    74:74:react.glang.GList getTickComponents() -> JJJw
    79:79:react.glang.GList getAsyncTickComponents() -> Qgpq
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> FNJd
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> KCgV
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> FNJd
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> tCaV
    126:126:boolean hasAmp() -> qTKO
    131:131:react.surge.PluginAmp getAmp() -> PBjn
    136:136:react.surge.sched.TaskManager getTaskManager() -> Rsdv
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> dpIT
react.surge.cluster.Cluster -> tfBC:
    react.surge.cluster.ClusterType type -> Endp
    java.lang.Object t -> RklM
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> rElE
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> ECHQ:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> dUqF:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> jWbn:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> SvdP:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> bqma:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> yRmI:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> TiGI:
    react.surge.cluster.ClusterType INT -> JJpG
    react.surge.cluster.ClusterType BOOLEAN -> SVJw
    react.surge.cluster.ClusterType STRING -> QWuK
    react.surge.cluster.ClusterType STRING_LIST -> Pvti
    react.surge.cluster.ClusterType DOUBLE -> DlBw
    react.surge.cluster.ClusterType LONG -> pQks
    react.surge.cluster.ClusterType[] ENUM$VALUES -> rqeQ
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> rhJy:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> wFDK
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> FNJd
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> FNJd
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> PCKu
react.surge.cluster.ConfigurationDataOutput -> fmYX:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> KCgV
react.surge.cluster.DataCluster -> wfYW:
    react.glang.GMap clusters -> WbYy
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> TWhb
    29:33:void fromJson(react.json.JSONObject) -> afJO
    37:44:react.json.JSONObject toJson() -> Dakl
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> bPOt
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> FNJd
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> uWSi
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> gVYg
    194:195:void set(java.lang.String,int) -> afJO
    199:200:void set(java.lang.String,boolean) -> kjvN
    204:205:void set(java.lang.String,double) -> kjvN
    209:210:void set(java.lang.String,long) -> kjvN
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> FNJd
react.surge.cluster.ICluster -> aCwF:
    react.surge.cluster.ClusterType getType() -> rElE
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> DPfW:
react.surge.cluster.IDataInput -> UJFi:
    react.surge.cluster.DataCluster read(java.io.File) -> kjvN
react.surge.cluster.IDataOutput -> SKop:
    void write(react.surge.cluster.DataCluster,java.io.File) -> FNJd
react.surge.cluster.Key -> uXBU:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> pGqJ:
    int value() -> value
react.surge.cluster.KeyStore -> wDTy:
react.surge.cluster.ReflectedConfigurationException -> dNAB:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> UtXg:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> kjvN
react.surge.cluster.YamlDataOutput -> xqkq:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> FNJd
react.surge.collection.GSound -> fJsv:
    java.lang.String sound -> WQYI
    org.bukkit.Sound iSound -> QhyE
    java.lang.Float volume -> UmUk
    java.lang.Float pitch -> JTEE
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> FMiI
    61:72:void play(org.bukkit.Location) -> afJO
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> FNJd
    93:93:java.lang.String getSound() -> sjqP
    98:99:void setSound(java.lang.String) -> oMRP
    103:103:org.bukkit.Sound getiSound() -> tUCW
    108:109:void setiSound(org.bukkit.Sound) -> FNJd
    113:113:java.lang.Float getVolume() -> UAWo
    118:119:void setVolume(java.lang.Float) -> FNJd
    123:123:java.lang.Float getPitch() -> uWfB
    128:129:void setPitch(java.lang.Float) -> KCgV
react.surge.control.AmpedPlugin -> psGC:
    react.glang.GList controllers -> kudt
    react.gconcurrent.ParallelPoolManager pp -> hJYP
    react.surge.server.CoreTickThread ctt -> UmUb
    24:50:void <init>() -> <init>
    void doScan() -> vtXb
    long getNanoSync() -> YgTk
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:97:void onDisable() -> onDisable
    102:102:react.glang.GList getControllers() -> oxXM
    108:109:void registerController(react.surge.control.IController) -> FNJd
    114:125:void onTick() -> PJmy
    130:130:java.lang.String getTickName() -> APEQ
    136:136:react.gconcurrent.ParallelPoolManager getThreadPool() -> LjBr
    142:257:void destroyOldThreads() -> qeKp
    void onControllerRegistry() -> YDpl
    void onStart(react.surge.util.Protocol) -> FNJd
    void onStop() -> xGYk
    void onPostInit() -> tUAN
    void onPreInit() -> jORu
react.surge.control.AmpedPlugin$1 -> psGC$1:
    react.surge.control.AmpedPlugin this$0 -> bQWk
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> bObJ
react.surge.control.AmpedPlugin$2 -> psGC$2:
    react.surge.control.AmpedPlugin this$0 -> bQWk
    1:155:void <init>(react.surge.control.AmpedPlugin) -> <init>
    160:250:void run() -> run
react.surge.control.Control -> oEOQ:
react.surge.control.Controller -> yRlF:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> UASr:
react.surge.control.Enable -> sPyt:
react.surge.control.IController -> nBJw:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> MAmJ:
react.surge.control.Plugin -> cdPH:
react.surge.control.SurgePlugin -> dfrH:
    void onStart(react.surge.util.Protocol) -> FNJd
    void onStop() -> xGYk
    void onPostInit() -> tUAN
    void onPreInit() -> jORu
    void onControllerRegistry() -> YDpl
    void registerController(react.surge.control.IController) -> FNJd
    react.glang.GList getControllers() -> oxXM
    react.gconcurrent.ParallelPoolManager getThreadPool() -> LjBr
react.surge.hotload.HotloadManager -> NEQX:
    react.glang.GMap filemods -> FPIO
    react.glang.GMap filesizes -> mbYE
    react.glang.GMap fileacts -> ayJL
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> FNJd
    35:38:void untrack(java.io.File) -> wmxT
    42:45:void untrackall() -> nKAb
    50:86:void onTick() -> PJmy
    91:91:java.lang.String getTickName() -> APEQ
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> FNJd
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> KCgV
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> kjvN
react.surge.hotload.HotloadManager$1 -> NEQX$1:
    react.surge.hotload.HotloadManager this$0 -> wyGt
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> CERR:
    boolean init -> xawN
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> qLar
    java.lang.Class IChatBaseComponent -> fDSK
    java.lang.Class ChatSerializer -> QrLF
    java.lang.Class PacketPlayOutPlayerInfo -> whFJ
    java.lang.Class PlayerInfoData -> gOdp
    java.lang.Class EnumPlayerInfoAction -> YyaP
    java.lang.Class GameProfile -> HxPg
    java.lang.Class EnumGamemode -> QFtb
    java.lang.Class TileEntitySkull -> WQWl
    java.lang.Class LoadingCache -> jYOX
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> OYXS:
    react.surge.nms.NMSX bountifulAPI -> vJoW
    boolean useOldMethods -> SUlV
    java.lang.String nmsver -> cmlB
    java.lang.Object eTimes -> TjRR
    java.lang.Object eTitle -> AkLo
    java.lang.Object eSubtitle -> iEIp
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> FNJd
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> ooSy
    75:89:java.lang.Class getCBClass(java.lang.String) -> XcbR
    96:104:java.lang.Object serializeChat(java.lang.String) -> jpfB
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> KCgV
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> FNJd
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> ylbe
    151:151:java.lang.String craftPackage() -> nAnw
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> FNJd
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> FNJd
    197:207:java.lang.Class getNMSClass(java.lang.String) -> BJPT
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> FNJd
    279:280:void clearTitle(org.bukkit.entity.Player) -> LGIw
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> KCgV
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> FNJd
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> FNJd
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> mFjX
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> gVYg
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> uWPs
    434:447:int ping(org.bukkit.entity.Player) -> Etxs
react.surge.nms.NMSX$1 -> OYXS$1:
    org.bukkit.entity.Player val$player -> mbNr
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> OYXS$2:
    org.bukkit.entity.Player val$player -> mbNr
    java.lang.String val$message -> Hwov
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> fvMM:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> MRrX
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> FNJd
    68:82:void clearTitle(org.bukkit.entity.Player) -> LGIw
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> FNJd
react.surge.nms.PacketUtil$V -> fvMM$FNJd:
    react.surge.nms.PacketUtil$V R17 -> JvFu
    react.surge.nms.PacketUtil$V R18 -> VyIY
    react.surge.nms.PacketUtil$V R19 -> OtUN
    react.surge.nms.PacketUtil$V R111 -> aWEa
    react.surge.nms.PacketUtil$V R110 -> iENB
    react.surge.nms.PacketUtil$V R112 -> SUnr
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> dhbL
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> tLPl:
    java.lang.String title -> title
    java.lang.String subTitle -> pstb
    java.lang.String action -> action
    java.lang.Integer fadeIn -> NGAK
    java.lang.Integer fadeOut -> IXsS
    java.lang.Integer stayTime -> qUUV
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> erUL
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> QVnR
    79:80:void setSubTitle(java.lang.String) -> IVub
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> eYWc
    99:100:void setFadeIn(java.lang.Integer) -> kjvN
    104:104:java.lang.Integer getFadeOut() -> YfwD
    109:110:void setFadeOut(java.lang.Integer) -> wmxT
    114:114:java.lang.Integer getStayTime() -> hjpq
    119:120:void setStayTime(java.lang.Integer) -> afJO
react.surge.nms.VersionBukkit -> ndQu:
    react.surge.nms.VersionBukkit VU -> CWaY
    react.surge.nms.VersionBukkit V7 -> Uuhc
    react.surge.nms.VersionBukkit V8 -> kCCM
    react.surge.nms.VersionBukkit V9 -> GAlK
    react.surge.nms.VersionBukkit V11 -> lWGg
    react.surge.nms.VersionBukkit V111 -> IPcU
    react.surge.nms.VersionBukkit V112 -> CqUc
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> jbCW
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> OsKx
    27:32:boolean uc() -> FWOu
    37:67:react.surge.nms.VersionBukkit get() -> Qgoi
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> vJFn:
    void burst(java.lang.Object) -> MuBA
    void setTimeLock(double) -> mWiV
    double getEstimatedTimeUse() -> ebIe
    int flush() -> eriu
    int flush(react.gbench.Profiler) -> FNJd
    void queue(java.lang.Object) -> vQax
    void queue(java.util.List) -> kjvN
    void queue(java.lang.Object[]) -> FNJd
react.surge.sched.ICancellable -> dUre:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> inTj:
    void onTick() -> PJmy
    java.lang.String getTickName() -> APEQ
react.surge.sched.ITask -> XdRk:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> FySV
    java.lang.String getName() -> getName
    double getComputeTime() -> upvg
    double getTotalComputeTime() -> jWec
    double getActiveTime() -> FWPY
    boolean hasCompleted() -> GRBq
react.surge.sched.Task -> hkQj:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> DAQt
    double computeTime -> Vxir
    double totalComputeTime -> Iabu
    double activeTime -> tfmu
    boolean completed -> completed
    react.gbench.Profiler profiler -> uXpG
    react.gbench.Profiler activeProfiler -> qLdB
    int ticks -> TXpu
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> wmxT
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> FySV
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> upvg
    150:150:boolean hasCompleted() -> GRBq
    156:156:double getTotalComputeTime() -> jWec
    162:162:double getActiveTime() -> FWPY
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> FNJd
    15:15:void access$1(react.surge.sched.Task,boolean) -> FNJd
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> KCgV
    14:14:void access$3(react.surge.sched.Task,double) -> FNJd
    12:12:void access$4(react.surge.sched.Task,double) -> KCgV
    14:14:double access$5(react.surge.sched.Task) -> kjvN
    13:13:void access$6(react.surge.sched.Task,double) -> kjvN
    13:13:double access$7(react.surge.sched.Task) -> wmxT
    12:12:double access$8(react.surge.sched.Task) -> afJO
react.surge.sched.Task$1 -> hkQj$1:
    react.surge.sched.Task this$0 -> ECuI
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> hkQj$2:
    react.surge.sched.Task this$0 -> ECuI
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> hkQj$3:
    react.surge.sched.Task this$0 -> ECuI
    int val$total -> AkNq
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> XmCr:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> DAQt
    double computeTime -> Vxir
    double totalComputeTime -> Iabu
    double activeTime -> tfmu
    boolean completed -> completed
    react.gbench.Profiler profiler -> uXpG
    react.gbench.Profiler activeProfiler -> qLdB
    int ticks -> TXpu
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> wmxT
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> FySV
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> upvg
    101:101:boolean hasCompleted() -> GRBq
    107:107:double getTotalComputeTime() -> jWec
    113:113:double getActiveTime() -> FWPY
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> FNJd
    12:12:void access$1(react.surge.sched.TaskLater,double) -> FNJd
    13:13:double access$2(react.surge.sched.TaskLater) -> KCgV
    12:12:double access$3(react.surge.sched.TaskLater) -> kjvN
    13:13:void access$4(react.surge.sched.TaskLater,double) -> KCgV
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> wmxT
    14:14:double access$6(react.surge.sched.TaskLater) -> afJO
    14:14:void access$7(react.surge.sched.TaskLater,double) -> kjvN
react.surge.sched.TaskLater$1 -> XmCr$1:
    react.surge.sched.TaskLater this$0 -> CWax
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> WjAg:
    react.glang.GList tasks -> CEds
    react.glang.GMap taskProfiles -> JeGb
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> FNJd
    25:35:void onTick() -> PJmy
    39:40:void putFinishingTask(react.surge.sched.ITask) -> KCgV
    44:53:void putTask(react.surge.sched.ITask) -> kjvN
    58:58:java.lang.String getTickName() -> APEQ
    63:63:react.glang.GList getTasks() -> BRsg
    68:68:react.glang.GMap getTaskProfiles() -> jFdU
react.surge.sched.TaskProfile -> SUCw:
    double activeTime -> tfmu
    double computeTickTime -> wpXN
    double computeTime -> Vxir
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> FWPY
    23:24:void setActiveTime(double) -> FMiI
    28:28:double getComputeTickTime() -> rVlQ
    33:34:void setComputeTickTime(double) -> LGIw
    38:38:double getComputeTime() -> upvg
    43:44:void setComputeTime(double) -> Etxs
react.surge.server.AsyncTick -> BKBF:
react.surge.server.CPS -> XSQp:
    react.glang.GMap keys -> CqUC
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> CMSM
    46:99:void scan() -> RbcN
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> kjvN
react.surge.server.CoreTickThread -> ggmQ:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> UlLF:
    long memoryFree -> eAPf
    long memoryUsed -> NhcB
    long memoryMax -> fnfl
    long lastMemoryUsed -> bkKs
    long memoryUsedAfterGC -> rGXw
    long allocated -> mYko
    long collected -> VWKU
    long collections -> ymov
    long sms -> NORq
    long memoryAllocatedPerTick -> ywCB
    long memoryCollectedPerTick -> eJDg
    long memoryFullyAllocatedPerTick -> PDWe
    long mah -> hdPL
    long mahs -> hBMK
    22:39:void <init>() -> <init>
    void onAllocationSet() -> qShp
    46:98:void run() -> run
    102:102:long getMemoryFree() -> LrSh
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> aLnR
    117:117:long getLastMemoryUsed() -> NpKo
    122:122:long getMemoryUsedAfterGC() -> STgG
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> vklu
    137:137:long getCollections() -> PeQH
    142:142:long getSms() -> HKwA
    147:147:long getMemoryAllocatedPerTick() -> ogXx
    152:152:long getMemoryCollectedPerTick() -> skUU
    157:157:long getMemoryFullyAllocatedPerTick() -> XKDx
    162:162:long getMah() -> Xlfy
    167:167:long getMahs() -> rhRV
react.surge.server.SuperSampler -> ydQK:
    react.gmath.Average ticksPerSecondL -> ekgG
    react.gmath.Average tickTimeL -> xYkh
    react.gmath.Average mahL -> JvKh
    double ticksPerSecond -> qUCW
    double ticksPerSecondRaw -> rGYb
    double tickTime -> Ljof
    double tickTimeRaw -> SVSD
    boolean running -> running
    boolean frozen -> vmXE
    double tickUtilizationRaw -> hBLU
    double tickUtilization -> eQtb
    double leftoverTickTime -> PLhi
    long memoryUse -> UBfW
    long memoryAllocated -> VglM
    long memoryCollected -> TsHd
    long mahs -> hBMK
    int totalChunks -> XmqF
    int totalEntities -> suPC
    int totalDrops -> DAVQ
    int totalTiles -> BfCw
    int totalLiving -> qLfG
    int chunksLoaded -> tfoy
    int chunksUnloaded -> iDnN
    react.surge.server.WorldMonitor worldMonitor -> BKox
    react.surge.server.TPSMonitor tpsMonitor -> PoJv
    react.surge.server.MemoryMonitor memoryMonitor -> wNWF
    java.lang.StackTraceElement[] lockStack -> cmpe
    react.glang.GMap spikes -> AiyI
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> PJmy
    154:154:java.lang.String getTickName() -> APEQ
    159:159:react.gmath.Average getTicksPerSecondL() -> eajn
    164:164:double getTicksPerSecond() -> BuLc
    169:169:double getTicksPerSecondRaw() -> Gsgm
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> fBkn
    184:184:react.gmath.Average getTickTimeL() -> vAYU
    189:189:double getTickTime() -> ealN
    194:194:double getTickTimeRaw() -> ETOt
    199:199:double getTickUtilizationRaw() -> yRsI
    204:204:double getTickUtilization() -> INyn
    209:209:double getLeftoverTickTime() -> xYBO
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> iDDs
    219:219:long getMemoryUse() -> twIR
    224:224:long getMemoryAllocated() -> hQcE
    229:229:long getMemoryCollected() -> tKtF
    234:234:react.gmath.Average getMahL() -> HLXP
    239:239:long getMahs() -> rhRV
    244:244:int getTotalChunks() -> LjFc
    249:249:int getTotalEntities() -> pPiT
    254:254:int getTotalDrops() -> GcHJ
    259:259:int getTotalTiles() -> BBVU
    264:264:int getTotalLiving() -> bibe
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> tDDF
    274:274:int getChunksLoaded() -> LYCa
    279:279:int getChunksUnloaded() -> AaVK
    284:285:void setTicksPerSecondL(react.gmath.Average) -> FNJd
    289:290:void setTickTimeL(react.gmath.Average) -> KCgV
    294:295:void setMahL(react.gmath.Average) -> kjvN
    299:300:void setTicksPerSecond(double) -> JHtm
    304:305:void setTicksPerSecondRaw(double) -> erUL
    309:310:void setTickTime(double) -> RQKu
    314:315:void setTickTimeRaw(double) -> IhUC
    319:320:void setRunning(boolean) -> pXbi
    324:325:void setTickUtilizationRaw(double) -> wvgn
    329:330:void setTickUtilization(double) -> IVrU
    334:335:void setLeftoverTickTime(double) -> IFQj
    339:340:void setMemoryUse(long) -> mWiV
    344:345:void setMemoryAllocated(long) -> FMiI
    349:350:void setMemoryCollected(long) -> LGIw
    354:355:void setMahs(long) -> Etxs
    359:360:void setTotalChunks(int) -> ooSy
    364:365:void setTotalEntities(int) -> XcbR
    369:370:void setTotalDrops(int) -> jpfB
    374:375:void setTotalTiles(int) -> BJPT
    379:380:void setTotalLiving(int) -> mFjX
    384:385:void setChunksLoaded(int) -> IVub
    389:390:void setChunksUnloaded(int) -> CMSM
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> FNJd
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> FNJd
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> FNJd
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> Aquy
    419:419:react.glang.GMap getSpikes() -> bqcv
    31:31:void access$0(react.surge.server.SuperSampler,int) -> FNJd
    33:33:void access$1(react.surge.server.SuperSampler,int) -> KCgV
    34:34:void access$2(react.surge.server.SuperSampler,int) -> kjvN
    32:32:void access$3(react.surge.server.SuperSampler,int) -> wmxT
    35:35:void access$4(react.surge.server.SuperSampler,int) -> afJO
    36:36:void access$5(react.surge.server.SuperSampler,int) -> gVYg
    37:37:void access$6(react.surge.server.SuperSampler,int) -> oLoP
    19:19:void access$7(react.surge.server.SuperSampler,double) -> FNJd
    21:21:void access$8(react.surge.server.SuperSampler,double) -> KCgV
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> FNJd
    19:19:double access$10(react.surge.server.SuperSampler) -> KCgV
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> kjvN
    21:21:double access$12(react.surge.server.SuperSampler) -> wmxT
    18:18:void access$13(react.surge.server.SuperSampler,double) -> kjvN
    20:20:void access$14(react.surge.server.SuperSampler,double) -> wmxT
    24:24:void access$15(react.surge.server.SuperSampler,double) -> afJO
    20:20:double access$16(react.surge.server.SuperSampler) -> afJO
    25:25:void access$17(react.surge.server.SuperSampler,double) -> gVYg
    25:25:double access$18(react.surge.server.SuperSampler) -> gVYg
    26:26:void access$19(react.surge.server.SuperSampler,double) -> oLoP
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> FNJd
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> oLoP
    27:27:void access$22(react.surge.server.SuperSampler,long) -> FNJd
    28:28:void access$23(react.surge.server.SuperSampler,long) -> KCgV
    29:29:void access$24(react.surge.server.SuperSampler,long) -> kjvN
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> qcvH
    30:30:void access$26(react.surge.server.SuperSampler,long) -> wmxT
react.surge.server.SuperSampler$1 -> ydQK$1:
    react.surge.server.SuperSampler this$0 -> nnOu
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> FNJd
react.surge.server.SuperSampler$2 -> ydQK$2:
    react.surge.server.SuperSampler this$0 -> nnOu
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> eHXW
    106:107:void onSpike() -> ySRn
react.surge.server.SuperSampler$3 -> ydQK$3:
    react.surge.server.SuperSampler this$0 -> nnOu
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> qShp
react.surge.server.TPSMonitor -> FqBV:
    double tickTimeMS -> NOSD
    double rawTicksPerSecond -> KWKS
    react.gbench.Profiler tickProfiler -> NNrE
    react.gbench.Profiler tickTimeProfiler -> YXCb
    boolean ticked -> PMIH
    java.lang.Thread$State lastState -> qoHx
    double actualTickTimeMS -> wpYj
    double ltt -> IPcx
    long lastTick -> uiXv
    boolean frozen -> vmXE
    java.lang.StackTraceElement[] lockedStack -> BwDo
    double lmsx -> xIJA
    23:40:void <init>() -> <init>
    void onTicked() -> eHXW
    void onSpike() -> ySRn
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> FNJd
    160:160:double getTickTimeMS() -> cctr
    165:165:double getRawTicksPerSecond() -> CDwe
    170:170:react.gbench.Profiler getTickProfiler() -> Gbdy
    175:175:boolean isTicked() -> prkN
    180:181:void markTick() -> PvQb
    185:185:react.gbench.Profiler getTickTimeProfiler() -> XSTt
    190:190:java.lang.Thread$State getLastState() -> FhTD
    195:195:double getActualTickTimeMS() -> vbyo
    200:200:double getLtt() -> loPR
    205:205:long getLastTick() -> jqKN
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> cleu
react.surge.server.WorldMonitor -> rxnS:
    boolean chunksChanged -> twtg
    boolean dropChanged -> lFKD
    boolean tileChanged -> RtsW
    boolean livingChanged -> SUsU
    boolean totalChanged -> nUAp
    boolean updated -> ebwb
    int totalChunks -> XmqF
    int totalDrops -> DAVQ
    int totalTiles -> BfCw
    int totalLiving -> qLfG
    int totalEntities -> suPC
    int chunksLoaded -> tfoy
    int chunksUnloaded -> iDnN
    long ms -> sjqs
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> FNJd
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> KCgV
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> FNJd
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> FNJd
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> FNJd
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> FNJd
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> FNJd
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> FNJd
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> FNJd
    130:131:void doUpdate() -> iDCq
    135:186:void sample() -> jhVT
    190:196:void sampleTotalCount() -> cdVH
    200:206:void sampleLivingCount() -> iTdh
    210:219:void sampleTileCount() -> CUxg
    223:229:void sampleDropCount() -> HChM
    233:239:void sampleChunkCount() -> gpeP
react.surge.text.PhantomSpinner -> BJav:
    react.surge.text.ProgressSpinner s -> txVQ
    react.surge.text.ProgressSpinner c -> RBPO
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> xqnP:
    java.lang.String[] chars -> slbH
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> oFbc
    react.surge.text.ProgressSpinner NETWORK -> xjno
    react.surge.text.ProgressSpinner CIRCLES -> UulP
    react.surge.text.ProgressSpinner RANDOMS -> XKpa
    react.surge.text.ProgressSpinner MERGERS -> ELkT
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> LaVb
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> DsKD:
    int value() -> value
react.surge.util.Area -> fdiP:
    org.bukkit.Location location -> LHne
    java.lang.Double radius -> jiux
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> FNJd
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> PeRj
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> gVYg
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> oLoP
    109:109:boolean isWithin(org.bukkit.Location) -> qcvH
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> wmxT
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> FNJd
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> anri
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> mqvQ
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> uWPs
    257:257:java.lang.Double getRadius() -> dokc
    268:269:void setRadius(java.lang.Double) -> kjvN
    278:283:org.bukkit.Location random() -> EnEK
react.surge.util.Axis -> rhLo:
    react.surge.util.Axis X -> vmYc
    react.surge.util.Axis Y -> wEgy
    react.surge.util.Axis Z -> iUqk
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> GKAu
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> PvUE
    29:29:org.bukkit.util.Vector negative() -> CNJm
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> MAnc:
    react.surge.util.BlastResistance BARRIER -> rrNv
    react.surge.util.BlastResistance BEDROCK -> vKWJ
    react.surge.util.BlastResistance COMMAND -> GSRe
    react.surge.util.BlastResistance ENDER_PORTAL -> GSSF
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> aFIq
    react.surge.util.BlastResistance ANVIL -> cKnt
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> CiGd
    react.surge.util.BlastResistance OBSIDIAN -> HDqW
    react.surge.util.BlastResistance ENDER_CHEST -> KFJv
    react.surge.util.BlastResistance WATER -> jafC
    react.surge.util.BlastResistance LAVA -> JeJu
    react.surge.util.BlastResistance STATIONARY_WATER -> fCwB
    react.surge.util.BlastResistance DRAGON_EGG -> DAXO
    react.surge.util.BlastResistance ENDER_STONE -> Yyfj
    react.surge.util.BlastResistance COAL_BLOCK -> kBeO
    react.surge.util.BlastResistance DIAMOND_BLOCK -> HDrK
    react.surge.util.BlastResistance EMERALD_BLOCK -> Yygc
    react.surge.util.BlastResistance GOLD_BLOCK -> MnTr
    react.surge.util.BlastResistance IRON_BLOCK -> YXEX
    react.surge.util.BlastResistance REDSTONE_BLOCK -> foLO
    react.surge.util.BlastResistance BRICK -> hcoa
    react.surge.util.BlastResistance BRICK_STAIRS -> jady
    react.surge.util.BlastResistance HARD_CLAY -> BCdB
    react.surge.util.BlastResistance STONE -> QjBn
    react.surge.util.BlastResistance SMOOTH_BRICK -> xtCd
    react.surge.util.BlastResistance SMOOTH_STAIRS -> GtvP
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> qnnD
    react.surge.util.BlastResistance STONE_SLAB2 -> RRrS
    react.surge.util.BlastResistance IRON_DOOR -> aFMM
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> mHoO
    react.surge.util.BlastResistance IRON_TRAPDOOR -> oXGW
    react.surge.util.BlastResistance MOB_SPAWNER -> cnUo
    react.surge.util.BlastResistance WEB -> wEjw
    react.surge.util.BlastResistance DISPENSER -> SETm
    react.surge.util.BlastResistance DROPPER -> FOot
    react.surge.util.BlastResistance FURNACE -> iogB
    react.surge.util.BlastResistance BURNING_FURNACE -> rPNW
    react.surge.util.BlastResistance BEACON -> txWX
    react.surge.util.BlastResistance COAL_ORE -> kvMi
    react.surge.util.BlastResistance COCOA -> MKtG
    react.surge.util.BlastResistance DIAMOND_ORE -> iVUQ
    react.surge.util.BlastResistance EMERALD_ORE -> UdmN
    react.surge.util.BlastResistance FENCE -> LkTq
    react.surge.util.BlastResistance FENCE_GATE -> IakN
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> ymsf
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> BLTJ
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> kBga
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> cwGB
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> mjpj
    react.surge.util.BlastResistance ACACIA_FENCE -> vShj
    react.surge.util.BlastResistance BIRCH_FENCE -> THWP
    react.surge.util.BlastResistance DARK_OAK_FENCE -> VVmR
    react.surge.util.BlastResistance SPRUCE_FENCE -> LjsI
    react.surge.util.BlastResistance JUNGLE_FENCE -> kJwY
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> YXHF
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> nwFD
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> hSPk
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> BfHE
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> Okki
    react.surge.util.BlastResistance QUARTZ_STAIRS -> BwJs
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> RJco
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> bIQy
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> XnYD
    react.surge.util.BlastResistance WOOD_STAIRS -> XLUb
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> sRsS
    react.surge.util.BlastResistance ACACIA_DOOR -> GRuV
    react.surge.util.BlastResistance BIRCH_DOOR -> RKEW
    react.surge.util.BlastResistance DARK_OAK_DOOR -> JBmD
    react.surge.util.BlastResistance SPRUCE_DOOR -> qxAt
    react.surge.util.BlastResistance JUNGLE_DOOR -> AsgB
    react.surge.util.BlastResistance GOLD_ORE -> cnYK
    react.surge.util.BlastResistance HOPPER -> AREA
    react.surge.util.BlastResistance IRON_ORE -> EwdF
    react.surge.util.BlastResistance LAPIS_BLOCK -> XUHG
    react.surge.util.BlastResistance LAPIS_ORE -> vvOP
    react.surge.util.BlastResistance QUARTZ_ORE -> BnXu
    react.surge.util.BlastResistance REDSTONE_ORE -> xjsP
    react.surge.util.BlastResistance TRAP_DOOR -> raRP
    react.surge.util.BlastResistance WOOD -> wpaW
    react.surge.util.BlastResistance CHEST -> FXdK
    react.surge.util.BlastResistance TRAPPED_CHEST -> iUut
    react.surge.util.BlastResistance WORKBENCH -> qwaJ
    react.surge.util.BlastResistance CAULDRON -> kTMN
    react.surge.util.BlastResistance LOG -> tEUL
    react.surge.util.BlastResistance LOG_2 -> nUEk
    react.surge.util.BlastResistance BOOKSHELF -> MLTu
    react.surge.util.BlastResistance BANNER -> GRtO
    react.surge.util.BlastResistance STANDING_BANNER -> Bmyb
    react.surge.util.BlastResistance WALL_BANNER -> KxsN
    react.surge.util.BlastResistance JACK_O_LANTERN -> tohE
    react.surge.util.BlastResistance MELON_BLOCK -> opyS
    react.surge.util.BlastResistance SKULL -> Lbdd
    react.surge.util.BlastResistance PUMPKIN -> xkRk
    react.surge.util.BlastResistance SIGN -> BeiP
    react.surge.util.BlastResistance SIGN_POST -> RuWd
    react.surge.util.BlastResistance WALL_SIGN -> HDvR
    react.surge.util.BlastResistance QUARTZ_BLOCK -> usJu
    react.surge.util.BlastResistance NOTE_BLOCK -> WQeS
    react.surge.util.BlastResistance RED_SANDSTONE -> cTge
    react.surge.util.BlastResistance SANDSTONE -> uPkD
    react.surge.util.BlastResistance WOOL -> fVAY
    react.surge.util.BlastResistance MONSTER_EGG -> Ajwd
    react.surge.util.BlastResistance RAILS -> FHDk
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> NXLo
    react.surge.util.BlastResistance DETECTOR_RAIL -> mHro
    react.surge.util.BlastResistance POWERED_RAIL -> EEBM
    react.surge.util.BlastResistance CLAY -> Vgsf
    react.surge.util.BlastResistance DIRT -> cTfx
    react.surge.util.BlastResistance GRASS -> aqDw
    react.surge.util.BlastResistance GRAVEL -> wgrH
    react.surge.util.BlastResistance SPONGE -> AAET
    react.surge.util.BlastResistance BREWING_STAND -> vSlo
    react.surge.util.BlastResistance STONE_BUTTON -> iNHk
    react.surge.util.BlastResistance WOOD_BUTTON -> lpdK
    react.surge.util.BlastResistance CAKE_BLOCK -> KWUB
    react.surge.util.BlastResistance ICE -> ULAG
    react.surge.util.BlastResistance PACKED_ICE -> WHsu
    react.surge.util.BlastResistance LEVER -> hAtG
    react.surge.util.BlastResistance MYCEL -> rjEX
    react.surge.util.BlastResistance PISTON_BASE -> EoVJ
    react.surge.util.BlastResistance PISTON_EXTENSION -> foRY
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> kvQW
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> twyf
    react.surge.util.BlastResistance GOLD_PLATE -> Fqup
    react.surge.util.BlastResistance IRON_PLATE -> xkUa
    react.surge.util.BlastResistance STONE_PLATE -> lgrR
    react.surge.util.BlastResistance WOOD_PLATE -> yLTw
    react.surge.util.BlastResistance SAND -> oWiD
    react.surge.util.BlastResistance SOUL_SAND -> bcGE
    react.surge.util.BlastResistance CACTUS -> VOCE
    react.surge.util.BlastResistance LADDER -> wqCM
    react.surge.util.BlastResistance NETHERRACK -> grUQ
    react.surge.util.BlastResistance GLASS -> mYrk
    react.surge.util.BlastResistance THIN_GLASS -> TQLm
    react.surge.util.BlastResistance STAINED_GLASS -> Ajwt
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> KqFY
    react.surge.util.BlastResistance GLOWSTONE -> TQMJ
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> jsNT
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> xIRI
    react.surge.util.BlastResistance SEA_LANTERN -> VNct
    react.surge.util.BlastResistance BED_BLOCK -> ffcp
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> AtKt
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> wVrf
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> cTjB
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> VVtc
    react.surge.util.BlastResistance LEAVES -> plQq
    react.surge.util.BlastResistance LEAVES_2 -> LHvd
    react.surge.util.BlastResistance SNOW -> IjbL
    int br -> puCV
    react.surge.util.BlastResistance[] ENUM$VALUES -> JKao
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> LqxH
    175:190:int get(org.bukkit.Material) -> FNJd
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> YDpl:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> gVYg
react.surge.util.C -> YgTk:
    react.surge.util.C BLACK -> xsgu
    react.surge.util.C DARK_BLUE -> jQMf
    react.surge.util.C DARK_GREEN -> CGMV
    react.surge.util.C DARK_AQUA -> vvRu
    react.surge.util.C DARK_RED -> iMij
    react.surge.util.C DARK_PURPLE -> dGLb
    react.surge.util.C GOLD -> mcHV
    react.surge.util.C GRAY -> TsSS
    react.surge.util.C DARK_GRAY -> jPls
    react.surge.util.C BLUE -> lqFo
    react.surge.util.C GREEN -> gjGr
    react.surge.util.C AQUA -> UBoF
    react.surge.util.C RED -> EgFG
    react.surge.util.C LIGHT_PURPLE -> RKHO
    react.surge.util.C YELLOW -> OcaO
    react.surge.util.C WHITE -> lhTp
    react.surge.util.C MAGIC -> rYDv
    react.surge.util.C BOLD -> oFiq
    react.surge.util.C STRIKETHROUGH -> QrXi
    react.surge.util.C UNDERLINE -> ynYe
    react.surge.util.C ITALIC -> AAHM
    react.surge.util.C RESET -> iNJT
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> usRk
    char code -> fwhI
    boolean isFormat -> nwOW
    java.lang.String toString -> lFTk
    java.util.Map BY_ID -> nDKK
    java.util.Map BY_CHAR -> wEsV
    java.util.Map dyeChatMap -> BDLb
    java.util.Map chatHexMap -> IQRO
    java.util.Map dyeHexMap -> apiD
    int[] $SWITCH_TABLE$surge$util$C -> nDJo
    react.surge.util.C[] ENUM$VALUES -> VVvV
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> wgAv
    378:378:java.lang.String hex() -> BmKM
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> qcvH
    434:442:react.surge.util.C getByChar(java.lang.String) -> hsPr
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> KCgV
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> FNJd
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> KCgV
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> kjvN
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> ThVI
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> NxGA
    560:578:java.lang.String generateColorTable() -> Qxvb
    588:588:org.bukkit.ChatColor chatColor() -> wxCq
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> oLoP
    632:679:byte getItemMeta() -> oEXO
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> gEqC
react.surge.util.C$1 -> YgTk$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> YgTk$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> YgTk$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> YgTk$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> YgTk$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> YgTk$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> YgTk$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> YgTk$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> YgTk$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> YgTk$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> YgTk$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> YgTk$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> YgTk$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> YgTk$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> YgTk$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> YgTk$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> YgTk$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> YgTk$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> YgTk$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> YgTk$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> YgTk$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> YgTk$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> DXwR:
    double number -> nfMo
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> XuBA
    23:25:react.surge.util.CDou add(double) -> rVVu
    30:32:react.surge.util.CDou sub(double) -> FMhw
    37:37:double get() -> get
    42:48:void circ() -> WXcm
react.surge.util.CMD -> ydOl:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> PEEX
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> nAsP
    51:53:void execute(org.bukkit.command.CommandSender) -> kjvN
    60:77:void execute() -> execute
react.surge.util.CNum -> xGYk:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> hsPr
    23:25:react.surge.util.CNum add(int) -> ThVI
    30:32:react.surge.util.CNum sub(int) -> NxGA
    37:37:int get() -> get
    42:48:void circ() -> WXcm
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> OPUT
react.surge.util.Chunks -> tUAN:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> Hmby
    33:40:react.glang.GList getLoadedChunks() -> bqto
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> KCgV
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> FNJd
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> FNJd
    98:98:boolean unload(org.bukkit.Chunk) -> KUIt
    114:124:int unload(react.glang.GList,boolean,boolean) -> FNJd
    138:138:int unload(react.glang.GList,boolean) -> FNJd
    150:150:int unload(react.glang.GList) -> Mtam
    166:166:boolean isLoaded(java.lang.String,int,int) -> FNJd
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> KCgV
    201:205:void load(react.glang.GList) -> pXbi
react.surge.util.Cuboid -> jORu:
    java.lang.String worldName -> kLCa
    int x1 -> rqyT
    int y1 -> JnGu
    int z1 -> ffgA
    int x2 -> XwPd
    int y2 -> Kgxt
    int z2 -> EgJD
    int[] $SWITCH_TABLE$surge$util$Axis -> OIrP
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> PgGW
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> FNJd
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> kjvN
    93:93:boolean hasPlayers() -> Gbft
    98:110:react.glang.GList getPlayers() -> VURA
    115:166:react.glang.GList getEntities() -> tCdq
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> XtbU
    287:287:org.bukkit.Location getLowerNE() -> HfJw
    298:298:org.bukkit.Location getUpperSW() -> OQLy
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> RtHr
    348:348:int getSizeY() -> xidF
    358:358:int getSizeZ() -> dUwk
    368:368:int getLowerX() -> ieiJ
    378:378:int getLowerY() -> RHse
    388:388:int getLowerZ() -> GYvU
    398:398:int getUpperX() -> YDxF
    408:408:int getUpperY() -> iDFM
    418:418:int getUpperZ() -> VEAL
    428:438:org.bukkit.block.Block[] corners() -> kJLQ
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> FNJd
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> KCgV
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> kjvN
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> wmxT
    546:546:boolean contains(int,int,int) -> afJO
    558:558:boolean contains(org.bukkit.block.Block) -> oLoP
    570:570:boolean contains(org.bukkit.Location) -> XJNY
    580:580:int volume() -> rVpN
    591:601:byte averageLightLevel() -> KVCS
    612:612:react.surge.util.Cuboid contract() -> XliH
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> FNJd
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> KCgV
    708:715:boolean containsOnly(org.bukkit.Material) -> KCgV
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> FNJd
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> gVYg
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> FNJd
    786:800:java.util.List getChunks() -> QEpt
    815:819:void fill(int,byte) -> FNJd
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> LYFV
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> dfyh
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> ObOV
react.surge.util.Cuboid$1 -> jORu$1:
    react.surge.util.Cuboid this$0 -> pJPG
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> XJNY
    1:1:java.lang.Object onAdapt(java.lang.Object) -> oLoP
react.surge.util.Cuboid$CuboidDirection -> jORu$FNJd:
    react.surge.util.Cuboid$CuboidDirection North -> fnuc
    react.surge.util.Cuboid$CuboidDirection East -> Asms
    react.surge.util.Cuboid$CuboidDirection South -> Fqyt
    react.surge.util.Cuboid$CuboidDirection West -> urpq
    react.surge.util.Cuboid$CuboidDirection Up -> ELst
    react.surge.util.Cuboid$CuboidDirection Down -> cDJP
    react.surge.util.Cuboid$CuboidDirection Horizontal -> qDbL
    react.surge.util.Cuboid$CuboidDirection Vertical -> bHus
    react.surge.util.Cuboid$CuboidDirection Both -> Juuy
    react.surge.util.Cuboid$CuboidDirection Unknown -> QOwD
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> PgGW
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> cKxp
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> TrAi
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> ObOV
react.surge.util.Cuboid$CuboidIterator -> jORu$KCgV:
    org.bukkit.World w -> PMUB
    int baseX -> KFVN
    int baseY -> MTlY
    int baseZ -> eJQI
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> ORan
    int sizeY -> rOuE
    int sizeZ -> gaWf
    react.surge.util.Cuboid this$0 -> pJPG
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> Cofs:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> GkSN:
    react.glang.GList buffer -> QYHx
    boolean dbg -> LcNY
    int kf -> dhqu
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> wmxT
    41:49:void l(java.lang.Object,java.lang.String) -> KCgV
    53:54:void s(java.lang.Object,java.lang.String) -> kjvN
    58:69:void cdb() -> DbRU
    73:79:void v(java.lang.Object,java.lang.String) -> wmxT
    83:84:void w(java.lang.Object,java.lang.String) -> afJO
    88:89:void f(java.lang.Object,java.lang.String) -> gVYg
    93:106:void l(java.lang.String) -> OPUT
    110:117:void s(java.lang.String) -> XtbU
    121:135:void v(java.lang.String) -> xymk
    139:146:void w(java.lang.String) -> aDHO
    150:157:void f(java.lang.String) -> uxuB
react.surge.util.DMSRequire -> vtXb:
    react.surge.util.DMSRequirement value() -> rFRu
react.surge.util.DMSRequirement -> WaRR:
    react.surge.util.DMSRequirement SQL -> wqKP
    react.surge.util.DMSRequirement[] ENUM$VALUES -> PwkN
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> DHYX:
    react.surge.util.Depend VAULT -> yfOV
    react.surge.util.Depend FAWE -> rPYS
    react.surge.util.Depend WORLDEDIT -> ecdh
    react.surge.util.Depend PROTOLIB -> xRJU
    react.surge.util.Depend CITIZENS -> veUj
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> Okvp
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> XtvG:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> nljb
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> SCcb:
    react.surge.util.DimensionFace X -> fnxY
    react.surge.util.DimensionFace Y -> GmQf
    react.surge.util.DimensionFace Z -> tyCK
    react.surge.util.DimensionFace[] ENUM$VALUES -> DlXk
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> eYYK:
    react.surge.util.Direction U -> jbSh
    react.surge.util.Direction D -> eJTA
    react.surge.util.Direction N -> bYyn
    react.surge.util.Direction S -> jjbu
    react.surge.util.Direction E -> vTTH
    react.surge.util.Direction W -> SNOT
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> RlnT
    int[] $SWITCH_TABLE$surge$util$Direction -> lgwq
    react.surge.util.Direction[] ENUM$VALUES -> jbRp
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> GbjV
    61:61:int x() -> fdqy
    66:66:int y() -> aDae
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> vlRU
    81:81:react.glang.GList news() -> VVEL
    86:86:react.glang.GList udnews() -> fBor
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> RQKu
    115:147:react.surge.util.Direction fromByte(byte) -> qcvH
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> IWnr
react.surge.util.DynamicConfiguration -> nBQU:
react.surge.util.DynamicTracker -> sjqs:
react.surge.util.Embedded -> sYqD:
    react.glang.GList get() -> QVug
    void add(java.lang.Object) -> add
react.surge.util.FU -> MJcO:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> FNJd
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> KCgV
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> afJO
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> gVYg
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> JJJw:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> bFjM
react.surge.util.Health -> Qgpq:
    double hp -> FjLn
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> ChAR
    41:41:double getHearts() -> mXfE
    51:51:double getHalfHearts() -> iUJh
    61:61:int getFlatHalfHearts() -> iUKK
react.surge.util.IO -> tCaV:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> qTKO:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> FNJd
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> FNJd
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> FNJd
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> FNJd
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> FNJd
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> KCgV
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> kjvN
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> wmxT
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> FNJd
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> FNJd
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> FNJd
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> FNJd
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> afJO
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> gVYg
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> oLoP
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> qcvH
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> uWPs
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> FNJd
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> XJNY
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> JHtm
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> FNJd
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> FNJd
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> KCgV
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> FNJd
react.surge.util.MSound -> PBjn:
    react.surge.util.MSound AMBIENCE_CAVE -> usSs
    react.surge.util.MSound AMBIENCE_RAIN -> slmP
    react.surge.util.MSound AMBIENCE_THUNDER -> eksr
    react.surge.util.MSound ANVIL_BREAK -> CqeC
    react.surge.util.MSound ANVIL_LAND -> VNfs
    react.surge.util.MSound ANVIL_USE -> MvqQ
    react.surge.util.MSound ARROW_HIT -> mcJv
    react.surge.util.MSound BURP -> PxKW
    react.surge.util.MSound CHEST_CLOSE -> iMlj
    react.surge.util.MSound CHEST_OPEN -> VOHk
    react.surge.util.MSound CLICK -> NiTI
    react.surge.util.MSound DOOR_CLOSE -> xbin
    react.surge.util.MSound DOOR_OPEN -> NaDM
    react.surge.util.MSound DRINK -> EUgo
    react.surge.util.MSound EAT -> oXOq
    react.surge.util.MSound EXPLODE -> cUMq
    react.surge.util.MSound FALL_BIG -> daAw
    react.surge.util.MSound FALL_SMALL -> FjMe
    react.surge.util.MSound FIRE -> WcMX
    react.surge.util.MSound FIRE_IGNITE -> iNNX
    react.surge.util.MSound FIZZ -> BCpJ
    react.surge.util.MSound FUSE -> KNkL
    react.surge.util.MSound GLASS -> fgKR
    react.surge.util.MSound HURT_FLESH -> SNRc
    react.surge.util.MSound ITEM_BREAK -> wFXf
    react.surge.util.MSound ITEM_PICKUP -> fDgM
    react.surge.util.MSound LAVA -> Umiu
    react.surge.util.MSound LAVA_POP -> OtjM
    react.surge.util.MSound LEVEL_UP -> wEvo
    react.surge.util.MSound MINECART_BASE -> mblw
    react.surge.util.MSound MINECART_INSIDE -> qVHo
    react.surge.util.MSound NOTE_BASS -> SpVV
    react.surge.util.MSound NOTE_PIANO -> gilx
    react.surge.util.MSound NOTE_BASS_DRUM -> wVxO
    react.surge.util.MSound NOTE_STICKS -> AAON
    react.surge.util.MSound NOTE_BASS_GUITAR -> uPqk
    react.surge.util.MSound NOTE_SNARE_DRUM -> iyEN
    react.surge.util.MSound NOTE_PLING -> WtOt
    react.surge.util.MSound ORB_PICKUP -> XfQg
    react.surge.util.MSound PISTON_EXTEND -> Asqo
    react.surge.util.MSound PISTON_RETRACT -> gOxp
    react.surge.util.MSound PORTAL -> lWXp
    react.surge.util.MSound PORTAL_TRAVEL -> Bvtl
    react.surge.util.MSound PORTAL_TRIGGER -> aOIt
    react.surge.util.MSound SHOOT_ARROW -> YiVE
    react.surge.util.MSound SPLASH -> ffjA
    react.surge.util.MSound SPLASH2 -> FGlD
    react.surge.util.MSound STEP_GRASS -> Wsoe
    react.surge.util.MSound STEP_GRAVEL -> AAMp
    react.surge.util.MSound STEP_LADDER -> noBO
    react.surge.util.MSound STEP_SAND -> YqfB
    react.surge.util.MSound STEP_SNOW -> rHMK
    react.surge.util.MSound STEP_STONE -> iVdK
    react.surge.util.MSound STEP_WOOD -> qUix
    react.surge.util.MSound STEP_WOOL -> bkbB
    react.surge.util.MSound SWIM -> fLxy
    react.surge.util.MSound WATER -> NhxK
    react.surge.util.MSound WOOD_CLICK -> eciQ
    react.surge.util.MSound BAT_DEATH -> XwVY
    react.surge.util.MSound BAT_HURT -> yvsj
    react.surge.util.MSound BAT_IDLE -> AAPB
    react.surge.util.MSound BAT_LOOP -> nTrI
    react.surge.util.MSound BAT_TAKEOFF -> HyJF
    react.surge.util.MSound BLAZE_BREATH -> pBFp
    react.surge.util.MSound BLAZE_DEATH -> xlAX
    react.surge.util.MSound BLAZE_HIT -> kBva
    react.surge.util.MSound CAT_HISS -> fUjv
    react.surge.util.MSound CAT_HIT -> BDRY
    react.surge.util.MSound CAT_MEOW -> XUTH
    react.surge.util.MSound CAT_PURR -> IQXj
    react.surge.util.MSound CAT_PURREOW -> Efll
    react.surge.util.MSound CHICKEN_IDLE -> btQk
    react.surge.util.MSound CHICKEN_HURT -> tWCS
    react.surge.util.MSound CHICKEN_EGG_POP -> dWtI
    react.surge.util.MSound CHICKEN_WALK -> RvDn
    react.surge.util.MSound COW_IDLE -> MLbP
    react.surge.util.MSound COW_HURT -> qxMe
    react.surge.util.MSound COW_WALK -> fgLO
    react.surge.util.MSound CREEPER_HISS -> GTCB
    react.surge.util.MSound CREEPER_DEATH -> NOdw
    react.surge.util.MSound ENDERDRAGON_DEATH -> edIh
    react.surge.util.MSound ENDERDRAGON_GROWL -> wOIw
    react.surge.util.MSound ENDERDRAGON_HIT -> xbmp
    react.surge.util.MSound ENDERDRAGON_WINGS -> HWEm
    react.surge.util.MSound ENDERMAN_DEATH -> bbog
    react.surge.util.MSound ENDERMAN_HIT -> igdL
    react.surge.util.MSound ENDERMAN_IDLE -> IQXK
    react.surge.util.MSound ENDERMAN_TELEPORT -> UKiQ
    react.surge.util.MSound ENDERMAN_SCREAM -> tWCM
    react.surge.util.MSound ENDERMAN_STARE -> XwUj
    react.surge.util.MSound GHAST_SCREAM -> vSva
    react.surge.util.MSound GHAST_SCREAM2 -> urys
    react.surge.util.MSound GHAST_CHARGE -> PVOM
    react.surge.util.MSound GHAST_DEATH -> LtVU
    react.surge.util.MSound GHAST_FIREBALL -> DdNR
    react.surge.util.MSound GHAST_MOAN -> IQYu
    react.surge.util.MSound IRONGOLEM_DEATH -> UmoE
    react.surge.util.MSound IRONGOLEM_HIT -> CrME
    react.surge.util.MSound IRONGOLEM_THROW -> COgq
    react.surge.util.MSound IRONGOLEM_WALK -> EpBa
    react.surge.util.MSound MAGMACUBE_WALK -> iVer
    react.surge.util.MSound MAGMACUBE_WALK2 -> BTuS
    react.surge.util.MSound MAGMACUBE_JUMP -> YrLL
    react.surge.util.MSound PIG_IDLE -> QHPl
    react.surge.util.MSound PIG_DEATH -> bbrk
    react.surge.util.MSound PIG_WALK -> CXYI
    react.surge.util.MSound SHEEP_IDLE -> AQrG
    react.surge.util.MSound SHEEP_SHEAR -> bbre
    react.surge.util.MSound SHEEP_WALK -> Howr
    react.surge.util.MSound SILVERFISH_HIT -> xcRB
    react.surge.util.MSound SILVERFISH_KILL -> Xetq
    react.surge.util.MSound SILVERFISH_IDLE -> bcRW
    react.surge.util.MSound SILVERFISH_WALK -> KqRW
    react.surge.util.MSound SKELETON_IDLE -> oaGo
    react.surge.util.MSound SKELETON_DEATH -> WAOg
    react.surge.util.MSound SKELETON_HURT -> RTCn
    react.surge.util.MSound SKELETON_WALK -> NPGt
    react.surge.util.MSound SLIME_ATTACK -> IIIW
    react.surge.util.MSound SLIME_WALK -> hKRK
    react.surge.util.MSound SLIME_WALK2 -> grbS
    react.surge.util.MSound SPIDER_IDLE -> JLLW
    react.surge.util.MSound SPIDER_DEATH -> bAOo
    react.surge.util.MSound SPIDER_WALK -> XfWC
    react.surge.util.MSound WITHER_DEATH -> CaJu
    react.surge.util.MSound WITHER_HURT -> ReEq
    react.surge.util.MSound WITHER_IDLE -> Nhxw
    react.surge.util.MSound WITHER_SHOOT -> RdeN
    react.surge.util.MSound WITHER_SPAWN -> EfpM
    react.surge.util.MSound WOLF_BARK -> rQAy
    react.surge.util.MSound WOLF_DEATH -> BCuq
    react.surge.util.MSound WOLF_GROWL -> yMEm
    react.surge.util.MSound WOLF_HOWL -> gHQY
    react.surge.util.MSound WOLF_HURT -> XDVM
    react.surge.util.MSound WOLF_PANT -> HVic
    react.surge.util.MSound WOLF_SHAKE -> oWyI
    react.surge.util.MSound WOLF_WALK -> pRkI
    react.surge.util.MSound WOLF_WHINE -> Bvyp
    react.surge.util.MSound ZOMBIE_METAL -> ExUV
    react.surge.util.MSound ZOMBIE_WOOD -> ReIG
    react.surge.util.MSound ZOMBIE_WOODBREAK -> UfBP
    react.surge.util.MSound ZOMBIE_IDLE -> fobA
    react.surge.util.MSound ZOMBIE_DEATH -> mlEp
    react.surge.util.MSound ZOMBIE_HURT -> kLLv
    react.surge.util.MSound ZOMBIE_INFECT -> nUUw
    react.surge.util.MSound ZOMBIE_UNFECT -> xRRd
    react.surge.util.MSound ZOMBIE_REMEDY -> XoKK
    react.surge.util.MSound ZOMBIE_WALK -> mbro
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> gQBJ
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> fVOK
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> nngW
    react.surge.util.MSound ZOMBIE_PIG_HURT -> Akgw
    react.surge.util.MSound DIG_WOOL -> bkdd
    react.surge.util.MSound DIG_GRASS -> HyLe
    react.surge.util.MSound DIG_GRAVEL -> dPHb
    react.surge.util.MSound DIG_SAND -> yDSX
    react.surge.util.MSound DIG_SNOW -> XewO
    react.surge.util.MSound DIG_STONE -> ahbY
    react.surge.util.MSound DIG_WOOD -> mkcl
    react.surge.util.MSound FIREWORK_BLAST -> fxQe
    react.surge.util.MSound FIREWORK_BLAST2 -> oOgK
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> ffof
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> kBym
    react.surge.util.MSound FIREWORK_TWINKLE -> nnfn
    react.surge.util.MSound FIREWORK_TWINKLE2 -> IYkt
    react.surge.util.MSound FIREWORK_LAUNCH -> WtWO
    react.surge.util.MSound SUCCESSFUL_HIT -> veaI
    react.surge.util.MSound HORSE_ANGRY -> DSQD
    react.surge.util.MSound HORSE_ARMOR -> jjoC
    react.surge.util.MSound HORSE_BREATHE -> OSOn
    react.surge.util.MSound HORSE_DEATH -> cTwk
    react.surge.util.MSound HORSE_GALLOP -> euRF
    react.surge.util.MSound HORSE_HIT -> FXvQ
    react.surge.util.MSound HORSE_IDLE -> aqVH
    react.surge.util.MSound HORSE_JUMP -> LQwE
    react.surge.util.MSound HORSE_LAND -> WlJM
    react.surge.util.MSound HORSE_SADDLE -> ENDL
    react.surge.util.MSound HORSE_SOFT -> FjYH
    react.surge.util.MSound HORSE_WOOD -> Abwb
    react.surge.util.MSound DONKEY_ANGRY -> orMj
    react.surge.util.MSound DONKEY_DEATH -> pBLa
    react.surge.util.MSound DONKEY_HIT -> HhNi
    react.surge.util.MSound DONKEY_IDLE -> WlIh
    react.surge.util.MSound HORSE_SKELETON_DEATH -> JvcW
    react.surge.util.MSound HORSE_SKELETON_HIT -> hdhA
    react.surge.util.MSound HORSE_SKELETON_IDLE -> vnPj
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> HNYw
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> daKy
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> bswN
    react.surge.util.MSound VILLAGER_DEATH -> PUqN
    react.surge.util.MSound VILLAGER_HAGGLE -> euPf
    react.surge.util.MSound VILLAGER_HIT -> mQsg
    react.surge.util.MSound VILLAGER_IDLE -> ViEU
    react.surge.util.MSound VILLAGER_NO -> aORG
    react.surge.util.MSound VILLAGER_YES -> XDVq
    java.lang.String pre19sound -> OBNE
    java.lang.String post19sound -> GukJ
    org.bukkit.Sound resolvedSound -> vwAg
    react.surge.util.MSound[] ENUM$VALUES -> DuSV
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> bPUw
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> Rsdv:
    org.bukkit.Material material -> oOhl
    java.lang.Byte data -> LIef
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> eapE
    79:80:void setData(java.lang.Byte) -> FNJd
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> dpIT:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> clQL
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> NopI
    68:68:boolean isAnyOnline() -> tLWv
    80:80:react.glang.GList inWorld(org.bukkit.World) -> MuBA
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> ESXa
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> FNJd
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> FNJd
    143:144:void disable(org.bukkit.entity.Player) -> IhUC
    154:155:void enable(org.bukkit.entity.Player) -> wvgn
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> FNJd
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> KCgV
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> IVrU
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> FNJd
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> IFQj
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> kjvN
    300:300:boolean canFindPlayer(java.lang.String) -> GPmo
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> clPh
    338:345:react.glang.GList onlinePlayers() -> HCiS
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> XuBA
    368:371:void clear(org.bukkit.entity.Player) -> rVVu
    381:385:void clearEffects(org.bukkit.entity.Player) -> FMhw
    398:399:void heal(org.bukkit.entity.Player,double) -> FNJd
    409:410:void heal(org.bukkit.entity.Player) -> BlQj
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> wnXL
    432:433:void resetHunger(org.bukkit.entity.Player) -> rpIs
    443:444:void kill(org.bukkit.entity.Player) -> fSUY
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> paRl
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> HTRg
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> FNJd
react.surge.util.P$1 -> dpIT$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> XJNY
    1:1:java.lang.Object onAdapt(java.lang.Object) -> oLoP
react.surge.util.P$2 -> dpIT$2:
    java.lang.Double val$doff -> djAI
    org.bukkit.entity.Player val$e -> RCIX
    org.bukkit.entity.Entity[] val$result -> plbX
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> JHtm
react.surge.util.PE -> rElE:
    react.surge.util.PE ABSORPTION -> rsHy
    react.surge.util.PE BLINDNESS -> euSj
    react.surge.util.PE CONFUSION -> TbbC
    react.surge.util.PE DAMAGE_RESISTANCE -> ixny
    react.surge.util.PE FAST_DIGGING -> WAVp
    react.surge.util.PE FIRE_RESISTANCE -> FQIO
    react.surge.util.PE GLOWING -> gHVT
    react.surge.util.PE HARM -> rQFM
    react.surge.util.PE HEAL -> JnWJ
    react.surge.util.PE HEALTH_BOOST -> sBev
    react.surge.util.PE HUNGER -> fofC
    react.surge.util.PE INCREASE_DAMAGE -> RJxp
    react.surge.util.PE INVISIBILITY -> HpaS
    react.surge.util.PE JUMP -> JDDC
    react.surge.util.PE LEVITATION -> EETq
    react.surge.util.PE LUCK -> mtYb
    react.surge.util.PE NIGHT_VISION -> xkgo
    react.surge.util.PE POISON -> NaOj
    react.surge.util.PE REGENERATION -> ecot
    react.surge.util.PE SATURATION -> YaOK
    react.surge.util.PE SLOW -> LAVt
    react.surge.util.PE SLOW_DIGGING -> PERr
    react.surge.util.PE SPEED -> xIcy
    react.surge.util.PE UNLUCK -> TcAi
    react.surge.util.PE WATER_BREATHING -> rrfj
    react.surge.util.PE WEAKNESS -> mlHj
    react.surge.util.PE WITHER -> xJES
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> FNJd
    144:144:react.surge.util.PE d(int) -> xymk
    156:156:react.surge.util.PE a(int) -> aDHO
    166:166:org.bukkit.potion.PotionEffect c() -> lnsg
    177:178:void c(org.bukkit.entity.LivingEntity) -> gVYg
    182:183:void crm(org.bukkit.entity.LivingEntity) -> oLoP
    187:188:void rm(org.bukkit.entity.LivingEntity) -> qcvH
react.surge.util.ParticleEffect -> PCKu:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> blJW
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> fwtl
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> sSfr
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> nMHr
    react.surge.util.ParticleEffect WATER_BUBBLE -> svJq
    react.surge.util.ParticleEffect WATER_SPLASH -> VNtR
    react.surge.util.ParticleEffect WATER_WAKE -> SVlb
    react.surge.util.ParticleEffect SUSPENDED -> wWbj
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> uYqC
    react.surge.util.ParticleEffect CRIT -> Qaja
    react.surge.util.ParticleEffect CRIT_MAGIC -> iqBM
    react.surge.util.ParticleEffect SMOKE_NORMAL -> YOpF
    react.surge.util.ParticleEffect SMOKE_LARGE -> jIQM
    react.surge.util.ParticleEffect SPELL -> coPH
    react.surge.util.ParticleEffect SPELL_INSTANT -> TseO
    react.surge.util.ParticleEffect SPELL_MOB -> TABH
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> AlMm
    react.surge.util.ParticleEffect SPELL_WITCH -> IYsY
    react.surge.util.ParticleEffect DRIP_WATER -> MgAX
    react.surge.util.ParticleEffect DRIP_LAVA -> qNDt
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> tgoH
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> kfFW
    react.surge.util.ParticleEffect TOWN_AURA -> edTe
    react.surge.util.ParticleEffect NOTE -> AJMB
    react.surge.util.ParticleEffect PORTAL -> rXvd
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> PVUs
    react.surge.util.ParticleEffect FLAME -> OleN
    react.surge.util.ParticleEffect LAVA -> qDrV
    react.surge.util.ParticleEffect FOOTSTEP -> CYCi
    react.surge.util.ParticleEffect CLOUD -> mQxJ
    react.surge.util.ParticleEffect REDSTONE -> IYrL
    react.surge.util.ParticleEffect SNOWBALL -> OdTh
    react.surge.util.ParticleEffect SNOW_SHOVEL -> DAsI
    react.surge.util.ParticleEffect SLIME -> lpxS
    react.surge.util.ParticleEffect HEART -> Hxqp
    react.surge.util.ParticleEffect BARRIER -> apxL
    react.surge.util.ParticleEffect ITEM_CRACK -> fDqt
    react.surge.util.ParticleEffect BLOCK_CRACK -> UKrr
    react.surge.util.ParticleEffect BLOCK_DUST -> JfHG
    react.surge.util.ParticleEffect WATER_DROP -> iEjw
    react.surge.util.ParticleEffect ITEM_TAKE -> OcwH
    react.surge.util.ParticleEffect MOB_APPEARANCE -> KOYx
    react.surge.util.ParticleEffect DRAGON_BREATH -> blOQ
    react.surge.util.ParticleEffect END_ROD -> Guqd
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> QsOM
    react.surge.util.ParticleEffect SWEEP_ATTACK -> jRCs
    java.util.Map NAME_MAP -> CYDc
    java.util.Map ID_MAP -> grnB
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> lhip
    java.util.List properties -> buAM
    react.surge.util.ParticleEffect[] ENUM$VALUES -> JTgr
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> XJgb
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> FNJd
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> McbA
    557:565:react.surge.util.ParticleEffect fromId(int) -> uxuB
    577:578:boolean isWater(org.bukkit.Location) -> uhSC
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> FNJd
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> FNJd
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> FNJd
    665:681:void display(float,int,org.bukkit.Location,double) -> FNJd
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> FNJd
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> FNJd
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> FNJd
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> FNJd
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> FNJd
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> FNJd
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> FNJd
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> FNJd
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> FNJd
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> FNJd
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> FNJd
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> FNJd
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> FNJd
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> FNJd
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> PCKu$FNJd:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> PCKu$KCgV:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> PCKu$kjvN:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> WihB
    1594:1594:float getValueY() -> qBmm
    1605:1605:float getValueZ() -> rEqO
react.surge.util.ParticleEffect$OrdinaryColor -> PCKu$wmxT:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> WihB
    1526:1526:float getValueY() -> qBmm
    1537:1537:float getValueZ() -> rEqO
react.surge.util.ParticleEffect$ParticleColor -> PCKu$afJO:
    1383:1383:void <init>() -> <init>
    float getValueX() -> WihB
    float getValueY() -> qBmm
    float getValueZ() -> rEqO
react.surge.util.ParticleEffect$ParticleColorException -> PCKu$gVYg:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> PCKu$oLoP:
    org.bukkit.Material material -> oOhl
    byte data -> ULWP
    int[] packetData -> KGJh
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> wfcE
    1309:1309:java.lang.String getPacketDataString() -> XRxL
react.surge.util.ParticleEffect$ParticleDataException -> PCKu$qcvH:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> PCKu$uWPs:
    int version -> version
    java.lang.Class enumParticle -> CrXF
    java.lang.reflect.Constructor packetConstructor -> jQcH
    java.lang.reflect.Method getHandle -> ahjv
    java.lang.reflect.Field playerConnection -> GTNf
    java.lang.reflect.Method sendPacket -> uRBX
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> gQJU
    float offsetX -> aNvn
    float offsetY -> iEmk
    float offsetZ -> jRBt
    float speed -> UTeo
    int amount -> kBLU
    boolean longDistance -> Bfbo
    react.surge.util.ParticleEffect$ParticleData data -> uIQC
    java.lang.Object packet -> jYqc
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> KUIt
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> FNJd
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> KCgV
    2004:2018:void sendTo(org.bukkit.Location,double) -> KCgV
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> PCKu$uWPs$FNJd:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> PCKu$uWPs$KCgV:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> PCKu$uWPs$kjvN:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> PCKu$XJNY:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> rHXH
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> tEmC
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> FGyp
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> TREE
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> ffwl
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> PCKu$JHtm:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> TWhb:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> cInC
react.surge.util.Persist -> Dakl:
react.surge.util.PluginUtil -> bPOt:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> afJO
    81:85:void enableAll() -> RsjX
    95:99:void disable(org.bukkit.plugin.Plugin) -> gVYg
    106:110:void disableAll() -> hIUm
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> oLoP
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> FNJd
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> vREL
    169:172:java.util.List getPluginNames(boolean) -> IhUo
    184:187:java.lang.String getPluginVersion(java.lang.String) -> JjyT
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> qcvH
    237:316:java.util.List findByCommand(java.lang.String) -> lehy
    337:338:void load(org.bukkit.plugin.Plugin) -> uWPs
    342:364:java.lang.String getPluginFileName(java.lang.String) -> UQgG
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> FNJd
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> XJNY
    480:484:void reloadAll() -> agDe
    496:622:void unload(org.bukkit.plugin.Plugin) -> JHtm
react.surge.util.PoolCount -> sjqP:
react.surge.util.PoolDescriber -> tUCW:
react.surge.util.PoolNanoThrottle -> UAWo:
react.surge.util.PositionalSelector -> uWfB:
    react.glang.GSet allowedChunks -> uIQJ
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> KxHC
    39:40:void addChunk(org.bukkit.Chunk) -> Mtam
    44:44:react.glang.GSet getAllowedChunks() -> qvTH
react.surge.util.Protocol -> oxXM:
    react.surge.util.Protocol LATEST -> CYES
    react.surge.util.Protocol R1_12_2 -> ReRc
    react.surge.util.Protocol R1_12_2_PRE -> BVCh
    react.surge.util.Protocol R1_12_1 -> JChS
    react.surge.util.Protocol R1_12 -> iFRM
    react.surge.util.Protocol R1_11_2 -> fMiI
    react.surge.util.Protocol R1_11_1 -> CrXr
    react.surge.util.Protocol R1_11 -> eSVk
    react.surge.util.Protocol R1_10_2 -> rsPG
    react.surge.util.Protocol R1_10_1 -> Xwdi
    react.surge.util.Protocol R1_10 -> aWkU
    react.surge.util.Protocol R1_9_4 -> buAn
    react.surge.util.Protocol R1_9_3 -> EpNq
    react.surge.util.Protocol R1_9_2 -> TAFA
    react.surge.util.Protocol R1_9_1 -> Lkqg
    react.surge.util.Protocol R1_9 -> YjGi
    react.surge.util.Protocol R1_8_9 -> GCPq
    react.surge.util.Protocol R1_8_8 -> wXJs
    react.surge.util.Protocol R1_8_7 -> jREi
    react.surge.util.Protocol R1_8_6 -> MEAM
    react.surge.util.Protocol R1_8_5 -> JfKQ
    react.surge.util.Protocol R1_8_4 -> TtIM
    react.surge.util.Protocol R1_8_3 -> hCMe
    react.surge.util.Protocol R1_8_2 -> pmHb
    react.surge.util.Protocol R1_8_1 -> bkoP
    react.surge.util.Protocol R1_8 -> MEAU
    react.surge.util.Protocol R1_7_10 -> ENKM
    react.surge.util.Protocol R1_7_9 -> UThR
    react.surge.util.Protocol R1_7_8 -> QbOG
    react.surge.util.Protocol R1_7_7 -> yLmb
    react.surge.util.Protocol R1_7_6 -> oHBJ
    react.surge.util.Protocol R1_7_5 -> kUGa
    react.surge.util.Protocol R1_7_4 -> IIUi
    react.surge.util.Protocol R1_7_3 -> hBky
    react.surge.util.Protocol R1_7_2 -> KiNk
    react.surge.util.Protocol R1_7_1 -> MntP
    react.surge.util.Protocol B1_6_4 -> IIUm
    react.surge.util.Protocol B1_6_3 -> DmMd
    react.surge.util.Protocol B1_6_2 -> Mwgc
    react.surge.util.Protocol B1_6_1 -> nxGN
    react.surge.util.Protocol B1_5_2 -> jRHT
    react.surge.util.Protocol B1_5_1 -> mJPG
    react.surge.util.Protocol B1_5 -> djHi
    react.surge.util.Protocol B1_4_7 -> igup
    react.surge.util.Protocol B1_4_6 -> gkBX
    react.surge.util.Protocol B1_4_5 -> utJc
    react.surge.util.Protocol B1_4_4 -> whnV
    react.surge.util.Protocol B1_4_2 -> CijX
    react.surge.util.Protocol B1_3_2 -> Uelx
    react.surge.util.Protocol B1_3_1 -> nxFb
    react.surge.util.Protocol B1_2_5 -> seSA
    react.surge.util.Protocol B1_2_4 -> WuFG
    react.surge.util.Protocol EARLIEST -> ujxD
    react.surge.util.Protocol UNKNOWN -> XUcv
    int version -> version
    java.lang.String packageVersion -> NPXT
    java.lang.String versionName -> usiU
    boolean netty -> GvXF
    react.surge.util.Protocol[] ENUM$VALUES -> ASCo
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> JuEH
    118:118:java.lang.String getPackageVersion() -> YDxq
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> wLpT
    142:150:react.surge.util.Protocol getProtocolVersion() -> RHvV
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> KCgV
    160:160:boolean isServerVersion() -> lnsT
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> Fgvh
    175:175:boolean isActualVersion() -> imyx
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> UlSW
    200:200:int getMetaVersion() -> gEqm
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> LjBr:
    react.surge.util.Protocol from -> MDao
    react.surge.util.Protocol to -> dqvv
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> rNbI
    21:21:react.surge.util.Protocol getTo() -> JdCd
    26:26:boolean contains(react.surge.util.Protocol) -> kjvN
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> qeKp:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> KMSj
    70:70:int randomNextInt() -> JksQ
    80:80:long randomNextLong() -> wwcn
    92:92:boolean isWithin(double) -> BlQj
    104:104:boolean isWithin(int) -> bFjM
    116:116:boolean isWithin(long) -> erUL
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> wnXL
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> RsPi
react.surge.util.RawEvent -> nKAb:
react.surge.util.RayTrace -> ylbe:
    org.bukkit.Location start -> mcaA
    org.bukkit.util.Vector direction -> OSXt
    java.lang.Double maxDistance -> aXMa
    java.lang.Double distanceCovered -> OmLQ
    java.lang.Double step -> OBWl
    java.lang.Boolean stop -> nfdI
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> RRHa
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> JHtm
    89:89:org.bukkit.Location getStart() -> lwhO
    94:95:void setStart(org.bukkit.Location) -> ESXa
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> ggwg
    114:115:void setMaxDistance(java.lang.Double) -> wmxT
    119:119:java.lang.Double getDistanceCovered() -> pQQE
    124:125:void setDistanceCovered(java.lang.Double) -> afJO
    129:129:java.lang.Double getStep() -> IytF
    134:135:void setStep(java.lang.Double) -> gVYg
react.surge.util.ReflectionUtils -> nAnw:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> FNJd
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> FNJd
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> FNJd
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> FNJd
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> FNJd
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> FNJd
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> FNJd
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> FNJd
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> FNJd
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> FNJd
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> FNJd
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> FNJd
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> FNJd
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> FNJd
react.surge.util.ReflectionUtils$DataType -> nAnw$FNJd:
    react.surge.util.ReflectionUtils$DataType BYTE -> cUao
    react.surge.util.ReflectionUtils$DataType SHORT -> kfLN
    react.surge.util.ReflectionUtils$DataType INTEGER -> iEpt
    react.surge.util.ReflectionUtils$DataType LONG -> KrBN
    react.surge.util.ReflectionUtils$DataType CHARACTER -> hCOU
    react.surge.util.ReflectionUtils$DataType FLOAT -> ULYw
    react.surge.util.ReflectionUtils$DataType DOUBLE -> ganW
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> dOuG
    java.util.Map CLASS_MAP -> uHtA
    java.lang.Class primitive -> rbOL
    java.lang.Class reference -> MoVq
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> gPmN
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> aoXY
    704:704:java.lang.Class getReference() -> JAak
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> KCgV
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> kjvN
    741:742:java.lang.Class getReference(java.lang.Class) -> wmxT
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> FNJd
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> KCgV
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> KCgV
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> kjvN
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> FNJd
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> nAnw$KCgV:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> orWb
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> nweD
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> DJjA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> Jelo
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> RTTy
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> sLDA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> uAGu
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> SNfv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> QIAq
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> ENPV
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> mIpW
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> NOxl
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> Wtfa
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> IsnU
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> JwQt
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> ynvM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> ixxs
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> Olnj
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> FQSe
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> igxF
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> LtfB
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> MRrX:
    void refresh() -> refresh
react.surge.util.SQLOperation -> QVnR:
    react.surge.util.SQLOperation LOAD -> ojJF
    react.surge.util.SQLOperation SAVE -> bccL
    react.surge.util.SQLOperation[] ENUM$VALUES -> BLvg
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> eYWc:
    react.surge.util.ServerState START -> XnwP
    react.surge.util.ServerState ENABLE -> VGNl
    react.surge.util.ServerState DISABLE -> fNLk
    react.surge.util.ServerState STOP -> VGNa
    react.surge.util.ServerState RUNNING -> mJPq
    react.surge.util.ServerState[] ENUM$VALUES -> AuHg
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> YfwD:
    org.bukkit.Location location -> LHne
    org.bukkit.util.Vector offset -> smdb
    org.bukkit.util.Vector size -> aqaT
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> Mtam
    90:94:org.bukkit.Location randomLocation() -> afgG
    104:104:org.bukkit.Location randomSurface() -> wUdb
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> kkso
    129:129:org.bukkit.util.Vector getSize() -> fTTF
react.surge.util.SnowLevel -> hjpq:
    byte level -> qMjs
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> Gsmq
    51:52:void setLevel(byte) -> uWPs
react.surge.util.SuperCaller -> OsKx:
    void run() -> run
react.surge.util.T -> FWOu:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> KCgV
    32:35:void stop() -> stop
react.surge.util.TXT -> Qgoi:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> oLoP
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> FNJd
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> FNJd
    99:99:java.lang.String line(react.surge.util.C,int) -> FNJd
    113:113:java.lang.String underline(react.surge.util.C,int) -> KCgV
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> FNJd
react.surge.util.Tag -> ebIe:
    java.lang.String value() -> value
react.surge.util.Timer -> eriu:
    long tns -> thVi
    long cns -> snEP
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> Vwie
react.surge.util.VectorMath -> FySV:
    int[] $SWITCH_TABLE$surge$util$Axis -> OIrP
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> AAbl
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> FNJd
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> FNJd
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> KCgV
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> kjvN
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> FNJd
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> KCgV
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> KCgV
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> kjvN
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> wmxT
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> afJO
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> gVYg
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> oLoP
    111:111:double round(double,int) -> afJO
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> FNJd
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> FNJd
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> FNJd
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> wmxT
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> afJO
    268:268:org.bukkit.util.Vector toVector(float,float) -> FNJd
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> FNJd
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> FNJd
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> qcvH
    337:340:double getSpeed(org.bukkit.util.Vector) -> uWPs
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> FNJd
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> XJNY
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> FNJd
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> KCgV
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> kjvN
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> wmxT
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> JHtm
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> dfyh
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> stKm
react.surge.util.VectorMath$1 -> FySV$1:
    org.bukkit.util.Vector val$vector -> WdEW
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> uhSC
    1:1:java.lang.Object onAdapt(java.lang.Object) -> oLoP
react.surge.util.W -> upvg:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> qcvH
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> FNJd
    75:86:org.bukkit.entity.Entity getEntity(int) -> clQL
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> FNJd
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> FNJd
    143:143:int getChunkX(org.bukkit.block.Block) -> uWPs
    155:155:int getChunkY(org.bukkit.block.Block) -> XJNY
    168:169:void dropXp(org.bukkit.Location,int) -> KCgV
    180:180:int getChunkZ(org.bukkit.block.Block) -> JHtm
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> KCgV
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> FNJd
    232:239:react.glang.GList news(org.bukkit.Location) -> pXbi
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> FNJd
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> pXbi
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> vQax
    300:300:org.bukkit.World toSync(org.bukkit.World) -> mWiV
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> uhSC
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> IhUo
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> IhUo
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> fliO
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> FNJd
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> FNJd
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> FNJd
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> FNJd
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> FNJd
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> FNJd
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> FNJd
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> FNJd
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> gVXt
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> KUIt
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> gVXt
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> kjvN
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> FNJd
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> FNJd
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> FNJd
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> FNJd
react.surge.util.W$1 -> upvg$1:
    java.lang.Double val$doff -> djAI
    org.bukkit.entity.Entity val$e -> orYY
    org.bukkit.entity.Entity[] val$result -> plbX
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> JHtm
react.surge.util.Worlds -> jWec:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> UlLF
    33:33:boolean hasWorld(java.lang.String) -> MuCu
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> FWPY:
react.text.ColoredString -> GRBq:
    react.surge.util.C c -> ygEW
    java.lang.String s -> Uemm
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> dhAS
    42:43:void setC(react.surge.util.C) -> KCgV
    47:47:java.lang.String getS() -> tfMd
    52:53:void setS(java.lang.String) -> XdAl
react.text.RTEX -> BRsg:
    react.glang.GList extras -> jIXD
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> lnuf
    44:58:react.json.JSONObject toJSON() -> HTRg
react.text.RTX -> jFdU:
    react.json.JSONArray base -> bccV
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> gVYg
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> KCgV
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> FNJd
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> FNJd
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> KCgV
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> kjvN
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> FNJd
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> KCgV
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> kjvN
    265:265:react.json.JSONArray toJSON() -> OQQU
    276:277:void tellRawTo(org.bukkit.entity.Player) -> oDaC
react.text.RawText -> rVlQ:
    java.lang.String COLOR_BLACK -> RnHH
    java.lang.String COLOR_DARK_BLUE -> mlSb
    java.lang.String COLOR_DARK_GREEN -> hnEl
    java.lang.String COLOR_DARK_AQUA -> cECt
    java.lang.String COLOR_DARK_RED -> DubQ
    java.lang.String COLOR_DARK_PURPLE -> LJTx
    java.lang.String COLOR_GOLD -> gbUK
    java.lang.String COLOR_GRAY -> CXks
    java.lang.String COLOR_DARK_GRAY -> Lcfv
    java.lang.String COLOR_BLUE -> Vqdv
    java.lang.String COLOR_GREEN -> GTWq
    java.lang.String COLOR_AQUA -> xRbx
    java.lang.String COLOR_RED -> tqKl
    java.lang.String COLOR_LIGHT_PURPLE -> Kqej
    java.lang.String COLOR_YELLOW -> djLj
    java.lang.String COLOR_WHITE -> nEFm
    java.lang.String COLOR_NONE -> UncB
    java.lang.String HEAD_TEXT -> OdaA
    java.lang.String HEAD_COLOR -> Athb
    java.lang.String HEAD_BOLD -> yxJW
    java.lang.String HEAD_ITALIC -> AAcn
    java.lang.String HEAD_UNDERLINED -> mkub
    java.lang.String HEAD_STRIKETHROUGH -> SVyt
    java.lang.String HEAD_OBFUSCATED -> RmjK
    java.lang.String HEAD_CLICK_EVENT -> QPtO
    java.lang.String HEAD_HOVER_EVENT -> BEHF
    java.lang.String HEAD_ACTION -> sTUK
    java.lang.String HEAD_VALUE -> elnT
    java.lang.String HEAD_EXTRA -> cLuV
    java.lang.String HEAD_ACTION_SHOW_TEXT -> HEwc
    java.lang.String HEAD_ACTION_COMMAND -> dPYN
    java.util.ArrayList components -> wqbO
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> YxIT
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> afJO
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> FNJd
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> FNJd
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> FNJd
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> FNJd
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> FNJd
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> FNJd
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> FNJd
    307:313:java.lang.String compile() -> FpjE
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> FNJd

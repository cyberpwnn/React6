react.Config -> bXLA:
    react.glang.GMap worldConfigs -> bXLA
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> kHsM
    java.lang.String A_REDSTONE_DYNAMIC_CLOCK -> Difh
    java.lang.String A_COMMANDOVERRIDE_TPS -> bhlM
    java.lang.String A_REACT_REMOTE_PORT -> DXdy
    java.lang.String A_REACT_REMOTE_ENABLED -> SeQk
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> JQfN
    java.lang.String A_POOL_MAXTHREADS -> GQMo
    java.lang.String A_POOL_SYNC_NANOS -> Usgp
    java.lang.String A_CULLING_ENABLED -> OPTh
    java.lang.String A_FASTLEAF_ENABLED -> KChC
    java.lang.String A_FASTLEAF_ONDECAY -> miKq
    java.lang.String A_FASTLEAF_INSTANT -> salD
    java.lang.String A_FASTLEAF_DECAYPERIOD -> VDHU
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> doSd
    java.lang.String A_ENTITYSTACK_ENABLED -> eXck
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> rNHN
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> fJeY
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> UjwS
    java.lang.String A_GLASS_SHOW_BLOCKS -> ktGm
    java.lang.String A_GLASS_SHOW_PARTICLES -> pidT
    java.lang.String A_ALLOW_CULL -> ERuh
    java.lang.String A_ALLOW_PURGE -> RPkQ
    java.lang.String A_ALLOW_STACKING -> oLnK
    java.lang.String A_CULL_RULES -> lnYR
    java.lang.String A_RAI_TPS_HIGH_TICK -> pjDd
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> xhie
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> ykmI
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> YoRo
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> gUwW
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> kkXk
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> QNLV
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> uWTE
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> MRaF
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> iBnt
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> vtHp
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> BdBn
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> CVCy
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> jpef
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> pGcT
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> ckpy
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> PljT
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> Grph
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> XlRF
    java.lang.String A_RAI_FLUID_TIME_CEIL -> kHtJ
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> VTiU
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> mWjq
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> vITR
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> dnrm
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> BdCt
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> SnCr
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> Cfdo
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> Digq
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> hQMD
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> IOER
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> eOtF
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> IhWI
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> JHvN
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> SvTc
    java.lang.String A_USE_WORLD_CONFIGS -> kADT
    java.lang.String A_ENTITY_STACKER_SHOW_PARTICLES -> RPnM
    java.lang.String A_ENTITY_STACKER_SHOW_NAMETAG -> PSYN
    java.lang.String A_LANGUAGE -> FpPD
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> avoG
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> TOGP
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> IEvA
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> WaAY
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> aCje
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> paWf
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> ytbu
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> DilA
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> QgaH
    java.lang.String A_RAI_ENTITY_PROPIGATE -> iLBk
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> UAHC
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> wfLT
    java.lang.String A_ENTITY_STACKER_NAME_TAG_FORMAT -> LaAR
    double MAX_EXPLOSION_MS -> XtdU
    boolean REDSTONE_DYNAMIC_CLOCK -> gMjx
    boolean COMMANDOVERRIDES_TPS -> RaqP
    int REACT_REMOTE_PORT -> pGeM
    boolean REACT_REMOTE_ENABLED -> nlSM
    int ENTITY_STACK_MAX_COUNT -> ronO
    int POOL_MAXTHREADS -> SnEt
    long POOL_SYNC_NANOS -> HduL
    boolean CULLING_ENABLED -> WaAO
    boolean FASTLEAF_ENABLED -> BlUw
    boolean FASTLEAF_ONDECAY -> TWWF
    boolean FASTLEAF_INSTANT -> yuBf
    int FASTLEAF_DECAYPERIOD -> mXNQ
    boolean COMMANDOVERRIDES_MEMORY -> CEGb
    boolean ENTITYSTACK_ENABLED -> UAJb
    int ENTITYSTACK_MINIMUM_GROUP -> ndFF
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> lvpb
    int ENTITYSTACK_MAXIMUM_HEALTH -> tduK
    boolean GLASS_SHOW_BLOCKS -> UbmY
    boolean GLASS_SHOW_PARTICLES -> cSDo
    react.glang.GList ALLOW_CULL -> XuIH
    react.glang.GList ALLOW_PURGE -> nBAw
    react.glang.GList ALLOW_STACKING -> YLvS
    react.glang.GList CULL_RULES -> GbVS
    double RAI_TPS_HIGH_TICK -> Whrs
    long RAI_REDSTONE_TIME_FLOOR -> sYbJ
    long RAI_REDSTONE_TIME_CEIL -> srtB
    long RAI_REDSTONE_TIME_MUDDING -> WGQU
    double RAI_REDSTONE_TIME_FUNCTION -> KCms
    double RAI_REDSTONE_TIME_OVERBLEED -> Kenw
    int RAI_REDSTONE_TIME_RADIUS -> TEvL
    int RAI_REDSTONE_TIME_PROPIGATION -> mGOE
    long RAI_HOPPER_TIME_FLOOR -> xqad
    long RAI_HOPPER_TIME_CEIL -> gyCE
    long RAI_HOPPER_TIME_MUDDING -> ArGP
    double RAI_HOPPER_TIME_FUNCTION -> ForP
    double RAI_HOPPER_TIME_OVERBLEED -> ooWt
    int RAI_HOPPER_TIME_RADIUS -> lDLL
    int RAI_HOPPER_TIME_PROPIGATION -> afNp
    int RAI_ENTITY_CHUNK_MULTIPLIER -> Aqej
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> CUhk
    int RAI_ENTITY_CHUNK_RADIUS -> DjLq
    long RAI_FLUID_TIME_FLOOR -> NVHO
    long RAI_FLUID_TIME_CEIL -> NxKI
    long RAI_FLUID_TIME_MUDDING -> jFUx
    double RAI_FLUID_TIME_FUNCTION -> VwRM
    double RAI_FLUID_TIME_OVERBLEED -> mhoy
    int RAI_FLUID_TIME_RADIUS -> xhpN
    int RAI_FLUID_TIME_PROPIGATION -> sYaG
    double SMEAR_TICK_ENTITIES_MAX_TICK -> DOyg
    double SMEAR_TICK_TILES_MAX_TICK -> TqLK
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> MlVo
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> uhWl
    double SMEAR_TICK_ENTITIES_AMOUNT -> yReD
    double SMEAR_TICK_TILES_AMOUNT -> RIET
    boolean SMEAR_TICK_ENTITIES_ENABLE -> WWtB
    boolean SMEAR_TICK_TILES_ENABLE -> VwTa
    boolean HOPPER_OVERTICK_ENABLE -> bWsI
    boolean USE_WORLD_CONFIGS -> rhCi
    boolean ENTITY_STACKER_SHOW_PARTICLES -> QouF
    boolean ENTITY_STACKER_SHOW_NAME_TAG -> tvYs
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> MkyJ
    long RAI_CHUNK_TIME_CEIL -> uVyQ
    long RAI_CHUNK_TIME_MUDDING -> ckwm
    double RAI_CHUNK_TIME_FUNCTION -> EvED
    double RAI_CHUNK_TIME_OVERBLEED -> XdIX
    int RAI_CHUNK_TIME_RADIUS -> dVIt
    int RAI_CHUNK_TIME_PROPIGATION -> mrFA
    boolean RAI_CHUNK_TIME_PROPIGATE -> QWCo
    boolean RAI_FLUID_TIME_PROPIGATE -> WrGj
    boolean RAI_ENTITY_PROPIGATE -> dwlQ
    boolean RAI_HOPPER_TIME_PROPIGATE -> cJUc
    boolean RAI_REDSTONE_TIME_PROPIGATE -> mqdh
    java.lang.String ENTITY_STACKER_NAME_TAG_FORMAT -> XBFN
    boolean hrld -> ryEG
    boolean rns -> jpkt
    boolean rrl -> HnJf
    39:667:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    672:689:void doTrack(org.bukkit.plugin.Plugin) -> bXLA
    694:716:void onRead(org.bukkit.plugin.Plugin) -> kHsM
    720:750:void read(java.io.File,boolean) -> bXLA
    754:771:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> bXLA
    776:784:void closeWorldConfig(org.bukkit.World) -> kHsM
    789:902:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> bXLA
    907:944:react.surge.cluster.DataCluster defaultConfig(boolean) -> bXLA
    949:1028:react.glang.GList getDefaultEntitiesForStacking() -> bXLA
    1033:1052:react.glang.GList getDefaultEntitiesForCulling() -> kHsM
    1057:1094:react.glang.GList getDefaultEntitiesForRemoval() -> Difh
    1099:1140:react.glang.GList getDefaultCullRules() -> bhlM
react.Config$1 -> bXLA$1:
    java.io.File val$fConfig -> vQje
    java.io.File val$fConfigExperimental -> xWqG
    org.bukkit.plugin.Plugin val$main -> cBDO
    1:675:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    680:684:void run() -> run
react.Config$2 -> bXLA$2:
    react.api.WorldConfig val$wc -> fJlS
    org.bukkit.World val$w -> loAr
    1:761:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    766:767:void run() -> run
react.Gate -> kHsM:
    react.glang.GMap defaultSettings -> biSu
    react.glang.GSet refresh -> dfhm
    react.glang.GSet destroy -> TVyc
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> NgJy
    45:47:void <clinit>() -> <clinit>
    43:43:void <init>() -> <init>
    51:141:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> bXLA
    147:178:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> bXLA
    183:183:int getChunkCountForView() -> DXdy
    188:188:int getMaxChunksForView() -> SeQk
    193:193:boolean hasFawe() -> JQfN
    198:219:void tickEntityNextTickListTick(org.bukkit.World) -> Difh
    223:227:void resetEntityMaxTick(org.bukkit.World) -> bhlM
    231:231:int getEntityTickMax(org.bukkit.World) -> DXdy
    236:236:int getTileTickMax(org.bukkit.World) -> SeQk
    241:259:void tweakEntityTickMax(org.bukkit.World,int) -> bXLA
    263:280:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> bXLA
    285:289:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> bXLA
    293:305:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> bXLA
    310:314:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> kHsM
    318:336:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> bXLA
    340:344:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> JQfN
    349:352:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> bXLA
    357:360:java.lang.String msg(react.api.ReactPlayer,react.notification.Notification) -> bXLA
    365:368:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> kHsM
    373:373:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> Difh
    378:378:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> bhlM
    383:383:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> DXdy
    388:388:boolean isBadForUnloading() -> GQMo
    393:393:boolean canUnload(org.bukkit.World,int,int) -> bXLA
    400:416:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    422:433:void unloadChunk(org.bukkit.World,int,int) -> kHsM
    437:453:void removeEntity(org.bukkit.entity.Entity) -> bXLA
    457:473:void purgeEntity(org.bukkit.entity.Entity) -> kHsM
    477:498:void cullEntity(org.bukkit.entity.Entity) -> Difh
    503:520:void updateBlock(org.bukkit.block.Block) -> bXLA
    524:528:java.lang.String header(java.lang.String,react.surge.util.C) -> bXLA
    533:533:java.lang.String header(react.surge.util.C) -> bXLA
    539:543:void updateFluid(org.bukkit.block.Block) -> kHsM
    547:548:void refresh(org.bukkit.Chunk) -> kHsM
    553:572:void refreshChunks() -> Usgp
    576:577:void sendBlockChange(org.bukkit.Location) -> bXLA
    43:43:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> OPTh
react.Gate$1 -> kHsM$1:
    react.api.SelectorPosition val$sel -> nlVu
    react.glang.Callback val$prog -> XdHT
    react.glang.Callback val$cb -> MuJX
    1:51:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    56:139:void run() -> run
react.Gate$1$1 -> kHsM$1$1:
    react.Gate$1 this$1 -> YEGw
    java.lang.Object val$o -> pijs
    java.lang.reflect.Constructor val$vectorConstruct -> ckwF
    java.lang.reflect.Constructor val$cuboidConstruct -> bhtE
    java.lang.reflect.Method val$faweFixMethod -> dUhL
    java.lang.Integer[] val$total -> ktNt
    java.lang.Integer[] val$sof -> EvCp
    react.glang.Callback val$prog -> XdHT
    java.lang.Integer val$tot -> vspi
    1:83:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    90:108:void run() -> run
react.Gate$1$2 -> kHsM$1$2:
    react.Gate$1 this$1 -> YEGw
    react.glang.Callback val$prog -> XdHT
    react.glang.Callback val$cb -> MuJX
    java.lang.Integer[] val$total -> ktNt
    1:112:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    119:127:void run() -> run
react.Info -> Difh:
    java.lang.String CORE_REACT_DOT -> bWuN
    java.lang.String CORE_NAME -> pYMu
    java.lang.String CORE_CACHE -> Dipp
    java.lang.String WORLD_CONFIGS -> aCpR
    java.lang.String CORE_DOTYML -> XJWg
    java.lang.String COMMAND_REACT -> miVr
    java.lang.String COMMAND_RAI -> dflL
    java.lang.String COMMAND_ACT_DESCRIPTION -> cBGK
    java.lang.String COMMAND_ACT -> JAPH
    java.lang.String COMMAND_ACT_ALIAS_1 -> tdxj
    java.lang.String COMMAND_ACT_ALIAS_2 -> PSbR
    java.lang.String COMMAND_ACT_USAGE -> MRia
    java.lang.String COMMAND_HELP_DESCRIPTION -> AGTu
    java.lang.String COMMAND_HELP -> biXH
    java.lang.String COMMAND_HELP_ALIAS_1 -> loEJ
    java.lang.String COMMAND_HELP_ALIAS_2 -> dVKn
    java.lang.String COMMAND_HELP_USAGE -> JRRG
    java.lang.String COMMAND_STATUS_DESCRIPTION -> lCoK
    java.lang.String COMMAND_STATUS -> cuJe
    java.lang.String COMMAND_STATUS_ALIAS_1 -> KwVQ
    java.lang.String COMMAND_STATUS_ALIAS_2 -> FpWQ
    java.lang.String COMMAND_STATUS_USAGE -> aDOr
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> HmlU
    java.lang.String COMMAND_CPUSCORE -> WrGs
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> APHI
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> ryEe
    java.lang.String COMMAND_CPUSCORE_USAGE -> VneH
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> LGUQ
    java.lang.String COMMAND_RELOAD -> uOIo
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> fvBx
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> pYMQ
    java.lang.String COMMAND_RELOAD_USAGE -> jpln
    java.lang.String COMMAND_CTP_DESCRIPTION -> kcPC
    java.lang.String COMMAND_CTP -> xytt
    java.lang.String COMMAND_CTP_ALIAS_1 -> tTXB
    java.lang.String COMMAND_CTP_ALIAS_2 -> MIwT
    java.lang.String COMMAND_CTP_USAGE -> iCWK
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> ryEi
    java.lang.String COMMAND_MONITOR -> mXTU
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> FWGx
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> UAPh
    java.lang.String COMMAND_MONITOR_USAGE -> yIxD
    java.lang.String COMMAND_ENV_DESCRIPTION -> JAQa
    java.lang.String COMMAND_ENV -> cdKp
    java.lang.String COMMAND_ENV_ALIAS_1 -> biYY
    java.lang.String COMMAND_ENV_ALIAS_2 -> dDkR
    java.lang.String COMMAND_ENV_USAGE -> fCAh
    java.lang.String COMMAND_VERSION_DESCRIPTION -> pbAg
    java.lang.String COMMAND_VERSION -> GjlV
    java.lang.String COMMAND_VERSION_ALIAS_1 -> KCsj
    java.lang.String COMMAND_VERSION_ALIAS_2 -> HKlX
    java.lang.String COMMAND_VERSION_USAGE -> Coad
    java.lang.String COMMAND_MAP_DESCRIPTION -> SKlK
    java.lang.String COMMAND_MAP -> fvFX
    java.lang.String COMMAND_MAP_ALIAS_1 -> fSbr
    java.lang.String COMMAND_MAP_ALIAS_2 -> qvEf
    java.lang.String COMMAND_MAP_USAGE -> vQnv
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> bXXU
    java.lang.String COMMAND_TOPCHUNK -> rpVl
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> UlDW
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> qJom
    java.lang.String COMMAND_TOPCHUNK_USAGE -> qucp
    java.lang.String COMMAND_GLASS_DESCRIPTION -> awVh
    java.lang.String COMMAND_GLASS -> myyH
    java.lang.String COMMAND_GLASS_ALIAS_1 -> mWvG
    java.lang.String COMMAND_GLASS_ALIAS_2 -> ofmT
    java.lang.String COMMAND_GLASS_USAGE -> bOeY
    java.lang.String COMMAND_SUB_DESCRIPTION -> WrKI
    java.lang.String COMMAND_SUB -> Xcjy
    java.lang.String COMMAND_SUB_ALIAS_1 -> WhyE
    java.lang.String COMMAND_SUB_ALIAS_2 -> sjgp
    java.lang.String COMMAND_SUB_USAGE -> JlDx
    java.lang.String COMMAND_USUB_DESCRIPTION -> uqOS
    java.lang.String COMMAND_USUB -> CxQs
    java.lang.String COMMAND_USUB_ALIAS_1 -> iBxK
    java.lang.String COMMAND_USUB_ALIAS_2 -> iCYK
    java.lang.String COMMAND_USUB_USAGE -> rMsB
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> DsDt
    java.lang.String COMMAND_CBLAME -> XBLK
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> uiBe
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> IiDd
    java.lang.String COMMAND_CBLAME_USAGE -> MRmK
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> lUVh
    java.lang.String COMMAND_ACTIONLOG -> wfWe
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> FWKF
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> QxlP
    java.lang.String COMMAND_ACTIONLOG_USAGE -> fKTP
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> XtoY
    java.lang.String COMMAND_CAPABILITIES -> RYkw
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> lTuR
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> oxQk
    java.lang.String COMMAND_CAPABILITIES_USAGE -> DHTG
    java.lang.String MSG_PERMISSION -> pXpk
    java.lang.String MSG_MONITORING_STARTED -> mqkQ
    java.lang.String MSG_MONITORING_STOPPED -> HvcM
    java.lang.String MSG_ACTIONLOGGING_STARTED -> DivN
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> xXXO
    java.lang.String MSG_GLASS_STARTED -> Vngx
    java.lang.String MSG_GLASS_STOPPED -> INok
    org.bukkit.Color COLOR_HOPPER -> Plvd
    org.bukkit.Color COLOR_BLOCK_UPDATE -> wevB
    org.bukkit.Color COLOR_BLOCK_FROMTO -> Vngt
    org.bukkit.Color COLOR_BLOCK_BURN -> VMEs
    org.bukkit.Color COLOR_BLOCK_DECAY -> afVt
    org.bukkit.Color COLOR_BLOCK_FORM -> AOkL
    java.lang.String NAME_TICK -> PCEF
    java.lang.String NAME_MEMORY -> SwAp
    java.lang.String NAME_CHUNKS -> kssu
    java.lang.String NAME_ENTITIES -> pXos
    java.lang.String STATE_MONITORING_TAB -> CEPP
    java.lang.String STATE_MONITORING_ENABLED -> NUoc
    java.lang.String STATE_MONITORING_HIGH -> fvKK
    java.lang.String STATE_CHANNELS -> XtrA
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> wMGc
    java.lang.String STATE_MAPPING_ENABLED -> dfqx
    java.lang.String STATE_SOUND_PLAYS -> XSPD
    java.lang.String STATE_MONITORING_POSTED -> IOSw
    java.lang.String STATE_MONITORING_LASTTAB -> VLgq
    java.lang.String STATE_GLASSES_ENABLED -> RjpG
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> Pdia
    java.lang.String STATE_PLAYER_HOTBAR -> yAjw
    java.lang.String STATE_PLAYER_SHIFT -> PTHl
    java.lang.String STATE_PLAYER_SCROLL -> Tyfh
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> DGta
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> DXvT
    java.lang.String PERM_ACCESS -> vcUm
    java.lang.String PERM_TELEPORT -> HUBi
    java.lang.String PERM_MONITOR -> LaNk
    java.lang.String PERM_MONITOR_TITLE -> ccoh
    java.lang.String PERM_MONITOR_ACTIONLOG -> ryMH
    java.lang.String PERM_MONITOR_MAP -> Daga
    java.lang.String PERM_MONITOR_ENVIRONMENT -> rWJR
    java.lang.String PERM_MONITOR_GLASSES -> Qglt
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> YMab
    java.lang.String PERM_ACT -> ytnw
    java.lang.String PERM_RAI -> yRkl
    java.lang.String PERM_RAI_CONTROL -> OGqy
    java.lang.String PERM_RAI_ACCESS -> BlcR
    java.lang.String PERM_RAI_MONITOR -> BAnh
    java.lang.String PERM_RELOAD -> XBMR
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> pjUW
    java.lang.String SAMPLER_REDSTONE_TICK -> tmpV
    java.lang.String SAMPLER_ENTITY_TIME -> baLT
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> qvJD
    java.lang.String SAMPLER_TILE_TIME_LOCK -> hYlU
    java.lang.String SAMPLER_TILE_TIME -> UcWL
    java.lang.String SAMPLER_TILE_DROPTICK -> pXsC
    java.lang.String SAMPLER_ENTITY_DROPTICK -> UlHX
    java.lang.String SAMPLER_REDSTONE_SECOND -> UIdg
    java.lang.String SAMPLER_REDSTONE_TIME -> eHSO
    java.lang.String SAMPLER_PHYSICS_TIME -> XlaH
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> VMHl
    java.lang.String SAMPLER_HOPPER_TICK -> esFq
    java.lang.String SAMPLER_HOPPER_SECOND -> Rjnf
    java.lang.String SAMPLER_HOPPER_TIME -> GINE
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> bPJo
    java.lang.String SAMPLER_FLUID_TICK -> rxkO
    java.lang.String SAMPLER_FLUID_SECOND -> jyeC
    java.lang.String SAMPLER_FLUID_TIME -> tnSp
    java.lang.String SAMPLER_TPS -> sjpO
    java.lang.String SAMPLER_TICK -> UJHU
    java.lang.String SAMPLER_TIU -> nSQB
    java.lang.String SAMPLER_MEM -> FgoV
    java.lang.String SAMPLER_FREEMEM -> SKqf
    java.lang.String SAMPLER_MAXMEM -> QhPC
    java.lang.String SAMPLER_ALLOCMEM -> TqXf
    java.lang.String SAMPLER_MAHS -> XAoK
    java.lang.String SAMPLER_CHK -> lnkj
    java.lang.String SAMPLER_ATASK -> lMJO
    java.lang.String SAMPLER_STASK -> RcBb
    java.lang.String SAMPLER_CHK_TIME -> QEkt
    java.lang.String SAMPLER_EXPLOSION_TIME -> XSRI
    java.lang.String SAMPLER_CHKS -> qShP
    java.lang.String SAMPLER_ENT -> nuSX
    java.lang.String SAMPLER_ENTLIV -> NMcI
    java.lang.String SAMPLER_ENTDROP -> MlcI
    java.lang.String SAMPLER_ENTTILE -> dwto
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> Fgmp
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> wUXt
    java.lang.String ACTION_CULL_ENTITIES_NAME -> ECIX
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> NMcN
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> iwDu
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> BmFL
    java.lang.String ACTION_UPDATE_FLUID_NAME -> RYoX
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> qeHv
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> ergs
    java.lang.String ACTION_LOCK_FLUID_STATUS -> prfp
    java.lang.String ACTION_LOCK_FLUID_NAME -> WrQG
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> LiaA
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> uOSE
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> yuPw
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> EeMI
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> Aqqd
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> HmwR
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> pbIn
    java.lang.String ACTION_LOCK_HOPPER_NAME -> DXyi
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> HwIa
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> nApW
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> RRCR
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> CpJg
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> pPgf
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> FpcC
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> imvO
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> skSS
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> PdnE
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> KxCC
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> SLUR
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> AjCh
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> AOpN
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> xaPR
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> TWhY
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> tmuA
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> OGwr
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> rhOf
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> SDDq
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> BlfB
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> XSSo
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> tnVE
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> tvdv
    java.lang.String ACTION_FIX_LIGHTING_NAME -> HCbi
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> qKYO
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> BdVo
    java.lang.String ACTION_COLLECT_GARBAGE -> SwHQ
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> KnoU
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> RQaO
    8:267:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> bhlM:
    java.lang.String BUNDLE_NAME -> Btvx
    java.util.ResourceBundle RESOURCE_BUNDLE -> Iyjb
    java.util.ResourceBundle PRIMARY_BUNDLE -> RHoc
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> DXdy:
    react.React instance -> BSTu
    react.controller.SampleController sampleController -> FySN
    react.controller.PlayerController playerController -> WibK
    react.controller.MonitorController monitorController -> yBOQ
    react.controller.CommandController commandController -> aCyp
    react.controller.ActionController actionController -> ntsQ
    react.controller.FastDecayController fastDecayController -> jWea
    react.controller.EntityStackController entityStackController -> Nohc
    react.controller.GlassController glassController -> oDrL
    react.controller.EntityCullController entityCullController -> maPK
    react.controller.SpikeController spikeController -> DGxQ
    react.controller.SecurityController securityController -> FqCV
    react.controller.RedstoneController redstoneController -> YVYE
    react.controller.HopperController hopperController -> VxCk
    react.controller.PhysicsController physicsController -> cmHI
    react.controller.TickTimeController tickTimeController -> QhTK
    react.controller.RAIController raiController -> AOrU
    react.controller.FluidController fluidController -> aoQt
    react.controller.ChunkController chunkController -> NUxi
    react.controller.GraphController graphController -> BAtt
    react.controller.ChronophyFluidController fluidChronophyController -> WidA
    react.controller.EventController eventController -> TFft
    react.controller.SmearTickController smearTickController -> CEXm
    react.controller.FeatureController featureController -> PTMw
    react.controller.HopperOvertickController hopperPlungeController -> MdWO
    react.controller.LanguageController languageController -> jXIW
    react.controller.RemoteController remoteController -> HTgG
    react.controller.ExplosiveController explosiveController -> NMfr
    react.controller.WorldController worldController -> APTV
    react.controller.MessageController messageController -> sRBI
    43:43:void <init>() -> <init>
    138:146:void enable() -> enable
    152:152:void disable() -> disable
react.React$1 -> DXdy$1:
    react.React this$0 -> JkoE
    1:138:void <init>(react.React) -> <init>
    143:144:void run() -> run
react.action.ActionCollectGarbage -> SeQk:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
react.action.ActionCollectGarbage$1 -> SeQk$1:
    react.action.ActionCollectGarbage this$0 -> IOYg
    react.action.source.IActionSource val$source -> VgAn
    1:29:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> bXLA
react.action.ActionCollectGarbage$1$1 -> SeQk$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> awbG
    long val$mbnex -> YVWy
    long val$mbmem -> wnnf
    react.action.source.IActionSource val$source -> VgAn
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.action.source.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> JQfN:
    long ms -> EmaT
    int lcd -> xYAI
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
    27:27:void access$0(react.action.ActionCullEntities,long) -> bXLA
    28:28:int access$1(react.action.ActionCullEntities) -> bXLA
    27:27:long access$2(react.action.ActionCullEntities) -> kHsM
react.action.ActionCullEntities$1 -> JQfN$1:
    react.action.ActionCullEntities this$0 -> cSTT
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> JQfN$2:
    react.action.ActionCullEntities this$0 -> cSTT
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> JQfN$3:
    react.action.ActionCullEntities this$0 -> cSTT
    react.glang.FinalInteger val$completed -> pPkb
    react.glang.FinalInteger val$total -> uFiK
    react.glang.FinalInteger val$totalCulled -> eQMJ
    react.glang.FinalInteger val$totalChunked -> FpgD
    react.action.source.IActionSource val$source -> VgAn
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> JQfN$4:
    react.action.ActionCullEntities this$0 -> cSTT
    react.action.source.IActionSource val$source -> VgAn
    react.glang.FinalInteger val$totalCulled -> eQMJ
    react.glang.FinalInteger val$totalChunked -> FpgD
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> GQMo:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
react.action.ActionFixLighting$1 -> GQMo$1:
    react.action.ActionFixLighting this$0 -> FOEC
    1:28:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> GQMo$2:
    react.action.ActionFixLighting this$0 -> FOEC
    react.action.source.IActionSource val$source -> VgAn
    int val$ch -> lMPj
    1:77:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> bXLA
    1:1:void run(java.lang.Object) -> bXLA
react.action.ActionFixLighting$3 -> GQMo$3:
    react.action.ActionFixLighting this$0 -> FOEC
    1:88:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> bXLA
    1:1:void run(java.lang.Object) -> bXLA
react.action.ActionLockFluid -> Usgp:
    int lcd -> xYAI
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
react.action.ActionLockFluid$1 -> Usgp$1:
    react.action.ActionLockFluid this$0 -> NMiw
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> Usgp$2:
    react.action.ActionLockFluid this$0 -> NMiw
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> OPTh:
    int lcd -> xYAI
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
react.action.ActionLockHopper$1 -> OPTh$1:
    react.action.ActionLockHopper this$0 -> gpdt
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> OPTh$2:
    react.action.ActionLockHopper this$0 -> gpdt
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> KChC:
    int lcd -> xYAI
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
react.action.ActionLockRedstone$1 -> KChC$1:
    react.action.ActionLockRedstone this$0 -> DsRL
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> KChC$2:
    react.action.ActionLockRedstone this$0 -> DsRL
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> miKq:
    long ms -> EmaT
    int lcd -> xYAI
    boolean fail -> qurG
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> kHsM
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> bXLA
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> bXLA
    26:26:int access$2(react.action.ActionPurgeChunks) -> kHsM
    25:25:long access$3(react.action.ActionPurgeChunks) -> Difh
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> bXLA
react.action.ActionPurgeChunks$1 -> miKq$1:
    react.action.ActionPurgeChunks this$0 -> VxEi
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> miKq$2:
    react.action.ActionPurgeChunks this$0 -> VxEi
    int val$dk -> yBUB
    java.lang.Object val$j -> vlPS
    react.action.source.IActionSource val$source -> VgAn
    react.api.ISelector[] val$selectors -> rgsX
    react.glang.FinalInteger val$acompleted -> mjEj
    react.glang.FinalInteger val$completed -> pPkb
    react.glang.FinalInteger val$total -> uFiK
    react.glang.FinalInteger val$totalCulled -> eQMJ
    react.glang.FinalInteger val$totalChunked -> FpgD
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.action.source.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> bXLA
react.action.ActionPurgeChunks$2$1 -> miKq$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> GIWG
    react.glang.FinalInteger val$acompleted -> mjEj
    react.glang.FinalInteger val$completed -> pPkb
    react.glang.FinalInteger val$total -> uFiK
    react.glang.FinalInteger val$totalCulled -> eQMJ
    react.glang.FinalInteger val$totalChunked -> FpgD
    react.action.source.IActionSource val$source -> VgAn
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> miKq$3:
    react.action.ActionPurgeChunks this$0 -> VxEi
    react.action.source.IActionSource val$source -> VgAn
    react.glang.FinalInteger val$acompleted -> mjEj
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> miKq$4:
    react.action.ActionPurgeChunks this$0 -> VxEi
    org.bukkit.Chunk val$chunk -> PnCx
    java.lang.Runnable val$cb -> LrXe
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> salD:
    long ms -> EmaT
    int lcd -> xYAI
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> kHsM
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> bXLA
    30:30:int access$1(react.action.ActionPurgeEntities) -> bXLA
    29:29:long access$2(react.action.ActionPurgeEntities) -> kHsM
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> bXLA
react.action.ActionPurgeEntities$1 -> salD$1:
    react.action.ActionPurgeEntities this$0 -> DjaS
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> salD$2:
    react.action.ActionPurgeEntities this$0 -> DjaS
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> salD$3:
    react.action.ActionPurgeEntities this$0 -> DjaS
    react.glang.FinalInteger val$completed -> pPkb
    react.glang.FinalInteger val$total -> uFiK
    react.glang.FinalInteger val$totalCulled -> eQMJ
    react.glang.FinalInteger val$totalChunked -> FpgD
    react.action.source.IActionSource val$source -> VgAn
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> salD$4:
    react.action.ActionPurgeEntities this$0 -> DjaS
    react.action.source.IActionSource val$source -> VgAn
    react.glang.FinalInteger val$totalCulled -> eQMJ
    react.glang.FinalInteger val$totalChunked -> FpgD
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> salD$5:
    react.action.ActionPurgeEntities this$0 -> DjaS
    org.bukkit.entity.Entity val$i -> rpcs
    react.glang.FinalInteger val$cu -> MJgb
    int val$k -> nJcy
    org.bukkit.Chunk val$chunk -> PnCx
    java.lang.Runnable val$cb -> LrXe
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> VDHU:
    int lcd -> xYAI
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
react.action.ActionUnlockFluid$1 -> VDHU$1:
    react.action.ActionUnlockFluid this$0 -> qnAX
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> doSd:
    int lcd -> xYAI
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
react.action.ActionUnlockHopper$1 -> doSd$1:
    react.action.ActionUnlockHopper this$0 -> palP
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> eXck:
    int lcd -> xYAI
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
react.action.ActionUnlockRedstone$1 -> eXck$1:
    react.action.ActionUnlockRedstone this$0 -> wwav
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> KChC
    1:1:java.lang.Object get() -> get
react.action.source.AccessActionSource -> rNHN:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> bXLA
    26:33:void sendResponseSuccess(java.lang.String) -> kHsM
    38:45:void sendResponseError(java.lang.String) -> Difh
    50:57:void sendResponseActing(java.lang.String) -> bhlM
react.action.source.ActionHandle -> fJeY:
    react.action.source.ActionHandle AUTOMATIC -> PSoR
    react.action.source.ActionHandle MANUAL -> OQMK
    react.action.source.ActionHandle MUTEX -> IiMt
    react.action.source.ActionHandle[] ENUM$VALUES -> fdoX
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.action.source.ActionHandle[] values() -> values
    1:1:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
react.action.source.ConsoleActionSource -> UjwS:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> bXLA
    18:19:void sendResponseSuccess(java.lang.String) -> kHsM
    24:25:void sendResponseError(java.lang.String) -> Difh
    30:31:void sendResponseActing(java.lang.String) -> bhlM
react.action.source.EmptyActionSource -> ktGm:
    3:3:void <init>() -> <init>
    9:9:void sendResponse(java.lang.String) -> bXLA
    15:15:void sendResponseSuccess(java.lang.String) -> kHsM
    21:21:void sendResponseError(java.lang.String) -> Difh
    27:27:void sendResponseActing(java.lang.String) -> bhlM
react.action.source.IActionSource -> pidT:
    void sendResponse(java.lang.String) -> bXLA
    void sendResponseSuccess(java.lang.String) -> kHsM
    void sendResponseError(java.lang.String) -> Difh
    void sendResponseActing(java.lang.String) -> bhlM
react.action.source.PlayerActionSource -> ERuh:
    org.bukkit.entity.Player p -> TWkV
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> bXLA
    30:31:void sendResponseSuccess(java.lang.String) -> kHsM
    36:37:void sendResponseError(java.lang.String) -> Difh
    42:43:void sendResponseActing(java.lang.String) -> bhlM
react.action.source.RAIActionSource -> RPkQ:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> bXLA
    16:17:void sendResponseSuccess(java.lang.String) -> kHsM
    22:23:void sendResponseError(java.lang.String) -> Difh
    28:29:void sendResponseActing(java.lang.String) -> bhlM
react.api.Action -> oLnK:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> iLVm
    java.lang.String[] nodes -> WXdF
    react.action.source.ActionHandle handle -> OPlY
    react.api.ActionState state -> QNao
    react.api.ActionTargetType target -> aVAL
    react.api.ActionType type -> aMPD
    react.action.source.IActionSource currentSource -> HThh
    double progress -> RHss
    react.glang.GMap defaultSelectors -> iKts
    28:29:void <init>(react.api.ActionType) -> <init>
    31:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> bXLA
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> bXLA
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> miKq
    94:94:react.api.ActionState getState() -> salD
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> DXdy
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> VDHU
    130:130:react.api.ActionType getType() -> doSd
    136:136:react.glang.GMap getDefaultSelectors() -> eXck
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> kHsM
    189:190:void completeAction() -> rNHN
    195:195:react.action.source.IActionSource getCurrentSource() -> fJeY
    201:201:java.lang.String[] getNodes() -> UjwS
    207:208:void setNodes(java.lang.String[]) -> bXLA
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
react.api.ActionAlreadyRunningException -> lnYR:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> pjDd:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> xhie:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> ykmI:
    react.api.ActionState IDLE -> lwcB
    react.api.ActionState RUNNING -> kIju
    react.api.ActionState[] ENUM$VALUES -> htGd
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> YoRo:
    react.api.ActionTargetType POSITIONAL -> rWPv
    react.api.ActionTargetType SYSTEM -> Edqq
    react.api.ActionTargetType[] ENUM$VALUES -> xqvu
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> gUwW:
    react.api.ActionType FIX_LIGHTING -> mOti
    react.api.ActionType UNLOCK_FLUID -> sYwD
    react.api.ActionType LOCK_FLUID -> jFke
    react.api.ActionType UNLOCK_HOPPER -> iCiG
    react.api.ActionType LOCK_HOPPER -> uGKv
    react.api.ActionType UNLOCK_REDSTONE -> qKaB
    react.api.ActionType LOCK_REDSTONE -> MBYO
    react.api.ActionType CULL_ENTITIES -> JktF
    react.api.ActionType COLLECT_GARBAGE -> yRve
    react.api.ActionType PURGE_ENTITIES -> hYvg
    react.api.ActionType PURGE_CHUNKS -> IWoX
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> OPlY
    react.api.ActionTargetType target -> aVAL
    react.api.ActionType[] ENUM$VALUES -> Selk
    6:18:void <clinit>() -> <clinit>
    25:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> ktGm
    50:50:react.api.ActionTargetType getTarget() -> VDHU
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> kkXk:
    react.api.ActivationRangeType ANIMALS -> bXgF
    react.api.ActivationRangeType MONSTERS -> tKwi
    react.api.ActivationRangeType MISC -> DYbK
    react.api.ActivationRangeType[] ENUM$VALUES -> RIXY
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> QNLV:
    int value() -> value
react.api.Async -> uWTE:
react.api.CPUBenchmark -> MRaF:
    org.bukkit.command.CommandSender sender -> sender
    int score -> QqIb
    java.lang.Runnable onFinish -> FWVE
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> pidT
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> bXLA
    13:13:int access$1(react.api.CPUBenchmark) -> kHsM
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> Difh
react.api.CPUBenchmark$1 -> MRaF$1:
    react.api.CPUBenchmark this$0 -> vJMm
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> MRaF$2:
    react.api.CPUBenchmark this$0 -> vJMm
    1:77:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> iBnt:
    react.api.CPUResult ULTRA_SLOW -> lUbJ
    react.api.CPUResult VERY_SLOW -> sjwR
    react.api.CPUResult SLOW -> GQhI
    react.api.CPUResult AVERAGE -> gxva
    react.api.CPUResult GOOD -> ncxa
    react.api.CPUResult FAST -> domC
    react.api.CPUResult VERY_FAST -> UdCM
    react.api.CPUResult ULTRA_FAST -> lgCk
    java.lang.String m -> cBWN
    react.api.CPUResult[] ENUM$VALUES -> ebPI
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> bXLA
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> vtHp:
    react.glang.GMap cache -> cKKQ
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> kHsM
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> Difh
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> ERuh
    54:54:boolean has(java.lang.Object) -> bhlM
react.api.Capability -> BdBn:
    react.api.Capability DUAL_WEILD -> aEEN
    react.api.Capability SCOREBOARD -> lMUF
    react.api.Capability SCOREBOARD_ADVANCED -> xPWU
    react.api.Capability HOPPER -> uWoA
    react.api.Capability ENTITY_ATTRIBUTES -> hcLG
    react.api.Capability ENTITY_AI -> ChCL
    react.api.Capability ACTION_BAR -> OjdS
    react.api.Capability ENTITY_NAMES -> tCit
    react.api.Capability TITLE_BAR -> Iqcm
    react.api.Capability CHUNK_RELIGHTING -> fuvH
    react.api.Capability MONITOR_SUBMISSIVENESS -> rWVX
    react.api.Capability ACCELERATED_PING -> MvAO
    react.api.Capability ENTITY_THROTTLING -> BAye
    react.api.Capability TILE_THROTTLING -> AjKj
    react.api.Capability PASSENGERS -> iTki
    react.glang.GList capabilities -> lfev
    react.surge.util.Protocol version -> vJQJ
    react.api.Flavor flavor -> mYIK
    java.lang.String plugin -> Aila
    java.lang.String name -> name
    14:48:void <clinit>() -> <clinit>
    55:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> RPkQ
    100:100:boolean isFlavorCapable() -> oLnK
    105:105:boolean isVersionCapable() -> lnYR
    110:110:boolean isCapable() -> pjDd
    115:115:react.surge.util.Protocol getVersion() -> xhie
    120:120:react.api.Flavor getFlavor() -> ykmI
    125:125:java.lang.String getPlugin() -> YoRo
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> bXLA
    153:167:void sendNotCapable(react.action.source.IActionSource) -> bXLA
react.api.CapabilityBasis -> CVCy:
    react.api.CapabilityBasis VERSION -> fnEv
    react.api.CapabilityBasis FLAVOR -> qvUo
    react.api.CapabilityBasis PLUGIN -> KEET
    react.api.CapabilityBasis[] ENUM$VALUES -> hHvt
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.CapabilityBasis[] values() -> values
    1:1:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> jpef:
    react.api.ChunkIssue ENTITY -> loVT
    react.api.ChunkIssue HOPPER -> xihD
    react.api.ChunkIssue TNT -> yRwk
    react.api.ChunkIssue REDSTONE -> scIf
    react.api.ChunkIssue FLUID -> fmdj
    react.api.ChunkIssue PHYSICS -> EvXf
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> BlqC
    react.api.ChunkIssue[] ENUM$VALUES -> PmiN
    3:10:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    14:32:double getMS() -> gUwW
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> kkXk
react.api.Clip -> pGcT:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> ckpy:
    org.bukkit.command.CommandSender sender -> sender
    12:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> bXLA
    31:32:void sendResponseSuccess(java.lang.String) -> kHsM
    37:38:void sendResponseError(java.lang.String) -> Difh
    43:44:void sendResponseActing(java.lang.String) -> bhlM
react.api.CullList -> PljT:
    react.glang.GSet toCull -> jiTI
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> bhlM
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> QNLV
react.api.DTest -> Grph:
    6:6:void <init>() -> <init>
    11:62:int test() -> uWTE
react.api.EntityFlag -> XlRF:
    react.api.EntityFlag NAMED -> YpTJ
    react.api.EntityFlag TAMED -> xHHv
    react.api.EntityFlag STACKED -> yAyc
    react.api.EntityFlag RIDDEN -> KwlH
    react.api.EntityFlag LIVING -> SnbR
    react.api.EntityFlag NON_LIVING -> uWqI
    react.api.EntityFlag PASSIVE -> uqcb
    react.api.EntityFlag HOSTILE -> EmjQ
    react.api.EntityFlag MATURE -> EdyH
    react.api.EntityFlag YOUNG -> SvsC
    react.api.EntityFlag UNDERWATER -> qLEM
    react.api.EntityFlag GROUNDED -> DsYA
    react.api.EntityFlag AIRBORNE -> CNQN
    react.api.EntityFlag PROJECTILES -> vlUj
    react.api.EntityFlag CAVES -> MeAb
    react.api.EntityFlag NEARBY -> cJlU
    react.api.EntityFlag LIT -> GcOr
    react.api.EntityFlag LEASHED -> OQUM
    java.lang.String m -> cBWN
    react.api.EntityFlag[] ENUM$VALUES -> prsa
    12:31:void <clinit>() -> <clinit>
    35:38:void <init>(java.lang.String,int,java.lang.String) -> <init>
    42:52:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> DXdy
    57:152:boolean is(org.bukkit.entity.Entity) -> SeQk
    158:158:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> kHtJ:
    react.glang.GSet entityTypes -> qeVR
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> MRaF
react.api.EntitySample -> VTiU:
    react.glang.GMap counts -> feWB
    react.glang.GMap sets -> iTlx
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> iBnt
    45:45:react.glang.GList getTypes() -> vtHp
    50:57:int total() -> BdBn
    62:67:int get(org.bukkit.entity.EntityType) -> bXLA
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> kHsM
    84:96:void add(org.bukkit.entity.Entity) -> bhlM
react.api.Experimental -> mWjq:
react.api.Flavor -> vITR:
    react.api.Flavor ANY -> yKJh
    react.api.Flavor SAFE_MODE -> BucF
    react.api.Flavor CRAFT_BUKKIT -> ChCh
    react.api.Flavor BUKKIT -> rWXQ
    react.api.Flavor SPIGOT -> fuxF
    react.api.Flavor SOGGY_SPIGOT -> Iqdn
    react.api.Flavor PAPER_SPIGOT -> QOJC
    react.api.Flavor TACO_SPIGOT -> cJlD
    react.api.Flavor TORCH_SPIGOT -> mjJm
    react.api.Flavor FORGE_HACK -> CEaH
    react.api.Flavor SPONGE_HACK -> JuHx
    react.api.Flavor[] ENUM$VALUES -> qmfS
    6:18:void <clinit>() -> <clinit>
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> CVCy
    74:79:boolean compatableWith(react.api.Flavor) -> bXLA
    84:84:java.lang.String fancyName() -> jpef
    1:1:react.api.Flavor[] values() -> values
    1:1:react.api.Flavor valueOf(java.lang.String) -> valueOf
react.api.IAction -> dnrm:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> miKq
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> kHsM
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
    react.api.ActionState getState() -> salD
    react.api.ActionTargetType getTarget() -> VDHU
    void setNodes(java.lang.String[]) -> bXLA
    java.lang.String[] getNodes() -> UjwS
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> DXdy
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> doSd
    react.glang.GMap getDefaultSelectors() -> eXck
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> bXLA
    react.api.ISelector[] biselect(react.api.ISelector[]) -> bXLA
    react.action.source.IActionSource getCurrentSource() -> fJeY
    void completeAction() -> rNHN
react.api.ICache -> BdCt:
    react.glang.GSet get(java.lang.Object) -> kHsM
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> Difh
    void clear() -> clear
    boolean has(java.lang.Object) -> bhlM
    react.glang.GList k() -> ERuh
react.api.ICommand -> SnCr:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> pGcT
    java.lang.String[] getPermissions() -> ckpy
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> SeQk
    react.api.SideGate getSideGate() -> PljT
    void registerParameterDescription(java.lang.String,java.lang.String) -> bXLA
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.api.IRecord -> Cfdo:
    java.lang.String getRecordType() -> Grph
    long getRecordTime() -> XlRF
    react.json.JSONObject toJSON() -> kHtJ
    java.lang.Object getRecordObject() -> VTiU
    void fromJSON(react.json.JSONObject) -> bXLA
react.api.IRecordBook -> Digq:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> bXLA
    long getOldestRecordTime() -> mWjq
    void addRecord(react.api.IRecord) -> bXLA
    long getLatestRecordTime() -> vITR
    int countRecords(long,long) -> bXLA
    react.glang.GMap getRecords(long,long) -> kHsM
    int purgeRecordsBefore(long) -> kHsM
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> hQMD:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> dnrm
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> BdCt
    react.surge.util.C getAltColor() -> SnCr
    void setColor(react.surge.util.C,react.surge.util.C) -> bXLA
    int getInterval() -> getInterval
    void setInterval(int) -> kHsM
    void sample() -> Cfdo
    java.lang.String get() -> get
    void construct() -> Digq
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> IOER:
    react.api.SelectionMode getMode() -> hQMD
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> DXdy
    react.glang.GSet getList() -> IOER
    react.glang.GSet getPossibilities() -> eOtF
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> SeQk
    java.lang.String getName() -> getName
react.api.Injection -> eOtF:
    react.api.InjectionMethod value() -> IhWI
react.api.InjectionMethod -> IhWI:
    react.api.InjectionMethod SWAP -> VLyK
    react.api.InjectionMethod SUBSTRATE -> Mdaq
    react.api.InjectionMethod RELOAD -> kSGS
    react.api.InjectionMethod[] ENUM$VALUES -> AXmm
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> JHvN:
    java.lang.String value() -> value
react.api.MSampler -> SvTc:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> JHvN
react.api.MonitorHeading -> kADT:
    react.api.ISampler head -> ObWs
    react.glang.GList children -> wDgT
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> bXLA
    27:27:react.api.ISampler getHead() -> SvTc
    32:33:void setHead(react.api.ISampler) -> kHsM
    37:37:react.glang.GList getChildren() -> kADT
    42:42:java.lang.String getHeadText() -> RPnM
    47:60:java.lang.String getChildText() -> PSYN
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> bXLA
react.api.NoiseGenerator -> RPnM:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> PSYN:
    react.api.NoiseGenerator[] octaves -> uFqX
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> FpPD
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> FpPD:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> VflC
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> avoG
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> avoG:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> bXLA
react.api.Permissable -> TOGP:
    react.api.Permissable ACCESS -> HDQe
    react.api.Permissable TELEPORT -> kJTx
    react.api.Permissable MONITOR -> kBEP
    react.api.Permissable MONITOR_TITLE -> Gsqv
    react.api.Permissable MONITOR_ACTIONLOG -> KgMg
    react.api.Permissable MONITOR_MAP -> oWAl
    react.api.Permissable MONITOR_ENVIRONMENT -> agJs
    react.api.Permissable MONITOR_GLASSES -> DPtj
    react.api.Permissable MONITOR_CHUNK_BLAME -> pPrh
    react.api.Permissable RAI_MONITOR -> UchE
    react.api.Permissable RAI_CONTROL -> VVJW
    react.api.Permissable RAI_ACCESS -> qTWP
    react.api.Permissable RAI -> QNiv
    react.api.Permissable ACT -> VMYH
    react.api.Permissable RELOAD -> HoDi
    java.lang.String node -> bYKw
    react.api.Permissable[] ENUM$VALUES -> dNRF
    7:23:void <clinit>() -> <clinit>
    27:38:void <init>(java.lang.String,int,java.lang.String) -> <init>
    42:42:boolean has(org.bukkit.command.CommandSender) -> bXLA
    47:47:java.lang.String getNode() -> TOGP
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PluginSelfDeleter -> IEvA:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> XmRV
    java.lang.Runnable r -> IhvJ
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> bXLA
react.api.ReactCommand -> WaAY:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> rFXI
    java.lang.String usage -> BmSt
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> sHye
    react.api.SideGate sideGate -> fvYq
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> SeQk
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> bXLA
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> pGcT
    47:47:java.lang.String[] getPermissions() -> ckpy
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> PljT
react.api.ReactException -> aCje:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> paWf:
    react.glang.GMap keystore -> Djgy
    boolean monitoring -> monitoring
    boolean highMonitor -> IOcw
    boolean actionlogging -> Oavc
    boolean glasses -> MlrL
    boolean mapping -> nvAe
    int monitorSelection -> gpoV
    int plays -> USJR
    boolean monitorPosted -> scQW
    int monitorLastSelection -> VUkx
    int switchNotification -> TWut
    int hotbarSlot -> jrHy
    boolean shift -> YpWc
    int scroll -> SCqk
    double lastHeight -> EmnU
    java.util.List channels -> AiqY
    boolean heightMovement -> JAhc
    org.bukkit.entity.Player p -> TWkV
    26:43:void <clinit>() -> <clinit>
    46:99:void <init>(org.bukkit.entity.Player) -> <init>
    103:103:boolean hasChannel(java.lang.String) -> JQfN
    110:117:void save() -> save
    123:130:void load() -> load
    134:134:boolean isMonitoring() -> IEvA
    139:139:boolean isMapping() -> WaAY
    144:144:org.bukkit.entity.Player getP() -> aCje
    149:151:void addChannel(java.lang.String) -> addChannel
    155:161:void removeChannel(java.lang.String) -> removeChannel
    165:167:void removeAllChannels() -> paWf
    171:173:void setMonitoring(boolean) -> kHsM
    177:179:void setMapping(boolean) -> Difh
    183:183:int getMonitorSelection() -> ytbu
    188:190:void setMonitorSelection(int) -> Difh
    194:194:int getHotbarSlot() -> DilA
    199:201:void setHotbarSlot(int) -> bhlM
    205:205:boolean isShifting() -> QgaH
    210:212:void setShifting(boolean) -> bhlM
    216:216:boolean isShift() -> iLBk
    221:223:void setShift(boolean) -> DXdy
    227:227:int getScroll() -> UAHC
    232:234:void setScroll(int) -> DXdy
    238:238:int getMonitorLastSelection() -> wfLT
    243:245:void setMonitorLastSelection(int) -> SeQk
    249:250:void setP(org.bukkit.entity.Player) -> kHsM
    254:254:double getLastHeight() -> LaAR
    259:261:void setLastHeight(double) -> bXLA
    265:265:boolean isHeightMovement() -> XtdU
    270:272:void setHeightMovement(boolean) -> SeQk
    276:276:int getSwitchNotification() -> gMjx
    281:283:void setSwitchNotification(int) -> JQfN
    287:287:boolean getMonitorPosted() -> RaqP
    292:294:void setMonitorPosted(boolean) -> JQfN
    298:298:int getPlays() -> pGeM
    303:305:void setPlays(int) -> GQMo
    309:309:boolean isGlasses() -> nlSM
    314:316:void setGlasses(boolean) -> GQMo
    320:320:boolean isActionlogging() -> ronO
    325:327:void setActionlogging(boolean) -> Usgp
react.api.Record -> ytbu:
    java.lang.String recordType -> JuNU
    long recordTime -> kdIt
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> Grph
    32:32:long getRecordTime() -> XlRF
    38:38:java.lang.Object getRecordObject() -> VTiU
    react.json.JSONObject toJSON() -> kHtJ
    void fromJSON(react.json.JSONObject) -> bXLA
react.api.RecordBook -> DilA:
    java.io.File recordFile -> dFDY
    react.json.JSONObject js -> dpXA
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> bXLA
    79:87:react.api.IRecord getRecord(long) -> bXLA
    react.api.IRecord createDummyRecord(long,java.lang.String) -> bXLA
    95:107:long getOldestRecordTime() -> mWjq
    113:125:long getLatestRecordTime() -> vITR
    130:130:boolean within(long,long,long) -> bXLA
    136:144:int countRecords(long,long) -> bXLA
    150:162:react.glang.GMap getRecords(long,long) -> kHsM
    168:181:int purgeRecordsBefore(long) -> kHsM
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> QgaH:
react.api.SampledChunk -> iLBk:
    org.bukkit.Chunk c -> WaaN
    react.glang.GMap counts -> feWB
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> SnEt
    26:38:void hit(react.api.ChunkIssue,int) -> bXLA
    42:42:org.bukkit.Chunk getC() -> HduL
    47:47:react.glang.GMap getCounts() -> WaAO
react.api.SampledType -> UAHC:
    react.api.SampledType ENTITY_TIME_LOCK -> XltV
    react.api.SampledType TILE_TIME_LOCK -> DkLd
    react.api.SampledType ENTITY_TIME -> opUh
    react.api.SampledType TILE_TIME -> uywG
    react.api.SampledType ENTITY_DROPTICK -> BvHO
    react.api.SampledType TILE_DROPTICK -> SwUs
    react.api.SampledType REDSTONE_TICK_USAGE -> LsCK
    react.api.SampledType REDSTONE_TICK -> Mdbs
    react.api.SampledType REDSTONE_SECOND -> KxPQ
    react.api.SampledType REDSTONE_TIME -> QqOw
    react.api.SampledType PHYSICS_TIME -> vuJR
    react.api.SampledType HOPPER_TICK_USAGE -> kRfb
    react.api.SampledType HOPPER_TICK -> bsAm
    react.api.SampledType HOPPER_SECOND -> nmRS
    react.api.SampledType HOPPER_TIME -> SMCg
    react.api.SampledType FLUID_TICK_USAGE -> xXku
    react.api.SampledType FLUID_TICK -> eayk
    react.api.SampledType FLUID_SECOND -> fKkQ
    react.api.SampledType FLUID_TIME -> sssd
    react.api.SampledType TPS -> cKSO
    react.api.SampledType TICK -> Fprw
    react.api.SampledType TIU -> VfpF
    react.api.SampledType MEM -> WPaO
    react.api.SampledType FREEMEM -> MTFS
    react.api.SampledType MAXMEM -> VEMw
    react.api.SampledType ALLOCMEM -> pbYm
    react.api.SampledType MAHS -> hQpi
    react.api.SampledType CHK_TIME -> dxir
    react.api.SampledType EXPLOSION_TIME -> uPFm
    react.api.SampledType CHK -> Rsug
    react.api.SampledType ATASK -> sssU
    react.api.SampledType STASK -> NhKO
    react.api.SampledType CHKS -> hAQE
    react.api.SampledType ENT -> vtlE
    react.api.SampledType ENTLIV -> nJqH
    react.api.SampledType ENTDROP -> NEeS
    react.api.SampledType ENTTILE -> LjRy
    java.lang.String node -> bYKw
    react.api.SampledType[] ENUM$VALUES -> cKRV
    6:44:void <clinit>() -> <clinit>
    50:50:react.api.ISampler get() -> BlUw
    56:56:java.lang.String toString() -> toString
    59:70:void <init>(java.lang.String,int,java.lang.String) -> <init>
    74:74:java.lang.String getNode() -> TOGP
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> wfLT:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> fByI
    react.surge.util.C altColor -> LjSU
    int interval -> NNUv
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> BdCt
    49:49:react.surge.util.C getAltColor() -> SnCr
    55:55:int getInterval() -> getInterval
    void sample() -> Cfdo
    void construct() -> Digq
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> bXLA
    107:108:void setInterval(int) -> kHsM
react.api.Sector -> LaAR:
    int value() -> value
react.api.SelectionException -> XtdU:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> gMjx:
    react.api.SelectionMode WHITELIST -> kAgh
    react.api.SelectionMode BLACKLIST -> MKRw
    react.api.SelectionMode[] ENUM$VALUES -> GRRm
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> RaqP:
    java.lang.Class objectType -> IWxT
    react.api.SelectionMode mode -> hRRA
    react.glang.GSet list -> SDTR
    react.glang.GSet possibilities -> nddH
    int popoff -> HvxS
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> hQMD
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> DXdy
    43:43:react.glang.GSet getList() -> IOER
    49:49:react.glang.GSet getPossibilities() -> eOtF
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> SeQk
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> JQfN
    98:100:int pop() -> pop
react.api.SelectorEntityType -> pGeM:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> Difh
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> SeQk
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> GQMo
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> nlSM:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> ronO:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> Difh
    29:30:void add(org.bukkit.Chunk,int) -> bXLA
    34:38:void add(org.bukkit.World) -> GQMo
    42:46:void addAll() -> TWWF
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> SeQk
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> GQMo
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> SnEt:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> SeQk
    87:87:java.lang.String getName() -> getName
react.api.Side -> HduL:
    react.api.Side PLAYERS -> ELMR
    react.api.Side CONSOLE -> dhGe
    java.lang.String ss -> skam
    react.api.Side[] ENUM$VALUES -> RAPu
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> yuBf
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> kHsM
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> WaAO:
    react.api.SideGate PLAYERS_ONLY -> toEo
    react.api.SideGate CONSOLES_ONLY -> cmUe
    react.api.SideGate ANYTHING -> sAOA
    int[] $SWITCH_TABLE$react$api$SideGate -> MugR
    react.api.SideGate[] ENUM$VALUES -> bsCg
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> bXLA
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> mXNQ
react.api.SimplexNoiseGenerator -> BlUw:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> mHNa
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> CEGb
react.api.SimplexOctaveGenerator -> TWWF:
    double wScale -> mYPP
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> bXLA
react.api.SpecializedTickLimiter -> yuBf:
    double rMaxTime -> ivvW
    long rStartTime -> IGWv
    double rLastTime -> bHRY
    long rMark -> cCDp
    double tMaxTime -> SUWx
    react.gmath.Average atimes -> NhLU
    react.gmath.Average adropped -> neHI
    int droppedTicks -> Sexr
    boolean entityTick -> RcWQ
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> mXNQ:
    react.glang.GList sources -> QGAv
    react.glang.GList splooge -> Qhdc
    react.glang.GSet destroy -> TVyc
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> bXLA
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> kHsM
    void clipped(org.bukkit.Location) -> kHsM
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> Difh
    boolean isAllowedSource(org.bukkit.Location) -> bhlM
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> bXLA
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> kHsM
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> Difh
react.api.SploogeCounter$1 -> mXNQ$1:
    react.api.SploogeCounter this$0 -> bsGT
    java.util.Iterator val$it -> fmoh
    org.bukkit.Location val$start -> Vfqy
    int val$maxDistance -> oyLF
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> bXLA
react.api.SploogeCounter$1$1 -> mXNQ$1$1:
    react.api.SploogeCounter$1 this$1 -> gNoi
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> CEGb:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> UAJb:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> kHtJ
    38:49:void fromJSON(react.json.JSONObject) -> bXLA
react.api.StackTraceRecordBook -> ndFF:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> kHsM
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> bXLA
react.api.StackedEntity -> lvpb:
    org.bukkit.entity.LivingEntity entity -> kclw
    int count -> count
    double rmx -> HDWm
    org.bukkit.entity.Entity damager -> vAic
    24:36:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    41:46:double getMaxHealth(org.bukkit.entity.LivingEntity) -> bXLA
    51:51:int getAbsoluteMaxCount() -> UAJb
    56:56:int getMaxCount(org.bukkit.entity.LivingEntity) -> kHsM
    61:63:void update() -> update
    67:72:void destroy() -> destroy
    76:103:void signalSize() -> ndFF
    107:107:java.lang.String color(java.lang.String) -> GQMo
    112:113:void setDamager(org.bukkit.entity.Entity) -> JQfN
    117:177:void updateHealth() -> lvpb
    181:182:void heal(double) -> kHsM
    186:187:void setHealth(double) -> setHealth
    191:191:int getEffectiveCount() -> tduK
    196:196:int getEffectiveCount(double) -> Difh
    201:201:double getEffectiveMaxHealth(int) -> Usgp
    206:206:double getRealMaxHealth() -> UbmY
    211:211:double getHealth() -> getHealth
    216:222:void setMaxHealth(double) -> setMaxHealth
    227:236:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> bXLA
    240:240:double getMaxHealth() -> getMaxHealth
    245:245:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    250:250:int getCount() -> getCount
react.api.TitleMonitor -> tduK:
    react.glang.GList headings -> XCFU
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> bXLA
    24:24:int getMaxSelection() -> cSDo
    29:37:int left(int) -> OPTh
    42:50:int right(int) -> KChC
    55:55:react.api.MonitorHeading getHeadFor(int) -> miKq
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> bXLA
    83:100:java.lang.String getHotbarFor(int,boolean) -> bXLA
react.api.Unused -> UbmY:
react.api.WorldConfig -> cSDo:
    boolean allowRai -> uOhQ
    boolean allowActions -> rNnr
    boolean allowRelighting -> tfWe
    boolean allowTileThrottling -> JAlm
    boolean allowEntityThrottling -> gqTT
    boolean allowFastLeafDecay -> vAjJ
    java.util.List assumeNoSideEffectsEntities -> tDTn
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> Usgp
    48:62:void save(org.bukkit.World) -> OPTh
    66:80:void load(org.bukkit.World) -> KChC
react.cache.CachedEntity -> XuIH:
    java.util.UUID uid -> iDUJ
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> VpCQ
    double x -> x
    double y -> y
    double z -> z
    double vx -> JSMf
    double vy -> mQAp
    double vz -> fnOx
    double dx -> Lisv
    double dy -> gycf
    double dz -> neGE
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> GQMo
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> XuIH
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> nBAw
    120:121:void setVx(double) -> bhlM
    125:125:double getVy() -> YLvS
    130:131:void setVy(double) -> DXdy
    135:135:double getVz() -> GbVS
    140:141:void setVz(double) -> SeQk
    145:145:double getDx() -> Whrs
    150:151:void setDx(double) -> JQfN
    155:155:double getDy() -> sYbJ
    160:161:void setDy(double) -> GQMo
    165:165:double getDz() -> srtB
    170:171:void setDz(double) -> Usgp
    175:175:java.util.UUID getUid() -> WGQU
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> nBAw:
    int age -> dVgY
    boolean ageLock -> VobL
    boolean breed -> WsEn
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> GQMo
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> KCms
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> Kenw
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> YLvS:
    org.bukkit.DyeColor dye -> KocN
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> GQMo
    30:30:org.bukkit.DyeColor getDye() -> TEvL
    35:36:void setDye(org.bukkit.DyeColor) -> bXLA
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> GbVS:
    react.glang.GList potionEffects -> lEMr
    boolean canPickupItems -> Buji
    org.bukkit.inventory.ItemStack[] armorContents -> misU
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> eQYn
    double maxHealth -> maxHealth
    int maxAir -> dyKW
    int air -> CyNF
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> GQMo
    63:63:react.glang.GList getPotionEffects() -> mGOE
    68:69:void setPotionEffects(react.glang.GList) -> kHsM
    73:73:boolean isCanPickupItems() -> xqad
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> gyCE
    138:139:void setMaxAir(int) -> salD
    143:143:int getAir() -> ArGP
    148:149:void setAir(int) -> VDHU
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> Whrs:
    boolean sheared -> rNoN
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> GQMo
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> sYbJ:
    org.bukkit.inventory.ItemStack is -> GlHQ
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> GQMo
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> srtB:
    7:7:void <init>() -> <init>
react.command.CommandAct -> WGQU:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> bXLA
    186:192:react.text.RTX getBeginningRTX() -> ForP
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> bXLA
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> kHsM
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> Difh
    331:346:react.glang.GList getSortedCommands() -> ooWt
    351:358:int getPageSize(int) -> doSd
    363:363:boolean isValidPage(int,int) -> bXLA
    368:377:react.glang.GList getPage(int,int) -> kHsM
react.command.CommandActionLog -> KCms:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandBoom -> Kenw:
    16:24:void <init>() -> <init>
    29:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandCPUScore -> TEvL:
    16:24:void <init>() -> <init>
    29:39:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandCapabilities -> mGOE:
    19:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandChunkBlame -> xqad:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandChunkBlame$1 -> xqad$1:
    react.command.CommandChunkBlame this$0 -> iUVL
    org.bukkit.command.CommandSender val$sender -> QWbQ
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> xqad$1$1:
    react.command.CommandChunkBlame$1 this$1 -> apCN
    org.bukkit.command.CommandSender val$sender -> QWbQ
    java.lang.String val$i -> MSfS
    react.glang.GMap val$top -> YFGo
    int val$totalx -> gqSU
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandChunkTP -> gyCE:
    18:26:void <init>() -> <init>
    33:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandEnvironment -> ArGP:
    24:32:void <init>() -> <init>
    37:74:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandGlasses -> ForP:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandHelp -> ooWt:
    28:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> bXLA
    81:87:react.text.RTX getBeginningRTX() -> ForP
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> bXLA
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> kHsM
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> Difh
    208:215:react.glang.GList getSortedCommands() -> ooWt
    220:227:int getPageSize(int) -> doSd
    232:232:boolean isValidPage(int,int) -> bXLA
    237:246:react.glang.GList getPage(int,int) -> kHsM
react.command.CommandHighMonitor -> lDLL:
    16:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandMap -> afNp:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandMonitor -> Aqej:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandReload -> CUhk:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandReload$1 -> CUhk$1:
    react.command.CommandReload this$0 -> wgRy
    org.bukkit.command.CommandSender val$sender -> QWbQ
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> CUhk$1$1:
    react.command.CommandReload$1 this$1 -> kdPm
    org.bukkit.command.CommandSender val$sender -> QWbQ
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> DjLq:
    28:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
    54:63:org.bukkit.inventory.ItemStack makeBook() -> lDLL
    68:94:void addSpikePages(react.glang.GList) -> Difh
    98:108:void addStatusPages(react.glang.GList) -> bhlM
    112:129:int findSlot(org.bukkit.entity.Player) -> Difh
react.command.CommandSubscribe -> NVHO:
    18:27:void <init>() -> <init>
    32:63:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandTopChunk -> NxKI:
    28:36:void <init>() -> <init>
    41:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandUnsubscribe -> jFUx:
    18:27:void <init>() -> <init>
    32:63:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.command.CommandVersion -> VwRM:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> bXLA
react.controller.ActionController -> mhoy:
    int kiv -> Koeh
    react.glang.GMap actions -> rWcN
    react.glang.GMap pending -> dEiS
    react.glang.GList tasks -> tDWW
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> bXLA
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> kHsM
    141:141:react.api.IAction getAction(react.api.ActionType) -> bXLA
    146:147:void registerAction(react.api.IAction) -> bXLA
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> afNp
    241:248:react.glang.GList getActionNames() -> Aqej
react.controller.ChronophyFluidController -> xhpN:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> sYaG:
    boolean firstTickList -> VERQ
    long firstTick -> sQtr
    long lastTick -> ydhT
    react.gmath.Average aCSMS -> Bukg
    react.glang.GMap pluginLoads -> yJtk
    react.glang.GMap playerLoads -> ktpi
    int serverLoads -> oxmK
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> CUhk
    63:73:void tickNextTickList() -> DjLq
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> bXLA
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> bXLA
    171:171:boolean isFirstTickList() -> NVHO
    176:176:long getFirstTick() -> NxKI
    181:181:long getLastTick() -> jFUx
    186:186:react.gmath.Average getaCSMS() -> VwRM
    191:191:react.glang.GMap getPluginLoads() -> mhoy
    196:196:react.glang.GMap getPlayerLoads() -> xhpN
    201:201:int getServerLoads() -> sYaG
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> bXLA
    29:29:int access$1(react.controller.ChunkController) -> kHsM
    29:29:void access$2(react.controller.ChunkController,int) -> bXLA
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> Difh
react.controller.ChunkController$1 -> sYaG$1:
    react.controller.ChunkController this$0 -> nvJi
    org.bukkit.event.world.ChunkLoadEvent val$e -> KDql
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> Difh
    1:1:void run(java.lang.Object) -> bXLA
react.controller.CommandController -> DOyg:
    react.glang.GList commands -> qLOa
    boolean k -> JcrR
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> Usgp
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> OPTh
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> bXLA
    317:317:react.glang.GList getCommands() -> DOyg
    322:323:void setCommands(react.glang.GList) -> DXdy
    327:327:boolean isK() -> TqLK
    332:333:void setK(boolean) -> OPTh
react.controller.EntityCullController -> TqLK:
    react.glang.GSet flags -> TrQP
    react.glang.GSet defer -> nKVa
    react.glang.GSet prefer -> TqpK
    react.glang.GMap maxs -> VgTK
    19:19:void <init>() -> <init>
    29:34:void start() -> start
    40:40:void stop() -> stop
    46:46:void tick() -> tick
    50:200:void repopulateRules() -> MlVo
    204:217:int cull(org.bukkit.Chunk) -> bhlM
    222:346:int partialCull(org.bukkit.Chunk) -> DXdy
react.controller.EntityStackController -> MlVo:
    react.glang.GList stacks -> Evcs
    21:23:void <init>() -> <init>
    28:29:void start() -> start
    34:40:void stop() -> stop
    45:60:void tick() -> tick
    65:118:void stack(react.glang.GList) -> SeQk
    122:127:boolean isStacked(org.bukkit.entity.LivingEntity) -> Difh
    132:145:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> bhlM
    151:169:void on(org.bukkit.event.entity.EntityDamageEvent) -> bXLA
    174:193:void on(org.bukkit.event.entity.EntityDamageByEntityEvent) -> bXLA
    197:212:void merge(react.api.StackedEntity,react.api.StackedEntity) -> bXLA
    216:282:void checkNear(org.bukkit.entity.LivingEntity) -> DXdy
    287:327:void on(org.bukkit.event.entity.EntitySpawnEvent) -> bXLA
react.controller.EntityStackController$1 -> MlVo$1:
    react.controller.EntityStackController this$0 -> mGqg
    org.bukkit.event.entity.EntitySpawnEvent val$e -> ioJv
    1:294:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    299:324:void run() -> run
react.controller.EventController -> uhWl:
    react.lagmap.LagMap map -> aUqK
    react.glang.GMap slots -> awtI
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> bXLA
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> bXLA
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> bXLA
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> bXLA
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> bXLA
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> bXLA
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> bXLA
react.controller.ExplosiveController -> yReD:
    boolean firstTickList -> VERQ
    long firstTick -> sQtr
    long lastTick -> ydhT
    react.gmath.Average aCSMS -> Bukg
    15:15:void <init>() -> <init>
    25:30:void start() -> start
    34:47:void flushTickList() -> CUhk
    51:61:void tickNextTickList() -> DjLq
    66:67:void stop() -> stop
    73:74:void tick() -> tick
    79:88:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> kHsM
    93:94:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> bXLA
    98:98:boolean isFirstTickList() -> NVHO
    103:103:long getFirstTick() -> NxKI
    108:108:long getLastTick() -> jFUx
    113:113:react.gmath.Average getaCSMS() -> VwRM
react.controller.FastDecayController -> RIET:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> WHTE
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> bXLA
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> bXLA
    74:155:void checkBreak(org.bukkit.block.Block) -> Difh
    159:190:void decay(org.bukkit.block.Block) -> bhlM
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> DXdy
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> uhWl
react.controller.FastDecayController$1 -> RIET$1:
    react.controller.FastDecayController this$0 -> WsHO
    react.glang.GMap val$locs -> bbFK
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> Difh
    99:99:boolean isAllowedSource(org.bukkit.Location) -> bhlM
    105:124:void clipped(org.bukkit.Location) -> kHsM
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> bXLA
react.controller.FastDecayController$1$1 -> RIET$1$1:
    react.controller.FastDecayController$1 this$1 -> lEOt
    react.glang.GMap val$locs -> bbFK
    int val$i -> MeIy
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> RIET$2:
    react.controller.FastDecayController this$0 -> WsHO
    org.bukkit.block.Block val$b -> scWB
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FeatureController -> WWtB:
    react.feature.INMSBinding trueBinding -> JdRD
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> yReD
    85:85:java.lang.String getPackageVersion() -> RIET
    90:90:boolean hasBinding() -> WWtB
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> bXLA
react.controller.FluidController -> VwTa:
    react.glang.GSet ignore -> DkQY
    int flowsPerTick -> xXqw
    int flowsPerSecond -> BeKv
    react.gmath.Average aFST -> ndfr
    react.gmath.Average aFSS -> QNrg
    react.gmath.Average aFSMS -> TrOc
    boolean firstTickList -> VERQ
    long firstTick -> sQtr
    long lastTick -> ydhT
    react.glang.GSet frozen -> PLPg
    react.glang.GMap queue -> LPdt
    react.glang.GMap freezeTimes -> pHkA
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> SeQk
    68:76:void checkChunks() -> VwTa
    80:97:void checkChunk(org.bukkit.Chunk) -> JQfN
    101:107:void queue(org.bukkit.block.Block) -> SeQk
    111:111:boolean isFrozen(org.bukkit.Chunk) -> GQMo
    116:117:void freeze(org.bukkit.Chunk) -> Usgp
    121:127:void unfreeze(org.bukkit.Chunk) -> OPTh
    131:138:void freeze(org.bukkit.Chunk,long) -> bXLA
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> CUhk
    172:182:void tickNextTickList() -> DjLq
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> bXLA
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> bXLA
    248:248:react.glang.GSet getIgnore() -> bWsI
    253:253:int getTransfersPerTick() -> rhCi
    258:258:int getTransfersPerSecond() -> QouF
    263:263:react.gmath.Average getaFST() -> tvYs
    268:268:react.gmath.Average getaFSS() -> MkyJ
    273:273:react.gmath.Average getaFSMS() -> uVyQ
    278:278:boolean isFirstTickList() -> NVHO
    283:283:long getFirstTick() -> NxKI
    288:288:long getLastTick() -> jFUx
    293:293:react.glang.GSet getFrozen() -> ckwm
    298:298:react.glang.GMap getQueue() -> EvED
    303:303:react.glang.GMap getFreezeTimes() -> XdIX
react.controller.GlassController -> bWsI:
    react.glang.GMap q -> DINc
    react.glang.GList g -> wENl
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:137:void tick() -> tick
    141:141:boolean isUsingGlasses(org.bukkit.entity.Player) -> bhlM
    146:146:boolean canUseGlasses(org.bukkit.entity.Player) -> DXdy
    151:167:void toggleGlasses(org.bukkit.entity.Player) -> SeQk
    172:177:void on(org.bukkit.event.block.BlockPhysicsEvent) -> bXLA
    182:187:void on(org.bukkit.event.block.BlockFromToEvent) -> bXLA
    192:197:void on(org.bukkit.event.block.BlockBurnEvent) -> bXLA
    202:207:void on(org.bukkit.event.block.BlockFormEvent) -> bXLA
    212:217:void on(org.bukkit.event.block.BlockFadeEvent) -> bXLA
    222:234:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> bXLA
    36:36:react.glang.GList access$0(react.controller.GlassController) -> bXLA
react.controller.GlassController$1 -> bWsI$1:
    react.controller.GlassController this$0 -> VDpU
    react.glang.GMap val$cc -> lERk
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:135:void run() -> run
react.controller.GlassController$1$1 -> bWsI$1$1:
    react.controller.GlassController$1 this$1 -> aMcd
    org.bukkit.Location val$i -> fecs
    org.bukkit.entity.Player val$j -> nTJW
    1:108:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    113:118:void run() -> run
react.controller.GraphController -> rhCi:
    react.glang.GMap g -> UldV
    react.glang.GMap gr -> fedQ
    react.glang.GMap gra -> BvOW
    41:41:void <init>() -> <init>
    50:85:void start() -> start
    90:96:void stop() -> stop
    101:128:void tick() -> tick
    133:150:void on(org.bukkit.event.player.PlayerJoinEvent) -> bXLA
    154:176:void createGraphs(react.graph.GraphMode,org.bukkit.entity.Player,react.glang.GList) -> bXLA
    180:183:void addSystem(org.bukkit.entity.Player,react.glang.GList) -> bXLA
    187:191:void addTick(org.bukkit.entity.Player,react.glang.GList) -> kHsM
    195:199:void addMemory(org.bukkit.entity.Player,react.glang.GList) -> Difh
    203:204:void addEod(org.bukkit.entity.Player,react.glang.GList) -> bhlM
    208:217:void addPhysics(org.bukkit.entity.Player,react.glang.GList) -> DXdy
    221:224:void addReact(org.bukkit.entity.Player,react.glang.GList) -> SeQk
    228:274:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> bXLA
    279:319:void on(org.bukkit.event.player.PlayerMoveEvent) -> bXLA
    325:325:void on(react.event.ReactScrollEvent) -> bXLA
    329:360:void toggleMapping(org.bukkit.entity.Player) -> JQfN
    364:396:void toggleMappingEod(org.bukkit.entity.Player) -> GQMo
    400:400:react.glang.GMap getG() -> dVIt
    405:405:react.glang.GMap getGr() -> mrFA
    44:44:react.glang.GMap access$0(react.controller.GraphController) -> bXLA
    43:43:react.glang.GMap access$1(react.controller.GraphController) -> kHsM
react.controller.GraphController$1 -> rhCi$1:
    react.controller.GraphController this$0 -> CgpP
    1:65:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    70:83:void run() -> run
react.controller.GraphController$2 -> rhCi$2:
    react.controller.GraphController this$0 -> CgpP
    1:101:void <init>(react.controller.GraphController) -> <init>
    106:110:void run() -> run
react.controller.GraphController$3 -> rhCi$3:
    react.controller.GraphController this$0 -> CgpP
    org.bukkit.event.player.PlayerJoinEvent val$e -> BBib
    1:133:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    138:148:void run() -> run
react.controller.HopperController -> QouF:
    react.glang.GSet ignore -> DkQY
    int transfersPerTick -> qLQt
    int transfersPerSecond -> bbHh
    react.gmath.Average aHST -> Kfvh
    react.gmath.Average aHSS -> sbyD
    react.gmath.Average aHSMS -> XSkI
    boolean firstTickList -> VERQ
    long firstTick -> sQtr
    long lastTick -> ydhT
    react.glang.GSet frozen -> PLPg
    react.glang.GMap queue -> LPdt
    react.glang.GMap freezeTimes -> pHkA
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> SeQk
    65:73:void checkChunks() -> VwTa
    77:94:void checkChunk(org.bukkit.Chunk) -> JQfN
    98:104:void queue(org.bukkit.block.Block) -> SeQk
    108:108:boolean isFrozen(org.bukkit.Chunk) -> GQMo
    113:114:void freeze(org.bukkit.Chunk) -> Usgp
    118:124:void unfreeze(org.bukkit.Chunk) -> OPTh
    128:135:void freeze(org.bukkit.Chunk,long) -> bXLA
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> CUhk
    169:179:void tickNextTickList() -> DjLq
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> bXLA
    207:207:react.glang.GSet getIgnore() -> bWsI
    212:212:int getTransfersPerTick() -> rhCi
    217:217:int getTransfersPerSecond() -> QouF
    222:222:react.gmath.Average getaHST() -> QWCo
    227:227:react.gmath.Average getaHSS() -> WrGj
    232:232:react.gmath.Average getaHSMS() -> dwlQ
    237:237:boolean isFirstTickList() -> NVHO
    242:242:long getFirstTick() -> NxKI
    247:247:long getLastTick() -> jFUx
    252:252:react.glang.GSet getFrozen() -> ckwm
    257:257:react.glang.GMap getQueue() -> EvED
    262:262:react.glang.GMap getFreezeTimes() -> XdIX
react.controller.HopperOvertickController -> tvYs:
    react.glang.GList possiblePlunge -> gFdd
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> bXLA
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> bXLA
react.controller.LanguageController -> MkyJ:
    java.io.File languageFolder -> uqoW
    int oldVersion -> jjAG
    java.io.File dlf -> FOWk
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> cJUc
    160:221:void downloadAll(boolean) -> KChC
    225:261:void downloadLanguage(java.lang.String) -> Usgp
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> OPTh
    315:315:java.io.File getFileForLanguage(java.lang.String) -> KChC
    320:332:void writeDefaults() -> mqdh
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> bXLA
    263:263:void access$1(react.controller.LanguageController) -> bXLA
react.controller.LanguageController$1 -> MkyJ$1:
    react.controller.LanguageController this$0 -> mPeo
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> MkyJ$2:
    react.controller.LanguageController this$0 -> mPeo
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> bXLA
react.controller.LanguageController$2$1 -> MkyJ$2$1:
    react.controller.LanguageController$2 this$1 -> dglu
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> bXLA
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> bXLA
    121:121:void onDownloadStarted(react.gnet.download.Download) -> bXLA
    126:128:void onDownloadFinished(react.gnet.download.Download) -> kHsM
    134:134:void onDownloadFailed(react.gnet.download.Download) -> Difh
react.controller.LanguageController$3 -> MkyJ$3:
    react.controller.LanguageController this$0 -> mPeo
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> MkyJ$3$1:
    react.controller.LanguageController$3 this$1 -> dhNP
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> MkyJ$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> UtsV
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> MkyJ$4:
    react.controller.LanguageController this$0 -> mPeo
    java.io.File val$dld -> LGuc
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> bXLA
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> bXLA
    245:245:void onDownloadStarted(react.gnet.download.Download) -> bXLA
    250:251:void onDownloadFinished(react.gnet.download.Download) -> kHsM
    257:257:void onDownloadFailed(react.gnet.download.Download) -> Difh
react.controller.MessageController -> uVyQ:
    react.glang.GList notes -> mXuc
    17:17:void <init>() -> <init>
    23:24:void queue(react.notification.Notification) -> bXLA
    29:39:void start() -> start
    44:46:void stop() -> stop
    51:57:void tick() -> tick
    61:77:void subscribe(org.bukkit.entity.Player,react.notification.Note) -> bXLA
    81:97:void unsubscribe(org.bukkit.entity.Player,react.notification.Note) -> kHsM
    101:121:react.glang.GList getSubscriptions(org.bukkit.entity.Player) -> Usgp
    126:131:boolean isSubscribed(org.bukkit.entity.Player,react.notification.Note) -> Difh
    136:146:void unsubscribeAll(org.bukkit.entity.Player) -> OPTh
    150:163:void subscribeAll(org.bukkit.entity.Player) -> KChC
    167:174:void process(react.notification.Notification) -> kHsM
    19:19:react.glang.GList access$0(react.controller.MessageController) -> bXLA
react.controller.MessageController$1 -> uVyQ$1:
    react.controller.MessageController this$0 -> ghfb
    1:31:void <init>(react.controller.MessageController) -> <init>
    36:37:void run(java.lang.String) -> miKq
    1:1:void run(java.lang.Object) -> bXLA
react.controller.MonitorController -> ckwm:
    int maxCooldown -> PfEd
    react.api.TitleMonitor titleMonitor -> FXHF
    react.glang.GMap posts -> skgu
    react.slate.PhantomSlate sb -> apFo
    boolean ready -> NgoF
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> XBFN
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> miKq
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> salD
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> ryEG
    179:184:float calcVolume(react.api.ReactPlayer) -> bXLA
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> VDHU
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> doSd
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> eXck
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> rNHN
    219:223:void startMonitoring(org.bukkit.entity.Player) -> fJeY
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> UjwS
    242:247:void startActionLogging(org.bukkit.entity.Player) -> ktGm
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> pidT
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> kHsM
    279:291:void processPlayer(react.api.ReactPlayer) -> Difh
    296:296:void handleActionLog(org.bukkit.entity.Player) -> ERuh
    300:324:void handleTriggers(react.api.ReactPlayer) -> bhlM
    328:367:void handleScrolling(react.api.ReactPlayer) -> DXdy
    371:399:void handleShifting(react.api.ReactPlayer) -> SeQk
    403:425:void handlePosting(react.api.ReactPlayer) -> JQfN
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> bXLA
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> bXLA
    471:501:void tickMonitor(react.api.ReactPlayer) -> GQMo
    505:505:react.api.TitleMonitor getTitleMonitor() -> jpkt
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> bXLA
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> bXLA
    539:552:void onTick() -> HnJf
    556:578:void updateActionBoard() -> vQje
    583:583:java.lang.String getTickName() -> xWqG
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> bXLA
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> bXLA
    41:41:void access$2(react.controller.MonitorController,boolean) -> bXLA
    41:41:boolean access$3(react.controller.MonitorController) -> kHsM
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> Difh
react.controller.MonitorController$1 -> ckwm$1:
    react.controller.MonitorController this$0 -> ghen
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> ckwm$2:
    react.controller.MonitorController this$0 -> ghen
    1:556:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> EvED:
    react.glang.GMap samples -> kmCJ
    int redstonePerTick -> lERB
    int redstonePerSecond -> kAmf
    boolean firstTickList -> VERQ
    long firstTick -> sQtr
    long lastTick -> ydhT
    react.gmath.Average aRSMS -> vJaa
    react.gmath.Average aRST -> BBlF
    react.gmath.Average aRSS -> ioQA
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> bXLA
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> bXLA
    72:79:void flushTickList() -> CUhk
    83:93:void tickNextTickList() -> DjLq
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> KChC
    121:122:void onPhysics(org.bukkit.Chunk) -> miKq
    126:127:void onHopper(org.bukkit.Chunk) -> salD
    131:132:void onFluid(org.bukkit.Chunk) -> VDHU
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> bXLA
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> bXLA
    156:176:void onTick() -> HnJf
    181:181:java.lang.String getTickName() -> xWqG
    186:186:react.glang.GMap getSamples() -> cBDO
    191:191:int getRedstonePerTick() -> fJlS
    196:196:int getRedstonePerSecond() -> loAr
    201:201:boolean isFirstTickList() -> NVHO
    206:206:long getFirstTick() -> NxKI
    211:211:long getLastTick() -> jFUx
    216:216:react.gmath.Average getaRSMS() -> biSu
    221:221:react.gmath.Average getaRST() -> dfhm
    226:226:react.gmath.Average getaRSS() -> TVyc
react.controller.PhysicsController$1 -> EvED$1:
    react.controller.PhysicsController this$0 -> vldm
    1:168:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> XdIX:
    react.glang.GList players -> vtuV
    react.glang.GSet save -> WakD
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> RPkQ
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> bXLA
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> oLnK
    113:113:react.glang.GList getPlayers() -> NgJy
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> bXLA
react.controller.PlayerController$1 -> XdIX$1:
    react.controller.PlayerController this$0 -> oqAx
    react.glang.GList val$toSave -> VpIu
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> dVIt:
    react.rai.IRAI rai -> wogg
    boolean raiEnabled -> jOoJ
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    19:19:react.rai.IRAI access$0(react.controller.RAIController) -> bXLA
react.controller.RAIController$1 -> dVIt$1:
    react.controller.RAIController this$0 -> RlNi
    1:46:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> mrFA:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> Difh
react.controller.ReactServerInfo -> QWCo:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> nlVu
    27:27:int dgetGameProtocol() -> XdHT
    33:33:java.lang.String dgetGameVersion() -> MuJX
    39:39:java.lang.String dgetReactVersion() -> YEGw
    45:45:int dgetMaxPlayers() -> pijs
    51:58:react.glang.GList dgetConnectedPlayers() -> ckwF
    64:64:int dgetViewDistance() -> bhtE
    70:70:int dgetGamePort() -> dUhL
    76:76:java.lang.String dgetGameAddress() -> ktNt
    82:89:react.glang.GList dgetRemotePlugins() -> EvCp
    95:102:react.glang.GList dgetWorlds() -> vspi
    108:108:react.glang.GList dgetActions() -> bWuN
    114:114:react.glang.GList dgetSamplers() -> pYMu
react.controller.RedstoneController -> WrGj:
    react.glang.GSet ignore -> DkQY
    react.glang.GSet frozen -> PLPg
    react.glang.GMap queue -> LPdt
    react.glang.GMap freezeTimes -> pHkA
    int redstonePerTick -> lERB
    int redstonePerSecond -> kAmf
    react.gmath.Average aRST -> BBlF
    react.gmath.Average aRSS -> ioQA
    react.gmath.Average aRSMS -> vJaa
    boolean firstTickList -> VERQ
    long firstTick -> sQtr
    long lastTick -> ydhT
    react.glang.GMap trackers -> vKBM
    27:27:void <init>() -> <init>
    46:82:void start() -> start
    87:88:void on(org.bukkit.event.world.WorldLoadEvent) -> bXLA
    93:95:void on(org.bukkit.event.world.WorldUnloadEvent) -> bXLA
    100:106:void stop() -> stop
    110:115:void releaseChunk(org.bukkit.Chunk) -> SeQk
    120:126:void tick() -> tick
    130:138:void checkChunks() -> VwTa
    142:159:void checkChunk(org.bukkit.Chunk) -> JQfN
    163:169:void queue(org.bukkit.block.Block) -> SeQk
    173:173:boolean isFrozen(org.bukkit.Chunk) -> GQMo
    178:179:void freeze(org.bukkit.Chunk) -> Usgp
    183:190:void flushTickList() -> CUhk
    194:204:void tickNextTickList() -> DjLq
    208:214:void unfreeze(org.bukkit.Chunk) -> OPTh
    218:225:void freeze(org.bukkit.Chunk,long) -> bXLA
    230:231:void on(org.bukkit.event.world.ChunkUnloadEvent) -> bXLA
    236:249:void on(org.bukkit.event.block.BlockPhysicsEvent) -> bXLA
    254:267:void on(org.bukkit.event.block.BlockFromToEvent) -> bXLA
    271:271:react.glang.GSet getIgnore() -> bWsI
    276:276:react.glang.GSet getFrozen() -> ckwm
    281:281:react.glang.GMap getQueue() -> EvED
    286:286:react.glang.GMap getFreezeTimes() -> XdIX
    291:291:int getRedstonePerTick() -> fJlS
    296:296:int getRedstonePerSecond() -> loAr
    301:301:react.gmath.Average getaRST() -> dfhm
    306:306:react.gmath.Average getaRSS() -> TVyc
    311:311:react.gmath.Average getaRSMS() -> biSu
    316:316:boolean isFirstTickList() -> NVHO
    321:321:long getFirstTick() -> NxKI
    326:326:long getLastTick() -> jFUx
react.controller.RemoteController -> dwlQ:
    react.remote.server.RemoteServer remoteServer -> UcvG
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> Dipp
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> bXLA
react.controller.RemoteController$1 -> dwlQ$1:
    react.controller.RemoteController this$0 -> FXJq
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> dwlQ$2:
    react.controller.RemoteController this$0 -> FXJq
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> aCpR
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> XJWg
react.controller.SampleController -> cJUc:
    react.glang.GMap samplers -> MvRF
    react.surge.server.SuperSampler ss -> logp
    int cd -> hAXn
    27:33:void <init>() -> <init>
    37:63:boolean checkThreads() -> miVr
    68:73:void restartSuperSampler() -> dflL
    77:78:void registerSampler(react.api.ISampler) -> Difh
    82:82:react.api.ISampler getSampler(java.lang.String) -> salD
    87:130:void constructSamplers() -> cBGK
    135:138:void start() -> start
    143:146:void stop() -> stop
    152:152:void tick() -> tick
    156:156:react.surge.server.SuperSampler getSuperSampler() -> JAPH
    162:184:void onTick() -> HnJf
    189:189:java.lang.String getTickName() -> xWqG
    194:194:react.glang.GMap getSamplers() -> tdxj
    199:199:react.surge.server.SuperSampler getSs() -> PSbR
    204:204:int getCd() -> MRia
    209:216:react.glang.GList getSamplerNames() -> AGTu
react.controller.SecurityController -> mqdh:
    java.lang.String ipa -> aEUc
    react.glang.GList failures -> YySh
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> VDHU
    41:74:void checkForIP() -> biXH
    78:91:void scan(java.lang.Runnable) -> bXLA
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> mqdh$1:
    react.controller.SecurityController this$0 -> NqBe
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> mqdh$2:
    java.lang.String val$ip -> KDtb
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> mqdh$3:
    java.lang.Thread val$t -> KDuC
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> XBFN:
    react.glang.GMap etl -> Eefj
    react.glang.GMap ttl -> Jtup
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> bXLA
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> bXLA
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> miKq
    143:160:void releaseWorld(org.bukkit.World) -> salD
    164:181:double getUniversalEntityTick() -> loEJ
    186:203:double getUniversalEntityLimit() -> dVKn
    208:225:double getUniversalTileLimit() -> JRRG
    230:247:double getUniversalTileTick() -> lCoK
    252:264:double getUniversalEntityDroppedTicks() -> cuJe
    269:281:double getUniversalTileDroppedTicks() -> KwVQ
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> bXLA
    301:312:void setTileTickLimit(org.bukkit.World,double) -> kHsM
    316:321:double getEntityTickLimit(org.bukkit.World) -> VDHU
    326:331:double getTileTickLimit(org.bukkit.World) -> doSd
    336:341:double getLastEntityTick(org.bukkit.World) -> eXck
    346:351:double getLastTileTick(org.bukkit.World) -> rNHN
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> fJeY
    366:371:double getTileDroppedTicks(org.bukkit.World) -> UjwS
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> bXLA
react.controller.SpikeController -> ryEG:
    react.glang.GMap spikes -> VETf
    26:28:void <init>() -> <init>
    33:60:void start() -> start
    65:66:void stop() -> stop
    72:108:void onTick() -> HnJf
    113:113:java.lang.String getTickName() -> xWqG
    121:121:void tick() -> tick
    125:125:react.glang.GMap getSpikes() -> FpWQ
    130:167:void whoFuckingDidThis(react.glang.Callback) -> bXLA
    28:28:react.glang.GMap access$0(react.controller.SpikeController) -> bXLA
react.controller.SpikeController$1 -> ryEG$1:
    react.controller.SpikeController this$0 -> qmuU
    1:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    40:58:void run() -> run
react.controller.SpikeController$1$1 -> ryEG$1$1:
    react.controller.SpikeController$1 this$1 -> ECcn
    1:40:void <init>(react.controller.SpikeController$1) -> <init>
    45:56:void run() -> run
react.controller.SpikeController$2 -> ryEG$2:
    react.controller.SpikeController this$0 -> qmuU
    react.glang.GMap val$vv -> Qyjq
    1:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    80:106:void run() -> run
react.controller.SpikeController$3 -> ryEG$3:
    react.controller.SpikeController this$0 -> qmuU
    java.lang.Thread val$t -> KDuC
    react.glang.Callback val$callback -> wNDk
    1:132:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    137:165:void run() -> run
react.controller.TickTimeController -> jpkt:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> HnJf:
    16:16:void <init>() -> <init>
    21:27:void start() -> start
    32:38:void stop() -> stop
    43:55:void tick() -> tick
    60:61:void on(org.bukkit.event.world.WorldUnloadEvent) -> bXLA
react.event.ReactEvent -> vQje:
    org.bukkit.event.HandlerList handlers -> vSRR
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> xWqG:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> cBDO:
    react.event.ScrollDirection direction -> vttQ
    boolean cancellled -> CqCa
    int amount -> HxCD
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> aDOr
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> HmlU
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> fJlS:
    react.event.ScrollDirection DOWN -> gNuV
    react.event.ScrollDirection UP -> fTck
    react.event.ScrollDirection[] ENUM$VALUES -> DACK
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.feature.INMSBinding -> loAr:
    java.lang.String getPackageVersion() -> RIET
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> bXLA
react.feature.NMSBinding -> biSu:
    java.lang.String packageVersion -> TYBY
    7:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> RIET
react.feature.NMSBinding10 -> dfhm:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> bXLA
react.feature.NMSBinding11 -> TVyc:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> bXLA
react.feature.NMSBinding12 -> NgJy:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> bXLA
react.feature.NMSBinding8 -> nlVu:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> bXLA
react.feature.NMSBinding9 -> XdHT:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> bXLA
react.gbench.Profiler -> MuJX:
    long nanos -> HxBn
    long startNano -> Qpys
    long millis -> SoPl
    long startMillis -> yvQM
    double time -> UJeS
    boolean profiling -> Bdpf
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> eXck
    78:78:double getTicks() -> WrGs
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> APHI
    93:93:double getHours() -> ryEe
    98:98:double getMilliseconds() -> VneH
    103:103:long getNanoseconds() -> LGUQ
    108:108:long getNanos() -> uOIo
    113:113:long getStartNano() -> fvBx
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> pYMQ
    128:128:double getTime() -> jpln
    133:133:boolean isProfiling() -> kcPC
react.gconcurrent.A -> YEGw:
    react.gconcurrent.ParallelPoolManager mgr -> PejB
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> YEGw$1:
    react.gconcurrent.A this$0 -> kArt
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> pijs:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> ckwF:
    react.gconcurrent.QueueMode mode -> WQKs
    react.glang.GList threads -> JKGO
    int next -> Ngsb
    int threadCount -> pACN
    java.util.Queue squeue -> HEAR
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> SwdW
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> bbMl
    22:23:void syncQueue(react.gconcurrent.Execution) -> bXLA
    long getNanoGate() -> xytt
    29:42:void tickSyncQueue() -> tTXB
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> MIwT
    93:100:int getTotalQueueSize() -> iCWK
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> kHsM
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> ryEi
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> mXTU
    152:179:void updateThreadInformation() -> FWGx
    183:215:react.gconcurrent.ParallelThread nextThread() -> UAPh
    220:226:void createThreads(int) -> rNHN
    230:230:react.gconcurrent.QueueMode getMode() -> yIxD
    235:235:int getNext() -> JAQa
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> cdKp
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> biYY
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> dDkR
react.gconcurrent.ParallelThread -> bhtE:
    java.util.Queue queue -> ejvN
    react.gconcurrent.ThreadInformation info -> SwdW
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> OPTh
    68:75:void execute(react.gconcurrent.Execution) -> Difh
    79:88:void execute() -> execute
    92:93:void queue(react.gconcurrent.Execution) -> kHsM
    97:97:java.util.Queue getQueue() -> fCAh
    102:102:react.gconcurrent.ThreadInformation getInfo() -> pbAg
react.gconcurrent.QueueMode -> dUhL:
    react.gconcurrent.QueueMode ROUND_ROBIN -> BSnj
    react.gconcurrent.QueueMode SMALLEST -> LsOx
    react.gconcurrent.QueueMode[] ENUM$VALUES -> EKwi
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> ktNt:
    react.gconcurrent.ParallelPoolManager mgr -> PejB
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> ktNt$1:
    react.gconcurrent.S this$0 -> WQLb
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> EvCp:
    long tick -> NyVg
    long atick -> HLpf
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> vspi:
    double ticksPerSecond -> cvQs
    int queuedSize -> Npcf
    boolean processing -> pseX
    double utilization -> dySj
    react.gmath.Average ticksPerSecondAverage -> sIii
    long tick -> NyVg
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> GjlV
    33:35:void setTicksPerSecond(double) -> KChC
    39:39:int getQueuedSize() -> KCsj
    44:45:void setQueuedSize(int) -> fJeY
    49:49:boolean isProcessing() -> HKlX
    54:55:void setProcessing(boolean) -> miKq
    59:59:double getUtilization() -> Coad
    64:65:void setUtilization(double) -> miKq
    69:69:double getTicksPerSecondAverage() -> SKlK
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> fvFX
    89:89:int getId() -> getId
react.gformat.F -> bWuN:
    java.text.NumberFormat NF -> BBne
    java.text.DecimalFormat DF -> ebdN
    java.lang.String[] NAMES -> ECfT
    java.math.BigInteger THOUSAND -> xHYC
    java.util.NavigableMap MAP -> bHYS
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> doSd
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> bXLA
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> bXLA
    201:221:java.lang.String timeLong(long,int) -> bXLA
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> Difh
    236:236:java.lang.String b(double) -> salD
    241:258:java.lang.String b(java.math.BigInteger) -> bXLA
    263:267:void instantiate() -> fSbr
    279:279:java.lang.String fileSize(long) -> bhlM
    292:292:java.lang.String memSize(long) -> DXdy
    297:297:java.lang.String memSize(long,int) -> kHsM
    310:311:java.lang.String stamp(long) -> SeQk
    327:361:java.lang.String ofSize(long,int) -> Difh
    367:394:java.lang.String ofSize(long,int,int) -> bXLA
    408:413:java.lang.String trim(java.lang.String,int) -> kHsM
    426:446:java.lang.String cname(java.lang.String) -> eXck
    460:472:java.lang.String repeat(java.lang.String,int) -> repeat
    484:491:java.lang.String mem(long) -> JQfN
    504:522:java.lang.String memx(long) -> GQMo
    536:537:java.lang.String f(long) -> Usgp
    549:550:java.lang.String f(int) -> UjwS
    564:573:java.lang.String f(double,int) -> kHsM
    589:598:java.lang.String fd(double,int) -> Difh
    612:621:java.lang.String f(float,int) -> bXLA
    632:632:java.lang.String f(double) -> VDHU
    643:643:java.lang.String f(float) -> bXLA
    658:658:java.lang.String pc(double,int) -> bhlM
    673:673:java.lang.String pc(float,int) -> kHsM
    686:686:java.lang.String pc(double) -> doSd
    699:699:java.lang.String pc(float) -> kHsM
    715:715:java.lang.String pc(int,int,int) -> bXLA
    729:729:java.lang.String pc(int,int) -> Difh
    745:745:java.lang.String pc(long,long,int) -> bXLA
    759:759:java.lang.String pc(long,long) -> bhlM
    771:771:java.lang.String msSeconds(long) -> OPTh
    785:785:java.lang.String msSeconds(long,int) -> bhlM
    797:797:java.lang.String nsMs(long) -> KChC
    811:811:java.lang.String nsMs(long,int) -> DXdy
    825:825:java.lang.String nsMsd(long,int) -> SeQk
react.glang.AccessCallback -> pYMu:
    java.lang.Object get() -> get
react.glang.Adapter -> Dipp:
    java.lang.Object adapt(java.lang.Object) -> SeQk
    java.lang.Object onAdapt(java.lang.Object) -> JQfN
react.glang.Callback -> aCpR:
    java.lang.Object t -> lNHB
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> bXLA
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> XJWg:
    double i -> ptFF
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> eXck
react.glang.FinalFloat -> miVr:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> Difh
react.glang.FinalInteger -> dflL:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> ktGm
react.glang.FinalLong -> cBGK:
    long i -> gyjy
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> miKq
react.glang.FinalString -> JAPH:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> tdxj:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> SeQk
    java.lang.Object onAdapt(java.lang.Object) -> JQfN
react.glang.GBiset -> PSbR:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> ydmM
    java.lang.Object b -> lgXd
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> qvEf
    53:54:void setA(java.lang.Object) -> GQMo
    63:63:java.lang.Object getB() -> vQnv
    73:74:void setB(java.lang.Object) -> Usgp
react.glang.GList -> MRia:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> bhlM
    45:52:react.glang.GList grepDistance(int,int) -> DXdy
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> kHsM
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> bXXU
    188:190:react.glang.GList shuffleCopy() -> rpVl
    198:199:void shuffle() -> UlDW
    210:236:react.glang.GList split() -> qJom
    248:248:boolean hasIndex(int) -> pidT
    258:259:java.lang.Object pickRandom() -> qucp
    270:277:react.glang.GList stringList() -> awVh
    288:292:void forEach(react.glang.Callback) -> kHsM
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> ERuh
    336:336:react.glang.GList cropFrom(int) -> RPkQ
    341:373:react.glang.GList split(int) -> oLnK
    389:389:react.glang.GList cropTo(int) -> lnYR
    406:416:react.glang.GList crop(int,int) -> SeQk
    427:431:react.glang.GList removeDuplicates() -> myyH
    442:446:void removeAll(java.lang.Object) -> OPTh
    455:455:boolean hasDuplicates() -> mWvG
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> ofmT
    484:490:void push(java.lang.Object,int) -> bXLA
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> KChC
    528:532:void add(java.util.List) -> bXLA
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> bOeY
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> WrKI
    626:627:react.glang.GList qdel(java.lang.Object) -> miKq
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> Xcjy
    662:669:java.lang.Object popLast() -> WhyE
    674:683:java.lang.Object popRandom() -> sjgp
react.glang.GListAdapter -> AGTu:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> kHsM
    java.lang.Object onAdapt(java.lang.Object) -> JQfN
react.glang.GMap -> biXH:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> JlDx
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> bXLA
    64:81:react.glang.GMap flip() -> uqOS
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> bXLA
    121:121:react.glang.GList k() -> ERuh
    131:131:react.glang.GSet kset() -> CxQs
    141:141:react.glang.GList v() -> iBxK
    151:151:react.glang.GSet vset() -> iCYK
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> kHsM
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> JQfN
    209:219:react.glang.GMap removeDuplicateValues() -> rMsB
    233:242:void put(react.glang.GList,react.glang.GList) -> bXLA
    251:267:react.glang.GList sortK() -> DsDt
    277:293:react.glang.GList sortV() -> XBLK
react.glang.GQuadraset -> loEJ:
    java.lang.Object a -> ydmM
    java.lang.Object b -> lgXd
    java.lang.Object c -> aVXX
    java.lang.Object d -> oxrV
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> qvEf
    25:26:void setA(java.lang.Object) -> GQMo
    30:30:java.lang.Object getB() -> vQnv
    35:36:void setB(java.lang.Object) -> Usgp
    40:40:java.lang.Object getC() -> uiBe
    45:46:void setC(java.lang.Object) -> salD
    50:50:java.lang.Object getD() -> IiDd
    55:56:void setD(java.lang.Object) -> VDHU
react.glang.GSet -> dVKn:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> JRRG:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> ydmM
    java.lang.Object b -> lgXd
    java.lang.Object c -> aVXX
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> qvEf
    26:27:void setA(java.lang.Object) -> GQMo
    31:31:java.lang.Object getB() -> vQnv
    36:37:void setB(java.lang.Object) -> Usgp
    41:41:java.lang.Object getC() -> uiBe
    46:47:void setC(java.lang.Object) -> salD
react.gmath.Average -> lCoK:
    double[] values -> TGak
    double average -> OshC
    boolean dirty -> brln
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> rNHN
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> MRmK
react.gmath.DoubleArrayUtils -> cuJe:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> bXLA
    17:19:void wrapRight(double[]) -> bXLA
    23:27:void fill(double[],double) -> fill
react.gmath.M -> KwVQ:
    int precision -> rNwE
    int modulus -> IqxR
    float[] sin -> pHsk
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> bXLA
    31:36:boolean r(java.lang.Double) -> kHsM
    51:51:double tps(long,int) -> JQfN
    63:63:double ticksFromNS(long) -> salD
    75:101:java.lang.String toRoman(int) -> pjDd
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> JQfN
    144:216:int fromRoman(java.lang.String) -> rNHN
    226:226:long ns() -> lUVh
    236:236:long ms() -> wfWe
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> kHsM
    333:333:float sinLookup(int) -> xhie
react.gnet.client.Client -> FpWQ:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> kSWd
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> bXLA
    74:74:react.gnet.packet.PacketHandler getHandler() -> FWKF
react.gnet.client.IClient -> aDOr:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> bXLA
    react.gnet.packet.PacketHandler getHandler() -> FWKF
react.gnet.download.Download -> HmlU:
    react.gnet.download.DownloadState state -> jXeL
    react.gnet.download.DownloadType type -> qfJg
    react.gnet.download.DownloadStatus status -> WPnD
    react.gnet.download.DownloadMonitor monitor -> EvnC
    java.net.URL url -> url
    java.io.File file -> wNIp
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    24:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> QxlP
    92:92:react.gnet.download.DownloadType getType() -> fKTP
    97:97:react.gnet.download.DownloadStatus getStatus() -> XtoY
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> RYkw
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> WrGs:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> bXLA
    void onDownloadStarted(react.gnet.download.Download) -> bXLA
    void onDownloadFinished(react.gnet.download.Download) -> kHsM
    void onDownloadFailed(react.gnet.download.Download) -> Difh
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> bXLA
react.gnet.download.DownloadState -> APHI:
    react.gnet.download.DownloadState IDLE -> cdps
    react.gnet.download.DownloadState DOWNLOADING -> neQv
    react.gnet.download.DownloadState FAILED -> xQLX
    react.gnet.download.DownloadState FINISHED -> fLYP
    react.gnet.download.DownloadState[] ENUM$VALUES -> Laoq
    3:8:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadState[] values() -> values
    1:1:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
react.gnet.download.DownloadStatus -> ryEe:
    long bytesDownloaded -> THEd
    long bytesTotal -> ChXI
    long bytesPerSecond -> YyXT
    long timeElapsed -> mPlM
    10:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> lTuR
    25:25:long getBytesDownloaded() -> oxQk
    30:31:void setBytesDownloaded(long) -> VDHU
    35:35:long getBytesTotal() -> DHTG
    40:41:void setBytesTotal(long) -> doSd
    45:45:long getBytesPerSecond() -> pXpk
    50:51:void setBytesPerSecond(long) -> eXck
    55:55:long getTimeElapsed() -> mqkQ
    60:61:void setTimeElapsed(long) -> rNHN
react.gnet.download.DownloadType -> VneH:
    react.gnet.download.DownloadType DETERMINATE -> xsNs
    react.gnet.download.DownloadType INDETERMINATE -> LsRh
    react.gnet.download.DownloadType[] ENUM$VALUES -> xPlB
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadType[] values() -> values
    1:1:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
react.gnet.packet.IPacket -> LGUQ:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> HvcM
    java.lang.String getPacketName() -> DivN
react.gnet.packet.IncompatablePacketException -> uOIo:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> fvBx:
    react.gnet.packet.PacketBinding SERVER_BOUND -> WQNf
    react.gnet.packet.PacketBinding CLIENT_BOUND -> kcxN
    react.gnet.packet.PacketBinding[] ENUM$VALUES -> HntP
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.packet.PacketBinding[] values() -> values
    1:1:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
react.gnet.packet.PacketException -> pYMQ:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> jpln:
    react.glang.GList accept -> LQNL
    react.gnet.packet.PacketBinding side -> oyUa
    react.gnet.streams.OSS out -> oOAw
    react.gnet.streams.ISS in -> rWjX
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> bXLA
    28:34:void accept(react.gnet.packet.IPacket) -> kHsM
    38:46:react.gnet.packet.IPacket findPacket(int) -> ykmI
    51:66:react.gnet.packet.IPacket read() -> xXXO
    71:77:void write(react.gnet.packet.IPacket) -> Difh
react.gnet.packet.UnhandledPacketException -> kcPC:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> xytt:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> FWKF
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> bhlM
react.gnet.server.Server -> tTXB:
    int port -> port
    java.net.ServerSocket socket -> ynBL
    react.gnet.packet.PacketHandler handler -> kSWd
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> FWKF
    37:84:void run() -> run
    88:91:void pstart() -> Vngx
    95:96:void pstop() -> INok
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> bhlM
react.gnet.streams.ISS -> MIwT:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> OtIf
    boolean built -> TOsX
    byte[] readBuffer -> NhUd
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> YoRo
    64:72:react.glang.GList readStringList() -> Plvd
    77:85:react.glang.GList readDoubleList() -> wevB
    90:98:react.glang.GList readLongList() -> Vngt
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> bXLA
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> bXLA
    136:137:react.gnet.streams.ISS gzip() -> VMEs
    142:147:void build() -> afVt
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> kHsM
    435:436:void close() -> close
react.gnet.streams.OSS -> iCWK:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> YgtM
    react.gnet.streams.StreamBuilder bu -> OtIf
    boolean built -> TOsX
    byte[] writeBuffer -> malu
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> gUwW
    41:42:react.gnet.streams.OSS gzip(int) -> kkXk
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> kHsM
    53:58:void build() -> afVt
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> GQMo
    102:108:void writeDoubleList(react.glang.GList) -> Usgp
    112:118:void writeLongList(react.glang.GList) -> OPTh
    122:128:void writeStreamableList(react.glang.GList) -> KChC
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> AOkL
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> Difh
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> ryEi:
    react.glang.GList constructors -> GJNy
    18:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> bXLA
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> bXLA
    49:50:void bind(react.gnet.streams.StreamConstructor) -> bXLA
    54:55:void bindGZIP(int) -> QNLV
    59:60:void bindGZIP() -> PCEF
    64:65:void bindCipher(javax.crypto.Cipher) -> Difh
    69:70:void bindBuffer(int) -> uWTE
    74:75:void bindBuffer() -> SwAp
react.gnet.streams.StreamConstructor -> mXTU:
    java.io.InputStream constructInput(java.io.InputStream) -> bXLA
    java.io.OutputStream constructOutput(java.io.OutputStream) -> bXLA
react.gnet.streams.constructors.BufferedStreamConstructor -> FWGx:
    int bufferSize -> bufferSize
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> kHsM
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> kHsM
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> bXLA
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> bXLA
react.gnet.streams.constructors.CipherStreamConstructor -> UAPh:
    javax.crypto.Cipher cipher -> gGKG
    17:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> Difh
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> Difh
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> bXLA
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> bXLA
react.gnet.streams.constructors.GZipStreamConstructor -> yIxD:
    int compressionLevel -> dNaq
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> bhlM
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> bhlM
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> bXLA
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> bXLA
react.gnet.streams.overlays.CGZIPInputStream -> JAQa:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> cdKp:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> biYY:
    void toBytes(react.gnet.streams.OSS) -> bXLA
    void fromBytes(react.gnet.streams.ISS) -> bXLA
react.graph.ColossalView -> dDkR:
    react.papyrus.BufferedFrame view -> VpMo
    react.glang.GMap buffers -> ptGe
    react.glang.GMap graphs -> THDa
    double level -> oNaM
    double targetLevel -> qUGo
    int maxX -> QXMe
    int maxY -> pcFb
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> kssu
    51:77:void render() -> pXos
    81:98:void scroll(int) -> MRaF
    102:112:void recompile() -> CEPP
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> bXLA
    122:122:react.papyrus.BufferedFrame getView() -> NUoc
    127:127:react.glang.GMap getBuffers() -> fvKK
    132:132:react.glang.GMap getGraphs() -> XtrA
    137:137:double getLevel() -> wMGc
    142:142:double getTargetLevel() -> dfqx
    147:147:int getMaxX() -> XSPD
    152:152:int getMaxY() -> IOSw
react.graph.ColossalView$Builder -> dDkR$bXLA:
    react.glang.GList graphs -> fmya
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> bXLA
    171:191:react.graph.ColossalView compute() -> VLgq
react.graph.CubicleIterator -> fCAh:
    int[][] mapping -> ChXs
    int xCubes -> opgV
    int yCubes -> msRc
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> iBnt
    47:130:void insert(react.graph.GraphSize,int) -> bXLA
    134:145:void print() -> print
react.graph.Graph2D -> pbAg:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> bXLA
react.graph.GraphCPUArc -> GjlV:
    byte fontColor -> bQOi
    byte backgroundColor -> MLCd
    double pct -> XeTs
    react.gmath.Average aax -> DQia
    react.gmath.Average aay -> Qhox
    react.gmath.Average aaz -> txHC
    long msx -> RRbO
    26:38:void <init>(byte) -> <init>
    42:47:void sample() -> Cfdo
    52:90:void onRender(react.papyrus.BufferedFrame) -> bXLA
    94:94:byte getFontColor() -> RjpG
    99:100:void setFontColor(byte) -> bXLA
    104:104:byte getBackgroundColor() -> Pdia
    109:110:void setBackgroundColor(byte) -> kHsM
react.graph.GraphLagMap -> KCsj:
    int grid -> GdDq
    org.bukkit.entity.Player viewer -> LYac
    org.bukkit.util.Vector lastVector -> jiiF
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> BlqC
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> yAjw
    49:55:void zoomOut() -> PTHl
    60:164:void onRender(react.papyrus.BufferedFrame) -> bXLA
    21:21:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> kkXk
react.graph.GraphMemoryArc -> HKlX:
    byte fontColor -> bQOi
    byte backgroundColor -> MLCd
    double pct -> XeTs
    react.gmath.Average aax -> DQia
    long msx -> RRbO
    long of -> EwQN
    26:37:void <init>(byte) -> <init>
    41:47:void sample() -> Cfdo
    52:79:void onRender(react.papyrus.BufferedFrame) -> bXLA
    83:83:byte getFontColor() -> RjpG
    88:89:void setFontColor(byte) -> bXLA
    93:93:byte getBackgroundColor() -> Pdia
    98:99:void setBackgroundColor(byte) -> kHsM
react.graph.GraphMode -> Coad:
    react.graph.GraphMode NORMAL -> ujIL
    react.graph.GraphMode ITEMFRAME -> LbSH
    react.graph.GraphMode EOD -> WbQl
    react.graph.GraphMode[] ENUM$VALUES -> CNei
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.GraphMode[] values() -> values
    1:1:react.graph.GraphMode valueOf(java.lang.String) -> valueOf
react.graph.GraphSampleLine -> SKlK:
    double lx -> ayBG
    double ly -> Mmey
    react.api.ISampler sampler -> TjJd
    react.graph.IFormatter formatter -> rhoF
    byte graphColor -> VpPk
    byte backgroundColor -> MLCd
    byte borderColor -> NVvg
    byte textColor -> uGcy
    int ticksLeftTitle -> EeoM
    int ticksOutTitle -> tVDJ
    double nextPoint -> BvXc
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> Cfdo
    51:183:void onRender(react.papyrus.BufferedFrame) -> bXLA
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> kHsM
    226:254:int getHue(int,int,int) -> Difh
    259:281:void scaleFor(react.glang.GList) -> miKq
    285:285:react.graph.IFormatter getFormatter() -> dnrm
    290:291:void setFormatter(react.graph.IFormatter) -> bXLA
    295:295:byte getGraphColor() -> Tyfh
    300:301:void setGraphColor(byte) -> Difh
    305:305:byte getBackgroundColor() -> Pdia
    310:311:void setBackgroundColor(byte) -> kHsM
    315:315:byte getBorderColor() -> DGta
    320:321:void setBorderColor(byte) -> bhlM
    325:325:byte getTextColor() -> DXvT
    330:331:void setTextColor(byte) -> DXdy
    335:335:react.api.ISampler getSampler() -> vcUm
react.graph.GraphSize -> fvFX:
    react.graph.GraphSize WIDE -> KpPR
    react.graph.GraphSize FULL -> HLrs
    react.graph.GraphSize SQUARE -> TihU
    int[] $SWITCH_TABLE$react$graph$GraphSize -> AkEU
    react.graph.GraphSize[] ENUM$VALUES -> Uljs
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> HUBi
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> LaNk
react.graph.GraphText -> fSbr:
    java.lang.String text -> text
    byte fontColor -> bQOi
    byte backgroundColor -> MLCd
    boolean wrote -> jrYL
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> bXLA
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> RjpG
    68:69:void setFontColor(byte) -> bXLA
    73:73:byte getBackgroundColor() -> Pdia
    78:79:void setBackgroundColor(byte) -> kHsM
react.graph.GraphingInstance -> qvEf:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> fmya
    react.graph.ColossalView view -> SoWE
    react.papyrus.Papyrus papyrus -> BLDk
    react.papyrus.IRenderer renderer -> fChL
    boolean mapping -> nvAe
    react.glang.GList msgs -> gGML
    react.surge.sched.Task waiter -> TYGy
    react.surge.sched.Task waiter2 -> WsST
    int shift -> cLBT
    int iv -> RdDB
    boolean notif -> LYaH
    boolean doScrolling -> tfcR
    49:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> ccoh
    127:128:void setDoScrolling(boolean) -> salD
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> bXLA
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> bXLA
    151:155:void send(java.lang.String) -> fJeY
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> bXLA
    166:205:void on(react.event.ReactScrollEvent) -> bXLA
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> bXLA
    219:227:void destroy() -> destroy
    231:240:void toggle() -> ryMH
    244:245:void setGraphs(react.glang.GList) -> salD
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> Daga
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> rWJR
    298:298:react.graph.ColossalView getView() -> Qglt
    303:303:react.papyrus.Papyrus getPapyrus() -> YMab
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> bXLA
    323:324:void setPapyrus(react.papyrus.Papyrus) -> bXLA
    328:329:void setRenderer(react.papyrus.IRenderer) -> bXLA
    333:334:void setMapping(boolean) -> Difh
    338:339:void setMsgs(react.glang.GList) -> VDHU
    343:344:void setWaiter(react.surge.sched.Task) -> bXLA
    348:349:void setWaiter2(react.surge.sched.Task) -> kHsM
    353:354:void setShift(int) -> vtHp
    358:359:void setNotif(boolean) -> VDHU
    363:363:react.papyrus.IRenderer getRenderer() -> ytnw
    368:368:boolean isMapping() -> WaAY
    373:373:react.glang.GList getMsgs() -> yRkl
    378:378:react.surge.sched.Task getWaiter() -> OGqy
    383:383:react.surge.sched.Task getWaiter2() -> BlcR
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> BAnh
    398:414:void compile() -> XBMR
    418:433:void enableSly() -> pjUW
    437:445:void disableSly() -> tmpV
    40:40:boolean access$0(react.graph.GraphingInstance) -> bXLA
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> kHsM
    46:46:boolean access$2(react.graph.GraphingInstance) -> Difh
    46:46:void access$3(react.graph.GraphingInstance,boolean) -> bXLA
    44:44:int access$4(react.graph.GraphingInstance) -> bhlM
    44:44:void access$5(react.graph.GraphingInstance,int) -> bXLA
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> DXdy
react.graph.GraphingInstance$1 -> qvEf$1:
    react.graph.GraphingInstance this$0 -> WPoG
    org.bukkit.entity.Player val$player -> SMSu
    1:54:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> qvEf$2:
    react.graph.GraphingInstance this$0 -> WPoG
    1:79:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> qvEf$3:
    react.graph.GraphingInstance this$0 -> WPoG
    1:109:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> bXLA
react.graph.IFormatter -> vQnv:
    java.lang.String from(double) -> fJeY
react.graph.IGraph -> bXXU:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> baLT
    long getTimeViewport() -> qvJD
    void render(react.papyrus.BufferedFrame) -> Difh
    double getMax() -> getMax
    void setMax(double) -> UjwS
react.graph.NormalGraph -> rpVl:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> qUJU
    long timeViewport -> GRap
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> baLT
    35:35:long getTimeViewport() -> qvJD
    41:42:void render(react.papyrus.BufferedFrame) -> Difh
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> UjwS
    void onRender(react.papyrus.BufferedFrame) -> bXLA
react.graph.PlotBoard -> UlDW:
    react.glang.GMap plots -> qKwe
    int maxRecordings -> OcJq
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> hYlU
    33:33:long getAccurateTimeSpan() -> UcWL
    38:50:long getMedian(long,long) -> DXdy
    55:55:long getMinimumAccuracyRange() -> pXsC
    60:70:double getMaxValue() -> UlHX
    75:85:double getMinValue() -> UIdg
    90:90:react.glang.GList sort(react.glang.GMap) -> kHsM
    95:105:long earilestRecording() -> eHSO
    110:120:long latestRecording() -> XlaH
    125:126:void reduceBefore(long) -> fJeY
    130:156:void reduceBetween(long,long) -> SeQk
    160:160:boolean before(long,long) -> JQfN
    165:165:boolean after(long,long) -> GQMo
    170:170:boolean within(long,long,long) -> bXLA
    175:193:react.glang.GMap getBetween(long,long) -> Usgp
    198:200:void plot(long,double) -> bXLA
    204:204:boolean hasAt(long) -> UjwS
    209:209:double getAt(long) -> ktGm
    214:214:int getSize() -> getSize
react.graph.Point -> qJom:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> qucp:
    int iid -> vBUr
    react.graph.IGraph graph -> DAJl
    react.graph.GraphSize size -> oxyb
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> VMHl
    24:25:void setGraph(react.graph.IGraph) -> bXLA
    29:29:react.graph.GraphSize getSize() -> esFq
    34:35:void setSize(react.graph.GraphSize) -> bXLA
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> awVh:
    react.graph.RenderMaxType UNLIMITED -> HMWX
    react.graph.RenderMaxType LIMITED -> NFXC
    react.graph.RenderMaxType[] ENUM$VALUES -> AkFR
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> myyH:
    java.lang.String CRLF -> qUMg
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> UjwS
    162:198:java.lang.String toString(react.json.JSONObject) -> kHsM
react.json.HTTPTokener -> mWvG:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> ofmT:
    java.util.ArrayList myArrayList -> hktm
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> bXLA
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> BdBn
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> CVCy
    394:399:react.json.JSONObject getJSONObject(int) -> jpef
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> ktGm
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> pGcT
    515:515:boolean optBoolean(int) -> ckpy
    533:536:boolean optBoolean(int,boolean) -> kHsM
    551:551:double optDouble(int) -> PljT
    569:572:double optDouble(int,double) -> bXLA
    587:587:int optInt(int) -> Grph
    605:608:int optInt(int,int) -> GQMo
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> kHsM
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> bXLA
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> bXLA
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> bXLA
    722:723:react.json.JSONArray optJSONArray(int) -> XlRF
    737:738:react.json.JSONObject optJSONObject(int) -> kHtJ
    752:752:long optLong(int) -> VTiU
    770:773:long optLong(int,long) -> bXLA
    788:788:java.lang.String optString(int) -> mWjq
    803:804:java.lang.String optString(int,java.lang.String) -> bXLA
    816:817:react.json.JSONArray put(boolean) -> doSd
    830:831:react.json.JSONArray put(java.util.Collection) -> bXLA
    845:848:react.json.JSONArray put(double) -> ktGm
    860:861:react.json.JSONArray put(int) -> vITR
    873:874:react.json.JSONArray put(long) -> pidT
    887:888:react.json.JSONArray put(java.util.Map) -> bXLA
    902:903:react.json.JSONArray put(java.lang.Object) -> doSd
    921:922:react.json.JSONArray put(int,boolean) -> Difh
    939:940:react.json.JSONArray put(int,java.util.Collection) -> bXLA
    958:959:react.json.JSONArray put(int,double) -> kHsM
    977:978:react.json.JSONArray put(int,int) -> Usgp
    996:997:react.json.JSONArray put(int,long) -> kHsM
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> bXLA
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> bXLA
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> eXck
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> bXLA
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> bXLA
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> bXLA
react.json.JSONException -> bOeY:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> EwRo
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> WrKI:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> bXLA
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> pidT
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> bXLA
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> kHsM
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> UjwS
    379:456:java.lang.String toString(react.json.JSONArray) -> kHsM
    472:552:java.lang.String toString(react.json.JSONObject) -> kHsM
react.json.JSONObject -> Xcjy:
    java.util.Map map -> map
    java.lang.Object NULL -> XuxB
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> bXLA
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> kHsM
    480:499:java.lang.String doubleToString(double) -> pidT
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> ERuh
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> RPkQ
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> oLnK
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> Difh
    751:767:java.lang.String[] getNames(java.lang.Object) -> rNHN
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> lnYR
    855:855:boolean isNull(java.lang.String) -> pjDd
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> Rjnf
    917:937:java.lang.String numberToString(java.lang.Number) -> bXLA
    949:949:java.lang.Object opt(java.lang.String) -> xhie
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> bXLA
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> bXLA
    1018:1018:boolean optBoolean(java.lang.String) -> ykmI
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> bXLA
    1054:1054:double optDouble(java.lang.String) -> YoRo
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> bXLA
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> bXLA
    1116:1119:double optDouble(java.lang.String,double) -> bXLA
    1134:1134:int optInt(java.lang.String) -> gUwW
    1152:1155:int optInt(java.lang.String,int) -> Difh
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> kkXk
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> QNLV
    1198:1198:long optLong(java.lang.String) -> uWTE
    1216:1219:long optLong(java.lang.String,long) -> bXLA
    1234:1234:java.lang.String optString(java.lang.String) -> MRaF
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> kHsM
    1255:1305:void populateMap(java.lang.Object) -> fJeY
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> kHsM
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> bXLA
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> kHsM
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> bhlM
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> kHsM
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> bXLA
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> Difh
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> bhlM
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> DXdy
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> bXLA
    1590:1590:java.lang.Object remove(java.lang.String) -> iBnt
    1605:1640:boolean similar(java.lang.Object) -> eXck
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> UjwS
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> Difh
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> bXLA
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> bXLA
    2000:2004:void indent(java.io.Writer,int) -> bXLA
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> bXLA
react.json.JSONObject$Null -> Xcjy$bXLA:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> WhyE:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> sjgp:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> JlDx:
    long character -> fvpC
    boolean eof -> eof
    long index -> eHxp
    long line -> jiin
    char previous -> PnaS
    java.io.Reader reader -> reader
    boolean usePrevious -> neVC
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> GINE
    119:131:int dehexchar(char) -> bXLA
    136:136:boolean end() -> bPJo
    147:153:boolean more() -> rxkO
    164:198:char next() -> next
    213:218:char next(char) -> kHsM
    233:250:java.lang.String next(int) -> dnrm
    263:266:char nextClean() -> jyeC
    287:334:java.lang.String nextString(char) -> Difh
    349:361:java.lang.String nextTo(char) -> bhlM
    376:388:java.lang.String nextTo(java.lang.String) -> vtHp
    403:441:java.lang.Object nextValue() -> tnSp
    458:479:char skipTo(char) -> DXdy
    491:491:react.json.JSONException syntaxError(java.lang.String) -> BdBn
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> uqOS:
    int maxdepth -> mkDP
    boolean comma -> Xmge
    char mode -> UKLs
    react.json.JSONObject[] stack -> wpPc
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> CVCy
    157:164:react.json.JSONWriter array() -> sjpO
    180:193:react.json.JSONWriter end(char,char) -> bXLA
    206:206:react.json.JSONWriter endArray() -> UJHU
    219:219:react.json.JSONWriter endObject() -> nSQB
    235:258:react.json.JSONWriter key(java.lang.String) -> jpef
    274:285:react.json.JSONWriter object() -> FgoV
    299:310:void pop(char) -> SeQk
    322:329:void push(react.json.JSONObject) -> bhlM
    342:342:react.json.JSONWriter value(boolean) -> eXck
    356:356:react.json.JSONWriter value(double) -> ERuh
    369:369:react.json.JSONWriter value(long) -> ERuh
    385:385:react.json.JSONWriter value(java.lang.Object) -> ktGm
react.json.XML -> CxQs:
    java.lang.Character AMP -> cTTx
    java.lang.Character APOS -> ynEu
    java.lang.Character BANG -> HLuQ
    java.lang.Character EQ -> ayBY
    java.lang.Character GT -> slSq
    java.lang.Character LT -> jaYW
    java.lang.Character QUEST -> cdtY
    java.lang.Character QUOT -> bsTG
    java.lang.Character SLASH -> tDbp
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> pGcT
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> bXLA
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> UjwS
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> iBxK:
    java.util.HashMap entity -> yCPy
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> SKqf
    108:133:java.lang.Object nextContent() -> QhPC
    149:166:java.lang.Object nextEntity(char) -> JQfN
    186:239:java.lang.Object nextMeta() -> TqXf
    261:334:java.lang.Object nextToken() -> XAoK
    354:420:boolean skipPast(java.lang.String) -> ckpy
react.lagmap.LagMap -> iCYK:
    react.glang.GMap chunks -> COIo
    13:16:void <init>() -> <init>
    20:27:react.glang.GMap getGrandTotalMilliseconds() -> lnkj
    32:47:react.glang.GMap getGrandTotal() -> lMJO
    52:61:void pump() -> RcBb
    65:71:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> bXLA
    75:81:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> bXLA
    85:85:react.glang.GMap getChunks() -> QEkt
react.lagmap.LagMapChunk -> rMsB:
    react.glang.GMap hits -> qTkb
    org.bukkit.Chunk c -> WaaN
    15:19:void <init>(org.bukkit.Chunk) -> <init>
    23:37:react.glang.GMap getMS() -> XSRI
    42:66:double totalMS() -> qShP
    71:78:double getMS(react.api.ChunkIssue) -> bXLA
    83:89:void hit(react.api.ChunkIssue,double) -> bXLA
    93:94:void hit(react.api.ChunkIssue) -> kHsM
    98:98:int getX() -> getX
    103:103:int getZ() -> getZ
    108:115:double totalScore() -> nuSX
    120:120:react.glang.GMap getHits() -> NMcI
    125:134:void pump() -> RcBb
    139:139:int compareTo(react.lagmap.LagMapChunk) -> bXLA
    144:144:org.bukkit.Chunk getC() -> HduL
    149:149:org.bukkit.World getWorld() -> getWorld
    1:1:int compareTo(java.lang.Object) -> compareTo
react.notification.Note -> DsDt:
    react.notification.Note RAI -> pQgk
    react.notification.Note VERBOSE -> GAaw
    react.notification.Note SPIKES -> kmMN
    react.notification.Note GC -> HDdx
    react.notification.Note[] ENUM$VALUES -> NFWU
    5:10:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    14:15:void bake(java.lang.String) -> PljT
    1:1:react.notification.Note[] values() -> values
    1:1:react.notification.Note valueOf(java.lang.String) -> valueOf
react.notification.Notification -> XBLK:
    react.notification.Note type -> XKdN
    java.lang.String message -> message
    8:12:void <init>(react.notification.Note,java.lang.String) -> <init>
    16:16:react.notification.Note getType() -> MlcI
    21:22:void setType(react.notification.Note) -> bXLA
    26:26:java.lang.String getMessage() -> getMessage
    31:32:void setMessage(java.lang.String) -> setMessage
react.papyrus.BufferedFrame -> uiBe:
    byte[][] frame -> mbRG
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> bXLA
    90:97:void write(byte) -> SeQk
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> bXLA
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> bXLA
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> bXLA
    153:167:java.awt.image.BufferedImage toBufferedImage() -> dwto
    175:182:void writeRainbowMul() -> Fgmp
    189:196:void writeRainbowAdd() -> wUXt
    203:213:void writeSparks() -> ECIX
    217:223:boolean write(int,int,byte) -> bXLA
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> bXLA
    255:272:void write(react.papyrus.BufferedFrame) -> bhlM
    276:276:byte[][] getRawFrame() -> NMcN
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> IiDd:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> bhlM
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> bXLA
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> MRmK:
    org.bukkit.map.MapView getView() -> iwDu
    react.papyrus.BufferedFrame getFrameBuffer() -> BmFL
    void addRenderer(react.papyrus.IRenderer) -> kHsM
    void clearRenderers() -> RYoX
    react.glang.GList getRenderers() -> qeHv
    void removeRenderer(react.papyrus.IRenderer) -> Difh
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> ergs
react.papyrus.IRenderer -> lUVh:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> bXLA
react.papyrus.Papyrus -> wfWe:
    org.bukkit.map.MapView map -> DtNw
    react.papyrus.BufferedFrame frameBuffer -> hSCA
    react.papyrus.BufferedFrame lastFrameBuffer -> LIBd
    react.glang.GList renderers -> QiSV
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> iwDu
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> BmFL
    51:52:void addRenderer(react.papyrus.IRenderer) -> kHsM
    57:58:void clearRenderers() -> RYoX
    63:63:react.glang.GList getRenderers() -> qeHv
    69:70:void removeRenderer(react.papyrus.IRenderer) -> Difh
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> ergs
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> kHsM
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> Difh
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> bhlM
react.papyrus.Papyrus$1 -> wfWe$1:
    react.papyrus.Papyrus this$0 -> rhod
    org.bukkit.map.MapCanvas val$c -> yCTc
    org.bukkit.map.MapView val$v -> lVaJ
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> FWKF:
    int spaceSize -> iMWf
    java.lang.String fontChars -> SxMH
    int[][] fontData -> wpRi
    react.papyrus.ReactFont Font -> PCoH
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> QxlP:
    react.glang.GList subgoals -> RuIs
    java.lang.String tag -> gGQU
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> prfp
    26:44:void propigate() -> WrQG
    49:50:void addGoal(react.rai.IGoal) -> bXLA
    55:65:react.glang.GList getFailingSubgoals() -> LiaA
    71:71:boolean isFailing() -> uOSE
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> yuPw
    void onPropigated() -> EeMI
react.rai.Goal$1 -> QxlP$1:
    react.rai.Goal this$0 -> whBm
    react.rai.IGoal val$i -> scen
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> fKTP:
    react.glang.GList getSubgoals() -> prfp
    void propigate() -> WrQG
    void onPropigated() -> EeMI
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> LiaA
    boolean isFailing() -> uOSE
    boolean onCheckFailing() -> yuPw
    void update() -> update
    void addGoal(react.rai.IGoal) -> bXLA
react.rai.IRAI -> XtoY:
    react.glang.GList getGoals() -> Aqqd
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> bXLA
    react.glang.GList getEvents() -> HmwR
    void callEvent(react.rai.RAIEvent) -> bXLA
    react.glang.GList getListeners() -> pbIn
react.rai.RAI -> RYkw:
    react.glang.GList goals -> UKOB
    react.glang.GList events -> UJnB
    react.glang.GList logEvents -> kmPP
    react.glang.GList listeners -> RSFy
    long since -> tVGs
    react.rai.RAI instance -> VMqJ
    22:31:void <init>() -> <init>
    36:36:react.glang.GList getGoals() -> Aqqd
    42:43:void addGoal(react.rai.IGoal) -> bXLA
    48:83:void tick() -> tick
    88:88:react.glang.GList getEvents() -> HmwR
    94:101:void callEvent(react.rai.RAIEvent) -> bXLA
    106:106:react.glang.GList getListeners() -> pbIn
react.rai.RAIEvent -> lTuR:
    react.rai.RAIEventType type -> VgdG
    java.lang.String[] pars -> stfp
    java.lang.String ovt -> BSwG
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> DXyi
    29:29:java.lang.String[] getPars() -> HwIa
    34:34:java.lang.String getOvt() -> nApW
react.rai.RAIEventType -> oxQk:
    react.rai.RAIEventType FIRE_ACTION -> huIK
    react.rai.RAIEventType NOTE_GOAL_FAILING -> YWYd
    react.rai.RAIEventType NOTE_GOAL_FIXED -> ayDX
    java.lang.String[] msgs -> sIrS
    react.rai.RAIEventType[] ENUM$VALUES -> aorR
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> RRCR
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> bXLA
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedEntityCounts -> DHTG:
    boolean failing -> GdGn
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> yuPw
    91:134:void onPropigated() -> EeMI
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> bXLA
react.rai.goals.GoalReducedEntityCounts$1 -> DHTG$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> Tikv
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> DHTG$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> Tikv
    org.bukkit.Chunk val$lx -> qTnJ
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> pXpk:
    boolean failing -> GdGn
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> yuPw
    72:76:void onPropigated() -> EeMI
react.rai.goals.GoalStableChunkTime$1 -> pXpk$1:
    react.rai.goals.GoalStableChunkTime this$0 -> AYgD
    1:48:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> mqkQ:
    boolean failing -> GdGn
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> EeMI
    35:35:void letUp() -> CpJg
    40:77:boolean onCheckFailing() -> yuPw
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> bXLA
react.rai.goals.GoalStableEntityTime$1 -> mqkQ$1:
    react.rai.goals.GoalStableEntityTime this$0 -> OQkr
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> HvcM:
    boolean failing -> GdGn
    react.glang.GMap reocc -> SwkQ
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> EeMI
    88:125:boolean onCheckFailing() -> yuPw
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> bXLA
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> kHsM
react.rai.goals.GoalStableFluidTime$1 -> HvcM$1:
    react.rai.goals.GoalStableFluidTime this$0 -> CNjq
    org.bukkit.Chunk val$lx -> qTnJ
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> HvcM$2:
    react.rai.goals.GoalStableFluidTime this$0 -> CNjq
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> DivN:
    boolean failing -> GdGn
    react.glang.GMap reocc -> SwkQ
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> EeMI
    89:125:boolean onCheckFailing() -> yuPw
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> bXLA
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> kHsM
react.rai.goals.GoalStableHopperTime$1 -> DivN$1:
    react.rai.goals.GoalStableHopperTime this$0 -> Ljer
    org.bukkit.Chunk val$lx -> qTnJ
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> DivN$2:
    react.rai.goals.GoalStableHopperTime this$0 -> Ljer
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> xXXO:
    int d -> d
    boolean failing -> GdGn
    react.glang.GMap reocc -> SwkQ
    32:37:void <init>() -> <init>
    42:86:void onPropigated() -> EeMI
    91:128:boolean onCheckFailing() -> yuPw
    28:28:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> bXLA
    27:27:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> kHsM
react.rai.goals.GoalStableRedstoneTime$1 -> xXXO$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> RReN
    org.bukkit.Chunk val$lx -> qTnJ
    1:68:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    73:83:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> xXXO$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> RReN
    1:110:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    115:124:void run() -> run
react.rai.goals.GoalStableTickTime -> Vngx:
    boolean failing -> GdGn
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> EeMI
    34:58:boolean onCheckFailing() -> yuPw
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> bXLA
react.rai.goals.GoalStableTickTime$1 -> Vngx$1:
    react.rai.goals.GoalStableTickTime this$0 -> foAX
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.redstone.RedstoneEvent -> INok:
    react.surge.util.MaterialBlock block -> TjMn
    org.bukkit.util.Vector vector -> qvop
    byte from -> SLvo
    byte to -> cuxa
    16:22:void <init>(org.bukkit.event.block.BlockRedstoneEvent) -> <init>
    26:26:react.surge.util.MaterialBlock getBlock() -> pPgf
    31:32:void setBlock(react.surge.util.MaterialBlock) -> bXLA
    36:36:org.bukkit.util.Vector getVector() -> FpcC
    41:42:void setVector(org.bukkit.util.Vector) -> bXLA
    46:46:byte getFrom() -> imvO
    51:52:void setFrom(byte) -> JQfN
    56:56:byte getTo() -> skSS
    61:62:void setTo(byte) -> GQMo
react.redstone.RedstoneTracker -> Plvd:
    org.bukkit.World world -> world
    react.controller.FeatureController fc -> mbTC
    react.glang.GList events -> UJnB
    boolean ticking -> TYMD
    react.surge.sched.Task task -> rGOd
    boolean nms -> fnco
    int tr -> aEbH
    react.gmath.Average aav -> wVar
    boolean handleTicking -> sAeS
    33:55:void <init>(org.bukkit.World) -> <init>
    59:61:void close() -> close
    65:98:void tick() -> tick
    103:127:void set(org.bukkit.Location,react.surge.util.MaterialBlock) -> kHsM
    131:152:void enact(react.redstone.RedstoneEvent) -> bXLA
    157:184:void on(org.bukkit.event.block.BlockRedstoneEvent) -> bXLA
react.redstone.RedstoneTracker$1 -> Plvd$1:
    react.redstone.RedstoneTracker this$0 -> BBwe
    1:47:void <init>(react.redstone.RedstoneTracker,java.lang.String,int) -> <init>
    52:53:void run() -> run
react.remote.client.RemoteClient -> wevB:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> NqPc
    boolean authenticated -> XCXi
    react.remote.server.ServerInfo info -> IHNf
    react.glang.GMap frems -> AYgW
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> BdCt
    51:51:react.glang.GMap getFrames() -> PdnE
    56:75:int computeFrames() -> KxCC
    80:92:boolean clearToken() -> SLUR
    97:110:boolean updateServerInfo() -> AjCh
    115:129:boolean refreshToken() -> AOpN
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> Difh
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> xaPR
    165:165:boolean isAuthenticated() -> TWhY
    170:170:react.remote.server.ServerInfo getInfo() -> tmuA
react.remote.client.packet.CPacketClearToken -> Vngt:
    java.lang.String token -> NqPc
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> bXLA
    33:34:void fromBytes(react.gnet.streams.ISS) -> bXLA
    38:38:java.lang.String getToken() -> xaPR
    43:44:void setToken(java.lang.String) -> Grph
react.remote.client.packet.CPacketComputeFrames -> VMEs:
    java.lang.String token -> NqPc
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> bXLA
    33:34:void fromBytes(react.gnet.streams.ISS) -> bXLA
    38:38:java.lang.String getToken() -> xaPR
    43:44:void setToken(java.lang.String) -> Grph
react.remote.client.packet.CPacketGetInfo -> afVt:
    java.lang.String token -> NqPc
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> bXLA
    33:34:void fromBytes(react.gnet.streams.ISS) -> bXLA
    38:38:java.lang.String getToken() -> xaPR
    43:44:void setToken(java.lang.String) -> Grph
react.remote.client.packet.CPacketGetToken -> AOkL:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> bXLA
    36:38:void fromBytes(react.gnet.streams.ISS) -> bXLA
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> PCEF:
    java.lang.String token -> NqPc
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> bXLA
    33:34:void fromBytes(react.gnet.streams.ISS) -> bXLA
    38:38:java.lang.String getToken() -> xaPR
    43:44:void setToken(java.lang.String) -> Grph
react.remote.client.packet.ClientPacket -> SwAp:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> bXLA
    void fromBytes(react.gnet.streams.ISS) -> bXLA
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> HvcM
    42:42:java.lang.String getPacketName() -> DivN
react.remote.client.packet.ClientPacketType -> kssu:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> JvFO
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> VWFD
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> PoGG
    react.remote.client.packet.ClientPacketType GET_INFO -> BTYl
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> BKiD
    react.remote.client.packet.ClientPacketType[] $VALUES -> nnKX
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> pXos:
    react.glang.GMap compute(long,long) -> Difh
react.remote.server.KnownUser -> CEPP:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> NUoc:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> bXLA
    38:41:void fromBytes(react.gnet.streams.ISS) -> bXLA
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> fvKK:
    react.glang.GList users -> nLHW
    react.glang.GMap session -> TXoD
    react.glang.GMap lastCompute -> rrGQ
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> aCpR
    44:45:void registerUser(react.remote.server.KnownUser) -> bXLA
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> kHsM
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> XlRF
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> bhlM
    react.remote.server.IFrameComputer getFrameComputer() -> XJWg
    170:171:void markLastCompute(react.remote.server.KnownUser) -> Difh
    175:180:long getLastCompute(react.remote.server.KnownUser) -> bhlM
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> bXLA
    190:191:void deleteSession(react.remote.server.KnownUser) -> DXdy
    195:195:java.lang.String createToken() -> OGwr
react.remote.server.ServerInfo -> XtrA:
    java.lang.String motd -> IGkt
    int gameProtocol -> GIvX
    java.lang.String gameVersion -> OlAd
    java.lang.String reactVersion -> kJmd
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> bkHC
    int viewDistance -> viewDistance
    int gamePort -> rrFe
    java.lang.String gameAddress -> ymiH
    react.glang.GList remotePlugins -> DkbF
    react.glang.GList worlds -> vmQS
    react.glang.GList actions -> ghst
    react.glang.GList samplers -> MmlB
    26:26:react.remote.server.ServerInfo empty() -> rhOf
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> bXLA
    146:159:void fromBytes(react.gnet.streams.ISS) -> bXLA
    java.lang.String dgetMotd() -> nlVu
    int dgetGameProtocol() -> XdHT
    java.lang.String dgetGameVersion() -> MuJX
    java.lang.String dgetReactVersion() -> YEGw
    int dgetMaxPlayers() -> pijs
    react.glang.GList dgetConnectedPlayers() -> ckwF
    int dgetViewDistance() -> bhtE
    int dgetGamePort() -> dUhL
    java.lang.String dgetGameAddress() -> ktNt
    react.glang.GList dgetRemotePlugins() -> EvCp
    react.glang.GList dgetWorlds() -> vspi
    react.glang.GList dgetActions() -> bWuN
    react.glang.GList dgetSamplers() -> pYMu
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> SDDq
    199:199:java.lang.String getGameVersion() -> BlfB
    204:204:java.lang.String getReactVersion() -> XSSo
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> tnVE
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> tvdv
    229:229:java.lang.String getGameAddress() -> HCbi
    234:234:react.glang.GList getRemotePlugins() -> qKYO
    239:239:react.glang.GList getWorlds() -> BdVo
    244:244:react.glang.GList getActions() -> afNp
    249:249:react.glang.GList getSamplers() -> SwHQ
react.remote.server.ServerInfo$1 -> XtrA$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> vspi
    37:37:int dgetViewDistance() -> bhtE
    43:43:react.glang.GList dgetRemotePlugins() -> EvCp
    49:49:java.lang.String dgetReactVersion() -> YEGw
    55:55:java.lang.String dgetMotd() -> nlVu
    61:61:int dgetMaxPlayers() -> pijs
    67:67:java.lang.String dgetGameVersion() -> MuJX
    73:73:int dgetGameProtocol() -> XdHT
    79:79:int dgetGamePort() -> dUhL
    85:85:java.lang.String dgetGameAddress() -> ktNt
    91:91:react.glang.GList dgetConnectedPlayers() -> ckwF
    97:97:react.glang.GList dgetActions() -> bWuN
    103:103:react.glang.GList dgetSamplers() -> pYMu
react.remote.server.packet.ComputedFrame -> wMGc:
    react.glang.GMap values -> QOdX
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> bXLA
    28:36:void fromBytes(react.gnet.streams.ISS) -> bXLA
    40:40:react.glang.GMap getValues() -> KnoU
    45:46:void setValues(react.glang.GMap) -> Difh
react.remote.server.packet.SPacketOk -> dfqx:
    boolean ok -> WkIQ
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> bXLA
    33:34:void fromBytes(react.gnet.streams.ISS) -> bXLA
    38:38:boolean isOk() -> RQaO
    43:44:void setOk(boolean) -> rNHN
react.remote.server.packet.SPacketSendFrames -> XSPD:
    react.glang.GMap frames -> KWDn
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> bXLA
    36:44:void fromBytes(react.gnet.streams.ISS) -> bXLA
    48:48:react.glang.GMap getFrames() -> PdnE
    53:54:void setFrames(react.glang.GMap) -> bhlM
react.remote.server.packet.SPacketSendInfo -> IOSw:
    react.remote.server.ServerInfo info -> IHNf
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> bXLA
    33:34:void fromBytes(react.gnet.streams.ISS) -> bXLA
    38:38:react.remote.server.ServerInfo getInfo() -> tmuA
    43:44:void setInfo(react.remote.server.ServerInfo) -> bXLA
react.remote.server.packet.SPacketSendToken -> VLgq:
    java.lang.String token -> NqPc
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> bXLA
    33:34:void fromBytes(react.gnet.streams.ISS) -> bXLA
    38:38:java.lang.String getToken() -> xaPR
    43:44:void setToken(java.lang.String) -> Grph
react.remote.server.packet.ServerPacket -> RjpG:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> bXLA
    void fromBytes(react.gnet.streams.ISS) -> bXLA
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> HvcM
    42:42:java.lang.String getPacketName() -> DivN
react.remote.server.packet.ServerPacketType -> Pdia:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> oWYv
    react.remote.server.packet.ServerPacketType SEND_INFO -> RBFg
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> LkJG
    react.remote.server.packet.ServerPacketType OK -> ifjU
    react.remote.server.packet.ServerPacketType[] $VALUES -> cKfn
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> yAjw:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleAsyncQueue$1 -> yAjw$1:
    react.sampler.SampleAsyncQueue this$0 -> Gkyt
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleChunkTime -> PTHl:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleChunkTime$1 -> PTHl$1:
    react.sampler.SampleChunkTime this$0 -> pRLt
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleChunksLoaded -> Tyfh:
    react.graph.IFormatter formatter -> rhoF
    17:27:void <init>() -> <init>
    32:38:void construct() -> Digq
    43:44:void sample() -> Cfdo
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleChunksLoaded$1 -> Tyfh$1:
    react.sampler.SampleChunksLoaded this$0 -> TXmb
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> fJeY
react.sampler.SampleChunksLoadedPerSecond -> DGta:
    react.gmath.Average a -> LryN
    react.graph.IFormatter formatter -> rhoF
    16:29:void <init>() -> <init>
    34:40:void construct() -> Digq
    45:47:void sample() -> Cfdo
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleChunksLoadedPerSecond$1 -> DGta$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> pbpr
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> fJeY
react.sampler.SampleEntitiesDrops -> DXvT:
    react.graph.IFormatter formatter -> rhoF
    17:27:void <init>() -> <init>
    32:38:void construct() -> Digq
    43:44:void sample() -> Cfdo
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleEntitiesDrops$1 -> DXvT$1:
    react.sampler.SampleEntitiesDrops this$0 -> ghxH
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> fJeY
react.sampler.SampleEntitiesLiving -> vcUm:
    react.graph.IFormatter formatter -> rhoF
    17:27:void <init>() -> <init>
    32:38:void construct() -> Digq
    43:44:void sample() -> Cfdo
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleEntitiesLiving$1 -> vcUm$1:
    react.sampler.SampleEntitiesLiving this$0 -> aFDk
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> fJeY
react.sampler.SampleEntitiesTiles -> HUBi:
    react.graph.IFormatter formatter -> rhoF
    17:27:void <init>() -> <init>
    32:38:void construct() -> Digq
    43:44:void sample() -> Cfdo
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleEntitiesTiles$1 -> HUBi$1:
    react.sampler.SampleEntitiesTiles this$0 -> DtUi
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> fJeY
react.sampler.SampleEntitiesTotal -> LaNk:
    react.graph.IFormatter formatter -> rhoF
    17:27:void <init>() -> <init>
    32:38:void construct() -> Digq
    43:44:void sample() -> Cfdo
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleEntitiesTotal$1 -> LaNk$1:
    react.sampler.SampleEntitiesTotal this$0 -> PMDg
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> fJeY
react.sampler.SampleEntityDroppedTicks -> ccoh:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleEntityDroppedTicks$1 -> ccoh$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> ixPW
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleEntityTime -> ryMH:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleEntityTime$1 -> ryMH$1:
    react.sampler.SampleEntityTime this$0 -> MLLY
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleEntityTimeLock -> Daga:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleEntityTimeLock$1 -> Daga$1:
    react.sampler.SampleEntityTimeLock this$0 -> WIGx
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleExplosionTime -> rWJR:
    react.graph.IFormatter formatter -> rhoF
    17:27:void <init>() -> <init>
    32:38:void construct() -> Digq
    43:44:void sample() -> Cfdo
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleExplosionTime$1 -> rWJR$1:
    react.sampler.SampleExplosionTime this$0 -> SDkb
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> fJeY
react.sampler.SampleFluidPerSecond -> Qglt:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleFluidPerSecond$1 -> Qglt$1:
    react.sampler.SampleFluidPerSecond this$0 -> xbYF
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleFluidPerTick -> YMab:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    46:53:void sample() -> Cfdo
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleFluidPerTick$1 -> YMab$1:
    react.sampler.SampleFluidPerTick this$0 -> jGmn
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleFluidTickTime -> ytnw:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleFluidTickTime$1 -> ytnw$1:
    react.sampler.SampleFluidTickTime this$0 -> NOPC
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleFluidTickUtilization -> yRkl:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    46:53:void sample() -> Cfdo
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleFluidTickUtilization$1 -> yRkl$1:
    react.sampler.SampleFluidTickUtilization this$0 -> hBGm
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleHopperPerSecond -> OGqy:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleHopperPerSecond$1 -> OGqy$1:
    react.sampler.SampleHopperPerSecond this$0 -> nmko
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleHopperPerTick -> BlcR:
    react.graph.IFormatter formatter -> rhoF
    18:29:void <init>() -> <init>
    34:40:void construct() -> Digq
    47:54:void sample() -> Cfdo
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleHopperPerTick$1 -> BlcR$1:
    react.sampler.SampleHopperPerTick this$0 -> Xmmp
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleHopperTickTime -> BAnh:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleHopperTickTime$1 -> BAnh$1:
    react.sampler.SampleHopperTickTime this$0 -> uraF
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleHopperTickUtilization -> XBMR:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    46:53:void sample() -> Cfdo
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleHopperTickUtilization$1 -> XBMR$1:
    react.sampler.SampleHopperTickUtilization this$0 -> vudE
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleMemoryAllocated -> pjUW:
    react.graph.IFormatter formatter -> rhoF
    17:27:void <init>() -> <init>
    32:38:void construct() -> Digq
    43:44:void sample() -> Cfdo
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleMemoryAllocated$1 -> pjUW$1:
    react.sampler.SampleMemoryAllocated this$0 -> aEdU
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> fJeY
react.sampler.SampleMemoryAllocationPerSecond -> tmpV:
    react.graph.IFormatter formatter -> rhoF
    17:27:void <init>() -> <init>
    32:38:void construct() -> Digq
    43:44:void sample() -> Cfdo
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleMemoryAllocationPerSecond$1 -> tmpV$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> ebqi
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> fJeY
react.sampler.SampleMemoryFree -> baLT:
    react.graph.IFormatter formatter -> rhoF
    17:27:void <init>() -> <init>
    32:38:void construct() -> Digq
    43:44:void sample() -> Cfdo
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleMemoryFree$1 -> baLT$1:
    react.sampler.SampleMemoryFree this$0 -> xjgw
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> fJeY
react.sampler.SampleMemoryMax -> qvJD:
    react.graph.IFormatter formatter -> rhoF
    17:27:void <init>() -> <init>
    32:38:void construct() -> Digq
    43:44:void sample() -> Cfdo
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleMemoryMax$1 -> qvJD$1:
    react.sampler.SampleMemoryMax this$0 -> ayJC
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> fJeY
react.sampler.SampleMemoryUse -> hYlU:
    react.graph.IFormatter formatter -> rhoF
    17:27:void <init>() -> <init>
    32:38:void construct() -> Digq
    43:44:void sample() -> Cfdo
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleMemoryUse$1 -> hYlU$1:
    react.sampler.SampleMemoryUse this$0 -> TabP
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> fJeY
react.sampler.SamplePhysicsTickTime -> UcWL:
    react.graph.IFormatter formatter -> rhoF
    17:27:void <init>() -> <init>
    32:38:void construct() -> Digq
    43:44:void sample() -> Cfdo
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SamplePhysicsTickTime$1 -> UcWL$1:
    react.sampler.SamplePhysicsTickTime this$0 -> nLIw
    1:19:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> fJeY
react.sampler.SampleRedstonePerSecond -> pXsC:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleRedstonePerSecond$1 -> pXsC$1:
    react.sampler.SampleRedstonePerSecond this$0 -> EeuV
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleRedstonePerTick -> UlHX:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    46:53:void sample() -> Cfdo
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleRedstonePerTick$1 -> UlHX$1:
    react.sampler.SampleRedstonePerTick this$0 -> LayI
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleRedstoneTickTime -> UIdg:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleRedstoneTickTime$1 -> UIdg$1:
    react.sampler.SampleRedstoneTickTime this$0 -> GRia
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleRedstoneTickUtilization -> eHSO:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    46:53:void sample() -> Cfdo
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleRedstoneTickUtilization$1 -> eHSO$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> uGkk
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleSyncQueue -> XlaH:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleSyncQueue$1 -> XlaH$1:
    react.sampler.SampleSyncQueue this$0 -> gWty
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleTickTime -> VMHl:
    react.graph.IFormatter formatter -> rhoF
    react.gmath.Average aa -> Swnj
    17:29:void <init>() -> <init>
    34:40:void construct() -> Digq
    45:47:void sample() -> Cfdo
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleTickTime$1 -> VMHl$1:
    react.sampler.SampleTickTime this$0 -> LkJx
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> fJeY
react.sampler.SampleTickUtilization -> esFq:
    react.graph.IFormatter formatter -> rhoF
    react.gmath.Average aa -> Swnj
    17:29:void <init>() -> <init>
    34:40:void construct() -> Digq
    45:47:void sample() -> Cfdo
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleTickUtilization$1 -> esFq$1:
    react.sampler.SampleTickUtilization this$0 -> xYgB
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> fJeY
react.sampler.SampleTicksPerSecond -> Rjnf:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleTicksPerSecond$1 -> Rjnf$1:
    react.sampler.SampleTicksPerSecond this$0 -> qTqm
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleTileDroppedTicks -> GINE:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleTileDroppedTicks$1 -> GINE$1:
    react.sampler.SampleTileDroppedTicks this$0 -> WaxS
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleTileTime -> bPJo:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleTileTime$1 -> bPJo$1:
    react.sampler.SampleTileTime this$0 -> bryI
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.sampler.SampleTileTimeLock -> rxkO:
    react.graph.IFormatter formatter -> rhoF
    18:28:void <init>() -> <init>
    33:39:void construct() -> Digq
    44:45:void sample() -> Cfdo
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> dnrm
react.sampler.SampleTileTimeLock$1 -> rxkO$1:
    react.sampler.SampleTileTimeLock this$0 -> pbpX
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> fJeY
react.security.checkpoints.SecurityCheckpointAlpha -> jyeC:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> Btvx
    78:148:void doScan(java.lang.Runnable) -> kHsM
    152:181:byte[] readResource(java.io.File,java.lang.String) -> bXLA
    186:217:react.glang.GMap scan(java.io.File) -> kHsM
    150:150:byte[] access$0(java.io.File,java.lang.String) -> kHsM
react.security.checkpoints.SecurityCheckpointAlpha$1 -> jyeC$1:
    java.lang.Runnable val$r -> HUll
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> jyeC$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> tVLC
    java.lang.Runnable val$r -> HUll
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> tnSp:
    java.lang.String ip -> QaHo
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> sjpO:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> sjpO$1:
    react.security.locks.SecurityLockAlpha this$0 -> qerc
    java.io.File val$f -> ySwh
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> UJHU:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> lnYR
react.slate.PhantomSlate -> nSQB:
    react.glang.GList lines -> riVe
    react.glang.GList viewers -> KWGO
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> mjhO
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> Iyjb
    44:45:void set(int,java.lang.String) -> kHsM
    50:51:void setLines(react.glang.GList) -> doSd
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> afVt
    91:95:void addViewer(org.bukkit.entity.Player) -> lnYR
    100:102:void removeViewer(org.bukkit.entity.Player) -> pjDd
    107:107:react.glang.GList getViewers() -> RHoc
    113:113:boolean isViewing(org.bukkit.entity.Player) -> xhie
    119:120:void addLine(java.lang.String) -> kHtJ
    125:126:void clearLines() -> BSTu
react.slate.Slate -> FgoV:
    void build() -> afVt
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> Iyjb
    void set(int,java.lang.String) -> kHsM
    void setLines(react.glang.GList) -> doSd
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> lnYR
    void addLine(java.lang.String) -> kHtJ
    void clearLines() -> BSTu
    void removeViewer(org.bukkit.entity.Player) -> pjDd
    react.glang.GList getViewers() -> RHoc
    boolean isViewing(org.bukkit.entity.Player) -> xhie
    void update() -> update
react.slate.SlateUtil -> SKqf:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> FySN
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> WibK
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> bXLA
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> kHsM
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> Difh
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> bXLA
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> bXLA
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> kHsM
    186:196:java.lang.String convertJSON(java.lang.String) -> VTiU
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> kHsM
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> bXLA
react.surge.Main -> QhPC:
    react.glang.GList plugins -> UCBR
    react.glang.GMap pluginInstances -> nnKu
    react.glang.GList controllerSet -> DAQV
    react.glang.GMap anchors -> eROs
    react.glang.GList classes -> XwBL
    java.lang.reflect.Field nsField -> Vxjr
    java.lang.reflect.Field thField -> ORTR
    react.glang.GList tracks -> HxTI
    long nsf -> CqTn
    42:46:void <clinit>() -> <clinit>
    48:51:void <init>() -> <init>
    57:57:void onControllerRegistry() -> yBOQ
    62:81:long getNanoSync() -> aCyp
    86:87:void requestResetNanos() -> ntsQ
    91:99:void requestReload() -> jWea
    105:114:void requestReload(java.lang.Runnable) -> Difh
    119:133:int getThreadCount() -> getThreadCount
    144:202:void onStart(react.surge.util.Protocol) -> bXLA
    210:252:void onStop() -> Nohc
    258:258:void onPostInit() -> oDrL
    264:264:void onPreInit() -> maPK
    268:279:void shutDownAmps() -> DGxQ
    283:492:void initializeAmps() -> FqCV
    497:538:void doScan() -> YVYE
    542:564:void scanForPoolDefiners() -> VxCk
    568:584:void scanForRawEvents() -> cmHI
    588:604:void scanForDynamicTrack() -> QhTK
    608:629:void scanForAmps() -> AOrU
    634:645:void onTick() -> HnJf
react.surge.Main$1 -> QhPC$1:
    1:91:void <init>() -> <init>
    97:97:void run() -> run
react.surge.PluginAmp -> TqXf:
    react.surge.control.AmpedPlugin plugin -> Kgix
    boolean connected -> connected
    int masterTask -> FFyB
    java.lang.Runnable onReload -> GtpK
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> aoQt
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> NUxi
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> bXLA
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> bXLA
    123:124:void stopTask(int) -> SnCr
    128:128:react.surge.control.AmpedPlugin getPlugin() -> BAtt
    133:133:int getMasterTask() -> WidA
    138:138:java.lang.Runnable getOnReload() -> TFft
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> bXLA
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> Cfdo
    158:159:void setOnReload(java.lang.Runnable) -> bhlM
    67:67:void access$0(react.surge.PluginAmp) -> bXLA
react.surge.PluginAmp$1 -> TqXf$1:
    react.surge.PluginAmp this$0 -> cwBL
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> TqXf$2:
    react.surge.PluginAmp this$0 -> cwBL
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> TqXf$3:
    react.surge.PluginAmp this$0 -> cwBL
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> XAoK:
    react.surge.PluginAmp amp -> xYiO
    react.glang.GList tickComponents -> GBLb
    react.glang.GList atickComponents -> wyIm
    react.surge.sched.TaskManager taskmgr -> DIct
    react.surge.hotload.HotloadManager hotloadmgr -> vJrL
    java.lang.Thread mainThread -> NqTn
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> bXLA
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> mWjq
    44:44:java.io.File folder() -> CEXm
    49:51:java.io.File getPluginJarFile() -> PTMw
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> bhlM
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> MdWO
    74:74:react.glang.GList getTickComponents() -> jXIW
    79:79:react.glang.GList getAsyncTickComponents() -> HTgG
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> bXLA
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> kHsM
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> kHsM
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> NMfr
    126:126:boolean hasAmp() -> APTV
    131:131:react.surge.PluginAmp getAmp() -> sRBI
    136:136:react.surge.sched.TaskManager getTaskManager() -> JkoE
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> IOYg
react.surge.cluster.Cluster -> lnkj:
    react.surge.cluster.ClusterType type -> KMxQ
    java.lang.Object t -> lNHB
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> VgAn
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> lMJO:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> RcBb:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> QEkt:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> XSRI:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> qShP:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> nuSX:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> NMcI:
    react.surge.cluster.ClusterType INT -> MLNm
    react.surge.cluster.ClusterType BOOLEAN -> DRVD
    react.surge.cluster.ClusterType STRING -> pcTK
    react.surge.cluster.ClusterType STRING_LIST -> hIyH
    react.surge.cluster.ClusterType DOUBLE -> lyJQ
    react.surge.cluster.ClusterType LONG -> nmnJ
    react.surge.cluster.ClusterType[] ENUM$VALUES -> LIIv
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> MlcI:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> ekcb
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> bXLA
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> bXLA
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> awbG
react.surge.cluster.ConfigurationDataOutput -> dwto:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> kHsM
react.surge.cluster.DataCluster -> Fgmp:
    react.glang.GMap clusters -> KNWc
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> YVWy
    29:33:void fromJson(react.json.JSONObject) -> DXdy
    37:44:react.json.JSONObject toJson() -> wnnf
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> EmaT
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> bXLA
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> vITR
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> SeQk
    194:195:void set(java.lang.String,int) -> DXdy
    199:200:void set(java.lang.String,boolean) -> Difh
    204:205:void set(java.lang.String,double) -> Difh
    209:210:void set(java.lang.String,long) -> Difh
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> bXLA
react.surge.cluster.ICluster -> wUXt:
    react.surge.cluster.ClusterType getType() -> VgAn
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> ECIX:
react.surge.cluster.IDataInput -> NMcN:
    react.surge.cluster.DataCluster read(java.io.File) -> Difh
react.surge.cluster.IDataOutput -> iwDu:
    void write(react.surge.cluster.DataCluster,java.io.File) -> bXLA
react.surge.cluster.Key -> BmFL:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> RYoX:
    int value() -> value
react.surge.cluster.KeyStore -> qeHv:
react.surge.cluster.ReflectedConfigurationException -> ergs:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> prfp:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> Difh
react.surge.cluster.YamlDataOutput -> WrQG:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> bXLA
react.surge.collection.GSound -> LiaA:
    java.lang.String sound -> nLKP
    org.bukkit.Sound iSound -> EDUg
    java.lang.Float volume -> DcUh
    java.lang.Float pitch -> fwWk
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> ykmI
    61:72:void play(org.bukkit.Location) -> DXdy
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> bXLA
    93:93:java.lang.String getSound() -> xYAI
    98:99:void setSound(java.lang.String) -> dnrm
    103:103:org.bukkit.Sound getiSound() -> cSTT
    108:109:void setiSound(org.bukkit.Sound) -> bXLA
    113:113:java.lang.Float getVolume() -> pPkb
    118:119:void setVolume(java.lang.Float) -> bXLA
    123:123:java.lang.Float getPitch() -> uFiK
    128:129:void setPitch(java.lang.Float) -> kHsM
react.surge.control.AmpedPlugin -> uOSE:
    react.glang.GList controllers -> lEdO
    react.gconcurrent.ParallelPoolManager pp -> whGW
    react.surge.server.CoreTickThread ctt -> bPyA
    24:27:void <init>() -> <init>
    void doScan() -> YVYE
    long getNanoSync() -> aCyp
    int getThreadCount() -> getThreadCount
    39:39:void onLoad() -> onLoad
    46:85:void onEnable() -> onEnable
    90:96:void onDisable() -> onDisable
    101:101:react.glang.GList getControllers() -> eQMJ
    107:108:void registerController(react.surge.control.IController) -> bXLA
    113:124:void onTick() -> HnJf
    129:129:java.lang.String getTickName() -> xWqG
    135:135:react.gconcurrent.ParallelPoolManager getThreadPool() -> FpgD
    141:256:void destroyOldThreads() -> FOEC
    void onControllerRegistry() -> yBOQ
    void onStart(react.surge.util.Protocol) -> bXLA
    void onStop() -> Nohc
    void onPostInit() -> oDrL
    void onPreInit() -> maPK
react.surge.control.AmpedPlugin$1 -> uOSE$1:
    react.surge.control.AmpedPlugin this$0 -> pRQW
    1:56:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    61:61:long getNanoGate() -> xytt
react.surge.control.AmpedPlugin$2 -> uOSE$2:
    react.surge.control.AmpedPlugin this$0 -> pRQW
    1:154:void <init>(react.surge.control.AmpedPlugin) -> <init>
    159:249:void run() -> run
react.surge.control.Control -> yuPw:
react.surge.control.Controller -> EeMI:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> Aqqd:
react.surge.control.Enable -> HmwR:
react.surge.control.IController -> pbIn:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> DXyi:
react.surge.control.Plugin -> HwIa:
react.surge.control.SurgePlugin -> nApW:
    void onStart(react.surge.util.Protocol) -> bXLA
    void onStop() -> Nohc
    void onPostInit() -> oDrL
    void onPreInit() -> maPK
    void onControllerRegistry() -> yBOQ
    void registerController(react.surge.control.IController) -> bXLA
    react.glang.GList getControllers() -> eQMJ
    react.gconcurrent.ParallelPoolManager getThreadPool() -> FpgD
react.surge.hotload.HotloadManager -> RRCR:
    react.glang.GMap filemods -> rXWY
    react.glang.GMap filesizes -> ptSx
    react.glang.GMap fileacts -> kKVJ
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> bXLA
    35:38:void untrack(java.io.File) -> bhlM
    42:45:void untrackall() -> lMPj
    50:86:void onTick() -> HnJf
    91:91:java.lang.String getTickName() -> xWqG
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> bXLA
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> kHsM
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> Difh
react.surge.hotload.HotloadManager$1 -> RRCR$1:
    react.surge.hotload.HotloadManager this$0 -> jQDX
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> CpJg:
    boolean init -> AkPX
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> BvdA
    java.lang.Class IChatBaseComponent -> BLOu
    java.lang.Class ChatSerializer -> MfBt
    java.lang.Class PacketPlayOutPlayerInfo -> HUrW
    java.lang.Class PlayerInfoData -> SgTW
    java.lang.Class EnumPlayerInfoAction -> YFal
    java.lang.Class GameProfile -> HNCM
    java.lang.Class EnumGamemode -> kCDs
    java.lang.Class TileEntitySkull -> XnSM
    java.lang.Class LoadingCache -> xIJe
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> pPgf:
    react.surge.nms.NMSX bountifulAPI -> xIJd
    boolean useOldMethods -> YORs
    java.lang.String nmsver -> MLQM
    java.lang.Object eTimes -> fTup
    java.lang.Object eTitle -> MmqT
    java.lang.Object eSubtitle -> TPcG
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> bXLA
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> BdCt
    75:89:java.lang.Class getCBClass(java.lang.String) -> SnCr
    96:104:java.lang.Object serializeChat(java.lang.String) -> Cfdo
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> bXLA
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> bXLA
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> NMiw
    151:151:java.lang.String craftPackage() -> gpdt
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> bXLA
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> bXLA
    197:207:java.lang.Class getNMSClass(java.lang.String) -> Digq
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> bXLA
    279:280:void clearTitle(org.bukkit.entity.Player) -> YoRo
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> kHsM
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> bXLA
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> bXLA
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> hQMD
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> SeQk
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> Usgp
    434:447:int ping(org.bukkit.entity.Player) -> gUwW
react.surge.nms.NMSX$1 -> pPgf$1:
    org.bukkit.entity.Player val$player -> SMSu
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> pPgf$2:
    org.bukkit.entity.Player val$player -> SMSu
    java.lang.String val$message -> MvcG
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> FpcC:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> DsRL
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> bXLA
    68:82:void clearTitle(org.bukkit.entity.Player) -> YoRo
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> bXLA
react.surge.nms.PacketUtil$V -> FpcC$bXLA:
    react.surge.nms.PacketUtil$V R17 -> JvKH
    react.surge.nms.PacketUtil$V R18 -> lMvt
    react.surge.nms.PacketUtil$V R19 -> kmXR
    react.surge.nms.PacketUtil$V R111 -> KVij
    react.surge.nms.PacketUtil$V R110 -> ELhR
    react.surge.nms.PacketUtil$V R112 -> FPKt
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> kJsW
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> imvO:
    java.lang.String title -> title
    java.lang.String subTitle -> rFwJ
    java.lang.String action -> action
    java.lang.Integer fadeIn -> aWIj
    java.lang.Integer fadeOut -> lxkG
    java.lang.Integer stayTime -> sBKE
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> kkXk
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> qurG
    79:80:void setSubTitle(java.lang.String) -> IOER
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> VxEi
    99:100:void setFadeIn(java.lang.Integer) -> Difh
    104:104:java.lang.Integer getFadeOut() -> yBUB
    109:110:void setFadeOut(java.lang.Integer) -> bhlM
    114:114:java.lang.Integer getStayTime() -> vlPS
    119:120:void setStayTime(java.lang.Integer) -> DXdy
react.surge.nms.VersionBukkit -> skSS:
    react.surge.nms.VersionBukkit VU -> qewL
    react.surge.nms.VersionBukkit V7 -> UCFQ
    react.surge.nms.VersionBukkit V8 -> fniP
    react.surge.nms.VersionBukkit V9 -> VhOE
    react.surge.nms.VersionBukkit V11 -> rOlD
    react.surge.nms.VersionBukkit V111 -> SUsW
    react.surge.nms.VersionBukkit V112 -> WINf
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> CNuG
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> rgsX
    27:32:boolean uc() -> mjEj
    37:67:react.surge.nms.VersionBukkit get() -> GIWG
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> PdnE:
    void burst(java.lang.Object) -> pidT
    void setTimeLock(double) -> RPkQ
    double getEstimatedTimeUse() -> PnCx
    int flush() -> LrXe
    int flush(react.gbench.Profiler) -> bXLA
    void queue(java.lang.Object) -> ERuh
    void queue(java.util.List) -> Difh
    void queue(java.lang.Object[]) -> bXLA
react.surge.sched.ICancellable -> KxCC:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> SLUR:
    void onTick() -> HnJf
    java.lang.String getTickName() -> xWqG
react.surge.sched.ITask -> AjCh:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> DjaS
    java.lang.String getName() -> getName
    double getComputeTime() -> rpcs
    double getTotalComputeTime() -> MJgb
    double getActiveTime() -> nJcy
    boolean hasCompleted() -> qnAX
react.surge.sched.Task -> AOpN:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> foLu
    double computeTime -> nmri
    double totalComputeTime -> Tiwc
    double activeTime -> jGsl
    boolean completed -> completed
    react.gbench.Profiler profiler -> usIE
    react.gbench.Profiler activeProfiler -> eJGB
    int ticks -> WHmc
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> bhlM
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> DjaS
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> rpcs
    150:150:boolean hasCompleted() -> qnAX
    156:156:double getTotalComputeTime() -> MJgb
    162:162:double getActiveTime() -> nJcy
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> Difh
    15:15:void access$1(react.surge.sched.Task,boolean) -> bXLA
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> bhlM
    14:14:void access$3(react.surge.sched.Task,double) -> bXLA
    12:12:void access$4(react.surge.sched.Task,double) -> kHsM
    14:14:double access$5(react.surge.sched.Task) -> DXdy
    13:13:void access$6(react.surge.sched.Task,double) -> Difh
    13:13:double access$7(react.surge.sched.Task) -> SeQk
    12:12:double access$8(react.surge.sched.Task) -> JQfN
react.surge.sched.Task$1 -> AOpN$1:
    react.surge.sched.Task this$0 -> ohfH
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> AOpN$2:
    react.surge.sched.Task this$0 -> ohfH
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> AOpN$3:
    react.surge.sched.Task this$0 -> ohfH
    int val$total -> bjoh
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> xaPR:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> foLu
    double computeTime -> nmri
    double totalComputeTime -> Tiwc
    double activeTime -> jGsl
    boolean completed -> completed
    react.gbench.Profiler profiler -> usIE
    react.gbench.Profiler activeProfiler -> eJGB
    int ticks -> WHmc
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> bhlM
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> DjaS
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> rpcs
    101:101:boolean hasCompleted() -> qnAX
    107:107:double getTotalComputeTime() -> MJgb
    113:113:double getActiveTime() -> nJcy
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> bXLA
    12:12:void access$1(react.surge.sched.TaskLater,double) -> bXLA
    13:13:double access$2(react.surge.sched.TaskLater) -> kHsM
    12:12:double access$3(react.surge.sched.TaskLater) -> Difh
    13:13:void access$4(react.surge.sched.TaskLater,double) -> kHsM
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> bhlM
    14:14:double access$6(react.surge.sched.TaskLater) -> DXdy
    14:14:void access$7(react.surge.sched.TaskLater,double) -> Difh
react.surge.sched.TaskLater$1 -> xaPR$1:
    react.surge.sched.TaskLater this$0 -> NiIC
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> TWhY:
    react.glang.GList tasks -> tDWW
    react.glang.GMap taskProfiles -> MwFp
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> bXLA
    25:35:void onTick() -> HnJf
    39:40:void putFinishingTask(react.surge.sched.ITask) -> kHsM
    44:53:void putTask(react.surge.sched.ITask) -> Difh
    58:58:java.lang.String getTickName() -> xWqG
    63:63:react.glang.GList getTasks() -> palP
    68:68:react.glang.GMap getTaskProfiles() -> wwav
react.surge.sched.TaskProfile -> tmuA:
    double activeTime -> jGsl
    double computeTickTime -> EMLV
    double computeTime -> nmri
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> nJcy
    23:24:void setActiveTime(double) -> oLnK
    28:28:double getComputeTickTime() -> PSoR
    33:34:void setComputeTickTime(double) -> lnYR
    38:38:double getComputeTime() -> rpcs
    43:44:void setComputeTime(double) -> pjDd
react.surge.server.AsyncTick -> OGwr:
react.surge.server.CPS -> rhOf:
    react.glang.GMap keys -> HNER
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> eOtF
    46:99:void scan() -> OQMK
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> Difh
react.surge.server.CoreTickThread -> SDDq:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> BlfB:
    long memoryFree -> XTcA
    long memoryUsed -> fnlI
    long memoryMax -> usGi
    long lastMemoryUsed -> JJxm
    long memoryUsedAfterGC -> Lbag
    long allocated -> TsKK
    long collected -> WjqN
    long collections -> NOUr
    long sms -> grOn
    long memoryAllocatedPerTick -> LtCt
    long memoryCollectedPerTick -> dOSy
    long memoryFullyAllocatedPerTick -> YNsF
    long mah -> GBOT
    long mahs -> UTHn
    22:39:void <init>() -> <init>
    void onAllocationSet() -> IiMt
    46:107:void run() -> run
    111:111:long getMemoryFree() -> fdoX
    116:116:long getMemoryUsed() -> getMemoryUsed
    121:121:long getMemoryMax() -> TWkV
    126:126:long getLastMemoryUsed() -> iLVm
    131:131:long getMemoryUsedAfterGC() -> WXdF
    136:136:long getAllocated() -> getAllocated
    141:141:long getCollected() -> OPlY
    146:146:long getCollections() -> QNao
    151:151:long getSms() -> aVAL
    156:156:long getMemoryAllocatedPerTick() -> aMPD
    161:161:long getMemoryCollectedPerTick() -> HThh
    166:166:long getMemoryFullyAllocatedPerTick() -> RHss
    171:171:long getMah() -> iKts
    176:176:long getMahs() -> lwcB
react.surge.server.SuperSampler -> XSSo:
    react.gmath.Average ticksPerSecondL -> hAmL
    react.gmath.Average tickTimeL -> oiFD
    react.gmath.Average mahL -> UBgE
    double ticksPerSecond -> cvQs
    double ticksPerSecondRaw -> fLgc
    double tickTime -> Bedo
    double tickTimeRaw -> uXsT
    boolean running -> running
    boolean frozen -> NqXK
    double tickUtilizationRaw -> rWyu
    double tickUtilization -> usGI
    double leftoverTickTime -> ohcm
    long memoryUse -> ayOL
    long memoryAllocated -> hmAe
    long memoryCollected -> GKAW
    long mahs -> UTHn
    int totalChunks -> aVkL
    int totalEntities -> GuTd
    int totalDrops -> raLe
    int totalTiles -> KFNU
    int totalLiving -> hSQw
    int chunksLoaded -> KgpT
    int chunksUnloaded -> FjCf
    react.surge.server.WorldMonitor worldMonitor -> cfFK
    react.surge.server.TPSMonitor tpsMonitor -> MwIA
    react.surge.server.MemoryMonitor memoryMonitor -> rPOM
    java.lang.StackTraceElement[] lockStack -> THWq
    react.glang.GMap spikes -> VETf
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> HnJf
    154:154:java.lang.String getTickName() -> xWqG
    159:159:react.gmath.Average getTicksPerSecondL() -> kIju
    164:164:double getTicksPerSecond() -> GjlV
    169:169:double getTicksPerSecondRaw() -> htGd
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> rWPv
    184:184:react.gmath.Average getTickTimeL() -> Edqq
    189:189:double getTickTime() -> xqvu
    194:194:double getTickTimeRaw() -> mOti
    199:199:double getTickUtilizationRaw() -> sYwD
    204:204:double getTickUtilization() -> jFke
    209:209:double getLeftoverTickTime() -> iCiG
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> uGKv
    219:219:long getMemoryUse() -> qKaB
    224:224:long getMemoryAllocated() -> MBYO
    229:229:long getMemoryCollected() -> JktF
    234:234:react.gmath.Average getMahL() -> yRve
    239:239:long getMahs() -> lwcB
    244:244:int getTotalChunks() -> hYvg
    249:249:int getTotalEntities() -> IWoX
    254:254:int getTotalDrops() -> Selk
    259:259:int getTotalTiles() -> bXgF
    264:264:int getTotalLiving() -> tKwi
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> DYbK
    274:274:int getChunksLoaded() -> RIXY
    279:279:int getChunksUnloaded() -> QqIb
    284:285:void setTicksPerSecondL(react.gmath.Average) -> bXLA
    289:290:void setTickTimeL(react.gmath.Average) -> kHsM
    294:295:void setMahL(react.gmath.Average) -> Difh
    299:300:void setTicksPerSecond(double) -> KChC
    304:305:void setTicksPerSecondRaw(double) -> xhie
    309:310:void setTickTime(double) -> ykmI
    314:315:void setTickTimeRaw(double) -> YoRo
    319:320:void setRunning(boolean) -> fJeY
    324:325:void setTickUtilizationRaw(double) -> gUwW
    329:330:void setTickUtilization(double) -> kkXk
    334:335:void setLeftoverTickTime(double) -> QNLV
    339:340:void setMemoryUse(long) -> RPkQ
    344:345:void setMemoryAllocated(long) -> oLnK
    349:350:void setMemoryCollected(long) -> lnYR
    354:355:void setMahs(long) -> pjDd
    359:360:void setTotalChunks(int) -> Digq
    364:365:void setTotalEntities(int) -> hQMD
    369:370:void setTotalDrops(int) -> IOER
    374:375:void setTotalTiles(int) -> eOtF
    379:380:void setTotalLiving(int) -> IhWI
    384:385:void setChunksLoaded(int) -> JHvN
    389:390:void setChunksUnloaded(int) -> SvTc
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> bXLA
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> bXLA
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> bXLA
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> FWVE
    419:419:react.glang.GMap getSpikes() -> FpWQ
    31:31:void access$0(react.surge.server.SuperSampler,int) -> bXLA
    33:33:void access$1(react.surge.server.SuperSampler,int) -> kHsM
    34:34:void access$2(react.surge.server.SuperSampler,int) -> Difh
    32:32:void access$3(react.surge.server.SuperSampler,int) -> bhlM
    35:35:void access$4(react.surge.server.SuperSampler,int) -> DXdy
    36:36:void access$5(react.surge.server.SuperSampler,int) -> SeQk
    37:37:void access$6(react.surge.server.SuperSampler,int) -> JQfN
    19:19:void access$7(react.surge.server.SuperSampler,double) -> bXLA
    21:21:void access$8(react.surge.server.SuperSampler,double) -> kHsM
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> bXLA
    19:19:double access$10(react.surge.server.SuperSampler) -> kHsM
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> Difh
    21:21:double access$12(react.surge.server.SuperSampler) -> bhlM
    18:18:void access$13(react.surge.server.SuperSampler,double) -> Difh
    20:20:void access$14(react.surge.server.SuperSampler,double) -> bhlM
    24:24:void access$15(react.surge.server.SuperSampler,double) -> DXdy
    20:20:double access$16(react.surge.server.SuperSampler) -> DXdy
    25:25:void access$17(react.surge.server.SuperSampler,double) -> SeQk
    25:25:double access$18(react.surge.server.SuperSampler) -> SeQk
    26:26:void access$19(react.surge.server.SuperSampler,double) -> JQfN
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> bXLA
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> JQfN
    27:27:void access$22(react.surge.server.SuperSampler,long) -> bXLA
    28:28:void access$23(react.surge.server.SuperSampler,long) -> kHsM
    29:29:void access$24(react.surge.server.SuperSampler,long) -> Difh
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> GQMo
    30:30:void access$26(react.surge.server.SuperSampler,long) -> bhlM
react.surge.server.SuperSampler$1 -> XSSo$1:
    react.surge.server.SuperSampler this$0 -> jGuu
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> bXLA
react.surge.server.SuperSampler$2 -> XSSo$2:
    react.surge.server.SuperSampler this$0 -> jGuu
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> vJMm
    106:107:void onSpike() -> lUbJ
react.surge.server.SuperSampler$3 -> XSSo$3:
    react.surge.server.SuperSampler this$0 -> jGuu
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> IiMt
react.surge.server.TPSMonitor -> tnVE:
    double tickTimeMS -> RJaq
    double rawTicksPerSecond -> cTdQ
    react.gbench.Profiler tickProfiler -> whNd
    react.gbench.Profiler tickTimeProfiler -> oGDn
    boolean ticked -> yUCP
    java.lang.Thread$State lastState -> Wsdc
    double actualTickTimeMS -> oGDl
    double ltt -> aEmB
    long lastTick -> ydhT
    boolean frozen -> NqXK
    java.lang.StackTraceElement[] lockedStack -> jsJh
    double lmsx -> raPC
    23:40:void <init>() -> <init>
    void onTicked() -> vJMm
    void onSpike() -> lUbJ
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> bXLA
    160:160:double getTickTimeMS() -> sjwR
    165:165:double getRawTicksPerSecond() -> GQhI
    170:170:react.gbench.Profiler getTickProfiler() -> gxva
    175:175:boolean isTicked() -> ncxa
    180:181:void markTick() -> domC
    185:185:react.gbench.Profiler getTickTimeProfiler() -> UdCM
    190:190:java.lang.Thread$State getLastState() -> lgCk
    195:195:double getActualTickTimeMS() -> cBWN
    200:200:double getLtt() -> ebPI
    205:205:long getLastTick() -> jFUx
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> cKKQ
react.surge.server.WorldMonitor -> tvdv:
    boolean chunksChanged -> KgqI
    boolean dropChanged -> VFNO
    boolean tileChanged -> dNvA
    boolean livingChanged -> UeNR
    boolean totalChanged -> OIjK
    boolean updated -> UBiB
    int totalChunks -> aVkL
    int totalDrops -> raLe
    int totalTiles -> KFNU
    int totalLiving -> hSQw
    int totalEntities -> GuTd
    int chunksLoaded -> KgpT
    int chunksUnloaded -> FjCf
    long ms -> EmaT
    24:43:void <init>() -> <init>
    48:73:void run() -> run
    void updated(int,int,int,int,int,int,int) -> bXLA
    80:85:void on(org.bukkit.event.world.ChunkLoadEvent) -> kHsM
    90:95:void on(org.bukkit.event.world.ChunkUnloadEvent) -> bXLA
    100:101:void on(org.bukkit.event.entity.EntitySpawnEvent) -> bXLA
    106:107:void on(org.bukkit.event.entity.EntityDeathEvent) -> bXLA
    112:113:void on(org.bukkit.event.player.PlayerDropItemEvent) -> bXLA
    118:119:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> bXLA
    124:125:void on(org.bukkit.event.block.BlockPlaceEvent) -> bXLA
    130:131:void on(org.bukkit.event.block.BlockBreakEvent) -> bXLA
    135:136:void doUpdate() -> aEEN
    140:191:void sample() -> Cfdo
    195:201:void sampleTotalCount() -> lMUF
    205:211:void sampleLivingCount() -> xPWU
    215:251:void sampleTileCount() -> uWoA
    255:261:void sampleDropCount() -> hcLG
    265:271:void sampleChunkCount() -> ChCL
react.surge.text.PhantomSpinner -> HCbi:
    react.surge.text.ProgressSpinner s -> Cpxr
    react.surge.text.ProgressSpinner c -> NhhP
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> qKYO:
    java.lang.String[] chars -> tpFi
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> GtuS
    react.surge.text.ProgressSpinner NETWORK -> lWLy
    react.surge.text.ProgressSpinner CIRCLES -> USjX
    react.surge.text.ProgressSpinner RANDOMS -> qnlm
    react.surge.text.ProgressSpinner MERGERS -> gqpb
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> OjdS
    65:65:int getIndex() -> getIndex
react.surge.util.Amounts -> BdVo:
    react.surge.util.Amounts SINGLE -> oygu
    react.surge.util.Amounts DUAL -> Nyif
    react.surge.util.Amounts TRI -> vTIQ
    react.surge.util.Amounts QUAD -> KVmu
    react.surge.util.Amounts HEX -> Udku
    react.surge.util.Amounts OCTA -> Irjt
    int a -> a
    react.surge.util.Amounts[] ENUM$VALUES -> Xmtw
    5:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:23:int a() -> a
    29:37:java.lang.String to(int) -> kADT
    1:1:react.surge.util.Amounts[] values() -> values
    1:1:react.surge.util.Amounts valueOf(java.lang.String) -> valueOf
react.surge.util.Anchor -> SwHQ:
    int value() -> value
react.surge.util.Area -> KnoU:
    org.bukkit.Location location -> TjYt
    java.lang.Double radius -> PMLk
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> bXLA
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> tCit
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> SeQk
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> JQfN
    109:109:boolean isWithin(org.bukkit.Location) -> GQMo
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> bhlM
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> bXLA
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> Iqcm
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> fuvH
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> Usgp
    257:257:java.lang.Double getRadius() -> rWVX
    268:269:void setRadius(java.lang.Double) -> Difh
    278:283:org.bukkit.Location random() -> MvAO
react.surge.util.Axis -> RQaO:
    react.surge.util.Axis X -> sdQi
    react.surge.util.Axis Y -> jHUd
    react.surge.util.Axis Z -> jriM
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> nfDX
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> BAye
    29:29:org.bukkit.util.Vector negative() -> AjKj
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> Btvx:
    react.surge.util.BlastResistance BARRIER -> WQbq
    react.surge.util.BlastResistance BEDROCK -> TQKT
    react.surge.util.BlastResistance COMMAND -> tohb
    react.surge.util.BlastResistance ENDER_PORTAL -> wgor
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> nefc
    react.surge.util.BlastResistance ANVIL -> bcDi
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> diJl
    react.surge.util.BlastResistance OBSIDIAN -> PwcF
    react.surge.util.BlastResistance ENDER_CHEST -> Okmy
    react.surge.util.BlastResistance WATER -> NWjJ
    react.surge.util.BlastResistance LAVA -> XTfQ
    react.surge.util.BlastResistance STATIONARY_WATER -> SokE
    react.surge.util.BlastResistance DRAGON_EGG -> xRBL
    react.surge.util.BlastResistance ENDER_STONE -> AQdA
    react.surge.util.BlastResistance COAL_BLOCK -> Mvip
    react.surge.util.BlastResistance DIAMOND_BLOCK -> QaTT
    react.surge.util.BlastResistance EMERALD_BLOCK -> Pfah
    react.surge.util.BlastResistance GOLD_BLOCK -> bHrB
    react.surge.util.BlastResistance IRON_BLOCK -> UdoT
    react.surge.util.BlastResistance REDSTONE_BLOCK -> pAYV
    react.surge.util.BlastResistance BRICK -> XmxW
    react.surge.util.BlastResistance BRICK_STAIRS -> bQcD
    react.surge.util.BlastResistance HARD_CLAY -> hmFo
    react.surge.util.BlastResistance STONE -> pRYk
    react.surge.util.BlastResistance SMOOTH_BRICK -> tpIC
    react.surge.util.BlastResistance SMOOTH_STAIRS -> QicM
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> kTLY
    react.surge.util.BlastResistance STONE_SLAB2 -> SMfX
    react.surge.util.BlastResistance IRON_DOOR -> xbaj
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> cDDE
    react.surge.util.BlastResistance IRON_TRAPDOOR -> pIiJ
    react.surge.util.BlastResistance MOB_SPAWNER -> AACs
    react.surge.util.BlastResistance WEB -> vunH
    react.surge.util.BlastResistance DISPENSER -> apaT
    react.surge.util.BlastResistance DROPPER -> GJcn
    react.surge.util.BlastResistance FURNACE -> NOYN
    react.surge.util.BlastResistance BURNING_FURNACE -> XUFf
    react.surge.util.BlastResistance BEACON -> Irly
    react.surge.util.BlastResistance COAL_ORE -> TQJf
    react.surge.util.BlastResistance COCOA -> wElF
    react.surge.util.BlastResistance DIAMOND_ORE -> PxEa
    react.surge.util.BlastResistance EMERALD_ORE -> YNyp
    react.surge.util.BlastResistance FENCE -> FaWB
    react.surge.util.BlastResistance FENCE_GATE -> Jmbc
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> RSWd
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> rjFM
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> wpcf
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> VNao
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> elOi
    react.surge.util.BlastResistance ACACIA_FENCE -> VqEq
    react.surge.util.BlastResistance BIRCH_FENCE -> EVCb
    react.surge.util.BlastResistance DARK_OAK_FENCE -> cDHF
    react.surge.util.BlastResistance SPRUCE_FENCE -> bsgr
    react.surge.util.BlastResistance JUNGLE_FENCE -> aqFT
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> fxCt
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> gidf
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> keOy
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> yDEh
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> NFje
    react.surge.util.BlastResistance QUARTZ_STAIRS -> mkVc
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> cwKn
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> KVtA
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> WHsx
    react.surge.util.BlastResistance WOOD_STAIRS -> ualH
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> FYFq
    react.surge.util.BlastResistance ACACIA_DOOR -> vSle
    react.surge.util.BlastResistance BIRCH_DOOR -> SDvk
    react.surge.util.BlastResistance DARK_OAK_DOOR -> IroM
    react.surge.util.BlastResistance SPRUCE_DOOR -> YiLh
    react.surge.util.BlastResistance JUNGLE_DOOR -> ExDx
    react.surge.util.BlastResistance GOLD_ORE -> ohjp
    react.surge.util.BlastResistance HOPPER -> EfcN
    react.surge.util.BlastResistance IRON_ORE -> AbhX
    react.surge.util.BlastResistance LAPIS_BLOCK -> lhRV
    react.surge.util.BlastResistance LAPIS_ORE -> aFPd
    react.surge.util.BlastResistance QUARTZ_ORE -> Xmya
    react.surge.util.BlastResistance REDSTONE_ORE -> MLXK
    react.surge.util.BlastResistance TRAP_DOOR -> Mvjs
    react.surge.util.BlastResistance WOOD -> NiMo
    react.surge.util.BlastResistance CHEST -> YFhk
    react.surge.util.BlastResistance TRAPPED_CHEST -> toiX
    react.surge.util.BlastResistance WORKBENCH -> foQu
    react.surge.util.BlastResistance CAULDRON -> Irob
    react.surge.util.BlastResistance LOG -> hcxm
    react.surge.util.BlastResistance LOG_2 -> pJOJ
    react.surge.util.BlastResistance BOOKSHELF -> nKxL
    react.surge.util.BlastResistance BANNER -> NXOK
    react.surge.util.BlastResistance STANDING_BANNER -> fEBO
    react.surge.util.BlastResistance WALL_BANNER -> ExHW
    react.surge.util.BlastResistance JACK_O_LANTERN -> Xvlx
    react.surge.util.BlastResistance MELON_BLOCK -> AtLT
    react.surge.util.BlastResistance SKULL -> jbOn
    react.surge.util.BlastResistance PUMPKIN -> GllP
    react.surge.util.BlastResistance SIGN -> UeTE
    react.surge.util.BlastResistance SIGN_POST -> uQNN
    react.surge.util.BlastResistance WALL_SIGN -> VWTu
    react.surge.util.BlastResistance QUARTZ_BLOCK -> GAxJ
    react.surge.util.BlastResistance NOTE_BLOCK -> JeUF
    react.surge.util.BlastResistance RED_SANDSTONE -> HMky
    react.surge.util.BlastResistance SANDSTONE -> DuFH
    react.surge.util.BlastResistance WOOL -> tMiV
    react.surge.util.BlastResistance MONSTER_EGG -> sRwD
    react.surge.util.BlastResistance RAILS -> ELtF
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> aOEM
    react.surge.util.BlastResistance DETECTOR_RAIL -> DIqK
    react.surge.util.BlastResistance POWERED_RAIL -> EgHE
    react.surge.util.BlastResistance CLAY -> DAaB
    react.surge.util.BlastResistance DIRT -> gHDP
    react.surge.util.BlastResistance GRASS -> stxl
    react.surge.util.BlastResistance GRAVEL -> cCgQ
    react.surge.util.BlastResistance SPONGE -> ayWC
    react.surge.util.BlastResistance BREWING_STAND -> UBoP
    react.surge.util.BlastResistance STONE_BUTTON -> diNM
    react.surge.util.BlastResistance WOOD_BUTTON -> fwdT
    react.surge.util.BlastResistance CAKE_BLOCK -> gPTR
    react.surge.util.BlastResistance ICE -> AcKP
    react.surge.util.BlastResistance PACKED_ICE -> USpp
    react.surge.util.BlastResistance LEVER -> Vgtu
    react.surge.util.BlastResistance MYCEL -> qwfw
    react.surge.util.BlastResistance PISTON_BASE -> Vxyb
    react.surge.util.BlastResistance PISTON_EXTENSION -> sJhc
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> DdFN
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> lxxd
    react.surge.util.BlastResistance GOLD_PLATE -> YFnF
    react.surge.util.BlastResistance IRON_PLATE -> fMSo
    react.surge.util.BlastResistance STONE_PLATE -> Kpiq
    react.surge.util.BlastResistance WOOD_PLATE -> ipQH
    react.surge.util.BlastResistance SAND -> iooJ
    react.surge.util.BlastResistance SOUL_SAND -> veSj
    react.surge.util.BlastResistance CACTUS -> xtKY
    react.surge.util.BlastResistance LADDER -> lqIE
    react.surge.util.BlastResistance NETHERRACK -> VVvr
    react.surge.util.BlastResistance GLASS -> tonV
    react.surge.util.BlastResistance THIN_GLASS -> EUfl
    react.surge.util.BlastResistance STAINED_GLASS -> UStG
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> HpSE
    react.surge.util.BlastResistance GLOWSTONE -> japd
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> tNMA
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> qnvA
    react.surge.util.BlastResistance SEA_LANTERN -> PfhL
    react.surge.util.BlastResistance BED_BLOCK -> SMkx
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> AAKG
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> RAwm
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> cvnE
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> JmfI
    react.surge.util.BlastResistance LEAVES -> Melu
    react.surge.util.BlastResistance LEAVES_2 -> IrsO
    react.surge.util.BlastResistance SNOW -> wVss
    int br -> QaXu
    react.surge.util.BlastResistance[] ENUM$VALUES -> TbRO
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> iTki
    175:190:int get(org.bukkit.Material) -> bXLA
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> Iyjb:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> JQfN
react.surge.util.C -> RHoc:
    react.surge.util.C BLACK -> IbSH
    react.surge.util.C DARK_BLUE -> pdBf
    react.surge.util.C DARK_GREEN -> JeUh
    react.surge.util.C DARK_AQUA -> NqbI
    react.surge.util.C DARK_RED -> PnwO
    react.surge.util.C DARK_PURPLE -> aqIU
    react.surge.util.C GOLD -> JCSK
    react.surge.util.C GRAY -> EgGx
    react.surge.util.C DARK_GRAY -> jsQm
    react.surge.util.C BLUE -> oGKy
    react.surge.util.C GREEN -> ekrd
    react.surge.util.C AQUA -> PgGm
    react.surge.util.C RED -> EUem
    react.surge.util.C LIGHT_PURPLE -> QGgI
    react.surge.util.C YELLOW -> QPWq
    react.surge.util.C WHITE -> HMnG
    react.surge.util.C MAGIC -> cUNj
    react.surge.util.C BOLD -> Fili
    react.surge.util.C STRIKETHROUGH -> ORde
    react.surge.util.C UNDERLINE -> VFWq
    react.surge.util.C ITALIC -> Tasf
    react.surge.util.C RESET -> ektu
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> TbUV
    char code -> Cqed
    boolean isFormat -> lEux
    java.lang.String toString -> lNhC
    java.util.Map BY_ID -> ExLj
    java.util.Map BY_CHAR -> JTWg
    java.util.Map dyeChatMap -> Cqeq
    java.util.Map chatHexMap -> keVe
    java.util.Map dyeHexMap -> cnaH
    int[] $SWITCH_TABLE$surge$util$C -> gYJd
    react.surge.util.C[] ENUM$VALUES -> SpTR
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> lfev
    378:378:java.lang.String hex() -> vJQJ
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> GQMo
    434:442:react.surge.util.C getByChar(java.lang.String) -> IhWI
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> kHsM
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> bXLA
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> kHsM
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> Difh
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> JHvN
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> SvTc
    560:578:java.lang.String generateColorTable() -> mYIK
    588:588:org.bukkit.ChatColor chatColor() -> Aila
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> Usgp
    632:679:byte getItemMeta() -> fnEv
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> qvUo
react.surge.util.C$1 -> RHoc$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> RHoc$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> RHoc$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> RHoc$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> RHoc$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> RHoc$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> RHoc$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> RHoc$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> RHoc$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> RHoc$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> RHoc$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> RHoc$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> RHoc$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> RHoc$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> RHoc$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> RHoc$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> RHoc$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> RHoc$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> RHoc$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> RHoc$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> RHoc$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> RHoc$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> BSTu:
    double number -> BerL
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> uWTE
    23:25:react.surge.util.CDou add(double) -> MRaF
    30:32:react.surge.util.CDou sub(double) -> iBnt
    37:37:double get() -> get
    42:48:void circ() -> KEET
react.surge.util.CMD -> FySN:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> YqcS
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> hHvt
    51:53:void execute(org.bukkit.command.CommandSender) -> Difh
    60:77:void execute() -> execute
react.surge.util.CNum -> WibK:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> RPnM
    23:25:react.surge.util.CNum add(int) -> PSYN
    30:32:react.surge.util.CNum sub(int) -> FpPD
    37:37:int get() -> get
    42:48:void circ() -> KEET
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> avoG
react.surge.util.Chunks -> yBOQ:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> ktGm
    33:40:react.glang.GList getLoadedChunks() -> loVT
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> kHsM
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> bXLA
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> bXLA
    98:98:boolean unload(org.bukkit.Chunk) -> doSd
    114:124:int unload(react.glang.GList,boolean,boolean) -> bXLA
    138:138:int unload(react.glang.GList,boolean) -> bXLA
    150:150:int unload(react.glang.GList) -> eXck
    166:166:boolean isLoaded(java.lang.String,int,int) -> bXLA
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> Difh
    201:205:void load(react.glang.GList) -> rNHN
react.surge.util.Cuboid -> aCyp:
    java.lang.String worldName -> YiSP
    int x1 -> mHww
    int y1 -> VWXY
    int z1 -> ARMo
    int x2 -> IkEr
    int y2 -> eIpm
    int z2 -> jrtK
    int[] $SWITCH_TABLE$surge$util$Axis -> QGhc
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> rjJT
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> bXLA
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> Difh
    93:93:boolean hasPlayers() -> xihD
    98:110:react.glang.GList getPlayers() -> NgJy
    115:166:react.glang.GList getEntities() -> yRwk
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> TOGP
    287:287:org.bukkit.Location getLowerNE() -> scIf
    298:298:org.bukkit.Location getUpperSW() -> fmdj
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> EvXf
    348:348:int getSizeY() -> BlqC
    358:358:int getSizeZ() -> PmiN
    368:368:int getLowerX() -> jiTI
    378:378:int getLowerY() -> YpTJ
    388:388:int getLowerZ() -> xHHv
    398:398:int getUpperX() -> yAyc
    408:408:int getUpperY() -> KwlH
    418:418:int getUpperZ() -> SnbR
    428:438:org.bukkit.block.Block[] corners() -> uWqI
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> bXLA
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> kHsM
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> Difh
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> bhlM
    546:546:boolean contains(int,int,int) -> DXdy
    558:558:boolean contains(org.bukkit.block.Block) -> GQMo
    570:570:boolean contains(org.bukkit.Location) -> OPTh
    580:580:int volume() -> uqcb
    591:601:byte averageLightLevel() -> EmjQ
    612:612:react.surge.util.Cuboid contract() -> EdyH
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> bXLA
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> kHsM
    708:715:boolean containsOnly(org.bukkit.Material) -> kHsM
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> bXLA
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> SeQk
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> bXLA
    786:800:java.util.List getChunks() -> SvsC
    815:819:void fill(int,byte) -> bXLA
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> qLEM
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> DsYA
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> CNQN
react.surge.util.Cuboid$1 -> aCyp$1:
    react.surge.util.Cuboid this$0 -> whWu
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> OPTh
    1:1:java.lang.Object onAdapt(java.lang.Object) -> JQfN
react.surge.util.Cuboid$CuboidDirection -> aCyp$bXLA:
    react.surge.util.Cuboid$CuboidDirection North -> IsWH
    react.surge.util.Cuboid$CuboidDirection East -> UTVS
    react.surge.util.Cuboid$CuboidDirection South -> MDNO
    react.surge.util.Cuboid$CuboidDirection West -> Tjfs
    react.surge.util.Cuboid$CuboidDirection Up -> NaFS
    react.surge.util.Cuboid$CuboidDirection Down -> oaEJ
    react.surge.util.Cuboid$CuboidDirection Horizontal -> AANH
    react.surge.util.Cuboid$CuboidDirection Vertical -> RKNu
    react.surge.util.Cuboid$CuboidDirection Both -> jauT
    react.surge.util.Cuboid$CuboidDirection Unknown -> yUOc
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> rjJT
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> XvsU
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> vlUj
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> CNQN
react.surge.util.Cuboid$CuboidIterator -> aCyp$kHsM:
    org.bukkit.World w -> ReAy
    int baseX -> DAeX
    int baseY -> ukFT
    int baseZ -> PEJF
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> YrGm
    int sizeY -> ecga
    int sizeZ -> pJUG
    react.surge.util.Cuboid this$0 -> whWu
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> ntsQ:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> jWea:
    react.glang.GList buffer -> YiVX
    boolean dbg -> tosF
    int kf -> DRgs
    react.glang.Callback scall -> IQVg
    13:16:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    20:24:void flush() -> flush
    28:39:void log(java.lang.String,java.lang.String) -> bhlM
    43:51:void l(java.lang.Object,java.lang.String) -> kHsM
    55:56:void s(java.lang.Object,java.lang.String) -> Difh
    60:71:void cdb() -> MeAb
    75:86:void v(java.lang.Object,java.lang.String) -> bhlM
    90:91:void w(java.lang.Object,java.lang.String) -> DXdy
    95:96:void f(java.lang.Object,java.lang.String) -> SeQk
    100:113:void l(java.lang.String) -> kADT
    117:124:void s(java.lang.String) -> RPnM
    128:142:void v(java.lang.String) -> PSYN
    146:153:void w(java.lang.String) -> FpPD
    157:164:void f(java.lang.String) -> avoG
react.surge.util.DMSRequire -> Nohc:
    react.surge.util.DMSRequirement value() -> cJlU
react.surge.util.DMSRequirement -> oDrL:
    react.surge.util.DMSRequirement SQL -> SpVT
    react.surge.util.DMSRequirement[] ENUM$VALUES -> HWET
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> maPK:
    react.surge.util.Depend VAULT -> Yqfb
    react.surge.util.Depend FAWE -> qoYr
    react.surge.util.Depend WORLDEDIT -> PgJt
    react.surge.util.Depend PROTOLIB -> oFoo
    react.surge.util.Depend CITIZENS -> AcQi
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> qMVm
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> DGxQ:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> GcOr
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> FqCV:
    react.surge.util.DimensionFace X -> PVIp
    react.surge.util.DimensionFace Y -> BfUH
    react.surge.util.DimensionFace Z -> Rlpb
    react.surge.util.DimensionFace[] ENUM$VALUES -> BTrS
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> YVYE:
    react.surge.util.Direction U -> WRMW
    react.surge.util.Direction D -> xcMX
    react.surge.util.Direction N -> KFYq
    react.surge.util.Direction S -> rjLY
    react.surge.util.Direction E -> drFW
    react.surge.util.Direction W -> KNix
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> sAyo
    int[] $SWITCH_TABLE$surge$util$Direction -> Ruao
    react.surge.util.Direction[] ENUM$VALUES -> Pwlc
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> OQUM
    61:61:int x() -> prsa
    66:66:int y() -> qeVR
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> feWB
    81:81:react.glang.GList news() -> iTlx
    86:86:react.glang.GList udnews() -> yKJh
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> QNLV
    115:147:react.surge.util.Direction fromByte(byte) -> OPTh
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> BucF
react.surge.util.DynamicConfiguration -> VxCk:
react.surge.util.DynamicTracker -> cmHI:
react.surge.util.Embedded -> QhTK:
    react.glang.GList get() -> ChCh
    void add(java.lang.Object) -> add
react.surge.util.FU -> AOrU:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> bXLA
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> kHsM
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> DXdy
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> SeQk
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> aoQt:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> TOGP
react.surge.util.Health -> NUxi:
    double hp -> BwVH
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> rWXQ
    41:41:double getHearts() -> fuxF
    51:51:double getHalfHearts() -> Iqdn
    61:61:int getFlatHalfHearts() -> QOJC
react.surge.util.IO -> BAtt:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> WidA:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> bXLA
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> bXLA
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> bXLA
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> bXLA
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> bXLA
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> kHsM
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> Difh
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> bhlM
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> bXLA
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> bXLA
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> bXLA
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> bXLA
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> DXdy
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> SeQk
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> JQfN
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> GQMo
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> Usgp
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> bXLA
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> OPTh
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> KChC
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> bXLA
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> bXLA
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> kHsM
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> bXLA
react.surge.util.MSound -> TFft:
    react.surge.util.MSound AMBIENCE_CAVE -> IrxJ
    react.surge.util.MSound AMBIENCE_RAIN -> NGRv
    react.surge.util.MSound AMBIENCE_THUNDER -> CWtd
    react.surge.util.MSound ANVIL_BREAK -> mHyk
    react.surge.util.MSound ANVIL_LAND -> smRm
    react.surge.util.MSound ANVIL_USE -> slrO
    react.surge.util.MSound ARROW_HIT -> wNjd
    react.surge.util.MSound BURP -> ujhC
    react.surge.util.MSound CHEST_CLOSE -> BLbp
    react.surge.util.MSound CHEST_OPEN -> DRie
    react.surge.util.MSound CLICK -> ORht
    react.surge.util.MSound DOOR_CLOSE -> PgOG
    react.surge.util.MSound DOOR_OPEN -> FYQI
    react.surge.util.MSound DRINK -> DIyA
    react.surge.util.MSound EAT -> HggU
    react.surge.util.MSound EXPLODE -> vnKY
    react.surge.util.MSound FALL_BIG -> yCnp
    react.surge.util.MSound FALL_SMALL -> jPty
    react.surge.util.MSound FIRE -> BwVf
    react.surge.util.MSound FIRE_IGNITE -> dFsb
    react.surge.util.MSound FIZZ -> lNju
    react.surge.util.MSound FUSE -> LlBf
    react.surge.util.MSound GLASS -> CFvR
    react.surge.util.MSound HURT_FLESH -> GmTS
    react.surge.util.MSound ITEM_BREAK -> nUQa
    react.surge.util.MSound ITEM_PICKUP -> WtSB
    react.surge.util.MSound LAVA -> nCoP
    react.surge.util.MSound LAVA_POP -> xcOb
    react.surge.util.MSound LEVEL_UP -> vdxh
    react.surge.util.MSound MINECART_BASE -> smQq
    react.surge.util.MSound MINECART_INSIDE -> YWto
    react.surge.util.MSound NOTE_BASS -> kdxb
    react.surge.util.MSound NOTE_PIANO -> veYM
    react.surge.util.MSound NOTE_BASS_DRUM -> kKgL
    react.surge.util.MSound NOTE_STICKS -> heAi
    react.surge.util.MSound NOTE_BASS_GUITAR -> urwH
    react.surge.util.MSound NOTE_SNARE_DRUM -> BeuY
    react.surge.util.MSound NOTE_PLING -> usWe
    react.surge.util.MSound ORB_PICKUP -> PDjU
    react.surge.util.MSound PISTON_EXTEND -> UBxG
    react.surge.util.MSound PISTON_RETRACT -> noCj
    react.surge.util.MSound PORTAL -> SMsT
    react.surge.util.MSound PORTAL_TRAVEL -> FaaE
    react.surge.util.MSound PORTAL_TRIGGER -> uQWq
    react.surge.util.MSound SHOOT_ARROW -> TIIX
    react.surge.util.MSound SPLASH -> tpWm
    react.surge.util.MSound SPLASH2 -> fwos
    react.surge.util.MSound STEP_GRASS -> TPyL
    react.surge.util.MSound STEP_GRAVEL -> Sxin
    react.surge.util.MSound STEP_LADDER -> DSLm
    react.surge.util.MSound STEP_SAND -> XnhJ
    react.surge.util.MSound STEP_SNOW -> UnOo
    react.surge.util.MSound STEP_STONE -> HNXL
    react.surge.util.MSound STEP_WOOD -> UnPL
    react.surge.util.MSound STEP_WOOL -> cMEN
    react.surge.util.MSound SWIM -> GBai
    react.surge.util.MSound WATER -> oGTm
    react.surge.util.MSound WOOD_CLICK -> HFFO
    react.surge.util.MSound BAT_DEATH -> SoxK
    react.surge.util.MSound BAT_HURT -> WRPx
    react.surge.util.MSound BAT_IDLE -> bRQB
    react.surge.util.MSound BAT_LOOP -> mlDA
    react.surge.util.MSound BAT_TAKEOFF -> bAPP
    react.surge.util.MSound BLAZE_BREATH -> XwWt
    react.surge.util.MSound BLAZE_DEATH -> drJS
    react.surge.util.MSound BLAZE_HIT -> tMrf
    react.surge.util.MSound CAT_HISS -> SNUv
    react.surge.util.MSound CAT_HIT -> xboi
    react.surge.util.MSound CAT_MEOW -> JwBx
    react.surge.util.MSound CAT_PURR -> noHy
    react.surge.util.MSound CAT_PURREOW -> mRSc
    react.surge.util.MSound CHICKEN_IDLE -> CrOH
    react.surge.util.MSound CHICKEN_HURT -> mlFe
    react.surge.util.MSound CHICKEN_EGG_POP -> FbEx
    react.surge.util.MSound CHICKEN_WALK -> nwXp
    react.surge.util.MSound COW_IDLE -> mbsg
    react.surge.util.MSound COW_HURT -> COjB
    react.surge.util.MSound COW_WALK -> KWcV
    react.surge.util.MSound CREEPER_HISS -> ukMB
    react.surge.util.MSound CREEPER_DEATH -> GCEJ
    react.surge.util.MSound ENDERDRAGON_DEATH -> GSdx
    react.surge.util.MSound ENDERDRAGON_GROWL -> KNpN
    react.surge.util.MSound ENDERDRAGON_HIT -> jPyH
    react.surge.util.MSound ENDERDRAGON_WINGS -> MvyP
    react.surge.util.MSound ENDERMAN_DEATH -> oWwf
    react.surge.util.MSound ENDERMAN_HIT -> Xevx
    react.surge.util.MSound ENDERMAN_IDLE -> sTCt
    react.surge.util.MSound ENDERMAN_TELEPORT -> VNnw
    react.surge.util.MSound ENDERMAN_SCREAM -> NrMX
    react.surge.util.MSound ENDERMAN_STARE -> rGoS
    react.surge.util.MSound GHAST_SCREAM -> qVOC
    react.surge.util.MSound GHAST_SCREAM2 -> oqkC
    react.surge.util.MSound GHAST_CHARGE -> cUVE
    react.surge.util.MSound GHAST_DEATH -> ihHl
    react.surge.util.MSound GHAST_FIREBALL -> iEeL
    react.surge.util.MSound GHAST_MOAN -> lqRN
    react.surge.util.MSound IRONGOLEM_DEATH -> KqTi
    react.surge.util.MSound IRONGOLEM_HIT -> rHPF
    react.surge.util.MSound IRONGOLEM_THROW -> iEdq
    react.surge.util.MSound IRONGOLEM_WALK -> WlFd
    react.surge.util.MSound MAGMACUBE_WALK -> NOjG
    react.surge.util.MSound MAGMACUBE_WALK2 -> GTFs
    react.surge.util.MSound MAGMACUBE_JUMP -> IjnK
    react.surge.util.MSound PIG_IDLE -> TkMq
    react.surge.util.MSound PIG_DEATH -> jIHv
    react.surge.util.MSound PIG_WALK -> cwYV
    react.surge.util.MSound SHEEP_IDLE -> ptqA
    react.surge.util.MSound SHEEP_SHEAR -> Abwr
    react.surge.util.MSound SHEEP_WALK -> sTFv
    react.surge.util.MSound SILVERFISH_HIT -> fVRL
    react.surge.util.MSound SILVERFISH_KILL -> mtXg
    react.surge.util.MSound SILVERFISH_IDLE -> TtAp
    react.surge.util.MSound SILVERFISH_WALK -> XoLV
    react.surge.util.MSound SKELETON_IDLE -> WcWo
    react.surge.util.MSound SKELETON_DEATH -> XCwS
    react.surge.util.MSound SKELETON_HURT -> KGCt
    react.surge.util.MSound SKELETON_WALK -> gHTQ
    react.surge.util.MSound SLIME_ATTACK -> GeLC
    react.surge.util.MSound SLIME_WALK -> GeLD
    react.surge.util.MSound SLIME_WALK2 -> xcVN
    react.surge.util.MSound SPIDER_IDLE -> iVjI
    react.surge.util.MSound SPIDER_DEATH -> wWaV
    react.surge.util.MSound SPIDER_WALK -> Gujb
    react.surge.util.MSound WITHER_DEATH -> Cqne
    react.surge.util.MSound WITHER_HURT -> emAA
    react.surge.util.MSound WITHER_IDLE -> tEgU
    react.surge.util.MSound WITHER_SHOOT -> JnRw
    react.surge.util.MSound WITHER_SPAWN -> FXuO
    react.surge.util.MSound WOLF_BARK -> ayeM
    react.surge.util.MSound WOLF_DEATH -> cTve
    react.surge.util.MSound WOLF_GROWL -> cexV
    react.surge.util.MSound WOLF_HOWL -> Otqa
    react.surge.util.MSound WOLF_HURT -> tNXE
    react.surge.util.MSound WOLF_PANT -> VORs
    react.surge.util.MSound WOLF_SHAKE -> NOjy
    react.surge.util.MSound WOLF_WALK -> CPMg
    react.surge.util.MSound WOLF_WHINE -> cMGs
    react.surge.util.MSound ZOMBIE_METAL -> hBdR
    react.surge.util.MSound ZOMBIE_WOOD -> lNou
    react.surge.util.MSound ZOMBIE_WOODBREAK -> gGrE
    react.surge.util.MSound ZOMBIE_IDLE -> sKTe
    react.surge.util.MSound ZOMBIE_DEATH -> QivX
    react.surge.util.MSound ZOMBIE_HURT -> VGBe
    react.surge.util.MSound ZOMBIE_INFECT -> tWHp
    react.surge.util.MSound ZOMBIE_UNFECT -> DAmq
    react.surge.util.MSound ZOMBIE_REMEDY -> vDAI
    react.surge.util.MSound ZOMBIE_WALK -> IYqC
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> DcsT
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> wXDy
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> SWMn
    react.surge.util.MSound ZOMBIE_PIG_HURT -> drQP
    react.surge.util.MSound DIG_WOOL -> OuUQ
    react.surge.util.MSound DIG_GRASS -> VWed
    react.surge.util.MSound DIG_GRAVEL -> TtCq
    react.surge.util.MSound DIG_SAND -> HqAf
    react.surge.util.MSound DIG_SNOW -> KFeV
    react.surge.util.MSound DIG_STONE -> vUAi
    react.surge.util.MSound DIG_WOOD -> yCvv
    react.surge.util.MSound FIREWORK_BLAST -> BnnO
    react.surge.util.MSound FIREWORK_BLAST2 -> jINQ
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> tWLN
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> GSkT
    react.surge.util.MSound FIREWORK_TWINKLE -> iFJv
    react.surge.util.MSound FIREWORK_TWINKLE2 -> MMLj
    react.surge.util.MSound FIREWORK_LAUNCH -> svLV
    react.surge.util.MSound SUCCESSFUL_HIT -> BMKb
    react.surge.util.MSound HORSE_ANGRY -> KNup
    react.surge.util.MSound HORSE_ARMOR -> ShPT
    react.surge.util.MSound HORSE_BREATHE -> BMKa
    react.surge.util.MSound HORSE_DEATH -> Lsyv
    react.surge.util.MSound HORSE_GALLOP -> oqnc
    react.surge.util.MSound HORSE_HIT -> fNCC
    react.surge.util.MSound HORSE_IDLE -> yUXo
    react.surge.util.MSound HORSE_JUMP -> hCGg
    react.surge.util.MSound HORSE_LAND -> RCHa
    react.surge.util.MSound HORSE_SADDLE -> gjWp
    react.surge.util.MSound HORSE_SOFT -> IcAv
    react.surge.util.MSound HORSE_WOOD -> kvct
    react.surge.util.MSound DONKEY_ANGRY -> WIfl
    react.surge.util.MSound DONKEY_DEATH -> EgWJ
    react.surge.util.MSound DONKEY_HIT -> YaOc
    react.surge.util.MSound DONKEY_IDLE -> JnVL
    react.surge.util.MSound HORSE_SKELETON_DEATH -> fpEf
    react.surge.util.MSound HORSE_SKELETON_HIT -> FGus
    react.surge.util.MSound HORSE_SKELETON_IDLE -> apyW
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> kDBy
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> xkjp
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> rYYC
    react.surge.util.MSound VILLAGER_DEATH -> nnoI
    react.surge.util.MSound VILLAGER_HAGGLE -> oPOh
    react.surge.util.MSound VILLAGER_HIT -> LJKW
    react.surge.util.MSound VILLAGER_IDLE -> gsKx
    react.surge.util.MSound VILLAGER_NO -> jRBU
    react.surge.util.MSound VILLAGER_YES -> kLSm
    java.lang.String pre19sound -> hdmL
    java.lang.String post19sound -> xkjj
    org.bukkit.Sound resolvedSound -> OAqj
    react.surge.util.MSound[] ENUM$VALUES -> RSmC
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> cJlD
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> CEXm:
    org.bukkit.Material material -> wOUb
    java.lang.Byte data -> KOYE
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> mjJm
    79:80:void setData(java.lang.Byte) -> bXLA
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> PTMw:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> IEvA
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> CEaH
    68:68:boolean isAnyOnline() -> JuHx
    80:80:react.glang.GList inWorld(org.bukkit.World) -> pidT
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> eXck
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> bXLA
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> bXLA
    143:144:void disable(org.bukkit.entity.Player) -> uWTE
    154:155:void enable(org.bukkit.entity.Player) -> MRaF
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> bXLA
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> kHsM
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> iBnt
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> bXLA
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> vtHp
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> Difh
    300:300:boolean canFindPlayer(java.lang.String) -> WaAY
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> aCje
    338:345:react.glang.GList onlinePlayers() -> qmfS
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> BdBn
    368:371:void clear(org.bukkit.entity.Player) -> CVCy
    381:385:void clearEffects(org.bukkit.entity.Player) -> jpef
    398:399:void heal(org.bukkit.entity.Player,double) -> bXLA
    409:410:void heal(org.bukkit.entity.Player) -> pGcT
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> ckpy
    432:433:void resetHunger(org.bukkit.entity.Player) -> PljT
    443:444:void kill(org.bukkit.entity.Player) -> Grph
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> XlRF
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> kHtJ
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> bXLA
react.surge.util.P$1 -> PTMw$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> OPTh
    1:1:java.lang.Object onAdapt(java.lang.Object) -> JQfN
react.surge.util.P$2 -> PTMw$2:
    java.lang.Double val$doff -> BgAF
    org.bukkit.entity.Player val$e -> cwaH
    org.bukkit.entity.Entity[] val$result -> GBkm
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> KChC
react.surge.util.PE -> MdWO:
    react.surge.util.PE ABSORPTION -> oaPl
    react.surge.util.PE BLINDNESS -> aGFp
    react.surge.util.PE CONFUSION -> DAsU
    react.surge.util.PE DAMAGE_RESISTANCE -> kLSB
    react.surge.util.PE FAST_DIGGING -> CqsF
    react.surge.util.PE FIRE_RESISTANCE -> yDYj
    react.surge.util.PE GLOWING -> uHnY
    react.surge.util.PE HARM -> oPOM
    react.surge.util.PE HEAL -> qUtI
    react.surge.util.PE HEALTH_BOOST -> Qaid
    react.surge.util.PE HUNGER -> BgBM
    react.surge.util.PE INCREASE_DAMAGE -> JUFN
    react.surge.util.PE INVISIBILITY -> ReNR
    react.surge.util.PE JUMP -> qUrt
    react.surge.util.PE LEVITATION -> iVla
    react.surge.util.PE LUCK -> Tsdb
    react.surge.util.PE NIGHT_VISION -> sTJW
    react.surge.util.PE POISON -> wWdn
    react.surge.util.PE REGENERATION -> mcYo
    react.surge.util.PE SATURATION -> UwJp
    react.surge.util.PE SLOW -> hCMD
    react.surge.util.PE SLOW_DIGGING -> HyVE
    react.surge.util.PE SPEED -> SyUS
    react.surge.util.PE UNLUCK -> BfbW
    react.surge.util.PE WATER_BREATHING -> GTOi
    react.surge.util.PE WEAKNESS -> AuAc
    react.surge.util.PE WITHER -> ipcT
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> bXLA
    144:144:react.surge.util.PE d(int) -> IEvA
    156:156:react.surge.util.PE a(int) -> WaAY
    166:166:org.bukkit.potion.PotionEffect c() -> VLyK
    177:178:void c(org.bukkit.entity.LivingEntity) -> SeQk
    182:183:void crm(org.bukkit.entity.LivingEntity) -> JQfN
    187:188:void rm(org.bukkit.entity.LivingEntity) -> GQMo
react.surge.util.ParticleEffect -> jXIW:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> jcEd
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> rbKt
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> jkUq
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> DAtI
    react.surge.util.ParticleEffect WATER_BUBBLE -> YquB
    react.surge.util.ParticleEffect WATER_SPLASH -> oibm
    react.surge.util.ParticleEffect WATER_WAKE -> gsMd
    react.surge.util.ParticleEffect SUSPENDED -> mJJt
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> rsLk
    react.surge.util.ParticleEffect CRIT -> Jmyj
    react.surge.util.ParticleEffect CRIT_MAGIC -> kfHX
    react.surge.util.ParticleEffect SMOKE_NORMAL -> tgqJ
    react.surge.util.ParticleEffect SMOKE_LARGE -> HOCW
    react.surge.util.ParticleEffect SPELL -> NHCc
    react.surge.util.ParticleEffect SPELL_INSTANT -> BMPE
    react.surge.util.ParticleEffect SPELL_MOB -> XMOB
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> IbeO
    react.surge.util.ParticleEffect SPELL_WITCH -> YrTf
    react.surge.util.ParticleEffect DRIP_WATER -> blMp
    react.surge.util.ParticleEffect DRIP_LAVA -> Frmf
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> NPRR
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> EMhG
    react.surge.util.ParticleEffect TOWN_AURA -> MoQr
    react.surge.util.ParticleEffect NOTE -> WlMy
    react.surge.util.ParticleEffect PORTAL -> elfD
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> NYCf
    react.surge.util.ParticleEffect FLAME -> rXxk
    react.surge.util.ParticleEffect LAVA -> jtFY
    react.surge.util.ParticleEffect FOOTSTEP -> EpLN
    react.surge.util.ParticleEffect CLOUD -> puVl
    react.surge.util.ParticleEffect REDSTONE -> gbJo
    react.surge.util.ParticleEffect SNOWBALL -> dXbM
    react.surge.util.ParticleEffect SNOW_SHOVEL -> gbJr
    react.surge.util.ParticleEffect SLIME -> ULVR
    react.surge.util.ParticleEffect HEART -> TIRp
    react.surge.util.ParticleEffect BARRIER -> eJcV
    react.surge.util.ParticleEffect ITEM_CRACK -> IQcp
    react.surge.util.ParticleEffect BLOCK_CRACK -> WlOK
    react.surge.util.ParticleEffect BLOCK_DUST -> TRDe
    react.surge.util.ParticleEffect WATER_DROP -> cxBd
    react.surge.util.ParticleEffect ITEM_TAKE -> OSUp
    react.surge.util.ParticleEffect MOB_APPEARANCE -> YYCU
    react.surge.util.ParticleEffect DRAGON_BREATH -> aNvy
    react.surge.util.ParticleEffect END_ROD -> Khkl
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> OlhF
    react.surge.util.ParticleEffect SWEEP_ATTACK -> EUyH
    java.util.Map NAME_MAP -> sTPC
    java.util.Map ID_MAP -> ahmN
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> emJL
    java.util.List properties -> xIkx
    react.surge.util.ParticleEffect[] ENUM$VALUES -> RnDT
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> Mdaq
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> bXLA
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> paWf
    557:565:react.surge.util.ParticleEffect fromId(int) -> aCje
    577:578:boolean isWater(org.bukkit.Location) -> miKq
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> bXLA
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> bXLA
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> bXLA
    665:681:void display(float,int,org.bukkit.Location,double) -> bXLA
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> bXLA
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> bXLA
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> bXLA
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> bXLA
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> bXLA
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> bXLA
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> bXLA
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> bXLA
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> bXLA
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> bXLA
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> bXLA
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> bXLA
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> bXLA
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> bXLA
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> jXIW$bXLA:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> jXIW$kHsM:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> jXIW$Difh:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> kSGS
    1594:1594:float getValueY() -> AXmm
    1605:1605:float getValueZ() -> ObWs
react.surge.util.ParticleEffect$OrdinaryColor -> jXIW$bhlM:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> kSGS
    1526:1526:float getValueY() -> AXmm
    1537:1537:float getValueZ() -> ObWs
react.surge.util.ParticleEffect$ParticleColor -> jXIW$DXdy:
    1383:1383:void <init>() -> <init>
    float getValueX() -> kSGS
    float getValueY() -> AXmm
    float getValueZ() -> ObWs
react.surge.util.ParticleEffect$ParticleColorException -> jXIW$SeQk:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> jXIW$JQfN:
    org.bukkit.Material material -> wOUb
    byte data -> vfJT
    int[] packetData -> YrXC
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> wDgT
    1309:1309:java.lang.String getPacketDataString() -> uFqX
react.surge.util.ParticleEffect$ParticleDataException -> jXIW$GQMo:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> jXIW$Usgp:
    int version -> version
    java.lang.Class enumParticle -> YHEO
    java.lang.reflect.Constructor packetConstructor -> HNdQ
    java.lang.reflect.Method getHandle -> wNxe
    java.lang.reflect.Field playerConnection -> RCPR
    java.lang.reflect.Method sendPacket -> TAEq
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> YPUT
    float offsetX -> YOtT
    float offsetY -> hdod
    float offsetZ -> Spdl
    float speed -> SWSR
    int amount -> HxCD
    boolean longDistance -> GSpH
    react.surge.util.ParticleEffect$ParticleData data -> eKEi
    java.lang.Object packet -> IYuo
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> salD
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> bXLA
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> kHsM
    2004:2018:void sendTo(org.bukkit.Location,double) -> kHsM
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> jXIW$Usgp$bXLA:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> jXIW$Usgp$kHsM:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> jXIW$Usgp$Difh:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> jXIW$OPTh:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> Dcxc
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> vTgD
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> sBkt
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> yLmg
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> YifR
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> jXIW$KChC:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> HTgG:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> ytbu
react.surge.util.Persist -> NMfr:
react.surge.util.Platform -> APTV:
    boolean ENABLE -> qMfx
    double PROC_CPU -> rGyR
    11:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    253:258:java.lang.String getVersion() -> getVersion
    263:268:java.lang.String getName() -> getName
    273:273:com.sun.management.OperatingSystemMXBean getSystem() -> VflC
    271:271:com.sun.management.OperatingSystemMXBean access$0() -> HDQe
react.surge.util.Platform$CPU -> APTV$bXLA:
    198:198:void <init>() -> <init>
    202:207:int getAvailableProcessors() -> getAvailableProcessors
    212:217:double getCPULoad() -> kJTx
    222:227:double getProcessCPULoad() -> kBEP
    232:237:double getLiveProcessCPULoad() -> Gsqv
    242:247:java.lang.String getArchitecture() -> KgMg
react.surge.util.Platform$ENVIRONMENT -> APTV$kHsM:
    14:14:void <init>() -> <init>
    18:18:boolean canRunBatch() -> oWAl
    23:28:java.lang.String getJavaHome() -> agJs
    33:38:java.lang.String getJavaVendor() -> DPtj
    43:48:java.lang.String getJavaVersion() -> pPrh
react.surge.util.Platform$MEMORY -> APTV$Difh:
    119:119:void <init>() -> <init>
react.surge.util.Platform$MEMORY$PHYSICAL -> APTV$Difh$bXLA:
    121:121:void <init>() -> <init>
    125:130:long getTotalMemory() -> UchE
    135:140:long getFreeMemory() -> VVJW
    145:150:long getUsedMemory() -> qTWP
react.surge.util.Platform$MEMORY$VIRTUAL -> APTV$Difh$kHsM:
    154:154:void <init>() -> <init>
    158:163:long getTotalMemory() -> UchE
    168:173:long getFreeMemory() -> VVJW
    178:183:long getUsedMemory() -> qTWP
    188:193:long getCommittedVirtualMemory() -> QNiv
react.surge.util.Platform$STORAGE -> APTV$bhlM:
    52:52:void <init>() -> <init>
    56:63:long getAbsoluteTotalSpace() -> VMYH
    68:68:long getTotalSpace() -> getTotalSpace
    73:73:long getTotalSpace(java.io.File) -> JQfN
    78:85:long getAbsoluteFreeSpace() -> HoDi
    90:90:long getFreeSpace() -> getFreeSpace
    95:95:long getFreeSpace(java.io.File) -> GQMo
    100:100:long getUsedSpace() -> bYKw
    105:105:long getUsedSpace(java.io.File) -> Usgp
    110:110:long getAbsoluteUsedSpace() -> dNRF
    115:115:java.io.File[] getRoots() -> getRoots
react.surge.util.PluginUtil -> sRBI:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> DXdy
    78:88:void enable(java.lang.String) -> DilA
    95:99:void enableAll() -> XmRV
    109:113:void disable(org.bukkit.plugin.Plugin) -> SeQk
    120:124:void disableAll() -> IhvJ
    135:135:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> JQfN
    149:156:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> bXLA
    168:173:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> QgaH
    183:186:java.util.List getPluginNames(boolean) -> UjwS
    198:201:java.lang.String getPluginVersion(java.lang.String) -> iLBk
    214:236:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> GQMo
    251:330:java.util.List findByCommand(java.lang.String) -> UAHC
    351:352:void load(org.bukkit.plugin.Plugin) -> Usgp
    356:378:java.lang.String getPluginFileName(java.lang.String) -> wfLT
    383:405:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> bXLA
    418:470:void load(java.lang.String) -> load
    482:487:void reload(org.bukkit.plugin.Plugin) -> OPTh
    494:498:void reloadAll() -> rFXI
    510:636:void unload(org.bukkit.plugin.Plugin) -> KChC
react.surge.util.PoolCount -> JkoE:
react.surge.util.PoolDescriber -> IOYg:
react.surge.util.PoolNanoThrottle -> VgAn:
react.surge.util.PositionalSelector -> awbG:
    react.glang.GSet allowedChunks -> ptxC
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> BmSt
    39:40:void addChunk(org.bukkit.Chunk) -> rNHN
    44:44:react.glang.GSet getAllowedChunks() -> sHye
react.surge.util.Protocol -> YVWy:
    react.surge.util.Protocol LATEST -> vnXk
    react.surge.util.Protocol R1_12_2 -> qDuk
    react.surge.util.Protocol R1_12_2_PRE -> XMPq
    react.surge.util.Protocol R1_12_1 -> iWQq
    react.surge.util.Protocol R1_12 -> rGxn
    react.surge.util.Protocol R1_11_2 -> ReUE
    react.surge.util.Protocol R1_11_1 -> GnGF
    react.surge.util.Protocol R1_11 -> wiNl
    react.surge.util.Protocol R1_10_2 -> kUJy
    react.surge.util.Protocol R1_10_1 -> Tbih
    react.surge.util.Protocol R1_10 -> yEBI
    react.surge.util.Protocol R1_9_4 -> heTR
    react.surge.util.Protocol R1_9_3 -> JDLB
    react.surge.util.Protocol R1_9_2 -> FQPy
    react.surge.util.Protocol R1_9_1 -> daXS
    react.surge.util.Protocol R1_9 -> Hgwm
    react.surge.util.Protocol R1_8_9 -> whmj
    react.surge.util.Protocol R1_8_8 -> pAvN
    react.surge.util.Protocol R1_8_7 -> IYyg
    react.surge.util.Protocol R1_8_6 -> CYGt
    react.surge.util.Protocol R1_8_5 -> IHww
    react.surge.util.Protocol R1_8_4 -> cEBM
    react.surge.util.Protocol R1_8_3 -> Nihb
    react.surge.util.Protocol R1_8_2 -> iqFa
    react.surge.util.Protocol R1_8_1 -> rsPV
    react.surge.util.Protocol R1_8 -> tyUu
    react.surge.util.Protocol R1_7_10 -> EooY
    react.surge.util.Protocol R1_7_9 -> TRHi
    react.surge.util.Protocol R1_7_8 -> YPVP
    react.surge.util.Protocol R1_7_7 -> FkBx
    react.surge.util.Protocol R1_7_6 -> uHsj
    react.surge.util.Protocol R1_7_5 -> jQem
    react.surge.util.Protocol R1_7_4 -> tWVj
    react.surge.util.Protocol R1_7_3 -> sSsG
    react.surge.util.Protocol R1_7_2 -> TQjQ
    react.surge.util.Protocol R1_7_1 -> dGfm
    react.surge.util.Protocol B1_6_4 -> GLEg
    react.surge.util.Protocol B1_6_3 -> xcbv
    react.surge.util.Protocol B1_6_2 -> liRJ
    react.surge.util.Protocol B1_6_1 -> bJQm
    react.surge.util.Protocol B1_5_2 -> eJij
    react.surge.util.Protocol B1_5_1 -> HEvd
    react.surge.util.Protocol B1_5 -> blTo
    react.surge.util.Protocol B1_4_7 -> PxcQ
    react.surge.util.Protocol B1_4_6 -> HpkV
    react.surge.util.Protocol B1_4_5 -> WRdD
    react.surge.util.Protocol B1_4_4 -> kCis
    react.surge.util.Protocol B1_4_2 -> sdtD
    react.surge.util.Protocol B1_3_2 -> MxJq
    react.surge.util.Protocol B1_3_1 -> Yijv
    react.surge.util.Protocol B1_2_5 -> WRcg
    react.surge.util.Protocol B1_2_4 -> dOwb
    react.surge.util.Protocol EARLIEST -> bBBY
    react.surge.util.Protocol UNKNOWN -> oXhN
    int version -> version
    java.lang.String packageVersion -> TYBY
    java.lang.String versionName -> wiQG
    boolean netty -> cfgU
    react.surge.util.Protocol[] ENUM$VALUES -> fooV
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> fvYq
    118:118:java.lang.String getPackageVersion() -> RIET
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> Djgy
    142:150:react.surge.util.Protocol getProtocolVersion() -> IOcw
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> kHsM
    160:160:boolean isServerVersion() -> Oavc
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> MlrL
    175:175:boolean isActualVersion() -> nvAe
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> gpoV
    200:200:int getMetaVersion() -> USJR
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> wnnf:
    react.surge.util.Protocol from -> CHJb
    react.surge.util.Protocol to -> uHvS
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> scQW
    21:21:react.surge.util.Protocol getTo() -> VUkx
    26:26:boolean contains(react.surge.util.Protocol) -> Difh
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> EmaT:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> TWut
    70:70:int randomNextInt() -> jrHy
    80:80:long randomNextLong() -> YpWc
    92:92:boolean isWithin(double) -> vtHp
    104:104:boolean isWithin(int) -> paWf
    116:116:boolean isWithin(long) -> xhie
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> BdBn
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> UjwS
react.surge.util.RawEvent -> xYAI:
react.surge.util.RayTrace -> cSTT:
    org.bukkit.Location start -> iOEw
    org.bukkit.util.Vector direction -> ihXQ
    java.lang.Double maxDistance -> oGef
    java.lang.Double distanceCovered -> EMnQ
    java.lang.Double step -> qNLn
    java.lang.Boolean stop -> pJiI
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> SCqk
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> KChC
    89:89:org.bukkit.Location getStart() -> EmnU
    94:95:void setStart(org.bukkit.Location) -> VDHU
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> AiqY
    114:115:void setMaxDistance(java.lang.Double) -> bhlM
    119:119:java.lang.Double getDistanceCovered() -> JAhc
    124:125:void setDistanceCovered(java.lang.Double) -> DXdy
    129:129:java.lang.Double getStep() -> JuNU
    134:135:void setStep(java.lang.Double) -> SeQk
react.surge.util.ReflectionUtils -> pPkb:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> bXLA
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> bXLA
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> bXLA
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> bXLA
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> bXLA
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> bXLA
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> bXLA
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> bXLA
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> bXLA
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> bXLA
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> bXLA
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> bXLA
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> bXLA
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> bXLA
react.surge.util.ReflectionUtils$DataType -> pPkb$bXLA:
    react.surge.util.ReflectionUtils$DataType BYTE -> Uvns
    react.surge.util.ReflectionUtils$DataType SHORT -> XUeb
    react.surge.util.ReflectionUtils$DataType INTEGER -> ShXv
    react.surge.util.ReflectionUtils$DataType LONG -> Qrsd
    react.surge.util.ReflectionUtils$DataType CHARACTER -> nMSX
    react.surge.util.ReflectionUtils$DataType FLOAT -> oXfe
    react.surge.util.ReflectionUtils$DataType DOUBLE -> RnHF
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> lrBK
    java.util.Map CLASS_MAP -> pAwR
    java.lang.Class primitive -> UDOG
    java.lang.Class reference -> oHJB
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> Xnyn
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> kdIt
    704:704:java.lang.Class getReference() -> dFDY
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> kHsM
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> Difh
    741:742:java.lang.Class getReference(java.lang.Class) -> bhlM
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> bXLA
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> kHsM
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> kHsM
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> Difh
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> bXLA
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> pPkb$kHsM:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> vwQe
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> QHbr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> WSFV
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> yxKI
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> RdxI
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> XgKK
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> ItPi
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> veoQ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> rQSF
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> XVHm
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> DmRT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> noYv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> rHaP
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> lhrW
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> VOcF
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> DmRa
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> LchN
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> WJUV
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> Olpl
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> QPqx
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> jtMt
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> uFiK:
    void refresh() -> refresh
react.surge.util.SQLOperation -> eQMJ:
    react.surge.util.SQLOperation LOAD -> yEER
    react.surge.util.SQLOperation SAVE -> eKLS
    react.surge.util.SQLOperation[] ENUM$VALUES -> Achb
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> FpgD:
    react.surge.util.ServerState START -> sdtt
    react.surge.util.ServerState ENABLE -> jcLj
    react.surge.util.ServerState DISABLE -> FIDH
    react.surge.util.ServerState STOP -> BxNL
    react.surge.util.ServerState RUNNING -> aFoP
    react.surge.util.ServerState[] ENUM$VALUES -> rIAb
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> FOEC:
    org.bukkit.Location location -> TjYt
    org.bukkit.util.Vector offset -> ubjc
    org.bukkit.util.Vector size -> tEtg
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> doSd
    90:94:org.bukkit.Location randomLocation() -> dpXA
    104:104:org.bukkit.Location randomSurface() -> WaaN
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> XltV
    129:129:org.bukkit.util.Vector getSize() -> DkLd
react.surge.util.SnowLevel -> lMPj:
    byte level -> nEDx
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> opUh
    51:52:void setLevel(byte) -> KChC
react.surge.util.SuperCaller -> NMiw:
    void run() -> run
react.surge.util.T -> gpdt:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> kHsM
    32:35:void stop() -> stop
react.surge.util.TXT -> DsRL:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> JQfN
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> bXLA
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> bXLA
    99:99:java.lang.String line(react.surge.util.C,int) -> bXLA
    113:113:java.lang.String underline(react.surge.util.C,int) -> kHsM
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> bXLA
react.surge.util.Tag -> qurG:
    java.lang.String value() -> value
react.surge.util.Timer -> VxEi:
    long tns -> oOxC
    long cns -> TcMy
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> uywG
react.surge.util.VectorMath -> yBUB:
    int[] $SWITCH_TABLE$surge$util$Axis -> QGhc
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> kCnh
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> bXLA
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> bXLA
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> kHsM
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> Difh
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> kHsM
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> kHsM
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> Difh
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> bhlM
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> DXdy
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> SeQk
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> JQfN
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> GQMo
    111:111:double round(double,int) -> DXdy
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> bXLA
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> bXLA
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> bXLA
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> bhlM
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> DXdy
    268:268:org.bukkit.util.Vector toVector(float,float) -> bXLA
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> bXLA
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> bXLA
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> Usgp
    337:340:double getSpeed(org.bukkit.util.Vector) -> OPTh
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> bXLA
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> KChC
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> bXLA
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> kHsM
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> Difh
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> bhlM
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> miKq
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> DsYA
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> BvHO
react.surge.util.VectorMath$1 -> yBUB$1:
    org.bukkit.util.Vector val$vector -> fFBM
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> salD
    1:1:java.lang.Object onAdapt(java.lang.Object) -> JQfN
react.surge.util.W -> vlPS:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> Usgp
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> bXLA
    75:86:org.bukkit.entity.Entity getEntity(int) -> ytbu
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> bXLA
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> bXLA
    143:143:int getChunkX(org.bukkit.block.Block) -> OPTh
    155:155:int getChunkY(org.bukkit.block.Block) -> KChC
    168:169:void dropXp(org.bukkit.Location,int) -> kHsM
    180:180:int getChunkZ(org.bukkit.block.Block) -> miKq
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> kHsM
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> bXLA
    232:239:react.glang.GList news(org.bukkit.Location) -> eXck
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> bXLA
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> fJeY
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> ERuh
    300:300:org.bukkit.World toSync(org.bukkit.World) -> RPkQ
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> salD
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> rNHN
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> UjwS
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> LaAR
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> bXLA
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> bXLA
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> bXLA
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> bXLA
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> bXLA
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> bXLA
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> bXLA
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> bXLA
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> ktGm
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> VDHU
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> fJeY
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> Difh
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> bXLA
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> bXLA
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> bXLA
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> bXLA
react.surge.util.W$1 -> vlPS$1:
    java.lang.Double val$doff -> BgAF
    org.bukkit.entity.Entity val$e -> DJpN
    org.bukkit.entity.Entity[] val$result -> GBkm
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> KChC
react.surge.util.Worlds -> rgsX:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> BdVo
    33:33:boolean hasWorld(java.lang.String) -> XtdU
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> mjEj:
react.text.ColoredString -> GIWG:
    react.surge.util.C c -> KGUD
    java.lang.String s -> VGSc
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> SwUs
    42:43:void setC(react.surge.util.C) -> kHsM
    47:47:java.lang.String getS() -> LsCK
    52:53:void setS(java.lang.String) -> gMjx
react.text.RTEX -> PnCx:
    react.glang.GList extras -> vMAF
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> Mdbs
    44:58:react.json.JSONObject toJSON() -> kHtJ
react.text.RTX -> LrXe:
    react.json.JSONArray base -> aFqr
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> SeQk
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> kHsM
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> bXLA
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> bXLA
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> kHsM
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> Difh
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> bXLA
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> kHsM
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> Difh
    265:265:react.json.JSONArray toJSON() -> KxPQ
    276:277:void tellRawTo(org.bukkit.entity.Player) -> VTiU
react.text.RawText -> DjaS:
    java.lang.String COLOR_BLACK -> vMAB
    java.lang.String COLOR_DARK_BLUE -> EMrx
    java.lang.String COLOR_DARK_GREEN -> djOI
    java.lang.String COLOR_DARK_AQUA -> RnKx
    java.lang.String COLOR_DARK_RED -> VOcq
    java.lang.String COLOR_DARK_PURPLE -> hTYL
    java.lang.String COLOR_GOLD -> sKfP
    java.lang.String COLOR_GRAY -> rbVH
    java.lang.String COLOR_DARK_GRAY -> NHMo
    java.lang.String COLOR_BLUE -> NGmL
    java.lang.String COLOR_GREEN -> gbVL
    java.lang.String COLOR_AQUA -> wiTS
    java.lang.String COLOR_RED -> fyFJ
    java.lang.String COLOR_LIGHT_PURPLE -> svYp
    java.lang.String COLOR_YELLOW -> RnKY
    java.lang.String COLOR_WHITE -> mJUV
    java.lang.String COLOR_NONE -> UDPI
    java.lang.String HEAD_TEXT -> aGRh
    java.lang.String HEAD_COLOR -> YXle
    java.lang.String HEAD_BOLD -> bkwj
    java.lang.String HEAD_ITALIC -> nfiQ
    java.lang.String HEAD_UNDERLINED -> veoc
    java.lang.String HEAD_STRIKETHROUGH -> QQUe
    java.lang.String HEAD_OBFUSCATED -> rasf
    java.lang.String HEAD_CLICK_EVENT -> plnu
    java.lang.String HEAD_HOVER_EVENT -> KXUa
    java.lang.String HEAD_ACTION -> Acik
    java.lang.String HEAD_VALUE -> XgKs
    java.lang.String HEAD_EXTRA -> KhvU
    java.lang.String HEAD_ACTION_SHOW_TEXT -> YjQh
    java.lang.String HEAD_ACTION_COMMAND -> pCAE
    java.util.ArrayList components -> QbYh
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> RaqP
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> DXdy
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> bXLA
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> bXLA
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> bXLA
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> bXLA
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> bXLA
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> bXLA
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> bXLA
    307:313:java.lang.String compile() -> QqOw
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> bXLA

react.Config -> fmIT:
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> fmIT
    java.lang.String A_ENTITYCACHE_INTERVAL -> lmyI
    java.lang.String A_COMMANDOVERRIDE_TPS -> jEpN
    java.lang.String A_REACT_REMOTE_PORT -> tTOK
    java.lang.String A_REACT_REMOTE_ENABLED -> Plhx
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> vABq
    java.lang.String A_POOL_MAXTHREADS -> vYtK
    java.lang.String A_POOL_SYNC_NANOS -> vtFh
    java.lang.String A_ENTITYCACHE_ENABLED -> kABv
    java.lang.String A_FASTLEAF_ENABLED -> FMkB
    java.lang.String A_FASTLEAF_ONDECAY -> ejDm
    java.lang.String A_FASTLEAF_INSTANT -> HSoO
    java.lang.String A_FASTLEAF_DECAYPERIOD -> kjtt
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> jFOS
    java.lang.String A_ENTITYSTACK_ENABLED -> OGcB
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> yIjF
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> tBjk
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> TxuD
    java.lang.String A_GLASS_SHOW_BLOCKS -> kRCf
    java.lang.String A_GLASS_SHOW_PARTICLES -> mOYF
    java.lang.String A_ALLOW_CULL -> bXJf
    java.lang.String A_ALLOW_PURGE -> paVY
    java.lang.String A_ALLOW_CACHE -> tBmu
    java.lang.String A_CULL_RULES -> OaWk
    java.lang.String A_RAI_TPS_HIGH_TICK -> HvUm
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> iCOi
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> SvUR
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> dVCX
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> Jbhy
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> kbgn
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> oMQr
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> HmeM
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> GaqH
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> AyqG
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> pYEb
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> vjvg
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> Hmdw
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> KfMp
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> CEBa
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> HvVe
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> kcHC
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> DjHe
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> lDHA
    java.lang.String A_RAI_FLUID_TIME_CEIL -> PBWE
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> OigP
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> pOrf
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> fRun
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> AqbF
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> PcyT
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> dwcr
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> BSBa
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> pXdW
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> CxHB
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> Whmu
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> Jbha
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> pjFS
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> WhnW
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> IFSg
    java.lang.String A_LANGUAGE -> ThVT
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> HeSm
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> gMiI
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> lCfW
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> PJgh
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> YDdH
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> QpQS
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> dUcv
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> Huvr
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> Fops
    java.lang.String A_RAI_ENTITY_PROPIGATE -> jNfA
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> UYym
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> XRba
    int ENTITYCACHE_CHUNK_RADIUS -> ePWk
    int ENTITYCACHE_INTERVAL -> kbiT
    boolean COMMANDOVERRIDES_TPS -> UsmH
    int REACT_REMOTE_PORT -> QMmf
    boolean REACT_REMOTE_ENABLED -> miPT
    int ENTITY_STACK_MAX_COUNT -> roms
    int POOL_MAXTHREADS -> LaCK
    long POOL_SYNC_NANOS -> PJjo
    boolean ENTITYCACHE_ENABLED -> rDyv
    boolean FASTLEAF_ENABLED -> YLtV
    boolean FASTLEAF_ONDECAY -> HvXi
    boolean FASTLEAF_INSTANT -> pigx
    int FASTLEAF_DECAYPERIOD -> CVEs
    boolean COMMANDOVERRIDES_MEMORY -> yIoF
    boolean ENTITYSTACK_ENABLED -> XlTI
    int ENTITYSTACK_MINIMUM_GROUP -> Huuh
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> Hdsx
    int ENTITYSTACK_MAXIMUM_HEALTH -> RrrV
    boolean GLASS_SHOW_BLOCKS -> jxwc
    boolean GLASS_SHOW_PARTICLES -> TEsn
    react.glang.GList ALLOW_CULL -> MteM
    react.glang.GList ALLOW_PURGE -> YVFB
    react.glang.GList ALLOW_CACHE -> vjwi
    react.glang.GList CULL_RULES -> qlit
    double RAI_TPS_HIGH_TICK -> hsRK
    long RAI_REDSTONE_TIME_FLOOR -> YUdg
    long RAI_REDSTONE_TIME_CEIL -> nlQw
    long RAI_REDSTONE_TIME_MUDDING -> HTTc
    double RAI_REDSTONE_TIME_FUNCTION -> dxGg
    double RAI_REDSTONE_TIME_OVERBLEED -> hkAj
    int RAI_REDSTONE_TIME_RADIUS -> avnL
    int RAI_REDSTONE_TIME_PROPIGATION -> rDyR
    long RAI_HOPPER_TIME_FLOOR -> FNNd
    long RAI_HOPPER_TIME_CEIL -> GYdS
    long RAI_HOPPER_TIME_MUDDING -> bWpg
    double RAI_HOPPER_TIME_FUNCTION -> FpSi
    double RAI_HOPPER_TIME_OVERBLEED -> VoAt
    int RAI_HOPPER_TIME_RADIUS -> LPBe
    int RAI_HOPPER_TIME_PROPIGATION -> NfiR
    int RAI_ENTITY_CHUNK_MULTIPLIER -> yRbf
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> WFon
    int RAI_ENTITY_CHUNK_RADIUS -> LXRk
    long RAI_FLUID_TIME_FLOOR -> uxyq
    long RAI_FLUID_TIME_CEIL -> Hmhq
    long RAI_FLUID_TIME_MUDDING -> AqeG
    double RAI_FLUID_TIME_FUNCTION -> mhqs
    double RAI_FLUID_TIME_OVERBLEED -> CVHe
    int RAI_FLUID_TIME_RADIUS -> offo
    int RAI_FLUID_TIME_PROPIGATION -> xGOB
    double SMEAR_TICK_ENTITIES_MAX_TICK -> vslO
    double SMEAR_TICK_TILES_MAX_TICK -> ckvE
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> BIro
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> ooYH
    double SMEAR_TICK_ENTITIES_AMOUNT -> ryCE
    double SMEAR_TICK_TILES_AMOUNT -> vbkI
    boolean SMEAR_TICK_ENTITIES_ENABLE -> MdHK
    boolean SMEAR_TICK_TILES_ENABLE -> GsXH
    boolean HOPPER_OVERTICK_ENABLE -> nIqI
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> oEEA
    long RAI_CHUNK_TIME_CEIL -> Venh
    long RAI_CHUNK_TIME_MUDDING -> NgHv
    double RAI_CHUNK_TIME_FUNCTION -> EKLi
    double RAI_CHUNK_TIME_OVERBLEED -> DGiJ
    int RAI_CHUNK_TIME_RADIUS -> kIXo
    int RAI_CHUNK_TIME_PROPIGATION -> RQRb
    boolean RAI_CHUNK_TIME_PROPIGATE -> pYIX
    boolean RAI_FLUID_TIME_PROPIGATE -> ryAs
    boolean RAI_ENTITY_PROPIGATE -> TOHX
    boolean RAI_HOPPER_TIME_PROPIGATE -> oLru
    boolean RAI_REDSTONE_TIME_PROPIGATE -> NVGp
    boolean hrld -> pihq
    boolean rns -> EvAg
    boolean rrl -> lTlO
    34:34:void <init>() -> <init>
    653:670:void doTrack(org.bukkit.plugin.Plugin) -> fmIT
    675:697:void onRead(org.bukkit.plugin.Plugin) -> lmyI
    701:731:void read(java.io.File,boolean) -> fmIT
    736:849:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> fmIT
    854:891:react.surge.cluster.DataCluster defaultConfig(boolean) -> fmIT
    896:971:react.glang.GList getDefaultEntitiesForCaching() -> fmIT
    976:1051:react.glang.GList getDefaultEntitiesForCulling() -> lmyI
    1056:1093:react.glang.GList getDefaultEntitiesForRemoval() -> jEpN
    1098:1127:react.glang.GList getDefaultCullRules() -> tTOK
    258:648:void <clinit>() -> <clinit>
react.Config$1 -> fmIT$1:
    java.io.File val$fConfig -> pXhM
    java.io.File val$fConfigExperimental -> lULl
    org.bukkit.plugin.Plugin val$main -> VDMR
    657:657:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    661:665:void run() -> run
react.Gate -> lmyI:
    react.glang.GMap defaultSettings -> BuIX
    35:35:void <init>() -> <init>
    41:127:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> fmIT
    131:156:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> fmIT
    161:161:int getChunkCountForView() -> Plhx
    166:166:int getMaxChunksForView() -> vABq
    171:171:boolean hasFawe() -> vYtK
    176:197:void tickEntityNextTickListTick(org.bukkit.World) -> fmIT
    201:205:void resetEntityMaxTick(org.bukkit.World) -> lmyI
    209:209:int getEntityTickMax(org.bukkit.World) -> jEpN
    214:214:int getTileTickMax(org.bukkit.World) -> tTOK
    219:237:void tweakEntityTickMax(org.bukkit.World,int) -> fmIT
    241:258:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> fmIT
    263:267:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> fmIT
    271:283:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> fmIT
    288:292:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> lmyI
    296:314:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> fmIT
    318:322:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> Plhx
    327:330:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> fmIT
    335:338:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> lmyI
    343:343:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> jEpN
    348:348:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> tTOK
    353:353:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> Plhx
    360:366:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    372:373:void unloadChunk(org.bukkit.World,int,int) -> fmIT
    377:383:void removeEntity(org.bukkit.entity.Entity) -> fmIT
    387:393:void purgeEntity(org.bukkit.entity.Entity) -> lmyI
    397:403:void cullEntity(org.bukkit.entity.Entity) -> jEpN
    407:413:void cachedEntity(org.bukkit.entity.Entity) -> tTOK
    418:435:void updateBlock(org.bukkit.block.Block) -> fmIT
    439:443:java.lang.String header(java.lang.String,react.surge.util.C) -> fmIT
    448:448:java.lang.String header(react.surge.util.C) -> fmIT
    454:458:void updateFluid(org.bukkit.block.Block) -> lmyI
    37:37:void <clinit>() -> <clinit>
react.Gate$1 -> lmyI$1:
    react.api.SelectorPosition val$sel -> GsWJ
    react.glang.Callback val$prog -> Lhrp
    react.glang.Callback val$cb -> QpSM
    42:42:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    46:125:void run() -> run
react.Gate$1$1 -> lmyI$1$1:
    java.lang.Object val$o -> JlAa
    java.lang.reflect.Constructor val$vectorConstruct -> ktOv
    java.lang.reflect.Constructor val$cuboidConstruct -> xWrH
    java.lang.reflect.Method val$faweFixMethod -> NxND
    java.lang.Integer[] val$total -> gxeL
    java.lang.Integer[] val$sof -> GrxW
    java.lang.Integer val$tot -> GPuT
    react.Gate$1 this$0 -> HCWg
    74:74:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],java.lang.Integer) -> <init>
    80:94:void run() -> run
react.Gate$1$2 -> lmyI$1$2:
    java.lang.Integer[] val$total -> gxeL
    react.Gate$1 this$0 -> HCWg
    99:99:void <init>(react.Gate$1,java.lang.String,int,java.lang.Integer[]) -> <init>
    105:113:void run() -> run
react.Gate$2 -> lmyI$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> rMpT
    271:271:void <clinit>() -> <clinit>
react.Info -> jEpN:
    java.lang.String CORE_REACT_DOT -> WObm
    java.lang.String CORE_NAME -> lfRV
    java.lang.String CORE_CACHE -> Cfkt
    java.lang.String CORE_DOTYML -> Kncn
    java.lang.String COMMAND_REACT -> FFCQ
    java.lang.String COMMAND_RAI -> Lhum
    java.lang.String COMMAND_ACT_DESCRIPTION -> XuJf
    java.lang.String COMMAND_ACT -> NMYo
    java.lang.String COMMAND_ACT_ALIAS_1 -> AOcd
    java.lang.String COMMAND_ACT_ALIAS_2 -> TqOG
    java.lang.String COMMAND_ACT_USAGE -> vQkR
    java.lang.String COMMAND_HELP_DESCRIPTION -> CxOR
    java.lang.String COMMAND_HELP -> RbXD
    java.lang.String COMMAND_HELP_ALIAS_1 -> XBFN
    java.lang.String COMMAND_HELP_ALIAS_2 -> BJVQ
    java.lang.String COMMAND_HELP_USAGE -> EeCa
    java.lang.String COMMAND_STATUS_DESCRIPTION -> baEW
    java.lang.String COMMAND_STATUS -> xrEC
    java.lang.String COMMAND_STATUS_ALIAS_1 -> jEvm
    java.lang.String COMMAND_STATUS_ALIAS_2 -> ieXS
    java.lang.String COMMAND_STATUS_USAGE -> FhEI
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> dDfL
    java.lang.String COMMAND_CPUSCORE -> aCmP
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> lepU
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> fvAo
    java.lang.String COMMAND_CPUSCORE_USAGE -> ySDa
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> eYKu
    java.lang.String COMMAND_RELOAD -> tdvM
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> iStj
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> eHJd
    java.lang.String COMMAND_RELOAD_USAGE -> QpUH
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> qKKt
    java.lang.String COMMAND_MONITOR -> goqp
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> iCTf
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> lvpt
    java.lang.String COMMAND_MONITOR_USAGE -> QpUQ
    java.lang.String COMMAND_VERSION_DESCRIPTION -> vcPU
    java.lang.String COMMAND_VERSION -> LPGG
    java.lang.String COMMAND_VERSION_ALIAS_1 -> DaaO
    java.lang.String COMMAND_VERSION_ALIAS_2 -> YLyh
    java.lang.String COMMAND_VERSION_USAGE -> BtlM
    java.lang.String COMMAND_MAP_DESCRIPTION -> FNTy
    java.lang.String COMMAND_MAP -> XSHr
    java.lang.String COMMAND_MAP_ALIAS_1 -> lURh
    java.lang.String COMMAND_MAP_ALIAS_2 -> hkId
    java.lang.String COMMAND_MAP_USAGE -> MuLo
    java.lang.String COMMAND_GLASS_DESCRIPTION -> cJVp
    java.lang.String COMMAND_GLASS -> xhtl
    java.lang.String COMMAND_GLASS_ALIAS_1 -> bhvo
    java.lang.String COMMAND_GLASS_ALIAS_2 -> OjRN
    java.lang.String COMMAND_GLASS_USAGE -> LhxS
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> LPGS
    java.lang.String COMMAND_CBLAME -> CwpS
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> JAPN
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> XJWx
    java.lang.String COMMAND_CBLAME_USAGE -> vlAA
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> ejNv
    java.lang.String COMMAND_ACTIONLOG -> EJpO
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> qJnE
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> VfSp
    java.lang.String COMMAND_ACTIONLOG_USAGE -> BtmT
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> OjPd
    java.lang.String COMMAND_CAPABILITIES -> rpTt
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> WiVi
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> fmRh
    java.lang.String COMMAND_CAPABILITIES_USAGE -> SBwP
    java.lang.String MSG_PERMISSION -> quaw
    java.lang.String MSG_MONITORING_STARTED -> XIvK
    java.lang.String MSG_MONITORING_STOPPED -> GIFu
    java.lang.String MSG_ACTIONLOGGING_STARTED -> JlBs
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> biVk
    java.lang.String MSG_GLASS_STARTED -> gpUN
    java.lang.String MSG_GLASS_STOPPED -> flpo
    org.bukkit.Color COLOR_HOPPER -> jNjM
    org.bukkit.Color COLOR_BLOCK_UPDATE -> LGUN
    org.bukkit.Color COLOR_BLOCK_FROMTO -> NEJk
    org.bukkit.Color COLOR_BLOCK_BURN -> Ihad
    org.bukkit.Color COLOR_BLOCK_DECAY -> gFDs
    org.bukkit.Color COLOR_BLOCK_FORM -> XIxo
    java.lang.String NAME_TICK -> Oiqw
    java.lang.String NAME_MEMORY -> lCqn
    java.lang.String NAME_CHUNKS -> QhIS
    java.lang.String NAME_ENTITIES -> Wyyx
    java.lang.String STATE_MONITORING_TAB -> EeFq
    java.lang.String STATE_MONITORING_ENABLED -> QFEx
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> wwWQ
    java.lang.String STATE_MAPPING_ENABLED -> DYSM
    java.lang.String STATE_SOUND_PLAYS -> KMFP
    java.lang.String STATE_MONITORING_POSTED -> EdfW
    java.lang.String STATE_MONITORING_LASTTAB -> AOhH
    java.lang.String STATE_GLASSES_ENABLED -> pXoK
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> mrIe
    java.lang.String STATE_PLAYER_HOTBAR -> OacA
    java.lang.String STATE_PLAYER_SHIFT -> bhyN
    java.lang.String STATE_PLAYER_SCROLL -> MRjw
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> rVeC
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> BdMR
    java.lang.String PERM_ACCESS -> HnQF
    java.lang.String PERM_MONITOR -> yuLR
    java.lang.String PERM_MONITOR_TITLE -> EvGW
    java.lang.String PERM_MONITOR_ACTIONLOG -> ctlC
    java.lang.String PERM_MONITOR_MAP -> qlsT
    java.lang.String PERM_MONITOR_ENVIRONMENT -> yAfQ
    java.lang.String PERM_MONITOR_GLASSES -> pbAH
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> qKPq
    java.lang.String PERM_ACT -> UlDg
    java.lang.String PERM_RAI -> FWHI
    java.lang.String PERM_RAI_CONTROL -> vkaN
    java.lang.String PERM_RAI_ACCESS -> rNRx
    java.lang.String PERM_RAI_MONITOR -> tTYg
    java.lang.String PERM_RELOAD -> NELr
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> TqRS
    java.lang.String SAMPLER_REDSTONE_TICK -> Oiqv
    java.lang.String SAMPLER_ENTITY_TIME -> YxPa
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> QEdn
    java.lang.String SAMPLER_TILE_TIME_LOCK -> ETES
    java.lang.String SAMPLER_TILE_TIME -> DQBR
    java.lang.String SAMPLER_TILE_DROPTICK -> ObBg
    java.lang.String SAMPLER_ENTITY_DROPTICK -> XuMf
    java.lang.String SAMPLER_REDSTONE_SECOND -> uOPM
    java.lang.String SAMPLER_REDSTONE_TIME -> DaeL
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> cRkd
    java.lang.String SAMPLER_HOPPER_TICK -> LOjK
    java.lang.String SAMPLER_HOPPER_SECOND -> wTtg
    java.lang.String SAMPLER_HOPPER_TIME -> LrMs
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> oVPC
    java.lang.String SAMPLER_FLUID_TICK -> uNoU
    java.lang.String SAMPLER_FLUID_SECOND -> IiDm
    java.lang.String SAMPLER_FLUID_TIME -> ECEs
    java.lang.String SAMPLER_TPS -> ivaP
    java.lang.String SAMPLER_TICK -> VCtn
    java.lang.String SAMPLER_TIU -> YwsO
    java.lang.String SAMPLER_MEM -> wUTw
    java.lang.String SAMPLER_FREEMEM -> pQBD
    java.lang.String SAMPLER_MAXMEM -> HnSB
    java.lang.String SAMPLER_ALLOCMEM -> IXCn
    java.lang.String SAMPLER_MAHS -> HKoE
    java.lang.String SAMPLER_CHK -> opBM
    java.lang.String SAMPLER_ATASK -> CgSh
    java.lang.String SAMPLER_STASK -> ghIs
    java.lang.String SAMPLER_CHK_TIME -> BBLM
    java.lang.String SAMPLER_EXPLOSION_TIME -> jiAu
    java.lang.String SAMPLER_CHKS -> wvvk
    java.lang.String SAMPLER_ENT -> DPay
    java.lang.String SAMPLER_ENTLIV -> tmmg
    java.lang.String SAMPLER_ENTDROP -> nuOA
    java.lang.String SAMPLER_ENTTILE -> nRje
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> kAPv
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> Whyo
    java.lang.String ACTION_CULL_ENTITIES_NAME -> ntlg
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> avxa
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> nIyB
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> kstQ
    java.lang.String ACTION_UPDATE_FLUID_NAME -> YDlr
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> ntmP
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> IptF
    java.lang.String ACTION_LOCK_FLUID_STATUS -> TiDJ
    java.lang.String ACTION_LOCK_FLUID_NAME -> XdPq
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> kRUe
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> pXsg
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> IFcO
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> FFJx
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> GYnj
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> DsJK
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> PJwQ
    java.lang.String ACTION_LOCK_HOPPER_NAME -> IGCu
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> jFaH
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> Xlaj
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> QVkX
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> NgTw
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> aeyl
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> HwFO
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> vswE
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> kIcq
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> TGDJ
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> YpFC
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> IFcb
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> AaOm
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> WaMK
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> CpEY
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> XdOo
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> qeGe
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> yBLB
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> wnhl
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> royv
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> cBLN
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> eQCv
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> hkMk
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> cBLi
    java.lang.String ACTION_FIX_LIGHTING_NAME -> gFHe
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> lCta
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> xaJo
    java.lang.String ACTION_COLLECT_GARBAGE -> upqw
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> ycmC
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> docN
    6:6:void <init>() -> <init>
    8:232:void <clinit>() -> <clinit>
react.Lang -> tTOK:
    java.lang.String BUNDLE_NAME -> uOPe
    java.util.ResourceBundle RESOURCE_BUNDLE -> dEPD
    java.util.ResourceBundle PRIMARY_BUNDLE -> qmWi
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> Plhx:
    react.React instance -> kket
    react.controller.SampleController sampleController -> jhbp
    react.controller.PlayerController playerController -> TheJ
    react.controller.MonitorController monitorController -> Hedj
    react.controller.CommandController commandController -> Noff
    react.controller.ActionController actionController -> TiGt
    react.controller.FastDecayController fastDecayController -> XuUG
    react.controller.EntityStackController entityStackController -> PCJF
    react.controller.GlassController glassController -> GsdG
    react.controller.EntityCullController entityCullController -> xFyr
    react.controller.SpikeController spikeController -> ghMl
    react.controller.SecurityController securityController -> OaiK
    react.controller.RedstoneController redstoneController -> UQwo
    react.controller.HopperController hopperController -> fKYO
    react.controller.PhysicsController physicsController -> xPKu
    react.controller.TickTimeController tickTimeController -> lMIl
    react.controller.RAIController raiController -> xaNS
    react.controller.FluidController fluidController -> dfuK
    react.controller.ChunkController chunkController -> ebHa
    react.controller.GraphController graphController -> JIiB
    react.controller.ChronophyFluidController fluidChronophyController -> imsY
    react.controller.EventController eventController -> klIw
    react.controller.BlockInjectController blockInjectController -> weys
    react.controller.SmearTickController smearTickController -> kIeX
    react.controller.FeatureController featureController -> Usyd
    react.controller.HopperOvertickController hopperPlungeController -> Nwur
    react.controller.BenchmarkController benchmarkController -> uNrK
    react.controller.LanguageController languageController -> VDYX
    react.controller.RemoteController remoteController -> LqpL
    react.controller.ExplosiveController explosiveController -> ofrm
    42:42:void <init>() -> <init>
    139:149:void enable() -> enable
    155:155:void disable() -> disable
react.action.ActionCollectGarbage -> vABq:
    19:22:void <init>() -> <init>
    27:61:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
react.action.ActionCollectGarbage$1 -> vABq$1:
    react.api.IActionSource val$source -> BSSU
    react.action.ActionCollectGarbage this$0 -> NUsU
    30:30:void <init>(react.action.ActionCollectGarbage,react.api.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> vABq$1$1:
    long val$mbnex -> gFJi
    long val$mbmem -> EJyI
    react.action.ActionCollectGarbage$1 this$1 -> JbyV
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> vYtK:
    long ms -> WrPs
    int lcd -> XcqW
    32:59:void <init>() -> <init>
    64:150:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> fmIT
    25:25:long access$002(react.action.ActionCullEntities,long) -> fmIT
    25:25:int access$100(react.action.ActionCullEntities) -> fmIT
    25:25:long access$000(react.action.ActionCullEntities) -> lmyI
react.action.ActionCullEntities$1 -> vYtK$1:
    react.action.ActionCullEntities this$0 -> OPfb
    37:37:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> vtFh
    37:37:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> vYtK$2:
    react.action.ActionCullEntities this$0 -> OPfb
    49:49:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> vtFh
    49:49:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> vYtK$3:
    react.glang.FinalInteger val$completed -> YUrf
    react.glang.FinalInteger val$total -> TFdO
    react.glang.FinalInteger val$totalCulled -> IOVO
    react.glang.FinalInteger val$totalChunked -> ejXE
    react.api.IActionSource val$source -> BSSU
    react.action.ActionCullEntities this$0 -> OPfb
    105:105:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> vYtK$4:
    react.api.IActionSource val$source -> BSSU
    react.glang.FinalInteger val$totalCulled -> IOVO
    react.glang.FinalInteger val$totalChunked -> ejXE
    react.action.ActionCullEntities this$0 -> OPfb
    137:137:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> vtFh:
    25:39:void <init>() -> <init>
    44:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
react.action.ActionFixLighting$1 -> vtFh$1:
    react.action.ActionFixLighting this$0 -> Wqol
    29:29:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> vtFh
    29:29:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> vtFh$2:
    react.api.IActionSource val$source -> BSSU
    int val$ch -> tfAx
    react.action.ActionFixLighting this$0 -> Wqol
    78:78:void <init>(react.action.ActionFixLighting,react.api.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> fmIT
    78:78:void run(java.lang.Object) -> fmIT
react.action.ActionFixLighting$3 -> vtFh$3:
    react.action.ActionFixLighting this$0 -> Wqol
    89:89:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> fmIT
    89:89:void run(java.lang.Object) -> fmIT
react.action.ActionLockFluid -> kABv:
    int lcd -> XcqW
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
react.action.ActionLockFluid$1 -> kABv$1:
    react.action.ActionLockFluid this$0 -> kQyD
    31:31:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> vtFh
    31:31:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> kABv$2:
    react.action.ActionLockFluid this$0 -> kQyD
    43:43:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> vtFh
    43:43:java.lang.Object get() -> get
react.action.ActionLockHopper -> FMkB:
    int lcd -> XcqW
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
react.action.ActionLockHopper$1 -> FMkB$1:
    react.action.ActionLockHopper this$0 -> sYqA
    31:31:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> vtFh
    31:31:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> FMkB$2:
    react.action.ActionLockHopper this$0 -> sYqA
    43:43:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> vtFh
    43:43:java.lang.Object get() -> get
react.action.ActionLockRedstone -> ejDm:
    int lcd -> XcqW
    26:53:void <init>() -> <init>
    58:102:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
react.action.ActionLockRedstone$1 -> ejDm$1:
    react.action.ActionLockRedstone this$0 -> Fxre
    31:31:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> vtFh
    31:31:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> ejDm$2:
    react.action.ActionLockRedstone this$0 -> Fxre
    43:43:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> vtFh
    43:43:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> HSoO:
    long ms -> WrPs
    int lcd -> XcqW
    boolean fail -> OHYA
    31:46:void <init>() -> <init>
    51:144:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> lmyI
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> fmIT
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> fmIT
    23:23:int access$200(react.action.ActionPurgeChunks) -> lmyI
    23:23:long access$100(react.action.ActionPurgeChunks) -> jEpN
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> fmIT
react.action.ActionPurgeChunks$1 -> HSoO$1:
    react.action.ActionPurgeChunks this$0 -> WrTF
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> vtFh
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> HSoO$2:
    int val$dk -> Fxrd
    java.lang.Object val$j -> DakV
    react.glang.FinalInteger val$acompleted -> Know
    react.glang.FinalInteger val$completed -> YUrf
    react.glang.FinalInteger val$total -> TFdO
    react.glang.FinalInteger val$totalCulled -> IOVO
    react.glang.FinalInteger val$totalChunked -> ejXE
    react.api.IActionSource val$source -> BSSU
    react.api.ISelector[] val$selectors -> nBQX
    react.action.ActionPurgeChunks this$0 -> WrTF
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> HSoO$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> DbKv
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> HSoO$3:
    react.api.IActionSource val$source -> BSSU
    react.glang.FinalInteger val$acompleted -> Know
    react.action.ActionPurgeChunks this$0 -> WrTF
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> HSoO$4:
    org.bukkit.Chunk val$chunk -> vJHn
    java.lang.Runnable val$cb -> pbJP
    react.action.ActionPurgeChunks this$0 -> WrTF
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> kjtt:
    long ms -> WrPs
    int lcd -> XcqW
    34:61:void <init>() -> <init>
    66:153:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> lmyI
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> fmIT
    27:27:int access$100(react.action.ActionPurgeEntities) -> fmIT
    27:27:long access$000(react.action.ActionPurgeEntities) -> lmyI
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> fmIT
react.action.ActionPurgeEntities$1 -> kjtt$1:
    react.action.ActionPurgeEntities this$0 -> HLVD
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> vtFh
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> kjtt$2:
    react.action.ActionPurgeEntities this$0 -> HLVD
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> vtFh
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> kjtt$3:
    react.glang.FinalInteger val$completed -> YUrf
    react.glang.FinalInteger val$total -> TFdO
    react.glang.FinalInteger val$totalCulled -> IOVO
    react.glang.FinalInteger val$totalChunked -> ejXE
    react.api.IActionSource val$source -> BSSU
    react.action.ActionPurgeEntities this$0 -> HLVD
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> kjtt$4:
    react.api.IActionSource val$source -> BSSU
    react.glang.FinalInteger val$totalCulled -> IOVO
    react.glang.FinalInteger val$totalChunked -> ejXE
    react.action.ActionPurgeEntities this$0 -> HLVD
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> kjtt$5:
    org.bukkit.entity.Entity val$i -> uFcu
    react.glang.FinalInteger val$cu -> INxL
    int val$k -> oETM
    org.bukkit.Chunk val$chunk -> vJHn
    java.lang.Runnable val$cb -> pbJP
    react.action.ActionPurgeEntities this$0 -> HLVD
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> jFOS:
    int lcd -> XcqW
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
react.action.ActionUnlockFluid$1 -> jFOS$1:
    react.action.ActionUnlockFluid this$0 -> Wibg
    30:30:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> vtFh
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> OGcB:
    int lcd -> XcqW
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
react.action.ActionUnlockHopper$1 -> OGcB$1:
    react.action.ActionUnlockHopper this$0 -> dpHl
    30:30:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> vtFh
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> yIjF:
    int lcd -> XcqW
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
react.action.ActionUnlockRedstone$1 -> yIjF$1:
    react.action.ActionUnlockRedstone this$0 -> KLkm
    30:30:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> vtFh
    30:30:java.lang.Object get() -> get
react.api.Action -> tBjk:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> kbyX
    java.lang.String[] nodes -> SCas
    react.api.ActionHandle handle -> UJJC
    react.api.ActionState state -> VMLW
    react.api.ActionTargetType target -> ghPL
    react.api.ActionType type -> eagl
    react.api.IActionSource currentSource -> uiHM
    double progress -> mrQQ
    react.glang.GMap defaultSelectors -> FWPW
    23:24:void <init>(react.api.ActionType) -> <init>
    27:39:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    44:59:react.api.ISelector[] biselect(react.api.ISelector[]) -> fmIT
    65:66:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> fmIT
    71:71:java.lang.String getName() -> getName
    77:77:java.lang.String getDescription() -> getDescription
    83:83:react.api.ActionHandle getHandleType() -> kABv
    89:89:react.api.ActionState getState() -> FMkB
    95:95:java.lang.String getStatus() -> getStatus
    101:102:void setStatus(java.lang.String) -> fmIT
    107:107:double getProgress() -> getProgress
    113:114:void setProgress(double) -> setProgress
    119:119:react.api.ActionTargetType getTarget() -> ejDm
    125:125:react.api.ActionType getType() -> HSoO
    131:131:react.glang.GMap getDefaultSelectors() -> kjtt
    137:146:void act(react.api.IActionSource,react.api.ISelector[]) -> lmyI
    151:152:void completeAction() -> jFOS
    157:157:react.api.IActionSource getCurrentSource() -> OGcB
    163:163:java.lang.String[] getNodes() -> yIjF
    169:170:void setNodes(java.lang.String[]) -> fmIT
    void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
react.api.ActionAlreadyRunningException -> TxuD:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> kRCf:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> mOYF:
    react.api.ActionHandle AUTOMATIC -> gyQI
    react.api.ActionHandle MANUAL -> AaRs
    react.api.ActionHandle MUTEX -> Wiae
    react.api.ActionHandle[] $VALUES -> QVoC
    3:3:react.api.ActionHandle[] values() -> values
    3:3:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ActionNotRunningException -> bXJf:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> paVY:
    react.api.ActionState IDLE -> MKEm
    react.api.ActionState RUNNING -> twHx
    react.api.ActionState[] $VALUES -> Nfyc
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> tBmu:
    react.api.ActionTargetType POSITIONAL -> HKvY
    react.api.ActionTargetType SYSTEM -> QVqY
    react.api.ActionTargetType[] $VALUES -> VfaT
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> OaWk:
    react.api.ActionType FIX_LIGHTING -> sABM
    react.api.ActionType UNLOCK_FLUID -> nlgG
    react.api.ActionType LOCK_FLUID -> iDFH
    react.api.ActionType UNLOCK_HOPPER -> DPkl
    react.api.ActionType LOCK_HOPPER -> dDvP
    react.api.ActionType UNLOCK_REDSTONE -> QgsM
    react.api.ActionType LOCK_REDSTONE -> NolJ
    react.api.ActionType CULL_ENTITIES -> fCLc
    react.api.ActionType COLLECT_GARBAGE -> jFfx
    react.api.ActionType PURGE_ENTITIES -> ObMA
    react.api.ActionType PURGE_CHUNKS -> sbbi
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> UJJC
    react.api.ActionTargetType target -> ghPL
    react.api.ActionType[] $VALUES -> Fxsf
    5:5:react.api.ActionType[] values() -> values
    5:5:react.api.ActionType valueOf(java.lang.String) -> valueOf
    25:30:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    34:34:java.lang.String getName() -> getName
    39:39:java.lang.String getDescription() -> getDescription
    44:44:react.api.ActionHandle getHandle() -> tBjk
    49:49:react.api.ActionTargetType getTarget() -> ejDm
    5:17:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> HvUm:
    react.api.ActivationRangeType ANIMALS -> Ihjo
    react.api.ActivationRangeType MONSTERS -> Gjtw
    react.api.ActivationRangeType MISC -> qTLc
    react.api.ActivationRangeType[] $VALUES -> IymI
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> iCOi:
    int value() -> value
react.api.Async -> SvUR:
react.api.CPUBenchmark -> dVCX:
    org.bukkit.command.CommandSender sender -> sender
    int score -> XBSe
    java.lang.Runnable onFinish -> nKBj
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:86:void run() -> run
    90:90:org.bukkit.command.CommandSender getSender() -> getSender
    95:95:int getScore() -> getScore
    100:100:java.lang.Runnable getOnFinish() -> TxuD
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> fmIT
    10:10:int access$100(react.api.CPUBenchmark) -> lmyI
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> jEpN
react.api.CPUBenchmark$1 -> dVCX$1:
    react.api.CPUBenchmark this$0 -> rFNF
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> dVCX$2:
    react.api.CPUBenchmark this$0 -> rFNF
    73:73:void <init>(react.api.CPUBenchmark) -> <init>
    77:84:void run() -> run
react.api.CPUResult -> Jbhy:
    react.api.CPUResult ULTRA_SLOW -> bqsX
    react.api.CPUResult VERY_SLOW -> RISV
    react.api.CPUResult SLOW -> qeQR
    react.api.CPUResult AVERAGE -> bjFk
    react.api.CPUResult GOOD -> eroN
    react.api.CPUResult FAST -> stHb
    react.api.CPUResult VERY_FAST -> lgDF
    react.api.CPUResult ULTRA_FAST -> GkYc
    java.lang.String m -> mGcF
    react.api.CPUResult[] $VALUES -> kJMU
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> fmIT
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> kbgn:
    react.glang.GMap cache -> MJgg
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> lmyI
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> jEpN
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> kRCf
    54:54:boolean has(java.lang.Object) -> tTOK
react.api.Capability -> oMQr:
    react.api.Capability DUAL_WEILD -> GRGt
    react.api.Capability SCOREBOARD -> cliP
    react.api.Capability SCOREBOARD_ADVANCED -> xXcK
    react.api.Capability HOPPER -> BRyG
    react.api.Capability ENTITY_ATTRIBUTES -> qSnA
    react.api.Capability ENTITY_AI -> BAwU
    react.api.Capability ACTION_BAR -> yKEM
    react.api.Capability ENTITY_NAMES -> rqCu
    react.api.Capability TITLE_BAR -> kkoC
    react.api.Capability CHUNK_RELIGHTING -> nmHc
    react.api.Capability MONITOR_SUBMISSIVENESS -> ndWY
    react.api.Capability ACCELERATED_PING -> RtHq
    react.api.Capability ENTITY_THROTTLING -> LHCs
    react.api.Capability TILE_THROTTLING -> gxsc
    react.glang.GList capabilities -> KUah
    react.surge.util.Protocol version -> NNKB
    react.api.Flavor flavor -> mjDl
    java.lang.String plugin -> KxFM
    java.lang.String name -> name
    13:45:void <clinit>() -> <clinit>
    52:58:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    62:63:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    67:68:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    72:73:void <init>(java.lang.String,java.lang.String) -> <init>
    77:78:void <init>(java.lang.String,react.api.Flavor) -> <init>
    82:83:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    87:92:boolean isPluginCapable() -> mOYF
    97:97:boolean isFlavorCapable() -> bXJf
    102:102:boolean isVersionCapable() -> paVY
    107:107:boolean isCapable() -> tBmu
    112:112:react.surge.util.Protocol getVersion() -> OaWk
    117:117:react.api.Flavor getFlavor() -> HvUm
    122:122:java.lang.String getPlugin() -> iCOi
    127:127:java.lang.String getName() -> getName
    132:146:void sendNotCapable(org.bukkit.entity.Player) -> fmIT
    150:164:void sendNotCapable(react.api.IActionSource) -> fmIT
react.api.CapabilityBasis -> HmeM:
    react.api.CapabilityBasis VERSION -> sjuK
    react.api.CapabilityBasis FLAVOR -> xicT
    react.api.CapabilityBasis PLUGIN -> MRwK
    react.api.CapabilityBasis[] $VALUES -> vlOC
    3:3:react.api.CapabilityBasis[] values() -> values
    3:3:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ChunkIssue -> GaqH:
    react.api.ChunkIssue ENTITY -> EmcW
    react.api.ChunkIssue HOPPER -> gNcl
    react.api.ChunkIssue REDSTONE -> FyYg
    react.api.ChunkIssue FLUID -> IyrF
    react.api.ChunkIssue PHYSICS -> hcJG
    react.api.ChunkIssue[] $VALUES -> nRxO
    3:3:react.api.ChunkIssue[] values() -> values
    3:3:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.api.Clip -> AyqG:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> pYEb:
    org.bukkit.command.CommandSender sender -> sender
    12:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> lmyI
    30:31:void sendResponseSuccess(java.lang.String) -> jEpN
    36:37:void sendResponseError(java.lang.String) -> tTOK
    42:43:void sendResponseActing(java.lang.String) -> Plhx
react.api.ConsoleActionSource -> vjvg:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> lmyI
    18:19:void sendResponseSuccess(java.lang.String) -> jEpN
    24:25:void sendResponseError(java.lang.String) -> tTOK
    30:31:void sendResponseActing(java.lang.String) -> Plhx
react.api.CullList -> Hmdw:
    react.glang.GSet toCull -> ObRL
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> Plhx
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> SvUR
react.api.DTest -> KfMp:
    3:3:void <init>() -> <init>
    7:58:int test() -> dVCX
react.api.EntityFlag -> CEBa:
    react.api.EntityFlag NAMED -> loVN
    react.api.EntityFlag TAMED -> vlRW
    react.api.EntityFlag STACKED -> KxHh
    react.api.EntityFlag RIDDEN -> jiOQ
    react.api.EntityFlag LEASHED -> RtLa
    java.lang.String m -> mGcF
    react.api.EntityFlag[] $VALUES -> kuBy
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> vABq
    40:60:boolean is(org.bukkit.entity.Entity) -> vYtK
    66:66:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> HvVe:
    react.glang.GSet entityTypes -> vdAU
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> Jbhy
react.api.EntitySample -> kcHC:
    react.glang.GMap counts -> jFjt
    react.glang.GMap sets -> qSop
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> kbgn
    45:45:react.glang.GList getTypes() -> oMQr
    50:57:int total() -> HmeM
    62:67:int get(org.bukkit.entity.EntityType) -> fmIT
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> lmyI
    84:96:void add(org.bukkit.entity.Entity) -> Plhx
react.api.Experimental -> DjHe:
react.api.Flavor -> lDHA:
    react.api.Flavor ANY -> URab
    react.api.Flavor SAFE_MODE -> TFmY
    react.api.Flavor CRAFT_BUKKIT -> ncxr
    react.api.Flavor BUKKIT -> sshq
    react.api.Flavor SPIGOT -> VgFB
    react.api.Flavor SOGGY_SPIGOT -> afdG
    react.api.Flavor PAPER_SPIGOT -> ebNy
    react.api.Flavor TACO_SPIGOT -> xqum
    react.api.Flavor TORCH_SPIGOT -> yRun
    react.api.Flavor FORGE_HACK -> lDaA
    react.api.Flavor SPONGE_HACK -> ccwy
    react.api.Flavor[] $VALUES -> ySWG
    6:6:react.api.Flavor[] values() -> values
    6:6:react.api.Flavor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> GaqH
    74:79:boolean compatableWith(react.api.Flavor) -> fmIT
    84:84:java.lang.String fancyName() -> AyqG
    6:18:void <clinit>() -> <clinit>
react.api.IAction -> PBWE:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> kABv
    void act(react.api.IActionSource,react.api.ISelector[]) -> lmyI
    void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIT
    react.api.ActionState getState() -> FMkB
    react.api.ActionTargetType getTarget() -> ejDm
    void setNodes(java.lang.String[]) -> fmIT
    java.lang.String[] getNodes() -> yIjF
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> fmIT
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> HSoO
    react.glang.GMap getDefaultSelectors() -> kjtt
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> fmIT
    react.api.ISelector[] biselect(react.api.ISelector[]) -> fmIT
    react.api.IActionSource getCurrentSource() -> OGcB
    void completeAction() -> jFOS
react.api.IActionSource -> OigP:
    void sendResponse(java.lang.String) -> lmyI
    void sendResponseSuccess(java.lang.String) -> jEpN
    void sendResponseError(java.lang.String) -> tTOK
    void sendResponseActing(java.lang.String) -> Plhx
react.api.ICache -> pOrf:
    react.glang.GSet get(java.lang.Object) -> lmyI
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> jEpN
    void clear() -> clear
    boolean has(java.lang.Object) -> tTOK
    react.glang.GList k() -> kRCf
react.api.ICommand -> fRun:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> pYEb
    java.lang.String[] getPermissions() -> vjvg
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> vABq
    react.api.SideGate getSideGate() -> Hmdw
    void registerParameterDescription(java.lang.String,java.lang.String) -> fmIT
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
react.api.IRecord -> AqbF:
    java.lang.String getRecordType() -> KfMp
    long getRecordTime() -> CEBa
    react.json.JSONObject toJSON() -> HvVe
    java.lang.Object getRecordObject() -> kcHC
    void fromJSON(react.json.JSONObject) -> fmIT
react.api.IRecordBook -> PcyT:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> fmIT
    long getOldestRecordTime() -> DjHe
    void addRecord(react.api.IRecord) -> fmIT
    long getLatestRecordTime() -> lDHA
    int countRecords(long,long) -> fmIT
    react.glang.GMap getRecords(long,long) -> lmyI
    int purgeRecordsBefore(long) -> lmyI
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> dwcr:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> PBWE
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> OigP
    react.surge.util.C getAltColor() -> pOrf
    void setColor(react.surge.util.C,react.surge.util.C) -> fmIT
    int getInterval() -> getInterval
    void setInterval(int) -> lmyI
    void sample() -> fRun
    java.lang.String get() -> get
    void construct() -> AqbF
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> BSBa:
    react.api.SelectionMode getMode() -> PcyT
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> Plhx
    react.glang.GSet getList() -> dwcr
    react.glang.GSet getPossibilities() -> BSBa
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> vABq
    java.lang.String getName() -> getName
react.api.Injection -> pXdW:
    react.api.InjectionMethod value() -> pXdW
react.api.InjectionMethod -> CxHB:
    react.api.InjectionMethod SWAP -> GtLP
    react.api.InjectionMethod SUBSTRATE -> qSoT
    react.api.InjectionMethod RELOAD -> wxDe
    react.api.InjectionMethod[] $VALUES -> lgDM
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> Whmu:
    java.lang.String value() -> value
react.api.MSampler -> Jbha:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> CxHB
react.api.MonitorHeading -> pjFS:
    react.api.ISampler head -> YpNt
    react.glang.GList children -> oEYN
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> fmIT
    27:27:react.api.ISampler getHead() -> Whmu
    32:33:void setHead(react.api.ISampler) -> lmyI
    37:37:react.glang.GList getChildren() -> Jbha
    42:42:java.lang.String getHeadText() -> pjFS
    47:60:java.lang.String getChildText() -> WhnW
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> fmIT
react.api.NoiseGenerator -> WhnW:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> IFSg:
    react.api.NoiseGenerator[] octaves -> JdCg
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> IFSg
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> ThVT:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> clip
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> ThVT
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> HeSm:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> fmIT
react.api.Permissable -> gMiI:
    react.api.Permissable ACCESS -> KgGH
    react.api.Permissable MONITOR -> DrsD
    react.api.Permissable MONITOR_TITLE -> JdFN
    react.api.Permissable MONITOR_ACTIONLOG -> KEEq
    react.api.Permissable MONITOR_MAP -> rNfI
    react.api.Permissable MONITOR_ENVIRONMENT -> Pmfv
    react.api.Permissable MONITOR_GLASSES -> rWWP
    react.api.Permissable MONITOR_CHUNK_BLAME -> uGMv
    react.api.Permissable RAI_MONITOR -> VMVE
    react.api.Permissable RAI_CONTROL -> WGhQ
    react.api.Permissable RAI_ACCESS -> CgbP
    react.api.Permissable RAI -> GsnX
    react.api.Permissable ACT -> jhov
    react.api.Permissable RELOAD -> WikU
    java.lang.String node -> pbQh
    react.api.Permissable[] $VALUES -> PCSx
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    27:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> fmIT
    46:46:java.lang.String getNode() -> HeSm
    7:22:void <clinit>() -> <clinit>
react.api.PlayerActionSource -> lCfW:
    org.bukkit.entity.Player p -> gVvU
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> lmyI
    30:31:void sendResponseSuccess(java.lang.String) -> jEpN
    36:37:void sendResponseError(java.lang.String) -> tTOK
    42:43:void sendResponseActing(java.lang.String) -> Plhx
react.api.PluginSelfDeleter -> PJgh:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> jrBK
    java.lang.Runnable r -> iCjD
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> fmIT
react.api.RAIActionSource -> YDdH:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> lmyI
    16:17:void sendResponseSuccess(java.lang.String) -> jEpN
    22:23:void sendResponseError(java.lang.String) -> tTOK
    28:29:void sendResponseActing(java.lang.String) -> Plhx
react.api.ReactCommand -> QpQS:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> xOtp
    java.lang.String usage -> GtMj
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> HUNJ
    react.api.SideGate sideGate -> bjJG
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> vABq
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> fmIT
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> pYEb
    47:47:java.lang.String[] getPermissions() -> vjvg
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> Hmdw
react.api.ReactException -> dUcv:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> Huvr:
    react.glang.GMap keystore -> Hemy
    boolean monitoring -> monitoring
    boolean actionlogging -> JuGJ
    boolean glasses -> VUeL
    boolean mapping -> Thpe
    int monitorSelection -> wxGL
    int plays -> SfOP
    boolean monitorPosted -> nKIP
    int monitorLastSelection -> IiSH
    int switchNotification -> PKce
    int hotbarSlot -> Uksn
    boolean shift -> qCQG
    int scroll -> fvUq
    double lastHeight -> rEri
    boolean heightMovement -> fnFL
    org.bukkit.entity.Player p -> gVvU
    41:89:void <init>(org.bukkit.entity.Player) -> <init>
    95:102:void save() -> save
    108:115:void load() -> load
    119:119:boolean isMonitoring() -> gMiI
    124:124:boolean isMapping() -> lCfW
    129:129:org.bukkit.entity.Player getP() -> PJgh
    134:136:void setMonitoring(boolean) -> lmyI
    140:142:void setMapping(boolean) -> jEpN
    146:146:int getMonitorSelection() -> YDdH
    151:153:void setMonitorSelection(int) -> jEpN
    157:157:int getHotbarSlot() -> QpQS
    162:164:void setHotbarSlot(int) -> tTOK
    168:168:boolean isShifting() -> dUcv
    173:175:void setShifting(boolean) -> tTOK
    179:179:boolean isShift() -> Huvr
    184:186:void setShift(boolean) -> Plhx
    190:190:int getScroll() -> Fops
    195:197:void setScroll(int) -> Plhx
    201:201:int getMonitorLastSelection() -> jNfA
    206:208:void setMonitorLastSelection(int) -> vABq
    212:213:void setP(org.bukkit.entity.Player) -> lmyI
    217:217:double getLastHeight() -> UYym
    222:224:void setLastHeight(double) -> fmIT
    228:228:boolean isHeightMovement() -> XRba
    233:235:void setHeightMovement(boolean) -> vABq
    239:239:int getSwitchNotification() -> ePWk
    244:246:void setSwitchNotification(int) -> vYtK
    250:250:boolean getMonitorPosted() -> kbiT
    255:257:void setMonitorPosted(boolean) -> vYtK
    261:261:int getPlays() -> UsmH
    266:268:void setPlays(int) -> vtFh
    272:272:boolean isGlasses() -> QMmf
    277:279:void setGlasses(boolean) -> vtFh
    283:283:boolean isActionlogging() -> miPT
    288:290:void setActionlogging(boolean) -> kABv
    24:39:void <clinit>() -> <clinit>
react.api.Record -> Fops:
    java.lang.String recordType -> NhAa
    long recordTime -> qCSu
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> KfMp
    32:32:long getRecordTime() -> CEBa
    38:38:java.lang.Object getRecordObject() -> kcHC
    react.json.JSONObject toJSON() -> HvVe
    void fromJSON(react.json.JSONObject) -> fmIT
react.api.RecordBook -> jNfA:
    java.io.File recordFile -> Euyi
    react.json.JSONObject js -> bHJM
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> fmIT
    79:87:react.api.IRecord getRecord(long) -> fmIT
    react.api.IRecord createDummyRecord(long,java.lang.String) -> fmIT
    95:107:long getOldestRecordTime() -> DjHe
    113:125:long getLatestRecordTime() -> lDHA
    130:130:boolean within(long,long,long) -> fmIT
    136:144:int countRecords(long,long) -> fmIT
    150:162:react.glang.GMap getRecords(long,long) -> lmyI
    168:181:int purgeRecordsBefore(long) -> lmyI
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> UYym:
react.api.SampledChunk -> XRba:
    org.bukkit.Chunk c -> OauC
    react.glang.GMap counts -> jFjt
    12:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> roms
    26:38:void hit(react.api.ChunkIssue,int) -> fmIT
    42:42:org.bukkit.Chunk getC() -> LaCK
    47:47:react.glang.GMap getCounts() -> PJjo
react.api.SampledType -> ePWk:
    react.api.SampledType ENTITY_TIME_LOCK -> TObI
    react.api.SampledType TILE_TIME_LOCK -> mXjS
    react.api.SampledType ENTITY_TIME -> WHKI
    react.api.SampledType TILE_TIME -> opRd
    react.api.SampledType ENTITY_DROPTICK -> WjMa
    react.api.SampledType TILE_DROPTICK -> jWqb
    react.api.SampledType REDSTONE_TICK_USAGE -> rVxN
    react.api.SampledType REDSTONE_TICK -> NVan
    react.api.SampledType REDSTONE_SECOND -> HwTX
    react.api.SampledType REDSTONE_TIME -> KMXg
    react.api.SampledType HOPPER_TICK_USAGE -> bXjl
    react.api.SampledType HOPPER_TICK -> YWBc
    react.api.SampledType HOPPER_SECOND -> psTs
    react.api.SampledType HOPPER_TIME -> mPXy
    react.api.SampledType FLUID_TICK_USAGE -> rFVe
    react.api.SampledType FLUID_TICK -> mXjD
    react.api.SampledType FLUID_SECOND -> fBsl
    react.api.SampledType FLUID_TIME -> uFng
    react.api.SampledType TPS -> qmgA
    react.api.SampledType TICK -> GQkc
    react.api.SampledType TIU -> NpSR
    react.api.SampledType MEM -> EKfE
    react.api.SampledType FREEMEM -> xGfi
    react.api.SampledType MAXMEM -> tTmI
    react.api.SampledType ALLOCMEM -> DIDI
    react.api.SampledType MAHS -> ObUQ
    react.api.SampledType CHK_TIME -> Orua
    react.api.SampledType EXPLOSION_TIME -> kIqm
    react.api.SampledType CHK -> SepI
    react.api.SampledType ATASK -> aEFC
    react.api.SampledType STASK -> kBAm
    react.api.SampledType CHKS -> TPAv
    react.api.SampledType ENT -> htMg
    react.api.SampledType ENTLIV -> afgw
    react.api.SampledType ENTDROP -> BJnF
    react.api.SampledType ENTTILE -> qmjB
    java.lang.String node -> pbQh
    react.api.SampledType[] $VALUES -> VDhe
    6:6:react.api.SampledType[] values() -> values
    6:6:react.api.SampledType valueOf(java.lang.String) -> valueOf
    49:49:react.api.ISampler get() -> rDyv
    55:55:java.lang.String toString() -> toString
    59:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> HeSm
    6:43:void <clinit>() -> <clinit>
react.api.Sampler -> kbiT:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> Ukxp
    react.surge.util.C altColor -> nJnF
    int interval -> PBvq
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> OigP
    49:49:react.surge.util.C getAltColor() -> pOrf
    55:55:int getInterval() -> getInterval
    void sample() -> fRun
    void construct() -> AqbF
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> fmIT
    107:108:void setInterval(int) -> lmyI
react.api.Sector -> UsmH:
    int value() -> value
react.api.SelectionException -> QMmf:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> miPT:
    react.api.SelectionMode WHITELIST -> xXki
    react.api.SelectionMode BLACKLIST -> IPFJ
    react.api.SelectionMode[] $VALUES -> IqhH
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> roms:
    java.lang.Class objectType -> NMrb
    react.api.SelectionMode mode -> qBuc
    react.glang.GSet list -> vthe
    react.glang.GSet possibilities -> hRNa
    int popoff -> BmRx
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> PcyT
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> Plhx
    43:43:react.glang.GSet getList() -> dwcr
    49:49:react.glang.GSet getPossibilities() -> BSBa
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> vABq
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> vYtK
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> LaCK:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> jEpN
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> vABq
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> vtFh
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> PJjo:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> rDyv:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> lmyI
    29:30:void add(org.bukkit.Chunk,int) -> fmIT
    34:38:void add(org.bukkit.World) -> vABq
    42:46:void addAll() -> YLtV
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> vABq
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> vtFh
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> YLtV:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> vABq
    87:87:java.lang.String getName() -> getName
react.api.Side -> HvXi:
    react.api.Side PLAYERS -> RbpH
    react.api.Side CONSOLE -> HetC
    java.lang.String ss -> Pmke
    react.api.Side[] $VALUES -> XmRy
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> HvXi
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> lmyI
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> pigx:
    react.api.SideGate PLAYERS_ONLY -> CFCJ
    react.api.SideGate CONSOLES_ONLY -> WsBD
    react.api.SideGate ANYTHING -> gpmL
    react.api.SideGate[] $VALUES -> AGkl
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> fmIT
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> pigx$1:
    int[] $SwitchMap$react$api$SideGate -> KDii
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> CVEs:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> awlg
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> pigx
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> yIoF:
    double wScale -> USFn
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> fmIT
react.api.SpecializedTickLimiter -> XlTI:
    double rMaxTime -> qKfB
    long rStartTime -> klWf
    double rLastTime -> pQTI
    long rMark -> WXlV
    double tMaxTime -> bilr
    react.gmath.Average atimes -> lUgo
    react.gmath.Average adropped -> RQlo
    int droppedTicks -> rEvt
    boolean entityTick -> LGju
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> Huuh:
    react.glang.GList sources -> QqNN
    react.glang.GList splooge -> YgcW
    react.glang.GSet destroy -> rVyR
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> fmIT
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> lmyI
    void clipped(org.bukkit.Location) -> fmIT
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> lmyI
    boolean isAllowedSource(org.bukkit.Location) -> jEpN
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> fmIT
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> lmyI
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> jEpN
react.api.SploogeCounter$1 -> Huuh$1:
    java.util.Iterator val$it -> dosO
    org.bukkit.Location val$start -> ArbF
    int val$maxDistance -> ohCe
    react.api.SploogeCounter this$0 -> HvtX
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> Huuh$1$1:
    react.api.SploogeCounter$1 this$1 -> ebVX
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> Hdsx:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> RrrV:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> HvVe
    38:49:void fromJSON(react.json.JSONObject) -> fmIT
react.api.StackTraceRecordBook -> jxwc:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> lmyI
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> fmIT
react.api.StackedEntity -> TEsn:
    org.bukkit.entity.LivingEntity entity -> tUNt
    int count -> count
    double rmx -> GlBM
    21:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> fmIT
    46:46:int getAbsoluteMaxCount() -> CVEs
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> lmyI
    56:58:void update() -> update
    62:68:void signalSize() -> yIoF
    72:123:void updateHealth() -> XlTI
    127:128:void heal(double) -> lmyI
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> Huuh
    142:142:int getEffectiveCount(double) -> jEpN
    147:147:double getEffectiveMaxHealth(int) -> kABv
    152:152:double getRealMaxHealth() -> Hdsx
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> fmIT
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> MteM:
    react.glang.GList headings -> XKNp
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> fmIT
    24:24:int getMaxSelection() -> RrrV
    29:37:int left(int) -> FMkB
    42:50:int right(int) -> ejDm
    55:55:react.api.MonitorHeading getHeadFor(int) -> HSoO
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> fmIT
    83:100:java.lang.String getHotbarFor(int,boolean) -> fmIT
react.api.Unused -> YVFB:
react.binject.BlockInjector -> vjwi:
    react.surge.util.Protocol protocol -> dgbr
    java.lang.Class blocksClass -> ioCL
    13:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> fmIT
    29:56:void inject() -> jxwc
    61:61:react.surge.util.Protocol getVersion() -> OaWk
react.binject.IBlockInjector -> qlit:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> fmIT
    void add(int,java.lang.String,java.lang.Object) -> fmIT
    java.lang.Object get(java.lang.String) -> get
    void inject() -> jxwc
    react.surge.util.Protocol getVersion() -> OaWk
react.binject.InjectedBlock -> hsRK:
    react.surge.util.Protocol getInjectProtocol() -> TEsn
    java.lang.String getInjectKey() -> MteM
    java.lang.String getInjectCKey() -> YVFB
    int getInjectId() -> vjwi
react.binject.ReflectionUtil -> YUdg:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> fmIT
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> fmIT
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> fmIT
    41:54:void setAccessible(java.lang.reflect.Field) -> fmIT
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> fmIT
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> fmIT
react.binject.V10.BlockInjector10 -> nlQw:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> vYtK
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> fmIT
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> fmIT
react.binject.V11.BlockInjector11 -> HTTc:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> vtFh
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> fmIT
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> fmIT
react.binject.V12.BlockInjector12 -> dxGg:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> kABv
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> fmIT
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> fmIT
react.binject.V8.BlockInjector8 -> hkAj:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> FMkB
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> fmIT
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> fmIT
react.binject.V9.BlockInjector9 -> avnL:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> ejDm
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> fmIT
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> fmIT
react.cache.CachedEntity -> rDyR:
    java.util.UUID uid -> dgcQ
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> cvEa
    double x -> x
    double y -> y
    double z -> z
    double vx -> DIHf
    double vy -> eHem
    double vz -> kRgw
    double dx -> iCpl
    double dy -> DkLT
    double dz -> cdcC
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> vtFh
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> qlit
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> hsRK
    120:121:void setVx(double) -> tTOK
    125:125:double getVy() -> YUdg
    130:131:void setVy(double) -> Plhx
    135:135:double getVz() -> nlQw
    140:141:void setVz(double) -> vABq
    145:145:double getDx() -> HTTc
    150:151:void setDx(double) -> vYtK
    155:155:double getDy() -> dxGg
    160:161:void setDy(double) -> vtFh
    165:165:double getDz() -> hkAj
    170:171:void setDz(double) -> kABv
    175:175:java.util.UUID getUid() -> avnL
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> FNNd:
    int age -> UBIS
    boolean ageLock -> cltI
    boolean breed -> FNnV
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> vtFh
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> rDyR
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> FNNd
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> GYdS:
    org.bukkit.DyeColor dye -> XSbb
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> vtFh
    30:30:org.bukkit.DyeColor getDye() -> GYdS
    35:36:void setDye(org.bukkit.DyeColor) -> fmIT
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> bWpg:
    react.glang.GList potionEffects -> TrKA
    boolean canPickupItems -> tfTD
    org.bukkit.inventory.ItemStack[] armorContents -> wxNO
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> DYii
    double maxHealth -> maxHealth
    int maxAir -> iURo
    int air -> jFsa
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> vtFh
    63:63:react.glang.GList getPotionEffects() -> bWpg
    68:69:void setPotionEffects(react.glang.GList) -> lmyI
    73:73:boolean isCanPickupItems() -> FpSi
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> VoAt
    138:139:void setMaxAir(int) -> kjtt
    143:143:int getAir() -> LPBe
    148:149:void setAir(int) -> jFOS
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> FpSi:
    boolean sheared -> vJVj
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> vtFh
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> VoAt:
    org.bukkit.inventory.ItemStack is -> ioEn
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> vtFh
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> LPBe:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> NfiR:
    react.chronophysics.HopperDirection DOWN -> KgPQ
    react.chronophysics.HopperDirection NORTH -> TiXI
    react.chronophysics.HopperDirection SOUTH -> OaxJ
    react.chronophysics.HopperDirection EAST -> clrV
    react.chronophysics.HopperDirection WEST -> FppH
    int direction -> direction
    react.chronophysics.HopperDirection[] $VALUES -> erxT
    6:6:react.chronophysics.HopperDirection[] values() -> values
    6:6:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> tTOK
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> fmIT
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> lmyI
    6:12:void <clinit>() -> <clinit>
react.chronophysics.HopperDirection$1 -> NfiR$1:
    int[] $SwitchMap$react$chronophysics$HopperDirection -> tTpa
    23:23:void <clinit>() -> <clinit>
react.chronophysics.HopperWormhole -> yRbf:
    org.bukkit.block.Hopper source -> AXqK
    react.glang.GList path -> HoFp
    org.bukkit.block.Hopper destination -> tvru
    18:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> NfiR
    31:31:react.glang.GList getPath() -> yRbf
    36:36:org.bukkit.block.Hopper getDestination() -> WFon
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> fmIT
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> WFon:
    org.bukkit.block.Hopper h -> gpnJ
    14:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> fmIT
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> LXRk
    62:62:boolean isLockedByRedstone() -> uxyq
react.command.CommandAct -> LXRk:
    41:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> fmIT
    186:192:react.text.RTX getBeginningRTX() -> Hmhq
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> fmIT
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> lmyI
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> jEpN
    331:346:react.glang.GList getSortedCommands() -> AqeG
    351:358:int getPageSize(int) -> OGcB
    363:363:boolean isValidPage(int,int) -> fmIT
    368:377:react.glang.GList getPage(int,int) -> lmyI
react.command.CommandActionLog -> uxyq:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
react.command.CommandCPUScore -> Hmhq:
    16:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
react.command.CommandCapabilities -> AqeG:
    19:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
react.command.CommandChunkBlame -> mhqs:
    24:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
react.command.CommandChunkBlame$1 -> mhqs$1:
    org.bukkit.command.CommandSender val$sender -> wMXc
    react.command.CommandChunkBlame this$0 -> gpmk
    37:37:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> mhqs$1$1:
    java.lang.String val$i -> dgdy
    react.glang.GMap val$top -> TOei
    int val$totalx -> MddL
    react.command.CommandChunkBlame$1 this$1 -> tngB
    66:66:void <init>(react.command.CommandChunkBlame$1,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> CVHe:
    17:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
react.command.CommandHelp -> offo:
    28:36:void <init>() -> <init>
    41:42:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
    46:65:void sendPage(org.bukkit.command.CommandSender,int,int) -> fmIT
    69:75:react.text.RTX getBeginningRTX() -> Hmhq
    80:140:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> fmIT
    144:154:void sendHeader(org.bukkit.command.CommandSender,int,int) -> lmyI
    158:187:void sendFooter(org.bukkit.command.CommandSender,int,int) -> jEpN
    191:198:react.glang.GList getSortedCommands() -> AqeG
    203:210:int getPageSize(int) -> OGcB
    215:215:boolean isValidPage(int,int) -> fmIT
    220:229:react.glang.GList getPage(int,int) -> lmyI
react.command.CommandMap -> xGOB:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
react.command.CommandMonitor -> vslO:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
react.command.CommandReload -> ckvE:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
react.command.CommandReload$1 -> ckvE$1:
    org.bukkit.command.CommandSender val$sender -> wMXc
    react.command.CommandReload this$0 -> FqSl
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> ckvE$1$1:
    react.command.CommandReload$1 this$1 -> GRSs
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> BIro:
    28:35:void <init>() -> <init>
    40:48:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
    52:61:org.bukkit.inventory.ItemStack makeBook() -> mhqs
    66:92:void addSpikePages(react.glang.GList) -> jEpN
    96:106:void addStatusPages(react.glang.GList) -> tTOK
    110:127:int findSlot(org.bukkit.entity.Player) -> jEpN
react.command.CommandVersion -> ooYH:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIT
react.controller.ActionController -> ryCE:
    int kiv -> SoIW
    react.glang.GMap actions -> dhJE
    react.glang.GMap pending -> nJqX
    react.glang.GList tasks -> SoIc
    18:18:void <init>() -> <init>
    29:70:void start() -> start
    74:75:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> fmIT
    79:100:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> lmyI
    105:105:react.api.IAction getAction(react.api.ActionType) -> fmIT
    110:111:void registerAction(react.api.IAction) -> fmIT
    117:117:void stop() -> stop
    122:187:void tick() -> tick
    191:191:react.glang.GList getActions() -> CVHe
    196:203:react.glang.GList getActionNames() -> offo
    20:20:void <clinit>() -> <clinit>
react.controller.BenchmarkController -> vbkI:
    react.api.CPUBenchmark finished -> QNod
    boolean done -> jaIX
    int score -> XBSe
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    13:13:react.api.CPUBenchmark access$002(react.controller.BenchmarkController,react.api.CPUBenchmark) -> fmIT
    13:13:boolean access$102(react.controller.BenchmarkController,boolean) -> fmIT
    13:13:react.api.CPUBenchmark access$000(react.controller.BenchmarkController) -> fmIT
react.controller.BenchmarkController$1 -> vbkI$1:
    react.controller.BenchmarkController this$0 -> HfXs
    27:27:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
react.controller.BenchmarkController$1$1 -> vbkI$1$1:
    react.controller.BenchmarkController$1 this$1 -> WjSH
    32:32:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
react.controller.BenchmarkController$1$1$1 -> vbkI$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> Vwox
    37:37:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> MdHK:
    react.glang.GMap rangeMapping -> pQXM
    react.binject.IBlockInjector injector -> AQDQ
    boolean injected -> test
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> xGOB
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> vslO
    115:115:react.binject.IBlockInjector getInjector() -> ckvE
    120:120:boolean isInjected() -> BIro
react.controller.ChronophyFluidController -> GsXH:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> nIqI:
    boolean firstTickList -> RcSd
    long firstTick -> vcin
    long lastTick -> ohHK
    react.gmath.Average aCSMS -> LsDk
    react.glang.GMap pluginLoads -> LjTD
    react.glang.GMap playerLoads -> tDSA
    int serverLoads -> cCBG
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> ooYH
    63:73:void tickNextTickList() -> ryCE
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> fmIT
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> fmIT
    171:171:boolean isFirstTickList() -> vbkI
    176:176:long getFirstTick() -> MdHK
    181:181:long getLastTick() -> GsXH
    186:186:react.gmath.Average getaCSMS() -> nIqI
    191:191:react.glang.GMap getPluginLoads() -> oEEA
    196:196:react.glang.GMap getPlayerLoads() -> Venh
    201:201:int getServerLoads() -> NgHv
    21:21:react.glang.GMap access$000(react.controller.ChunkController) -> fmIT
    21:21:int access$108(react.controller.ChunkController) -> lmyI
    21:21:react.glang.GMap access$200(react.controller.ChunkController) -> jEpN
react.controller.ChunkController$1 -> nIqI$1:
    org.bukkit.event.world.ChunkLoadEvent val$e -> hQpc
    react.controller.ChunkController this$0 -> gNnD
    131:131:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> jEpN
    131:131:void run(java.lang.Object) -> fmIT
react.controller.CommandController -> oEEA:
    react.glang.GList commands -> Mufg
    boolean k -> hssf
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> kABv
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> FMkB
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> fmIT
    317:317:react.glang.GList getCommands() -> EKLi
    322:323:void setCommands(react.glang.GList) -> Plhx
    327:327:boolean isK() -> DGiJ
    332:333:void setK(boolean) -> FMkB
react.controller.EntityCullController -> Venh:
    react.glang.GSet flags -> LjSi
    react.glang.GSet defer -> twUx
    react.glang.GMap maxs -> Xltx
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> kIXo
    172:180:int cull(org.bukkit.Chunk) -> jEpN
    185:285:int partialCull(org.bukkit.Chunk) -> tTOK
react.controller.EntityStackController -> NgHv:
    react.glang.GList stacks -> slBo
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> vABq
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> jEpN
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> tTOK
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> fmIT
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> fmIT
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> Plhx
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> fmIT
react.controller.EntityStackController$1 -> NgHv$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> stSW
    react.controller.EntityStackController this$0 -> opXE
    249:249:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> EKLi:
    react.glang.GMap slots -> DjmA
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> fmIT
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> fmIT
react.controller.ExplosiveController -> DGiJ:
    boolean firstTickList -> RcSd
    long firstTick -> vcin
    long lastTick -> ohHK
    react.gmath.Average aCSMS -> LsDk
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> ooYH
    50:60:void tickNextTickList() -> ryCE
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> fmIT
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> fmIT
    89:89:boolean isFirstTickList() -> vbkI
    94:94:long getFirstTick() -> MdHK
    99:99:long getLastTick() -> GsXH
    104:104:react.gmath.Average getaCSMS() -> nIqI
react.controller.FastDecayController -> kIXo:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> fmIT
    47:123:void checkBreak(org.bukkit.block.Block) -> jEpN
    127:135:void decay(org.bukkit.block.Block) -> tTOK
    141:141:void tick() -> tick
react.controller.FastDecayController$1 -> kIXo$1:
    react.glang.GMap val$locs -> tMCY
    react.controller.FastDecayController this$0 -> JSLa
    57:57:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    61:61:boolean isAllowedSplooge(org.bukkit.Location) -> lmyI
    67:67:boolean isAllowedSource(org.bukkit.Location) -> jEpN
    73:92:void clipped(org.bukkit.Location) -> fmIT
    97:120:void finished() -> finished
react.controller.FastDecayController$1$1 -> kIXo$1$1:
    int val$i -> ejjX
    react.controller.FastDecayController$1 this$1 -> KxSE
    102:102:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,int) -> <init>
    106:116:void run() -> run
react.controller.FastDecayController$2 -> kIXo$2:
    org.bukkit.block.Block val$b -> jFtd
    react.controller.FastDecayController this$0 -> JSLa
    128:128:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    132:133:void run() -> run
react.controller.FeatureController -> RQRb:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.FluidController -> pYIX:
    react.glang.GSet ignore -> VDks
    int flowsPerTick -> hQot
    int flowsPerSecond -> iTrv
    react.gmath.Average aFST -> TGYl
    react.gmath.Average aFSS -> bacp
    react.gmath.Average aFSMS -> GsxR
    boolean firstTickList -> RcSd
    long firstTick -> vcin
    long lastTick -> ohHK
    react.glang.GSet frozen -> pYjr
    react.glang.GMap queue -> WsGL
    react.glang.GMap freezeTimes -> tfYC
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> Plhx
    68:76:void checkChunks() -> RQRb
    80:97:void checkChunk(org.bukkit.Chunk) -> vABq
    101:107:void queue(org.bukkit.block.Block) -> Plhx
    111:111:boolean isFrozen(org.bukkit.Chunk) -> vYtK
    116:117:void freeze(org.bukkit.Chunk) -> vtFh
    121:127:void unfreeze(org.bukkit.Chunk) -> kABv
    131:138:void freeze(org.bukkit.Chunk,long) -> fmIT
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> ooYH
    172:182:void tickNextTickList() -> ryCE
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> fmIT
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> fmIT
    248:248:react.glang.GSet getIgnore() -> pYIX
    253:253:int getTransfersPerTick() -> ryAs
    258:258:int getTransfersPerSecond() -> TOHX
    263:263:react.gmath.Average getaFST() -> oLru
    268:268:react.gmath.Average getaFSS() -> NVGp
    273:273:react.gmath.Average getaFSMS() -> pihq
    278:278:boolean isFirstTickList() -> vbkI
    283:283:long getFirstTick() -> MdHK
    288:288:long getLastTick() -> GsXH
    293:293:react.glang.GSet getFrozen() -> EvAg
    298:298:react.glang.GMap getQueue() -> lTlO
    303:303:react.glang.GMap getFreezeTimes() -> pXhM
react.controller.GlassController -> ryAs:
    react.glang.GMap q -> axTC
    react.glang.GList g -> WiuE
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> tTOK
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> Plhx
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> vABq
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> fmIT
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> fmIT
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> fmIT
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> fmIT
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> fmIT
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> fmIT
    33:33:react.glang.GList access$000(react.controller.GlassController) -> fmIT
react.controller.GlassController$1 -> ryAs$1:
    react.glang.GMap val$cc -> qLNL
    react.controller.GlassController this$0 -> JBMg
    85:85:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> ryAs$1$1:
    org.bukkit.Location val$i -> JcpI
    org.bukkit.entity.Player val$j -> WXsl
    react.controller.GlassController$1 this$1 -> lEMu
    107:107:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> TOHX:
    react.glang.GMap g -> agRj
    react.glang.GMap gr -> LPdW
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> fmIT
    121:156:void toggleMapping(org.bukkit.entity.Player) -> vYtK
    160:160:react.glang.GMap getG() -> lULl
    165:165:react.glang.GMap getGr() -> VDMR
    28:28:react.glang.GMap access$000(react.controller.GraphController) -> fmIT
    28:28:react.glang.GMap access$100(react.controller.GraphController) -> lmyI
react.controller.GraphController$1 -> TOHX$1:
    react.controller.GraphController this$0 -> KodV
    49:49:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> TOHX$2:
    react.controller.GraphController this$0 -> KodV
    85:85:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> TOHX$3:
    org.bukkit.event.player.PlayerJoinEvent val$e -> NFJD
    react.controller.GraphController this$0 -> KodV
    101:101:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> oLru:
    react.glang.GSet ignore -> VDks
    int transfersPerTick -> WXtC
    int transfersPerSecond -> mGqB
    react.gmath.Average aHST -> fmpR
    react.gmath.Average aHSS -> RJFK
    react.gmath.Average aHSMS -> cCDv
    boolean firstTickList -> RcSd
    long firstTick -> vcin
    long lastTick -> ohHK
    react.glang.GSet frozen -> pYjr
    react.glang.GMap queue -> WsGL
    react.glang.GMap freezeTimes -> tfYC
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> Plhx
    65:73:void checkChunks() -> RQRb
    77:94:void checkChunk(org.bukkit.Chunk) -> vABq
    98:104:void queue(org.bukkit.block.Block) -> Plhx
    108:108:boolean isFrozen(org.bukkit.Chunk) -> vYtK
    113:114:void freeze(org.bukkit.Chunk) -> vtFh
    118:124:void unfreeze(org.bukkit.Chunk) -> kABv
    128:135:void freeze(org.bukkit.Chunk,long) -> fmIT
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> ooYH
    169:179:void tickNextTickList() -> ryCE
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> fmIT
    207:207:react.glang.GSet getIgnore() -> pYIX
    212:212:int getTransfersPerTick() -> ryAs
    217:217:int getTransfersPerSecond() -> TOHX
    222:222:react.gmath.Average getaHST() -> BuIX
    227:227:react.gmath.Average getaHSS() -> GsWJ
    232:232:react.gmath.Average getaHSMS() -> Lhrp
    237:237:boolean isFirstTickList() -> vbkI
    242:242:long getFirstTick() -> MdHK
    247:247:long getLastTick() -> GsXH
    252:252:react.glang.GSet getFrozen() -> EvAg
    257:257:react.glang.GMap getQueue() -> lTlO
    262:262:react.glang.GMap getFreezeTimes() -> pXhM
react.controller.HopperOvertickController -> NVGp:
    react.glang.GList possiblePlunge -> PfAP
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> jEpN
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> fmIT
react.controller.LanguageController -> pihq:
    java.io.File languageFolder -> IrNG
    int oldVersion -> IaLT
    java.io.File dlf -> XlwM
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> QpSM
    160:221:void downloadAll(boolean) -> ejDm
    225:261:void downloadLanguage(java.lang.String) -> HSoO
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> kjtt
    315:315:java.io.File getFileForLanguage(java.lang.String) -> jFOS
    320:332:void writeDefaults() -> JlAa
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    31:31:int access$002(react.controller.LanguageController,int) -> fmIT
    31:31:void access$100(react.controller.LanguageController) -> fmIT
react.controller.LanguageController$1 -> pihq$1:
    react.controller.LanguageController this$0 -> RJCm
    67:67:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> pihq$2:
    react.controller.LanguageController this$0 -> RJCm
    81:81:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
react.controller.LanguageController$2$1 -> pihq$2$1:
    react.controller.LanguageController$2 this$1 -> wEMQ
    104:104:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> fmIT
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> fmIT
    121:121:void onDownloadStarted(react.gnet.download.Download) -> fmIT
    126:128:void onDownloadFinished(react.gnet.download.Download) -> lmyI
    134:134:void onDownloadFailed(react.gnet.download.Download) -> jEpN
react.controller.LanguageController$3 -> pihq$3:
    react.controller.LanguageController this$0 -> RJCm
    194:194:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> pihq$3$1:
    react.controller.LanguageController$3 this$1 -> YVhW
    199:199:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> pihq$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> jGXR
    207:207:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> pihq$4:
    java.io.File val$dld -> KfrB
    react.controller.LanguageController this$0 -> RJCm
    228:228:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> fmIT
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> fmIT
    245:245:void onDownloadStarted(react.gnet.download.Download) -> fmIT
    250:251:void onDownloadFinished(react.gnet.download.Download) -> lmyI
    257:257:void onDownloadFailed(react.gnet.download.Download) -> jEpN
react.controller.MonitorController -> EvAg:
    int maxCooldown -> GkgO
    react.api.TitleMonitor titleMonitor -> vAiY
    react.glang.GMap posts -> bPak
    react.slate.PhantomSlate sb -> uGVs
    boolean ready -> tfVn
    43:47:void <init>() -> <init>
    52:87:void start() -> start
    91:91:react.slate.PhantomSlate constructActionLogBoard() -> ktOv
    96:114:void toggleActionLog(org.bukkit.entity.Player) -> vtFh
    118:136:void toggleMonitoring(org.bukkit.entity.Player) -> kABv
    141:151:void stop() -> stop
    155:174:void constructMonitor() -> xWrH
    178:183:float calcVolume(react.api.ReactPlayer) -> fmIT
    188:188:boolean canMonitor(org.bukkit.entity.Player) -> FMkB
    193:193:boolean canActionLog(org.bukkit.entity.Player) -> ejDm
    198:203:boolean isMonitoring(org.bukkit.entity.Player) -> HSoO
    208:213:boolean isActionLogging(org.bukkit.entity.Player) -> kjtt
    218:222:void startMonitoring(org.bukkit.entity.Player) -> jFOS
    226:237:void stopMonitoring(org.bukkit.entity.Player) -> OGcB
    241:246:void startActionLogging(org.bukkit.entity.Player) -> yIjF
    250:261:void stopActionLogging(org.bukkit.entity.Player) -> tBjk
    267:267:void tick() -> tick
    271:274:void changePost(react.api.ReactPlayer) -> lmyI
    278:290:void processPlayer(react.api.ReactPlayer) -> jEpN
    295:295:void handleActionLog(org.bukkit.entity.Player) -> TxuD
    299:323:void handleTriggers(react.api.ReactPlayer) -> tTOK
    327:366:void handleScrolling(react.api.ReactPlayer) -> Plhx
    370:398:void handleShifting(react.api.ReactPlayer) -> vABq
    402:424:void handlePosting(react.api.ReactPlayer) -> vYtK
    428:446:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> fmIT
    451:465:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> fmIT
    470:477:void tickMonitor(react.api.ReactPlayer) -> vtFh
    481:481:react.api.TitleMonitor getTitleMonitor() -> NxND
    487:496:void on(org.bukkit.event.player.PlayerJoinEvent) -> fmIT
    501:510:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> fmIT
    515:527:void onTick() -> gxeL
    531:553:void updateActionBoard() -> GrxW
    558:558:java.lang.String getTickName() -> GPuT
    34:34:react.slate.PhantomSlate access$002(react.controller.MonitorController,react.slate.PhantomSlate) -> fmIT
    34:34:react.slate.PhantomSlate access$100(react.controller.MonitorController) -> fmIT
    34:34:boolean access$202(react.controller.MonitorController,boolean) -> fmIT
    34:34:boolean access$200(react.controller.MonitorController) -> lmyI
    34:34:react.slate.PhantomSlate access$000(react.controller.MonitorController) -> jEpN
    36:36:void <clinit>() -> <clinit>
react.controller.MonitorController$1 -> EvAg$1:
    react.controller.MonitorController this$0 -> cdev
    68:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    72:85:void run() -> run
react.controller.MonitorController$2 -> EvAg$2:
    react.controller.MonitorController this$0 -> cdev
    532:532:void <init>(react.controller.MonitorController) -> <init>
    536:551:void run() -> run
react.controller.PhysicsController -> lTlO:
    react.glang.GMap samples -> VEOT
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> FMkB
    51:52:void onHopper(org.bukkit.Chunk) -> ejDm
    56:57:void onFluid(org.bukkit.Chunk) -> HSoO
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> fmIT
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> fmIT
    80:91:void onTick() -> gxeL
    96:96:java.lang.String getTickName() -> GPuT
    101:101:react.glang.GMap getSamples() -> HCWg
react.controller.PlayerController -> pXhM:
    react.glang.GList players -> QhdF
    react.glang.GSet save -> URnx
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> kRCf
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> fmIT
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> mOYF
    113:113:react.glang.GList getPlayers() -> rMpT
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> fmIT
react.controller.PlayerController$1 -> pXhM$1:
    react.glang.GList val$toSave -> kBNG
    react.controller.PlayerController this$0 -> tUXn
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> lULl:
    react.rai.IRAI rai -> dglV
    boolean raiEnabled -> TOks
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    18:18:react.rai.IRAI access$000(react.controller.RAIController) -> fmIT
react.controller.RAIController$1 -> lULl$1:
    react.controller.RAIController this$0 -> AbHa
    49:49:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> VDMR:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> jEpN
react.controller.ReactServerInfo -> BuIX:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> WObm
    27:27:int dgetGameProtocol() -> lfRV
    33:33:java.lang.String dgetGameVersion() -> Cfkt
    39:39:java.lang.String dgetReactVersion() -> Kncn
    45:45:int dgetMaxPlayers() -> FFCQ
    51:58:react.glang.GList dgetConnectedPlayers() -> Lhum
    64:64:int dgetViewDistance() -> XuJf
    70:70:int dgetGamePort() -> NMYo
    76:76:java.lang.String dgetGameAddress() -> AOcd
    82:89:react.glang.GList dgetRemotePlugins() -> TqOG
    95:102:react.glang.GList dgetWorlds() -> vQkR
    108:108:react.glang.GList dgetActions() -> CxOR
    114:114:react.glang.GList dgetSamplers() -> RbXD
react.controller.RedstoneController -> GsWJ:
    react.glang.GSet ignore -> VDks
    react.glang.GSet frozen -> pYjr
    react.glang.GMap queue -> WsGL
    react.glang.GMap freezeTimes -> tfYC
    int redstonePerTick -> aEPw
    int redstonePerSecond -> tLhO
    react.gmath.Average aRST -> pjoS
    react.gmath.Average aRSS -> cCFj
    react.gmath.Average aRSMS -> JAne
    boolean firstTickList -> RcSd
    long firstTick -> vcin
    long lastTick -> ohHK
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> Plhx
    95:101:void tick() -> tick
    105:113:void checkChunks() -> RQRb
    117:134:void checkChunk(org.bukkit.Chunk) -> vABq
    138:144:void queue(org.bukkit.block.Block) -> Plhx
    148:148:boolean isFrozen(org.bukkit.Chunk) -> vYtK
    153:154:void freeze(org.bukkit.Chunk) -> vtFh
    158:165:void flushTickList() -> ooYH
    169:179:void tickNextTickList() -> ryCE
    183:189:void unfreeze(org.bukkit.Chunk) -> kABv
    193:200:void freeze(org.bukkit.Chunk,long) -> fmIT
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> fmIT
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> fmIT
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> fmIT
    246:246:react.glang.GSet getIgnore() -> pYIX
    251:251:react.glang.GSet getFrozen() -> EvAg
    256:256:react.glang.GMap getQueue() -> lTlO
    261:261:react.glang.GMap getFreezeTimes() -> pXhM
    266:266:int getRedstonePerTick() -> XBFN
    271:271:int getRedstonePerSecond() -> BJVQ
    276:276:react.gmath.Average getaRST() -> EeCa
    281:281:react.gmath.Average getaRSS() -> baEW
    286:286:react.gmath.Average getaRSMS() -> xrEC
    291:291:boolean isFirstTickList() -> vbkI
    296:296:long getFirstTick() -> MdHK
    301:301:long getLastTick() -> GsXH
react.controller.RemoteController -> Lhrp:
    react.remote.server.RemoteServer remoteServer -> cTGv
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> jEvm
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    12:12:void access$000(react.controller.RemoteController) -> fmIT
react.controller.RemoteController$1 -> Lhrp$1:
    react.controller.RemoteController this$0 -> kAlt
    20:20:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> Lhrp$2:
    react.controller.RemoteController this$0 -> kAlt
    37:37:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> ieXS
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> FhEI
react.controller.SampleController -> QpSM:
    react.glang.GMap samplers -> ydhE
    react.surge.server.SuperSampler ss -> toKT
    int cd -> ohKy
    29:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> dDfL
    69:74:void restartSuperSampler() -> aCmP
    78:79:void registerSampler(react.api.ISampler) -> jEpN
    83:83:react.api.ISampler getSampler(java.lang.String) -> OGcB
    88:131:void constructSamplers() -> lepU
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> fvAo
    187:209:void onTick() -> gxeL
    214:214:java.lang.String getTickName() -> GPuT
    219:219:react.glang.GMap getSamplers() -> ySDa
    224:224:react.surge.server.SuperSampler getSs() -> eYKu
    229:229:int getCd() -> tdvM
    234:241:react.glang.GList getSamplerNames() -> iStj
    22:22:react.surge.server.SuperSampler access$000(react.controller.SampleController) -> fmIT
react.controller.SampleController$1 -> QpSM$1:
    react.controller.SampleController this$0 -> yBeH
    141:141:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> QpSM$2:
    react.controller.SampleController this$0 -> yBeH
    153:153:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> JlAa:
    java.lang.String ipa -> SDYf
    react.glang.GList failures -> Fyhm
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> yIjF
    41:74:void checkForIP() -> eHJd
    78:91:void scan(java.lang.Runnable) -> fmIT
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> JlAa$1:
    react.controller.SecurityController this$0 -> AXue
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> JlAa$2:
    java.lang.String val$ip -> lgRi
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> JlAa$3:
    java.lang.Thread val$t -> bsGe
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> ktOv:
    react.glang.GMap etl -> CWNV
    react.glang.GMap ttl -> KVSN
    20:20:void <init>() -> <init>
    28:44:void start() -> start
    49:62:void stop() -> stop
    69:76:void on(org.bukkit.event.world.WorldLoadEvent) -> fmIT
    83:90:void on(org.bukkit.event.world.WorldUnloadEvent) -> fmIT
    96:96:void tick() -> tick
    100:112:void witholdWorld(org.bukkit.World) -> vYtK
    116:128:void releaseWorld(org.bukkit.World) -> vtFh
    132:144:double getUniversalEntityTick() -> QpUH
    149:161:double getUniversalEntityLimit() -> qKKt
    166:178:double getUniversalTileLimit() -> goqp
    183:195:double getUniversalTileTick() -> iCTf
    200:207:double getUniversalEntityDroppedTicks() -> lvpt
    212:219:double getUniversalTileDroppedTicks() -> QpUQ
    224:225:void setEntityTickLimit(org.bukkit.World,double) -> fmIT
    229:230:void setTileTickLimit(org.bukkit.World,double) -> lmyI
    234:234:double getEntityTickLimit(org.bukkit.World) -> kABv
    239:239:double getTileTickLimit(org.bukkit.World) -> FMkB
    244:244:double getLastEntityTick(org.bukkit.World) -> ejDm
    249:249:double getLastTileTick(org.bukkit.World) -> HSoO
    254:254:double getEntityDroppedTicks(org.bukkit.World) -> kjtt
    259:259:double getTileDroppedTicks(org.bukkit.World) -> jFOS
    264:281:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> fmIT
react.controller.SpikeController -> xWrH:
    react.glang.GMap spikes -> axTg
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> gxeL
    111:111:java.lang.String getTickName() -> GPuT
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> vcPU
    128:160:void whoFuckingDidThis(react.glang.Callback) -> fmIT
    25:25:react.glang.GMap access$000(react.controller.SpikeController) -> fmIT
react.controller.SpikeController$1 -> xWrH$1:
    react.controller.SpikeController this$0 -> KoeK
    35:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> xWrH$1$1:
    react.controller.SpikeController$1 this$1 -> HoLs
    40:40:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> xWrH$2:
    react.glang.GMap val$vv -> uPJj
    react.controller.SpikeController this$0 -> KoeK
    75:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> xWrH$3:
    java.lang.Thread val$t -> bsGe
    react.glang.Callback val$callback -> aEPO
    react.controller.SpikeController this$0 -> KoeK
    131:131:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> NxND:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.event.ReactEvent -> gxeL:
    org.bukkit.event.HandlerList handlers -> MShL
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> GrxW:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> GPuT:
    react.event.ScrollDirection direction -> KUrT
    boolean cancellled -> xsFb
    int amount -> fLOh
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> LPGG
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> DaaO
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> HCWg:
    react.event.ScrollDirection DOWN -> sJCq
    react.event.ScrollDirection UP -> ifYa
    react.event.ScrollDirection[] $VALUES -> xitP
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gbench.Profiler -> rMpT:
    long nanos -> JmCY
    long startNano -> VDos
    long millis -> OINM
    long startMillis -> FiIf
    double time -> EKsP
    boolean profiling -> ptBu
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> yIjF
    78:78:double getTicks() -> YLyh
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> BtlM
    93:93:double getHours() -> FNTy
    98:98:double getMilliseconds() -> XSHr
    103:103:long getNanoseconds() -> lURh
    108:108:long getNanos() -> hkId
    113:113:long getStartNano() -> MuLo
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> cJVp
    128:128:double getTime() -> xhtl
    133:133:boolean isProfiling() -> bhvo
react.gconcurrent.A -> WObm:
    react.gconcurrent.ParallelPoolManager mgr -> OkRw
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> WObm$1:
    react.gconcurrent.A this$0 -> BvOV
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> lfRV:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> Cfkt:
    react.gconcurrent.QueueMode mode -> xYVr
    react.glang.GList threads -> WPgS
    int next -> msKB
    int threadCount -> EUEc
    java.util.Queue squeue -> OkTM
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> FGFv
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> nBfy
    22:23:void syncQueue(react.gconcurrent.Execution) -> fmIT
    long getNanoGate() -> OjRN
    29:51:void tickSyncQueue() -> LhxS
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> LPGS
    102:109:int getTotalQueueSize() -> CwpS
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> lmyI
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> JAPN
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> XJWx
    161:188:void updateThreadInformation() -> vlAA
    192:224:react.gconcurrent.ParallelThread nextThread() -> ejNv
    229:235:void createThreads(int) -> tBjk
    239:239:react.gconcurrent.QueueMode getMode() -> EJpO
    244:244:int getNext() -> qJnE
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> VfSp
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> BtmT
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> OjPd
react.gconcurrent.ParallelThread -> Kncn:
    java.util.Queue queue -> fmtS
    react.gconcurrent.ThreadInformation info -> FGFv
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> FMkB
    63:70:void execute(react.gconcurrent.Execution) -> jEpN
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> lmyI
    92:92:java.util.Queue getQueue() -> rpTt
    97:97:react.gconcurrent.ThreadInformation getInfo() -> WiVi
react.gconcurrent.QueueMode -> FFCQ:
    react.gconcurrent.QueueMode ROUND_ROBIN -> IXaF
    react.gconcurrent.QueueMode SMALLEST -> oyOh
    react.gconcurrent.QueueMode[] ENUM$VALUES -> qDAQ
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> Lhum:
    react.gconcurrent.ParallelPoolManager mgr -> OkRw
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> Lhum$1:
    react.gconcurrent.S this$0 -> gNtU
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> XuJf:
    long tick -> bGud
    long atick -> nBgb
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> NMYo:
    double ticksPerSecond -> JmEB
    int queuedSize -> OHmu
    boolean processing -> klbX
    double utilization -> CqAY
    react.gmath.Average ticksPerSecondAverage -> DIOs
    long tick -> bGud
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> fmRh
    33:35:void setTicksPerSecond(double) -> ejDm
    39:39:int getQueuedSize() -> SBwP
    44:45:void setQueuedSize(int) -> TxuD
    49:49:boolean isProcessing() -> quaw
    54:55:void setProcessing(boolean) -> HSoO
    59:59:double getUtilization() -> XIvK
    64:65:void setUtilization(double) -> HSoO
    69:69:double getTicksPerSecondAverage() -> GIFu
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> JlBs
    89:89:int getId() -> getId
react.gformat.F -> AOcd:
    java.text.NumberFormat NF -> DsdA
    java.text.DecimalFormat DF -> QFde
    java.lang.String[] NAMES -> XvMi
    java.math.BigInteger THOUSAND -> stXy
    java.util.NavigableMap MAP -> WGua
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> tBjk
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> fmIT
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> fmIT
    201:221:java.lang.String timeLong(long,int) -> fmIT
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> jEpN
    236:236:java.lang.String b(double) -> kjtt
    241:258:java.lang.String b(java.math.BigInteger) -> fmIT
    263:267:void instantiate() -> biVk
    279:279:java.lang.String fileSize(long) -> tTOK
    292:292:java.lang.String memSize(long) -> Plhx
    305:306:java.lang.String stamp(long) -> vABq
    322:349:java.lang.String ofSize(long,int) -> lmyI
    363:368:java.lang.String trim(java.lang.String,int) -> lmyI
    381:401:java.lang.String cname(java.lang.String) -> TxuD
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> vYtK
    459:477:java.lang.String memx(long) -> vtFh
    491:492:java.lang.String f(long) -> kABv
    504:505:java.lang.String f(int) -> kRCf
    519:528:java.lang.String f(double,int) -> lmyI
    544:553:java.lang.String fd(double,int) -> jEpN
    567:576:java.lang.String f(float,int) -> fmIT
    587:587:java.lang.String f(double) -> jFOS
    598:598:java.lang.String f(float) -> fmIT
    613:613:java.lang.String pc(double,int) -> tTOK
    628:628:java.lang.String pc(float,int) -> lmyI
    641:641:java.lang.String pc(double) -> OGcB
    654:654:java.lang.String pc(float) -> lmyI
    670:670:java.lang.String pc(int,int,int) -> fmIT
    684:684:java.lang.String pc(int,int) -> jEpN
    700:700:java.lang.String pc(long,long,int) -> fmIT
    714:714:java.lang.String pc(long,long) -> tTOK
    726:726:java.lang.String msSeconds(long) -> FMkB
    740:740:java.lang.String msSeconds(long,int) -> jEpN
    752:752:java.lang.String nsMs(long) -> ejDm
    766:766:java.lang.String nsMs(long,int) -> tTOK
    780:780:java.lang.String nsMsd(long,int) -> Plhx
react.glang.AccessCallback -> TqOG:
    java.lang.Object get() -> get
react.glang.Adapter -> vQkR:
    java.lang.Object adapt(java.lang.Object) -> vABq
    java.lang.Object onAdapt(java.lang.Object) -> vYtK
react.glang.Callback -> CxOR:
    java.lang.Object t -> qnSX
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> fmIT
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> RbXD:
    double i -> OHoU
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> yIjF
react.glang.FinalFloat -> XBFN:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> jEpN
react.glang.FinalInteger -> BJVQ:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> mOYF
react.glang.FinalLong -> EeCa:
    long i -> tUYe
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> HSoO
react.glang.FinalString -> baEW:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> xrEC:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> vABq
    java.lang.Object onAdapt(java.lang.Object) -> vYtK
react.glang.GBiset -> jEvm:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> sAUO
    java.lang.Object b -> Aaik
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> gpUN
    53:54:void setA(java.lang.Object) -> vtFh
    63:63:java.lang.Object getB() -> flpo
    73:74:void setB(java.lang.Object) -> kABv
react.glang.GList -> ieXS:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> tTOK
    45:52:react.glang.GList grepDistance(int,int) -> Plhx
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> lmyI
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> jNjM
    188:190:react.glang.GList shuffleCopy() -> LGUN
    198:199:void shuffle() -> NEJk
    210:236:react.glang.GList split() -> Ihad
    248:248:boolean hasIndex(int) -> bXJf
    258:259:java.lang.Object pickRandom() -> gFDs
    270:277:react.glang.GList stringList() -> XIxo
    288:292:void forEach(react.glang.Callback) -> lmyI
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> paVY
    336:336:react.glang.GList cropFrom(int) -> tBmu
    341:373:react.glang.GList split(int) -> OaWk
    389:389:react.glang.GList cropTo(int) -> HvUm
    406:416:react.glang.GList crop(int,int) -> vABq
    427:431:react.glang.GList removeDuplicates() -> Oiqw
    442:446:void removeAll(java.lang.Object) -> FMkB
    455:455:boolean hasDuplicates() -> lCqn
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> QhIS
    484:490:void push(java.lang.Object,int) -> fmIT
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> ejDm
    528:532:void add(java.util.List) -> fmIT
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> Wyyx
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> EeFq
    626:627:react.glang.GList qdel(java.lang.Object) -> HSoO
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> QFEx
    662:669:java.lang.Object popLast() -> wwWQ
    674:683:java.lang.Object popRandom() -> DYSM
react.glang.GListAdapter -> FhEI:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> lmyI
    java.lang.Object onAdapt(java.lang.Object) -> vYtK
react.glang.GMap -> dDfL:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> KMFP
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> fmIT
    64:81:react.glang.GMap flip() -> EdfW
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> fmIT
    121:121:react.glang.GList k() -> kRCf
    131:131:react.glang.GSet kset() -> AOhH
    141:141:react.glang.GList v() -> pXoK
    151:151:react.glang.GSet vset() -> mrIe
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> lmyI
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> vYtK
    209:219:react.glang.GMap removeDuplicateValues() -> OacA
    233:242:void put(react.glang.GList,react.glang.GList) -> fmIT
    251:267:react.glang.GList sortK() -> bhyN
    277:293:react.glang.GList sortV() -> MRjw
react.glang.GQuadraset -> aCmP:
    java.lang.Object a -> sAUO
    java.lang.Object b -> Aaik
    java.lang.Object c -> xPdU
    java.lang.Object d -> gNry
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> gpUN
    25:26:void setA(java.lang.Object) -> vtFh
    30:30:java.lang.Object getB() -> flpo
    35:36:void setB(java.lang.Object) -> kABv
    40:40:java.lang.Object getC() -> rVeC
    45:46:void setC(java.lang.Object) -> kjtt
    50:50:java.lang.Object getD() -> BdMR
    55:56:void setD(java.lang.Object) -> jFOS
react.glang.GSet -> lepU:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> fvAo:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> sAUO
    java.lang.Object b -> Aaik
    java.lang.Object c -> xPdU
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> gpUN
    26:27:void setA(java.lang.Object) -> vtFh
    31:31:java.lang.Object getB() -> flpo
    36:37:void setB(java.lang.Object) -> kABv
    41:41:java.lang.Object getC() -> rVeC
    46:47:void setC(java.lang.Object) -> kjtt
react.gmath.Average -> ySDa:
    double[] values -> YWOy
    double average -> HLnN
    boolean dirty -> Kwyw
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> tBjk
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> HnQF
react.gmath.DoubleArrayUtils -> eYKu:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> fmIT
    17:19:void wrapRight(double[]) -> fmIT
    23:27:void fill(double[],double) -> fill
react.gmath.M -> tdvM:
    int precision -> pjsV
    int modulus -> XvPT
    float[] sin -> hklI
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> fmIT
    31:36:boolean r(java.lang.Double) -> lmyI
    51:51:double tps(long,int) -> vABq
    63:63:double ticksFromNS(long) -> kjtt
    75:101:java.lang.String toRoman(int) -> iCOi
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> vYtK
    144:216:int fromRoman(java.lang.String) -> kRCf
    226:226:long ns() -> yuLR
    236:236:long ms() -> EvGW
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> lmyI
    333:333:float sinLookup(int) -> SvUR
react.gnet.client.Client -> iStj:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> rOWF
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> fmIT
    74:74:react.gnet.packet.PacketHandler getHandler() -> ctlC
react.gnet.client.IClient -> eHJd:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> fmIT
    react.gnet.packet.PacketHandler getHandler() -> ctlC
react.gnet.download.Download -> QpUH:
    react.gnet.download.DownloadState state -> afxC
    react.gnet.download.DownloadType type -> gFew
    react.gnet.download.DownloadStatus status -> nJyi
    react.gnet.download.DownloadMonitor monitor -> fCar
    java.net.URL url -> url
    java.io.File file -> BnBS
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> qlsT
    92:92:react.gnet.download.DownloadType getType() -> yAfQ
    97:97:react.gnet.download.DownloadStatus getStatus() -> pbAH
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> qKPq
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> qKKt:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> fmIT
    void onDownloadStarted(react.gnet.download.Download) -> fmIT
    void onDownloadFinished(react.gnet.download.Download) -> lmyI
    void onDownloadFailed(react.gnet.download.Download) -> jEpN
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> fmIT
react.gnet.download.DownloadState -> goqp:
    react.gnet.download.DownloadState IDLE -> ognm
    react.gnet.download.DownloadState DOWNLOADING -> Wail
    react.gnet.download.DownloadState FAILED -> gFeP
    react.gnet.download.DownloadState FINISHED -> XeNB
    react.gnet.download.DownloadState[] $VALUES -> skkP
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> iCTf:
    long bytesDownloaded -> KpJO
    long bytesTotal -> YyRU
    long bytesPerSecond -> PnXF
    long timeElapsed -> lwxK
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> UlDg
    25:25:long getBytesDownloaded() -> FWHI
    30:31:void setBytesDownloaded(long) -> jFOS
    35:35:long getBytesTotal() -> vkaN
    40:41:void setBytesTotal(long) -> OGcB
    45:45:long getBytesPerSecond() -> rNRx
    50:51:void setBytesPerSecond(long) -> yIjF
    55:55:long getTimeElapsed() -> tTYg
    60:61:void setTimeElapsed(long) -> tBjk
react.gnet.download.DownloadType -> lvpt:
    react.gnet.download.DownloadType DETERMINATE -> yumF
    react.gnet.download.DownloadType INDETERMINATE -> eIOk
    react.gnet.download.DownloadType[] $VALUES -> YxrM
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> QpUQ:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> NELr
    java.lang.String getPacketName() -> TqRS
react.gnet.packet.IncompatablePacketException -> vcPU:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> LPGG:
    react.gnet.packet.PacketBinding SERVER_BOUND -> hRXp
    react.gnet.packet.PacketBinding CLIENT_BOUND -> ELUa
    react.gnet.packet.PacketBinding[] $VALUES -> baig
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> DaaO:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> YLyh:
    react.glang.GList accept -> uOlw
    react.gnet.packet.PacketBinding side -> riGq
    react.gnet.streams.OSS out -> brkS
    react.gnet.streams.ISS in -> Fyko
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> fmIT
    28:34:void accept(react.gnet.packet.IPacket) -> lmyI
    38:46:react.gnet.packet.IPacket findPacket(int) -> dVCX
    51:66:react.gnet.packet.IPacket read() -> Oiqv
    71:77:void write(react.gnet.packet.IPacket) -> jEpN
react.gnet.packet.UnhandledPacketException -> BtlM:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> FNTy:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> ctlC
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> tTOK
react.gnet.server.Server -> XSHr:
    int port -> port
    java.net.ServerSocket socket -> DHrL
    react.gnet.packet.PacketHandler handler -> rOWF
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> ctlC
    37:84:void run() -> run
    88:91:void pstart() -> YxPa
    95:96:void pstop() -> QEdn
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> tTOK
react.gnet.streams.ISS -> lURh:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> jaPh
    boolean built -> fUEF
    byte[] readBuffer -> scYs
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> Jbhy
    64:72:react.glang.GList readStringList() -> ETES
    77:85:react.glang.GList readDoubleList() -> DQBR
    90:98:react.glang.GList readLongList() -> ObBg
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> fmIT
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> fmIT
    136:137:react.gnet.streams.ISS gzip() -> XuMf
    142:147:void build() -> uOPM
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> lmyI
    435:436:void close() -> close
react.gnet.streams.OSS -> hkId:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> pRDW
    react.gnet.streams.StreamBuilder bu -> jaPh
    boolean built -> fUEF
    byte[] writeBuffer -> XCNP
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> kbgn
    41:42:react.gnet.streams.OSS gzip(int) -> oMQr
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> lmyI
    53:58:void build() -> uOPM
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> vtFh
    102:108:void writeDoubleList(react.glang.GList) -> kABv
    112:118:void writeLongList(react.glang.GList) -> FMkB
    122:128:void writeStreamableList(react.glang.GList) -> ejDm
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> DaeL
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> jEpN
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> MuLo:
    react.glang.GList constructors -> wEUx
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> fmIT
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> fmIT
    49:50:void bind(react.gnet.streams.StreamConstructor) -> fmIT
    54:55:void bindGZIP(int) -> HmeM
    59:60:void bindGZIP() -> cRkd
    64:65:void bindCipher(javax.crypto.Cipher) -> jEpN
    69:70:void bindBuffer(int) -> GaqH
    74:75:void bindBuffer() -> LOjK
react.gnet.streams.StreamConstructor -> cJVp:
    java.io.InputStream constructInput(java.io.InputStream) -> fmIT
    java.io.OutputStream constructOutput(java.io.OutputStream) -> fmIT
react.gnet.streams.constructors.BufferedStreamConstructor -> xhtl:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> lmyI
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> lmyI
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> fmIT
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> fmIT
react.gnet.streams.constructors.CipherStreamConstructor -> bhvo:
    javax.crypto.Cipher cipher -> jaTT
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> jEpN
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> jEpN
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> fmIT
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> fmIT
react.gnet.streams.constructors.GZipStreamConstructor -> OjRN:
    int compressionLevel -> oFOm
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> tTOK
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> tTOK
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> fmIT
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> fmIT
react.gnet.streams.overlays.CGZIPInputStream -> LhxS:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> LPGS:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> CwpS:
    void toBytes(react.gnet.streams.OSS) -> fmIT
    void fromBytes(react.gnet.streams.ISS) -> fmIT
react.graph.ColossalView -> JAPN:
    react.papyrus.BufferedFrame view -> Lrnt
    react.glang.GMap buffers -> giMC
    react.glang.GMap graphs -> uHBM
    double level -> yeOV
    double targetLevel -> aEWS
    int maxX -> QynQ
    int maxY -> kSUP
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> wTtg
    51:77:void render() -> LrMs
    81:98:void scroll(int) -> AyqG
    102:112:void recompile() -> oVPC
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> fmIT
    122:122:react.papyrus.BufferedFrame getView() -> uNoU
    127:127:react.glang.GMap getBuffers() -> IiDm
    132:132:react.glang.GMap getGraphs() -> ECEs
    137:137:double getLevel() -> ivaP
    142:142:double getTargetLevel() -> VCtn
    147:147:int getMaxX() -> YwsO
    152:152:int getMaxY() -> wUTw
react.graph.ColossalView$Builder -> JAPN$fmIT:
    react.glang.GList graphs -> NqEx
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> fmIT
    171:191:react.graph.ColossalView compute() -> pQBD
react.graph.CubicleIterator -> XJWx:
    int[][] mapping -> UKGB
    int xCubes -> IYFJ
    int yCubes -> EKxJ
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> pYEb
    47:130:void insert(react.graph.GraphSize,int) -> fmIT
    134:145:void print() -> print
react.graph.GraphSampleLine -> vlAA:
    double lx -> BCNT
    double ly -> jHAr
    react.api.ISampler sampler -> qvhT
    react.graph.IFormatter formatter -> opbQ
    byte graphColor -> WGyU
    byte backgroundColor -> wpIb
    byte borderColor -> JAtB
    byte textColor -> hkmc
    int ticksLeftTitle -> Evjd
    int ticksOutTitle -> gylU
    double nextPoint -> PUGk
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> fRun
    51:183:void onRender(react.papyrus.BufferedFrame) -> fmIT
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> lmyI
    226:254:int getHue(int,int,int) -> jEpN
    259:281:void scaleFor(react.glang.GList) -> HSoO
    285:285:react.graph.IFormatter getFormatter() -> PBWE
    290:291:void setFormatter(react.graph.IFormatter) -> fmIT
    295:295:byte getGraphColor() -> HnSB
    300:301:void setGraphColor(byte) -> fmIT
    305:305:byte getBackgroundColor() -> IXCn
    310:311:void setBackgroundColor(byte) -> lmyI
    315:315:byte getBorderColor() -> HKoE
    320:321:void setBorderColor(byte) -> jEpN
    325:325:byte getTextColor() -> opBM
    330:331:void setTextColor(byte) -> tTOK
    335:335:react.api.ISampler getSampler() -> CgSh
react.graph.GraphSize -> ejNv:
    react.graph.GraphSize WIDE -> XCMG
    react.graph.GraphSize FULL -> PUHN
    react.graph.GraphSize SQUARE -> UlhI
    react.graph.GraphSize[] $VALUES -> xiyq
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> ghIs
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> ejNv$1:
    int[] $SwitchMap$react$graph$GraphSize -> Jcvo
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> EJpO:
    java.lang.String text -> text
    byte fontColor -> USUk
    byte backgroundColor -> wpIb
    boolean wrote -> uXaC
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> fmIT
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> BBLM
    68:69:void setFontColor(byte) -> Plhx
    73:73:byte getBackgroundColor() -> IXCn
    78:79:void setBackgroundColor(byte) -> lmyI
react.graph.GraphingInstance -> qJnE:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> NqEx
    react.graph.ColossalView view -> Ucve
    react.papyrus.Papyrus papyrus -> PTfu
    react.papyrus.IRenderer renderer -> lohj
    boolean mapping -> Thpe
    react.glang.GList msgs -> aojR
    react.surge.sched.Task waiter -> PfJL
    react.surge.sched.Task waiter2 -> dpbg
    int shift -> nSkr
    boolean notif -> GkpJ
    48:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> fmIT
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> fmIT
    138:142:void send(java.lang.String) -> mOYF
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> fmIT
    153:165:void on(react.event.ReactScrollEvent) -> fmIT
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> fmIT
    179:187:void destroy() -> destroy
    191:200:void toggle() -> jiAu
    204:205:void setGraphs(react.glang.GList) -> kjtt
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> wvvk
    243:259:void compile() -> DPay
    32:32:boolean access$000(react.graph.GraphingInstance) -> fmIT
    32:32:react.glang.GList access$100(react.graph.GraphingInstance) -> lmyI
    32:32:boolean access$200(react.graph.GraphingInstance) -> jEpN
    32:32:boolean access$202(react.graph.GraphingInstance,boolean) -> fmIT
    32:32:int access$300(react.graph.GraphingInstance) -> tTOK
    32:32:int access$310(react.graph.GraphingInstance) -> Plhx
    32:32:int access$302(react.graph.GraphingInstance,int) -> fmIT
    32:32:react.graph.ColossalView access$400(react.graph.GraphingInstance) -> vABq
react.graph.GraphingInstance$1 -> qJnE$1:
    org.bukkit.entity.Player val$player -> XmcW
    react.graph.GraphingInstance this$0 -> MLBJ
    52:52:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> qJnE$2:
    react.graph.GraphingInstance this$0 -> MLBJ
    77:77:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> qJnE$3:
    react.graph.GraphingInstance this$0 -> MLBJ
    107:107:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> fmIT
react.graph.IFormatter -> VfSp:
    java.lang.String from(double) -> TxuD
react.graph.IGraph -> BtmT:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> tmmg
    long getTimeViewport() -> nuOA
    void render(react.papyrus.BufferedFrame) -> jEpN
    double getMax() -> getMax
    void setMax(double) -> kRCf
react.graph.NormalGraph -> OjPd:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> XvUD
    long timeViewport -> fDGs
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> tmmg
    35:35:long getTimeViewport() -> nuOA
    41:42:void render(react.papyrus.BufferedFrame) -> jEpN
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> kRCf
    void onRender(react.papyrus.BufferedFrame) -> fmIT
react.graph.PlotBoard -> rpTt:
    react.glang.GMap plots -> dVri
    int maxRecordings -> Hfdt
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> nRje
    33:33:long getAccurateTimeSpan() -> kAPv
    38:50:long getMedian(long,long) -> Plhx
    55:55:long getMinimumAccuracyRange() -> Whyo
    60:70:double getMaxValue() -> ntlg
    75:85:double getMinValue() -> avxa
    90:90:react.glang.GList sort(react.glang.GMap) -> lmyI
    95:105:long earilestRecording() -> nIyB
    110:120:long latestRecording() -> kstQ
    125:126:void reduceBefore(long) -> TxuD
    130:148:void reduceBetween(long,long) -> vABq
    152:152:boolean before(long,long) -> vYtK
    157:157:boolean after(long,long) -> vtFh
    162:162:boolean within(long,long,long) -> fmIT
    167:177:react.glang.GMap getBetween(long,long) -> kABv
    182:184:void plot(long,double) -> fmIT
    188:188:boolean hasAt(long) -> kRCf
    193:193:double getAt(long) -> mOYF
    198:198:int getSize() -> getSize
react.graph.Point -> WiVi:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> fmRh:
    int iid -> riNQ
    react.graph.IGraph graph -> uaUb
    react.graph.GraphSize size -> vlgx
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> YDlr
    24:25:void setGraph(react.graph.IGraph) -> fmIT
    29:29:react.graph.GraphSize getSize() -> ntmP
    34:35:void setSize(react.graph.GraphSize) -> fmIT
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> SBwP:
    react.graph.RenderMaxType UNLIMITED -> lokj
    react.graph.RenderMaxType LIMITED -> pACt
    react.graph.RenderMaxType[] $VALUES -> pbfW
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> quaw:
    java.lang.String CRLF -> mamd
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> bXJf
    162:198:java.lang.String toString(react.json.JSONObject) -> lmyI
react.json.HTTPTokener -> XIvK:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> GIFu:
    java.util.ArrayList myArrayList -> CErU
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> fmIT
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> vjvg
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> Hmdw
    394:399:react.json.JSONObject getJSONObject(int) -> KfMp
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> paVY
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> CEBa
    515:515:boolean optBoolean(int) -> HvVe
    533:536:boolean optBoolean(int,boolean) -> lmyI
    551:551:double optDouble(int) -> kcHC
    569:572:double optDouble(int,double) -> fmIT
    587:587:int optInt(int) -> DjHe
    605:608:int optInt(int,int) -> vtFh
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> lmyI
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> fmIT
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> fmIT
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> fmIT
    722:723:react.json.JSONArray optJSONArray(int) -> lDHA
    737:738:react.json.JSONObject optJSONObject(int) -> PBWE
    752:752:long optLong(int) -> OigP
    770:773:long optLong(int,long) -> fmIT
    788:788:java.lang.String optString(int) -> pOrf
    803:804:java.lang.String optString(int,java.lang.String) -> fmIT
    816:817:react.json.JSONArray put(boolean) -> kjtt
    830:831:react.json.JSONArray put(java.util.Collection) -> fmIT
    845:848:react.json.JSONArray put(double) -> mOYF
    860:861:react.json.JSONArray put(int) -> fRun
    873:874:react.json.JSONArray put(long) -> bXJf
    887:888:react.json.JSONArray put(java.util.Map) -> fmIT
    902:903:react.json.JSONArray put(java.lang.Object) -> OGcB
    921:922:react.json.JSONArray put(int,boolean) -> jEpN
    939:940:react.json.JSONArray put(int,java.util.Collection) -> fmIT
    958:959:react.json.JSONArray put(int,double) -> lmyI
    977:978:react.json.JSONArray put(int,int) -> kABv
    996:997:react.json.JSONArray put(int,long) -> lmyI
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> fmIT
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> fmIT
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> yIjF
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> fmIT
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> fmIT
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> fmIT
react.json.JSONException -> JlBs:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> nTPY
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> biVk:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> fmIT
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> tBmu
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> fmIT
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> lmyI
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> bXJf
    379:456:java.lang.String toString(react.json.JSONArray) -> lmyI
    472:552:java.lang.String toString(react.json.JSONObject) -> lmyI
react.json.JSONObject -> gpUN:
    java.util.Map map -> map
    java.lang.Object NULL -> kKFu
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> fmIT
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> lmyI
    480:499:java.lang.String doubleToString(double) -> bXJf
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> OaWk
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> HvUm
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> iCOi
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> jEpN
    751:767:java.lang.String[] getNames(java.lang.Object) -> tBjk
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> SvUR
    855:855:boolean isNull(java.lang.String) -> dVCX
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> IptF
    917:937:java.lang.String numberToString(java.lang.Number) -> fmIT
    949:949:java.lang.Object opt(java.lang.String) -> Jbhy
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> fmIT
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> fmIT
    1018:1018:boolean optBoolean(java.lang.String) -> kbgn
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> fmIT
    1054:1054:double optDouble(java.lang.String) -> oMQr
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> fmIT
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> fmIT
    1116:1119:double optDouble(java.lang.String,double) -> fmIT
    1134:1134:int optInt(java.lang.String) -> HmeM
    1152:1155:int optInt(java.lang.String,int) -> jEpN
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> GaqH
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> AyqG
    1198:1198:long optLong(java.lang.String) -> pYEb
    1216:1219:long optLong(java.lang.String,long) -> fmIT
    1234:1234:java.lang.String optString(java.lang.String) -> vjvg
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> lmyI
    1255:1305:void populateMap(java.lang.Object) -> TxuD
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> lmyI
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> fmIT
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> lmyI
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> tTOK
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> lmyI
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> fmIT
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> jEpN
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> tTOK
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> Plhx
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> fmIT
    1590:1590:java.lang.Object remove(java.lang.String) -> Hmdw
    1605:1640:boolean similar(java.lang.Object) -> yIjF
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> kRCf
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> jEpN
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> fmIT
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> fmIT
    2000:2004:void indent(java.io.Writer,int) -> fmIT
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> fmIT
react.json.JSONObject$Null -> gpUN$fmIT:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> flpo:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> jNjM:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> LGUN:
    long character -> PKxx
    boolean eof -> eof
    long index -> cTQP
    long line -> jXcj
    char previous -> Yxud
    java.io.Reader reader -> reader
    boolean usePrevious -> YWSd
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> TiDJ
    119:131:int dehexchar(char) -> fmIT
    136:136:boolean end() -> XdPq
    147:153:boolean more() -> kRUe
    164:198:char next() -> next
    213:218:char next(char) -> lmyI
    233:250:java.lang.String next(int) -> AqbF
    263:266:char nextClean() -> pXsg
    287:334:java.lang.String nextString(char) -> jEpN
    349:361:java.lang.String nextTo(char) -> tTOK
    376:388:java.lang.String nextTo(java.lang.String) -> KfMp
    403:441:java.lang.Object nextValue() -> IFcO
    458:479:char skipTo(char) -> Plhx
    491:491:react.json.JSONException syntaxError(java.lang.String) -> CEBa
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> NEJk:
    int maxdepth -> TXdn
    boolean comma -> tMPV
    char mode -> UBUu
    react.json.JSONObject[] stack -> IaWM
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> HvVe
    157:164:react.json.JSONWriter array() -> FFJx
    180:193:react.json.JSONWriter end(char,char) -> fmIT
    206:206:react.json.JSONWriter endArray() -> GYnj
    219:219:react.json.JSONWriter endObject() -> DsJK
    235:258:react.json.JSONWriter key(java.lang.String) -> kcHC
    274:285:react.json.JSONWriter object() -> PJwQ
    299:310:void pop(char) -> vABq
    322:329:void push(react.json.JSONObject) -> tTOK
    342:342:react.json.JSONWriter value(boolean) -> jFOS
    356:356:react.json.JSONWriter value(double) -> paVY
    369:369:react.json.JSONWriter value(long) -> paVY
    385:385:react.json.JSONWriter value(java.lang.Object) -> mOYF
react.json.XML -> Ihad:
    java.lang.Character AMP -> CxwO
    java.lang.Character APOS -> Sfce
    java.lang.Character BANG -> ebgG
    java.lang.Character EQ -> gNyU
    java.lang.Character GT -> UcyH
    java.lang.Character LT -> vlfq
    java.lang.Character QUEST -> oOBG
    java.lang.Character QUOT -> aMhq
    java.lang.Character SLASH -> VMjE
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> DjHe
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> fmIT
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> bXJf
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> gFDs:
    java.util.HashMap entity -> dOCH
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> IGCu
    108:133:java.lang.Object nextContent() -> jFaH
    149:166:java.lang.Object nextEntity(char) -> vYtK
    186:239:java.lang.Object nextMeta() -> Xlaj
    261:334:java.lang.Object nextToken() -> QVkX
    354:420:boolean skipPast(java.lang.String) -> lDHA
react.papyrus.BufferedFrame -> XIxo:
    byte[][] frame -> AbSQ
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> fmIT
    90:97:void write(byte) -> vABq
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> fmIT
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> fmIT
    131:145:java.awt.image.BufferedImage toBufferedImage() -> NgTw
    153:160:void writeRainbowMul() -> aeyl
    167:174:void writeRainbowAdd() -> HwFO
    181:191:void writeSparks() -> vswE
    195:201:boolean write(int,int,byte) -> fmIT
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> fmIT
    233:250:void write(react.papyrus.BufferedFrame) -> tTOK
    254:254:byte[][] getRawFrame() -> kIcq
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> Oiqw:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> tTOK
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> fmIT
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> lCqn:
    org.bukkit.map.MapView getView() -> TGDJ
    react.papyrus.BufferedFrame getFrameBuffer() -> YpFC
    void addRenderer(react.papyrus.IRenderer) -> fmIT
    void clearRenderers() -> IFcb
    react.glang.GList getRenderers() -> AaOm
    void removeRenderer(react.papyrus.IRenderer) -> lmyI
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> WaMK
react.papyrus.IRenderer -> QhIS:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> fmIT
react.papyrus.Papyrus -> Wyyx:
    org.bukkit.map.MapView map -> KopN
    react.papyrus.BufferedFrame frameBuffer -> xkBJ
    react.papyrus.BufferedFrame lastFrameBuffer -> EDKs
    react.glang.GList renderers -> ORIh
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> TGDJ
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> YpFC
    51:52:void addRenderer(react.papyrus.IRenderer) -> fmIT
    57:58:void clearRenderers() -> IFcb
    63:63:react.glang.GList getRenderers() -> AaOm
    69:70:void removeRenderer(react.papyrus.IRenderer) -> lmyI
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> WaMK
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> fmIT
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> lmyI
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> jEpN
react.papyrus.Papyrus$1 -> Wyyx$1:
    org.bukkit.map.MapCanvas val$c -> iVDo
    org.bukkit.map.MapView val$v -> brrI
    react.papyrus.Papyrus this$0 -> yBnw
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> EeFq:
    int spaceSize -> OQhp
    java.lang.String fontChars -> pIVd
    int[][] fontData -> JmNb
    react.papyrus.ReactFont Font -> EoAK
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> QFEx:
    react.glang.GList subgoals -> eskO
    java.lang.String tag -> fChY
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> CpEY
    26:44:void propigate() -> XdOo
    49:50:void addGoal(react.rai.IGoal) -> fmIT
    55:65:react.glang.GList getFailingSubgoals() -> qeGe
    71:71:boolean isFailing() -> yBLB
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> wnhl
    void onPropigated() -> royv
react.rai.Goal$1 -> QFEx$1:
    react.rai.IGoal val$i -> kBVs
    react.rai.Goal this$0 -> JAwj
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> wwWQ:
    react.glang.GList getSubgoals() -> CpEY
    void propigate() -> XdOo
    void onPropigated() -> royv
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> qeGe
    boolean isFailing() -> yBLB
    boolean onCheckFailing() -> wnhl
    void update() -> update
    void addGoal(react.rai.IGoal) -> fmIT
react.rai.IRAI -> DYSM:
    react.glang.GList getGoals() -> cBLN
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> fmIT
    react.glang.GList getEvents() -> eQCv
    void callEvent(react.rai.RAIEvent) -> fmIT
    react.glang.GList getListeners() -> hkMk
react.rai.RAI -> KMFP:
    react.glang.GList goals -> APqY
    react.glang.GList events -> fDHn
    react.glang.GList logEvents -> HVFD
    react.glang.GList listeners -> CpiJ
    long since -> YFTM
    react.rai.RAI instance -> qwLj
    22:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> cBLN
    41:42:void addGoal(react.rai.IGoal) -> fmIT
    47:69:void tick() -> tick
    74:74:react.glang.GList getEvents() -> eQCv
    80:87:void callEvent(react.rai.RAIEvent) -> fmIT
    92:92:react.glang.GList getListeners() -> hkMk
react.rai.RAIEvent -> EdfW:
    react.rai.RAIEventType type -> txEe
    java.lang.String[] pars -> tfcV
    java.lang.String ovt -> jaWE
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> cBLi
    29:29:java.lang.String[] getPars() -> gFHe
    34:34:java.lang.String getOvt() -> lCta
react.rai.RAIEventType -> AOhH:
    react.rai.RAIEventType FIRE_ACTION -> huBy
    react.rai.RAIEventType NOTE_GOAL_FAILING -> MeTn
    react.rai.RAIEventType NOTE_GOAL_FIXED -> Sfec
    java.lang.String[] msgs -> MCQm
    react.rai.RAIEventType[] $VALUES -> etKT
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> xaJo
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> fmIT
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedChunkLoad -> pXoK:
    boolean failing -> tUaa
    24:27:void <init>() -> <init>
    34:60:boolean onCheckFailing() -> wnhl
    66:79:void onPropigated() -> royv
react.rai.goals.GoalReducedChunkLoad$1 -> pXoK$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> ecJB
    43:43:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    47:56:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> pXoK$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> ecJB
    69:69:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    73:76:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> mrIe:
    boolean failing -> tUaa
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> wnhl
    91:134:void onPropigated() -> royv
    22:22:boolean access$000(react.rai.goals.GoalReducedEntityCounts) -> fmIT
react.rai.goals.GoalReducedEntityCounts$1 -> mrIe$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> cdrf
    68:68:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> mrIe$2:
    org.bukkit.Chunk val$lx -> XBsT
    react.rai.goals.GoalReducedEntityCounts this$0 -> cdrf
    120:120:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> OacA:
    boolean failing -> tUaa
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> wnhl
    78:128:void onPropigated() -> royv
react.rai.goals.GoalStableChunkTime$1 -> OacA$1:
    react.rai.goals.GoalStableChunkTime this$0 -> DtOa
    55:55:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> OacA$2:
    java.lang.Object val$i -> suFY
    react.rai.goals.GoalStableChunkTime this$0 -> DtOa
    112:112:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> bhyN:
    boolean failing -> tUaa
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> royv
    35:35:void letUp() -> upqw
    40:77:boolean onCheckFailing() -> wnhl
    15:15:boolean access$000(react.rai.goals.GoalStableEntityTime) -> fmIT
react.rai.goals.GoalStableEntityTime$1 -> bhyN$1:
    react.rai.goals.GoalStableEntityTime this$0 -> sJQk
    60:60:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> MRjw:
    boolean failing -> tUaa
    react.glang.GMap reocc -> raBF
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> royv
    88:125:boolean onCheckFailing() -> wnhl
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableFluidTime) -> fmIT
    24:24:boolean access$100(react.rai.goals.GoalStableFluidTime) -> lmyI
react.rai.goals.GoalStableFluidTime$1 -> MRjw$1:
    org.bukkit.Chunk val$lx -> XBsT
    react.rai.goals.GoalStableFluidTime this$0 -> BeWm
    67:67:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> MRjw$2:
    react.rai.goals.GoalStableFluidTime this$0 -> BeWm
    108:108:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> rVeC:
    boolean failing -> tUaa
    react.glang.GMap reocc -> raBF
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> royv
    89:125:boolean onCheckFailing() -> wnhl
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableHopperTime) -> fmIT
    24:24:boolean access$100(react.rai.goals.GoalStableHopperTime) -> lmyI
react.rai.goals.GoalStableHopperTime$1 -> rVeC$1:
    org.bukkit.Chunk val$lx -> XBsT
    react.rai.goals.GoalStableHopperTime this$0 -> rrCU
    67:67:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> rVeC$2:
    react.rai.goals.GoalStableHopperTime this$0 -> rrCU
    108:108:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> BdMR:
    boolean failing -> tUaa
    react.glang.GMap reocc -> raBF
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> royv
    89:126:boolean onCheckFailing() -> wnhl
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableRedstoneTime) -> fmIT
    24:24:boolean access$100(react.rai.goals.GoalStableRedstoneTime) -> lmyI
react.rai.goals.GoalStableRedstoneTime$1 -> BdMR$1:
    org.bukkit.Chunk val$lx -> XBsT
    react.rai.goals.GoalStableRedstoneTime this$0 -> KhCJ
    67:67:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> BdMR$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> KhCJ
    109:109:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> HnQF:
    boolean failing -> tUaa
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> royv
    34:58:boolean onCheckFailing() -> wnhl
    14:14:boolean access$000(react.rai.goals.GoalStableTickTime) -> fmIT
react.rai.goals.GoalStableTickTime$1 -> HnQF$1:
    react.rai.goals.GoalStableTickTime this$0 -> WHaR
    41:41:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> yuLR:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> nduW
    boolean authenticated -> AYdA
    react.remote.server.ServerInfo info -> LHaq
    react.glang.GMap frems -> YOHj
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> PcyT
    51:51:react.glang.GMap getFrames() -> ycmC
    56:75:int computeFrames() -> docN
    80:92:boolean clearToken() -> uOPe
    97:110:boolean updateServerInfo() -> dEPD
    115:129:boolean refreshToken() -> qmWi
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> jEpN
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> kket
    165:165:boolean isAuthenticated() -> jhbp
    170:170:react.remote.server.ServerInfo getInfo() -> TheJ
react.remote.client.packet.CPacketClearToken -> EvGW:
    java.lang.String token -> nduW
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIT
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIT
    38:38:java.lang.String getToken() -> kket
    43:44:void setToken(java.lang.String) -> PBWE
react.remote.client.packet.CPacketComputeFrames -> ctlC:
    java.lang.String token -> nduW
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIT
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIT
    38:38:java.lang.String getToken() -> kket
    43:44:void setToken(java.lang.String) -> PBWE
react.remote.client.packet.CPacketGetInfo -> qlsT:
    java.lang.String token -> nduW
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIT
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIT
    38:38:java.lang.String getToken() -> kket
    43:44:void setToken(java.lang.String) -> PBWE
react.remote.client.packet.CPacketGetToken -> yAfQ:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> fmIT
    36:38:void fromBytes(react.gnet.streams.ISS) -> fmIT
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> pbAH:
    java.lang.String token -> nduW
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIT
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIT
    38:38:java.lang.String getToken() -> kket
    43:44:void setToken(java.lang.String) -> PBWE
react.remote.client.packet.ClientPacket -> qKPq:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> fmIT
    void fromBytes(react.gnet.streams.ISS) -> fmIT
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> NELr
    42:42:java.lang.String getPacketName() -> TqRS
react.remote.client.packet.ClientPacketType -> UlDg:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> QaDH
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> vlkx
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> eHxo
    react.remote.client.packet.ClientPacketType GET_INFO -> XnIR
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> oEtg
    react.remote.client.packet.ClientPacketType[] $VALUES -> WYcW
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> FWHI:
    react.glang.GMap compute(long,long) -> jEpN
react.remote.server.KnownUser -> vkaN:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> rNRx:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> fmIT
    38:41:void fromBytes(react.gnet.streams.ISS) -> fmIT
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> tTYg:
    react.glang.GList users -> iVFh
    react.glang.GMap session -> mkCq
    react.glang.GMap lastCompute -> iVFI
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> ieXS
    44:45:void registerUser(react.remote.server.KnownUser) -> fmIT
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> lmyI
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> OigP
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> tTOK
    react.remote.server.IFrameComputer getFrameComputer() -> FhEI
    170:171:void markLastCompute(react.remote.server.KnownUser) -> jEpN
    175:180:long getLastCompute(react.remote.server.KnownUser) -> tTOK
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> fmIT
    190:191:void deleteSession(react.remote.server.KnownUser) -> Plhx
    195:195:java.lang.String createToken() -> Hedj
react.remote.server.ServerInfo -> NELr:
    java.lang.String motd -> jYIJ
    int gameProtocol -> LsTs
    java.lang.String gameVersion -> lNNB
    java.lang.String reactVersion -> RRcD
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> scbd
    int viewDistance -> viewDistance
    int gamePort -> XnFs
    java.lang.String gameAddress -> MBsM
    react.glang.GList remotePlugins -> YNfU
    react.glang.GList worlds -> RJSC
    react.glang.GList actions -> tnut
    react.glang.GList samplers -> vAwP
    26:26:react.remote.server.ServerInfo empty() -> Noff
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> fmIT
    146:159:void fromBytes(react.gnet.streams.ISS) -> fmIT
    java.lang.String dgetMotd() -> WObm
    int dgetGameProtocol() -> lfRV
    java.lang.String dgetGameVersion() -> Cfkt
    java.lang.String dgetReactVersion() -> Kncn
    int dgetMaxPlayers() -> FFCQ
    react.glang.GList dgetConnectedPlayers() -> Lhum
    int dgetViewDistance() -> XuJf
    int dgetGamePort() -> NMYo
    java.lang.String dgetGameAddress() -> AOcd
    react.glang.GList dgetRemotePlugins() -> TqOG
    react.glang.GList dgetWorlds() -> vQkR
    react.glang.GList dgetActions() -> CxOR
    react.glang.GList dgetSamplers() -> RbXD
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> TiGt
    199:199:java.lang.String getGameVersion() -> XuUG
    204:204:java.lang.String getReactVersion() -> PCJF
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> GsdG
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> xFyr
    229:229:java.lang.String getGameAddress() -> ghMl
    234:234:react.glang.GList getRemotePlugins() -> OaiK
    239:239:react.glang.GList getWorlds() -> UQwo
    244:244:react.glang.GList getActions() -> CVHe
    249:249:react.glang.GList getSamplers() -> fKYO
react.remote.server.ServerInfo$1 -> NELr$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> vQkR
    37:37:int dgetViewDistance() -> XuJf
    43:43:react.glang.GList dgetRemotePlugins() -> TqOG
    49:49:java.lang.String dgetReactVersion() -> Kncn
    55:55:java.lang.String dgetMotd() -> WObm
    61:61:int dgetMaxPlayers() -> FFCQ
    67:67:java.lang.String dgetGameVersion() -> Cfkt
    73:73:int dgetGameProtocol() -> lfRV
    79:79:int dgetGamePort() -> NMYo
    85:85:java.lang.String dgetGameAddress() -> AOcd
    91:91:react.glang.GList dgetConnectedPlayers() -> Lhum
    97:97:react.glang.GList dgetActions() -> CxOR
    103:103:react.glang.GList dgetSamplers() -> RbXD
react.remote.server.packet.ComputedFrame -> TqRS:
    react.glang.GMap values -> UJkH
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> fmIT
    28:36:void fromBytes(react.gnet.streams.ISS) -> fmIT
    40:40:react.glang.GMap getValues() -> xPKu
    45:46:void setValues(react.glang.GMap) -> jEpN
react.remote.server.packet.SPacketOk -> Oiqv:
    boolean ok -> QWqI
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIT
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIT
    38:38:boolean isOk() -> lMIl
    43:44:void setOk(boolean) -> OGcB
react.remote.server.packet.SPacketSendFrames -> YxPa:
    react.glang.GMap frames -> jPWY
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> fmIT
    36:44:void fromBytes(react.gnet.streams.ISS) -> fmIT
    48:48:react.glang.GMap getFrames() -> ycmC
    53:54:void setFrames(react.glang.GMap) -> tTOK
react.remote.server.packet.SPacketSendInfo -> QEdn:
    react.remote.server.ServerInfo info -> LHaq
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIT
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIT
    38:38:react.remote.server.ServerInfo getInfo() -> TheJ
    43:44:void setInfo(react.remote.server.ServerInfo) -> fmIT
react.remote.server.packet.SPacketSendToken -> ETES:
    java.lang.String token -> nduW
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIT
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIT
    38:38:java.lang.String getToken() -> kket
    43:44:void setToken(java.lang.String) -> PBWE
react.remote.server.packet.ServerPacket -> DQBR:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> fmIT
    void fromBytes(react.gnet.streams.ISS) -> fmIT
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> NELr
    42:42:java.lang.String getPacketName() -> TqRS
react.remote.server.packet.ServerPacketType -> ObBg:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> ndtF
    react.remote.server.packet.ServerPacketType SEND_INFO -> pQgp
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> oEtK
    react.remote.server.packet.ServerPacketType OK -> DAJn
    react.remote.server.packet.ServerPacketType[] $VALUES -> yBom
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> XuMf:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleAsyncQueue$1 -> XuMf$1:
    react.sampler.SampleAsyncQueue this$0 -> Evsg
    21:21:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleChunkTime -> uOPM:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleChunkTime$1 -> uOPM$1:
    react.sampler.SampleChunkTime this$0 -> fnan
    21:21:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleChunksLoaded -> DaeL:
    react.graph.IFormatter formatter -> opbQ
    18:27:void <init>() -> <init>
    32:38:void construct() -> AqbF
    43:44:void sample() -> fRun
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleChunksLoaded$1 -> DaeL$1:
    react.sampler.SampleChunksLoaded this$0 -> WPsg
    20:20:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> TxuD
react.sampler.SampleChunksLoadedPerSecond -> cRkd:
    react.gmath.Average a -> FaEn
    react.graph.IFormatter formatter -> opbQ
    16:29:void <init>() -> <init>
    34:40:void construct() -> AqbF
    45:47:void sample() -> fRun
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleChunksLoadedPerSecond$1 -> cRkd$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> bYcv
    22:22:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> TxuD
react.sampler.SampleEntitiesDrops -> LOjK:
    react.graph.IFormatter formatter -> opbQ
    18:27:void <init>() -> <init>
    32:38:void construct() -> AqbF
    43:44:void sample() -> fRun
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleEntitiesDrops$1 -> LOjK$1:
    react.sampler.SampleEntitiesDrops this$0 -> XdxL
    20:20:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> TxuD
react.sampler.SampleEntitiesLiving -> wTtg:
    react.graph.IFormatter formatter -> opbQ
    18:27:void <init>() -> <init>
    32:38:void construct() -> AqbF
    43:44:void sample() -> fRun
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleEntitiesLiving$1 -> wTtg$1:
    react.sampler.SampleEntitiesLiving this$0 -> sAcT
    20:20:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> TxuD
react.sampler.SampleEntitiesTiles -> LrMs:
    react.graph.IFormatter formatter -> opbQ
    18:27:void <init>() -> <init>
    32:38:void construct() -> AqbF
    43:44:void sample() -> fRun
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleEntitiesTiles$1 -> LrMs$1:
    react.sampler.SampleEntitiesTiles this$0 -> qvrK
    20:20:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> TxuD
react.sampler.SampleEntitiesTotal -> oVPC:
    react.graph.IFormatter formatter -> opbQ
    18:27:void <init>() -> <init>
    32:38:void construct() -> AqbF
    43:44:void sample() -> fRun
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleEntitiesTotal$1 -> oVPC$1:
    react.sampler.SampleEntitiesTotal this$0 -> xkFH
    20:20:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> TxuD
react.sampler.SampleEntityDroppedTicks -> uNoU:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleEntityDroppedTicks$1 -> uNoU$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> giTo
    21:21:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleEntityTime -> IiDm:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleEntityTime$1 -> IiDm$1:
    react.sampler.SampleEntityTime this$0 -> foCW
    21:21:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleEntityTimeLock -> ECEs:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleEntityTimeLock$1 -> ECEs$1:
    react.sampler.SampleEntityTimeLock this$0 -> kJmL
    21:21:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleExplosionTime -> ivaP:
    react.graph.IFormatter formatter -> opbQ
    18:27:void <init>() -> <init>
    32:38:void construct() -> AqbF
    43:44:void sample() -> fRun
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleExplosionTime$1 -> ivaP$1:
    react.sampler.SampleExplosionTime this$0 -> SgKm
    20:20:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> TxuD
react.sampler.SampleFluidPerSecond -> VCtn:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleFluidPerSecond$1 -> VCtn$1:
    react.sampler.SampleFluidPerSecond this$0 -> jGhn
    21:21:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleFluidPerTick -> YwsO:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    46:53:void sample() -> fRun
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleFluidPerTick$1 -> YwsO$1:
    react.sampler.SampleFluidPerTick this$0 -> Timl
    21:21:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleFluidTickTime -> wUTw:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleFluidTickTime$1 -> wUTw$1:
    react.sampler.SampleFluidTickTime this$0 -> YqMs
    21:21:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleFluidTickUtilization -> pQBD:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    46:53:void sample() -> fRun
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleFluidTickUtilization$1 -> pQBD$1:
    react.sampler.SampleFluidTickUtilization this$0 -> jilQ
    21:21:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleHopperPerSecond -> HnSB:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleHopperPerSecond$1 -> HnSB$1:
    react.sampler.SampleHopperPerSecond this$0 -> kmPU
    21:21:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleHopperPerTick -> IXCn:
    react.graph.IFormatter formatter -> opbQ
    19:29:void <init>() -> <init>
    34:40:void construct() -> AqbF
    47:54:void sample() -> fRun
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleHopperPerTick$1 -> IXCn$1:
    react.sampler.SampleHopperPerTick this$0 -> bbVN
    21:21:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleHopperTickTime -> HKoE:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleHopperTickTime$1 -> HKoE$1:
    react.sampler.SampleHopperTickTime this$0 -> qvqN
    21:21:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleHopperTickUtilization -> opBM:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    46:53:void sample() -> fRun
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleHopperTickUtilization$1 -> opBM$1:
    react.sampler.SampleHopperTickUtilization this$0 -> VhDc
    21:21:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleMemoryAllocated -> CgSh:
    react.graph.IFormatter formatter -> opbQ
    18:27:void <init>() -> <init>
    32:38:void construct() -> AqbF
    43:44:void sample() -> fRun
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleMemoryAllocated$1 -> CgSh$1:
    react.sampler.SampleMemoryAllocated this$0 -> HVKU
    20:20:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> TxuD
react.sampler.SampleMemoryAllocationPerSecond -> ghIs:
    react.graph.IFormatter formatter -> opbQ
    18:27:void <init>() -> <init>
    32:38:void construct() -> AqbF
    43:44:void sample() -> fRun
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleMemoryAllocationPerSecond$1 -> ghIs$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> aosV
    20:20:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> TxuD
react.sampler.SampleMemoryFree -> BBLM:
    react.graph.IFormatter formatter -> opbQ
    18:27:void <init>() -> <init>
    32:38:void construct() -> AqbF
    43:44:void sample() -> fRun
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleMemoryFree$1 -> BBLM$1:
    react.sampler.SampleMemoryFree this$0 -> aNPt
    20:20:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> TxuD
react.sampler.SampleMemoryMax -> jiAu:
    react.graph.IFormatter formatter -> opbQ
    18:27:void <init>() -> <init>
    32:38:void construct() -> AqbF
    43:44:void sample() -> fRun
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleMemoryMax$1 -> jiAu$1:
    react.sampler.SampleMemoryMax this$0 -> FrHX
    20:20:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> TxuD
react.sampler.SampleMemoryUse -> wvvk:
    react.graph.IFormatter formatter -> opbQ
    18:27:void <init>() -> <init>
    32:38:void construct() -> AqbF
    43:44:void sample() -> fRun
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleMemoryUse$1 -> wvvk$1:
    react.sampler.SampleMemoryUse this$0 -> qUOV
    20:20:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> TxuD
react.sampler.SampleRedstonePerSecond -> DPay:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleRedstonePerSecond$1 -> DPay$1:
    react.sampler.SampleRedstonePerSecond this$0 -> uGhK
    21:21:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleRedstonePerTick -> tmmg:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    46:53:void sample() -> fRun
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleRedstonePerTick$1 -> tmmg$1:
    react.sampler.SampleRedstonePerTick this$0 -> HxMC
    21:21:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleRedstoneTickTime -> nuOA:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleRedstoneTickTime$1 -> nuOA$1:
    react.sampler.SampleRedstoneTickTime this$0 -> msVE
    21:21:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleRedstoneTickUtilization -> nRje:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    46:53:void sample() -> fRun
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleRedstoneTickUtilization$1 -> nRje$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> nKeC
    21:21:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleSyncQueue -> kAPv:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleSyncQueue$1 -> kAPv$1:
    react.sampler.SampleSyncQueue this$0 -> fCks
    21:21:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleTickTime -> Whyo:
    react.graph.IFormatter formatter -> opbQ
    react.gmath.Average aa -> nTUl
    17:29:void <init>() -> <init>
    34:40:void construct() -> AqbF
    45:47:void sample() -> fRun
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleTickTime$1 -> Whyo$1:
    react.sampler.SampleTickTime this$0 -> hIsQ
    22:22:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> TxuD
react.sampler.SampleTickUtilization -> ntlg:
    react.graph.IFormatter formatter -> opbQ
    react.gmath.Average aa -> nTUl
    17:29:void <init>() -> <init>
    34:40:void construct() -> AqbF
    45:47:void sample() -> fRun
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleTickUtilization$1 -> ntlg$1:
    react.sampler.SampleTickUtilization this$0 -> BmkO
    22:22:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> TxuD
react.sampler.SampleTicksPerSecond -> avxa:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleTicksPerSecond$1 -> avxa$1:
    react.sampler.SampleTicksPerSecond this$0 -> suGL
    21:21:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleTileDroppedTicks -> nIyB:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleTileDroppedTicks$1 -> nIyB$1:
    react.sampler.SampleTileDroppedTicks this$0 -> FWrt
    21:21:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleTileTime -> kstQ:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleTileTime$1 -> kstQ$1:
    react.sampler.SampleTileTime this$0 -> XuyY
    21:21:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.sampler.SampleTileTimeLock -> YDlr:
    react.graph.IFormatter formatter -> opbQ
    19:28:void <init>() -> <init>
    33:39:void construct() -> AqbF
    44:45:void sample() -> fRun
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> PBWE
react.sampler.SampleTileTimeLock$1 -> YDlr$1:
    react.sampler.SampleTileTimeLock this$0 -> TXkX
    21:21:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> TxuD
react.security.checkpoints.SecurityCheckpointAlpha -> ntmP:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> xaNS
    78:148:void doScan(java.lang.Runnable) -> lmyI
    152:181:byte[] readResource(java.io.File,java.lang.String) -> fmIT
    186:217:react.glang.GMap scan(java.io.File) -> lmyI
    33:33:byte[] access$000(java.io.File,java.lang.String) -> lmyI
react.security.checkpoints.SecurityCheckpointAlpha$1 -> ntmP$1:
    java.lang.Runnable val$r -> IGjd
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> ntmP$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> dNhR
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> IptF:
    java.lang.String ip -> bPqt
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> TiDJ:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> TiDJ$1:
    java.io.File val$f -> KyFV
    react.security.locks.SecurityLockAlpha this$0 -> lyCe
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> XdPq:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> bXJf
react.slate.PhantomSlate -> kRUe:
    react.glang.GList lines -> rFoF
    react.glang.GList viewers -> sBFK
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> KNTR
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> dfuK
    44:45:void set(int,java.lang.String) -> lmyI
    50:51:void setLines(react.glang.GList) -> jFOS
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> uOPM
    91:95:void addViewer(org.bukkit.entity.Player) -> bXJf
    100:102:void removeViewer(org.bukkit.entity.Player) -> paVY
    107:107:react.glang.GList getViewers() -> ebHa
    113:113:boolean isViewing(org.bukkit.entity.Player) -> tBmu
    119:120:void addLine(java.lang.String) -> pOrf
    125:126:void clearLines() -> JIiB
react.slate.Slate -> pXsg:
    void build() -> uOPM
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> dfuK
    void set(int,java.lang.String) -> lmyI
    void setLines(react.glang.GList) -> jFOS
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> bXJf
    void addLine(java.lang.String) -> pOrf
    void clearLines() -> JIiB
    void removeViewer(org.bukkit.entity.Player) -> paVY
    react.glang.GList getViewers() -> ebHa
    boolean isViewing(org.bukkit.entity.Player) -> tBmu
    void update() -> update
react.slate.SlateUtil -> IFcO:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> imsY
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> klIw
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> fmIT
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> lmyI
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> jEpN
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> fmIT
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> fmIT
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> lmyI
    186:196:java.lang.String convertJSON(java.lang.String) -> fRun
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> lmyI
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> fmIT
react.surge.Main -> FFJx:
    react.glang.GList plugins -> GcjP
    react.glang.GMap pluginInstances -> GSJC
    react.glang.GList controllerSet -> ghui
    react.glang.GMap anchors -> DQoj
    react.glang.GList classes -> AaxL
    java.lang.reflect.Field nsField -> vdaN
    java.lang.reflect.Field thField -> mjhJ
    react.glang.GList tracks -> ynJi
    long nsf -> DQpP
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> weys
    90:109:long getNanoSync() -> kIeX
    114:115:void requestResetNanos() -> Usyd
    119:127:void requestReload() -> Nwur
    131:134:void requestReload(java.lang.Runnable) -> jEpN
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> fmIT
    201:218:void onStop() -> uNrK
    224:224:void onPostInit() -> VDYX
    230:230:void onPreInit() -> LqpL
    234:245:void shutDownAmps() -> ofrm
    249:458:void initializeAmps() -> BSSU
    463:504:void doScan() -> NUsU
    508:530:void scanForPoolDefiners() -> gFJi
    534:550:void scanForRawEvents() -> EJyI
    554:570:void scanForDynamicTrack() -> JbyV
    574:595:void scanForAmps() -> WrPs
    600:611:void onTick() -> gxeL
react.surge.Main$1 -> FFJx$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> GYnj:
    react.surge.control.AmpedPlugin plugin -> aNTD
    boolean connected -> connected
    int masterTask -> cCXT
    17:21:void <init>(react.surge.control.AmpedPlugin) -> <init>
    25:25:react.surge.control.AmpedPlugin getPluginInstance() -> XcqW
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> OPfb
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> fmIT
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> fmIT
    113:114:void stopTask(int) -> dwcr
    57:57:void access$0(react.surge.PluginAmp) -> fmIT
react.surge.PluginAmp$1 -> GYnj$1:
    react.surge.PluginAmp this$0 -> qUPn
    1:37:void <init>(react.surge.PluginAmp) -> <init>
    42:44:void run() -> run
react.surge.PluginAmp$2 -> GYnj$2:
    react.surge.PluginAmp this$0 -> qUPn
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:53:void run() -> run
react.surge.Surge -> DsJK:
    react.surge.PluginAmp amp -> vlpi
    react.glang.GList tickComponents -> jGjv
    react.glang.GList atickComponents -> Npoi
    react.surge.sched.TaskManager taskmgr -> bkHv
    react.surge.hotload.HotloadManager hotloadmgr -> rFqj
    java.lang.Thread mainThread -> LjjE
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> fmIT
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> AqbF
    44:44:java.io.File folder() -> YUrf
    49:51:java.io.File getPluginJarFile() -> TFdO
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> tTOK
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> IOVO
    74:74:react.glang.GList getTickComponents() -> ejXE
    79:79:react.glang.GList getAsyncTickComponents() -> Wqol
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> fmIT
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> lmyI
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> fmIT
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> tfAx
    126:126:boolean hasAmp() -> kQyD
    131:131:react.surge.PluginAmp getAmp() -> sYqA
    136:136:react.surge.sched.TaskManager getTaskManager() -> Fxre
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> OHYA
react.surge.cluster.Cluster -> PJwQ:
    react.surge.cluster.ClusterType type -> WkJM
    java.lang.Object t -> qnSX
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> WrTF
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> IGCu:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> jFaH:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> Xlaj:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> QVkX:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> NgTw:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> aeyl:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> HwFO:
    react.surge.cluster.ClusterType INT -> AryI
    react.surge.cluster.ClusterType BOOLEAN -> ETrF
    react.surge.cluster.ClusterType STRING -> HDiR
    react.surge.cluster.ClusterType STRING_LIST -> Ospy
    react.surge.cluster.ClusterType DOUBLE -> GRge
    react.surge.cluster.ClusterType LONG -> mkHD
    react.surge.cluster.ClusterType[] ENUM$VALUES -> QFsL
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> vswE:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> WavQ
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> fmIT
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> fmIT
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> Fxrd
react.surge.cluster.ConfigurationDataOutput -> kIcq:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> lmyI
react.surge.cluster.DataCluster -> TGDJ:
    react.glang.GMap clusters -> NqOU
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> DakV
    29:33:void fromJson(react.json.JSONObject) -> Plhx
    37:44:react.json.JSONObject toJson() -> Know
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> nBQX
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> fmIT
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> PcyT
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> vABq
    194:195:void set(java.lang.String,int) -> Plhx
    199:200:void set(java.lang.String,boolean) -> jEpN
    204:205:void set(java.lang.String,double) -> jEpN
    209:210:void set(java.lang.String,long) -> jEpN
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> fmIT
react.surge.cluster.ICluster -> YpFC:
    react.surge.cluster.ClusterType getType() -> WrTF
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> IFcb:
react.surge.cluster.IDataInput -> AaOm:
    react.surge.cluster.DataCluster read(java.io.File) -> jEpN
react.surge.cluster.IDataOutput -> WaMK:
    void write(react.surge.cluster.DataCluster,java.io.File) -> fmIT
react.surge.cluster.Key -> CpEY:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> XdOo:
    int value() -> value
react.surge.cluster.KeyStore -> qeGe:
react.surge.cluster.ReflectedConfigurationException -> yBLB:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> wnhl:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> jEpN
react.surge.cluster.YamlDataOutput -> royv:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> fmIT
react.surge.collection.GSound -> cBLN:
    java.lang.String sound -> mrwN
    org.bukkit.Sound iSound -> AQWs
    java.lang.Float volume -> JmTA
    java.lang.Float pitch -> hRea
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> OaWk
    61:72:void play(org.bukkit.Location) -> Plhx
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> fmIT
    93:93:java.lang.String getSound() -> DbKv
    98:99:void setSound(java.lang.String) -> dwcr
    103:103:org.bukkit.Sound getiSound() -> vJHn
    108:109:void setiSound(org.bukkit.Sound) -> fmIT
    113:113:java.lang.Float getVolume() -> pbJP
    118:119:void setVolume(java.lang.Float) -> fmIT
    123:123:java.lang.Float getPitch() -> HLVD
    128:129:void setPitch(java.lang.Float) -> lmyI
react.surge.control.AmpedPlugin -> eQCv:
    react.glang.GList controllers -> Qhuo
    react.gconcurrent.ParallelPoolManager pp -> jHKS
    react.surge.server.CoreTickThread ctt -> jXlF
    24:50:void <init>() -> <init>
    void doScan() -> NUsU
    long getNanoSync() -> kIeX
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:97:void onDisable() -> onDisable
    102:102:react.glang.GList getControllers() -> uFcu
    108:109:void registerController(react.surge.control.IController) -> fmIT
    114:125:void onTick() -> gxeL
    130:130:java.lang.String getTickName() -> GPuT
    136:136:react.gconcurrent.ParallelPoolManager getThreadPool() -> INxL
    142:257:void destroyOldThreads() -> oETM
    void onControllerRegistry() -> weys
    void onStart(react.surge.util.Protocol) -> fmIT
    void onStop() -> uNrK
    void onPostInit() -> VDYX
    void onPreInit() -> LqpL
react.surge.control.AmpedPlugin$1 -> eQCv$1:
    react.surge.control.AmpedPlugin this$0 -> eboF
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> OjRN
react.surge.control.AmpedPlugin$2 -> eQCv$2:
    react.surge.control.AmpedPlugin this$0 -> eboF
    1:155:void <init>(react.surge.control.AmpedPlugin) -> <init>
    160:250:void run() -> run
react.surge.control.Control -> hkMk:
react.surge.control.Controller -> cBLi:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> gFHe:
react.surge.control.Enable -> lCta:
react.surge.control.IController -> xaJo:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> upqw:
react.surge.control.Plugin -> ycmC:
react.surge.control.SurgePlugin -> docN:
    void onStart(react.surge.util.Protocol) -> fmIT
    void onStop() -> uNrK
    void onPostInit() -> VDYX
    void onPreInit() -> LqpL
    void onControllerRegistry() -> weys
    void registerController(react.surge.control.IController) -> fmIT
    react.glang.GList getControllers() -> uFcu
    react.gconcurrent.ParallelPoolManager getThreadPool() -> INxL
react.surge.hotload.HotloadManager -> uOPe:
    react.glang.GMap filemods -> sSFN
    react.glang.GMap filesizes -> QGWE
    react.glang.GMap fileacts -> RJYf
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> fmIT
    35:38:void untrack(java.io.File) -> tTOK
    42:45:void untrackall() -> Wibg
    50:86:void onTick() -> gxeL
    91:91:java.lang.String getTickName() -> GPuT
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> fmIT
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> lmyI
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> jEpN
react.surge.hotload.HotloadManager$1 -> uOPe$1:
    react.surge.hotload.HotloadManager this$0 -> JeFK
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> dEPD:
    boolean init -> pssA
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> oqPj
    java.lang.Class IChatBaseComponent -> wWEb
    java.lang.Class ChatSerializer -> Kggy
    java.lang.Class PacketPlayOutPlayerInfo -> fetV
    java.lang.Class PlayerInfoData -> tVMD
    java.lang.Class EnumPlayerInfoAction -> FFvg
    java.lang.Class GameProfile -> nnLm
    java.lang.Class EnumGamemode -> aEdY
    java.lang.Class TileEntitySkull -> BnOH
    java.lang.Class LoadingCache -> feuJ
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> qmWi:
    react.surge.nms.NMSX bountifulAPI -> HDmN
    boolean useOldMethods -> RdLt
    java.lang.String nmsver -> MnMp
    java.lang.Object eTimes -> MSyx
    java.lang.Object eTitle -> RuLo
    java.lang.Object eSubtitle -> UTBg
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> fmIT
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> BSBa
    75:89:java.lang.Class getCBClass(java.lang.String) -> pXdW
    96:104:java.lang.Object serializeChat(java.lang.String) -> CxHB
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> lmyI
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> fmIT
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> dpHl
    151:151:java.lang.String craftPackage() -> KLkm
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> fmIT
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> fmIT
    197:207:java.lang.Class getNMSClass(java.lang.String) -> Whmu
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> fmIT
    279:280:void clearTitle(org.bukkit.entity.Player) -> HvUm
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> lmyI
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> fmIT
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> fmIT
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> Jbha
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> vABq
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> kABv
    434:447:int ping(org.bukkit.entity.Player) -> iCOi
react.surge.nms.NMSX$1 -> qmWi$1:
    org.bukkit.entity.Player val$player -> XmcW
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> qmWi$2:
    org.bukkit.entity.Player val$player -> XmcW
    java.lang.String val$message -> mawY
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> kket:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> kbyX
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> fmIT
    68:82:void clearTitle(org.bukkit.entity.Player) -> HvUm
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> fmIT
react.surge.nms.PacketUtil$V -> kket$fmIT:
    react.surge.nms.PacketUtil$V R17 -> vlrM
    react.surge.nms.PacketUtil$V R18 -> jYNx
    react.surge.nms.PacketUtil$V R19 -> UeDV
    react.surge.nms.PacketUtil$V R111 -> ObrN
    react.surge.nms.PacketUtil$V R110 -> EUTq
    react.surge.nms.PacketUtil$V R112 -> Kgfx
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> gWvD
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> jhbp:
    java.lang.String title -> title
    java.lang.String subTitle -> SDjp
    java.lang.String action -> action
    java.lang.Integer fadeIn -> Hwov
    java.lang.Integer fadeOut -> JSbp
    java.lang.Integer stayTime -> PCrR
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> SvUR
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> SCas
    79:80:void setSubTitle(java.lang.String) -> pjFS
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> UJJC
    99:100:void setFadeIn(java.lang.Integer) -> jEpN
    104:104:java.lang.Integer getFadeOut() -> VMLW
    109:110:void setFadeOut(java.lang.Integer) -> tTOK
    114:114:java.lang.Integer getStayTime() -> ghPL
    119:120:void setStayTime(java.lang.Integer) -> Plhx
react.surge.nms.VersionBukkit -> TheJ:
    react.surge.nms.VersionBukkit VU -> uGjy
    react.surge.nms.VersionBukkit V7 -> WIHG
    react.surge.nms.VersionBukkit V8 -> elCL
    react.surge.nms.VersionBukkit V9 -> PDSY
    react.surge.nms.VersionBukkit V11 -> rhyX
    react.surge.nms.VersionBukkit V111 -> UTEl
    react.surge.nms.VersionBukkit V112 -> eRRr
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> VxkV
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> eagl
    27:32:boolean uc() -> uiHM
    37:67:react.surge.nms.VersionBukkit get() -> mrQQ
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> Hedj:
    void burst(java.lang.Object) -> bXJf
    void setTimeLock(double) -> tBmu
    double getEstimatedTimeUse() -> FWPW
    int flush() -> gyQI
    int flush(react.gbench.Profiler) -> fmIT
    void queue(java.lang.Object) -> paVY
    void queue(java.util.List) -> jEpN
    void queue(java.lang.Object[]) -> fmIT
react.surge.sched.ICancellable -> Noff:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> TiGt:
    void onTick() -> gxeL
    java.lang.String getTickName() -> GPuT
react.surge.sched.ITask -> XuUG:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> AaRs
    java.lang.String getName() -> getName
    double getComputeTime() -> Wiae
    double getTotalComputeTime() -> QVoC
    double getActiveTime() -> MKEm
    boolean hasCompleted() -> twHx
react.surge.sched.Task -> PCJF:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> veEh
    double computeTime -> oycU
    double totalComputeTime -> kBcD
    double activeTime -> Ired
    boolean completed -> completed
    react.gbench.Profiler profiler -> veEq
    react.gbench.Profiler activeProfiler -> lhIk
    int ticks -> aFGC
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> tTOK
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> AaRs
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> Wiae
    150:150:boolean hasCompleted() -> twHx
    156:156:double getTotalComputeTime() -> QVoC
    162:162:double getActiveTime() -> MKEm
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> fmIT
    15:15:void access$1(react.surge.sched.Task,boolean) -> fmIT
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> lmyI
    14:14:void access$3(react.surge.sched.Task,double) -> fmIT
    12:12:void access$4(react.surge.sched.Task,double) -> lmyI
    14:14:double access$5(react.surge.sched.Task) -> jEpN
    13:13:void access$6(react.surge.sched.Task,double) -> jEpN
    13:13:double access$7(react.surge.sched.Task) -> tTOK
    12:12:double access$8(react.surge.sched.Task) -> Plhx
react.surge.sched.Task$1 -> PCJF$1:
    react.surge.sched.Task this$0 -> qCsG
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> PCJF$2:
    react.surge.sched.Task this$0 -> qCsG
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> PCJF$3:
    react.surge.sched.Task this$0 -> qCsG
    int val$total -> GSNW
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> GsdG:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> veEh
    double computeTime -> oycU
    double totalComputeTime -> kBcD
    double activeTime -> Ired
    boolean completed -> completed
    react.gbench.Profiler profiler -> veEq
    react.gbench.Profiler activeProfiler -> lhIk
    int ticks -> aFGC
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> tTOK
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> AaRs
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> Wiae
    101:101:boolean hasCompleted() -> twHx
    107:107:double getTotalComputeTime() -> QVoC
    113:113:double getActiveTime() -> MKEm
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> fmIT
    12:12:void access$1(react.surge.sched.TaskLater,double) -> fmIT
    13:13:double access$2(react.surge.sched.TaskLater) -> lmyI
    12:12:double access$3(react.surge.sched.TaskLater) -> jEpN
    13:13:void access$4(react.surge.sched.TaskLater,double) -> lmyI
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> tTOK
    14:14:double access$6(react.surge.sched.TaskLater) -> Plhx
    14:14:void access$7(react.surge.sched.TaskLater,double) -> jEpN
react.surge.sched.TaskLater$1 -> GsdG$1:
    react.surge.sched.TaskLater this$0 -> MnRA
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> xFyr:
    react.glang.GList tasks -> SoIc
    react.glang.GMap taskProfiles -> lFEp
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> fmIT
    25:35:void onTick() -> gxeL
    39:40:void putFinishingTask(react.surge.sched.ITask) -> lmyI
    44:53:void putTask(react.surge.sched.ITask) -> jEpN
    58:58:java.lang.String getTickName() -> GPuT
    63:63:react.glang.GList getTasks() -> Nfyc
    68:68:react.glang.GMap getTaskProfiles() -> HKvY
react.surge.sched.TaskProfile -> ghMl:
    double activeTime -> Ired
    double computeTickTime -> mkKq
    double computeTime -> oycU
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> MKEm
    23:24:void setActiveTime(double) -> OaWk
    28:28:double getComputeTickTime() -> QVqY
    33:34:void setComputeTickTime(double) -> HvUm
    38:38:double getComputeTime() -> Wiae
    43:44:void setComputeTime(double) -> iCOi
react.surge.server.AsyncTick -> OaiK:
react.surge.server.CPS -> UQwo:
    react.glang.GMap keys -> CXAs
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> WhnW
    46:99:void scan() -> VfaT
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> jEpN
react.surge.server.CoreTickThread -> fKYO:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> xPKu:
    long memoryFree -> cwBD
    long memoryUsed -> SxSl
    long memoryMax -> QqmE
    long lastMemoryUsed -> PfXG
    long memoryUsedAfterGC -> wWFY
    long allocated -> NOPO
    long collected -> OlEh
    long collections -> EoIe
    long sms -> yLKW
    long memoryAllocatedPerTick -> Vxij
    long memoryCollectedPerTick -> CpsQ
    long memoryFullyAllocatedPerTick -> pssh
    long mah -> VWHK
    long mahs -> KxkM
    22:39:void <init>() -> <init>
    void onAllocationSet() -> sABM
    46:98:void run() -> run
    102:102:long getMemoryFree() -> nlgG
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> iDFH
    117:117:long getLastMemoryUsed() -> DPkl
    122:122:long getMemoryUsedAfterGC() -> dDvP
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> QgsM
    137:137:long getCollections() -> NolJ
    142:142:long getSms() -> fCLc
    147:147:long getMemoryAllocatedPerTick() -> jFfx
    152:152:long getMemoryCollectedPerTick() -> ObMA
    157:157:long getMemoryFullyAllocatedPerTick() -> sbbi
    162:162:long getMah() -> Fxsf
    167:167:long getMahs() -> Ihjo
react.surge.server.SuperSampler -> lMIl:
    react.gmath.Average ticksPerSecondL -> RBJe
    react.gmath.Average tickTimeL -> sBHt
    react.gmath.Average mahL -> nLKS
    double ticksPerSecond -> JmEB
    double ticksPerSecondRaw -> UTDv
    double tickTime -> wEdE
    double tickTimeRaw -> feum
    boolean running -> running
    boolean frozen -> PDVA
    double tickUtilizationRaw -> vvFR
    double tickUtilization -> PMGC
    double leftoverTickTime -> fvwT
    long memoryUse -> YycX
    long memoryAllocated -> dpsv
    long memoryCollected -> JTIB
    long mahs -> KxkM
    int totalChunks -> mkNa
    int totalEntities -> HVRi
    int totalDrops -> gaMJ
    int totalTiles -> Vgjy
    int totalLiving -> lFIH
    int chunksLoaded -> oGBI
    int chunksUnloaded -> ecUy
    react.surge.server.WorldMonitor worldMonitor -> dhdA
    react.surge.server.TPSMonitor tpsMonitor -> XwCk
    react.surge.server.MemoryMonitor memoryMonitor -> kmWv
    java.lang.StackTraceElement[] lockStack -> XUAa
    react.glang.GMap spikes -> axTg
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> gxeL
    154:154:java.lang.String getTickName() -> GPuT
    159:159:react.gmath.Average getTicksPerSecondL() -> Gjtw
    164:164:double getTicksPerSecond() -> fmRh
    169:169:double getTicksPerSecondRaw() -> qTLc
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> IymI
    184:184:react.gmath.Average getTickTimeL() -> XBSe
    189:189:double getTickTime() -> nKBj
    194:194:double getTickTimeRaw() -> rFNF
    199:199:double getTickUtilizationRaw() -> bqsX
    204:204:double getTickUtilization() -> RISV
    209:209:double getLeftoverTickTime() -> qeQR
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> bjFk
    219:219:long getMemoryUse() -> eroN
    224:224:long getMemoryAllocated() -> stHb
    229:229:long getMemoryCollected() -> lgDF
    234:234:react.gmath.Average getMahL() -> GkYc
    239:239:long getMahs() -> Ihjo
    244:244:int getTotalChunks() -> mGcF
    249:249:int getTotalEntities() -> kJMU
    254:254:int getTotalDrops() -> MJgg
    259:259:int getTotalTiles() -> GRGt
    264:264:int getTotalLiving() -> cliP
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> xXcK
    274:274:int getChunksLoaded() -> BRyG
    279:279:int getChunksUnloaded() -> qSnA
    284:285:void setTicksPerSecondL(react.gmath.Average) -> fmIT
    289:290:void setTickTimeL(react.gmath.Average) -> lmyI
    294:295:void setMahL(react.gmath.Average) -> jEpN
    299:300:void setTicksPerSecond(double) -> ejDm
    304:305:void setTicksPerSecondRaw(double) -> SvUR
    309:310:void setTickTime(double) -> dVCX
    314:315:void setTickTimeRaw(double) -> Jbhy
    319:320:void setRunning(boolean) -> yIjF
    324:325:void setTickUtilizationRaw(double) -> kbgn
    329:330:void setTickUtilization(double) -> oMQr
    334:335:void setLeftoverTickTime(double) -> HmeM
    339:340:void setMemoryUse(long) -> tBmu
    344:345:void setMemoryAllocated(long) -> OaWk
    349:350:void setMemoryCollected(long) -> HvUm
    354:355:void setMahs(long) -> iCOi
    359:360:void setTotalChunks(int) -> BSBa
    364:365:void setTotalEntities(int) -> pXdW
    369:370:void setTotalDrops(int) -> CxHB
    374:375:void setTotalTiles(int) -> Whmu
    379:380:void setTotalLiving(int) -> Jbha
    384:385:void setChunksLoaded(int) -> pjFS
    389:390:void setChunksUnloaded(int) -> WhnW
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> fmIT
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> fmIT
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> fmIT
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> BAwU
    419:419:react.glang.GMap getSpikes() -> vcPU
    31:31:void access$0(react.surge.server.SuperSampler,int) -> fmIT
    33:33:void access$1(react.surge.server.SuperSampler,int) -> lmyI
    34:34:void access$2(react.surge.server.SuperSampler,int) -> jEpN
    32:32:void access$3(react.surge.server.SuperSampler,int) -> tTOK
    35:35:void access$4(react.surge.server.SuperSampler,int) -> Plhx
    36:36:void access$5(react.surge.server.SuperSampler,int) -> vABq
    37:37:void access$6(react.surge.server.SuperSampler,int) -> vYtK
    19:19:void access$7(react.surge.server.SuperSampler,double) -> fmIT
    21:21:void access$8(react.surge.server.SuperSampler,double) -> lmyI
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> fmIT
    19:19:double access$10(react.surge.server.SuperSampler) -> lmyI
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> jEpN
    21:21:double access$12(react.surge.server.SuperSampler) -> tTOK
    18:18:void access$13(react.surge.server.SuperSampler,double) -> jEpN
    20:20:void access$14(react.surge.server.SuperSampler,double) -> tTOK
    24:24:void access$15(react.surge.server.SuperSampler,double) -> Plhx
    20:20:double access$16(react.surge.server.SuperSampler) -> Plhx
    25:25:void access$17(react.surge.server.SuperSampler,double) -> vABq
    25:25:double access$18(react.surge.server.SuperSampler) -> vABq
    26:26:void access$19(react.surge.server.SuperSampler,double) -> vYtK
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> fmIT
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> vYtK
    27:27:void access$22(react.surge.server.SuperSampler,long) -> fmIT
    28:28:void access$23(react.surge.server.SuperSampler,long) -> lmyI
    29:29:void access$24(react.surge.server.SuperSampler,long) -> jEpN
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> vtFh
    30:30:void access$26(react.surge.server.SuperSampler,long) -> tTOK
react.surge.server.SuperSampler$1 -> lMIl$1:
    react.surge.server.SuperSampler this$0 -> CGBi
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> fmIT
react.surge.server.SuperSampler$2 -> lMIl$2:
    react.surge.server.SuperSampler this$0 -> CGBi
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> yKEM
    106:107:void onSpike() -> rqCu
react.surge.server.SuperSampler$3 -> lMIl$3:
    react.surge.server.SuperSampler this$0 -> CGBi
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> sABM
react.surge.server.TPSMonitor -> xaNS:
    double tickTimeMS -> CiGU
    double rawTicksPerSecond -> fUYC
    react.gbench.Profiler tickProfiler -> SxUo
    react.gbench.Profiler tickTimeProfiler -> dyeg
    boolean ticked -> rFwq
    java.lang.Thread$State lastState -> FqpA
    double actualTickTimeMS -> fexi
    double ltt -> sSLa
    long lastTick -> ohHK
    boolean frozen -> PDVA
    java.lang.StackTraceElement[] lockedStack -> axkX
    double lmsx -> Cyey
    23:40:void <init>() -> <init>
    void onTicked() -> yKEM
    void onSpike() -> rqCu
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> fmIT
    160:160:double getTickTimeMS() -> kkoC
    165:165:double getRawTicksPerSecond() -> nmHc
    170:170:react.gbench.Profiler getTickProfiler() -> ndWY
    175:175:boolean isTicked() -> RtHq
    180:181:void markTick() -> LHCs
    185:185:react.gbench.Profiler getTickTimeProfiler() -> gxsc
    190:190:java.lang.Thread$State getLastState() -> KUah
    195:195:double getActualTickTimeMS() -> NNKB
    200:200:double getLtt() -> mjDl
    205:205:long getLastTick() -> GsXH
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> KxFM
react.surge.server.WorldMonitor -> dfuK:
    boolean chunksChanged -> uGoy
    boolean dropChanged -> NiEY
    boolean tileChanged -> UmYD
    boolean livingChanged -> uYRk
    boolean totalChanged -> eRSh
    boolean updated -> SUpd
    int totalChunks -> mkNa
    int totalDrops -> gaMJ
    int totalTiles -> Vgjy
    int totalLiving -> lFIH
    int totalEntities -> HVRi
    int chunksLoaded -> oGBI
    int chunksUnloaded -> ecUy
    long ms -> WrPs
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> fmIT
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> lmyI
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> fmIT
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> fmIT
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> fmIT
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> fmIT
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> fmIT
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> fmIT
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> fmIT
    130:131:void doUpdate() -> sjuK
    135:186:void sample() -> fRun
    190:196:void sampleTotalCount() -> xicT
    200:206:void sampleLivingCount() -> MRwK
    210:219:void sampleTileCount() -> vlOC
    223:229:void sampleDropCount() -> EmcW
    233:239:void sampleChunkCount() -> gNcl
react.surge.text.PhantomSpinner -> ebHa:
    react.surge.text.ProgressSpinner s -> IGsJ
    react.surge.text.ProgressSpinner c -> mkLr
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> JIiB:
    java.lang.String[] chars -> KMxp
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> UBeU
    react.surge.text.ProgressSpinner NETWORK -> wpYm
    react.surge.text.ProgressSpinner CIRCLES -> iMbP
    react.surge.text.ProgressSpinner RANDOMS -> tgTV
    react.surge.text.ProgressSpinner MERGERS -> nwES
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> FyYg
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> imsY:
    int value() -> value
react.surge.util.Area -> klIw:
    org.bukkit.Location location -> Cpwo
    java.lang.Double radius -> Hwvn
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> fmIT
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> IyrF
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> vABq
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> vYtK
    109:109:boolean isWithin(org.bukkit.Location) -> vtFh
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> tTOK
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> fmIT
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> hcJG
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> nRxO
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> kABv
    257:257:java.lang.Double getRadius() -> ObRL
    268:269:void setRadius(java.lang.Double) -> jEpN
    278:283:org.bukkit.Location random() -> loVN
react.surge.util.Axis -> weys:
    react.surge.util.Axis X -> pcXV
    react.surge.util.Axis Y -> EoOI
    react.surge.util.Axis Z -> FjBE
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> tEPq
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> vlRW
    29:29:org.bukkit.util.Vector negative() -> KxHh
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> kIeX:
    react.surge.util.BlastResistance BARRIER -> DIhK
    react.surge.util.BlastResistance BEDROCK -> Irik
    react.surge.util.BlastResistance COMMAND -> IQHK
    react.surge.util.BlastResistance ENDER_PORTAL -> uXuQ
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> smCB
    react.surge.util.BlastResistance ANVIL -> cebc
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> HETH
    react.surge.util.BlastResistance OBSIDIAN -> jXuG
    react.surge.util.BlastResistance ENDER_CHEST -> UBgp
    react.surge.util.BlastResistance WATER -> HpGr
    react.surge.util.BlastResistance LAVA -> DAVf
    react.surge.util.BlastResistance STATIONARY_WATER -> rPKn
    react.surge.util.BlastResistance DRAGON_EGG -> UdkY
    react.surge.util.BlastResistance ENDER_STONE -> BDAd
    react.surge.util.BlastResistance COAL_BLOCK -> WkQp
    react.surge.util.BlastResistance DIAMOND_BLOCK -> iMbI
    react.surge.util.BlastResistance EMERALD_BLOCK -> rrNb
    react.surge.util.BlastResistance GOLD_BLOCK -> LcAO
    react.surge.util.BlastResistance IRON_BLOCK -> rPKd
    react.surge.util.BlastResistance REDSTONE_BLOCK -> fUYV
    react.surge.util.BlastResistance BRICK -> Rtqr
    react.surge.util.BlastResistance BRICK_STAIRS -> TPeK
    react.surge.util.BlastResistance HARD_CLAY -> jGri
    react.surge.util.BlastResistance STONE -> JSiE
    react.surge.util.BlastResistance SMOOTH_BRICK -> pJFE
    react.surge.util.BlastResistance SMOOTH_STAIRS -> nebH
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> OQwL
    react.surge.util.BlastResistance STONE_SLAB2 -> vSfN
    react.surge.util.BlastResistance IRON_DOOR -> WjpW
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> keHt
    react.surge.util.BlastResistance IRON_TRAPDOOR -> plHL
    react.surge.util.BlastResistance MOB_SPAWNER -> kTHC
    react.surge.util.BlastResistance WEB -> SxVn
    react.surge.util.BlastResistance DISPENSER -> jYTp
    react.surge.util.BlastResistance DROPPER -> NiHK
    react.surge.util.BlastResistance FURNACE -> dFar
    react.surge.util.BlastResistance BURNING_FURNACE -> Ypuu
    react.surge.util.BlastResistance BEACON -> IrlF
    react.surge.util.BlastResistance COAL_ORE -> GAqW
    react.surge.util.BlastResistance COCOA -> RmEn
    react.surge.util.BlastResistance DIAMOND_ORE -> YiIb
    react.surge.util.BlastResistance EMERALD_ORE -> IXxm
    react.surge.util.BlastResistance FENCE -> qoON
    react.surge.util.BlastResistance FENCE_GATE -> xtBx
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> lElK
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> TQHx
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> SDso
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> cTbv
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> mjqq
    react.surge.util.BlastResistance ACACIA_FENCE -> NXHh
    react.surge.util.BlastResistance BIRCH_FENCE -> cCba
    react.surge.util.BlastResistance DARK_OAK_FENCE -> RRsH
    react.surge.util.BlastResistance SPRUCE_FENCE -> hlcc
    react.surge.util.BlastResistance JUNGLE_FENCE -> xYoP
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> qCyI
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> LcEA
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> ebyt
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> vvMW
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> jPfo
    react.surge.util.BlastResistance QUARTZ_STAIRS -> eJHR
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> Irjb
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> YqYJ
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> XnUk
    react.surge.util.BlastResistance WOOD_STAIRS -> oWdr
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> DRYq
    react.surge.util.BlastResistance ACACIA_DOOR -> jGuU
    react.surge.util.BlastResistance BIRCH_DOOR -> cLSF
    react.surge.util.BlastResistance DARK_OAK_DOOR -> Abco
    react.surge.util.BlastResistance SPRUCE_DOOR -> WIOx
    react.surge.util.BlastResistance JUNGLE_DOOR -> LtEO
    react.surge.util.BlastResistance GOLD_ORE -> mjpW
    react.surge.util.BlastResistance HOPPER -> oNtC
    react.surge.util.BlastResistance IRON_ORE -> eAVj
    react.surge.util.BlastResistance LAPIS_BLOCK -> iohs
    react.surge.util.BlastResistance LAPIS_ORE -> vvPC
    react.surge.util.BlastResistance QUARTZ_ORE -> hBRm
    react.surge.util.BlastResistance REDSTONE_ORE -> UvQQ
    react.surge.util.BlastResistance TRAP_DOOR -> pAYa
    react.surge.util.BlastResistance WOOD -> FOrX
    react.surge.util.BlastResistance CHEST -> LITH
    react.surge.util.BlastResistance TRAPPED_CHEST -> QrUi
    react.surge.util.BlastResistance WORKBENCH -> TGxv
    react.surge.util.BlastResistance CAULDRON -> bABX
    react.surge.util.BlastResistance LOG -> htur
    react.surge.util.BlastResistance LOG_2 -> RuYU
    react.surge.util.BlastResistance BOOKSHELF -> RmHi
    react.surge.util.BlastResistance BANNER -> QjFJ
    react.surge.util.BlastResistance STANDING_BANNER -> HDwX
    react.surge.util.BlastResistance WALL_BANNER -> MDFg
    react.surge.util.BlastResistance JACK_O_LANTERN -> gPQU
    react.surge.util.BlastResistance MELON_BLOCK -> GuXL
    react.surge.util.BlastResistance SKULL -> JCKx
    react.surge.util.BlastResistance PUMPKIN -> ifwN
    react.surge.util.BlastResistance SIGN -> YGGh
    react.surge.util.BlastResistance SIGN_POST -> eIiK
    react.surge.util.BlastResistance WALL_SIGN -> rjCG
    react.surge.util.BlastResistance QUARTZ_BLOCK -> gPPb
    react.surge.util.BlastResistance NOTE_BLOCK -> nKsN
    react.surge.util.BlastResistance RED_SANDSTONE -> sRqk
    react.surge.util.BlastResistance SANDSTONE -> FaSg
    react.surge.util.BlastResistance WOOL -> huVg
    react.surge.util.BlastResistance MONSTER_EGG -> qCyk
    react.surge.util.BlastResistance RAILS -> btEp
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> TsMa
    react.surge.util.BlastResistance DETECTOR_RAIL -> SVXH
    react.surge.util.BlastResistance POWERED_RAIL -> JBkg
    react.surge.util.BlastResistance CLAY -> opxc
    react.surge.util.BlastResistance DIRT -> GKDy
    react.surge.util.BlastResistance GRASS -> TPih
    react.surge.util.BlastResistance GRAVEL -> RuXO
    react.surge.util.BlastResistance SPONGE -> EVAO
    react.surge.util.BlastResistance BREWING_STAND -> rPSJ
    react.surge.util.BlastResistance STONE_BUTTON -> suYM
    react.surge.util.BlastResistance WOOD_BUTTON -> XKwO
    react.surge.util.BlastResistance CAKE_BLOCK -> TroV
    react.surge.util.BlastResistance ICE -> iokY
    react.surge.util.BlastResistance PACKED_ICE -> hSVb
    react.surge.util.BlastResistance LEVER -> GJfl
    react.surge.util.BlastResistance MYCEL -> smHk
    react.surge.util.BlastResistance PISTON_BASE -> tUxS
    react.surge.util.BlastResistance PISTON_EXTENSION -> VqEl
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> nCeo
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> Meiy
    react.surge.util.BlastResistance GOLD_PLATE -> hRvH
    react.surge.util.BlastResistance IRON_PLATE -> jalq
    react.surge.util.BlastResistance STONE_PLATE -> gquj
    react.surge.util.BlastResistance WOOD_PLATE -> kCMs
    react.surge.util.BlastResistance SAND -> gidc
    react.surge.util.BlastResistance SOUL_SAND -> wVpR
    react.surge.util.BlastResistance CACTUS -> wxrq
    react.surge.util.BlastResistance LADDER -> QaWF
    react.surge.util.BlastResistance NETHERRACK -> VWSd
    react.surge.util.BlastResistance GLASS -> GSYJ
    react.surge.util.BlastResistance THIN_GLASS -> mtHN
    react.surge.util.BlastResistance STAINED_GLASS -> Udoj
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> QYEB
    react.surge.util.BlastResistance GLOWSTONE -> WITN
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> ymxB
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> BwNQ
    react.surge.util.BlastResistance SEA_LANTERN -> lqCy
    react.surge.util.BlastResistance BED_BLOCK -> smHJ
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> GKFm
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> NWkJ
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> jrmd
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> OuBF
    react.surge.util.BlastResistance LEAVES -> GAuL
    react.surge.util.BlastResistance LEAVES_2 -> LjwN
    react.surge.util.BlastResistance SNOW -> lVpI
    int br -> kupF
    react.surge.util.BlastResistance[] ENUM$VALUES -> HDxS
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> jiOQ
    175:190:int get(org.bukkit.Material) -> fmIT
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> Usyd:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> vABq
react.surge.util.C -> Nwur:
    react.surge.util.C BLACK -> cLWF
    react.surge.util.C DARK_BLUE -> hArb
    react.surge.util.C DARK_GREEN -> OlQP
    react.surge.util.C DARK_AQUA -> bRDk
    react.surge.util.C DARK_RED -> tfwr
    react.surge.util.C DARK_PURPLE -> nmxA
    react.surge.util.C GOLD -> FXdo
    react.surge.util.C GRAY -> slfW
    react.surge.util.C DARK_GRAY -> pdAa
    react.surge.util.C BLUE -> YWlv
    react.surge.util.C GREEN -> ULBQ
    react.surge.util.C AQUA -> RKIT
    react.surge.util.C RED -> sSXK
    react.surge.util.C LIGHT_PURPLE -> NXOQ
    react.surge.util.C YELLOW -> lxwC
    react.surge.util.C WHITE -> xbfq
    react.surge.util.C MAGIC -> vusM
    react.surge.util.C BOLD -> DJPx
    react.surge.util.C STRIKETHROUGH -> Ijam
    react.surge.util.C UNDERLINE -> sdYb
    react.surge.util.C ITALIC -> jbOu
    react.surge.util.C RESET -> ymym
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> hJfd
    char code -> OksK
    boolean isFormat -> QYHW
    java.lang.String toString -> ARHc
    java.util.Map BY_ID -> BTkF
    java.util.Map BY_CHAR -> nTiC
    java.util.Map dyeChatMap -> NhpF
    java.util.Map chatHexMap -> Uutq
    java.util.Map dyeHexMap -> OccN
    int[] $SWITCH_TABLE$surge$util$C -> RBVk
    react.surge.util.C[] ENUM$VALUES -> lNbT
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> RtLa
    378:378:java.lang.String hex() -> kuBy
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> vtFh
    434:442:react.surge.util.C getByChar(java.lang.String) -> IFSg
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> lmyI
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> fmIT
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> lmyI
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> jEpN
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> ThVT
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> HeSm
    560:578:java.lang.String generateColorTable() -> vdAU
    588:588:org.bukkit.ChatColor chatColor() -> jFjt
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> vYtK
    632:679:byte getItemMeta() -> qSop
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> URab
react.surge.util.C$1 -> Nwur$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> Nwur$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> Nwur$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> Nwur$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> Nwur$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> Nwur$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> Nwur$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> Nwur$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> Nwur$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> Nwur$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> Nwur$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> Nwur$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> Nwur$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> Nwur$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> Nwur$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> Nwur$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> Nwur$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> Nwur$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> Nwur$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> Nwur$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> Nwur$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> Nwur$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> uNrK:
    double number -> KVsl
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> GaqH
    23:25:react.surge.util.CDou add(double) -> AyqG
    30:32:react.surge.util.CDou sub(double) -> pYEb
    37:37:double get() -> get
    42:48:void circ() -> TFmY
react.surge.util.CMD -> VDYX:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> FOts
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> ncxr
    51:53:void execute(org.bukkit.command.CommandSender) -> jEpN
    60:77:void execute() -> execute
react.surge.util.CNum -> LqpL:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> IFSg
    23:25:react.surge.util.CNum add(int) -> ThVT
    30:32:react.surge.util.CNum sub(int) -> HeSm
    37:37:int get() -> get
    42:48:void circ() -> TFmY
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> gMiI
react.surge.util.Chunks -> ofrm:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> OGcB
    33:40:react.glang.GList getLoadedChunks() -> sshq
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> lmyI
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> fmIT
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> fmIT
    98:98:boolean unload(org.bukkit.Chunk) -> kjtt
    114:124:int unload(react.glang.GList,boolean,boolean) -> fmIT
    138:138:int unload(react.glang.GList,boolean) -> fmIT
    150:150:int unload(react.glang.GList) -> OGcB
    166:166:boolean isLoaded(java.lang.String,int,int) -> fmIT
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> lmyI
    201:205:void load(react.glang.GList) -> yIjF
react.surge.util.Cuboid -> BSSU:
    java.lang.String worldName -> kvSc
    int x1 -> PUcL
    int y1 -> xtIB
    int z1 -> ynYy
    int x2 -> eImJ
    int y2 -> WsjG
    int z2 -> PDbC
    int[] $SWITCH_TABLE$surge$util$Axis -> UutL
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> jrnf
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> fmIT
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> jEpN
    93:93:boolean hasPlayers() -> VgFB
    98:110:react.glang.GList getPlayers() -> rMpT
    115:166:react.glang.GList getEntities() -> afdG
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> lCfW
    287:287:org.bukkit.Location getLowerNE() -> ebNy
    298:298:org.bukkit.Location getUpperSW() -> xqum
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> yRun
    348:348:int getSizeY() -> lDaA
    358:358:int getSizeZ() -> ccwy
    368:368:int getLowerX() -> ySWG
    378:378:int getLowerY() -> GtLP
    388:388:int getLowerZ() -> qSoT
    398:398:int getUpperX() -> wxDe
    408:408:int getUpperY() -> lgDM
    418:418:int getUpperZ() -> YpNt
    428:438:org.bukkit.block.Block[] corners() -> oEYN
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> fmIT
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> lmyI
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> jEpN
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> tTOK
    546:546:boolean contains(int,int,int) -> Plhx
    558:558:boolean contains(org.bukkit.block.Block) -> vYtK
    570:570:boolean contains(org.bukkit.Location) -> FMkB
    580:580:int volume() -> JdCg
    591:601:byte averageLightLevel() -> clip
    612:612:react.surge.util.Cuboid contract() -> KgGH
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> fmIT
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> lmyI
    708:715:boolean containsOnly(org.bukkit.Material) -> lmyI
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> fmIT
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> vABq
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> fmIT
    786:800:java.util.List getChunks() -> DrsD
    815:819:void fill(int,byte) -> fmIT
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> JdFN
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> KEEq
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> rNfI
react.surge.util.Cuboid$1 -> BSSU$1:
    react.surge.util.Cuboid this$0 -> iMiG
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> FMkB
    1:1:java.lang.Object onAdapt(java.lang.Object) -> vYtK
react.surge.util.Cuboid$CuboidDirection -> BSSU$fmIT:
    react.surge.util.Cuboid$CuboidDirection North -> sKEn
    react.surge.util.Cuboid$CuboidDirection East -> ekqF
    react.surge.util.Cuboid$CuboidDirection South -> Xejy
    react.surge.util.Cuboid$CuboidDirection West -> vmaK
    react.surge.util.Cuboid$CuboidDirection Up -> GSYf
    react.surge.util.Cuboid$CuboidDirection Down -> BDKL
    react.surge.util.Cuboid$CuboidDirection Horizontal -> lEqD
    react.surge.util.Cuboid$CuboidDirection Vertical -> lgtE
    react.surge.util.Cuboid$CuboidDirection Both -> mYuV
    react.surge.util.Cuboid$CuboidDirection Unknown -> wVtg
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> jrnf
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> FOwr
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> Pmfv
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> rNfI
react.surge.util.Cuboid$CuboidIterator -> BSSU$lmyI:
    org.bukkit.World w -> VhYT
    int baseX -> XDLN
    int baseY -> ukCK
    int baseZ -> OtfP
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> fMSq
    int sizeY -> AtNO
    int sizeZ -> ipPf
    react.surge.util.Cuboid this$0 -> iMiG
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> NUsU:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> gFJi:
    react.glang.GList buffer -> mHvy
    10:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    14:18:void flush() -> flush
    22:33:void log(java.lang.String,java.lang.String) -> tTOK
    37:38:void l(java.lang.Object,java.lang.String) -> lmyI
    42:43:void s(java.lang.Object,java.lang.String) -> jEpN
    47:48:void v(java.lang.Object,java.lang.String) -> tTOK
    52:53:void w(java.lang.Object,java.lang.String) -> Plhx
    57:58:void f(java.lang.Object,java.lang.String) -> vABq
    62:69:void l(java.lang.String) -> gMiI
    73:80:void s(java.lang.String) -> lCfW
    84:91:void v(java.lang.String) -> PJgh
    95:102:void w(java.lang.String) -> YDdH
    106:113:void f(java.lang.String) -> QpQS
react.surge.util.DMSRequire -> EJyI:
    react.surge.util.DMSRequirement value() -> rWWP
react.surge.util.DMSRequirement -> JbyV:
    react.surge.util.DMSRequirement SQL -> SyBf
    react.surge.util.DMSRequirement[] ENUM$VALUES -> ekrm
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> WrPs:
    react.surge.util.Depend VAULT -> gGfe
    react.surge.util.Depend FAWE -> CGOY
    react.surge.util.Depend WORLDEDIT -> cTky
    react.surge.util.Depend PROTOLIB -> VqKK
    react.surge.util.Depend CITIZENS -> BvpH
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> IIBX
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> XcqW:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> uGMv
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> OPfb:
    react.surge.util.DimensionFace X -> YWpP
    react.surge.util.DimensionFace Y -> dWoP
    react.surge.util.DimensionFace Z -> uaol
    react.surge.util.DimensionFace[] ENUM$VALUES -> SooY
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> YUrf:
    react.surge.util.Direction U -> kLBT
    react.surge.util.Direction D -> GRyw
    react.surge.util.Direction N -> mIVs
    react.surge.util.Direction S -> rGeI
    react.surge.util.Direction E -> RKJY
    react.surge.util.Direction W -> nCho
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> gXgU
    int[] $SWITCH_TABLE$surge$util$Direction -> cULX
    react.surge.util.Direction[] ENUM$VALUES -> JBqi
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> VMVE
    61:61:int x() -> WGhQ
    66:66:int y() -> CgbP
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> GsnX
    81:81:react.glang.GList news() -> jhov
    86:86:react.glang.GList udnews() -> WikU
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> dVCX
    115:147:react.surge.util.Direction fromByte(byte) -> vtFh
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> pbQh
react.surge.util.DynamicConfiguration -> TFdO:
react.surge.util.DynamicTracker -> IOVO:
react.surge.util.Embedded -> ejXE:
    react.glang.GList get() -> PCSx
    void add(java.lang.Object) -> add
react.surge.util.FU -> Wqol:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> fmIT
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> lmyI
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> Plhx
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> vABq
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> tfAx:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> dUcv
react.surge.util.Health -> kQyD:
    double hp -> bskT
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> gVvU
    41:41:double getHearts() -> jrBK
    51:51:double getHalfHearts() -> iCjD
    61:61:int getFlatHalfHearts() -> xOtp
react.surge.util.IO -> sYqA:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> Fxre:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> fmIT
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> fmIT
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> fmIT
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> fmIT
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> fmIT
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> lmyI
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> jEpN
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> tTOK
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> fmIT
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> fmIT
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> fmIT
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> fmIT
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> Plhx
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> vABq
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> vYtK
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> vtFh
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> kABv
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> fmIT
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> FMkB
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> ejDm
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> fmIT
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> fmIT
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> lmyI
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> fmIT
react.surge.util.MSound -> OHYA:
    react.surge.util.MSound AMBIENCE_CAVE -> NrCQ
    react.surge.util.MSound AMBIENCE_RAIN -> OdEM
    react.surge.util.MSound AMBIENCE_THUNDER -> xkYH
    react.surge.util.MSound ANVIL_BREAK -> hBWh
    react.surge.util.MSound ANVIL_LAND -> XwOe
    react.surge.util.MSound ANVIL_USE -> CqcR
    react.surge.util.MSound ARROW_HIT -> jPms
    react.surge.util.MSound BURP -> oiSM
    react.surge.util.MSound CHEST_CLOSE -> lgxn
    react.surge.util.MSound CHEST_OPEN -> Film
    react.surge.util.MSound CLICK -> WQlA
    react.surge.util.MSound DOOR_CLOSE -> nClK
    react.surge.util.MSound DOOR_OPEN -> aWYJ
    react.surge.util.MSound DRINK -> oytI
    react.surge.util.MSound EAT -> VEvl
    react.surge.util.MSound EXPLODE -> OdHH
    react.surge.util.MSound FALL_BIG -> hlnJ
    react.surge.util.MSound FALL_SMALL -> oaBP
    react.surge.util.MSound FIRE -> NGQj
    react.surge.util.MSound FIRE_IGNITE -> elWH
    react.surge.util.MSound FIZZ -> kKcl
    react.surge.util.MSound FUSE -> OJUV
    react.surge.util.MSound GLASS -> GeBA
    react.surge.util.MSound HURT_FLESH -> Bnbr
    react.surge.util.MSound ITEM_BREAK -> VWXc
    react.surge.util.MSound ITEM_PICKUP -> JdwB
    react.surge.util.MSound LAVA -> aVvl
    react.surge.util.MSound LAVA_POP -> xcKR
    react.surge.util.MSound LEVEL_UP -> jYan
    react.surge.util.MSound MINECART_BASE -> BUQN
    react.surge.util.MSound MINECART_INSIDE -> cfPJ
    react.surge.util.MSound NOTE_BASS -> rXgb
    react.surge.util.MSound NOTE_PIANO -> qwgb
    react.surge.util.MSound NOTE_BASS_DRUM -> xYwy
    react.surge.util.MSound NOTE_STICKS -> mRIk
    react.surge.util.MSound NOTE_BASS_GUITAR -> vSqw
    react.surge.util.MSound NOTE_SNARE_DRUM -> pSCB
    react.surge.util.MSound NOTE_PLING -> VWYV
    react.surge.util.MSound ORB_PICKUP -> EVHn
    react.surge.util.MSound PISTON_EXTEND -> mAGx
    react.surge.util.MSound PISTON_RETRACT -> Nytd
    react.surge.util.MSound PORTAL -> XoBA
    react.surge.util.MSound PORTAL_TRAVEL -> oFqL
    react.surge.util.MSound PORTAL_TRIGGER -> gXkm
    react.surge.util.MSound SHOOT_ARROW -> TbVv
    react.surge.util.MSound SPLASH -> vTWV
    react.surge.util.MSound SPLASH2 -> aNib
    react.surge.util.MSound STEP_GRASS -> thCj
    react.surge.util.MSound STEP_GRAVEL -> yeoy
    react.surge.util.MSound STEP_LADDER -> yoCC
    react.surge.util.MSound STEP_SAND -> ynac
    react.surge.util.MSound STEP_SNOW -> elXQ
    react.surge.util.MSound STEP_STONE -> SEaa
    react.surge.util.MSound STEP_WOOD -> tpSY
    react.surge.util.MSound STEP_WOOL -> bQlt
    react.surge.util.MSound SWIM -> YOdB
    react.surge.util.MSound WATER -> xsmy
    react.surge.util.MSound WOOD_CLICK -> lNgv
    react.surge.util.MSound BAT_DEATH -> vmga
    react.surge.util.MSound BAT_HURT -> RlpV
    react.surge.util.MSound BAT_IDLE -> ORfP
    react.surge.util.MSound BAT_LOOP -> smPS
    react.surge.util.MSound BAT_TAKEOFF -> cClr
    react.surge.util.MSound BLAZE_BREATH -> GJnT
    react.surge.util.MSound BLAZE_DEATH -> WAKc
    react.surge.util.MSound BLAZE_HIT -> JKfm
    react.surge.util.MSound CAT_HISS -> EVJd
    react.surge.util.MSound CAT_HIT -> tyCv
    react.surge.util.MSound CAT_MEOW -> vLEg
    react.surge.util.MSound CAT_PURR -> YOaq
    react.surge.util.MSound CAT_PURREOW -> SotH
    react.surge.util.MSound CHICKEN_IDLE -> BURf
    react.surge.util.MSound CHICKEN_HURT -> IkIF
    react.surge.util.MSound CHICKEN_EGG_POP -> lqKr
    react.surge.util.MSound CHICKEN_WALK -> cwVP
    react.surge.util.MSound COW_IDLE -> gYNl
    react.surge.util.MSound COW_HURT -> oGTQ
    react.surge.util.MSound COW_WALK -> DSJc
    react.surge.util.MSound CREEPER_HISS -> AssS
    react.surge.util.MSound CREEPER_DEATH -> ptij
    react.surge.util.MSound ENDERDRAGON_DEATH -> lOLI
    react.surge.util.MSound ENDERDRAGON_GROWL -> bkbV
    react.surge.util.MSound ENDERDRAGON_HIT -> wNjb
    react.surge.util.MSound ENDERDRAGON_WINGS -> pciC
    react.surge.util.MSound ENDERMAN_DEATH -> YyyI
    react.surge.util.MSound ENDERMAN_HIT -> iotx
    react.surge.util.MSound ENDERMAN_IDLE -> iWDc
    react.surge.util.MSound ENDERMAN_TELEPORT -> LcRs
    react.surge.util.MSound ENDERMAN_SCREAM -> JnMK
    react.surge.util.MSound ENDERMAN_STARE -> NXUp
    react.surge.util.MSound GHAST_SCREAM -> LtRk
    react.surge.util.MSound GHAST_SCREAM2 -> yTpT
    react.surge.util.MSound GHAST_CHARGE -> wEyI
    react.surge.util.MSound GHAST_DEATH -> DtlG
    react.surge.util.MSound GHAST_FIREBALL -> aFYt
    react.surge.util.MSound GHAST_MOAN -> hTAR
    react.surge.util.MSound IRONGOLEM_DEATH -> Cyxp
    react.surge.util.MSound IRONGOLEM_HIT -> pIuV
    react.surge.util.MSound IRONGOLEM_THROW -> ekxo
    react.surge.util.MSound IRONGOLEM_WALK -> XfUE
    react.surge.util.MSound MAGMACUBE_WALK -> FsCL
    react.surge.util.MSound MAGMACUBE_WALK2 -> qxMR
    react.surge.util.MSound MAGMACUBE_JUMP -> sKNd
    react.surge.util.MSound PIG_IDLE -> igct
    react.surge.util.MSound PIG_DEATH -> hubc
    react.surge.util.MSound PIG_WALK -> dqik
    react.surge.util.MSound SHEEP_IDLE -> mAOn
    react.surge.util.MSound SHEEP_SHEAR -> drKJ
    react.surge.util.MSound SHEEP_WALK -> seDi
    react.surge.util.MSound SILVERFISH_HIT -> hJrB
    react.surge.util.MSound SILVERFISH_KILL -> PUmn
    react.surge.util.MSound SILVERFISH_IDLE -> apqM
    react.surge.util.MSound SILVERFISH_WALK -> Vppv
    react.surge.util.MSound SKELETON_IDLE -> lyar
    react.surge.util.MSound SKELETON_DEATH -> Dcma
    react.surge.util.MSound SKELETON_HURT -> vnLt
    react.surge.util.MSound SKELETON_WALK -> hTDA
    react.surge.util.MSound SLIME_ATTACK -> ohxN
    react.surge.util.MSound SLIME_WALK -> lqPt
    react.surge.util.MSound SLIME_WALK2 -> Eoat
    react.surge.util.MSound SPIDER_IDLE -> NFvC
    react.surge.util.MSound SPIDER_DEATH -> coFf
    react.surge.util.MSound SPIDER_WALK -> pSHv
    react.surge.util.MSound WITHER_DEATH -> yUST
    react.surge.util.MSound WITHER_HURT -> Pwoq
    react.surge.util.MSound WITHER_IDLE -> RKRb
    react.surge.util.MSound WITHER_SHOOT -> PfoN
    react.surge.util.MSound WITHER_SPAWN -> CaKY
    react.surge.util.MSound WOLF_BARK -> cLcT
    react.surge.util.MSound WOLF_DEATH -> kTYu
    react.surge.util.MSound WOLF_GROWL -> LQqa
    react.surge.util.MSound WOLF_HOWL -> vBvy
    react.surge.util.MSound WOLF_HURT -> IPyM
    react.surge.util.MSound WOLF_PANT -> bAPH
    react.surge.util.MSound WOLF_SHAKE -> pIvl
    react.surge.util.MSound WOLF_WALK -> EDmL
    react.surge.util.MSound WOLF_WHINE -> UnOM
    react.surge.util.MSound ZOMBIE_METAL -> GBcF
    react.surge.util.MSound ZOMBIE_WOOD -> VORC
    react.surge.util.MSound ZOMBIE_WOODBREAK -> DSNa
    react.surge.util.MSound ZOMBIE_IDLE -> pcmK
    react.surge.util.MSound ZOMBIE_DEATH -> XDUw
    react.surge.util.MSound ZOMBIE_HURT -> FbFS
    react.surge.util.MSound ZOMBIE_INFECT -> OdOb
    react.surge.util.MSound ZOMBIE_UNFECT -> Yqkx
    react.surge.util.MSound ZOMBIE_REMEDY -> xkcy
    react.surge.util.MSound ZOMBIE_WALK -> DSNp
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> BMHI
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> VGAl
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> hvHd
    react.surge.util.MSound ZOMBIE_PIG_HURT -> Umpl
    react.surge.util.MSound DIG_WOOL -> QHST
    react.surge.util.MSound DIG_GRASS -> PUqD
    react.surge.util.MSound DIG_GRAVEL -> rrcm
    react.surge.util.MSound DIG_SAND -> lycH
    react.surge.util.MSound DIG_SNOW -> NXYs
    react.surge.util.MSound DIG_STONE -> LlGM
    react.surge.util.MSound DIG_WOOD -> rYRG
    react.surge.util.MSound FIREWORK_BLAST -> hKSi
    react.surge.util.MSound FIREWORK_BLAST2 -> vmms
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> LASF
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> IIKW
    react.surge.util.MSound FIREWORK_TWINKLE -> GmXa
    react.surge.util.MSound FIREWORK_TWINKLE2 -> ipYq
    react.surge.util.MSound FIREWORK_LAUNCH -> HyML
    react.surge.util.MSound SUCCESSFUL_HIT -> DdPC
    react.surge.util.MSound HORSE_ANGRY -> xRPx
    react.surge.util.MSound HORSE_ARMOR -> nDSe
    react.surge.util.MSound HORSE_BREATHE -> KWam
    react.surge.util.MSound HORSE_DEATH -> oFuk
    react.surge.util.MSound HORSE_GALLOP -> KpvR
    react.surge.util.MSound HORSE_HIT -> RvLL
    react.surge.util.MSound HORSE_IDLE -> tEgl
    react.surge.util.MSound HORSE_JUMP -> Kheo
    react.surge.util.MSound HORSE_LAND -> kKoD
    react.surge.util.MSound HORSE_SADDLE -> mRUj
    react.surge.util.MSound HORSE_SOFT -> SWKt
    react.surge.util.MSound HORSE_WOOD -> uHkR
    react.surge.util.MSound DONKEY_ANGRY -> PERH
    react.surge.util.MSound DONKEY_DEATH -> Wkgy
    react.surge.util.MSound DONKEY_HIT -> PpEn
    react.surge.util.MSound DONKEY_IDLE -> kmpp
    react.surge.util.MSound HORSE_SKELETON_DEATH -> tWJN
    react.surge.util.MSound HORSE_SKELETON_HIT -> fgSo
    react.surge.util.MSound HORSE_SKELETON_IDLE -> WcXf
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> vvad
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> fMaU
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> DtsY
    react.surge.util.MSound VILLAGER_DEATH -> lpsw
    react.surge.util.MSound VILLAGER_HAGGLE -> ukOE
    react.surge.util.MSound VILLAGER_HIT -> RSiE
    react.surge.util.MSound VILLAGER_IDLE -> jHjv
    react.surge.util.MSound VILLAGER_NO -> NPNF
    react.surge.util.MSound VILLAGER_YES -> BTyG
    java.lang.String pre19sound -> bIdJ
    java.lang.String post19sound -> rXsB
    org.bukkit.Sound resolvedSound -> Vyel
    react.surge.util.MSound[] ENUM$VALUES -> GukC
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> GtMj
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> WrTF:
    org.bukkit.Material material -> ahdF
    java.lang.Byte data -> kLOC
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> HUNJ
    79:80:void setData(java.lang.Byte) -> fmIT
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> Fxrd:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> Huvr
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> bjJG
    68:68:boolean isAnyOnline() -> Hemy
    80:80:react.glang.GList inWorld(org.bukkit.World) -> yIjF
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> jFOS
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> fmIT
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> fmIT
    143:144:void disable(org.bukkit.entity.Player) -> Jbhy
    154:155:void enable(org.bukkit.entity.Player) -> kbgn
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> fmIT
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> lmyI
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> oMQr
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> fmIT
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> HmeM
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> jEpN
    300:300:boolean canFindPlayer(java.lang.String) -> Fops
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> jNfA
    338:345:react.glang.GList onlinePlayers() -> JuGJ
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> GaqH
    368:371:void clear(org.bukkit.entity.Player) -> AyqG
    381:385:void clearEffects(org.bukkit.entity.Player) -> pYEb
    398:399:void heal(org.bukkit.entity.Player,double) -> fmIT
    409:410:void heal(org.bukkit.entity.Player) -> vjvg
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> Hmdw
    432:433:void resetHunger(org.bukkit.entity.Player) -> KfMp
    443:444:void kill(org.bukkit.entity.Player) -> CEBa
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> HvVe
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> kcHC
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> fmIT
react.surge.util.P$1 -> Fxrd$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> FMkB
    1:1:java.lang.Object onAdapt(java.lang.Object) -> vYtK
react.surge.util.P$2 -> Fxrd$2:
    java.lang.Double val$doff -> XnkA
    org.bukkit.entity.Player val$e -> CrOf
    org.bukkit.entity.Entity[] val$result -> FsHa
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> ejDm
react.surge.util.PE -> DakV:
    react.surge.util.PE ABSORPTION -> Rdhe
    react.surge.util.PE BLINDNESS -> yvxl
    react.surge.util.PE CONFUSION -> oaKr
    react.surge.util.PE DAMAGE_RESISTANCE -> CaOf
    react.surge.util.PE FAST_DIGGING -> ShME
    react.surge.util.PE FIRE_RESISTANCE -> drMd
    react.surge.util.PE GLOWING -> jILK
    react.surge.util.PE HARM -> ayfK
    react.surge.util.PE HEAL -> HVjr
    react.surge.util.PE HEALTH_BOOST -> SEhi
    react.surge.util.PE HUNGER -> lXAy
    react.surge.util.PE INCREASE_DAMAGE -> noIr
    react.surge.util.PE INVISIBILITY -> LlJH
    react.surge.util.PE JUMP -> HhMl
    react.surge.util.PE LEVITATION -> DAnS
    react.surge.util.PE LUCK -> cCyF
    react.surge.util.PE NIGHT_VISION -> FGvY
    react.surge.util.PE POISON -> KiHq
    react.surge.util.PE REGENERATION -> kKqL
    react.surge.util.PE SATURATION -> hJxQ
    react.surge.util.PE SLOW -> dPMf
    react.surge.util.PE SLOW_DIGGING -> qwug
    react.surge.util.PE SPEED -> ORqX
    react.surge.util.PE UNLUCK -> ShPR
    react.surge.util.PE WATER_BREATHING -> BoOO
    react.surge.util.PE WEAKNESS -> PUte
    react.surge.util.PE WITHER -> XnnU
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> fmIT
    144:144:react.surge.util.PE d(int) -> PJgh
    156:156:react.surge.util.PE a(int) -> YDdH
    166:166:org.bukkit.potion.PotionEffect c() -> VUeL
    177:178:void c(org.bukkit.entity.LivingEntity) -> vABq
    182:183:void crm(org.bukkit.entity.LivingEntity) -> vYtK
    187:188:void rm(org.bukkit.entity.LivingEntity) -> vtFh
react.surge.util.ParticleEffect -> Know:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> edSN
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> DctK
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> mtYv
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> FQIW
    react.surge.util.ParticleEffect WATER_BUBBLE -> eAni
    react.surge.util.ParticleEffect WATER_SPLASH -> YrPf
    react.surge.util.ParticleEffect WATER_WAKE -> DRph
    react.surge.util.ParticleEffect SUSPENDED -> BoOy
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> Otry
    react.surge.util.ParticleEffect CRIT -> Wbwl
    react.surge.util.ParticleEffect CRIT_MAGIC -> Frih
    react.surge.util.ParticleEffect SMOKE_NORMAL -> slyX
    react.surge.util.ParticleEffect SMOKE_LARGE -> tMyD
    react.surge.util.ParticleEffect SPELL -> hmYw
    react.surge.util.ParticleEffect SPELL_INSTANT -> PVUE
    react.surge.util.ParticleEffect SPELL_MOB -> jIMR
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> ENDp
    react.surge.util.ParticleEffect SPELL_WITCH -> HhOm
    react.surge.util.ParticleEffect DRIP_WATER -> nLgw
    react.surge.util.ParticleEffect DRIP_LAVA -> qVRW
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> xQtc
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> hunR
    react.surge.util.ParticleEffect TOWN_AURA -> TQah
    react.surge.util.ParticleEffect NOTE -> gPgq
    react.surge.util.ParticleEffect PORTAL -> ucCJ
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> GupH
    react.surge.util.ParticleEffect FLAME -> rahk
    react.surge.util.ParticleEffect LAVA -> UUFF
    react.surge.util.ParticleEffect FOOTSTEP -> GSmI
    react.surge.util.ParticleEffect CLOUD -> KGGx
    react.surge.util.ParticleEffect REDSTONE -> kefH
    react.surge.util.ParticleEffect SNOWBALL -> hvNb
    react.surge.util.ParticleEffect SNOW_SHOVEL -> SVpA
    react.surge.util.ParticleEffect SLIME -> OKCx
    react.surge.util.ParticleEffect HEART -> OdVT
    react.surge.util.ParticleEffect BARRIER -> CjEX
    react.surge.util.ParticleEffect ITEM_CRACK -> RSmH
    react.surge.util.ParticleEffect BLOCK_CRACK -> tElC
    react.surge.util.ParticleEffect BLOCK_DUST -> iyPp
    react.surge.util.ParticleEffect WATER_DROP -> UvgR
    react.surge.util.ParticleEffect ITEM_TAKE -> wXFb
    react.surge.util.ParticleEffect MOB_APPEARANCE -> hJxp
    react.surge.util.ParticleEffect DRAGON_BREATH -> svMd
    react.surge.util.ParticleEffect END_ROD -> pcrX
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> Pfvk
    react.surge.util.ParticleEffect SWEEP_ATTACK -> vLQs
    java.util.Map NAME_MAP -> BgBJ
    java.util.Map ID_MAP -> QXxf
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> RCKY
    java.util.List properties -> UfFk
    react.surge.util.ParticleEffect[] ENUM$VALUES -> rsIr
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> Thpe
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> fmIT
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> UYym
    557:565:react.surge.util.ParticleEffect fromId(int) -> QpQS
    577:578:boolean isWater(org.bukkit.Location) -> HSoO
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> fmIT
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> fmIT
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> fmIT
    665:681:void display(float,int,org.bukkit.Location,double) -> fmIT
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> fmIT
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> fmIT
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> fmIT
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> fmIT
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> fmIT
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> fmIT
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> fmIT
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> fmIT
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> fmIT
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> fmIT
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> fmIT
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> fmIT
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> fmIT
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> fmIT
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> Know$fmIT:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> Know$lmyI:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> Know$jEpN:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> wxGL
    1594:1594:float getValueY() -> SfOP
    1605:1605:float getValueZ() -> nKIP
react.surge.util.ParticleEffect$OrdinaryColor -> Know$tTOK:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> wxGL
    1526:1526:float getValueY() -> SfOP
    1537:1537:float getValueZ() -> nKIP
react.surge.util.ParticleEffect$ParticleColor -> Know$Plhx:
    1383:1383:void <init>() -> <init>
    float getValueX() -> wxGL
    float getValueY() -> SfOP
    float getValueZ() -> nKIP
react.surge.util.ParticleEffect$ParticleColorException -> Know$vABq:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> Know$vYtK:
    org.bukkit.Material material -> ahdF
    byte data -> jQcM
    int[] packetData -> elfm
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> IiSH
    1309:1309:java.lang.String getPacketDataString() -> PKce
react.surge.util.ParticleEffect$ParticleDataException -> Know$vtFh:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> Know$kABv:
    int version -> version
    java.lang.Class enumParticle -> JDGM
    java.lang.reflect.Constructor packetConstructor -> seOS
    java.lang.reflect.Method getHandle -> oOqH
    java.lang.reflect.Field playerConnection -> wGGj
    java.lang.reflect.Method sendPacket -> Xfab
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> gPiv
    float offsetX -> ViKx
    float offsetY -> LuAf
    float offsetZ -> YXcG
    float speed -> ayky
    int amount -> fLOh
    boolean longDistance -> BxEC
    react.surge.util.ParticleEffect$ParticleData data -> OdXX
    java.lang.Object packet -> XMOs
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> kjtt
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> fmIT
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> lmyI
    2004:2018:void sendTo(org.bukkit.Location,double) -> lmyI
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> Know$kABv$fmIT:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> Know$kABv$lmyI:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> Know$kABv$jEpN:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> Know$FMkB:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> oOor
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> pleo
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> VhlV
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> vKtB
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> PMhj
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> Know$ejDm:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> nBQX:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> XRba
react.surge.util.Persist -> DbKv:
react.surge.util.PluginUtil -> vJHn:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> Plhx
    81:85:void enableAll() -> Uksn
    95:99:void disable(org.bukkit.plugin.Plugin) -> vABq
    106:110:void disableAll() -> qCQG
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> vYtK
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> fmIT
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> ePWk
    169:172:java.util.List getPluginNames(boolean) -> tBjk
    184:187:java.lang.String getPluginVersion(java.lang.String) -> kbiT
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> vtFh
    237:316:java.util.List findByCommand(java.lang.String) -> UsmH
    337:338:void load(org.bukkit.plugin.Plugin) -> kABv
    342:364:java.lang.String getPluginFileName(java.lang.String) -> QMmf
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> fmIT
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> FMkB
    480:484:void reloadAll() -> fvUq
    496:622:void unload(org.bukkit.plugin.Plugin) -> ejDm
react.surge.util.PoolCount -> pbJP:
react.surge.util.PoolDescriber -> HLVD:
react.surge.util.PoolNanoThrottle -> uFcu:
react.surge.util.PositionalSelector -> INxL:
    react.glang.GSet allowedChunks -> lGGu
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> rEri
    39:40:void addChunk(org.bukkit.Chunk) -> OGcB
    44:44:react.glang.GSet getAllowedChunks() -> fnFL
react.surge.util.Protocol -> oETM:
    react.surge.util.Protocol LATEST -> qMex
    react.surge.util.Protocol R1_12_2 -> eBTG
    react.surge.util.Protocol R1_12_2_PRE -> Gdpr
    react.surge.util.Protocol R1_12_1 -> QPjP
    react.surge.util.Protocol R1_12 -> kegI
    react.surge.util.Protocol R1_11_2 -> rHXG
    react.surge.util.Protocol R1_11_1 -> GnAj
    react.surge.util.Protocol R1_11 -> PVYF
    react.surge.util.Protocol R1_10_2 -> LlPC
    react.surge.util.Protocol R1_10_1 -> qfwO
    react.surge.util.Protocol R1_10 -> pldv
    react.surge.util.Protocol R1_9_4 -> foiL
    react.surge.util.Protocol R1_9_3 -> MgBa
    react.surge.util.Protocol R1_9_2 -> rsLU
    react.surge.util.Protocol R1_9_1 -> JLXy
    react.surge.util.Protocol R1_9 -> blPs
    react.surge.util.Protocol R1_8_9 -> UwLu
    react.surge.util.Protocol R1_8_8 -> FrqJ
    react.surge.util.Protocol R1_8_7 -> ViOH
    react.surge.util.Protocol R1_8_6 -> kUHs
    react.surge.util.Protocol R1_8_5 -> Yqvl
    react.surge.util.Protocol R1_8_4 -> NHEL
    react.surge.util.Protocol R1_8_3 -> jQdx
    react.surge.util.Protocol R1_8_2 -> Lkqa
    react.surge.util.Protocol R1_8_1 -> elha
    react.surge.util.Protocol R1_8 -> TkXw
    react.surge.util.Protocol R1_7_10 -> LlSC
    react.surge.util.Protocol R1_7_9 -> pmIM
    react.surge.util.Protocol R1_7_8 -> GdsO
    react.surge.util.Protocol R1_7_7 -> sBmL
    react.surge.util.Protocol R1_7_6 -> LtcS
    react.surge.util.Protocol R1_7_5 -> elhs
    react.surge.util.Protocol R1_7_4 -> sSmx
    react.surge.util.Protocol R1_7_3 -> mIkb
    react.surge.util.Protocol R1_7_2 -> qDvX
    react.surge.util.Protocol R1_7_1 -> qNIA
    react.surge.util.Protocol B1_6_4 -> igsH
    react.surge.util.Protocol B1_6_3 -> SyVT
    react.surge.util.Protocol B1_6_2 -> hCMf
    react.surge.util.Protocol B1_6_1 -> kKvM
    react.surge.util.Protocol B1_5_2 -> UfJg
    react.surge.util.Protocol B1_5_1 -> oPRj
    react.surge.util.Protocol B1_5 -> oieI
    react.surge.util.Protocol B1_4_7 -> PolW
    react.surge.util.Protocol B1_4_6 -> puXk
    react.surge.util.Protocol B1_4_5 -> cxDO
    react.surge.util.Protocol B1_4_4 -> YXck
    react.surge.util.Protocol B1_4_2 -> MMRG
    react.surge.util.Protocol B1_3_2 -> fVYg
    react.surge.util.Protocol B1_3_1 -> IQfO
    react.surge.util.Protocol B1_2_5 -> wWhj
    react.surge.util.Protocol B1_2_4 -> Qamm
    react.surge.util.Protocol EARLIEST -> vnYO
    react.surge.util.Protocol UNKNOWN -> QPli
    int version -> version
    java.lang.String packageVersion -> CXfU
    java.lang.String versionName -> JChH
    boolean netty -> pAsJ
    react.surge.util.Protocol[] ENUM$VALUES -> vvhs
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> NhAa
    118:118:java.lang.String getPackageVersion() -> qCSu
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> Euyi
    142:150:react.surge.util.Protocol getProtocolVersion() -> bHJM
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> lmyI
    160:160:boolean isServerVersion() -> OauC
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> TObI
    175:175:boolean isActualVersion() -> mXjS
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> WHKI
    200:200:int getMetaVersion() -> opRd
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> Wibg:
    react.surge.util.Protocol from -> yxCH
    react.surge.util.Protocol to -> Dcxw
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> WjMa
    21:21:react.surge.util.Protocol getTo() -> jWqb
    26:26:boolean contains(react.surge.util.Protocol) -> jEpN
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> dpHl:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> rVxN
    70:70:int randomNextInt() -> NVan
    80:80:long randomNextLong() -> HwTX
    92:92:boolean isWithin(double) -> vjvg
    104:104:boolean isWithin(int) -> dUcv
    116:116:boolean isWithin(long) -> SvUR
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> Hmdw
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> kRCf
react.surge.util.RawEvent -> KLkm:
react.surge.util.RayTrace -> kbyX:
    org.bukkit.Location start -> eSVY
    org.bukkit.util.Vector direction -> jYsr
    java.lang.Double maxDistance -> wiLB
    java.lang.Double distanceCovered -> yoTv
    java.lang.Double step -> BVFP
    java.lang.Boolean stop -> XgFd
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> KMXg
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> ejDm
    89:89:org.bukkit.Location getStart() -> bXjl
    94:95:void setStart(org.bukkit.Location) -> jFOS
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> YWBc
    114:115:void setMaxDistance(java.lang.Double) -> tTOK
    119:119:java.lang.Double getDistanceCovered() -> psTs
    124:125:void setDistanceCovered(java.lang.Double) -> Plhx
    129:129:java.lang.Double getStep() -> mPXy
    134:135:void setStep(java.lang.Double) -> vABq
react.surge.util.ReflectionUtils -> SCas:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> fmIT
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> fmIT
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> fmIT
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> fmIT
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> fmIT
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> fmIT
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> fmIT
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> fmIT
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> fmIT
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> fmIT
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> fmIT
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> fmIT
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> fmIT
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> fmIT
react.surge.util.ReflectionUtils$DataType -> SCas$fmIT:
    react.surge.util.ReflectionUtils$DataType BYTE -> XVEU
    react.surge.util.ReflectionUtils$DataType SHORT -> oihA
    react.surge.util.ReflectionUtils$DataType INTEGER -> Lksb
    react.surge.util.ReflectionUtils$DataType LONG -> EpQY
    react.surge.util.ReflectionUtils$DataType CHARACTER -> QPon
    react.surge.util.ReflectionUtils$DataType FLOAT -> uAEg
    react.surge.util.ReflectionUtils$DataType DOUBLE -> YHGK
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> IIXq
    java.util.Map CLASS_MAP -> SNfF
    java.lang.Class primitive -> XDcN
    java.lang.Class reference -> vLXk
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> ixvu
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> rFVe
    704:704:java.lang.Class getReference() -> mXjD
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> lmyI
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> jEpN
    741:742:java.lang.Class getReference(java.lang.Class) -> tTOK
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> fmIT
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> lmyI
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> lmyI
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> jEpN
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> fmIT
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> SCas$lmyI:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> jtJQ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> ptyk
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> CHGw
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> SqHS
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> sSoj
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> KqaG
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> PNLb
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> EMlW
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> dYGO
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> jbgT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> QPoC
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> dGdY
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> svSP
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> AAaH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> AuFV
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> Sxwm
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> NXfw
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> FbSw
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> JfPT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> XgIF
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> RTTr
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> UJJC:
    void refresh() -> refresh
react.surge.util.SQLOperation -> VMLW:
    react.surge.util.SQLOperation LOAD -> Mnxc
    react.surge.util.SQLOperation SAVE -> hdtp
    react.surge.util.SQLOperation[] ENUM$VALUES -> elmK
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> ghPL:
    react.surge.util.ServerState START -> tOGJ
    react.surge.util.ServerState ENABLE -> buEt
    react.surge.util.ServerState DISABLE -> iFUu
    react.surge.util.ServerState STOP -> YGgr
    react.surge.util.ServerState RUNNING -> AuGa
    react.surge.util.ServerState[] ENUM$VALUES -> Bwhy
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> eagl:
    org.bukkit.Location location -> Cpwo
    org.bukkit.util.Vector offset -> vTkY
    org.bukkit.util.Vector size -> BfhE
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> OGcB
    90:94:org.bukkit.Location randomLocation() -> fBsl
    104:104:org.bukkit.Location randomSurface() -> uFng
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> qmgA
    129:129:org.bukkit.util.Vector getSize() -> GQkc
react.surge.util.SnowLevel -> uiHM:
    byte level -> DKLK
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> NpSR
    51:52:void setLevel(byte) -> kABv
react.surge.util.SuperCaller -> mrQQ:
    void run() -> run
react.surge.util.T -> FWPW:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> lmyI
    32:35:void stop() -> stop
react.surge.util.TXT -> gyQI:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> vYtK
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> fmIT
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> fmIT
    99:99:java.lang.String line(react.surge.util.C,int) -> fmIT
    113:113:java.lang.String underline(react.surge.util.C,int) -> lmyI
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> fmIT
react.surge.util.Tag -> AaRs:
    java.lang.String value() -> value
react.surge.util.Timer -> Wiae:
    long tns -> eBXb
    long cns -> Qrsa
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> EKfE
react.surge.util.VectorMath -> QVoC:
    int[] $SWITCH_TABLE$surge$util$Axis -> UutL
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> KaAs
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> fmIT
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> fmIT
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> lmyI
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> jEpN
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> fmIT
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> lmyI
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> lmyI
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> jEpN
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> tTOK
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> Plhx
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> vABq
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> vYtK
    111:111:double round(double,int) -> Plhx
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> fmIT
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> fmIT
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> fmIT
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> tTOK
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> Plhx
    268:268:org.bukkit.util.Vector toVector(float,float) -> fmIT
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> fmIT
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> fmIT
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> vtFh
    337:340:double getSpeed(org.bukkit.util.Vector) -> kABv
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> fmIT
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> FMkB
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> fmIT
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> lmyI
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> jEpN
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> tTOK
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> ejDm
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> KEEq
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> xGfi
react.surge.util.VectorMath$1 -> QVoC$1:
    org.bukkit.util.Vector val$vector -> EpQs
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> HSoO
    1:1:java.lang.Object onAdapt(java.lang.Object) -> vYtK
react.surge.util.W -> MKEm:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> vtFh
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> fmIT
    75:86:org.bukkit.entity.Entity getEntity(int) -> Huvr
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> fmIT
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> fmIT
    143:143:int getChunkX(org.bukkit.block.Block) -> kABv
    155:155:int getChunkY(org.bukkit.block.Block) -> FMkB
    168:169:void dropXp(org.bukkit.Location,int) -> lmyI
    180:180:int getChunkZ(org.bukkit.block.Block) -> ejDm
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> lmyI
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> fmIT
    232:239:react.glang.GList news(org.bukkit.Location) -> yIjF
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> fmIT
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> yIjF
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> tBjk
    300:300:org.bukkit.World toSync(org.bukkit.World) -> TxuD
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> HSoO
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> tBjk
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> tBjk
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> miPT
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> fmIT
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> fmIT
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> fmIT
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> fmIT
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> fmIT
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> fmIT
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> fmIT
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> fmIT
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> TxuD
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> kjtt
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> TxuD
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> jEpN
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> fmIT
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> fmIT
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> fmIT
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> fmIT
react.surge.util.W$1 -> MKEm$1:
    java.lang.Double val$doff -> XnkA
    org.bukkit.entity.Entity val$e -> BwkD
    org.bukkit.entity.Entity[] val$result -> FsHa
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> ejDm
react.surge.util.Worlds -> twHx:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> UQwo
    33:33:boolean hasWorld(java.lang.String) -> roms
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> Nfyc:
react.text.ColoredString -> HKvY:
    react.surge.util.C c -> cMUG
    java.lang.String s -> bRal
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> tTmI
    42:43:void setC(react.surge.util.C) -> lmyI
    47:47:java.lang.String getS() -> DIDI
    52:53:void setS(java.lang.String) -> LaCK
react.text.RTEX -> QVqY:
    react.glang.GList extras -> dqyd
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> ObUQ
    44:58:react.json.JSONObject toJSON() -> HvVe
react.text.RTX -> VfaT:
    react.json.JSONArray base -> hutm
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> vABq
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> lmyI
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> fmIT
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> fmIT
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> lmyI
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> jEpN
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> fmIT
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> lmyI
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> jEpN
    265:265:react.json.JSONArray toJSON() -> Orua
    276:277:void tellRawTo(org.bukkit.entity.Player) -> DjHe
react.text.RawText -> sABM:
    java.lang.String COLOR_BLACK -> KFoM
    java.lang.String COLOR_DARK_BLUE -> rarx
    java.lang.String COLOR_DARK_GREEN -> EpTi
    java.lang.String COLOR_DARK_AQUA -> ywjF
    java.lang.String COLOR_DARK_RED -> Uepk
    java.lang.String COLOR_DARK_PURPLE -> Akwi
    java.lang.String COLOR_GOLD -> FQUL
    java.lang.String COLOR_GRAY -> svYF
    java.lang.String COLOR_DARK_GRAY -> KrFj
    java.lang.String COLOR_BLUE -> VyuR
    java.lang.String COLOR_GREEN -> yfhL
    java.lang.String COLOR_AQUA -> JncK
    java.lang.String COLOR_RED -> IALf
    java.lang.String COLOR_LIGHT_PURPLE -> GnJt
    java.lang.String COLOR_YELLOW -> tEui
    java.lang.String COLOR_WHITE -> CHJr
    java.lang.String COLOR_NONE -> mtff
    java.lang.String HEAD_TEXT -> QauW
    java.lang.String HEAD_COLOR -> WuIg
    java.lang.String HEAD_BOLD -> lPBC
    java.lang.String HEAD_ITALIC -> wXQP
    java.lang.String HEAD_UNDERLINED -> jtNj
    java.lang.String HEAD_STRIKETHROUGH -> UoCY
    java.lang.String HEAD_OBFUSCATED -> huwr
    java.lang.String HEAD_CLICK_EVENT -> Vyud
    java.lang.String HEAD_HOVER_EVENT -> HpnD
    java.lang.String HEAD_ACTION -> xIqk
    java.lang.String HEAD_VALUE -> qyDD
    java.lang.String HEAD_EXTRA -> qWAD
    java.lang.String HEAD_ACTION_SHOW_TEXT -> PMqO
    java.lang.String HEAD_ACTION_COMMAND -> usmX
    java.util.ArrayList components -> TcNE
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> PJjo
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> Plhx
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> fmIT
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> fmIT
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> fmIT
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> fmIT
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> fmIT
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> fmIT
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> fmIT
    307:313:java.lang.String compile() -> kIqm
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> fmIT

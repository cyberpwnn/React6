react.Config -> dnqv:
    react.glang.GMap worldConfigs -> dnqv
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> JtIb
    java.lang.String A_ENTITYCACHE_INTERVAL -> KUIb
    java.lang.String A_COMMANDOVERRIDE_TPS -> XuAl
    java.lang.String A_REACT_REMOTE_PORT -> jqEQ
    java.lang.String A_REACT_REMOTE_ENABLED -> vcFN
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> TFQb
    java.lang.String A_POOL_MAXTHREADS -> PmIl
    java.lang.String A_POOL_SYNC_NANOS -> wDFX
    java.lang.String A_ENTITYCACHE_ENABLED -> NLoy
    java.lang.String A_FASTLEAF_ENABLED -> PSXJ
    java.lang.String A_FASTLEAF_ONDECAY -> KekD
    java.lang.String A_FASTLEAF_INSTANT -> HvSx
    java.lang.String A_FASTLEAF_DECAYPERIOD -> IVru
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> WWkg
    java.lang.String A_ENTITYSTACK_ENABLED -> vABY
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> ooQq
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> eqvC
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> Eliy
    java.lang.String A_GLASS_SHOW_BLOCKS -> salA
    java.lang.String A_GLASS_SHOW_PARTICLES -> equa
    java.lang.String A_ALLOW_CULL -> ejFV
    java.lang.String A_ALLOW_PURGE -> PJfj
    java.lang.String A_ALLOW_CACHE -> IVtE
    java.lang.String A_CULL_RULES -> HeQT
    java.lang.String A_RAI_TPS_HIGH_TICK -> KUHd
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> xhiv
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> WiMJ
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> pGaH
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> DrWU
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> oLnO
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> Qoju
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> gVYI
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> OOrf
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> rohk
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> CLpp
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> ssLm
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> KCgI
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> hPin
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> CUbQ
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> KTja
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> Grql
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> DOup
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> Dihj
    java.lang.String A_RAI_FLUID_TIME_CEIL -> UHub
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> pYFY
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> xWki
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> KfMa
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> ndBI
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> SvUf
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> IhXO
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> ndAQ
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> DPXC
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> JRIY
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> NwgX
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> eGbk
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> EJhH
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> uxtV
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> dweN
    java.lang.String A_USE_WORLD_CONFIGS -> AyrD
    java.lang.String A_LANGUAGE -> Ywed
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> qRua
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> WypA
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> TVtO
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> BIpL
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> PlkH
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> aCjS
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> mrBV
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> BSDG
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> ogFf
    java.lang.String A_RAI_ENTITY_PROPIGATE -> aKyo
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> VCjb
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> pjJJ
    int ENTITYCACHE_CHUNK_RADIUS -> uNdQ
    int ENTITYCACHE_INTERVAL -> ccdB
    boolean COMMANDOVERRIDES_TPS -> HeWL
    int REACT_REMOTE_PORT -> UcLW
    boolean REACT_REMOTE_ENABLED -> OHHb
    int ENTITY_STACK_MAX_COUNT -> Ayrb
    int POOL_MAXTHREADS -> fRyd
    long POOL_SYNC_NANOS -> BlUQ
    boolean ENTITYCACHE_ENABLED -> QoqR
    boolean FASTLEAF_ENABLED -> uNdU
    boolean FASTLEAF_ONDECAY -> EJkb
    boolean FASTLEAF_INSTANT -> MSCu
    int FASTLEAF_DECAYPERIOD -> CgJB
    boolean COMMANDOVERRIDES_MEMORY -> Rrsm
    boolean ENTITYSTACK_ENABLED -> BBCa
    int ENTITYSTACK_MINIMUM_GROUP -> oVCn
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> oVDN
    int ENTITYSTACK_MAXIMUM_HEALTH -> ThWg
    boolean GLASS_SHOW_BLOCKS -> Qons
    boolean GLASS_SHOW_PARTICLES -> iLBW
    react.glang.GList ALLOW_CULL -> MccX
    react.glang.GList ALLOW_PURGE -> IpiO
    react.glang.GList ALLOW_CACHE -> YgGS
    react.glang.GList CULL_RULES -> IVuy
    double RAI_TPS_HIGH_TICK -> Sdsu
    long RAI_REDSTONE_TIME_FLOOR -> yInJ
    long RAI_REDSTONE_TIME_CEIL -> DOwa
    long RAI_REDSTONE_TIME_MUDDING -> prXX
    double RAI_REDSTONE_TIME_FUNCTION -> qRwc
    double RAI_REDSTONE_TIME_OVERBLEED -> CwiQ
    int RAI_REDSTONE_TIME_RADIUS -> ksin
    int RAI_REDSTONE_TIME_PROPIGATION -> mqcP
    long RAI_HOPPER_TIME_FLOOR -> KTnl
    long RAI_HOPPER_TIME_CEIL -> CMXG
    long RAI_HOPPER_TIME_MUDDING -> sbRv
    double RAI_HOPPER_TIME_FUNCTION -> CfjM
    double RAI_HOPPER_TIME_OVERBLEED -> ogIM
    int RAI_HOPPER_TIME_RADIUS -> QMpC
    int RAI_HOPPER_TIME_PROPIGATION -> Lytv
    int RAI_ENTITY_CHUNK_MULTIPLIER -> pGhK
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> mXRD
    int RAI_ENTITY_CHUNK_RADIUS -> wvnv
    long RAI_FLUID_TIME_FLOOR -> vtLp
    long RAI_FLUID_TIME_CEIL -> PmQG
    long RAI_FLUID_TIME_MUDDING -> PKNP
    double RAI_FLUID_TIME_FUNCTION -> uhXt
    double RAI_FLUID_TIME_OVERBLEED -> XkvU
    int RAI_FLUID_TIME_RADIUS -> aoBF
    int RAI_FLUID_TIME_PROPIGATION -> Gjfa
    double SMEAR_TICK_ENTITIES_MAX_TICK -> RYba
    double SMEAR_TICK_TILES_MAX_TICK -> goox
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> NEEt
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> YfhC
    double SMEAR_TICK_ENTITIES_AMOUNT -> Bkwh
    double SMEAR_TICK_TILES_AMOUNT -> IqKg
    boolean SMEAR_TICK_ENTITIES_ENABLE -> lDKh
    boolean SMEAR_TICK_TILES_ENABLE -> rMmN
    boolean HOPPER_OVERTICK_ENABLE -> bhqM
    boolean USE_WORLD_CONFIGS -> LFpE
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> xXOj
    long RAI_CHUNK_TIME_CEIL -> tmeR
    long RAI_CHUNK_TIME_MUDDING -> QgbC
    double RAI_CHUNK_TIME_FUNCTION -> YEFV
    double RAI_CHUNK_TIME_OVERBLEED -> ytcu
    int RAI_CHUNK_TIME_RADIUS -> NLvJ
    int RAI_CHUNK_TIME_PROPIGATION -> kHxC
    boolean RAI_CHUNK_TIME_PROPIGATE -> ctfG
    boolean RAI_FLUID_TIME_PROPIGATE -> aoDD
    boolean RAI_ENTITY_PROPIGATE -> cuId
    boolean RAI_HOPPER_TIME_PROPIGATE -> CUjR
    boolean RAI_REDSTONE_TIME_PROPIGATE -> xiSs
    boolean hrld -> tdxG
    boolean rns -> owlB
    boolean rrl -> QEaX
    39:656:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    661:678:void doTrack(org.bukkit.plugin.Plugin) -> dnqv
    683:705:void onRead(org.bukkit.plugin.Plugin) -> JtIb
    709:739:void read(java.io.File,boolean) -> dnqv
    743:760:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> dnqv
    765:773:void closeWorldConfig(org.bukkit.World) -> JtIb
    778:891:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> dnqv
    896:933:react.surge.cluster.DataCluster defaultConfig(boolean) -> dnqv
    938:1013:react.glang.GList getDefaultEntitiesForCaching() -> dnqv
    1018:1093:react.glang.GList getDefaultEntitiesForCulling() -> JtIb
    1098:1135:react.glang.GList getDefaultEntitiesForRemoval() -> KUIb
    1140:1169:react.glang.GList getDefaultCullRules() -> XuAl
react.Config$1 -> dnqv$1:
    java.io.File val$fConfig -> PvDT
    java.io.File val$fConfigExperimental -> QFCB
    org.bukkit.plugin.Plugin val$main -> bPDU
    1:664:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    669:673:void run() -> run
react.Config$2 -> dnqv$2:
    react.api.WorldConfig val$wc -> wTmu
    org.bukkit.World val$w -> CEIS
    1:750:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    755:756:void run() -> run
react.Gate -> JtIb:
    react.glang.GMap defaultSettings -> nAcV
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> KndV
    38:38:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    42:132:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> dnqv
    138:169:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> dnqv
    174:174:int getChunkCountForView() -> jqEQ
    179:179:int getMaxChunksForView() -> vcFN
    184:184:boolean hasFawe() -> TFQb
    189:210:void tickEntityNextTickListTick(org.bukkit.World) -> KUIb
    214:218:void resetEntityMaxTick(org.bukkit.World) -> XuAl
    222:222:int getEntityTickMax(org.bukkit.World) -> jqEQ
    227:227:int getTileTickMax(org.bukkit.World) -> vcFN
    232:250:void tweakEntityTickMax(org.bukkit.World,int) -> dnqv
    254:271:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> dnqv
    276:280:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> dnqv
    284:296:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> dnqv
    301:305:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> JtIb
    309:327:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> dnqv
    331:335:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> TFQb
    340:343:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> dnqv
    348:351:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> JtIb
    356:356:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> KUIb
    361:361:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> XuAl
    366:366:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> jqEQ
    371:381:boolean canUnload(org.bukkit.World,int,int) -> dnqv
    388:404:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    410:421:void unloadChunk(org.bukkit.World,int,int) -> JtIb
    425:436:void removeEntity(org.bukkit.entity.Entity) -> dnqv
    440:451:void purgeEntity(org.bukkit.entity.Entity) -> JtIb
    455:466:void cullEntity(org.bukkit.entity.Entity) -> KUIb
    470:481:void cachedEntity(org.bukkit.entity.Entity) -> XuAl
    486:503:void updateBlock(org.bukkit.block.Block) -> dnqv
    507:511:java.lang.String header(java.lang.String,react.surge.util.C) -> dnqv
    516:516:java.lang.String header(react.surge.util.C) -> dnqv
    522:526:void updateFluid(org.bukkit.block.Block) -> JtIb
    36:36:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> PmIl
react.Gate$1 -> JtIb$1:
    react.api.SelectorPosition val$sel -> tmgo
    react.glang.Callback val$prog -> wfQO
    react.glang.Callback val$cb -> EvEN
    1:42:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    47:130:void run() -> run
react.Gate$1$1 -> JtIb$1$1:
    react.Gate$1 this$1 -> uqKy
    java.lang.Object val$o -> ggbS
    java.lang.reflect.Constructor val$vectorConstruct -> nlWI
    java.lang.reflect.Constructor val$cuboidConstruct -> GkHI
    java.lang.reflect.Method val$faweFixMethod -> wvqE
    java.lang.Integer[] val$total -> kcMi
    java.lang.Integer[] val$sof -> vtOB
    react.glang.Callback val$prog -> wfQO
    java.lang.Integer val$tot -> baCm
    1:74:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    81:99:void run() -> run
react.Gate$1$2 -> JtIb$1$2:
    react.Gate$1 this$1 -> uqKy
    react.glang.Callback val$prog -> wfQO
    react.glang.Callback val$cb -> EvEN
    java.lang.Integer[] val$total -> kcMi
    1:103:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    110:118:void run() -> run
react.Info -> KUIb:
    java.lang.String CORE_REACT_DOT -> DXlb
    java.lang.String CORE_NAME -> Kvro
    java.lang.String CORE_CACHE -> lCmT
    java.lang.String WORLD_CONFIGS -> Euba
    java.lang.String CORE_DOTYML -> SSvm
    java.lang.String COMMAND_REACT -> GjgT
    java.lang.String COMMAND_RAI -> dfjF
    java.lang.String COMMAND_ACT_DESCRIPTION -> QVap
    java.lang.String COMMAND_ACT -> NgLI
    java.lang.String COMMAND_ACT_ALIAS_1 -> kAJV
    java.lang.String COMMAND_ACT_ALIAS_2 -> GQVB
    java.lang.String COMMAND_ACT_USAGE -> lwQk
    java.lang.String COMMAND_HELP_DESCRIPTION -> TFYd
    java.lang.String COMMAND_HELP -> HBvW
    java.lang.String COMMAND_HELP_ALIAS_1 -> ggbM
    java.lang.String COMMAND_HELP_ALIAS_2 -> EKPE
    java.lang.String COMMAND_HELP_USAGE -> aToR
    java.lang.String COMMAND_STATUS_DESCRIPTION -> PdaF
    java.lang.String COMMAND_STATUS -> lClc
    java.lang.String COMMAND_STATUS_ALIAS_1 -> dwkI
    java.lang.String COMMAND_STATUS_ALIAS_2 -> VfQx
    java.lang.String COMMAND_STATUS_USAGE -> VDOX
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> qTAN
    java.lang.String COMMAND_CPUSCORE -> cuLB
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> cBGQ
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> byxF
    java.lang.String COMMAND_CPUSCORE_USAGE -> CwpJ
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> rpUq
    java.lang.String COMMAND_RELOAD -> DYQL
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> RIHH
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> jqNi
    java.lang.String COMMAND_RELOAD_USAGE -> qKOV
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> RHgB
    java.lang.String COMMAND_MONITOR -> iBwH
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> gotv
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> gMrY
    java.lang.String COMMAND_MONITOR_USAGE -> ghEW
    java.lang.String COMMAND_VERSION_DESCRIPTION -> TNjs
    java.lang.String COMMAND_VERSION -> aerY
    java.lang.String COMMAND_VERSION_ALIAS_1 -> IpoS
    java.lang.String COMMAND_VERSION_ALIAS_2 -> yJTx
    java.lang.String COMMAND_VERSION_USAGE -> KoFT
    java.lang.String COMMAND_MAP_DESCRIPTION -> AOgE
    java.lang.String COMMAND_MAP -> QFCd
    java.lang.String COMMAND_MAP_ALIAS_1 -> VfUA
    java.lang.String COMMAND_MAP_ALIAS_2 -> FNUA
    java.lang.String COMMAND_MAP_USAGE -> aeri
    java.lang.String COMMAND_GLASS_DESCRIPTION -> AaHl
    java.lang.String COMMAND_GLASS -> CgNf
    java.lang.String COMMAND_GLASS_ALIAS_1 -> qltN
    java.lang.String COMMAND_GLASS_ALIAS_2 -> QVgF
    java.lang.String COMMAND_GLASS_USAGE -> RIHr
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> gVen
    java.lang.String COMMAND_CBLAME -> eYQD
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> KLeL
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> YpAP
    java.lang.String COMMAND_CBLAME_USAGE -> rgfl
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> Nfoa
    java.lang.String COMMAND_ACTIONLOG -> QNVm
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> afWP
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> HvaD
    java.lang.String COMMAND_ACTIONLOG_USAGE -> hjjL
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> RkME
    java.lang.String COMMAND_CAPABILITIES -> ntlP
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> sryf
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> xGUR
    java.lang.String COMMAND_CAPABILITIES_USAGE -> SLMN
    java.lang.String MSG_PERMISSION -> awXT
    java.lang.String MSG_MONITORING_STARTED -> kbpl
    java.lang.String MSG_MONITORING_STOPPED -> UcRn
    java.lang.String MSG_ACTIONLOGGING_STARTED -> TONU
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> AaKc
    java.lang.String MSG_GLASS_STARTED -> TOOB
    java.lang.String MSG_GLASS_STOPPED -> hryj
    org.bukkit.Color COLOR_HOPPER -> mOfB
    org.bukkit.Color COLOR_BLOCK_UPDATE -> qvEY
    org.bukkit.Color COLOR_BLOCK_FROMTO -> woFI
    org.bukkit.Color COLOR_BLOCK_BURN -> nBHS
    org.bukkit.Color COLOR_BLOCK_DECAY -> mXVj
    org.bukkit.Color COLOR_BLOCK_FORM -> WrIu
    java.lang.String NAME_TICK -> hIGe
    java.lang.String NAME_MEMORY -> dDkI
    java.lang.String NAME_CHUNKS -> xhum
    java.lang.String NAME_ENTITIES -> gFEC
    java.lang.String STATE_MONITORING_TAB -> IycD
    java.lang.String STATE_MONITORING_ENABLED -> QNVN
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> lURo
    java.lang.String STATE_MAPPING_ENABLED -> bFtk
    java.lang.String STATE_SOUND_PLAYS -> jpoO
    java.lang.String STATE_MONITORING_POSTED -> vlAx
    java.lang.String STATE_MONITORING_LASTTAB -> nAjG
    java.lang.String STATE_GLASSES_ENABLED -> twAQ
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> RHjT
    java.lang.String STATE_PLAYER_HOTBAR -> psDs
    java.lang.String STATE_PLAYER_SHIFT -> yJYy
    java.lang.String STATE_PLAYER_SCROLL -> OXru
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> DPca
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> GjnU
    java.lang.String PERM_ACCESS -> FhKy
    java.lang.String PERM_MONITOR -> UkgK
    java.lang.String PERM_MONITOR_TITLE -> DPck
    java.lang.String PERM_MONITOR_ACTIONLOG -> QNYO
    java.lang.String PERM_MONITOR_MAP -> UtXI
    java.lang.String PERM_MONITOR_ENVIRONMENT -> cAkD
    java.lang.String PERM_MONITOR_GLASSES -> JtXg
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> lTuV
    java.lang.String PERM_ACT -> rWGk
    java.lang.String PERM_RAI -> TydG
    java.lang.String PERM_RAI_CONTROL -> ETEw
    java.lang.String PERM_RAI_ACCESS -> vAOx
    java.lang.String PERM_RAI_MONITOR -> Pugb
    java.lang.String PERM_RELOAD -> vAOt
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> RHiS
    java.lang.String SAMPLER_REDSTONE_TICK -> gxjQ
    java.lang.String SAMPLER_ENTITY_TIME -> jqSG
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> baIn
    java.lang.String SAMPLER_TILE_TIME_LOCK -> HLNW
    java.lang.String SAMPLER_TILE_TIME -> ESee
    java.lang.String SAMPLER_TILE_DROPTICK -> lwXj
    java.lang.String SAMPLER_ENTITY_DROPTICK -> CxSn
    java.lang.String SAMPLER_REDSTONE_SECOND -> oUli
    java.lang.String SAMPLER_REDSTONE_TIME -> TOQK
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> eYQx
    java.lang.String SAMPLER_HOPPER_TICK -> CMaB
    java.lang.String SAMPLER_HOPPER_SECOND -> BtqH
    java.lang.String SAMPLER_HOPPER_TIME -> JIbx
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> Btpf
    java.lang.String SAMPLER_FLUID_TICK -> NVQF
    java.lang.String SAMPLER_FLUID_SECOND -> WaKS
    java.lang.String SAMPLER_FLUID_TIME -> EdhD
    java.lang.String SAMPLER_TPS -> MSMf
    java.lang.String SAMPLER_TICK -> ntmU
    java.lang.String SAMPLER_TIU -> mXWx
    java.lang.String SAMPLER_MEM -> nuNT
    java.lang.String SAMPLER_FREEMEM -> qSfY
    java.lang.String SAMPLER_MAXMEM -> IqWO
    java.lang.String SAMPLER_ALLOCMEM -> cSOL
    java.lang.String SAMPLER_MAHS -> qmXr
    java.lang.String SAMPLER_CHK -> IFcL
    java.lang.String SAMPLER_ATASK -> LrPL
    java.lang.String SAMPLER_STASK -> pHRv
    java.lang.String SAMPLER_CHK_TIME -> BuRu
    java.lang.String SAMPLER_EXPLOSION_TIME -> JsyY
    java.lang.String SAMPLER_CHKS -> vJEL
    java.lang.String SAMPLER_ENT -> FVlJ
    java.lang.String SAMPLER_ENTLIV -> fTGw
    java.lang.String SAMPLER_ENTDROP -> JJGW
    java.lang.String SAMPLER_ENTTILE -> cmAp
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> fujB
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> KMJc
    java.lang.String ACTION_CULL_ENTITIES_NAME -> kQtY
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> Blbw
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> HmrP
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> fSef
    java.lang.String ACTION_UPDATE_FLUID_NAME -> HnSM
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> EdiM
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> ghLA
    java.lang.String ACTION_LOCK_FLUID_STATUS -> dxSh
    java.lang.String ACTION_LOCK_FLUID_NAME -> baLV
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> fBck
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> Btrr
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> piry
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> jqSs
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> APMd
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> xGWt
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> yAie
    java.lang.String ACTION_LOCK_HOPPER_NAME -> eXsS
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> TiEj
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> NxWq
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> nRob
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> Jkjm
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> TqXj
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> KoNu
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> DbJU
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> SLRd
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> uiFj
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> XKAT
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> kJGf
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> GsdI
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> jiFl
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> pbGU
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> wLgu
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> kbxG
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> HvgP
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> tfBp
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> qCFw
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> FhQE
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> BAnw
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> XBPW
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> Aqpf
    java.lang.String ACTION_FIX_LIGHTING_NAME -> DHXN
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> RcCN
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> UlKg
    java.lang.String ACTION_COLLECT_GARBAGE -> yRnX
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> pjXG
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> rMyR
    8:233:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> XuAl:
    java.lang.String BUNDLE_NAME -> YDqS
    java.util.ResourceBundle RESOURCE_BUNDLE -> imsC
    java.util.ResourceBundle PRIMARY_BUNDLE -> fdhr
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> jqEQ:
    react.React instance -> fdiS
    react.controller.SampleController sampleController -> MKAR
    react.controller.PlayerController playerController -> Ukhv
    react.controller.MonitorController monitorController -> kJFf
    react.controller.CommandController commandController -> aTyH
    react.controller.ActionController actionController -> docx
    react.controller.FastDecayController fastDecayController -> AjBh
    react.controller.EntityStackController entityStackController -> iLOl
    react.controller.GlassController glassController -> xOjY
    react.controller.EntityCullController entityCullController -> gEjG
    react.controller.SpikeController spikeController -> pPcc
    react.controller.SecurityController securityController -> Fxoq
    react.controller.RedstoneController redstoneController -> YxWU
    react.controller.HopperController hopperController -> vtYJ
    react.controller.PhysicsController physicsController -> HmuH
    react.controller.TickTimeController tickTimeController -> ndQC
    react.controller.RAIController raiController -> aUYw
    react.controller.FluidController fluidController -> CgYU
    react.controller.ChunkController chunkController -> upxS
    react.controller.GraphController graphController -> GkTp
    react.controller.ChronophyFluidController fluidChronophyController -> EBkP
    react.controller.EventController eventController -> rEkt
    react.controller.BlockInjectController blockInjectController -> BtvV
    react.controller.SmearTickController smearTickController -> pixy
    react.controller.FeatureController featureController -> sbbN
    react.controller.HopperOvertickController hopperPlungeController -> XdUb
    react.controller.BenchmarkController benchmarkController -> GtGL
    react.controller.LanguageController languageController -> RAAi
    react.controller.RemoteController remoteController -> cldu
    react.controller.ExplosiveController explosiveController -> nJaJ
    react.controller.WorldController worldController -> DbLf
    42:42:void <init>() -> <init>
    141:141:void enable() -> enable
    147:147:void disable() -> disable
react.action.ActionCollectGarbage -> vcFN:
    19:22:void <init>() -> <init>
    27:61:void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
react.action.ActionCollectGarbage$1 -> vcFN$1:
    react.action.ActionCollectGarbage this$0 -> MlgD
    react.api.IActionSource val$source -> rEkf
    1:29:void <init>(react.action.ActionCollectGarbage,react.api.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> dnqv
react.action.ActionCollectGarbage$1$1 -> vcFN$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> ThjP
    long val$mbnex -> iCau
    long val$mbmem -> Puoc
    react.api.IActionSource val$source -> rEkf
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.api.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> TFQb:
    long ms -> DXxe
    int lcd -> cmEJ
    32:59:void <init>() -> <init>
    64:150:void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> dnqv
    27:27:void access$0(react.action.ActionCullEntities,long) -> dnqv
    28:28:int access$1(react.action.ActionCullEntities) -> dnqv
    27:27:long access$2(react.action.ActionCullEntities) -> JtIb
react.action.ActionCullEntities$1 -> TFQb$1:
    react.action.ActionCullEntities this$0 -> HCbi
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> TFQb$2:
    react.action.ActionCullEntities this$0 -> HCbi
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> TFQb$3:
    react.action.ActionCullEntities this$0 -> HCbi
    react.glang.FinalInteger val$completed -> yuTS
    react.glang.FinalInteger val$total -> jNuE
    react.glang.FinalInteger val$totalCulled -> TWfr
    react.glang.FinalInteger val$totalChunked -> HUFA
    react.api.IActionSource val$source -> rEkf
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> TFQb$4:
    react.action.ActionCullEntities this$0 -> HCbi
    react.api.IActionSource val$source -> rEkf
    react.glang.FinalInteger val$totalCulled -> TWfr
    react.glang.FinalInteger val$totalChunked -> HUFA
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> PmIl:
    25:39:void <init>() -> <init>
    44:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
react.action.ActionFixLighting$1 -> PmIl$1:
    react.action.ActionFixLighting this$0 -> mrQk
    1:28:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> PmIl$2:
    react.action.ActionFixLighting this$0 -> mrQk
    react.api.IActionSource val$source -> rEkf
    int val$ch -> MuVW
    1:77:void <init>(react.action.ActionFixLighting,react.api.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> dnqv
    1:1:void run(java.lang.Object) -> dnqv
react.action.ActionFixLighting$3 -> PmIl$3:
    react.action.ActionFixLighting this$0 -> mrQk
    1:88:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> dnqv
    1:1:void run(java.lang.Object) -> dnqv
react.action.ActionLockFluid -> wDFX:
    int lcd -> cmEJ
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
react.action.ActionLockFluid$1 -> wDFX$1:
    react.action.ActionLockFluid this$0 -> GYrQ
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> wDFX$2:
    react.action.ActionLockFluid this$0 -> GYrQ
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> NLoy:
    int lcd -> cmEJ
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
react.action.ActionLockHopper$1 -> NLoy$1:
    react.action.ActionLockHopper this$0 -> vAUp
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> NLoy$2:
    react.action.ActionLockHopper this$0 -> vAUp
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> PSXJ:
    int lcd -> cmEJ
    26:53:void <init>() -> <init>
    58:102:void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
react.action.ActionLockRedstone$1 -> PSXJ$1:
    react.action.ActionLockRedstone this$0 -> BmHL
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> PSXJ$2:
    react.action.ActionLockRedstone this$0 -> BmHL
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> KekD:
    long ms -> DXxe
    int lcd -> cmEJ
    boolean fail -> prhj
    31:46:void <init>() -> <init>
    51:144:void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> JtIb
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> dnqv
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> dnqv
    26:26:int access$2(react.action.ActionPurgeChunks) -> JtIb
    25:25:long access$3(react.action.ActionPurgeChunks) -> KUIb
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> dnqv
react.action.ActionPurgeChunks$1 -> KekD$1:
    react.action.ActionPurgeChunks this$0 -> nuSo
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> KekD$2:
    react.action.ActionPurgeChunks this$0 -> nuSo
    int val$dk -> qJwc
    java.lang.Object val$j -> WOoP
    react.api.IActionSource val$source -> rEkf
    react.api.ISelector[] val$selectors -> GQaj
    react.glang.FinalInteger val$acompleted -> hcAi
    react.glang.FinalInteger val$completed -> yuTS
    react.glang.FinalInteger val$total -> jNuE
    react.glang.FinalInteger val$totalCulled -> TWfr
    react.glang.FinalInteger val$totalChunked -> HUFA
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.api.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> dnqv
react.action.ActionPurgeChunks$2$1 -> KekD$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> VoOu
    react.glang.FinalInteger val$acompleted -> hcAi
    react.glang.FinalInteger val$completed -> yuTS
    react.glang.FinalInteger val$total -> jNuE
    react.glang.FinalInteger val$totalCulled -> TWfr
    react.glang.FinalInteger val$totalChunked -> HUFA
    react.api.IActionSource val$source -> rEkf
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> KekD$3:
    react.action.ActionPurgeChunks this$0 -> nuSo
    react.api.IActionSource val$source -> rEkf
    react.glang.FinalInteger val$acompleted -> hcAi
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> KekD$4:
    react.action.ActionPurgeChunks this$0 -> nuSo
    org.bukkit.Chunk val$chunk -> INwM
    java.lang.Runnable val$cb -> SLTU
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> HvSx:
    long ms -> DXxe
    int lcd -> cmEJ
    34:61:void <init>() -> <init>
    66:153:void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> JtIb
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> dnqv
    30:30:int access$1(react.action.ActionPurgeEntities) -> dnqv
    29:29:long access$2(react.action.ActionPurgeEntities) -> JtIb
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> dnqv
react.action.ActionPurgeEntities$1 -> HvSx$1:
    react.action.ActionPurgeEntities this$0 -> fTJn
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> HvSx$2:
    react.action.ActionPurgeEntities this$0 -> fTJn
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> HvSx$3:
    react.action.ActionPurgeEntities this$0 -> fTJn
    react.glang.FinalInteger val$completed -> yuTS
    react.glang.FinalInteger val$total -> jNuE
    react.glang.FinalInteger val$totalCulled -> TWfr
    react.glang.FinalInteger val$totalChunked -> HUFA
    react.api.IActionSource val$source -> rEkf
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> HvSx$4:
    react.action.ActionPurgeEntities this$0 -> fTJn
    react.api.IActionSource val$source -> rEkf
    react.glang.FinalInteger val$totalCulled -> TWfr
    react.glang.FinalInteger val$totalChunked -> HUFA
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> HvSx$5:
    react.action.ActionPurgeEntities this$0 -> fTJn
    org.bukkit.entity.Entity val$i -> Jknp
    react.glang.FinalInteger val$cu -> hQcJ
    int val$k -> bick
    org.bukkit.Chunk val$chunk -> INwM
    java.lang.Runnable val$cb -> SLTU
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> IVru:
    int lcd -> cmEJ
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
react.action.ActionUnlockFluid$1 -> IVru$1:
    react.action.ActionUnlockFluid this$0 -> JIlN
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> WWkg:
    int lcd -> cmEJ
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
react.action.ActionUnlockHopper$1 -> WWkg$1:
    react.action.ActionUnlockHopper this$0 -> RREG
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> vABY:
    int lcd -> cmEJ
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
react.action.ActionUnlockRedstone$1 -> vABY$1:
    react.action.ActionUnlockRedstone this$0 -> inYH
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> wDFX
    1:1:java.lang.Object get() -> get
react.api.Action -> ooQq:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> WYDP
    java.lang.String[] nodes -> anqO
    react.api.ActionHandle handle -> afaA
    react.api.ActionState state -> SDFb
    react.api.ActionTargetType target -> dMgC
    react.api.ActionType type -> LrVX
    react.api.IActionSource currentSource -> WaTN
    double progress -> cArW
    react.glang.GMap defaultSelectors -> vlNP
    26:27:void <init>(react.api.ActionType) -> <init>
    29:42:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    47:62:react.api.ISelector[] biselect(react.api.ISelector[]) -> dnqv
    68:69:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> dnqv
    74:74:java.lang.String getName() -> getName
    80:80:java.lang.String getDescription() -> getDescription
    86:86:react.api.ActionHandle getHandleType() -> NLoy
    92:92:react.api.ActionState getState() -> PSXJ
    98:98:java.lang.String getStatus() -> getStatus
    104:105:void setStatus(java.lang.String) -> dnqv
    110:110:double getProgress() -> getProgress
    116:117:void setProgress(double) -> setProgress
    122:122:react.api.ActionTargetType getTarget() -> KekD
    128:128:react.api.ActionType getType() -> HvSx
    134:134:react.glang.GMap getDefaultSelectors() -> IVru
    140:182:void act(react.api.IActionSource,react.api.ISelector[]) -> JtIb
    187:188:void completeAction() -> WWkg
    193:193:react.api.IActionSource getCurrentSource() -> vABY
    199:199:java.lang.String[] getNodes() -> ooQq
    205:206:void setNodes(java.lang.String[]) -> dnqv
    void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
react.api.ActionAlreadyRunningException -> eqvC:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> Eliy:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> salA:
    react.api.ActionHandle AUTOMATIC -> sjtB
    react.api.ActionHandle MANUAL -> jiKL
    react.api.ActionHandle MUTEX -> rhRC
    react.api.ActionHandle[] ENUM$VALUES -> SKvR
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionHandle[] values() -> values
    1:1:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
react.api.ActionNotRunningException -> equa:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> ejFV:
    react.api.ActionState IDLE -> DanC
    react.api.ActionState RUNNING -> cuXb
    react.api.ActionState[] ENUM$VALUES -> WPRt
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> PJfj:
    react.api.ActionTargetType POSITIONAL -> LPSj
    react.api.ActionTargetType SYSTEM -> yBRM
    react.api.ActionTargetType[] ENUM$VALUES -> JtaS
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> IVtE:
    react.api.ActionType FIX_LIGHTING -> kIiy
    react.api.ActionType UNLOCK_FLUID -> NfyE
    react.api.ActionType LOCK_FLUID -> xOnm
    react.api.ActionType UNLOCK_HOPPER -> RkVA
    react.api.ActionType LOCK_HOPPER -> PvQN
    react.api.ActionType UNLOCK_REDSTONE -> BKFv
    react.api.ActionType LOCK_REDSTONE -> uyiv
    react.api.ActionType CULL_ENTITIES -> WXbP
    react.api.ActionType COLLECT_GARBAGE -> sIQM
    react.api.ActionType PURGE_ENTITIES -> vkkt
    react.api.ActionType PURGE_CHUNKS -> NMfu
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> afaA
    react.api.ActionTargetType target -> dMgC
    react.api.ActionType[] ENUM$VALUES -> LrUY
    5:17:void <clinit>() -> <clinit>
    24:30:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    34:34:java.lang.String getName() -> getName
    39:39:java.lang.String getDescription() -> getDescription
    44:44:react.api.ActionHandle getHandle() -> eqvC
    49:49:react.api.ActionTargetType getTarget() -> KekD
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> HeQT:
    react.api.ActivationRangeType ANIMALS -> LPQy
    react.api.ActivationRangeType MONSTERS -> dUwE
    react.api.ActivationRangeType MISC -> EvRV
    react.api.ActivationRangeType[] ENUM$VALUES -> XRsx
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> KUHd:
    int value() -> value
react.api.Async -> xhiv:
react.api.CPUBenchmark -> WiMJ:
    org.bukkit.command.CommandSender sender -> sender
    int score -> SLUl
    java.lang.Runnable onFinish -> DrnW
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> Eliy
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> dnqv
    13:13:int access$1(react.api.CPUBenchmark) -> JtIb
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> KUIb
react.api.CPUBenchmark$1 -> WiMJ$1:
    react.api.CPUBenchmark this$0 -> tvgS
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> WiMJ$2:
    react.api.CPUBenchmark this$0 -> tvgS
    1:77:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> pGaH:
    react.api.CPUResult ULTRA_SLOW -> tmvL
    react.api.CPUResult VERY_SLOW -> vlLa
    react.api.CPUResult SLOW -> GHrm
    react.api.CPUResult AVERAGE -> Ihmp
    react.api.CPUResult GOOD -> EeRs
    react.api.CPUResult FAST -> ndWx
    react.api.CPUResult VERY_FAST -> ntyN
    react.api.CPUResult ULTRA_FAST -> SfKg
    java.lang.String m -> cRuj
    react.api.CPUResult[] ENUM$VALUES -> vkoR
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> dnqv
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> DrWU:
    react.glang.GMap cache -> GHvF
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> JtIb
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> KUIb
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> salA
    54:54:boolean has(java.lang.Object) -> XuAl
react.api.Capability -> oLnO:
    react.api.Capability DUAL_WEILD -> skWD
    react.api.Capability SCOREBOARD -> biey
    react.api.Capability SCOREBOARD_ADVANCED -> Qgto
    react.api.Capability HOPPER -> fdqH
    react.api.Capability ENTITY_ATTRIBUTES -> rFQE
    react.api.Capability ENTITY_AI -> Kweu
    react.api.Capability ACTION_BAR -> maTQ
    react.api.Capability ENTITY_NAMES -> Ornn
    react.api.Capability TITLE_BAR -> LPSs
    react.api.Capability CHUNK_RELIGHTING -> lVAQ
    react.api.Capability MONITOR_SUBMISSIVENESS -> hHrk
    react.api.Capability ACCELERATED_PING -> wnpw
    react.api.Capability ENTITY_THROTTLING -> AGdq
    react.api.Capability TILE_THROTTLING -> YNHy
    react.api.Capability PASSENGERS -> UlPq
    react.glang.GList capabilities -> qBka
    react.surge.util.Protocol version -> LPUG
    react.api.Flavor flavor -> pGyC
    java.lang.String plugin -> jXJc
    java.lang.String name -> name
    13:47:void <clinit>() -> <clinit>
    54:60:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    64:65:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    69:70:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    74:75:void <init>(java.lang.String,java.lang.String) -> <init>
    79:80:void <init>(java.lang.String,react.api.Flavor) -> <init>
    84:85:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    89:94:boolean isPluginCapable() -> equa
    99:99:boolean isFlavorCapable() -> ejFV
    104:104:boolean isVersionCapable() -> PJfj
    109:109:boolean isCapable() -> IVtE
    114:114:react.surge.util.Protocol getVersion() -> HeQT
    119:119:react.api.Flavor getFlavor() -> KUHd
    124:124:java.lang.String getPlugin() -> xhiv
    129:129:java.lang.String getName() -> getName
    134:148:void sendNotCapable(org.bukkit.entity.Player) -> dnqv
    152:166:void sendNotCapable(react.api.IActionSource) -> dnqv
react.api.CapabilityBasis -> Qoju:
    react.api.CapabilityBasis VERSION -> vJKX
    react.api.CapabilityBasis FLAVOR -> OsPf
    react.api.CapabilityBasis PLUGIN -> ejaF
    react.api.CapabilityBasis[] ENUM$VALUES -> BBXr
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.CapabilityBasis[] values() -> values
    1:1:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> gVYI:
    react.api.ChunkIssue ENTITY -> SCjB
    react.api.ChunkIssue HOPPER -> UIoq
    react.api.ChunkIssue REDSTONE -> lgDi
    react.api.ChunkIssue FLUID -> AOvT
    react.api.ChunkIssue PHYSICS -> FFVI
    react.api.ChunkIssue[] ENUM$VALUES -> hAEo
    3:9:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
react.api.Clip -> OOrf:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> rohk:
    org.bukkit.command.CommandSender sender -> sender
    11:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> JtIb
    30:31:void sendResponseSuccess(java.lang.String) -> KUIb
    36:37:void sendResponseError(java.lang.String) -> XuAl
    42:43:void sendResponseActing(java.lang.String) -> jqEQ
react.api.ConsoleActionSource -> CLpp:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> JtIb
    18:19:void sendResponseSuccess(java.lang.String) -> KUIb
    24:25:void sendResponseError(java.lang.String) -> XuAl
    30:31:void sendResponseActing(java.lang.String) -> jqEQ
react.api.CullList -> ssLm:
    react.glang.GSet toCull -> ekAt
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> jqEQ
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> WiMJ
react.api.DTest -> KCgI:
    6:6:void <init>() -> <init>
    11:62:int test() -> pGaH
react.api.EntityFlag -> hPin:
    react.api.EntityFlag NAMED -> Xlkn
    react.api.EntityFlag TAMED -> tfLC
    react.api.EntityFlag STACKED -> JcbL
    react.api.EntityFlag RIDDEN -> MAwG
    react.api.EntityFlag LEASHED -> RkYd
    java.lang.String m -> cRuj
    react.api.EntityFlag[] ENUM$VALUES -> jhnC
    8:14:void <clinit>() -> <clinit>
    18:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> vcFN
    40:65:boolean is(org.bukkit.entity.Entity) -> TFQb
    71:71:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> CUbQ:
    react.glang.GSet entityTypes -> fTPo
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> DrWU
react.api.EntitySample -> KTja:
    react.glang.GMap counts -> ePmN
    react.glang.GMap sets -> WGeA
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> oLnO
    45:45:react.glang.GList getTypes() -> Qoju
    50:57:int total() -> gVYI
    62:67:int get(org.bukkit.entity.EntityType) -> dnqv
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> JtIb
    84:96:void add(org.bukkit.entity.Entity) -> jqEQ
react.api.Experimental -> Grql:
react.api.Flavor -> DOup:
    react.api.Flavor ANY -> PeTB
    react.api.Flavor SAFE_MODE -> PmdG
    react.api.Flavor CRAFT_BUKKIT -> cSXN
    react.api.Flavor BUKKIT -> ESqm
    react.api.Flavor SPIGOT -> EBqA
    react.api.Flavor SOGGY_SPIGOT -> DrrR
    react.api.Flavor PAPER_SPIGOT -> ekAY
    react.api.Flavor TACO_SPIGOT -> qdpj
    react.api.Flavor TORCH_SPIGOT -> yJeU
    react.api.Flavor FORGE_HACK -> pamj
    react.api.Flavor SPONGE_HACK -> Wqwt
    react.api.Flavor[] ENUM$VALUES -> iUMS
    6:18:void <clinit>() -> <clinit>
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> OOrf
    74:79:boolean compatableWith(react.api.Flavor) -> dnqv
    84:84:java.lang.String fancyName() -> rohk
    1:1:react.api.Flavor[] values() -> values
    1:1:react.api.Flavor valueOf(java.lang.String) -> valueOf
react.api.IAction -> Dihj:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> NLoy
    void act(react.api.IActionSource,react.api.ISelector[]) -> JtIb
    void enact(react.api.IActionSource,react.api.ISelector[]) -> dnqv
    react.api.ActionState getState() -> PSXJ
    react.api.ActionTargetType getTarget() -> KekD
    void setNodes(java.lang.String[]) -> dnqv
    java.lang.String[] getNodes() -> ooQq
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> dnqv
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> HvSx
    react.glang.GMap getDefaultSelectors() -> IVru
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> dnqv
    react.api.ISelector[] biselect(react.api.ISelector[]) -> dnqv
    react.api.IActionSource getCurrentSource() -> vABY
    void completeAction() -> WWkg
react.api.IActionSource -> UHub:
    void sendResponse(java.lang.String) -> JtIb
    void sendResponseSuccess(java.lang.String) -> KUIb
    void sendResponseError(java.lang.String) -> XuAl
    void sendResponseActing(java.lang.String) -> jqEQ
react.api.ICache -> pYFY:
    react.glang.GSet get(java.lang.Object) -> JtIb
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> KUIb
    void clear() -> clear
    boolean has(java.lang.Object) -> XuAl
    react.glang.GList k() -> salA
react.api.ICommand -> xWki:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> CLpp
    java.lang.String[] getPermissions() -> ssLm
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> vcFN
    react.api.SideGate getSideGate() -> KCgI
    void registerParameterDescription(java.lang.String,java.lang.String) -> dnqv
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
react.api.IRecord -> KfMa:
    java.lang.String getRecordType() -> hPin
    long getRecordTime() -> CUbQ
    react.json.JSONObject toJSON() -> KTja
    java.lang.Object getRecordObject() -> Grql
    void fromJSON(react.json.JSONObject) -> dnqv
react.api.IRecordBook -> ndBI:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> dnqv
    long getOldestRecordTime() -> DOup
    void addRecord(react.api.IRecord) -> dnqv
    long getLatestRecordTime() -> Dihj
    int countRecords(long,long) -> dnqv
    react.glang.GMap getRecords(long,long) -> JtIb
    int purgeRecordsBefore(long) -> JtIb
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> SvUf:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> UHub
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> pYFY
    react.surge.util.C getAltColor() -> xWki
    void setColor(react.surge.util.C,react.surge.util.C) -> dnqv
    int getInterval() -> getInterval
    void setInterval(int) -> JtIb
    void sample() -> KfMa
    java.lang.String get() -> get
    void construct() -> ndBI
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> IhXO:
    react.api.SelectionMode getMode() -> SvUf
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> jqEQ
    react.glang.GSet getList() -> IhXO
    react.glang.GSet getPossibilities() -> ndAQ
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> vcFN
    java.lang.String getName() -> getName
react.api.Injection -> ndAQ:
    react.api.InjectionMethod value() -> DPXC
react.api.InjectionMethod -> DPXC:
    react.api.InjectionMethod SWAP -> IaBq
    react.api.InjectionMethod SUBSTRATE -> Ojck
    react.api.InjectionMethod RELOAD -> iDKf
    react.api.InjectionMethod[] ENUM$VALUES -> eQQN
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> JRIY:
    java.lang.String value() -> value
react.api.MSampler -> NwgX:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> JRIY
react.api.MonitorHeading -> eGbk:
    react.api.ISampler head -> mYHw
    react.glang.GList children -> hRIy
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> dnqv
    27:27:react.api.ISampler getHead() -> NwgX
    32:33:void setHead(react.api.ISampler) -> JtIb
    37:37:react.glang.GList getChildren() -> eGbk
    42:42:java.lang.String getHeadText() -> EJhH
    47:60:java.lang.String getChildText() -> uxtV
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> dnqv
react.api.NoiseGenerator -> EJhH:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> uxtV:
    react.api.NoiseGenerator[] octaves -> rhXa
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> dweN
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> dweN:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> Emgi
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> AyrD
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> AyrD:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> dnqv
react.api.Permissable -> Ywed:
    react.api.Permissable ACCESS -> cRyl
    react.api.Permissable MONITOR -> pIAB
    react.api.Permissable MONITOR_TITLE -> tDKB
    react.api.Permissable MONITOR_ACTIONLOG -> PeWT
    react.api.Permissable MONITOR_MAP -> mXhE
    react.api.Permissable MONITOR_ENVIRONMENT -> dMlu
    react.api.Permissable MONITOR_GLASSES -> opOv
    react.api.Permissable MONITOR_CHUNK_BLAME -> OYcQ
    react.api.Permissable RAI_MONITOR -> OICD
    react.api.Permissable RAI_CONTROL -> VxHn
    react.api.Permissable RAI_ACCESS -> xrYY
    react.api.Permissable RAI -> SULn
    react.api.Permissable ACT -> NNNO
    react.api.Permissable RELOAD -> JAaN
    java.lang.String node -> ieli
    react.api.Permissable[] ENUM$VALUES -> NpPw
    7:22:void <clinit>() -> <clinit>
    26:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> dnqv
    46:46:java.lang.String getNode() -> Ywed
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PlayerActionSource -> qRua:
    org.bukkit.entity.Player p -> FVwS
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> JtIb
    30:31:void sendResponseSuccess(java.lang.String) -> KUIb
    36:37:void sendResponseError(java.lang.String) -> XuAl
    42:43:void sendResponseActing(java.lang.String) -> jqEQ
react.api.PluginSelfDeleter -> WypA:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> SvpD
    java.lang.Runnable r -> bijB
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> dnqv
react.api.RAIActionSource -> TVtO:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> JtIb
    16:17:void sendResponseSuccess(java.lang.String) -> KUIb
    22:23:void sendResponseError(java.lang.String) -> XuAl
    28:29:void sendResponseActing(java.lang.String) -> jqEQ
react.api.ReactCommand -> BIpL:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> xihB
    java.lang.String usage -> mYGi
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> fdsg
    react.api.SideGate sideGate -> tTiq
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> vcFN
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> dnqv
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> CLpp
    47:47:java.lang.String[] getPermissions() -> ssLm
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> KCgI
react.api.ReactException -> PlkH:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> aCjS:
    react.glang.GMap keystore -> ggwF
    boolean monitoring -> monitoring
    boolean actionlogging -> IiUW
    boolean glasses -> GRND
    boolean mapping -> jXQs
    int monitorSelection -> UlWi
    int plays -> rNhB
    boolean monitorPosted -> wfhM
    int monitorLastSelection -> yAym
    int switchNotification -> cJlP
    int hotbarSlot -> HCmy
    boolean shift -> mHJJ
    int scroll -> XmPs
    double lastHeight -> IFqe
    boolean heightMovement -> kJRx
    org.bukkit.entity.Player p -> FVwS
    24:39:void <clinit>() -> <clinit>
    42:89:void <init>(org.bukkit.entity.Player) -> <init>
    95:102:void save() -> save
    108:115:void load() -> load
    119:119:boolean isMonitoring() -> qRua
    124:124:boolean isMapping() -> WypA
    129:129:org.bukkit.entity.Player getP() -> TVtO
    134:136:void setMonitoring(boolean) -> JtIb
    140:142:void setMapping(boolean) -> KUIb
    146:146:int getMonitorSelection() -> BIpL
    151:153:void setMonitorSelection(int) -> KUIb
    157:157:int getHotbarSlot() -> PlkH
    162:164:void setHotbarSlot(int) -> XuAl
    168:168:boolean isShifting() -> aCjS
    173:175:void setShifting(boolean) -> XuAl
    179:179:boolean isShift() -> mrBV
    184:186:void setShift(boolean) -> jqEQ
    190:190:int getScroll() -> BSDG
    195:197:void setScroll(int) -> jqEQ
    201:201:int getMonitorLastSelection() -> ogFf
    206:208:void setMonitorLastSelection(int) -> vcFN
    212:213:void setP(org.bukkit.entity.Player) -> JtIb
    217:217:double getLastHeight() -> aKyo
    222:224:void setLastHeight(double) -> dnqv
    228:228:boolean isHeightMovement() -> VCjb
    233:235:void setHeightMovement(boolean) -> vcFN
    239:239:int getSwitchNotification() -> pjJJ
    244:246:void setSwitchNotification(int) -> TFQb
    250:250:boolean getMonitorPosted() -> uNdQ
    255:257:void setMonitorPosted(boolean) -> TFQb
    261:261:int getPlays() -> ccdB
    266:268:void setPlays(int) -> PmIl
    272:272:boolean isGlasses() -> HeWL
    277:279:void setGlasses(boolean) -> PmIl
    283:283:boolean isActionlogging() -> UcLW
    288:290:void setActionlogging(boolean) -> wDFX
react.api.Record -> mrBV:
    java.lang.String recordType -> YyEc
    long recordTime -> lfgt
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> hPin
    32:32:long getRecordTime() -> CUbQ
    38:38:java.lang.Object getRecordObject() -> Grql
    react.json.JSONObject toJSON() -> KTja
    void fromJSON(react.json.JSONObject) -> dnqv
react.api.RecordBook -> BSDG:
    java.io.File recordFile -> Hnbp
    react.json.JSONObject js -> fdwO
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> dnqv
    79:87:react.api.IRecord getRecord(long) -> dnqv
    react.api.IRecord createDummyRecord(long,java.lang.String) -> dnqv
    95:107:long getOldestRecordTime() -> DOup
    113:125:long getLatestRecordTime() -> Dihj
    130:130:boolean within(long,long,long) -> dnqv
    136:144:int countRecords(long,long) -> dnqv
    150:162:react.glang.GMap getRecords(long,long) -> JtIb
    168:181:int purgeRecordsBefore(long) -> JtIb
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> ogFf:
react.api.SampledChunk -> aKyo:
    org.bukkit.Chunk c -> DbVs
    react.glang.GMap counts -> ePmN
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> OHHb
    26:38:void hit(react.api.ChunkIssue,int) -> dnqv
    42:42:org.bukkit.Chunk getC() -> Ayrb
    47:47:react.glang.GMap getCounts() -> fRyd
react.api.SampledType -> VCjb:
    react.api.SampledType ENTITY_TIME_LOCK -> qeWR
    react.api.SampledType TILE_TIME_LOCK -> jOaF
    react.api.SampledType ENTITY_TIME -> pbTJ
    react.api.SampledType TILE_TIME -> lxKM
    react.api.SampledType ENTITY_DROPTICK -> iwQT
    react.api.SampledType TILE_DROPTICK -> jrCk
    react.api.SampledType REDSTONE_TICK_USAGE -> VnyL
    react.api.SampledType REDSTONE_TICK -> woXT
    react.api.SampledType REDSTONE_SECOND -> DIDC
    react.api.SampledType REDSTONE_TIME -> YpSK
    react.api.SampledType HOPPER_TICK_USAGE -> wVEw
    react.api.SampledType HOPPER_TICK -> FNhf
    react.api.SampledType HOPPER_SECOND -> kuGW
    react.api.SampledType HOPPER_TIME -> HUPK
    react.api.SampledType FLUID_TICK_USAGE -> HTnp
    react.api.SampledType FLUID_TICK -> pjdD
    react.api.SampledType FLUID_SECOND -> sAIB
    react.api.SampledType FLUID_TIME -> uqbH
    react.api.SampledType TPS -> yJid
    react.api.SampledType TICK -> XmPX
    react.api.SampledType TIU -> wnva
    react.api.SampledType MEM -> URcx
    react.api.SampledType FREEMEM -> nKKY
    react.api.SampledType MAXMEM -> VnyR
    react.api.SampledType ALLOCMEM -> gEvK
    react.api.SampledType MAHS -> NyGa
    react.api.SampledType CHK_TIME -> LYNh
    react.api.SampledType EXPLOSION_TIME -> fKgL
    react.api.SampledType CHK -> ceBK
    react.api.SampledType ATASK -> dosn
    react.api.SampledType STASK -> ximN
    react.api.SampledType CHKS -> lEIN
    react.api.SampledType ENT -> hspb
    react.api.SampledType ENTLIV -> uWsK
    react.api.SampledType ENTDROP -> fLGd
    react.api.SampledType ENTTILE -> yKNP
    java.lang.String node -> ieli
    react.api.SampledType[] ENUM$VALUES -> dNQj
    6:43:void <clinit>() -> <clinit>
    49:49:react.api.ISampler get() -> BlUQ
    55:55:java.lang.String toString() -> toString
    58:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> Ywed
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> pjJJ:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> WYNd
    react.surge.util.C altColor -> pPsT
    int interval -> ECXp
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> pYFY
    49:49:react.surge.util.C getAltColor() -> xWki
    55:55:int getInterval() -> getInterval
    void sample() -> KfMa
    void construct() -> ndBI
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> dnqv
    107:108:void setInterval(int) -> JtIb
react.api.Sector -> uNdQ:
    int value() -> value
react.api.SelectionException -> ccdB:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> HeWL:
    react.api.SelectionMode WHITELIST -> fKgY
    react.api.SelectionMode BLACKLIST -> RROk
    react.api.SelectionMode[] ENUM$VALUES -> vtgq
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> UcLW:
    java.lang.Class objectType -> kuHp
    react.api.SelectionMode mode -> PnKT
    react.glang.GSet list -> oNQC
    react.glang.GSet possibilities -> ekFl
    int popoff -> Puyt
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> SvUf
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> jqEQ
    43:43:react.glang.GSet getList() -> IhXO
    49:49:react.glang.GSet getPossibilities() -> ndAQ
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> vcFN
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> TFQb
    98:100:int pop() -> pop
react.api.SelectorEntityType -> OHHb:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> KUIb
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> vcFN
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> PmIl
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> Ayrb:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> fRyd:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> JtIb
    29:30:void add(org.bukkit.Chunk,int) -> dnqv
    34:38:void add(org.bukkit.World) -> PmIl
    42:46:void addAll() -> QoqR
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> vcFN
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> PmIl
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> BlUQ:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> vcFN
    87:87:java.lang.String getName() -> getName
react.api.Side -> QoqR:
    react.api.Side PLAYERS -> EBwD
    react.api.Side CONSOLE -> wwkE
    java.lang.String ss -> GtRT
    react.api.Side[] ENUM$VALUES -> TFrI
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> uNdU
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> JtIb
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> uNdU:
    react.api.SideGate PLAYERS_ONLY -> WGkT
    react.api.SideGate CONSOLES_ONLY -> BJou
    react.api.SideGate ANYTHING -> wLue
    int[] $SWITCH_TABLE$react$api$SideGate -> sRKs
    react.api.SideGate[] ENUM$VALUES -> JuJo
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> dnqv
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> EJkb
react.api.SimplexNoiseGenerator -> EJkb:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> AHMl
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> MSCu
react.api.SimplexOctaveGenerator -> MSCu:
    double wScale -> vIsN
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> dnqv
react.api.SpecializedTickLimiter -> CgJB:
    double rMaxTime -> uGPl
    long rStartTime -> wEFe
    double rLastTime -> DQWD
    long rMark -> wfhf
    double tMaxTime -> TPEE
    react.gmath.Average atimes -> oMrf
    react.gmath.Average adropped -> rpoG
    int droppedTicks -> nvEM
    boolean entityTick -> VELI
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> Rrsm:
    react.glang.GList sources -> HTsn
    react.glang.GList splooge -> jaGd
    react.glang.GSet destroy -> uOcy
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> dnqv
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> JtIb
    void clipped(org.bukkit.Location) -> dnqv
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> JtIb
    boolean isAllowedSource(org.bukkit.Location) -> KUIb
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> dnqv
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> JtIb
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> KUIb
react.api.SploogeCounter$1 -> Rrsm$1:
    react.api.SploogeCounter this$0 -> MKQu
    java.util.Iterator val$it -> Ygfe
    org.bukkit.Location val$start -> CMta
    int val$maxDistance -> aEKL
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> dnqv
react.api.SploogeCounter$1$1 -> Rrsm$1$1:
    react.api.SploogeCounter$1 this$1 -> qBwd
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> BBCa:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> oVCn:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> KTja
    38:49:void fromJSON(react.json.JSONObject) -> dnqv
react.api.StackTraceRecordBook -> oVDN:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> JtIb
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> dnqv
react.api.StackedEntity -> ThWg:
    org.bukkit.entity.LivingEntity entity -> Rbqn
    int count -> count
    double rmx -> Vwnp
    20:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> dnqv
    46:46:int getAbsoluteMaxCount() -> CgJB
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> JtIb
    56:58:void update() -> update
    62:68:void signalSize() -> Rrsm
    72:123:void updateHealth() -> BBCa
    127:128:void heal(double) -> JtIb
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> oVCn
    142:142:int getEffectiveCount(double) -> KUIb
    147:147:double getEffectiveMaxHealth(int) -> wDFX
    152:152:double getRealMaxHealth() -> oVDN
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> dnqv
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> Qons:
    react.glang.GList headings -> NVfM
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> dnqv
    24:24:int getMaxSelection() -> ThWg
    29:37:int left(int) -> NLoy
    42:50:int right(int) -> PSXJ
    55:55:react.api.MonitorHeading getHeadFor(int) -> KekD
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> dnqv
    83:100:java.lang.String getHotbarFor(int,boolean) -> dnqv
react.api.Unused -> iLBW:
react.api.WorldConfig -> MccX:
    boolean allowRai -> qnMK
    boolean allowActions -> wwnF
    boolean allowRelighting -> Ojjf
    boolean allowTileThrottling -> AjRU
    boolean allowEntityThrottling -> neBr
    boolean allowFastLeafDecay -> lxOJ
    java.util.List assumeNoSideEffectsEntities -> XCBS
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> wDFX
    48:62:void save(org.bukkit.World) -> NLoy
    66:80:void load(org.bukkit.World) -> PSXJ
react.binject.BlockInjector -> IpiO:
    react.surge.util.Protocol protocol -> dNUC
    java.lang.Class blocksClass -> axOs
    12:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> dnqv
    29:56:void inject() -> Qons
    61:61:react.surge.util.Protocol getVersion() -> HeQT
react.binject.IBlockInjector -> YgGS:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> dnqv
    void add(int,java.lang.String,java.lang.Object) -> dnqv
    java.lang.Object get(java.lang.String) -> get
    void inject() -> Qons
    react.surge.util.Protocol getVersion() -> HeQT
react.binject.InjectedBlock -> IVuy:
    react.surge.util.Protocol getInjectProtocol() -> iLBW
    java.lang.String getInjectKey() -> MccX
    java.lang.String getInjectCKey() -> IpiO
    int getInjectId() -> YgGS
react.binject.ReflectionUtil -> Sdsu:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> dnqv
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> dnqv
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> dnqv
    41:54:void setAccessible(java.lang.reflect.Field) -> dnqv
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> dnqv
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> dnqv
react.binject.V10.BlockInjector10 -> yInJ:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> TFQb
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> dnqv
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> dnqv
react.binject.V11.BlockInjector11 -> DOwa:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> PmIl
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> dnqv
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> dnqv
react.binject.V12.BlockInjector12 -> prXX:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> wDFX
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> dnqv
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> dnqv
react.binject.V8.BlockInjector8 -> qRwc:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> NLoy
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> dnqv
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> dnqv
react.binject.V9.BlockInjector9 -> CwiQ:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> PSXJ
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> dnqv
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> dnqv
react.cache.CachedEntity -> ksin:
    java.util.UUID uid -> CFDi
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> biqA
    double x -> x
    double y -> y
    double z -> z
    double vx -> GtUa
    double vy -> vRfr
    double vz -> pHeB
    double dx -> rpnF
    double dy -> MdcS
    double dz -> WjPg
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> PmIl
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> IVuy
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> Sdsu
    120:121:void setVx(double) -> XuAl
    125:125:double getVy() -> yInJ
    130:131:void setVy(double) -> jqEQ
    135:135:double getVz() -> DOwa
    140:141:void setVz(double) -> vcFN
    145:145:double getDx() -> prXX
    150:151:void setDx(double) -> TFQb
    155:155:double getDy() -> qRwc
    160:161:void setDy(double) -> PmIl
    165:165:double getDz() -> CwiQ
    170:171:void setDz(double) -> wDFX
    175:175:java.util.UUID getUid() -> ksin
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> mqcP:
    int age -> fTYU
    boolean ageLock -> wfjm
    boolean breed -> NEcY
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> PmIl
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> mqcP
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> KTnl
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> KTnl:
    org.bukkit.DyeColor dye -> XJpA
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> PmIl
    30:30:org.bukkit.DyeColor getDye() -> CMXG
    35:36:void setDye(org.bukkit.DyeColor) -> dnqv
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> CMXG:
    react.glang.GList potionEffects -> GssO
    boolean canPickupItems -> EKio
    org.bukkit.inventory.ItemStack[] armorContents -> qBuh
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> DHfr
    double maxHealth -> maxHealth
    int maxAir -> TGUU
    int air -> SDQp
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> PmIl
    63:63:react.glang.GList getPotionEffects() -> sbRv
    68:69:void setPotionEffects(react.glang.GList) -> JtIb
    73:73:boolean isCanPickupItems() -> CfjM
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> ogIM
    138:139:void setMaxAir(int) -> HvSx
    143:143:int getAir() -> QMpC
    148:149:void setAir(int) -> IVru
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> sbRv:
    boolean sheared -> Ihwr
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> PmIl
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> CfjM:
    org.bukkit.inventory.ItemStack is -> AHPK
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> PmIl
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> ogIM:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> QMpC:
    react.chronophysics.HopperDirection DOWN -> NMsm
    react.chronophysics.HopperDirection NORTH -> bHMY
    react.chronophysics.HopperDirection SOUTH -> dghR
    react.chronophysics.HopperDirection EAST -> SewI
    react.chronophysics.HopperDirection WEST -> VENM
    int direction -> direction
    int[] $SWITCH_TABLE$react$chronophysics$HopperDirection -> iLcx
    react.chronophysics.HopperDirection[] ENUM$VALUES -> wwon
    6:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> XuAl
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> dnqv
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> JtIb
    1:1:react.chronophysics.HopperDirection[] values() -> values
    1:1:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    6:6:int[] $SWITCH_TABLE$react$chronophysics$HopperDirection() -> Lytv
react.chronophysics.HopperWormhole -> Lytv:
    org.bukkit.block.Hopper source -> hcSq
    react.glang.GList path -> BlwB
    org.bukkit.block.Hopper destination -> bGoK
    17:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> pGhK
    31:31:react.glang.GList getPath() -> mXRD
    36:36:org.bukkit.block.Hopper getDestination() -> wvnv
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> dnqv
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> pGhK:
    org.bukkit.block.Hopper h -> VoaO
    13:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> dnqv
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> vtLp
    62:62:boolean isLockedByRedstone() -> PmQG
react.command.CommandAct -> mXRD:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> dnqv
    186:192:react.text.RTX getBeginningRTX() -> PKNP
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> dnqv
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> JtIb
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> KUIb
    331:346:react.glang.GList getSortedCommands() -> uhXt
    351:358:int getPageSize(int) -> WWkg
    363:363:boolean isValidPage(int,int) -> dnqv
    368:377:react.glang.GList getPage(int,int) -> JtIb
react.command.CommandActionLog -> wvnv:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
react.command.CommandCPUScore -> vtLp:
    15:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
react.command.CommandCapabilities -> PmQG:
    19:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
react.command.CommandChunkBlame -> PKNP:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
react.command.CommandChunkBlame$1 -> PKNP$1:
    react.command.CommandChunkBlame this$0 -> HDVK
    org.bukkit.command.CommandSender val$sender -> YyKf
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> PKNP$1$1:
    react.command.CommandChunkBlame$1 this$1 -> Jtnt
    org.bukkit.command.CommandSender val$sender -> YyKf
    java.lang.String val$i -> lxPe
    react.glang.GMap val$top -> QXBM
    int val$totalx -> yJpk
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> uhXt:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
react.command.CommandHelp -> XkvU:
    27:36:void <init>() -> <init>
    41:42:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
    46:65:void sendPage(org.bukkit.command.CommandSender,int,int) -> dnqv
    69:75:react.text.RTX getBeginningRTX() -> PKNP
    80:140:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> dnqv
    144:154:void sendHeader(org.bukkit.command.CommandSender,int,int) -> JtIb
    158:187:void sendFooter(org.bukkit.command.CommandSender,int,int) -> KUIb
    191:198:react.glang.GList getSortedCommands() -> uhXt
    203:210:int getPageSize(int) -> WWkg
    215:215:boolean isValidPage(int,int) -> dnqv
    220:229:react.glang.GList getPage(int,int) -> JtIb
react.command.CommandMap -> aoBF:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
react.command.CommandMonitor -> Gjfa:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
react.command.CommandReload -> RYba:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
react.command.CommandReload$1 -> RYba$1:
    react.command.CommandReload this$0 -> AGoo
    org.bukkit.command.CommandSender val$sender -> YyKf
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> RYba$1$1:
    react.command.CommandReload$1 this$1 -> cKSa
    org.bukkit.command.CommandSender val$sender -> YyKf
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> goox:
    27:35:void <init>() -> <init>
    40:48:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
    52:61:org.bukkit.inventory.ItemStack makeBook() -> XkvU
    66:92:void addSpikePages(react.glang.GList) -> KUIb
    96:106:void addStatusPages(react.glang.GList) -> XuAl
    110:127:int findSlot(org.bukkit.entity.Player) -> KUIb
react.command.CommandVersion -> NEEt:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> dnqv
react.controller.ActionController -> YfhC:
    int kiv -> gONn
    react.glang.GMap actions -> PmpQ
    react.glang.GMap pending -> xjRB
    react.glang.GList tasks -> paxv
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> dnqv
    83:136:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> JtIb
    141:141:react.api.IAction getAction(react.api.ActionType) -> dnqv
    146:147:void registerAction(react.api.IAction) -> dnqv
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> aoBF
    241:248:react.glang.GList getActionNames() -> Gjfa
react.controller.BenchmarkController -> Bkwh:
    react.api.CPUBenchmark finished -> axRL
    boolean done -> IGYW
    int score -> SLUl
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    16:16:void access$0(react.controller.BenchmarkController,boolean) -> dnqv
    15:15:void access$1(react.controller.BenchmarkController,react.api.CPUBenchmark) -> dnqv
    15:15:react.api.CPUBenchmark access$2(react.controller.BenchmarkController) -> dnqv
react.controller.BenchmarkController$1 -> Bkwh$1:
    react.controller.BenchmarkController this$0 -> Mddq
    1:26:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
    26:26:react.controller.BenchmarkController access$0(react.controller.BenchmarkController$1) -> dnqv
react.controller.BenchmarkController$1$1 -> Bkwh$1$1:
    react.controller.BenchmarkController$1 this$1 -> dFDp
    1:31:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
    31:31:react.controller.BenchmarkController$1 access$0(react.controller.BenchmarkController$1$1) -> dnqv
react.controller.BenchmarkController$1$1$1 -> Bkwh$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> vcir
    1:36:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> IqKg:
    react.glang.GMap rangeMapping -> yvEd
    react.binject.IBlockInjector injector -> JAiY
    boolean injected -> IrLM
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> RYba
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> goox
    115:115:react.binject.IBlockInjector getInjector() -> NEEt
    120:120:boolean isInjected() -> YfhC
react.controller.ChronophyFluidController -> lDKh:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> rMmN:
    boolean firstTickList -> WXpR
    long firstTick -> lgOS
    long lastTick -> maaJ
    react.gmath.Average aCSMS -> GRSV
    react.glang.GMap pluginLoads -> IFwG
    react.glang.GMap playerLoads -> dovk
    int serverLoads -> ymSv
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> Bkwh
    63:73:void tickNextTickList() -> IqKg
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> dnqv
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> dnqv
    171:171:boolean isFirstTickList() -> lDKh
    176:176:long getFirstTick() -> rMmN
    181:181:long getLastTick() -> bhqM
    186:186:react.gmath.Average getaCSMS() -> LFpE
    191:191:react.glang.GMap getPluginLoads() -> xXOj
    196:196:react.glang.GMap getPlayerLoads() -> tmeR
    201:201:int getServerLoads() -> QgbC
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> dnqv
    29:29:int access$1(react.controller.ChunkController) -> JtIb
    29:29:void access$2(react.controller.ChunkController,int) -> dnqv
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> KUIb
react.controller.ChunkController$1 -> rMmN$1:
    react.controller.ChunkController this$0 -> UuNh
    org.bukkit.event.world.ChunkLoadEvent val$e -> gppJ
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> KUIb
    1:1:void run(java.lang.Object) -> dnqv
react.controller.CommandController -> bhqM:
    react.glang.GList commands -> QNnd
    boolean k -> TGVs
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> wDFX
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> NLoy
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> dnqv
    317:317:react.glang.GList getCommands() -> YEFV
    322:323:void setCommands(react.glang.GList) -> jqEQ
    327:327:boolean isK() -> ytcu
    332:333:void setK(boolean) -> NLoy
react.controller.EntityCullController -> LFpE:
    react.glang.GSet flags -> tetO
    react.glang.GSet defer -> nueF
    react.glang.GMap maxs -> WbCJ
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> NLvJ
    172:180:int cull(org.bukkit.Chunk) -> KUIb
    185:285:int partialCull(org.bukkit.Chunk) -> XuAl
react.controller.EntityStackController -> xXOj:
    react.glang.GList stacks -> jrIn
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> vcFN
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> KUIb
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> XuAl
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> dnqv
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> dnqv
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> jqEQ
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> dnqv
react.controller.EntityStackController$1 -> xXOj$1:
    react.controller.EntityStackController this$0 -> CgjB
    org.bukkit.event.entity.EntitySpawnEvent val$e -> rqTI
    1:248:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> tmeR:
    react.glang.GMap slots -> SUWy
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> dnqv
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> dnqv
react.controller.ExplosiveController -> QgbC:
    boolean firstTickList -> WXpR
    long firstTick -> lgOS
    long lastTick -> maaJ
    react.gmath.Average aCSMS -> GRSV
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> Bkwh
    50:60:void tickNextTickList() -> IqKg
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> dnqv
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> dnqv
    89:89:boolean isFirstTickList() -> lDKh
    94:94:long getFirstTick() -> rMmN
    99:99:long getLastTick() -> bhqM
    104:104:react.gmath.Average getaCSMS() -> LFpE
react.controller.FastDecayController -> YEFV:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> dnqv
    47:128:void checkBreak(org.bukkit.block.Block) -> KUIb
    132:140:void decay(org.bukkit.block.Block) -> XuAl
    146:146:void tick() -> tick
react.controller.FastDecayController$1 -> YEFV$1:
    react.controller.FastDecayController this$0 -> iCuO
    react.glang.GMap val$locs -> inhy
    1:61:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    66:66:boolean isAllowedSplooge(org.bukkit.Location) -> JtIb
    72:72:boolean isAllowedSource(org.bukkit.Location) -> KUIb
    78:97:void clipped(org.bukkit.Location) -> dnqv
    102:125:void finished() -> finished
    61:61:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> dnqv
react.controller.FastDecayController$1$1 -> YEFV$1$1:
    react.controller.FastDecayController$1 this$1 -> hARp
    react.glang.GMap val$locs -> inhy
    int val$i -> CVjN
    1:106:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    111:121:void run() -> run
react.controller.FastDecayController$2 -> YEFV$2:
    react.controller.FastDecayController this$0 -> iCuO
    org.bukkit.block.Block val$b -> FOSS
    1:132:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    137:138:void run() -> run
react.controller.FeatureController -> ytcu:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.FluidController -> NLvJ:
    react.glang.GSet ignore -> miso
    int flowsPerTick -> LYTo
    int flowsPerSecond -> riDH
    react.gmath.Average aFST -> RlIE
    react.gmath.Average aFSS -> WYTj
    react.gmath.Average aFSMS -> sIap
    boolean firstTickList -> WXpR
    long firstTick -> lgOS
    long lastTick -> maaJ
    react.glang.GSet frozen -> TPLF
    react.glang.GMap queue -> Rswl
    react.glang.GMap freezeTimes -> GlHv
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> jqEQ
    68:76:void checkChunks() -> kHxC
    80:97:void checkChunk(org.bukkit.Chunk) -> vcFN
    101:107:void queue(org.bukkit.block.Block) -> jqEQ
    111:111:boolean isFrozen(org.bukkit.Chunk) -> TFQb
    116:117:void freeze(org.bukkit.Chunk) -> PmIl
    121:127:void unfreeze(org.bukkit.Chunk) -> wDFX
    131:138:void freeze(org.bukkit.Chunk,long) -> dnqv
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> Bkwh
    172:182:void tickNextTickList() -> IqKg
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> dnqv
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> dnqv
    248:248:react.glang.GSet getIgnore() -> ctfG
    253:253:int getTransfersPerTick() -> aoDD
    258:258:int getTransfersPerSecond() -> cuId
    263:263:react.gmath.Average getaFST() -> CUjR
    268:268:react.gmath.Average getaFSS() -> xiSs
    273:273:react.gmath.Average getaFSMS() -> tdxG
    278:278:boolean isFirstTickList() -> lDKh
    283:283:long getFirstTick() -> rMmN
    288:288:long getLastTick() -> bhqM
    293:293:react.glang.GSet getFrozen() -> owlB
    298:298:react.glang.GMap getQueue() -> QEaX
    303:303:react.glang.GMap getFreezeTimes() -> PvDT
react.controller.GlassController -> kHxC:
    react.glang.GMap q -> xYQt
    react.glang.GList g -> yvGv
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> XuAl
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> jqEQ
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> vcFN
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> dnqv
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> dnqv
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> dnqv
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> dnqv
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> dnqv
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> dnqv
    36:36:react.glang.GList access$0(react.controller.GlassController) -> dnqv
react.controller.GlassController$1 -> kHxC$1:
    react.controller.GlassController this$0 -> afrF
    react.glang.GMap val$cc -> xbCf
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> kHxC$1$1:
    react.controller.GlassController$1 this$1 -> kSML
    org.bukkit.Location val$i -> aEOe
    org.bukkit.entity.Player val$j -> CyOP
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> ctfG:
    react.glang.GMap g -> Wadj
    react.glang.GMap gr -> lUoO
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> dnqv
    121:156:void toggleMapping(org.bukkit.entity.Player) -> TFQb
    160:160:react.glang.GMap getG() -> QFCB
    165:165:react.glang.GMap getGr() -> bPDU
    31:31:react.glang.GMap access$0(react.controller.GraphController) -> dnqv
    30:30:react.glang.GMap access$1(react.controller.GraphController) -> JtIb
react.controller.GraphController$1 -> ctfG$1:
    react.controller.GraphController this$0 -> CFIH
    1:48:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> ctfG$2:
    react.controller.GraphController this$0 -> CFIH
    1:84:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> ctfG$3:
    react.controller.GraphController this$0 -> CFIH
    org.bukkit.event.player.PlayerJoinEvent val$e -> sbsl
    1:100:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> aoDD:
    react.glang.GSet ignore -> miso
    int transfersPerTick -> BCEe
    int transfersPerSecond -> FWcq
    react.gmath.Average aHST -> hIbp
    react.gmath.Average aHSS -> YWHs
    react.gmath.Average aHSMS -> RJCo
    boolean firstTickList -> WXpR
    long firstTick -> lgOS
    long lastTick -> maaJ
    react.glang.GSet frozen -> TPLF
    react.glang.GMap queue -> Rswl
    react.glang.GMap freezeTimes -> GlHv
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> jqEQ
    65:73:void checkChunks() -> kHxC
    77:94:void checkChunk(org.bukkit.Chunk) -> vcFN
    98:104:void queue(org.bukkit.block.Block) -> jqEQ
    108:108:boolean isFrozen(org.bukkit.Chunk) -> TFQb
    113:114:void freeze(org.bukkit.Chunk) -> PmIl
    118:124:void unfreeze(org.bukkit.Chunk) -> wDFX
    128:135:void freeze(org.bukkit.Chunk,long) -> dnqv
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> Bkwh
    169:179:void tickNextTickList() -> IqKg
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> dnqv
    207:207:react.glang.GSet getIgnore() -> ctfG
    212:212:int getTransfersPerTick() -> aoDD
    217:217:int getTransfersPerSecond() -> cuId
    222:222:react.gmath.Average getaHST() -> wTmu
    227:227:react.gmath.Average getaHSS() -> CEIS
    232:232:react.gmath.Average getaHSMS() -> nAcV
    237:237:boolean isFirstTickList() -> lDKh
    242:242:long getFirstTick() -> rMmN
    247:247:long getLastTick() -> bhqM
    252:252:react.glang.GSet getFrozen() -> owlB
    257:257:react.glang.GMap getQueue() -> QEaX
    262:262:react.glang.GMap getFreezeTimes() -> PvDT
react.controller.HopperOvertickController -> cuId:
    react.glang.GList possiblePlunge -> Xdff
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> KUIb
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> dnqv
react.controller.LanguageController -> CUjR:
    java.io.File languageFolder -> BvLO
    int oldVersion -> tTuQ
    java.io.File dlf -> birm
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> KndV
    160:221:void downloadAll(boolean) -> PSXJ
    225:261:void downloadLanguage(java.lang.String) -> KekD
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> HvSx
    315:315:java.io.File getFileForLanguage(java.lang.String) -> IVru
    320:332:void writeDefaults() -> tmgo
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> dnqv
    263:263:void access$1(react.controller.LanguageController) -> dnqv
react.controller.LanguageController$1 -> CUjR$1:
    react.controller.LanguageController this$0 -> ePyP
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> CUjR$2:
    react.controller.LanguageController this$0 -> ePyP
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> dnqv
react.controller.LanguageController$2$1 -> CUjR$2$1:
    react.controller.LanguageController$2 this$1 -> USLv
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> dnqv
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> dnqv
    121:121:void onDownloadStarted(react.gnet.download.Download) -> dnqv
    126:128:void onDownloadFinished(react.gnet.download.Download) -> JtIb
    134:134:void onDownloadFailed(react.gnet.download.Download) -> KUIb
react.controller.LanguageController$3 -> CUjR$3:
    react.controller.LanguageController this$0 -> ePyP
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> CUjR$3$1:
    react.controller.LanguageController$3 this$1 -> yluJ
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> CUjR$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> aUoY
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> CUjR$4:
    react.controller.LanguageController this$0 -> ePyP
    java.io.File val$dld -> Sewy
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> dnqv
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> dnqv
    245:245:void onDownloadStarted(react.gnet.download.Download) -> dnqv
    250:251:void onDownloadFinished(react.gnet.download.Download) -> JtIb
    257:257:void onDownloadFailed(react.gnet.download.Download) -> KUIb
react.controller.MonitorController -> xiSs:
    int maxCooldown -> XSeg
    react.api.TitleMonitor titleMonitor -> neEv
    react.glang.GMap posts -> oEiE
    react.slate.PhantomSlate sb -> FXFV
    boolean ready -> oWKY
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> wfQO
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> PmIl
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> wDFX
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> EvEN
    179:184:float calcVolume(react.api.ReactPlayer) -> dnqv
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> NLoy
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> PSXJ
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> KekD
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> HvSx
    219:223:void startMonitoring(org.bukkit.entity.Player) -> IVru
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> WWkg
    242:247:void startActionLogging(org.bukkit.entity.Player) -> vABY
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> ooQq
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> JtIb
    279:291:void processPlayer(react.api.ReactPlayer) -> KUIb
    296:296:void handleActionLog(org.bukkit.entity.Player) -> eqvC
    300:324:void handleTriggers(react.api.ReactPlayer) -> XuAl
    328:367:void handleScrolling(react.api.ReactPlayer) -> jqEQ
    371:399:void handleShifting(react.api.ReactPlayer) -> vcFN
    403:425:void handlePosting(react.api.ReactPlayer) -> TFQb
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> dnqv
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> dnqv
    471:481:void tickMonitor(react.api.ReactPlayer) -> PmIl
    485:485:react.api.TitleMonitor getTitleMonitor() -> uqKy
    491:500:void on(org.bukkit.event.player.PlayerJoinEvent) -> dnqv
    505:514:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> dnqv
    519:532:void onTick() -> ggbS
    536:558:void updateActionBoard() -> nlWI
    563:563:java.lang.String getTickName() -> GkHI
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> dnqv
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> dnqv
    41:41:void access$2(react.controller.MonitorController,boolean) -> dnqv
    41:41:boolean access$3(react.controller.MonitorController) -> JtIb
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> KUIb
react.controller.MonitorController$1 -> xiSs$1:
    react.controller.MonitorController this$0 -> KVSn
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> xiSs$2:
    react.controller.MonitorController this$0 -> KVSn
    1:536:void <init>(react.controller.MonitorController) -> <init>
    541:556:void run() -> run
react.controller.PhysicsController -> tdxG:
    react.glang.GMap samples -> SMIr
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> NLoy
    51:52:void onHopper(org.bukkit.Chunk) -> PSXJ
    56:57:void onFluid(org.bukkit.Chunk) -> KekD
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> dnqv
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> dnqv
    80:91:void onTick() -> ggbS
    96:96:java.lang.String getTickName() -> GkHI
    101:101:react.glang.GMap getSamples() -> wvqE
react.controller.PlayerController -> owlB:
    react.glang.GList players -> mGsT
    react.glang.GSet save -> nmYs
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> Eliy
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> dnqv
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> salA
    113:113:react.glang.GList getPlayers() -> kcMi
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> dnqv
react.controller.PlayerController$1 -> owlB$1:
    react.controller.PlayerController this$0 -> rOSU
    react.glang.GList val$toSave -> nShA
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> QEaX:
    react.rai.IRAI rai -> mQFA
    boolean raiEnabled -> WbGb
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    20:20:react.rai.IRAI access$0(react.controller.RAIController) -> dnqv
react.controller.RAIController$1 -> QEaX$1:
    react.controller.RAIController this$0 -> TOmG
    1:48:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> PvDT:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> KUIb
react.controller.ReactServerInfo -> QFCB:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> vtOB
    27:27:int dgetGameProtocol() -> baCm
    33:33:java.lang.String dgetGameVersion() -> DXlb
    39:39:java.lang.String dgetReactVersion() -> Kvro
    45:45:int dgetMaxPlayers() -> lCmT
    51:58:react.glang.GList dgetConnectedPlayers() -> Euba
    64:64:int dgetViewDistance() -> SSvm
    70:70:int dgetGamePort() -> GjgT
    76:76:java.lang.String dgetGameAddress() -> dfjF
    82:89:react.glang.GList dgetRemotePlugins() -> QVap
    95:102:react.glang.GList dgetWorlds() -> NgLI
    108:108:react.glang.GList dgetActions() -> kAJV
    114:114:react.glang.GList dgetSamplers() -> GQVB
react.controller.RedstoneController -> bPDU:
    react.glang.GSet ignore -> miso
    react.glang.GSet frozen -> TPLF
    react.glang.GMap queue -> Rswl
    react.glang.GMap freezeTimes -> GlHv
    int redstonePerTick -> ejpG
    int redstonePerSecond -> iTwq
    react.gmath.Average aRST -> PveR
    react.gmath.Average aRSS -> ylxR
    react.gmath.Average aRSMS -> EvfK
    boolean firstTickList -> WXpR
    long firstTick -> lgOS
    long lastTick -> maaJ
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> jqEQ
    95:101:void tick() -> tick
    105:113:void checkChunks() -> kHxC
    117:134:void checkChunk(org.bukkit.Chunk) -> vcFN
    138:144:void queue(org.bukkit.block.Block) -> jqEQ
    148:148:boolean isFrozen(org.bukkit.Chunk) -> TFQb
    153:154:void freeze(org.bukkit.Chunk) -> PmIl
    158:165:void flushTickList() -> Bkwh
    169:179:void tickNextTickList() -> IqKg
    183:189:void unfreeze(org.bukkit.Chunk) -> wDFX
    193:200:void freeze(org.bukkit.Chunk,long) -> dnqv
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> dnqv
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> dnqv
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> dnqv
    246:246:react.glang.GSet getIgnore() -> ctfG
    251:251:react.glang.GSet getFrozen() -> owlB
    256:256:react.glang.GMap getQueue() -> QEaX
    261:261:react.glang.GMap getFreezeTimes() -> PvDT
    266:266:int getRedstonePerTick() -> lwQk
    271:271:int getRedstonePerSecond() -> TFYd
    276:276:react.gmath.Average getaRST() -> HBvW
    281:281:react.gmath.Average getaRSS() -> ggbM
    286:286:react.gmath.Average getaRSMS() -> EKPE
    291:291:boolean isFirstTickList() -> lDKh
    296:296:long getFirstTick() -> rMmN
    301:301:long getLastTick() -> bhqM
react.controller.RemoteController -> wTmu:
    react.remote.server.RemoteServer remoteServer -> scWI
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> aToR
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> dnqv
react.controller.RemoteController$1 -> wTmu$1:
    react.controller.RemoteController this$0 -> CqAM
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> wTmu$2:
    react.controller.RemoteController this$0 -> CqAM
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> PdaF
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> lClc
react.controller.SampleController -> CEIS:
    react.glang.GMap samplers -> fmrW
    react.surge.server.SuperSampler ss -> dVjh
    int cd -> PwEw
    28:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> dwkI
    69:74:void restartSuperSampler() -> VfQx
    78:79:void registerSampler(react.api.ISampler) -> KUIb
    83:83:react.api.ISampler getSampler(java.lang.String) -> WWkg
    88:131:void constructSamplers() -> VDOX
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> qTAN
    187:209:void onTick() -> ggbS
    214:214:java.lang.String getTickName() -> GkHI
    219:219:react.glang.GMap getSamplers() -> cuLB
    224:224:react.surge.server.SuperSampler getSs() -> cBGQ
    229:229:int getCd() -> byxF
    234:241:react.glang.GList getSamplerNames() -> CwpJ
    25:25:react.surge.server.SuperSampler access$0(react.controller.SampleController) -> dnqv
react.controller.SampleController$1 -> CEIS$1:
    react.controller.SampleController this$0 -> mbFD
    1:140:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> CEIS$2:
    react.controller.SampleController this$0 -> mbFD
    1:152:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> nAcV:
    java.lang.String ipa -> USNv
    react.glang.GList failures -> ETaT
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> vABY
    41:74:void checkForIP() -> rpUq
    78:91:void scan(java.lang.Runnable) -> dnqv
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> nAcV$1:
    react.controller.SecurityController this$0 -> CElD
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> nAcV$2:
    java.lang.String val$ip -> HLhm
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> nAcV$3:
    java.lang.Thread val$t -> EmsW
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> KndV:
    react.glang.GMap etl -> kSNb
    react.glang.GMap ttl -> Hnkr
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> dnqv
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> dnqv
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> KekD
    143:160:void releaseWorld(org.bukkit.World) -> HvSx
    164:181:double getUniversalEntityTick() -> DYQL
    186:203:double getUniversalEntityLimit() -> RIHH
    208:225:double getUniversalTileLimit() -> jqNi
    230:247:double getUniversalTileTick() -> qKOV
    252:264:double getUniversalEntityDroppedTicks() -> RHgB
    269:281:double getUniversalTileDroppedTicks() -> iBwH
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> dnqv
    301:312:void setTileTickLimit(org.bukkit.World,double) -> JtIb
    316:321:double getEntityTickLimit(org.bukkit.World) -> IVru
    326:331:double getTileTickLimit(org.bukkit.World) -> WWkg
    336:341:double getLastEntityTick(org.bukkit.World) -> vABY
    346:351:double getLastTileTick(org.bukkit.World) -> ooQq
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> eqvC
    366:371:double getTileDroppedTicks(org.bukkit.World) -> Eliy
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> dnqv
react.controller.SpikeController -> tmgo:
    react.glang.GMap spikes -> GbxK
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> ggbS
    111:111:java.lang.String getTickName() -> GkHI
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> gotv
    128:160:void whoFuckingDidThis(react.glang.Callback) -> dnqv
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> dnqv
react.controller.SpikeController$1 -> tmgo$1:
    react.controller.SpikeController this$0 -> Livv
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> tmgo$1$1:
    react.controller.SpikeController$1 this$1 -> Nxnc
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> tmgo$2:
    react.controller.SpikeController this$0 -> Livv
    react.glang.GMap val$vv -> UcpV
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> tmgo$3:
    react.controller.SpikeController this$0 -> Livv
    java.lang.Thread val$t -> EmsW
    react.glang.Callback val$callback -> XeJR
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> wfQO:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> EvEN:
    12:12:void <init>() -> <init>
    17:23:void start() -> start
    28:34:void stop() -> stop
    40:40:void tick() -> tick
    45:46:void on(org.bukkit.event.world.WorldUnloadEvent) -> dnqv
react.event.ReactEvent -> uqKy:
    org.bukkit.event.HandlerList handlers -> GcYY
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> ggbS:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> nlWI:
    react.event.ScrollDirection direction -> QiIW
    boolean cancellled -> UKAq
    int amount -> UdTR
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> gMrY
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> ghEW
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> GkHI:
    react.event.ScrollDirection DOWN -> wUre
    react.event.ScrollDirection UP -> oEkN
    react.event.ScrollDirection[] ENUM$VALUES -> NVmt
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.gbench.Profiler -> wvqE:
    long nanos -> TqrA
    long startNano -> DQab
    long millis -> WrjU
    long startMillis -> xGtL
    double time -> PDDD
    boolean profiling -> GlLw
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> vABY
    78:78:double getTicks() -> TNjs
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> aerY
    93:93:double getHours() -> IpoS
    98:98:double getMilliseconds() -> yJTx
    103:103:long getNanoseconds() -> KoFT
    108:108:long getNanos() -> AOgE
    113:113:long getStartNano() -> QFCd
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> VfUA
    128:128:double getTime() -> FNUA
    133:133:boolean isProfiling() -> aeri
react.gconcurrent.A -> kcMi:
    react.gconcurrent.ParallelPoolManager mgr -> psbD
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> kcMi$1:
    react.gconcurrent.A this$0 -> Hnnx
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> vtOB:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> baCm:
    react.gconcurrent.QueueMode mode -> hQvu
    react.glang.GList threads -> MvPC
    int next -> LajS
    int threadCount -> MeNT
    java.util.Queue squeue -> lNCj
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> QNur
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> culj
    22:23:void syncQueue(react.gconcurrent.Execution) -> dnqv
    long getNanoGate() -> AaHl
    29:51:void tickSyncQueue() -> CgNf
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> qltN
    102:109:int getTotalQueueSize() -> QVgF
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> JtIb
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> RIHr
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> gVen
    161:188:void updateThreadInformation() -> eYQD
    192:224:react.gconcurrent.ParallelThread nextThread() -> KLeL
    229:235:void createThreads(int) -> ooQq
    239:239:react.gconcurrent.QueueMode getMode() -> YpAP
    244:244:int getNext() -> rgfl
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> Nfoa
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> QNVm
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> afWP
react.gconcurrent.ParallelThread -> DXlb:
    java.util.Queue queue -> UAnh
    react.gconcurrent.ThreadInformation info -> QNur
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> NLoy
    63:70:void execute(react.gconcurrent.Execution) -> KUIb
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> JtIb
    92:92:java.util.Queue getQueue() -> HvaD
    97:97:react.gconcurrent.ThreadInformation getInfo() -> hjjL
react.gconcurrent.QueueMode -> Kvro:
    react.gconcurrent.QueueMode ROUND_ROBIN -> agUX
    react.gconcurrent.QueueMode SMALLEST -> Xdjm
    react.gconcurrent.QueueMode[] ENUM$VALUES -> ssxw
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> lCmT:
    react.gconcurrent.ParallelPoolManager mgr -> psbD
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> lCmT$1:
    react.gconcurrent.S this$0 -> nJwY
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> Euba:
    long tick -> rXDc
    long atick -> MSiv
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> SSvm:
    double ticksPerSecond -> MvMw
    int queuedSize -> yuim
    boolean processing -> IjBY
    double utilization -> gheo
    react.gmath.Average ticksPerSecondAverage -> giGQ
    long tick -> rXDc
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> RkME
    33:35:void setTicksPerSecond(double) -> PSXJ
    39:39:int getQueuedSize() -> ntlP
    44:45:void setQueuedSize(int) -> eqvC
    49:49:boolean isProcessing() -> sryf
    54:55:void setProcessing(boolean) -> KekD
    59:59:double getUtilization() -> xGUR
    64:65:void setUtilization(double) -> KekD
    69:69:double getTicksPerSecondAverage() -> SLMN
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> awXT
    89:89:int getId() -> getId
react.gformat.F -> GjgT:
    java.text.NumberFormat NF -> dWML
    java.text.DecimalFormat DF -> KNEa
    java.lang.String[] NAMES -> YhOU
    java.math.BigInteger THOUSAND -> JSRf
    java.util.NavigableMap MAP -> BeNK
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> ooQq
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> dnqv
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> dnqv
    201:221:java.lang.String timeLong(long,int) -> dnqv
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> KUIb
    236:236:java.lang.String b(double) -> HvSx
    241:258:java.lang.String b(java.math.BigInteger) -> dnqv
    263:267:void instantiate() -> kbpl
    279:279:java.lang.String fileSize(long) -> XuAl
    292:292:java.lang.String memSize(long) -> jqEQ
    305:306:java.lang.String stamp(long) -> vcFN
    322:349:java.lang.String ofSize(long,int) -> JtIb
    363:368:java.lang.String trim(java.lang.String,int) -> JtIb
    381:401:java.lang.String cname(java.lang.String) -> eqvC
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> TFQb
    459:477:java.lang.String memx(long) -> PmIl
    491:492:java.lang.String f(long) -> wDFX
    504:505:java.lang.String f(int) -> Eliy
    519:528:java.lang.String f(double,int) -> JtIb
    544:553:java.lang.String fd(double,int) -> KUIb
    567:576:java.lang.String f(float,int) -> dnqv
    587:587:java.lang.String f(double) -> IVru
    598:598:java.lang.String f(float) -> dnqv
    613:613:java.lang.String pc(double,int) -> XuAl
    628:628:java.lang.String pc(float,int) -> JtIb
    641:641:java.lang.String pc(double) -> WWkg
    654:654:java.lang.String pc(float) -> JtIb
    670:670:java.lang.String pc(int,int,int) -> dnqv
    684:684:java.lang.String pc(int,int) -> KUIb
    700:700:java.lang.String pc(long,long,int) -> dnqv
    714:714:java.lang.String pc(long,long) -> XuAl
    726:726:java.lang.String msSeconds(long) -> NLoy
    740:740:java.lang.String msSeconds(long,int) -> KUIb
    752:752:java.lang.String nsMs(long) -> PSXJ
    766:766:java.lang.String nsMs(long,int) -> XuAl
    780:780:java.lang.String nsMsd(long,int) -> jqEQ
react.glang.AccessCallback -> dfjF:
    java.lang.Object get() -> get
react.glang.Adapter -> QVap:
    java.lang.Object adapt(java.lang.Object) -> vcFN
    java.lang.Object onAdapt(java.lang.Object) -> TFQb
react.glang.Callback -> NgLI:
    java.lang.Object t -> WrjE
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> dnqv
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> kAJV:
    double i -> CFOi
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> vABY
react.glang.FinalFloat -> GQVB:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> KUIb
react.glang.FinalInteger -> lwQk:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> salA
react.glang.FinalLong -> TFYd:
    long i -> KEWB
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> KekD
react.glang.FinalString -> HBvW:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> ggbM:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> vcFN
    java.lang.Object onAdapt(java.lang.Object) -> TFQb
react.glang.GBiset -> EKPE:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> YFNp
    java.lang.Object b -> EvjA
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> UcRn
    53:54:void setA(java.lang.Object) -> PmIl
    63:63:java.lang.Object getB() -> TONU
    73:74:void setB(java.lang.Object) -> wDFX
react.glang.GList -> aToR:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> XuAl
    45:52:react.glang.GList grepDistance(int,int) -> jqEQ
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> JtIb
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> AaKc
    188:190:react.glang.GList shuffleCopy() -> TOOB
    198:199:void shuffle() -> hryj
    210:236:react.glang.GList split() -> mOfB
    248:248:boolean hasIndex(int) -> equa
    258:259:java.lang.Object pickRandom() -> qvEY
    270:277:react.glang.GList stringList() -> woFI
    288:292:void forEach(react.glang.Callback) -> JtIb
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> ejFV
    336:336:react.glang.GList cropFrom(int) -> PJfj
    341:373:react.glang.GList split(int) -> IVtE
    389:389:react.glang.GList cropTo(int) -> HeQT
    406:416:react.glang.GList crop(int,int) -> vcFN
    427:431:react.glang.GList removeDuplicates() -> nBHS
    442:446:void removeAll(java.lang.Object) -> NLoy
    455:455:boolean hasDuplicates() -> mXVj
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> WrIu
    484:490:void push(java.lang.Object,int) -> dnqv
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> PSXJ
    528:532:void add(java.util.List) -> dnqv
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> hIGe
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> dDkI
    626:627:react.glang.GList qdel(java.lang.Object) -> KekD
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> xhum
    662:669:java.lang.Object popLast() -> gFEC
    674:683:java.lang.Object popRandom() -> IycD
react.glang.GListAdapter -> PdaF:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> JtIb
    java.lang.Object onAdapt(java.lang.Object) -> TFQb
react.glang.GMap -> lClc:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> QNVN
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> dnqv
    64:81:react.glang.GMap flip() -> lURo
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> dnqv
    121:121:react.glang.GList k() -> salA
    131:131:react.glang.GSet kset() -> bFtk
    141:141:react.glang.GList v() -> jpoO
    151:151:react.glang.GSet vset() -> vlAx
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> JtIb
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> TFQb
    209:219:react.glang.GMap removeDuplicateValues() -> nAjG
    233:242:void put(react.glang.GList,react.glang.GList) -> dnqv
    251:267:react.glang.GList sortK() -> twAQ
    277:293:react.glang.GList sortV() -> RHjT
react.glang.GQuadraset -> dwkI:
    java.lang.Object a -> YFNp
    java.lang.Object b -> EvjA
    java.lang.Object c -> BupQ
    java.lang.Object d -> MvQS
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> UcRn
    25:26:void setA(java.lang.Object) -> PmIl
    30:30:java.lang.Object getB() -> TONU
    35:36:void setB(java.lang.Object) -> wDFX
    40:40:java.lang.Object getC() -> psDs
    45:46:void setC(java.lang.Object) -> HvSx
    50:50:java.lang.Object getD() -> yJYy
    55:56:void setD(java.lang.Object) -> IVru
react.glang.GSet -> VfQx:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> VDOX:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> YFNp
    java.lang.Object b -> EvjA
    java.lang.Object c -> BupQ
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> UcRn
    26:27:void setA(java.lang.Object) -> PmIl
    31:31:java.lang.Object getB() -> TONU
    36:37:void setB(java.lang.Object) -> wDFX
    41:41:java.lang.Object getC() -> psDs
    46:47:void setC(java.lang.Object) -> HvSx
react.gmath.Average -> qTAN:
    double[] values -> wgWM
    double average -> vAoi
    boolean dirty -> hIhl
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> ooQq
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> OXru
react.gmath.DoubleArrayUtils -> cuLB:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> dnqv
    17:19:void wrapRight(double[]) -> dnqv
    23:27:void fill(double[],double) -> fill
react.gmath.M -> cBGQ:
    int precision -> mHXA
    int modulus -> inoP
    float[] sin -> BeNr
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> dnqv
    31:36:boolean r(java.lang.Double) -> JtIb
    51:51:double tps(long,int) -> vcFN
    63:63:double ticksFromNS(long) -> HvSx
    75:101:java.lang.String toRoman(int) -> KUHd
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> TFQb
    144:216:int fromRoman(java.lang.String) -> Eliy
    226:226:long ns() -> DPca
    236:236:long ms() -> GjnU
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> JtIb
    333:333:float sinLookup(int) -> xhiv
react.gnet.client.Client -> byxF:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> HoRi
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> dnqv
    74:74:react.gnet.packet.PacketHandler getHandler() -> FhKy
react.gnet.client.IClient -> CwpJ:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> dnqv
    react.gnet.packet.PacketHandler getHandler() -> FhKy
react.gnet.download.Download -> rpUq:
    react.gnet.download.DownloadState state -> vJaX
    react.gnet.download.DownloadType type -> rWfl
    react.gnet.download.DownloadStatus status -> dpbF
    react.gnet.download.DownloadMonitor monitor -> uiaB
    java.net.URL url -> url
    java.io.File file -> Npae
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> UkgK
    92:92:react.gnet.download.DownloadType getType() -> DPck
    97:97:react.gnet.download.DownloadStatus getStatus() -> QNYO
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> UtXI
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> DYQL:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> dnqv
    void onDownloadStarted(react.gnet.download.Download) -> dnqv
    void onDownloadFinished(react.gnet.download.Download) -> JtIb
    void onDownloadFailed(react.gnet.download.Download) -> KUIb
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> dnqv
react.gnet.download.DownloadState -> RIHH:
    react.gnet.download.DownloadState IDLE -> GJJl
    react.gnet.download.DownloadState DOWNLOADING -> AsNw
    react.gnet.download.DownloadState FAILED -> rWer
    react.gnet.download.DownloadState FINISHED -> Xumq
    react.gnet.download.DownloadState[] $VALUES -> lUte
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> jqNi:
    long bytesDownloaded -> pbam
    long bytesTotal -> axXh
    long bytesPerSecond -> yeLR
    long timeElapsed -> TrTB
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> cAkD
    25:25:long getBytesDownloaded() -> JtXg
    30:31:void setBytesDownloaded(long) -> IVru
    35:35:long getBytesTotal() -> lTuV
    40:41:void setBytesTotal(long) -> WWkg
    45:45:long getBytesPerSecond() -> rWGk
    50:51:void setBytesPerSecond(long) -> vABY
    55:55:long getTimeElapsed() -> TydG
    60:61:void setTimeElapsed(long) -> ooQq
react.gnet.download.DownloadType -> qKOV:
    react.gnet.download.DownloadType DETERMINATE -> hJIb
    react.gnet.download.DownloadType INDETERMINATE -> IHAP
    react.gnet.download.DownloadType[] $VALUES -> giJD
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> RHgB:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> ETEw
    java.lang.String getPacketName() -> vAOx
react.gnet.packet.IncompatablePacketException -> iBwH:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> gotv:
    react.gnet.packet.PacketBinding SERVER_BOUND -> gGEh
    react.gnet.packet.PacketBinding CLIENT_BOUND -> escW
    react.gnet.packet.PacketBinding[] $VALUES -> rhhJ
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> gMrY:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> ghEW:
    react.glang.GList accept -> OYqr
    react.gnet.packet.PacketBinding side -> VgXN
    react.gnet.streams.OSS out -> FXIi
    react.gnet.streams.ISS in -> dVmr
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> dnqv
    28:34:void accept(react.gnet.packet.IPacket) -> JtIb
    38:46:react.gnet.packet.IPacket findPacket(int) -> WiMJ
    51:66:react.gnet.packet.IPacket read() -> Pugb
    71:77:void write(react.gnet.packet.IPacket) -> KUIb
react.gnet.packet.UnhandledPacketException -> TNjs:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> aerY:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> FhKy
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> XuAl
react.gnet.server.Server -> IpoS:
    int port -> port
    java.net.ServerSocket socket -> aNFP
    react.gnet.packet.PacketHandler handler -> HoRi
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> FhKy
    37:84:void run() -> run
    88:91:void pstart() -> vAOt
    95:96:void pstop() -> RHiS
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> XuAl
react.gnet.streams.ISS -> yJTx:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> wftq
    boolean built -> wftp
    byte[] readBuffer -> Ngpo
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> pGaH
    64:72:react.glang.GList readStringList() -> gxjQ
    77:85:react.glang.GList readDoubleList() -> jqSG
    90:98:react.glang.GList readLongList() -> baIn
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> dnqv
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> dnqv
    136:137:react.gnet.streams.ISS gzip() -> HLNW
    142:147:void build() -> ESee
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> JtIb
    435:436:void close() -> close
react.gnet.streams.OSS -> KoFT:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> QGGl
    react.gnet.streams.StreamBuilder bu -> wftq
    boolean built -> wftp
    byte[] writeBuffer -> vBOl
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> DrWU
    41:42:react.gnet.streams.OSS gzip(int) -> oLnO
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> JtIb
    53:58:void build() -> ESee
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> PmIl
    102:108:void writeDoubleList(react.glang.GList) -> wDFX
    112:118:void writeLongList(react.glang.GList) -> NLoy
    122:128:void writeStreamableList(react.glang.GList) -> PSXJ
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> lwXj
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> KUIb
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> AOgE:
    react.glang.GList constructors -> pjuO
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> dnqv
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> dnqv
    49:50:void bind(react.gnet.streams.StreamConstructor) -> dnqv
    54:55:void bindGZIP(int) -> Qoju
    59:60:void bindGZIP() -> CxSn
    64:65:void bindCipher(javax.crypto.Cipher) -> KUIb
    69:70:void bindBuffer(int) -> gVYI
    74:75:void bindBuffer() -> oUli
react.gnet.streams.StreamConstructor -> QFCd:
    java.io.InputStream constructInput(java.io.InputStream) -> dnqv
    java.io.OutputStream constructOutput(java.io.OutputStream) -> dnqv
react.gnet.streams.constructors.BufferedStreamConstructor -> VfUA:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> JtIb
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> JtIb
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> dnqv
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> dnqv
react.gnet.streams.constructors.CipherStreamConstructor -> FNUA:
    javax.crypto.Cipher cipher -> lNHY
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> KUIb
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> KUIb
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> dnqv
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> dnqv
react.gnet.streams.constructors.GZipStreamConstructor -> aeri:
    int compressionLevel -> dxsl
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> XuAl
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> XuAl
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> dnqv
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> dnqv
react.gnet.streams.overlays.CGZIPInputStream -> AaHl:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> CgNf:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> qltN:
    void toBytes(react.gnet.streams.OSS) -> dnqv
    void fromBytes(react.gnet.streams.ISS) -> dnqv
react.graph.ColossalView -> QVgF:
    react.papyrus.BufferedFrame view -> twas
    react.glang.GMap buffers -> rNxR
    react.glang.GMap graphs -> gWjM
    double level -> BCNh
    double targetLevel -> Pehs
    int maxX -> BvRx
    int maxY -> XdpS
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> TOQK
    51:77:void render() -> eYQx
    81:98:void scroll(int) -> OOrf
    102:112:void recompile() -> CMaB
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> dnqv
    122:122:react.papyrus.BufferedFrame getView() -> BtqH
    127:127:react.glang.GMap getBuffers() -> JIbx
    132:132:react.glang.GMap getGraphs() -> Btpf
    137:137:double getLevel() -> NVQF
    142:142:double getTargetLevel() -> WaKS
    147:147:int getMaxX() -> EdhD
    152:152:int getMaxY() -> MSMf
react.graph.ColossalView$Builder -> QVgF$dnqv:
    react.glang.GList graphs -> MnCN
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> dnqv
    171:191:react.graph.ColossalView compute() -> ntmU
react.graph.CubicleIterator -> RIHr:
    int[][] mapping -> sJLQ
    int xCubes -> lVXf
    int yCubes -> PDHB
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> rohk
    47:130:void insert(react.graph.GraphSize,int) -> dnqv
    134:145:void print() -> print
react.graph.GraphSampleLine -> gVen:
    double lx -> uaSb
    double ly -> jPSL
    react.api.ISampler sampler -> qCcu
    react.graph.IFormatter formatter -> DHta
    byte graphColor -> NqFS
    byte backgroundColor -> JcxS
    byte borderColor -> YEos
    byte textColor -> Nxug
    int ticksLeftTitle -> qKuI
    int ticksOutTitle -> dhSc
    double nextPoint -> vJbv
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> KfMa
    51:183:void onRender(react.papyrus.BufferedFrame) -> dnqv
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> JtIb
    226:254:int getHue(int,int,int) -> KUIb
    259:281:void scaleFor(react.glang.GList) -> KekD
    285:285:react.graph.IFormatter getFormatter() -> UHub
    290:291:void setFormatter(react.graph.IFormatter) -> dnqv
    295:295:byte getGraphColor() -> mXWx
    300:301:void setGraphColor(byte) -> dnqv
    305:305:byte getBackgroundColor() -> nuNT
    310:311:void setBackgroundColor(byte) -> JtIb
    315:315:byte getBorderColor() -> qSfY
    320:321:void setBorderColor(byte) -> KUIb
    325:325:byte getTextColor() -> IqWO
    330:331:void setTextColor(byte) -> XuAl
    335:335:react.api.ISampler getSampler() -> cSOL
react.graph.GraphSize -> eYQD:
    react.graph.GraphSize WIDE -> MvRN
    react.graph.GraphSize FULL -> fLTx
    react.graph.GraphSize SQUARE -> OYsl
    int[] $SWITCH_TABLE$react$graph$GraphSize -> brmF
    react.graph.GraphSize[] ENUM$VALUES -> bQJe
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> qmXr
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> IFcL
react.graph.GraphText -> KLeL:
    java.lang.String text -> text
    byte fontColor -> gOYJ
    byte backgroundColor -> JcxS
    boolean wrote -> qLTv
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> dnqv
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> LrPL
    68:69:void setFontColor(byte) -> jqEQ
    73:73:byte getBackgroundColor() -> nuNT
    78:79:void setBackgroundColor(byte) -> JtIb
react.graph.GraphingInstance -> YpAP:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> MnCN
    react.graph.ColossalView view -> MCNA
    react.papyrus.Papyrus papyrus -> KNIS
    react.papyrus.IRenderer renderer -> ekUj
    boolean mapping -> jXQs
    react.glang.GList msgs -> JRud
    react.surge.sched.Task waiter -> qTeC
    react.surge.sched.Task waiter2 -> VVXv
    int shift -> CFQs
    boolean notif -> NFPv
    47:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> dnqv
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> dnqv
    138:142:void send(java.lang.String) -> salA
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> dnqv
    153:165:void on(react.event.ReactScrollEvent) -> dnqv
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> dnqv
    179:187:void destroy() -> destroy
    191:200:void toggle() -> pHRv
    204:205:void setGraphs(react.glang.GList) -> HvSx
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> BuRu
    243:259:void compile() -> JsyY
    40:40:boolean access$0(react.graph.GraphingInstance) -> dnqv
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> JtIb
    45:45:boolean access$2(react.graph.GraphingInstance) -> KUIb
    45:45:void access$3(react.graph.GraphingInstance,boolean) -> dnqv
    44:44:int access$4(react.graph.GraphingInstance) -> XuAl
    44:44:void access$5(react.graph.GraphingInstance,int) -> dnqv
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> jqEQ
react.graph.GraphingInstance$1 -> YpAP$1:
    react.graph.GraphingInstance this$0 -> OshB
    org.bukkit.entity.Player val$player -> BCNp
    1:51:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> YpAP$2:
    react.graph.GraphingInstance this$0 -> OshB
    1:76:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> YpAP$3:
    react.graph.GraphingInstance this$0 -> OshB
    1:106:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> dnqv
react.graph.IFormatter -> rgfl:
    java.lang.String from(double) -> eqvC
react.graph.IGraph -> Nfoa:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> vJEL
    long getTimeViewport() -> FVlJ
    void render(react.papyrus.BufferedFrame) -> KUIb
    double getMax() -> getMax
    void setMax(double) -> Eliy
react.graph.NormalGraph -> QNVm:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> kRsX
    long timeViewport -> IaXC
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> vJEL
    35:35:long getTimeViewport() -> FVlJ
    41:42:void render(react.papyrus.BufferedFrame) -> KUIb
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> Eliy
    void onRender(react.papyrus.BufferedFrame) -> dnqv
react.graph.PlotBoard -> afWP:
    react.glang.GMap plots -> JmLJ
    int maxRecordings -> pjvl
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> fTGw
    33:33:long getAccurateTimeSpan() -> JJGW
    38:50:long getMedian(long,long) -> jqEQ
    55:55:long getMinimumAccuracyRange() -> cmAp
    60:70:double getMaxValue() -> fujB
    75:85:double getMinValue() -> KMJc
    90:90:react.glang.GList sort(react.glang.GMap) -> JtIb
    95:105:long earilestRecording() -> kQtY
    110:120:long latestRecording() -> Blbw
    125:126:void reduceBefore(long) -> eqvC
    130:156:void reduceBetween(long,long) -> vcFN
    160:160:boolean before(long,long) -> TFQb
    165:165:boolean after(long,long) -> PmIl
    170:170:boolean within(long,long,long) -> dnqv
    175:193:react.glang.GMap getBetween(long,long) -> wDFX
    198:200:void plot(long,double) -> dnqv
    204:204:boolean hasAt(long) -> Eliy
    209:209:double getAt(long) -> salA
    214:214:int getSize() -> getSize
react.graph.Point -> HvaD:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> hjjL:
    int iid -> FFkp
    react.graph.IGraph graph -> NFTH
    react.graph.GraphSize size -> fKwV
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> HmrP
    24:25:void setGraph(react.graph.IGraph) -> dnqv
    29:29:react.graph.GraphSize getSize() -> fSef
    34:35:void setSize(react.graph.GraphSize) -> dnqv
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> RkME:
    react.graph.RenderMaxType UNLIMITED -> dgtU
    react.graph.RenderMaxType LIMITED -> HfeP
    react.graph.RenderMaxType[] ENUM$VALUES -> Hwff
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> ntlP:
    java.lang.String CRLF -> EKya
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> equa
    162:198:java.lang.String toString(react.json.JSONObject) -> JtIb
react.json.HTTPTokener -> sryf:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> xGUR:
    java.util.ArrayList myArrayList -> CNdJ
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> dnqv
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> CLpp
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> ssLm
    394:399:react.json.JSONObject getJSONObject(int) -> KCgI
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> ejFV
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> hPin
    515:515:boolean optBoolean(int) -> CUbQ
    533:536:boolean optBoolean(int,boolean) -> JtIb
    551:551:double optDouble(int) -> KTja
    569:572:double optDouble(int,double) -> dnqv
    587:587:int optInt(int) -> Grql
    605:608:int optInt(int,int) -> PmIl
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> JtIb
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> dnqv
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> dnqv
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> dnqv
    722:723:react.json.JSONArray optJSONArray(int) -> DOup
    737:738:react.json.JSONObject optJSONObject(int) -> Dihj
    752:752:long optLong(int) -> UHub
    770:773:long optLong(int,long) -> dnqv
    788:788:java.lang.String optString(int) -> pYFY
    803:804:java.lang.String optString(int,java.lang.String) -> dnqv
    816:817:react.json.JSONArray put(boolean) -> HvSx
    830:831:react.json.JSONArray put(java.util.Collection) -> dnqv
    845:848:react.json.JSONArray put(double) -> salA
    860:861:react.json.JSONArray put(int) -> xWki
    873:874:react.json.JSONArray put(long) -> equa
    887:888:react.json.JSONArray put(java.util.Map) -> dnqv
    902:903:react.json.JSONArray put(java.lang.Object) -> WWkg
    921:922:react.json.JSONArray put(int,boolean) -> KUIb
    939:940:react.json.JSONArray put(int,java.util.Collection) -> dnqv
    958:959:react.json.JSONArray put(int,double) -> JtIb
    977:978:react.json.JSONArray put(int,int) -> wDFX
    996:997:react.json.JSONArray put(int,long) -> JtIb
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> dnqv
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> dnqv
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> vABY
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> dnqv
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> dnqv
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> dnqv
react.json.JSONException -> SLMN:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> OIWQ
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> awXT:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> dnqv
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> PJfj
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> dnqv
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> JtIb
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> equa
    379:456:java.lang.String toString(react.json.JSONArray) -> JtIb
    472:552:java.lang.String toString(react.json.JSONObject) -> JtIb
react.json.JSONObject -> kbpl:
    java.util.Map map -> map
    java.lang.Object NULL -> xbNP
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> dnqv
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> JtIb
    480:499:java.lang.String doubleToString(double) -> equa
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> IVtE
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> HeQT
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> KUHd
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> KUIb
    751:767:java.lang.String[] getNames(java.lang.Object) -> ooQq
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> xhiv
    855:855:boolean isNull(java.lang.String) -> WiMJ
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> HnSM
    917:937:java.lang.String numberToString(java.lang.Number) -> dnqv
    949:949:java.lang.Object opt(java.lang.String) -> pGaH
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> dnqv
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> dnqv
    1018:1018:boolean optBoolean(java.lang.String) -> DrWU
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> dnqv
    1054:1054:double optDouble(java.lang.String) -> oLnO
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> dnqv
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> dnqv
    1116:1119:double optDouble(java.lang.String,double) -> dnqv
    1134:1134:int optInt(java.lang.String) -> Qoju
    1152:1155:int optInt(java.lang.String,int) -> KUIb
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> gVYI
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> OOrf
    1198:1198:long optLong(java.lang.String) -> rohk
    1216:1219:long optLong(java.lang.String,long) -> dnqv
    1234:1234:java.lang.String optString(java.lang.String) -> CLpp
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> JtIb
    1255:1305:void populateMap(java.lang.Object) -> eqvC
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> JtIb
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> dnqv
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> JtIb
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> XuAl
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> JtIb
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> dnqv
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> KUIb
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> XuAl
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> jqEQ
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> dnqv
    1590:1590:java.lang.Object remove(java.lang.String) -> ssLm
    1605:1640:boolean similar(java.lang.Object) -> vABY
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> Eliy
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> KUIb
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> dnqv
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> dnqv
    2000:2004:void indent(java.io.Writer,int) -> dnqv
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> dnqv
react.json.JSONObject$Null -> kbpl$dnqv:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> UcRn:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> TONU:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> AaKc:
    long character -> eRGT
    boolean eof -> eof
    long index -> bbOj
    long line -> fKxL
    char previous -> nnCG
    java.io.Reader reader -> reader
    boolean usePrevious -> EwOY
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> EdiM
    119:131:int dehexchar(char) -> dnqv
    136:136:boolean end() -> ghLA
    147:153:boolean more() -> dxSh
    164:198:char next() -> next
    213:218:char next(char) -> JtIb
    233:250:java.lang.String next(int) -> KfMa
    263:266:char nextClean() -> baLV
    287:334:java.lang.String nextString(char) -> KUIb
    349:361:java.lang.String nextTo(char) -> XuAl
    376:388:java.lang.String nextTo(java.lang.String) -> KCgI
    403:441:java.lang.Object nextValue() -> fBck
    458:479:char skipTo(char) -> jqEQ
    491:491:react.json.JSONException syntaxError(java.lang.String) -> hPin
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> TOOB:
    int maxdepth -> rGJI
    boolean comma -> Jlii
    char mode -> qDFh
    react.json.JSONObject[] stack -> KNKI
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> CUbQ
    157:164:react.json.JSONWriter array() -> Btrr
    180:193:react.json.JSONWriter end(char,char) -> dnqv
    206:206:react.json.JSONWriter endArray() -> piry
    219:219:react.json.JSONWriter endObject() -> jqSs
    235:258:react.json.JSONWriter key(java.lang.String) -> KTja
    274:285:react.json.JSONWriter object() -> APMd
    299:310:void pop(char) -> vcFN
    322:329:void push(react.json.JSONObject) -> XuAl
    342:342:react.json.JSONWriter value(boolean) -> IVru
    356:356:react.json.JSONWriter value(double) -> ejFV
    369:369:react.json.JSONWriter value(long) -> ejFV
    385:385:react.json.JSONWriter value(java.lang.Object) -> salA
react.json.XML -> hryj:
    java.lang.Character AMP -> wVXn
    java.lang.Character APOS -> MLAC
    java.lang.Character BANG -> vSUv
    java.lang.Character EQ -> vdXI
    java.lang.Character GT -> Dbgs
    java.lang.Character LT -> NWSy
    java.lang.Character QUEST -> MTQS
    java.lang.Character QUOT -> ekVp
    java.lang.Character SLASH -> dqFW
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> Grql
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> dnqv
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> equa
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> mOfB:
    java.util.HashMap entity -> twcD
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> xGWt
    108:133:java.lang.Object nextContent() -> yAie
    149:166:java.lang.Object nextEntity(char) -> TFQb
    186:239:java.lang.Object nextMeta() -> eXsS
    261:334:java.lang.Object nextToken() -> TiEj
    354:420:boolean skipPast(java.lang.String) -> DOup
react.papyrus.BufferedFrame -> qvEY:
    byte[][] frame -> pcEu
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> dnqv
    90:97:void write(byte) -> vcFN
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> dnqv
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> dnqv
    131:145:java.awt.image.BufferedImage toBufferedImage() -> NxWq
    153:160:void writeRainbowMul() -> nRob
    167:174:void writeRainbowAdd() -> Jkjm
    181:191:void writeSparks() -> TqXj
    195:201:boolean write(int,int,byte) -> dnqv
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> dnqv
    233:250:void write(react.papyrus.BufferedFrame) -> XuAl
    254:254:byte[][] getRawFrame() -> KoNu
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> woFI:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> XuAl
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> dnqv
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> nBHS:
    org.bukkit.map.MapView getView() -> DbJU
    react.papyrus.BufferedFrame getFrameBuffer() -> SLRd
    void addRenderer(react.papyrus.IRenderer) -> dnqv
    void clearRenderers() -> uiFj
    react.glang.GList getRenderers() -> XKAT
    void removeRenderer(react.papyrus.IRenderer) -> JtIb
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> kJGf
react.papyrus.IRenderer -> mXVj:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> dnqv
react.papyrus.Papyrus -> WrIu:
    org.bukkit.map.MapView map -> iLoS
    react.papyrus.BufferedFrame frameBuffer -> LbPM
    react.papyrus.BufferedFrame lastFrameBuffer -> OcHp
    react.glang.GList renderers -> MCPX
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> DbJU
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> SLRd
    51:52:void addRenderer(react.papyrus.IRenderer) -> dnqv
    57:58:void clearRenderers() -> uiFj
    63:63:react.glang.GList getRenderers() -> XKAT
    69:70:void removeRenderer(react.papyrus.IRenderer) -> JtIb
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> kJGf
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> dnqv
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> JtIb
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> KUIb
react.papyrus.Papyrus$1 -> WrIu$1:
    react.papyrus.Papyrus this$0 -> kJeS
    org.bukkit.map.MapCanvas val$c -> KNMl
    org.bukkit.map.MapView val$v -> jHEw
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> hIGe:
    int spaceSize -> AkDU
    java.lang.String fontChars -> wpOI
    int[][] fontData -> Sffb
    react.papyrus.ReactFont Font -> qDIs
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> dDkI:
    react.glang.GList subgoals -> dyYI
    java.lang.String tag -> PULu
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> GsdI
    26:44:void propigate() -> jiFl
    49:50:void addGoal(react.rai.IGoal) -> dnqv
    55:65:react.glang.GList getFailingSubgoals() -> pbGU
    71:71:boolean isFailing() -> wLgu
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> kbxG
    void onPropigated() -> HvgP
react.rai.Goal$1 -> dDkI$1:
    react.rai.Goal this$0 -> XdtO
    react.rai.IGoal val$i -> GBAt
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> xhum:
    react.glang.GList getSubgoals() -> GsdI
    void propigate() -> jiFl
    void onPropigated() -> HvgP
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> pbGU
    boolean isFailing() -> wLgu
    boolean onCheckFailing() -> kbxG
    void update() -> update
    void addGoal(react.rai.IGoal) -> dnqv
react.rai.IRAI -> gFEC:
    react.glang.GList getGoals() -> tfBp
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> dnqv
    react.glang.GList getEvents() -> qCFw
    void callEvent(react.rai.RAIEvent) -> dnqv
    react.glang.GList getListeners() -> FhQE
react.rai.RAI -> IycD:
    react.glang.GList goals -> NOFp
    react.glang.GList events -> hJOm
    react.glang.GList logEvents -> UlmN
    react.glang.GList listeners -> psjM
    long since -> iwey
    react.rai.RAI instance -> NpiX
    21:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> tfBp
    41:42:void addGoal(react.rai.IGoal) -> dnqv
    47:69:void tick() -> tick
    74:74:react.glang.GList getEvents() -> qCFw
    80:87:void callEvent(react.rai.RAIEvent) -> dnqv
    92:92:react.glang.GList getListeners() -> FhQE
react.rai.RAIEvent -> QNVN:
    react.rai.RAIEventType type -> RRaq
    java.lang.String[] pars -> BCQv
    java.lang.String ovt -> DAGm
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> BAnw
    29:29:java.lang.String[] getPars() -> XBPW
    34:34:java.lang.String getOvt() -> Aqpf
react.rai.RAIEventType -> lURo:
    react.rai.RAIEventType FIRE_ACTION -> PUND
    react.rai.RAIEventType NOTE_GOAL_FAILING -> fCgw
    react.rai.RAIEventType NOTE_GOAL_FIXED -> PTkP
    java.lang.String[] msgs -> dxwE
    react.rai.RAIEventType[] ENUM$VALUES -> pAEp
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> DHXN
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> dnqv
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedChunkLoad -> bFtk:
    boolean failing -> qKwb
    24:27:void <init>() -> <init>
    34:60:boolean onCheckFailing() -> kbxG
    66:79:void onPropigated() -> HvgP
react.rai.goals.GoalReducedChunkLoad$1 -> bFtk$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> TjJJ
    1:42:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    47:56:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> bFtk$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> TjJJ
    1:68:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    73:76:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> jpoO:
    boolean failing -> qKwb
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> kbxG
    91:134:void onPropigated() -> HvgP
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> dnqv
react.rai.goals.GoalReducedEntityCounts$1 -> jpoO$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> AjdE
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> jpoO$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> AjdE
    org.bukkit.Chunk val$lx -> IOwF
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> vlAx:
    boolean failing -> qKwb
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> kbxG
    78:128:void onPropigated() -> HvgP
react.rai.goals.GoalStableChunkTime$1 -> vlAx$1:
    react.rai.goals.GoalStableChunkTime this$0 -> GlUH
    1:54:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> vlAx$2:
    react.rai.goals.GoalStableChunkTime this$0 -> GlUH
    java.lang.Object val$i -> ORIe
    1:111:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> nAjG:
    boolean failing -> qKwb
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> HvgP
    35:35:void letUp() -> RcCN
    40:77:boolean onCheckFailing() -> kbxG
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> dnqv
react.rai.goals.GoalStableEntityTime$1 -> nAjG$1:
    react.rai.goals.GoalStableEntityTime this$0 -> wDww
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> twAQ:
    boolean failing -> qKwb
    react.glang.GMap reocc -> Aaqt
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> HvgP
    88:125:boolean onCheckFailing() -> kbxG
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> dnqv
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> JtIb
react.rai.goals.GoalStableFluidTime$1 -> twAQ$1:
    react.rai.goals.GoalStableFluidTime this$0 -> FaBD
    org.bukkit.Chunk val$lx -> IOwF
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> twAQ$2:
    react.rai.goals.GoalStableFluidTime this$0 -> FaBD
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> RHjT:
    boolean failing -> qKwb
    react.glang.GMap reocc -> Aaqt
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> HvgP
    89:125:boolean onCheckFailing() -> kbxG
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> dnqv
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> JtIb
react.rai.goals.GoalStableHopperTime$1 -> RHjT$1:
    react.rai.goals.GoalStableHopperTime this$0 -> ydqK
    org.bukkit.Chunk val$lx -> IOwF
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> RHjT$2:
    react.rai.goals.GoalStableHopperTime this$0 -> ydqK
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> psDs:
    boolean failing -> qKwb
    react.glang.GMap reocc -> Aaqt
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> HvgP
    89:126:boolean onCheckFailing() -> kbxG
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> dnqv
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> JtIb
react.rai.goals.GoalStableRedstoneTime$1 -> psDs$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> dqGl
    org.bukkit.Chunk val$lx -> IOwF
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> psDs$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> dqGl
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> yJYy:
    boolean failing -> qKwb
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> HvgP
    34:58:boolean onCheckFailing() -> kbxG
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> dnqv
react.rai.goals.GoalStableTickTime$1 -> yJYy$1:
    react.rai.goals.GoalStableTickTime this$0 -> Hfhl
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> OXru:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> JJkl
    boolean authenticated -> dNfg
    react.remote.server.ServerInfo info -> LIBk
    react.glang.GMap frems -> XTTy
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> ndBI
    51:51:react.glang.GMap getFrames() -> UlKg
    56:75:int computeFrames() -> yRnX
    80:92:boolean clearToken() -> pjXG
    97:110:boolean updateServerInfo() -> rMyR
    115:129:boolean refreshToken() -> YDqS
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> KUIb
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> imsC
    165:165:boolean isAuthenticated() -> fdhr
    170:170:react.remote.server.ServerInfo getInfo() -> fdiS
react.remote.client.packet.CPacketClearToken -> DPca:
    java.lang.String token -> JJkl
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> dnqv
    33:34:void fromBytes(react.gnet.streams.ISS) -> dnqv
    38:38:java.lang.String getToken() -> imsC
    43:44:void setToken(java.lang.String) -> Dihj
react.remote.client.packet.CPacketComputeFrames -> GjnU:
    java.lang.String token -> JJkl
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> dnqv
    33:34:void fromBytes(react.gnet.streams.ISS) -> dnqv
    38:38:java.lang.String getToken() -> imsC
    43:44:void setToken(java.lang.String) -> Dihj
react.remote.client.packet.CPacketGetInfo -> FhKy:
    java.lang.String token -> JJkl
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> dnqv
    33:34:void fromBytes(react.gnet.streams.ISS) -> dnqv
    38:38:java.lang.String getToken() -> imsC
    43:44:void setToken(java.lang.String) -> Dihj
react.remote.client.packet.CPacketGetToken -> UkgK:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> dnqv
    36:38:void fromBytes(react.gnet.streams.ISS) -> dnqv
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> DPck:
    java.lang.String token -> JJkl
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> dnqv
    33:34:void fromBytes(react.gnet.streams.ISS) -> dnqv
    38:38:java.lang.String getToken() -> imsC
    43:44:void setToken(java.lang.String) -> Dihj
react.remote.client.packet.ClientPacket -> QNYO:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> dnqv
    void fromBytes(react.gnet.streams.ISS) -> dnqv
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> ETEw
    42:42:java.lang.String getPacketName() -> vAOx
react.remote.client.packet.ClientPacketType -> UtXI:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> JKLu
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> oOHC
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> fCjr
    react.remote.client.packet.ClientPacketType GET_INFO -> RIsH
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> BnIQ
    react.remote.client.packet.ClientPacketType[] $VALUES -> BnHp
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> cAkD:
    react.glang.GMap compute(long,long) -> KUIb
react.remote.server.KnownUser -> JtXg:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> lTuV:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> dnqv
    38:41:void fromBytes(react.gnet.streams.ISS) -> dnqv
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> rWGk:
    react.glang.GList users -> UvAC
    react.glang.GMap session -> xkCX
    react.glang.GMap lastCompute -> Ygye
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> PdaF
    44:45:void registerUser(react.remote.server.KnownUser) -> dnqv
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> JtIb
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> UHub
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> XuAl
    react.remote.server.IFrameComputer getFrameComputer() -> lClc
    170:171:void markLastCompute(react.remote.server.KnownUser) -> KUIb
    175:180:long getLastCompute(react.remote.server.KnownUser) -> XuAl
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> dnqv
    190:191:void deleteSession(react.remote.server.KnownUser) -> jqEQ
    195:195:java.lang.String createToken() -> MKAR
react.remote.server.ServerInfo -> TydG:
    java.lang.String motd -> HLwD
    int gameProtocol -> VyCy
    java.lang.String gameVersion -> igGi
    java.lang.String reactVersion -> Qqcw
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> Dsnu
    int viewDistance -> viewDistance
    int gamePort -> oFVI
    java.lang.String gameAddress -> qenB
    react.glang.GList remotePlugins -> VWAV
    react.glang.GList worlds -> IXjw
    react.glang.GList actions -> bQPo
    react.glang.GList samplers -> YVvf
    26:26:react.remote.server.ServerInfo empty() -> Ukhv
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> dnqv
    146:159:void fromBytes(react.gnet.streams.ISS) -> dnqv
    java.lang.String dgetMotd() -> vtOB
    int dgetGameProtocol() -> baCm
    java.lang.String dgetGameVersion() -> DXlb
    java.lang.String dgetReactVersion() -> Kvro
    int dgetMaxPlayers() -> lCmT
    react.glang.GList dgetConnectedPlayers() -> Euba
    int dgetViewDistance() -> SSvm
    int dgetGamePort() -> GjgT
    java.lang.String dgetGameAddress() -> dfjF
    react.glang.GList dgetRemotePlugins() -> QVap
    react.glang.GList dgetWorlds() -> NgLI
    react.glang.GList dgetActions() -> kAJV
    react.glang.GList dgetSamplers() -> GQVB
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> kJFf
    199:199:java.lang.String getGameVersion() -> aTyH
    204:204:java.lang.String getReactVersion() -> docx
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> AjBh
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> iLOl
    229:229:java.lang.String getGameAddress() -> xOjY
    234:234:react.glang.GList getRemotePlugins() -> gEjG
    239:239:react.glang.GList getWorlds() -> pPcc
    244:244:react.glang.GList getActions() -> aoBF
    249:249:react.glang.GList getSamplers() -> Fxoq
react.remote.server.ServerInfo$1 -> TydG$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> NgLI
    37:37:int dgetViewDistance() -> SSvm
    43:43:react.glang.GList dgetRemotePlugins() -> QVap
    49:49:java.lang.String dgetReactVersion() -> Kvro
    55:55:java.lang.String dgetMotd() -> vtOB
    61:61:int dgetMaxPlayers() -> lCmT
    67:67:java.lang.String dgetGameVersion() -> DXlb
    73:73:int dgetGameProtocol() -> baCm
    79:79:int dgetGamePort() -> GjgT
    85:85:java.lang.String dgetGameAddress() -> dfjF
    91:91:react.glang.GList dgetConnectedPlayers() -> Euba
    97:97:react.glang.GList dgetActions() -> kAJV
    103:103:react.glang.GList dgetSamplers() -> GQVB
react.remote.server.packet.ComputedFrame -> ETEw:
    react.glang.GMap values -> HEEl
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> dnqv
    28:36:void fromBytes(react.gnet.streams.ISS) -> dnqv
    40:40:react.glang.GMap getValues() -> YxWU
    45:46:void setValues(react.glang.GMap) -> KUIb
react.remote.server.packet.SPacketOk -> vAOx:
    boolean ok -> xkBm
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> dnqv
    33:34:void fromBytes(react.gnet.streams.ISS) -> dnqv
    38:38:boolean isOk() -> vtYJ
    43:44:void setOk(boolean) -> WWkg
react.remote.server.packet.SPacketSendFrames -> Pugb:
    react.glang.GMap frames -> CqLK
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> dnqv
    36:44:void fromBytes(react.gnet.streams.ISS) -> dnqv
    48:48:react.glang.GMap getFrames() -> UlKg
    53:54:void setFrames(react.glang.GMap) -> XuAl
react.remote.server.packet.SPacketSendInfo -> vAOt:
    react.remote.server.ServerInfo info -> LIBk
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> dnqv
    33:34:void fromBytes(react.gnet.streams.ISS) -> dnqv
    38:38:react.remote.server.ServerInfo getInfo() -> fdiS
    43:44:void setInfo(react.remote.server.ServerInfo) -> dnqv
react.remote.server.packet.SPacketSendToken -> RHiS:
    java.lang.String token -> JJkl
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> dnqv
    33:34:void fromBytes(react.gnet.streams.ISS) -> dnqv
    38:38:java.lang.String getToken() -> imsC
    43:44:void setToken(java.lang.String) -> Dihj
react.remote.server.packet.ServerPacket -> gxjQ:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> dnqv
    void fromBytes(react.gnet.streams.ISS) -> dnqv
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> ETEw
    42:42:java.lang.String getPacketName() -> vAOx
react.remote.server.packet.ServerPacketType -> jqSG:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> yCQS
    react.remote.server.packet.ServerPacketType SEND_INFO -> YWXV
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> qUKh
    react.remote.server.packet.ServerPacketType OK -> MmgY
    react.remote.server.packet.ServerPacketType[] $VALUES -> OcLu
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> baIn:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleAsyncQueue$1 -> baIn$1:
    react.sampler.SampleAsyncQueue this$0 -> toWJ
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleChunkTime -> HLNW:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleChunkTime$1 -> HLNW$1:
    react.sampler.SampleChunkTime this$0 -> wNLc
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleChunksLoaded -> ESee:
    react.graph.IFormatter formatter -> DHta
    17:27:void <init>() -> <init>
    32:38:void construct() -> ndBI
    43:44:void sample() -> KfMa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleChunksLoaded$1 -> ESee$1:
    react.sampler.SampleChunksLoaded this$0 -> YqJb
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> eqvC
react.sampler.SampleChunksLoadedPerSecond -> lwXj:
    react.gmath.Average a -> gqbB
    react.graph.IFormatter formatter -> DHta
    16:29:void <init>() -> <init>
    34:40:void construct() -> ndBI
    45:47:void sample() -> KfMa
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleChunksLoadedPerSecond$1 -> lwXj$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> Arwd
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> eqvC
react.sampler.SampleEntitiesDrops -> CxSn:
    react.graph.IFormatter formatter -> DHta
    17:27:void <init>() -> <init>
    32:38:void construct() -> ndBI
    43:44:void sample() -> KfMa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleEntitiesDrops$1 -> CxSn$1:
    react.sampler.SampleEntitiesDrops this$0 -> uOxr
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> eqvC
react.sampler.SampleEntitiesLiving -> oUli:
    react.graph.IFormatter formatter -> DHta
    17:27:void <init>() -> <init>
    32:38:void construct() -> ndBI
    43:44:void sample() -> KfMa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleEntitiesLiving$1 -> oUli$1:
    react.sampler.SampleEntitiesLiving this$0 -> etPN
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> eqvC
react.sampler.SampleEntitiesTiles -> TOQK:
    react.graph.IFormatter formatter -> DHta
    17:27:void <init>() -> <init>
    32:38:void construct() -> ndBI
    43:44:void sample() -> KfMa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleEntitiesTiles$1 -> TOQK$1:
    react.sampler.SampleEntitiesTiles this$0 -> grEl
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> eqvC
react.sampler.SampleEntitiesTotal -> eYQx:
    react.graph.IFormatter formatter -> DHta
    17:27:void <init>() -> <init>
    32:38:void construct() -> ndBI
    43:44:void sample() -> KfMa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleEntitiesTotal$1 -> eYQx$1:
    react.sampler.SampleEntitiesTotal this$0 -> agbj
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> eqvC
react.sampler.SampleEntityDroppedTicks -> CMaB:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleEntityDroppedTicks$1 -> CMaB$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> aosP
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleEntityTime -> BtqH:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleEntityTime$1 -> BtqH$1:
    react.sampler.SampleEntityTime this$0 -> DAMH
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleEntityTimeLock -> JIbx:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleEntityTimeLock$1 -> JIbx$1:
    react.sampler.SampleEntityTimeLock this$0 -> DALf
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleExplosionTime -> Btpf:
    react.graph.IFormatter formatter -> DHta
    17:27:void <init>() -> <init>
    32:38:void construct() -> ndBI
    43:44:void sample() -> KfMa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleExplosionTime$1 -> Btpf$1:
    react.sampler.SampleExplosionTime this$0 -> mHba
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> eqvC
react.sampler.SampleFluidPerSecond -> NVQF:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleFluidPerSecond$1 -> NVQF$1:
    react.sampler.SampleFluidPerSecond this$0 -> RuJR
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleFluidPerTick -> WaKS:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    46:53:void sample() -> KfMa
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleFluidPerTick$1 -> WaKS$1:
    react.sampler.SampleFluidPerTick this$0 -> AHdP
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleFluidTickTime -> EdhD:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleFluidTickTime$1 -> EdhD$1:
    react.sampler.SampleFluidTickTime this$0 -> hBDK
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleFluidTickUtilization -> MSMf:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    46:53:void sample() -> KfMa
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleFluidTickUtilization$1 -> MSMf$1:
    react.sampler.SampleFluidTickUtilization this$0 -> FywV
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleHopperPerSecond -> ntmU:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleHopperPerSecond$1 -> ntmU$1:
    react.sampler.SampleHopperPerSecond this$0 -> DlBN
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleHopperPerTick -> mXWx:
    react.graph.IFormatter formatter -> DHta
    18:29:void <init>() -> <init>
    34:40:void construct() -> ndBI
    47:54:void sample() -> KfMa
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleHopperPerTick$1 -> mXWx$1:
    react.sampler.SampleHopperPerTick this$0 -> MSwc
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleHopperTickTime -> nuNT:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleHopperTickTime$1 -> nuNT$1:
    react.sampler.SampleHopperTickTime this$0 -> Pnbu
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleHopperTickUtilization -> qSfY:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    46:53:void sample() -> KfMa
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleHopperTickUtilization$1 -> qSfY$1:
    react.sampler.SampleHopperTickUtilization this$0 -> gytl
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleMemoryAllocated -> IqWO:
    react.graph.IFormatter formatter -> DHta
    17:27:void <init>() -> <init>
    32:38:void construct() -> ndBI
    43:44:void sample() -> KfMa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleMemoryAllocated$1 -> IqWO$1:
    react.sampler.SampleMemoryAllocated this$0 -> GuJx
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> eqvC
react.sampler.SampleMemoryAllocationPerSecond -> cSOL:
    react.graph.IFormatter formatter -> DHta
    17:27:void <init>() -> <init>
    32:38:void construct() -> ndBI
    43:44:void sample() -> KfMa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleMemoryAllocationPerSecond$1 -> cSOL$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> Jubt
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> eqvC
react.sampler.SampleMemoryFree -> qmXr:
    react.graph.IFormatter formatter -> DHta
    17:27:void <init>() -> <init>
    32:38:void construct() -> ndBI
    43:44:void sample() -> KfMa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleMemoryFree$1 -> qmXr$1:
    react.sampler.SampleMemoryFree this$0 -> suHO
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> eqvC
react.sampler.SampleMemoryMax -> IFcL:
    react.graph.IFormatter formatter -> DHta
    17:27:void <init>() -> <init>
    32:38:void construct() -> ndBI
    43:44:void sample() -> KfMa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleMemoryMax$1 -> IFcL$1:
    react.sampler.SampleMemoryMax this$0 -> hBBx
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> eqvC
react.sampler.SampleMemoryUse -> LrPL:
    react.graph.IFormatter formatter -> DHta
    17:27:void <init>() -> <init>
    32:38:void construct() -> ndBI
    43:44:void sample() -> KfMa
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleMemoryUse$1 -> LrPL$1:
    react.sampler.SampleMemoryUse this$0 -> EDOP
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> eqvC
react.sampler.SampleRedstonePerSecond -> pHRv:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleRedstonePerSecond$1 -> pHRv$1:
    react.sampler.SampleRedstonePerSecond this$0 -> bsUs
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleRedstonePerTick -> BuRu:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    46:53:void sample() -> KfMa
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleRedstonePerTick$1 -> BuRu$1:
    react.sampler.SampleRedstonePerTick this$0 -> ixJk
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleRedstoneTickTime -> JsyY:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleRedstoneTickTime$1 -> JsyY$1:
    react.sampler.SampleRedstoneTickTime this$0 -> Jlom
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleRedstoneTickUtilization -> vJEL:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    46:53:void sample() -> KfMa
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleRedstoneTickUtilization$1 -> vJEL$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> ETpD
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleSyncQueue -> FVlJ:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleSyncQueue$1 -> FVlJ$1:
    react.sampler.SampleSyncQueue this$0 -> IHKP
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleTickTime -> fTGw:
    react.graph.IFormatter formatter -> DHta
    react.gmath.Average aa -> toYN
    17:29:void <init>() -> <init>
    34:40:void construct() -> ndBI
    45:47:void sample() -> KfMa
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleTickTime$1 -> fTGw$1:
    react.sampler.SampleTickTime this$0 -> HwlG
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> eqvC
react.sampler.SampleTickUtilization -> JJGW:
    react.graph.IFormatter formatter -> DHta
    react.gmath.Average aa -> toYN
    17:29:void <init>() -> <init>
    34:40:void construct() -> ndBI
    45:47:void sample() -> KfMa
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleTickUtilization$1 -> JJGW$1:
    react.sampler.SampleTickUtilization this$0 -> sJRx
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> eqvC
react.sampler.SampleTicksPerSecond -> cmAp:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleTicksPerSecond$1 -> cmAp$1:
    react.sampler.SampleTicksPerSecond this$0 -> cBsU
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleTileDroppedTicks -> fujB:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleTileDroppedTicks$1 -> fujB$1:
    react.sampler.SampleTileDroppedTicks this$0 -> oWWr
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleTileTime -> KMJc:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleTileTime$1 -> KMJc$1:
    react.sampler.SampleTileTime this$0 -> bsWE
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.sampler.SampleTileTimeLock -> kQtY:
    react.graph.IFormatter formatter -> DHta
    18:28:void <init>() -> <init>
    33:39:void construct() -> ndBI
    44:45:void sample() -> KfMa
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UHub
react.sampler.SampleTileTimeLock$1 -> kQtY$1:
    react.sampler.SampleTileTimeLock this$0 -> WYda
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> eqvC
react.security.checkpoints.SecurityCheckpointAlpha -> Blbw:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> HmuH
    78:148:void doScan(java.lang.Runnable) -> JtIb
    152:181:byte[] readResource(java.io.File,java.lang.String) -> dnqv
    186:217:react.glang.GMap scan(java.io.File) -> JtIb
    150:150:byte[] access$0(java.io.File,java.lang.String) -> JtIb
react.security.checkpoints.SecurityCheckpointAlpha$1 -> Blbw$1:
    java.lang.Runnable val$r -> rqbr
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> Blbw$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> PeqU
    java.lang.Runnable val$r -> rqbr
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> HmrP:
    java.lang.String ip -> lxcF
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> fSef:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> fSef$1:
    react.security.locks.SecurityLockAlpha this$0 -> toYF
    java.io.File val$f -> OcNu
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> HnSM:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> equa
react.slate.PhantomSlate -> EdiM:
    react.glang.GList lines -> YqMI
    react.glang.GList viewers -> fncp
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> wWDC
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> ndQC
    44:45:void set(int,java.lang.String) -> JtIb
    50:51:void setLines(react.glang.GList) -> IVru
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> ESee
    91:95:void addViewer(org.bukkit.entity.Player) -> equa
    100:102:void removeViewer(org.bukkit.entity.Player) -> ejFV
    107:107:react.glang.GList getViewers() -> aUYw
    113:113:boolean isViewing(org.bukkit.entity.Player) -> PJfj
    119:120:void addLine(java.lang.String) -> pYFY
    125:126:void clearLines() -> CgYU
react.slate.Slate -> ghLA:
    void build() -> ESee
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> ndQC
    void set(int,java.lang.String) -> JtIb
    void setLines(react.glang.GList) -> IVru
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> equa
    void addLine(java.lang.String) -> pYFY
    void clearLines() -> CgYU
    void removeViewer(org.bukkit.entity.Player) -> ejFV
    react.glang.GList getViewers() -> aUYw
    boolean isViewing(org.bukkit.entity.Player) -> PJfj
    void update() -> update
react.slate.SlateUtil -> dxSh:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> upxS
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> GkTp
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> dnqv
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> JtIb
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> KUIb
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> dnqv
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> dnqv
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> JtIb
    186:196:java.lang.String convertJSON(java.lang.String) -> xWki
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> JtIb
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> dnqv
react.surge.Main -> baLV:
    react.glang.GList plugins -> PURy
    react.glang.GMap pluginInstances -> PLbR
    react.glang.GList controllerSet -> giVo
    react.glang.GMap anchors -> huJw
    react.glang.GList classes -> mQUn
    java.lang.reflect.Field nsField -> THMk
    java.lang.reflect.Field thField -> lyGA
    react.glang.GList tracks -> ECrL
    long nsf -> Ypng
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> EBkP
    90:109:long getNanoSync() -> rEkt
    114:115:void requestResetNanos() -> BtvV
    119:127:void requestReload() -> pixy
    131:134:void requestReload(java.lang.Runnable) -> KUIb
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> dnqv
    201:218:void onStop() -> sbbN
    224:224:void onPostInit() -> XdUb
    230:230:void onPreInit() -> GtGL
    234:245:void shutDownAmps() -> RAAi
    249:458:void initializeAmps() -> cldu
    463:504:void doScan() -> nJaJ
    508:530:void scanForPoolDefiners() -> DbLf
    534:550:void scanForRawEvents() -> MlgD
    554:570:void scanForDynamicTrack() -> rEkf
    574:595:void scanForAmps() -> ThjP
    600:611:void onTick() -> ggbS
react.surge.Main$1 -> baLV$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> fBck:
    react.surge.control.AmpedPlugin plugin -> AYgS
    boolean connected -> connected
    int masterTask -> RuLd
    17:21:void <init>(react.surge.control.AmpedPlugin) -> <init>
    25:25:react.surge.control.AmpedPlugin getPluginInstance() -> iCau
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> Puoc
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> dnqv
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> dnqv
    113:114:void stopTask(int) -> SvUf
    57:57:void access$0(react.surge.PluginAmp) -> dnqv
react.surge.PluginAmp$1 -> fBck$1:
    react.surge.PluginAmp this$0 -> rrFo
    1:37:void <init>(react.surge.PluginAmp) -> <init>
    42:44:void run() -> run
react.surge.PluginAmp$2 -> fBck$2:
    react.surge.PluginAmp this$0 -> rrFo
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:53:void run() -> run
react.surge.Surge -> Btrr:
    react.surge.PluginAmp amp -> ECoq
    react.glang.GList tickComponents -> iUiM
    react.glang.GList atickComponents -> sJUR
    react.surge.sched.TaskManager taskmgr -> mYeI
    react.surge.hotload.HotloadManager hotloadmgr -> kJnB
    java.lang.Thread mainThread -> lNRA
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> dnqv
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> KfMa
    44:44:java.io.File folder() -> DXxe
    49:51:java.io.File getPluginJarFile() -> cmEJ
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> XuAl
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> HCbi
    74:74:react.glang.GList getTickComponents() -> yuTS
    79:79:react.glang.GList getAsyncTickComponents() -> jNuE
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> dnqv
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> JtIb
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> dnqv
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> TWfr
    126:126:boolean hasAmp() -> HUFA
    131:131:react.surge.PluginAmp getAmp() -> mrQk
    136:136:react.surge.sched.TaskManager getTaskManager() -> MuVW
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> GYrQ
react.surge.cluster.Cluster -> piry:
    react.surge.cluster.ClusterType type -> tDgM
    java.lang.Object t -> WrjE
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> vAUp
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> jqSs:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> APMd:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> xGWt:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> yAie:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> eXsS:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> TiEj:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> NxWq:
    react.surge.cluster.ClusterType INT -> tUiG
    react.surge.cluster.ClusterType BOOLEAN -> XmjU
    react.surge.cluster.ClusterType STRING -> fDNu
    react.surge.cluster.ClusterType STRING_LIST -> uimU
    react.surge.cluster.ClusterType DOUBLE -> brwI
    react.surge.cluster.ClusterType LONG -> qToP
    react.surge.cluster.ClusterType[] ENUM$VALUES -> losS
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> nRob:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> vvAf
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> dnqv
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> dnqv
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> BmHL
react.surge.cluster.ConfigurationDataOutput -> Jkjm:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> JtIb
react.surge.cluster.DataCluster -> TqXj:
    react.glang.GMap clusters -> gXSf
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> prhj
    29:33:void fromJson(react.json.JSONObject) -> jqEQ
    37:44:react.json.JSONObject toJson() -> nuSo
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> qJwc
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> dnqv
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> ndBI
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> vcFN
    194:195:void set(java.lang.String,int) -> jqEQ
    199:200:void set(java.lang.String,boolean) -> KUIb
    204:205:void set(java.lang.String,double) -> KUIb
    209:210:void set(java.lang.String,long) -> KUIb
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> dnqv
react.surge.cluster.ICluster -> KoNu:
    react.surge.cluster.ClusterType getType() -> vAUp
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> DbJU:
react.surge.cluster.IDataInput -> SLRd:
    react.surge.cluster.DataCluster read(java.io.File) -> KUIb
react.surge.cluster.IDataOutput -> uiFj:
    void write(react.surge.cluster.DataCluster,java.io.File) -> dnqv
react.surge.cluster.Key -> XKAT:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> kJGf:
    int value() -> value
react.surge.cluster.KeyStore -> GsdI:
react.surge.cluster.ReflectedConfigurationException -> jiFl:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> pbGU:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> KUIb
react.surge.cluster.YamlDataOutput -> wLgu:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> dnqv
react.surge.collection.GSound -> kbxG:
    java.lang.String sound -> VouY
    org.bukkit.Sound iSound -> VVdA
    java.lang.Float volume -> XnKt
    java.lang.Float pitch -> hBDr
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> IVtE
    61:72:void play(org.bukkit.Location) -> jqEQ
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> dnqv
    93:93:java.lang.String getSound() -> WOoP
    98:99:void setSound(java.lang.String) -> SvUf
    103:103:org.bukkit.Sound getiSound() -> GQaj
    108:109:void setiSound(org.bukkit.Sound) -> dnqv
    113:113:java.lang.Float getVolume() -> hcAi
    118:119:void setVolume(java.lang.Float) -> dnqv
    123:123:java.lang.Float getPitch() -> VoOu
    128:129:void setPitch(java.lang.Float) -> JtIb
react.surge.control.AmpedPlugin -> HvgP:
    react.glang.GList controllers -> bHdU
    react.gconcurrent.ParallelPoolManager pp -> grGF
    react.surge.server.CoreTickThread ctt -> XBwB
    24:50:void <init>() -> <init>
    void doScan() -> nJaJ
    long getNanoSync() -> rEkt
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:97:void onDisable() -> onDisable
    102:102:react.glang.GList getControllers() -> INwM
    108:109:void registerController(react.surge.control.IController) -> dnqv
    114:125:void onTick() -> ggbS
    130:130:java.lang.String getTickName() -> GkHI
    136:136:react.gconcurrent.ParallelPoolManager getThreadPool() -> SLTU
    142:257:void destroyOldThreads() -> fTJn
    void onControllerRegistry() -> EBkP
    void onStart(react.surge.util.Protocol) -> dnqv
    void onStop() -> sbbN
    void onPostInit() -> XdUb
    void onPreInit() -> GtGL
react.surge.control.AmpedPlugin$1 -> HvgP$1:
    react.surge.control.AmpedPlugin this$0 -> cLGp
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> AaHl
react.surge.control.AmpedPlugin$2 -> HvgP$2:
    react.surge.control.AmpedPlugin this$0 -> cLGp
    1:155:void <init>(react.surge.control.AmpedPlugin) -> <init>
    160:250:void run() -> run
react.surge.control.Control -> tfBp:
react.surge.control.Controller -> qCFw:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> FhQE:
react.surge.control.Enable -> BAnw:
react.surge.control.IController -> XBPW:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> Aqpf:
react.surge.control.Plugin -> DHXN:
react.surge.control.SurgePlugin -> RcCN:
    void onStart(react.surge.util.Protocol) -> dnqv
    void onStop() -> sbbN
    void onPostInit() -> XdUb
    void onPreInit() -> GtGL
    void onControllerRegistry() -> EBkP
    void registerController(react.surge.control.IController) -> dnqv
    react.glang.GList getControllers() -> INwM
    react.gconcurrent.ParallelPoolManager getThreadPool() -> SLTU
react.surge.hotload.HotloadManager -> UlKg:
    react.glang.GMap filemods -> oFXo
    react.glang.GMap filesizes -> QqhA
    react.glang.GMap fileacts -> xPsC
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> dnqv
    35:38:void untrack(java.io.File) -> XuAl
    42:45:void untrackall() -> Jknp
    50:86:void onTick() -> ggbS
    91:91:java.lang.String getTickName() -> GkHI
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> dnqv
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> JtIb
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> KUIb
react.surge.hotload.HotloadManager$1 -> UlKg$1:
    react.surge.hotload.HotloadManager this$0 -> PwXU
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> yRnX:
    boolean init -> ymlS
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> Qyyt
    java.lang.Class IChatBaseComponent -> hBHc
    java.lang.Class ChatSerializer -> jiqI
    java.lang.Class PacketPlayOutPlayerInfo -> uGlj
    java.lang.Class PlayerInfoData -> DtUk
    java.lang.Class EnumPlayerInfoAction -> fnfT
    java.lang.Class GameProfile -> ifmi
    java.lang.Class EnumGamemode -> Kxid
    java.lang.Class TileEntitySkull -> ySyT
    java.lang.Class LoadingCache -> Sfnr
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> pjXG:
    react.surge.nms.NMSX bountifulAPI -> wFBx
    boolean useOldMethods -> sIwG
    java.lang.String nmsver -> Xmmt
    java.lang.Object eTimes -> PLcy
    java.lang.Object eTitle -> KVgP
    java.lang.Object eSubtitle -> kvEd
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> dnqv
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> IhXO
    75:89:java.lang.Class getCBClass(java.lang.String) -> ndAQ
    96:104:java.lang.Object serializeChat(java.lang.String) -> DPXC
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> JtIb
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> dnqv
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> hQcJ
    151:151:java.lang.String craftPackage() -> bick
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> dnqv
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> dnqv
    197:207:java.lang.Class getNMSClass(java.lang.String) -> JRIY
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> dnqv
    279:280:void clearTitle(org.bukkit.entity.Player) -> HeQT
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> JtIb
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> dnqv
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> dnqv
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> NwgX
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> vcFN
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> wDFX
    434:447:int ping(org.bukkit.entity.Player) -> KUHd
react.surge.nms.NMSX$1 -> pjXG$1:
    org.bukkit.entity.Player val$player -> BCNp
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> pjXG$2:
    org.bukkit.entity.Player val$player -> BCNp
    java.lang.String val$message -> QrKf
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> rMyR:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> JIlN
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> dnqv
    68:82:void clearTitle(org.bukkit.entity.Player) -> HeQT
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> dnqv
react.surge.nms.PacketUtil$V -> rMyR$dnqv:
    react.surge.nms.PacketUtil$V R17 -> PoHf
    react.surge.nms.PacketUtil$V R18 -> Nybp
    react.surge.nms.PacketUtil$V R19 -> vKPQ
    react.surge.nms.PacketUtil$V R111 -> rPDw
    react.surge.nms.PacketUtil$V R110 -> uHLk
    react.surge.nms.PacketUtil$V R112 -> UmTi
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> bbYD
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> YDqS:
    java.lang.String title -> title
    java.lang.String subTitle -> ChaD
    java.lang.String action -> action
    java.lang.Integer fadeIn -> PCrN
    java.lang.Integer fadeOut -> TrbM
    java.lang.Integer stayTime -> FWvv
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> xhiv
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> RREG
    79:80:void setSubTitle(java.lang.String) -> eGbk
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> inYH
    99:100:void setFadeIn(java.lang.Integer) -> KUIb
    104:104:java.lang.Integer getFadeOut() -> WYDP
    109:110:void setFadeOut(java.lang.Integer) -> XuAl
    114:114:java.lang.Integer getStayTime() -> anqO
    119:120:void setStayTime(java.lang.Integer) -> jqEQ
react.surge.nms.VersionBukkit -> imsC:
    react.surge.nms.VersionBukkit VU -> GIyH
    react.surge.nms.VersionBukkit V7 -> aWFO
    react.surge.nms.VersionBukkit V8 -> iDhq
    react.surge.nms.VersionBukkit V9 -> aEbw
    react.surge.nms.VersionBukkit V11 -> qMAe
    react.surge.nms.VersionBukkit V111 -> PLbx
    react.surge.nms.VersionBukkit V112 -> QiXq
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> PfVR
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> afaA
    27:32:boolean uc() -> SDFb
    37:67:react.surge.nms.VersionBukkit get() -> dMgC
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> fdhr:
    void burst(java.lang.Object) -> equa
    void setTimeLock(double) -> PJfj
    double getEstimatedTimeUse() -> LrVX
    int flush() -> WaTN
    int flush(react.gbench.Profiler) -> dnqv
    void queue(java.lang.Object) -> ejFV
    void queue(java.util.List) -> KUIb
    void queue(java.lang.Object[]) -> dnqv
react.surge.sched.ICancellable -> fdiS:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> MKAR:
    void onTick() -> ggbS
    java.lang.String getTickName() -> GkHI
react.surge.sched.ITask -> Ukhv:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> cArW
    java.lang.String getName() -> getName
    double getComputeTime() -> vlNP
    double getTotalComputeTime() -> sjtB
    double getActiveTime() -> jiKL
    boolean hasCompleted() -> rhRC
react.surge.sched.Task -> kJFf:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> dyaB
    double computeTime -> Pvvm
    double totalComputeTime -> bkJS
    double activeTime -> TaaM
    boolean completed -> completed
    react.gbench.Profiler profiler -> Ypom
    react.gbench.Profiler activeProfiler -> grKp
    int ticks -> fnhP
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> XuAl
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> cArW
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> vlNP
    150:150:boolean hasCompleted() -> rhRC
    156:156:double getTotalComputeTime() -> sjtB
    162:162:double getActiveTime() -> jiKL
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> dnqv
    15:15:void access$1(react.surge.sched.Task,boolean) -> dnqv
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> JtIb
    14:14:void access$3(react.surge.sched.Task,double) -> dnqv
    12:12:void access$4(react.surge.sched.Task,double) -> JtIb
    14:14:double access$5(react.surge.sched.Task) -> KUIb
    13:13:void access$6(react.surge.sched.Task,double) -> KUIb
    13:13:double access$7(react.surge.sched.Task) -> XuAl
    12:12:double access$8(react.surge.sched.Task) -> jqEQ
react.surge.sched.Task$1 -> kJFf$1:
    react.surge.sched.Task this$0 -> diBk
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> kJFf$2:
    react.surge.sched.Task this$0 -> diBk
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> kJFf$3:
    react.surge.sched.Task this$0 -> diBk
    int val$total -> HDnT
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> aTyH:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> dyaB
    double computeTime -> Pvvm
    double totalComputeTime -> bkJS
    double activeTime -> TaaM
    boolean completed -> completed
    react.gbench.Profiler profiler -> Ypom
    react.gbench.Profiler activeProfiler -> grKp
    int ticks -> fnhP
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> XuAl
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> cArW
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> vlNP
    101:101:boolean hasCompleted() -> rhRC
    107:107:double getTotalComputeTime() -> sjtB
    113:113:double getActiveTime() -> jiKL
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> dnqv
    12:12:void access$1(react.surge.sched.TaskLater,double) -> dnqv
    13:13:double access$2(react.surge.sched.TaskLater) -> JtIb
    12:12:double access$3(react.surge.sched.TaskLater) -> KUIb
    13:13:void access$4(react.surge.sched.TaskLater,double) -> JtIb
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> XuAl
    14:14:double access$6(react.surge.sched.TaskLater) -> jqEQ
    14:14:void access$7(react.surge.sched.TaskLater,double) -> KUIb
react.surge.sched.TaskLater$1 -> aTyH$1:
    react.surge.sched.TaskLater this$0 -> TXrQ
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> docx:
    react.glang.GList tasks -> paxv
    react.glang.GMap taskProfiles -> TYRo
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> dnqv
    25:35:void onTick() -> ggbS
    39:40:void putFinishingTask(react.surge.sched.ITask) -> JtIb
    44:53:void putTask(react.surge.sched.ITask) -> KUIb
    58:58:java.lang.String getTickName() -> GkHI
    63:63:react.glang.GList getTasks() -> SKvR
    68:68:react.glang.GMap getTaskProfiles() -> DanC
react.surge.sched.TaskProfile -> AjBh:
    double activeTime -> TaaM
    double computeTickTime -> ubBf
    double computeTime -> Pvvm
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> jiKL
    23:24:void setActiveTime(double) -> IVtE
    28:28:double getComputeTickTime() -> cuXb
    33:34:void setComputeTickTime(double) -> HeQT
    38:38:double getComputeTime() -> vlNP
    43:44:void setComputeTime(double) -> KUHd
react.surge.server.AsyncTick -> iLOl:
react.surge.server.CPS -> xOjY:
    react.glang.GMap keys -> jQBT
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> EJhH
    46:99:void scan() -> WPRt
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> KUIb
react.surge.server.CoreTickThread -> gEjG:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> pPcc:
    long memoryFree -> KEgV
    long memoryUsed -> HxTV
    long memoryMax -> lpXu
    long lastMemoryUsed -> xjkE
    long memoryUsedAfterGC -> vvGH
    long allocated -> vSbq
    long collected -> YqSk
    long collections -> kmVc
    long sms -> HfrS
    long memoryAllocatedPerTick -> qfWL
    long memoryCollectedPerTick -> uHPF
    long memoryFullyAllocatedPerTick -> IbCn
    long mah -> bQXj
    long mahs -> mPvv
    22:39:void <init>() -> <init>
    void onAllocationSet() -> LPSj
    46:98:void run() -> run
    102:102:long getMemoryFree() -> yBRM
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> JtaS
    117:117:long getLastMemoryUsed() -> kIiy
    122:122:long getMemoryUsedAfterGC() -> NfyE
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> xOnm
    137:137:long getCollections() -> RkVA
    142:142:long getSms() -> PvQN
    147:147:long getMemoryAllocatedPerTick() -> BKFv
    152:152:long getMemoryCollectedPerTick() -> uyiv
    157:157:long getMemoryFullyAllocatedPerTick() -> WXbP
    162:162:long getMah() -> sIQM
    167:167:long getMahs() -> vkkt
react.surge.server.SuperSampler -> Fxoq:
    react.gmath.Average ticksPerSecondL -> pcRd
    react.gmath.Average tickTimeL -> WIJR
    react.gmath.Average mahL -> YNoT
    double ticksPerSecond -> MvMw
    double ticksPerSecondRaw -> kBaS
    double tickTime -> eAQK
    double tickTimeRaw -> wVds
    boolean running -> running
    boolean frozen -> RdNX
    double tickUtilizationRaw -> sJXi
    double tickUtilization -> tELE
    double leftoverTickTime -> wxhO
    long memoryUse -> ELiB
    long memoryAllocated -> NiFO
    long memoryCollected -> ubDk
    long mahs -> mPvv
    int totalChunks -> FPLg
    int totalEntities -> Pnjo
    int totalDrops -> jPbs
    int totalTiles -> HVSN
    int totalLiving -> qUXL
    int chunksLoaded -> jadj
    int chunksUnloaded -> gqnA
    react.surge.server.WorldMonitor worldMonitor -> hcnT
    react.surge.server.TPSMonitor tpsMonitor -> cfAx
    react.surge.server.MemoryMonitor memoryMonitor -> kvIe
    java.lang.StackTraceElement[] lockStack -> qMGL
    react.glang.GMap spikes -> GbxK
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> ggbS
    154:154:java.lang.String getTickName() -> GkHI
    159:159:react.gmath.Average getTicksPerSecondL() -> NMfu
    164:164:double getTicksPerSecond() -> RkME
    169:169:double getTicksPerSecondRaw() -> LrUY
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> LPQy
    184:184:react.gmath.Average getTickTimeL() -> dUwE
    189:189:double getTickTime() -> EvRV
    194:194:double getTickTimeRaw() -> XRsx
    199:199:double getTickUtilizationRaw() -> SLUl
    204:204:double getTickUtilization() -> DrnW
    209:209:double getLeftoverTickTime() -> tvgS
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> tmvL
    219:219:long getMemoryUse() -> vlLa
    224:224:long getMemoryAllocated() -> GHrm
    229:229:long getMemoryCollected() -> Ihmp
    234:234:react.gmath.Average getMahL() -> EeRs
    239:239:long getMahs() -> vkkt
    244:244:int getTotalChunks() -> ndWx
    249:249:int getTotalEntities() -> ntyN
    254:254:int getTotalDrops() -> SfKg
    259:259:int getTotalTiles() -> cRuj
    264:264:int getTotalLiving() -> vkoR
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> GHvF
    274:274:int getChunksLoaded() -> skWD
    279:279:int getChunksUnloaded() -> biey
    284:285:void setTicksPerSecondL(react.gmath.Average) -> dnqv
    289:290:void setTickTimeL(react.gmath.Average) -> JtIb
    294:295:void setMahL(react.gmath.Average) -> KUIb
    299:300:void setTicksPerSecond(double) -> PSXJ
    304:305:void setTicksPerSecondRaw(double) -> xhiv
    309:310:void setTickTime(double) -> WiMJ
    314:315:void setTickTimeRaw(double) -> pGaH
    319:320:void setRunning(boolean) -> vABY
    324:325:void setTickUtilizationRaw(double) -> DrWU
    329:330:void setTickUtilization(double) -> oLnO
    334:335:void setLeftoverTickTime(double) -> Qoju
    339:340:void setMemoryUse(long) -> PJfj
    344:345:void setMemoryAllocated(long) -> IVtE
    349:350:void setMemoryCollected(long) -> HeQT
    354:355:void setMahs(long) -> KUHd
    359:360:void setTotalChunks(int) -> IhXO
    364:365:void setTotalEntities(int) -> ndAQ
    369:370:void setTotalDrops(int) -> DPXC
    374:375:void setTotalTiles(int) -> JRIY
    379:380:void setTotalLiving(int) -> NwgX
    384:385:void setChunksLoaded(int) -> eGbk
    389:390:void setChunksUnloaded(int) -> EJhH
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> dnqv
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> dnqv
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> dnqv
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> Qgto
    419:419:react.glang.GMap getSpikes() -> gotv
    31:31:void access$0(react.surge.server.SuperSampler,int) -> dnqv
    33:33:void access$1(react.surge.server.SuperSampler,int) -> JtIb
    34:34:void access$2(react.surge.server.SuperSampler,int) -> KUIb
    32:32:void access$3(react.surge.server.SuperSampler,int) -> XuAl
    35:35:void access$4(react.surge.server.SuperSampler,int) -> jqEQ
    36:36:void access$5(react.surge.server.SuperSampler,int) -> vcFN
    37:37:void access$6(react.surge.server.SuperSampler,int) -> TFQb
    19:19:void access$7(react.surge.server.SuperSampler,double) -> dnqv
    21:21:void access$8(react.surge.server.SuperSampler,double) -> JtIb
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> dnqv
    19:19:double access$10(react.surge.server.SuperSampler) -> JtIb
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> KUIb
    21:21:double access$12(react.surge.server.SuperSampler) -> XuAl
    18:18:void access$13(react.surge.server.SuperSampler,double) -> KUIb
    20:20:void access$14(react.surge.server.SuperSampler,double) -> XuAl
    24:24:void access$15(react.surge.server.SuperSampler,double) -> jqEQ
    20:20:double access$16(react.surge.server.SuperSampler) -> jqEQ
    25:25:void access$17(react.surge.server.SuperSampler,double) -> vcFN
    25:25:double access$18(react.surge.server.SuperSampler) -> vcFN
    26:26:void access$19(react.surge.server.SuperSampler,double) -> TFQb
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> dnqv
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> TFQb
    27:27:void access$22(react.surge.server.SuperSampler,long) -> dnqv
    28:28:void access$23(react.surge.server.SuperSampler,long) -> JtIb
    29:29:void access$24(react.surge.server.SuperSampler,long) -> KUIb
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> PmIl
    30:30:void access$26(react.surge.server.SuperSampler,long) -> XuAl
react.surge.server.SuperSampler$1 -> Fxoq$1:
    react.surge.server.SuperSampler this$0 -> FaOK
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> dnqv
react.surge.server.SuperSampler$2 -> Fxoq$2:
    react.surge.server.SuperSampler this$0 -> FaOK
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> fdqH
    106:107:void onSpike() -> rFQE
react.surge.server.SuperSampler$3 -> Fxoq$3:
    react.surge.server.SuperSampler this$0 -> FaOK
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> LPSj
react.surge.server.TPSMonitor -> YxWU:
    double tickTimeMS -> wVhX
    double rawTicksPerSecond -> QOkj
    react.gbench.Profiler tickProfiler -> BwDR
    react.gbench.Profiler tickTimeProfiler -> EDXu
    boolean ticked -> FaLs
    java.lang.Thread$State lastState -> TPbi
    double actualTickTimeMS -> qUWE
    double ltt -> tgPm
    long lastTick -> maaJ
    boolean frozen -> RdNX
    java.lang.StackTraceElement[] lockedStack -> igQj
    double lmsx -> WYlJ
    23:40:void <init>() -> <init>
    void onTicked() -> fdqH
    void onSpike() -> rFQE
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> dnqv
    160:160:double getTickTimeMS() -> Kweu
    165:165:double getRawTicksPerSecond() -> maTQ
    170:170:react.gbench.Profiler getTickProfiler() -> Ornn
    175:175:boolean isTicked() -> LPSs
    180:181:void markTick() -> lVAQ
    185:185:react.gbench.Profiler getTickTimeProfiler() -> hHrk
    190:190:java.lang.Thread$State getLastState() -> wnpw
    195:195:double getActualTickTimeMS() -> AGdq
    200:200:double getLtt() -> YNHy
    205:205:long getLastTick() -> bhqM
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> UlPq
react.surge.server.WorldMonitor -> vtYJ:
    boolean chunksChanged -> xYkE
    boolean dropChanged -> Bebp
    boolean tileChanged -> GRmp
    boolean livingChanged -> AjpW
    boolean totalChanged -> ayMP
    boolean updated -> IjVm
    int totalChunks -> FPLg
    int totalDrops -> jPbs
    int totalTiles -> HVSN
    int totalLiving -> qUXL
    int totalEntities -> Pnjo
    int chunksLoaded -> jadj
    int chunksUnloaded -> gqnA
    long ms -> DXxe
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> dnqv
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> JtIb
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> dnqv
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> dnqv
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> dnqv
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> dnqv
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> dnqv
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> dnqv
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> dnqv
    130:131:void doUpdate() -> qBka
    135:186:void sample() -> KfMa
    190:196:void sampleTotalCount() -> LPUG
    200:206:void sampleLivingCount() -> pGyC
    210:219:void sampleTileCount() -> jXJc
    223:229:void sampleDropCount() -> vJKX
    233:239:void sampleChunkCount() -> OsPf
react.surge.text.PhantomSpinner -> HmuH:
    react.surge.text.ProgressSpinner s -> eIbr
    react.surge.text.ProgressSpinner c -> cvbA
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> ndQC:
    java.lang.String[] chars -> AYnX
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> RSOH
    react.surge.text.ProgressSpinner NETWORK -> agjT
    react.surge.text.ProgressSpinner CIRCLES -> uGoh
    react.surge.text.ProgressSpinner RANDOMS -> SMcO
    react.surge.text.ProgressSpinner MERGERS -> jjWg
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> ejaF
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> aUYw:
    int value() -> value
react.surge.util.Area -> CgYU:
    org.bukkit.Location location -> jPeQ
    java.lang.Double radius -> iMbS
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> dnqv
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> BBXr
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> vcFN
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> TFQb
    109:109:boolean isWithin(org.bukkit.Location) -> PmIl
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> XuAl
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> dnqv
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> SCjB
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> UIoq
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> wDFX
    257:257:java.lang.Double getRadius() -> lgDi
    268:269:void setRadius(java.lang.Double) -> KUIb
    278:283:org.bukkit.Location random() -> AOvT
react.surge.util.Axis -> upxS:
    react.surge.util.Axis X -> XwFS
    react.surge.util.Axis Y -> VFKi
    react.surge.util.Axis Z -> NGEX
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> NOVA
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> FFVI
    29:29:org.bukkit.util.Vector negative() -> hAEo
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> GkTp:
    react.surge.util.BlastResistance BARRIER -> NXGJ
    react.surge.util.BlastResistance BEDROCK -> kvKx
    react.surge.util.BlastResistance COMMAND -> opun
    react.surge.util.BlastResistance ENDER_PORTAL -> iDps
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> jaer
    react.surge.util.BlastResistance ANVIL -> uPcv
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> wMxp
    react.surge.util.BlastResistance OBSIDIAN -> dygf
    react.surge.util.BlastResistance ENDER_CHEST -> Udjn
    react.surge.util.BlastResistance WATER -> jHUC
    react.surge.util.BlastResistance LAVA -> eQuM
    react.surge.util.BlastResistance STATIONARY_WATER -> lFJL
    react.surge.util.BlastResistance DRAGON_EGG -> XvdL
    react.surge.util.BlastResistance ENDER_STONE -> Nheu
    react.surge.util.BlastResistance COAL_BLOCK -> pIcl
    react.surge.util.BlastResistance DIAMOND_BLOCK -> NXEn
    react.surge.util.BlastResistance EMERALD_BLOCK -> DIgY
    react.surge.util.BlastResistance GOLD_BLOCK -> pkfx
    react.surge.util.BlastResistance IRON_BLOCK -> iNAg
    react.surge.util.BlastResistance REDSTONE_BLOCK -> lxmO
    react.surge.util.BlastResistance BRICK -> xYku
    react.surge.util.BlastResistance BRICK_STAIRS -> aWLF
    react.surge.util.BlastResistance HARD_CLAY -> yLNa
    react.surge.util.BlastResistance STONE -> CFeC
    react.surge.util.BlastResistance SMOOTH_BRICK -> smAR
    react.surge.util.BlastResistance SMOOTH_STAIRS -> BnXH
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> elLP
    react.surge.util.BlastResistance STONE_SLAB2 -> cnUt
    react.surge.util.BlastResistance IRON_DOOR -> kvNY
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> OIiR
    react.surge.util.BlastResistance IRON_TRAPDOOR -> XUEO
    react.surge.util.BlastResistance MOB_SPAWNER -> jYYI
    react.surge.util.BlastResistance WEB -> JTMU
    react.surge.util.BlastResistance DISPENSER -> jPgB
    react.surge.util.BlastResistance DROPPER -> Nyjs
    react.surge.util.BlastResistance FURNACE -> ebyu
    react.surge.util.BlastResistance BURNING_FURNACE -> LtFQ
    react.surge.util.BlastResistance BEACON -> jsKJ
    react.surge.util.BlastResistance COAL_ORE -> BTdX
    react.surge.util.BlastResistance COCOA -> hmDi
    react.surge.util.BlastResistance DIAMOND_ORE -> ujYQ
    react.surge.util.BlastResistance EMERALD_ORE -> foNq
    react.surge.util.BlastResistance FENCE -> TrlI
    react.surge.util.BlastResistance FENCE_GATE -> nmtc
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> Bvft
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> hmDl
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> YXIA
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> PnpJ
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> sAnj
    react.surge.util.BlastResistance ACACIA_FENCE -> OJKJ
    react.surge.util.BlastResistance BIRCH_FENCE -> YGFA
    react.surge.util.BlastResistance DARK_OAK_FENCE -> xYoA
    react.surge.util.BlastResistance SPRUCE_FENCE -> UJyF
    react.surge.util.BlastResistance JUNGLE_FENCE -> DklJ
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> ELlP
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> mINk
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> KyRS
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> GBQb
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> cKqL
    react.surge.util.BlastResistance QUARTZ_STAIRS -> SgWM
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> FqrV
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> toec
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> GuUt
    react.surge.util.BlastResistance WOOD_STAIRS -> yLPt
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> bkRc
    react.surge.util.BlastResistance ACACIA_DOOR -> wxnO
    react.surge.util.BlastResistance BIRCH_DOOR -> LQaW
    react.surge.util.BlastResistance DARK_OAK_DOOR -> vBgI
    react.surge.util.BlastResistance SPRUCE_DOOR -> GRrc
    react.surge.util.BlastResistance JUNGLE_DOOR -> Befd
    react.surge.util.BlastResistance GOLD_ORE -> gYCA
    react.surge.util.BlastResistance HOPPER -> tgWx
    react.surge.util.BlastResistance IRON_ORE -> FjFE
    react.surge.util.BlastResistance LAPIS_BLOCK -> cmwW
    react.surge.util.BlastResistance LAPIS_ORE -> VFPN
    react.surge.util.BlastResistance QUARTZ_ORE -> RlgM
    react.surge.util.BlastResistance REDSTONE_ORE -> lFNn
    react.surge.util.BlastResistance TRAP_DOOR -> lpbW
    react.surge.util.BlastResistance WOOD -> YNwd
    react.surge.util.BlastResistance CHEST -> fMMh
    react.surge.util.BlastResistance TRAPPED_CHEST -> ipKB
    react.surge.util.BlastResistance WORKBENCH -> jQIb
    react.surge.util.BlastResistance CAULDRON -> nvhG
    react.surge.util.BlastResistance LOG -> btGP
    react.surge.util.BlastResistance LOG_2 -> EwdJ
    react.surge.util.BlastResistance BOOKSHELF -> mcDW
    react.surge.util.BlastResistance BANNER -> HUxj
    react.surge.util.BlastResistance STANDING_BANNER -> CNxO
    react.surge.util.BlastResistance WALL_BANNER -> hJbm
    react.surge.util.BlastResistance JACK_O_LANTERN -> Enrh
    react.surge.util.BlastResistance MELON_BLOCK -> jYYx
    react.surge.util.BlastResistance SKULL -> cCct
    react.surge.util.BlastResistance PUMPKIN -> lWNv
    react.surge.util.BlastResistance SIGN -> LbdU
    react.surge.util.BlastResistance SIGN_POST -> AIUG
    react.surge.util.BlastResistance WALL_SIGN -> MfGn
    react.surge.util.BlastResistance QUARTZ_BLOCK -> IsNH
    react.surge.util.BlastResistance NOTE_BLOCK -> gaRO
    react.surge.util.BlastResistance RED_SANDSTONE -> cCbi
    react.surge.util.BlastResistance SANDSTONE -> yeeO
    react.surge.util.BlastResistance WOOL -> oWgB
    react.surge.util.BlastResistance MONSTER_EGG -> BUHc
    react.surge.util.BlastResistance RAILS -> Irls
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> TbKq
    react.surge.util.BlastResistance DETECTOR_RAIL -> HpKW
    react.surge.util.BlastResistance POWERED_RAIL -> jPhJ
    react.surge.util.BlastResistance CLAY -> mRAd
    react.surge.util.BlastResistance DIRT -> VWPe
    react.surge.util.BlastResistance GRASS -> oNyK
    react.surge.util.BlastResistance GRAVEL -> qwbm
    react.surge.util.BlastResistance SPONGE -> MUJD
    react.surge.util.BlastResistance BREWING_STAND -> OIlt
    react.surge.util.BlastResistance STONE_BUTTON -> jbMm
    react.surge.util.BlastResistance WOOD_BUTTON -> dGJK
    react.surge.util.BlastResistance CAKE_BLOCK -> FPTu
    react.surge.util.BlastResistance ICE -> knAv
    react.surge.util.BlastResistance PACKED_ICE -> FjHN
    react.surge.util.BlastResistance LEVER -> rHCE
    react.surge.util.BlastResistance MYCEL -> uakx
    react.surge.util.BlastResistance PISTON_BASE -> mQca
    react.surge.util.BlastResistance PISTON_EXTENSION -> wqCo
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> uGxh
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> msgL
    react.surge.util.BlastResistance GOLD_PLATE -> bshM
    react.surge.util.BlastResistance IRON_PLATE -> vCLi
    react.surge.util.BlastResistance STONE_PLATE -> QGbQ
    react.surge.util.BlastResistance WOOD_PLATE -> jHYn
    react.surge.util.BlastResistance SAND -> pJKa
    react.surge.util.BlastResistance SOUL_SAND -> jrmY
    react.surge.util.BlastResistance CACTUS -> jbMM
    react.surge.util.BlastResistance LADDER -> qnqP
    react.surge.util.BlastResistance NETHERRACK -> KVqn
    react.surge.util.BlastResistance GLASS -> TQKx
    react.surge.util.BlastResistance THIN_GLASS -> dylY
    react.surge.util.BlastResistance STAINED_GLASS -> qMNk
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> TbNI
    react.surge.util.BlastResistance GLOWSTONE -> Lbey
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> cLUm
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> WbfU
    react.surge.util.BlastResistance SEA_LANTERN -> lyTM
    react.surge.util.BlastResistance BED_BLOCK -> nfHV
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> FHCw
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> BfKm
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> RdXe
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> kTMl
    react.surge.util.BlastResistance LEAVES -> nvhm
    react.surge.util.BlastResistance LEAVES_2 -> Wbeq
    react.surge.util.BlastResistance SNOW -> WkVy
    int br -> GSXJ
    react.surge.util.BlastResistance[] ENUM$VALUES -> LAFs
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> ekAt
    175:190:int get(org.bukkit.Material) -> dnqv
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> EBkP:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> vcFN
react.surge.util.C -> rEkt:
    react.surge.util.C BLACK -> UeTM
    react.surge.util.C DARK_BLUE -> foVA
    react.surge.util.C DARK_GREEN -> PLqu
    react.surge.util.C DARK_AQUA -> iNKa
    react.surge.util.C DARK_RED -> RAwU
    react.surge.util.C DARK_PURPLE -> edAd
    react.surge.util.C GOLD -> qMRO
    react.surge.util.C GRAY -> Nypp
    react.surge.util.C DARK_GRAY -> VgwC
    react.surge.util.C BLUE -> XKye
    react.surge.util.C GREEN -> OdDK
    react.surge.util.C AQUA -> AbiL
    react.surge.util.C RED -> RAxD
    react.surge.util.C LIGHT_PURPLE -> EDcc
    react.surge.util.C YELLOW -> ubOK
    react.surge.util.C WHITE -> KWTk
    react.surge.util.C MAGIC -> QaVm
    react.surge.util.C BOLD -> CGOG
    react.surge.util.C STRIKETHROUGH -> sSVg
    react.surge.util.C UNDERLINE -> BenE
    react.surge.util.C ITALIC -> cfKN
    react.surge.util.C RESET -> dhmL
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> jQNC
    char code -> wpdd
    boolean isFormat -> qxEY
    java.lang.String toString -> gXeS
    java.util.Map BY_ID -> ywLE
    java.util.Map BY_CHAR -> LAGH
    java.util.Map dyeChatMap -> lNbD
    java.util.Map chatHexMap -> QrXu
    java.util.Map dyeHexMap -> JTRc
    int[] $SWITCH_TABLE$surge$util$C -> XfKm
    react.surge.util.C[] ENUM$VALUES -> FYGo
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> Xlkn
    378:378:java.lang.String hex() -> tfLC
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> PmIl
    434:442:react.surge.util.C getByChar(java.lang.String) -> uxtV
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> JtIb
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> dnqv
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> JtIb
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> KUIb
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> dweN
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> AyrD
    560:578:java.lang.String generateColorTable() -> JcbL
    588:588:org.bukkit.ChatColor chatColor() -> MAwG
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> TFQb
    632:679:byte getItemMeta() -> RkYd
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> jhnC
react.surge.util.C$1 -> rEkt$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> rEkt$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> rEkt$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> rEkt$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> rEkt$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> rEkt$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> rEkt$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> rEkt$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> rEkt$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> rEkt$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> rEkt$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> rEkt$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> rEkt$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> rEkt$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> rEkt$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> rEkt$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> rEkt$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> rEkt$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> rEkt$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> rEkt$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> rEkt$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> rEkt$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> BtvV:
    double number -> qVAd
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> gVYI
    23:25:react.surge.util.CDou add(double) -> OOrf
    30:32:react.surge.util.CDou sub(double) -> rohk
    37:37:double get() -> get
    42:48:void circ() -> fTPo
react.surge.util.CMD -> pixy:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> JSrF
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> ePmN
    51:53:void execute(org.bukkit.command.CommandSender) -> KUIb
    60:77:void execute() -> execute
react.surge.util.CNum -> sbbN:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> uxtV
    23:25:react.surge.util.CNum add(int) -> dweN
    30:32:react.surge.util.CNum sub(int) -> AyrD
    37:37:int get() -> get
    42:48:void circ() -> fTPo
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> Ywed
react.surge.util.Chunks -> XdUb:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> salA
    33:40:react.glang.GList getLoadedChunks() -> WGeA
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> JtIb
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> dnqv
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> dnqv
    98:98:boolean unload(org.bukkit.Chunk) -> HvSx
    114:124:int unload(react.glang.GList,boolean,boolean) -> dnqv
    138:138:int unload(react.glang.GList,boolean) -> dnqv
    150:150:int unload(react.glang.GList) -> WWkg
    166:166:boolean isLoaded(java.lang.String,int,int) -> dnqv
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> KUIb
    201:205:void load(react.glang.GList) -> vABY
react.surge.util.Cuboid -> GtGL:
    java.lang.String worldName -> QHEh
    int x1 -> iNMY
    int y1 -> DSDV
    int z1 -> OuGE
    int x2 -> hRya
    int y2 -> yfLy
    int z2 -> PxId
    int[] $SWITCH_TABLE$surge$util$Axis -> MUMf
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> wgve
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> dnqv
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> KUIb
    93:93:boolean hasPlayers() -> PeTB
    98:110:react.glang.GList getPlayers() -> kcMi
    115:166:react.glang.GList getEntities() -> PmdG
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> qRua
    287:287:org.bukkit.Location getLowerNE() -> cSXN
    298:298:org.bukkit.Location getUpperSW() -> ESqm
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> EBqA
    348:348:int getSizeY() -> DrrR
    358:358:int getSizeZ() -> ekAY
    368:368:int getLowerX() -> qdpj
    378:378:int getLowerY() -> yJeU
    388:388:int getLowerZ() -> pamj
    398:398:int getUpperX() -> Wqwt
    408:408:int getUpperY() -> iUMS
    418:418:int getUpperZ() -> IaBq
    428:438:org.bukkit.block.Block[] corners() -> Ojck
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> dnqv
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> JtIb
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> KUIb
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> XuAl
    546:546:boolean contains(int,int,int) -> jqEQ
    558:558:boolean contains(org.bukkit.block.Block) -> TFQb
    570:570:boolean contains(org.bukkit.Location) -> NLoy
    580:580:int volume() -> iDKf
    591:601:byte averageLightLevel() -> eQQN
    612:612:react.surge.util.Cuboid contract() -> mYHw
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> dnqv
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> JtIb
    708:715:boolean containsOnly(org.bukkit.Material) -> JtIb
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> dnqv
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> vcFN
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> dnqv
    786:800:java.util.List getChunks() -> hRIy
    815:819:void fill(int,byte) -> dnqv
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> rhXa
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> Emgi
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> cRyl
react.surge.util.Cuboid$1 -> GtGL$1:
    react.surge.util.Cuboid this$0 -> Vphr
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> NLoy
    1:1:java.lang.Object onAdapt(java.lang.Object) -> TFQb
react.surge.util.Cuboid$CuboidDirection -> GtGL$dnqv:
    react.surge.util.Cuboid$CuboidDirection North -> FHIS
    react.surge.util.Cuboid$CuboidDirection East -> mtLd
    react.surge.util.Cuboid$CuboidDirection South -> lgwX
    react.surge.util.Cuboid$CuboidDirection West -> Otej
    react.surge.util.Cuboid$CuboidDirection Up -> yekv
    react.surge.util.Cuboid$CuboidDirection Down -> VhXm
    react.surge.util.Cuboid$CuboidDirection Horizontal -> mRJB
    react.surge.util.Cuboid$CuboidDirection Vertical -> iNMg
    react.surge.util.Cuboid$CuboidDirection Both -> edDE
    react.surge.util.Cuboid$CuboidDirection Unknown -> gjIf
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> wgve
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> DRce
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> pIAB
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> cRyl
react.surge.util.Cuboid$CuboidIterator -> GtGL$JtIb:
    org.bukkit.World w -> IYbd
    int baseX -> pRaF
    int baseY -> PMVQ
    int baseZ -> lOFO
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> mRHp
    int sizeY -> ionY
    int sizeZ -> kBpL
    react.surge.util.Cuboid this$0 -> Vphr
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> RAAi:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> cldu:
    react.glang.GList buffer -> fEBo
    boolean dbg -> hcyq
    int kf -> KOGI
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> XuAl
    41:49:void l(java.lang.Object,java.lang.String) -> JtIb
    53:54:void s(java.lang.Object,java.lang.String) -> KUIb
    58:69:void cdb() -> tDKB
    73:79:void v(java.lang.Object,java.lang.String) -> XuAl
    83:84:void w(java.lang.Object,java.lang.String) -> jqEQ
    88:89:void f(java.lang.Object,java.lang.String) -> vcFN
    93:106:void l(java.lang.String) -> Ywed
    110:117:void s(java.lang.String) -> qRua
    121:135:void v(java.lang.String) -> WypA
    139:146:void w(java.lang.String) -> TVtO
    150:157:void f(java.lang.String) -> BIpL
react.surge.util.DMSRequire -> nJaJ:
    react.surge.util.DMSRequirement value() -> PeWT
react.surge.util.DMSRequirement -> DbLf:
    react.surge.util.DMSRequirement SQL -> rOtj
    react.surge.util.DMSRequirement[] ENUM$VALUES -> TjbL
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> MlgD:
    react.surge.util.Depend VAULT -> IkCf
    react.surge.util.Depend FAWE -> YGMm
    react.surge.util.Depend WORLDEDIT -> OJQb
    react.surge.util.Depend PROTOLIB -> hRxi
    react.surge.util.Depend CITIZENS -> JLCo
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> qUcY
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> rEkf:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> mXhE
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> ThjP:
    react.surge.util.DimensionFace X -> gqwp
    react.surge.util.DimensionFace Y -> lVsj
    react.surge.util.DimensionFace Z -> mcHw
    react.surge.util.DimensionFace[] ENUM$VALUES -> fMTA
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> iCau:
    react.surge.util.Direction U -> XvoF
    react.surge.util.Direction D -> SNMk
    react.surge.util.Direction N -> dqcd
    react.surge.util.Direction S -> NPCH
    react.surge.util.Direction E -> HFAH
    react.surge.util.Direction W -> bcMR
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> btOA
    int[] $SWITCH_TABLE$surge$util$Direction -> wOHJ
    react.surge.util.Direction[] ENUM$VALUES -> sJkN
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> dMlu
    61:61:int x() -> opOv
    66:66:int y() -> OYcQ
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> OICD
    81:81:react.glang.GList news() -> VxHn
    86:86:react.glang.GList udnews() -> xrYY
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> WiMJ
    115:147:react.surge.util.Direction fromByte(byte) -> PmIl
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> SULn
react.surge.util.DynamicConfiguration -> Puoc:
react.surge.util.DynamicTracker -> DXxe:
react.surge.util.Embedded -> cmEJ:
    react.glang.GList get() -> NNNO
    void add(java.lang.Object) -> add
react.surge.util.FU -> HCbi:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> dnqv
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> JtIb
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> jqEQ
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> vcFN
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> yuTS:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> PlkH
react.surge.util.Health -> jNuE:
    double hp -> sJjS
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> JAaN
    41:41:double getHearts() -> ieli
    51:51:double getHalfHearts() -> NpPw
    61:61:int getFlatHalfHearts() -> FVwS
react.surge.util.IO -> TWfr:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> HUFA:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> dnqv
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> dnqv
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> dnqv
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> dnqv
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> dnqv
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> JtIb
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> KUIb
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> XuAl
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> dnqv
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> dnqv
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> dnqv
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> dnqv
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> jqEQ
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> vcFN
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> TFQb
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> PmIl
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> wDFX
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> dnqv
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> NLoy
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> PSXJ
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> dnqv
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> dnqv
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> JtIb
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> dnqv
react.surge.util.MSound -> mrQk:
    react.surge.util.MSound AMBIENCE_CAVE -> hKLN
    react.surge.util.MSound AMBIENCE_RAIN -> VqMP
    react.surge.util.MSound AMBIENCE_THUNDER -> WsoR
    react.surge.util.MSound ANVIL_BREAK -> neoC
    react.surge.util.MSound ANVIL_LAND -> Xvqc
    react.surge.util.MSound ANVIL_USE -> txah
    react.surge.util.MSound ARROW_HIT -> Tjct
    react.surge.util.MSound BURP -> IQRl
    react.surge.util.MSound CHEST_CLOSE -> TIBT
    react.surge.util.MSound CHEST_OPEN -> YPAR
    react.surge.util.MSound CLICK -> xcJy
    react.surge.util.MSound DOOR_CLOSE -> GJkj
    react.surge.util.MSound DOOR_OPEN -> qEEB
    react.surge.util.MSound DRINK -> gYIm
    react.surge.util.MSound EAT -> qVEr
    react.surge.util.MSound EXPLODE -> Lbkw
    react.surge.util.MSound FALL_BIG -> JeXH
    react.surge.util.MSound FALL_SMALL -> wyYt
    react.surge.util.MSound FIRE -> MDMd
    react.surge.util.MSound FIRE_IGNITE -> qVEy
    react.surge.util.MSound FIZZ -> xAGw
    react.surge.util.MSound FUSE -> GKMX
    react.surge.util.MSound GLASS -> euGQ
    react.surge.util.MSound HURT_FLESH -> lhYD
    react.surge.util.MSound ITEM_BREAK -> VqLA
    react.surge.util.MSound ITEM_PICKUP -> mRJS
    react.surge.util.MSound LAVA -> mIYK
    react.surge.util.MSound LAVA_POP -> CPCV
    react.surge.util.MSound LEVEL_UP -> DciM
    react.surge.util.MSound MINECART_BASE -> yCls
    react.surge.util.MSound MINECART_INSIDE -> vdwe
    react.surge.util.MSound NOTE_BASS -> YPCq
    react.surge.util.MSound NOTE_PIANO -> IHeU
    react.surge.util.MSound NOTE_BASS_DRUM -> ecgI
    react.surge.util.MSound NOTE_STICKS -> PgLg
    react.surge.util.MSound NOTE_BASS_GUITAR -> lWYv
    react.surge.util.MSound NOTE_SNARE_DRUM -> ExOW
    react.surge.util.MSound NOTE_PLING -> RlrU
    react.surge.util.MSound ORB_PICKUP -> uaso
    react.surge.util.MSound PISTON_EXTEND -> GKPj
    react.surge.util.MSound PISTON_RETRACT -> HFDD
    react.surge.util.MSound PORTAL -> Tatn
    react.surge.util.MSound PORTAL_TRAVEL -> apkk
    react.surge.util.MSound PORTAL_TRIGGER -> GKNs
    react.surge.util.MSound SHOOT_ARROW -> DRfa
    react.surge.util.MSound SPLASH -> dyuF
    react.surge.util.MSound SPLASH2 -> DdIU
    react.surge.util.MSound STEP_GRASS -> elVq
    react.surge.util.MSound STEP_GRAVEL -> aEwS
    react.surge.util.MSound STEP_LADDER -> NPDX
    react.surge.util.MSound STEP_SAND -> KExo
    react.surge.util.MSound STEP_SNOW -> Lsox
    react.surge.util.MSound STEP_STONE -> Asqj
    react.surge.util.MSound STEP_WOOD -> OdIG
    react.surge.util.MSound STEP_WOOL -> Fipm
    react.surge.util.MSound SWIM -> fwnP
    react.surge.util.MSound WATER -> IHgN
    react.surge.util.MSound WOOD_CLICK -> qMYo
    react.surge.util.MSound BAT_DEATH -> rioU
    react.surge.util.MSound BAT_HURT -> MUSx
    react.surge.util.MSound BAT_IDLE -> IYiD
    react.surge.util.MSound BAT_LOOP -> DSJg
    react.surge.util.MSound BAT_TAKEOFF -> hdcF
    react.surge.util.MSound BLAZE_BREATH -> iFCI
    react.surge.util.MSound BLAZE_DEATH -> IYiS
    react.surge.util.MSound BLAZE_HIT -> rjPE
    react.surge.util.MSound CAT_HISS -> BnfA
    react.surge.util.MSound CAT_HIT -> xsou
    react.surge.util.MSound CAT_MEOW -> hKOu
    react.surge.util.MSound CAT_PURR -> dFtF
    react.surge.util.MSound CAT_PURREOW -> urwd
    react.surge.util.MSound CHICKEN_IDLE -> pAec
    react.surge.util.MSound CHICKEN_HURT -> IHhE
    react.surge.util.MSound CHICKEN_EGG_POP -> GmUm
    react.surge.util.MSound CHICKEN_WALK -> QHLx
    react.surge.util.MSound COW_IDLE -> sJnT
    react.surge.util.MSound COW_HURT -> oWtJ
    react.surge.util.MSound COW_WALK -> Udyo
    react.surge.util.MSound CREEPER_HISS -> vCVM
    react.surge.util.MSound CREEPER_DEATH -> wqLu
    react.surge.util.MSound ENDERDRAGON_DEATH -> fUiu
    react.surge.util.MSound ENDERDRAGON_GROWL -> QsBR
    react.surge.util.MSound ENDERDRAGON_HIT -> KiAB
    react.surge.util.MSound ENDERDRAGON_WINGS -> iEaT
    react.surge.util.MSound ENDERMAN_DEATH -> Okyw
    react.surge.util.MSound ENDERMAN_HIT -> yUSp
    react.surge.util.MSound ENDERMAN_IDLE -> cDSa
    react.surge.util.MSound ENDERMAN_TELEPORT -> jPwf
    react.surge.util.MSound ENDERMAN_SCREAM -> CFva
    react.surge.util.MSound ENDERMAN_STARE -> qUlO
    react.surge.util.MSound GHAST_SCREAM -> Yhyc
    react.surge.util.MSound GHAST_SCREAM2 -> ffoJ
    react.surge.util.MSound GHAST_CHARGE -> WkeN
    react.surge.util.MSound GHAST_DEATH -> NqkX
    react.surge.util.MSound GHAST_FIREBALL -> QbCc
    react.surge.util.MSound GHAST_MOAN -> TIId
    react.surge.util.MSound IRONGOLEM_DEATH -> hlsw
    react.surge.util.MSound IRONGOLEM_HIT -> NXYl
    react.surge.util.MSound IRONGOLEM_THROW -> gYQK
    react.surge.util.MSound IRONGOLEM_WALK -> dOfl
    react.surge.util.MSound MAGMACUBE_WALK -> xQnk
    react.surge.util.MSound MAGMACUBE_WALK2 -> OuMm
    react.surge.util.MSound MAGMACUBE_JUMP -> rYNx
    react.surge.util.MSound PIG_IDLE -> uIGC
    react.surge.util.MSound PIG_DEATH -> GeEm
    react.surge.util.MSound PIG_WALK -> CPJU
    react.surge.util.MSound SHEEP_IDLE -> YXWY
    react.surge.util.MSound SHEEP_SHEAR -> Nqis
    react.surge.util.MSound SHEEP_WALK -> JKjx
    react.surge.util.MSound SILVERFISH_HIT -> SNVO
    react.surge.util.MSound SILVERFISH_KILL -> LJAs
    react.surge.util.MSound SILVERFISH_IDLE -> rraG
    react.surge.util.MSound SILVERFISH_WALK -> AkfH
    react.surge.util.MSound SKELETON_IDLE -> PEMI
    react.surge.util.MSound SKELETON_DEATH -> fwnb
    react.surge.util.MSound SKELETON_HURT -> EEND
    react.surge.util.MSound SKELETON_WALK -> msrQ
    react.surge.util.MSound SLIME_ATTACK -> FXpv
    react.surge.util.MSound SLIME_WALK -> bbqe
    react.surge.util.MSound SLIME_WALK2 -> yndS
    react.surge.util.MSound SPIDER_IDLE -> oPFS
    react.surge.util.MSound SPIDER_DEATH -> hueF
    react.surge.util.MSound SPIDER_WALK -> Wkey
    react.surge.util.MSound WITHER_DEATH -> hlve
    react.surge.util.MSound WITHER_HURT -> QGrB
    react.surge.util.MSound WITHER_IDLE -> mQre
    react.surge.util.MSound WITHER_SHOOT -> WcVX
    react.surge.util.MSound WITHER_SPAWN -> qxRg
    react.surge.util.MSound WOLF_BARK -> jYjv
    react.surge.util.MSound WOLF_DEATH -> MeyP
    react.surge.util.MSound WOLF_GROWL -> HEhU
    react.surge.util.MSound WOLF_HOWL -> vnPS
    react.surge.util.MSound WOLF_HURT -> ExUO
    react.surge.util.MSound WOLF_PANT -> LcVh
    react.surge.util.MSound WOLF_SHAKE -> EpEM
    react.surge.util.MSound WOLF_WALK -> yDTU
    react.surge.util.MSound WOLF_WHINE -> vmnY
    react.surge.util.MSound ZOMBIE_METAL -> EUqV
    react.surge.util.MSound ZOMBIE_WOOD -> RKUl
    react.surge.util.MSound ZOMBIE_WOODBREAK -> gXqf
    react.surge.util.MSound ZOMBIE_IDLE -> noHl
    react.surge.util.MSound ZOMBIE_DEATH -> CrOW
    react.surge.util.MSound ZOMBIE_HURT -> yUUh
    react.surge.util.MSound ZOMBIE_INFECT -> oFvj
    react.surge.util.MSound ZOMBIE_UNFECT -> vKkd
    react.surge.util.MSound ZOMBIE_REMEDY -> RSfd
    react.surge.util.MSound ZOMBIE_WALK -> ynfw
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> whaG
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> pIyW
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> bRRk
    react.surge.util.MSound ZOMBIE_PIG_HURT -> KGAK
    react.surge.util.MSound DIG_WOOL -> xtUV
    react.surge.util.MSound DIG_GRASS -> XvyJ
    react.surge.util.MSound DIG_GRAVEL -> xtUX
    react.surge.util.MSound DIG_SAND -> RSdd
    react.surge.util.MSound DIG_SNOW -> YGXJ
    react.surge.util.MSound DIG_STONE -> foaQ
    react.surge.util.MSound DIG_WOOD -> WIbQ
    react.surge.util.MSound FIREWORK_BLAST -> JKmU
    react.surge.util.MSound FIREWORK_BLAST2 -> Lkeo
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> GvJJ
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> fgPP
    react.surge.util.MSound FIREWORK_TWINKLE -> TYkO
    react.surge.util.MSound FIREWORK_TWINKLE2 -> Fitb
    react.surge.util.MSound FIREWORK_LAUNCH -> QXrb
    react.surge.util.MSound SUCCESSFUL_HIT -> rsCi
    react.surge.util.MSound HORSE_ANGRY -> THjG
    react.surge.util.MSound HORSE_ARMOR -> gXqH
    react.surge.util.MSound HORSE_BREATHE -> KWas
    react.surge.util.MSound HORSE_DEATH -> JwCS
    react.surge.util.MSound HORSE_GALLOP -> sJuR
    react.surge.util.MSound HORSE_HIT -> NOkp
    react.surge.util.MSound HORSE_IDLE -> Xnkb
    react.surge.util.MSound HORSE_JUMP -> tFIS
    react.surge.util.MSound HORSE_LAND -> bQte
    react.surge.util.MSound HORSE_SADDLE -> aXEM
    react.surge.util.MSound HORSE_SOFT -> XUYv
    react.surge.util.MSound HORSE_WOOD -> RJwQ
    react.surge.util.MSound DONKEY_ANGRY -> EfuP
    react.surge.util.MSound DONKEY_DEATH -> tViR
    react.surge.util.MSound DONKEY_HIT -> GBgh
    react.surge.util.MSound DONKEY_IDLE -> RulB
    react.surge.util.MSound HORSE_SKELETON_DEATH -> FXtd
    react.surge.util.MSound HORSE_SKELETON_HIT -> tgjJ
    react.surge.util.MSound HORSE_SKELETON_IDLE -> Abxp
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> mQsi
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> vfAP
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> iEgf
    react.surge.util.MSound VILLAGER_DEATH -> DtrP
    react.surge.util.MSound VILLAGER_HAGGLE -> fEOQ
    react.surge.util.MSound VILLAGER_HIT -> FYUs
    react.surge.util.MSound VILLAGER_IDLE -> rYRo
    react.surge.util.MSound VILLAGER_NO -> YqnQ
    react.surge.util.MSound VILLAGER_YES -> wXBF
    java.lang.String pre19sound -> hJss
    java.lang.String post19sound -> Pocw
    org.bukkit.Sound resolvedSound -> eRmY
    react.surge.util.MSound[] ENUM$VALUES -> YOkT
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> SvpD
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> MuVW:
    org.bukkit.Material material -> oFxE
    java.lang.Byte data -> oaKc
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> bijB
    79:80:void setData(java.lang.Byte) -> dnqv
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> GYrQ:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> aCjS
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> xihB
    68:68:boolean isAnyOnline() -> mYGi
    80:80:react.glang.GList inWorld(org.bukkit.World) -> equa
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> IVru
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> dnqv
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> dnqv
    143:144:void disable(org.bukkit.entity.Player) -> pGaH
    154:155:void enable(org.bukkit.entity.Player) -> DrWU
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> dnqv
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> JtIb
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> oLnO
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> dnqv
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> Qoju
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> KUIb
    300:300:boolean canFindPlayer(java.lang.String) -> mrBV
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> BSDG
    338:345:react.glang.GList onlinePlayers() -> fdsg
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> gVYI
    368:371:void clear(org.bukkit.entity.Player) -> OOrf
    381:385:void clearEffects(org.bukkit.entity.Player) -> rohk
    398:399:void heal(org.bukkit.entity.Player,double) -> dnqv
    409:410:void heal(org.bukkit.entity.Player) -> CLpp
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> ssLm
    432:433:void resetHunger(org.bukkit.entity.Player) -> KCgI
    443:444:void kill(org.bukkit.entity.Player) -> hPin
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> CUbQ
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> KTja
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> dnqv
react.surge.util.P$1 -> GYrQ$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> NLoy
    1:1:java.lang.Object onAdapt(java.lang.Object) -> TFQb
react.surge.util.P$2 -> GYrQ$2:
    java.lang.Double val$doff -> drNV
    org.bukkit.entity.Player val$e -> rGpi
    org.bukkit.entity.Entity[] val$result -> yLeX
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> PSXJ
react.surge.util.PE -> vAUp:
    react.surge.util.PE ABSORPTION -> yTxu
    react.surge.util.PE BLINDNESS -> BoPA
    react.surge.util.PE CONFUSION -> GTLB
    react.surge.util.PE DAMAGE_RESISTANCE -> kTbN
    react.surge.util.PE FAST_DIGGING -> ukPm
    react.surge.util.PE FIRE_RESISTANCE -> WlLF
    react.surge.util.PE GLOWING -> slyr
    react.surge.util.PE HARM -> wqVv
    react.surge.util.PE HEAL -> KhhW
    react.surge.util.PE HEALTH_BOOST -> EVVU
    react.surge.util.PE HUNGER -> uHmA
    react.surge.util.PE INCREASE_DAMAGE -> AlLO
    react.surge.util.PE INVISIBILITY -> FHXO
    react.surge.util.PE JUMP -> SyRJ
    react.surge.util.PE LEVITATION -> Jmuq
    react.surge.util.PE LUCK -> CjCX
    react.surge.util.PE NIGHT_VISION -> ayiA
    react.surge.util.PE POISON -> bRXX
    react.surge.util.PE REGENERATION -> liGW
    react.surge.util.PE SATURATION -> sJvi
    react.surge.util.PE SLOW -> aNsS
    react.surge.util.PE SLOW_DIGGING -> rPdY
    react.surge.util.PE SPEED -> VGDb
    react.surge.util.PE UNLUCK -> lqVl
    react.surge.util.PE WATER_BREATHING -> wygC
    react.surge.util.PE WEAKNESS -> OdSM
    react.surge.util.PE WITHER -> whdo
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> dnqv
    144:144:react.surge.util.PE d(int) -> WypA
    156:156:react.surge.util.PE a(int) -> TVtO
    166:166:org.bukkit.potion.PotionEffect c() -> tTiq
    177:178:void c(org.bukkit.entity.LivingEntity) -> vcFN
    182:183:void crm(org.bukkit.entity.LivingEntity) -> TFQb
    187:188:void rm(org.bukkit.entity.LivingEntity) -> PmIl
react.surge.util.ParticleEffect -> BmHL:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> TkQo
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> gsHe
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> Fixs
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> SxrT
    react.surge.util.ParticleEffect WATER_BUBBLE -> IABL
    react.surge.util.ParticleEffect WATER_SPLASH -> NrSu
    react.surge.util.ParticleEffect WATER_WAKE -> JKuB
    react.surge.util.ParticleEffect SUSPENDED -> jkTO
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> HWPm
    react.surge.util.ParticleEffect CRIT -> RSlS
    react.surge.util.ParticleEffect CRIT_MAGIC -> vnVE
    react.surge.util.ParticleEffect SMOKE_NORMAL -> pAoa
    react.surge.util.ParticleEffect SMOKE_LARGE -> EVXX
    react.surge.util.ParticleEffect SPELL -> DRsw
    react.surge.util.ParticleEffect SPELL_INSTANT -> sdka
    react.surge.util.ParticleEffect SPELL_MOB -> iFLs
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> lpxX
    react.surge.util.ParticleEffect SPELL_WITCH -> RSlj
    react.surge.util.ParticleEffect DRIP_WATER -> QGxa
    react.surge.util.ParticleEffect DRIP_LAVA -> QsNI
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> edUH
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> yMKP
    react.surge.util.ParticleEffect TOWN_AURA -> igoD
    react.surge.util.ParticleEffect NOTE -> fUtP
    react.surge.util.ParticleEffect PORTAL -> lyiR
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> PNEg
    react.surge.util.ParticleEffect FLAME -> emDe
    react.surge.util.ParticleEffect LAVA -> KiJQ
    react.surge.util.ParticleEffect FOOTSTEP -> Niat
    react.surge.util.ParticleEffect CLOUD -> heML
    react.surge.util.ParticleEffect REDSTONE -> EDta
    react.surge.util.ParticleEffect SNOWBALL -> YjAv
    react.surge.util.ParticleEffect SNOW_SHOVEL -> QQIS
    react.surge.util.ParticleEffect SLIME -> kmuO
    react.surge.util.ParticleEffect HEART -> NOod
    react.surge.util.ParticleEffect BARRIER -> AlNo
    react.surge.util.ParticleEffect ITEM_CRACK -> UUEV
    react.surge.util.ParticleEffect BLOCK_CRACK -> Sgok
    react.surge.util.ParticleEffect BLOCK_DUST -> ULTX
    react.surge.util.ParticleEffect WATER_DROP -> YjBh
    react.surge.util.ParticleEffect ITEM_TAKE -> OBRX
    react.surge.util.ParticleEffect MOB_APPEARANCE -> ayjE
    react.surge.util.ParticleEffect DRAGON_BREATH -> JeiO
    react.surge.util.ParticleEffect END_ROD -> xlNV
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> wiKK
    react.surge.util.ParticleEffect SWEEP_ATTACK -> QsNo
    java.util.Map NAME_MAP -> NHCW
    java.util.Map ID_MAP -> oqso
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> Ijvc
    java.util.List properties -> grma
    react.surge.util.ParticleEffect[] ENUM$VALUES -> HVrT
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> ggwF
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> dnqv
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> ogFf
    557:565:react.surge.util.ParticleEffect fromId(int) -> BIpL
    577:578:boolean isWater(org.bukkit.Location) -> KekD
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> dnqv
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> dnqv
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> dnqv
    665:681:void display(float,int,org.bukkit.Location,double) -> dnqv
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> dnqv
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> dnqv
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> dnqv
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> dnqv
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> dnqv
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> dnqv
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> dnqv
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> dnqv
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> dnqv
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> dnqv
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> dnqv
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> dnqv
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> dnqv
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> dnqv
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> BmHL$dnqv:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> BmHL$JtIb:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> BmHL$KUIb:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> IiUW
    1594:1594:float getValueY() -> GRND
    1605:1605:float getValueZ() -> jXQs
react.surge.util.ParticleEffect$OrdinaryColor -> BmHL$XuAl:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> IiUW
    1526:1526:float getValueY() -> GRND
    1537:1537:float getValueZ() -> jXQs
react.surge.util.ParticleEffect$ParticleColor -> BmHL$jqEQ:
    1383:1383:void <init>() -> <init>
    float getValueX() -> IiUW
    float getValueY() -> GRND
    float getValueZ() -> jXQs
react.surge.util.ParticleEffect$ParticleColorException -> BmHL$vcFN:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> BmHL$TFQb:
    org.bukkit.Material material -> oFxE
    byte data -> FsOt
    int[] packetData -> vTdh
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> UlWi
    1309:1309:java.lang.String getPacketDataString() -> rNhB
react.surge.util.ParticleEffect$ParticleDataException -> BmHL$PmIl:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> BmHL$wDFX:
    int version -> version
    java.lang.Class enumParticle -> wWhJ
    java.lang.reflect.Constructor packetConstructor -> jRDI
    java.lang.reflect.Method getHandle -> JLWq
    java.lang.reflect.Field playerConnection -> tVoC
    java.lang.reflect.Method sendPacket -> thQT
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> BVBk
    float offsetX -> xJIg
    float offsetY -> YrUI
    float offsetZ -> JwJg
    float speed -> Poiy
    int amount -> UdTR
    boolean longDistance -> pApw
    react.surge.util.ParticleEffect$ParticleData data -> coQd
    java.lang.Object packet -> TkVT
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> HvSx
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> dnqv
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> JtIb
    2004:2018:void sendTo(org.bukkit.Location,double) -> JtIb
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> BmHL$wDFX$dnqv:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> BmHL$wDFX$JtIb:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> BmHL$wDFX$KUIb:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> BmHL$NLoy:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> QalQ
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> BLop
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> tWOO
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> KymT
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> MoRb
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> BmHL$PSXJ:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> prhj:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> aKyo
react.surge.util.Persist -> nuSo:
react.surge.util.PluginUtil -> qJwc:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> jqEQ
    81:85:void enableAll() -> wfhM
    95:99:void disable(org.bukkit.plugin.Plugin) -> vcFN
    106:110:void disableAll() -> yAym
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> TFQb
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> dnqv
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> VCjb
    169:172:java.util.List getPluginNames(boolean) -> ooQq
    184:187:java.lang.String getPluginVersion(java.lang.String) -> pjJJ
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> PmIl
    237:316:java.util.List findByCommand(java.lang.String) -> uNdQ
    337:338:void load(org.bukkit.plugin.Plugin) -> wDFX
    342:364:java.lang.String getPluginFileName(java.lang.String) -> ccdB
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> dnqv
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> NLoy
    480:484:void reloadAll() -> cJlP
    496:622:void unload(org.bukkit.plugin.Plugin) -> PSXJ
react.surge.util.PoolCount -> WOoP:
react.surge.util.PoolDescriber -> GQaj:
react.surge.util.PoolNanoThrottle -> hcAi:
react.surge.util.PositionalSelector -> VoOu:
    react.glang.GSet allowedChunks -> pcsn
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> HCmy
    39:40:void addChunk(org.bukkit.Chunk) -> WWkg
    44:44:react.glang.GSet getAllowedChunks() -> mHJJ
react.surge.util.Protocol -> INwM:
    react.surge.util.Protocol LATEST -> tqAn
    react.surge.util.Protocol R1_12_2 -> Dljb
    react.surge.util.Protocol R1_12_2_PRE -> AkrC
    react.surge.util.Protocol R1_12_1 -> HODf
    react.surge.util.Protocol R1_12 -> Gmch
    react.surge.util.Protocol R1_11_2 -> TcHe
    react.surge.util.Protocol R1_11_1 -> lGKN
    react.surge.util.Protocol R1_11 -> bkpI
    react.surge.util.Protocol R1_10_2 -> euYj
    react.surge.util.Protocol R1_10_1 -> yLoR
    react.surge.util.Protocol R1_10 -> wXKb
    react.surge.util.Protocol R1_9_4 -> cUbO
    react.surge.util.Protocol R1_9_3 -> vLVd
    react.surge.util.Protocol R1_9_2 -> ULXt
    react.surge.util.Protocol R1_9_1 -> KFkd
    react.surge.util.Protocol R1_9 -> NXex
    react.surge.util.Protocol R1_8_9 -> LIni
    react.surge.util.Protocol R1_8_8 -> XfdK
    react.surge.util.Protocol R1_8_7 -> DljC
    react.surge.util.Protocol R1_8_6 -> DSWj
    react.surge.util.Protocol R1_8_5 -> XMPf
    react.surge.util.Protocol R1_8_4 -> HWSd
    react.surge.util.Protocol R1_8_3 -> vCdi
    react.surge.util.Protocol R1_8_2 -> Dlih
    react.surge.util.Protocol R1_8_1 -> bJMO
    react.surge.util.Protocol R1_8 -> kKuo
    react.surge.util.Protocol R1_7_10 -> ucFR
    react.surge.util.Protocol R1_7_9 -> ixuB
    react.surge.util.Protocol R1_7_8 -> rbMX
    react.surge.util.Protocol R1_7_7 -> HNcK
    react.surge.util.Protocol R1_7_6 -> jbdm
    react.surge.util.Protocol R1_7_5 -> JDHd
    react.surge.util.Protocol R1_7_4 -> AInp
    react.surge.util.Protocol R1_7_3 -> daUP
    react.surge.util.Protocol R1_7_2 -> wylY
    react.surge.util.Protocol R1_7_1 -> JKwq
    react.surge.util.Protocol B1_6_4 -> wWiT
    react.surge.util.Protocol B1_6_3 -> ygAX
    react.surge.util.Protocol B1_6_2 -> HEsw
    react.surge.util.Protocol B1_6_1 -> oPUe
    react.surge.util.Protocol B1_5_2 -> JfNR
    react.surge.util.Protocol B1_5_1 -> Bnve
    react.surge.util.Protocol B1_5 -> BnwE
    react.surge.util.Protocol B1_4_7 -> FYaR
    react.surge.util.Protocol B1_4_6 -> gaok
    react.surge.util.Protocol B1_4_5 -> oqxN
    react.surge.util.Protocol B1_4_4 -> kfLp
    react.surge.util.Protocol B1_4_2 -> vfKt
    react.surge.util.Protocol B1_3_2 -> FrsV
    react.surge.util.Protocol B1_3_1 -> iguu
    react.surge.util.Protocol B1_2_5 -> nEAm
    react.surge.util.Protocol B1_2_4 -> lXNB
    react.surge.util.Protocol EARLIEST -> qpMq
    react.surge.util.Protocol UNKNOWN -> uRFv
    int version -> version
    java.lang.String packageVersion -> KhqS
    java.lang.String versionName -> arBB
    boolean netty -> MnwP
    react.surge.util.Protocol[] ENUM$VALUES -> TsjR
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> XmPs
    118:118:java.lang.String getPackageVersion() -> IFqe
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> kJRx
    142:150:react.surge.util.Protocol getProtocolVersion() -> YyEc
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> JtIb
    160:160:boolean isServerVersion() -> lfgt
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> Hnbp
    175:175:boolean isActualVersion() -> fdwO
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> DbVs
    200:200:int getMetaVersion() -> qeWR
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> SLTU:
    react.surge.util.Protocol from -> lynw
    react.surge.util.Protocol to -> RvTs
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> jOaF
    21:21:react.surge.util.Protocol getTo() -> pbTJ
    26:26:boolean contains(react.surge.util.Protocol) -> KUIb
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> fTJn:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> lxKM
    70:70:int randomNextInt() -> iwQT
    80:80:long randomNextLong() -> jrCk
    92:92:boolean isWithin(double) -> CLpp
    104:104:boolean isWithin(int) -> PlkH
    116:116:boolean isWithin(long) -> xhiv
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> ssLm
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> Eliy
react.surge.util.RawEvent -> Jknp:
react.surge.util.RayTrace -> hQcJ:
    org.bukkit.Location start -> TcIh
    org.bukkit.util.Vector direction -> wXLf
    java.lang.Double maxDistance -> LuEP
    java.lang.Double distanceCovered -> KWnS
    java.lang.Double step -> ngDK
    java.lang.Boolean stop -> LRaQ
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> VnyL
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> PSXJ
    89:89:org.bukkit.Location getStart() -> woXT
    94:95:void setStart(org.bukkit.Location) -> IVru
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> DIDC
    114:115:void setMaxDistance(java.lang.Double) -> XuAl
    119:119:java.lang.Double getDistanceCovered() -> YpSK
    124:125:void setDistanceCovered(java.lang.Double) -> jqEQ
    129:129:java.lang.Double getStep() -> wVEw
    134:135:void setStep(java.lang.Double) -> vcFN
react.surge.util.ReflectionUtils -> bick:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> dnqv
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> dnqv
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> dnqv
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> dnqv
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> dnqv
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> dnqv
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> dnqv
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> dnqv
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> dnqv
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> dnqv
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> dnqv
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> dnqv
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> dnqv
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> dnqv
react.surge.util.ReflectionUtils$DataType -> bick$dnqv:
    react.surge.util.ReflectionUtils$DataType BYTE -> WuEF
    react.surge.util.ReflectionUtils$DataType SHORT -> LlTF
    react.surge.util.ReflectionUtils$DataType INTEGER -> Fjas
    react.surge.util.ReflectionUtils$DataType LONG -> Atdy
    react.surge.util.ReflectionUtils$DataType CHARACTER -> kLYA
    react.surge.util.ReflectionUtils$DataType FLOAT -> ranH
    react.surge.util.ReflectionUtils$DataType DOUBLE -> AkvI
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> FjeF
    java.util.Map CLASS_MAP -> TQin
    java.lang.Class primitive -> wrBY
    java.lang.Class reference -> gQRB
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> KFoc
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> FNhf
    704:704:java.lang.Class getReference() -> kuGW
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> JtIb
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> KUIb
    741:742:java.lang.Class getReference(java.lang.Class) -> XuAl
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> dnqv
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> JtIb
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> JtIb
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> KUIb
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> dnqv
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> bick$JtIb:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> ENOr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> XxJc
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> rrqx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> KGQE
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> WBCU
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> kDKV
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> xdDF
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> sBpn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> nVFH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> THyc
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> lrCE
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> Aktn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> vvnC
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> mdDD
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> JDKw
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> eRxu
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> EpRM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> cxGv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> BVHg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> iWVd
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> NXiI
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> JIlN:
    void refresh() -> refresh
react.surge.util.SQLOperation -> RREG:
    react.surge.util.SQLOperation LOAD -> yEBm
    react.surge.util.SQLOperation SAVE -> rapF
    react.surge.util.SQLOperation[] ENUM$VALUES -> jHuw
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> inYH:
    react.surge.util.ServerState START -> hSqh
    react.surge.util.ServerState ENABLE -> ixxK
    react.surge.util.ServerState DISABLE -> gsSP
    react.surge.util.ServerState STOP -> Atfy
    react.surge.util.ServerState RUNNING -> cgFr
    react.surge.util.ServerState[] ENUM$VALUES -> AJUi
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> WYDP:
    org.bukkit.Location location -> jPeQ
    org.bukkit.util.Vector offset -> gHbM
    org.bukkit.util.Vector size -> noYh
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> WWkg
    90:94:org.bukkit.Location randomLocation() -> HUPK
    104:104:org.bukkit.Location randomSurface() -> HTnp
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> pjdD
    129:129:org.bukkit.util.Vector getSize() -> sAIB
react.surge.util.SnowLevel -> anqO:
    byte level -> RnJS
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> uqbH
    51:52:void setLevel(byte) -> wDFX
react.surge.util.SuperCaller -> afaA:
    void run() -> run
react.surge.util.T -> SDFb:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> JtIb
    32:35:void stop() -> stop
react.surge.util.TXT -> dMgC:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> TFQb
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> dnqv
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> dnqv
    99:99:java.lang.String line(react.surge.util.C,int) -> dnqv
    113:113:java.lang.String underline(react.surge.util.C,int) -> JtIb
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> dnqv
react.surge.util.Tag -> LrVX:
    java.lang.String value() -> value
react.surge.util.Timer -> WaTN:
    long tns -> gatN
    long cns -> kCmJ
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> yJid
react.surge.util.VectorMath -> cArW:
    int[] $SWITCH_TABLE$surge$util$Axis -> MUMf
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> XgJg
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> dnqv
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> dnqv
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> JtIb
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> KUIb
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> dnqv
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> JtIb
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> JtIb
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> KUIb
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> XuAl
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> jqEQ
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> vcFN
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> TFQb
    111:111:double round(double,int) -> jqEQ
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> dnqv
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> dnqv
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> dnqv
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> XuAl
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> jqEQ
    268:268:org.bukkit.util.Vector toVector(float,float) -> dnqv
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> dnqv
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> dnqv
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> PmIl
    337:340:double getSpeed(org.bukkit.util.Vector) -> wDFX
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> dnqv
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> NLoy
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> dnqv
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> JtIb
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> KUIb
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> XuAl
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> PSXJ
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> Emgi
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> XmPX
react.surge.util.VectorMath$1 -> cArW$1:
    org.bukkit.util.Vector val$vector -> KrGF
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> KekD
    1:1:java.lang.Object onAdapt(java.lang.Object) -> TFQb
react.surge.util.W -> vlNP:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> PmIl
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> dnqv
    75:86:org.bukkit.entity.Entity getEntity(int) -> aCjS
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> dnqv
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> dnqv
    143:143:int getChunkX(org.bukkit.block.Block) -> wDFX
    155:155:int getChunkY(org.bukkit.block.Block) -> NLoy
    168:169:void dropXp(org.bukkit.Location,int) -> JtIb
    180:180:int getChunkZ(org.bukkit.block.Block) -> PSXJ
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> JtIb
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> dnqv
    232:239:react.glang.GList news(org.bukkit.Location) -> vABY
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> dnqv
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> vABY
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> ejFV
    300:300:org.bukkit.World toSync(org.bukkit.World) -> PJfj
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> KekD
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> ooQq
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> ooQq
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> HeWL
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> dnqv
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> dnqv
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> dnqv
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> dnqv
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> dnqv
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> dnqv
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> dnqv
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> dnqv
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> eqvC
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> HvSx
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> eqvC
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> KUIb
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> dnqv
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> dnqv
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> dnqv
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> dnqv
react.surge.util.W$1 -> vlNP$1:
    java.lang.Double val$doff -> drNV
    org.bukkit.entity.Entity val$e -> AJUc
    org.bukkit.entity.Entity[] val$result -> yLeX
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> PSXJ
react.surge.util.Worlds -> sjtB:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> pPcc
    33:33:boolean hasWorld(java.lang.String) -> UcLW
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> jiKL:
react.text.ColoredString -> rhRC:
    react.surge.util.C c -> tEva
    java.lang.String s -> gass
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> wnva
    42:43:void setC(react.surge.util.C) -> JtIb
    47:47:java.lang.String getS() -> URcx
    52:53:void setS(java.lang.String) -> OHHb
react.text.RTEX -> SKvR:
    react.glang.GList extras -> qxbs
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> nKKY
    44:58:react.json.JSONObject toJSON() -> KTja
react.text.RTX -> DanC:
    react.json.JSONArray base -> Kyuy
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> vcFN
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> JtIb
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> dnqv
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> dnqv
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> JtIb
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> KUIb
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> dnqv
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> JtIb
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> KUIb
    265:265:react.json.JSONArray toJSON() -> VnyR
    276:277:void tellRawTo(org.bukkit.entity.Player) -> Grql
react.text.RawText -> cuXb:
    java.lang.String COLOR_BLACK -> qMnW
    java.lang.String COLOR_DARK_BLUE -> rQRW
    java.lang.String COLOR_DARK_GREEN -> tWWx
    java.lang.String COLOR_DARK_AQUA -> rjdM
    java.lang.String COLOR_DARK_RED -> xceF
    java.lang.String COLOR_DARK_PURPLE -> Qrve
    java.lang.String COLOR_GOLD -> VOax
    java.lang.String COLOR_GRAY -> tOHY
    java.lang.String COLOR_DARK_GRAY -> MDhK
    java.lang.String COLOR_BLUE -> lqbp
    java.lang.String COLOR_GREEN -> arEB
    java.lang.String COLOR_AQUA -> xAaJ
    java.lang.String COLOR_RED -> RvYU
    java.lang.String COLOR_LIGHT_PURPLE -> kfOo
    java.lang.String COLOR_YELLOW -> Wkua
    java.lang.String COLOR_WHITE -> VXRR
    java.lang.String COLOR_NONE -> QHax
    java.lang.String HEAD_TEXT -> FsVv
    java.lang.String HEAD_COLOR -> JUOp
    java.lang.String HEAD_BOLD -> rPov
    java.lang.String HEAD_ITALIC -> XEGS
    java.lang.String HEAD_UNDERLINED -> BxMf
    java.lang.String HEAD_STRIKETHROUGH -> BVKE
    java.lang.String HEAD_OBFUSCATED -> Atic
    java.lang.String HEAD_CLICK_EVENT -> bcea
    java.lang.String HEAD_HOVER_EVENT -> TAJp
    java.lang.String HEAD_ACTION -> GnJW
    java.lang.String HEAD_VALUE -> UToB
    java.lang.String HEAD_EXTRA -> wyrQ
    java.lang.String HEAD_ACTION_SHOW_TEXT -> Tbln
    java.lang.String HEAD_ACTION_COMMAND -> YHIx
    java.util.ArrayList components -> VyuE
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> Ayrb
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> jqEQ
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> dnqv
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> dnqv
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> dnqv
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> dnqv
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> dnqv
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> dnqv
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> dnqv
    307:313:java.lang.String compile() -> gEvK
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> dnqv

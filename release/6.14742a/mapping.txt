react.Config -> BJOF:
    react.glang.GMap worldConfigs -> BJOF
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> CMRG
    java.lang.String A_ENTITYCACHE_INTERVAL -> lKug
    java.lang.String A_COMMANDOVERRIDE_TPS -> lCeb
    java.lang.String A_REACT_REMOTE_PORT -> wTex
    java.lang.String A_REACT_REMOTE_ENABLED -> QEXs
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> OYFK
    java.lang.String A_POOL_MAXTHREADS -> oVAY
    java.lang.String A_POOL_SYNC_NANOS -> mGHq
    java.lang.String A_ENTITYCACHE_ENABLED -> fAtW
    java.lang.String A_FASTLEAF_ENABLED -> OOtD
    java.lang.String A_FASTLEAF_ONDECAY -> LyoS
    java.lang.String A_FASTLEAF_INSTANT -> sbMJ
    java.lang.String A_FASTLEAF_DECAYPERIOD -> AXLY
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> myli
    java.lang.String A_ENTITYSTACK_ENABLED -> Qoli
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> HBlr
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> PSVY
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> XJLi
    java.lang.String A_GLASS_SHOW_BLOCKS -> kbeB
    java.lang.String A_GLASS_SHOW_PARTICLES -> jpbr
    java.lang.String A_ALLOW_CULL -> gVXa
    java.lang.String A_ALLOW_PURGE -> LXKi
    java.lang.String A_ALLOW_CACHE -> iCML
    java.lang.String A_CULL_RULES -> KvkO
    java.lang.String A_RAI_TPS_HIGH_TICK -> bWiW
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> xhip
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> SeQV
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> QNJD
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> ivPh
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> gDvS
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> lCdT
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> eOrA
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> jxri
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> hPii
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> TWSO
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> yIhy
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> HCOL
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> oxBh
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> OOsQ
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> GPlb
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> WynC
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> FyAO
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> lDID
    java.lang.String A_RAI_FLUID_TIME_CEIL -> vkXX
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> byoa
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> Mtci
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> UQfw
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> NxHL
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> HTSV
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> TWVJ
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> pHCo
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> SBpS
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> cSAL
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> uNbI
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> mynf
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> nuBf
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> xFjH
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> UYwg
    java.lang.String A_USE_WORLD_CONFIGS -> uhUJ
    java.lang.String A_LANGUAGE -> uhTj
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> UtJW
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> kIUN
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> Vejj
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> NEBW
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> kHtR
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> Mtbj
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> eied
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> PBVn
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> IyWx
    java.lang.String A_RAI_ENTITY_PROPIGATE -> Jjxl
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> INcx
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> NMRo
    int ENTITYCACHE_CHUNK_RADIUS -> fdYP
    int ENTITYCACHE_INTERVAL -> paUL
    boolean COMMANDOVERRIDES_TPS -> vITL
    int REACT_REMOTE_PORT -> wmyL
    boolean REACT_REMOTE_ENABLED -> MuCu
    int ENTITY_STACK_MAX_COUNT -> FNOI
    int POOL_MAXTHREADS -> LXPi
    long POOL_SYNC_NANOS -> uWUo
    boolean ENTITYCACHE_ENABLED -> GHaK
    boolean FASTLEAF_ENABLED -> MRbl
    boolean FASTLEAF_ONDECAY -> oDbk
    boolean FASTLEAF_INSTANT -> RarY
    int FASTLEAF_DECAYPERIOD -> MBBa
    boolean COMMANDOVERRIDES_MEMORY -> INgT
    boolean ENTITYSTACK_ENABLED -> EvAA
    int ENTITYSTACK_MINIMUM_GROUP -> cdCx
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> RQRQ
    int ENTITYSTACK_MAXIMUM_HEALTH -> OjLM
    boolean GLASS_SHOW_BLOCKS -> UtMa
    boolean GLASS_SHOW_PARTICLES -> Qopj
    react.glang.GList ALLOW_CULL -> VCjs
    react.glang.GList ALLOW_PURGE -> CxKU
    react.glang.GList ALLOW_CACHE -> xhoF
    react.glang.GList CULL_RULES -> mqaI
    double RAI_TPS_HIGH_TICK -> iTQy
    long RAI_REDSTONE_TIME_FLOOR -> dnuW
    long RAI_REDSTONE_TIME_CEIL -> EmNH
    long RAI_REDSTONE_TIME_MUDDING -> LiQT
    double RAI_REDSTONE_TIME_FUNCTION -> tSqD
    double RAI_REDSTONE_TIME_OVERBLEED -> clST
    int RAI_REDSTONE_TIME_RADIUS -> ksjW
    int RAI_REDSTONE_TIME_PROPIGATION -> kQgW
    long RAI_HOPPER_TIME_FLOOR -> ssQo
    long RAI_HOPPER_TIME_CEIL -> QopA
    long RAI_HOPPER_TIME_MUDDING -> fRxQ
    double RAI_HOPPER_TIME_FUNCTION -> Oqye
    double RAI_HOPPER_TIME_OVERBLEED -> ylRR
    int RAI_HOPPER_TIME_RADIUS -> rNLI
    int RAI_HOPPER_TIME_PROPIGATION -> PJhw
    int RAI_ENTITY_CHUNK_MULTIPLIER -> pXfD
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> DaYn
    int RAI_ENTITY_CHUNK_RADIUS -> cuEO
    long RAI_FLUID_TIME_FLOOR -> INfR
    long RAI_FLUID_TIME_CEIL -> wKwe
    long RAI_FLUID_TIME_MUDDING -> dMSb
    double RAI_FLUID_TIME_FUNCTION -> iTQm
    double RAI_FLUID_TIME_OVERBLEED -> qmKQ
    int RAI_FLUID_TIME_RADIUS -> HLDY
    int RAI_FLUID_TIME_PROPIGATION -> AGPO
    double SMEAR_TICK_ENTITIES_MAX_TICK -> uEql
    double SMEAR_TICK_TILES_MAX_TICK -> gpOS
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> rDyQ
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> wekF
    double SMEAR_TICK_ENTITIES_AMOUNT -> dEEs
    double SMEAR_TICK_TILES_AMOUNT -> KDNV
    boolean SMEAR_TICK_ENTITIES_ENABLE -> uNgB
    boolean SMEAR_TICK_TILES_ENABLE -> hjcu
    boolean HOPPER_OVERTICK_ENABLE -> tSsg
    boolean USE_WORLD_CONFIGS -> bGOt
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> VoAi
    long RAI_CHUNK_TIME_CEIL -> Xtfj
    long RAI_CHUNK_TIME_MUDDING -> hasS
    double RAI_CHUNK_TIME_FUNCTION -> TFWr
    double RAI_CHUNK_TIME_OVERBLEED -> OOyg
    int RAI_CHUNK_TIME_RADIUS -> owiY
    int RAI_CHUNK_TIME_PROPIGATION -> maBQ
    boolean RAI_CHUNK_TIME_PROPIGATE -> MReW
    boolean RAI_FLUID_TIME_PROPIGATE -> roox
    boolean RAI_ENTITY_PROPIGATE -> cRcq
    boolean RAI_HOPPER_TIME_PROPIGATE -> uhXg
    boolean RAI_REDSTONE_TIME_PROPIGATE -> xFma
    boolean hrld -> awRW
    boolean rns -> QWBL
    boolean rrl -> HeXv
    39:656:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    661:678:void doTrack(org.bukkit.plugin.Plugin) -> BJOF
    683:705:void onRead(org.bukkit.plugin.Plugin) -> CMRG
    709:739:void read(java.io.File,boolean) -> BJOF
    743:760:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> BJOF
    765:773:void closeWorldConfig(org.bukkit.World) -> CMRG
    778:891:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> BJOF
    896:933:react.surge.cluster.DataCluster defaultConfig(boolean) -> BJOF
    938:1013:react.glang.GList getDefaultEntitiesForCaching() -> BJOF
    1018:1093:react.glang.GList getDefaultEntitiesForCulling() -> CMRG
    1098:1135:react.glang.GList getDefaultEntitiesForRemoval() -> lKug
    1140:1169:react.glang.GList getDefaultCullRules() -> lCeb
react.Config$1 -> BJOF$1:
    java.io.File val$fConfig -> KwTA
    java.io.File val$fConfigExperimental -> FWCO
    org.bukkit.plugin.Plugin val$main -> cAau
    1:664:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    669:673:void run() -> run
react.Config$2 -> BJOF$2:
    react.api.WorldConfig val$wc -> AaCe
    org.bukkit.World val$w -> DjNf
    1:750:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    755:756:void run() -> run
react.Gate -> CMRG:
    react.glang.GMap defaultSettings -> EvCQ
    react.glang.GSet refresh -> RsVn
    react.glang.GSet destroy -> VTlx
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> SCSc
    41:43:void <clinit>() -> <clinit>
    39:39:void <init>() -> <init>
    47:137:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> BJOF
    143:174:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> BJOF
    179:179:int getChunkCountForView() -> wTex
    184:184:int getMaxChunksForView() -> QEXs
    189:189:boolean hasFawe() -> OYFK
    194:215:void tickEntityNextTickListTick(org.bukkit.World) -> lKug
    219:223:void resetEntityMaxTick(org.bukkit.World) -> lCeb
    227:227:int getEntityTickMax(org.bukkit.World) -> wTex
    232:232:int getTileTickMax(org.bukkit.World) -> QEXs
    237:255:void tweakEntityTickMax(org.bukkit.World,int) -> BJOF
    259:276:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> BJOF
    281:285:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> BJOF
    289:301:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> BJOF
    306:310:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> CMRG
    314:332:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> BJOF
    336:340:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> OYFK
    345:348:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> BJOF
    353:356:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> CMRG
    361:361:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> lKug
    366:366:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> lCeb
    371:371:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> wTex
    376:376:boolean isBadForUnloading() -> oVAY
    381:381:boolean canUnload(org.bukkit.World,int,int) -> BJOF
    388:404:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    410:421:void unloadChunk(org.bukkit.World,int,int) -> CMRG
    425:436:void removeEntity(org.bukkit.entity.Entity) -> BJOF
    440:451:void purgeEntity(org.bukkit.entity.Entity) -> CMRG
    455:466:void cullEntity(org.bukkit.entity.Entity) -> lKug
    470:481:void cachedEntity(org.bukkit.entity.Entity) -> lCeb
    486:503:void updateBlock(org.bukkit.block.Block) -> BJOF
    507:511:java.lang.String header(java.lang.String,react.surge.util.C) -> BJOF
    516:516:java.lang.String header(react.surge.util.C) -> BJOF
    522:526:void updateFluid(org.bukkit.block.Block) -> CMRG
    530:531:void refresh(org.bukkit.Chunk) -> CMRG
    536:555:void refreshChunks() -> mGHq
    559:560:void sendBlockChange(org.bukkit.Location) -> BJOF
    39:39:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> fAtW
react.Gate$1 -> CMRG$1:
    react.api.SelectorPosition val$sel -> Huwt
    react.glang.Callback val$prog -> YEDy
    react.glang.Callback val$cb -> STUc
    1:47:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    52:135:void run() -> run
react.Gate$1$1 -> CMRG$1$1:
    react.Gate$1 this$1 -> mysB
    java.lang.Object val$o -> cBAf
    java.lang.reflect.Constructor val$vectorConstruct -> MIre
    java.lang.reflect.Constructor val$cuboidConstruct -> SBrp
    java.lang.reflect.Method val$faweFixMethod -> jWXH
    java.lang.Integer[] val$total -> SKdW
    java.lang.Integer[] val$sof -> FxdA
    react.glang.Callback val$prog -> YEDy
    java.lang.Integer val$tot -> qBYc
    1:79:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    86:104:void run() -> run
react.Gate$1$2 -> CMRG$1$2:
    react.Gate$1 this$1 -> mysB
    react.glang.Callback val$prog -> YEDy
    react.glang.Callback val$cb -> STUc
    java.lang.Integer[] val$total -> SKdW
    1:108:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    115:123:void run() -> run
react.Info -> lKug:
    java.lang.String CORE_REACT_DOT -> vbjD
    java.lang.String CORE_NAME -> lULi
    java.lang.String CORE_CACHE -> cJRc
    java.lang.String WORLD_CONFIGS -> oxIB
    java.lang.String CORE_DOTYML -> owhL
    java.lang.String COMMAND_REACT -> WaBi
    java.lang.String COMMAND_RAI -> cccu
    java.lang.String COMMAND_ACT_DESCRIPTION -> ivWW
    java.lang.String COMMAND_ACT -> skCU
    java.lang.String COMMAND_ACT_ALIAS_1 -> IFXX
    java.lang.String COMMAND_ACT_ALIAS_2 -> MSGe
    java.lang.String COMMAND_ACT_USAGE -> aept
    java.lang.String COMMAND_HELP_DESCRIPTION -> rxdN
    java.lang.String COMMAND_HELP -> ydGY
    java.lang.String COMMAND_HELP_ALIAS_1 -> rVaV
    java.lang.String COMMAND_HELP_ALIAS_2 -> hPtI
    java.lang.String COMMAND_HELP_USAGE -> imjD
    java.lang.String COMMAND_STATUS_DESCRIPTION -> FWDa
    java.lang.String COMMAND_STATUS -> VUQY
    java.lang.String COMMAND_STATUS_ALIAS_1 -> bFrK
    java.lang.String COMMAND_STATUS_ALIAS_2 -> OYNX
    java.lang.String COMMAND_STATUS_USAGE -> OHMJ
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> kbmW
    java.lang.String COMMAND_CPUSCORE -> Smjb
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> ggcH
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> mrFF
    java.lang.String COMMAND_CPUSCORE_USAGE -> ghDM
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> ykue
    java.lang.String COMMAND_RELOAD -> anbl
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> oxKp
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> QFBk
    java.lang.String COMMAND_RELOAD_USAGE -> hbTk
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> mPAq
    java.lang.String COMMAND_MONITOR -> biTU
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> GQUV
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> Ubmc
    java.lang.String COMMAND_MONITOR_USAGE -> eGiH
    java.lang.String COMMAND_VERSION_DESCRIPTION -> XSEp
    java.lang.String COMMAND_VERSION -> RQTk
    java.lang.String COMMAND_VERSION_ALIAS_1 -> EJnY
    java.lang.String COMMAND_VERSION_ALIAS_2 -> OXlX
    java.lang.String COMMAND_VERSION_USAGE -> JQmX
    java.lang.String COMMAND_MAP_DESCRIPTION -> qvAC
    java.lang.String COMMAND_MAP -> aTnt
    java.lang.String COMMAND_MAP_ALIAS_1 -> ieWa
    java.lang.String COMMAND_MAP_ALIAS_2 -> cJTc
    java.lang.String COMMAND_MAP_USAGE -> hbUE
    java.lang.String COMMAND_GLASS_DESCRIPTION -> QMpq
    java.lang.String COMMAND_GLASS -> MuKB
    java.lang.String COMMAND_GLASS_ALIAS_1 -> cSFH
    java.lang.String COMMAND_GLASS_ALIAS_2 -> NEIL
    java.lang.String COMMAND_GLASS_USAGE -> sYcH
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> dVLI
    java.lang.String COMMAND_CBLAME -> xFqw
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> wfSW
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> gyHK
    java.lang.String COMMAND_CBLAME_USAGE -> BSJR
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> MSIe
    java.lang.String COMMAND_ACTIONLOG -> aDQT
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> OiqE
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> WaGb
    java.lang.String COMMAND_ACTIONLOG_USAGE -> qubw
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> LiYD
    java.lang.String COMMAND_CAPABILITIES -> mWuI
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> rEbH
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> LPGP
    java.lang.String COMMAND_CAPABILITIES_USAGE -> dgMK
    java.lang.String MSG_PERMISSION -> jqOI
    java.lang.String MSG_MONITORING_STARTED -> OHNj
    java.lang.String MSG_MONITORING_STOPPED -> OiqM
    java.lang.String MSG_ACTIONLOGGING_STARTED -> rMpv
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> ccjA
    java.lang.String MSG_GLASS_STARTED -> URQR
    java.lang.String MSG_GLASS_STOPPED -> FNVI
    org.bukkit.Color COLOR_HOPPER -> UtTH
    org.bukkit.Color COLOR_BLOCK_UPDATE -> YxPB
    org.bukkit.Color COLOR_BLOCK_FROMTO -> XIwX
    org.bukkit.Color COLOR_BLOCK_BURN -> Smlm
    org.bukkit.Color COLOR_BLOCK_DECAY -> MIxU
    org.bukkit.Color COLOR_BLOCK_FORM -> MJXt
    java.lang.String NAME_TICK -> kcQH
    java.lang.String NAME_MEMORY -> HKjc
    java.lang.String NAME_CHUNKS -> SmmL
    java.lang.String NAME_ENTITIES -> dUjG
    java.lang.String STATE_MONITORING_TAB -> BBJH
    java.lang.String STATE_MONITORING_ENABLED -> FWET
    java.lang.String STATE_MONITORING_HIGH -> Yfkf
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> fdaN
    java.lang.String STATE_MAPPING_ENABLED -> GbYB
    java.lang.String STATE_SOUND_PLAYS -> QovD
    java.lang.String STATE_MONITORING_POSTED -> wvsQ
    java.lang.String STATE_MONITORING_LASTTAB -> XIuf
    java.lang.String STATE_GLASSES_ENABLED -> YVJr
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> qvCV
    java.lang.String STATE_PLAYER_HOTBAR -> iKfd
    java.lang.String STATE_PLAYER_SHIFT -> Mcii
    java.lang.String STATE_PLAYER_SCROLL -> woBn
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> CVMe
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> sQSv
    java.lang.String PERM_ACCESS -> rMow
    java.lang.String PERM_MONITOR -> XSHd
    java.lang.String PERM_MONITOR_TITLE -> YgPJ
    java.lang.String PERM_MONITOR_ACTIONLOG -> gMuC
    java.lang.String PERM_MONITOR_MAP -> OjSX
    java.lang.String PERM_MONITOR_ENVIRONMENT -> loFw
    java.lang.String PERM_MONITOR_GLASSES -> rpXL
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> TOOT
    java.lang.String PERM_ACT -> kJAX
    java.lang.String PERM_RAI -> VDSg
    java.lang.String PERM_RAI_CONTROL -> OHQF
    java.lang.String PERM_RAI_ACCESS -> sbYb
    java.lang.String PERM_RAI_MONITOR -> xaGf
    java.lang.String PERM_RELOAD -> HnQA
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> NUnX
    java.lang.String SAMPLER_REDSTONE_TICK -> MdMh
    java.lang.String SAMPLER_ENTITY_TIME -> AaIq
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> rove
    java.lang.String SAMPLER_TILE_TIME_LOCK -> biYg
    java.lang.String SAMPLER_TILE_TIME -> rNUB
    java.lang.String SAMPLER_TILE_DROPTICK -> Dacc
    java.lang.String SAMPLER_ENTITY_DROPTICK -> ksry
    java.lang.String SAMPLER_REDSTONE_SECOND -> FxkW
    java.lang.String SAMPLER_REDSTONE_TIME -> dpAE
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> erbC
    java.lang.String SAMPLER_HOPPER_TICK -> qudV
    java.lang.String SAMPLER_HOPPER_SECOND -> Vetp
    java.lang.String SAMPLER_HOPPER_TIME -> VTsa
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> Fowt
    java.lang.String SAMPLER_FLUID_TICK -> QMtg
    java.lang.String SAMPLER_FLUID_SECOND -> LrKT
    java.lang.String SAMPLER_FLUID_TIME -> nBHS
    java.lang.String SAMPLER_TPS -> DYRK
    java.lang.String SAMPLER_TICK -> nIvw
    java.lang.String SAMPLER_TIU -> hQVm
    java.lang.String SAMPLER_MEM -> aoGV
    java.lang.String SAMPLER_FREEMEM -> OrcQ
    java.lang.String SAMPLER_MAXMEM -> cJYM
    java.lang.String SAMPLER_ALLOCMEM -> aoFr
    java.lang.String SAMPLER_MAHS -> MdMS
    java.lang.String SAMPLER_CHK -> TqRR
    java.lang.String SAMPLER_ATASK -> OirW
    java.lang.String SAMPLER_STASK -> hIFp
    java.lang.String SAMPLER_CHK_TIME -> gFDY
    java.lang.String SAMPLER_EXPLOSION_TIME -> ktRx
    java.lang.String SAMPLER_CHKS -> nJWi
    java.lang.String SAMPLER_ENT -> nRgo
    java.lang.String SAMPLER_ENTLIV -> qSaJ
    java.lang.String SAMPLER_ENTDROP -> OXsO
    java.lang.String SAMPLER_ENTTILE -> JswQ
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> vQrK
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> KLgF
    java.lang.String ACTION_CULL_ENTITIES_NAME -> xrLO
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> NDoF
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> jpsJ
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> loJF
    java.lang.String ACTION_UPDATE_FLUID_NAME -> BtpO
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> mOiC
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> aCuO
    java.lang.String ACTION_LOCK_FLUID_STATUS -> inOm
    java.lang.String ACTION_LOCK_FLUID_NAME -> FWKL
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> TiDc
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> hHho
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> xqjQ
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> hIJR
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> TyeT
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> ejUB
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> BAjl
    java.lang.String ACTION_LOCK_HOPPER_NAME -> Elxo
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> KoIh
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> yBHy
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> ctnJ
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> URSe
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> bPIA
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> weua
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> TiBv
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> eirO
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> VUVp
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> lDTC
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> rgft
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> vbrF
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> OQCS
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> HwBm
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> rgga
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> dDmB
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> gVgG
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> BBNl
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> HLQP
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> vsvm
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> gglA
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> PBes
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> UIeR
    java.lang.String ACTION_FIX_LIGHTING_NAME -> aTwn
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> QEia
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> RHmC
    java.lang.String ACTION_COLLECT_GARBAGE -> hkOj
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> lLfk
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> fBea
    8:234:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> lCeb:
    java.lang.String BUNDLE_NAME -> mrMs
    java.util.ResourceBundle RESOURCE_BUNDLE -> HKqI
    java.util.ResourceBundle PRIMARY_BUNDLE -> esHN
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> wTex:
    react.React instance -> Drhv
    react.controller.SampleController sampleController -> wews
    react.controller.PlayerController playerController -> nBKi
    react.controller.MonitorController monitorController -> MlaH
    react.controller.CommandController commandController -> CxVD
    react.controller.ActionController actionController -> CgTS
    react.controller.FastDecayController fastDecayController -> NgTA
    react.controller.EntityStackController entityStackController -> ncnP
    react.controller.GlassController glassController -> sIJd
    react.controller.EntityCullController entityCullController -> KDXC
    react.controller.SpikeController spikeController -> aTvh
    react.controller.SecurityController securityController -> MSOX
    react.controller.RedstoneController redstoneController -> PKWP
    react.controller.HopperController hopperController -> oUnn
    react.controller.PhysicsController physicsController -> OQDu
    react.controller.TickTimeController tickTimeController -> Aqog
    react.controller.RAIController raiController -> ndNc
    react.controller.FluidController fluidController -> SLOu
    react.controller.ChunkController chunkController -> qJsg
    react.controller.GraphController graphController -> PvLB
    react.controller.ChronophyFluidController fluidChronophyController -> kRTW
    react.controller.EventController eventController -> OQEa
    react.controller.BlockInjectController blockInjectController -> upsB
    react.controller.SmearTickController smearTickController -> gxlH
    react.controller.FeatureController featureController -> ndRN
    react.controller.HopperOvertickController hopperPlungeController -> VMLA
    react.controller.BenchmarkController benchmarkController -> LiaD
    react.controller.LanguageController languageController -> IFeL
    react.controller.RemoteController remoteController -> esJD
    react.controller.ExplosiveController explosiveController -> OYWo
    react.controller.WorldController worldController -> ksyl
    44:44:void <init>() -> <init>
    142:150:void enable() -> enable
    156:156:void disable() -> disable
react.React$1 -> wTex$1:
    react.React this$0 -> jqWm
    1:142:void <init>(react.React) -> <init>
    147:148:void run() -> run
react.action.ActionCollectGarbage -> QEXs:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
react.action.ActionCollectGarbage$1 -> QEXs$1:
    react.action.ActionCollectGarbage this$0 -> MBPc
    react.action.source.IActionSource val$source -> dofX
    1:29:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> BJOF
react.action.ActionCollectGarbage$1$1 -> QEXs$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> ydQP
    long val$mbnex -> WaPc
    long val$mbmem -> CpIQ
    react.action.source.IActionSource val$source -> dofX
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.action.source.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> OYFK:
    long ms -> uhdt
    int lcd -> YwwU
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
    27:27:void access$0(react.action.ActionCullEntities,long) -> BJOF
    28:28:int access$1(react.action.ActionCullEntities) -> BJOF
    27:27:long access$2(react.action.ActionCullEntities) -> CMRG
react.action.ActionCullEntities$1 -> OYFK$1:
    react.action.ActionCullEntities this$0 -> LOoG
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> OYFK$2:
    react.action.ActionCullEntities this$0 -> LOoG
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> OYFK$3:
    react.action.ActionCullEntities this$0 -> LOoG
    react.glang.FinalInteger val$completed -> vsyJ
    react.glang.FinalInteger val$total -> qTIT
    react.glang.FinalInteger val$totalCulled -> ejYG
    react.glang.FinalInteger val$totalChunked -> kbxP
    react.action.source.IActionSource val$source -> dofX
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> OYFK$4:
    react.action.ActionCullEntities this$0 -> LOoG
    react.action.source.IActionSource val$source -> dofX
    react.glang.FinalInteger val$totalCulled -> ejYG
    react.glang.FinalInteger val$totalChunked -> kbxP
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> oVAY:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
react.action.ActionFixLighting$1 -> oVAY$1:
    react.action.ActionFixLighting this$0 -> lLgy
    1:28:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> oVAY$2:
    react.action.ActionFixLighting this$0 -> lLgy
    react.action.source.IActionSource val$source -> dofX
    int val$ch -> kAUP
    1:77:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> BJOF
    1:1:void run(java.lang.Object) -> BJOF
react.action.ActionFixLighting$3 -> oVAY$3:
    react.action.ActionFixLighting this$0 -> lLgy
    1:88:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> BJOF
    1:1:void run(java.lang.Object) -> BJOF
react.action.ActionLockFluid -> mGHq:
    int lcd -> YwwU
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
react.action.ActionLockFluid$1 -> mGHq$1:
    react.action.ActionLockFluid this$0 -> DbIL
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> mGHq$2:
    react.action.ActionLockFluid this$0 -> DbIL
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> fAtW:
    int lcd -> YwwU
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
react.action.ActionLockHopper$1 -> fAtW$1:
    react.action.ActionLockHopper this$0 -> cAlx
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> fAtW$2:
    react.action.ActionLockHopper this$0 -> cAlx
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> OOtD:
    int lcd -> YwwU
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
react.action.ActionLockRedstone$1 -> OOtD$1:
    react.action.ActionLockRedstone this$0 -> YpEp
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> OOtD$2:
    react.action.ActionLockRedstone this$0 -> YpEp
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> LyoS:
    long ms -> uhdt
    int lcd -> YwwU
    boolean fail -> weyi
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> CMRG
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> BJOF
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> BJOF
    26:26:int access$2(react.action.ActionPurgeChunks) -> CMRG
    25:25:long access$3(react.action.ActionPurgeChunks) -> lKug
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> BJOF
react.action.ActionPurgeChunks$1 -> LyoS$1:
    react.action.ActionPurgeChunks this$0 -> eHTW
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> LyoS$2:
    react.action.ActionPurgeChunks this$0 -> eHTW
    int val$dk -> FyQF
    java.lang.Object val$j -> ksxi
    react.action.source.IActionSource val$source -> dofX
    react.api.ISelector[] val$selectors -> GjqX
    react.glang.FinalInteger val$acompleted -> PdkE
    react.glang.FinalInteger val$completed -> vsyJ
    react.glang.FinalInteger val$total -> qTIT
    react.glang.FinalInteger val$totalCulled -> ejYG
    react.glang.FinalInteger val$totalChunked -> kbxP
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.action.source.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> BJOF
react.action.ActionPurgeChunks$2$1 -> LyoS$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> sjoP
    react.glang.FinalInteger val$acompleted -> PdkE
    react.glang.FinalInteger val$completed -> vsyJ
    react.glang.FinalInteger val$total -> qTIT
    react.glang.FinalInteger val$totalCulled -> ejYG
    react.glang.FinalInteger val$totalChunked -> kbxP
    react.action.source.IActionSource val$source -> dofX
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> LyoS$3:
    react.action.ActionPurgeChunks this$0 -> eHTW
    react.action.source.IActionSource val$source -> dofX
    react.glang.FinalInteger val$acompleted -> PdkE
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> LyoS$4:
    react.action.ActionPurgeChunks this$0 -> eHTW
    org.bukkit.Chunk val$chunk -> Vnky
    java.lang.Runnable val$cb -> PBgl
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> sbMJ:
    long ms -> uhdt
    int lcd -> YwwU
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> CMRG
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> BJOF
    30:30:int access$1(react.action.ActionPurgeEntities) -> BJOF
    29:29:long access$2(react.action.ActionPurgeEntities) -> CMRG
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> BJOF
react.action.ActionPurgeEntities$1 -> sbMJ$1:
    react.action.ActionPurgeEntities this$0 -> RkQi
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> sbMJ$2:
    react.action.ActionPurgeEntities this$0 -> RkQi
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> sbMJ$3:
    react.action.ActionPurgeEntities this$0 -> RkQi
    react.glang.FinalInteger val$completed -> vsyJ
    react.glang.FinalInteger val$total -> qTIT
    react.glang.FinalInteger val$totalCulled -> ejYG
    react.glang.FinalInteger val$totalChunked -> kbxP
    react.action.source.IActionSource val$source -> dofX
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> sbMJ$4:
    react.action.ActionPurgeEntities this$0 -> RkQi
    react.action.source.IActionSource val$source -> dofX
    react.glang.FinalInteger val$totalCulled -> ejYG
    react.glang.FinalInteger val$totalChunked -> kbxP
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> sbMJ$5:
    react.action.ActionPurgeEntities this$0 -> RkQi
    org.bukkit.entity.Entity val$i -> VMJc
    react.glang.FinalInteger val$cu -> xFxx
    int val$k -> hjnv
    org.bukkit.Chunk val$chunk -> Vnky
    java.lang.Runnable val$cb -> PBgl
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> AXLY:
    int lcd -> YwwU
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
react.action.ActionUnlockFluid$1 -> AXLY$1:
    react.action.ActionUnlockFluid this$0 -> IOVN
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> myli:
    int lcd -> YwwU
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
react.action.ActionUnlockHopper$1 -> myli$1:
    react.action.ActionUnlockHopper this$0 -> WPMk
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> Qoli:
    int lcd -> YwwU
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
react.action.ActionUnlockRedstone$1 -> Qoli$1:
    react.action.ActionUnlockRedstone this$0 -> qJyV
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> OOtD
    1:1:java.lang.Object get() -> get
react.action.source.AccessActionSource -> HBlr:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> BJOF
    26:33:void sendResponseSuccess(java.lang.String) -> CMRG
    38:45:void sendResponseError(java.lang.String) -> lKug
    50:57:void sendResponseActing(java.lang.String) -> lCeb
react.action.source.ActionHandle -> PSVY:
    react.action.source.ActionHandle AUTOMATIC -> NDuE
    react.action.source.ActionHandle MANUAL -> GABQ
    react.action.source.ActionHandle MUTEX -> NfxM
    react.action.source.ActionHandle[] ENUM$VALUES -> fBhl
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.action.source.ActionHandle[] values() -> values
    1:1:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
react.action.source.ConsoleActionSource -> XJLi:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> BJOF
    18:19:void sendResponseSuccess(java.lang.String) -> CMRG
    24:25:void sendResponseError(java.lang.String) -> lKug
    30:31:void sendResponseActing(java.lang.String) -> lCeb
react.action.source.IActionSource -> kbeB:
    void sendResponse(java.lang.String) -> BJOF
    void sendResponseSuccess(java.lang.String) -> CMRG
    void sendResponseError(java.lang.String) -> lKug
    void sendResponseActing(java.lang.String) -> lCeb
react.action.source.PlayerActionSource -> jpbr:
    org.bukkit.entity.Player p -> qJyD
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> BJOF
    30:31:void sendResponseSuccess(java.lang.String) -> CMRG
    36:37:void sendResponseError(java.lang.String) -> lKug
    42:43:void sendResponseActing(java.lang.String) -> lCeb
react.action.source.RAIActionSource -> gVXa:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> BJOF
    16:17:void sendResponseSuccess(java.lang.String) -> CMRG
    22:23:void sendResponseError(java.lang.String) -> lKug
    28:29:void sendResponseActing(java.lang.String) -> lCeb
react.api.Action -> LXKi:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> IOXb
    java.lang.String[] nodes -> EeOc
    react.action.source.ActionHandle handle -> GYsX
    react.api.ActionState state -> hYpf
    react.api.ActionTargetType target -> GbeE
    react.api.ActionType type -> IFgc
    react.action.source.IActionSource currentSource -> KgAc
    double progress -> TGHN
    react.glang.GMap defaultSelectors -> SCaw
    28:29:void <init>(react.api.ActionType) -> <init>
    31:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> BJOF
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> BJOF
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> LyoS
    94:94:react.api.ActionState getState() -> sbMJ
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> wTex
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> AXLY
    130:130:react.api.ActionType getType() -> myli
    136:136:react.glang.GMap getDefaultSelectors() -> Qoli
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> CMRG
    189:190:void completeAction() -> HBlr
    195:195:react.action.source.IActionSource getCurrentSource() -> PSVY
    201:201:java.lang.String[] getNodes() -> XJLi
    207:208:void setNodes(java.lang.String[]) -> BJOF
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
react.api.ActionAlreadyRunningException -> iCML:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> KvkO:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> bWiW:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> xhip:
    react.api.ActionState IDLE -> GYrA
    react.api.ActionState RUNNING -> tech
    react.api.ActionState[] ENUM$VALUES -> Ubyu
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> SeQV:
    react.api.ActionTargetType POSITIONAL -> pagl
    react.api.ActionTargetType SYSTEM -> ndST
    react.api.ActionTargetType[] ENUM$VALUES -> Xlco
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> QNJD:
    react.api.ActionType FIX_LIGHTING -> TOWI
    react.api.ActionType UNLOCK_FLUID -> KLkr
    react.api.ActionType LOCK_FLUID -> HwHb
    react.api.ActionType UNLOCK_HOPPER -> BKDn
    react.api.ActionType LOCK_HOPPER -> pYWg
    react.api.ActionType UNLOCK_REDSTONE -> fBhL
    react.api.ActionType LOCK_REDSTONE -> xrOu
    react.api.ActionType CULL_ENTITIES -> jhfq
    react.api.ActionType COLLECT_GARBAGE -> qCHc
    react.api.ActionType PURGE_ENTITIES -> twEn
    react.api.ActionType PURGE_CHUNKS -> Pune
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> GYsX
    react.api.ActionTargetType target -> GbeE
    react.api.ActionType[] ENUM$VALUES -> SwHa
    6:18:void <clinit>() -> <clinit>
    25:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> kbeB
    50:50:react.api.ActionTargetType getTarget() -> AXLY
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> ivPh:
    react.api.ActivationRangeType ANIMALS -> iCaR
    react.api.ActivationRangeType MONSTERS -> IiJh
    react.api.ActivationRangeType MISC -> tmtF
    react.api.ActivationRangeType[] ENUM$VALUES -> xPQO
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> gDvS:
    int value() -> value
react.api.Async -> lCdT:
react.api.CPUBenchmark -> eOrA:
    org.bukkit.command.CommandSender sender -> sender
    int score -> vkmM
    java.lang.Runnable onFinish -> qeOQ
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> jpbr
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> BJOF
    13:13:int access$1(react.api.CPUBenchmark) -> CMRG
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> lKug
react.api.CPUBenchmark$1 -> eOrA$1:
    react.api.CPUBenchmark this$0 -> PvQk
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> eOrA$2:
    react.api.CPUBenchmark this$0 -> PvQk
    1:77:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> jxri:
    react.api.CPUResult ULTRA_SLOW -> lxCK
    react.api.CPUResult VERY_SLOW -> VoSI
    react.api.CPUResult SLOW -> qBju
    react.api.CPUResult AVERAGE -> hcFC
    react.api.CPUResult GOOD -> RcGE
    react.api.CPUResult FAST -> ifHe
    react.api.CPUResult VERY_FAST -> QEod
    react.api.CPUResult ULTRA_FAST -> gpcW
    java.lang.String m -> MRty
    react.api.CPUResult[] ENUM$VALUES -> Euqq
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> BJOF
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> hPii:
    react.glang.GMap cache -> DsPU
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> CMRG
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> lKug
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> gVXa
    54:54:boolean has(java.lang.Object) -> lCeb
react.api.Capability -> TWSO:
    react.api.Capability DUAL_WEILD -> ggqV
    react.api.Capability SCOREBOARD -> erlw
    react.api.Capability SCOREBOARD_ADVANCED -> BuYM
    react.api.Capability HOPPER -> XSUk
    react.api.Capability ENTITY_ATTRIBUTES -> QWRf
    react.api.Capability ENTITY_AI -> Yojj
    react.api.Capability ACTION_BAR -> vIjB
    react.api.Capability ENTITY_NAMES -> RACl
    react.api.Capability TITLE_BAR -> iwJK
    react.api.Capability CHUNK_RELIGHTING -> INwt
    react.api.Capability MONITOR_SUBMISSIVENESS -> wMLm
    react.api.Capability ACCELERATED_PING -> sYrC
    react.api.Capability ENTITY_THROTTLING -> rEmJ
    react.api.Capability TILE_THROTTLING -> bYAu
    react.api.Capability PASSENGERS -> SCcs
    react.glang.GList capabilities -> ctvM
    react.surge.util.Protocol version -> yJbP
    react.api.Flavor flavor -> SegU
    java.lang.String plugin -> yKBa
    java.lang.String name -> name
    14:48:void <clinit>() -> <clinit>
    55:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> LXKi
    100:100:boolean isFlavorCapable() -> iCML
    105:105:boolean isVersionCapable() -> KvkO
    110:110:boolean isCapable() -> bWiW
    115:115:react.surge.util.Protocol getVersion() -> xhip
    120:120:react.api.Flavor getFlavor() -> SeQV
    125:125:java.lang.String getPlugin() -> QNJD
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> BJOF
    153:167:void sendNotCapable(react.action.source.IActionSource) -> BJOF
react.api.CapabilityBasis -> yIhy:
    react.api.CapabilityBasis VERSION -> psLb
    react.api.CapabilityBasis FLAVOR -> qBir
    react.api.CapabilityBasis PLUGIN -> DamD
    react.api.CapabilityBasis[] ENUM$VALUES -> SCeH
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.CapabilityBasis[] values() -> values
    1:1:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> HCOL:
    react.api.ChunkIssue ENTITY -> kAXf
    react.api.ChunkIssue HOPPER -> fTMV
    react.api.ChunkIssue REDSTONE -> HCfH
    react.api.ChunkIssue FLUID -> HDFg
    react.api.ChunkIssue PHYSICS -> rgoc
    react.api.ChunkIssue[] ENUM$VALUES -> BuYg
    3:9:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
react.api.Clip -> oxBh:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> OOsQ:
    org.bukkit.command.CommandSender sender -> sender
    12:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> BJOF
    31:32:void sendResponseSuccess(java.lang.String) -> CMRG
    37:38:void sendResponseError(java.lang.String) -> lKug
    43:44:void sendResponseActing(java.lang.String) -> lCeb
react.api.CullList -> GPlb:
    react.glang.GSet toCull -> xjEk
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> wTex
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> ivPh
react.api.DTest -> WynC:
    6:6:void <init>() -> <init>
    11:62:int test() -> gDvS
react.api.EntityFlag -> FyAO:
    react.api.EntityFlag NAMED -> Aqwe
    react.api.EntityFlag TAMED -> KxFc
    react.api.EntityFlag STACKED -> QWTV
    react.api.EntityFlag RIDDEN -> GYwT
    react.api.EntityFlag LEASHED -> ansc
    java.lang.String m -> MRty
    react.api.EntityFlag[] ENUM$VALUES -> CpOR
    8:14:void <clinit>() -> <clinit>
    18:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> QEXs
    40:70:boolean is(org.bukkit.entity.Entity) -> OYFK
    76:76:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> lDID:
    react.glang.GSet entityTypes -> bGby
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> lCdT
react.api.EntitySample -> vkXX:
    react.glang.GMap counts -> LYGL
    react.glang.GMap sets -> FErf
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> eOrA
    45:45:react.glang.GList getTypes() -> jxri
    50:57:int total() -> hPii
    62:67:int get(org.bukkit.entity.EntityType) -> BJOF
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> CMRG
    84:96:void add(org.bukkit.entity.Entity) -> wTex
react.api.Experimental -> byoa:
react.api.Flavor -> Mtci:
    react.api.Flavor ANY -> JInf
    react.api.Flavor SAFE_MODE -> qTON
    react.api.Flavor CRAFT_BUKKIT -> ObPP
    react.api.Flavor BUKKIT -> dDxQ
    react.api.Flavor SPIGOT -> nSUt
    react.api.Flavor SOGGY_SPIGOT -> PCOx
    react.api.Flavor PAPER_SPIGOT -> XSWr
    react.api.Flavor TACO_SPIGOT -> lVAG
    react.api.Flavor TORCH_SPIGOT -> jymT
    react.api.Flavor FORGE_HACK -> ePkJ
    react.api.Flavor SPONGE_HACK -> iUGr
    react.api.Flavor[] ENUM$VALUES -> ydWK
    6:18:void <clinit>() -> <clinit>
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> TWSO
    74:79:boolean compatableWith(react.api.Flavor) -> BJOF
    84:84:java.lang.String fancyName() -> yIhy
    1:1:react.api.Flavor[] values() -> values
    1:1:react.api.Flavor valueOf(java.lang.String) -> valueOf
react.api.IAction -> UQfw:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> LyoS
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> CMRG
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
    react.api.ActionState getState() -> sbMJ
    react.api.ActionTargetType getTarget() -> AXLY
    void setNodes(java.lang.String[]) -> BJOF
    java.lang.String[] getNodes() -> XJLi
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> wTex
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> myli
    react.glang.GMap getDefaultSelectors() -> Qoli
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> BJOF
    react.api.ISelector[] biselect(react.api.ISelector[]) -> BJOF
    react.action.source.IActionSource getCurrentSource() -> PSVY
    void completeAction() -> HBlr
react.api.ICache -> NxHL:
    react.glang.GSet get(java.lang.Object) -> CMRG
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> lKug
    void clear() -> clear
    boolean has(java.lang.Object) -> lCeb
    react.glang.GList k() -> gVXa
react.api.ICommand -> HTSV:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> HCOL
    java.lang.String[] getPermissions() -> oxBh
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> QEXs
    react.api.SideGate getSideGate() -> OOsQ
    void registerParameterDescription(java.lang.String,java.lang.String) -> BJOF
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
react.api.IRecord -> TWVJ:
    java.lang.String getRecordType() -> GPlb
    long getRecordTime() -> WynC
    react.json.JSONObject toJSON() -> FyAO
    java.lang.Object getRecordObject() -> lDID
    void fromJSON(react.json.JSONObject) -> BJOF
react.api.IRecordBook -> pHCo:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> BJOF
    long getOldestRecordTime() -> vkXX
    void addRecord(react.api.IRecord) -> BJOF
    long getLatestRecordTime() -> byoa
    int countRecords(long,long) -> BJOF
    react.glang.GMap getRecords(long,long) -> CMRG
    int purgeRecordsBefore(long) -> CMRG
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> SBpS:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> Mtci
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> UQfw
    react.surge.util.C getAltColor() -> NxHL
    void setColor(react.surge.util.C,react.surge.util.C) -> BJOF
    int getInterval() -> getInterval
    void setInterval(int) -> CMRG
    void sample() -> HTSV
    java.lang.String get() -> get
    void construct() -> TWVJ
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> cSAL:
    react.api.SelectionMode getMode() -> pHCo
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> wTex
    react.glang.GSet getList() -> SBpS
    react.glang.GSet getPossibilities() -> cSAL
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> QEXs
    java.lang.String getName() -> getName
react.api.Injection -> uNbI:
    react.api.InjectionMethod value() -> uNbI
react.api.InjectionMethod -> mynf:
    react.api.InjectionMethod SWAP -> FyWM
    react.api.InjectionMethod SUBSTRATE -> dgYx
    react.api.InjectionMethod RELOAD -> Lier
    react.api.InjectionMethod[] ENUM$VALUES -> jOXt
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> nuBf:
    java.lang.String value() -> value
react.api.MSampler -> xFjH:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> mynf
react.api.MonitorHeading -> UYwg:
    react.api.ISampler head -> lfaI
    react.glang.GList children -> vJKW
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> BJOF
    27:27:react.api.ISampler getHead() -> nuBf
    32:33:void setHead(react.api.ISampler) -> CMRG
    37:37:react.glang.GList getChildren() -> xFjH
    42:42:java.lang.String getHeadText() -> UYwg
    47:60:java.lang.String getChildText() -> uhUJ
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> BJOF
react.api.NoiseGenerator -> uhUJ:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> uhTj:
    react.api.NoiseGenerator[] octaves -> oDvF
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> uhTj
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> UtJW:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> RtIX
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> UtJW
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> kIUN:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> BJOF
react.api.Permissable -> Vejj:
    react.api.Permissable ACCESS -> Jkpg
    react.api.Permissable MONITOR -> fBlc
    react.api.Permissable MONITOR_TITLE -> xYBl
    react.api.Permissable MONITOR_ACTIONLOG -> loVE
    react.api.Permissable MONITOR_MAP -> rguV
    react.api.Permissable MONITOR_ENVIRONMENT -> ymKT
    react.api.Permissable MONITOR_GLASSES -> gyXa
    react.api.Permissable MONITOR_CHUNK_BLAME -> XSYc
    react.api.Permissable RAI_MONITOR -> aMRg
    react.api.Permissable RAI_CONTROL -> mrXV
    react.api.Permissable RAI_ACCESS -> ydYW
    react.api.Permissable RAI -> aUdL
    react.api.Permissable ACT -> cJiA
    react.api.Permissable RELOAD -> xPUB
    java.lang.String node -> TrBY
    react.api.Permissable[] ENUM$VALUES -> ejaX
    7:22:void <clinit>() -> <clinit>
    26:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> BJOF
    46:46:java.lang.String getNode() -> kIUN
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PluginSelfDeleter -> NEBW:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> Vwgc
    java.lang.Runnable r -> tLYA
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> BJOF
react.api.ReactCommand -> kHtR:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> JlUH
    java.lang.String usage -> kJOW
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> XAxC
    react.api.SideGate sideGate -> MmNG
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> QEXs
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> BJOF
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> HCOL
    47:47:java.lang.String[] getPermissions() -> oxBh
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> OOsQ
react.api.ReactException -> Mtbj:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> eied:
    react.glang.GMap keystore -> NMjo
    boolean monitoring -> monitoring
    boolean highMonitor -> Ukqd
    boolean actionlogging -> GcIm
    boolean glasses -> gguF
    boolean mapping -> rgsu
    int monitorSelection -> ETRe
    int plays -> FErw
    boolean monitorPosted -> wfcD
    int monitorLastSelection -> UdBb
    int switchNotification -> QOEH
    int hotbarSlot -> kdAc
    boolean shift -> iLYO
    int scroll -> bifc
    double lastHeight -> SwMt
    boolean heightMovement -> maVa
    org.bukkit.entity.Player p -> qJyD
    24:40:void <clinit>() -> <clinit>
    43:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> Vejj
    128:128:boolean isMapping() -> NEBW
    133:133:org.bukkit.entity.Player getP() -> kHtR
    138:140:void setMonitoring(boolean) -> CMRG
    144:146:void setMapping(boolean) -> lKug
    150:150:int getMonitorSelection() -> Mtbj
    155:157:void setMonitorSelection(int) -> lKug
    161:161:int getHotbarSlot() -> eied
    166:168:void setHotbarSlot(int) -> lCeb
    172:172:boolean isShifting() -> PBVn
    177:179:void setShifting(boolean) -> lCeb
    183:183:boolean isShift() -> IyWx
    188:190:void setShift(boolean) -> wTex
    194:194:int getScroll() -> Jjxl
    199:201:void setScroll(int) -> wTex
    205:205:int getMonitorLastSelection() -> INcx
    210:212:void setMonitorLastSelection(int) -> QEXs
    216:217:void setP(org.bukkit.entity.Player) -> CMRG
    221:221:double getLastHeight() -> NMRo
    226:228:void setLastHeight(double) -> BJOF
    232:232:boolean isHeightMovement() -> fdYP
    237:239:void setHeightMovement(boolean) -> QEXs
    243:243:int getSwitchNotification() -> paUL
    248:250:void setSwitchNotification(int) -> OYFK
    254:254:boolean getMonitorPosted() -> vITL
    259:261:void setMonitorPosted(boolean) -> OYFK
    265:265:int getPlays() -> wmyL
    270:272:void setPlays(int) -> oVAY
    276:276:boolean isGlasses() -> MuCu
    281:283:void setGlasses(boolean) -> oVAY
    287:287:boolean isActionlogging() -> FNOI
    292:294:void setActionlogging(boolean) -> mGHq
react.api.Record -> PBVn:
    java.lang.String recordType -> JdCX
    long recordTime -> wnsV
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> GPlb
    32:32:long getRecordTime() -> WynC
    38:38:java.lang.Object getRecordObject() -> lDID
    react.json.JSONObject toJSON() -> FyAO
    void fromJSON(react.json.JSONObject) -> BJOF
react.api.RecordBook -> IyWx:
    java.io.File recordFile -> NpNt
    react.json.JSONObject js -> iKxS
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> BJOF
    79:87:react.api.IRecord getRecord(long) -> BJOF
    react.api.IRecord createDummyRecord(long,java.lang.String) -> BJOF
    95:107:long getOldestRecordTime() -> vkXX
    113:125:long getLatestRecordTime() -> byoa
    130:130:boolean within(long,long,long) -> BJOF
    136:144:int countRecords(long,long) -> BJOF
    150:162:react.glang.GMap getRecords(long,long) -> CMRG
    168:181:int purgeRecordsBefore(long) -> CMRG
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> Jjxl:
react.api.SampledChunk -> INcx:
    org.bukkit.Chunk c -> migH
    react.glang.GMap counts -> LYGL
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> LXPi
    26:38:void hit(react.api.ChunkIssue,int) -> BJOF
    42:42:org.bukkit.Chunk getC() -> uWUo
    47:47:react.glang.GMap getCounts() -> GHaK
react.api.SampledType -> NMRo:
    react.api.SampledType ENTITY_TIME_LOCK -> gVrf
    react.api.SampledType TILE_TIME_LOCK -> twLK
    react.api.SampledType ENTITY_TIME -> YpOW
    react.api.SampledType TILE_TIME -> xHBr
    react.api.SampledType ENTITY_DROPTICK -> rEqJ
    react.api.SampledType TILE_DROPTICK -> ccxl
    react.api.SampledType REDSTONE_TICK_USAGE -> JdCb
    react.api.SampledType REDSTONE_TICK -> nSWa
    react.api.SampledType REDSTONE_SECOND -> gNcI
    react.api.SampledType REDSTONE_TIME -> gyWS
    react.api.SampledType HOPPER_TICK_USAGE -> RjyY
    react.api.SampledType HOPPER_TICK -> wVBK
    react.api.SampledType HOPPER_SECOND -> TGMR
    react.api.SampledType HOPPER_TIME -> qKbX
    react.api.SampledType FLUID_TICK_USAGE -> vlSo
    react.api.SampledType FLUID_TICK -> rEtT
    react.api.SampledType FLUID_SECOND -> hIYR
    react.api.SampledType FLUID_TIME -> BmOX
    react.api.SampledType TPS -> Rslt
    react.api.SampledType TICK -> ePpE
    react.api.SampledType TIU -> aoXL
    react.api.SampledType MEM -> AXjB
    react.api.SampledType FREEMEM -> hbit
    react.api.SampledType MAXMEM -> mXga
    react.api.SampledType ALLOCMEM -> bYIf
    react.api.SampledType MAHS -> OIBg
    react.api.SampledType CHK_TIME -> cJjX
    react.api.SampledType EXPLOSION_TIME -> HoBX
    react.api.SampledType CHK -> AjMc
    react.api.SampledType ATASK -> Puuw
    react.api.SampledType STASK -> hIXH
    react.api.SampledType CHKS -> CMpC
    react.api.SampledType ENT -> ETTh
    react.api.SampledType ENTLIV -> erqp
    react.api.SampledType ENTDROP -> uhoN
    react.api.SampledType ENTTILE -> IqcA
    java.lang.String node -> TrBY
    react.api.SampledType[] ENUM$VALUES -> URbG
    6:43:void <clinit>() -> <clinit>
    49:49:react.api.ISampler get() -> MRbl
    55:55:java.lang.String toString() -> toString
    58:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> kIUN
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> fdYP:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> DIBC
    react.surge.util.C altColor -> GsmF
    int interval -> tDIk
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> UQfw
    49:49:react.surge.util.C getAltColor() -> NxHL
    55:55:int getInterval() -> getInterval
    void sample() -> HTSV
    void construct() -> TWVJ
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> BJOF
    107:108:void setInterval(int) -> CMRG
react.api.Sector -> paUL:
    int value() -> value
react.api.SelectionException -> vITL:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> wmyL:
    react.api.SelectionMode WHITELIST -> WHGV
    react.api.SelectionMode BLACKLIST -> UteH
    react.api.SelectionMode[] ENUM$VALUES -> TyrO
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> MuCu:
    java.lang.Class objectType -> nBYA
    react.api.SelectionMode mode -> EKdM
    react.glang.GSet list -> TiQp
    react.glang.GSet possibilities -> QhXr
    int popoff -> bXgk
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> pHCo
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> wTex
    43:43:react.glang.GSet getList() -> SBpS
    49:49:react.glang.GSet getPossibilities() -> cSAL
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> QEXs
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> OYFK
    98:100:int pop() -> pop
react.api.SelectorEntityType -> FNOI:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> lKug
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> QEXs
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> oVAY
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> LXPi:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> uWUo:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> lKug
    29:30:void add(org.bukkit.Chunk,int) -> BJOF
    34:38:void add(org.bukkit.World) -> oVAY
    42:46:void addAll() -> oDbk
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> QEXs
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> oVAY
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> GHaK:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> QEXs
    87:87:java.lang.String getName() -> getName
react.api.Side -> MRbl:
    react.api.Side PLAYERS -> xGdb
    react.api.Side CONSOLE -> gOFI
    java.lang.String ss -> cllX
    react.api.Side[] ENUM$VALUES -> sQfp
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> RarY
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> CMRG
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> oDbk:
    react.api.SideGate PLAYERS_ONLY -> gEsg
    react.api.SideGate CONSOLES_ONLY -> XAxf
    react.api.SideGate ANYTHING -> VDcl
    int[] $SWITCH_TABLE$react$api$SideGate -> dMlT
    react.api.SideGate[] ENUM$VALUES -> dgbM
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> BJOF
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> MBBa
react.api.SimplexNoiseGenerator -> RarY:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> CMqB
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> INgT
react.api.SimplexOctaveGenerator -> MBBa:
    double wScale -> JAcr
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> BJOF
react.api.SpecializedTickLimiter -> INgT:
    double rMaxTime -> TrEg
    long rStartTime -> TOau
    double rLastTime -> UAdG
    long rMark -> jFpO
    double tMaxTime -> IqfG
    react.gmath.Average atimes -> wfhR
    react.gmath.Average adropped -> Yorv
    int droppedTicks -> LjOF
    boolean entityTick -> XeAL
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> EvAA:
    react.glang.GList sources -> IOcS
    react.glang.GList splooge -> RALO
    react.glang.GSet destroy -> VTlx
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> BJOF
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> CMRG
    void clipped(org.bukkit.Location) -> CMRG
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> lKug
    boolean isAllowedSource(org.bukkit.Location) -> lCeb
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> BJOF
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> CMRG
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> lKug
react.api.SploogeCounter$1 -> EvAA$1:
    react.api.SploogeCounter this$0 -> rOGl
    java.util.Iterator val$it -> OQTo
    org.bukkit.Location val$start -> WjMm
    int val$maxDistance -> qduk
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> BJOF
react.api.SploogeCounter$1$1 -> EvAA$1$1:
    react.api.SploogeCounter$1 this$1 -> STpH
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> cdCx:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> RQRQ:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> FyAO
    38:49:void fromJSON(react.json.JSONObject) -> BJOF
react.api.StackTraceRecordBook -> OjLM:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> CMRG
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> BJOF
react.api.StackedEntity -> UtMa:
    org.bukkit.entity.LivingEntity entity -> Ortv
    int count -> count
    double rmx -> TaCY
    20:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> BJOF
    46:46:int getAbsoluteMaxCount() -> EvAA
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> CMRG
    56:58:void update() -> update
    62:68:void signalSize() -> cdCx
    72:123:void updateHealth() -> RQRQ
    127:128:void heal(double) -> CMRG
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> OjLM
    142:142:int getEffectiveCount(double) -> lKug
    147:147:double getEffectiveMaxHealth(int) -> mGHq
    152:152:double getRealMaxHealth() -> UtMa
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> BJOF
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> Qopj:
    react.glang.GList headings -> OkEi
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> BJOF
    24:24:int getMaxSelection() -> Qopj
    29:37:int left(int) -> fAtW
    42:50:int right(int) -> OOtD
    55:55:react.api.MonitorHeading getHeadFor(int) -> LyoS
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> BJOF
    83:100:java.lang.String getHotbarFor(int,boolean) -> BJOF
react.api.Unused -> VCjs:
react.api.WorldConfig -> CxKU:
    boolean allowRai -> JReB
    boolean allowActions -> KDep
    boolean allowRelighting -> PKeW
    boolean allowTileThrottling -> fvYB
    boolean allowEntityThrottling -> EKfL
    boolean allowFastLeafDecay -> HoBg
    java.util.List assumeNoSideEffectsEntities -> uiQv
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> mGHq
    48:62:void save(org.bukkit.World) -> fAtW
    66:80:void load(org.bukkit.World) -> OOtD
react.binject.BlockInjector -> xhoF:
    react.surge.util.Protocol protocol -> FqLt
    java.lang.Class blocksClass -> DauK
    12:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> BJOF
    29:56:void inject() -> VCjs
    61:61:react.surge.util.Protocol getVersion() -> xhip
react.binject.IBlockInjector -> mqaI:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> BJOF
    void add(int,java.lang.String,java.lang.Object) -> BJOF
    java.lang.Object get(java.lang.String) -> get
    void inject() -> VCjs
    react.surge.util.Protocol getVersion() -> xhip
react.binject.InjectedBlock -> iTQy:
    react.surge.util.Protocol getInjectProtocol() -> CxKU
    java.lang.String getInjectKey() -> xhoF
    java.lang.String getInjectCKey() -> mqaI
    int getInjectId() -> iTQy
react.binject.ReflectionUtil -> dnuW:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> BJOF
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> BJOF
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> BJOF
    41:54:void setAccessible(java.lang.reflect.Field) -> BJOF
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> BJOF
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> BJOF
react.binject.V10.BlockInjector10 -> EmNH:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> OYFK
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> BJOF
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> BJOF
react.binject.V11.BlockInjector11 -> LiQT:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> oVAY
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> BJOF
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> BJOF
react.binject.V12.BlockInjector12 -> tSqD:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> mGHq
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> BJOF
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> BJOF
react.binject.V8.BlockInjector8 -> clST:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> fAtW
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> BJOF
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> BJOF
react.binject.V9.BlockInjector9 -> ksjW:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> OOtD
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> BJOF
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> BJOF
react.cache.CachedEntity -> kQgW:
    java.util.UUID uid -> UAcK
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> rOFi
    double x -> x
    double y -> y
    double z -> z
    double vx -> Pdvt
    double vy -> Datu
    double vz -> xXhP
    double dx -> WHMH
    double dy -> urEx
    double dz -> OYfe
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> oVAY
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> dnuW
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> EmNH
    120:121:void setVx(double) -> lCeb
    125:125:double getVy() -> LiQT
    130:131:void setVy(double) -> wTex
    135:135:double getVz() -> tSqD
    140:141:void setVz(double) -> QEXs
    145:145:double getDx() -> clST
    150:151:void setDx(double) -> OYFK
    155:155:double getDy() -> ksjW
    160:161:void setDy(double) -> oVAY
    165:165:double getDz() -> kQgW
    170:171:void setDz(double) -> mGHq
    175:175:java.util.UUID getUid() -> ssQo
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> ssQo:
    int age -> UkyH
    boolean ageLock -> eIEA
    boolean breed -> DbXq
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> oVAY
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> QopA
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> fRxQ
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> QopA:
    org.bukkit.DyeColor dye -> LGmM
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> oVAY
    30:30:org.bukkit.DyeColor getDye() -> Oqye
    35:36:void setDye(org.bukkit.DyeColor) -> BJOF
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> fRxQ:
    react.glang.GList potionEffects -> Sndg
    boolean canPickupItems -> UdIB
    org.bukkit.inventory.ItemStack[] armorContents -> ePrt
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> TXTT
    double maxHealth -> maxHealth
    int maxAir -> ekGH
    int air -> YhDX
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> oVAY
    63:63:react.glang.GList getPotionEffects() -> ylRR
    68:69:void setPotionEffects(react.glang.GList) -> CMRG
    73:73:boolean isCanPickupItems() -> rNLI
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> PJhw
    138:139:void setMaxAir(int) -> sbMJ
    143:143:int getAir() -> pXfD
    148:149:void setAir(int) -> AXLY
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> Oqye:
    boolean sheared -> ifRP
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> oVAY
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> ylRR:
    org.bukkit.inventory.ItemStack is -> psWR
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> oVAY
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> rNLI:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> PJhw:
    react.chronophysics.HopperDirection DOWN -> YFAV
    react.chronophysics.HopperDirection NORTH -> eYcr
    react.chronophysics.HopperDirection SOUTH -> QNiv
    react.chronophysics.HopperDirection EAST -> BTBc
    react.chronophysics.HopperDirection WEST -> NFAt
    int direction -> direction
    int[] $SWITCH_TABLE$react$chronophysics$HopperDirection -> GAMe
    react.chronophysics.HopperDirection[] ENUM$VALUES -> Jchf
    6:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> wTex
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> BJOF
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> CMRG
    1:1:react.chronophysics.HopperDirection[] values() -> values
    1:1:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    6:6:int[] $SWITCH_TABLE$react$chronophysics$HopperDirection() -> DaYn
react.chronophysics.HopperWormhole -> pXfD:
    org.bukkit.block.Hopper source -> twRQ
    react.glang.GList path -> XTAA
    org.bukkit.block.Hopper destination -> qLFX
    17:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> cuEO
    31:31:react.glang.GList getPath() -> INfR
    36:36:org.bukkit.block.Hopper getDestination() -> wKwe
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> BJOF
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> DaYn:
    org.bukkit.block.Hopper h -> KxMy
    13:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> BJOF
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> dMSb
    62:62:boolean isLockedByRedstone() -> iTQm
react.command.CommandAct -> cuEO:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> BJOF
    186:192:react.text.RTX getBeginningRTX() -> qmKQ
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> BJOF
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> CMRG
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> lKug
    331:346:react.glang.GList getSortedCommands() -> HLDY
    351:358:int getPageSize(int) -> myli
    363:363:boolean isValidPage(int,int) -> BJOF
    368:377:react.glang.GList getPage(int,int) -> CMRG
react.command.CommandActionLog -> INfR:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
react.command.CommandCPUScore -> wKwe:
    15:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
react.command.CommandCapabilities -> dMSb:
    19:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
react.command.CommandChunkBlame -> iTQm:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
react.command.CommandChunkBlame$1 -> iTQm$1:
    react.command.CommandChunkBlame this$0 -> IFsN
    org.bukkit.command.CommandSender val$sender -> uqdU
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> iTQm$1$1:
    react.command.CommandChunkBlame$1 this$1 -> BdcB
    org.bukkit.command.CommandSender val$sender -> uqdU
    java.lang.String val$i -> CMrh
    react.glang.GMap val$top -> TWuy
    int val$totalx -> SLbn
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> qmKQ:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
react.command.CommandHelp -> HLDY:
    28:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> BJOF
    81:87:react.text.RTX getBeginningRTX() -> qmKQ
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> BJOF
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> CMRG
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> lKug
    208:215:react.glang.GList getSortedCommands() -> HLDY
    220:227:int getPageSize(int) -> myli
    232:232:boolean isValidPage(int,int) -> BJOF
    237:246:react.glang.GList getPage(int,int) -> CMRG
react.command.CommandHighMonitor -> AGPO:
    16:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
react.command.CommandMap -> uEql:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
react.command.CommandMonitor -> gpOS:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
react.command.CommandReload -> rDyQ:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
react.command.CommandReload$1 -> rDyQ$1:
    react.command.CommandReload this$0 -> USIn
    org.bukkit.command.CommandSender val$sender -> uqdU
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> rDyQ$1$1:
    react.command.CommandReload$1 this$1 -> NNTu
    org.bukkit.command.CommandSender val$sender -> uqdU
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> wekF:
    28:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
    54:63:org.bukkit.inventory.ItemStack makeBook() -> AGPO
    68:94:void addSpikePages(react.glang.GList) -> lKug
    98:108:void addStatusPages(react.glang.GList) -> lCeb
    112:129:int findSlot(org.bukkit.entity.Player) -> lKug
react.command.CommandVersion -> dEEs:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJOF
react.controller.ActionController -> KDNV:
    int kiv -> wEIm
    react.glang.GMap actions -> wLxt
    react.glang.GMap pending -> STsS
    react.glang.GList tasks -> iCqN
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> BJOF
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> CMRG
    141:141:react.api.IAction getAction(react.api.ActionType) -> BJOF
    146:147:void registerAction(react.api.IAction) -> BJOF
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> uEql
    241:248:react.glang.GList getActionNames() -> gpOS
react.controller.BenchmarkController -> uNgB:
    react.api.CPUBenchmark finished -> HwXR
    boolean done -> opVm
    int score -> vkmM
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    16:16:void access$0(react.controller.BenchmarkController,boolean) -> BJOF
    15:15:void access$1(react.controller.BenchmarkController,react.api.CPUBenchmark) -> BJOF
    15:15:react.api.CPUBenchmark access$2(react.controller.BenchmarkController) -> BJOF
react.controller.BenchmarkController$1 -> uNgB$1:
    react.controller.BenchmarkController this$0 -> AsDD
    1:26:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
    26:26:react.controller.BenchmarkController access$0(react.controller.BenchmarkController$1) -> BJOF
react.controller.BenchmarkController$1$1 -> uNgB$1$1:
    react.controller.BenchmarkController$1 this$1 -> HLdL
    1:31:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
    31:31:react.controller.BenchmarkController$1 access$0(react.controller.BenchmarkController$1$1) -> BJOF
react.controller.BenchmarkController$1$1$1 -> uNgB$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> pPvP
    1:36:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> hjcu:
    react.glang.GMap rangeMapping -> hQoe
    react.binject.IBlockInjector injector -> jhwW
    boolean injected -> IWvx
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> rDyQ
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> wekF
    115:115:react.binject.IBlockInjector getInjector() -> dEEs
    120:120:boolean isInjected() -> KDNV
react.controller.ChronophyFluidController -> tSsg:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> bGOt:
    boolean firstTickList -> IFui
    long firstTick -> qKgy
    long lastTick -> LGoO
    react.gmath.Average aCSMS -> bYOl
    react.glang.GMap pluginLoads -> OIHl
    react.glang.GMap playerLoads -> PnOK
    int serverLoads -> KDlR
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> uNgB
    63:73:void tickNextTickList() -> hjcu
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> BJOF
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> BJOF
    171:171:boolean isFirstTickList() -> tSsg
    176:176:long getFirstTick() -> bGOt
    181:181:long getLastTick() -> VoAi
    186:186:react.gmath.Average getaCSMS() -> Xtfj
    191:191:react.glang.GMap getPluginLoads() -> hasS
    196:196:react.glang.GMap getPlayerLoads() -> TFWr
    201:201:int getServerLoads() -> OOyg
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> BJOF
    29:29:int access$1(react.controller.ChunkController) -> CMRG
    29:29:void access$2(react.controller.ChunkController,int) -> BJOF
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> lKug
react.controller.ChunkController$1 -> bGOt$1:
    react.controller.ChunkController this$0 -> uGRv
    org.bukkit.event.world.ChunkLoadEvent val$e -> pHeC
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> lKug
    1:1:void run(java.lang.Object) -> BJOF
react.controller.CommandController -> VoAi:
    react.glang.GList commands -> KxPD
    boolean k -> JuLa
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> mGHq
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> fAtW
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> BJOF
    317:317:react.glang.GList getCommands() -> owiY
    322:323:void setCommands(react.glang.GList) -> wTex
    327:327:boolean isK() -> maBQ
    332:333:void setK(boolean) -> fAtW
react.controller.EntityCullController -> Xtfj:
    react.glang.GSet flags -> fKhN
    react.glang.GSet defer -> jiVm
    react.glang.GMap maxs -> NWFI
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> MReW
    172:180:int cull(org.bukkit.Chunk) -> lCeb
    185:290:int partialCull(org.bukkit.Chunk) -> wTex
react.controller.EntityStackController -> hasS:
    react.glang.GList stacks -> Ojhy
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> QEXs
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> lKug
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> lCeb
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> BJOF
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> BJOF
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> wTex
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> BJOF
react.controller.EntityStackController$1 -> hasS$1:
    react.controller.EntityStackController this$0 -> CFEx
    org.bukkit.event.entity.EntitySpawnEvent val$e -> ChGo
    1:248:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> TFWr:
    react.glang.GMap slots -> EnMs
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> BJOF
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> BJOF
react.controller.ExplosiveController -> OOyg:
    boolean firstTickList -> IFui
    long firstTick -> qKgy
    long lastTick -> LGoO
    react.gmath.Average aCSMS -> bYOl
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> uNgB
    50:60:void tickNextTickList() -> hjcu
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> BJOF
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> BJOF
    89:89:boolean isFirstTickList() -> tSsg
    94:94:long getFirstTick() -> bGOt
    99:99:long getLastTick() -> VoAi
    104:104:react.gmath.Average getaCSMS() -> Xtfj
react.controller.FastDecayController -> owiY:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> nTAX
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> BJOF
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> BJOF
    74:155:void checkBreak(org.bukkit.block.Block) -> lKug
    159:190:void decay(org.bukkit.block.Block) -> lCeb
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> wTex
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> roox
react.controller.FastDecayController$1 -> owiY$1:
    react.controller.FastDecayController this$0 -> TrIT
    react.glang.GMap val$locs -> qnLI
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> lKug
    99:99:boolean isAllowedSource(org.bukkit.Location) -> lCeb
    105:124:void clipped(org.bukkit.Location) -> CMRG
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> BJOF
react.controller.FastDecayController$1$1 -> owiY$1$1:
    react.controller.FastDecayController$1 this$1 -> YxhA
    react.glang.GMap val$locs -> qnLI
    int val$i -> kdHo
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> owiY$2:
    react.controller.FastDecayController this$0 -> TrIT
    org.bukkit.block.Block val$b -> UtlH
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FeatureController -> maBQ:
    react.feature.INMSBinding trueBinding -> HLbt
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> cRcq
    85:85:java.lang.String getPackageVersion() -> uhXg
    90:90:boolean hasBinding() -> xFma
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> BJOF
react.controller.FluidController -> MReW:
    react.glang.GSet ignore -> UIvr
    int flowsPerTick -> eryD
    int flowsPerSecond -> VUkc
    react.gmath.Average aFST -> jqiu
    react.gmath.Average aFSS -> OYjl
    react.gmath.Average aFSMS -> vRjI
    boolean firstTickList -> IFui
    long firstTick -> qKgy
    long lastTick -> LGoO
    react.glang.GSet frozen -> iDSv
    react.glang.GMap queue -> eQYl
    react.glang.GMap freezeTimes -> bbCb
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> QEXs
    68:76:void checkChunks() -> awRW
    80:97:void checkChunk(org.bukkit.Chunk) -> OYFK
    101:107:void queue(org.bukkit.block.Block) -> QEXs
    111:111:boolean isFrozen(org.bukkit.Chunk) -> oVAY
    116:117:void freeze(org.bukkit.Chunk) -> mGHq
    121:127:void unfreeze(org.bukkit.Chunk) -> fAtW
    131:138:void freeze(org.bukkit.Chunk,long) -> BJOF
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> uNgB
    172:182:void tickNextTickList() -> hjcu
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> BJOF
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> BJOF
    248:248:react.glang.GSet getIgnore() -> QWBL
    253:253:int getTransfersPerTick() -> HeXv
    258:258:int getTransfersPerSecond() -> KwTA
    263:263:react.gmath.Average getaFST() -> FWCO
    268:268:react.gmath.Average getaFSS() -> cAau
    273:273:react.gmath.Average getaFSMS() -> AaCe
    278:278:boolean isFirstTickList() -> tSsg
    283:283:long getFirstTick() -> bGOt
    288:288:long getLastTick() -> VoAi
    293:293:react.glang.GSet getFrozen() -> DjNf
    298:298:react.glang.GMap getQueue() -> EvCQ
    303:303:react.glang.GMap getFreezeTimes() -> RsVn
react.controller.GlassController -> roox:
    react.glang.GMap q -> CgjW
    react.glang.GList g -> XTFD
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> lCeb
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> wTex
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> QEXs
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> BJOF
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> BJOF
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> BJOF
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> BJOF
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> BJOF
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> BJOF
    36:36:react.glang.GList access$0(react.controller.GlassController) -> BJOF
react.controller.GlassController$1 -> roox$1:
    react.controller.GlassController this$0 -> xbBF
    react.glang.GMap val$cc -> YMur
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> roox$1$1:
    react.controller.GlassController$1 this$1 -> MeHL
    org.bukkit.Location val$i -> BJsQ
    org.bukkit.entity.Player val$j -> tDSQ
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> cRcq:
    react.glang.GMap g -> UBKY
    react.glang.GMap gr -> yKRD
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> BJOF
    121:156:void toggleMapping(org.bukkit.entity.Player) -> OYFK
    160:160:react.glang.GMap getG() -> VTlx
    165:165:react.glang.GMap getGr() -> SCSc
    31:31:react.glang.GMap access$0(react.controller.GraphController) -> BJOF
    30:30:react.glang.GMap access$1(react.controller.GraphController) -> CMRG
react.controller.GraphController$1 -> cRcq$1:
    react.controller.GraphController this$0 -> AsET
    1:48:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> cRcq$2:
    react.controller.GraphController this$0 -> AsET
    1:84:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> cRcq$3:
    react.controller.GraphController this$0 -> AsET
    org.bukkit.event.player.PlayerJoinEvent val$e -> MeGi
    1:100:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> uhXg:
    react.glang.GSet ignore -> UIvr
    int transfersPerTick -> TaIb
    int transfersPerSecond -> TaJA
    react.gmath.Average aHST -> BKVH
    react.gmath.Average aHSS -> infW
    react.gmath.Average aHSMS -> bsCV
    boolean firstTickList -> IFui
    long firstTick -> qKgy
    long lastTick -> LGoO
    react.glang.GSet frozen -> iDSv
    react.glang.GMap queue -> eQYl
    react.glang.GMap freezeTimes -> bbCb
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> QEXs
    65:73:void checkChunks() -> awRW
    77:94:void checkChunk(org.bukkit.Chunk) -> OYFK
    98:104:void queue(org.bukkit.block.Block) -> QEXs
    108:108:boolean isFrozen(org.bukkit.Chunk) -> oVAY
    113:114:void freeze(org.bukkit.Chunk) -> mGHq
    118:124:void unfreeze(org.bukkit.Chunk) -> fAtW
    128:135:void freeze(org.bukkit.Chunk,long) -> BJOF
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> uNgB
    169:179:void tickNextTickList() -> hjcu
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> BJOF
    207:207:react.glang.GSet getIgnore() -> QWBL
    212:212:int getTransfersPerTick() -> HeXv
    217:217:int getTransfersPerSecond() -> KwTA
    222:222:react.gmath.Average getaHST() -> Huwt
    227:227:react.gmath.Average getaHSS() -> YEDy
    232:232:react.gmath.Average getaHSMS() -> STUc
    237:237:boolean isFirstTickList() -> tSsg
    242:242:long getFirstTick() -> bGOt
    247:247:long getLastTick() -> VoAi
    252:252:react.glang.GSet getFrozen() -> DjNf
    257:257:react.glang.GMap getQueue() -> EvCQ
    262:262:react.glang.GMap getFreezeTimes() -> RsVn
react.controller.HopperOvertickController -> xFma:
    react.glang.GList possiblePlunge -> yKPs
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> lKug
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> BJOF
react.controller.LanguageController -> awRW:
    java.io.File languageFolder -> MeFd
    int oldVersion -> wwmq
    java.io.File dlf -> IFwP
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> mysB
    160:221:void downloadAll(boolean) -> OOtD
    225:261:void downloadLanguage(java.lang.String) -> LyoS
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> sbMJ
    315:315:java.io.File getFileForLanguage(java.lang.String) -> AXLY
    320:332:void writeDefaults() -> cBAf
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> BJOF
    263:263:void access$1(react.controller.LanguageController) -> BJOF
react.controller.LanguageController$1 -> awRW$1:
    react.controller.LanguageController this$0 -> XvHG
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> awRW$2:
    react.controller.LanguageController this$0 -> XvHG
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> BJOF
react.controller.LanguageController$2$1 -> awRW$2$1:
    react.controller.LanguageController$2 this$1 -> toFU
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> BJOF
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> BJOF
    121:121:void onDownloadStarted(react.gnet.download.Download) -> BJOF
    126:128:void onDownloadFinished(react.gnet.download.Download) -> CMRG
    134:134:void onDownloadFailed(react.gnet.download.Download) -> lKug
react.controller.LanguageController$3 -> awRW$3:
    react.controller.LanguageController this$0 -> XvHG
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> awRW$3$1:
    react.controller.LanguageController$3 this$1 -> ieuH
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> awRW$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> pIGX
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> awRW$4:
    react.controller.LanguageController this$0 -> XvHG
    java.io.File val$dld -> TPKT
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> BJOF
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> BJOF
    245:245:void onDownloadStarted(react.gnet.download.Download) -> BJOF
    250:251:void onDownloadFinished(react.gnet.download.Download) -> CMRG
    257:257:void onDownloadFailed(react.gnet.download.Download) -> lKug
react.controller.MonitorController -> QWBL:
    int maxCooldown -> jaLL
    react.api.TitleMonitor titleMonitor -> cmXW
    react.glang.GMap posts -> kdOP
    react.slate.PhantomSlate sb -> OkPB
    boolean ready -> xYSM
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> MIre
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> oVAY
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> mGHq
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> SBrp
    179:184:float calcVolume(react.api.ReactPlayer) -> BJOF
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> fAtW
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> OOtD
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> LyoS
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> sbMJ
    219:223:void startMonitoring(org.bukkit.entity.Player) -> AXLY
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> myli
    242:247:void startActionLogging(org.bukkit.entity.Player) -> Qoli
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> HBlr
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> CMRG
    279:291:void processPlayer(react.api.ReactPlayer) -> lKug
    296:296:void handleActionLog(org.bukkit.entity.Player) -> PSVY
    300:324:void handleTriggers(react.api.ReactPlayer) -> lCeb
    328:367:void handleScrolling(react.api.ReactPlayer) -> wTex
    371:399:void handleShifting(react.api.ReactPlayer) -> QEXs
    403:425:void handlePosting(react.api.ReactPlayer) -> OYFK
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> BJOF
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> BJOF
    471:501:void tickMonitor(react.api.ReactPlayer) -> oVAY
    505:505:react.api.TitleMonitor getTitleMonitor() -> jWXH
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> BJOF
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> BJOF
    539:552:void onTick() -> SKdW
    556:578:void updateActionBoard() -> FxdA
    583:583:java.lang.String getTickName() -> qBYc
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> BJOF
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> BJOF
    41:41:void access$2(react.controller.MonitorController,boolean) -> BJOF
    41:41:boolean access$3(react.controller.MonitorController) -> CMRG
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> lKug
react.controller.MonitorController$1 -> QWBL$1:
    react.controller.MonitorController this$0 -> XmXg
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> QWBL$2:
    react.controller.MonitorController this$0 -> XmXg
    1:556:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> HeXv:
    react.glang.GMap samples -> hsvP
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> OOtD
    51:52:void onHopper(org.bukkit.Chunk) -> LyoS
    56:57:void onFluid(org.bukkit.Chunk) -> sbMJ
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> BJOF
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> BJOF
    80:91:void onTick() -> SKdW
    96:96:java.lang.String getTickName() -> qBYc
    101:101:react.glang.GMap getSamples() -> vbjD
react.controller.PlayerController -> KwTA:
    react.glang.GList players -> QOSH
    react.glang.GSet save -> baeA
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> XJLi
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> BJOF
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> kbeB
    113:113:react.glang.GList getPlayers() -> lULi
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> BJOF
react.controller.PlayerController$1 -> KwTA$1:
    react.controller.PlayerController this$0 -> WHTA
    react.glang.GList val$toSave -> KwuC
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> FWCO:
    react.rai.IRAI rai -> KEQQ
    boolean raiEnabled -> HTxh
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    20:20:react.rai.IRAI access$0(react.controller.RAIController) -> BJOF
react.controller.RAIController$1 -> FWCO$1:
    react.controller.RAIController this$0 -> bXsP
    1:48:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> cAau:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> lKug
react.controller.ReactServerInfo -> AaCe:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> cJRc
    27:27:int dgetGameProtocol() -> oxIB
    33:33:java.lang.String dgetGameVersion() -> owhL
    39:39:java.lang.String dgetReactVersion() -> WaBi
    45:45:int dgetMaxPlayers() -> cccu
    51:58:react.glang.GList dgetConnectedPlayers() -> ivWW
    64:64:int dgetViewDistance() -> skCU
    70:70:int dgetGamePort() -> IFXX
    76:76:java.lang.String dgetGameAddress() -> MSGe
    82:89:react.glang.GList dgetRemotePlugins() -> aept
    95:102:react.glang.GList dgetWorlds() -> rxdN
    108:108:react.glang.GList dgetActions() -> ydGY
    114:114:react.glang.GList dgetSamplers() -> rVaV
react.controller.RedstoneController -> DjNf:
    react.glang.GSet ignore -> UIvr
    react.glang.GSet frozen -> iDSv
    react.glang.GMap queue -> eQYl
    react.glang.GMap freezeTimes -> bbCb
    int redstonePerTick -> tMFX
    int redstonePerSecond -> jFvk
    react.gmath.Average aRST -> OIJw
    react.gmath.Average aRSS -> GRTl
    react.gmath.Average aRSMS -> bXqj
    boolean firstTickList -> IFui
    long firstTick -> qKgy
    long lastTick -> LGoO
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> QEXs
    95:101:void tick() -> tick
    105:113:void checkChunks() -> awRW
    117:134:void checkChunk(org.bukkit.Chunk) -> OYFK
    138:144:void queue(org.bukkit.block.Block) -> QEXs
    148:148:boolean isFrozen(org.bukkit.Chunk) -> oVAY
    153:154:void freeze(org.bukkit.Chunk) -> mGHq
    158:165:void flushTickList() -> uNgB
    169:179:void tickNextTickList() -> hjcu
    183:189:void unfreeze(org.bukkit.Chunk) -> fAtW
    193:200:void freeze(org.bukkit.Chunk,long) -> BJOF
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> BJOF
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> BJOF
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> BJOF
    246:246:react.glang.GSet getIgnore() -> QWBL
    251:251:react.glang.GSet getFrozen() -> DjNf
    256:256:react.glang.GMap getQueue() -> EvCQ
    261:261:react.glang.GMap getFreezeTimes() -> RsVn
    266:266:int getRedstonePerTick() -> hPtI
    271:271:int getRedstonePerSecond() -> imjD
    276:276:react.gmath.Average getaRST() -> FWDa
    281:281:react.gmath.Average getaRSS() -> VUQY
    286:286:react.gmath.Average getaRSMS() -> bFrK
    291:291:boolean isFirstTickList() -> tSsg
    296:296:long getFirstTick() -> bGOt
    301:301:long getLastTick() -> VoAi
react.controller.RemoteController -> EvCQ:
    react.remote.server.RemoteServer remoteServer -> ogiG
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> OYNX
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> BJOF
react.controller.RemoteController$1 -> EvCQ$1:
    react.controller.RemoteController this$0 -> AagC
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> EvCQ$2:
    react.controller.RemoteController this$0 -> AagC
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> OHMJ
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> kbmW
react.controller.SampleController -> RsVn:
    react.glang.GMap samplers -> TFxG
    react.surge.server.SuperSampler ss -> QqTU
    int cd -> GQtS
    28:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> Smjb
    69:74:void restartSuperSampler() -> ggcH
    78:79:void registerSampler(react.api.ISampler) -> lKug
    83:83:react.api.ISampler getSampler(java.lang.String) -> myli
    88:131:void constructSamplers() -> mrFF
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> ghDM
    187:209:void onTick() -> SKdW
    214:214:java.lang.String getTickName() -> qBYc
    219:219:react.glang.GMap getSamplers() -> ykue
    224:224:react.surge.server.SuperSampler getSs() -> anbl
    229:229:int getCd() -> oxKp
    234:241:react.glang.GList getSamplerNames() -> QFBk
    25:25:react.surge.server.SuperSampler access$0(react.controller.SampleController) -> BJOF
react.controller.SampleController$1 -> RsVn$1:
    react.controller.SampleController this$0 -> JRln
    1:140:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> RsVn$2:
    react.controller.SampleController this$0 -> JRln
    1:152:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> VTlx:
    java.lang.String ipa -> IPJr
    react.glang.GList failures -> mrdB
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> Qoli
    41:74:void checkForIP() -> hbTk
    78:91:void scan(java.lang.Runnable) -> BJOF
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> VTlx$1:
    react.controller.SecurityController this$0 -> NVht
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> VTlx$2:
    java.lang.String val$ip -> bHQh
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> VTlx$3:
    java.lang.Thread val$t -> JRmU
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> SCSc:
    react.glang.GMap etl -> tCri
    react.glang.GMap ttl -> axSU
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> BJOF
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> BJOF
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> LyoS
    143:160:void releaseWorld(org.bukkit.World) -> sbMJ
    164:181:double getUniversalEntityTick() -> mPAq
    186:203:double getUniversalEntityLimit() -> biTU
    208:225:double getUniversalTileLimit() -> GQUV
    230:247:double getUniversalTileTick() -> Ubmc
    252:264:double getUniversalEntityDroppedTicks() -> eGiH
    269:281:double getUniversalTileDroppedTicks() -> XSEp
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> BJOF
    301:312:void setTileTickLimit(org.bukkit.World,double) -> CMRG
    316:321:double getEntityTickLimit(org.bukkit.World) -> AXLY
    326:331:double getTileTickLimit(org.bukkit.World) -> myli
    336:341:double getLastEntityTick(org.bukkit.World) -> Qoli
    346:351:double getLastTileTick(org.bukkit.World) -> HBlr
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> PSVY
    366:371:double getTileDroppedTicks(org.bukkit.World) -> XJLi
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> BJOF
react.controller.SpikeController -> Huwt:
    react.glang.GMap spikes -> IPJw
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> SKdW
    111:111:java.lang.String getTickName() -> qBYc
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> RQTk
    128:160:void whoFuckingDidThis(react.glang.Callback) -> BJOF
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> BJOF
react.controller.SpikeController$1 -> Huwt$1:
    react.controller.SpikeController this$0 -> uhyU
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> Huwt$1$1:
    react.controller.SpikeController$1 this$1 -> bsEf
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> Huwt$2:
    react.controller.SpikeController this$0 -> uhyU
    react.glang.GMap val$vv -> wxPw
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> Huwt$3:
    react.controller.SpikeController this$0 -> uhyU
    java.lang.Thread val$t -> JRmU
    react.glang.Callback val$callback -> URoY
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> YEDy:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> STUc:
    12:12:void <init>() -> <init>
    17:23:void start() -> start
    28:34:void stop() -> stop
    40:40:void tick() -> tick
    45:46:void on(org.bukkit.event.world.WorldUnloadEvent) -> BJOF
react.event.ReactEvent -> mysB:
    org.bukkit.event.HandlerList handlers -> DbaE
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> cBAf:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> MIre:
    react.event.ScrollDirection direction -> Ulat
    boolean cancellled -> oFJD
    int amount -> hIdw
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> EJnY
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> OXlX
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> SBrp:
    react.event.ScrollDirection DOWN -> BeLD
    react.event.ScrollDirection UP -> FhgK
    react.event.ScrollDirection[] ENUM$VALUES -> NyPQ
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.feature.INMSBinding -> jWXH:
    java.lang.String getPackageVersion() -> uhXg
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> BJOF
react.feature.NMSBinding -> SKdW:
    java.lang.String packageVersion -> UuRs
    7:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> uhXg
react.feature.NMSBinding10 -> FxdA:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> BJOF
react.feature.NMSBinding11 -> qBYc:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> BJOF
react.feature.NMSBinding12 -> vbjD:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> BJOF
react.feature.NMSBinding8 -> lULi:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> BJOF
react.feature.NMSBinding9 -> cJRc:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> BJOF
react.gbench.Profiler -> oxIB:
    long nanos -> rNqp
    long startNano -> oMyX
    long millis -> wpDd
    long startMillis -> MvLn
    double time -> dhMg
    boolean profiling -> nBdr
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> Qoli
    78:78:double getTicks() -> JQmX
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> qvAC
    93:93:double getHours() -> aTnt
    98:98:double getMilliseconds() -> ieWa
    103:103:long getNanoseconds() -> cJTc
    108:108:long getNanos() -> hbUE
    113:113:long getStartNano() -> QMpq
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> MuKB
    128:128:double getTime() -> cSFH
    133:133:boolean isProfiling() -> NEIL
react.gconcurrent.A -> owhL:
    react.gconcurrent.ParallelPoolManager mgr -> iUXo
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> owhL$1:
    react.gconcurrent.A this$0 -> EwGG
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> WaBi:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> cccu:
    react.gconcurrent.QueueMode mode -> uPKS
    react.glang.GList threads -> mYUS
    int next -> vcoQ
    int threadCount -> MCHp
    java.util.Queue squeue -> HLkF
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> Rbxa
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> APeW
    22:23:void syncQueue(react.gconcurrent.Execution) -> BJOF
    long getNanoGate() -> sYcH
    29:51:void tickSyncQueue() -> dVLI
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> xFqw
    102:109:int getTotalQueueSize() -> wfSW
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> CMRG
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> gyHK
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> BSJR
    161:188:void updateThreadInformation() -> MSIe
    192:224:react.gconcurrent.ParallelThread nextThread() -> aDQT
    229:235:void createThreads(int) -> HBlr
    239:239:react.gconcurrent.QueueMode getMode() -> OiqE
    244:244:int getNext() -> WaGb
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> qubw
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> LiYD
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> mWuI
react.gconcurrent.ParallelThread -> ivWW:
    java.util.Queue queue -> LHSy
    react.gconcurrent.ThreadInformation info -> Rbxa
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> fAtW
    63:70:void execute(react.gconcurrent.Execution) -> lKug
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> CMRG
    92:92:java.util.Queue getQueue() -> rEbH
    97:97:react.gconcurrent.ThreadInformation getInfo() -> LPGP
react.gconcurrent.QueueMode -> skCU:
    react.gconcurrent.QueueMode ROUND_ROBIN -> iMGx
    react.gconcurrent.QueueMode SMALLEST -> FiGK
    react.gconcurrent.QueueMode[] ENUM$VALUES -> jFyV
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> IFXX:
    react.gconcurrent.ParallelPoolManager mgr -> iUXo
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> IFXX$1:
    react.gconcurrent.S this$0 -> EnSr
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> MSGe:
    long tick -> HLiO
    long atick -> GIeq
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> aept:
    double ticksPerSecond -> tLer
    int queuedSize -> IOku
    boolean processing -> WYUp
    double utilization -> rORD
    react.gmath.Average ticksPerSecondAverage -> stWa
    long tick -> HLiO
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> dgMK
    33:35:void setTicksPerSecond(double) -> OOtD
    39:39:int getQueuedSize() -> jqOI
    44:45:void setQueuedSize(int) -> PSVY
    49:49:boolean isProcessing() -> OHNj
    54:55:void setProcessing(boolean) -> LyoS
    59:59:double getUtilization() -> OiqM
    64:65:void setUtilization(double) -> LyoS
    69:69:double getTicksPerSecondAverage() -> rMpv
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> ccjA
    89:89:int getId() -> getId
react.gformat.F -> rxdN:
    java.text.NumberFormat NF -> dyNI
    java.text.DecimalFormat DF -> ChPl
    java.lang.String[] NAMES -> nJxN
    java.math.BigInteger THOUSAND -> WYYD
    java.util.NavigableMap MAP -> JJbF
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> HBlr
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> BJOF
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> BJOF
    201:221:java.lang.String timeLong(long,int) -> BJOF
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> lKug
    236:236:java.lang.String b(double) -> sbMJ
    241:258:java.lang.String b(java.math.BigInteger) -> BJOF
    263:267:void instantiate() -> URQR
    279:279:java.lang.String fileSize(long) -> lCeb
    292:292:java.lang.String memSize(long) -> wTex
    305:306:java.lang.String stamp(long) -> QEXs
    322:349:java.lang.String ofSize(long,int) -> CMRG
    363:368:java.lang.String trim(java.lang.String,int) -> CMRG
    381:401:java.lang.String cname(java.lang.String) -> PSVY
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> OYFK
    459:477:java.lang.String memx(long) -> oVAY
    491:492:java.lang.String f(long) -> mGHq
    504:505:java.lang.String f(int) -> XJLi
    519:528:java.lang.String f(double,int) -> CMRG
    544:553:java.lang.String fd(double,int) -> lKug
    567:576:java.lang.String f(float,int) -> BJOF
    587:587:java.lang.String f(double) -> AXLY
    598:598:java.lang.String f(float) -> BJOF
    613:613:java.lang.String pc(double,int) -> lCeb
    628:628:java.lang.String pc(float,int) -> CMRG
    641:641:java.lang.String pc(double) -> myli
    654:654:java.lang.String pc(float) -> CMRG
    670:670:java.lang.String pc(int,int,int) -> BJOF
    684:684:java.lang.String pc(int,int) -> lKug
    700:700:java.lang.String pc(long,long,int) -> BJOF
    714:714:java.lang.String pc(long,long) -> lCeb
    726:726:java.lang.String msSeconds(long) -> fAtW
    740:740:java.lang.String msSeconds(long,int) -> lKug
    752:752:java.lang.String nsMs(long) -> OOtD
    766:766:java.lang.String nsMs(long,int) -> lCeb
    780:780:java.lang.String nsMsd(long,int) -> wTex
react.glang.AccessCallback -> ydGY:
    java.lang.Object get() -> get
react.glang.Adapter -> rVaV:
    java.lang.Object adapt(java.lang.Object) -> QEXs
    java.lang.Object onAdapt(java.lang.Object) -> OYFK
react.glang.Callback -> hPtI:
    java.lang.Object t -> qTbR
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> BJOF
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> imjD:
    double i -> JtuO
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> Qoli
react.glang.FinalFloat -> FWDa:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> lKug
react.glang.FinalInteger -> VUQY:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> kbeB
react.glang.FinalLong -> bFrK:
    long i -> wofM
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> LyoS
react.glang.FinalString -> OYNX:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> OHMJ:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> QEXs
    java.lang.Object onAdapt(java.lang.Object) -> OYFK
react.glang.GBiset -> kbmW:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> fedI
    java.lang.Object b -> vRom
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> FNVI
    53:54:void setA(java.lang.Object) -> oVAY
    63:63:java.lang.Object getB() -> UtTH
    73:74:void setB(java.lang.Object) -> mGHq
react.glang.GList -> Smjb:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> lCeb
    45:52:react.glang.GList grepDistance(int,int) -> wTex
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> CMRG
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> YxPB
    188:190:react.glang.GList shuffleCopy() -> XIwX
    198:199:void shuffle() -> Smlm
    210:236:react.glang.GList split() -> MIxU
    248:248:boolean hasIndex(int) -> jpbr
    258:259:java.lang.Object pickRandom() -> MJXt
    270:277:react.glang.GList stringList() -> kcQH
    288:292:void forEach(react.glang.Callback) -> CMRG
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> gVXa
    336:336:react.glang.GList cropFrom(int) -> LXKi
    341:373:react.glang.GList split(int) -> iCML
    389:389:react.glang.GList cropTo(int) -> KvkO
    406:416:react.glang.GList crop(int,int) -> QEXs
    427:431:react.glang.GList removeDuplicates() -> HKjc
    442:446:void removeAll(java.lang.Object) -> fAtW
    455:455:boolean hasDuplicates() -> SmmL
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> dUjG
    484:490:void push(java.lang.Object,int) -> BJOF
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> OOtD
    528:532:void add(java.util.List) -> BJOF
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> BBJH
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> FWET
    626:627:react.glang.GList qdel(java.lang.Object) -> LyoS
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> Yfkf
    662:669:java.lang.Object popLast() -> fdaN
    674:683:java.lang.Object popRandom() -> GbYB
react.glang.GListAdapter -> ggcH:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> CMRG
    java.lang.Object onAdapt(java.lang.Object) -> OYFK
react.glang.GMap -> mrFF:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> QovD
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> BJOF
    64:81:react.glang.GMap flip() -> wvsQ
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> BJOF
    121:121:react.glang.GList k() -> gVXa
    131:131:react.glang.GSet kset() -> XIuf
    141:141:react.glang.GList v() -> YVJr
    151:151:react.glang.GSet vset() -> qvCV
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> CMRG
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> OYFK
    209:219:react.glang.GMap removeDuplicateValues() -> iKfd
    233:242:void put(react.glang.GList,react.glang.GList) -> BJOF
    251:267:react.glang.GList sortK() -> Mcii
    277:293:react.glang.GList sortV() -> woBn
react.glang.GQuadraset -> ghDM:
    java.lang.Object a -> fedI
    java.lang.Object b -> vRom
    java.lang.Object c -> XKYl
    java.lang.Object d -> AYXn
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> FNVI
    25:26:void setA(java.lang.Object) -> oVAY
    30:30:java.lang.Object getB() -> UtTH
    35:36:void setB(java.lang.Object) -> mGHq
    40:40:java.lang.Object getC() -> CVMe
    45:46:void setC(java.lang.Object) -> sbMJ
    50:50:java.lang.Object getD() -> sQSv
    55:56:void setD(java.lang.Object) -> AXLY
react.glang.GSet -> ykue:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> anbl:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> fedI
    java.lang.Object b -> vRom
    java.lang.Object c -> XKYl
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> FNVI
    26:27:void setA(java.lang.Object) -> oVAY
    31:31:java.lang.Object getB() -> UtTH
    36:37:void setB(java.lang.Object) -> mGHq
    41:41:java.lang.Object getC() -> CVMe
    46:47:void setC(java.lang.Object) -> sbMJ
react.gmath.Average -> oxKp:
    double[] values -> aofw
    double average -> UmEg
    boolean dirty -> MeNF
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> HBlr
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> rMow
react.gmath.DoubleArrayUtils -> QFBk:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> BJOF
    17:19:void wrapRight(double[]) -> BJOF
    23:27:void fill(double[],double) -> fill
react.gmath.M -> hbTk:
    int precision -> RJIp
    int modulus -> OkTT
    float[] sin -> tTyf
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> BJOF
    31:36:boolean r(java.lang.Double) -> CMRG
    51:51:double tps(long,int) -> QEXs
    63:63:double ticksFromNS(long) -> sbMJ
    75:101:java.lang.String toRoman(int) -> bWiW
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> OYFK
    144:216:int fromRoman(java.lang.String) -> XJLi
    226:226:long ns() -> XSHd
    236:236:long ms() -> YgPJ
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> CMRG
    333:333:float sinLookup(int) -> xhip
react.gnet.client.Client -> mPAq:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> lVTY
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> BJOF
    74:74:react.gnet.packet.PacketHandler getHandler() -> gMuC
react.gnet.client.IClient -> biTU:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> BJOF
    react.gnet.packet.PacketHandler getHandler() -> gMuC
react.gnet.download.Download -> GQUV:
    react.gnet.download.DownloadState state -> IPPe
    react.gnet.download.DownloadType type -> wpEc
    react.gnet.download.DownloadStatus status -> axWM
    react.gnet.download.DownloadMonitor monitor -> QiGu
    java.net.URL url -> url
    java.io.File file -> UAnl
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> OjSX
    92:92:react.gnet.download.DownloadType getType() -> loFw
    97:97:react.gnet.download.DownloadStatus getStatus() -> rpXL
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> TOOT
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> Ubmc:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> BJOF
    void onDownloadStarted(react.gnet.download.Download) -> BJOF
    void onDownloadFinished(react.gnet.download.Download) -> CMRG
    void onDownloadFailed(react.gnet.download.Download) -> lKug
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> BJOF
react.gnet.download.DownloadState -> eGiH:
    react.gnet.download.DownloadState IDLE -> IrRX
    react.gnet.download.DownloadState DOWNLOADING -> hJHC
    react.gnet.download.DownloadState FAILED -> HMLS
    react.gnet.download.DownloadState FINISHED -> nukG
    react.gnet.download.DownloadState[] $VALUES -> KNDq
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> XSEp:
    long bytesDownloaded -> aMbk
    long bytesTotal -> vAlo
    long bytesPerSecond -> Mumd
    long timeElapsed -> jPMQ
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> kJAX
    25:25:long getBytesDownloaded() -> VDSg
    30:31:void setBytesDownloaded(long) -> AXLY
    35:35:long getBytesTotal() -> OHQF
    40:41:void setBytesTotal(long) -> myli
    45:45:long getBytesPerSecond() -> sbYb
    50:51:void setBytesPerSecond(long) -> Qoli
    55:55:long getTimeElapsed() -> xaGf
    60:61:void setTimeElapsed(long) -> HBlr
react.gnet.download.DownloadType -> RQTk:
    react.gnet.download.DownloadType DETERMINATE -> Gbyx
    react.gnet.download.DownloadType INDETERMINATE -> SoOM
    react.gnet.download.DownloadType[] $VALUES -> kBNc
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> EJnY:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> HnQA
    java.lang.String getPacketName() -> NUnX
react.gnet.packet.IncompatablePacketException -> OXlX:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> JQmX:
    react.gnet.packet.PacketBinding SERVER_BOUND -> OHnp
    react.gnet.packet.PacketBinding CLIENT_BOUND -> KUuG
    react.gnet.packet.PacketBinding[] $VALUES -> cdly
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> qvAC:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> aTnt:
    react.glang.GList accept -> ySjk
    react.gnet.packet.PacketBinding side -> HfaD
    react.gnet.streams.OSS out -> UuWf
    react.gnet.streams.ISS in -> yJyg
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> BJOF
    28:34:void accept(react.gnet.packet.IPacket) -> CMRG
    38:46:react.gnet.packet.IPacket findPacket(int) -> SeQV
    51:66:react.gnet.packet.IPacket read() -> MdMh
    71:77:void write(react.gnet.packet.IPacket) -> lKug
react.gnet.packet.UnhandledPacketException -> ieWa:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> cJTc:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> gMuC
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> lCeb
react.gnet.server.Server -> hbUE:
    int port -> port
    java.net.ServerSocket socket -> neNQ
    react.gnet.packet.PacketHandler handler -> lVTY
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> gMuC
    37:84:void run() -> run
    88:91:void pstart() -> AaIq
    95:96:void pstop() -> rove
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> lCeb
react.gnet.streams.ISS -> QMpq:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> ktuj
    boolean built -> Fhjv
    byte[] readBuffer -> JArq
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> QNJD
    64:72:react.glang.GList readStringList() -> biYg
    77:85:react.glang.GList readDoubleList() -> rNUB
    90:98:react.glang.GList readLongList() -> Dacc
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> BJOF
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> BJOF
    136:137:react.gnet.streams.ISS gzip() -> ksry
    142:147:void build() -> FxkW
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> CMRG
    435:436:void close() -> close
react.gnet.streams.OSS -> MuKB:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> eQam
    react.gnet.streams.StreamBuilder bu -> ktuj
    boolean built -> Fhjv
    byte[] writeBuffer -> HMPJ
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> ivPh
    41:42:react.gnet.streams.OSS gzip(int) -> gDvS
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> CMRG
    53:58:void build() -> FxkW
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> oVAY
    102:108:void writeDoubleList(react.glang.GList) -> mGHq
    112:118:void writeLongList(react.glang.GList) -> fAtW
    122:128:void writeStreamableList(react.glang.GList) -> OOtD
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> dpAE
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> lKug
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> cSFH:
    react.glang.GList constructors -> cSkI
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> BJOF
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> BJOF
    49:50:void bind(react.gnet.streams.StreamConstructor) -> BJOF
    54:55:void bindGZIP(int) -> lCdT
    59:60:void bindGZIP() -> erbC
    64:65:void bindCipher(javax.crypto.Cipher) -> lKug
    69:70:void bindBuffer(int) -> eOrA
    74:75:void bindBuffer() -> qudV
react.gnet.streams.StreamConstructor -> NEIL:
    java.io.InputStream constructInput(java.io.InputStream) -> BJOF
    java.io.OutputStream constructOutput(java.io.OutputStream) -> BJOF
react.gnet.streams.constructors.BufferedStreamConstructor -> sYcH:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> CMRG
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> CMRG
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> BJOF
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> BJOF
react.gnet.streams.constructors.CipherStreamConstructor -> dVLI:
    javax.crypto.Cipher cipher -> yCHv
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> lKug
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> lKug
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> BJOF
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> BJOF
react.gnet.streams.constructors.GZipStreamConstructor -> xFqw:
    int compressionLevel -> bPhI
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> lCeb
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> lCeb
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> BJOF
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> BJOF
react.gnet.streams.overlays.CGZIPInputStream -> wfSW:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> gyHK:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> BSJR:
    void toBytes(react.gnet.streams.OSS) -> BJOF
    void fromBytes(react.gnet.streams.ISS) -> BJOF
react.graph.ColossalView -> MSIe:
    react.papyrus.BufferedFrame view -> fCbO
    react.glang.GMap buffers -> wESU
    react.glang.GMap graphs -> YqAv
    double level -> OtEm
    double targetLevel -> EKtV
    int maxX -> uPNq
    int maxY -> YVnQ
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> Vetp
    51:77:void render() -> VTsa
    81:98:void scroll(int) -> jxri
    102:112:void recompile() -> Fowt
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> BJOF
    122:122:react.papyrus.BufferedFrame getView() -> QMtg
    127:127:react.glang.GMap getBuffers() -> LrKT
    132:132:react.glang.GMap getGraphs() -> nBHS
    137:137:double getLevel() -> DYRK
    142:142:double getTargetLevel() -> nIvw
    147:147:int getMaxX() -> hQVm
    152:152:int getMaxY() -> aoGV
react.graph.ColossalView$Builder -> MSIe$BJOF:
    react.glang.GList graphs -> nKYv
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> BJOF
    171:191:react.graph.ColossalView compute() -> OrcQ
react.graph.CubicleIterator -> aDQT:
    int[][] mapping -> kBPs
    int xCubes -> OjtA
    int yCubes -> gFdf
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> hPii
    47:130:void insert(react.graph.GraphSize,int) -> BJOF
    134:145:void print() -> print
react.graph.GraphSampleLine -> OiqE:
    double lx -> bsJy
    double ly -> rhgl
    react.api.ISampler sampler -> AQLL
    react.graph.IFormatter formatter -> FGGv
    byte graphColor -> qvfE
    byte backgroundColor -> bbJi
    byte borderColor -> TqsI
    byte textColor -> TaRb
    int ticksLeftTitle -> QNwT
    int ticksOutTitle -> ekTA
    double nextPoint -> yvMW
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> HTSV
    51:183:void onRender(react.papyrus.BufferedFrame) -> BJOF
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> CMRG
    226:254:int getHue(int,int,int) -> lKug
    259:281:void scaleFor(react.glang.GList) -> LyoS
    285:285:react.graph.IFormatter getFormatter() -> Mtci
    290:291:void setFormatter(react.graph.IFormatter) -> BJOF
    295:295:byte getGraphColor() -> cJYM
    300:301:void setGraphColor(byte) -> BJOF
    305:305:byte getBackgroundColor() -> aoFr
    310:311:void setBackgroundColor(byte) -> CMRG
    315:315:byte getBorderColor() -> MdMS
    320:321:void setBorderColor(byte) -> lKug
    325:325:byte getTextColor() -> TqRR
    330:331:void setTextColor(byte) -> lCeb
    335:335:react.api.ISampler getSampler() -> OirW
react.graph.GraphSize -> WaGb:
    react.graph.GraphSize WIDE -> lNGw
    react.graph.GraphSize FULL -> CpeY
    react.graph.GraphSize SQUARE -> NEoy
    int[] $SWITCH_TABLE$react$graph$GraphSize -> fvio
    react.graph.GraphSize[] ENUM$VALUES -> NVrM
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> hIFp
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> gFDY
react.graph.GraphText -> qubw:
    java.lang.String text -> text
    byte fontColor -> Evkc
    byte backgroundColor -> bbJi
    boolean wrote -> eISV
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> BJOF
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> ktRx
    68:69:void setFontColor(byte) -> wTex
    73:73:byte getBackgroundColor() -> aoFr
    78:79:void setBackgroundColor(byte) -> CMRG
react.graph.GraphingInstance -> LiYD:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> nKYv
    react.graph.ColossalView view -> USWF
    react.papyrus.Papyrus papyrus -> vcue
    react.papyrus.IRenderer renderer -> Npdp
    boolean mapping -> rgsu
    react.glang.GList msgs -> EfJt
    react.surge.sched.Task waiter -> EwMH
    react.surge.sched.Task waiter2 -> YOAp
    int shift -> hJLg
    boolean notif -> VNIV
    47:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> BJOF
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> BJOF
    138:142:void send(java.lang.String) -> kbeB
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> BJOF
    153:165:void on(react.event.ReactScrollEvent) -> BJOF
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> BJOF
    179:187:void destroy() -> destroy
    191:200:void toggle() -> nJWi
    204:205:void setGraphs(react.glang.GList) -> sbMJ
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> nRgo
    243:259:void compile() -> qSaJ
    40:40:boolean access$0(react.graph.GraphingInstance) -> BJOF
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> CMRG
    45:45:boolean access$2(react.graph.GraphingInstance) -> lKug
    45:45:void access$3(react.graph.GraphingInstance,boolean) -> BJOF
    44:44:int access$4(react.graph.GraphingInstance) -> lCeb
    44:44:void access$5(react.graph.GraphingInstance,int) -> BJOF
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> wTex
react.graph.GraphingInstance$1 -> LiYD$1:
    react.graph.GraphingInstance this$0 -> eYtA
    org.bukkit.entity.Player val$player -> wojJ
    1:51:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> LiYD$2:
    react.graph.GraphingInstance this$0 -> eYtA
    1:76:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> LiYD$3:
    react.graph.GraphingInstance this$0 -> eYtA
    1:106:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> BJOF
react.graph.IFormatter -> mWuI:
    java.lang.String from(double) -> PSVY
react.graph.IGraph -> rEbH:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> OXsO
    long getTimeViewport() -> JswQ
    void render(react.papyrus.BufferedFrame) -> lKug
    double getMax() -> getMax
    void setMax(double) -> XJLi
react.graph.NormalGraph -> LPGP:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> fUGv
    long timeViewport -> cnBS
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> OXsO
    35:35:long getTimeViewport() -> JswQ
    41:42:void render(react.papyrus.BufferedFrame) -> lKug
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> XJLi
    void onRender(react.papyrus.BufferedFrame) -> BJOF
react.graph.PlotBoard -> dgMK:
    react.glang.GMap plots -> ORFY
    int maxRecordings -> TjFc
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> vQrK
    33:33:long getAccurateTimeSpan() -> KLgF
    38:50:long getMedian(long,long) -> wTex
    55:55:long getMinimumAccuracyRange() -> xrLO
    60:70:double getMaxValue() -> NDoF
    75:85:double getMinValue() -> jpsJ
    90:90:react.glang.GList sort(react.glang.GMap) -> CMRG
    95:105:long earilestRecording() -> loJF
    110:120:long latestRecording() -> BtpO
    125:126:void reduceBefore(long) -> PSVY
    130:156:void reduceBetween(long,long) -> QEXs
    160:160:boolean before(long,long) -> OYFK
    165:165:boolean after(long,long) -> oVAY
    170:170:boolean within(long,long,long) -> BJOF
    175:193:react.glang.GMap getBetween(long,long) -> mGHq
    198:200:void plot(long,double) -> BJOF
    204:204:boolean hasAt(long) -> XJLi
    209:209:double getAt(long) -> kbeB
    214:214:int getSize() -> getSize
react.graph.Point -> jqOI:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> OHNj:
    int iid -> ChVI
    react.graph.IGraph graph -> MSpH
    react.graph.GraphSize size -> Qyna
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> mOiC
    24:25:void setGraph(react.graph.IGraph) -> BJOF
    29:29:react.graph.GraphSize getSize() -> aCuO
    34:35:void setSize(react.graph.GraphSize) -> BJOF
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> OiqM:
    react.graph.RenderMaxType UNLIMITED -> UBVB
    react.graph.RenderMaxType LIMITED -> GkqK
    react.graph.RenderMaxType[] ENUM$VALUES -> kKDU
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> rMpv:
    java.lang.String CRLF -> dVol
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> jpbr
    162:198:java.lang.String toString(react.json.JSONObject) -> CMRG
react.json.HTTPTokener -> ccjA:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> URQR:
    java.util.ArrayList myArrayList -> OkVa
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> BJOF
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> TWSO
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> yIhy
    394:399:react.json.JSONObject getJSONObject(int) -> HCOL
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> gVXa
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> oxBh
    515:515:boolean optBoolean(int) -> OOsQ
    533:536:boolean optBoolean(int,boolean) -> CMRG
    551:551:double optDouble(int) -> GPlb
    569:572:double optDouble(int,double) -> BJOF
    587:587:int optInt(int) -> WynC
    605:608:int optInt(int,int) -> oVAY
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> CMRG
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> BJOF
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> BJOF
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> BJOF
    722:723:react.json.JSONArray optJSONArray(int) -> FyAO
    737:738:react.json.JSONObject optJSONObject(int) -> lDID
    752:752:long optLong(int) -> vkXX
    770:773:long optLong(int,long) -> BJOF
    788:788:java.lang.String optString(int) -> byoa
    803:804:java.lang.String optString(int,java.lang.String) -> BJOF
    816:817:react.json.JSONArray put(boolean) -> sbMJ
    830:831:react.json.JSONArray put(java.util.Collection) -> BJOF
    845:848:react.json.JSONArray put(double) -> kbeB
    860:861:react.json.JSONArray put(int) -> Mtci
    873:874:react.json.JSONArray put(long) -> jpbr
    887:888:react.json.JSONArray put(java.util.Map) -> BJOF
    902:903:react.json.JSONArray put(java.lang.Object) -> myli
    921:922:react.json.JSONArray put(int,boolean) -> lKug
    939:940:react.json.JSONArray put(int,java.util.Collection) -> BJOF
    958:959:react.json.JSONArray put(int,double) -> CMRG
    977:978:react.json.JSONArray put(int,int) -> mGHq
    996:997:react.json.JSONArray put(int,long) -> CMRG
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> BJOF
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> BJOF
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> Qoli
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> BJOF
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> BJOF
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> BJOF
react.json.JSONException -> FNVI:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> dpcD
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> UtTH:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> BJOF
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> LXKi
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> BJOF
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> CMRG
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> jpbr
    379:456:java.lang.String toString(react.json.JSONArray) -> CMRG
    472:552:java.lang.String toString(react.json.JSONObject) -> CMRG
react.json.JSONObject -> YxPB:
    java.util.Map map -> map
    java.lang.Object NULL -> HnrL
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> BJOF
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> CMRG
    480:499:java.lang.String doubleToString(double) -> jpbr
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> iCML
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> KvkO
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> bWiW
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> lKug
    751:767:java.lang.String[] getNames(java.lang.Object) -> HBlr
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> xhip
    855:855:boolean isNull(java.lang.String) -> SeQV
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> inOm
    917:937:java.lang.String numberToString(java.lang.Number) -> BJOF
    949:949:java.lang.Object opt(java.lang.String) -> QNJD
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> BJOF
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> BJOF
    1018:1018:boolean optBoolean(java.lang.String) -> ivPh
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> BJOF
    1054:1054:double optDouble(java.lang.String) -> gDvS
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> BJOF
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> BJOF
    1116:1119:double optDouble(java.lang.String,double) -> BJOF
    1134:1134:int optInt(java.lang.String) -> lCdT
    1152:1155:int optInt(java.lang.String,int) -> lKug
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> eOrA
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> jxri
    1198:1198:long optLong(java.lang.String) -> hPii
    1216:1219:long optLong(java.lang.String,long) -> BJOF
    1234:1234:java.lang.String optString(java.lang.String) -> TWSO
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> CMRG
    1255:1305:void populateMap(java.lang.Object) -> PSVY
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> CMRG
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> BJOF
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> CMRG
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> lCeb
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> CMRG
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> BJOF
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> lKug
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> lCeb
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> wTex
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> BJOF
    1590:1590:java.lang.Object remove(java.lang.String) -> yIhy
    1605:1640:boolean similar(java.lang.Object) -> Qoli
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> XJLi
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> lKug
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> BJOF
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> BJOF
    2000:2004:void indent(java.io.Writer,int) -> BJOF
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> BJOF
react.json.JSONObject$Null -> YxPB$BJOF:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> XIwX:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> Smlm:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> MIxU:
    long character -> xQIb
    boolean eof -> eof
    long index -> Iqtp
    long line -> dhQv
    char previous -> Iqtt
    java.io.Reader reader -> reader
    boolean usePrevious -> uPPq
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> FWKL
    119:131:int dehexchar(char) -> BJOF
    136:136:boolean end() -> TiDc
    147:153:boolean more() -> hHho
    164:198:char next() -> next
    213:218:char next(char) -> CMRG
    233:250:java.lang.String next(int) -> UQfw
    263:266:char nextClean() -> xqjQ
    287:334:java.lang.String nextString(char) -> lKug
    349:361:java.lang.String nextTo(char) -> lCeb
    376:388:java.lang.String nextTo(java.lang.String) -> HCOL
    403:441:java.lang.Object nextValue() -> hIJR
    458:479:char skipTo(char) -> wTex
    491:491:react.json.JSONException syntaxError(java.lang.String) -> oxBh
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> MJXt:
    int maxdepth -> qnXY
    boolean comma -> msMf
    char mode -> SgAx
    react.json.JSONObject[] stack -> FFiV
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> OOsQ
    157:164:react.json.JSONWriter array() -> TyeT
    180:193:react.json.JSONWriter end(char,char) -> BJOF
    206:206:react.json.JSONWriter endArray() -> ejUB
    219:219:react.json.JSONWriter endObject() -> BAjl
    235:258:react.json.JSONWriter key(java.lang.String) -> GPlb
    274:285:react.json.JSONWriter object() -> Elxo
    299:310:void pop(char) -> QEXs
    322:329:void push(react.json.JSONObject) -> lCeb
    342:342:react.json.JSONWriter value(boolean) -> AXLY
    356:356:react.json.JSONWriter value(double) -> gVXa
    369:369:react.json.JSONWriter value(long) -> gVXa
    385:385:react.json.JSONWriter value(java.lang.Object) -> kbeB
react.json.XML -> kcQH:
    java.lang.Character AMP -> HVAe
    java.lang.Character APOS -> QXJx
    java.lang.Character BANG -> JBUT
    java.lang.Character EQ -> Fymq
    java.lang.Character GT -> kAqa
    java.lang.Character LT -> pQal
    java.lang.Character QUEST -> kJbl
    java.lang.Character QUOT -> uqrd
    java.lang.Character SLASH -> sJKC
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> WynC
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> BJOF
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> jpbr
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> HKjc:
    java.util.HashMap entity -> wgXU
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> KoIh
    108:133:java.lang.Object nextContent() -> yBHy
    149:166:java.lang.Object nextEntity(char) -> OYFK
    186:239:java.lang.Object nextMeta() -> ctnJ
    261:334:java.lang.Object nextToken() -> URSe
    354:420:boolean skipPast(java.lang.String) -> FyAO
react.papyrus.BufferedFrame -> SmmL:
    byte[][] frame -> aNHL
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> BJOF
    90:97:void write(byte) -> QEXs
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> BJOF
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> BJOF
    131:145:java.awt.image.BufferedImage toBufferedImage() -> bPIA
    153:160:void writeRainbowMul() -> weua
    167:174:void writeRainbowAdd() -> TiBv
    181:191:void writeSparks() -> eirO
    195:201:boolean write(int,int,byte) -> BJOF
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> BJOF
    233:250:void write(react.papyrus.BufferedFrame) -> lCeb
    254:254:byte[][] getRawFrame() -> VUVp
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> dUjG:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> lCeb
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> BJOF
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> BBJH:
    org.bukkit.map.MapView getView() -> lDTC
    react.papyrus.BufferedFrame getFrameBuffer() -> rgft
    void addRenderer(react.papyrus.IRenderer) -> BJOF
    void clearRenderers() -> vbrF
    react.glang.GList getRenderers() -> OQCS
    void removeRenderer(react.papyrus.IRenderer) -> CMRG
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> HwBm
react.papyrus.IRenderer -> FWET:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> BJOF
react.papyrus.Papyrus -> Yfkf:
    org.bukkit.map.MapView map -> TjFJ
    react.papyrus.BufferedFrame frameBuffer -> BCNm
    react.papyrus.BufferedFrame lastFrameBuffer -> eQed
    react.glang.GList renderers -> Jcyg
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> lDTC
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> rgft
    51:52:void addRenderer(react.papyrus.IRenderer) -> BJOF
    57:58:void clearRenderers() -> vbrF
    63:63:react.glang.GList getRenderers() -> OQCS
    69:70:void removeRenderer(react.papyrus.IRenderer) -> CMRG
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> HwBm
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> BJOF
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> CMRG
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> lKug
react.papyrus.Papyrus$1 -> Yfkf$1:
    react.papyrus.Papyrus this$0 -> jqvc
    org.bukkit.map.MapCanvas val$c -> KpOP
    org.bukkit.map.MapView val$v -> pjvn
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> fdaN:
    int spaceSize -> riNJ
    java.lang.String fontChars -> CNco
    int[][] fontData -> apMb
    react.papyrus.ReactFont Font -> MKaK
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> GbYB:
    react.glang.GList subgoals -> QypS
    java.lang.String tag -> ymac
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> rgga
    26:44:void propigate() -> dDmB
    49:50:void addGoal(react.rai.IGoal) -> BJOF
    55:65:react.glang.GList getFailingSubgoals() -> gVgG
    71:71:boolean isFailing() -> BBNl
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> HLQP
    void onPropigated() -> vsvm
react.rai.Goal$1 -> GbYB$1:
    react.rai.Goal this$0 -> NqGo
    react.rai.IGoal val$i -> qDGX
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> QovD:
    react.glang.GList getSubgoals() -> rgga
    void propigate() -> dDmB
    void onPropigated() -> vsvm
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> gVgG
    boolean isFailing() -> BBNl
    boolean onCheckFailing() -> HLQP
    void update() -> update
    void addGoal(react.rai.IGoal) -> BJOF
react.rai.IRAI -> wvsQ:
    react.glang.GList getGoals() -> gglA
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> BJOF
    react.glang.GList getEvents() -> PBes
    void callEvent(react.rai.RAIEvent) -> BJOF
    react.glang.GList getListeners() -> UIeR
react.rai.RAI -> XIuf:
    react.glang.GList goals -> XBpA
    react.glang.GList events -> PelH
    react.glang.GList logEvents -> Xusr
    react.glang.GList listeners -> Bdqx
    long since -> IXfr
    react.rai.RAI instance -> aolr
    21:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> gglA
    41:42:void addGoal(react.rai.IGoal) -> BJOF
    47:77:void tick() -> tick
    82:82:react.glang.GList getEvents() -> PBes
    88:95:void callEvent(react.rai.RAIEvent) -> BJOF
    100:100:react.glang.GList getListeners() -> UIeR
react.rai.RAIEvent -> YVJr:
    react.rai.RAIEventType type -> uYDj
    java.lang.String[] pars -> RJOo
    java.lang.String ovt -> SgEi
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> aTwn
    29:29:java.lang.String[] getPars() -> QEia
    34:34:java.lang.String getOvt() -> RHmC
react.rai.RAIEventType -> qvCV:
    react.rai.RAIEventType FIRE_ACTION -> nCMk
    react.rai.RAIEventType NOTE_GOAL_FAILING -> IrXP
    react.rai.RAIEventType NOTE_GOAL_FIXED -> GJNp
    java.lang.String[] msgs -> MTQJ
    react.rai.RAIEventType[] ENUM$VALUES -> JdYe
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> hkOj
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> BJOF
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedChunkLoad -> iKfd:
    boolean failing -> gXKp
    int cd -> GQtS
    25:29:void <init>() -> <init>
    34:64:boolean onCheckFailing() -> HLQP
    70:90:void onPropigated() -> vsvm
    20:20:boolean access$0(react.rai.goals.GoalReducedChunkLoad) -> BJOF
react.rai.goals.GoalReducedChunkLoad$1 -> iKfd$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> eHsV
    1:46:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    51:60:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> iKfd$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> eHsV
    1:79:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    84:87:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> Mcii:
    boolean failing -> gXKp
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> HLQP
    91:134:void onPropigated() -> vsvm
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> BJOF
react.rai.goals.GoalReducedEntityCounts$1 -> Mcii$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> sknt
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> Mcii$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> sknt
    org.bukkit.Chunk val$lx -> PChC
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> woBn:
    boolean failing -> gXKp
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> HLQP
    78:128:void onPropigated() -> vsvm
react.rai.goals.GoalStableChunkTime$1 -> woBn$1:
    react.rai.goals.GoalStableChunkTime this$0 -> vmIJ
    1:54:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> woBn$2:
    react.rai.goals.GoalStableChunkTime this$0 -> vmIJ
    java.lang.Object val$i -> DRHI
    1:111:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> CVMe:
    boolean failing -> gXKp
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> vsvm
    35:35:void letUp() -> lLfk
    40:77:boolean onCheckFailing() -> HLQP
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> BJOF
react.rai.goals.GoalStableEntityTime$1 -> CVMe$1:
    react.rai.goals.GoalStableEntityTime this$0 -> qvih
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> sQSv:
    boolean failing -> gXKp
    react.glang.GMap reocc -> tgBV
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> vsvm
    88:125:boolean onCheckFailing() -> HLQP
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> BJOF
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> CMRG
react.rai.goals.GoalStableFluidTime$1 -> sQSv$1:
    react.rai.goals.GoalStableFluidTime this$0 -> bbNm
    org.bukkit.Chunk val$lx -> PChC
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> sQSv$2:
    react.rai.goals.GoalStableFluidTime this$0 -> bbNm
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> rMow:
    boolean failing -> gXKp
    react.glang.GMap reocc -> tgBV
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> vsvm
    89:125:boolean onCheckFailing() -> HLQP
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> BJOF
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> CMRG
react.rai.goals.GoalStableHopperTime$1 -> rMow$1:
    react.rai.goals.GoalStableHopperTime this$0 -> HxFf
    org.bukkit.Chunk val$lx -> PChC
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> rMow$2:
    react.rai.goals.GoalStableHopperTime this$0 -> HxFf
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> XSHd:
    boolean failing -> gXKp
    react.glang.GMap reocc -> tgBV
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> vsvm
    89:126:boolean onCheckFailing() -> HLQP
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> BJOF
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> CMRG
react.rai.goals.GoalStableRedstoneTime$1 -> XSHd$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> nTNl
    org.bukkit.Chunk val$lx -> PChC
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> XSHd$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> nTNl
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> YgPJ:
    boolean failing -> gXKp
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> vsvm
    34:58:boolean onCheckFailing() -> HLQP
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> BJOF
react.rai.goals.GoalStableTickTime$1 -> YgPJ$1:
    react.rai.goals.GoalStableTickTime this$0 -> BCQX
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> gMuC:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> RlRI
    boolean authenticated -> XCNt
    react.remote.server.ServerInfo info -> WbOT
    react.glang.GMap frems -> lfyn
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> NxHL
    51:51:react.glang.GMap getFrames() -> fBea
    56:75:int computeFrames() -> mrMs
    80:92:boolean clearToken() -> HKqI
    97:110:boolean updateServerInfo() -> esHN
    115:129:boolean refreshToken() -> Drhv
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> lKug
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> wews
    165:165:boolean isAuthenticated() -> nBKi
    170:170:react.remote.server.ServerInfo getInfo() -> MlaH
react.remote.client.packet.CPacketClearToken -> OjSX:
    java.lang.String token -> RlRI
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJOF
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJOF
    38:38:java.lang.String getToken() -> wews
    43:44:void setToken(java.lang.String) -> lDID
react.remote.client.packet.CPacketComputeFrames -> loFw:
    java.lang.String token -> RlRI
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJOF
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJOF
    38:38:java.lang.String getToken() -> wews
    43:44:void setToken(java.lang.String) -> lDID
react.remote.client.packet.CPacketGetInfo -> rpXL:
    java.lang.String token -> RlRI
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJOF
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJOF
    38:38:java.lang.String getToken() -> wews
    43:44:void setToken(java.lang.String) -> lDID
react.remote.client.packet.CPacketGetToken -> TOOT:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> BJOF
    36:38:void fromBytes(react.gnet.streams.ISS) -> BJOF
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> kJAX:
    java.lang.String token -> RlRI
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJOF
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJOF
    38:38:java.lang.String getToken() -> wews
    43:44:void setToken(java.lang.String) -> lDID
react.remote.client.packet.ClientPacket -> VDSg:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> BJOF
    void fromBytes(react.gnet.streams.ISS) -> BJOF
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> HnQA
    42:42:java.lang.String getPacketName() -> NUnX
react.remote.client.packet.ClientPacketType -> OHQF:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> NVvR
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> gWnN
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> hlSa
    react.remote.client.packet.ClientPacketType GET_INFO -> etLI
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> yusr
    react.remote.client.packet.ClientPacketType[] $VALUES -> rGMH
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> sbYb:
    react.glang.GMap compute(long,long) -> lKug
react.remote.server.KnownUser -> xaGf:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> HnQA:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> BJOF
    38:41:void fromBytes(react.gnet.streams.ISS) -> BJOF
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> NUnX:
    react.glang.GList users -> BduM
    react.glang.GMap session -> LkCg
    react.glang.GMap lastCompute -> GRbb
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> OHMJ
    44:45:void registerUser(react.remote.server.KnownUser) -> BJOF
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> CMRG
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> vkXX
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> lCeb
    react.remote.server.IFrameComputer getFrameComputer() -> kbmW
    170:171:void markLastCompute(react.remote.server.KnownUser) -> lKug
    175:180:long getLastCompute(react.remote.server.KnownUser) -> lCeb
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> BJOF
    190:191:void deleteSession(react.remote.server.KnownUser) -> wTex
    195:195:java.lang.String createToken() -> CxVD
react.remote.server.ServerInfo -> MdMh:
    java.lang.String motd -> xbOy
    int gameProtocol -> ORJQ
    java.lang.String gameVersion -> lonO
    java.lang.String reactVersion -> hlRv
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> pkYj
    int viewDistance -> viewDistance
    int gamePort -> dVty
    java.lang.String gameAddress -> GBCC
    react.glang.GList remotePlugins -> vKIA
    react.glang.GList worlds -> pjyG
    react.glang.GList actions -> wEYu
    react.glang.GList samplers -> YWWM
    26:26:react.remote.server.ServerInfo empty() -> CgTS
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> BJOF
    146:159:void fromBytes(react.gnet.streams.ISS) -> BJOF
    java.lang.String dgetMotd() -> cJRc
    int dgetGameProtocol() -> oxIB
    java.lang.String dgetGameVersion() -> owhL
    java.lang.String dgetReactVersion() -> WaBi
    int dgetMaxPlayers() -> cccu
    react.glang.GList dgetConnectedPlayers() -> ivWW
    int dgetViewDistance() -> skCU
    int dgetGamePort() -> IFXX
    java.lang.String dgetGameAddress() -> MSGe
    react.glang.GList dgetRemotePlugins() -> aept
    react.glang.GList dgetWorlds() -> rxdN
    react.glang.GList dgetActions() -> ydGY
    react.glang.GList dgetSamplers() -> rVaV
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> NgTA
    199:199:java.lang.String getGameVersion() -> ncnP
    204:204:java.lang.String getReactVersion() -> sIJd
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> KDXC
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> aTvh
    229:229:java.lang.String getGameAddress() -> MSOX
    234:234:react.glang.GList getRemotePlugins() -> PKWP
    239:239:react.glang.GList getWorlds() -> oUnn
    244:244:react.glang.GList getActions() -> uEql
    249:249:react.glang.GList getSamplers() -> OQDu
react.remote.server.ServerInfo$1 -> MdMh$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> rxdN
    37:37:int dgetViewDistance() -> skCU
    43:43:react.glang.GList dgetRemotePlugins() -> aept
    49:49:java.lang.String dgetReactVersion() -> WaBi
    55:55:java.lang.String dgetMotd() -> cJRc
    61:61:int dgetMaxPlayers() -> cccu
    67:67:java.lang.String dgetGameVersion() -> owhL
    73:73:int dgetGameProtocol() -> oxIB
    79:79:int dgetGamePort() -> IFXX
    85:85:java.lang.String dgetGameAddress() -> MSGe
    91:91:react.glang.GList dgetConnectedPlayers() -> ivWW
    97:97:react.glang.GList dgetActions() -> ydGY
    103:103:react.glang.GList dgetSamplers() -> rVaV
react.remote.server.packet.ComputedFrame -> AaIq:
    react.glang.GMap values -> kcxr
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> BJOF
    28:36:void fromBytes(react.gnet.streams.ISS) -> BJOF
    40:40:react.glang.GMap getValues() -> Aqog
    45:46:void setValues(react.glang.GMap) -> lKug
react.remote.server.packet.SPacketOk -> rove:
    boolean ok -> nSqC
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJOF
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJOF
    38:38:boolean isOk() -> ndNc
    43:44:void setOk(boolean) -> myli
react.remote.server.packet.SPacketSendFrames -> biYg:
    react.glang.GMap frames -> IOvV
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> BJOF
    36:44:void fromBytes(react.gnet.streams.ISS) -> BJOF
    48:48:react.glang.GMap getFrames() -> fBea
    53:54:void setFrames(react.glang.GMap) -> lCeb
react.remote.server.packet.SPacketSendInfo -> rNUB:
    react.remote.server.ServerInfo info -> WbOT
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJOF
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJOF
    38:38:react.remote.server.ServerInfo getInfo() -> MlaH
    43:44:void setInfo(react.remote.server.ServerInfo) -> BJOF
react.remote.server.packet.SPacketSendToken -> Dacc:
    java.lang.String token -> RlRI
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJOF
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJOF
    38:38:java.lang.String getToken() -> wews
    43:44:void setToken(java.lang.String) -> lDID
react.remote.server.packet.ServerPacket -> ksry:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> BJOF
    void fromBytes(react.gnet.streams.ISS) -> BJOF
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> HnQA
    42:42:java.lang.String getPacketName() -> NUnX
react.remote.server.packet.ServerPacketType -> FxkW:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> ymcN
    react.remote.server.packet.ServerPacketType SEND_INFO -> BnGs
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> rhnU
    react.remote.server.packet.ServerPacketType OK -> DQiE
    react.remote.server.packet.ServerPacketType[] $VALUES -> hcbB
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> dpAE:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleAsyncQueue$1 -> dpAE$1:
    react.sampler.SampleAsyncQueue this$0 -> lpNf
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleChunkTime -> erbC:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleChunkTime$1 -> erbC$1:
    react.sampler.SampleChunkTime this$0 -> OHvh
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleChunksLoaded -> qudV:
    react.graph.IFormatter formatter -> FGGv
    17:27:void <init>() -> <init>
    32:38:void construct() -> TWVJ
    43:44:void sample() -> HTSV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleChunksLoaded$1 -> qudV$1:
    react.sampler.SampleChunksLoaded this$0 -> GuEd
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> PSVY
react.sampler.SampleChunksLoadedPerSecond -> Vetp:
    react.gmath.Average a -> RIpB
    react.graph.IFormatter formatter -> FGGv
    16:29:void <init>() -> <init>
    34:40:void construct() -> TWVJ
    45:47:void sample() -> HTSV
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleChunksLoadedPerSecond$1 -> Vetp$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> WkBf
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> PSVY
react.sampler.SampleEntitiesDrops -> VTsa:
    react.graph.IFormatter formatter -> FGGv
    17:27:void <init>() -> <init>
    32:38:void construct() -> TWVJ
    43:44:void sample() -> HTSV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleEntitiesDrops$1 -> VTsa$1:
    react.sampler.SampleEntitiesDrops this$0 -> tweE
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> PSVY
react.sampler.SampleEntitiesLiving -> Fowt:
    react.graph.IFormatter formatter -> FGGv
    17:27:void <init>() -> <init>
    32:38:void construct() -> TWVJ
    43:44:void sample() -> HTSV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleEntitiesLiving$1 -> Fowt$1:
    react.sampler.SampleEntitiesLiving this$0 -> kljN
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> PSVY
react.sampler.SampleEntitiesTiles -> QMtg:
    react.graph.IFormatter formatter -> FGGv
    17:27:void <init>() -> <init>
    32:38:void construct() -> TWVJ
    43:44:void sample() -> HTSV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleEntitiesTiles$1 -> QMtg$1:
    react.sampler.SampleEntitiesTiles this$0 -> WapV
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> PSVY
react.sampler.SampleEntitiesTotal -> LrKT:
    react.graph.IFormatter formatter -> FGGv
    17:27:void <init>() -> <init>
    32:38:void construct() -> TWVJ
    43:44:void sample() -> HTSV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleEntitiesTotal$1 -> LrKT$1:
    react.sampler.SampleEntitiesTotal this$0 -> RlTY
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> PSVY
react.sampler.SampleEntityDroppedTicks -> nBHS:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleEntityDroppedTicks$1 -> nBHS$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> nLAL
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleEntityTime -> DYRK:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleEntityTime$1 -> DYRK$1:
    react.sampler.SampleEntityTime this$0 -> IYHp
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleEntityTimeLock -> nIvw:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleEntityTimeLock$1 -> nIvw$1:
    react.sampler.SampleEntityTimeLock this$0 -> ghmw
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleExplosionTime -> hQVm:
    react.graph.IFormatter formatter -> FGGv
    17:27:void <init>() -> <init>
    32:38:void construct() -> TWVJ
    43:44:void sample() -> HTSV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleExplosionTime$1 -> hQVm$1:
    react.sampler.SampleExplosionTime this$0 -> OYxl
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> PSVY
react.sampler.SampleFluidPerSecond -> aoGV:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleFluidPerSecond$1 -> aoGV$1:
    react.sampler.SampleFluidPerSecond this$0 -> dgue
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleFluidPerTick -> OrcQ:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    46:53:void sample() -> HTSV
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleFluidPerTick$1 -> OrcQ$1:
    react.sampler.SampleFluidPerTick this$0 -> dNdM
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleFluidTickTime -> cJYM:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleFluidTickTime$1 -> cJYM$1:
    react.sampler.SampleFluidTickTime this$0 -> hSAD
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleFluidTickUtilization -> aoFr:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    46:53:void sample() -> HTSV
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleFluidTickUtilization$1 -> aoFr$1:
    react.sampler.SampleFluidTickUtilization this$0 -> UvAH
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleHopperPerSecond -> MdMS:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleHopperPerSecond$1 -> MdMS$1:
    react.sampler.SampleHopperPerSecond this$0 -> nBqp
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleHopperPerTick -> TqRR:
    react.graph.IFormatter formatter -> FGGv
    18:29:void <init>() -> <init>
    34:40:void construct() -> TWVJ
    47:54:void sample() -> HTSV
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleHopperPerTick$1 -> TqRR$1:
    react.sampler.SampleHopperPerTick this$0 -> slUM
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleHopperTickTime -> OirW:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleHopperTickTime$1 -> OirW$1:
    react.sampler.SampleHopperTickTime this$0 -> YWXg
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleHopperTickUtilization -> hIFp:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    46:53:void sample() -> HTSV
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleHopperTickUtilization$1 -> hIFp$1:
    react.sampler.SampleHopperTickUtilization this$0 -> RkvL
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleMemoryAllocated -> gFDY:
    react.graph.IFormatter formatter -> FGGv
    17:27:void <init>() -> <init>
    32:38:void construct() -> TWVJ
    43:44:void sample() -> HTSV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleMemoryAllocated$1 -> gFDY$1:
    react.sampler.SampleMemoryAllocated this$0 -> wpQU
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> PSVY
react.sampler.SampleMemoryAllocationPerSecond -> ktRx:
    react.graph.IFormatter formatter -> FGGv
    17:27:void <init>() -> <init>
    32:38:void construct() -> TWVJ
    43:44:void sample() -> HTSV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleMemoryAllocationPerSecond$1 -> ktRx$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> kmOE
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> PSVY
react.sampler.SampleMemoryFree -> nJWi:
    react.graph.IFormatter formatter -> FGGv
    17:27:void <init>() -> <init>
    32:38:void construct() -> TWVJ
    43:44:void sample() -> HTSV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleMemoryFree$1 -> nJWi$1:
    react.sampler.SampleMemoryFree this$0 -> BLFP
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> PSVY
react.sampler.SampleMemoryMax -> nRgo:
    react.graph.IFormatter formatter -> FGGv
    17:27:void <init>() -> <init>
    32:38:void construct() -> TWVJ
    43:44:void sample() -> HTSV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleMemoryMax$1 -> nRgo$1:
    react.sampler.SampleMemoryMax this$0 -> EDMy
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> PSVY
react.sampler.SampleMemoryUse -> qSaJ:
    react.graph.IFormatter formatter -> FGGv
    17:27:void <init>() -> <init>
    32:38:void construct() -> TWVJ
    43:44:void sample() -> HTSV
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleMemoryUse$1 -> qSaJ$1:
    react.sampler.SampleMemoryUse this$0 -> eAIl
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> PSVY
react.sampler.SampleRedstonePerSecond -> OXsO:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleRedstonePerSecond$1 -> OXsO$1:
    react.sampler.SampleRedstonePerSecond this$0 -> gGPN
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleRedstonePerTick -> JswQ:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    46:53:void sample() -> HTSV
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleRedstonePerTick$1 -> JswQ$1:
    react.sampler.SampleRedstonePerTick this$0 -> THIj
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleRedstoneTickTime -> vQrK:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleRedstoneTickTime$1 -> vQrK$1:
    react.sampler.SampleRedstoneTickTime this$0 -> GlXE
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleRedstoneTickUtilization -> KLgF:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    46:53:void sample() -> HTSV
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleRedstoneTickUtilization$1 -> KLgF$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> OAJh
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleSyncQueue -> xrLO:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleSyncQueue$1 -> xrLO$1:
    react.sampler.SampleSyncQueue this$0 -> NVyA
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleTickTime -> NDoF:
    react.graph.IFormatter formatter -> FGGv
    react.gmath.Average aa -> gGOi
    17:29:void <init>() -> <init>
    34:40:void construct() -> TWVJ
    45:47:void sample() -> HTSV
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleTickTime$1 -> NDoF$1:
    react.sampler.SampleTickTime this$0 -> xjbS
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> PSVY
react.sampler.SampleTickUtilization -> jpsJ:
    react.graph.IFormatter formatter -> FGGv
    react.gmath.Average aa -> gGOi
    17:29:void <init>() -> <init>
    34:40:void construct() -> TWVJ
    45:47:void sample() -> HTSV
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleTickUtilization$1 -> jpsJ$1:
    react.sampler.SampleTickUtilization this$0 -> iVFe
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> PSVY
react.sampler.SampleTicksPerSecond -> loJF:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleTicksPerSecond$1 -> loJF$1:
    react.sampler.SampleTicksPerSecond this$0 -> bjdO
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleTileDroppedTicks -> BtpO:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleTileDroppedTicks$1 -> BtpO$1:
    react.sampler.SampleTileDroppedTicks this$0 -> CVwd
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleTileTime -> mOiC:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleTileTime$1 -> mOiC$1:
    react.sampler.SampleTileTime this$0 -> toWR
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.sampler.SampleTileTimeLock -> aCuO:
    react.graph.IFormatter formatter -> FGGv
    18:28:void <init>() -> <init>
    33:39:void construct() -> TWVJ
    44:45:void sample() -> HTSV
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> Mtci
react.sampler.SampleTileTimeLock$1 -> aCuO$1:
    react.sampler.SampleTileTimeLock this$0 -> uqxs
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> PSVY
react.security.checkpoints.SecurityCheckpointAlpha -> inOm:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> SLOu
    78:148:void doScan(java.lang.Runnable) -> CMRG
    152:181:byte[] readResource(java.io.File,java.lang.String) -> BJOF
    186:217:react.glang.GMap scan(java.io.File) -> CMRG
    150:150:byte[] access$0(java.io.File,java.lang.String) -> CMRG
react.security.checkpoints.SecurityCheckpointAlpha$1 -> inOm$1:
    java.lang.Runnable val$r -> nBpl
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> inOm$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> PUNI
    java.lang.Runnable val$r -> nBpl
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> FWKL:
    java.lang.String ip -> apQJ
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> TiDc:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> TiDc$1:
    react.security.locks.SecurityLockAlpha this$0 -> eAHT
    java.io.File val$f -> CExM
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> hHho:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> jpbr
react.slate.PhantomSlate -> xqjQ:
    react.glang.GList lines -> ECkv
    react.glang.GList viewers -> HgHt
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> pHvv
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> qJsg
    44:45:void set(int,java.lang.String) -> CMRG
    50:51:void setLines(react.glang.GList) -> AXLY
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> FxkW
    91:95:void addViewer(org.bukkit.entity.Player) -> jpbr
    100:102:void removeViewer(org.bukkit.entity.Player) -> gVXa
    107:107:react.glang.GList getViewers() -> PvLB
    113:113:boolean isViewing(org.bukkit.entity.Player) -> LXKi
    119:120:void addLine(java.lang.String) -> byoa
    125:126:void clearLines() -> kRTW
react.slate.Slate -> hIJR:
    void build() -> FxkW
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> qJsg
    void set(int,java.lang.String) -> CMRG
    void setLines(react.glang.GList) -> AXLY
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> jpbr
    void addLine(java.lang.String) -> byoa
    void clearLines() -> kRTW
    void removeViewer(org.bukkit.entity.Player) -> gVXa
    react.glang.GList getViewers() -> PvLB
    boolean isViewing(org.bukkit.entity.Player) -> LXKi
    void update() -> update
react.slate.SlateUtil -> TyeT:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> OQEa
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> upsB
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> BJOF
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> CMRG
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> lKug
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> BJOF
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> BJOF
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> CMRG
    186:196:java.lang.String convertJSON(java.lang.String) -> Mtci
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> CMRG
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> BJOF
react.surge.Main -> ejUB:
    react.glang.GList plugins -> ghpk
    react.glang.GMap pluginInstances -> DQkK
    react.glang.GList controllerSet -> XduP
    react.glang.GMap anchors -> JJkX
    react.glang.GList classes -> mPpJ
    java.lang.reflect.Field nsField -> nBqY
    java.lang.reflect.Field thField -> AkGM
    react.glang.GList tracks -> gFml
    long nsf -> eQhy
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> gxlH
    90:109:long getNanoSync() -> ndRN
    114:115:void requestResetNanos() -> VMLA
    119:127:void requestReload() -> LiaD
    131:134:void requestReload(java.lang.Runnable) -> lKug
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> BJOF
    201:218:void onStop() -> IFeL
    224:224:void onPostInit() -> esJD
    230:230:void onPreInit() -> OYWo
    234:245:void shutDownAmps() -> ksyl
    249:458:void initializeAmps() -> jqWm
    463:504:void doScan() -> MBPc
    508:530:void scanForPoolDefiners() -> dofX
    534:550:void scanForRawEvents() -> ydQP
    554:570:void scanForDynamicTrack() -> WaPc
    574:595:void scanForAmps() -> CpIQ
    600:611:void onTick() -> SKdW
react.surge.Main$1 -> ejUB$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> BAjl:
    react.surge.control.AmpedPlugin plugin -> eHxR
    boolean connected -> connected
    int masterTask -> fwOa
    java.lang.Runnable onReload -> THIG
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> uhdt
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> YwwU
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> BJOF
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> BJOF
    123:124:void stopTask(int) -> HTSV
    128:128:react.surge.control.AmpedPlugin getPlugin() -> LOoG
    133:133:int getMasterTask() -> vsyJ
    138:138:java.lang.Runnable getOnReload() -> qTIT
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> BJOF
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> TWVJ
    158:159:void setOnReload(java.lang.Runnable) -> lCeb
    67:67:void access$0(react.surge.PluginAmp) -> BJOF
react.surge.PluginAmp$1 -> BAjl$1:
    react.surge.PluginAmp this$0 -> MeWR
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> BAjl$2:
    react.surge.PluginAmp this$0 -> MeWR
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> BAjl$3:
    react.surge.PluginAmp this$0 -> MeWR
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> Elxo:
    react.surge.PluginAmp amp -> TXjD
    react.glang.GList tickComponents -> HUgR
    react.glang.GList atickComponents -> yBpI
    react.surge.sched.TaskManager taskmgr -> FhsN
    react.surge.hotload.HotloadManager hotloadmgr -> yKaV
    java.lang.Thread mainThread -> mbTp
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> BJOF
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> UQfw
    44:44:java.io.File folder() -> ejYG
    49:51:java.io.File getPluginJarFile() -> kbxP
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> lCeb
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> lLgy
    74:74:react.glang.GList getTickComponents() -> kAUP
    79:79:react.glang.GList getAsyncTickComponents() -> DbIL
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> BJOF
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> CMRG
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> CMRG
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> cAlx
    126:126:boolean hasAmp() -> YpEp
    131:131:react.surge.PluginAmp getAmp() -> weyi
    136:136:react.surge.sched.TaskManager getTaskManager() -> eHTW
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> FyQF
react.surge.cluster.Cluster -> KoIh:
    react.surge.cluster.ClusterType type -> Koss
    java.lang.Object t -> qTbR
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> ksxi
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> yBHy:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> ctnJ:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> URSe:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> bPIA:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> weua:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> TiBv:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> eirO:
    react.surge.cluster.ClusterType INT -> bPsJ
    react.surge.cluster.ClusterType BOOLEAN -> rXSI
    react.surge.cluster.ClusterType STRING -> IHKt
    react.surge.cluster.ClusterType STRING_LIST -> SEHl
    react.surge.cluster.ClusterType DOUBLE -> rXQp
    react.surge.cluster.ClusterType LONG -> LsXh
    react.surge.cluster.ClusterType[] ENUM$VALUES -> FrHN
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> VUVp:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> DsqU
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> BJOF
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> BJOF
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> GjqX
react.surge.cluster.ConfigurationDataOutput -> lDTC:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> CMRG
react.surge.cluster.DataCluster -> rgft:
    react.glang.GMap clusters -> ecNj
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> PdkE
    29:33:void fromJson(react.json.JSONObject) -> wTex
    37:44:react.json.JSONObject toJson() -> sjoP
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> Vnky
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> BJOF
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> NxHL
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> QEXs
    194:195:void set(java.lang.String,int) -> wTex
    199:200:void set(java.lang.String,boolean) -> lKug
    204:205:void set(java.lang.String,double) -> lKug
    209:210:void set(java.lang.String,long) -> lKug
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> BJOF
react.surge.cluster.ICluster -> vbrF:
    react.surge.cluster.ClusterType getType() -> ksxi
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> OQCS:
react.surge.cluster.IDataInput -> HwBm:
    react.surge.cluster.DataCluster read(java.io.File) -> lKug
react.surge.cluster.IDataOutput -> rgga:
    void write(react.surge.cluster.DataCluster,java.io.File) -> BJOF
react.surge.cluster.Key -> dDmB:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> gVgG:
    int value() -> value
react.surge.cluster.KeyStore -> BBNl:
react.surge.cluster.ReflectedConfigurationException -> HLQP:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> vsvm:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> lKug
react.surge.cluster.YamlDataOutput -> gglA:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> BJOF
react.surge.collection.GSound -> PBes:
    java.lang.String sound -> JucN
    org.bukkit.Sound iSound -> uHId
    java.lang.Float volume -> MSwn
    java.lang.Float pitch -> gObC
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> iCML
    61:72:void play(org.bukkit.Location) -> QEXs
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> BJOF
    93:93:java.lang.String getSound() -> PBgl
    98:99:void setSound(java.lang.String) -> HTSV
    103:103:org.bukkit.Sound getiSound() -> RkQi
    108:109:void setiSound(org.bukkit.Sound) -> BJOF
    113:113:java.lang.Float getVolume() -> VMJc
    118:119:void setVolume(java.lang.Float) -> BJOF
    123:123:java.lang.Float getPitch() -> xFxx
    128:129:void setPitch(java.lang.Float) -> CMRG
react.surge.control.AmpedPlugin -> UIeR:
    react.glang.GList controllers -> WHcc
    react.gconcurrent.ParallelPoolManager pp -> ceYK
    react.surge.server.CoreTickThread ctt -> yKcj
    24:50:void <init>() -> <init>
    void doScan() -> MBPc
    long getNanoSync() -> ndRN
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:91:void onDisable() -> onDisable
    96:96:react.glang.GList getControllers() -> hjnv
    102:103:void registerController(react.surge.control.IController) -> BJOF
    108:119:void onTick() -> SKdW
    124:124:java.lang.String getTickName() -> qBYc
    130:130:react.gconcurrent.ParallelPoolManager getThreadPool() -> IOVN
    136:251:void destroyOldThreads() -> WPMk
    void onControllerRegistry() -> gxlH
    void onStart(react.surge.util.Protocol) -> BJOF
    void onStop() -> IFeL
    void onPostInit() -> esJD
    void onPreInit() -> OYWo
react.surge.control.AmpedPlugin$1 -> UIeR$1:
    react.surge.control.AmpedPlugin this$0 -> tEEk
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> sYcH
react.surge.control.AmpedPlugin$2 -> UIeR$2:
    react.surge.control.AmpedPlugin this$0 -> tEEk
    1:149:void <init>(react.surge.control.AmpedPlugin) -> <init>
    154:244:void run() -> run
react.surge.control.Control -> aTwn:
react.surge.control.Controller -> QEia:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> RHmC:
react.surge.control.Enable -> hkOj:
react.surge.control.IController -> lLfk:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> fBea:
react.surge.control.Plugin -> mrMs:
react.surge.control.SurgePlugin -> HKqI:
    void onStart(react.surge.util.Protocol) -> BJOF
    void onStop() -> IFeL
    void onPostInit() -> esJD
    void onPreInit() -> OYWo
    void onControllerRegistry() -> gxlH
    void registerController(react.surge.control.IController) -> BJOF
    react.glang.GList getControllers() -> hjnv
    react.gconcurrent.ParallelPoolManager getThreadPool() -> IOVN
react.surge.hotload.HotloadManager -> esHN:
    react.glang.GMap filemods -> neVv
    react.glang.GMap filesizes -> vlmj
    react.glang.GMap fileacts -> riSL
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> BJOF
    35:38:void untrack(java.io.File) -> lCeb
    42:45:void untrackall() -> qJyV
    50:86:void onTick() -> SKdW
    91:91:java.lang.String getTickName() -> qBYc
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> BJOF
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> CMRG
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> lKug
react.surge.hotload.HotloadManager$1 -> esHN$1:
    react.surge.hotload.HotloadManager this$0 -> HfjQ
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> Drhv:
    boolean init -> pblW
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> OtPY
    java.lang.Class IChatBaseComponent -> kmPM
    java.lang.Class ChatSerializer -> iUfy
    java.lang.Class PacketPlayOutPlayerInfo -> KxeE
    java.lang.Class PlayerInfoData -> xrtP
    java.lang.Class EnumPlayerInfoAction -> qTnF
    java.lang.Class GameProfile -> gaCI
    java.lang.Class EnumGamemode -> rqcH
    java.lang.Class TileEntitySkull -> yStE
    java.lang.Class LoadingCache -> qeoB
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> wews:
    react.surge.nms.NMSX bountifulAPI -> hAbO
    boolean useOldMethods -> mQRX
    java.lang.String nmsver -> hRcb
    java.lang.Object eTimes -> EfSL
    java.lang.Object eTitle -> fTnQ
    java.lang.Object eSubtitle -> XCVB
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> BJOF
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> TWVJ
    75:89:java.lang.Class getCBClass(java.lang.String) -> pHCo
    96:104:java.lang.Object serializeChat(java.lang.String) -> SBpS
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> CMRG
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> BJOF
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> NDuE
    151:151:java.lang.String craftPackage() -> GABQ
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> BJOF
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> BJOF
    197:207:java.lang.Class getNMSClass(java.lang.String) -> cSAL
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> BJOF
    279:280:void clearTitle(org.bukkit.entity.Player) -> KvkO
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> CMRG
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> BJOF
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> BJOF
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> uNbI
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> QEXs
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> mGHq
    434:447:int ping(org.bukkit.entity.Player) -> bWiW
react.surge.nms.NMSX$1 -> wews$1:
    org.bukkit.entity.Player val$player -> wojJ
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> wews$2:
    org.bukkit.entity.Player val$player -> wojJ
    java.lang.String val$message -> QrIN
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> nBKi:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> NfxM
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> BJOF
    68:82:void clearTitle(org.bukkit.entity.Player) -> KvkO
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> BJOF
react.surge.nms.PacketUtil$V -> nBKi$BJOF:
    react.surge.nms.PacketUtil$V R17 -> OQnp
    react.surge.nms.PacketUtil$V R18 -> ymin
    react.surge.nms.PacketUtil$V R19 -> AYgg
    react.surge.nms.PacketUtil$V R111 -> elAb
    react.surge.nms.PacketUtil$V R110 -> ageC
    react.surge.nms.PacketUtil$V R112 -> DQpO
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> BnLr
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> MlaH:
    java.lang.String title -> title
    java.lang.String subTitle -> hlXw
    java.lang.String action -> action
    java.lang.Integer fadeIn -> VyIB
    java.lang.Integer fadeOut -> uYML
    java.lang.Integer stayTime -> huJf
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> xhip
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> fBhl
    79:80:void setSubTitle(java.lang.String) -> mynf
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> qJyD
    99:100:void setFadeIn(java.lang.Integer) -> lKug
    104:104:java.lang.Integer getFadeOut() -> IOXb
    109:110:void setFadeOut(java.lang.Integer) -> lCeb
    114:114:java.lang.Integer getStayTime() -> EeOc
    119:120:void setStayTime(java.lang.Integer) -> wTex
react.surge.nms.VersionBukkit -> CxVD:
    react.surge.nms.VersionBukkit VU -> GBHg
    react.surge.nms.VersionBukkit V7 -> VyHX
    react.surge.nms.VersionBukkit V8 -> NNlk
    react.surge.nms.VersionBukkit V9 -> lhER
    react.surge.nms.VersionBukkit V11 -> qeqe
    react.surge.nms.VersionBukkit V111 -> WQVp
    react.surge.nms.VersionBukkit V112 -> PvvK
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> YNlN
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> GYsX
    27:32:boolean uc() -> hYpf
    37:67:react.surge.nms.VersionBukkit get() -> GbeE
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> CgTS:
    void burst(java.lang.Object) -> jpbr
    void setTimeLock(double) -> LXKi
    double getEstimatedTimeUse() -> IFgc
    int flush() -> KgAc
    int flush(react.gbench.Profiler) -> BJOF
    void queue(java.lang.Object) -> gVXa
    void queue(java.util.List) -> lKug
    void queue(java.lang.Object[]) -> BJOF
react.surge.sched.ICancellable -> NgTA:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> ncnP:
    void onTick() -> SKdW
    java.lang.String getTickName() -> qBYc
react.surge.sched.ITask -> sIJd:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> TGHN
    java.lang.String getName() -> getName
    double getComputeTime() -> SCaw
    double getTotalComputeTime() -> GYrA
    double getActiveTime() -> tech
    boolean hasCompleted() -> Ubyu
react.surge.sched.Task -> KDXC:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> UucN
    double computeTime -> ixLr
    double totalComputeTime -> qToh
    double activeTime -> Pnco
    boolean completed -> completed
    react.gbench.Profiler profiler -> wgbl
    react.gbench.Profiler activeProfiler -> nLGI
    int ticks -> JudI
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> lCeb
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> TGHN
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> SCaw
    150:150:boolean hasCompleted() -> Ubyu
    156:156:double getTotalComputeTime() -> GYrA
    162:162:double getActiveTime() -> tech
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> BJOF
    15:15:void access$1(react.surge.sched.Task,boolean) -> BJOF
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> CMRG
    14:14:void access$3(react.surge.sched.Task,double) -> BJOF
    12:12:void access$4(react.surge.sched.Task,double) -> CMRG
    14:14:double access$5(react.surge.sched.Task) -> lKug
    13:13:void access$6(react.surge.sched.Task,double) -> lKug
    13:13:double access$7(react.surge.sched.Task) -> lCeb
    12:12:double access$8(react.surge.sched.Task) -> wTex
react.surge.sched.Task$1 -> KDXC$1:
    react.surge.sched.Task this$0 -> fCoM
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> KDXC$2:
    react.surge.sched.Task this$0 -> fCoM
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> KDXC$3:
    react.surge.sched.Task this$0 -> fCoM
    int val$total -> suHh
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> aTvh:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> UucN
    double computeTime -> ixLr
    double totalComputeTime -> qToh
    double activeTime -> Pnco
    boolean completed -> completed
    react.gbench.Profiler profiler -> wgbl
    react.gbench.Profiler activeProfiler -> nLGI
    int ticks -> JudI
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> lCeb
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> TGHN
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> SCaw
    101:101:boolean hasCompleted() -> Ubyu
    107:107:double getTotalComputeTime() -> GYrA
    113:113:double getActiveTime() -> tech
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> BJOF
    12:12:void access$1(react.surge.sched.TaskLater,double) -> BJOF
    13:13:double access$2(react.surge.sched.TaskLater) -> CMRG
    12:12:double access$3(react.surge.sched.TaskLater) -> lKug
    13:13:void access$4(react.surge.sched.TaskLater,double) -> CMRG
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> lCeb
    14:14:double access$6(react.surge.sched.TaskLater) -> wTex
    14:14:void access$7(react.surge.sched.TaskLater,double) -> lKug
react.surge.sched.TaskLater$1 -> aTvh$1:
    react.surge.sched.TaskLater this$0 -> VhEp
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> MSOX:
    react.glang.GList tasks -> iCqN
    react.glang.GMap taskProfiles -> xasy
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> BJOF
    25:35:void onTick() -> SKdW
    39:40:void putFinishingTask(react.surge.sched.ITask) -> CMRG
    44:53:void putTask(react.surge.sched.ITask) -> lKug
    58:58:java.lang.String getTickName() -> qBYc
    63:63:react.glang.GList getTasks() -> pagl
    68:68:react.glang.GMap getTaskProfiles() -> ndST
react.surge.sched.TaskProfile -> PKWP:
    double activeTime -> Pnco
    double computeTickTime -> FGUK
    double computeTime -> ixLr
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> tech
    23:24:void setActiveTime(double) -> iCML
    28:28:double getComputeTickTime() -> Xlco
    33:34:void setComputeTickTime(double) -> KvkO
    38:38:double getComputeTime() -> SCaw
    43:44:void setComputeTime(double) -> bWiW
react.surge.server.AsyncTick -> oUnn:
react.surge.server.CPS -> OQDu:
    react.glang.GMap keys -> rqeS
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> nuBf
    46:99:void scan() -> TOWI
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> lKug
react.surge.server.CoreTickThread -> Aqog:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> ndNc:
    long memoryFree -> tnym
    long memoryUsed -> xYcn
    long memoryMax -> XLHh
    long lastMemoryUsed -> aMpt
    long memoryUsedAfterGC -> qeqG
    long allocated -> PvuG
    long collected -> GIvs
    long collections -> XLHj
    long sms -> ryyG
    long memoryAllocatedPerTick -> QrKQ
    long memoryCollectedPerTick -> PDTD
    long memoryFullyAllocatedPerTick -> Wjjd
    long mah -> rOeX
    long mahs -> OkdH
    22:39:void <init>() -> <init>
    void onAllocationSet() -> KLkr
    46:98:void run() -> run
    102:102:long getMemoryFree() -> HwHb
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> BKDn
    117:117:long getLastMemoryUsed() -> pYWg
    122:122:long getMemoryUsedAfterGC() -> fBhL
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> xrOu
    137:137:long getCollections() -> jhfq
    142:142:long getSms() -> qCHc
    147:147:long getMemoryAllocatedPerTick() -> twEn
    152:152:long getMemoryCollectedPerTick() -> Pune
    157:157:long getMemoryFullyAllocatedPerTick() -> SwHa
    162:162:long getMah() -> iCaR
    167:167:long getMahs() -> IiJh
react.surge.server.SuperSampler -> SLOu:
    react.gmath.Average ticksPerSecondL -> pRPa
    react.gmath.Average tickTimeL -> BmnY
    react.gmath.Average mahL -> lhGc
    double ticksPerSecond -> tLer
    double ticksPerSecondRaw -> JCBr
    double tickTime -> KEeY
    double tickTimeRaw -> FPHp
    boolean running -> running
    boolean frozen -> SfoN
    double tickUtilizationRaw -> nKhv
    double tickUtilization -> QPIG
    double leftoverTickTime -> Iabh
    long memoryUse -> PTsV
    long memoryAllocated -> nTYc
    long memoryCollected -> msYi
    long mahs -> OkdH
    int totalChunks -> jjPf
    int totalEntities -> Fyyq
    int totalDrops -> OtSv
    int totalTiles -> gOdy
    int totalLiving -> lEaj
    int chunksLoaded -> giXA
    int chunksUnloaded -> CqSB
    react.surge.server.WorldMonitor worldMonitor -> jsAg
    react.surge.server.TPSMonitor tpsMonitor -> dprU
    react.surge.server.MemoryMonitor memoryMonitor -> rXXh
    java.lang.StackTraceElement[] lockStack -> wEdt
    react.glang.GMap spikes -> IPJw
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> SKdW
    154:154:java.lang.String getTickName() -> qBYc
    159:159:react.gmath.Average getTicksPerSecondL() -> tmtF
    164:164:double getTicksPerSecond() -> dgMK
    169:169:double getTicksPerSecondRaw() -> xPQO
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> vkmM
    184:184:react.gmath.Average getTickTimeL() -> qeOQ
    189:189:double getTickTime() -> PvQk
    194:194:double getTickTimeRaw() -> lxCK
    199:199:double getTickUtilizationRaw() -> VoSI
    204:204:double getTickUtilization() -> qBju
    209:209:double getLeftoverTickTime() -> hcFC
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> RcGE
    219:219:long getMemoryUse() -> ifHe
    224:224:long getMemoryAllocated() -> QEod
    229:229:long getMemoryCollected() -> gpcW
    234:234:react.gmath.Average getMahL() -> MRty
    239:239:long getMahs() -> IiJh
    244:244:int getTotalChunks() -> Euqq
    249:249:int getTotalEntities() -> DsPU
    254:254:int getTotalDrops() -> ggqV
    259:259:int getTotalTiles() -> erlw
    264:264:int getTotalLiving() -> BuYM
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> XSUk
    274:274:int getChunksLoaded() -> QWRf
    279:279:int getChunksUnloaded() -> Yojj
    284:285:void setTicksPerSecondL(react.gmath.Average) -> BJOF
    289:290:void setTickTimeL(react.gmath.Average) -> CMRG
    294:295:void setMahL(react.gmath.Average) -> lKug
    299:300:void setTicksPerSecond(double) -> OOtD
    304:305:void setTicksPerSecondRaw(double) -> xhip
    309:310:void setTickTime(double) -> SeQV
    314:315:void setTickTimeRaw(double) -> QNJD
    319:320:void setRunning(boolean) -> Qoli
    324:325:void setTickUtilizationRaw(double) -> ivPh
    329:330:void setTickUtilization(double) -> gDvS
    334:335:void setLeftoverTickTime(double) -> lCdT
    339:340:void setMemoryUse(long) -> LXKi
    344:345:void setMemoryAllocated(long) -> iCML
    349:350:void setMemoryCollected(long) -> KvkO
    354:355:void setMahs(long) -> bWiW
    359:360:void setTotalChunks(int) -> pHCo
    364:365:void setTotalEntities(int) -> SBpS
    369:370:void setTotalDrops(int) -> cSAL
    374:375:void setTotalTiles(int) -> uNbI
    379:380:void setTotalLiving(int) -> mynf
    384:385:void setChunksLoaded(int) -> nuBf
    389:390:void setChunksUnloaded(int) -> xFjH
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> BJOF
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> BJOF
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> BJOF
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> vIjB
    419:419:react.glang.GMap getSpikes() -> RQTk
    31:31:void access$0(react.surge.server.SuperSampler,int) -> BJOF
    33:33:void access$1(react.surge.server.SuperSampler,int) -> CMRG
    34:34:void access$2(react.surge.server.SuperSampler,int) -> lKug
    32:32:void access$3(react.surge.server.SuperSampler,int) -> lCeb
    35:35:void access$4(react.surge.server.SuperSampler,int) -> wTex
    36:36:void access$5(react.surge.server.SuperSampler,int) -> QEXs
    37:37:void access$6(react.surge.server.SuperSampler,int) -> OYFK
    19:19:void access$7(react.surge.server.SuperSampler,double) -> BJOF
    21:21:void access$8(react.surge.server.SuperSampler,double) -> CMRG
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> BJOF
    19:19:double access$10(react.surge.server.SuperSampler) -> CMRG
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> lKug
    21:21:double access$12(react.surge.server.SuperSampler) -> lCeb
    18:18:void access$13(react.surge.server.SuperSampler,double) -> lKug
    20:20:void access$14(react.surge.server.SuperSampler,double) -> lCeb
    24:24:void access$15(react.surge.server.SuperSampler,double) -> wTex
    20:20:double access$16(react.surge.server.SuperSampler) -> wTex
    25:25:void access$17(react.surge.server.SuperSampler,double) -> QEXs
    25:25:double access$18(react.surge.server.SuperSampler) -> QEXs
    26:26:void access$19(react.surge.server.SuperSampler,double) -> OYFK
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> BJOF
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> OYFK
    27:27:void access$22(react.surge.server.SuperSampler,long) -> BJOF
    28:28:void access$23(react.surge.server.SuperSampler,long) -> CMRG
    29:29:void access$24(react.surge.server.SuperSampler,long) -> lKug
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> oVAY
    30:30:void access$26(react.surge.server.SuperSampler,long) -> lCeb
react.surge.server.SuperSampler$1 -> SLOu$1:
    react.surge.server.SuperSampler this$0 -> CGAS
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> BJOF
react.surge.server.SuperSampler$2 -> SLOu$2:
    react.surge.server.SuperSampler this$0 -> CGAS
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> RACl
    106:107:void onSpike() -> iwJK
react.surge.server.SuperSampler$3 -> SLOu$3:
    react.surge.server.SuperSampler this$0 -> CGAS
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> KLkr
react.surge.server.TPSMonitor -> qJsg:
    double tickTimeMS -> KViF
    double rawTicksPerSecond -> ptUi
    react.gbench.Profiler tickProfiler -> axis
    react.gbench.Profiler tickTimeProfiler -> Ajlt
    boolean ticked -> IjUg
    java.lang.Thread$State lastState -> XfAK
    double actualTickTimeMS -> cKmD
    double ltt -> WYkb
    long lastTick -> LGoO
    boolean frozen -> SfoN
    java.lang.StackTraceElement[] lockedStack -> wVej
    double lmsx -> Vxkd
    23:40:void <init>() -> <init>
    void onTicked() -> RACl
    void onSpike() -> iwJK
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> BJOF
    160:160:double getTickTimeMS() -> INwt
    165:165:double getRawTicksPerSecond() -> wMLm
    170:170:react.gbench.Profiler getTickProfiler() -> sYrC
    175:175:boolean isTicked() -> rEmJ
    180:181:void markTick() -> bYAu
    185:185:react.gbench.Profiler getTickTimeProfiler() -> SCcs
    190:190:java.lang.Thread$State getLastState() -> ctvM
    195:195:double getActualTickTimeMS() -> yJbP
    200:200:double getLtt() -> SegU
    205:205:long getLastTick() -> VoAi
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> yKBa
react.surge.server.WorldMonitor -> PvLB:
    boolean chunksChanged -> uaaW
    boolean dropChanged -> twpN
    boolean tileChanged -> LYkr
    boolean livingChanged -> AkMj
    boolean totalChanged -> BKli
    boolean updated -> OJEH
    int totalChunks -> jjPf
    int totalDrops -> OtSv
    int totalTiles -> gOdy
    int totalLiving -> lEaj
    int totalEntities -> Fyyq
    int chunksLoaded -> giXA
    int chunksUnloaded -> CqSB
    long ms -> uhdt
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> BJOF
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> CMRG
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> BJOF
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> BJOF
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> BJOF
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> BJOF
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> BJOF
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> BJOF
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> BJOF
    130:131:void doUpdate() -> psLb
    135:186:void sample() -> HTSV
    190:196:void sampleTotalCount() -> qBir
    200:206:void sampleLivingCount() -> DamD
    210:230:void sampleTileCount() -> SCeH
    234:240:void sampleDropCount() -> kAXf
    244:250:void sampleChunkCount() -> fTMV
react.surge.text.PhantomSpinner -> kRTW:
    react.surge.text.ProgressSpinner s -> Swri
    react.surge.text.ProgressSpinner c -> vlth
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> OQEa:
    java.lang.String[] chars -> VhKN
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> OkgF
    react.surge.text.ProgressSpinner NETWORK -> SxTH
    react.surge.text.ProgressSpinner CIRCLES -> hcmA
    react.surge.text.ProgressSpinner RANDOMS -> hSKP
    react.surge.text.ProgressSpinner MERGERS -> JeFl
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> HCfH
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> upsB:
    int value() -> value
react.surge.util.Area -> gxlH:
    org.bukkit.Location location -> pbqu
    java.lang.Double radius -> vmUP
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> BJOF
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> HDFg
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> OYFK
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> oVAY
    109:109:boolean isWithin(org.bukkit.Location) -> mGHq
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> lCeb
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> BJOF
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> rgoc
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> BuYg
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> fAtW
    257:257:java.lang.Double getRadius() -> xjEk
    268:269:void setRadius(java.lang.Double) -> lKug
    278:283:org.bukkit.Location random() -> Aqwe
react.surge.util.Axis -> ndRN:
    react.surge.util.Axis X -> JCCn
    react.surge.util.Axis Y -> jirI
    react.surge.util.Axis Z -> RBJb
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> DcUh
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> KxFc
    29:29:org.bukkit.util.Vector negative() -> QWTV
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> VMLA:
    react.surge.util.BlastResistance BARRIER -> TPaX
    react.surge.util.BlastResistance BEDROCK -> IHQg
    react.surge.util.BlastResistance COMMAND -> rOfK
    react.surge.util.BlastResistance ENDER_PORTAL -> Nhbe
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> aWHI
    react.surge.util.BlastResistance ANVIL -> bkLW
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> SfpY
    react.surge.util.BlastResistance OBSIDIAN -> wxhR
    react.surge.util.BlastResistance ENDER_CHEST -> dhaO
    react.surge.util.BlastResistance WATER -> elEO
    react.surge.util.BlastResistance LAVA -> UBbn
    react.surge.util.BlastResistance STATIONARY_WATER -> sAgc
    react.surge.util.BlastResistance DRAGON_EGG -> VxmX
    react.surge.util.BlastResistance ENDER_STONE -> wxlJ
    react.surge.util.BlastResistance COAL_BLOCK -> uYSn
    react.surge.util.BlastResistance DIAMOND_BLOCK -> igRn
    react.surge.util.BlastResistance EMERALD_BLOCK -> GlbG
    react.surge.util.BlastResistance GOLD_BLOCK -> QOjv
    react.surge.util.BlastResistance IRON_BLOCK -> tEOW
    react.surge.util.BlastResistance REDSTONE_BLOCK -> NpvI
    react.surge.util.BlastResistance BRICK -> Hodo
    react.surge.util.BlastResistance BRICK_STAIRS -> RAmT
    react.surge.util.BlastResistance HARD_CLAY -> nmpQ
    react.surge.util.BlastResistance STONE -> kSfB
    react.surge.util.BlastResistance SMOOTH_BRICK -> jjUY
    react.surge.util.BlastResistance SMOOTH_STAIRS -> wWIX
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> eJEW
    react.surge.util.BlastResistance STONE_SLAB2 -> nwBc
    react.surge.util.BlastResistance IRON_DOOR -> eJEU
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> bHjw
    react.surge.util.BlastResistance IRON_TRAPDOOR -> PMIg
    react.surge.util.BlastResistance MOB_SPAWNER -> lVhj
    react.surge.util.BlastResistance WEB -> oycn
    react.surge.util.BlastResistance DISPENSER -> agjP
    react.surge.util.BlastResistance DROPPER -> ETwj
    react.surge.util.BlastResistance FURNACE -> Ypse
    react.surge.util.BlastResistance BURNING_FURNACE -> pcTx
    react.surge.util.BlastResistance BEACON -> Enjf
    react.surge.util.BlastResistance COAL_ORE -> tDll
    react.surge.util.BlastResistance COCOA -> Rtoo
    react.surge.util.BlastResistance DIAMOND_ORE -> fewb
    react.surge.util.BlastResistance EMERALD_ORE -> VEhH
    react.surge.util.BlastResistance FENCE -> DcWa
    react.surge.util.BlastResistance FENCE_GATE -> EDXB
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> TYSv
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> Hwst
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> HodS
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> OtXf
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> ipCD
    react.surge.util.BlastResistance ACACIA_FENCE -> AkPk
    react.surge.util.BlastResistance BIRCH_FENCE -> XmqN
    react.surge.util.BlastResistance DARK_OAK_FENCE -> BnSi
    react.surge.util.BlastResistance SPRUCE_FENCE -> fCuI
    react.surge.util.BlastResistance JUNGLE_FENCE -> ynPB
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> aWIe
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> XwEn
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> VgnG
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> tgSt
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> tDor
    react.surge.util.BlastResistance QUARTZ_STAIRS -> TQFj
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> JBgs
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> eIeh
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> iMax
    react.surge.util.BlastResistance WOOD_STAIRS -> jXuf
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> OQxA
    react.surge.util.BlastResistance ACACIA_DOOR -> cUBQ
    react.surge.util.BlastResistance BIRCH_DOOR -> psxY
    react.surge.util.BlastResistance DARK_OAK_DOOR -> veJB
    react.surge.util.BlastResistance SPRUCE_DOOR -> iDou
    react.surge.util.BlastResistance JUNGLE_DOOR -> VWMf
    react.surge.util.BlastResistance GOLD_ORE -> OlLB
    react.surge.util.BlastResistance HOPPER -> SNDg
    react.surge.util.BlastResistance IRON_ORE -> hlaf
    react.surge.util.BlastResistance LAPIS_BLOCK -> cfCt
    react.surge.util.BlastResistance LAPIS_ORE -> diGU
    react.surge.util.BlastResistance QUARTZ_ORE -> BLQj
    react.surge.util.BlastResistance REDSTONE_ORE -> UTHp
    react.surge.util.BlastResistance TRAP_DOOR -> IXui
    react.surge.util.BlastResistance WOOD -> nmrE
    react.surge.util.BlastResistance CHEST -> qTwk
    react.surge.util.BlastResistance TRAPPED_CHEST -> yLOX
    react.surge.util.BlastResistance WORKBENCH -> Yyfu
    react.surge.util.BlastResistance CAULDRON -> usFx
    react.surge.util.BlastResistance LOG -> UJvp
    react.surge.util.BlastResistance LOG_2 -> RlbW
    react.surge.util.BlastResistance BOOKSHELF -> Xeax
    react.surge.util.BlastResistance BANNER -> UJwL
    react.surge.util.BlastResistance STANDING_BANNER -> wyMc
    react.surge.util.BlastResistance WALL_BANNER -> QOlW
    react.surge.util.BlastResistance JACK_O_LANTERN -> KyOq
    react.surge.util.BlastResistance MELON_BLOCK -> Obwu
    react.surge.util.BlastResistance SKULL -> DIfw
    react.surge.util.BlastResistance PUMPKIN -> dheY
    react.surge.util.BlastResistance SIGN -> jbFT
    react.surge.util.BlastResistance SIGN_POST -> UTJG
    react.surge.util.BlastResistance WALL_SIGN -> oWem
    react.surge.util.BlastResistance QUARTZ_BLOCK -> fCyf
    react.surge.util.BlastResistance NOTE_BLOCK -> eRXt
    react.surge.util.BlastResistance RED_SANDSTONE -> QYBH
    react.surge.util.BlastResistance SANDSTONE -> KqCF
    react.surge.util.BlastResistance WOOL -> rrQp
    react.surge.util.BlastResistance MONSTER_EGG -> YqYb
    react.surge.util.BlastResistance RAILS -> fLjg
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> nKqs
    react.surge.util.BlastResistance DETECTOR_RAIL -> oFeM
    react.surge.util.BlastResistance POWERED_RAIL -> lhOp
    react.surge.util.BlastResistance CLAY -> fMKd
    react.surge.util.BlastResistance DIRT -> ahQI
    react.surge.util.BlastResistance GRASS -> tUrs
    react.surge.util.BlastResistance GRAVEL -> gPOP
    react.surge.util.BlastResistance SPONGE -> pcYn
    react.surge.util.BlastResistance BREWING_STAND -> VyRd
    react.surge.util.BlastResistance STONE_BUTTON -> slcU
    react.surge.util.BlastResistance WOOD_BUTTON -> hBPe
    react.surge.util.BlastResistance CAKE_BLOCK -> IbJT
    react.surge.util.BlastResistance ICE -> UTJq
    react.surge.util.BlastResistance PACKED_ICE -> YNtj
    react.surge.util.BlastResistance LEVER -> qTyg
    react.surge.util.BlastResistance MYCEL -> VqAF
    react.surge.util.BlastResistance PISTON_BASE -> aFLJ
    react.surge.util.BlastResistance PISTON_EXTENSION -> JCJb
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> XTdD
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> XCbG
    react.surge.util.BlastResistance GOLD_PLATE -> OJJK
    react.surge.util.BlastResistance IRON_PLATE -> iofK
    react.surge.util.BlastResistance STONE_PLATE -> DlNB
    react.surge.util.BlastResistance WOOD_PLATE -> GSSe
    react.surge.util.BlastResistance SAND -> aEnW
    react.surge.util.BlastResistance SOUL_SAND -> YGHb
    react.surge.util.BlastResistance CACTUS -> DuAQ
    react.surge.util.BlastResistance LADDER -> XTet
    react.surge.util.BlastResistance NETHERRACK -> Xege
    react.surge.util.BlastResistance GLASS -> urlC
    react.surge.util.BlastResistance THIN_GLASS -> iDtn
    react.surge.util.BlastResistance STAINED_GLASS -> KOAh
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> CiMO
    react.surge.util.BlastResistance GLOWSTONE -> KVpo
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> GJeM
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> QYCc
    react.surge.util.BlastResistance SEA_LANTERN -> PxDR
    react.surge.util.BlastResistance BED_BLOCK -> rrSW
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> eIkD
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> FGbU
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> GKEx
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> RRtd
    react.surge.util.BlastResistance LEAVES -> yfEx
    react.surge.util.BlastResistance LEAVES_2 -> BnYP
    react.surge.util.BlastResistance SNOW -> xtEP
    int br -> UdnJ
    react.surge.util.BlastResistance[] ENUM$VALUES -> QrSr
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> GYwT
    175:190:int get(org.bukkit.Material) -> BJOF
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> LiaD:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> OYFK
react.surge.util.C -> IFeL:
    react.surge.util.C BLACK -> nCcB
    react.surge.util.C DARK_BLUE -> GRsr
    react.surge.util.C DARK_GREEN -> bHpK
    react.surge.util.C DARK_AQUA -> UeOC
    react.surge.util.C DARK_RED -> ekke
    react.surge.util.C DARK_PURPLE -> stsx
    react.surge.util.C GOLD -> fnnf
    react.surge.util.C GRAY -> Mege
    react.surge.util.C DARK_GRAY -> ixXn
    react.surge.util.C BLUE -> MTfQ
    react.surge.util.C GREEN -> GKDw
    react.surge.util.C AQUA -> NXIr
    react.surge.util.C RED -> tVUa
    react.surge.util.C LIGHT_PURPLE -> uYYC
    react.surge.util.C YELLOW -> dXHh
    react.surge.util.C WHITE -> gqqq
    react.surge.util.C MAGIC -> veLi
    react.surge.util.C BOLD -> mcBt
    react.surge.util.C STRIKETHROUGH -> uixq
    react.surge.util.C UNDERLINE -> btFF
    react.surge.util.C ITALIC -> QrTm
    react.surge.util.C RESET -> AtHW
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> HMjH
    char code -> Pnry
    boolean isFormat -> Fifh
    java.lang.String toString -> vSnC
    java.util.Map BY_ID -> mjul
    java.util.Map BY_CHAR -> HomN
    java.util.Map dyeChatMap -> MvlR
    java.util.Map chatHexMap -> sKFG
    java.util.Map dyeHexMap -> BejW
    int[] $SWITCH_TABLE$surge$util$C -> MwLv
    react.surge.util.C[] ENUM$VALUES -> OInJ
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> ansc
    378:378:java.lang.String hex() -> CpOR
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> oVAY
    434:442:react.surge.util.C getByChar(java.lang.String) -> xFjH
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> CMRG
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> BJOF
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> CMRG
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> lKug
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> UYwg
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> uhUJ
    560:578:java.lang.String generateColorTable() -> bGby
    588:588:org.bukkit.ChatColor chatColor() -> LYGL
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> OYFK
    632:679:byte getItemMeta() -> FErf
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> JInf
react.surge.util.C$1 -> IFeL$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> IFeL$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> IFeL$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> IFeL$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> IFeL$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> IFeL$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> IFeL$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> IFeL$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> IFeL$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> IFeL$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> IFeL$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> IFeL$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> IFeL$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> IFeL$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> IFeL$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> IFeL$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> IFeL$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> IFeL$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> IFeL$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> IFeL$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> IFeL$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> IFeL$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> esJD:
    double number -> uHYf
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> eOrA
    23:25:react.surge.util.CDou add(double) -> jxri
    30:32:react.surge.util.CDou sub(double) -> hPii
    37:37:double get() -> get
    42:48:void circ() -> qTON
react.surge.util.CMD -> OYWo:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> FHEY
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> ObPP
    51:53:void execute(org.bukkit.command.CommandSender) -> lKug
    60:77:void execute() -> execute
react.surge.util.CNum -> ksyl:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> UYwg
    23:25:react.surge.util.CNum add(int) -> uhUJ
    30:32:react.surge.util.CNum sub(int) -> uhTj
    37:37:int get() -> get
    42:48:void circ() -> qTON
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> UtJW
react.surge.util.Chunks -> jqWm:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> kbeB
    33:40:react.glang.GList getLoadedChunks() -> dDxQ
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> CMRG
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> BJOF
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> BJOF
    98:98:boolean unload(org.bukkit.Chunk) -> AXLY
    114:124:int unload(react.glang.GList,boolean,boolean) -> BJOF
    138:138:int unload(react.glang.GList,boolean) -> BJOF
    150:150:int unload(react.glang.GList) -> myli
    166:166:boolean isLoaded(java.lang.String,int,int) -> BJOF
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> lKug
    201:205:void load(react.glang.GList) -> Qoli
react.surge.util.Cuboid -> MBPc:
    java.lang.String worldName -> Vgss
    int x1 -> IsQc
    int y1 -> JvUF
    int z1 -> xHqU
    int x2 -> tEUu
    int y2 -> tojB
    int z2 -> BwMq
    int[] $SWITCH_TABLE$surge$util$Axis -> FHDH
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> GKFh
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> BJOF
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> lKug
    93:93:boolean hasPlayers() -> nSUt
    98:110:react.glang.GList getPlayers() -> lULi
    115:166:react.glang.GList getEntities() -> PCOx
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> kIUN
    287:287:org.bukkit.Location getLowerNE() -> XSWr
    298:298:org.bukkit.Location getUpperSW() -> lVAG
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> jymT
    348:348:int getSizeY() -> ePkJ
    358:358:int getSizeZ() -> iUGr
    368:368:int getLowerX() -> ydWK
    378:378:int getLowerY() -> FyWM
    388:388:int getLowerZ() -> dgYx
    398:398:int getUpperX() -> Lier
    408:408:int getUpperY() -> jOXt
    418:418:int getUpperZ() -> lfaI
    428:438:org.bukkit.block.Block[] corners() -> vJKW
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> BJOF
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> CMRG
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> lKug
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> lCeb
    546:546:boolean contains(int,int,int) -> wTex
    558:558:boolean contains(org.bukkit.block.Block) -> oVAY
    570:570:boolean contains(org.bukkit.Location) -> OOtD
    580:580:int volume() -> oDvF
    591:601:byte averageLightLevel() -> RtIX
    612:612:react.surge.util.Cuboid contract() -> Jkpg
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> BJOF
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> CMRG
    708:715:boolean containsOnly(org.bukkit.Material) -> CMRG
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> BJOF
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> QEXs
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> BJOF
    786:800:java.util.List getChunks() -> fBlc
    815:819:void fill(int,byte) -> BJOF
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> xYBl
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> loVE
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> rguV
react.surge.util.Cuboid$1 -> MBPc$1:
    react.surge.util.Cuboid this$0 -> PLpC
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> fAtW
    1:1:java.lang.Object onAdapt(java.lang.Object) -> OYFK
react.surge.util.Cuboid$CuboidDirection -> MBPc$BJOF:
    react.surge.util.Cuboid$CuboidDirection North -> xABV
    react.surge.util.Cuboid$CuboidDirection East -> wyTN
    react.surge.util.Cuboid$CuboidDirection South -> TPkY
    react.surge.util.Cuboid$CuboidDirection West -> GJfQ
    react.surge.util.Cuboid$CuboidDirection Up -> XDFu
    react.surge.util.Cuboid$CuboidDirection Down -> lVpG
    react.surge.util.Cuboid$CuboidDirection Horizontal -> wVoT
    react.surge.util.Cuboid$CuboidDirection Vertical -> oXIg
    react.surge.util.Cuboid$CuboidDirection Both -> kTMk
    react.surge.util.Cuboid$CuboidDirection Unknown -> MUIS
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> GKFh
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> BekN
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> ymKT
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> rguV
react.surge.util.Cuboid$CuboidIterator -> MBPc$CMRG:
    org.bukkit.World w -> KFRP
    int baseX -> wEnL
    int baseY -> OJNK
    int baseZ -> aVsk
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> XKyO
    int sizeY -> SNLW
    int sizeZ -> kTQX
    react.surge.util.Cuboid this$0 -> PLpC
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> dofX:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> ydQP:
    react.glang.GList buffer -> hdYn
    boolean dbg -> ffco
    int kf -> dhms
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> lCeb
    41:49:void l(java.lang.Object,java.lang.String) -> CMRG
    53:54:void s(java.lang.Object,java.lang.String) -> lKug
    58:69:void cdb() -> gyXa
    73:79:void v(java.lang.Object,java.lang.String) -> lCeb
    83:84:void w(java.lang.Object,java.lang.String) -> wTex
    88:89:void f(java.lang.Object,java.lang.String) -> QEXs
    93:106:void l(java.lang.String) -> uhTj
    110:117:void s(java.lang.String) -> UtJW
    121:135:void v(java.lang.String) -> kIUN
    139:146:void w(java.lang.String) -> Vejj
    150:157:void f(java.lang.String) -> NEBW
react.surge.util.DMSRequire -> WaPc:
    react.surge.util.DMSRequirement value() -> XSYc
react.surge.util.DMSRequirement -> CpIQ:
    react.surge.util.DMSRequirement SQL -> EnvS
    react.surge.util.DMSRequirement[] ENUM$VALUES -> CFmB
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> uhdt:
    react.surge.util.Depend VAULT -> ayXF
    react.surge.util.Depend FAWE -> nwND
    react.surge.util.Depend WORLDEDIT -> nTia
    react.surge.util.Depend PROTOLIB -> MTkN
    react.surge.util.Depend CITIZENS -> iNKd
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> elRh
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> YwwU:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> aMRg
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> LOoG:
    react.surge.util.DimensionFace X -> CrBk
    react.surge.util.DimensionFace Y -> nUJQ
    react.surge.util.DimensionFace Z -> YGLG
    react.surge.util.DimensionFace[] ENUM$VALUES -> FGdc
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> vsyJ:
    react.surge.util.Direction U -> wxtj
    react.surge.util.Direction D -> JTRJ
    react.surge.util.Direction N -> SDxn
    react.surge.util.Direction S -> sBUV
    react.surge.util.Direction E -> PfdQ
    react.surge.util.Direction W -> mcHM
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> FjHm
    int[] $SWITCH_TABLE$surge$util$Direction -> fxFM
    react.surge.util.Direction[] ENUM$VALUES -> hAtx
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> mrXV
    61:61:int x() -> ydYW
    66:66:int y() -> aUdL
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> cJiA
    81:81:react.glang.GList news() -> xPUB
    86:86:react.glang.GList udnews() -> TrBY
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> SeQV
    115:147:react.surge.util.Direction fromByte(byte) -> oVAY
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> ejaX
react.surge.util.DynamicConfiguration -> qTIT:
react.surge.util.DynamicTracker -> ejYG:
react.surge.util.Embedded -> kbxP:
    react.glang.GList get() -> Vwgc
    void add(java.lang.Object) -> add
react.surge.util.FU -> lLgy:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> BJOF
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> CMRG
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> wTex
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> QEXs
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> kAUP:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> kHtR
react.surge.util.Health -> DbIL:
    double hp -> gYDr
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> tLYA
    41:41:double getHearts() -> JlUH
    51:51:double getHalfHearts() -> kJOW
    61:61:int getFlatHalfHearts() -> XAxC
react.surge.util.IO -> cAlx:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> YpEp:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> BJOF
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> BJOF
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> BJOF
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> BJOF
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> BJOF
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> CMRG
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> lKug
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> lCeb
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> BJOF
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> BJOF
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> BJOF
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> BJOF
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> wTex
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> QEXs
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> OYFK
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> oVAY
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> mGHq
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> BJOF
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> fAtW
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> OOtD
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> BJOF
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> BJOF
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> CMRG
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> BJOF
react.surge.util.MSound -> weyi:
    react.surge.util.MSound AMBIENCE_CAVE -> Pweu
    react.surge.util.MSound AMBIENCE_RAIN -> TrqD
    react.surge.util.MSound AMBIENCE_THUNDER -> FaXW
    react.surge.util.MSound ANVIL_BREAK -> Wsia
    react.surge.util.MSound ANVIL_LAND -> GKLI
    react.surge.util.MSound ANVIL_USE -> YrBs
    react.surge.util.MSound ARROW_HIT -> EMVN
    react.surge.util.MSound BURP -> xYwl
    react.surge.util.MSound CHEST_CLOSE -> OuGA
    react.surge.util.MSound CHEST_OPEN -> fECm
    react.surge.util.MSound CLICK -> AcLb
    react.surge.util.MSound DOOR_CLOSE -> fDbk
    react.surge.util.MSound DOOR_OPEN -> UCRo
    react.surge.util.MSound DRINK -> NPAH
    react.surge.util.MSound EAT -> JKcn
    react.surge.util.MSound EXPLODE -> rjHu
    react.surge.util.MSound FALL_BIG -> EgIX
    react.surge.util.MSound FALL_SMALL -> msjf
    react.surge.util.MSound FIRE -> TarY
    react.surge.util.MSound FIRE_IGNITE -> hmMN
    react.surge.util.MSound FIZZ -> PDeC
    react.surge.util.MSound FUSE -> Pwhr
    react.surge.util.MSound GLASS -> pkrd
    react.surge.util.MSound HURT_FLESH -> elUD
    react.surge.util.MSound ITEM_BREAK -> KhYv
    react.surge.util.MSound ITEM_PICKUP -> rOvG
    react.surge.util.MSound LAVA -> WQjG
    react.surge.util.MSound LAVA_POP -> AbkJ
    react.surge.util.MSound LEVEL_UP -> lgul
    react.surge.util.MSound MINECART_BASE -> WcKG
    react.surge.util.MSound MINECART_INSIDE -> vush
    react.surge.util.MSound NOTE_BASS -> xsij
    react.surge.util.MSound NOTE_PIANO -> Chpp
    react.surge.util.MSound NOTE_BASS_DRUM -> KpiN
    react.surge.util.MSound NOTE_STICKS -> vdsB
    react.surge.util.MSound NOTE_BASS_GUITAR -> PnwF
    react.surge.util.MSound NOTE_SNARE_DRUM -> WIWk
    react.surge.util.MSound NOTE_PLING -> wyXN
    react.surge.util.MSound ORB_PICKUP -> tNKX
    react.surge.util.MSound PISTON_EXTEND -> oXNL
    react.surge.util.MSound PISTON_RETRACT -> DAbO
    react.surge.util.MSound PORTAL -> WRIl
    react.surge.util.MSound PORTAL_TRAVEL -> ubOp
    react.surge.util.MSound PORTAL_TRIGGER -> UCSB
    react.surge.util.MSound SHOOT_ARROW -> KWXE
    react.surge.util.MSound SPLASH -> btKn
    react.surge.util.MSound SPLASH2 -> wpfU
    react.surge.util.MSound STEP_GRASS -> hAvl
    react.surge.util.MSound STEP_GRAVEL -> Dkvp
    react.surge.util.MSound STEP_LADDER -> VVxc
    react.surge.util.MSound STEP_SAND -> wNgD
    react.surge.util.MSound STEP_SNOW -> Rlnt
    react.surge.util.MSound STEP_STONE -> TbUT
    react.surge.util.MSound STEP_WOOD -> Fils
    react.surge.util.MSound STEP_WOOL -> Filu
    react.surge.util.MSound SWIM -> rHIL
    react.surge.util.MSound WATER -> apjx
    react.surge.util.MSound WOOD_CLICK -> xAHa
    react.surge.util.MSound BAT_DEATH -> ipRO
    react.surge.util.MSound BAT_HURT -> NiTk
    react.surge.util.MSound BAT_IDLE -> jsTv
    react.surge.util.MSound BAT_LOOP -> ihBN
    react.surge.util.MSound BAT_TAKEOFF -> iNNt
    react.surge.util.MSound BLAZE_BREATH -> IsWk
    react.surge.util.MSound BLAZE_DEATH -> mRJt
    react.surge.util.MSound BLAZE_HIT -> IHdD
    react.surge.util.MSound CAT_HISS -> kLCs
    react.surge.util.MSound CAT_HIT -> FPYo
    react.surge.util.MSound CAT_MEOW -> UCSi
    react.surge.util.MSound CAT_PURR -> aNgH
    react.surge.util.MSound CAT_PURREOW -> kKbw
    react.surge.util.MSound CHICKEN_IDLE -> DcfL
    react.surge.util.MSound CHICKEN_HURT -> AQlw
    react.surge.util.MSound CHICKEN_EGG_POP -> cwPd
    react.surge.util.MSound CHICKEN_WALK -> qEDb
    react.surge.util.MSound COW_IDLE -> ExLB
    react.surge.util.MSound COW_HURT -> ORcn
    react.surge.util.MSound COW_WALK -> PoYc
    react.surge.util.MSound CREEPER_HISS -> agxT
    react.surge.util.MSound CREEPER_DEATH -> CrFG
    react.surge.util.MSound ENDERDRAGON_DEATH -> DcfW
    react.surge.util.MSound ENDERDRAGON_GROWL -> hJjJ
    react.surge.util.MSound ENDERDRAGON_HIT -> OIsO
    react.surge.util.MSound ENDERDRAGON_WINGS -> MfPg
    react.surge.util.MSound ENDERMAN_DEATH -> xYwx
    react.surge.util.MSound ENDERMAN_HIT -> SMoO
    react.surge.util.MSound ENDERMAN_IDLE -> ChtL
    react.surge.util.MSound ENDERMAN_TELEPORT -> IQTH
    react.surge.util.MSound ENDERMAN_SCREAM -> xIXO
    react.surge.util.MSound ENDERMAN_STARE -> XoDW
    react.surge.util.MSound GHAST_SCREAM -> cwSj
    react.surge.util.MSound GHAST_SCREAM2 -> PEHv
    react.surge.util.MSound GHAST_CHARGE -> CGTI
    react.surge.util.MSound GHAST_DEATH -> Cywg
    react.surge.util.MSound GHAST_FIREBALL -> oiTm
    react.surge.util.MSound GHAST_MOAN -> KEyj
    react.surge.util.MSound IRONGOLEM_DEATH -> vdwh
    react.surge.util.MSound IRONGOLEM_HIT -> IIFP
    react.surge.util.MSound IRONGOLEM_THROW -> pBEM
    react.surge.util.MSound IRONGOLEM_WALK -> MTpw
    react.surge.util.MSound MAGMACUBE_WALK -> rjMm
    react.surge.util.MSound MAGMACUBE_WALK2 -> XncT
    react.surge.util.MSound MAGMACUBE_JUMP -> ihDc
    react.surge.util.MSound PIG_IDLE -> QGkj
    react.surge.util.MSound PIG_DEATH -> LkaW
    react.surge.util.MSound PIG_WALK -> Trwn
    react.surge.util.MSound SHEEP_IDLE -> msoP
    react.surge.util.MSound SHEEP_SHEAR -> Qing
    react.surge.util.MSound SHEEP_WALK -> WAMS
    react.surge.util.MSound SILVERFISH_HIT -> txcl
    react.surge.util.MSound SILVERFISH_KILL -> eRek
    react.surge.util.MSound SILVERFISH_IDLE -> SpVR
    react.surge.util.MSound SILVERFISH_WALK -> hvCC
    react.surge.util.MSound SKELETON_IDLE -> QXlG
    react.surge.util.MSound SKELETON_DEATH -> txbq
    react.surge.util.MSound SKELETON_HURT -> mbll
    react.surge.util.MSound SKELETON_WALK -> BvuY
    react.surge.util.MSound SLIME_ATTACK -> AANg
    react.surge.util.MSound SLIME_WALK -> jYcm
    react.surge.util.MSound SLIME_WALK2 -> Xnak
    react.surge.util.MSound SPIDER_IDLE -> YyuX
    react.surge.util.MSound SPIDER_DEATH -> Asqu
    react.surge.util.MSound SPIDER_WALK -> yCks
    react.surge.util.MSound WITHER_DEATH -> GJnX
    react.surge.util.MSound WITHER_HURT -> TrwA
    react.surge.util.MSound WITHER_IDLE -> kStm
    react.surge.util.MSound WITHER_SHOOT -> nnaC
    react.surge.util.MSound WITHER_SPAWN -> VqNP
    react.surge.util.MSound WOLF_BARK -> OdHc
    react.surge.util.MSound WOLF_DEATH -> mQkK
    react.surge.util.MSound WOLF_GROWL -> dqeN
    react.surge.util.MSound WOLF_HOWL -> RmQp
    react.surge.util.MSound WOLF_HURT -> DkyO
    react.surge.util.MSound WOLF_PANT -> pRck
    react.surge.util.MSound WOLF_SHAKE -> VyaF
    react.surge.util.MSound WOLF_WALK -> jIEv
    react.surge.util.MSound WOLF_WHINE -> cMCF
    react.surge.util.MSound ZOMBIE_METAL -> JCYf
    react.surge.util.MSound ZOMBIE_WOOD -> tpVJ
    react.surge.util.MSound ZOMBIE_WOODBREAK -> euLD
    react.surge.util.MSound ZOMBIE_IDLE -> WANe
    react.surge.util.MSound ZOMBIE_DEATH -> wOKq
    react.surge.util.MSound ZOMBIE_HURT -> mROb
    react.surge.util.MSound ZOMBIE_INFECT -> tpVT
    react.surge.util.MSound ZOMBIE_UNFECT -> QYOq
    react.surge.util.MSound ZOMBIE_REMEDY -> rGkp
    react.surge.util.MSound ZOMBIE_WALK -> EUmL
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> vdxq
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> RltY
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> svCl
    react.surge.util.MSound ZOMBIE_PIG_HURT -> VppI
    react.surge.util.MSound DIG_WOOL -> tFAd
    react.surge.util.MSound DIG_GRASS -> oFqj
    react.surge.util.MSound DIG_GRAVEL -> xcOa
    react.surge.util.MSound DIG_SAND -> qfjf
    react.surge.util.MSound DIG_SNOW -> bboW
    react.surge.util.MSound DIG_STONE -> totI
    react.surge.util.MSound DIG_WOOD -> XesT
    react.surge.util.MSound FIREWORK_BLAST -> nvtF
    react.surge.util.MSound FIREWORK_BLAST2 -> Sxfl
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> LQnw
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> qLwv
    react.surge.util.MSound FIREWORK_TWINKLE -> orFi
    react.surge.util.MSound FIREWORK_TWINKLE2 -> ARRK
    react.surge.util.MSound FIREWORK_LAUNCH -> Sxfr
    react.surge.util.MSound SUCCESSFUL_HIT -> AcRx
    react.surge.util.MSound HORSE_ANGRY -> Bety
    react.surge.util.MSound HORSE_ARMOR -> GmTf
    react.surge.util.MSound HORSE_BREATHE -> dXUU
    react.surge.util.MSound HORSE_DEATH -> vSvf
    react.surge.util.MSound HORSE_GALLOP -> PoaD
    react.surge.util.MSound HORSE_HIT -> WRQv
    react.surge.util.MSound HORSE_IDLE -> JKlT
    react.surge.util.MSound HORSE_JUMP -> aNmf
    react.surge.util.MSound HORSE_LAND -> NWww
    react.surge.util.MSound HORSE_SADDLE -> cvwG
    react.surge.util.MSound HORSE_SOFT -> ighH
    react.surge.util.MSound HORSE_WOOD -> yfUP
    react.surge.util.MSound DONKEY_ANGRY -> hTCX
    react.surge.util.MSound DONKEY_DEATH -> EpBj
    react.surge.util.MSound DONKEY_HIT -> dFvQ
    react.surge.util.MSound DONKEY_IDLE -> KNoc
    react.surge.util.MSound HORSE_SKELETON_DEATH -> oPGM
    react.surge.util.MSound HORSE_SKELETON_HIT -> XUVU
    react.surge.util.MSound HORSE_SKELETON_IDLE -> ipXU
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> EDnG
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> tpXG
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> YOfY
    react.surge.util.MSound VILLAGER_DEATH -> LbsB
    react.surge.util.MSound VILLAGER_HAGGLE -> NGWE
    react.surge.util.MSound VILLAGER_HIT -> bkcB
    react.surge.util.MSound VILLAGER_IDLE -> yTrU
    react.surge.util.MSound VILLAGER_NO -> MwWo
    react.surge.util.MSound VILLAGER_YES -> gsBm
    java.lang.String pre19sound -> heDe
    java.lang.String post19sound -> tFBw
    org.bukkit.Sound resolvedSound -> ukIW
    react.surge.util.MSound[] ENUM$VALUES -> bbrO
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> MmNG
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> eHTW:
    org.bukkit.Material material -> AJCd
    java.lang.Byte data -> lqPV
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> NMjo
    79:80:void setData(java.lang.Byte) -> BJOF
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> FyQF:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> Mtbj
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> Ukqd
    68:68:boolean isAnyOnline() -> GcIm
    80:80:react.glang.GList inWorld(org.bukkit.World) -> jpbr
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> myli
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> BJOF
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> BJOF
    143:144:void disable(org.bukkit.entity.Player) -> QNJD
    154:155:void enable(org.bukkit.entity.Player) -> ivPh
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> BJOF
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> CMRG
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> gDvS
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> BJOF
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> lCdT
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> lKug
    300:300:boolean canFindPlayer(java.lang.String) -> eied
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> PBVn
    338:345:react.glang.GList onlinePlayers() -> gguF
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> eOrA
    368:371:void clear(org.bukkit.entity.Player) -> jxri
    381:385:void clearEffects(org.bukkit.entity.Player) -> hPii
    398:399:void heal(org.bukkit.entity.Player,double) -> BJOF
    409:410:void heal(org.bukkit.entity.Player) -> TWSO
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> yIhy
    432:433:void resetHunger(org.bukkit.entity.Player) -> HCOL
    443:444:void kill(org.bukkit.entity.Player) -> oxBh
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> OOsQ
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> GPlb
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> BJOF
react.surge.util.P$1 -> FyQF$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> fAtW
    1:1:java.lang.Object onAdapt(java.lang.Object) -> OYFK
react.surge.util.P$2 -> FyQF$2:
    java.lang.Double val$doff -> CqkY
    org.bukkit.entity.Player val$e -> uavr
    org.bukkit.entity.Entity[] val$result -> yMEl
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> LyoS
react.surge.util.PE -> ksxi:
    react.surge.util.PE ABSORPTION -> lXAk
    react.surge.util.PE BLINDNESS -> VptG
    react.surge.util.PE CONFUSION -> ecmV
    react.surge.util.PE DAMAGE_RESISTANCE -> ORmV
    react.surge.util.PE FAST_DIGGING -> Kpsx
    react.surge.util.PE FIRE_RESISTANCE -> aNpG
    react.surge.util.PE GLOWING -> tyLA
    react.surge.util.PE HARM -> Lbug
    react.surge.util.PE HEAL -> fpBt
    react.surge.util.PE HEALTH_BOOST -> VWae
    react.surge.util.PE HUNGER -> KiEU
    react.surge.util.PE INCREASE_DAMAGE -> cUWE
    react.surge.util.PE INVISIBILITY -> WtXA
    react.surge.util.PE JUMP -> ShLM
    react.surge.util.PE LEVITATION -> kLMP
    react.surge.util.PE LUCK -> UmqP
    react.surge.util.PE NIGHT_VISION -> dOhL
    react.surge.util.PE POISON -> nUVA
    react.surge.util.PE REGENERATION -> SNXB
    react.surge.util.PE SATURATION -> fUnI
    react.surge.util.PE SLOW -> xkdP
    react.surge.util.PE SLOW_DIGGING -> BMHr
    react.surge.util.PE SPEED -> Ijls
    react.surge.util.PE UNLUCK -> SWHp
    react.surge.util.PE WATER_BREATHING -> Rlvf
    react.surge.util.PE WEAKNESS -> BMHp
    react.surge.util.PE WITHER -> yTsm
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> BJOF
    144:144:react.surge.util.PE d(int) -> Vejj
    156:156:react.surge.util.PE a(int) -> NEBW
    166:166:org.bukkit.potion.PotionEffect c() -> rgsu
    177:178:void c(org.bukkit.entity.LivingEntity) -> QEXs
    182:183:void crm(org.bukkit.entity.LivingEntity) -> OYFK
    187:188:void rm(org.bukkit.entity.LivingEntity) -> oVAY
react.surge.util.ParticleEffect -> GjqX:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> sltu
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> QYSa
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> UmpQ
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> THjK
    react.surge.util.ParticleEffect WATER_BUBBLE -> DmAJ
    react.surge.util.ParticleEffect WATER_SPLASH -> hSby
    react.surge.util.ParticleEffect WATER_WAKE -> daKK
    react.surge.util.ParticleEffect SUSPENDED -> ukJw
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> mQps
    react.surge.util.ParticleEffect CRIT -> UfAM
    react.surge.util.ParticleEffect CRIT_MAGIC -> bcUL
    react.surge.util.ParticleEffect SMOKE_NORMAL -> EpCq
    react.surge.util.ParticleEffect SMOKE_LARGE -> dGWj
    react.surge.util.ParticleEffect SPELL -> EDoI
    react.surge.util.ParticleEffect SPELL_INSTANT -> TIJs
    react.surge.util.ParticleEffect SPELL_MOB -> oOfr
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> iVjP
    react.surge.util.ParticleEffect SPELL_WITCH -> qwsd
    react.surge.util.ParticleEffect DRIP_WATER -> dqmm
    react.surge.util.ParticleEffect DRIP_LAVA -> sBdk
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> MMIp
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> yDVg
    react.surge.util.ParticleEffect TOWN_AURA -> Nqnx
    react.surge.util.ParticleEffect NOTE -> qwsi
    react.surge.util.ParticleEffect PORTAL -> bIdd
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> eSOE
    react.surge.util.ParticleEffect FLAME -> xkgJ
    react.surge.util.ParticleEffect LAVA -> rjUw
    react.surge.util.ParticleEffect FOOTSTEP -> DmDL
    react.surge.util.ParticleEffect CLOUD -> PwvC
    react.surge.util.ParticleEffect REDSTONE -> bcXT
    react.surge.util.ParticleEffect SNOWBALL -> mIdI
    react.surge.util.ParticleEffect SNOW_SHOVEL -> RvKx
    react.surge.util.ParticleEffect SLIME -> grfa
    react.surge.util.ParticleEffect HEART -> XnlG
    react.surge.util.ParticleEffect BARRIER -> IbaF
    react.surge.util.ParticleEffect ITEM_CRACK -> mJDW
    react.surge.util.ParticleEffect BLOCK_CRACK -> ujlk
    react.surge.util.ParticleEffect BLOCK_DUST -> OAmB
    react.surge.util.ParticleEffect WATER_DROP -> Faeq
    react.surge.util.ParticleEffect ITEM_TAKE -> uIJt
    react.surge.util.ParticleEffect MOB_APPEARANCE -> OuRX
    react.surge.util.ParticleEffect DRAGON_BREATH -> mQsj
    react.surge.util.ParticleEffect END_ROD -> nCuX
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> DBOb
    react.surge.util.ParticleEffect SWEEP_ATTACK -> VGBj
    java.util.Map NAME_MAP -> qwrX
    java.util.Map ID_MAP -> gPbd
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> FsIX
    java.util.List properties -> sugn
    react.surge.util.ParticleEffect[] ENUM$VALUES -> tMyt
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> ETRe
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> BJOF
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> IyWx
    557:565:react.surge.util.ParticleEffect fromId(int) -> kHtR
    577:578:boolean isWater(org.bukkit.Location) -> sbMJ
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> BJOF
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> BJOF
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> BJOF
    665:681:void display(float,int,org.bukkit.Location,double) -> BJOF
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> BJOF
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> BJOF
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> BJOF
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> BJOF
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> BJOF
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> BJOF
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> BJOF
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> BJOF
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> BJOF
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> BJOF
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> BJOF
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> BJOF
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> BJOF
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> BJOF
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> GjqX$BJOF:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> GjqX$CMRG:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> GjqX$lKug:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> FErw
    1594:1594:float getValueY() -> wfcD
    1605:1605:float getValueZ() -> UdBb
react.surge.util.ParticleEffect$OrdinaryColor -> GjqX$lCeb:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> FErw
    1526:1526:float getValueY() -> wfcD
    1537:1537:float getValueZ() -> UdBb
react.surge.util.ParticleEffect$ParticleColor -> GjqX$wTex:
    1383:1383:void <init>() -> <init>
    float getValueX() -> FErw
    float getValueY() -> wfcD
    float getValueZ() -> UdBb
react.surge.util.ParticleEffect$ParticleColorException -> GjqX$QEXs:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> GjqX$OYFK:
    org.bukkit.Material material -> AJCd
    byte data -> ihNb
    int[] packetData -> AAWq
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> QOEH
    1309:1309:java.lang.String getPacketDataString() -> kdAc
react.surge.util.ParticleEffect$ParticleDataException -> GjqX$oVAY:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> GjqX$mGHq:
    int version -> version
    java.lang.Class enumParticle -> mJHA
    java.lang.reflect.Constructor packetConstructor -> EDsY
    java.lang.reflect.Method getHandle -> eSPk
    java.lang.reflect.Field playerConnection -> aqXM
    java.lang.reflect.Method sendPacket -> vmry
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> rPfG
    float offsetX -> HEkx
    float offsetY -> HVnN
    float offsetZ -> XCxr
    float speed -> mIgJ
    int amount -> hIdw
    boolean longDistance -> KXHI
    react.surge.util.ParticleEffect$ParticleData data -> jsaw
    java.lang.Object packet -> rGsy
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> AXLY
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> BJOF
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> CMRG
    2004:2018:void sendTo(org.bukkit.Location,double) -> CMRG
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> GjqX$mGHq$BJOF:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> GjqX$mGHq$CMRG:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> GjqX$mGHq$lKug:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> GjqX$fAtW:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> sdir
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> sukb
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> GBic
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> NrRk
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> hulJ
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> GjqX$OOtD:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> PdkE:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> Jjxl
react.surge.util.Persist -> sjoP:
react.surge.util.PluginUtil -> Vnky:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> wTex
    81:85:void enableAll() -> iLYO
    95:99:void disable(org.bukkit.plugin.Plugin) -> QEXs
    106:110:void disableAll() -> bifc
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> OYFK
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> BJOF
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> INcx
    169:172:java.util.List getPluginNames(boolean) -> HBlr
    184:187:java.lang.String getPluginVersion(java.lang.String) -> NMRo
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> oVAY
    237:316:java.util.List findByCommand(java.lang.String) -> fdYP
    337:338:void load(org.bukkit.plugin.Plugin) -> mGHq
    342:364:java.lang.String getPluginFileName(java.lang.String) -> paUL
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> BJOF
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> fAtW
    480:484:void reloadAll() -> SwMt
    496:622:void unload(org.bukkit.plugin.Plugin) -> OOtD
react.surge.util.PoolCount -> PBgl:
react.surge.util.PoolDescriber -> RkQi:
react.surge.util.PoolNanoThrottle -> VMJc:
react.surge.util.PositionalSelector -> xFxx:
    react.glang.GSet allowedChunks -> DmEw
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> maVa
    39:40:void addChunk(org.bukkit.Chunk) -> Qoli
    44:44:react.glang.GSet getAllowedChunks() -> JdCX
react.surge.util.Protocol -> hjnv:
    react.surge.util.Protocol LATEST -> HqBR
    react.surge.util.Protocol R1_12_2 -> VGFJ
    react.surge.util.Protocol R1_12_2_PRE -> RvMO
    react.surge.util.Protocol R1_12_1 -> tEiL
    react.surge.util.Protocol R1_12 -> xkhN
    react.surge.util.Protocol R1_11_2 -> lXDi
    react.surge.util.Protocol R1_11_1 -> SVkl
    react.surge.util.Protocol R1_11 -> OSQM
    react.surge.util.Protocol R1_10_2 -> utAU
    react.surge.util.Protocol R1_10_1 -> jkPf
    react.surge.util.Protocol R1_10 -> BxBC
    react.surge.util.Protocol R1_9_4 -> oaNV
    react.surge.util.Protocol R1_9_3 -> Cqpk
    react.surge.util.Protocol R1_9_2 -> lhfB
    react.surge.util.Protocol R1_9_1 -> WJFx
    react.surge.util.Protocol R1_9 -> rrhC
    react.surge.util.Protocol R1_8_9 -> FiyD
    react.surge.util.Protocol R1_8_8 -> qMaJ
    react.surge.util.Protocol R1_8_7 -> VXEw
    react.surge.util.Protocol R1_8_6 -> thOq
    react.surge.util.Protocol R1_8_5 -> ReOC
    react.surge.util.Protocol R1_8_4 -> etuT
    react.surge.util.Protocol R1_8_3 -> utCy
    react.surge.util.Protocol R1_8_2 -> VWhS
    react.surge.util.Protocol R1_8_1 -> pmEY
    react.surge.util.Protocol R1_8 -> sCJJ
    react.surge.util.Protocol R1_7_10 -> aNvM
    react.surge.util.Protocol R1_7_9 -> FQKK
    react.surge.util.Protocol R1_7_8 -> GnAE
    react.surge.util.Protocol R1_7_7 -> Frlj
    react.surge.util.Protocol R1_7_6 -> Cqsp
    react.surge.util.Protocol R1_7_5 -> FrmK
    react.surge.util.Protocol R1_7_4 -> cnoG
    react.surge.util.Protocol R1_7_3 -> EgYf
    react.surge.util.Protocol R1_7_2 -> iWNe
    react.surge.util.Protocol R1_7_1 -> heMU
    react.surge.util.Protocol B1_6_4 -> AQyt
    react.surge.util.Protocol B1_6_3 -> rPgV
    react.surge.util.Protocol B1_6_2 -> NGaD
    react.surge.util.Protocol B1_6_1 -> Spbc
    react.surge.util.Protocol B1_5_2 -> YrRa
    react.surge.util.Protocol B1_5_1 -> EoiC
    react.surge.util.Protocol B1_5 -> hdkh
    react.surge.util.Protocol B1_4_7 -> IYqi
    react.surge.util.Protocol B1_4_6 -> BLnX
    react.surge.util.Protocol B1_4_5 -> JvhK
    react.surge.util.Protocol B1_4_4 -> FPhk
    react.surge.util.Protocol B1_4_2 -> pSQf
    react.surge.util.Protocol B1_3_2 -> RvOU
    react.surge.util.Protocol B1_3_1 -> EEVE
    react.surge.util.Protocol B1_2_5 -> IkTd
    react.surge.util.Protocol B1_2_4 -> CaSb
    react.surge.util.Protocol EARLIEST -> wGCu
    react.surge.util.Protocol UNKNOWN -> rGuA
    int version -> version
    java.lang.String packageVersion -> UuRs
    java.lang.String versionName -> nnmR
    boolean netty -> grie
    react.surge.util.Protocol[] ENUM$VALUES -> ENFt
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> wnsV
    118:118:java.lang.String getPackageVersion() -> uhXg
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> NpNt
    142:150:react.surge.util.Protocol getProtocolVersion() -> iKxS
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> CMRG
    160:160:boolean isServerVersion() -> migH
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> gVrf
    175:175:boolean isActualVersion() -> twLK
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> YpOW
    200:200:int getMetaVersion() -> xHBr
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> IOVN:
    react.surge.util.Protocol from -> OBQq
    react.surge.util.Protocol to -> xcXm
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> rEqJ
    21:21:react.surge.util.Protocol getTo() -> ccxl
    26:26:boolean contains(react.surge.util.Protocol) -> lKug
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> WPMk:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> JdCb
    70:70:int randomNextInt() -> nSWa
    80:80:long randomNextLong() -> gNcI
    92:92:boolean isWithin(double) -> TWSO
    104:104:boolean isWithin(int) -> Mtbj
    116:116:boolean isWithin(long) -> xhip
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> yIhy
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> XJLi
react.surge.util.RawEvent -> qJyV:
react.surge.util.RayTrace -> NDuE:
    org.bukkit.Location start -> TQbD
    org.bukkit.util.Vector direction -> djBQ
    java.lang.Double maxDistance -> VNuo
    java.lang.Double distanceCovered -> YjBh
    java.lang.Double step -> PDtX
    java.lang.Boolean stop -> gXvs
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> gyWS
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> LyoS
    89:89:org.bukkit.Location getStart() -> RjyY
    94:95:void setStart(org.bukkit.Location) -> myli
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> wVBK
    114:115:void setMaxDistance(java.lang.Double) -> lCeb
    119:119:java.lang.Double getDistanceCovered() -> TGMR
    124:125:void setDistanceCovered(java.lang.Double) -> wTex
    129:129:java.lang.Double getStep() -> qKbX
    134:135:void setStep(java.lang.Double) -> QEXs
react.surge.util.ReflectionUtils -> GABQ:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> BJOF
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> BJOF
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> BJOF
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> BJOF
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> BJOF
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> BJOF
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> BJOF
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> BJOF
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> BJOF
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> BJOF
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> BJOF
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> BJOF
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> BJOF
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> BJOF
react.surge.util.ReflectionUtils$DataType -> GABQ$BJOF:
    react.surge.util.ReflectionUtils$DataType BYTE -> QXyK
    react.surge.util.ReflectionUtils$DataType SHORT -> pBOi
    react.surge.util.ReflectionUtils$DataType INTEGER -> PEWi
    react.surge.util.ReflectionUtils$DataType LONG -> YaTW
    react.surge.util.ReflectionUtils$DataType CHARACTER -> wFgI
    react.surge.util.ReflectionUtils$DataType FLOAT -> YPSK
    react.surge.util.ReflectionUtils$DataType DOUBLE -> bJLH
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> kLVP
    java.util.Map CLASS_MAP -> cwbS
    java.lang.Class primitive -> MxDa
    java.lang.Class reference -> UfJQ
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> GeRG
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> vlSo
    704:704:java.lang.Class getReference() -> rEtT
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> CMRG
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> lKug
    741:742:java.lang.Class getReference(java.lang.Class) -> lCeb
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> BJOF
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> CMRG
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> CMRG
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> lKug
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> BJOF
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> GABQ$CMRG:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> GSnu
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> GBnH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> oOou
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> fMfy
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> NYEM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> qfwj
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> NjFb
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> vnXH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> fVWT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> fMfL
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> NGaO
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> ReOa
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> ubbg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> NrTp
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> puWQ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> sCKS
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> GTNp
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> WknA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> whho
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> IkWG
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> gsLa
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> NfxM:
    void refresh() -> refresh
react.surge.util.SQLOperation -> fBhl:
    react.surge.util.SQLOperation LOAD -> NquF
    react.surge.util.SQLOperation SAVE -> Efyi
    react.surge.util.SQLOperation[] ENUM$VALUES -> PEWY
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> qJyD:
    react.surge.util.ServerState START -> tWNp
    react.surge.util.ServerState ENABLE -> nnoV
    react.surge.util.ServerState DISABLE -> UehV
    react.surge.util.ServerState STOP -> NaSs
    react.surge.util.ServerState RUNNING -> Isfq
    react.surge.util.ServerState[] ENUM$VALUES -> CrWA
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> IOXb:
    org.bukkit.Location location -> pbqu
    org.bukkit.util.Vector offset -> foiL
    org.bukkit.util.Vector size -> cEAN
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> Qoli
    90:94:org.bukkit.Location randomLocation() -> hIYR
    104:104:org.bukkit.Location randomSurface() -> BmOX
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> Rslt
    129:129:org.bukkit.util.Vector getSize() -> ePpE
react.surge.util.SnowLevel -> EeOc:
    byte level -> OmKQ
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> aoXL
    51:52:void setLevel(byte) -> mGHq
react.surge.util.SuperCaller -> GYsX:
    void run() -> run
react.surge.util.T -> hYpf:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> CMRG
    32:35:void stop() -> stop
react.surge.util.TXT -> GbeE:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> OYFK
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> BJOF
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> BJOF
    99:99:java.lang.String line(react.surge.util.C,int) -> BJOF
    113:113:java.lang.String underline(react.surge.util.C,int) -> CMRG
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> BJOF
react.surge.util.Tag -> IFgc:
    java.lang.String value() -> value
react.surge.util.Timer -> KgAc:
    long tns -> eSWV
    long cns -> FrqH
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> AXjB
react.surge.util.VectorMath -> TGHN:
    int[] $SWITCH_TABLE$surge$util$Axis -> FHDH
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> Bwel
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> BJOF
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> BJOF
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> CMRG
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> lKug
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> BJOF
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> CMRG
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> CMRG
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> lKug
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> lCeb
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> wTex
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> QEXs
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> OYFK
    111:111:double round(double,int) -> wTex
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> BJOF
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> BJOF
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> BJOF
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> lCeb
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> wTex
    268:268:org.bukkit.util.Vector toVector(float,float) -> BJOF
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> BJOF
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> BJOF
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> oVAY
    337:340:double getSpeed(org.bukkit.util.Vector) -> mGHq
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> BJOF
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> fAtW
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> BJOF
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> CMRG
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> lKug
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> lCeb
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> OOtD
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> loVE
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> hbit
react.surge.util.VectorMath$1 -> TGHN$1:
    org.bukkit.util.Vector val$vector -> kfJd
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> LyoS
    1:1:java.lang.Object onAdapt(java.lang.Object) -> OYFK
react.surge.util.W -> SCaw:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> mGHq
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> BJOF
    75:86:org.bukkit.entity.Entity getEntity(int) -> eied
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> BJOF
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> BJOF
    143:143:int getChunkX(org.bukkit.block.Block) -> fAtW
    155:155:int getChunkY(org.bukkit.block.Block) -> OOtD
    168:169:void dropXp(org.bukkit.Location,int) -> CMRG
    180:180:int getChunkZ(org.bukkit.block.Block) -> LyoS
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> CMRG
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> BJOF
    232:239:react.glang.GList news(org.bukkit.Location) -> HBlr
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> BJOF
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> HBlr
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> gVXa
    300:300:org.bukkit.World toSync(org.bukkit.World) -> LXKi
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> sbMJ
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> PSVY
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> PSVY
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> vITL
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> BJOF
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> BJOF
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> BJOF
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> BJOF
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> BJOF
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> BJOF
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> BJOF
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> BJOF
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> XJLi
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> AXLY
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> XJLi
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> lKug
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> BJOF
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> BJOF
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> BJOF
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> BJOF
react.surge.util.W$1 -> SCaw$1:
    java.lang.Double val$doff -> CqkY
    org.bukkit.entity.Entity val$e -> aNys
    org.bukkit.entity.Entity[] val$result -> yMEl
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> LyoS
react.surge.util.Worlds -> GYrA:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> oUnn
    33:33:boolean hasWorld(java.lang.String) -> wmyL
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> tech:
react.text.ColoredString -> Ubyu:
    react.surge.util.C c -> gamm
    java.lang.String s -> wXKf
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> mXga
    42:43:void setC(react.surge.util.C) -> CMRG
    47:47:java.lang.String getS() -> bYIf
    52:53:void setS(java.lang.String) -> MuCu
react.text.RTEX -> pagl:
    react.glang.GList extras -> usgf
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> OIBg
    44:58:react.json.JSONObject toJSON() -> FyAO
react.text.RTX -> ndST:
    react.json.JSONArray base -> ULXk
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> QEXs
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> CMRG
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> BJOF
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> BJOF
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> CMRG
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> lKug
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> BJOF
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> CMRG
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> lKug
    265:265:react.json.JSONArray toJSON() -> cJjX
    276:277:void tellRawTo(org.bukkit.entity.Player) -> WynC
react.text.RawText -> Xlco:
    java.lang.String COLOR_BLACK -> svSH
    java.lang.String COLOR_DARK_BLUE -> smbC
    java.lang.String COLOR_DARK_GREEN -> EpOR
    java.lang.String COLOR_DARK_AQUA -> BEBO
    java.lang.String COLOR_DARK_RED -> sdox
    java.lang.String COLOR_DARK_PURPLE -> mJLo
    java.lang.String COLOR_GOLD -> smaJ
    java.lang.String COLOR_GRAY -> whkg
    java.lang.String COLOR_DARK_GRAY -> FrrA
    java.lang.String COLOR_BLUE -> YGcg
    java.lang.String COLOR_GREEN -> uHri
    java.lang.String COLOR_AQUA -> QkBC
    java.lang.String COLOR_RED -> IYwc
    java.lang.String COLOR_LIGHT_PURPLE -> HFRU
    java.lang.String COLOR_YELLOW -> vDFM
    java.lang.String COLOR_WHITE -> xIkN
    java.lang.String COLOR_NONE -> qMhC
    java.lang.String HEAD_TEXT -> COuc
    java.lang.String HEAD_COLOR -> Dtyo
    java.lang.String HEAD_BOLD -> COvB
    java.lang.String HEAD_ITALIC -> ASBI
    java.lang.String HEAD_UNDERLINED -> NHCt
    java.lang.String HEAD_STRIKETHROUGH -> wykn
    java.lang.String HEAD_OBFUSCATED -> SWSb
    java.lang.String HEAD_CLICK_EVENT -> pcvE
    java.lang.String HEAD_HOVER_EVENT -> IkYL
    java.lang.String HEAD_ACTION -> vfGw
    java.lang.String HEAD_VALUE -> WlQM
    java.lang.String HEAD_EXTRA -> Rdsg
    java.lang.String HEAD_ACTION_SHOW_TEXT -> DlmF
    java.lang.String HEAD_ACTION_COMMAND -> YXgS
    java.util.ArrayList components -> YYGq
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> FNOI
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> wTex
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> BJOF
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> BJOF
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> BJOF
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> BJOF
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> BJOF
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> BJOF
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> BJOF
    307:313:java.lang.String compile() -> HoBX
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> BJOF

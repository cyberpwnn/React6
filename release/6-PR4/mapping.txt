react.BStats -> org.cyberpwn.react.WGJb:
    int B_STATS_VERSION -> B_STATS_VERSION
    java.lang.String URL -> URL
    boolean logFailedRequests -> WGJb
    java.lang.String serverUUID -> dfal
    org.bukkit.plugin.java.JavaPlugin plugin -> lTgP
    java.util.List charts -> KejP
    void <init>(org.bukkit.plugin.java.JavaPlugin) -> <init>
    void addCustomChart(react.BStats$CustomChart) -> WGJb
    void startSubmitting() -> WGJb
    org.json.simple.JSONObject getPluginData() -> dfal
    org.json.simple.JSONObject getServerData() -> lTgP
    void submitData() -> KejP
    void sendData(org.json.simple.JSONObject) -> WGJb
    byte[] compress(java.lang.String) -> WGJb
    org.bukkit.plugin.java.JavaPlugin access$000(react.BStats) -> WGJb
    void access$100(react.BStats) -> dfal
    void access$300(org.json.simple.JSONObject) -> dfal
    boolean access$400() -> mOYk
    java.lang.Object In(java.lang.Object,java.lang.Object,java.lang.Object) -> WGJb
    void <clinit>() -> <clinit>
react.BStats$1 -> org.cyberpwn.react.dfal:
    java.util.Timer val$timer -> mOYk
    react.BStats this$0 -> wnYS
    void <init>(react.BStats,java.util.Timer) -> <init>
    void run() -> run
    java.lang.Object OZ(java.lang.Object,java.lang.Object,java.lang.Object) -> dfal
react.BStats$1$1 -> org.cyberpwn.react.lTgP:
    react.BStats$1 this$1 -> SCOM
    void <init>(react.BStats$1) -> <init>
    void run() -> run
    java.lang.Object tJ(java.lang.Object,java.lang.Object,java.lang.Object) -> lTgP
react.BStats$2 -> org.cyberpwn.react.KejP:
    org.json.simple.JSONObject val$data -> SmbW
    react.BStats this$0 -> wnYS
    void <init>(react.BStats,org.json.simple.JSONObject) -> <init>
    void run() -> run
    java.lang.Object zo(java.lang.Object,java.lang.Object,java.lang.Object) -> KejP
react.BStats$AdvancedBarChart -> org.cyberpwn.react.mOYk:
    java.util.concurrent.Callable callable -> ePRm
    void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    org.json.simple.JSONObject getChartData() -> wnYS
    java.lang.Object nM(java.lang.Object,java.lang.Object,java.lang.Object) -> mOYk
react.BStats$AdvancedPie -> org.cyberpwn.react.wnYS:
    java.util.concurrent.Callable callable -> ePRm
    void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    org.json.simple.JSONObject getChartData() -> wnYS
    java.lang.Object ld(java.lang.Object,java.lang.Object,java.lang.Object) -> wnYS
react.BStats$BStats -> org.cyberpwn.react.SCOM:
    java.lang.Object[] V -> CgEJ
    int p -> nJMP
    java.math.BigInteger[] O -> WXLP
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void p(int,java.lang.Object) -> WGJb
    int k(int,int) -> WGJb
    int G(byte[],int) -> WGJb
    void d487() -> SCOM
    void l() -> l
    java.lang.String S(java.lang.Object) -> WGJb
react.BStats$CustomChart -> org.cyberpwn.react.SmbW:
    java.lang.String chartId -> bWiv
    void <init>(java.lang.String) -> <init>
    org.json.simple.JSONObject getRequestJsonObject() -> SmbW
    org.json.simple.JSONObject getChartData() -> wnYS
    org.json.simple.JSONObject access$200(react.BStats$CustomChart) -> dfal
    java.lang.Object Ki(java.lang.Object,java.lang.Object,java.lang.Object) -> SCOM
react.BStats$DrilldownPie -> org.cyberpwn.react.ePRm:
    java.util.concurrent.Callable callable -> ePRm
    void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    org.json.simple.JSONObject getChartData() -> wnYS
    java.lang.Object vy(java.lang.Object,java.lang.Object,java.lang.Object) -> SmbW
react.BStats$MultiLineChart -> org.cyberpwn.react.CgEJ:
    java.util.concurrent.Callable callable -> ePRm
    void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    org.json.simple.JSONObject getChartData() -> wnYS
    java.lang.Object ze(java.lang.Object,java.lang.Object,java.lang.Object) -> ePRm
react.BStats$SimpleBarChart -> org.cyberpwn.react.nJMP:
    java.util.concurrent.Callable callable -> ePRm
    void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    org.json.simple.JSONObject getChartData() -> wnYS
    java.lang.Object uZ(java.lang.Object,java.lang.Object,java.lang.Object) -> CgEJ
react.BStats$SimplePie -> org.cyberpwn.react.WXLP:
    java.util.concurrent.Callable callable -> ePRm
    void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    org.json.simple.JSONObject getChartData() -> wnYS
    java.lang.Object Yl(java.lang.Object,java.lang.Object,java.lang.Object) -> nJMP
react.BStats$SingleLineChart -> org.cyberpwn.react.bWiv:
    java.util.concurrent.Callable callable -> ePRm
    void <init>(java.lang.String,java.util.concurrent.Callable) -> <init>
    org.json.simple.JSONObject getChartData() -> wnYS
    java.lang.Object Xt(java.lang.Object,java.lang.Object,java.lang.Object) -> WXLP
react.Config -> org.cyberpwn.react.TqEp:
    react.glang.GMap worldConfigs -> TqEp
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> OYFP
    java.lang.String A_REDSTONE_DYNAMIC_CLOCK -> UAEN
    java.lang.String A_COMMANDOVERRIDE_TPS -> VDGt
    java.lang.String A_SAMPLE_VIEWPORT -> sHYj
    java.lang.String A_RAI -> ssMp
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> xNwp
    java.lang.String A_POOL_MAXTHREADS -> qcup
    java.lang.String A_POOL_SYNC_NANOS -> PBWD
    java.lang.String A_CULLING_ENABLED -> vQbs
    java.lang.String A_FASTLEAF_ENABLED -> eHBt
    java.lang.String A_FASTLEAF_ONDECAY -> XJNQ
    java.lang.String A_FASTLEAF_INSTANT -> DrYG
    java.lang.String A_FASTLEAF_DECAYPERIOD -> XdAJ
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> OXeW
    java.lang.String A_ENTITYSTACK_ENABLED -> Vmyy
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> ESVk
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> DPSk
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> tupB
    java.lang.String A_GLASS_SHOW_BLOCKS -> HvRk
    java.lang.String A_GLASS_SHOW_PARTICLES -> fcvC
    java.lang.String A_ALLOW_CULL -> LXLE
    java.lang.String A_ALLOW_PURGE -> vRCd
    java.lang.String A_ALLOW_STACKING -> FpMO
    java.lang.String A_CULL_RULES -> qtuv
    java.lang.String A_RAI_TPS_HIGH_TICK -> EBVK
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> EdXk
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> gpKE
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> LiMa
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> wnWa
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> lTeb
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> QpMH
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> sQMd
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> RkAo
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> EAwa
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> NECO
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> Vvlm
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> eqwO
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> qlil
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> vRGF
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> xiNT
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> MlSj
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> IWUw
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> kYvI
    java.lang.String A_RAI_FLUID_TIME_CEIL -> xhmI
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> hQNI
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> MSBL
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> NffG
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> GQQD
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> MtdV
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> QNKT
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> RPmS
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> CMUG
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> tuqb
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> vACh
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> CgFI
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> TxvW
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> JHvG
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> SeSJ
    java.lang.String A_USE_WORLD_CONFIGS -> ivTF
    java.lang.String A_ENTITY_STACKER_SHOW_PARTICLES -> GQOV
    java.lang.String A_ENTITY_STACKER_SHOW_NAMETAG -> avks
    java.lang.String A_LANGUAGE -> PBVy
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> LXMs
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> aLYB
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> WiQc
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> dUcs
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> SeUk
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> owfy
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> rDyl
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> GbSl
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> KDLh
    java.lang.String A_RAI_ENTITY_PROPIGATE -> iuts
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> DHIa
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> eHFt
    java.lang.String A_ENTITY_STACKER_NAME_TAG_FORMAT -> kIWJ
    java.lang.String A_FAST_LEAF_MAX_MS -> LWoG
    java.lang.String A_NMS_CHUNK_UPDATE_INTERVAL -> qJgc
    java.lang.String A_THROTTLE_EXPLOSIONS -> CxIX
    java.lang.String A_THROTTLED_RATIO -> BIsF
    java.lang.String A_FAST_GROWTH -> nuDS
    java.lang.String A_FAST_EXPLOSIONS -> APAi
    java.lang.String A_DROPS_INSTADROP -> FpPq
    java.lang.String A_SKIP_ORBS -> ykqT
    java.lang.String A_FAST_ORB_PICKUP -> LaBD
    java.lang.String A_DROPS_TELEPORT -> BdEn
    java.lang.String A_DESPAWN_USELESS_ARROWS -> eaXS
    java.lang.String A_FACTIONS -> BlVQ
    java.lang.String A_PURGE_INTERVAL -> jODi
    java.lang.String A_PURGE -> CxJT
    java.lang.String A_SOUNDS -> anaA
    java.lang.String A_ALLOW_TEMPACCESS -> CEGd
    java.lang.String A_FAST_LEAF_FAST_UPDATE -> XdFb
    double MAX_EXPLOSION_MS -> lfPF
    boolean REDSTONE_DYNAMIC_CLOCK -> YEFe
    boolean COMMANDOVERRIDES_TPS -> BcgA
    int SAMPLE_VIEWPORT -> dEFO
    boolean RAI -> JQkh
    int ENTITY_STACK_MAX_COUNT -> Tgyu
    int POOL_MAXTHREADS -> doXr
    long POOL_SYNC_NANOS -> wUNL
    boolean CULLING_ENABLED -> BReH
    boolean FASTLEAF_ENABLED -> SmhX
    boolean FASTLEAF_ONDECAY -> DGit
    boolean FASTLEAF_INSTANT -> GsWW
    int FASTLEAF_DECAYPERIOD -> GHcP
    boolean COMMANDOVERRIDES_MEMORY -> SCTm
    boolean ENTITYSTACK_ENABLED -> oLts
    int ENTITYSTACK_MINIMUM_GROUP -> oxJE
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> Ywjd
    int ENTITYSTACK_MAXIMUM_HEALTH -> xrBu
    boolean GLASS_SHOW_BLOCKS -> teVE
    boolean GLASS_SHOW_PARTICLES -> TplA
    react.glang.GList ALLOW_CULL -> WqeI
    react.glang.GList ALLOW_PURGE -> HSwA
    react.glang.GList ALLOW_STACKING -> STWF
    react.glang.GList CULL_RULES -> hIAh
    double RAI_TPS_HIGH_TICK -> Yfhm
    long RAI_REDSTONE_TIME_FLOOR -> mWpQ
    long RAI_REDSTONE_TIME_CEIL -> BIrp
    long RAI_REDSTONE_TIME_MUDDING -> LFpn
    double RAI_REDSTONE_TIME_FUNCTION -> avqR
    double RAI_REDSTONE_TIME_OVERBLEED -> kcMC
    int RAI_REDSTONE_TIME_RADIUS -> RPro
    int RAI_REDSTONE_TIME_PROPIGATION -> kHyH
    long RAI_HOPPER_TIME_FLOOR -> byso
    long RAI_HOPPER_TIME_CEIL -> MItQ
    long RAI_HOPPER_TIME_MUDDING -> mGPB
    double RAI_HOPPER_TIME_FUNCTION -> Jsob
    double RAI_HOPPER_TIME_OVERBLEED -> JALR
    int RAI_HOPPER_TIME_RADIUS -> CEHd
    int RAI_HOPPER_TIME_PROPIGATION -> URKO
    int RAI_ENTITY_CHUNK_MULTIPLIER -> GruU
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> VfPB
    int RAI_ENTITY_CHUNK_RADIUS -> kbkM
    long RAI_FLUID_TIME_FLOOR -> xGNF
    long RAI_FLUID_TIME_CEIL -> FhCR
    long RAI_FLUID_TIME_MUDDING -> uEsi
    double RAI_FLUID_TIME_FUNCTION -> yRaQ
    double RAI_FLUID_TIME_OVERBLEED -> xFlb
    int RAI_FLUID_TIME_RADIUS -> BIsv
    int RAI_FLUID_TIME_PROPIGATION -> fAyS
    double SMEAR_TICK_ENTITIES_MAX_TICK -> AWsB
    double SMEAR_TICK_TILES_MAX_TICK -> AFpm
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> YUht
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> rori
    double SMEAR_TICK_ENTITIES_AMOUNT -> wUPG
    double SMEAR_TICK_TILES_AMOUNT -> nthS
    boolean SMEAR_TICK_ENTITIES_ENABLE -> BRfs
    boolean SMEAR_TICK_TILES_ENABLE -> xWrH
    boolean HOPPER_OVERTICK_ENABLE -> QFAs
    boolean USE_WORLD_CONFIGS -> jpkw
    boolean ENTITY_STACKER_SHOW_PARTICLES -> ndGa
    boolean ENTITY_STACKER_SHOW_NAME_TAG -> QyFc
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> CDha
    long RAI_CHUNK_TIME_CEIL -> uVxs
    long RAI_CHUNK_TIME_MUDDING -> oLvw
    double RAI_CHUNK_TIME_FUNCTION -> HCWk
    double RAI_CHUNK_TIME_OVERBLEED -> GYfc
    int RAI_CHUNK_TIME_RADIUS -> KwUU
    int RAI_CHUNK_TIME_PROPIGATION -> NLyR
    boolean RAI_CHUNK_TIME_PROPIGATE -> QMqg
    boolean RAI_FLUID_TIME_PROPIGATE -> UtRO
    boolean RAI_ENTITY_PROPIGATE -> skFN
    boolean RAI_HOPPER_TIME_PROPIGATE -> FEaw
    boolean RAI_REDSTONE_TIME_PROPIGATE -> PKPR
    java.lang.String ENTITY_STACKER_NAME_TAG_FORMAT -> APDY
    double FAST_LEAF_MAX_MS -> GbXW
    int NMS_CHUNK_UPDATE_INTERVAL -> FpWJ
    boolean THROTTLE_EXPLOSIONS -> sHbU
    double THROTTLED_RATIO -> PlrO
    boolean FAST_GROWTH -> oEGC
    boolean FAST_EXPLOSIONS -> kAJi
    boolean DROPS_INSTADROP -> jgyq
    boolean SKIP_ORBS -> YDfj
    boolean FAST_ORB_PICKUP -> xytC
    boolean DROPS_TELEPORT -> IEyH
    boolean DESPAWN_USELESS_ARROWS -> satA
    boolean FACTIONS -> NLxE
    int PURGE_INTERVAL -> dUfv
    boolean PURGE -> Smif
    boolean SOUNDS -> nRca
    boolean ALLOW_TEMPACCESS -> PvCQ
    boolean FAST_LEAF_NMS -> lDMV
    boolean hrld -> qKKx
    boolean rns -> JcPM
    boolean rrl -> JboL
    surge.cluster.DataCluster defaultMain -> CMYw
    surge.cluster.DataCluster defaultExp -> kcND
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void setup() -> setup
    void resetConfigs() -> ePRm
    void doSave() -> CgEJ
    void doTrack(org.bukkit.plugin.Plugin) -> WGJb
    void onRead(org.bukkit.plugin.Plugin) -> dfal
    void read(java.io.File,boolean) -> WGJb
    react.api.WorldConfig getWorldConfig(org.bukkit.World) -> WGJb
    void closeWorldConfig(org.bukkit.World) -> dfal
    surge.cluster.DataCluster read(surge.cluster.DataCluster,boolean) -> WGJb
    surge.cluster.DataCluster defaultConfig(boolean) -> WGJb
    react.glang.GList getDefaultEntitiesForStacking() -> nJMP
    react.glang.GList getDefaultEntitiesForCulling() -> WXLP
    react.glang.GList getDefaultEntitiesForRemoval() -> bWiv
    react.glang.GList getDefaultCullRules() -> TqEp
    java.lang.Object Kx(java.lang.Object,java.lang.Object,java.lang.Object) -> bWiv
react.Config$1 -> org.cyberpwn.react.OYFP:
    java.io.File val$fConfig -> EucO
    java.io.File val$fConfigExperimental -> xrCo
    org.bukkit.plugin.Plugin val$main -> KLcE
    void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    void run() -> run
    java.lang.Object Qc(java.lang.Object,java.lang.Object,java.lang.Object) -> TqEp
react.Config$2 -> org.cyberpwn.react.UAEN:
    react.api.WorldConfig val$wc -> UcRL
    org.bukkit.World val$w -> PvFD
    void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    void run() -> run
    java.lang.Object oF(java.lang.Object,java.lang.Object,java.lang.Object) -> OYFP
react.Gate -> org.cyberpwn.react.VDGt:
    int snd -> lDPh
    react.glang.GMap defaultSettings -> oMYv
    react.glang.GSet refresh -> wnck
    react.glang.GSet destroy -> aUSC
    int cd -> uOLQ
    void <init>() -> <init>
    boolean factions() -> OYFP
    void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> WGJb
    org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> WGJb
    int getChunkCountForView() -> UAEN
    int getMaxChunksForView() -> VDGt
    boolean hasFawe() -> sHYj
    void tickEntityNextTickListTick(org.bukkit.World) -> lTgP
    void resetEntityMaxTick(org.bukkit.World) -> KejP
    int getEntityTickMax(org.bukkit.World) -> mOYk
    int getTileTickMax(org.bukkit.World) -> wnYS
    void tweakEntityTickMax(org.bukkit.World,int) -> WGJb
    java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> WGJb
    void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> WGJb
    int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> WGJb
    void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> dfal
    void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> WGJb
    org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> SCOM
    java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> WGJb
    java.lang.String msg(react.api.ReactPlayer,react.notification.Notification) -> WGJb
    java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> dfal
    react.glang.GList broadcastReactUsers() -> ssMp
    java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> lTgP
    java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> KejP
    java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> mOYk
    boolean isBadForUnloading() -> xNwp
    boolean canUnload(org.bukkit.World,int,int) -> WGJb
    boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    void unloadChunk(org.bukkit.World,int,int) -> dfal
    void removeEntity(org.bukkit.entity.Entity) -> WGJb
    void purgeEntity(org.bukkit.entity.Entity) -> dfal
    void purgeEntity(org.bukkit.entity.Entity,boolean) -> WGJb
    void cullEntity(org.bukkit.entity.Entity) -> lTgP
    void updateBlock(org.bukkit.block.Block) -> WGJb
    java.lang.String header(java.lang.String,surge.util.C) -> WGJb
    java.lang.String header(surge.util.C) -> WGJb
    void updateFluid(org.bukkit.block.Block) -> dfal
    void refresh(org.bukkit.Chunk) -> dfal
    void refreshChunks() -> qcup
    void sendBlockChange(org.bukkit.Location) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object zk(java.lang.Object,java.lang.Object,java.lang.Object) -> UAEN
react.Gate$1 -> org.cyberpwn.react.sHYj:
    react.api.SelectorPosition val$sel -> MIxJ
    react.glang.Callback val$prog -> cAfK
    react.glang.Callback val$cb -> ksrF
    void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    void run() -> run
    java.lang.Object Wn(java.lang.Object,java.lang.Object,java.lang.Object) -> VDGt
react.Gate$1$1 -> org.cyberpwn.react.ssMp:
    java.lang.Object val$o -> JQpU
    java.lang.reflect.Constructor val$vectorConstruct -> rEah
    java.lang.reflect.Constructor val$cuboidConstruct -> lUSG
    java.lang.reflect.Method val$faweFixMethod -> ryGG
    java.lang.Integer[] val$total -> KfVO
    java.lang.Integer[] val$sof -> VDSD
    java.lang.Integer val$tot -> esAj
    react.Gate$1 this$0 -> cRhJ
    void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],java.lang.Integer) -> <init>
    void run() -> run
    java.lang.Object Rw(java.lang.Object,java.lang.Object,java.lang.Object) -> sHYj
react.Gate$1$2 -> org.cyberpwn.react.xNwp:
    java.lang.Integer[] val$total -> KfVO
    react.Gate$1 this$0 -> cRhJ
    void <init>(react.Gate$1,java.lang.String,int,java.lang.Integer[]) -> <init>
    void run() -> run
    java.lang.Object Fi(java.lang.Object,java.lang.Object,java.lang.Object) -> ssMp
react.Gate$2 -> org.cyberpwn.react.qcup:
    org.bukkit.command.CommandSender val$p -> Eucs
    java.lang.String val$s -> wDNt
    void <init>(org.bukkit.command.CommandSender,java.lang.String) -> <init>
    void run() -> run
react.Gate$3 -> org.cyberpwn.react.PBWD:
    int[] $SwitchMap$react$api$ActivationRangeType -> sPsi
    void <clinit>() -> <clinit>
    java.lang.Object py(java.lang.Object,java.lang.Object,java.lang.Object) -> xNwp
react.Info -> org.cyberpwn.react.vQbs:
    java.lang.String CORE_REACT_DOT -> AaJB
    java.lang.String CORE_NAME -> AiYg
    java.lang.String CORE_CACHE -> fvCl
    java.lang.String WORLD_CONFIGS -> sIDj
    java.lang.String CORE_DOTYML -> sIEM
    java.lang.String COMMAND_REACT -> nBFP
    java.lang.String COMMAND_RAI -> oEGr
    java.lang.String COMMAND_ACT_DESCRIPTION -> ggch
    java.lang.String COMMAND_ACT -> rNQU
    java.lang.String COMMAND_ACT_ALIAS_1 -> RryI
    java.lang.String COMMAND_ACT_ALIAS_2 -> fvFg
    java.lang.String COMMAND_ACT_USAGE -> vssI
    java.lang.String COMMAND_HELP_DESCRIPTION -> UJAo
    java.lang.String COMMAND_HELP -> DQBY
    java.lang.String COMMAND_HELP_ALIAS_1 -> miXs
    java.lang.String COMMAND_HELP_ALIAS_2 -> TiAo
    java.lang.String COMMAND_HELP_USAGE -> CgPr
    java.lang.String COMMAND_PING_DESCRIPTION -> oELO
    java.lang.String COMMAND_PING -> PSch
    java.lang.String COMMAND_PING_ALIAS_1 -> OjTA
    java.lang.String COMMAND_PING_ALIAS_2 -> jNnH
    java.lang.String COMMAND_PING_USAGE -> XSKh
    java.lang.String COMMAND_STATUS_DESCRIPTION -> prbF
    java.lang.String COMMAND_STATUS -> maGs
    java.lang.String COMMAND_STATUS_ALIAS_1 -> anfr
    java.lang.String COMMAND_STATUS_ALIAS_2 -> RPyM
    java.lang.String COMMAND_STATUS_USAGE -> eXpW
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> JbtQ
    java.lang.String COMMAND_CPUSCORE -> DHQd
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> WPHn
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> QxkB
    java.lang.String COMMAND_CPUSCORE_USAGE -> qSal
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> cdMC
    java.lang.String COMMAND_RELOAD -> Nfov
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> aTtW
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> wDQn
    java.lang.String COMMAND_RELOAD_USAGE -> qeCx
    java.lang.String COMMAND_FEATURE_DESCRIPTION -> ntkr
    java.lang.String COMMAND_FEATURE -> TOOm
    java.lang.String COMMAND_FEATURE_ALIAS_1 -> Orbd
    java.lang.String COMMAND_FEATURE_ALIAS_2 -> QxiG
    java.lang.String COMMAND_FEATURE_USAGE -> GPxS
    java.lang.String COMMAND_CTP_DESCRIPTION -> gyIM
    java.lang.String COMMAND_CTP -> BuPV
    java.lang.String COMMAND_CTP_ALIAS_1 -> PeES
    java.lang.String COMMAND_CTP_ALIAS_2 -> hQXG
    java.lang.String COMMAND_CTP_USAGE -> JcTD
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> ccjN
    java.lang.String COMMAND_MONITOR -> AaLA
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> EluX
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> XRiQ
    java.lang.String COMMAND_MONITOR_USAGE -> ejPn
    java.lang.String COMMAND_ENV_DESCRIPTION -> QWGK
    java.lang.String COMMAND_ENV -> ogLy
    java.lang.String COMMAND_ENV_ALIAS_1 -> xWsx
    java.lang.String COMMAND_ENV_ALIAS_2 -> sPuY
    java.lang.String COMMAND_ENV_USAGE -> eYOu
    java.lang.String COMMAND_FIX_DESCRIPTION -> APJD
    java.lang.String COMMAND_FIX -> MRkB
    java.lang.String COMMAND_FIX_ALIAS_1 -> gEby
    java.lang.String COMMAND_FIX_ALIAS_2 -> gyIC
    java.lang.String COMMAND_FIX_USAGE -> dxPN
    java.lang.String COMMAND_VERSION_DESCRIPTION -> lLeY
    java.lang.String COMMAND_VERSION -> RjmU
    java.lang.String COMMAND_VERSION_ALIAS_1 -> maKO
    java.lang.String COMMAND_VERSION_ALIAS_2 -> pHPw
    java.lang.String COMMAND_VERSION_USAGE -> jqTJ
    java.lang.String COMMAND_MAP_DESCRIPTION -> CUpP
    java.lang.String COMMAND_MAP -> Dadv
    java.lang.String COMMAND_MAP_ALIAS_1 -> VTwR
    java.lang.String COMMAND_MAP_ALIAS_2 -> KCvN
    java.lang.String COMMAND_MAP_USAGE -> yckm
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> ETHM
    java.lang.String COMMAND_TOPCHUNK -> xFui
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> TNqH
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> PJtl
    java.lang.String COMMAND_TOPCHUNK_USAGE -> ktUv
    java.lang.String COMMAND_GLASS_DESCRIPTION -> vQqb
    java.lang.String COMMAND_GLASS -> WXYa
    java.lang.String COMMAND_GLASS_ALIAS_1 -> OPbE
    java.lang.String COMMAND_GLASS_ALIAS_2 -> ESdy
    java.lang.String COMMAND_GLASS_USAGE -> TOPX
    java.lang.String COMMAND_SUB_DESCRIPTION -> Knhk
    java.lang.String COMMAND_SUB -> oDlM
    java.lang.String COMMAND_SUB_ALIAS_1 -> ghIa
    java.lang.String COMMAND_SUB_ALIAS_2 -> UlFP
    java.lang.String COMMAND_SUB_USAGE -> rowv
    java.lang.String COMMAND_USUB_DESCRIPTION -> cclN
    java.lang.String COMMAND_USUB -> ofoS
    java.lang.String COMMAND_USUB_ALIAS_1 -> Fxkg
    java.lang.String COMMAND_USUB_ALIAS_2 -> pjRs
    java.lang.String COMMAND_USUB_USAGE -> HwBe
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> qddU
    java.lang.String COMMAND_CBLAME -> sIHV
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> wfVM
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> OGpo
    java.lang.String COMMAND_CBLAME_USAGE -> YUoM
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> IqTb
    java.lang.String COMMAND_ACTIONLOG -> UARX
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> UcVF
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> SmpG
    java.lang.String COMMAND_ACTIONLOG_USAGE -> JIbx
    java.lang.String COMMAND_TEMPACCESS_DESCRIPTION -> vbrR
    java.lang.String COMMAND_TEMPACCESS -> xqiU
    java.lang.String COMMAND_TEMPACCESS_ALIAS_1 -> ankK
    java.lang.String COMMAND_TEMPACCESS_ALIAS_2 -> vRTo
    java.lang.String COMMAND_TEMPACCESS_USAGE -> HLQP
    java.lang.String COMMAND_ACCEPT_DESCRIPTION -> twBq
    java.lang.String COMMAND_ACCEPT -> vtWl
    java.lang.String COMMAND_ACCEPT_ALIAS_1 -> VoMA
    java.lang.String COMMAND_ACCEPT_ALIAS_2 -> ccnv
    java.lang.String COMMAND_ACCEPT_USAGE -> Hmrq
    java.lang.String COMMAND_REVOKE_DESCRIPTION -> UsyJ
    java.lang.String COMMAND_REVOKE -> gNYk
    java.lang.String COMMAND_REVOKE_ALIAS_1 -> Ukgu
    java.lang.String COMMAND_REVOKE_ALIAS_2 -> yAjx
    java.lang.String COMMAND_REVOKE_USAGE -> VoML
    java.lang.String COMMAND_REQUESTS_DESCRIPTION -> wfYO
    java.lang.String COMMAND_REQUESTS -> BRoL
    java.lang.String COMMAND_REQUESTS_ALIAS_1 -> BAlx
    java.lang.String COMMAND_REQUESTS_ALIAS_2 -> qdgW
    java.lang.String COMMAND_REQUESTS_USAGE -> Eukv
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> fvJg
    java.lang.String COMMAND_CAPABILITIES -> xqlY
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> opCl
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> htAD
    java.lang.String COMMAND_CAPABILITIES_USAGE -> lCuk
    java.lang.String MSG_PERMISSION -> rFGi
    java.lang.String MSG_MONITORING_STARTED -> YwtE
    java.lang.String MSG_MONITORING_STOPPED -> eadM
    java.lang.String MSG_ACTIONLOGGING_STARTED -> ksvf
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> vsut
    java.lang.String MSG_GLASS_STARTED -> oENu
    java.lang.String MSG_GLASS_STOPPED -> hIJi
    org.bukkit.Color COLOR_HOPPER -> YUqM
    org.bukkit.Color COLOR_BLOCK_UPDATE -> OivM
    org.bukkit.Color COLOR_BLOCK_FROMTO -> Iyfl
    org.bukkit.Color COLOR_BLOCK_BURN -> dUow
    org.bukkit.Color COLOR_BLOCK_DECAY -> ksvS
    org.bukkit.Color COLOR_BLOCK_FORM -> FhNF
    java.lang.String NAME_TICK -> OYUi
    java.lang.String NAME_MEMORY -> opBi
    java.lang.String NAME_CHUNKS -> Edif
    java.lang.String NAME_ENTITIES -> fBdY
    java.lang.String NAME_BANDWIDTH -> SwDX
    java.lang.String STATE_MONITORING_TAB -> xOkk
    java.lang.String STATE_MONITORING_ENABLED -> BtuA
    java.lang.String STATE_MONITORING_HIGH -> EBiQ
    java.lang.String STATE_CHANNELS -> FFLq
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> pHUN
    java.lang.String STATE_MAPPING_ENABLED -> FElV
    java.lang.String STATE_SOUND_PLAYS -> APNs
    java.lang.String STATE_MONITORING_POSTED -> Gjqx
    java.lang.String STATE_MONITORING_LASTTAB -> iDAa
    java.lang.String STATE_MONITORING_SWT -> NgWN
    java.lang.String STATE_GLASSES_ENABLED -> oUqv
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> lMJX
    java.lang.String STATE_PLAYER_HOTBAR -> vIdy
    java.lang.String STATE_PLAYER_SHIFT -> lMIt
    java.lang.String STATE_PLAYER_SCROLL -> dxWS
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> RYoN
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> prfy
    java.lang.String PERM_ACCESS -> IqXS
    java.lang.String PERM_TELEPORT -> SUCG
    java.lang.String PERM_PING -> tKoL
    java.lang.String PERM_PING_OTHERS -> HedK
    java.lang.String PERM_MONITOR -> yRnT
    java.lang.String PERM_MONITOR_TITLE -> xrNe
    java.lang.String PERM_MONITOR_ACTIONLOG -> sjns
    java.lang.String PERM_MONITOR_MAP -> VLiV
    java.lang.String PERM_MONITOR_ENVIRONMENT -> gFIn
    java.lang.String PERM_MONITOR_GLASSES -> rEiO
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> CgWB
    java.lang.String PERM_ACT -> VCxc
    java.lang.String PERM_RAI -> JcYw
    java.lang.String PERM_RAI_CONTROL -> FFMC
    java.lang.String PERM_RAI_ACCESS -> ryNI
    java.lang.String PERM_RAI_MONITOR -> AjCA
    java.lang.String PERM_RELOAD -> jGCO
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> EvMx
    java.lang.String SAMPLER_REDSTONE_TICK -> SUBy
    java.lang.String SAMPLER_ENTITY_TIME -> owxD
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> bPOn
    java.lang.String SAMPLER_TILE_TIME_LOCK -> htEK
    java.lang.String SAMPLER_TILE_TIME -> VMMb
    java.lang.String SAMPLER_TILE_DROPTICK -> hsco
    java.lang.String SAMPLER_ENTITY_DROPTICK -> FOAA
    java.lang.String SAMPLER_REDSTONE_SECOND -> dxYJ
    java.lang.String SAMPLER_REDSTONE_TIME -> xOms
    java.lang.String SAMPLER_PHYSICS_TIME -> rVnI
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> ECLY
    java.lang.String SAMPLER_HOPPER_TICK -> TGHL
    java.lang.String SAMPLER_HOPPER_SECOND -> oVUU
    java.lang.String SAMPLER_HOPPER_TIME -> cuVY
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> YVVn
    java.lang.String SAMPLER_FLUID_TICK -> aMMQ
    java.lang.String SAMPLER_FLUID_SECOND -> rhOa
    java.lang.String SAMPLER_FLUID_TIME -> jhgx
    java.lang.String SAMPLER_TPS -> AXaK
    java.lang.String SAMPLER_TICK -> CUvD
    java.lang.String SAMPLER_CPU -> FEmO
    java.lang.String SAMPLER_PPS -> qBgk
    java.lang.String SAMPLER_BANDWIDTH -> DXxk
    java.lang.String SAMPLER_BANDWIDTH_UP -> Btvy
    java.lang.String SAMPLER_BANDWIDTH_DOWN -> gyQY
    java.lang.String SAMPLER_TIU -> jXFv
    java.lang.String SAMPLER_MEM -> kRXR
    java.lang.String SAMPLER_FREEMEM -> vAUp
    java.lang.String SAMPLER_MAXMEM -> Bcuc
    java.lang.String SAMPLER_ALLOCMEM -> NUvC
    java.lang.String SAMPLER_MAHS -> QFNM
    java.lang.String SAMPLER_CHK -> INvg
    java.lang.String SAMPLER_ATASK -> GseP
    java.lang.String SAMPLER_STASK -> iUDC
    java.lang.String SAMPLER_CHK_TIME -> biaN
    java.lang.String SAMPLER_EXPLOSION_TIME -> pQGN
    java.lang.String SAMPLER_GROWTH_TIME -> VLnc
    java.lang.String SAMPLER_CHKS -> KUaB
    java.lang.String SAMPLER_ENT -> PnAr
    java.lang.String SAMPLER_ENTLIV -> VxDI
    java.lang.String SAMPLER_ENTDROP -> MBTt
    java.lang.String SAMPLER_ENTTILE -> JtaN
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> mqrt
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> GtIQ
    java.lang.String ACTION_CULL_ENTITIES_NAME -> WPSK
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> HCgF
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> ryST
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> GACI
    java.lang.String ACTION_UPDATE_FLUID_NAME -> SnYA
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> DQLH
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> AHDQ
    java.lang.String ACTION_LOCK_FLUID_STATUS -> Smwi
    java.lang.String ACTION_LOCK_FLUID_NAME -> dEUV
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> INyG
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> ofwE
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> iLSr
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> NEVu
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> nKCL
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> ydSu
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> BRvO
    java.lang.String ACTION_LOCK_HOPPER_NAME -> rpaE
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> vkkV
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> tLTH
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> jGFt
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> ofwO
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> CEWx
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> lnny
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> RRFm
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> Wqvf
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> MKGk
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> NEYn
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> LjHV
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> KxFc
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> yKFH
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> oDvc
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> SDHk
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> hkWW
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> mYEG
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> hQeJ
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> KVCu
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> wwbj
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> vknN
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> dVYT
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> PTPL
    java.lang.String ACTION_FIX_LIGHTING_NAME -> HwME
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> tDFF
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> UIkw
    java.lang.String ACTION_COLLECT_GARBAGE -> aoSI
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> QNap
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> wLmu
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object Dz(java.lang.Object,java.lang.Object,java.lang.Object) -> qcup
react.Lang -> org.cyberpwn.react.eHBt:
    java.lang.String BUNDLE_NAME -> xPQr
    java.util.ResourceBundle RESOURCE_BUNDLE -> quor
    java.util.ResourceBundle PRIMARY_BUNDLE -> twIh
    void <init>() -> <init>
    java.lang.String getString(java.lang.String) -> getString
    void <clinit>() -> <clinit>
    java.lang.Object xm(java.lang.Object,java.lang.Object,java.lang.Object) -> PBWD
react.Lang$BStats -> org.cyberpwn.react.XJNQ:
    java.lang.Object[] u -> XuYm
    int h -> h
    java.math.BigInteger[] o -> FNbr
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void N(int,java.lang.Object) -> dfal
    int j(int,int) -> dfal
    int c(byte[],int) -> dfal
    void g20480() -> PBWD
    void s() -> s
    java.lang.String h(java.lang.Object) -> dfal
react.Lang$Lang -> org.cyberpwn.react.DrYG:
    java.lang.Object[] S -> gyUP
    int e -> e
    java.math.BigInteger[] Q -> DkAW
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void P(int,java.lang.Object) -> lTgP
    int S(int,int) -> lTgP
    int L(byte[],int) -> lTgP
    void b3867() -> vQbs
    void c() -> c
    java.lang.String c(java.lang.Object) -> lTgP
react.React -> org.cyberpwn.react.XdAJ:
    react.React instance -> gqDh
    react.controller.SampleController sampleController -> GkXs
    react.controller.PlayerController playerController -> XJfJ
    react.controller.MonitorController monitorController -> bigo
    react.controller.CommandController commandController -> uypA
    react.controller.ActionController actionController -> tLYT
    react.controller.FastDecayController fastDecayController -> Lqya
    react.controller.EntityStackController entityStackController -> HwPI
    react.controller.GlassController glassController -> qBnu
    react.controller.EntityCullController entityCullController -> vcaN
    react.controller.SpikeController spikeController -> VxHe
    react.controller.SecurityController securityController -> PmfH
    react.controller.RedstoneController redstoneController -> futQ
    react.controller.HopperController hopperController -> QWWL
    react.controller.PhysicsController physicsController -> pPlv
    react.controller.TickTimeController tickTimeController -> tUIq
    react.controller.RAIController raiController -> AaYt
    react.controller.FluidController fluidController -> hcHc
    react.controller.ChunkController chunkController -> lVBp
    react.controller.GraphController graphController -> gNcW
    react.controller.EventController eventController -> qBnU
    react.controller.SmearTickController smearTickController -> AjKP
    react.controller.FeatureController featureController -> iUIb
    react.controller.HopperOvertickController hopperPlungeController -> oolM
    react.controller.LanguageController languageController -> FqHs
    react.controller.ExplosiveController explosiveController -> VnuO
    react.controller.WorldController worldController -> cBWL
    react.controller.MessageController messageController -> hIVB
    react.controller.MetricsController metricsController -> ySWC
    react.controller.FastGrowthController fastGrowthController -> UkuG
    react.controller.CrashController crashController -> iwOr
    react.controller.InstantDropController InstantDropController -> pYaM
    react.controller.ProtocolController protocolController -> Qxys
    react.controller.FixController fixController -> IWqH
    void <init>() -> <init>
    void enable() -> enable
    void disable() -> disable
    java.lang.Object cW(java.lang.Object,java.lang.Object,java.lang.Object) -> vQbs
react.React$1 -> org.cyberpwn.react.OXeW:
    react.React this$0 -> RQix
    void <init>(react.React) -> <init>
    void run() -> run
    java.lang.Object SJ(java.lang.Object,java.lang.Object,java.lang.Object) -> eHBt
react.action.ActionCollectGarbage -> org.cyberpwn.react.Vmyy:
    void <init>() -> <init>
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    java.lang.String getNode() -> getNode
    java.lang.Object Qp(java.lang.Object,java.lang.Object,java.lang.Object) -> XJNQ
react.action.ActionCollectGarbage$1 -> org.cyberpwn.react.ESVk:
    react.action.source.IActionSource val$source -> fSsK
    react.action.ActionCollectGarbage this$0 -> UcdX
    void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    void run() -> run
    java.lang.Object jb(java.lang.Object,java.lang.Object,java.lang.Object) -> DrYG
react.action.ActionCollectGarbage$1$1 -> org.cyberpwn.react.DPSk:
    long val$mbnex -> woVw
    long val$mbmem -> WPXx
    react.action.ActionCollectGarbage$1 this$1 -> lMSr
    void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    void run() -> run
    java.lang.Object oN(java.lang.Object,java.lang.Object,java.lang.Object) -> XdAJ
react.action.ActionCollectGarbage$ActionLockFluid -> org.cyberpwn.react.tupB:
    java.lang.Object[] U -> xHFY
    int t -> t
    java.math.BigInteger[] l -> CgbU
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void y(int,java.lang.Object) -> KejP
    int P(int,int) -> KejP
    int r(byte[],int) -> KejP
    void u1880() -> eHBt
    void a() -> a
    java.lang.String b(java.lang.Object) -> KejP
react.action.ActionCollectGarbage$ActionLockRedstone -> org.cyberpwn.react.HvRk:
    java.lang.Object[] V -> CgEJ
    int U -> U
    java.math.BigInteger[] Y -> stLY
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void g(int,java.lang.Object) -> mOYk
    int K(int,int) -> mOYk
    int m(byte[],int) -> mOYk
    void W3670() -> XJNQ
    void B() -> B
    java.lang.String x(java.lang.Object) -> mOYk
react.action.ActionCullEntities -> org.cyberpwn.react.fcvC:
    long ms -> LjLj
    int lcd -> UJSY
    void <init>() -> <init>
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> WGJb
    java.lang.String getNode() -> getNode
    long access$002(react.action.ActionCullEntities,long) -> WGJb
    int access$100(react.action.ActionCullEntities) -> WGJb
    long access$000(react.action.ActionCullEntities) -> dfal
    int access$102(react.action.ActionCullEntities,int) -> WGJb
    java.lang.Object WE(java.lang.Object,java.lang.Object,java.lang.Object) -> OXeW
react.action.ActionCullEntities$1 -> org.cyberpwn.react.LXLE:
    react.action.ActionCullEntities this$0 -> SeoW
    void <init>(react.action.ActionCullEntities) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object Eu(java.lang.Object,java.lang.Object,java.lang.Object) -> Vmyy
react.action.ActionCullEntities$2 -> org.cyberpwn.react.vRCd:
    react.action.ActionCullEntities this$0 -> SeoW
    void <init>(react.action.ActionCullEntities) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object MH(java.lang.Object,java.lang.Object,java.lang.Object) -> ESVk
react.action.ActionCullEntities$3 -> org.cyberpwn.react.FpMO:
    react.glang.FinalInteger val$completed -> HClm
    react.glang.FinalInteger val$total -> vtcn
    react.glang.FinalInteger val$totalCulled -> lUdg
    react.glang.FinalInteger val$totalChunked -> gWVV
    react.action.source.IActionSource val$source -> fSsK
    react.action.ActionCullEntities this$0 -> SeoW
    void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    void run() -> run
    java.lang.Object Kx(java.lang.Object,java.lang.Object,java.lang.Object) -> bWiv
react.action.ActionCullEntities$4 -> org.cyberpwn.react.qtuv:
    react.action.source.IActionSource val$source -> fSsK
    react.glang.FinalInteger val$totalCulled -> lUdg
    react.glang.FinalInteger val$totalChunked -> gWVV
    react.action.ActionCullEntities this$0 -> SeoW
    void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    void run() -> run
    java.lang.Object IK(java.lang.Object,java.lang.Object,java.lang.Object) -> DPSk
react.action.ActionCullEntities$5 -> org.cyberpwn.react.EBVK:
    org.bukkit.Chunk val$chunk -> AXkS
    java.lang.Runnable val$cb -> LHGl
    react.action.ActionCullEntities this$0 -> SeoW
    void <init>(react.action.ActionCullEntities,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    void run() -> run
    java.lang.Object NA(java.lang.Object,java.lang.Object,java.lang.Object) -> tupB
react.action.ActionCullEntities$ActionLockHopper -> org.cyberpwn.react.EdXk:
    java.lang.Object[] o -> VMUI
    int w -> w
    java.math.BigInteger[] n -> hcJc
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void P(int,java.lang.Object) -> lTgP
    int U(int,int) -> wnYS
    int z(byte[],int) -> wnYS
    void d9515() -> XdAJ
    void T() -> OXeW
    java.lang.String Y(java.lang.Object) -> wnYS
react.action.ActionFixLighting -> org.cyberpwn.react.gpKE:
    void <init>() -> <init>
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    java.lang.String getNode() -> getNode
    java.lang.Object GM(java.lang.Object,java.lang.Object,java.lang.Object) -> HvRk
react.action.ActionFixLighting$1 -> org.cyberpwn.react.LiMa:
    react.action.ActionFixLighting this$0 -> sjyS
    void <init>(react.action.ActionFixLighting) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object Nt(java.lang.Object,java.lang.Object,java.lang.Object) -> fcvC
react.action.ActionFixLighting$2 -> org.cyberpwn.react.wnWa:
    react.action.source.IActionSource val$source -> fSsK
    int val$ch -> pbPo
    react.action.ActionFixLighting this$0 -> sjyS
    void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    void run(java.lang.Integer) -> WGJb
    void run(java.lang.Object) -> run
    java.lang.Object Yt(java.lang.Object,java.lang.Object,java.lang.Object) -> LXLE
react.action.ActionFixLighting$3 -> org.cyberpwn.react.lTeb:
    react.action.ActionFixLighting this$0 -> sjyS
    void <init>(react.action.ActionFixLighting) -> <init>
    void run(java.lang.Double) -> WGJb
    void run(java.lang.Object) -> run
    java.lang.Object aE(java.lang.Object,java.lang.Object,java.lang.Object) -> vRCd
react.action.ActionFixLighting$ActionPurgeEntities -> org.cyberpwn.react.QpMH:
    java.lang.Object[] j -> lgGG
    int I -> I
    java.math.BigInteger[] p -> PBrL
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void V(int,java.lang.Object) -> wnYS
    int Q(int,int) -> SCOM
    int U(byte[],int) -> SCOM
    void B14032() -> Vmyy
    void g() -> g
    java.lang.String b(java.lang.Object) -> KejP
react.action.ActionLockFluid -> org.cyberpwn.react.sQMd:
    int lcd -> UJSY
    void <init>() -> <init>
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    java.lang.String getNode() -> getNode
    java.lang.Object Wy(java.lang.Object,java.lang.Object,java.lang.Object) -> FpMO
react.action.ActionLockFluid$1 -> org.cyberpwn.react.RkAo:
    react.action.ActionLockFluid this$0 -> VnwA
    void <init>(react.action.ActionLockFluid) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object fD(java.lang.Object,java.lang.Object,java.lang.Object) -> qtuv
react.action.ActionLockFluid$2 -> org.cyberpwn.react.EAwa:
    react.action.ActionLockFluid this$0 -> VnwA
    void <init>(react.action.ActionLockFluid) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object OZ(java.lang.Object,java.lang.Object,java.lang.Object) -> dfal
react.action.ActionLockHopper -> org.cyberpwn.react.NECO:
    int lcd -> UJSY
    void <init>() -> <init>
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    java.lang.String getNode() -> getNode
    java.lang.Object yM(java.lang.Object,java.lang.Object,java.lang.Object) -> EBVK
react.action.ActionLockHopper$1 -> org.cyberpwn.react.Vvlm:
    react.action.ActionLockHopper this$0 -> loWL
    void <init>(react.action.ActionLockHopper) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object dU(java.lang.Object,java.lang.Object,java.lang.Object) -> EdXk
react.action.ActionLockHopper$2 -> org.cyberpwn.react.eqwO:
    react.action.ActionLockHopper this$0 -> loWL
    void <init>(react.action.ActionLockHopper) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object Mj(java.lang.Object,java.lang.Object,java.lang.Object) -> gpKE
react.action.ActionLockRedstone -> org.cyberpwn.react.qlil:
    int lcd -> UJSY
    void <init>() -> <init>
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    java.lang.String getNode() -> getNode
    java.lang.Object su(java.lang.Object,java.lang.Object,java.lang.Object) -> LiMa
react.action.ActionLockRedstone$1 -> org.cyberpwn.react.vRGF:
    react.action.ActionLockRedstone this$0 -> CyCX
    void <init>(react.action.ActionLockRedstone) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object zE(java.lang.Object,java.lang.Object,java.lang.Object) -> wnWa
react.action.ActionLockRedstone$2 -> org.cyberpwn.react.xiNT:
    react.action.ActionLockRedstone this$0 -> CyCX
    void <init>(react.action.ActionLockRedstone) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object Lu(java.lang.Object,java.lang.Object,java.lang.Object) -> lTeb
react.action.ActionPurgeChunks -> org.cyberpwn.react.MlSj:
    long ms -> LjLj
    int lcd -> UJSY
    boolean fail -> scIw
    void <init>() -> <init>
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> dfal
    java.lang.String getNode() -> getNode
    boolean access$000(react.action.ActionPurgeChunks) -> WGJb
    long access$102(react.action.ActionPurgeChunks,long) -> WGJb
    int access$200(react.action.ActionPurgeChunks) -> dfal
    long access$100(react.action.ActionPurgeChunks) -> lTgP
    boolean access$002(react.action.ActionPurgeChunks,boolean) -> WGJb
    java.lang.Object Kh(java.lang.Object,java.lang.Object,java.lang.Object) -> QpMH
react.action.ActionPurgeChunks$1 -> org.cyberpwn.react.IWUw:
    react.action.ActionPurgeChunks this$0 -> prrI
    void <init>(react.action.ActionPurgeChunks) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object Gn(java.lang.Object,java.lang.Object,java.lang.Object) -> sQMd
react.action.ActionPurgeChunks$2 -> org.cyberpwn.react.kYvI:
    int val$dk -> Blnu
    java.lang.Object val$j -> kRaY
    react.glang.FinalInteger val$acompleted -> rqIE
    react.glang.FinalInteger val$completed -> HClm
    react.glang.FinalInteger val$total -> vtcn
    react.glang.FinalInteger val$totalCulled -> lUdg
    react.glang.FinalInteger val$totalChunked -> gWVV
    react.action.source.IActionSource val$source -> fSsK
    react.api.ISelector[] val$selectors -> jrBX
    react.action.ActionPurgeChunks this$0 -> prrI
    void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource,react.api.ISelector[]) -> <init>
    void run() -> run
    java.lang.Object ER(java.lang.Object,java.lang.Object,java.lang.Object) -> ER
react.action.ActionPurgeChunks$2$1 -> org.cyberpwn.react.xhmI:
    react.action.ActionPurgeChunks$2 this$1 -> nAwF
    void <init>(react.action.ActionPurgeChunks$2) -> <init>
    void run() -> run
    java.lang.Object cg(java.lang.Object,java.lang.Object,java.lang.Object) -> RkAo
react.action.ActionPurgeChunks$3 -> org.cyberpwn.react.hQNI:
    react.action.source.IActionSource val$source -> fSsK
    react.glang.FinalInteger val$acompleted -> rqIE
    react.action.ActionPurgeChunks this$0 -> prrI
    void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    void run() -> run
    java.lang.Object nU(java.lang.Object,java.lang.Object,java.lang.Object) -> EAwa
react.action.ActionPurgeChunks$4 -> org.cyberpwn.react.MSBL:
    org.bukkit.Chunk val$chunk -> AXkS
    java.lang.Runnable val$cb -> LHGl
    react.action.ActionPurgeChunks this$0 -> prrI
    void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    void run() -> run
    java.lang.Object oI(java.lang.Object,java.lang.Object,java.lang.Object) -> NECO
react.action.ActionPurgeEntities -> org.cyberpwn.react.NffG:
    long ms -> LjLj
    int lcd -> UJSY
    void <init>() -> <init>
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    void purge(boolean,org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> WGJb
    java.lang.String getNode() -> getNode
    long access$002(react.action.ActionPurgeEntities,long) -> WGJb
    int access$100(react.action.ActionPurgeEntities) -> WGJb
    long access$000(react.action.ActionPurgeEntities) -> dfal
    int access$102(react.action.ActionPurgeEntities,int) -> WGJb
    java.lang.Object dm(java.lang.Object,java.lang.Object,java.lang.Object) -> Vvlm
react.action.ActionPurgeEntities$1 -> org.cyberpwn.react.GQQD:
    react.action.ActionPurgeEntities this$0 -> EvXY
    void <init>(react.action.ActionPurgeEntities) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object cA(java.lang.Object,java.lang.Object,java.lang.Object) -> eqwO
react.action.ActionPurgeEntities$2 -> org.cyberpwn.react.MtdV:
    react.action.ActionPurgeEntities this$0 -> EvXY
    void <init>(react.action.ActionPurgeEntities) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object kh(java.lang.Object,java.lang.Object,java.lang.Object) -> qlil
react.action.ActionPurgeEntities$3 -> org.cyberpwn.react.QNKT:
    react.glang.FinalInteger val$completed -> HClm
    react.glang.FinalInteger val$total -> vtcn
    react.glang.FinalInteger val$totalCulled -> lUdg
    react.glang.FinalInteger val$totalChunked -> gWVV
    react.action.source.IActionSource val$source -> fSsK
    react.action.ActionPurgeEntities this$0 -> EvXY
    void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    void run() -> run
    java.lang.Object gM(java.lang.Object,java.lang.Object,java.lang.Object) -> vRGF
react.action.ActionPurgeEntities$4 -> org.cyberpwn.react.RPmS:
    react.action.source.IActionSource val$source -> fSsK
    react.glang.FinalInteger val$totalCulled -> lUdg
    react.glang.FinalInteger val$totalChunked -> gWVV
    react.action.ActionPurgeEntities this$0 -> EvXY
    void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    void run() -> run
    java.lang.Object Id(java.lang.Object,java.lang.Object,java.lang.Object) -> xiNT
react.action.ActionPurgeEntities$5 -> org.cyberpwn.react.CMUG:
    org.bukkit.entity.Entity val$i -> EmgS
    boolean val$force -> QVwP
    react.glang.FinalInteger val$cu -> OQRO
    int val$k -> tLYi
    org.bukkit.Chunk val$chunk -> AXkS
    java.lang.Runnable val$cb -> LHGl
    react.action.ActionPurgeEntities this$0 -> EvXY
    void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,boolean,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    void run() -> run
    java.lang.Object uQ(java.lang.Object,java.lang.Object,java.lang.Object) -> MlSj
react.action.ActionPurgeEntities$ActionUnlockHopper -> org.cyberpwn.react.tuqb:
    java.lang.Object[] S -> gyUP
    int q -> q
    java.math.BigInteger[] v -> JdEi
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void Z(int,java.lang.Object) -> SCOM
    int a(int,int) -> a
    int z(byte[],int) -> wnYS
    void w11640() -> ESVk
    void r() -> r
    java.lang.String t(java.lang.Object) -> SCOM
react.action.ActionUnlockFluid -> org.cyberpwn.react.vACh:
    int lcd -> UJSY
    void <init>() -> <init>
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    java.lang.String getNode() -> getNode
    java.lang.Object GN(java.lang.Object,java.lang.Object,java.lang.Object) -> IWUw
react.action.ActionUnlockFluid$1 -> org.cyberpwn.react.CgFI:
    react.action.ActionUnlockFluid this$0 -> qeSi
    void <init>(react.action.ActionUnlockFluid) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object Ck(java.lang.Object,java.lang.Object,java.lang.Object) -> kYvI
react.action.ActionUnlockHopper -> org.cyberpwn.react.TxvW:
    int lcd -> UJSY
    void <init>() -> <init>
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    java.lang.String getNode() -> getNode
    java.lang.Object Ue(java.lang.Object,java.lang.Object,java.lang.Object) -> xhmI
react.action.ActionUnlockHopper$1 -> org.cyberpwn.react.JHvG:
    react.action.ActionUnlockHopper this$0 -> uFoT
    void <init>(react.action.ActionUnlockHopper) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object Po(java.lang.Object,java.lang.Object,java.lang.Object) -> hQNI
react.action.ActionUnlockRedstone -> org.cyberpwn.react.SeSJ:
    int lcd -> UJSY
    void <init>() -> <init>
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    java.lang.String getNode() -> getNode
    java.lang.Object tZ(java.lang.Object,java.lang.Object,java.lang.Object) -> MSBL
react.action.ActionUnlockRedstone$1 -> org.cyberpwn.react.ivTF:
    react.action.ActionUnlockRedstone this$0 -> vIrU
    void <init>(react.action.ActionUnlockRedstone) -> <init>
    react.api.ISelector get() -> DrYG
    java.lang.Object get() -> get
    java.lang.Object cz(java.lang.Object,java.lang.Object,java.lang.Object) -> NffG
react.action.source.AccessActionSource -> org.cyberpwn.react.GQOV:
    void <init>() -> <init>
    void sendResponse(java.lang.String) -> dfal
    void sendResponseSuccess(java.lang.String) -> lTgP
    void sendResponseError(java.lang.String) -> KejP
    void sendResponseActing(java.lang.String) -> mOYk
    java.lang.Object IQ(java.lang.Object,java.lang.Object,java.lang.Object) -> GQQD
react.action.source.AccessActionSource$ConsoleActionSource -> org.cyberpwn.react.avks:
    java.lang.Object[] g -> RQlT
    int Q -> Q
    java.math.BigInteger[] e -> gOHr
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void v(int,java.lang.Object) -> SmbW
    int P(int,int) -> KejP
    int p(byte[],int) -> SmbW
    void D7564() -> DPSk
    void s() -> s
    java.lang.String l(java.lang.Object) -> SmbW
react.action.source.AccessActionSource$EmptyActionSource -> org.cyberpwn.react.PBVy:
    java.lang.Object[] F -> rgxs
    int r -> r
    java.math.BigInteger[] q -> bikk
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void h(int,java.lang.Object) -> ePRm
    int l(int,int) -> SmbW
    int x(byte[],int) -> ePRm
    void p29400() -> tupB
    void d() -> d
    java.lang.String KR(java.lang.Object) -> ePRm
react.action.source.ActionHandle -> org.cyberpwn.react.LXMs:
    react.action.source.ActionHandle AUTOMATIC -> AUTOMATIC
    react.action.source.ActionHandle MANUAL -> MANUAL
    react.action.source.ActionHandle MUTEX -> MUTEX
    react.action.source.ActionHandle[] $VALUES -> $VALUES
    react.action.source.ActionHandle[] values() -> values
    react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object JM(java.lang.Object,java.lang.Object,java.lang.Object) -> JM
react.action.source.ConsoleActionSource -> org.cyberpwn.react.aLYB:
    void <init>() -> <init>
    void sendResponse(java.lang.String) -> dfal
    void sendResponseSuccess(java.lang.String) -> lTgP
    void sendResponseError(java.lang.String) -> KejP
    void sendResponseActing(java.lang.String) -> mOYk
    java.lang.String toString() -> toString
    java.lang.Object Wq(java.lang.Object,java.lang.Object,java.lang.Object) -> MtdV
react.action.source.EmptyActionSource -> org.cyberpwn.react.WiQc:
    void <init>() -> <init>
    void sendResponse(java.lang.String) -> dfal
    void sendResponseSuccess(java.lang.String) -> lTgP
    void sendResponseError(java.lang.String) -> KejP
    void sendResponseActing(java.lang.String) -> mOYk
    java.lang.String toString() -> toString
    java.lang.Object wC(java.lang.Object,java.lang.Object,java.lang.Object) -> QNKT
react.action.source.IActionSource -> org.cyberpwn.react.dUcs:
    void sendResponse(java.lang.String) -> dfal
    void sendResponseSuccess(java.lang.String) -> lTgP
    void sendResponseError(java.lang.String) -> KejP
    void sendResponseActing(java.lang.String) -> mOYk
react.action.source.PlayerActionSource -> org.cyberpwn.react.SeUk:
    org.bukkit.entity.Player p -> p
    void <init>(org.bukkit.entity.Player) -> <init>
    org.bukkit.entity.Player getPlayer() -> getPlayer
    void sendResponse(java.lang.String) -> dfal
    void sendResponseSuccess(java.lang.String) -> lTgP
    void sendResponseError(java.lang.String) -> KejP
    void sendResponseActing(java.lang.String) -> mOYk
    java.lang.String toString() -> toString
    java.lang.Object nG(java.lang.Object,java.lang.Object,java.lang.Object) -> RPmS
react.action.source.RAIActionSource -> org.cyberpwn.react.owfy:
    void <init>() -> <init>
    void sendResponse(java.lang.String) -> dfal
    void sendResponseSuccess(java.lang.String) -> lTgP
    void sendResponseError(java.lang.String) -> KejP
    void sendResponseActing(java.lang.String) -> mOYk
    java.lang.String toString() -> toString
    java.lang.Object Ck(java.lang.Object,java.lang.Object,java.lang.Object) -> kYvI
react.action.source.y -> org.cyberpwn.react.rDyl:
    java.lang.Object[] g -> RQlT
    java.lang.Class[] r -> iCkq
    int[] oL -> DYea
    short[] W -> BeAK
    int o -> o
    int w -> w
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class n(int,int) -> ePRm
    java.lang.Class K(int) -> WGJb
    java.lang.reflect.Method P(int) -> dfal
    java.lang.Object d(int,java.lang.Object[]) -> WGJb
    java.lang.Object x(java.lang.Object,int,java.lang.Object[]) -> WGJb
    java.lang.Object n(int,java.lang.Object[]) -> dfal
    java.lang.reflect.Field M(int) -> lTgP
    java.lang.Object P(java.lang.Object,int) -> WGJb
    void D(java.lang.Object,int,java.lang.Object) -> WGJb
    java.lang.Object w(int) -> KejP
    void n(int,java.lang.Object) -> CgEJ
react.action.t -> org.cyberpwn.react.GbSl:
    java.lang.Object[] zV -> jOaA
    java.lang.Class[] Y -> NxeL
    int[] i -> i
    short[] n -> lgHq
    int z -> z
    int A -> A
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class w(int,int) -> CgEJ
    java.lang.Class k(int) -> mOYk
    java.lang.reflect.Method Y(int) -> wnYS
    java.lang.Object p(int,java.lang.Object[]) -> lTgP
    java.lang.Object E(java.lang.Object,int,java.lang.Object[]) -> dfal
    java.lang.Object d(int,java.lang.Object[]) -> WGJb
    java.lang.reflect.Field d(int) -> SCOM
    java.lang.Object v(java.lang.Object,int) -> dfal
    void l(java.lang.Object,int,java.lang.Object) -> dfal
    java.lang.Object D(int) -> SmbW
    void K(int,java.lang.Object) -> nJMP
react.api.Action -> org.cyberpwn.react.KDLh:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> JlYK
    java.lang.String[] nodes -> Cgcx
    react.action.source.ActionHandle handle -> bilU
    react.api.ActionState state -> afiV
    react.api.ActionTargetType target -> VxJp
    react.api.ActionType type -> LYLE
    react.action.source.IActionSource currentSource -> pPpc
    double progress -> AGjx
    boolean forceful -> dxbS
    react.glang.GMap defaultSelectors -> ghYv
    void <init>(react.api.ActionType) -> <init>
    void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    boolean isForceful() -> HvRk
    void setForceful(boolean) -> dfal
    java.lang.String getNode() -> getNode
    react.api.ISelector[] biselect(react.api.ISelector[]) -> biselect
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> setDefaultSelector
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> getHandleType
    react.api.ActionState getState() -> getState
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> setStatus
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionTargetType getTarget() -> getTarget
    react.api.ActionType getType() -> getType
    react.glang.GMap getDefaultSelectors() -> getDefaultSelectors
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> act
    void completeAction() -> completeAction
    react.action.source.IActionSource getCurrentSource() -> getCurrentSource
    java.lang.String[] getNodes() -> getNodes
    void setNodes(java.lang.String[]) -> setNodes
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    java.lang.Object Hm(java.lang.Object,java.lang.Object,java.lang.Object) -> CMUG
react.api.ActionAlreadyRunningException -> org.cyberpwn.react.iuts:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
react.api.ActionException -> org.cyberpwn.react.DHIa:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
react.api.ActionNotRunningException -> org.cyberpwn.react.eHFt:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
react.api.ActionState -> org.cyberpwn.react.kIWJ:
    react.api.ActionState IDLE -> IDLE
    react.api.ActionState RUNNING -> RUNNING
    react.api.ActionState[] $VALUES -> $VALUES
    react.api.ActionState[] values() -> values
    react.api.ActionState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object vD(java.lang.Object,java.lang.Object,java.lang.Object) -> vD
react.api.ActionTargetType -> org.cyberpwn.react.LWoG:
    react.api.ActionTargetType POSITIONAL -> POSITIONAL
    react.api.ActionTargetType SYSTEM -> SYSTEM
    react.api.ActionTargetType[] $VALUES -> $VALUES
    react.api.ActionTargetType[] values() -> values
    react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object md(java.lang.Object,java.lang.Object,java.lang.Object) -> md
react.api.ActionType -> org.cyberpwn.react.qJgc:
    react.api.ActionType FIX_LIGHTING -> PLFT
    react.api.ActionType UNLOCK_FLUID -> gFWT
    react.api.ActionType LOCK_FLUID -> TFoo
    react.api.ActionType UNLOCK_HOPPER -> URdW
    react.api.ActionType LOCK_HOPPER -> BlqK
    react.api.ActionType UNLOCK_REDSTONE -> KEGl
    react.api.ActionType LOCK_REDSTONE -> uGNd
    react.api.ActionType CULL_ENTITIES -> sQiU
    react.api.ActionType COLLECT_GARBAGE -> CNRG
    react.api.ActionType PURGE_ENTITIES -> fBsG
    react.api.ActionType PURGE_CHUNKS -> MdbO
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> bilU
    react.api.ActionTargetType target -> VxJp
    react.api.ActionType[] $VALUES -> yKMs
    react.api.ActionType[] values() -> values
    react.api.ActionType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandle() -> fcvC
    react.api.ActionTargetType getTarget() -> getTarget
    void <clinit>() -> <clinit>
    java.lang.Object dH(java.lang.Object,java.lang.Object,java.lang.Object) -> tuqb
react.api.ActivationRangeType -> org.cyberpwn.react.CxIX:
    react.api.ActivationRangeType ANIMALS -> SDPf
    react.api.ActivationRangeType MONSTERS -> bHLO
    react.api.ActivationRangeType MISC -> TFrb
    react.api.ActivationRangeType[] $VALUES -> SCon
    react.api.ActivationRangeType[] values() -> values
    react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object ki(java.lang.Object,java.lang.Object,java.lang.Object) -> vACh
react.api.Address -> org.cyberpwn.react.BIsF:
    int value() -> value
react.api.Async -> org.cyberpwn.react.nuDS:
react.api.CPUBenchmark -> org.cyberpwn.react.APAi:
    org.bukkit.command.CommandSender sender -> sender
    int score -> TaFc
    java.lang.Runnable onFinish -> fnKC
    int low -> low
    int high -> high
    void <init>(org.bukkit.command.CommandSender) -> <init>
    void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    void run() -> run
    org.bukkit.command.CommandSender getSender() -> getSender
    int getScore() -> getScore
    java.lang.Runnable getOnFinish() -> LXLE
    void <clinit>() -> <clinit>
    java.lang.Object ep(java.lang.Object,java.lang.Object,java.lang.Object) -> CgFI
react.api.CPUResult -> org.cyberpwn.react.FpPq:
    react.api.CPUResult ULTRA_SLOW -> xYLP
    react.api.CPUResult VERY_SLOW -> mHKU
    react.api.CPUResult SLOW -> cubf
    react.api.CPUResult AVERAGE -> vdGf
    react.api.CPUResult GOOD -> dhEU
    react.api.CPUResult FAST -> GQoa
    react.api.CPUResult VERY_FAST -> Ihvt
    react.api.CPUResult ULTRA_FAST -> CNTh
    java.lang.String m -> m
    react.api.CPUResult[] $VALUES -> qLFa
    react.api.CPUResult[] values() -> values
    react.api.CPUResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    java.lang.String c(int) -> c
    void <clinit>() -> <clinit>
    java.lang.Object Kt(java.lang.Object,java.lang.Object,java.lang.Object) -> TxvW
react.api.CacheBase -> org.cyberpwn.react.ykqT:
    react.glang.GMap cache -> LHLQ
    void <init>() -> <init>
    react.glang.GSet get(java.lang.Object) -> CgEJ
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> nJMP
    void clear() -> clear
    react.glang.GList k() -> k
    boolean has(java.lang.Object) -> WXLP
    java.lang.Object mp(java.lang.Object,java.lang.Object,java.lang.Object) -> JHvG
react.api.CacheBase$CommandSenderActionSource -> org.cyberpwn.react.LaBD:
    java.lang.Object[] x -> HerU
    int T -> T
    java.math.BigInteger[] w -> quxe
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void m(int,java.lang.Object) -> WXLP
    int g(int,int) -> nJMP
    int C(byte[],int) -> CgEJ
    void T12716() -> vRCd
    void g() -> g
    java.lang.String C(java.lang.Object) -> bWiv
react.api.Capability -> org.cyberpwn.react.BdEn:
    react.api.Capability DUAL_WEILD -> MeAi
    react.api.Capability SCOREBOARD -> BeCv
    react.api.Capability SCOREBOARD_ADVANCED -> Drww
    react.api.Capability HOPPER -> QqMv
    react.api.Capability ENTITY_ATTRIBUTES -> RcPV
    react.api.Capability ENTITY_AI -> BeDK
    react.api.Capability ACTION_BAR -> eHbv
    react.api.Capability ENTITY_NAMES -> ETYd
    react.api.Capability TITLE_BAR -> eYdc
    react.api.Capability CHUNK_RELIGHTING -> lUhK
    react.api.Capability MONITOR_SUBMISSIVENESS -> Tyvh
    react.api.Capability ACCELERATED_PING -> EKiB
    react.api.Capability STREAM_PROFILING -> OYhc
    react.api.Capability ENTITY_THROTTLING -> QppW
    react.api.Capability TILE_THROTTLING -> hkaq
    react.api.Capability PASSENGERS -> KDjv
    react.api.Capability FAST_MAPPING -> pIGA
    react.glang.GList capabilities -> FhaH
    surge.util.Protocol version -> bbAE
    react.api.Flavor flavor -> LHOf
    java.lang.String plugin -> SLca
    java.lang.String name -> name
    void <init>(java.lang.String,surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    void <init>(java.lang.String,surge.util.Protocol,react.api.Flavor) -> <init>
    void <init>(java.lang.String,surge.util.Protocol,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,react.api.Flavor) -> <init>
    void <init>(java.lang.String,surge.util.Protocol) -> <init>
    boolean isPluginCapable() -> FpMO
    boolean isFlavorCapable() -> qtuv
    boolean isVersionCapable() -> EBVK
    boolean isCapable() -> EdXk
    surge.util.Protocol getVersion() -> gpKE
    react.api.Flavor getFlavor() -> LiMa
    java.lang.String getPlugin() -> wnWa
    java.lang.String getName() -> getName
    void sendNotCapable(org.bukkit.command.CommandSender) -> WGJb
    void sendNotCapable(react.action.source.IActionSource) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Yt(java.lang.Object,java.lang.Object,java.lang.Object) -> LXLE
react.api.CapabilityBasis -> org.cyberpwn.react.eaXS:
    react.api.CapabilityBasis VERSION -> cKQf
    react.api.CapabilityBasis FLAVOR -> JBIg
    react.api.CapabilityBasis PLUGIN -> nucb
    react.api.CapabilityBasis[] $VALUES -> YFDv
    react.api.CapabilityBasis[] values() -> values
    react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object pF(java.lang.Object,java.lang.Object,java.lang.Object) -> SeSJ
react.api.ChunkIssue -> org.cyberpwn.react.BlVQ:
    react.api.ChunkIssue ENTITY -> bXoS
    react.api.ChunkIssue HOPPER -> BTCY
    react.api.ChunkIssue TNT -> Xdcg
    react.api.ChunkIssue REDSTONE -> GbqX
    react.api.ChunkIssue FLUID -> jFsL
    react.api.ChunkIssue PHYSICS -> XSaS
    react.api.ChunkIssue[] $VALUES -> EKjH
    react.api.ChunkIssue[] values() -> values
    react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    double getMS() -> lTeb
    void <clinit>() -> <clinit>
    java.lang.Object bm(java.lang.Object,java.lang.Object,java.lang.Object) -> ivTF
react.api.ChunkIssue$1 -> org.cyberpwn.react.jODi:
    int[] $SwitchMap$react$api$ChunkIssue -> jPES
    void <clinit>() -> <clinit>
    java.lang.Object lE(java.lang.Object,java.lang.Object,java.lang.Object) -> GQOV
react.api.Clip -> org.cyberpwn.react.CxJT:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> org.cyberpwn.react.anaA:
    org.bukkit.command.CommandSender sender -> sender
    void <init>(org.bukkit.command.CommandSender) -> <init>
    org.bukkit.command.CommandSender getSender() -> getSender
    void sendResponse(java.lang.String) -> dfal
    void sendResponseSuccess(java.lang.String) -> lTgP
    void sendResponseError(java.lang.String) -> KejP
    void sendResponseActing(java.lang.String) -> mOYk
    java.lang.Object ML(java.lang.Object,java.lang.Object,java.lang.Object) -> avks
react.api.CullList -> org.cyberpwn.react.CEGd:
    react.glang.GSet toCull -> GlCe
    void <init>() -> <init>
    void add(org.bukkit.entity.Entity) -> KejP
    boolean hasNext() -> hasNext
    org.bukkit.entity.Entity pop() -> QpMH
    java.lang.Object nH(java.lang.Object,java.lang.Object,java.lang.Object) -> PBVy
react.api.DTest -> org.cyberpwn.react.XdFb:
    void <init>() -> <init>
    int test() -> sQMd
    java.lang.Object Lp(java.lang.Object,java.lang.Object,java.lang.Object) -> LXMs
react.api.EntityFlag -> org.cyberpwn.react.lfPF:
    react.api.EntityFlag NAMED -> GlCf
    react.api.EntityFlag TAMED -> BdeU
    react.api.EntityFlag STACKED -> URgt
    react.api.EntityFlag RIDDEN -> vuJd
    react.api.EntityFlag LIVING -> pjhI
    react.api.EntityFlag NON_LIVING -> CWHC
    react.api.EntityFlag PASSIVE -> UuMJ
    react.api.EntityFlag HOSTILE -> LHNg
    react.api.EntityFlag MATURE -> pIDs
    react.api.EntityFlag YOUNG -> nmSB
    react.api.EntityFlag UNDERWATER -> dMqx
    react.api.EntityFlag GROUNDED -> AsEp
    react.api.EntityFlag AIRBORNE -> GJDD
    react.api.EntityFlag PROJECTILES -> EKmJ
    react.api.EntityFlag CAVES -> Tqjq
    react.api.EntityFlag NEARBY -> AQBm
    react.api.EntityFlag LIT -> kJYq
    react.api.EntityFlag LEASHED -> XSdW
    java.lang.String m -> m
    react.api.EntityFlag[] $VALUES -> aDko
    react.api.EntityFlag[] values() -> values
    react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    react.glang.GSet getFlags(org.bukkit.entity.Entity) -> mOYk
    boolean is(org.bukkit.entity.Entity) -> wnYS
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
    java.lang.Object rZ(java.lang.Object,java.lang.Object,java.lang.Object) -> aLYB
react.api.EntityGroup -> org.cyberpwn.react.YEFe:
    react.glang.GSet entityTypes -> bsCw
    void <init>() -> <init>
    react.glang.GSet getEntityTypes() -> RkAo
react.api.EntitySample -> org.cyberpwn.react.BcgA:
    react.glang.GMap counts -> QWaF
    react.glang.GMap sets -> WsEM
    void <init>() -> <init>
    void <init>(org.bukkit.Chunk) -> <init>
    react.glang.GList getAll() -> EAwa
    react.glang.GList getTypes() -> NECO
    int total() -> Vvlm
    int get(org.bukkit.entity.EntityType) -> WGJb
    react.glang.GSet getSet(org.bukkit.entity.EntityType) -> dfal
    void add(org.bukkit.entity.Entity) -> KejP
    java.lang.Object vX(java.lang.Object,java.lang.Object,java.lang.Object) -> WiQc
react.api.Experimental -> org.cyberpwn.react.dEFO:
react.api.Flavor -> org.cyberpwn.react.JQkh:
    react.api.Flavor ANY -> ANY
    react.api.Flavor SAFE_MODE -> SAFE_MODE
    react.api.Flavor CRAFT_BUKKIT -> CRAFT_BUKKIT
    react.api.Flavor BUKKIT -> BUKKIT
    react.api.Flavor SPIGOT -> SPIGOT
    react.api.Flavor SOGGY_SPIGOT -> SOGGY_SPIGOT
    react.api.Flavor PAPER_SPIGOT -> PAPER_SPIGOT
    react.api.Flavor TACO_SPIGOT -> TACO_SPIGOT
    react.api.Flavor TORCH_SPIGOT -> TORCH_SPIGOT
    react.api.Flavor FORGE_HACK -> FORGE_HACK
    react.api.Flavor SPONGE_HACK -> SPONGE_HACK
    react.api.Flavor[] $VALUES -> $VALUES
    react.api.Flavor[] values() -> values
    react.api.Flavor valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    react.api.Flavor getHostFlavor() -> getHostFlavor
    boolean compatableWith(react.api.Flavor) -> compatableWith
    java.lang.String fancyName() -> fancyName
    void <clinit>() -> <clinit>
    java.lang.Object YF(java.lang.Object,java.lang.Object,java.lang.Object) -> YF
react.api.IAction -> org.cyberpwn.react.Tgyu:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> getHandleType
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> act
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> enact
    react.api.ActionState getState() -> getState
    react.api.ActionTargetType getTarget() -> getTarget
    void setNodes(java.lang.String[]) -> setNodes
    java.lang.String[] getNodes() -> getNodes
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> setStatus
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> getType
    react.glang.GMap getDefaultSelectors() -> getDefaultSelectors
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> setDefaultSelector
    react.api.ISelector[] biselect(react.api.ISelector[]) -> biselect
    react.action.source.IActionSource getCurrentSource() -> getCurrentSource
    void completeAction() -> completeAction
react.api.ICache -> org.cyberpwn.react.doXr:
    react.glang.GSet get(java.lang.Object) -> CgEJ
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> nJMP
    void clear() -> clear
    boolean has(java.lang.Object) -> WXLP
    react.glang.GList k() -> k
react.api.ICommand -> org.cyberpwn.react.wUNL:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> eqwO
    java.lang.String[] getPermissions() -> getPermissions
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> wnYS
    react.api.SideGate getSideGate() -> qlil
    void registerParameterDescription(java.lang.String,java.lang.String) -> WGJb
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
react.api.IFix -> org.cyberpwn.react.BReH:
    java.lang.String getId() -> getId
    java.lang.String[] getAliases() -> eqwO
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    java.lang.String getUsage() -> getUsage
    void run(org.bukkit.command.CommandSender,java.lang.String[]) -> dfal
react.api.IRecord -> org.cyberpwn.react.SmhX:
    java.lang.String getRecordType() -> vRGF
    long getRecordTime() -> xiNT
    react.json.JSONObject toJSON() -> MlSj
    java.lang.Object getRecordObject() -> IWUw
    void fromJSON(react.json.JSONObject) -> WGJb
react.api.IRecordBook -> org.cyberpwn.react.DGit:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> WGJb
    long getOldestRecordTime() -> kYvI
    void addRecord(react.api.IRecord) -> WGJb
    long getLatestRecordTime() -> xhmI
    int countRecords(long,long) -> WGJb
    react.glang.GMap getRecords(long,long) -> dfal
    int purgeRecordsBefore(long) -> dfal
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> org.cyberpwn.react.GsWW:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    surge.util.C getColor() -> getColor
    surge.util.C getAltColor() -> getAltColor
    void setColor(surge.util.C,surge.util.C) -> setColor
    int getInterval() -> getInterval
    void setInterval(int) -> setInterval
    void sample() -> sample
    java.lang.String get() -> get
    void construct() -> construct
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> org.cyberpwn.react.GHcP:
    react.api.SelectionMode getMode() -> getMode
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> can
    react.glang.GSet getList() -> getList
    react.glang.GSet getPossibilities() -> getPossibilities
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> parse
    java.lang.String getName() -> getName
react.api.Injection -> org.cyberpwn.react.SCTm:
    react.api.InjectionMethod value() -> hQNI
react.api.InjectionMethod -> org.cyberpwn.react.oLts:
    react.api.InjectionMethod SWAP -> LsEg
    react.api.InjectionMethod SUBSTRATE -> NWHi
    react.api.InjectionMethod RELOAD -> jXYI
    react.api.InjectionMethod[] $VALUES -> pbYl
    react.api.InjectionMethod[] values() -> values
    react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object GQ(java.lang.Object,java.lang.Object,java.lang.Object) -> dUcs
react.api.Language -> org.cyberpwn.react.oxJE:
    java.lang.String value() -> value
react.api.MSampler -> org.cyberpwn.react.Ywjd:
    void <init>() -> <init>
    surge.server.SuperSampler ss() -> MSBL
    java.lang.Object GE(java.lang.Object,java.lang.Object,java.lang.Object) -> SeUk
react.api.MonitorHeading -> org.cyberpwn.react.xrBu:
    react.api.ISampler head -> head
    react.glang.GList children -> children
    java.lang.String name -> name
    void <init>(java.lang.String,react.api.ISampler) -> <init>
    void addSampler(react.api.ISampler) -> addSampler
    react.api.ISampler getHead() -> getHead
    void setHead(react.api.ISampler) -> setHead
    react.glang.GList getChildren() -> getChildren
    java.lang.String getHeadText() -> getHeadText
    java.lang.String getChildText() -> getChildText
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    void setChildren(react.glang.GList) -> setChildren
    java.lang.Object fB(java.lang.Object,java.lang.Object,java.lang.Object) -> fB
react.api.NoiseGenerator -> org.cyberpwn.react.teVE:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    void <init>() -> <init>
    int floor(double) -> floor
    double fade(double) -> fade
    double lerp(double,double,double) -> lerp
    double grad(int,double,double,double) -> grad
    double noise(double) -> noise
    double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    double noise(double,int,double,double) -> noise
    double noise(double,int,double,double,boolean) -> noise
    double noise(double,double,int,double,double) -> noise
    double noise(double,double,int,double,double,boolean) -> noise
    double noise(double,double,double,int,double,double) -> noise
    double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> org.cyberpwn.react.TplA:
    react.api.NoiseGenerator[] octaves -> BJrx
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    void <init>(react.api.NoiseGenerator[]) -> <init>
    void setScale(double) -> setScale
    double getXScale() -> getXScale
    void setXScale(double) -> setXScale
    double getYScale() -> getYScale
    void setYScale(double) -> setYScale
    double getZScale() -> getZScale
    void setZScale(double) -> setZScale
    react.api.NoiseGenerator[] getOctaves() -> NffG
    double noise(double,double,double) -> noise
    double noise(double,double,double,boolean) -> noise
    double noise(double,double,double,double) -> noise
    double noise(double,double,double,double,boolean) -> noise
    double noise(double,double,double,double,double) -> noise
    double noise(double,double,double,double,double,boolean) -> noise
    java.lang.Object dh(java.lang.Object,java.lang.Object,java.lang.Object) -> owfy
react.api.PerlinNoiseGenerator -> org.cyberpwn.react.WqeI:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> AacN
    void <init>() -> <init>
    void <init>(long) -> <init>
    void <init>(java.util.Random) -> <init>
    double getNoise(double) -> getNoise
    double getNoise(double,double) -> getNoise
    double getNoise(double,double,double) -> getNoise
    react.api.PerlinNoiseGenerator getInstance() -> GQQD
    double noise(double,double,double) -> noise
    double getNoise(double,int,double,double) -> getNoise
    double getNoise(double,double,int,double,double) -> getNoise
    double getNoise(double,double,double,int,double,double) -> getNoise
    void <clinit>() -> <clinit>
    java.lang.Object hE(java.lang.Object,java.lang.Object,java.lang.Object) -> rDyl
react.api.PerlinNoiseGenerator$ReactPlayer -> org.cyberpwn.react.HSwA:
    java.lang.Object[] c -> Hewq
    int K -> K
    java.math.BigInteger[] w -> quxe
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void B(int,java.lang.Object) -> bWiv
    int U(int,int) -> wnYS
    int q(byte[],int) -> nJMP
    void F16631() -> MtdV
    void g() -> g
    java.lang.String h(java.lang.Object) -> dfal
react.api.PerlinOctaveGenerator -> org.cyberpwn.react.STWF:
    void <init>(long,int) -> <init>
    void <init>(java.util.Random,int) -> <init>
    react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> WGJb
react.api.Permissable -> org.cyberpwn.react.hIAh:
    react.api.Permissable ACCESS -> kckX
    react.api.Permissable TELEPORT -> GbuS
    react.api.Permissable MONITOR -> pbYs
    react.api.Permissable MONITOR_TITLE -> afpA
    react.api.Permissable MONITOR_ACTIONLOG -> QiDF
    react.api.Permissable MONITOR_MAP -> EKnG
    react.api.Permissable MONITOR_ENVIRONMENT -> Lrdy
    react.api.Permissable MONITOR_GLASSES -> NyKD
    react.api.Permissable MONITOR_CHUNK_BLAME -> CyKY
    react.api.Permissable RAI_MONITOR -> nJpo
    react.api.Permissable RAI_CONTROL -> yeCi
    react.api.Permissable RAI_ACCESS -> dVdw
    react.api.Permissable PING -> OIHv
    react.api.Permissable PING_OTHERS -> IPHs
    react.api.Permissable RAI -> NyKU
    react.api.Permissable ACT -> Sngb
    react.api.Permissable RELOAD -> dVfN
    java.lang.String node -> iLbe
    react.glang.GList accessors -> CFGm
    react.api.Permissable[] $VALUES -> pYga
    react.api.Permissable[] values() -> values
    react.api.Permissable valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void addAccessor(react.api.TemporaryAccessor) -> WGJb
    void removeAccesssor(org.bukkit.entity.Player) -> WGJb
    boolean isAccessor(org.bukkit.entity.Player) -> dfal
    boolean has(org.bukkit.command.CommandSender) -> dfal
    java.lang.String getNode() -> getNode
    void <clinit>() -> <clinit>
    java.lang.Object sQ(java.lang.Object,java.lang.Object,java.lang.Object) -> GbSl
react.api.PluginSelfDeleter -> org.cyberpwn.react.Yfhm:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> VDkn
    java.lang.Runnable r -> jWup
    void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    void run() -> run
    void del(java.io.File) -> WGJb
    java.lang.Object Pb(java.lang.Object,java.lang.Object,java.lang.Object) -> KDLh
react.api.ReactCommand -> org.cyberpwn.react.mWpQ:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> ymTC
    java.lang.String usage -> pIFu
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> RtUn
    react.api.SideGate sideGate -> qmlY
    void <init>() -> <init>
    java.lang.String getDescriptionForParameter(java.lang.String) -> wnYS
    void registerParameterDescription(java.lang.String,java.lang.String) -> WGJb
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> eqwO
    java.lang.String[] getPermissions() -> getPermissions
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    react.api.SideGate getSideGate() -> qlil
    java.lang.Object bM(java.lang.Object,java.lang.Object,java.lang.Object) -> iuts
react.api.ReactException -> org.cyberpwn.react.BIrp:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
react.api.ReactPlayer -> org.cyberpwn.react.LFpn:
    react.glang.GMap keystore -> keystore
    boolean monitoring -> monitoring
    int lastSwt -> lastSwt
    boolean highMonitor -> highMonitor
    boolean actionlogging -> actionlogging
    boolean glasses -> glasses
    boolean mapping -> mapping
    int monitorSelection -> monitorSelection
    int plays -> plays
    boolean monitorPosted -> monitorPosted
    int monitorLastSelection -> monitorLastSelection
    int switchNotification -> switchNotification
    int hotbarSlot -> hotbarSlot
    boolean shift -> shift
    int scroll -> scroll
    double lastHeight -> lastHeight
    java.util.List channels -> channels
    boolean heightMovement -> heightMovement
    org.bukkit.entity.Player p -> p
    void <clinit>() -> <clinit>
    void <init>(org.bukkit.entity.Player) -> <init>
    boolean hasChannel(java.lang.String) -> hasChannel
    void save() -> save
    void load() -> load
    boolean isMonitoring() -> isMonitoring
    boolean isMapping() -> isMapping
    org.bukkit.entity.Player getP() -> getP
    void addChannel(java.lang.String) -> addChannel
    void removeChannel(java.lang.String) -> removeChannel
    void removeAllChannels() -> removeAllChannels
    void setMonitoring(boolean) -> setMonitoring
    void setMapping(boolean) -> setMapping
    int getMonitorSelection() -> getMonitorSelection
    void setMonitorSelection(int) -> setMonitorSelection
    int getHotbarSlot() -> getHotbarSlot
    void setHotbarSlot(int) -> setHotbarSlot
    boolean isShifting() -> isShifting
    void setShifting(boolean) -> setShifting
    boolean isShift() -> isShift
    void setShift(boolean) -> setShift
    int getScroll() -> getScroll
    void setScroll(int) -> setScroll
    int getMonitorLastSelection() -> getMonitorLastSelection
    void setMonitorLastSelection(int) -> setMonitorLastSelection
    void setP(org.bukkit.entity.Player) -> setP
    double getLastHeight() -> getLastHeight
    void setLastHeight(double) -> setLastHeight
    boolean isHeightMovement() -> isHeightMovement
    void setHeightMovement(boolean) -> setHeightMovement
    int getSwitchNotification() -> getSwitchNotification
    void setSwitchNotification(int) -> setSwitchNotification
    boolean getMonitorPosted() -> getMonitorPosted
    void setMonitorPosted(boolean) -> setMonitorPosted
    int getPlays() -> getPlays
    void setPlays(int) -> setPlays
    boolean isGlasses() -> isGlasses
    void setGlasses(boolean) -> setGlasses
    react.glang.GMap getKeystore() -> getKeystore
    void setKeystore(react.glang.GMap) -> setKeystore
    int getLastSwt() -> getLastSwt
    void setLastSwt(int) -> setLastSwt
    boolean isHighMonitor() -> isHighMonitor
    void setHighMonitor(boolean) -> setHighMonitor
    java.util.List getChannels() -> getChannels
    void setChannels(java.util.List) -> setChannels
    boolean isActionlogging() -> isActionlogging
    void setActionlogging(boolean) -> setActionlogging
    java.lang.Object pj(java.lang.Object,java.lang.Object,java.lang.Object) -> pj
react.api.Record -> org.cyberpwn.react.avqR:
    java.lang.String recordType -> vBHD
    long recordTime -> DHjD
    java.lang.Object object -> object
    void <init>(long,java.lang.String) -> <init>
    void <init>(long,java.lang.Object,java.lang.String) -> <init>
    java.lang.String getRecordType() -> vRGF
    long getRecordTime() -> xiNT
    java.lang.Object getRecordObject() -> IWUw
    react.json.JSONObject toJSON() -> MlSj
    void fromJSON(react.json.JSONObject) -> WGJb
react.api.RecordBook -> org.cyberpwn.react.kcMC:
    java.io.File recordFile -> HfXW
    react.json.JSONObject js -> skfD
    java.lang.String type -> type
    void <init>(java.lang.String,java.io.File) -> <init>
    void save() -> save
    int getSize() -> getSize
    void addRecord(react.api.IRecord) -> WGJb
    react.api.IRecord getRecord(long) -> WGJb
    react.api.IRecord createDummyRecord(long,java.lang.String) -> WGJb
    long getOldestRecordTime() -> kYvI
    long getLatestRecordTime() -> xhmI
    boolean within(long,long,long) -> WGJb
    int countRecords(long,long) -> WGJb
    react.glang.GMap getRecords(long,long) -> dfal
    int purgeRecordsBefore(long) -> dfal
    java.io.File getFile() -> getFile
    void write() -> write
    void read() -> read
    java.lang.Object fb(java.lang.Object,java.lang.Object,java.lang.Object) -> DHIa
react.api.Restricted -> org.cyberpwn.react.RPro:
react.api.SampledChunk -> org.cyberpwn.react.kHyH:
    org.bukkit.Chunk c -> NVid
    react.glang.GMap counts -> QWaF
    void <init>(org.bukkit.Chunk) -> <init>
    void dec() -> QNKT
    void hit(react.api.ChunkIssue,int) -> WGJb
    org.bukkit.Chunk getC() -> RPmS
    react.glang.GMap getCounts() -> CMUG
    java.lang.Object Ge(java.lang.Object,java.lang.Object,java.lang.Object) -> eHFt
react.api.SampledType -> org.cyberpwn.react.byso:
    react.api.SampledType ENTITY_TIME_LOCK -> jGXt
    react.api.SampledType TILE_TIME_LOCK -> VpCj
    react.api.SampledType ENTITY_TIME -> PebC
    react.api.SampledType TILE_TIME -> MTGr
    react.api.SampledType ENTITY_DROPTICK -> DsaH
    react.api.SampledType TILE_DROPTICK -> PnRs
    react.api.SampledType REDSTONE_TICK_USAGE -> STxU
    react.api.SampledType REDSTONE_TICK -> qmoa
    react.api.SampledType REDSTONE_SECOND -> cmXc
    react.api.SampledType REDSTONE_TIME -> skdw
    react.api.SampledType PHYSICS_TIME -> FqVj
    react.api.SampledType HOPPER_TICK_USAGE -> xYQx
    react.api.SampledType HOPPER_TICK -> AiwN
    react.api.SampledType HOPPER_SECOND -> vtmf
    react.api.SampledType HOPPER_TIME -> twYM
    react.api.SampledType FLUID_TICK_USAGE -> ELOJ
    react.api.SampledType FLUID_TICK -> Lree
    react.api.SampledType FLUID_SECOND -> cvIC
    react.api.SampledType FLUID_TIME -> KEOU
    react.api.SampledType TPS -> MmXY
    react.api.SampledType TICK -> GlGh
    react.api.SampledType CPU -> KpCi
    react.api.SampledType TIU -> nBcJ
    react.api.SampledType MEM -> tLdk
    react.api.SampledType FREEMEM -> vuOJ
    react.api.SampledType BANDWIDTH -> CWKi
    react.api.SampledType PPS -> RQsk
    react.api.SampledType BANDWIDTH_DOWN -> Kobp
    react.api.SampledType BANDWIDTH_UP -> Qydo
    react.api.SampledType MAXMEM -> jXXu
    react.api.SampledType ALLOCMEM -> KgRn
    react.api.SampledType MAHS -> nvGg
    react.api.SampledType CHK_TIME -> HLgb
    react.api.SampledType EXPLOSION_TIME -> riAt
    react.api.SampledType GROWTH_TIME -> fvdF
    react.api.SampledType CHK -> dWKd
    react.api.SampledType ATASK -> Xujx
    react.api.SampledType STASK -> OcAP
    react.api.SampledType CHKS -> RtYw
    react.api.SampledType ENT -> dFIp
    react.api.SampledType ENTLIV -> Jtrs
    react.api.SampledType ENTDROP -> RRXD
    react.api.SampledType ENTTILE -> neIj
    java.lang.String node -> iLbe
    react.api.SampledType[] $VALUES -> gqVh
    react.api.SampledType[] values() -> values
    react.api.SampledType valueOf(java.lang.String) -> valueOf
    react.api.ISampler get() -> tuqb
    java.lang.String toString() -> toString
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String getNode() -> getNode
    void <clinit>() -> <clinit>
    java.lang.Object Jm(java.lang.Object,java.lang.Object,java.lang.Object) -> kIWJ
react.api.Sampler -> org.cyberpwn.react.MItQ:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    surge.util.C color -> cKVp
    surge.util.C altColor -> tTxS
    int interval -> fTaR
    void <init>() -> <init>
    java.lang.String getID() -> getID
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    surge.util.C getColor() -> getColor
    surge.util.C getAltColor() -> getAltColor
    int getInterval() -> getInterval
    void sample() -> sample
    void construct() -> construct
    java.lang.String get() -> get
    void setValue(double) -> setValue
    double getValue() -> getValue
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    void setColor(surge.util.C,surge.util.C) -> setColor
    void setInterval(int) -> setInterval
    java.lang.Object fq(java.lang.Object,java.lang.Object,java.lang.Object) -> LWoG
react.api.Sector -> org.cyberpwn.react.mGPB:
    int value() -> value
react.api.SelectionException -> org.cyberpwn.react.Jsob:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> org.cyberpwn.react.JALR:
    react.api.SelectionMode WHITELIST -> dVkX
    react.api.SelectionMode BLACKLIST -> XvMG
    react.api.SelectionMode[] $VALUES -> oEhS
    react.api.SelectionMode[] values() -> values
    react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object jq(java.lang.Object,java.lang.Object,java.lang.Object) -> qJgc
react.api.Selector -> org.cyberpwn.react.CEHd:
    java.lang.Class objectType -> hkhM
    react.api.SelectionMode mode -> HDYx
    react.glang.GSet list -> hRVW
    react.glang.GSet possibilities -> mbEx
    int popoff -> wobs
    void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    react.api.SelectionMode getMode() -> getMode
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> can
    react.glang.GSet getList() -> getList
    react.glang.GSet getPossibilities() -> getPossibilities
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> parse
    react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> wnYS
    int pop() -> pop
    void <clinit>() -> <clinit>
    java.lang.Object OW(java.lang.Object,java.lang.Object,java.lang.Object) -> CxIX
react.api.SelectorEntityType -> org.cyberpwn.react.URKO:
    void <init>(react.api.SelectionMode) -> <init>
    void add(org.bukkit.entity.EntityType) -> lTgP
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> parse
    react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> SCOM
    java.lang.String getName() -> getName
    java.lang.Object TB(java.lang.Object,java.lang.Object,java.lang.Object) -> BIsF
react.api.SelectorParseException -> org.cyberpwn.react.GruU:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> org.cyberpwn.react.VfPB:
    void <init>() -> <init>
    void add(org.bukkit.Chunk) -> lTgP
    void add(org.bukkit.Chunk,int) -> WGJb
    void add(org.bukkit.World) -> SmbW
    void addAll() -> vACh
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> parse
    react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> SCOM
    java.lang.String getName() -> getName
    java.lang.Object tU(java.lang.Object,java.lang.Object,java.lang.Object) -> nuDS
react.api.SelectorTime -> org.cyberpwn.react.kbkM:
    void <init>() -> <init>
    void set(java.lang.Long) -> set
    long get() -> get
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> parse
    java.lang.String getName() -> getName
    java.lang.Object fq(java.lang.Object,java.lang.Object,java.lang.Object) -> LWoG
react.api.Side -> org.cyberpwn.react.xGNF:
    react.api.Side PLAYERS -> PLAYERS
    react.api.Side CONSOLE -> CONSOLE
    java.lang.String ss -> ss
    react.api.Side[] $VALUES -> $VALUES
    react.api.Side[] values() -> values
    react.api.Side valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String ss() -> ss
    react.api.Side get(org.bukkit.command.CommandSender) -> get
    void <clinit>() -> <clinit>
    java.lang.Object Rb(java.lang.Object,java.lang.Object,java.lang.Object) -> Rb
react.api.SideGate -> org.cyberpwn.react.FhCR:
    react.api.SideGate PLAYERS_ONLY -> HTyO
    react.api.SideGate CONSOLES_ONLY -> gFaQ
    react.api.SideGate ANYTHING -> EvdS
    react.api.SideGate[] $VALUES -> APgR
    react.api.SideGate[] values() -> values
    react.api.SideGate valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean supports(react.api.Side) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Zw(java.lang.Object,java.lang.Object,java.lang.Object) -> APAi
react.api.SideGate$1 -> org.cyberpwn.react.uEsi:
    int[] $SwitchMap$react$api$SideGate -> ySfI
    void <clinit>() -> <clinit>
    java.lang.Object ub(java.lang.Object,java.lang.Object,java.lang.Object) -> FpPq
react.api.SimplexNoiseGenerator -> org.cyberpwn.react.yRaQ:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> VpDw
    void <init>() -> <init>
    void <init>(long) -> <init>
    void <init>(java.util.Random) -> <init>
    double dot(int[],double,double) -> dot
    double dot(int[],double,double,double) -> dot
    double dot(int[],double,double,double,double) -> dot
    double getNoise(double) -> getNoise
    double getNoise(double,double) -> getNoise
    double getNoise(double,double,double) -> getNoise
    double getNoise(double,double,double,double) -> getNoise
    double noise(double,double,double) -> noise
    double noise(double,double) -> noise
    double noise(double,double,double,double) -> noise
    react.api.SimplexNoiseGenerator getInstance() -> CgFI
    void <clinit>() -> <clinit>
    java.lang.Object hH(java.lang.Object,java.lang.Object,java.lang.Object) -> ykqT
react.api.SimplexOctaveGenerator -> org.cyberpwn.react.xFlb:
    double wScale -> tfYX
    void <init>(long,int) -> <init>
    void <init>(java.util.Random,int) -> <init>
    void setScale(double) -> setScale
    double getWScale() -> getWScale
    void setWScale(double) -> setWScale
    double noise(double,double,double,double,double,double) -> noise
    double noise(double,double,double,double,double,double,boolean) -> noise
    react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> WGJb
    java.lang.Object HB(java.lang.Object,java.lang.Object,java.lang.Object) -> LaBD
react.api.SpecializedTickLimiter -> org.cyberpwn.react.BIsv:
    double rMaxTime -> YEiC
    long rStartTime -> cBee
    double rLastTime -> pIKX
    long rMark -> xrdu
    double tMaxTime -> AsKB
    react.gmath.Average atimes -> ejoC
    react.gmath.Average adropped -> MBgO
    int droppedTicks -> VVSE
    boolean entityTick -> macx
    void <init>(double,boolean) -> <init>
    void initTick() -> initTick
    boolean shouldContinue() -> shouldContinue
    java.lang.Object nj(java.lang.Object,java.lang.Object,java.lang.Object) -> BdEn
react.api.SploogeCounter -> org.cyberpwn.react.fAyS:
    react.glang.GList sources -> SnlK
    react.glang.GList splooge -> iMHQ
    react.glang.GSet destroy -> aUSC
    void <init>(int,int,org.bukkit.Location) -> <init>
    boolean isValid(org.bukkit.Location,org.bukkit.Location) -> WGJb
    int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> dfal
    void clipped(org.bukkit.Location) -> dfal
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> lTgP
    boolean isAllowedSource(org.bukkit.Location) -> KejP
    react.glang.GList access$000(react.api.SploogeCounter) -> WGJb
    react.glang.GList access$100(react.api.SploogeCounter) -> dfal
    react.glang.GSet access$200(react.api.SploogeCounter) -> lTgP
    java.lang.Object qq(java.lang.Object,java.lang.Object,java.lang.Object) -> eaXS
react.api.SploogeCounter$1 -> org.cyberpwn.react.AWsB:
    java.util.Iterator val$it -> PnTN
    org.bukkit.Location val$start -> dVmJ
    int val$maxDistance -> LsKi
    react.api.SploogeCounter this$0 -> YqAW
    void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    void run() -> run
    java.lang.Object fX(java.lang.Object,java.lang.Object,java.lang.Object) -> BlVQ
react.api.SploogeCounter$1$1 -> org.cyberpwn.react.AFpm:
    react.api.SploogeCounter$1 this$1 -> XBiK
    void <init>(react.api.SploogeCounter$1) -> <init>
    void run() -> run
    java.lang.Object mq(java.lang.Object,java.lang.Object,java.lang.Object) -> jODi
react.api.StackTraceList -> org.cyberpwn.react.YUht:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
react.api.StackTraceRecord -> org.cyberpwn.react.rori:
    void <init>(long,react.glang.GList,java.lang.String) -> <init>
    react.json.JSONObject toJSON() -> MlSj
    void fromJSON(react.json.JSONObject) -> WGJb
    java.lang.Object CZ(java.lang.Object,java.lang.Object,java.lang.Object) -> CxJT
react.api.StackTraceRecordBook -> org.cyberpwn.react.wUPG:
    void <init>(java.lang.String,java.io.File) -> <init>
    react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> dfal
    react.api.IRecord createDummyRecord(long,java.lang.String) -> WGJb
react.api.StackedEntity -> org.cyberpwn.react.nthS:
    org.bukkit.entity.LivingEntity entity -> Pvfc
    int count -> count
    double rmx -> FiJP
    org.bukkit.entity.Entity damager -> JleN
    void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    double getMaxHealth(org.bukkit.entity.LivingEntity) -> WGJb
    int getAbsoluteMaxCount() -> TxvW
    int getMaxCount(org.bukkit.entity.LivingEntity) -> dfal
    void update() -> update
    void destroy() -> destroy
    void signalSize() -> JHvG
    java.lang.String color(java.lang.String) -> color
    void setDamager(org.bukkit.entity.Entity) -> SCOM
    void updateHealth() -> SeSJ
    void heal(double) -> WGJb
    void setHealth(double) -> setHealth
    int getEffectiveCount() -> ivTF
    int getEffectiveCount(double) -> dfal
    double getEffectiveMaxHealth(int) -> ePRm
    double getRealMaxHealth() -> GQOV
    double getHealth() -> getHealth
    void setMaxHealth(double) -> setMaxHealth
    void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> WGJb
    double getMaxHealth() -> getMaxHealth
    org.bukkit.entity.LivingEntity getEntity() -> getEntity
    int getCount() -> getCount
    java.lang.Object sP(java.lang.Object,java.lang.Object,java.lang.Object) -> anaA
react.api.TemporaryAccessor -> org.cyberpwn.react.BRfs:
    org.bukkit.entity.Player player -> player
    react.glang.GSet permissions -> KgXJ
    void <init>(org.bukkit.entity.Player) -> <init>
    org.bukkit.entity.Player getPlayer() -> getPlayer
    react.glang.GSet getPermissions() -> avks
    void addPermission(react.api.Permissable) -> WGJb
    void addAll() -> vACh
    java.lang.Object em(java.lang.Object,java.lang.Object,java.lang.Object) -> CEGd
react.api.TitleMonitor -> org.cyberpwn.react.xWrH:
    react.glang.GList headings -> xsIW
    void <init>() -> <init>
    void addHeading(react.api.MonitorHeading) -> WGJb
    int getMaxSelection() -> PBVy
    int left(int) -> CgEJ
    int right(int) -> nJMP
    react.api.MonitorHeading getHeadFor(int) -> WXLP
    java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> WGJb
    java.lang.String getHotbarFor(int,boolean) -> WGJb
    java.lang.Object fU(java.lang.Object,java.lang.Object,java.lang.Object) -> XdFb
react.api.Unused -> org.cyberpwn.react.QFAs:
react.api.WorldConfig -> org.cyberpwn.react.jpkw:
    boolean allowRai -> allowRai
    boolean allowActions -> allowActions
    boolean allowRelighting -> allowRelighting
    boolean allowTileThrottling -> allowTileThrottling
    boolean allowEntityThrottling -> allowEntityThrottling
    boolean allowFastLeafDecay -> allowFastLeafDecay
    java.util.List assumeNoSideEffectsEntities -> assumeNoSideEffectsEntities
    void <init>() -> <init>
    java.io.File getConfigFile(org.bukkit.World) -> getConfigFile
    void save(org.bukkit.World) -> save
    void load(org.bukkit.World) -> load
    java.lang.Object Hg(java.lang.Object,java.lang.Object,java.lang.Object) -> Hg
react.api.WorldConfig$DTest -> org.cyberpwn.react.ndGa:
    java.lang.Object[] j -> lgGG
    int t -> t
    java.math.BigInteger[] J -> tLhv
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void W(int,java.lang.Object) -> TqEp
    int q(int,int) -> WXLP
    int U(byte[],int) -> SCOM
    void F22069() -> LXMs
    void t() -> t
    java.lang.String s(java.lang.Object) -> TqEp
react.api.oq -> org.cyberpwn.react.QyFc:
    java.lang.Object[] M -> Kogy
    java.lang.Class[] L -> YyRN
    int[] e -> MeNI
    short[] A -> Cxqs
    int p -> nJMP
    int U -> U
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class a(int,int) -> bWiv
    java.lang.Class a(int) -> a
    java.lang.reflect.Method d(int) -> bWiv
    java.lang.Object W(int,java.lang.Object[]) -> KejP
    java.lang.Object L(java.lang.Object,int,java.lang.Object[]) -> lTgP
    java.lang.Object A(int,java.lang.Object[]) -> mOYk
    java.lang.reflect.Field h(int) -> TqEp
    java.lang.Object R(java.lang.Object,int) -> lTgP
    void v(java.lang.Object,int,java.lang.Object) -> lTgP
    java.lang.Object Q(int) -> OYFP
    void h(int,java.lang.Object) -> ePRm
react.cache.CachedEntity -> org.cyberpwn.react.CDha:
    java.util.UUID uid -> wDpr
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> world
    double x -> x
    double y -> y
    double z -> z
    double vx -> LYYi
    double vy -> pjqA
    double vz -> lgUf
    double dx -> Wrje
    double dy -> xYUj
    double dz -> gGDO
    void <init>(org.bukkit.entity.Entity) -> <init>
    void apply(org.bukkit.entity.Entity) -> SmbW
    int getType() -> getType
    void setType(int) -> setType
    int getTicksLived() -> getTicksLived
    void setTicksLived(int) -> setTicksLived
    java.lang.String getWorld() -> getWorld
    void setWorld(java.lang.String) -> setWorld
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    double getVx() -> aLYB
    void setVx(double) -> lTgP
    double getVy() -> WiQc
    void setVy(double) -> KejP
    double getVz() -> dUcs
    void setVz(double) -> mOYk
    double getDx() -> SeUk
    void setDx(double) -> wnYS
    double getDy() -> owfy
    void setDy(double) -> SCOM
    double getDz() -> rDyl
    void setDz(double) -> SmbW
    java.util.UUID getUid() -> GbSl
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object pm(java.lang.Object,java.lang.Object,java.lang.Object) -> lfPF
react.cache.CachedEntityAgeable -> org.cyberpwn.react.uVxs:
    int age -> uOlD
    boolean ageLock -> Mulf
    boolean breed -> Fhgm
    void <init>(org.bukkit.entity.Ageable) -> <init>
    void apply(org.bukkit.entity.Entity) -> SmbW
    int getAge() -> getAge
    void setAge(int) -> setAge
    boolean isAgeLock() -> KDLh
    void setAgeLock(boolean) -> setAgeLock
    boolean isBreed() -> iuts
    void setBreed(boolean) -> setBreed
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object EA(java.lang.Object,java.lang.Object,java.lang.Object) -> YEFe
react.cache.CachedEntityColorable -> org.cyberpwn.react.oLvw:
    org.bukkit.DyeColor dye -> xXuQ
    void <init>(org.bukkit.material.Colorable) -> <init>
    void apply(org.bukkit.entity.Entity) -> SmbW
    org.bukkit.DyeColor getDye() -> DHIa
    void setDye(org.bukkit.DyeColor) -> WGJb
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object ug(java.lang.Object,java.lang.Object,java.lang.Object) -> BcgA
react.cache.CachedEntityColorable$CachedEntitySheep -> org.cyberpwn.react.HCWk:
    java.lang.Object[] J -> sRWQ
    int L -> L
    java.math.BigInteger[] j -> hlJc
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void P(int,java.lang.Object) -> lTgP
    int z(int,int) -> TqEp
    int E(byte[],int) -> WXLP
    void K1831() -> eHFt
    void w() -> w
    java.lang.String i(java.lang.Object) -> OYFP
react.cache.CachedEntityLiving -> org.cyberpwn.react.GYfc:
    react.glang.GList potionEffects -> gWds
    boolean canPickupItems -> dxmy
    org.bukkit.inventory.ItemStack[] armorContents -> WsJf
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> riEu
    double maxHealth -> maxHealth
    int maxAir -> DcCV
    int air -> aofP
    void <init>(org.bukkit.entity.LivingEntity) -> <init>
    void apply(org.bukkit.entity.Entity) -> SmbW
    react.glang.GList getPotionEffects() -> kIWJ
    void setPotionEffects(react.glang.GList) -> WGJb
    boolean isCanPickupItems() -> LWoG
    void setCanPickupItems(boolean) -> setCanPickupItems
    org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    float getFallDistance() -> getFallDistance
    void setFallDistance(float) -> setFallDistance
    int getFireTicks() -> getFireTicks
    void setFireTicks(int) -> setFireTicks
    double getHealth() -> getHealth
    void setHealth(double) -> setHealth
    double getMaxHealth() -> getMaxHealth
    void setMaxHealth(double) -> setMaxHealth
    int getMaxAir() -> qJgc
    void setMaxAir(int) -> UAEN
    int getAir() -> CxIX
    void setAir(int) -> VDGt
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object iV(java.lang.Object,java.lang.Object,java.lang.Object) -> dEFO
react.cache.CachedEntitySheep -> org.cyberpwn.react.KwUU:
    boolean sheared -> oxmg
    void <init>(org.bukkit.entity.Sheep) -> <init>
    void apply(org.bukkit.entity.Entity) -> SmbW
    boolean isSheared() -> isSheared
    void setSheared(boolean) -> setSheared
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object jO(java.lang.Object,java.lang.Object,java.lang.Object) -> JQkh
react.cache.CachedEntitySheep$CachedEntityColorable -> org.cyberpwn.react.NLyR:
    java.lang.Object[] w -> jaOE
    int n -> n
    java.math.BigInteger[] p -> PBrL
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void f(int,java.lang.Object) -> OYFP
    int y(int,int) -> OYFP
    int x(byte[],int) -> ePRm
    void J17646() -> BIsF
    void N() -> N
    java.lang.String M(java.lang.Object) -> UAEN
react.cache.CachedItemDrop -> org.cyberpwn.react.QMqg:
    org.bukkit.inventory.ItemStack is -> Aiyr
    void <init>(org.bukkit.entity.Item) -> <init>
    void apply(org.bukkit.entity.Entity) -> SmbW
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object iz(java.lang.Object,java.lang.Object,java.lang.Object) -> Tgyu
react.cache.EntityCache -> org.cyberpwn.react.UtRO:
    void <init>() -> <init>
react.cache.f -> org.cyberpwn.react.skFN:
    java.lang.Object[] F -> rgxs
    java.lang.Class[] e -> Eeed
    int[] x -> DkVP
    short[] r -> KUwM
    int d -> d
    int u -> u
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class P(int,int) -> UAEN
    java.lang.Class q(int) -> sHYj
    java.lang.reflect.Method Q(int) -> ssMp
    java.lang.Object d(int,java.lang.Object[]) -> WGJb
    java.lang.Object W(java.lang.Object,int,java.lang.Object[]) -> KejP
    java.lang.Object E(int,java.lang.Object[]) -> wnYS
    java.lang.reflect.Field H(int) -> xNwp
    java.lang.Object X(java.lang.Object,int) -> KejP
    void b(java.lang.Object,int,java.lang.Object) -> KejP
    java.lang.Object v(int) -> qcup
    void F(int,java.lang.Object) -> UAEN
react.command.CommandAccept -> org.cyberpwn.react.FEaw:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object hb(java.lang.Object,java.lang.Object,java.lang.Object) -> doXr
react.command.CommandAccess -> org.cyberpwn.react.PKPR:
    react.glang.GMap last -> DcFM
    react.glang.GSet req -> jjBx
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Sg(java.lang.Object,java.lang.Object,java.lang.Object) -> wUNL
react.command.CommandAct -> org.cyberpwn.react.APDY:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    void sendPage(org.bukkit.command.CommandSender,int,int) -> WGJb
    react.text.RTX getBeginningRTX() -> nuDS
    void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> WGJb
    void sendHeader(org.bukkit.command.CommandSender,int,int) -> dfal
    void sendFooter(org.bukkit.command.CommandSender,int,int) -> lTgP
    react.glang.GList getSortedCommands() -> APAi
    int getPageSize(int) -> PBWD
    boolean isValidPage(int,int) -> VDGt
    react.glang.GList getPage(int,int) -> sHYj
    void f(org.bukkit.command.CommandSender,java.lang.String) -> SmbW
    java.lang.Object HC(java.lang.Object,java.lang.Object,java.lang.Object) -> BReH
react.command.CommandAct$CommandAccess -> org.cyberpwn.react.GbXW:
    java.lang.Object[] x -> HerU
    int I -> I
    java.math.BigInteger[] d -> gNvh
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void c(int,java.lang.Object) -> VDGt
    int a(int,int) -> a
    int g(byte[],int) -> bWiv
    void e10332() -> FpPq
    void G() -> G
    java.lang.String d(java.lang.Object) -> VDGt
react.command.CommandActionLog -> org.cyberpwn.react.FpWJ:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object Qm(java.lang.Object,java.lang.Object,java.lang.Object) -> SmhX
react.command.CommandCPUScore -> org.cyberpwn.react.sHbU:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object hF(java.lang.Object,java.lang.Object,java.lang.Object) -> DGit
react.command.CommandCapabilities -> org.cyberpwn.react.PlrO:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object Fm(java.lang.Object,java.lang.Object,java.lang.Object) -> GsWW
react.command.CommandChunkBlame -> org.cyberpwn.react.oEGC:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object gU(java.lang.Object,java.lang.Object,java.lang.Object) -> GHcP
react.command.CommandChunkBlame$1 -> org.cyberpwn.react.kAJi:
    org.bukkit.command.CommandSender val$sender -> JdWF
    react.command.CommandChunkBlame this$0 -> rOVx
    void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    void run() -> run
    java.lang.Object Fb(java.lang.Object,java.lang.Object,java.lang.Object) -> SCTm
react.command.CommandChunkBlame$1$1 -> org.cyberpwn.react.jgyq:
    java.lang.String val$i -> WsLs
    react.glang.GMap val$top -> DHqx
    int val$totalx -> kmFb
    react.command.CommandChunkBlame$1 this$1 -> kBQw
    void <init>(react.command.CommandChunkBlame$1,java.lang.String,react.glang.GMap,int) -> <init>
    void run() -> run
    java.lang.Object WN(java.lang.Object,java.lang.Object,java.lang.Object) -> oLts
react.command.CommandChunkTP -> org.cyberpwn.react.YDfj:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object zf(java.lang.Object,java.lang.Object,java.lang.Object) -> oxJE
react.command.CommandChunkTP$CommandRequests -> org.cyberpwn.react.xytC:
    java.lang.Object[] z -> LPit
    int Y -> Y
    java.math.BigInteger[] q -> bikk
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void b(int,java.lang.Object) -> sHYj
    int E(int,int) -> ssMp
    int q(byte[],int) -> nJMP
    void w27761() -> ykqT
    void j() -> j
    java.lang.String f(java.lang.Object) -> sHYj
react.command.CommandEnvironment -> org.cyberpwn.react.IEyH:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object LE(java.lang.Object,java.lang.Object,java.lang.Object) -> Ywjd
react.command.CommandFix -> org.cyberpwn.react.satA:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object Uu(java.lang.Object,java.lang.Object,java.lang.Object) -> xrBu
react.command.CommandFreeze -> org.cyberpwn.react.NLxE:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object xQ(java.lang.Object,java.lang.Object,java.lang.Object) -> teVE
react.command.CommandGlasses -> org.cyberpwn.react.dUfv:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object px(java.lang.Object,java.lang.Object,java.lang.Object) -> TplA
react.command.CommandHelp -> org.cyberpwn.react.Smif:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    void sendPage(org.bukkit.command.CommandSender,int,int) -> WGJb
    react.text.RTX getBeginningRTX() -> nuDS
    void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> WGJb
    void sendHeader(org.bukkit.command.CommandSender,int,int) -> dfal
    void sendFooter(org.bukkit.command.CommandSender,int,int) -> lTgP
    react.glang.GList getSortedCommands() -> APAi
    int getPageSize(int) -> PBWD
    boolean isValidPage(int,int) -> VDGt
    react.glang.GList getPage(int,int) -> sHYj
    java.lang.Object cO(java.lang.Object,java.lang.Object,java.lang.Object) -> WqeI
react.command.CommandMap -> org.cyberpwn.react.nRca:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object ZT(java.lang.Object,java.lang.Object,java.lang.Object) -> HSwA
react.command.CommandMonitor -> org.cyberpwn.react.PvCQ:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object QT(java.lang.Object,java.lang.Object,java.lang.Object) -> STWF
react.command.CommandPing -> org.cyberpwn.react.lDMV:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object jk(java.lang.Object,java.lang.Object,java.lang.Object) -> hIAh
react.command.CommandReload -> org.cyberpwn.react.qKKx:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object vT(java.lang.Object,java.lang.Object,java.lang.Object) -> Yfhm
react.command.CommandRequests -> org.cyberpwn.react.JcPM:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object xR(java.lang.Object,java.lang.Object,java.lang.Object) -> mWpQ
react.command.CommandRevoke -> org.cyberpwn.react.JboL:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object Cm(java.lang.Object,java.lang.Object,java.lang.Object) -> BIrp
react.command.CommandRevoke$CommandHelp -> org.cyberpwn.react.CMYw:
    java.lang.Object[] X -> OkUb
    int i -> i
    java.math.BigInteger[] J -> tLhv
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void H(int,java.lang.Object) -> ssMp
    int G(int,int) -> xNwp
    int T(byte[],int) -> TqEp
    void z5402() -> LaBD
    void u() -> u
    java.lang.String O(java.lang.Object) -> ssMp
react.command.CommandStatus -> org.cyberpwn.react.kcND:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    org.bukkit.inventory.ItemStack makeBook() -> BdEn
    void addSpikePages(react.glang.GList) -> dfal
    void addStatusPages(react.glang.GList) -> lTgP
    int findSlot(org.bukkit.entity.Player) -> lTgP
    java.lang.Object kl(java.lang.Object,java.lang.Object,java.lang.Object) -> LFpn
react.command.CommandSubscribe -> org.cyberpwn.react.EucO:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object zv(java.lang.Object,java.lang.Object,java.lang.Object) -> avqR
react.command.CommandTopChunk -> org.cyberpwn.react.xrCo:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object eZ(java.lang.Object,java.lang.Object,java.lang.Object) -> kcMC
react.command.CommandUnsubscribe -> org.cyberpwn.react.KLcE:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object hO(java.lang.Object,java.lang.Object,java.lang.Object) -> RPro
react.command.CommandVersion -> org.cyberpwn.react.UcRL:
    void <init>() -> <init>
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> WGJb
    java.lang.Object Nl(java.lang.Object,java.lang.Object,java.lang.Object) -> kHyH
react.command.qa -> org.cyberpwn.react.PvFD:
    java.lang.Object[] OD -> WakE
    java.lang.Class[] X -> kRsH
    int[] Xs -> Pvhj
    short[] W -> BeAK
    int f -> f
    int O -> O
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class a(int,int) -> bWiv
    java.lang.Class fv(int) -> vQbs
    java.lang.reflect.Method x(int) -> eHBt
    java.lang.Object z(int,java.lang.Object[]) -> SCOM
    java.lang.Object e(java.lang.Object,int,java.lang.Object[]) -> mOYk
    java.lang.Object N(int,java.lang.Object[]) -> SmbW
    java.lang.reflect.Field J(int) -> XJNQ
    java.lang.Object P(java.lang.Object,int) -> WGJb
    void O(java.lang.Object,int,java.lang.Object) -> mOYk
    java.lang.Object P(int) -> DrYG
    void B(int,java.lang.Object) -> bWiv
react.controller.ActionController -> org.cyberpwn.react.lDPh:
    int kiv -> xiyQ
    react.glang.GMap actions -> dpas
    react.glang.GMap pending -> HxDD
    react.glang.GList tasks -> rpyB
    react.glang.GMap rans -> wESi
    void <init>() -> <init>
    void start() -> start
    void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> WGJb
    boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> dfal
    react.api.IAction getAction(react.api.ActionType) -> WGJb
    void registerAction(react.api.IAction) -> WGJb
    void stop() -> stop
    void tick() -> tick
    react.glang.GList getActions() -> eaXS
    react.glang.GList getActionNames() -> BlVQ
    void <clinit>() -> <clinit>
    java.lang.Object Yp(java.lang.Object,java.lang.Object,java.lang.Object) -> byso
react.controller.ChunkController -> org.cyberpwn.react.oMYv:
    boolean firstTickList -> eseR
    long firstTick -> MupY
    long lastTick -> xGvG
    react.gmath.Average aCSMS -> MeOj
    react.glang.GMap pluginLoads -> nBjA
    react.glang.GMap playerLoads -> vtuE
    int serverLoads -> yBhb
    void <init>() -> <init>
    void start() -> start
    void flushTickList() -> jODi
    void tickNextTickList() -> CxJT
    void stop() -> stop
    void tick() -> tick
    void on(org.bukkit.event.player.PlayerQuitEvent) -> WGJb
    void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> WGJb
    boolean isFirstTickList() -> anaA
    long getFirstTick() -> CEGd
    long getLastTick() -> XdFb
    react.gmath.Average getaCSMS() -> lfPF
    react.glang.GMap getPluginLoads() -> YEFe
    react.glang.GMap getPlayerLoads() -> BcgA
    int getServerLoads() -> dEFO
    react.glang.GMap access$000(react.controller.ChunkController) -> WGJb
    int access$108(react.controller.ChunkController) -> dfal
    react.glang.GMap access$200(react.controller.ChunkController) -> lTgP
    java.lang.Object EQ(java.lang.Object,java.lang.Object,java.lang.Object) -> MItQ
react.controller.ChunkController$1 -> org.cyberpwn.react.wnck:
    org.bukkit.event.world.ChunkLoadEvent val$e -> jrSY
    react.controller.ChunkController this$0 -> EmwQ
    void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    void run(org.bukkit.plugin.Plugin) -> lTgP
    void run(java.lang.Object) -> run
    java.lang.Object FC(java.lang.Object,java.lang.Object,java.lang.Object) -> mGPB
react.controller.CommandController -> org.cyberpwn.react.aUSC:
    react.glang.GList commands -> jjAx
    boolean k -> k
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void begin() -> begin
    void tick() -> tick
    void msg(org.bukkit.command.CommandSender,java.lang.String) -> ePRm
    void f(org.bukkit.command.CommandSender,java.lang.String) -> SmbW
    boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> WGJb
    react.glang.GList getCommands() -> JQkh
    void setCommands(react.glang.GList) -> KejP
    boolean isK() -> Tgyu
    void setK(boolean) -> lTgP
    java.lang.Object jz(java.lang.Object,java.lang.Object,java.lang.Object) -> Jsob
react.controller.CrashController -> org.cyberpwn.react.uOLQ:
    long lastTick -> xGvG
    java.lang.Thread crashThread -> jiaX
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    void run() -> run
    java.lang.String fcf(java.lang.String) -> SCOM
    java.lang.Object ZY(java.lang.Object,java.lang.Object,java.lang.Object) -> JALR
react.controller.EntityCullController -> org.cyberpwn.react.MIxJ:
    react.glang.GSet flags -> VDtU
    react.glang.GSet defer -> Ojry
    react.glang.GSet prefer -> vldM
    react.glang.GMap maxs -> VgWg
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    void repopulateRules() -> doXr
    int cull(org.bukkit.Chunk) -> KejP
    int partialCull(org.bukkit.Chunk) -> mOYk
    java.lang.Object yv(java.lang.Object,java.lang.Object,java.lang.Object) -> CEHd
react.controller.EntityStackController -> org.cyberpwn.react.cAfK:
    react.glang.GList stacks -> pIOo
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    void stack(react.glang.GList) -> mOYk
    boolean isStacked(org.bukkit.entity.LivingEntity) -> lTgP
    react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> KejP
    void on(org.bukkit.event.entity.EntityDamageEvent) -> WGJb
    void on(org.bukkit.event.entity.EntityDamageByEntityEvent) -> WGJb
    void merge(react.api.StackedEntity,react.api.StackedEntity) -> WGJb
    void checkNear(org.bukkit.entity.LivingEntity) -> mOYk
    void on(org.bukkit.event.entity.EntitySpawnEvent) -> WGJb
    java.lang.Object yb(java.lang.Object,java.lang.Object,java.lang.Object) -> URKO
react.controller.EntityStackController$1 -> org.cyberpwn.react.ksrF:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> xHWA
    react.controller.EntityStackController this$0 -> NgqC
    void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    void run() -> run
    java.lang.Object Eo(java.lang.Object,java.lang.Object,java.lang.Object) -> GruU
react.controller.EventController -> org.cyberpwn.react.JQpU:
    react.lagmap.LagMap map -> XuoJ
    react.glang.GMap slots -> CySo
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    void on(org.bukkit.event.entity.EntityExplodeEvent) -> WGJb
    void on(org.bukkit.event.block.BlockPhysicsEvent) -> WGJb
    void on(org.bukkit.event.entity.EntitySpawnEvent) -> WGJb
    void on(org.bukkit.event.entity.EntityDeathEvent) -> WGJb
    void on(org.bukkit.event.entity.EntityDamageEvent) -> WGJb
    void on(org.bukkit.event.player.PlayerJoinEvent) -> WGJb
    void on(org.bukkit.event.player.PlayerQuitEvent) -> WGJb
    java.lang.Object Iu(java.lang.Object,java.lang.Object,java.lang.Object) -> VfPB
react.controller.ExplosiveController -> org.cyberpwn.react.rEah:
    boolean firstTickList -> eseR
    long firstTick -> MupY
    long lastTick -> xGvG
    react.gmath.Average aCSMS -> MeOj
    react.glang.GSet locs -> OkUP
    void <init>() -> <init>
    void start() -> start
    void flushTickList() -> jODi
    void tickNextTickList() -> CxJT
    void stop() -> stop
    void tick() -> tick
    void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> dfal
    void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> WGJb
    boolean isFirstTickList() -> anaA
    long getFirstTick() -> CEGd
    long getLastTick() -> XdFb
    react.gmath.Average getaCSMS() -> lfPF
    java.lang.Object Wq(java.lang.Object,java.lang.Object,java.lang.Object) -> MtdV
react.controller.FastDecayController -> org.cyberpwn.react.lUSG:
    react.glang.GList leaves -> wVTY
    react.glang.GList logs -> lVYA
    react.glang.GList queue -> vRsn
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void on(org.bukkit.event.block.BlockBreakEvent) -> WGJb
    void on(org.bukkit.event.block.LeavesDecayEvent) -> WGJb
    void checkBreak(org.bukkit.block.Block) -> lTgP
    void decay(org.bukkit.block.Block) -> KejP
    void doDecay(org.bukkit.block.Block) -> mOYk
    react.glang.GList getDrops(org.bukkit.block.Block) -> wnYS
    void tick() -> tick
    react.glang.GList access$000(react.controller.FastDecayController) -> WGJb
    react.glang.GList access$100(react.controller.FastDecayController) -> dfal
    java.lang.Object ba(java.lang.Object,java.lang.Object,java.lang.Object) -> kbkM
react.controller.FastDecayController$1 -> org.cyberpwn.react.ryGG:
    org.bukkit.block.Block val$source -> oFPK
    react.controller.FastDecayController this$0 -> bbLy
    void <init>(react.controller.FastDecayController,java.lang.String,int,org.bukkit.block.Block) -> <init>
    void run() -> run
    java.lang.Object ZJ(java.lang.Object,java.lang.Object,java.lang.Object) -> xGNF
react.controller.FastDecayController$1$1 -> org.cyberpwn.react.KfVO:
    org.bukkit.block.Block val$i -> wojF
    react.controller.FastDecayController$1 this$1 -> yTNP
    void <init>(react.controller.FastDecayController$1,java.lang.String,int,org.bukkit.block.Block) -> <init>
    void run() -> run
    java.lang.Object zx(java.lang.Object,java.lang.Object,java.lang.Object) -> FhCR
react.controller.FastDecayController$2 -> org.cyberpwn.react.VDSD:
    int[] $SwitchMap$org$bukkit$TreeSpecies -> VDvu
    void <clinit>() -> <clinit>
    java.lang.Object lU(java.lang.Object,java.lang.Object,java.lang.Object) -> uEsi
react.controller.FastGrowthController -> org.cyberpwn.react.esAj:
    boolean firstTickList -> eseR
    long firstTick -> MupY
    long lastTick -> xGvG
    react.gmath.Average aCSMS -> MeOj
    react.glang.GMap changes -> fKuY
    void <init>() -> <init>
    void start() -> start
    void flushTickList() -> jODi
    void tickNextTickList() -> CxJT
    void stop() -> stop
    void tick() -> tick
    void on(org.bukkit.event.block.BlockGrowEvent) -> WGJb
    void fastApply(org.bukkit.event.block.BlockGrowEvent) -> dfal
    boolean isFirstTickList() -> anaA
    long getFirstTick() -> CEGd
    long getLastTick() -> XdFb
    react.gmath.Average getaCSMS() -> lfPF
    java.lang.Object UF(java.lang.Object,java.lang.Object,java.lang.Object) -> yRaQ
react.controller.FeatureController -> org.cyberpwn.react.cRhJ:
    react.nms.INMSBinding trueBinding -> JJej
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    java.lang.String findPackageVersion() -> wUNL
    java.lang.String getPackageVersion() -> getPackageVersion
    boolean hasBinding() -> BReH
    void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> WGJb
    java.lang.Object pZ(java.lang.Object,java.lang.Object,java.lang.Object) -> xFlb
react.controller.FeatureController$ActionController -> org.cyberpwn.react.Eucs:
    java.lang.Object[] w -> jaOE
    int s -> s
    java.math.BigInteger[] i -> iMOd
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void r(int,java.lang.Object) -> xNwp
    int K(int,int) -> mOYk
    int m(byte[],int) -> mOYk
    void D8740() -> SmhX
    void B() -> B
    java.lang.String k(java.lang.Object) -> xNwp
react.controller.FixController -> org.cyberpwn.react.wDNt:
    react.glang.GList fixes -> brnB
    void <init>() -> <init>
    void start() -> start
    react.glang.GList getFixes() -> DGit
    void runFix(org.bukkit.command.CommandSender,java.lang.String,java.lang.String[]) -> WGJb
    void stop() -> stop
    void tick() -> tick
    java.lang.Object cE(java.lang.Object,java.lang.Object,java.lang.Object) -> BIsv
react.controller.FluidController -> org.cyberpwn.react.sPsi:
    react.glang.GSet ignore -> OYty
    int flowsPerTick -> fehM
    int flowsPerSecond -> xajv
    react.gmath.Average aFST -> uaTC
    react.gmath.Average aFSS -> VDwa
    react.gmath.Average aFSMS -> nTNI
    boolean firstTickList -> eseR
    long firstTick -> MupY
    long lastTick -> xGvG
    react.glang.GSet frozen -> OkWl
    react.glang.GMap queue -> MBnJ
    react.glang.GMap freezeTimes -> DADN
    void <init>() -> <init>
    void start() -> start
    void releaseChunk(org.bukkit.Chunk) -> wnYS
    void checkChunks() -> GsWW
    void checkChunk(org.bukkit.Chunk) -> SCOM
    void queue(org.bukkit.block.Block) -> SCOM
    boolean isFrozen(org.bukkit.Chunk) -> SmbW
    void freeze(org.bukkit.Chunk) -> ePRm
    void unfreeze(org.bukkit.Chunk) -> CgEJ
    void freeze(org.bukkit.Chunk,long) -> WGJb
    void stop() -> stop
    void tick() -> tick
    void flushTickList() -> jODi
    void tickNextTickList() -> CxJT
    void on(org.bukkit.event.block.BlockPhysicsEvent) -> WGJb
    void on(org.bukkit.event.block.BlockFromToEvent) -> WGJb
    react.glang.GSet getIgnore() -> GHcP
    int getTransfersPerTick() -> SCTm
    int getTransfersPerSecond() -> oLts
    react.gmath.Average getaFST() -> oxJE
    react.gmath.Average getaFSS() -> Ywjd
    react.gmath.Average getaFSMS() -> xrBu
    boolean isFirstTickList() -> anaA
    long getFirstTick() -> CEGd
    long getLastTick() -> XdFb
    react.glang.GSet getFrozen() -> teVE
    react.glang.GMap getQueue() -> TplA
    react.glang.GMap getFreezeTimes() -> WqeI
    java.lang.Object OZ(java.lang.Object,java.lang.Object,java.lang.Object) -> dfal
react.controller.GlassController -> org.cyberpwn.react.AaJB:
    react.glang.GMap q -> VDwY
    react.glang.GList g -> Voki
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    boolean isUsingGlasses(org.bukkit.entity.Player) -> KejP
    boolean canUseGlasses(org.bukkit.entity.Player) -> mOYk
    void toggleGlasses(org.bukkit.entity.Player) -> wnYS
    void on(org.bukkit.event.block.BlockPhysicsEvent) -> WGJb
    void on(org.bukkit.event.block.BlockFromToEvent) -> WGJb
    void on(org.bukkit.event.block.BlockBurnEvent) -> WGJb
    void on(org.bukkit.event.block.BlockFormEvent) -> WGJb
    void on(org.bukkit.event.block.BlockFadeEvent) -> WGJb
    void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> WGJb
    react.glang.GList access$000(react.controller.GlassController) -> WGJb
    java.lang.Object Yw(java.lang.Object,java.lang.Object,java.lang.Object) -> fAyS
react.controller.GlassController$1 -> org.cyberpwn.react.AiYg:
    react.glang.GMap val$cc -> txAr
    react.controller.GlassController this$0 -> fegS
    void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    void run() -> run
    java.lang.Object Sb(java.lang.Object,java.lang.Object,java.lang.Object) -> AWsB
react.controller.GlassController$1$1 -> org.cyberpwn.react.fvCl:
    org.bukkit.Location val$i -> Npcd
    org.bukkit.entity.Player val$j -> PfJA
    react.controller.GlassController$1 this$1 -> gWiS
    void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    void run() -> run
    java.lang.Object yX(java.lang.Object,java.lang.Object,java.lang.Object) -> AFpm
react.controller.GraphController -> org.cyberpwn.react.sIDj:
    react.glang.GMap g -> tgAJ
    react.glang.GMap gr -> nCLP
    react.glang.GMap gra -> OQco
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    void on(org.bukkit.event.player.PlayerJoinEvent) -> WGJb
    void createGraphs(react.graph.GraphMode,org.bukkit.entity.Player,react.glang.GList) -> WGJb
    void addSystem(org.bukkit.entity.Player,react.glang.GList) -> WGJb
    void addTick(org.bukkit.entity.Player,react.glang.GList) -> dfal
    void addMemory(org.bukkit.entity.Player,react.glang.GList) -> lTgP
    void addEod(org.bukkit.entity.Player,react.glang.GList) -> KejP
    void addPhysics(org.bukkit.entity.Player,react.glang.GList) -> mOYk
    void addReact(org.bukkit.entity.Player,react.glang.GList) -> wnYS
    void addNetworking(org.bukkit.entity.Player,react.glang.GList) -> SCOM
    void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> WGJb
    void on(org.bukkit.event.player.PlayerMoveEvent) -> WGJb
    void on(react.event.ReactScrollEvent) -> WGJb
    void stopMapping(org.bukkit.entity.Player) -> SCOM
    void toggleMapping(org.bukkit.entity.Player) -> SmbW
    void toggleMappingEod(org.bukkit.entity.Player) -> ePRm
    react.glang.GMap getG() -> HSwA
    react.glang.GMap getGr() -> STWF
    react.glang.GMap access$000(react.controller.GraphController) -> WGJb
    react.glang.GMap access$100(react.controller.GraphController) -> dfal
    java.lang.Object Bt(java.lang.Object,java.lang.Object,java.lang.Object) -> YUht
react.controller.GraphController$1 -> org.cyberpwn.react.sIEM:
    react.controller.GraphController this$0 -> lpKF
    void <init>(react.controller.GraphController,java.lang.String) -> <init>
    void run() -> run
    java.lang.Object ta(java.lang.Object,java.lang.Object,java.lang.Object) -> rori
react.controller.GraphController$2 -> org.cyberpwn.react.nBFP:
    react.controller.GraphController this$0 -> lpKF
    void <init>(react.controller.GraphController) -> <init>
    void run() -> run
    java.lang.Object sF(java.lang.Object,java.lang.Object,java.lang.Object) -> wUPG
react.controller.GraphController$3 -> org.cyberpwn.react.oEGr:
    org.bukkit.event.player.PlayerJoinEvent val$e -> MmaQ
    react.controller.GraphController this$0 -> lpKF
    void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    void run() -> run
    java.lang.Object sl(java.lang.Object,java.lang.Object,java.lang.Object) -> nthS
react.controller.GraphController$FeatureController -> org.cyberpwn.react.ggch:
    java.lang.Object[] s -> BTQJ
    int O -> O
    java.math.BigInteger[] R -> uqqx
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void O(int,java.lang.Object) -> qcup
    int T(int,int) -> qcup
    int g(byte[],int) -> bWiv
    void R13703() -> hIAh
    void u() -> u
    java.lang.String S(java.lang.Object) -> WGJb
react.controller.HopperController -> org.cyberpwn.react.rNQU:
    react.glang.GSet ignore -> OYty
    int transfersPerTick -> WsOQ
    int transfersPerSecond -> aMgR
    react.gmath.Average aHST -> YFOt
    react.gmath.Average aHSS -> pHpg
    react.gmath.Average aHSMS -> GuBM
    boolean firstTickList -> eseR
    long firstTick -> MupY
    long lastTick -> xGvG
    react.glang.GSet frozen -> OkWl
    react.glang.GMap queue -> MBnJ
    react.glang.GMap freezeTimes -> DADN
    void <init>() -> <init>
    void start() -> start
    void releaseChunk(org.bukkit.Chunk) -> wnYS
    void checkChunks() -> GsWW
    void checkChunk(org.bukkit.Chunk) -> SCOM
    void queue(org.bukkit.block.Block) -> SCOM
    boolean isFrozen(org.bukkit.Chunk) -> SmbW
    void freeze(org.bukkit.Chunk) -> ePRm
    void unfreeze(org.bukkit.Chunk) -> CgEJ
    void freeze(org.bukkit.Chunk,long) -> WGJb
    void stop() -> stop
    void tick() -> tick
    void flushTickList() -> jODi
    void tickNextTickList() -> CxJT
    void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> WGJb
    react.glang.GSet getIgnore() -> GHcP
    int getTransfersPerTick() -> SCTm
    int getTransfersPerSecond() -> oLts
    react.gmath.Average getaHST() -> Yfhm
    react.gmath.Average getaHSS() -> mWpQ
    react.gmath.Average getaHSMS() -> BIrp
    boolean isFirstTickList() -> anaA
    long getFirstTick() -> CEGd
    long getLastTick() -> XdFb
    react.glang.GSet getFrozen() -> teVE
    react.glang.GMap getQueue() -> TplA
    react.glang.GMap getFreezeTimes() -> WqeI
    java.lang.Object re(java.lang.Object,java.lang.Object,java.lang.Object) -> BRfs
react.controller.HopperOvertickController -> org.cyberpwn.react.RryI:
    react.glang.GList possiblePlunge -> DtIX
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    boolean plunge(org.bukkit.block.Hopper) -> WGJb
    void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> WGJb
    java.lang.Object cy(java.lang.Object,java.lang.Object,java.lang.Object) -> xWrH
react.controller.InstantDropController -> org.cyberpwn.react.fvFg:
    react.glang.GList ignore -> KMkL
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void on(org.bukkit.event.block.BlockBreakEvent) -> WGJb
    void on(org.bukkit.event.player.PlayerDropItemEvent) -> WGJb
    void on(org.bukkit.event.entity.EntityDeathEvent) -> WGJb
    void on(org.bukkit.event.player.PlayerMoveEvent) -> WGJb
    void on(org.bukkit.event.entity.ProjectileHitEvent) -> WGJb
    void on(org.bukkit.event.entity.ItemSpawnEvent) -> WGJb
    void tick() -> tick
    java.lang.Object BP(java.lang.Object,java.lang.Object,java.lang.Object) -> QFAs
react.controller.InstantDropController$1 -> org.cyberpwn.react.vssI:
    org.bukkit.entity.Arrow val$a -> bsPi
    react.controller.InstantDropController this$0 -> XeRt
    void <init>(react.controller.InstantDropController,org.bukkit.entity.Arrow) -> <init>
    void run() -> run
    java.lang.Object nM(java.lang.Object,java.lang.Object,java.lang.Object) -> mOYk
react.controller.InstantDropController$2 -> org.cyberpwn.react.UJAo:
    org.bukkit.event.entity.ItemSpawnEvent val$e -> ejwY
    org.bukkit.entity.Player val$f -> vAsl
    react.controller.InstantDropController this$0 -> XeRt
    void <init>(react.controller.InstantDropController,org.bukkit.event.entity.ItemSpawnEvent,org.bukkit.entity.Player) -> <init>
    void run() -> run
    java.lang.Object jV(java.lang.Object,java.lang.Object,java.lang.Object) -> jpkw
react.controller.LanguageController -> org.cyberpwn.react.DQBY:
    java.io.File languageFolder -> uYDe
    int oldVersion -> AaoY
    java.io.File dlf -> IYHM
    void <init>() -> <init>
    void start() -> start
    void checkForLanguageUpdates() -> LFpn
    void downloadAll(boolean) -> KejP
    void downloadLanguage(java.lang.String) -> SmbW
    void check() -> check
    void loadLanguage(java.lang.String) -> ePRm
    java.io.File getFileForLanguage(java.lang.String) -> CgEJ
    void writeDefaults() -> avqR
    void stop() -> stop
    void tick() -> tick
    int access$002(react.controller.LanguageController,int) -> WGJb
    void access$100(react.controller.LanguageController) -> WGJb
    java.lang.Object Mz(java.lang.Object,java.lang.Object,java.lang.Object) -> ndGa
react.controller.LanguageController$1 -> org.cyberpwn.react.miXs:
    react.controller.LanguageController this$0 -> LsSH
    void <init>(react.controller.LanguageController) -> <init>
    void run() -> run
    java.lang.Object yQ(java.lang.Object,java.lang.Object,java.lang.Object) -> QyFc
react.controller.LanguageController$2 -> org.cyberpwn.react.TiAo:
    react.controller.LanguageController this$0 -> LsSH
    void <init>(react.controller.LanguageController) -> <init>
    void run() -> run
    java.lang.Object nY(java.lang.Object,java.lang.Object,java.lang.Object) -> CDha
react.controller.LanguageController$2$1 -> org.cyberpwn.react.CgPr:
    react.controller.LanguageController$2 this$1 -> VMkE
    void <init>(react.controller.LanguageController$2) -> <init>
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> WGJb
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> WGJb
    void onDownloadStarted(react.gnet.download.Download) -> WGJb
    void onDownloadFinished(react.gnet.download.Download) -> dfal
    void onDownloadFailed(react.gnet.download.Download) -> lTgP
    java.lang.Object zD(java.lang.Object,java.lang.Object,java.lang.Object) -> uVxs
react.controller.LanguageController$3 -> org.cyberpwn.react.oELO:
    react.controller.LanguageController this$0 -> LsSH
    void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    void run() -> run
    java.lang.Object vL(java.lang.Object,java.lang.Object,java.lang.Object) -> oLvw
react.controller.LanguageController$3$1 -> org.cyberpwn.react.PSch:
    react.controller.LanguageController$3 this$1 -> nurS
    void <init>(react.controller.LanguageController$3) -> <init>
    void run() -> run
    java.lang.Object pP(java.lang.Object,java.lang.Object,java.lang.Object) -> HCWk
react.controller.LanguageController$3$1$1 -> org.cyberpwn.react.OjTA:
    react.controller.LanguageController$3$1 this$2 -> kcxN
    void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    void run() -> run
    java.lang.Object Fr(java.lang.Object,java.lang.Object,java.lang.Object) -> GYfc
react.controller.LanguageController$4 -> org.cyberpwn.react.jNnH:
    java.io.File val$dld -> bbOb
    react.controller.LanguageController this$0 -> LsSH
    void <init>(react.controller.LanguageController,java.io.File) -> <init>
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> WGJb
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> WGJb
    void onDownloadStarted(react.gnet.download.Download) -> WGJb
    void onDownloadFinished(react.gnet.download.Download) -> dfal
    void onDownloadFailed(react.gnet.download.Download) -> lTgP
    java.lang.Object if(java.lang.Object,java.lang.Object,java.lang.Object) -> KwUU
react.controller.MessageController -> org.cyberpwn.react.XSKh:
    react.glang.GList notes -> banb
    void <init>() -> <init>
    void queue(react.notification.Notification) -> WGJb
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    void subscribe(org.bukkit.entity.Player,react.notification.Note) -> WGJb
    void unsubscribe(org.bukkit.entity.Player,react.notification.Note) -> dfal
    react.glang.GList getSubscriptions(org.bukkit.entity.Player) -> CgEJ
    boolean isSubscribed(org.bukkit.entity.Player,react.notification.Note) -> lTgP
    void unsubscribeAll(org.bukkit.entity.Player) -> nJMP
    void subscribeAll(org.bukkit.entity.Player) -> WXLP
    void process(react.notification.Notification) -> dfal
    react.glang.GList access$000(react.controller.MessageController) -> WGJb
    java.lang.Object ww(java.lang.Object,java.lang.Object,java.lang.Object) -> NLyR
react.controller.MessageController$1 -> org.cyberpwn.react.prbF:
    react.controller.MessageController this$0 -> XSqM
    void <init>(react.controller.MessageController) -> <init>
    void run(java.lang.String) -> nJMP
    void run(java.lang.Object) -> run
    java.lang.Object pZ(java.lang.Object,java.lang.Object,java.lang.Object) -> xFlb
react.controller.MetricsController -> org.cyberpwn.react.maGs:
    react.BStats stats -> vRuO
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    java.lang.Object xU(java.lang.Object,java.lang.Object,java.lang.Object) -> QMqg
react.controller.MetricsController$1 -> org.cyberpwn.react.anfr:
    react.controller.MetricsController this$0 -> Xdpm
    void <init>(react.controller.MetricsController) -> <init>
    java.lang.String call() -> call
    java.lang.Object call() -> call
    java.lang.Object ud(java.lang.Object,java.lang.Object,java.lang.Object) -> UtRO
react.controller.MetricsController$2 -> org.cyberpwn.react.RPyM:
    react.controller.MetricsController this$0 -> Xdpm
    void <init>(react.controller.MetricsController) -> <init>
    java.lang.String call() -> call
    java.lang.Object call() -> call
react.controller.MetricsController$3 -> org.cyberpwn.react.eXpW:
    react.controller.MetricsController this$0 -> Xdpm
    void <init>(react.controller.MetricsController) -> <init>
    java.lang.String call() -> call
    java.lang.Object call() -> call
    java.lang.Object qB(java.lang.Object,java.lang.Object,java.lang.Object) -> skFN
react.controller.MetricsController$4 -> org.cyberpwn.react.JbtQ:
    react.controller.MetricsController this$0 -> Xdpm
    void <init>(react.controller.MetricsController) -> <init>
    java.lang.String call() -> call
    java.lang.Object call() -> call
    java.lang.Object WC(java.lang.Object,java.lang.Object,java.lang.Object) -> FEaw
react.controller.MetricsController$5 -> org.cyberpwn.react.DHQd:
    react.controller.MetricsController this$0 -> Xdpm
    void <init>(react.controller.MetricsController) -> <init>
    java.lang.String call() -> call
    java.lang.Object call() -> call
    java.lang.Object Sh(java.lang.Object,java.lang.Object,java.lang.Object) -> PKPR
react.controller.MonitorController -> org.cyberpwn.react.WPHn:
    int maxCooldown -> jXce
    react.api.TitleMonitor titleMonitor -> lUxb
    react.glang.GMap posts -> TifW
    react.slate.PhantomSlate sb -> MCOY
    boolean ready -> RdAO
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void start() -> start
    react.slate.PhantomSlate constructActionLogBoard() -> kcMC
    void toggleActionLog(org.bukkit.entity.Player) -> bWiv
    void toggleMonitoring(org.bukkit.entity.Player) -> TqEp
    void stop() -> stop
    void constructMonitor() -> RPro
    float calcVolume(react.api.ReactPlayer) -> WGJb
    boolean canMonitor(org.bukkit.entity.Player) -> OYFP
    boolean canActionLog(org.bukkit.entity.Player) -> UAEN
    boolean isMonitoring(org.bukkit.entity.Player) -> VDGt
    boolean isActionLogging(org.bukkit.entity.Player) -> sHYj
    void startMonitoring(org.bukkit.entity.Player) -> ssMp
    void stopMonitoring(org.bukkit.entity.Player) -> xNwp
    void startActionLogging(org.bukkit.entity.Player) -> qcup
    void stopActionLogging(org.bukkit.entity.Player) -> PBWD
    void tick() -> tick
    void changePost(react.api.ReactPlayer) -> dfal
    void processPlayer(react.api.ReactPlayer) -> lTgP
    void handleActionLog(org.bukkit.entity.Player) -> vQbs
    void handleTriggers(react.api.ReactPlayer) -> KejP
    void handleScrolling(react.api.ReactPlayer) -> mOYk
    void handleShifting(react.api.ReactPlayer) -> wnYS
    void handlePosting(react.api.ReactPlayer) -> SCOM
    java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> WGJb
    java.lang.String prefixForSub(react.api.ReactPlayer,surge.util.C,int) -> WGJb
    void tickMonitor(react.api.ReactPlayer) -> SmbW
    react.api.TitleMonitor getTitleMonitor() -> kHyH
    void on(org.bukkit.event.player.PlayerJoinEvent) -> WGJb
    void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> WGJb
    void onTick() -> onTick
    void updateActionBoard() -> byso
    java.lang.String getTickName() -> getTickName
    react.slate.PhantomSlate access$0(react.controller.MonitorController) -> WGJb
    void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> WGJb
    void access$2(react.controller.MonitorController,boolean) -> WGJb
    boolean access$3(react.controller.MonitorController) -> dfal
    react.slate.PhantomSlate access$4(react.controller.MonitorController) -> lTgP
    java.lang.Object Vp(java.lang.Object,java.lang.Object,java.lang.Object) -> APDY
react.controller.MonitorController$1 -> org.cyberpwn.react.QxkB:
    react.controller.MonitorController this$0 -> oxuK
    void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    void run() -> run
    java.lang.Object PE(java.lang.Object,java.lang.Object,java.lang.Object) -> GbXW
react.controller.MonitorController$2 -> org.cyberpwn.react.qSal:
    react.controller.MonitorController this$0 -> oxuK
    react.api.ReactPlayer val$i -> vmGw
    void <init>(react.controller.MonitorController,react.api.ReactPlayer) -> <init>
    void run() -> run
    java.lang.Object Yb(java.lang.Object,java.lang.Object,java.lang.Object) -> FpWJ
react.controller.MonitorController$3 -> org.cyberpwn.react.cdMC:
    react.controller.MonitorController this$0 -> oxuK
    react.api.ReactPlayer val$i -> vmGw
    void <init>(react.controller.MonitorController,react.api.ReactPlayer) -> <init>
    void run() -> run
    java.lang.Object Kl(java.lang.Object,java.lang.Object,java.lang.Object) -> sHbU
react.controller.MonitorController$4 -> org.cyberpwn.react.Nfov:
    react.controller.MonitorController this$0 -> oxuK
    react.api.ReactPlayer val$i -> vmGw
    void <init>(react.controller.MonitorController,react.api.ReactPlayer) -> <init>
    void run() -> run
    java.lang.Object Gm(java.lang.Object,java.lang.Object,java.lang.Object) -> PlrO
react.controller.MonitorController$5 -> org.cyberpwn.react.aTtW:
    react.controller.MonitorController this$0 -> oxuK
    void <init>(react.controller.MonitorController) -> <init>
    void run() -> run
    java.lang.Object AK(java.lang.Object,java.lang.Object,java.lang.Object) -> oEGC
react.controller.PhysicsController -> org.cyberpwn.react.wDQn:
    react.glang.GMap samples -> qehU
    int redstonePerTick -> bsPW
    int redstonePerSecond -> SfdB
    boolean firstTickList -> eseR
    long firstTick -> MupY
    long lastTick -> xGvG
    react.gmath.Average aRSMS -> lUws
    react.gmath.Average aRST -> skoC
    react.gmath.Average aRSS -> fKwG
    void <init>() -> <init>
    void start() -> start
    void on(org.bukkit.event.block.BlockPhysicsEvent) -> WGJb
    void on(org.bukkit.event.block.BlockFromToEvent) -> WGJb
    void flushTickList() -> jODi
    void tickNextTickList() -> CxJT
    void stop() -> stop
    void tick() -> tick
    void onRedstone(org.bukkit.Chunk) -> nJMP
    void onPhysics(org.bukkit.Chunk) -> WXLP
    void onHopper(org.bukkit.Chunk) -> bWiv
    void onFluid(org.bukkit.Chunk) -> TqEp
    void on(org.bukkit.event.world.ChunkUnloadEvent) -> WGJb
    void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> WGJb
    void onTick() -> onTick
    java.lang.String getTickName() -> getTickName
    react.glang.GMap getSamples() -> MItQ
    int getRedstonePerTick() -> mGPB
    int getRedstonePerSecond() -> Jsob
    boolean isFirstTickList() -> anaA
    long getFirstTick() -> CEGd
    long getLastTick() -> XdFb
    react.gmath.Average getaRSMS() -> JALR
    react.gmath.Average getaRST() -> CEHd
    react.gmath.Average getaRSS() -> URKO
    java.lang.Object Ug(java.lang.Object,java.lang.Object,java.lang.Object) -> kAJi
react.controller.PhysicsController$1 -> org.cyberpwn.react.qeCx:
    react.controller.PhysicsController this$0 -> aUxv
    void <init>(react.controller.PhysicsController) -> <init>
    void run() -> run
    java.lang.Object ES(java.lang.Object,java.lang.Object,java.lang.Object) -> jgyq
react.controller.PlayerController -> org.cyberpwn.react.ntkr:
    react.glang.GList players -> uHFI
    react.glang.GSet save -> etKk
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    boolean has(org.bukkit.entity.Player) -> eHBt
    void requestSave(org.bukkit.entity.Player,boolean) -> WGJb
    react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> XJNQ
    react.glang.GList getPlayers() -> getPlayers
    void on(org.bukkit.event.player.PlayerQuitEvent) -> WGJb
    java.lang.Object Qj(java.lang.Object,java.lang.Object,java.lang.Object) -> YDfj
react.controller.PlayerController$1 -> org.cyberpwn.react.TOOm:
    react.glang.GList val$toSave -> hlTA
    react.controller.PlayerController this$0 -> tLrQ
    void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    void run() -> run
    java.lang.Object oD(java.lang.Object,java.lang.Object,java.lang.Object) -> xytC
react.controller.ProtocolController -> org.cyberpwn.react.Orbd:
    boolean safe -> safe
    react.protocol.ProtocolAdapter proto -> qUJx
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    double getAvgPing() -> GruU
    double ping(org.bukkit.entity.Player) -> DrYG
    long ago(org.bukkit.entity.Player) -> XdAJ
    boolean isSafe() -> isSafe
    boolean isLongs() -> VfPB
    react.glang.GMap getPings() -> kbkM
    react.glang.GMap getAgo() -> xGNF
    react.glang.GMap getTimes() -> FhCR
    java.lang.Object Vo(java.lang.Object,java.lang.Object,java.lang.Object) -> IEyH
react.controller.RAIController -> org.cyberpwn.react.QxiG:
    react.rai.IRAI rai -> oEsQ
    boolean raiEnabled -> JJjU
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    react.rai.IRAI getRai() -> uEsi
    react.rai.IRAI access$000(react.controller.RAIController) -> WGJb
    java.lang.Object aY(java.lang.Object,java.lang.Object,java.lang.Object) -> satA
react.controller.RAIController$1 -> org.cyberpwn.react.GPxS:
    react.controller.RAIController this$0 -> IGfp
    void <init>(react.controller.RAIController) -> <init>
    void run() -> run
    java.lang.Object hB(java.lang.Object,java.lang.Object,java.lang.Object) -> NLxE
react.controller.RedstoneController -> org.cyberpwn.react.gyIM:
    react.glang.GSet ignore -> OYty
    react.glang.GSet frozen -> OkWl
    react.glang.GMap queue -> MBnJ
    react.glang.GMap freezeTimes -> DADN
    int redstonePerTick -> bsPW
    int redstonePerSecond -> SfdB
    react.gmath.Average aRST -> skoC
    react.gmath.Average aRSS -> fKwG
    react.gmath.Average aRSMS -> lUws
    boolean firstTickList -> eseR
    long firstTick -> MupY
    long lastTick -> xGvG
    react.glang.GMap trackers -> jGef
    void <init>() -> <init>
    void start() -> start
    void on(org.bukkit.event.world.WorldLoadEvent) -> WGJb
    void on(org.bukkit.event.world.WorldUnloadEvent) -> WGJb
    void stop() -> stop
    void releaseChunk(org.bukkit.Chunk) -> wnYS
    void tick() -> tick
    void checkChunks() -> GsWW
    void checkChunk(org.bukkit.Chunk) -> SCOM
    void queue(org.bukkit.block.Block) -> SCOM
    boolean isFrozen(org.bukkit.Chunk) -> SmbW
    void freeze(org.bukkit.Chunk) -> ePRm
    void flushTickList() -> jODi
    void tickNextTickList() -> CxJT
    void unfreeze(org.bukkit.Chunk) -> CgEJ
    void freeze(org.bukkit.Chunk,long) -> WGJb
    void on(org.bukkit.event.world.ChunkUnloadEvent) -> WGJb
    void on(org.bukkit.event.block.BlockPhysicsEvent) -> WGJb
    react.glang.GSet getIgnore() -> GHcP
    react.glang.GSet getFrozen() -> teVE
    react.glang.GMap getQueue() -> TplA
    react.glang.GMap getFreezeTimes() -> WqeI
    int getRedstonePerTick() -> mGPB
    int getRedstonePerSecond() -> Jsob
    react.gmath.Average getaRST() -> CEHd
    react.gmath.Average getaRSS() -> URKO
    react.gmath.Average getaRSMS() -> JALR
    boolean isFirstTickList() -> anaA
    long getFirstTick() -> CEGd
    long getLastTick() -> XdFb
    java.lang.Object NB(java.lang.Object,java.lang.Object,java.lang.Object) -> dUfv
react.controller.SampleController -> org.cyberpwn.react.BuPV:
    react.glang.GMap samplers -> WPoo
    int cd -> uOLQ
    int sct -> eRHu
    void <init>() -> <init>
    boolean checkThreads() -> yRaQ
    void registerSampler(react.api.ISampler) -> WGJb
    react.api.ISampler getSampler(java.lang.String) -> WXLP
    void constructSamplers() -> xFlb
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    surge.server.SuperSampler getSuperSampler() -> BIsv
    void onTick() -> onTick
    java.lang.String getTickName() -> getTickName
    react.glang.GMap getSamplers() -> fAyS
    surge.server.SuperSampler getSs() -> AWsB
    int getCd() -> AFpm
    react.glang.GList getSamplerNames() -> YUht
    java.lang.Object RS(java.lang.Object,java.lang.Object,java.lang.Object) -> Smif
react.controller.SampleController$FeatureController -> org.cyberpwn.react.PeES:
    java.lang.Object[] n -> HoYL
    int Z -> Z
    java.math.BigInteger[] D -> XSsI
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void L(int,java.lang.Object) -> PBWD
    int E(int,int) -> ssMp
    int H(byte[],int) -> OYFP
    void l9395() -> rori
    void f() -> f
    java.lang.String X(java.lang.Object) -> qcup
react.controller.SecurityController -> org.cyberpwn.react.hQXG:
    java.lang.String ipa -> grAb
    react.glang.GList failures -> xank
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void start() -> start
    void scanForIP(java.lang.String) -> bWiv
    void checkForIP() -> wUPG
    void scan(java.lang.Runnable) -> WGJb
    void stop() -> stop
    void tick() -> tick
    java.lang.Object au(java.lang.Object,java.lang.Object,java.lang.Object) -> nRca
react.controller.SecurityController$1 -> org.cyberpwn.react.JcTD:
    react.controller.SecurityController this$0 -> tUcK
    void <init>(react.controller.SecurityController) -> <init>
    void run() -> run
    java.lang.Object MR(java.lang.Object,java.lang.Object,java.lang.Object) -> MR
react.controller.SecurityController$2 -> org.cyberpwn.react.ccjN:
    java.lang.String val$ip -> SgFX
    void <init>(java.lang.String) -> <init>
    void run() -> run
react.controller.SecurityController$3 -> org.cyberpwn.react.AaLA:
    java.lang.Thread val$t -> lonA
    void <init>(java.lang.Thread) -> <init>
    void run() -> run
    java.lang.Object Pr(java.lang.Object,java.lang.Object,java.lang.Object) -> PvCQ
react.controller.SmearTickController -> org.cyberpwn.react.EluX:
    react.glang.GMap etl -> pHuO
    react.glang.GMap ttl -> kSXf
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void on(org.bukkit.event.world.WorldLoadEvent) -> WGJb
    void on(org.bukkit.event.world.WorldUnloadEvent) -> WGJb
    void tick() -> tick
    void witholdWorld(org.bukkit.World) -> ePRm
    void releaseWorld(org.bukkit.World) -> CgEJ
    double getUniversalEntityTick() -> nthS
    double getUniversalEntityLimit() -> BRfs
    double getUniversalTileLimit() -> xWrH
    double getUniversalTileTick() -> QFAs
    double getUniversalEntityDroppedTicks() -> jpkw
    double getUniversalTileDroppedTicks() -> ndGa
    void setEntityTickLimit(org.bukkit.World,double) -> WGJb
    void setTileTickLimit(org.bukkit.World,double) -> dfal
    double getEntityTickLimit(org.bukkit.World) -> nJMP
    double getTileTickLimit(org.bukkit.World) -> WXLP
    double getLastEntityTick(org.bukkit.World) -> bWiv
    double getLastTileTick(org.bukkit.World) -> TqEp
    double getEntityDroppedTicks(org.bukkit.World) -> OYFP
    double getTileDroppedTicks(org.bukkit.World) -> UAEN
    java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> WGJb
    java.lang.Object ns(java.lang.Object,java.lang.Object,java.lang.Object) -> lDMV
react.controller.SpikeController -> org.cyberpwn.react.XRiQ:
    react.glang.GMap spikes -> spikes
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void onTick() -> onTick
    java.lang.String getTickName() -> getTickName
    void tick() -> tick
    react.glang.GMap getSpikes() -> getSpikes
    void whoFuckingDidThis(react.glang.Callback) -> WGJb
    react.glang.GMap access$000(react.controller.SpikeController) -> WGJb
    java.lang.Object XK(java.lang.Object,java.lang.Object,java.lang.Object) -> qKKx
react.controller.SpikeController$1 -> org.cyberpwn.react.ejPn:
    react.controller.SpikeController this$0 -> HDcM
    void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    void run() -> run
react.controller.SpikeController$1$1 -> org.cyberpwn.react.QWGK:
    react.controller.SpikeController$1 this$1 -> Jlks
    void <init>(react.controller.SpikeController$1) -> <init>
    void run() -> run
    java.lang.Object EA(java.lang.Object,java.lang.Object,java.lang.Object) -> YEFe
react.controller.SpikeController$2 -> org.cyberpwn.react.ogLy:
    react.glang.GMap val$vv -> tfdJ
    react.controller.SpikeController this$0 -> HDcM
    void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    void run() -> run
    java.lang.Object Zd(java.lang.Object,java.lang.Object,java.lang.Object) -> JcPM
react.controller.SpikeController$3 -> org.cyberpwn.react.xWsx:
    java.lang.Thread val$t -> lonA
    react.glang.Callback val$callback -> pYwI
    react.controller.SpikeController this$0 -> HDcM
    void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    void run() -> run
    java.lang.Object Rg(java.lang.Object,java.lang.Object,java.lang.Object) -> JboL
react.controller.TickTimeController -> org.cyberpwn.react.sPuY:
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    java.lang.Object As(java.lang.Object,java.lang.Object,java.lang.Object) -> CMYw
react.controller.WorldController -> org.cyberpwn.react.eYOu:
    boolean aboutToWipe -> brpy
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void tick() -> tick
    void on(org.bukkit.event.world.WorldUnloadEvent) -> WGJb
    void wipe() -> QyFc
    java.lang.Object Pg(java.lang.Object,java.lang.Object,java.lang.Object) -> kcND
react.controller.mv -> org.cyberpwn.react.APJD:
    java.lang.Object[] A -> BCRy
    java.lang.Class[] Y -> NxeL
    int[] H -> slQe
    short[] v -> jHDn
    int I -> I
    int l -> l
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class Z(int,int) -> PBWD
    java.lang.Class s(int) -> XdAJ
    java.lang.reflect.Method l(int) -> OXeW
    java.lang.Object t(int,java.lang.Object[]) -> ePRm
    java.lang.Object g(java.lang.Object,int,java.lang.Object[]) -> wnYS
    java.lang.Object C(int,java.lang.Object[]) -> CgEJ
    java.lang.reflect.Field y(int) -> Vmyy
    java.lang.Object r(java.lang.Object,int) -> mOYk
    void w(java.lang.Object,int,java.lang.Object) -> wnYS
    java.lang.Object C(int) -> ESVk
    void l(int,java.lang.Object) -> vQbs
react.event.ReactEvent -> org.cyberpwn.react.MRkB:
    org.bukkit.event.HandlerList handlers -> VMkj
    void <init>() -> <init>
    org.bukkit.event.HandlerList getHandlers() -> getHandlers
    org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> org.cyberpwn.react.gEby:
    org.bukkit.entity.Player player -> player
    void <init>(org.bukkit.entity.Player) -> <init>
    org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> org.cyberpwn.react.gyIC:
    react.event.ScrollDirection direction -> eQfj
    boolean cancellled -> ECkL
    int amount -> MuvI
    void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    react.event.ScrollDirection getDirection() -> CDha
    boolean isCancelled() -> isCancelled
    void setCancelled(boolean) -> setCancelled
    boolean isCancellled() -> uVxs
    int getAmount() -> getAmount
react.event.ScrollDirection -> org.cyberpwn.react.dxPN:
    react.event.ScrollDirection DOWN -> DOWN
    react.event.ScrollDirection UP -> UP
    react.event.ScrollDirection[] $VALUES -> $VALUES
    react.event.ScrollDirection[] values() -> values
    react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object Nf(java.lang.Object,java.lang.Object,java.lang.Object) -> Nf
react.event.al -> org.cyberpwn.react.lLeY:
    java.lang.Object[] P -> hlUa
    int V -> V
    java.math.BigInteger[] VZ -> JKLl
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void M(int,java.lang.Object) -> eHBt
    int Y(int,int) -> vQbs
    int l(byte[],int) -> UAEN
    void e25688() -> oLvw
    void b() -> b
    java.lang.String f(java.lang.Object) -> sHYj
react.event.h -> org.cyberpwn.react.RjmU:
    java.lang.Object[] G -> ySrs
    int Q -> Q
    java.math.BigInteger[] m -> mkCu
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void F(int,java.lang.Object) -> UAEN
    int W(int,int) -> eHBt
    int u(byte[],int) -> VDGt
    void s14365() -> HCWk
    void B() -> B
    java.lang.String w(java.lang.Object) -> PBWD
react.event.uz -> org.cyberpwn.react.maKO:
    java.lang.Object[] z -> LPit
    java.lang.Class[] f -> MStu
    int[] d -> FGPr
    short[] E -> gFmx
    int w -> w
    int T -> T
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class u(int,int) -> XJNQ
    java.lang.Class K(int) -> WGJb
    java.lang.reflect.Method w(int) -> DPSk
    java.lang.Object l(int,java.lang.Object[]) -> nJMP
    java.lang.Object q(java.lang.Object,int,java.lang.Object[]) -> SCOM
    java.lang.Object x(int,java.lang.Object[]) -> WXLP
    java.lang.reflect.Field Q(int) -> tupB
    java.lang.Object l(java.lang.Object,int) -> wnYS
    void W(java.lang.Object,int,java.lang.Object) -> SCOM
    java.lang.Object w(int) -> KejP
    void X(int,java.lang.Object) -> XJNQ
react.fix.Fix -> org.cyberpwn.react.pHPw:
    java.lang.String id -> id
    java.lang.String[] aliases -> aliases
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String usage -> pIFu
    void <init>() -> <init>
    void setId(java.lang.String) -> setId
    void setAliases(java.lang.String[]) -> WGJb
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    void setUsage(java.lang.String) -> TqEp
    java.lang.String getId() -> getId
    java.lang.String[] getAliases() -> eqwO
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    java.lang.String getUsage() -> getUsage
react.fix.FixEntityAI -> org.cyberpwn.react.jqTJ:
    void <init>() -> <init>
    void run(org.bukkit.command.CommandSender,java.lang.String[]) -> dfal
    java.lang.Object iR(java.lang.Object,java.lang.Object,java.lang.Object) -> EucO
react.fix.FixInvisibleChunk -> org.cyberpwn.react.CUpP:
    boolean running -> running
    void <init>() -> <init>
    void run(org.bukkit.command.CommandSender,java.lang.String[]) -> dfal
    java.lang.Object Yy(java.lang.Object,java.lang.Object,java.lang.Object) -> xrCo
react.fix.FixInvisibleChunk$1 -> org.cyberpwn.react.Dadv:
    org.bukkit.Chunk val$ch -> pbjk
    org.bukkit.entity.Player val$p -> NOHs
    org.bukkit.command.CommandSender val$sender -> JdWF
    react.fix.FixInvisibleChunk this$0 -> AkFR
    void <init>(react.fix.FixInvisibleChunk,java.lang.String,int,org.bukkit.Chunk,org.bukkit.entity.Player,org.bukkit.command.CommandSender) -> <init>
    void run() -> run
    java.lang.Object Hg(java.lang.Object,java.lang.Object,java.lang.Object) -> Hg
react.fix.FixInvisibleChunk$Fix -> org.cyberpwn.react.VTwR:
    java.lang.Object[] AP -> qoAB
    int A -> A
    java.math.BigInteger[] F -> ffOP
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void N(int,java.lang.Object) -> dfal
    int u(int,int) -> DrYG
    int V(byte[],int) -> sHYj
    void k26135() -> GYfc
    void E() -> E
    java.lang.String y(java.lang.Object) -> vQbs
react.fix.FixInvisibleChunk$FixEntityAI -> org.cyberpwn.react.KCvN:
    java.lang.Object[] J -> sRWQ
    int a -> a
    java.math.BigInteger[] s -> uHGY
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void j(int,java.lang.Object) -> DrYG
    int M(int,int) -> XdAJ
    int W(byte[],int) -> ssMp
    void Z14947() -> KwUU
    void c() -> c
    java.lang.String i(java.lang.Object) -> OYFP
react.fix.ev -> org.cyberpwn.react.yckm:
    java.lang.Object[] p -> wyBC
    java.lang.Class[] j -> YWYW
    int[] E -> QFoj
    short[] P -> rqae
    int R -> R
    int X -> X
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class t(int,int) -> OXeW
    java.lang.Class n(int) -> HvRk
    java.lang.reflect.Method k(int) -> fcvC
    java.lang.Object Q(int,java.lang.Object[]) -> bWiv
    java.lang.Object s(java.lang.Object,int,java.lang.Object[]) -> SmbW
    java.lang.Object QN(int,java.lang.Object[]) -> TqEp
    java.lang.reflect.Field W(int) -> LXLE
    java.lang.Object e(java.lang.Object,int) -> SCOM
    void j(java.lang.Object,int,java.lang.Object) -> SmbW
    java.lang.Object G(int) -> vRCd
    void d(int,java.lang.Object) -> XdAJ
react.gbench.Profiler -> org.cyberpwn.react.ETHM:
    long nanos -> nanos
    long startNano -> startNano
    long millis -> millis
    long startMillis -> startMillis
    double time -> time
    boolean profiling -> profiling
    void <init>() -> <init>
    void begin() -> begin
    void end() -> end
    void reset() -> reset
    java.lang.String getTime(int) -> getTime
    double getTicks() -> getTicks
    double getSeconds() -> getSeconds
    double getMinutes() -> getMinutes
    double getHours() -> getHours
    double getMilliseconds() -> getMilliseconds
    long getNanoseconds() -> getNanoseconds
    long getNanos() -> getNanos
    long getStartNano() -> getStartNano
    long getMillis() -> getMillis
    long getStartMillis() -> getStartMillis
    double getTime() -> getTime
    boolean isProfiling() -> isProfiling
    java.lang.Object Qe(java.lang.Object,java.lang.Object,java.lang.Object) -> Qe
react.gbench.b -> org.cyberpwn.react.xFui:
    java.lang.Object[] V -> CgEJ
    java.lang.Class[] j -> YWYW
    int[] G -> fTlu
    short[] q -> Tiks
    int r -> r
    int c -> c
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class t(int,int) -> OXeW
    java.lang.Class n(int) -> HvRk
    java.lang.reflect.Method X(int) -> FpMO
    java.lang.Object O(int,java.lang.Object[]) -> OYFP
    java.lang.Object Z(java.lang.Object,int,java.lang.Object[]) -> ePRm
    java.lang.Object k(int,java.lang.Object[]) -> UAEN
    java.lang.reflect.Field g(int) -> qtuv
    java.lang.Object k(java.lang.Object,int) -> SmbW
    void Q(java.lang.Object,int,java.lang.Object) -> ePRm
    java.lang.Object l(int) -> EBVK
    void N(int,java.lang.Object) -> dfal
react.gbench.n -> org.cyberpwn.react.TNqH:
    java.lang.Object[] A -> BCRy
    int U -> U
    java.math.BigInteger[] g -> TGfw
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void Y(int,java.lang.Object) -> OXeW
    int u(int,int) -> DrYG
    int j(byte[],int) -> xNwp
    void f2249() -> NLyR
    void T() -> OXeW
    java.lang.String W(java.lang.Object) -> eHBt
react.gbench.v -> org.cyberpwn.react.PJtl:
    java.lang.Object[] f -> xbRC
    int Q -> Q
    java.math.BigInteger[] X -> axaX
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void m(int,java.lang.Object) -> WXLP
    int N(int,int) -> Vmyy
    int E(byte[],int) -> WXLP
    void O2471() -> QMqg
    void l() -> l
    java.lang.String O(java.lang.Object) -> ssMp
react.gconcurrent.A -> org.cyberpwn.react.ktUv:
    react.gconcurrent.ParallelPoolManager mgr -> uYGu
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Object wa(java.lang.Object,java.lang.Object,java.lang.Object) -> KLcE
react.gconcurrent.A$1 -> org.cyberpwn.react.vQqb:
    react.gconcurrent.A this$0 -> etLe
    void <init>(react.gconcurrent.A) -> <init>
    void run() -> run
    java.lang.Object vF(java.lang.Object,java.lang.Object,java.lang.Object) -> UcRL
react.gconcurrent.Execution -> org.cyberpwn.react.WXYa:
    int id -> id
    int idx -> idx
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object dX(java.lang.Object,java.lang.Object,java.lang.Object) -> PvFD
react.gconcurrent.ParallelPoolManager -> org.cyberpwn.react.OPbE:
    react.gconcurrent.QueueMode mode -> mode
    react.glang.GList threads -> threads
    int next -> next
    int threadCount -> threadCount
    java.util.Queue squeue -> squeue
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> info
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode
    void syncQueue(react.gconcurrent.Execution) -> syncQueue
    long getNanoGate() -> getNanoGate
    void tickSyncQueue() -> tickSyncQueue
    void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    void <init>(int,react.gconcurrent.QueueMode) -> <init>
    long lock() -> lock
    int getTotalQueueSize() -> getTotalQueueSize
    void start() -> start
    void shutdown() -> shutdown
    void <init>(int) -> <init>
    void queue(react.gconcurrent.Execution) -> queue
    int getSize() -> getSize
    int getQueueSize() -> getQueueSize
    react.gconcurrent.ParallelThread[] getThreads() -> getThreads
    void updateThreadInformation() -> updateThreadInformation
    react.gconcurrent.ParallelThread nextThread() -> nextThread
    void createThreads(int) -> createThreads
    react.gconcurrent.QueueMode getMode() -> getMode
    int getNext() -> getNext
    int getThreadCount() -> getThreadCount
    java.util.Queue getSqueue() -> getSqueue
    java.lang.String getKey() -> getKey
    react.gconcurrent.ThreadInformation getAverageInfo() -> getAverageInfo
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode
    java.lang.Object ca(java.lang.Object,java.lang.Object,java.lang.Object) -> ca
react.gconcurrent.ParallelThread -> org.cyberpwn.react.ESdy:
    java.util.Queue queue -> AQSw
    react.gconcurrent.ThreadInformation info -> info
    void <init>(java.lang.String,int) -> <init>
    void run() -> run
    void conditionallySleep(double) -> ePRm
    void execute(react.gconcurrent.Execution) -> WGJb
    void execute() -> execute
    void queue(react.gconcurrent.Execution) -> queue
    java.util.Queue getQueue() -> UtRO
    react.gconcurrent.ThreadInformation getInfo() -> skFN
    java.lang.Object qr(java.lang.Object,java.lang.Object,java.lang.Object) -> lDPh
react.gconcurrent.QueueMode -> org.cyberpwn.react.TOPX:
    react.gconcurrent.QueueMode ROUND_ROBIN -> AHbo
    react.gconcurrent.QueueMode SMALLEST -> RRcN
    react.gconcurrent.QueueMode[] ENUM$VALUES -> NVvx
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    react.gconcurrent.QueueMode[] values() -> values
    react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
    java.lang.Object ZV(java.lang.Object,java.lang.Object,java.lang.Object) -> oMYv
react.gconcurrent.S -> org.cyberpwn.react.Knhk:
    react.gconcurrent.ParallelPoolManager mgr -> uYGu
    void <init>() -> <init>
    java.lang.Object JK(java.lang.Object,java.lang.Object,java.lang.Object) -> wnck
react.gconcurrent.S$1 -> org.cyberpwn.react.oDlM:
    react.gconcurrent.S this$0 -> QrCk
    void <init>(react.gconcurrent.S) -> <init>
    void run() -> run
    java.lang.Object dw(java.lang.Object,java.lang.Object,java.lang.Object) -> aUSC
react.gconcurrent.TICK -> org.cyberpwn.react.ghIa:
    long tick -> tick
    long atick -> dWVd
    void <clinit>() -> <clinit>
    void <init>() -> <init>
react.gconcurrent.TICK$Execution -> org.cyberpwn.react.UlFP:
    java.lang.Object[] xp -> pRIK
    int x -> x
    java.math.BigInteger[] a -> fCji
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void G(int,java.lang.Object) -> Vmyy
    int u(int,int) -> DrYG
    int y(byte[],int) -> qcup
    void i9952() -> FEaw
    void w() -> w
    java.lang.String A(java.lang.Object) -> XJNQ
react.gconcurrent.ThreadInformation -> org.cyberpwn.react.rowv:
    double ticksPerSecond -> ticksPerSecond
    int queuedSize -> queuedSize
    boolean processing -> processing
    double utilization -> utilization
    react.gmath.Average ticksPerSecondAverage -> ticksPerSecondAverage
    long tick -> tick
    int id -> id
    void <init>(int) -> <init>
    double getTicksPerSecond() -> getTicksPerSecond
    void setTicksPerSecond(double) -> setTicksPerSecond
    int getQueuedSize() -> getQueuedSize
    void setQueuedSize(int) -> setQueuedSize
    boolean isProcessing() -> isProcessing
    void setProcessing(boolean) -> setProcessing
    double getUtilization() -> getUtilization
    void setUtilization(double) -> setUtilization
    double getTicksPerSecondAverage() -> getTicksPerSecondAverage
    long getTick() -> getTick
    void setTick(long) -> setTick
    long getTickLag() -> getTickLag
    int getId() -> getId
    java.lang.Object wx(java.lang.Object,java.lang.Object,java.lang.Object) -> wx
react.gconcurrent.ThreadInformation$Execution -> org.cyberpwn.react.cclN:
    java.lang.Object[] f -> xbRC
    int x -> x
    java.math.BigInteger[] H -> dOFv
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void h(int,java.lang.Object) -> ePRm
    int J(int,int) -> ESVk
    int x(byte[],int) -> ePRm
    void U22340() -> PKPR
    void V() -> APDY
    java.lang.String v(java.lang.Object) -> DrYG
react.gconcurrent.b -> org.cyberpwn.react.ofoS:
    java.lang.Object[] m -> pRIT
    java.lang.Class[] G -> BTVi
    int[] R -> pskR
    short[] l -> ptLR
    int g -> g
    int c -> c
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class K(int,int) -> DPSk
    java.lang.Class j(int) -> EdXk
    java.lang.reflect.Method w(int) -> DPSk
    java.lang.Object u(int,java.lang.Object[]) -> VDGt
    java.lang.Object a(java.lang.Object,int,java.lang.Object[]) -> CgEJ
    java.lang.Object C(int,java.lang.Object[]) -> CgEJ
    java.lang.reflect.Field v(int) -> gpKE
    java.lang.Object c(java.lang.Object,int) -> ePRm
    void n(java.lang.Object,int,java.lang.Object) -> CgEJ
    java.lang.Object s(int) -> LiMa
    void a(int,java.lang.Object) -> a
react.gformat.F -> org.cyberpwn.react.Fxkg:
    java.text.NumberFormat NF -> uGhl
    java.text.DecimalFormat DF -> sIsQ
    java.lang.String[] NAMES -> scfJ
    java.math.BigInteger THOUSAND -> Arwc
    java.util.NavigableMap MAP -> OtQO
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.String capitalize(java.lang.String) -> capitalize
    java.lang.String capitalizeWords(java.lang.String) -> OYFP
    java.lang.String wrap(java.lang.String,int) -> wrap
    java.lang.String wrapWords(java.lang.String,int) -> WGJb
    java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> WGJb
    java.lang.String time(double,int) -> WGJb
    java.lang.String timeLong(long,int) -> WGJb
    java.lang.String b(int) -> b
    java.lang.String b(long) -> lTgP
    java.lang.String b(double) -> CgEJ
    java.lang.String b(java.math.BigInteger) -> WGJb
    void instantiate() -> GbXW
    java.lang.String fileSize(long) -> KejP
    java.lang.String memSize(long) -> mOYk
    java.lang.String memSize(long,int) -> dfal
    java.lang.String stamp(long) -> wnYS
    java.lang.String ofSize(long,int) -> lTgP
    java.lang.String ofSize(long,int,int) -> WGJb
    java.lang.String trim(java.lang.String,int) -> dfal
    java.lang.String cname(java.lang.String) -> UAEN
    java.lang.String repeat(java.lang.String,int) -> repeat
    java.lang.String mem(long) -> SCOM
    java.lang.String memx(long) -> SmbW
    java.lang.String f(long) -> ePRm
    java.lang.String f(int) -> wnWa
    java.lang.String f(double,int) -> dfal
    java.lang.String fd(double,int) -> lTgP
    java.lang.String f(float,int) -> WGJb
    java.lang.String f(double) -> nJMP
    java.lang.String f(float) -> WGJb
    java.lang.String pc(double,int) -> KejP
    java.lang.String pc(float,int) -> dfal
    java.lang.String pc(double) -> WXLP
    java.lang.String pc(float) -> dfal
    java.lang.String pc(int,int,int) -> WGJb
    java.lang.String pc(int,int) -> tupB
    java.lang.String pc(long,long,int) -> WGJb
    java.lang.String pc(long,long) -> lTgP
    java.lang.String msSeconds(long) -> CgEJ
    java.lang.String msSeconds(long,int) -> KejP
    java.lang.String nsMs(long) -> nJMP
    java.lang.String nsMs(long,int) -> mOYk
    java.lang.String nsMsd(long,int) -> wnYS
    java.lang.Object Ro(java.lang.Object,java.lang.Object,java.lang.Object) -> uOLQ
react.gformat.g -> org.cyberpwn.react.pjRs:
    java.lang.Object[] X -> OkUb
    int R -> R
    java.math.BigInteger[] C -> fUPH
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void G(int,java.lang.Object) -> Vmyy
    int X(int,int) -> HvRk
    int X(byte[],int) -> PBWD
    void j23098() -> FpWJ
    void L() -> L
    java.lang.String o(java.lang.Object) -> XdAJ
react.gformat.h -> org.cyberpwn.react.HwBe:
    java.lang.Object[] Q -> skuy
    int A -> A
    java.math.BigInteger[] l -> CgbU
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void k(int,java.lang.Object) -> ESVk
    int L(int,int) -> fcvC
    int Z(byte[],int) -> vQbs
    void n2894() -> sHbU
    void x() -> x
    java.lang.String y(java.lang.Object) -> vQbs
react.gformat.q -> org.cyberpwn.react.qddU:
    java.lang.Object[] m -> pRIT
    java.lang.Class[] a -> rXSI
    int[] f -> f
    short[] h -> DROL
    int M -> M
    int F -> F
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class G(int,int) -> LXLE
    java.lang.Class r(int) -> lTeb
    java.lang.reflect.Method j(int) -> QpMH
    java.lang.Object M(int,java.lang.Object[]) -> sHYj
    java.lang.Object K(java.lang.Object,int,java.lang.Object[]) -> nJMP
    java.lang.Object Q(int,java.lang.Object[]) -> bWiv
    java.lang.reflect.Field s(int) -> sQMd
    java.lang.Object M(java.lang.Object,int) -> CgEJ
    void N(java.lang.Object,int,java.lang.Object) -> nJMP
    java.lang.Object I(int) -> RkAo
    void b(int,java.lang.Object) -> sHYj
react.glang.AccessCallback -> org.cyberpwn.react.sIHV:
    java.lang.Object get() -> get
react.glang.Adapter -> org.cyberpwn.react.wfVM:
    java.lang.Object adapt(java.lang.Object) -> OXeW
    java.lang.Object onAdapt(java.lang.Object) -> Vmyy
react.glang.Callback -> org.cyberpwn.react.OGpo:
    java.lang.Object t -> brvH
    void <init>() -> <init>
    void run(java.lang.Object) -> run
    void run() -> run
    java.lang.Object get() -> get
react.glang.FinalDouble -> org.cyberpwn.react.YUoM:
    double i -> FPDf
    void <init>(double) -> <init>
    double get() -> get
    void set(double) -> set
    void add(double) -> add
    void sub(double) -> bWiv
react.glang.FinalFloat -> org.cyberpwn.react.IqTb:
    float i -> i
    void <init>(float) -> <init>
    float get() -> get
    void set(float) -> set
    void add(float) -> add
    void sub(float) -> lTgP
react.glang.FinalInteger -> org.cyberpwn.react.UARX:
    int i -> i
    void <init>(int) -> <init>
    int get() -> get
    void set(int) -> set
    void add(int) -> add
    void sub(int) -> EAwa
react.glang.FinalLong -> org.cyberpwn.react.UcVF:
    long i -> nKfF
    void <init>(long) -> <init>
    long get() -> get
    void set(long) -> set
    void add(long) -> add
    void sub(long) -> WXLP
react.glang.FinalLong$GTriset -> org.cyberpwn.react.SmpG:
    java.lang.Object[] g -> RQlT
    int W -> W
    java.math.BigInteger[] t -> RlYG
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void g(int,java.lang.Object) -> mOYk
    int h(int,int) -> vRCd
    int v(byte[],int) -> eHBt
    void g467() -> PlrO
    void e() -> e
    java.lang.String i(java.lang.Object) -> OYFP
react.glang.FinalString -> org.cyberpwn.react.JIbx:
    java.lang.String string -> string
    void <init>(java.lang.String) -> <init>
    java.lang.String get() -> get
    void set(java.lang.String) -> set
react.glang.GAdapter -> org.cyberpwn.react.vbrR:
    void <init>() -> <init>
    java.lang.Object adapt(java.lang.Object) -> OXeW
    java.lang.Object onAdapt(java.lang.Object) -> Vmyy
react.glang.GBiset -> org.cyberpwn.react.xqiU:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> gGPp
    java.lang.Object b -> COJn
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getA() -> oEGC
    void setA(java.lang.Object) -> ESVk
    java.lang.Object getB() -> kAJi
    void setB(java.lang.Object) -> DPSk
react.glang.GList -> org.cyberpwn.react.ankK:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    react.glang.GList grepExplicit(int,int) -> grepExplicit
    react.glang.GList grepDistance(int,int) -> grepDistance
    java.lang.Object getAt(int) -> getAt
    java.lang.Object getAt(java.lang.Integer) -> getAt
    void <init>(java.util.Set) -> <init>
    void <init>(java.util.Collection) -> <init>
    void <init>(java.util.Iterator) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    void <init>(java.util.List) -> <init>
    java.lang.Object mostCommon() -> mostCommon
    react.glang.GList shuffleCopy() -> shuffleCopy
    void shuffle() -> shuffle
    react.glang.GList split() -> split
    boolean hasIndex(int) -> hasIndex
    java.lang.Object pickRandom() -> pickRandom
    react.glang.GList stringList() -> stringList
    void forEach(react.glang.Callback) -> forEach
    int last() -> last
    int getIndexOrLast(int) -> getIndexOrLast
    react.glang.GList cropFrom(int) -> cropFrom
    react.glang.GList split(int) -> split
    react.glang.GList cropTo(int) -> cropTo
    react.glang.GList crop(int,int) -> crop
    react.glang.GList removeDuplicates() -> removeDuplicates
    void removeAll(java.lang.Object) -> removeAll
    boolean hasDuplicates() -> hasDuplicates
    void sort() -> sort
    react.glang.GList sortCopy() -> sortCopy
    void push(java.lang.Object,int) -> push
    void add(java.lang.Object[]) -> add
    react.glang.GList qadd(java.lang.Object) -> qadd
    void add(java.util.List) -> add
    java.lang.String toString(java.lang.String) -> toString
    react.glang.GList reverse() -> reverse
    java.lang.String toString() -> toString
    react.glang.GList copy() -> copy
    react.glang.GList qdel(java.lang.Object) -> qdel
    java.lang.Object pop() -> pop
    void removeLast() -> removeLast
    java.lang.Object popLast() -> popLast
    java.lang.Object popRandom() -> popRandom
    java.lang.Object FZ(java.lang.Object,java.lang.Object,java.lang.Object) -> FZ
react.glang.GListAdapter -> org.cyberpwn.react.vRTo:
    void <init>() -> <init>
    java.util.List adapt(java.util.List) -> WGJb
    java.lang.Object onAdapt(java.lang.Object) -> Vmyy
react.glang.GMap -> org.cyberpwn.react.HLQP:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.util.Map) -> <init>
    react.glang.GMap copy() -> copy
    react.glang.GMap qput(java.lang.Object,java.lang.Object) -> qput
    react.glang.GMap flip() -> flip
    java.lang.String toString() -> toString
    react.glang.GMap append(react.glang.GMap) -> append
    react.glang.GList k() -> k
    react.glang.GSet kset() -> kset
    react.glang.GList v() -> v
    react.glang.GSet vset() -> vset
    void putNVD(java.lang.Object,java.lang.Object) -> putNVD
    boolean contains(java.lang.Object) -> contains
    react.glang.GList get(react.glang.GList) -> get
    react.glang.GMap removeDuplicateValues() -> removeDuplicateValues
    void put(react.glang.GList,react.glang.GList) -> put
    react.glang.GList sortK() -> sortK
    react.glang.GList sortV() -> sortV
    java.lang.Object mE(java.lang.Object,java.lang.Object,java.lang.Object) -> mE
react.glang.GQuadraset -> org.cyberpwn.react.twBq:
    java.lang.Object a -> gGPp
    java.lang.Object b -> COJn
    java.lang.Object c -> IGjy
    java.lang.Object d -> EndI
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getA() -> oEGC
    void setA(java.lang.Object) -> ESVk
    java.lang.Object getB() -> kAJi
    void setB(java.lang.Object) -> DPSk
    java.lang.Object getC() -> jgyq
    void setC(java.lang.Object) -> tupB
    java.lang.Object getD() -> YDfj
    void setD(java.lang.Object) -> HvRk
react.glang.GSet -> org.cyberpwn.react.vtWl:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.util.Collection) -> <init>
    void <init>(int,float) -> <init>
    void <init>(int) -> <init>
react.glang.GTriset -> org.cyberpwn.react.VoMA:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> gGPp
    java.lang.Object b -> COJn
    java.lang.Object c -> IGjy
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getA() -> oEGC
    void setA(java.lang.Object) -> ESVk
    java.lang.Object getB() -> kAJi
    void setB(java.lang.Object) -> DPSk
    java.lang.Object getC() -> jgyq
    void setC(java.lang.Object) -> tupB
react.glang.GTriset$GQuadraset -> org.cyberpwn.react.ccnv:
    java.lang.Object[] o -> VMUI
    int d -> d
    java.math.BigInteger[] x -> EMBJ
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void y(int,java.lang.Object) -> KejP
    int q(int,int) -> WXLP
    int R(byte[],int) -> XJNQ
    void f8329() -> xytC
    void K() -> K
    java.lang.String z(java.lang.Object) -> fcvC
react.glang.zc -> org.cyberpwn.react.Hmrq:
    java.lang.Object[] M -> Kogy
    java.lang.Class[] J -> jOxt
    int[] w -> cuyd
    short[] n -> lgHq
    int Z -> Z
    int D -> D
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class v(int,int) -> FpMO
    java.lang.Class a(int) -> a
    java.lang.reflect.Method i(int) -> NECO
    java.lang.Object J(int,java.lang.Object[]) -> ssMp
    java.lang.Object l(java.lang.Object,int,java.lang.Object[]) -> WXLP
    java.lang.Object L(int,java.lang.Object[]) -> xNwp
    java.lang.reflect.Field v(int) -> gpKE
    java.lang.Object U(java.lang.Object,int) -> nJMP
    void q(java.lang.Object,int,java.lang.Object) -> WXLP
    java.lang.Object L(int) -> Vvlm
    void v(int,java.lang.Object) -> SmbW
react.gmath.Average -> org.cyberpwn.react.UsyJ:
    double[] values -> values
    double average -> average
    boolean dirty -> dirty
    void <init>(int) -> <init>
    void put(double) -> put
    double getAverage() -> getAverage
    void calculateAverage() -> calculateAverage
    java.lang.Object Zi(java.lang.Object,java.lang.Object,java.lang.Object) -> Zi
react.gmath.DoubleArrayUtils -> org.cyberpwn.react.gNYk:
    void <init>() -> <init>
    void shiftRight(double[],double) -> WGJb
    void wrapRight(double[]) -> WGJb
    void fill(double[],double) -> fill
react.gmath.DoubleArrayUtils$DoubleArrayUtils -> org.cyberpwn.react.Ukgu:
    java.lang.Object[] D -> hthA
    int V -> V
    java.math.BigInteger[] R -> uqqx
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void C(int,java.lang.Object) -> DPSk
    int e(int,int) -> qtuv
    int J(byte[],int) -> DrYG
    void m28701() -> IEyH
    void S() -> S
    java.lang.String V(java.lang.Object) -> LXLE
react.gmath.M -> org.cyberpwn.react.yAjx:
    int precision -> MSxD
    int modulus -> gGRK
    float[] sin -> QFrP
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    double clip(double,double,double) -> WGJb
    boolean r(java.lang.Double) -> dfal
    double tps(long,int) -> SCOM
    double ticksFromNS(long) -> bWiv
    java.lang.String toRoman(int) -> eqwO
    java.lang.String repeat(java.lang.String,int) -> repeat
    int rand(int,int) -> EBVK
    int fromRoman(java.lang.String) -> VDGt
    long ns() -> satA
    long ms() -> NLxE
    float sin(float) -> sin
    float cos(float) -> cos
    int max(int[]) -> max
    int min(int[]) -> min
    boolean within(int,int,int) -> dfal
    float sinLookup(int) -> qlil
    java.lang.Object Lq(java.lang.Object,java.lang.Object,java.lang.Object) -> MIxJ
react.gmath.M$M -> org.cyberpwn.react.VoML:
    java.lang.Object[] v -> uXig
    int e -> e
    java.math.BigInteger[] Z -> hReB
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void I(int,java.lang.Object) -> tupB
    int j(int,int) -> dfal
    int K(byte[],int) -> XdAJ
    void J11356() -> dUfv
    void r() -> r
    java.lang.String E(java.lang.Object) -> vRCd
react.gmath.kd -> org.cyberpwn.react.wfYO:
    java.lang.Object[] E -> PMBB
    java.lang.Class[] D -> FiVl
    int[] r -> r
    short[] t -> RuKG
    int P -> P
    int d -> d
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class F(int,int) -> EdXk
    java.lang.Class k(int) -> mOYk
    java.lang.reflect.Method R(int) -> vRGF
    java.lang.Object z(int,java.lang.Object[]) -> SCOM
    java.lang.Object O(java.lang.Object,int,java.lang.Object[]) -> bWiv
    java.lang.Object w(int,java.lang.Object[]) -> qcup
    java.lang.reflect.Field k(int) -> xiNT
    java.lang.Object Y(java.lang.Object,int) -> WXLP
    void U(java.lang.Object,int,java.lang.Object) -> bWiv
    java.lang.Object s(int) -> LiMa
    void t(int,java.lang.Object) -> HvRk
react.gnet.client.Client -> org.cyberpwn.react.BRoL:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> xbTK
    java.net.Socket socket -> socket
    void <init>(java.lang.String,int) -> <init>
    void connect() -> connect
    void disconnect() -> disconnect
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> WGJb
    react.gnet.packet.PacketHandler getHandler() -> Smif
    java.lang.Object wl(java.lang.Object,java.lang.Object,java.lang.Object) -> cAfK
react.gnet.client.IClient -> org.cyberpwn.react.BAlx:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> WGJb
    react.gnet.packet.PacketHandler getHandler() -> Smif
react.gnet.client.a -> org.cyberpwn.react.qdgW:
    java.lang.Object[] i -> HEJG
    int X -> X
    java.math.BigInteger[] o -> FNbr
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void X(int,java.lang.Object) -> XJNQ
    int q(int,int) -> WXLP
    int C(byte[],int) -> CgEJ
    void w8962() -> nRca
    void r() -> r
    java.lang.String B(java.lang.Object) -> FpMO
react.gnet.client.g -> org.cyberpwn.react.Eukv:
    java.lang.Object[] i -> HEJG
    java.lang.Class[] m -> FhvR
    int[] q -> txJo
    short[] c -> TOyd
    int T -> T
    int z -> z
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class M(int,int) -> gpKE
    java.lang.Class L(int) -> MlSj
    java.lang.reflect.Method r(int) -> IWUw
    java.lang.Object e(int,java.lang.Object[]) -> PBWD
    java.lang.Object d(java.lang.Object,int,java.lang.Object[]) -> TqEp
    java.lang.Object X(int,java.lang.Object[]) -> vQbs
    java.lang.reflect.Field D(int) -> kYvI
    java.lang.Object h(java.lang.Object,int) -> bWiv
    void S(java.lang.Object,int,java.lang.Object) -> TqEp
    java.lang.Object c(int) -> xhmI
    void D(int,java.lang.Object) -> fcvC
react.gnet.client.j -> org.cyberpwn.react.fvJg:
    java.lang.Object[] S -> gyUP
    int F -> F
    java.math.BigInteger[] g -> TGfw
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void S(int,java.lang.Object) -> LXLE
    int S(int,int) -> lTgP
    int b(byte[],int) -> b
    void V27773() -> PvCQ
    void g() -> g
    java.lang.String f(java.lang.Object) -> sHYj
react.gnet.download.Download -> org.cyberpwn.react.xqlY:
    react.gnet.download.DownloadState state -> OsoR
    react.gnet.download.DownloadType type -> QhtA
    react.gnet.download.DownloadStatus status -> ghre
    react.gnet.download.DownloadMonitor monitor -> SUhF
    java.net.URL url -> url
    java.io.File file -> file
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    void start() -> start
    react.gnet.download.DownloadState getState() -> lDMV
    react.gnet.download.DownloadType getType() -> qKKx
    react.gnet.download.DownloadStatus getStatus() -> JcPM
    react.gnet.download.DownloadMonitor getMonitor() -> JboL
    java.net.URL getUrl() -> getUrl
    java.io.File getFile() -> getFile
    int getBufferSize() -> getBufferSize
    java.lang.Object aG(java.lang.Object,java.lang.Object,java.lang.Object) -> ksrF
react.gnet.download.Download$Download -> org.cyberpwn.react.opCl:
    java.lang.Object[] G -> ySrs
    int z -> z
    java.math.BigInteger[] s -> uHGY
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void T(int,java.lang.Object) -> vRCd
    int w(int,int) -> LiMa
    int J(byte[],int) -> DrYG
    void m26522() -> CMYw
    void z() -> z
    java.lang.String Z(java.lang.Object) -> qtuv
react.gnet.download.Download$DownloadStatus -> org.cyberpwn.react.htAD:
    java.lang.Object[] c -> Hewq
    int j -> j
    java.math.BigInteger[] D -> XSsI
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void g(int,java.lang.Object) -> mOYk
    int z(int,int) -> TqEp
    int J(byte[],int) -> DrYG
    void S4904() -> kcND
    void T() -> OXeW
    java.lang.String D(java.lang.Object) -> EBVK
react.gnet.download.DownloadMonitor -> org.cyberpwn.react.lCuk:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> WGJb
    void onDownloadStarted(react.gnet.download.Download) -> WGJb
    void onDownloadFinished(react.gnet.download.Download) -> dfal
    void onDownloadFailed(react.gnet.download.Download) -> lTgP
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> WGJb
react.gnet.download.DownloadState -> org.cyberpwn.react.rFGi:
    react.gnet.download.DownloadState IDLE -> Npkv
    react.gnet.download.DownloadState DOWNLOADING -> nCSx
    react.gnet.download.DownloadState FAILED -> IGis
    react.gnet.download.DownloadState FINISHED -> PwSY
    react.gnet.download.DownloadState[] ENUM$VALUES -> DANC
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    react.gnet.download.DownloadState[] values() -> values
    react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    java.lang.Object xP(java.lang.Object,java.lang.Object,java.lang.Object) -> JQpU
react.gnet.download.DownloadStatus -> org.cyberpwn.react.YwtE:
    long bytesDownloaded -> GBDu
    long bytesTotal -> yStB
    long bytesPerSecond -> rqcI
    long timeElapsed -> dFXS
    void <init>() -> <init>
    double getPercentCompleted() -> EucO
    long getBytesDownloaded() -> xrCo
    void setBytesDownloaded(long) -> TqEp
    long getBytesTotal() -> KLcE
    void setBytesTotal(long) -> OYFP
    long getBytesPerSecond() -> UcRL
    void setBytesPerSecond(long) -> UAEN
    long getTimeElapsed() -> PvFD
    void setTimeElapsed(long) -> VDGt
react.gnet.download.DownloadType -> org.cyberpwn.react.eadM:
    react.gnet.download.DownloadType DETERMINATE -> riSB
    react.gnet.download.DownloadType INDETERMINATE -> Rtgx
    react.gnet.download.DownloadType[] ENUM$VALUES -> XLGR
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    react.gnet.download.DownloadType[] values() -> values
    react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    java.lang.Object fM(java.lang.Object,java.lang.Object,java.lang.Object) -> rEah
react.gnet.download.s -> org.cyberpwn.react.ksvf:
    java.lang.Object[] w -> jaOE
    java.lang.Class[] mT -> RuHu
    int[] C -> LQTg
    short[] m -> LsXI
    int J -> J
    int U -> U
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class m(int,int) -> wnWa
    java.lang.Class X(int) -> hQNI
    java.lang.reflect.Method r(int) -> IWUw
    java.lang.Object J(int,java.lang.Object[]) -> ssMp
    java.lang.Object N(java.lang.Object,int,java.lang.Object[]) -> OYFP
    java.lang.Object I(int,java.lang.Object[]) -> eHBt
    java.lang.reflect.Field o(int) -> MSBL
    java.lang.Object y(java.lang.Object,int) -> TqEp
    void w(java.lang.Object,int,java.lang.Object) -> wnYS
    java.lang.Object d(int) -> d
    void D(int,java.lang.Object) -> fcvC
react.gnet.packet.IPacket -> org.cyberpwn.react.vsut:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> getBinding
    java.lang.String getPacketName() -> getPacketName
react.gnet.packet.IncompatablePacketException -> org.cyberpwn.react.oENu:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> org.cyberpwn.react.hIJi:
    react.gnet.packet.PacketBinding SERVER_BOUND -> HDhK
    react.gnet.packet.PacketBinding CLIENT_BOUND -> sBFN
    react.gnet.packet.PacketBinding[] ENUM$VALUES -> jioC
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    react.gnet.packet.PacketBinding[] values() -> values
    react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    java.lang.Object bI(java.lang.Object,java.lang.Object,java.lang.Object) -> lUSG
react.gnet.packet.PacketException -> org.cyberpwn.react.YUqM:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> org.cyberpwn.react.OivM:
    react.glang.GList accept -> Ulrh
    react.gnet.packet.PacketBinding side -> xHcp
    react.gnet.streams.OSS out -> scgo
    react.gnet.streams.ISS in -> FXWS
    void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> WGJb
    void accept(react.gnet.packet.IPacket) -> dfal
    react.gnet.packet.IPacket findPacket(int) -> NffG
    react.gnet.packet.IPacket read() -> lDPh
    void write(react.gnet.packet.IPacket) -> lTgP
    java.lang.Object XD(java.lang.Object,java.lang.Object,java.lang.Object) -> ryGG
react.gnet.packet.UnhandledPacketException -> org.cyberpwn.react.Iyfl:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
react.gnet.packet.e -> org.cyberpwn.react.dUow:
    java.lang.Object[] x -> HerU
    java.lang.Class[] m -> FhvR
    int[] E -> QFoj
    short[] Z -> WaxF
    int v -> jHLQ
    int p -> nJMP
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class Y(int,int) -> lTeb
    java.lang.Class f(int) -> GQQD
    java.lang.reflect.Method f(int) -> MtdV
    java.lang.Object u(int,java.lang.Object[]) -> VDGt
    java.lang.Object s(java.lang.Object,int,java.lang.Object[]) -> SmbW
    java.lang.Object Z(int,java.lang.Object[]) -> XJNQ
    java.lang.reflect.Field h(int) -> TqEp
    java.lang.Object B(java.lang.Object,int) -> OYFP
    void R(java.lang.Object,int,java.lang.Object) -> OYFP
    java.lang.Object S(int) -> QNKT
    void H(int,java.lang.Object) -> ssMp
react.gnet.packet.ki -> org.cyberpwn.react.ksvS:
    java.lang.Object[] R -> gWtF
    int P -> P
    java.math.BigInteger[] p -> PBrL
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void x(int,java.lang.Object) -> FpMO
    int l(int,int) -> SmbW
    int S(byte[],int) -> OXeW
    void D9933() -> oMYv
    void g() -> g
    java.lang.String J(java.lang.Object) -> EdXk
react.gnet.packet.o -> org.cyberpwn.react.FhNF:
    java.lang.Object[] n -> HoYL
    int w -> w
    java.math.BigInteger[] m -> mkCu
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void j(int,java.lang.Object) -> DrYG
    int e(int,int) -> qtuv
    int y(byte[],int) -> qcup
    void E18570() -> wnck
    void h() -> h
    java.lang.String O(java.lang.Object) -> ssMp
react.gnet.server.IServer -> org.cyberpwn.react.OYUi:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> Smif
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> KejP
react.gnet.server.Server -> org.cyberpwn.react.opBi:
    int port -> port
    java.net.ServerSocket socket -> jYNF
    react.gnet.packet.PacketHandler handler -> xbTK
    void <init>(int) -> <init>
    react.gnet.packet.PacketHandler getHandler() -> Smif
    void run() -> run
    void pstart() -> aUSC
    void pstop() -> uOLQ
    int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> KejP
    java.lang.Object XL(java.lang.Object,java.lang.Object,java.lang.Object) -> XL
react.gnet.server.g -> org.cyberpwn.react.Edif:
    java.lang.Object[] j -> lgGG
    java.lang.Class[] r -> iCkq
    int[] x -> DkVP
    short[] I -> GSIv
    int O -> O
    int y -> y
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class g(int,int) -> QpMH
    java.lang.Class B(int) -> RPmS
    java.lang.reflect.Method s(int) -> CMUG
    java.lang.Object m(int,java.lang.Object[]) -> DrYG
    java.lang.Object n(java.lang.Object,int,java.lang.Object[]) -> UAEN
    java.lang.Object O(int,java.lang.Object[]) -> OYFP
    java.lang.reflect.Field T(int) -> tuqb
    java.lang.Object F(java.lang.Object,int) -> UAEN
    void Z(java.lang.Object,int,java.lang.Object) -> UAEN
    java.lang.Object V(int) -> vACh
    void l(int,java.lang.Object) -> vQbs
react.gnet.server.gy -> org.cyberpwn.react.fBdY:
    java.lang.Object[] C -> whDa
    int K -> K
    java.math.BigInteger[] G -> EfVN
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void W(int,java.lang.Object) -> TqEp
    int b(int,int) -> b
    int Z(byte[],int) -> vQbs
    void f17912() -> MIxJ
    void o() -> o
    java.lang.String N(java.lang.Object) -> gpKE
react.gnet.server.oh -> org.cyberpwn.react.SwDX:
    java.lang.Object[] w -> jaOE
    int D -> D
    java.math.BigInteger[] c -> KhHE
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void X(int,java.lang.Object) -> XJNQ
    int H(int,int) -> sQMd
    int F(byte[],int) -> Vmyy
    void c3837() -> cAfK
    void G() -> G
    java.lang.String p(java.lang.Object) -> LiMa
react.gnet.streams.ISS -> org.cyberpwn.react.xOkk:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> gWtM
    boolean built -> ujOG
    byte[] readBuffer -> XCYC
    void <init>(java.io.InputStream) -> <init>
    void <init>(byte[]) -> <init>
    react.gnet.streams.ISS buffer(int) -> CgFI
    react.glang.GList readStringList() -> ksrF
    react.glang.GList readDoubleList() -> JQpU
    react.glang.GList readLongList() -> rEah
    react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> WGJb
    react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> WGJb
    react.gnet.streams.ISS gzip() -> lUSG
    void build() -> build
    int read() -> read
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    short readShort() -> readShort
    char readChar() -> readChar
    int readInt() -> readInt
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readString() -> readString
    void read(react.gnet.streams.writable.Streamable) -> dfal
    void close() -> close
    java.lang.Object Sg(java.lang.Object,java.lang.Object,java.lang.Object) -> wUNL
react.gnet.streams.OSS -> org.cyberpwn.react.BtuA:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> huKL
    react.gnet.streams.StreamBuilder bu -> gWtM
    boolean built -> ujOG
    byte[] writeBuffer -> ghuD
    void <init>(java.io.OutputStream) -> <init>
    void <init>() -> <init>
    react.gnet.streams.OSS buffer(int) -> TxvW
    react.gnet.streams.OSS gzip(int) -> JHvG
    react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> dfal
    void build() -> build
    void writeBoolean(boolean) -> writeBoolean
    void writeByte(int) -> writeByte
    void writeShort(int) -> writeShort
    void writeChar(int) -> writeChar
    void writeInt(int) -> writeInt
    void writeStringList(react.glang.GList) -> wnYS
    void writeDoubleList(react.glang.GList) -> SCOM
    void writeLongList(react.glang.GList) -> SmbW
    void writeStreamableList(react.glang.GList) -> ePRm
    void writeLong(long) -> writeLong
    void writeFloat(float) -> writeFloat
    void writeDouble(double) -> writeDouble
    void writeString(java.lang.String) -> writeString
    void db() -> db
    void write(int) -> write
    void write(react.gnet.streams.writable.Streamable) -> lTgP
    byte[] getBytes() -> getBytes
    void close() -> close
    void flush() -> flush
    java.lang.Object VF(java.lang.Object,java.lang.Object,java.lang.Object) -> KfVO
react.gnet.streams.StreamBuilder -> org.cyberpwn.react.EBiQ:
    react.glang.GList constructors -> QXUT
    void <init>() -> <init>
    java.io.InputStream constructInput(java.io.InputStream) -> WGJb
    java.io.OutputStream constructOutput(java.io.OutputStream) -> WGJb
    void bind(react.gnet.streams.StreamConstructor) -> WGJb
    void bindGZIP(int) -> SeSJ
    void bindGZIP() -> ryGG
    void bindCipher(javax.crypto.Cipher) -> lTgP
    void bindBuffer(int) -> ivTF
    void bindBuffer() -> KfVO
    java.lang.Object dI(java.lang.Object,java.lang.Object,java.lang.Object) -> VDSD
react.gnet.streams.StreamConstructor -> org.cyberpwn.react.FFLq:
    java.io.InputStream constructInput(java.io.InputStream) -> WGJb
    java.io.OutputStream constructOutput(java.io.OutputStream) -> WGJb
react.gnet.streams.constructors.BufferedStreamConstructor -> org.cyberpwn.react.pHUN:
    int bufferSize -> bufferSize
    void <init>(int) -> <init>
    void <init>() -> <init>
    java.io.BufferedInputStream constructInput(java.io.InputStream) -> dfal
    java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> dfal
    java.io.InputStream constructInput(java.io.InputStream) -> WGJb
    java.io.OutputStream constructOutput(java.io.OutputStream) -> WGJb
react.gnet.streams.constructors.BufferedStreamConstructor$BufferedStreamConstructor -> org.cyberpwn.react.FElV:
    java.lang.Object[] f -> xbRC
    int R -> R
    java.math.BigInteger[] A -> apUO
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void U(int,java.lang.Object) -> qtuv
    int T(int,int) -> qcup
    int d(byte[],int) -> ESVk
    void K6794() -> VDSD
    void u() -> u
    java.lang.String L(java.lang.Object) -> wnWa
react.gnet.streams.constructors.BufferedStreamConstructor$GZipStreamConstructor -> org.cyberpwn.react.APNs:
    java.lang.Object[] Q -> skuy
    int l -> l
    java.math.BigInteger[] lm -> GIvY
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void e(int,java.lang.Object) -> EBVK
    int I(int,int) -> RkAo
    int p(byte[],int) -> SmbW
    void h20445() -> esAj
    void q() -> q
    java.lang.String Y(java.lang.Object) -> wnYS
react.gnet.streams.constructors.CipherStreamConstructor -> org.cyberpwn.react.Gjqx:
    javax.crypto.Cipher cipher -> vlol
    void <init>(javax.crypto.Cipher) -> <init>
    javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> lTgP
    javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> lTgP
    java.io.InputStream constructInput(java.io.InputStream) -> WGJb
    java.io.OutputStream constructOutput(java.io.OutputStream) -> WGJb
react.gnet.streams.constructors.GZipStreamConstructor -> org.cyberpwn.react.iDAa:
    int compressionLevel -> tLvn
    void <init>(int) -> <init>
    void <init>() -> <init>
    react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> KejP
    react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> KejP
    java.io.InputStream constructInput(java.io.InputStream) -> WGJb
    java.io.OutputStream constructOutput(java.io.OutputStream) -> WGJb
react.gnet.streams.constructors.n -> org.cyberpwn.react.NgWN:
    java.lang.Object[] u -> XuYm
    java.lang.Class[] v -> xHcD
    int[] k -> lVbM
    short[] Q -> BKiv
    int s -> s
    int E -> E
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class U(int,int) -> EAwa
    java.lang.Class I(int) -> GQOV
    java.lang.reflect.Method Z(int) -> avks
    java.lang.Object J(int,java.lang.Object[]) -> ssMp
    java.lang.Object E(java.lang.Object,int,java.lang.Object[]) -> dfal
    java.lang.Object u(int,java.lang.Object[]) -> VDGt
    java.lang.reflect.Field B(int) -> PBVy
    java.lang.Object T(java.lang.Object,int) -> VDGt
    void j(java.lang.Object,int,java.lang.Object) -> SmbW
    java.lang.Object z(int) -> LXMs
    void D(int,java.lang.Object) -> fcvC
react.gnet.streams.eh -> org.cyberpwn.react.oUqv:
    java.lang.Object[] D -> hthA
    java.lang.Class[] V -> foCs
    int[] O -> pALS
    short[] f -> foCv
    int W -> W
    int y -> y
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class K(int,int) -> DPSk
    java.lang.Class a(int) -> a
    java.lang.reflect.Method m(int) -> aLYB
    java.lang.Object r(int,java.lang.Object[]) -> XdAJ
    java.lang.Object g(java.lang.Object,int,java.lang.Object[]) -> wnYS
    java.lang.Object Z(int,java.lang.Object[]) -> XJNQ
    java.lang.reflect.Field O(int) -> WiQc
    java.lang.Object X(java.lang.Object,int) -> KejP
    void V(java.lang.Object,int,java.lang.Object) -> VDGt
    java.lang.Object l(int) -> EBVK
    void E(int,java.lang.Object) -> EdXk
react.gnet.streams.jj -> org.cyberpwn.react.lMJX:
    java.lang.Object[] c -> Hewq
    int i -> i
    java.math.BigInteger[] F -> ffOP
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void A(int,java.lang.Object) -> gpKE
    int J(int,int) -> ESVk
    int s(byte[],int) -> DPSk
    void R23259() -> cRhJ
    void F() -> F
    java.lang.String g(java.lang.Object) -> lTeb
react.gnet.streams.jp -> org.cyberpwn.react.vIdy:
    java.lang.Object[] Y -> Lavv
    int V -> V
    java.math.BigInteger[] f -> lWAy
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void n(int,java.lang.Object) -> CgEJ
    int l(int,int) -> SmbW
    int o(byte[],int) -> tupB
    void k19438() -> Eucs
    void z() -> z
    java.lang.String J(java.lang.Object) -> EdXk
react.gnet.streams.overlays.CGZIPInputStream -> org.cyberpwn.react.lMIt:
    void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> org.cyberpwn.react.dxWS:
    void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.overlays.bt -> org.cyberpwn.react.RYoN:
    java.lang.Object[] S -> gyUP
    int C -> C
    java.math.BigInteger[] v -> JdEi
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void P(int,java.lang.Object) -> lTgP
    int R(int,int) -> NECO
    int C(byte[],int) -> CgEJ
    void u31080() -> wDNt
    void F() -> F
    java.lang.String g(java.lang.Object) -> lTeb
react.gnet.streams.overlays.l -> org.cyberpwn.react.prfy:
    java.lang.Object[] e -> LQVb
    int P -> P
    java.math.BigInteger[] v -> JdEi
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void f(int,java.lang.Object) -> OYFP
    int A(int,int) -> Vvlm
    int x(byte[],int) -> ePRm
    void Q4638() -> sPsi
    void B() -> B
    java.lang.String b(java.lang.Object) -> KejP
react.gnet.streams.writable.Streamable -> org.cyberpwn.react.IqXS:
    void toBytes(react.gnet.streams.OSS) -> WGJb
    void fromBytes(react.gnet.streams.ISS) -> WGJb
react.graph.ColossalView -> org.cyberpwn.react.SUCG:
    react.papyrus.BufferedFrame view -> view
    react.glang.GMap buffers -> buffers
    react.glang.GMap graphs -> graphs
    double level -> level
    double targetLevel -> targetLevel
    int maxX -> maxX
    int maxY -> maxY
    void <init>() -> <init>
    void clear() -> clear
    void triggerGraphsInView() -> triggerGraphsInView
    void render() -> render
    void scroll(int) -> scroll
    void recompile() -> recompile
    void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> addGraph
    react.papyrus.BufferedFrame getView() -> getView
    react.glang.GMap getBuffers() -> getBuffers
    react.glang.GMap getGraphs() -> getGraphs
    double getLevel() -> getLevel
    double getTargetLevel() -> getTargetLevel
    int getMaxX() -> getMaxX
    int getMaxY() -> getMaxY
    java.lang.Object zG(java.lang.Object,java.lang.Object,java.lang.Object) -> zG
react.graph.ColossalView$Builder -> org.cyberpwn.react.tKoL:
    react.glang.GList graphs -> VouX
    void <init>() -> <init>
    void add(react.graph.IGraph,react.graph.GraphSize) -> WGJb
    react.graph.ColossalView compute() -> AaJB
    java.lang.Object Jg(java.lang.Object,java.lang.Object,java.lang.Object) -> esAj
react.graph.CubicleIterator -> org.cyberpwn.react.HedK:
    int[][] mapping -> BKij
    int xCubes -> HVLR
    int yCubes -> ymgt
    void <init>() -> <init>
    react.graph.Point positionFor(int) -> dUcs
    void insert(react.graph.GraphSize,int) -> WGJb
    void print() -> print
    java.lang.Object IN(java.lang.Object,java.lang.Object,java.lang.Object) -> cRhJ
react.graph.Graph2D -> org.cyberpwn.react.yRnT:
    void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> WGJb
react.graph.GraphCPUArc -> org.cyberpwn.react.xrNe:
    byte fontColor -> Votl
    byte backgroundColor -> mrwA
    double pct -> xPre
    react.gmath.Average aax -> AQWh
    react.gmath.Average aay -> jXnp
    react.gmath.Average aaz -> VyJQ
    long msx -> bHfo
    void <init>(byte) -> <init>
    void sample() -> sample
    void onRender(react.papyrus.BufferedFrame) -> WGJb
    byte getFontColor() -> AiYg
    void setFontColor(byte) -> WGJb
    byte getBackgroundColor() -> fvCl
    void setBackgroundColor(byte) -> dfal
    java.lang.Object rs(java.lang.Object,java.lang.Object,java.lang.Object) -> Eucs
react.graph.GraphLagMap -> org.cyberpwn.react.sjns:
    int grid -> ETuI
    org.bukkit.entity.Player viewer -> EfWY
    org.bukkit.util.Vector lastVector -> fnfQ
    void <init>(org.bukkit.entity.Player,int) -> <init>
    void zoomIn() -> sIDj
    void zoomOut() -> sIEM
    void onRender(react.papyrus.BufferedFrame) -> WGJb
    java.lang.Object Bl(java.lang.Object,java.lang.Object,java.lang.Object) -> wDNt
react.graph.GraphLagMap$1 -> org.cyberpwn.react.VLiV:
    int[] $SwitchMap$react$api$ChunkIssue -> jPES
    void <clinit>() -> <clinit>
    java.lang.Object vn(java.lang.Object,java.lang.Object,java.lang.Object) -> sPsi
react.graph.GraphMemoryArc -> org.cyberpwn.react.gFIn:
    byte fontColor -> Votl
    byte backgroundColor -> mrwA
    double pct -> xPre
    react.gmath.Average aax -> AQWh
    long msx -> bHfo
    long of -> JJqx
    void <init>(byte) -> <init>
    void sample() -> sample
    void onRender(react.papyrus.BufferedFrame) -> WGJb
    byte getFontColor() -> AiYg
    void setFontColor(byte) -> WGJb
    byte getBackgroundColor() -> fvCl
    void setBackgroundColor(byte) -> dfal
    java.lang.Object Fn(java.lang.Object,java.lang.Object,java.lang.Object) -> AaJB
react.graph.GraphMode -> org.cyberpwn.react.rEiO:
    react.graph.GraphMode NORMAL -> cBxd
    react.graph.GraphMode ITEMFRAME -> LjkO
    react.graph.GraphMode EOD -> kvEn
    react.graph.GraphMode[] $VALUES -> Trbr
    react.graph.GraphMode[] values() -> values
    react.graph.GraphMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object qp(java.lang.Object,java.lang.Object,java.lang.Object) -> AiYg
react.graph.GraphSampleLine -> org.cyberpwn.react.CgWB:
    double lx -> KoyD
    double ly -> KFEx
    react.api.ISampler sampler -> Ultc
    react.graph.IFormatter formatter -> cByY
    byte graphColor -> fDSP
    byte backgroundColor -> mrwA
    byte borderColor -> xYgH
    byte textColor -> nSyX
    int ticksLeftTitle -> esrw
    int ticksOutTitle -> CiBx
    double nextPoint -> hRgn
    void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    void sample() -> sample
    void onRender(react.papyrus.BufferedFrame) -> WGJb
    int getHeightForText(react.papyrus.BufferedFrame) -> dfal
    int getHue(int,int,int) -> lTgP
    void scaleFor(react.glang.GList) -> CgEJ
    react.graph.IFormatter getFormatter() -> getFormatter
    void setFormatter(react.graph.IFormatter) -> WGJb
    byte getGraphColor() -> nBFP
    void setGraphColor(byte) -> lTgP
    byte getBackgroundColor() -> fvCl
    void setBackgroundColor(byte) -> dfal
    byte getBorderColor() -> oEGr
    void setBorderColor(byte) -> KejP
    byte getTextColor() -> ggch
    void setTextColor(byte) -> mOYk
    react.api.ISampler getSampler() -> rNQU
    java.lang.Object EW(java.lang.Object,java.lang.Object,java.lang.Object) -> fvCl
react.graph.GraphSize -> org.cyberpwn.react.VCxc:
    react.graph.GraphSize WIDE -> WIDE
    react.graph.GraphSize FULL -> FULL
    react.graph.GraphSize SQUARE -> SQUARE
    react.graph.GraphSize[] $VALUES -> $VALUES
    react.graph.GraphSize[] values() -> values
    react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    react.graph.Point toPoint() -> toPoint
    void <clinit>() -> <clinit>
    java.lang.Object xo(java.lang.Object,java.lang.Object,java.lang.Object) -> xo
react.graph.GraphSize$1 -> org.cyberpwn.react.JcYw:
    int[] $SwitchMap$react$graph$GraphSize -> Iray
    void <clinit>() -> <clinit>
    java.lang.Object Vn(java.lang.Object,java.lang.Object,java.lang.Object) -> sIDj
react.graph.GraphText -> org.cyberpwn.react.FFMC:
    java.lang.String text -> text
    byte fontColor -> Votl
    byte backgroundColor -> mrwA
    boolean wrote -> IYQB
    void <init>(java.lang.String,byte) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> WGJb
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    byte getFontColor() -> AiYg
    void setFontColor(byte) -> WGJb
    byte getBackgroundColor() -> fvCl
    void setBackgroundColor(byte) -> dfal
    java.lang.Object nr(java.lang.Object,java.lang.Object,java.lang.Object) -> sIEM
react.graph.GraphingInstance -> org.cyberpwn.react.ryNI:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> VouX
    react.graph.ColossalView view -> hIvj
    react.papyrus.Papyrus papyrus -> mryN
    react.papyrus.IRenderer renderer -> hdJh
    boolean mapping -> mapping
    react.glang.GList msgs -> fCpX
    surge.sched.Task waiter -> PCqs
    surge.sched.Task waiter2 -> dppB
    int shift -> Juek
    int iv -> GSKQ
    boolean notif -> gXVI
    boolean doScrolling -> iEJR
    void <init>(org.bukkit.entity.Player) -> <init>
    boolean isDoScrolling() -> RryI
    void setDoScrolling(boolean) -> mOYk
    void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> WGJb
    void on(org.bukkit.event.player.PlayerQuitEvent) -> WGJb
    void send(java.lang.String) -> sHYj
    void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> WGJb
    void on(react.event.ReactScrollEvent) -> WGJb
    void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> WGJb
    void destroy() -> destroy
    void toggle() -> fvFg
    void setGraphs(react.glang.GList) -> nJMP
    void enable() -> enable
    org.bukkit.inventory.ItemStack getItem() -> getItem
    void disable() -> disable
    void disableNoSave() -> vssI
    org.bukkit.entity.Player getPlayer() -> getPlayer
    react.glang.GList getGraphs() -> UJAo
    react.graph.ColossalView getView() -> DQBY
    react.papyrus.Papyrus getPapyrus() -> miXs
    void setPlayer(org.bukkit.entity.Player) -> setPlayer
    void setItem(org.bukkit.inventory.ItemStack) -> setItem
    void setView(react.graph.ColossalView) -> WGJb
    void setPapyrus(react.papyrus.Papyrus) -> WGJb
    void setRenderer(react.papyrus.IRenderer) -> WGJb
    void setMapping(boolean) -> setMapping
    void setMsgs(react.glang.GList) -> WXLP
    void setWaiter(surge.sched.Task) -> WGJb
    void setWaiter2(surge.sched.Task) -> dfal
    void setShift(int) -> SeUk
    void setNotif(boolean) -> wnYS
    react.papyrus.IRenderer getRenderer() -> TiAo
    boolean isMapping() -> isMapping
    react.glang.GList getMsgs() -> CgPr
    surge.sched.Task getWaiter() -> oELO
    surge.sched.Task getWaiter2() -> PSch
    int getShift() -> getShift
    boolean isNotif() -> OjTA
    void compile() -> jNnH
    void enableSly() -> XSKh
    void disableSly() -> prbF
    boolean access$000(react.graph.GraphingInstance) -> WGJb
    react.glang.GList access$100(react.graph.GraphingInstance) -> dfal
    boolean access$200(react.graph.GraphingInstance) -> lTgP
    boolean access$202(react.graph.GraphingInstance,boolean) -> WGJb
    int access$300(react.graph.GraphingInstance) -> KejP
    int access$310(react.graph.GraphingInstance) -> mOYk
    int access$302(react.graph.GraphingInstance,int) -> WGJb
    react.graph.ColossalView access$400(react.graph.GraphingInstance) -> wnYS
    java.lang.Object CO(java.lang.Object,java.lang.Object,java.lang.Object) -> nBFP
react.graph.GraphingInstance$1 -> org.cyberpwn.react.AjCA:
    org.bukkit.entity.Player val$player -> FiYn
    react.graph.GraphingInstance this$0 -> esqy
    void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    void run() -> run
    java.lang.Object bU(java.lang.Object,java.lang.Object,java.lang.Object) -> oEGr
react.graph.GraphingInstance$2 -> org.cyberpwn.react.jGCO:
    react.graph.GraphingInstance this$0 -> esqy
    void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    void run() -> run
    java.lang.Object yH(java.lang.Object,java.lang.Object,java.lang.Object) -> ggch
react.graph.GraphingInstance$3 -> org.cyberpwn.react.EvMx:
    react.graph.GraphingInstance this$0 -> esqy
    void <init>(react.graph.GraphingInstance) -> <init>
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> WGJb
    java.lang.Object tN(java.lang.Object,java.lang.Object,java.lang.Object) -> rNQU
react.graph.IFormatter -> org.cyberpwn.react.SUBy:
    java.lang.String from(double) -> TqEp
react.graph.IGraph -> org.cyberpwn.react.owxD:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> getPlotBoard
    long getTimeViewport() -> getTimeViewport
    void render(react.papyrus.BufferedFrame) -> render
    double getMax() -> getMax
    void setMax(double) -> setMax
react.graph.NormalGraph -> org.cyberpwn.react.bPOn:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> etRw
    long timeViewport -> OQpl
    double max -> max
    void <init>(java.lang.String,long) -> <init>
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> getPlotBoard
    long getTimeViewport() -> getTimeViewport
    void render(react.papyrus.BufferedFrame) -> render
    double getMax() -> getMax
    void setMax(double) -> setMax
    void onRender(react.papyrus.BufferedFrame) -> WGJb
react.graph.NormalGraph$GraphText -> org.cyberpwn.react.htEK:
    java.lang.Object[] x -> HerU
    int l -> l
    java.math.BigInteger[] d -> gNvh
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void F(int,java.lang.Object) -> UAEN
    int W(int,int) -> eHBt
    int I(byte[],int) -> HvRk
    void y12687() -> maGs
    void J() -> J
    java.lang.String S(java.lang.Object) -> WGJb
react.graph.NormalGraph$PlotBoard -> org.cyberpwn.react.VMMb:
    java.lang.Object[] d -> qUQx
    int t -> t
    java.math.BigInteger[] m -> mkCu
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void i(int,java.lang.Object) -> LiMa
    int r(int,int) -> eqwO
    int C(byte[],int) -> CgEJ
    void r7239() -> anfr
    void n() -> n
    java.lang.String i(java.lang.Object) -> OYFP
react.graph.PlotBoard -> org.cyberpwn.react.hsco:
    react.glang.GMap plots -> eRRt
    int maxRecordings -> XLNC
    void <init>() -> <init>
    void clean() -> clean
    long getInaccurateTimeSpan() -> RPyM
    long getAccurateTimeSpan() -> eXpW
    long getMedian(long,long) -> KejP
    long getMinimumAccuracyRange() -> JbtQ
    double getMaxValue() -> DHQd
    double getMinValue() -> WPHn
    react.glang.GList sort(react.glang.GMap) -> WGJb
    long earilestRecording() -> QxkB
    long latestRecording() -> qSal
    void reduceBefore(long) -> sHYj
    void reduceBetween(long,long) -> mOYk
    boolean before(long,long) -> wnYS
    boolean after(long,long) -> SCOM
    boolean within(long,long,long) -> WGJb
    react.glang.GMap getBetween(long,long) -> SmbW
    void plot(long,double) -> WGJb
    boolean hasAt(long) -> ssMp
    double getAt(long) -> xNwp
    int getSize() -> getSize
    java.lang.Object mT(java.lang.Object,java.lang.Object,java.lang.Object) -> RryI
react.graph.PlotBoard$Graph2D -> org.cyberpwn.react.FOAA:
    java.lang.Object[] G -> ySrs
    int w -> w
    java.math.BigInteger[] T -> DQtJ
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void i(int,java.lang.Object) -> LiMa
    int z(int,int) -> TqEp
    int P(byte[],int) -> fcvC
    void G30625() -> cdMC
    void y() -> y
    java.lang.String m(java.lang.Object) -> QpMH
react.graph.Point -> org.cyberpwn.react.dxYJ:
    int x -> x
    int y -> y
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    java.lang.String toString() -> toString
    java.lang.Object Xd(java.lang.Object,java.lang.Object,java.lang.Object) -> Xd
react.graph.PointedGraph -> org.cyberpwn.react.xOms:
    int iid -> JeHM
    react.graph.IGraph graph -> Sfpa
    react.graph.GraphSize size -> tELl
    int id -> id
    void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    react.graph.IGraph getGraph() -> Nfov
    void setGraph(react.graph.IGraph) -> WGJb
    react.graph.GraphSize getSize() -> aTtW
    void setSize(react.graph.GraphSize) -> WGJb
    int getId() -> getId
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
    java.lang.Object oa(java.lang.Object,java.lang.Object,java.lang.Object) -> fvFg
react.graph.RenderMaxType -> org.cyberpwn.react.rVnI:
    react.graph.RenderMaxType UNLIMITED -> sAhm
    react.graph.RenderMaxType LIMITED -> UmWm
    react.graph.RenderMaxType[] $VALUES -> sAhs
    react.graph.RenderMaxType[] values() -> values
    react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object cI(java.lang.Object,java.lang.Object,java.lang.Object) -> vssI
react.graph.f -> org.cyberpwn.react.ECLY:
    java.lang.Object[] z -> LPit
    java.lang.Class[] t -> qMEb
    int[] Z -> BmpV
    short[] V -> NyeE
    int A -> A
    int Q -> Q
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class l(int,int) -> qlil
    java.lang.Class A(int) -> owfy
    java.lang.reflect.Method P(int) -> dfal
    java.lang.Object X(int,java.lang.Object[]) -> vQbs
    java.lang.Object S(java.lang.Object,int,java.lang.Object[]) -> VDGt
    java.lang.Object w(int,java.lang.Object[]) -> qcup
    java.lang.reflect.Field r(int) -> rDyl
    java.lang.Object J(java.lang.Object,int) -> sHYj
    void P(java.lang.Object,int,java.lang.Object) -> sHYj
    java.lang.Object V(int) -> vACh
    void c(int,java.lang.Object) -> VDGt
react.json.HTTP -> org.cyberpwn.react.TGHL:
    java.lang.String CRLF -> pQqk
    void <init>() -> <init>
    react.json.JSONObject toJSONObject(java.lang.String) -> ssMp
    java.lang.String toString(react.json.JSONObject) -> dfal
    java.lang.Object Tg(java.lang.Object,java.lang.Object,java.lang.Object) -> UJAo
    void <clinit>() -> <clinit>
react.json.HTTPTokener -> org.cyberpwn.react.oVUU:
    void <init>(java.lang.String) -> <init>
    java.lang.String nextToken() -> nextToken
    java.lang.Object LB(java.lang.Object,java.lang.Object,java.lang.Object) -> DQBY
react.json.JSONArray -> org.cyberpwn.react.cuVY:
    java.util.ArrayList myArrayList -> myArrayList
    void <init>() -> <init>
    void <init>(react.json.JSONTokener) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.util.Collection) -> <init>
    void <init>(java.lang.Object) -> <init>
    java.util.Iterator iterator() -> iterator
    java.lang.Object get(int) -> get
    boolean getBoolean(int) -> getBoolean
    double getDouble(int) -> getDouble
    java.lang.Enum getEnum(java.lang.Class,int) -> getEnum
    java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    java.math.BigInteger getBigInteger(int) -> getBigInteger
    int getInt(int) -> getInt
    react.json.JSONArray getJSONArray(int) -> getJSONArray
    react.json.JSONObject getJSONObject(int) -> getJSONObject
    long getLong(int) -> getLong
    java.lang.String getString(int) -> getString
    boolean isNull(int) -> isNull
    java.lang.String join(java.lang.String) -> join
    int length() -> length
    java.lang.Object opt(int) -> opt
    boolean optBoolean(int) -> optBoolean
    boolean optBoolean(int,boolean) -> optBoolean
    double optDouble(int) -> optDouble
    double optDouble(int,double) -> optDouble
    int optInt(int) -> optInt
    int optInt(int,int) -> optInt
    java.lang.Enum optEnum(java.lang.Class,int) -> optEnum
    java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> optEnum
    java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> optBigInteger
    java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> optBigDecimal
    react.json.JSONArray optJSONArray(int) -> optJSONArray
    react.json.JSONObject optJSONObject(int) -> optJSONObject
    long optLong(int) -> optLong
    long optLong(int,long) -> optLong
    java.lang.String optString(int) -> optString
    java.lang.String optString(int,java.lang.String) -> optString
    react.json.JSONArray put(boolean) -> put
    react.json.JSONArray put(java.util.Collection) -> put
    react.json.JSONArray put(double) -> put
    react.json.JSONArray put(int) -> put
    react.json.JSONArray put(long) -> put
    react.json.JSONArray put(java.util.Map) -> put
    react.json.JSONArray put(java.lang.Object) -> put
    react.json.JSONArray put(int,boolean) -> put
    react.json.JSONArray put(int,java.util.Collection) -> put
    react.json.JSONArray put(int,double) -> put
    react.json.JSONArray put(int,int) -> put
    react.json.JSONArray put(int,long) -> put
    react.json.JSONArray put(int,java.util.Map) -> put
    react.json.JSONArray put(int,java.lang.Object) -> put
    java.lang.Object remove(int) -> remove
    boolean similar(java.lang.Object) -> similar
    react.json.JSONObject toJSONObject(react.json.JSONArray) -> toJSONObject
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    java.io.Writer write(java.io.Writer) -> write
    java.io.Writer write(java.io.Writer,int,int) -> write
    java.lang.Object DE(java.lang.Object,java.lang.Object,java.lang.Object) -> DE
react.json.JSONException -> org.cyberpwn.react.YVVn:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> cause
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    java.lang.Throwable getCause() -> getCause
    java.lang.Object Tt(java.lang.Object,java.lang.Object,java.lang.Object) -> Tt
react.json.JSONML -> org.cyberpwn.react.aMMQ:
    void <init>() -> <init>
    java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> WGJb
    react.json.JSONArray toJSONArray(java.lang.String) -> xNwp
    react.json.JSONArray toJSONArray(react.json.XMLTokener) -> WGJb
    react.json.JSONObject toJSONObject(react.json.XMLTokener) -> dfal
    react.json.JSONObject toJSONObject(java.lang.String) -> ssMp
    java.lang.String toString(react.json.JSONArray) -> WGJb
    java.lang.String toString(react.json.JSONObject) -> dfal
    java.lang.Object wz(java.lang.Object,java.lang.Object,java.lang.Object) -> miXs
react.json.JSONObject -> org.cyberpwn.react.rhOa:
    java.util.Map map -> map
    java.lang.Object NULL -> NULL
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    void <init>(react.json.JSONTokener) -> <init>
    void <init>(java.util.Map) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,java.lang.String[]) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.util.Locale) -> <init>
    react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> accumulate
    react.json.JSONObject append(java.lang.String,java.lang.Object) -> append
    java.lang.String doubleToString(double) -> doubleToString
    java.lang.Object get(java.lang.String) -> get
    java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    boolean getBoolean(java.lang.String) -> getBoolean
    java.math.BigInteger getBigInteger(java.lang.String) -> getBigInteger
    java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    double getDouble(java.lang.String) -> getDouble
    int getInt(java.lang.String) -> getInt
    react.json.JSONArray getJSONArray(java.lang.String) -> getJSONArray
    react.json.JSONObject getJSONObject(java.lang.String) -> getJSONObject
    long getLong(java.lang.String) -> getLong
    java.lang.String[] getNames(react.json.JSONObject) -> getNames
    java.lang.String[] getNames(java.lang.Object) -> getNames
    java.lang.String getString(java.lang.String) -> getString
    boolean has(java.lang.String) -> has
    react.json.JSONObject increment(java.lang.String) -> increment
    boolean isNull(java.lang.String) -> isNull
    java.util.Iterator keys() -> keys
    java.util.Set keySet() -> keySet
    int length() -> length
    react.json.JSONArray names() -> names
    java.lang.String numberToString(java.lang.Number) -> numberToString
    java.lang.Object opt(java.lang.String) -> opt
    java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> optEnum
    java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> optEnum
    boolean optBoolean(java.lang.String) -> optBoolean
    boolean optBoolean(java.lang.String,boolean) -> optBoolean
    double optDouble(java.lang.String) -> optDouble
    java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> optBigInteger
    java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> optBigDecimal
    double optDouble(java.lang.String,double) -> optDouble
    int optInt(java.lang.String) -> optInt
    int optInt(java.lang.String,int) -> optInt
    react.json.JSONArray optJSONArray(java.lang.String) -> optJSONArray
    react.json.JSONObject optJSONObject(java.lang.String) -> optJSONObject
    long optLong(java.lang.String) -> optLong
    long optLong(java.lang.String,long) -> optLong
    java.lang.String optString(java.lang.String) -> optString
    java.lang.String optString(java.lang.String,java.lang.String) -> optString
    void populateMap(java.lang.Object) -> populateMap
    react.json.JSONObject put(java.lang.String,boolean) -> put
    react.json.JSONObject put(java.lang.String,java.util.Collection) -> put
    react.json.JSONObject put(java.lang.String,double) -> put
    react.json.JSONObject put(java.lang.String,int) -> put
    react.json.JSONObject put(java.lang.String,long) -> put
    react.json.JSONObject put(java.lang.String,java.util.Map) -> put
    react.json.JSONObject put(java.lang.String,java.lang.Object) -> put
    react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> putOnce
    react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> putOpt
    java.lang.String quote(java.lang.String) -> quote
    java.io.Writer quote(java.lang.String,java.io.Writer) -> quote
    java.lang.Object remove(java.lang.String) -> remove
    boolean similar(java.lang.Object) -> similar
    java.lang.Object stringToValue(java.lang.String) -> stringToValue
    void testValidity(java.lang.Object) -> testValidity
    react.json.JSONArray toJSONArray(react.json.JSONArray) -> toJSONArray
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    java.lang.String valueToString(java.lang.Object) -> valueToString
    java.lang.Object wrap(java.lang.Object) -> wrap
    java.io.Writer write(java.io.Writer) -> write
    java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> writeValue
    void indent(java.io.Writer,int) -> indent
    java.io.Writer write(java.io.Writer,int,int) -> write
    java.lang.Object XL(java.lang.Object,java.lang.Object,java.lang.Object) -> XL
react.json.JSONObject$Null -> org.cyberpwn.react.jhgx:
    void <init>() -> <init>
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> org.cyberpwn.react.AXaK:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> org.cyberpwn.react.CUvD:
    void <init>() -> <init>
    java.lang.String toString() -> toString
    java.lang.Object gZ(java.lang.Object,java.lang.Object,java.lang.Object) -> TiAo
react.json.JSONTokener -> org.cyberpwn.react.FEmO:
    long character -> SUod
    boolean eof -> eof
    long index -> kCCN
    long line -> DlGu
    char previous -> YiDF
    java.io.Reader reader -> reader
    boolean usePrevious -> cwAc
    void <init>(java.io.Reader) -> <init>
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.lang.String) -> <init>
    void back() -> back
    int dehexchar(char) -> WGJb
    boolean end() -> wDQn
    boolean more() -> qeCx
    char next() -> next
    char next(char) -> dfal
    java.lang.String next(int) -> GbSl
    char nextClean() -> ntkr
    java.lang.String nextString(char) -> lTgP
    java.lang.String nextTo(char) -> KejP
    java.lang.String nextTo(java.lang.String) -> qcup
    java.lang.Object nextValue() -> TOOm
    char skipTo(char) -> mOYk
    react.json.JSONException syntaxError(java.lang.String) -> PBWD
    java.lang.String toString() -> toString
    java.lang.Object BT(java.lang.Object,java.lang.Object,java.lang.Object) -> CgPr
react.json.JSONTokener$HTTP -> org.cyberpwn.react.qBgk:
    java.lang.Object[] L -> lyKH
    int Y -> Y
    java.math.BigInteger[] E -> NXBp
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void B(int,java.lang.Object) -> bWiv
    int t(int,int) -> vRGF
    int h(byte[],int) -> LXLE
    void C13022() -> Orbd
    void Y() -> Y
    java.lang.String c(java.lang.Object) -> lTgP
react.json.JSONTokener$JSONTokener -> org.cyberpwn.react.DXxk:
    java.lang.Object[] c -> Hewq
    int Z -> Z
    java.math.BigInteger[] f -> lWAy
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void a(int,java.lang.Object) -> a
    int k(int,int) -> WGJb
    int A(byte[],int) -> vRCd
    void a21577() -> QxiG
    void h() -> h
    java.lang.String e(java.lang.Object) -> sQMd
react.json.JSONWriter -> org.cyberpwn.react.Btvy:
    int maxdepth -> sRjV
    boolean comma -> JCEi
    char mode -> TbCW
    react.json.JSONObject[] stack -> Gtnp
    int top -> top
    java.io.Writer writer -> writer
    void <init>(java.io.Writer) -> <init>
    react.json.JSONWriter append(java.lang.String) -> vQbs
    react.json.JSONWriter array() -> GPxS
    react.json.JSONWriter end(char,char) -> WGJb
    react.json.JSONWriter endArray() -> gyIM
    react.json.JSONWriter endObject() -> BuPV
    react.json.JSONWriter key(java.lang.String) -> eHBt
    react.json.JSONWriter object() -> PeES
    void pop(char) -> wnYS
    void push(react.json.JSONObject) -> lTgP
    react.json.JSONWriter value(boolean) -> SCOM
    react.json.JSONWriter value(double) -> OYFP
    react.json.JSONWriter value(long) -> qcup
    react.json.JSONWriter value(java.lang.Object) -> RkAo
    java.lang.Object Wb(java.lang.Object,java.lang.Object,java.lang.Object) -> oELO
react.json.XML -> org.cyberpwn.react.gyQY:
    java.lang.Character AMP -> Sfof
    java.lang.Character APOS -> jGoQ
    java.lang.Character BANG -> lyIx
    java.lang.Character EQ -> IGqE
    java.lang.Character GT -> bIHy
    java.lang.Character LT -> Nhaw
    java.lang.Character QUEST -> fCsO
    java.lang.Character QUOT -> KEfa
    java.lang.Character SLASH -> YydA
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.String escape(java.lang.String) -> escape
    void noSpace(java.lang.String) -> XJNQ
    boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> WGJb
    java.lang.Object stringToValue(java.lang.String) -> stringToValue
    react.json.JSONObject toJSONObject(java.lang.String) -> ssMp
    java.lang.String toString(java.lang.Object) -> toString
    java.lang.String toString(java.lang.Object,java.lang.String) -> toString
    java.lang.Object LX(java.lang.Object,java.lang.Object,java.lang.Object) -> PSch
react.json.XMLTokener -> org.cyberpwn.react.jXFv:
    java.util.HashMap entity -> lpYD
    void <clinit>() -> <clinit>
    void <init>(java.lang.String) -> <init>
    java.lang.String nextCDATA() -> hQXG
    java.lang.Object nextContent() -> JcTD
    java.lang.Object nextEntity(char) -> SCOM
    java.lang.Object nextMeta() -> ccjN
    java.lang.Object nextToken() -> AaLA
    boolean skipPast(java.lang.String) -> DrYG
    java.lang.Object RR(java.lang.Object,java.lang.Object,java.lang.Object) -> OjTA
react.json.h -> org.cyberpwn.react.kRXR:
    java.lang.Object[] V -> CgEJ
    java.lang.Class[] z -> VoyW
    int[] r -> r
    short[] W -> BeAK
    int Z -> Z
    int D -> D
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class c(int,int) -> xiNT
    java.lang.Class U(int) -> KDLh
    java.lang.reflect.Method d(int) -> bWiv
    java.lang.Object d(int,java.lang.Object[]) -> WGJb
    java.lang.Object u(java.lang.Object,int,java.lang.Object[]) -> sHYj
    java.lang.Object c(int,java.lang.Object[]) -> OXeW
    java.lang.reflect.Field p(int) -> iuts
    java.lang.Object D(java.lang.Object,int) -> ssMp
    void m(java.lang.Object,int,java.lang.Object) -> ssMp
    java.lang.Object F(int) -> DHIa
    void f(int,java.lang.Object) -> OYFP
react.lagmap.LagMap -> org.cyberpwn.react.vAUp:
    react.glang.GMap chunks -> fLgP
    void <init>() -> <init>
    react.glang.GMap getGrandTotalMilliseconds() -> EluX
    react.glang.GMap getGrandTotal() -> XRiQ
    void pump() -> ejPn
    void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> WGJb
    void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> WGJb
    react.glang.GMap getChunks() -> QWGK
    java.lang.Object xR(java.lang.Object,java.lang.Object,java.lang.Object) -> mWpQ
react.lagmap.LagMapChunk -> org.cyberpwn.react.Bcuc:
    react.glang.GMap hits -> GSOc
    org.bukkit.Chunk c -> NVid
    void <init>(org.bukkit.Chunk) -> <init>
    react.glang.GMap getMS() -> ogLy
    double totalMS() -> xWsx
    double getMS(react.api.ChunkIssue) -> WGJb
    void hit(react.api.ChunkIssue,double) -> WGJb
    void hit(react.api.ChunkIssue) -> dfal
    int getX() -> getX
    int getZ() -> getZ
    double totalScore() -> sPuY
    react.glang.GMap getHits() -> eYOu
    void pump() -> ejPn
    int compareTo(react.lagmap.LagMapChunk) -> WGJb
    org.bukkit.Chunk getC() -> RPmS
    org.bukkit.World getWorld() -> getWorld
    int compareTo(java.lang.Object) -> compareTo
    java.lang.Object rU(java.lang.Object,java.lang.Object,java.lang.Object) -> jNnH
react.lagmap.LagMapChunk$LagMap -> org.cyberpwn.react.NUvC:
    java.lang.Object[] h -> NFbO
    int q -> q
    java.math.BigInteger[] y -> lVhn
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void z(int,java.lang.Object) -> wnWa
    int F(int,int) -> MlSj
    int P(byte[],int) -> fcvC
    void A17385() -> APJD
    void T() -> OXeW
    java.lang.String k(java.lang.Object) -> xNwp
react.lagmap.LagMapChunk$LagMapChunk -> org.cyberpwn.react.QFNM:
    java.lang.Object[] B -> kKVI
    int i -> i
    java.math.BigInteger[] x -> EMBJ
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void m(int,java.lang.Object) -> WXLP
    int F(int,int) -> MlSj
    int W(byte[],int) -> ssMp
    void n2631() -> MRkB
    void k() -> k
    java.lang.String T(java.lang.Object) -> EAwa
react.lagmap.vj -> org.cyberpwn.react.INvg:
    java.lang.Object[] z -> LPit
    java.lang.Class[] q -> cmqT
    int[] v -> SUqS
    short[] P -> rqae
    int O -> O
    int Y -> Y
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class V(int,int) -> IWUw
    java.lang.Class o(int) -> eHFt
    java.lang.reflect.Method K(int) -> kIWJ
    java.lang.Object i(int,java.lang.Object[]) -> Vmyy
    java.lang.Object Y(java.lang.Object,int,java.lang.Object[]) -> ssMp
    java.lang.Object S(int,java.lang.Object[]) -> ESVk
    java.lang.reflect.Field H(int) -> xNwp
    java.lang.Object M(java.lang.Object,int) -> CgEJ
    void f(java.lang.Object,int,java.lang.Object) -> xNwp
    java.lang.Object Z(int) -> LWoG
    void W(int,java.lang.Object) -> TqEp
react.nms.INMSBinding -> org.cyberpwn.react.GseP:
    java.lang.String getPackageVersion() -> getPackageVersion
    void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> WGJb
react.nms.NMSBinding -> org.cyberpwn.react.iUDC:
    java.lang.String packageVersion -> packageVersion
    void <init>(java.lang.String) -> <init>
    java.lang.String getPackageVersion() -> getPackageVersion
react.nms.NMSBinding10 -> org.cyberpwn.react.biaN:
    void <init>(java.lang.String) -> <init>
    void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> WGJb
    java.lang.Object eM(java.lang.Object,java.lang.Object,java.lang.Object) -> XSKh
react.nms.NMSBinding11 -> org.cyberpwn.react.pQGN:
    void <init>(java.lang.String) -> <init>
    void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> WGJb
    java.lang.Object Kj(java.lang.Object,java.lang.Object,java.lang.Object) -> prbF
react.nms.NMSBinding11$NMSBinding10 -> org.cyberpwn.react.VLnc:
    java.lang.Object[] I -> iUpY
    int W -> W
    java.math.BigInteger[] z -> kBeC
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void U(int,java.lang.Object) -> qtuv
    int V(int,int) -> kYvI
    int l(byte[],int) -> UAEN
    void K13660() -> gEby
    void k() -> k
    java.lang.String y(java.lang.Object) -> vQbs
react.nms.NMSBinding12 -> org.cyberpwn.react.KUaB:
    void <init>(java.lang.String) -> <init>
    void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> WGJb
    java.lang.Object ZK(java.lang.Object,java.lang.Object,java.lang.Object) -> maGs
react.nms.NMSBinding8 -> org.cyberpwn.react.PnAr:
    void <init>(java.lang.String) -> <init>
    void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> WGJb
    java.lang.Object EV(java.lang.Object,java.lang.Object,java.lang.Object) -> anfr
react.nms.NMSBinding92 -> org.cyberpwn.react.VxDI:
    void <init>(java.lang.String) -> <init>
    void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> WGJb
    java.lang.Object Nr(java.lang.Object,java.lang.Object,java.lang.Object) -> RPyM
react.nms.NMSBinding92$NMSBinding11 -> org.cyberpwn.react.MBTt:
    java.lang.Object[] l -> KyNg
    int u -> u
    java.math.BigInteger[] y -> lVhn
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void n(int,java.lang.Object) -> CgEJ
    int B(int,int) -> xhmI
    int s(byte[],int) -> DPSk
    void P6428() -> gyIC
    void Z() -> Z
    java.lang.String w(java.lang.Object) -> PBWD
react.nms.NMSBinding94 -> org.cyberpwn.react.JtaN:
    void <init>(java.lang.String) -> <init>
    void setBlock(org.bukkit.Location,surge.util.MaterialBlock) -> WGJb
    java.lang.Object xd(java.lang.Object,java.lang.Object,java.lang.Object) -> eXpW
react.nms.f -> org.cyberpwn.react.mqrt:
    java.lang.Object[] k -> igSL
    java.lang.Class[] X -> kRsH
    int[] T -> dFaH
    short[] L -> CGBs
    int B -> B
    int W -> W
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class L(int,int) -> hQNI
    java.lang.Class r(int) -> lTeb
    java.lang.reflect.Method K(int) -> kIWJ
    java.lang.Object Y(int,java.lang.Object[]) -> DPSk
    java.lang.Object I(java.lang.Object,int,java.lang.Object[]) -> xNwp
    java.lang.Object p(int,java.lang.Object[]) -> lTgP
    java.lang.reflect.Field M(int) -> lTgP
    java.lang.Object N(java.lang.Object,int) -> xNwp
    void a(java.lang.Object,int,java.lang.Object) -> qcup
    java.lang.Object f(int) -> qJgc
    void K(int,java.lang.Object) -> nJMP
react.notification.Note -> org.cyberpwn.react.GtIQ:
    react.notification.Note RAI -> RAI
    react.notification.Note VERBOSE -> VERBOSE
    react.notification.Note SPIKES -> SPIKES
    react.notification.Note ACTION -> ACTION
    react.notification.Note GC -> GC
    react.notification.Note[] $VALUES -> $VALUES
    react.notification.Note[] values() -> values
    react.notification.Note valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void bake(java.lang.String) -> bake
    void <clinit>() -> <clinit>
    java.lang.Object pv(java.lang.Object,java.lang.Object,java.lang.Object) -> pv
react.notification.Notification -> org.cyberpwn.react.WPSK:
    react.notification.Note type -> dhcd
    java.lang.String message -> message
    void <init>(react.notification.Note,java.lang.String) -> <init>
    react.notification.Note getType() -> dxPN
    void setType(react.notification.Note) -> WGJb
    java.lang.String getMessage() -> getMessage
    void setMessage(java.lang.String) -> setMessage
react.notification.qd -> org.cyberpwn.react.HCgF:
    java.lang.Object[] N -> OIeS
    int Z -> Z
    java.math.BigInteger[] P -> hdOp
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void P(int,java.lang.Object) -> lTgP
    int K(int,int) -> mOYk
    int U(byte[],int) -> SCOM
    void H29294() -> lLeY
    void B() -> B
    java.lang.String Y(java.lang.Object) -> wnYS
react.notification.qk -> org.cyberpwn.react.ryST:
    java.lang.Object[] F -> rgxs
    java.lang.Class[] l -> gPLA
    int[] L -> UBfB
    short[] Z -> WaxF
    int B -> B
    int o -> o
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class R(int,int) -> MSBL
    java.lang.Class S(int) -> CxIX
    java.lang.reflect.Method O(int) -> BIsF
    java.lang.Object k(int,java.lang.Object[]) -> UAEN
    java.lang.Object P(java.lang.Object,int,java.lang.Object[]) -> qcup
    java.lang.Object t(int,java.lang.Object[]) -> ePRm
    java.lang.reflect.Field g(int) -> qtuv
    java.lang.Object r(java.lang.Object,int) -> mOYk
    void x(java.lang.Object,int,java.lang.Object) -> PBWD
    java.lang.Object E(int) -> nuDS
    void z(int,java.lang.Object) -> wnWa
react.notification.xq -> org.cyberpwn.react.GACI:
    java.lang.Object[] n -> HoYL
    int v -> jHLQ
    java.math.BigInteger[] Z -> hReB
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void r(int,java.lang.Object) -> xNwp
    int D(int,int) -> NffG
    int D(byte[],int) -> FpMO
    void M12078() -> RjmU
    void f() -> f
    java.lang.String G(java.lang.Object) -> NECO
react.papyrus.BufferedFrame -> org.cyberpwn.react.SnYA:
    byte[][] frame -> frame
    int width -> width
    int height -> height
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> drawText
    void write(byte) -> write
    react.papyrus.BufferedFrame scale(double,double,int) -> scale
    void fromBufferedImage(java.awt.image.BufferedImage) -> fromBufferedImage
    void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> fromBufferedImage
    java.awt.image.BufferedImage toBufferedImage() -> toBufferedImage
    void writeRainbowMul() -> writeRainbowMul
    void writeRainbowAdd() -> writeRainbowAdd
    void writeSparks() -> writeSparks
    boolean write(int,int,byte) -> write
    int write(react.papyrus.BufferedFrame,int,int) -> write
    void write(react.papyrus.BufferedFrame) -> write
    byte[][] getRawFrame() -> getRawFrame
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    java.lang.Object Gs(java.lang.Object,java.lang.Object,java.lang.Object) -> Gs
react.papyrus.BufferedFrame$BufferedFrame -> org.cyberpwn.react.DQLH:
    java.lang.Object[] U -> xHFY
    int x -> x
    java.math.BigInteger[] D -> XSsI
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void e(int,java.lang.Object) -> EBVK
    int j(int,int) -> dfal
    int E(byte[],int) -> WXLP
    void S10598() -> maKO
    void R() -> pHPw
    java.lang.String P(java.lang.Object) -> Vvlm
react.papyrus.BufferedFrame$FrameColor -> org.cyberpwn.react.AHDQ:
    java.lang.Object[] T -> iUpD
    int J -> J
    java.math.BigInteger[] B -> stoU
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void p(int,java.lang.Object) -> WGJb
    int Y(int,int) -> vQbs
    int G(byte[],int) -> WGJb
    void Y17795() -> jqTJ
    void y() -> y
    java.lang.String M(java.lang.Object) -> UAEN
react.papyrus.FrameColor -> org.cyberpwn.react.Smwi:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.awt.Color c(int,int,int) -> KejP
    double getDistance(java.awt.Color,java.awt.Color) -> WGJb
    java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    byte[] imageToBytes(java.awt.Image) -> imageToBytes
    byte matchColor(int,int,int) -> matchColor
    byte matchColor(java.awt.Color) -> matchColor
    java.awt.Color getColor(byte) -> getColor
    java.lang.Object lc(java.lang.Object,java.lang.Object,java.lang.Object) -> JbtQ
react.papyrus.IPapyrus -> org.cyberpwn.react.dEUV:
    org.bukkit.map.MapView getView() -> CUpP
    react.papyrus.BufferedFrame getFrameBuffer() -> Dadv
    void addRenderer(react.papyrus.IRenderer) -> dfal
    void clearRenderers() -> VTwR
    react.glang.GList getRenderers() -> KCvN
    void removeRenderer(react.papyrus.IRenderer) -> lTgP
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> yckm
react.papyrus.IRenderer -> org.cyberpwn.react.INyG:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> WGJb
react.papyrus.Papyrus -> org.cyberpwn.react.ofwE:
    org.bukkit.map.MapView map -> xkMc
    react.papyrus.BufferedFrame frameBuffer -> lFHQ
    react.papyrus.BufferedFrame lastFrameBuffer -> pcUi
    react.glang.GList renderers -> pRSt
    void <init>(org.bukkit.World) -> <init>
    org.bukkit.map.MapView getView() -> CUpP
    react.papyrus.BufferedFrame getFrameBuffer() -> Dadv
    void addRenderer(react.papyrus.IRenderer) -> dfal
    void clearRenderers() -> VTwR
    react.glang.GList getRenderers() -> KCvN
    void removeRenderer(react.papyrus.IRenderer) -> lTgP
    void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> yckm
    react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> dfal
    react.glang.GList access$100(react.papyrus.Papyrus) -> lTgP
    react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> KejP
    java.lang.Object rh(java.lang.Object,java.lang.Object,java.lang.Object) -> DHQd
react.papyrus.Papyrus$1 -> org.cyberpwn.react.iLSr:
    org.bukkit.map.MapCanvas val$c -> foJj
    org.bukkit.map.MapView val$v -> IPeY
    react.papyrus.Papyrus this$0 -> JJwR
    void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    void run() -> run
    java.lang.Object dV(java.lang.Object,java.lang.Object,java.lang.Object) -> WPHn
react.papyrus.ReactFont -> org.cyberpwn.react.NEVu:
    int spaceSize -> OJFg
    java.lang.String fontChars -> XfBi
    int[][] fontData -> qfXW
    react.papyrus.ReactFont Font -> KEgo
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object CU(java.lang.Object,java.lang.Object,java.lang.Object) -> QxkB
react.papyrus.e -> org.cyberpwn.react.nKCL:
    java.lang.Object[] p -> wyBC
    java.lang.Class[] c -> Xmpe
    int[] i -> i
    short[] I -> GSIv
    int s -> s
    int q -> q
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class r(int,int) -> GQQD
    java.lang.Class G(int) -> APAi
    java.lang.reflect.Method k(int) -> fcvC
    java.lang.Object h(int,java.lang.Object[]) -> tupB
    java.lang.Object x(java.lang.Object,int,java.lang.Object[]) -> WGJb
    java.lang.Object a(int,java.lang.Object[]) -> HvRk
    java.lang.reflect.Field e(int) -> FpPq
    java.lang.Object N(java.lang.Object,int) -> xNwp
    void t(java.lang.Object,int,java.lang.Object) -> vQbs
    java.lang.Object X(int) -> ykqT
    void f(int,java.lang.Object) -> OYFP
react.protocol.PacketStreamHandler -> org.cyberpwn.react.ydSu:
    long wrote -> wrote
    react.glang.GMap avgPacketSize -> avgPacketSize
    void <init>() -> <init>
    com.comphenix.protocol.events.ListenerPriority getPriority() -> getPriority
    org.bukkit.plugin.Plugin getPlugin() -> getPlugin
    byte[] handle(com.comphenix.protocol.events.PacketEvent,byte[]) -> handle
    void <clinit>() -> <clinit>
    java.lang.Object rD(java.lang.Object,java.lang.Object,java.lang.Object) -> rD
react.protocol.ProtocolAdapter -> org.cyberpwn.react.BRvO:
    boolean longs -> pQrb
    react.protocol.PacketStreamHandler packetOutputHandler -> kKTj
    react.glang.GMap pings -> usFG
    react.glang.GMap ago -> JKWA
    react.glang.GMap times -> Qqlx
    double avgPing -> bIJi
    int tppsOUT -> ptVj
    int tppsIN -> KyMm
    int ppsOUT -> MmrH
    int ppsIN -> GdPj
    long tbpsIN -> wVfh
    long bpsOUT -> ORUe
    long bpsIN -> kSeD
    void <init>() -> <init>
    void start() -> start
    void trackBandwidth(react.glang.GList) -> bWiv
    void trackPing() -> ETHM
    void trackPackets(react.glang.GList) -> TqEp
    void tick() -> tick
    void on(org.bukkit.event.player.PlayerQuitEvent) -> WGJb
    void stop() -> stop
    double getAvgPing() -> GruU
    double ping(org.bukkit.entity.Player) -> DrYG
    long ago(org.bukkit.entity.Player) -> XdAJ
    boolean isLongs() -> VfPB
    react.glang.GMap getPings() -> kbkM
    react.glang.GMap getAgo() -> xGNF
    react.glang.GMap getTimes() -> FhCR
    react.protocol.PacketStreamHandler access$000(react.protocol.ProtocolAdapter) -> WGJb
    boolean access$100(react.protocol.ProtocolAdapter) -> dfal
    react.glang.GMap access$200(react.protocol.ProtocolAdapter) -> lTgP
    react.glang.GMap access$300(react.protocol.ProtocolAdapter) -> KejP
    react.glang.GMap access$400(react.protocol.ProtocolAdapter) -> mOYk
    java.lang.Object fH(java.lang.Object,java.lang.Object,java.lang.Object) -> qSal
react.protocol.ProtocolAdapter$1 -> org.cyberpwn.react.rpaE:
    react.protocol.ProtocolAdapter this$0 -> bjlw
    void <init>(react.protocol.ProtocolAdapter,org.bukkit.plugin.Plugin,com.comphenix.protocol.events.ListenerPriority,java.lang.Iterable,com.comphenix.protocol.events.ListenerOptions[]) -> <init>
    void onPacketReceiving(com.comphenix.protocol.events.PacketEvent) -> onPacketReceiving
    void onPacketSending(com.comphenix.protocol.events.PacketEvent) -> onPacketSending
    java.lang.Object kc(java.lang.Object,java.lang.Object,java.lang.Object) -> cdMC
react.protocol.ProtocolAdapter$2 -> org.cyberpwn.react.vkkV:
    react.protocol.ProtocolAdapter this$0 -> bjlw
    void <init>(react.protocol.ProtocolAdapter,org.bukkit.plugin.Plugin,com.comphenix.protocol.PacketType[]) -> <init>
    void onPacketReceiving(com.comphenix.protocol.events.PacketEvent) -> onPacketReceiving
    void onPacketSending(com.comphenix.protocol.events.PacketEvent) -> onPacketSending
    java.lang.Object SR(java.lang.Object,java.lang.Object,java.lang.Object) -> Nfov
react.protocol.ProtocolAdapter$3 -> org.cyberpwn.react.tLTH:
    react.protocol.ProtocolAdapter this$0 -> bjlw
    void <init>(react.protocol.ProtocolAdapter,org.bukkit.plugin.Plugin,com.comphenix.protocol.PacketType[]) -> <init>
    void onPacketReceiving(com.comphenix.protocol.events.PacketEvent) -> onPacketReceiving
    java.lang.Object GM(java.lang.Object,java.lang.Object,java.lang.Object) -> HvRk
react.protocol.ProtocolAdapter$PacketStreamHandler -> org.cyberpwn.react.jGFt:
    java.lang.Object[] kP -> RSPv
    int r -> r
    java.math.BigInteger[] k -> BUDO
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void u(int,java.lang.Object) -> lTeb
    int Z(int,int) -> MtdV
    int B(byte[],int) -> qtuv
    void h20795() -> xFui
    void A() -> A
    java.lang.String A(java.lang.Object) -> XJNQ
react.protocol.ProtocolAdapter$ProtocolAdapter -> org.cyberpwn.react.ofwO:
    java.lang.Object[] o -> VMUI
    int H -> H
    java.math.BigInteger[] J -> tLhv
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void y(int,java.lang.Object) -> KejP
    int i(int,int) -> QNKT
    int C(byte[],int) -> CgEJ
    void r8144() -> TNqH
    void i() -> i
    java.lang.String B(java.lang.Object) -> FpMO
react.protocol.wrapper.AbstractPacket -> org.cyberpwn.react.CEWx:
    com.comphenix.protocol.events.PacketContainer handle -> jGtJ
    void <init>(com.comphenix.protocol.events.PacketContainer,com.comphenix.protocol.PacketType) -> <init>
    com.comphenix.protocol.events.PacketContainer getHandle() -> PJtl
    void sendPacket(org.bukkit.entity.Player) -> OXeW
    void recievePacket(org.bukkit.entity.Player) -> Vmyy
    void receivePacket(org.bukkit.entity.Player) -> ESVk
    java.lang.Object yA(java.lang.Object,java.lang.Object,java.lang.Object) -> aTtW
react.protocol.wrapper.AbstractPacket$0 -> org.cyberpwn.react.lnny:
    java.lang.Object[] Z -> AcAy
    int f -> f
    java.math.BigInteger[] b -> IPgG
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void x(int,java.lang.Object) -> FpMO
    int S(int,int) -> lTgP
    int N(byte[],int) -> EBVK
    void A17245() -> ktUv
    void o() -> o
    java.lang.String M(java.lang.Object) -> UAEN
react.protocol.wrapper.AbstractPacket$AbstractPacket -> org.cyberpwn.react.RRFm:
    java.lang.Object[] r -> kTHs
    int Y -> Y
    java.math.BigInteger[] Z -> hReB
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void i(int,java.lang.Object) -> LiMa
    int B(int,int) -> xhmI
    int Y(byte[],int) -> EdXk
    void K32261() -> vQqb
    void X() -> X
    java.lang.String t(java.lang.Object) -> SCOM
react.protocol.wrapper.AbstractPacket$AbstractPacket18 -> org.cyberpwn.react.Wqvf:
    java.lang.Object[] Kf -> JBgt
    int K -> K
    java.math.BigInteger[] R -> uqqx
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void S(int,java.lang.Object) -> LXLE
    int Z(int,int) -> MtdV
    int H(byte[],int) -> OYFP
    void y2984() -> WXYa
    void c() -> c
    java.lang.String p(java.lang.Object) -> LiMa
react.protocol.wrapper.AbstractPacket18 -> org.cyberpwn.react.MKGk:
    com.comphenix.protocol.events.PacketContainer handle -> jGtJ
    void <init>(com.comphenix.protocol.events.PacketContainer,com.comphenix.protocol.PacketType) -> <init>
    com.comphenix.protocol.events.PacketContainer getHandle() -> PJtl
    void sendPacket(org.bukkit.entity.Player) -> OXeW
    void recievePacket(org.bukkit.entity.Player) -> Vmyy
    void receivePacket(org.bukkit.entity.Player) -> ESVk
    java.lang.Object jB(java.lang.Object,java.lang.Object,java.lang.Object) -> wDQn
react.protocol.wrapper.Legacy -> org.cyberpwn.react.NEYn:
react.protocol.wrapper.PacketWrapper18 -> org.cyberpwn.react.LjHV:
    void <init>() -> <init>
    void onEnable() -> onEnable
react.protocol.wrapper.WrapperHandshakingClientSetProtocol -> org.cyberpwn.react.KxFc:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getProtocolVersion() -> getProtocolVersion
    void setProtocolVersion(int) -> setProtocolVersion
    java.lang.String getServerAddressHostnameOrIp() -> OPbE
    void setServerAddressHostnameOrIp(java.lang.String) -> XdAJ
    int getServerPort() -> getServerPort
    void setServerPort(int) -> LaBD
    com.comphenix.protocol.PacketType$Protocol getNextState() -> ESdy
    void setNextState(com.comphenix.protocol.PacketType$Protocol) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object kX(java.lang.Object,java.lang.Object,java.lang.Object) -> qeCx
react.protocol.wrapper.WrapperHandshakingClientSetProtocol18 -> org.cyberpwn.react.yKFH:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getProtocolVersion() -> getProtocolVersion
    void setProtocolVersion(int) -> setProtocolVersion
    java.lang.String getServerAddressHostnameOrIp() -> OPbE
    void setServerAddressHostnameOrIp(java.lang.String) -> XdAJ
    int getServerPort() -> getServerPort
    void setServerPort(int) -> LaBD
    com.comphenix.protocol.PacketType$Protocol getNextState() -> ESdy
    void setNextState(com.comphenix.protocol.PacketType$Protocol) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Ax(java.lang.Object,java.lang.Object,java.lang.Object) -> ntkr
react.protocol.wrapper.WrapperLoginClientEncryptionBegin -> org.cyberpwn.react.oDvc:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    byte[] getSharedSecret() -> TOPX
    void setSharedSecret(byte[]) -> WGJb
    byte[] getVerifyToken() -> Knhk
    void setVerifyToken(byte[]) -> dfal
    void <clinit>() -> <clinit>
    java.lang.Object zY(java.lang.Object,java.lang.Object,java.lang.Object) -> TOOm
react.protocol.wrapper.WrapperLoginClientEncryptionBegin18 -> org.cyberpwn.react.SDHk:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    byte[] getSharedSecret() -> TOPX
    void setSharedSecret(byte[]) -> WGJb
    byte[] getVerifyToken() -> Knhk
    void setVerifyToken(byte[]) -> dfal
    void <clinit>() -> <clinit>
    java.lang.Object rh(java.lang.Object,java.lang.Object,java.lang.Object) -> DHQd
react.protocol.wrapper.WrapperLoginClientStart -> org.cyberpwn.react.hkWW:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedGameProfile getProfile() -> getProfile
    void setProfile(com.comphenix.protocol.wrappers.WrappedGameProfile) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object tb(java.lang.Object,java.lang.Object,java.lang.Object) -> Orbd
react.protocol.wrapper.WrapperLoginClientStart18 -> org.cyberpwn.react.mYEG:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedGameProfile getProfile() -> getProfile
    void setProfile(com.comphenix.protocol.wrappers.WrappedGameProfile) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object FJ(java.lang.Object,java.lang.Object,java.lang.Object) -> QxiG
react.protocol.wrapper.WrapperLoginServerDisconnect -> org.cyberpwn.react.hQeJ:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedChatComponent getReason() -> oDlM
    com.comphenix.protocol.wrappers.WrappedChatComponent getJsonData() -> ghIa
    void setReason(com.comphenix.protocol.wrappers.WrappedChatComponent) -> WGJb
    void setJsonData(com.comphenix.protocol.wrappers.WrappedChatComponent) -> dfal
    void <clinit>() -> <clinit>
    java.lang.Object GL(java.lang.Object,java.lang.Object,java.lang.Object) -> GPxS
react.protocol.wrapper.WrapperLoginServerDisconnect18 -> org.cyberpwn.react.KVCu:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedChatComponent getReason() -> oDlM
    com.comphenix.protocol.wrappers.WrappedChatComponent getJsonData() -> ghIa
    void setReason(com.comphenix.protocol.wrappers.WrappedChatComponent) -> WGJb
    void setJsonData(com.comphenix.protocol.wrappers.WrappedChatComponent) -> dfal
    void <clinit>() -> <clinit>
    java.lang.Object fI(java.lang.Object,java.lang.Object,java.lang.Object) -> gyIM
react.protocol.wrapper.WrapperLoginServerEncryptionBegin -> org.cyberpwn.react.wwbj:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getServerId() -> getServerId
    void setServerId(java.lang.String) -> OXeW
    java.security.PublicKey getPublicKey() -> getPublicKey
    void setPublicKey(java.security.PublicKey) -> setPublicKey
    byte[] getVerifyToken() -> Knhk
    void setVerifyToken(byte[]) -> dfal
    void <clinit>() -> <clinit>
    java.lang.Object gP(java.lang.Object,java.lang.Object,java.lang.Object) -> BuPV
react.protocol.wrapper.WrapperLoginServerEncryptionBegin18 -> org.cyberpwn.react.vknN:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getServerId() -> getServerId
    void setServerId(java.lang.String) -> OXeW
    java.security.PublicKey getPublicKey() -> getPublicKey
    void setPublicKey(java.security.PublicKey) -> setPublicKey
    byte[] getVerifyToken() -> Knhk
    void setVerifyToken(byte[]) -> dfal
    void <clinit>() -> <clinit>
    java.lang.Object gX(java.lang.Object,java.lang.Object,java.lang.Object) -> PeES
react.protocol.wrapper.WrapperLoginServerSetCompression -> org.cyberpwn.react.dVYT:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getThreshold() -> getThreshold
    void setThreshold(int) -> BdEn
    void <clinit>() -> <clinit>
    java.lang.Object pR(java.lang.Object,java.lang.Object,java.lang.Object) -> hQXG
react.protocol.wrapper.WrapperLoginServerSetCompression18 -> org.cyberpwn.react.PTPL:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getThreshold() -> getThreshold
    void setThreshold(int) -> BdEn
    void <clinit>() -> <clinit>
    java.lang.Object SK(java.lang.Object,java.lang.Object,java.lang.Object) -> JcTD
react.protocol.wrapper.WrapperLoginServerSuccess -> org.cyberpwn.react.HwME:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedGameProfile getProfile() -> getProfile
    void setProfile(com.comphenix.protocol.wrappers.WrappedGameProfile) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object jt(java.lang.Object,java.lang.Object,java.lang.Object) -> ccjN
react.protocol.wrapper.WrapperLoginServerSuccess18 -> org.cyberpwn.react.tDFF:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedGameProfile getProfile() -> getProfile
    void setProfile(com.comphenix.protocol.wrappers.WrappedGameProfile) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Mz(java.lang.Object,java.lang.Object,java.lang.Object) -> ndGa
react.protocol.wrapper.WrapperPlayClientAbilities -> org.cyberpwn.react.UIkw:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    boolean isInvulnurable() -> UlFP
    void setInvulnurable(boolean) -> SmbW
    boolean isFlying() -> isFlying
    void setFlying(boolean) -> setFlying
    boolean canFly() -> rowv
    void setCanFly(boolean) -> ePRm
    boolean canInstantlyBuild() -> cclN
    void setCanInstantlyBuild(boolean) -> CgEJ
    float getFlyingSpeed() -> ofoS
    void setFlyingSpeed(float) -> KejP
    float getWalkingSpeed() -> Fxkg
    void setWalkingSpeed(float) -> mOYk
    void <clinit>() -> <clinit>
    java.lang.Object kw(java.lang.Object,java.lang.Object,java.lang.Object) -> AaLA
react.protocol.wrapper.WrapperPlayClientAbilities18 -> org.cyberpwn.react.aoSI:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    boolean isInvulnurable() -> UlFP
    void setInvulnurable(boolean) -> SmbW
    boolean isFlying() -> isFlying
    void setFlying(boolean) -> setFlying
    boolean canFly() -> rowv
    void setCanFly(boolean) -> ePRm
    boolean canInstantlyBuild() -> cclN
    void setCanInstantlyBuild(boolean) -> CgEJ
    float getFlyingSpeed() -> ofoS
    void setFlyingSpeed(float) -> KejP
    float getWalkingSpeed() -> Fxkg
    void setWalkingSpeed(float) -> mOYk
    void <clinit>() -> <clinit>
    java.lang.Object Vk(java.lang.Object,java.lang.Object,java.lang.Object) -> EluX
react.protocol.wrapper.WrapperPlayClientArmAnimation -> org.cyberpwn.react.QNap:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object fV(java.lang.Object,java.lang.Object,java.lang.Object) -> XRiQ
react.protocol.wrapper.WrapperPlayClientArmAnimation18 -> org.cyberpwn.react.wLmu:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object QA(java.lang.Object,java.lang.Object,java.lang.Object) -> ejPn
react.protocol.wrapper.WrapperPlayClientBlockDig -> org.cyberpwn.react.xPQr:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    com.comphenix.protocol.wrappers.EnumWrappers$Direction getDirection() -> HwBe
    void setDirection(com.comphenix.protocol.wrappers.EnumWrappers$Direction) -> WGJb
    com.comphenix.protocol.wrappers.EnumWrappers$PlayerDigType getStatus() -> qddU
    void setStatus(com.comphenix.protocol.wrappers.EnumWrappers$PlayerDigType) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object na(java.lang.Object,java.lang.Object,java.lang.Object) -> QWGK
react.protocol.wrapper.WrapperPlayClientBlockDig18 -> org.cyberpwn.react.quor:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$PlayerDigType getStatus() -> qddU
    void setStatus(com.comphenix.protocol.wrappers.EnumWrappers$PlayerDigType) -> WGJb
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object ol(java.lang.Object,java.lang.Object,java.lang.Object) -> ogLy
react.protocol.wrapper.WrapperPlayClientBlockPlace -> org.cyberpwn.react.twIh:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$Hand getHand() -> sIHV
    void setHand(com.comphenix.protocol.wrappers.EnumWrappers$Hand) -> WGJb
    long getTimestamp() -> getTimestamp
    void setTimestamp(long) -> PBWD
    void <clinit>() -> <clinit>
    java.lang.Object Rz(java.lang.Object,java.lang.Object,java.lang.Object) -> xWsx
react.protocol.wrapper.WrapperPlayClientBlockPlace18 -> org.cyberpwn.react.XuYm:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    int getFace() -> getFace
    void setFace(int) -> eaXS
    org.bukkit.inventory.ItemStack getHeldItem() -> wfVM
    void setHeldItem(org.bukkit.inventory.ItemStack) -> WGJb
    float getCursorPositionX() -> OGpo
    void setCursorPositionX(float) -> wnYS
    float getCursorPositionY() -> YUoM
    void setCursorPositionY(float) -> SCOM
    float getCursorPositionZ() -> IqTb
    void setCursorPositionZ(float) -> SmbW
    void <clinit>() -> <clinit>
    java.lang.Object Po(java.lang.Object,java.lang.Object,java.lang.Object) -> hQNI
react.protocol.wrapper.WrapperPlayClientBoatMove -> org.cyberpwn.react.FNbr:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    boolean getLeftOar() -> UARX
    void setLeftOar(boolean) -> nJMP
    boolean getRightOar() -> UcVF
    void setRightOar(boolean) -> WXLP
    void <clinit>() -> <clinit>
    java.lang.Object Es(java.lang.Object,java.lang.Object,java.lang.Object) -> sPuY
react.protocol.wrapper.WrapperPlayClientChat -> org.cyberpwn.react.gyUP:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getMessage() -> getMessage
    void setMessage(java.lang.String) -> setMessage
    void <clinit>() -> <clinit>
    java.lang.Object Hp(java.lang.Object,java.lang.Object,java.lang.Object) -> eYOu
react.protocol.wrapper.WrapperPlayClientChat18 -> org.cyberpwn.react.DkAW:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getMessage() -> getMessage
    void setMessage(java.lang.String) -> setMessage
    void <clinit>() -> <clinit>
    java.lang.Object dh(java.lang.Object,java.lang.Object,java.lang.Object) -> owfy
react.protocol.wrapper.WrapperPlayClientClientCommand -> org.cyberpwn.react.gqDh:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$ClientCommand getAction() -> SmpG
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$ClientCommand) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Mc(java.lang.Object,java.lang.Object,java.lang.Object) -> APJD
react.protocol.wrapper.WrapperPlayClientClientCommand18 -> org.cyberpwn.react.GkXs:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$ClientCommand getAction() -> SmpG
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$ClientCommand) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Vn(java.lang.Object,java.lang.Object,java.lang.Object) -> sIDj
react.protocol.wrapper.WrapperPlayClientCloseWindow -> org.cyberpwn.react.XJfJ:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    void <clinit>() -> <clinit>
    java.lang.Object WS(java.lang.Object,java.lang.Object,java.lang.Object) -> MRkB
react.protocol.wrapper.WrapperPlayClientCloseWindow18 -> org.cyberpwn.react.bigo:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    void <clinit>() -> <clinit>
    java.lang.Object Nd(java.lang.Object,java.lang.Object,java.lang.Object) -> gEby
react.protocol.wrapper.WrapperPlayClientCustomPayload -> org.cyberpwn.react.uypA:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getChannel() -> getChannel
    void setChannel(java.lang.String) -> Vmyy
    io.netty.buffer.ByteBuf getContentsBuffer() -> vbrR
    byte[] getContents() -> xqiU
    void setContentsBuffer(io.netty.buffer.ByteBuf) -> WGJb
    void setContents(byte[]) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object xb(java.lang.Object,java.lang.Object,java.lang.Object) -> gyIC
react.protocol.wrapper.WrapperPlayClientCustomPayload18 -> org.cyberpwn.react.tLYT:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getChannel() -> getChannel
    void setChannel(java.lang.String) -> Vmyy
    io.netty.buffer.ByteBuf getContentsBuffer() -> vbrR
    byte[] getContents() -> xqiU
    void setContentsBuffer(io.netty.buffer.ByteBuf) -> WGJb
    void setContents(byte[]) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object xp(java.lang.Object,java.lang.Object,java.lang.Object) -> dxPN
react.protocol.wrapper.WrapperPlayClientEnchantItem -> org.cyberpwn.react.Lqya:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(byte) -> wnYS
    int getEnchantment() -> ankK
    void setEnchantment(int) -> jODi
    void <clinit>() -> <clinit>
    java.lang.Object YO(java.lang.Object,java.lang.Object,java.lang.Object) -> lLeY
react.protocol.wrapper.WrapperPlayClientEnchantItem18 -> org.cyberpwn.react.HwPI:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(byte) -> wnYS
    int getEnchantment() -> ankK
    void setEnchantment(int) -> jODi
    void <clinit>() -> <clinit>
    java.lang.Object CN(java.lang.Object,java.lang.Object,java.lang.Object) -> RjmU
react.protocol.wrapper.WrapperPlayClientEntityAction -> org.cyberpwn.react.qBnu:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    com.comphenix.protocol.wrappers.EnumWrappers$PlayerAction getAction() -> HLQP
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$PlayerAction) -> WGJb
    int getJumpBoost() -> twBq
    void setJumpBoost(int) -> anaA
    void <clinit>() -> <clinit>
    java.lang.Object aL(java.lang.Object,java.lang.Object,java.lang.Object) -> maKO
react.protocol.wrapper.WrapperPlayClientEntityAction18 -> org.cyberpwn.react.vcaN:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    com.comphenix.protocol.wrappers.EnumWrappers$PlayerAction getAction() -> HLQP
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$PlayerAction) -> WGJb
    int getJumpBoost() -> twBq
    void setJumpBoost(int) -> anaA
    void <clinit>() -> <clinit>
    java.lang.Object AN(java.lang.Object,java.lang.Object,java.lang.Object) -> pHPw
react.protocol.wrapper.WrapperPlayClientFlying -> org.cyberpwn.react.VxHe:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object Ng(java.lang.Object,java.lang.Object,java.lang.Object) -> jqTJ
react.protocol.wrapper.WrapperPlayClientFlying18 -> org.cyberpwn.react.PmfH:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object Fh(java.lang.Object,java.lang.Object,java.lang.Object) -> CUpP
react.protocol.wrapper.WrapperPlayClientHeldItemSlot -> org.cyberpwn.react.futQ:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getSlot() -> getSlot
    void setSlot(int) -> CEGd
    void <clinit>() -> <clinit>
    java.lang.Object aY(java.lang.Object,java.lang.Object,java.lang.Object) -> satA
react.protocol.wrapper.WrapperPlayClientHeldItemSlot18 -> org.cyberpwn.react.QWWL:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getSlot() -> getSlot
    void setSlot(int) -> CEGd
    void <clinit>() -> <clinit>
    java.lang.Object eJ(java.lang.Object,java.lang.Object,java.lang.Object) -> Dadv
react.protocol.wrapper.WrapperPlayClientKeepAlive -> org.cyberpwn.react.pPlv:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getKeepAliveId() -> VoMA
    void setKeepAliveId(int) -> XdFb
    void <clinit>() -> <clinit>
    java.lang.Object QL(java.lang.Object,java.lang.Object,java.lang.Object) -> VTwR
react.protocol.wrapper.WrapperPlayClientKeepAlive18 -> org.cyberpwn.react.tUIq:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getKeepAliveId() -> VoMA
    void setKeepAliveId(int) -> XdFb
    void <clinit>() -> <clinit>
    java.lang.Object aZ(java.lang.Object,java.lang.Object,java.lang.Object) -> KCvN
react.protocol.wrapper.WrapperPlayClientLook -> org.cyberpwn.react.AaYt:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object Iq(java.lang.Object,java.lang.Object,java.lang.Object) -> yckm
react.protocol.wrapper.WrapperPlayClientLook18 -> org.cyberpwn.react.hcHc:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object iD(java.lang.Object,java.lang.Object,java.lang.Object) -> ETHM
react.protocol.wrapper.WrapperPlayClientPosition -> org.cyberpwn.react.lVBp:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object Lc(java.lang.Object,java.lang.Object,java.lang.Object) -> xFui
react.protocol.wrapper.WrapperPlayClientPosition18 -> org.cyberpwn.react.gNcW:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object Qx(java.lang.Object,java.lang.Object,java.lang.Object) -> TNqH
react.protocol.wrapper.WrapperPlayClientPositionLook -> org.cyberpwn.react.qBnU:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object qR(java.lang.Object,java.lang.Object,java.lang.Object) -> PJtl
react.protocol.wrapper.WrapperPlayClientPositionLook18 -> org.cyberpwn.react.AjKP:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object jF(java.lang.Object,java.lang.Object,java.lang.Object) -> ktUv
react.protocol.wrapper.WrapperPlayClientResourcePackStatus -> org.cyberpwn.react.iUIb:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$ResourcePackStatus getResult() -> ccnv
    void setResult(com.comphenix.protocol.wrappers.EnumWrappers$ResourcePackStatus) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object eb(java.lang.Object,java.lang.Object,java.lang.Object) -> vQqb
react.protocol.wrapper.WrapperPlayClientResourcePackStatus18 -> org.cyberpwn.react.oolM:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getHash() -> getHash
    void setHash(java.lang.String) -> ESVk
    com.comphenix.protocol.wrappers.EnumWrappers$ResourcePackStatus getResult() -> ccnv
    void setResult(com.comphenix.protocol.wrappers.EnumWrappers$ResourcePackStatus) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Zd(java.lang.Object,java.lang.Object,java.lang.Object) -> JcPM
react.protocol.wrapper.WrapperPlayClientSetCreativeSlot -> org.cyberpwn.react.FqHs:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getSlot() -> getSlot
    void setSlot(int) -> CEGd
    org.bukkit.inventory.ItemStack getClickedItem() -> Hmrq
    void setClickedItem(org.bukkit.inventory.ItemStack) -> dfal
    void <clinit>() -> <clinit>
    java.lang.Object QF(java.lang.Object,java.lang.Object,java.lang.Object) -> WXYa
react.protocol.wrapper.WrapperPlayClientSetCreativeSlot18 -> org.cyberpwn.react.VnuO:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getSlot() -> getSlot
    void setSlot(int) -> CEGd
    org.bukkit.inventory.ItemStack getClickedItem() -> Hmrq
    void setClickedItem(org.bukkit.inventory.ItemStack) -> dfal
    void <clinit>() -> <clinit>
    java.lang.Object qP(java.lang.Object,java.lang.Object,java.lang.Object) -> OPbE
react.protocol.wrapper.WrapperPlayClientSettings -> org.cyberpwn.react.cBWL:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getLocale() -> getLocale
    void setLocale(java.lang.String) -> DPSk
    int getViewDistance() -> getViewDistance
    void setViewDistance(byte) -> SCOM
    com.comphenix.protocol.wrappers.EnumWrappers$ChatVisibility getChatFlags() -> UsyJ
    void setChatFlags(com.comphenix.protocol.wrappers.EnumWrappers$ChatVisibility) -> WGJb
    boolean getChatColours() -> gNYk
    void setChatColours(boolean) -> TqEp
    int getDisplayedSkinParts() -> Ukgu
    void setDisplayedSkinParts(int) -> lfPF
    void <clinit>() -> <clinit>
    java.lang.Object Uh(java.lang.Object,java.lang.Object,java.lang.Object) -> ESdy
react.protocol.wrapper.WrapperPlayClientSettings18 -> org.cyberpwn.react.hIVB:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getLocale() -> getLocale
    void setLocale(java.lang.String) -> DPSk
    int getViewDistance() -> getViewDistance
    void setViewDistance(byte) -> SCOM
    com.comphenix.protocol.wrappers.EnumWrappers$ChatVisibility getChatFlags() -> UsyJ
    void setChatFlags(com.comphenix.protocol.wrappers.EnumWrappers$ChatVisibility) -> WGJb
    boolean getChatColours() -> gNYk
    void setChatColours(boolean) -> TqEp
    int getDisplayedSkinParts() -> Ukgu
    void setDisplayedSkinParts(int) -> lfPF
    void <clinit>() -> <clinit>
    java.lang.Object Ti(java.lang.Object,java.lang.Object,java.lang.Object) -> TOPX
react.protocol.wrapper.WrapperPlayClientSpectate -> org.cyberpwn.react.ySWC:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.util.UUID getTargetPlayer() -> yAjx
    void setTargetPlayer(java.util.UUID) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object rn(java.lang.Object,java.lang.Object,java.lang.Object) -> Knhk
react.protocol.wrapper.WrapperPlayClientSpectate18 -> org.cyberpwn.react.UkuG:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.util.UUID getTargetPlayer() -> yAjx
    void setTargetPlayer(java.util.UUID) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Re(java.lang.Object,java.lang.Object,java.lang.Object) -> oDlM
react.protocol.wrapper.WrapperPlayClientSteerVehicle -> org.cyberpwn.react.iwOr:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    float getSideways() -> VoML
    void setSideways(float) -> ePRm
    float getForward() -> wfYO
    void setForward(float) -> CgEJ
    boolean isJump() -> BRoL
    void setJump(boolean) -> OYFP
    boolean isUnmount() -> BAlx
    void setUnmount(boolean) -> UAEN
    void <clinit>() -> <clinit>
    java.lang.Object bD(java.lang.Object,java.lang.Object,java.lang.Object) -> ghIa
react.protocol.wrapper.WrapperPlayClientSteerVehicle18 -> org.cyberpwn.react.pYaM:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    float getSideways() -> VoML
    void setSideways(float) -> ePRm
    float getForward() -> wfYO
    void setForward(float) -> CgEJ
    boolean isJump() -> BRoL
    void setJump(boolean) -> OYFP
    boolean isUnmount() -> BAlx
    void setUnmount(boolean) -> UAEN
    void <clinit>() -> <clinit>
    java.lang.Object Db(java.lang.Object,java.lang.Object,java.lang.Object) -> UlFP
react.protocol.wrapper.WrapperPlayClientTabComplete -> org.cyberpwn.react.Qxys:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    com.comphenix.protocol.wrappers.BlockPosition getHasPosition() -> qdgW
    void setHasPosition(com.comphenix.protocol.wrappers.BlockPosition) -> dfal
    com.comphenix.protocol.wrappers.BlockPosition getLookedAtBlock() -> Eukv
    void setLookedAtBlock(com.comphenix.protocol.wrappers.BlockPosition) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object eZ(java.lang.Object,java.lang.Object,java.lang.Object) -> kcMC
react.protocol.wrapper.WrapperPlayClientTabComplete18 -> org.cyberpwn.react.IWqH:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    com.comphenix.protocol.wrappers.BlockPosition getHasPosition() -> qdgW
    void setHasPosition(com.comphenix.protocol.wrappers.BlockPosition) -> dfal
    com.comphenix.protocol.wrappers.BlockPosition getLookedAtBlock() -> Eukv
    void setLookedAtBlock(com.comphenix.protocol.wrappers.BlockPosition) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object gE(java.lang.Object,java.lang.Object,java.lang.Object) -> rowv
react.protocol.wrapper.WrapperPlayClientTeleportAccept -> org.cyberpwn.react.RQix:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getTeleportId() -> fvJg
    void setTeleportId(int) -> YEFe
    void <clinit>() -> <clinit>
    java.lang.Object Wa(java.lang.Object,java.lang.Object,java.lang.Object) -> cclN
react.protocol.wrapper.WrapperPlayClientTransaction -> org.cyberpwn.react.fSsK:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(byte) -> wnYS
    short getActionNumber() -> xqlY
    void setActionNumber(short) -> WGJb
    boolean getAccepted() -> opCl
    void setAccepted(boolean) -> VDGt
    void <clinit>() -> <clinit>
    java.lang.Object Nz(java.lang.Object,java.lang.Object,java.lang.Object) -> ofoS
react.protocol.wrapper.WrapperPlayClientTransaction18 -> org.cyberpwn.react.UcdX:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(byte) -> wnYS
    short getActionNumber() -> xqlY
    void setActionNumber(short) -> WGJb
    boolean getAccepted() -> opCl
    void setAccepted(boolean) -> VDGt
    void <clinit>() -> <clinit>
    java.lang.Object WC(java.lang.Object,java.lang.Object,java.lang.Object) -> FEaw
react.protocol.wrapper.WrapperPlayClientUpdateSign -> org.cyberpwn.react.woVw:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    java.lang.String[] getLines() -> getLines
    void setLines(java.lang.String[]) -> dfal
    void <clinit>() -> <clinit>
    java.lang.Object WV(java.lang.Object,java.lang.Object,java.lang.Object) -> Fxkg
react.protocol.wrapper.WrapperPlayClientUpdateSign18 -> org.cyberpwn.react.WPXx:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    com.comphenix.protocol.wrappers.WrappedChatComponent[] getLines() -> htAD
    void setLines(com.comphenix.protocol.wrappers.WrappedChatComponent[]) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object jn(java.lang.Object,java.lang.Object,java.lang.Object) -> pjRs
react.protocol.wrapper.WrapperPlayClientUseEntity -> org.cyberpwn.react.lMSr:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getTargetID() -> lCuk
    org.bukkit.entity.Entity getTarget(org.bukkit.World) -> sHYj
    org.bukkit.entity.Entity getTarget(com.comphenix.protocol.events.PacketEvent) -> dfal
    void setTargetID(int) -> BcgA
    com.comphenix.protocol.wrappers.EnumWrappers$EntityUseAction getType() -> rFGi
    void setType(com.comphenix.protocol.wrappers.EnumWrappers$EntityUseAction) -> WGJb
    org.bukkit.util.Vector getTargetVector() -> YwtE
    void setTargetVector(org.bukkit.util.Vector) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Rd(java.lang.Object,java.lang.Object,java.lang.Object) -> HwBe
react.protocol.wrapper.WrapperPlayClientUseEntity18 -> org.cyberpwn.react.xHFY:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getTargetID() -> lCuk
    org.bukkit.entity.Entity getTarget(org.bukkit.World) -> sHYj
    org.bukkit.entity.Entity getTarget(com.comphenix.protocol.events.PacketEvent) -> dfal
    void setTargetID(int) -> BcgA
    com.comphenix.protocol.wrappers.EnumWrappers$EntityUseAction getType() -> rFGi
    void setType(com.comphenix.protocol.wrappers.EnumWrappers$EntityUseAction) -> WGJb
    org.bukkit.util.Vector getTargetVector() -> YwtE
    void setTargetVector(org.bukkit.util.Vector) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object yG(java.lang.Object,java.lang.Object,java.lang.Object) -> qddU
react.protocol.wrapper.WrapperPlayClientUseItem -> org.cyberpwn.react.CgbU:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    com.comphenix.protocol.wrappers.EnumWrappers$Direction getFace() -> eadM
    void setFace(com.comphenix.protocol.wrappers.EnumWrappers$Direction) -> dfal
    com.comphenix.protocol.wrappers.EnumWrappers$Hand getHand() -> sIHV
    void setHand(com.comphenix.protocol.wrappers.EnumWrappers$Hand) -> WGJb
    float getCursorPositionX() -> OGpo
    void setCursorPositionX(float) -> wnYS
    float getCursorPositionY() -> YUoM
    void setCursorPositionY(float) -> SCOM
    float getCursorPositionZ() -> IqTb
    void setCursorPositionZ(float) -> SmbW
    void <clinit>() -> <clinit>
    java.lang.Object Qp(java.lang.Object,java.lang.Object,java.lang.Object) -> XJNQ
react.protocol.wrapper.WrapperPlayClientVehicleMove -> org.cyberpwn.react.stLY:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    void <clinit>() -> <clinit>
    java.lang.Object MV(java.lang.Object,java.lang.Object,java.lang.Object) -> sIHV
react.protocol.wrapper.WrapperPlayClientWindowClick -> org.cyberpwn.react.LjLj:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    int getSlot() -> getSlot
    void setSlot(int) -> CEGd
    int getButton() -> getButton
    void setButton(int) -> dEFO
    short getActionNumber() -> xqlY
    void setActionNumber(short) -> WGJb
    org.bukkit.inventory.ItemStack getClickedItem() -> Hmrq
    void setClickedItem(org.bukkit.inventory.ItemStack) -> dfal
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType getShift() -> ksvf
    void setShift(react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object tf(java.lang.Object,java.lang.Object,java.lang.Object) -> wfVM
react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType -> org.cyberpwn.react.UJSY:
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType PICKUP -> uQEd
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType QUICK_MOVE -> jiwW
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType SWAP -> MUCq
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType CLONE -> Obxu
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType THROW -> foLh
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType QUICK_CRAFT -> SNDY
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType PICKUP_ALL -> oiFO
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType[] $VALUES -> BKqP
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType[] values() -> values
    react.protocol.wrapper.WrapperPlayClientWindowClick$InventoryClickType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object sG(java.lang.Object,java.lang.Object,java.lang.Object) -> OGpo
react.protocol.wrapper.WrapperPlayClientWindowClick18 -> org.cyberpwn.react.SeoW:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    int getSlot() -> getSlot
    void setSlot(int) -> CEGd
    int getButton() -> getButton
    void setButton(int) -> dEFO
    short getActionNumber() -> xqlY
    void setActionNumber(short) -> WGJb
    int getMode() -> getMode
    void setMode(int) -> setMode
    org.bukkit.inventory.ItemStack getClickedItem() -> Hmrq
    void setClickedItem(org.bukkit.inventory.ItemStack) -> dfal
    void <clinit>() -> <clinit>
    java.lang.Object xz(java.lang.Object,java.lang.Object,java.lang.Object) -> YUoM
react.protocol.wrapper.WrapperPlayServerAbilities -> org.cyberpwn.react.HClm:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    boolean isInvulnurable() -> UlFP
    void setInvulnurable(boolean) -> SmbW
    boolean isFlying() -> isFlying
    void setFlying(boolean) -> setFlying
    boolean canFly() -> rowv
    void setCanFly(boolean) -> ePRm
    boolean canInstantlyBuild() -> cclN
    void setCanInstantlyBuild(boolean) -> CgEJ
    float getFlyingSpeed() -> ofoS
    void setFlyingSpeed(float) -> KejP
    float getWalkingSpeed() -> Fxkg
    void setWalkingSpeed(float) -> mOYk
    void <clinit>() -> <clinit>
    java.lang.Object vW(java.lang.Object,java.lang.Object,java.lang.Object) -> IqTb
react.protocol.wrapper.WrapperPlayServerAbilities18 -> org.cyberpwn.react.vtcn:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    boolean isInvulnurable() -> UlFP
    void setInvulnurable(boolean) -> SmbW
    boolean isFlying() -> isFlying
    void setFlying(boolean) -> setFlying
    boolean canFly() -> rowv
    void setCanFly(boolean) -> ePRm
    boolean canInstantlyBuild() -> cclN
    void setCanInstantlyBuild(boolean) -> CgEJ
    float getFlyingSpeed() -> ofoS
    void setFlyingSpeed(float) -> KejP
    float getWalkingSpeed() -> Fxkg
    void setWalkingSpeed(float) -> mOYk
    void <clinit>() -> <clinit>
    java.lang.Object iR(java.lang.Object,java.lang.Object,java.lang.Object) -> EucO
react.protocol.wrapper.WrapperPlayServerAnimation -> org.cyberpwn.react.lUdg:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    int getAnimation() -> vsut
    void setAnimation(int) -> JQkh
    void <clinit>() -> <clinit>
    java.lang.Object iX(java.lang.Object,java.lang.Object,java.lang.Object) -> UARX
react.protocol.wrapper.WrapperPlayServerAnimation18 -> org.cyberpwn.react.gWVV:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    int getAnimation() -> vsut
    void setAnimation(int) -> JQkh
    void <clinit>() -> <clinit>
    java.lang.Object aT(java.lang.Object,java.lang.Object,java.lang.Object) -> UcVF
react.protocol.wrapper.WrapperPlayServerAttachEntity -> org.cyberpwn.react.AXkS:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    int getVehicleId() -> oENu
    void setVehicleId(int) -> Tgyu
    void <clinit>() -> <clinit>
    java.lang.Object qV(java.lang.Object,java.lang.Object,java.lang.Object) -> SmpG
react.protocol.wrapper.WrapperPlayServerAttachEntity18 -> org.cyberpwn.react.LHGl:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    int getVehicleId() -> oENu
    void setVehicleId(int) -> Tgyu
    boolean getLeash() -> hIJi
    void setLeash(boolean) -> sHYj
    void <clinit>() -> <clinit>
    java.lang.Object nA(java.lang.Object,java.lang.Object,java.lang.Object) -> JIbx
react.protocol.wrapper.WrapperPlayServerBed -> org.cyberpwn.react.VMUI:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Ty(java.lang.Object,java.lang.Object,java.lang.Object) -> vbrR
react.protocol.wrapper.WrapperPlayServerBed18 -> org.cyberpwn.react.hcJc:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object OV(java.lang.Object,java.lang.Object,java.lang.Object) -> xqiU
react.protocol.wrapper.WrapperPlayServerBlockAction -> org.cyberpwn.react.sjyS:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    int getByte1() -> YUqM
    void setByte1(int) -> doXr
    int getByte2() -> OivM
    void setByte2(int) -> wUNL
    org.bukkit.Material getBlockType() -> Iyfl
    void setBlockType(org.bukkit.Material) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object zv(java.lang.Object,java.lang.Object,java.lang.Object) -> avqR
react.protocol.wrapper.WrapperPlayServerBlockAction18 -> org.cyberpwn.react.pbPo:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    int getByte1() -> YUqM
    void setByte1(int) -> doXr
    int getByte2() -> OivM
    void setByte2(int) -> wUNL
    org.bukkit.Material getBlockType() -> Iyfl
    void setBlockType(org.bukkit.Material) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object uf(java.lang.Object,java.lang.Object,java.lang.Object) -> ankK
react.protocol.wrapper.WrapperPlayServerBlockBreakAnimation -> org.cyberpwn.react.lgGG:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    int getDestroyStage() -> dUow
    void setDestroyStage(int) -> BReH
    void <clinit>() -> <clinit>
    java.lang.Object Px(java.lang.Object,java.lang.Object,java.lang.Object) -> vRTo
react.protocol.wrapper.WrapperPlayServerBlockBreakAnimation18 -> org.cyberpwn.react.PBrL:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    int getDestroyStage() -> dUow
    void setDestroyStage(int) -> BReH
    void <clinit>() -> <clinit>
    java.lang.Object ab(java.lang.Object,java.lang.Object,java.lang.Object) -> HLQP
react.protocol.wrapper.WrapperPlayServerBlockChange -> org.cyberpwn.react.VnwA:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    org.bukkit.Location getBukkitLocation(org.bukkit.World) -> ssMp
    com.comphenix.protocol.wrappers.WrappedBlockData getBlockData() -> ksvS
    void setBlockData(com.comphenix.protocol.wrappers.WrappedBlockData) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object hQ(java.lang.Object,java.lang.Object,java.lang.Object) -> twBq
react.protocol.wrapper.WrapperPlayServerBlockChange18 -> org.cyberpwn.react.loWL:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    org.bukkit.Location getBukkitLocation(org.bukkit.World) -> ssMp
    com.comphenix.protocol.wrappers.WrappedBlockData getBlockData() -> ksvS
    void setBlockData(com.comphenix.protocol.wrappers.WrappedBlockData) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Ma(java.lang.Object,java.lang.Object,java.lang.Object) -> vtWl
react.protocol.wrapper.WrapperPlayServerCamera -> org.cyberpwn.react.CyCX:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getCameraId() -> FhNF
    void setCameraId(int) -> SmhX
    void <clinit>() -> <clinit>
    java.lang.Object aH(java.lang.Object,java.lang.Object,java.lang.Object) -> VoMA
react.protocol.wrapper.WrapperPlayServerCamera18 -> org.cyberpwn.react.scIw:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getCameraId() -> FhNF
    void setCameraId(int) -> SmhX
    void <clinit>() -> <clinit>
    java.lang.Object SW(java.lang.Object,java.lang.Object,java.lang.Object) -> ccnv
react.protocol.wrapper.WrapperPlayServerChat -> org.cyberpwn.react.prrI:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedChatComponent getMessage() -> OYUi
    com.comphenix.protocol.wrappers.WrappedChatComponent getJsonData() -> ghIa
    void setMessage(com.comphenix.protocol.wrappers.WrappedChatComponent) -> lTgP
    void setJsonData(com.comphenix.protocol.wrappers.WrappedChatComponent) -> dfal
    byte getPosition() -> opBi
    void setPosition(byte) -> SmbW
    void <clinit>() -> <clinit>
    java.lang.Object Xz(java.lang.Object,java.lang.Object,java.lang.Object) -> Hmrq
react.protocol.wrapper.WrapperPlayServerChat18 -> org.cyberpwn.react.Blnu:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedChatComponent getMessage() -> OYUi
    com.comphenix.protocol.wrappers.WrappedChatComponent getJsonData() -> ghIa
    void setMessage(com.comphenix.protocol.wrappers.WrappedChatComponent) -> lTgP
    void setJsonData(com.comphenix.protocol.wrappers.WrappedChatComponent) -> dfal
    byte getPosition() -> opBi
    void setPosition(byte) -> SmbW
    void <clinit>() -> <clinit>
    java.lang.Object XY(java.lang.Object,java.lang.Object,java.lang.Object) -> UsyJ
react.protocol.wrapper.WrapperPlayServerCloseWindow -> org.cyberpwn.react.kRaY:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    void <clinit>() -> <clinit>
    java.lang.Object UL(java.lang.Object,java.lang.Object,java.lang.Object) -> gNYk
react.protocol.wrapper.WrapperPlayServerCloseWindow18 -> org.cyberpwn.react.rqIE:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    void <clinit>() -> <clinit>
    java.lang.Object Pw(java.lang.Object,java.lang.Object,java.lang.Object) -> Ukgu
react.protocol.wrapper.WrapperPlayServerCollect -> org.cyberpwn.react.jrBX:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getCollectedEntityId() -> Edif
    void setCollectedEntityId(int) -> DGit
    int getCollectorEntityId() -> fBdY
    void setCollectorEntityId(int) -> GsWW
    void <clinit>() -> <clinit>
    java.lang.Object pC(java.lang.Object,java.lang.Object,java.lang.Object) -> yAjx
react.protocol.wrapper.WrapperPlayServerCollect18 -> org.cyberpwn.react.nAwF:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getCollectedEntityId() -> Edif
    void setCollectedEntityId(int) -> DGit
    int getCollectorEntityId() -> fBdY
    void setCollectorEntityId(int) -> GsWW
    void <clinit>() -> <clinit>
    java.lang.Object zG(java.lang.Object,java.lang.Object,java.lang.Object) -> zG
react.protocol.wrapper.WrapperPlayServerCombatEvent -> org.cyberpwn.react.EvXY:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$CombatEventType getEvent() -> SwDX
    void setEvent(com.comphenix.protocol.wrappers.EnumWrappers$CombatEventType) -> WGJb
    int getDuration() -> getDuration
    void setDuration(int) -> setDuration
    int getPlayerID() -> xOkk
    void setPlayerId(int) -> GHcP
    int getEntityID() -> vRTo
    void setEntityId(int) -> SCTm
    java.lang.String getMessage() -> getMessage
    void setMessage(java.lang.String) -> setMessage
    void <clinit>() -> <clinit>
    java.lang.Object kf(java.lang.Object,java.lang.Object,java.lang.Object) -> VoML
react.protocol.wrapper.WrapperPlayServerCombatEvent$1 -> org.cyberpwn.react.EmgS:
    int[] $SwitchMap$com$comphenix$protocol$wrappers$EnumWrappers$CombatEventType -> pcXH
    void <clinit>() -> <clinit>
    java.lang.Object CS(java.lang.Object,java.lang.Object,java.lang.Object) -> wfYO
react.protocol.wrapper.WrapperPlayServerCombatEvent18 -> org.cyberpwn.react.QVwP:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$CombatEventType getEvent() -> SwDX
    void setEvent(com.comphenix.protocol.wrappers.EnumWrappers$CombatEventType) -> WGJb
    int getDuration() -> getDuration
    void setDuration(int) -> setDuration
    int getPlayerID() -> xOkk
    void setPlayerId(int) -> GHcP
    int getEntityID() -> vRTo
    void setEntityId(int) -> SCTm
    java.lang.String getMessage() -> getMessage
    void setMessage(java.lang.String) -> setMessage
    void <clinit>() -> <clinit>
    java.lang.Object yH(java.lang.Object,java.lang.Object,java.lang.Object) -> ggch
react.protocol.wrapper.WrapperPlayServerCombatEvent18$1 -> org.cyberpwn.react.OQRO:
    int[] $SwitchMap$com$comphenix$protocol$wrappers$EnumWrappers$CombatEventType -> pcXH
    void <clinit>() -> <clinit>
    java.lang.Object iH(java.lang.Object,java.lang.Object,java.lang.Object) -> BRoL
react.protocol.wrapper.WrapperPlayServerCraftProgressBar18 -> org.cyberpwn.react.tLYi:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    int getProperty() -> BtuA
    void setProperty(int) -> oLts
    int getValue() -> getValue
    void setValue(int) -> setValue
    void <clinit>() -> <clinit>
    java.lang.Object ru(java.lang.Object,java.lang.Object,java.lang.Object) -> BAlx
react.protocol.wrapper.WrapperPlayServerCustomPayload -> org.cyberpwn.react.JdEi:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getChannel() -> getChannel
    void setChannel(java.lang.String) -> Vmyy
    io.netty.buffer.ByteBuf getContentsBuffer() -> vbrR
    byte[] getContents() -> xqiU
    void setContentsBuffer(io.netty.buffer.ByteBuf) -> WGJb
    void setContents(byte[]) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object rJ(java.lang.Object,java.lang.Object,java.lang.Object) -> qdgW
react.protocol.wrapper.WrapperPlayServerCustomPayload18 -> org.cyberpwn.react.qeSi:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getChannel() -> getChannel
    void setChannel(java.lang.String) -> Vmyy
    io.netty.buffer.ByteBuf getContentsBuffer() -> vbrR
    byte[] getContents() -> xqiU
    void setContentsBuffer(io.netty.buffer.ByteBuf) -> WGJb
    void setContents(byte[]) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object Yw(java.lang.Object,java.lang.Object,java.lang.Object) -> fAyS
react.protocol.wrapper.WrapperPlayServerCustomSoundEffect -> org.cyberpwn.react.uFoT:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getSoundName() -> EBiQ
    void setSoundName(java.lang.String) -> tupB
    com.comphenix.protocol.wrappers.EnumWrappers$SoundCategory getSoundCategory() -> FFLq
    void setSoundCategory(com.comphenix.protocol.wrappers.EnumWrappers$SoundCategory) -> WGJb
    int getX() -> getX
    void setX(int) -> setX
    int getY() -> getY
    void setY(int) -> setY
    int getZ() -> getZ
    void setZ(int) -> setZ
    float getVolume() -> pHUN
    void setVolume(float) -> nJMP
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    void <clinit>() -> <clinit>
    java.lang.Object xN(java.lang.Object,java.lang.Object,java.lang.Object) -> Eukv
react.protocol.wrapper.WrapperPlayServerEntity -> org.cyberpwn.react.vIrU:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object sN(java.lang.Object,java.lang.Object,java.lang.Object) -> fvJg
react.protocol.wrapper.WrapperPlayServerEntity18 -> org.cyberpwn.react.RQlT:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object ZS(java.lang.Object,java.lang.Object,java.lang.Object) -> xqlY
react.protocol.wrapper.WrapperPlayServerEntityDestroy -> org.cyberpwn.react.gOHr:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getCount() -> getCount
    int[] getEntityIDs() -> FElV
    void setEntityIds(int[]) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object zl(java.lang.Object,java.lang.Object,java.lang.Object) -> opCl
react.protocol.wrapper.WrapperPlayServerEntityDestroy18 -> org.cyberpwn.react.rgxs:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getCount() -> getCount
    int[] getEntityIDs() -> FElV
    void setEntityIds(int[]) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object PE(java.lang.Object,java.lang.Object,java.lang.Object) -> GbXW
react.protocol.wrapper.WrapperPlayServerEntityEffect -> org.cyberpwn.react.bikk:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    byte getEffectID() -> APNs
    void setEffectID(byte) -> ePRm
    byte getAmplifier() -> Gjqx
    void setAmplifier(byte) -> CgEJ
    int getDuration() -> getDuration
    void setDuration(int) -> setDuration
    boolean getHideParticles() -> iDAa
    void setHideParticles(boolean) -> ssMp
    void <clinit>() -> <clinit>
    java.lang.Object US(java.lang.Object,java.lang.Object,java.lang.Object) -> htAD
react.protocol.wrapper.WrapperPlayServerEntityEffect18 -> org.cyberpwn.react.iCkq:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    byte getEffectID() -> APNs
    void setEffectID(byte) -> ePRm
    byte getAmplifier() -> Gjqx
    void setAmplifier(byte) -> CgEJ
    int getDuration() -> getDuration
    void setDuration(int) -> setDuration
    boolean getHideParticles() -> iDAa
    void setHideParticles(boolean) -> ssMp
    void <clinit>() -> <clinit>
    java.lang.Object zD(java.lang.Object,java.lang.Object,java.lang.Object) -> uVxs
react.protocol.wrapper.WrapperPlayServerEntityEquipment -> org.cyberpwn.react.DYea:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    com.comphenix.protocol.wrappers.EnumWrappers$ItemSlot getSlot() -> NgWN
    void setSlot(com.comphenix.protocol.wrappers.EnumWrappers$ItemSlot) -> WGJb
    org.bukkit.inventory.ItemStack getItem() -> getItem
    void setItem(org.bukkit.inventory.ItemStack) -> setItem
    void <clinit>() -> <clinit>
    java.lang.Object EP(java.lang.Object,java.lang.Object,java.lang.Object) -> lCuk
react.protocol.wrapper.WrapperPlayServerEntityEquipment18 -> org.cyberpwn.react.BeAK:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    int getSlot() -> getSlot
    void setSlot(int) -> CEGd
    org.bukkit.inventory.ItemStack getItem() -> getItem
    void setItem(org.bukkit.inventory.ItemStack) -> setItem
    void <clinit>() -> <clinit>
    java.lang.Object BA(java.lang.Object,java.lang.Object,java.lang.Object) -> rFGi
react.protocol.wrapper.WrapperPlayServerEntityHeadRotation -> org.cyberpwn.react.jOaA:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    byte getHeadYaw() -> oUqv
    void setHeadYaw(byte) -> nJMP
    void <clinit>() -> <clinit>
    java.lang.Object Pv(java.lang.Object,java.lang.Object,java.lang.Object) -> YwtE
react.protocol.wrapper.WrapperPlayServerEntityHeadRotation18 -> org.cyberpwn.react.NxeL:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    byte getHeadYaw() -> oUqv
    void setHeadYaw(byte) -> nJMP
    void <clinit>() -> <clinit>
    java.lang.Object tt(java.lang.Object,java.lang.Object,java.lang.Object) -> eadM
react.protocol.wrapper.WrapperPlayServerEntityLook -> org.cyberpwn.react.lgHq:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object jl(java.lang.Object,java.lang.Object,java.lang.Object) -> ksvf
react.protocol.wrapper.WrapperPlayServerEntityLook18 -> org.cyberpwn.react.JlYK:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object ou(java.lang.Object,java.lang.Object,java.lang.Object) -> vsut
react.protocol.wrapper.WrapperPlayServerEntityMetadata -> org.cyberpwn.react.Cgcx:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    java.util.List getMetadata() -> getMetadata
    void setMetadata(java.util.List) -> setMetadata
    void <clinit>() -> <clinit>
    java.lang.Object MK(java.lang.Object,java.lang.Object,java.lang.Object) -> oENu
react.protocol.wrapper.WrapperPlayServerEntityMetadata18 -> org.cyberpwn.react.bilU:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    java.util.List getMetadata() -> getMetadata
    void setMetadata(java.util.List) -> setMetadata
    void <clinit>() -> <clinit>
    java.lang.Object DG(java.lang.Object,java.lang.Object,java.lang.Object) -> hIJi
react.protocol.wrapper.WrapperPlayServerEntityMoveLook18 -> org.cyberpwn.react.afiV:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    double getDx() -> SeUk
    void setDx(double) -> wnYS
    double getDy() -> owfy
    void setDy(double) -> SCOM
    double getDz() -> rDyl
    void setDz(double) -> SmbW
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object eQ(java.lang.Object,java.lang.Object,java.lang.Object) -> YUqM
react.protocol.wrapper.WrapperPlayServerEntityStatus -> org.cyberpwn.react.VxJp:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    byte getEntityStatus() -> lMJX
    void setEntityStatus(byte) -> WXLP
    void <clinit>() -> <clinit>
    java.lang.Object Yg(java.lang.Object,java.lang.Object,java.lang.Object) -> OivM
react.protocol.wrapper.WrapperPlayServerEntityStatus18 -> org.cyberpwn.react.LYLE:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    byte getEntityStatus() -> lMJX
    void setEntityStatus(byte) -> WXLP
    void <clinit>() -> <clinit>
    java.lang.Object aN(java.lang.Object,java.lang.Object,java.lang.Object) -> Iyfl
react.protocol.wrapper.WrapperPlayServerEntityTeleport -> org.cyberpwn.react.pPpc:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object qS(java.lang.Object,java.lang.Object,java.lang.Object) -> dUow
react.protocol.wrapper.WrapperPlayServerEntityTeleport18 -> org.cyberpwn.react.AGjx:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    void <clinit>() -> <clinit>
    java.lang.Object bm(java.lang.Object,java.lang.Object,java.lang.Object) -> ivTF
react.protocol.wrapper.WrapperPlayServerEntityVelocity -> org.cyberpwn.react.dxbS:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    double getVelocityX() -> vIdy
    void setVelocityX(double) -> UAEN
    double getVelocityY() -> lMIt
    void setVelocityY(double) -> VDGt
    double getVelocityZ() -> dxWS
    void setVelocityZ(double) -> sHYj
    void <clinit>() -> <clinit>
    java.lang.Object ON(java.lang.Object,java.lang.Object,java.lang.Object) -> ksvS
react.protocol.wrapper.WrapperPlayServerEntityVelocity18 -> org.cyberpwn.react.ghYv:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    double getVelocityX() -> vIdy
    void setVelocityX(double) -> UAEN
    double getVelocityY() -> lMIt
    void setVelocityY(double) -> VDGt
    double getVelocityZ() -> dxWS
    void setVelocityZ(double) -> sHYj
    void <clinit>() -> <clinit>
    java.lang.Object Zp(java.lang.Object,java.lang.Object,java.lang.Object) -> FhNF
react.protocol.wrapper.WrapperPlayServerExperience -> org.cyberpwn.react.PLFT:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    float getExperienceBar() -> RYoN
    void setExperienceBar(float) -> WXLP
    int getLevel() -> getLevel
    void setLevel(int) -> setLevel
    int getTotalExperience() -> getTotalExperience
    void setTotalExperience(int) -> setTotalExperience
    void <clinit>() -> <clinit>
    java.lang.Object fF(java.lang.Object,java.lang.Object,java.lang.Object) -> OYUi
react.protocol.wrapper.WrapperPlayServerExperience18 -> org.cyberpwn.react.gFWT:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    float getExperienceBar() -> RYoN
    void setExperienceBar(float) -> WXLP
    int getLevel() -> getLevel
    void setLevel(int) -> setLevel
    int getTotalExperience() -> getTotalExperience
    void setTotalExperience(int) -> setTotalExperience
    void <clinit>() -> <clinit>
    java.lang.Object vn(java.lang.Object,java.lang.Object,java.lang.Object) -> sPsi
react.protocol.wrapper.WrapperPlayServerExplosion -> org.cyberpwn.react.TFoo:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getRadius() -> getRadius
    void setRadius(float) -> setRadius
    java.util.List getRecors() -> prfy
    void setRecords(java.util.List) -> dfal
    float getPlayerVelocityX() -> IqXS
    void setPlayerVelocityX(float) -> bWiv
    float getPlayerVelocityY() -> SUCG
    void setPlayerVelocityY(float) -> TqEp
    float getPlayerVelocityZ() -> tKoL
    void setPlayerVelocityZ(float) -> OYFP
    void <clinit>() -> <clinit>
    java.lang.Object AE(java.lang.Object,java.lang.Object,java.lang.Object) -> opBi
react.protocol.wrapper.WrapperPlayServerExplosion18 -> org.cyberpwn.react.URdW:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getRadius() -> getRadius
    void setRadius(float) -> setRadius
    java.util.List getRecors() -> prfy
    void setRecords(java.util.List) -> dfal
    float getPlayerVelocityX() -> IqXS
    void setPlayerVelocityX(float) -> bWiv
    float getPlayerVelocityY() -> SUCG
    void setPlayerVelocityY(float) -> TqEp
    float getPlayerVelocityZ() -> tKoL
    void setPlayerVelocityZ(float) -> OYFP
    void <clinit>() -> <clinit>
    java.lang.Object WQ(java.lang.Object,java.lang.Object,java.lang.Object) -> Edif
react.protocol.wrapper.WrapperPlayServerGameStateChange -> org.cyberpwn.react.BlqK:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getReason() -> getReason
    void setReason(int) -> oxJE
    float getValue() -> getValue
    void setValue(float) -> setValue
    void <clinit>() -> <clinit>
    java.lang.Object Xc(java.lang.Object,java.lang.Object,java.lang.Object) -> fBdY
react.protocol.wrapper.WrapperPlayServerGameStateChange18 -> org.cyberpwn.react.KEGl:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getReason() -> getReason
    void setReason(int) -> oxJE
    float getValue() -> getValue
    void setValue(float) -> setValue
    void <clinit>() -> <clinit>
    java.lang.Object mx(java.lang.Object,java.lang.Object,java.lang.Object) -> SwDX
react.protocol.wrapper.WrapperPlayServerHeldItemSlot -> org.cyberpwn.react.uGNd:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getSlot() -> getSlot
    void setSlot(int) -> CEGd
    void <clinit>() -> <clinit>
    java.lang.Object mN(java.lang.Object,java.lang.Object,java.lang.Object) -> xOkk
react.protocol.wrapper.WrapperPlayServerHeldItemSlot18 -> org.cyberpwn.react.sQiU:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getSlot() -> getSlot
    void setSlot(int) -> CEGd
    void <clinit>() -> <clinit>
    java.lang.Object KC(java.lang.Object,java.lang.Object,java.lang.Object) -> BtuA
react.protocol.wrapper.WrapperPlayServerKeepAlive -> org.cyberpwn.react.CNRG:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getKeepAliveId() -> VoMA
    void setKeepAliveId(int) -> XdFb
    void <clinit>() -> <clinit>
    java.lang.Object ke(java.lang.Object,java.lang.Object,java.lang.Object) -> EBiQ
react.protocol.wrapper.WrapperPlayServerKeepAlive18 -> org.cyberpwn.react.fBsG:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getKeepAliveId() -> VoMA
    void setKeepAliveId(int) -> XdFb
    void <clinit>() -> <clinit>
    java.lang.Object QV(java.lang.Object,java.lang.Object,java.lang.Object) -> FFLq
react.protocol.wrapper.WrapperPlayServerKickDisconnect -> org.cyberpwn.react.MdbO:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedChatComponent getReason() -> oDlM
    void setReason(com.comphenix.protocol.wrappers.WrappedChatComponent) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object ep(java.lang.Object,java.lang.Object,java.lang.Object) -> CgFI
react.protocol.wrapper.WrapperPlayServerKickDisconnect18 -> org.cyberpwn.react.yKMs:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedChatComponent getReason() -> oDlM
    void setReason(com.comphenix.protocol.wrappers.WrappedChatComponent) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object LV(java.lang.Object,java.lang.Object,java.lang.Object) -> pHUN
react.protocol.wrapper.WrapperPlayServerLogin -> org.cyberpwn.react.SDPf:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode getGamemode() -> HedK
    void setGamemode(com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode) -> WGJb
    int getDimension() -> getDimension
    void setDimension(int) -> setDimension
    com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> yRnT
    void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> WGJb
    int getMaxPlayers() -> getMaxPlayers
    void setMaxPlayers(int) -> setMaxPlayers
    org.bukkit.WorldType getLevelType() -> xrNe
    void setLevelType(org.bukkit.WorldType) -> WGJb
    boolean getReducedDebugInfo() -> sjns
    void setReducedDebugInfo(boolean) -> xNwp
    void <clinit>() -> <clinit>
    java.lang.Object vf(java.lang.Object,java.lang.Object,java.lang.Object) -> FElV
react.protocol.wrapper.WrapperPlayServerLogin18 -> org.cyberpwn.react.bHLO:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode getGamemode() -> HedK
    void setGamemode(com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode) -> WGJb
    int getDimension() -> getDimension
    void setDimension(int) -> setDimension
    com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> yRnT
    void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> WGJb
    int getMaxPlayers() -> getMaxPlayers
    void setMaxPlayers(int) -> setMaxPlayers
    org.bukkit.WorldType getLevelType() -> xrNe
    void setLevelType(org.bukkit.WorldType) -> WGJb
    boolean getReducedDebugInfo() -> sjns
    void setReducedDebugInfo(boolean) -> xNwp
    void <clinit>() -> <clinit>
    java.lang.Object DY(java.lang.Object,java.lang.Object,java.lang.Object) -> APNs
react.protocol.wrapper.WrapperPlayServerMap -> org.cyberpwn.react.TFrb:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getItemDamage() -> VLiV
    void setItemDamage(int) -> Ywjd
    byte getScale() -> gFIn
    void setScale(byte) -> bWiv
    boolean getTrackingPosition() -> rEiO
    void setTrackingPosition(boolean) -> qcup
    java.lang.Object[] getMapIcons() -> CgWB
    void setMapIcons(java.lang.Object[]) -> WGJb
    int getColumns() -> getColumns
    void setColumns(int) -> setColumns
    int getRows() -> getRows
    void setRows(int) -> setRows
    int getX() -> getX
    void setX(int) -> setX
    int getZ() -> getZ
    void setZ(int) -> setZ
    byte[] getData() -> getData
    void setData(byte[]) -> setData
    void <clinit>() -> <clinit>
    java.lang.Object wk(java.lang.Object,java.lang.Object,java.lang.Object) -> Gjqx
react.protocol.wrapper.WrapperPlayServerMap18 -> org.cyberpwn.react.SCon:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getItemDamage() -> VLiV
    void setItemDamage(int) -> Ywjd
    byte getScale() -> gFIn
    void setScale(byte) -> bWiv
    java.lang.Object[] getMapIcons() -> CgWB
    void setMapIcons(java.lang.Object[]) -> WGJb
    int getColumns() -> getColumns
    void setColumns(int) -> setColumns
    int getRows() -> getRows
    void setRows(int) -> setRows
    int getX() -> getX
    void setX(int) -> setX
    int getZ() -> getZ
    void setZ(int) -> setZ
    byte[] getData() -> getData
    void setData(byte[]) -> setData
    void <clinit>() -> <clinit>
    java.lang.Object Vi(java.lang.Object,java.lang.Object,java.lang.Object) -> iDAa
react.protocol.wrapper.WrapperPlayServerMapChunk -> org.cyberpwn.react.TaFc:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getChunkX() -> getChunkX
    void setChunkX(int) -> xrBu
    int getChunkZ() -> getChunkZ
    void setChunkZ(int) -> teVE
    java.lang.Object getChunkMap() -> VCxc
    void setChunkMap(java.lang.Object) -> eqwO
    boolean getGroundUpContinuous() -> JcYw
    void setGroundUpContinuous(boolean) -> PBWD
    void <clinit>() -> <clinit>
    java.lang.Object BM(java.lang.Object,java.lang.Object,java.lang.Object) -> NgWN
react.protocol.wrapper.WrapperPlayServerMapChunk18 -> org.cyberpwn.react.fnKC:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getChunkX() -> getChunkX
    void setChunkX(int) -> xrBu
    int getChunkZ() -> getChunkZ
    void setChunkZ(int) -> teVE
    java.lang.Object getChunkMap() -> VCxc
    void setChunkMap(java.lang.Object) -> eqwO
    boolean getGroundUpContinuous() -> JcYw
    void setGroundUpContinuous(boolean) -> PBWD
    void <clinit>() -> <clinit>
    java.lang.Object Ni(java.lang.Object,java.lang.Object,java.lang.Object) -> oUqv
react.protocol.wrapper.WrapperPlayServerMapChunkBulk18 -> org.cyberpwn.react.xYLP:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int[] getChunksX() -> FFMC
    void setChunksX(int[]) -> dfal
    int[] getChunksZ() -> ryNI
    void setChunksZ(int[]) -> lTgP
    java.lang.Object[] getChunks() -> AjCA
    void setChunks(java.lang.Object[]) -> dfal
    boolean isSkyLightSent() -> jGCO
    void setSkyLightSent(boolean) -> vQbs
    void <clinit>() -> <clinit>
    java.lang.Object hQ(java.lang.Object,java.lang.Object,java.lang.Object) -> twBq
react.protocol.wrapper.WrapperPlayServerMount -> org.cyberpwn.react.mHKU:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    void setEntityID(int) -> CxJT
    int[] getPassengerIds() -> EvMx
    void setPassengerIds(int[]) -> KejP
    java.util.List getPassengers(com.comphenix.protocol.events.PacketEvent) -> lTgP
    java.util.List getPassengers(org.bukkit.World) -> xNwp
    void setPassengers(java.util.List) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object gj(java.lang.Object,java.lang.Object,java.lang.Object) -> lMJX
react.protocol.wrapper.WrapperPlayServerMultiBlockChange -> org.cyberpwn.react.cubf:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.ChunkCoordIntPair getChunk() -> getChunk
    void setChunk(com.comphenix.protocol.wrappers.ChunkCoordIntPair) -> WGJb
    com.comphenix.protocol.wrappers.MultiBlockChangeInfo[] getRecords() -> SUBy
    void setRecords(com.comphenix.protocol.wrappers.MultiBlockChangeInfo[]) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object uw(java.lang.Object,java.lang.Object,java.lang.Object) -> vIdy
react.protocol.wrapper.WrapperPlayServerMultiBlockChange18 -> org.cyberpwn.react.vdGf:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.ChunkCoordIntPair getChunk() -> getChunk
    void setChunk(com.comphenix.protocol.wrappers.ChunkCoordIntPair) -> WGJb
    com.comphenix.protocol.wrappers.MultiBlockChangeInfo[] getRecords() -> SUBy
    void setRecords(com.comphenix.protocol.wrappers.MultiBlockChangeInfo[]) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object zd(java.lang.Object,java.lang.Object,java.lang.Object) -> lMIt
react.protocol.wrapper.WrapperPlayServerNamedEntitySpawn -> org.cyberpwn.react.dhEU:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    java.util.UUID getPlayerUUID() -> owxD
    void setPlayerUUID(java.util.UUID) -> dfal
    org.bukkit.util.Vector getPosition() -> bPOn
    void setPosition(org.bukkit.util.Vector) -> dfal
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    com.comphenix.protocol.wrappers.WrappedDataWatcher getMetadata() -> htEK
    void setMetadata(com.comphenix.protocol.wrappers.WrappedDataWatcher) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object rP(java.lang.Object,java.lang.Object,java.lang.Object) -> dxWS
react.protocol.wrapper.WrapperPlayServerNamedEntitySpawn18 -> org.cyberpwn.react.GQoa:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    java.util.UUID getPlayerUUID() -> owxD
    void setPlayerUUID(java.util.UUID) -> dfal
    org.bukkit.util.Vector getPosition() -> bPOn
    void setPosition(org.bukkit.util.Vector) -> dfal
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    int getCurrentItem() -> VMMb
    void setCurrentItem(int) -> TplA
    com.comphenix.protocol.wrappers.WrappedDataWatcher getMetadata() -> htEK
    void setMetadata(com.comphenix.protocol.wrappers.WrappedDataWatcher) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object yJ(java.lang.Object,java.lang.Object,java.lang.Object) -> RYoN
react.protocol.wrapper.WrapperPlayServerNamedSoundEffect -> org.cyberpwn.react.Ihvt:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    org.bukkit.Sound getSoundEffect() -> hsco
    void setSoundEffect(org.bukkit.Sound) -> WGJb
    com.comphenix.protocol.wrappers.EnumWrappers$SoundCategory getSoundCategory() -> FFLq
    void setSoundCategory(com.comphenix.protocol.wrappers.EnumWrappers$SoundCategory) -> WGJb
    int getEffectPositionX() -> FOAA
    void setEffectPositionX(int) -> WqeI
    int getEffectPositionY() -> dxYJ
    void setEffectPositionY(int) -> HSwA
    int getEffectPositionZ() -> xOms
    void setEffectPositionZ(int) -> STWF
    float getVolume() -> pHUN
    void setVolume(float) -> nJMP
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    void <clinit>() -> <clinit>
    java.lang.Object dD(java.lang.Object,java.lang.Object,java.lang.Object) -> prfy
react.protocol.wrapper.WrapperPlayServerNamedSoundEffect18 -> org.cyberpwn.react.CNTh:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getSoundName() -> EBiQ
    void setSoundName(java.lang.String) -> tupB
    int getEffectPositionX() -> FOAA
    void setEffectPositionX(int) -> WqeI
    int getEffectPositionY() -> dxYJ
    void setEffectPositionY(int) -> HSwA
    int getEffectPositionZ() -> xOms
    void setEffectPositionZ(int) -> STWF
    float getVolume() -> pHUN
    void setVolume(float) -> nJMP
    int getPitch() -> rVnI
    void setPitch(byte) -> TqEp
    void <clinit>() -> <clinit>
    java.lang.Object uL(java.lang.Object,java.lang.Object,java.lang.Object) -> IqXS
react.protocol.wrapper.WrapperPlayServerOpenSignEditor -> org.cyberpwn.react.qLFa:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object zg(java.lang.Object,java.lang.Object,java.lang.Object) -> SUCG
react.protocol.wrapper.WrapperPlayServerOpenSignEntity18 -> org.cyberpwn.react.LHLQ:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object TZ(java.lang.Object,java.lang.Object,java.lang.Object) -> tKoL
react.protocol.wrapper.WrapperPlayServerOpenWindow -> org.cyberpwn.react.HerU:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowID() -> ECLY
    void setWindowID(int) -> hIAh
    java.lang.String getInventoryType() -> TGHL
    void setInventoryType(java.lang.String) -> HvRk
    com.comphenix.protocol.wrappers.WrappedChatComponent getWindowTitle() -> oVUU
    void setWindowTitle(com.comphenix.protocol.wrappers.WrappedChatComponent) -> KejP
    int getNumberOfSlots() -> cuVY
    void setNumberOfSlots(int) -> Yfhm
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object lH(java.lang.Object,java.lang.Object,java.lang.Object) -> HedK
react.protocol.wrapper.WrapperPlayServerOpenWindow18 -> org.cyberpwn.react.quxe:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowID() -> ECLY
    void setWindowID(int) -> hIAh
    java.lang.String getInventoryType() -> TGHL
    void setInventoryType(java.lang.String) -> HvRk
    com.comphenix.protocol.wrappers.WrappedChatComponent getWindowTitle() -> oVUU
    void setWindowTitle(com.comphenix.protocol.wrappers.WrappedChatComponent) -> KejP
    int getNumberOfSlots() -> cuVY
    void setNumberOfSlots(int) -> Yfhm
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object BA(java.lang.Object,java.lang.Object,java.lang.Object) -> rFGi
react.protocol.wrapper.WrapperPlayServerPlayerInfo -> org.cyberpwn.react.MeAi:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$PlayerInfoAction getAction() -> YVVn
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$PlayerInfoAction) -> WGJb
    java.util.List getData() -> aMMQ
    void setData(java.util.List) -> KejP
    void <clinit>() -> <clinit>
    java.lang.Object LT(java.lang.Object,java.lang.Object,java.lang.Object) -> yRnT
react.protocol.wrapper.WrapperPlayServerPlayerInfo18 -> org.cyberpwn.react.BeCv:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$PlayerInfoAction getAction() -> YVVn
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$PlayerInfoAction) -> WGJb
    java.util.List getData() -> aMMQ
    void setData(java.util.List) -> KejP
    void <clinit>() -> <clinit>
    java.lang.Object tn(java.lang.Object,java.lang.Object,java.lang.Object) -> xrNe
react.protocol.wrapper.WrapperPlayServerPlayerListHeaderFooter -> org.cyberpwn.react.Drww:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedChatComponent getHeader() -> rhOa
    void setHeader(com.comphenix.protocol.wrappers.WrappedChatComponent) -> mOYk
    com.comphenix.protocol.wrappers.WrappedChatComponent getFooter() -> jhgx
    void setFooter(com.comphenix.protocol.wrappers.WrappedChatComponent) -> wnYS
    void <clinit>() -> <clinit>
    java.lang.Object GE(java.lang.Object,java.lang.Object,java.lang.Object) -> SeUk
react.protocol.wrapper.WrapperPlayServerPlayerListHeaderFooter18 -> org.cyberpwn.react.QqMv:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedChatComponent getHeader() -> rhOa
    void setHeader(com.comphenix.protocol.wrappers.WrappedChatComponent) -> mOYk
    com.comphenix.protocol.wrappers.WrappedChatComponent getFooter() -> jhgx
    void setFooter(com.comphenix.protocol.wrappers.WrappedChatComponent) -> wnYS
    void <clinit>() -> <clinit>
    java.lang.Object BI(java.lang.Object,java.lang.Object,java.lang.Object) -> sjns
react.protocol.wrapper.WrapperPlayServerPosition -> org.cyberpwn.react.RcPV:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    java.lang.Class FLAGS_CLASS -> pkgx
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    com.comphenix.protocol.reflect.StructureModifier getFlagsModifier() -> AXaK
    java.util.Set getFlags() -> CUvD
    void setFlags(java.util.Set) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Ll(java.lang.Object,java.lang.Object,java.lang.Object) -> VLiV
react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag -> org.cyberpwn.react.BeDK:
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag X -> cTbA
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag Y -> scpK
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag Z -> oNqd
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag Y_ROT -> oWbk
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag X_ROT -> PMJN
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag[] $VALUES -> PLho
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag[] values() -> values
    react.protocol.wrapper.WrapperPlayServerPosition$PlayerTeleportFlag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object MC(java.lang.Object,java.lang.Object,java.lang.Object) -> gFIn
react.protocol.wrapper.WrapperPlayServerPosition18 -> org.cyberpwn.react.eHbv:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    java.lang.Class FLAGS_CLASS -> pkgx
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    com.comphenix.protocol.reflect.StructureModifier getFlagsModifier() -> AXaK
    java.util.Set getFlags() -> CUvD
    void setFlags(java.util.Set) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object gc(java.lang.Object,java.lang.Object,java.lang.Object) -> rEiO
react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag -> org.cyberpwn.react.ETYd:
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag X -> Tiva
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag Y -> GSQK
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag Z -> GmCe
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag Y_ROT -> JKYC
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag X_ROT -> AYpj
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag[] $VALUES -> neah
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag[] values() -> values
    react.protocol.wrapper.WrapperPlayServerPosition18$PlayerTeleportFlag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object hD(java.lang.Object,java.lang.Object,java.lang.Object) -> CgWB
react.protocol.wrapper.WrapperPlayServerRelEntityMove -> org.cyberpwn.react.eYdc:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    int getDx() -> FEmO
    void setDx(int) -> mWpQ
    int getDy() -> qBgk
    void setDy(int) -> BIrp
    int getDz() -> DXxk
    void setDz(int) -> LFpn
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object gI(java.lang.Object,java.lang.Object,java.lang.Object) -> VCxc
react.protocol.wrapper.WrapperPlayServerRelEntityMove18 -> org.cyberpwn.react.lUhK:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    double getDx() -> SeUk
    void setDx(double) -> wnYS
    double getDy() -> owfy
    void setDy(double) -> SCOM
    double getDz() -> rDyl
    void setDz(double) -> SmbW
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object an(java.lang.Object,java.lang.Object,java.lang.Object) -> JcYw
react.protocol.wrapper.WrapperPlayServerRelEntityMoveLook -> org.cyberpwn.react.Tyvh:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    double getDx() -> SeUk
    void setDx(double) -> wnYS
    double getDy() -> owfy
    void setDy(double) -> SCOM
    double getDz() -> rDyl
    void setDz(double) -> SmbW
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> vtWl
    void setOnGround(boolean) -> bWiv
    void <clinit>() -> <clinit>
    java.lang.Object XP(java.lang.Object,java.lang.Object,java.lang.Object) -> FFMC
react.protocol.wrapper.WrapperPlayServerRemoveEntityEffect -> org.cyberpwn.react.EKiB:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    org.bukkit.potion.PotionEffectType getEffect() -> Btvy
    void setEffect(org.bukkit.potion.PotionEffectType) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object eF(java.lang.Object,java.lang.Object,java.lang.Object) -> ryNI
react.protocol.wrapper.WrapperPlayServerRemoveEntityEffect18 -> org.cyberpwn.react.OYhc:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    int getEffectId() -> getEffectId
    void setEffectId(int) -> avqR
    void <clinit>() -> <clinit>
    java.lang.Object rO(java.lang.Object,java.lang.Object,java.lang.Object) -> AjCA
react.protocol.wrapper.WrapperPlayServerResourcePackSend -> org.cyberpwn.react.QppW:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getUrl() -> getUrl
    void setUrl(java.lang.String) -> setUrl
    java.lang.String getHash() -> getHash
    void setHash(java.lang.String) -> ESVk
    void <clinit>() -> <clinit>
    java.lang.Object kV(java.lang.Object,java.lang.Object,java.lang.Object) -> jGCO
react.protocol.wrapper.WrapperPlayServerResourcePackSend18 -> org.cyberpwn.react.hkaq:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getUrl() -> getUrl
    void setUrl(java.lang.String) -> setUrl
    java.lang.String getHash() -> getHash
    void setHash(java.lang.String) -> ESVk
    void <clinit>() -> <clinit>
    java.lang.Object lo(java.lang.Object,java.lang.Object,java.lang.Object) -> EvMx
react.protocol.wrapper.WrapperPlayServerRespawn -> org.cyberpwn.react.KDjv:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getDimension() -> getDimension
    void setDimension(int) -> setDimension
    com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> yRnT
    void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> WGJb
    com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode getGamemode() -> HedK
    void setGamemode(com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode) -> WGJb
    org.bukkit.WorldType getLevelType() -> xrNe
    void setLevelType(org.bukkit.WorldType) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object ur(java.lang.Object,java.lang.Object,java.lang.Object) -> SUBy
react.protocol.wrapper.WrapperPlayServerRespawn18 -> org.cyberpwn.react.pIGA:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getDimension() -> getDimension
    void setDimension(int) -> setDimension
    com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> yRnT
    void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> WGJb
    com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode getGamemode() -> HedK
    void setGamemode(com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode) -> WGJb
    org.bukkit.WorldType getLevelType() -> xrNe
    void setLevelType(org.bukkit.WorldType) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Qs(java.lang.Object,java.lang.Object,java.lang.Object) -> owxD
react.protocol.wrapper.WrapperPlayServerScoreboardDisplayObjective -> org.cyberpwn.react.FhaH:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getPosition() -> getPosition
    void setPosition(int) -> setPosition
    java.lang.String getScoreName() -> gyQY
    void setScoreName(java.lang.String) -> fcvC
    void <clinit>() -> <clinit>
    java.lang.Object Ak(java.lang.Object,java.lang.Object,java.lang.Object) -> bPOn
react.protocol.wrapper.WrapperPlayServerScoreboardDisplayObjective18 -> org.cyberpwn.react.bbAE:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getPosition() -> getPosition
    void setPosition(int) -> setPosition
    java.lang.String getScoreName() -> gyQY
    void setScoreName(java.lang.String) -> fcvC
    void <clinit>() -> <clinit>
    java.lang.Object HR(java.lang.Object,java.lang.Object,java.lang.Object) -> htEK
react.protocol.wrapper.WrapperPlayServerScoreboardObjective -> org.cyberpwn.react.LHOf:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getDisplayName() -> getDisplayName
    void setDisplayName(java.lang.String) -> setDisplayName
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay getHealthDisplay() -> jXFv
    void setHealthDisplay(react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay) -> WGJb
    int getMode() -> getMode
    void setMode(int) -> setMode
    void <clinit>() -> <clinit>
    java.lang.Object wI(java.lang.Object,java.lang.Object,java.lang.Object) -> VMMb
react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay -> org.cyberpwn.react.SLca:
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay INTEGER -> oNrQ
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay HEARTS -> oheF
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay[] $VALUES -> fnkb
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay[] values() -> values
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective$HealthDisplay valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object ea(java.lang.Object,java.lang.Object,java.lang.Object) -> hsco
react.protocol.wrapper.WrapperPlayServerScoreboardObjective$Mode -> org.cyberpwn.react.cKQf:
    int ADD_OBJECTIVE -> SDpu
    int REMOVE_OBJECTIVE -> ymqK
    int UPDATE_VALUE -> Sfsp
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective$Mode INSTANCE -> GAoN
    void <init>() -> <init>
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective$Mode getInstance() -> kRXR
    void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardObjective18 -> org.cyberpwn.react.JBIg:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getDisplayName() -> getDisplayName
    void setDisplayName(java.lang.String) -> setDisplayName
    java.lang.String getHealthDisplay() -> vAUp
    void setHealthDisplay(java.lang.String) -> LXLE
    int getMode() -> getMode
    void setMode(int) -> setMode
    void <clinit>() -> <clinit>
    java.lang.Object AC(java.lang.Object,java.lang.Object,java.lang.Object) -> AC
react.protocol.wrapper.WrapperPlayServerScoreboardObjective18$Mode -> org.cyberpwn.react.nucb:
    int ADD_OBJECTIVE -> SDpu
    int REMOVE_OBJECTIVE -> ymqK
    int UPDATE_VALUE -> Sfsp
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective18$Mode INSTANCE -> gPLM
    void <init>() -> <init>
    react.protocol.wrapper.WrapperPlayServerScoreboardObjective18$Mode getInstance() -> Bcuc
    void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardScore -> org.cyberpwn.react.YFDv:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getScoreName() -> gyQY
    void setScoreName(java.lang.String) -> fcvC
    java.lang.String getObjectiveName() -> NUvC
    void setObjectiveName(java.lang.String) -> vRCd
    int getValue() -> getValue
    void setValue(int) -> setValue
    com.comphenix.protocol.wrappers.EnumWrappers$ScoreboardAction getAction() -> QFNM
    void setScoreboardAction(com.comphenix.protocol.wrappers.EnumWrappers$ScoreboardAction) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Ax(java.lang.Object,java.lang.Object,java.lang.Object) -> ntkr
react.protocol.wrapper.WrapperPlayServerScoreboardScore18 -> org.cyberpwn.react.bXoS:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getScoreName() -> gyQY
    void setScoreName(java.lang.String) -> fcvC
    java.lang.String getObjectiveName() -> NUvC
    void setObjectiveName(java.lang.String) -> vRCd
    int getValue() -> getValue
    void setValue(int) -> setValue
    com.comphenix.protocol.wrappers.EnumWrappers$ScoreboardAction getAction() -> QFNM
    void setScoreboardAction(com.comphenix.protocol.wrappers.EnumWrappers$ScoreboardAction) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object hn(java.lang.Object,java.lang.Object,java.lang.Object) -> FOAA
react.protocol.wrapper.WrapperPlayServerScoreboardTeam -> org.cyberpwn.react.BTCY:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getDisplayName() -> getDisplayName
    void setDisplayName(java.lang.String) -> setDisplayName
    java.lang.String getPrefix() -> getPrefix
    void setPrefix(java.lang.String) -> setPrefix
    java.lang.String getSuffix() -> getSuffix
    void setSuffix(java.lang.String) -> setSuffix
    java.lang.String getNameTagVisibility() -> INvg
    void setNameTagVisibility(java.lang.String) -> FpMO
    int getColor() -> getColor
    void setColor(int) -> setColor
    java.lang.String getCollisionRule() -> GseP
    void setCollisionRule(java.lang.String) -> qtuv
    java.util.List getPlayers() -> getPlayers
    void setPlayers(java.util.List) -> mOYk
    int getMode() -> getMode
    void setMode(int) -> setMode
    int getPackOptionData() -> iUDC
    void setPackOptionData(int) -> kcMC
    void <clinit>() -> <clinit>
    java.lang.Object vE(java.lang.Object,java.lang.Object,java.lang.Object) -> dxYJ
react.protocol.wrapper.WrapperPlayServerScoreboardTeam$Mode -> org.cyberpwn.react.Xdcg:
    int TEAM_CREATED -> GmDY
    int TEAM_REMOVED -> Irhw
    int TEAM_UPDATED -> UShd
    int PLAYERS_ADDED -> qLgU
    int PLAYERS_REMOVED -> vmYK
    react.protocol.wrapper.WrapperPlayServerScoreboardTeam$Mode INSTANCE -> dpww
    void <init>() -> <init>
    react.protocol.wrapper.WrapperPlayServerScoreboardTeam$Mode getInstance() -> biaN
    void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerScoreboardTeam18 -> org.cyberpwn.react.GbqX:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getDisplayName() -> getDisplayName
    void setDisplayName(java.lang.String) -> setDisplayName
    java.lang.String getPrefix() -> getPrefix
    void setPrefix(java.lang.String) -> setPrefix
    java.lang.String getSuffix() -> getSuffix
    void setSuffix(java.lang.String) -> setSuffix
    java.lang.String getNameTagVisibility() -> INvg
    void setNameTagVisibility(java.lang.String) -> FpMO
    int getColor() -> getColor
    void setColor(int) -> setColor
    java.util.List getPlayers() -> getPlayers
    void setPlayers(java.util.List) -> mOYk
    int getMode() -> getMode
    void setMode(int) -> setMode
    int getPackOptionData() -> iUDC
    void setPackOptionData(int) -> kcMC
    void <clinit>() -> <clinit>
    java.lang.Object fi(java.lang.Object,java.lang.Object,java.lang.Object) -> xOms
react.protocol.wrapper.WrapperPlayServerScoreboardTeam18$Mode -> org.cyberpwn.react.jFsL:
    int TEAM_CREATED -> GmDY
    int TEAM_REMOVED -> Irhw
    int TEAM_UPDATED -> UShd
    int PLAYERS_ADDED -> qLgU
    int PLAYERS_REMOVED -> vmYK
    react.protocol.wrapper.WrapperPlayServerScoreboardTeam18$Mode INSTANCE -> USjm
    void <init>() -> <init>
    react.protocol.wrapper.WrapperPlayServerScoreboardTeam18$Mode getInstance() -> pQGN
    void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerServerDifficulty -> org.cyberpwn.react.XSaS:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> yRnT
    void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Fv(java.lang.Object,java.lang.Object,java.lang.Object) -> rVnI
react.protocol.wrapper.WrapperPlayServerServerDifficulty18 -> org.cyberpwn.react.EKjH:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> yRnT
    void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object zt(java.lang.Object,java.lang.Object,java.lang.Object) -> ECLY
react.protocol.wrapper.WrapperPlayServerSetCompression18 -> org.cyberpwn.react.jPES:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getThreshold() -> getThreshold
    void setThreshold(int) -> BdEn
    void <clinit>() -> <clinit>
    java.lang.Object TU(java.lang.Object,java.lang.Object,java.lang.Object) -> TGHL
react.protocol.wrapper.WrapperPlayServerSetCooldown -> org.cyberpwn.react.GlCe:
    java.lang.Class ITEM_CLASS -> FjDG
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    org.bukkit.Material getItem() -> VLnc
    void setItem(org.bukkit.Material) -> dfal
    int getTicks() -> KUaB
    void setTicks(int) -> RPro
    java.lang.Class access$100() -> PnAr
    void <clinit>() -> <clinit>
    java.lang.Object YI(java.lang.Object,java.lang.Object,java.lang.Object) -> oVUU
react.protocol.wrapper.WrapperPlayServerSetCooldown$1 -> org.cyberpwn.react.GlCf:
react.protocol.wrapper.WrapperPlayServerSetCooldown$ItemConverter -> org.cyberpwn.react.BdeU:
    com.comphenix.protocol.reflect.accessors.MethodAccessor getMaterial -> kdlN
    com.comphenix.protocol.reflect.accessors.MethodAccessor getItem -> Asdg
    void <init>() -> <init>
    org.bukkit.Material getSpecific(java.lang.Object) -> qlil
    java.lang.Object getGeneric(java.lang.Class,org.bukkit.Material) -> WGJb
    java.lang.Class getSpecificType() -> getSpecificType
    java.lang.Object getGeneric(java.lang.Class,java.lang.Object) -> getGeneric
    java.lang.Object getSpecific(java.lang.Object) -> getSpecific
    void <init>(react.protocol.wrapper.WrapperPlayServerSetCooldown$1) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object xc(java.lang.Object,java.lang.Object,java.lang.Object) -> cuVY
react.protocol.wrapper.WrapperPlayServerSetSlot -> org.cyberpwn.react.URgt:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    int getSlot() -> getSlot
    void setSlot(int) -> CEGd
    org.bukkit.inventory.ItemStack getSlotData() -> VxDI
    void setSlotData(org.bukkit.inventory.ItemStack) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object lo(java.lang.Object,java.lang.Object,java.lang.Object) -> EvMx
react.protocol.wrapper.WrapperPlayServerSetSlot18 -> org.cyberpwn.react.vuJd:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    int getSlot() -> getSlot
    void setSlot(int) -> CEGd
    org.bukkit.inventory.ItemStack getSlotData() -> VxDI
    void setSlotData(org.bukkit.inventory.ItemStack) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object he(java.lang.Object,java.lang.Object,java.lang.Object) -> YVVn
react.protocol.wrapper.WrapperPlayServerSpawnEntity -> org.cyberpwn.react.pjhI:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    com.comphenix.protocol.injector.PacketConstructor entityConstructor -> nfEf
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    void <init>(org.bukkit.entity.Entity,int,int) -> <init>
    com.comphenix.protocol.events.PacketContainer fromEntity(org.bukkit.entity.Entity,int,int) -> WGJb
    int getEntityID() -> vRTo
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    void setEntityID(int) -> CxJT
    java.util.UUID getUniqueId() -> getUniqueId
    void setUniqueId(java.util.UUID) -> lTgP
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    double getOptionalSpeedX() -> MBTt
    void setOptionalSpeedX(double) -> ssMp
    double getOptionalSpeedY() -> JtaN
    void setOptionalSpeedY(double) -> xNwp
    double getOptionalSpeedZ() -> mqrt
    void setOptionalSpeedZ(double) -> qcup
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    int getType() -> getType
    void setType(int) -> setType
    int getObjectData() -> GtIQ
    void setObjectData(int) -> kHyH
    void <clinit>() -> <clinit>
    java.lang.Object By(java.lang.Object,java.lang.Object,java.lang.Object) -> aMMQ
react.protocol.wrapper.WrapperPlayServerSpawnEntity$ObjectTypes -> org.cyberpwn.react.CWHC:
    int BOAT -> SpHt
    int ITEM_STACK -> NFfX
    int AREA_EFFECT_CLOUD -> vSie
    int MINECART -> XwGn
    int ACTIVATED_TNT -> CXIC
    int ENDER_CRYSTAL -> fnnF
    int TIPPED_ARROW_PROJECTILE -> yTao
    int SNOWBALL_PROJECTILE -> PLlg
    int EGG_PROJECTILE -> WAAS
    int GHAST_FIREBALL -> yLRN
    int BLAZE_FIREBALL -> vdkL
    int THROWN_ENDERPEARL -> jQGi
    int WITHER_SKULL_PROJECTILE -> YOWR
    int SHULKER_BULLET -> pcYt
    int FALLING_BLOCK -> SMcp
    int ITEM_FRAME -> xjpW
    int EYE_OF_ENDER -> YOUg
    int THROWN_POTION -> RdTG
    int THROWN_EXP_BOTTLE -> JBhu
    int FIREWORK_ROCKET -> MKrW
    int LEASH_KNOT -> nLRO
    int ARMORSTAND -> cUBv
    int FISHING_FLOAT -> GuUs
    int SPECTRAL_ARROW -> pQvp
    int DRAGON_FIREBALL -> mHls
    react.protocol.wrapper.WrapperPlayServerSpawnEntity$ObjectTypes INSTANCE -> gqof
    void <init>() -> <init>
    react.protocol.wrapper.WrapperPlayServerSpawnEntity$ObjectTypes getInstance() -> WPSK
    void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntity18 -> org.cyberpwn.react.UuMJ:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    com.comphenix.protocol.injector.PacketConstructor entityConstructor -> nfEf
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    void <init>(org.bukkit.entity.Entity,int,int) -> <init>
    com.comphenix.protocol.events.PacketContainer fromEntity(org.bukkit.entity.Entity,int,int) -> WGJb
    int getEntityID() -> vRTo
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    void setEntityID(int) -> CxJT
    int getType() -> getType
    void setType(int) -> setType
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    double getOptionalSpeedX() -> MBTt
    void setOptionalSpeedX(double) -> ssMp
    double getOptionalSpeedY() -> JtaN
    void setOptionalSpeedY(double) -> xNwp
    double getOptionalSpeedZ() -> mqrt
    void setOptionalSpeedZ(double) -> qcup
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    int getObjectData() -> GtIQ
    void setObjectData(int) -> kHyH
    void <clinit>() -> <clinit>
    java.lang.Object XX(java.lang.Object,java.lang.Object,java.lang.Object) -> rhOa
react.protocol.wrapper.WrapperPlayServerSpawnEntity18$ObjectTypes -> org.cyberpwn.react.LHNg:
    int BOAT -> SpHt
    int ITEM_STACK -> NFfX
    int MINECART -> XwGn
    int MINECART_STORAGE -> elLA
    int MINECART_POWERED -> PCyy
    int ACTIVATED_TNT -> CXIC
    int ENDER_CRYSTAL -> fnnF
    int ARROW_PROJECTILE -> QrSM
    int SNOWBALL_PROJECTILE -> PLlg
    int EGG_PROJECTILE -> WAAS
    int FIRE_BALL_GHAST -> GtvH
    int FIRE_BALL_BLAZE -> dFdS
    int THROWN_ENDERPEARL -> jQGi
    int WITHER_SKULL -> oOWi
    int FALLING_BLOCK -> SMcp
    int ITEM_FRAME -> xjpW
    int EYE_OF_ENDER -> YOUg
    int THROWN_POTION -> RdTG
    int FALLING_DRAGON_EGG -> jrlW
    int THROWN_EXP_BOTTLE -> JBhu
    int FIREWORK -> SpJq
    int FISHING_FLOAT -> GuUs
    react.protocol.wrapper.WrapperPlayServerSpawnEntity18$ObjectTypes INSTANCE -> TQKQ
    void <init>() -> <init>
    react.protocol.wrapper.WrapperPlayServerSpawnEntity18$ObjectTypes getInstance() -> HCgF
    void <clinit>() -> <clinit>
react.protocol.wrapper.WrapperPlayServerSpawnEntityExperienceOrb -> org.cyberpwn.react.pIDs:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    int getCount() -> getCount
    void setCount(int) -> setCount
    void <clinit>() -> <clinit>
    java.lang.Object Sf(java.lang.Object,java.lang.Object,java.lang.Object) -> jhgx
react.protocol.wrapper.WrapperPlayServerSpawnEntityExperienceOrb18 -> org.cyberpwn.react.nmSB:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    int getX() -> getX
    void setX(int) -> setX
    int getY() -> getY
    void setY(int) -> setY
    int getZ() -> getZ
    void setZ(int) -> setZ
    int getCount() -> getCount
    void setCount(int) -> setCount
    void <clinit>() -> <clinit>
    java.lang.Object OM(java.lang.Object,java.lang.Object,java.lang.Object) -> AXaK
react.protocol.wrapper.WrapperPlayServerSpawnEntityLiving -> org.cyberpwn.react.dMqx:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    com.comphenix.protocol.injector.PacketConstructor entityConstructor -> nfEf
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    void <init>(org.bukkit.entity.Entity) -> <init>
    com.comphenix.protocol.events.PacketContainer fromEntity(org.bukkit.entity.Entity) -> ePRm
    int getEntityID() -> vRTo
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    java.util.UUID getUniqueId() -> getUniqueId
    void setUniqueId(java.util.UUID) -> lTgP
    void setEntityID(int) -> CxJT
    org.bukkit.entity.EntityType getType() -> getType
    void setType(org.bukkit.entity.EntityType) -> KejP
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    float getHeadPitch() -> ryST
    void setHeadPitch(float) -> UAEN
    double getVelocityX() -> vIdy
    void setVelocityX(double) -> UAEN
    double getVelocityY() -> lMIt
    void setVelocityY(double) -> VDGt
    double getVelocityZ() -> dxWS
    void setVelocityZ(double) -> sHYj
    com.comphenix.protocol.wrappers.WrappedDataWatcher getMetadata() -> htEK
    void setMetadata(com.comphenix.protocol.wrappers.WrappedDataWatcher) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object nV(java.lang.Object,java.lang.Object,java.lang.Object) -> CUvD
react.protocol.wrapper.WrapperPlayServerSpawnEntityLiving18 -> org.cyberpwn.react.AsEp:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    com.comphenix.protocol.injector.PacketConstructor entityConstructor -> nfEf
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    void <init>(org.bukkit.entity.Entity) -> <init>
    com.comphenix.protocol.events.PacketContainer fromEntity(org.bukkit.entity.Entity) -> ePRm
    int getEntityID() -> vRTo
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    void setEntityID(int) -> CxJT
    org.bukkit.entity.EntityType getType() -> getType
    void setType(org.bukkit.entity.EntityType) -> KejP
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getHeadPitch() -> ryST
    void setHeadPitch(float) -> UAEN
    float getHeadYaw() -> GACI
    void setHeadYaw(float) -> VDGt
    double getVelocityX() -> vIdy
    void setVelocityX(double) -> UAEN
    double getVelocityY() -> lMIt
    void setVelocityY(double) -> VDGt
    double getVelocityZ() -> dxWS
    void setVelocityZ(double) -> sHYj
    com.comphenix.protocol.wrappers.WrappedDataWatcher getMetadata() -> htEK
    void setMetadata(com.comphenix.protocol.wrappers.WrappedDataWatcher) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Pb(java.lang.Object,java.lang.Object,java.lang.Object) -> KDLh
react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting -> org.cyberpwn.react.GJDD:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    com.comphenix.protocol.wrappers.EnumWrappers$Direction getDirection() -> HwBe
    void setDirection(com.comphenix.protocol.wrappers.EnumWrappers$Direction) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object dn(java.lang.Object,java.lang.Object,java.lang.Object) -> FEmO
react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18 -> org.cyberpwn.react.EKmJ:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    java.lang.Class DIRECTION_CLASS -> XLVN
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    com.comphenix.protocol.reflect.StructureModifier getDirections() -> getDirections
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction getDirection() -> SnYA
    void setDirection(react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object HV(java.lang.Object,java.lang.Object,java.lang.Object) -> qBgk
react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction -> org.cyberpwn.react.Tqjq:
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction DOWN -> TGxf
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction UP -> AQdM
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction NORTH -> kTMc
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction SOUTH -> BCds
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction WEST -> LQdR
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction EAST -> SMhB
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction[] $VALUES -> rOnw
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction[] values() -> values
    react.protocol.wrapper.WrapperPlayServerSpawnEntityPainting18$Direction valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object vv(java.lang.Object,java.lang.Object,java.lang.Object) -> DXxk
react.protocol.wrapper.WrapperPlayServerSpawnEntityWeather -> org.cyberpwn.react.AQBm:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    int getType() -> getType
    void setType(int) -> setType
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    void <clinit>() -> <clinit>
    java.lang.Object na(java.lang.Object,java.lang.Object,java.lang.Object) -> QWGK
react.protocol.wrapper.WrapperPlayServerSpawnEntityWeather18 -> org.cyberpwn.react.kJYq:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    int getType() -> getType
    void setType(int) -> setType
    int getX() -> getX
    void setX(int) -> setX
    int getY() -> getY
    void setY(int) -> setY
    int getZ() -> getZ
    void setZ(int) -> setZ
    void <clinit>() -> <clinit>
    java.lang.Object Kj(java.lang.Object,java.lang.Object,java.lang.Object) -> prbF
react.protocol.wrapper.WrapperPlayServerSpawnPosition -> org.cyberpwn.react.XSdW:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object ru(java.lang.Object,java.lang.Object,java.lang.Object) -> BAlx
react.protocol.wrapper.WrapperPlayServerSpawnPosition18 -> org.cyberpwn.react.aDko:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object qF(java.lang.Object,java.lang.Object,java.lang.Object) -> Btvy
react.protocol.wrapper.WrapperPlayServerStatistic -> org.cyberpwn.react.bsCw:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.util.Map getStatistics() -> getStatistics
    void setStatistics(java.util.Map) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object uW(java.lang.Object,java.lang.Object,java.lang.Object) -> gyQY
react.protocol.wrapper.WrapperPlayServerStatistics18 -> org.cyberpwn.react.QWaF:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.util.Map getStatistics() -> getStatistics
    void setStatistics(java.util.Map) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object dY(java.lang.Object,java.lang.Object,java.lang.Object) -> jXFv
react.protocol.wrapper.WrapperPlayServerTabComplete -> org.cyberpwn.react.WsEM:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getCount() -> getCount
    java.lang.String[] getMatches() -> DQLH
    void setMatches(java.lang.String[]) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object uR(java.lang.Object,java.lang.Object,java.lang.Object) -> kRXR
react.protocol.wrapper.WrapperPlayServerTabComplete18 -> org.cyberpwn.react.LsEg:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getCount() -> getCount
    java.lang.String[] getMatches() -> DQLH
    void setMatches(java.lang.String[]) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object jw(java.lang.Object,java.lang.Object,java.lang.Object) -> vAUp
react.protocol.wrapper.WrapperPlayServerTileEntityData -> org.cyberpwn.react.NWHi:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    int getAction() -> getAction
    void setAction(int) -> setAction
    com.comphenix.protocol.wrappers.nbt.NbtBase getNbtData() -> AHDQ
    void setNbtData(com.comphenix.protocol.wrappers.nbt.NbtBase) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Eq(java.lang.Object,java.lang.Object,java.lang.Object) -> Bcuc
react.protocol.wrapper.WrapperPlayServerTileEntityData18 -> org.cyberpwn.react.jXYI:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    int getAction() -> getAction
    void setAction(int) -> setAction
    com.comphenix.protocol.wrappers.nbt.NbtBase getNbtData() -> AHDQ
    void setNbtData(com.comphenix.protocol.wrappers.nbt.NbtBase) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object qs(java.lang.Object,java.lang.Object,java.lang.Object) -> NUvC
react.protocol.wrapper.WrapperPlayServerTitle -> org.cyberpwn.react.pbYl:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$TitleAction getAction() -> Smwi
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$TitleAction) -> WGJb
    com.comphenix.protocol.wrappers.WrappedChatComponent getTitle() -> dEUV
    void setTitle(com.comphenix.protocol.wrappers.WrappedChatComponent) -> SCOM
    int getFadeIn() -> INyG
    void setFadeIn(int) -> byso
    int getStay() -> ofwE
    void setStay(int) -> MItQ
    int getFadeOut() -> iLSr
    void setFadeOut(int) -> mGPB
    void <clinit>() -> <clinit>
    java.lang.Object IM(java.lang.Object,java.lang.Object,java.lang.Object) -> QFNM
react.protocol.wrapper.WrapperPlayServerTitle18 -> org.cyberpwn.react.BJrx:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$TitleAction getAction() -> Smwi
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$TitleAction) -> WGJb
    com.comphenix.protocol.wrappers.WrappedChatComponent getTitle() -> dEUV
    void setTitle(com.comphenix.protocol.wrappers.WrappedChatComponent) -> SCOM
    int getFadeIn() -> INyG
    void setFadeIn(int) -> byso
    int getStay() -> ofwE
    void setStay(int) -> MItQ
    int getFadeOut() -> iLSr
    void setFadeOut(int) -> mGPB
    void <clinit>() -> <clinit>
    java.lang.Object Tp(java.lang.Object,java.lang.Object,java.lang.Object) -> INvg
react.protocol.wrapper.WrapperPlayServerTransaction -> org.cyberpwn.react.AacN:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    short getActionNumber() -> xqlY
    void setActionNumber(short) -> WGJb
    boolean getAccepted() -> opCl
    void setAccepted(boolean) -> VDGt
    void <clinit>() -> <clinit>
    java.lang.Object Ws(java.lang.Object,java.lang.Object,java.lang.Object) -> GseP
react.protocol.wrapper.WrapperPlayServerTransaction18 -> org.cyberpwn.react.Hewq:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    short getActionNumber() -> xqlY
    void setActionNumber(short) -> WGJb
    boolean getAccepted() -> opCl
    void setAccepted(boolean) -> VDGt
    void <clinit>() -> <clinit>
    java.lang.Object ki(java.lang.Object,java.lang.Object,java.lang.Object) -> vACh
react.protocol.wrapper.WrapperPlayServerUnloadChunk -> org.cyberpwn.react.kckX:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getChunkX() -> getChunkX
    void setChunkX(int) -> xrBu
    int getChunkZ() -> getChunkZ
    void setChunkZ(int) -> teVE
    void <clinit>() -> <clinit>
    java.lang.Object wa(java.lang.Object,java.lang.Object,java.lang.Object) -> KLcE
react.protocol.wrapper.WrapperPlayServerUpdateAttributes -> org.cyberpwn.react.GbuS:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    java.util.List getAttributes() -> getAttributes
    void setAttributes(java.util.List) -> setAttributes
    void <clinit>() -> <clinit>
    java.lang.Object ln(java.lang.Object,java.lang.Object,java.lang.Object) -> iUDC
react.protocol.wrapper.WrapperPlayServerUpdateAttributes18 -> org.cyberpwn.react.pbYs:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    java.util.List getAttributes() -> getAttributes
    void setAttributes(java.util.List) -> setAttributes
    void <clinit>() -> <clinit>
    java.lang.Object kQ(java.lang.Object,java.lang.Object,java.lang.Object) -> biaN
react.protocol.wrapper.WrapperPlayServerUpdateEntityNbt18 -> org.cyberpwn.react.afpA:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> vRTo
    void setEntityID(int) -> CxJT
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> VDGt
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> WGJb
    com.comphenix.protocol.wrappers.nbt.NbtBase getTag() -> NEVu
    void setTag(com.comphenix.protocol.wrappers.nbt.NbtBase) -> dfal
    void <clinit>() -> <clinit>
    java.lang.Object YI(java.lang.Object,java.lang.Object,java.lang.Object) -> oVUU
react.protocol.wrapper.WrapperPlayServerUpdateHealth -> org.cyberpwn.react.QiDF:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    float getHealth() -> getHealth
    void setHealth(float) -> setHealth
    int getFood() -> nKCL
    void setFood(int) -> Jsob
    float getFoodSaturation() -> ydSu
    void setFoodSaturation(float) -> sHYj
    void <clinit>() -> <clinit>
    java.lang.Object AJ(java.lang.Object,java.lang.Object,java.lang.Object) -> pQGN
react.protocol.wrapper.WrapperPlayServerUpdateHealth18 -> org.cyberpwn.react.EKnG:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    float getHealth() -> getHealth
    void setHealth(float) -> setHealth
    int getFood() -> nKCL
    void setFood(int) -> Jsob
    float getFoodSaturation() -> ydSu
    void setFoodSaturation(float) -> sHYj
    void <clinit>() -> <clinit>
    java.lang.Object li(java.lang.Object,java.lang.Object,java.lang.Object) -> VLnc
react.protocol.wrapper.WrapperPlayServerUpdateSign18 -> org.cyberpwn.react.Lrdy:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    com.comphenix.protocol.wrappers.WrappedChatComponent[] getLines() -> htAD
    void setLines(com.comphenix.protocol.wrappers.WrappedChatComponent[]) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object UU(java.lang.Object,java.lang.Object,java.lang.Object) -> KUaB
react.protocol.wrapper.WrapperPlayServerUpdateTime -> org.cyberpwn.react.NyKD:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    long getAgeOfTheWorld() -> BRvO
    void setAgeOfTheWorld(long) -> vQbs
    long getTimeOfDay() -> getTimeOfDay
    void setTimeOfDay(long) -> setTimeOfDay
    void <clinit>() -> <clinit>
    java.lang.Object bP(java.lang.Object,java.lang.Object,java.lang.Object) -> PnAr
react.protocol.wrapper.WrapperPlayServerUpdateTime18 -> org.cyberpwn.react.CyKY:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    long getAgeOfTheWorld() -> BRvO
    void setAgeOfTheWorld(long) -> vQbs
    long getTimeOfDay() -> getTimeOfDay
    void setTimeOfDay(long) -> setTimeOfDay
    void <clinit>() -> <clinit>
    java.lang.Object Dq(java.lang.Object,java.lang.Object,java.lang.Object) -> VxDI
react.protocol.wrapper.WrapperPlayServerVehicleMove -> org.cyberpwn.react.nJpo:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    void <clinit>() -> <clinit>
    java.lang.Object Mg(java.lang.Object,java.lang.Object,java.lang.Object) -> MBTt
react.protocol.wrapper.WrapperPlayServerWindowData -> org.cyberpwn.react.yeCi:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    int getProperty() -> BtuA
    void setProperty(int) -> oLts
    int getValue() -> getValue
    void setValue(int) -> setValue
    void <clinit>() -> <clinit>
    java.lang.Object KJ(java.lang.Object,java.lang.Object,java.lang.Object) -> JtaN
react.protocol.wrapper.WrapperPlayServerWindowItems -> org.cyberpwn.react.dVdw:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    java.util.List getSlotData() -> rpaE
    void setSlotData(java.util.List) -> wnYS
    void <clinit>() -> <clinit>
    java.lang.Object yT(java.lang.Object,java.lang.Object,java.lang.Object) -> mqrt
react.protocol.wrapper.WrapperPlayServerWindowItems18 -> org.cyberpwn.react.OIHv:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> JIbx
    void setWindowId(int) -> BlVQ
    org.bukkit.inventory.ItemStack[] getSlotData() -> vkkV
    void setSlotData(org.bukkit.inventory.ItemStack[]) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object dL(java.lang.Object,java.lang.Object,java.lang.Object) -> GtIQ
react.protocol.wrapper.WrapperPlayServerWorldBorder -> org.cyberpwn.react.IPHs:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$WorldBorderAction getAction() -> tLTH
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$WorldBorderAction) -> WGJb
    int getPortalTeleportBoundary() -> jGFt
    void setPortalTeleportBoundary(int) -> JALR
    double getCenterX() -> getCenterX
    void setCenterX(double) -> PBWD
    double getCenterZ() -> getCenterZ
    void setCenterZ(double) -> vQbs
    double getOldRadius() -> ofwO
    void setOldRadius(double) -> eHBt
    double getRadius() -> CEWx
    void setRadius(double) -> XJNQ
    long getSpeed() -> lnny
    void setSpeed(long) -> eHBt
    int getWarningTime() -> getWarningTime
    void setWarningTime(int) -> setWarningTime
    int getWarningDistance() -> getWarningDistance
    void setWarningDistance(int) -> setWarningDistance
    void <clinit>() -> <clinit>
    java.lang.Object UG(java.lang.Object,java.lang.Object,java.lang.Object) -> WPSK
react.protocol.wrapper.WrapperPlayServerWorldBorder18 -> org.cyberpwn.react.NyKU:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$WorldBorderAction getAction() -> tLTH
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$WorldBorderAction) -> WGJb
    int getPortalTeleportBoundary() -> jGFt
    void setPortalTeleportBoundary(int) -> JALR
    double getCenterX() -> getCenterX
    void setCenterX(double) -> PBWD
    double getCenterZ() -> getCenterZ
    void setCenterZ(double) -> vQbs
    double getOldRadius() -> ofwO
    void setOldRadius(double) -> eHBt
    double getRadius() -> CEWx
    void setRadius(double) -> XJNQ
    long getSpeed() -> lnny
    void setSpeed(long) -> eHBt
    int getWarningTime() -> getWarningTime
    void setWarningTime(int) -> setWarningTime
    int getWarningDistance() -> getWarningDistance
    void setWarningDistance(int) -> setWarningDistance
    void <clinit>() -> <clinit>
    java.lang.Object Po(java.lang.Object,java.lang.Object,java.lang.Object) -> hQNI
react.protocol.wrapper.WrapperPlayServerWorldEvent -> org.cyberpwn.react.Sngb:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEffectId() -> getEffectId
    void setEffectId(int) -> avqR
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    int getData() -> getData
    void setData(int) -> setData
    boolean getDisableRelativeVolume() -> RRFm
    void setDisableRelativeVolume(boolean) -> eHBt
    void <clinit>() -> <clinit>
    java.lang.Object hN(java.lang.Object,java.lang.Object,java.lang.Object) -> HCgF
react.protocol.wrapper.WrapperPlayServerWorldEvent18 -> org.cyberpwn.react.dVfN:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEffectId() -> getEffectId
    void setEffectId(int) -> avqR
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> pjRs
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> WGJb
    int getData() -> getData
    void setData(int) -> setData
    boolean getDisableRelativeVolume() -> RRFm
    void setDisableRelativeVolume(boolean) -> eHBt
    void <clinit>() -> <clinit>
    java.lang.Object fv(java.lang.Object,java.lang.Object,java.lang.Object) -> ryST
react.protocol.wrapper.WrapperPlayServerWorldParticles -> org.cyberpwn.react.iLbe:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$Particle getParticleType() -> Wqvf
    void setParticleType(com.comphenix.protocol.wrappers.EnumWrappers$Particle) -> WGJb
    float getX() -> getX
    void setX(float) -> ssMp
    float getY() -> getY
    void setY(float) -> xNwp
    float getZ() -> getZ
    void setZ(float) -> qcup
    float getOffsetX() -> MKGk
    void setOffsetX(float) -> PBWD
    float getOffsetY() -> NEYn
    void setOffsetY(float) -> vQbs
    float getOffsetZ() -> LjHV
    void setOffsetZ(float) -> eHBt
    float getParticleData() -> KxFc
    void setParticleData(float) -> XJNQ
    int getNumberOfParticles() -> yKFH
    void setNumberOfParticles(int) -> CEHd
    boolean getLongDistance() -> oDvc
    void setLongDistance(boolean) -> XJNQ
    int[] getData() -> getData
    void setData(int[]) -> mOYk
    void <clinit>() -> <clinit>
    java.lang.Object LY(java.lang.Object,java.lang.Object,java.lang.Object) -> GACI
react.protocol.wrapper.WrapperPlayServerWorldParticles18 -> org.cyberpwn.react.CFGm:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$Particle getParticleType() -> Wqvf
    void setParticleType(com.comphenix.protocol.wrappers.EnumWrappers$Particle) -> WGJb
    float getX() -> getX
    void setX(float) -> ssMp
    float getY() -> getY
    void setY(float) -> xNwp
    float getZ() -> getZ
    void setZ(float) -> qcup
    float getOffsetX() -> MKGk
    void setOffsetX(float) -> PBWD
    float getOffsetY() -> NEYn
    void setOffsetY(float) -> vQbs
    float getOffsetZ() -> LjHV
    void setOffsetZ(float) -> eHBt
    float getParticleData() -> KxFc
    void setParticleData(float) -> XJNQ
    int getNumberOfParticles() -> yKFH
    void setNumberOfParticles(int) -> CEHd
    boolean getLongDistance() -> oDvc
    void setLongDistance(boolean) -> XJNQ
    int[] getData() -> getData
    void setData(int[]) -> mOYk
    void <clinit>() -> <clinit>
    java.lang.Object Jn(java.lang.Object,java.lang.Object,java.lang.Object) -> SnYA
react.protocol.wrapper.WrapperStatusClientPing -> org.cyberpwn.react.pYga:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    long getTime() -> getTime
    void setTime(long) -> setTime
    void <clinit>() -> <clinit>
    java.lang.Object RG(java.lang.Object,java.lang.Object,java.lang.Object) -> DQLH
react.protocol.wrapper.WrapperStatusClientStart -> org.cyberpwn.react.VDkn:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object aA(java.lang.Object,java.lang.Object,java.lang.Object) -> AHDQ
react.protocol.wrapper.WrapperStatusServerOutServerInfo18 -> org.cyberpwn.react.jWup:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedServerPing getJsonResponse() -> SDHk
    void setJsonResponse(com.comphenix.protocol.wrappers.WrappedServerPing) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object rT(java.lang.Object,java.lang.Object,java.lang.Object) -> Smwi
react.protocol.wrapper.WrapperStatusServerPong -> org.cyberpwn.react.ymTC:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    long getTime() -> getTime
    void setTime(long) -> setTime
    void <clinit>() -> <clinit>
    java.lang.Object KL(java.lang.Object,java.lang.Object,java.lang.Object) -> dEUV
react.protocol.wrapper.WrapperStatusServerServerInfo -> org.cyberpwn.react.pIFu:
    com.comphenix.protocol.PacketType TYPE -> OAWQ
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedServerPing getJsonResponse() -> SDHk
    void setJsonResponse(com.comphenix.protocol.wrappers.WrappedServerPing) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object Uy(java.lang.Object,java.lang.Object,java.lang.Object) -> INyG
react.protocol.wrapper.gq -> org.cyberpwn.react.RtUn:
    java.lang.Object[] h -> NFbO
    java.lang.Class[] R -> wFMb
    int[] O -> pALS
    short[] w -> WYsn
    int a -> a
    int K -> K
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class I(int,int) -> RPmS
    java.lang.Class H(int) -> URKO
    java.lang.reflect.Method T(int) -> GruU
    java.lang.Object a(int,java.lang.Object[]) -> HvRk
    java.lang.Object f(java.lang.Object,int,java.lang.Object[]) -> PBWD
    java.lang.Object A(int,java.lang.Object[]) -> mOYk
    java.lang.reflect.Field x(int) -> VfPB
    java.lang.Object i(java.lang.Object,int) -> qcup
    void o(java.lang.Object,int,java.lang.Object) -> eHBt
    java.lang.Object T(int) -> kbkM
    void r(int,java.lang.Object) -> xNwp
react.protocol.yt -> org.cyberpwn.react.qmlY:
    java.lang.Object[] V -> CgEJ
    java.lang.Class[] h -> kTLl
    int[] w -> cuyd
    short[] W -> BeAK
    int R -> R
    int G -> G
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class B(int,int) -> CMUG
    java.lang.Class W(int) -> xGNF
    java.lang.reflect.Method b(int) -> FhCR
    java.lang.Object g(int,java.lang.Object[]) -> fcvC
    java.lang.Object A(java.lang.Object,int,java.lang.Object[]) -> vQbs
    java.lang.Object C(int,java.lang.Object[]) -> CgEJ
    java.lang.reflect.Field M(int) -> lTgP
    java.lang.Object p(java.lang.Object,int) -> PBWD
    void L(java.lang.Object,int,java.lang.Object) -> XJNQ
    java.lang.Object E(int) -> nuDS
    void M(int,java.lang.Object) -> eHBt
react.rai.Goal -> org.cyberpwn.react.vBHD:
    react.glang.GList subgoals -> lpbH
    java.lang.String tag -> Qqts
    void <init>(java.lang.String) -> <init>
    react.glang.GList getSubgoals() -> hkWW
    void propigate() -> mYEG
    void addGoal(react.rai.IGoal) -> addGoal
    react.glang.GList getFailingSubgoals() -> hQeJ
    boolean isFailing() -> KVCu
    java.lang.String getTag() -> getTag
    void update() -> update
    boolean onCheckFailing() -> wwbj
    void onPropigated() -> vknN
    java.lang.Object Qp(java.lang.Object,java.lang.Object,java.lang.Object) -> XJNQ
react.rai.Goal$1 -> org.cyberpwn.react.DHjD:
    react.rai.IGoal val$i -> LACg
    react.rai.Goal this$0 -> EMQC
    void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    void run() -> run
react.rai.IGoal -> org.cyberpwn.react.HfXW:
    react.glang.GList getSubgoals() -> hkWW
    void propigate() -> mYEG
    void onPropigated() -> vknN
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> hQeJ
    boolean isFailing() -> KVCu
    boolean onCheckFailing() -> wwbj
    void update() -> update
    void addGoal(react.rai.IGoal) -> addGoal
react.rai.IRAI -> org.cyberpwn.react.skfD:
    react.glang.GList getGoals() -> getGoals
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> addGoal
    react.glang.GList getEvents() -> getEvents
    void callEvent(react.rai.RAIEvent) -> callEvent
    react.glang.GList getListeners() -> getListeners
react.rai.RAI -> org.cyberpwn.react.NVid:
    react.glang.GList goals -> JSoD
    react.glang.GList events -> lpak
    react.glang.GList logEvents -> sJar
    react.glang.GList listeners -> BTet
    long since -> QGbG
    react.rai.RAI instance -> bcEU
    void <init>() -> <init>
    react.glang.GList getGoals() -> getGoals
    void addGoal(react.rai.IGoal) -> addGoal
    void tick() -> tick
    react.glang.GList getEvents() -> getEvents
    void callEvent(react.rai.RAIEvent) -> callEvent
    react.glang.GList getListeners() -> getListeners
    java.lang.Object Rr(java.lang.Object,java.lang.Object,java.lang.Object) -> ofwE
react.rai.RAI$RAI -> org.cyberpwn.react.jGXt:
    java.lang.Object[] E -> PMBB
    int n -> n
    java.math.BigInteger[] c -> KhHE
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void e(int,java.lang.Object) -> EBVK
    int k(int,int) -> WGJb
    int h(byte[],int) -> LXLE
    void y16950() -> dVYT
    void T() -> OXeW
    java.lang.String M(java.lang.Object) -> UAEN
react.rai.RAI$RAIEvent -> org.cyberpwn.react.VpCj:
    java.lang.Object[] I -> iUpY
    int O -> O
    java.math.BigInteger[] U -> QicQ
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void j(int,java.lang.Object) -> DrYG
    int K(int,int) -> mOYk
    int g(byte[],int) -> bWiv
    void n29960() -> PTPL
    void W() -> HwME
    java.lang.String E(java.lang.Object) -> vRCd
react.rai.RAIEvent -> org.cyberpwn.react.PebC:
    react.rai.RAIEventType type -> fMLp
    java.lang.String[] pars -> lEmJ
    java.lang.String ovt -> BwLQ
    void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    java.lang.String toString() -> toString
    react.rai.RAIEventType getType() -> tDFF
    java.lang.String[] getPars() -> UIkw
    java.lang.String getOvt() -> aoSI
    java.lang.Object QL(java.lang.Object,java.lang.Object,java.lang.Object) -> VTwR
react.rai.RAIEventType -> org.cyberpwn.react.MTGr:
    react.rai.RAIEventType FIRE_ACTION -> FIRE_ACTION
    react.rai.RAIEventType NOTE_GOAL_FAILING -> NOTE_GOAL_FAILING
    react.rai.RAIEventType NOTE_GOAL_FIXED -> NOTE_GOAL_FIXED
    java.lang.String[] msgs -> msgs
    react.rai.RAIEventType[] $VALUES -> $VALUES
    react.rai.RAIEventType[] values() -> values
    react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    int getSize() -> getSize
    int pickRandom() -> pickRandom
    java.lang.String formatFor(int,java.lang.String[]) -> formatFor
    void <clinit>() -> <clinit>
    java.lang.Object EO(java.lang.Object,java.lang.Object,java.lang.Object) -> EO
react.rai.e -> org.cyberpwn.react.DsaH:
    java.lang.Object[] L -> lyKH
    java.lang.Class[] o -> hBRN
    int[] Y -> gXaI
    short[] X -> SpJX
    int r -> r
    int g -> g
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class q(int,int) -> tuqb
    java.lang.Class Z(int) -> uEsi
    java.lang.reflect.Method p(int) -> yRaQ
    java.lang.Object J(int,java.lang.Object[]) -> ssMp
    java.lang.Object p(java.lang.Object,int,java.lang.Object[]) -> eHBt
    java.lang.Object v(int,java.lang.Object[]) -> LXLE
    java.lang.reflect.Field k(int) -> xiNT
    java.lang.Object d(java.lang.Object,int) -> vQbs
    void A(java.lang.Object,int,java.lang.Object) -> DrYG
    java.lang.Object o(int) -> xFlb
    void X(int,java.lang.Object) -> XJNQ
react.rai.goals.GoalReducedEntityCounts -> org.cyberpwn.react.PnRs:
    int spawned -> jGvx
    boolean failing -> jrkD
    double cd -> Wbcq
    double ad -> dFgD
    void <init>() -> <init>
    boolean onCheckFailing() -> wwbj
    void onPropigated() -> vknN
    boolean access$000(react.rai.goals.GoalReducedEntityCounts) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object HN(java.lang.Object,java.lang.Object,java.lang.Object) -> iLSr
react.rai.goals.GoalReducedEntityCounts$1 -> org.cyberpwn.react.STxU:
    react.rai.goals.GoalReducedEntityCounts this$0 -> fxAR
    void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    void run() -> run
    java.lang.Object iK(java.lang.Object,java.lang.Object,java.lang.Object) -> NEVu
react.rai.goals.GoalReducedEntityCounts$2 -> org.cyberpwn.react.qmoa:
    org.bukkit.Chunk val$lx -> IQJs
    react.rai.goals.GoalReducedEntityCounts this$0 -> fxAR
    void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    void run() -> run
    java.lang.Object jK(java.lang.Object,java.lang.Object,java.lang.Object) -> nKCL
react.rai.goals.GoalStableChunkTime -> org.cyberpwn.react.cmXc:
    boolean failing -> jrkD
    void <init>() -> <init>
    boolean onCheckFailing() -> wwbj
    void onPropigated() -> vknN
    java.lang.Object NU(java.lang.Object,java.lang.Object,java.lang.Object) -> ydSu
react.rai.goals.GoalStableChunkTime$1 -> org.cyberpwn.react.skdw:
    react.rai.goals.GoalStableChunkTime this$0 -> fLmB
    void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    void run() -> run
    java.lang.Object Kg(java.lang.Object,java.lang.Object,java.lang.Object) -> BRvO
react.rai.goals.GoalStableEntityTime -> org.cyberpwn.react.FqVj:
    boolean failing -> jrkD
    void <init>() -> <init>
    void onPropigated() -> vknN
    void letUp() -> QNap
    boolean onCheckFailing() -> wwbj
    boolean access$000(react.rai.goals.GoalStableEntityTime) -> WGJb
    java.lang.Object yT(java.lang.Object,java.lang.Object,java.lang.Object) -> mqrt
react.rai.goals.GoalStableEntityTime$1 -> org.cyberpwn.react.xYQx:
    react.rai.goals.GoalStableEntityTime this$0 -> Tajn
    void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    void run() -> run
    java.lang.Object ZI(java.lang.Object,java.lang.Object,java.lang.Object) -> rpaE
react.rai.goals.GoalStableEntityTime$GoalStableChunkTime -> org.cyberpwn.react.AiwN:
    java.lang.Object[] l -> KyNg
    int n -> n
    java.math.BigInteger[] G -> EfVN
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void A(int,java.lang.Object) -> gpKE
    int Y(int,int) -> vQbs
    int h(byte[],int) -> LXLE
    void f398() -> wLmu
    void V() -> APDY
    java.lang.String P(java.lang.Object) -> Vvlm
react.rai.goals.GoalStableFluidTime -> org.cyberpwn.react.vtmf:
    boolean failing -> jrkD
    react.glang.GMap reocc -> btEl
    void <init>() -> <init>
    void onPropigated() -> vknN
    boolean onCheckFailing() -> wwbj
    react.glang.GMap access$000(react.rai.goals.GoalStableFluidTime) -> WGJb
    boolean access$100(react.rai.goals.GoalStableFluidTime) -> dfal
    java.lang.Object FY(java.lang.Object,java.lang.Object,java.lang.Object) -> vkkV
react.rai.goals.GoalStableFluidTime$1 -> org.cyberpwn.react.twYM:
    org.bukkit.Chunk val$lx -> IQJs
    react.glang.GList val$otherLaggiest -> vBiK
    react.rai.goals.GoalStableFluidTime this$0 -> GdWS
    void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk,react.glang.GList) -> <init>
    void run() -> run
    java.lang.Object Ra(java.lang.Object,java.lang.Object,java.lang.Object) -> tLTH
react.rai.goals.GoalStableFluidTime$2 -> org.cyberpwn.react.ELOJ:
    react.rai.goals.GoalStableFluidTime this$0 -> GdWS
    void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    void run() -> run
    java.lang.Object Ic(java.lang.Object,java.lang.Object,java.lang.Object) -> jGFt
react.rai.goals.GoalStableFluidTime$GoalStableTickTime -> org.cyberpwn.react.Lree:
    java.lang.Object[] Z -> AcAy
    int D -> D
    java.math.BigInteger[] H -> dOFv
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void d(int,java.lang.Object) -> XdAJ
    int w(int,int) -> LiMa
    int t(byte[],int) -> gpKE
    void r8429() -> xPQr
    void L() -> L
    java.lang.String A(java.lang.Object) -> XJNQ
react.rai.goals.GoalStableHopperTime -> org.cyberpwn.react.cvIC:
    boolean failing -> jrkD
    react.glang.GMap reocc -> btEl
    void <init>() -> <init>
    void onPropigated() -> vknN
    boolean onCheckFailing() -> wwbj
    react.glang.GMap access$000(react.rai.goals.GoalStableHopperTime) -> WGJb
    boolean access$100(react.rai.goals.GoalStableHopperTime) -> dfal
    java.lang.Object BP(java.lang.Object,java.lang.Object,java.lang.Object) -> QFAs
react.rai.goals.GoalStableHopperTime$1 -> org.cyberpwn.react.KEOU:
    org.bukkit.Chunk val$lx -> IQJs
    react.rai.goals.GoalStableHopperTime this$0 -> msdG
    void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    void run() -> run
    java.lang.Object pw(java.lang.Object,java.lang.Object,java.lang.Object) -> ofwO
react.rai.goals.GoalStableHopperTime$2 -> org.cyberpwn.react.MmXY:
    react.rai.goals.GoalStableHopperTime this$0 -> msdG
    void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    void run() -> run
    java.lang.Object va(java.lang.Object,java.lang.Object,java.lang.Object) -> CEWx
react.rai.goals.GoalStableRedstoneTime -> org.cyberpwn.react.GlGh:
    int d -> d
    boolean failing -> jrkD
    react.glang.GMap reocc -> btEl
    void <init>() -> <init>
    void onPropigated() -> vknN
    boolean onCheckFailing() -> wwbj
    react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> WGJb
    boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> dfal
    java.lang.Object ly(java.lang.Object,java.lang.Object,java.lang.Object) -> lnny
react.rai.goals.GoalStableRedstoneTime$1 -> org.cyberpwn.react.KpCi:
    react.rai.goals.GoalStableRedstoneTime this$0 -> uHVn
    org.bukkit.Chunk val$lx -> IQJs
    void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    void run() -> run
    java.lang.Object qc(java.lang.Object,java.lang.Object,java.lang.Object) -> RRFm
react.rai.goals.GoalStableRedstoneTime$2 -> org.cyberpwn.react.nBcJ:
    react.rai.goals.GoalStableRedstoneTime this$0 -> uHVn
    void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    void run() -> run
    java.lang.Object Nu(java.lang.Object,java.lang.Object,java.lang.Object) -> Wqvf
react.rai.goals.GoalStableTickTime -> org.cyberpwn.react.tLdk:
    boolean failing -> jrkD
    void <init>() -> <init>
    void onPropigated() -> vknN
    boolean onCheckFailing() -> wwbj
    boolean access$000(react.rai.goals.GoalStableTickTime) -> WGJb
    java.lang.Object kp(java.lang.Object,java.lang.Object,java.lang.Object) -> MKGk
react.rai.goals.GoalStableTickTime$1 -> org.cyberpwn.react.vuOJ:
    react.rai.goals.GoalStableTickTime this$0 -> dhht
    void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    void run() -> run
    java.lang.Object um(java.lang.Object,java.lang.Object,java.lang.Object) -> NEYn
react.rai.goals.mh -> org.cyberpwn.react.CWKi:
    java.lang.Object[] b -> oGEy
    java.lang.Class[] y -> IbLp
    int[] bk -> vTJu
    short[] f -> foCv
    int W -> W
    int o -> o
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class a(int,int) -> bWiv
    java.lang.Class h(int) -> BIsv
    java.lang.reflect.Method D(int) -> fAyS
    java.lang.Object g(int,java.lang.Object[]) -> fcvC
    java.lang.Object q(java.lang.Object,int,java.lang.Object[]) -> SCOM
    java.lang.Object m(int,java.lang.Object[]) -> DrYG
    java.lang.reflect.Field s(int) -> sQMd
    java.lang.Object v(java.lang.Object,int) -> dfal
    void T(java.lang.Object,int,java.lang.Object) -> XdAJ
    java.lang.Object k(int) -> AWsB
    void z(int,java.lang.Object) -> wnWa
react.redstone.RedstoneEvent -> org.cyberpwn.react.RQsk:
    surge.util.MaterialBlock block -> mRDo
    org.bukkit.util.Vector vector -> LsiE
    byte from -> UnBl
    byte to -> Nhmg
    void <init>(org.bukkit.event.block.BlockRedstoneEvent) -> <init>
    surge.util.MaterialBlock getBlock() -> quor
    void setBlock(surge.util.MaterialBlock) -> WGJb
    org.bukkit.util.Vector getVector() -> twIh
    void setVector(org.bukkit.util.Vector) -> lTgP
    byte getFrom() -> XuYm
    void setFrom(byte) -> OYFP
    byte getTo() -> FNbr
    void setTo(byte) -> UAEN
    java.lang.Object VE(java.lang.Object,java.lang.Object,java.lang.Object) -> LjHV
react.redstone.RedstoneEvent$RedstoneTracker -> org.cyberpwn.react.Kobp:
    java.lang.Object[] f -> xbRC
    int I -> I
    java.math.BigInteger[] D -> XSsI
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void K(int,java.lang.Object) -> nJMP
    int g(int,int) -> nJMP
    int S(byte[],int) -> OXeW
    void z21449() -> gyUP
    void Q() -> Q
    java.lang.String p(java.lang.Object) -> LiMa
react.redstone.RedstoneTracker -> org.cyberpwn.react.Qydo:
    org.bukkit.World world -> world
    react.controller.FeatureController fc -> ynXo
    react.glang.GList events -> lpak
    boolean ticking -> BwLa
    surge.sched.Task task -> KFSL
    boolean nms -> cLWg
    int tr -> UvSb
    react.gmath.Average aav -> bYtq
    boolean handleTicking -> lgsC
    void <init>(org.bukkit.World) -> <init>
    void close() -> close
    void tick() -> tick
    void set(org.bukkit.Location,surge.util.MaterialBlock) -> dfal
    void enact(react.redstone.RedstoneEvent) -> WGJb
    void on(org.bukkit.event.block.BlockRedstoneEvent) -> WGJb
    java.lang.Object Fv(java.lang.Object,java.lang.Object,java.lang.Object) -> rVnI
react.redstone.RedstoneTracker$1 -> org.cyberpwn.react.jXXu:
    react.redstone.RedstoneTracker this$0 -> KOCw
    void <init>(react.redstone.RedstoneTracker,java.lang.String,int) -> <init>
    void run() -> run
    java.lang.Object DH(java.lang.Object,java.lang.Object,java.lang.Object) -> KxFc
react.redstone.RedstoneTracker$RedstoneEvent -> org.cyberpwn.react.KgRn:
    java.lang.Object[] Y -> Lavv
    int w -> w
    java.math.BigInteger[] wS -> JvTd
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void S(int,java.lang.Object) -> LXLE
    int W(int,int) -> eHBt
    int l(byte[],int) -> UAEN
    void Q20011() -> DkAW
    void x() -> x
    java.lang.String T(java.lang.Object) -> EAwa
react.redstone.rx -> org.cyberpwn.react.nvGg:
    java.lang.Object[] I -> iUpY
    java.lang.Class[] W -> nmxL
    int[] O -> pALS
    short[] p -> aVqK
    int P -> P
    int B -> B
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class S(int,int) -> vACh
    java.lang.Class l(int) -> AFpm
    java.lang.reflect.Method K(int) -> kIWJ
    java.lang.Object M(int,java.lang.Object[]) -> sHYj
    java.lang.Object u(java.lang.Object,int,java.lang.Object[]) -> sHYj
    java.lang.Object h(int,java.lang.Object[]) -> tupB
    java.lang.reflect.Field H(int) -> xNwp
    java.lang.Object l(java.lang.Object,int) -> wnYS
    void L(java.lang.Object,int,java.lang.Object) -> XJNQ
    java.lang.Object S(int) -> QNKT
    void S(int,java.lang.Object) -> LXLE
react.sampler.SampleAsyncQueue -> org.cyberpwn.react.HLgb:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object Ss(java.lang.Object,java.lang.Object,java.lang.Object) -> yKFH
react.sampler.SampleAsyncQueue$1 -> org.cyberpwn.react.riAt:
    react.sampler.SampleAsyncQueue this$0 -> xHqT
    void <init>(react.sampler.SampleAsyncQueue) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object ck(java.lang.Object,java.lang.Object,java.lang.Object) -> oDvc
react.sampler.SampleBandwidth -> org.cyberpwn.react.fvdF:
    react.graph.IFormatter formatter -> cByY
    long u -> Lsga
    long d -> d
    react.gmath.Average aa -> WcFi
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object Sy(java.lang.Object,java.lang.Object,java.lang.Object) -> SDHk
react.sampler.SampleBandwidth$1 -> org.cyberpwn.react.dWKd:
    react.sampler.SampleBandwidth this$0 -> ARGo
    void <init>(react.sampler.SampleBandwidth) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object TM(java.lang.Object,java.lang.Object,java.lang.Object) -> hkWW
react.sampler.SampleBandwidthDown -> org.cyberpwn.react.Xujx:
    react.gmath.Average aa -> WcFi
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object xs(java.lang.Object,java.lang.Object,java.lang.Object) -> mYEG
react.sampler.SampleBandwidthDown$1 -> org.cyberpwn.react.OcAP:
    react.sampler.SampleBandwidthDown this$0 -> nKuL
    void <init>(react.sampler.SampleBandwidthDown) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object TZ(java.lang.Object,java.lang.Object,java.lang.Object) -> tKoL
react.sampler.SampleBandwidthUp -> org.cyberpwn.react.RtYw:
    react.gmath.Average aa -> WcFi
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object OG(java.lang.Object,java.lang.Object,java.lang.Object) -> hQeJ
react.sampler.SampleBandwidthUp$1 -> org.cyberpwn.react.dFIp:
    react.sampler.SampleBandwidthUp this$0 -> bHqo
    void <init>(react.sampler.SampleBandwidthUp) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object vw(java.lang.Object,java.lang.Object,java.lang.Object) -> KVCu
react.sampler.SampleCPU -> org.cyberpwn.react.Jtrs:
    react.graph.IFormatter formatter -> cByY
    react.gmath.Average aa -> WcFi
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    react.gmath.Average access$000(react.sampler.SampleCPU) -> WGJb
    java.lang.Object vx(java.lang.Object,java.lang.Object,java.lang.Object) -> wwbj
react.sampler.SampleCPU$1 -> org.cyberpwn.react.RRXD:
    react.sampler.SampleCPU this$0 -> lEnn
    void <init>(react.sampler.SampleCPU) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object YK(java.lang.Object,java.lang.Object,java.lang.Object) -> vknN
react.sampler.SampleCPU$2 -> org.cyberpwn.react.neIj:
    react.sampler.SampleCPU this$0 -> lEnn
    void <init>(react.sampler.SampleCPU) -> <init>
    void run() -> run
    java.lang.Object aP(java.lang.Object,java.lang.Object,java.lang.Object) -> dVYT
react.sampler.SampleChunkTime -> org.cyberpwn.react.gqVh:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object cX(java.lang.Object,java.lang.Object,java.lang.Object) -> PTPL
react.sampler.SampleChunkTime$1 -> org.cyberpwn.react.cKVp:
    react.sampler.SampleChunkTime this$0 -> rYBt
    void <init>(react.sampler.SampleChunkTime) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object yN(java.lang.Object,java.lang.Object,java.lang.Object) -> HwME
react.sampler.SampleChunksLoaded -> org.cyberpwn.react.tTxS:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object EV(java.lang.Object,java.lang.Object,java.lang.Object) -> anfr
react.sampler.SampleChunksLoaded$1 -> org.cyberpwn.react.fTaR:
    react.sampler.SampleChunksLoaded this$0 -> plNj
    void <init>(react.sampler.SampleChunksLoaded) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object tl(java.lang.Object,java.lang.Object,java.lang.Object) -> tDFF
react.sampler.SampleChunksLoadedPerSecond -> org.cyberpwn.react.dVkX:
    react.gmath.Average a -> KWRr
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object ce(java.lang.Object,java.lang.Object,java.lang.Object) -> UIkw
react.sampler.SampleChunksLoadedPerSecond$1 -> org.cyberpwn.react.XvMG:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> PUaY
    void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object jf(java.lang.Object,java.lang.Object,java.lang.Object) -> aoSI
react.sampler.SampleEntitiesDrops -> org.cyberpwn.react.oEhS:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object PU(java.lang.Object,java.lang.Object,java.lang.Object) -> QNap
react.sampler.SampleEntitiesDrops$1 -> org.cyberpwn.react.hkhM:
    react.sampler.SampleEntitiesDrops this$0 -> gOpr
    void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object wq(java.lang.Object,java.lang.Object,java.lang.Object) -> wLmu
react.sampler.SampleEntitiesLiving -> org.cyberpwn.react.HDYx:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object rk(java.lang.Object,java.lang.Object,java.lang.Object) -> xPQr
react.sampler.SampleEntitiesLiving$1 -> org.cyberpwn.react.hRVW:
    react.sampler.SampleEntitiesLiving this$0 -> ynWg
    void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object DJ(java.lang.Object,java.lang.Object,java.lang.Object) -> quor
react.sampler.SampleEntitiesTiles -> org.cyberpwn.react.mbEx:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object fx(java.lang.Object,java.lang.Object,java.lang.Object) -> twIh
react.sampler.SampleEntitiesTiles$1 -> org.cyberpwn.react.wobs:
    react.sampler.SampleEntitiesTiles this$0 -> ubLG
    void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object VN(java.lang.Object,java.lang.Object,java.lang.Object) -> XuYm
react.sampler.SampleEntitiesTotal -> org.cyberpwn.react.HTyO:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object Ds(java.lang.Object,java.lang.Object,java.lang.Object) -> FNbr
react.sampler.SampleEntitiesTotal$1 -> org.cyberpwn.react.gFaQ:
    react.sampler.SampleEntitiesTotal this$0 -> RRvN
    void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object Qh(java.lang.Object,java.lang.Object,java.lang.Object) -> gyUP
react.sampler.SampleEntityDroppedTicks -> org.cyberpwn.react.EvdS:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object aX(java.lang.Object,java.lang.Object,java.lang.Object) -> DkAW
react.sampler.SampleEntityDroppedTicks$1 -> org.cyberpwn.react.APgR:
    react.sampler.SampleEntityDroppedTicks this$0 -> EUct
    void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object nv(java.lang.Object,java.lang.Object,java.lang.Object) -> gqDh
react.sampler.SampleEntityTime -> org.cyberpwn.react.ySfI:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object Mw(java.lang.Object,java.lang.Object,java.lang.Object) -> GkXs
react.sampler.SampleEntityTime$1 -> org.cyberpwn.react.VpDw:
    react.sampler.SampleEntityTime this$0 -> lFRr
    void <init>(react.sampler.SampleEntityTime) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object Ef(java.lang.Object,java.lang.Object,java.lang.Object) -> XJfJ
react.sampler.SampleEntityTimeLock -> org.cyberpwn.react.tfYX:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object fZ(java.lang.Object,java.lang.Object,java.lang.Object) -> bigo
react.sampler.SampleEntityTimeLock$1 -> org.cyberpwn.react.YEiC:
    react.sampler.SampleEntityTimeLock this$0 -> rjGl
    void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object eB(java.lang.Object,java.lang.Object,java.lang.Object) -> uypA
react.sampler.SampleExplosionTime -> org.cyberpwn.react.cBee:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object KK(java.lang.Object,java.lang.Object,java.lang.Object) -> tLYT
react.sampler.SampleExplosionTime$1 -> org.cyberpwn.react.pIKX:
    react.sampler.SampleExplosionTime this$0 -> rOsr
    void <init>(react.sampler.SampleExplosionTime) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object eE(java.lang.Object,java.lang.Object,java.lang.Object) -> Lqya
react.sampler.SampleFluidPerSecond -> org.cyberpwn.react.xrdu:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object oA(java.lang.Object,java.lang.Object,java.lang.Object) -> HwPI
react.sampler.SampleFluidPerSecond$1 -> org.cyberpwn.react.AsKB:
    react.sampler.SampleFluidPerSecond this$0 -> Jutq
    void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object xX(java.lang.Object,java.lang.Object,java.lang.Object) -> qBnu
react.sampler.SampleFluidPerTick -> org.cyberpwn.react.ejoC:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object aF(java.lang.Object,java.lang.Object,java.lang.Object) -> vcaN
react.sampler.SampleFluidPerTick$1 -> org.cyberpwn.react.MBgO:
    react.sampler.SampleFluidPerTick this$0 -> kdqt
    void <init>(react.sampler.SampleFluidPerTick) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object jK(java.lang.Object,java.lang.Object,java.lang.Object) -> nKCL
react.sampler.SampleFluidTickTime -> org.cyberpwn.react.VVSE:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object Cc(java.lang.Object,java.lang.Object,java.lang.Object) -> VxHe
react.sampler.SampleFluidTickTime$1 -> org.cyberpwn.react.macx:
    react.sampler.SampleFluidTickTime this$0 -> YFlF
    void <init>(react.sampler.SampleFluidTickTime) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object LH(java.lang.Object,java.lang.Object,java.lang.Object) -> PmfH
react.sampler.SampleFluidTickUtilization -> org.cyberpwn.react.SnlK:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object uI(java.lang.Object,java.lang.Object,java.lang.Object) -> futQ
react.sampler.SampleFluidTickUtilization$1 -> org.cyberpwn.react.iMHQ:
    react.sampler.SampleFluidTickUtilization this$0 -> OlSk
    void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object CH(java.lang.Object,java.lang.Object,java.lang.Object) -> QWWL
react.sampler.SampleGrowthTime -> org.cyberpwn.react.PnTN:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object Bk(java.lang.Object,java.lang.Object,java.lang.Object) -> pPlv
react.sampler.SampleGrowthTime$1 -> org.cyberpwn.react.dVmJ:
    react.sampler.SampleGrowthTime this$0 -> aqHV
    void <init>(react.sampler.SampleGrowthTime) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object FF(java.lang.Object,java.lang.Object,java.lang.Object) -> tUIq
react.sampler.SampleHopperPerSecond -> org.cyberpwn.react.LsKi:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object tu(java.lang.Object,java.lang.Object,java.lang.Object) -> AaYt
react.sampler.SampleHopperPerSecond$1 -> org.cyberpwn.react.YqAW:
    react.sampler.SampleHopperPerSecond this$0 -> QXgR
    void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object OT(java.lang.Object,java.lang.Object,java.lang.Object) -> hcHc
react.sampler.SampleHopperPerSecond$SampleHopperTickUtilization -> org.cyberpwn.react.XBiK:
    java.lang.Object[] O -> suYy
    int i -> i
    java.math.BigInteger[] N -> CWmd
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void j(int,java.lang.Object) -> DrYG
    int U(int,int) -> wnYS
    int v(byte[],int) -> eHBt
    void u12914() -> gqDh
    void P() -> GkXs
    java.lang.String N(java.lang.Object) -> gpKE
react.sampler.SampleHopperPerTick -> org.cyberpwn.react.Pvfc:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object lA(java.lang.Object,java.lang.Object,java.lang.Object) -> lVBp
react.sampler.SampleHopperPerTick$1 -> org.cyberpwn.react.FiJP:
    react.sampler.SampleHopperPerTick this$0 -> Cyqq
    void <init>(react.sampler.SampleHopperPerTick) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object Vt(java.lang.Object,java.lang.Object,java.lang.Object) -> gNcW
react.sampler.SampleHopperTickTime -> org.cyberpwn.react.JleN:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object Ry(java.lang.Object,java.lang.Object,java.lang.Object) -> qBnU
react.sampler.SampleHopperTickTime$1 -> org.cyberpwn.react.KgXJ:
    react.sampler.SampleHopperTickTime this$0 -> wFRC
    void <init>(react.sampler.SampleHopperTickTime) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object Kb(java.lang.Object,java.lang.Object,java.lang.Object) -> AjKP
react.sampler.SampleHopperTickUtilization -> org.cyberpwn.react.xsIW:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object Wn(java.lang.Object,java.lang.Object,java.lang.Object) -> VDGt
react.sampler.SampleHopperTickUtilization$1 -> org.cyberpwn.react.tLhv:
    react.sampler.SampleHopperTickUtilization this$0 -> wqEy
    void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object GP(java.lang.Object,java.lang.Object,java.lang.Object) -> iUIb
react.sampler.SampleMemoryAllocated -> org.cyberpwn.react.Kogy:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object II(java.lang.Object,java.lang.Object,java.lang.Object) -> oolM
react.sampler.SampleMemoryAllocated$1 -> org.cyberpwn.react.YyRN:
    react.sampler.SampleMemoryAllocated this$0 -> HpQD
    void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object Ak(java.lang.Object,java.lang.Object,java.lang.Object) -> bPOn
react.sampler.SampleMemoryAllocationPerSecond -> org.cyberpwn.react.MeNI:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object Bw(java.lang.Object,java.lang.Object,java.lang.Object) -> FqHs
react.sampler.SampleMemoryAllocationPerSecond$1 -> org.cyberpwn.react.Cxqs:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> ffdY
    void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object FW(java.lang.Object,java.lang.Object,java.lang.Object) -> VnuO
react.sampler.SampleMemoryFree -> org.cyberpwn.react.wDpr:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object Zq(java.lang.Object,java.lang.Object,java.lang.Object) -> cBWL
react.sampler.SampleMemoryFree$1 -> org.cyberpwn.react.LYYi:
    react.sampler.SampleMemoryFree this$0 -> SooN
    void <init>(react.sampler.SampleMemoryFree) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object SU(java.lang.Object,java.lang.Object,java.lang.Object) -> hIVB
react.sampler.SampleMemoryMax -> org.cyberpwn.react.pjqA:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object xk(java.lang.Object,java.lang.Object,java.lang.Object) -> ySWC
react.sampler.SampleMemoryMax$1 -> org.cyberpwn.react.lgUf:
    react.sampler.SampleMemoryMax this$0 -> wOBs
    void <init>(react.sampler.SampleMemoryMax) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object qO(java.lang.Object,java.lang.Object,java.lang.Object) -> UkuG
react.sampler.SampleMemoryUse -> org.cyberpwn.react.Wrje:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object aE(java.lang.Object,java.lang.Object,java.lang.Object) -> vRCd
react.sampler.SampleMemoryUse$1 -> org.cyberpwn.react.xYUj:
    react.sampler.SampleMemoryUse this$0 -> JSpi
    void <init>(react.sampler.SampleMemoryUse) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object iF(java.lang.Object,java.lang.Object,java.lang.Object) -> iwOr
react.sampler.SamplePacketsPerSecond -> org.cyberpwn.react.gGDO:
    react.gmath.Average aa -> WcFi
    react.graph.IFormatter formatter -> cByY
    long u -> Lsga
    long d -> d
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object uU(java.lang.Object,java.lang.Object,java.lang.Object) -> pYaM
react.sampler.SamplePacketsPerSecond$1 -> org.cyberpwn.react.uOlD:
    react.sampler.SamplePacketsPerSecond this$0 -> bADq
    void <init>(react.sampler.SamplePacketsPerSecond) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object rv(java.lang.Object,java.lang.Object,java.lang.Object) -> Qxys
react.sampler.SamplePhysicsTickTime -> org.cyberpwn.react.Mulf:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object sf(java.lang.Object,java.lang.Object,java.lang.Object) -> IWqH
react.sampler.SamplePhysicsTickTime$1 -> org.cyberpwn.react.Fhgm:
    react.sampler.SamplePhysicsTickTime this$0 -> xACn
    void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object XS(java.lang.Object,java.lang.Object,java.lang.Object) -> RQix
react.sampler.SampleRedstonePerSecond -> org.cyberpwn.react.xXuQ:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object lB(java.lang.Object,java.lang.Object,java.lang.Object) -> fSsK
react.sampler.SampleRedstonePerSecond$1 -> org.cyberpwn.react.sRWQ:
    react.sampler.SampleRedstonePerSecond this$0 -> wgsW
    void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object Tl(java.lang.Object,java.lang.Object,java.lang.Object) -> UcdX
react.sampler.SampleRedstonePerTick -> org.cyberpwn.react.hlJc:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object FO(java.lang.Object,java.lang.Object,java.lang.Object) -> woVw
react.sampler.SampleRedstonePerTick$1 -> org.cyberpwn.react.gWds:
    react.sampler.SampleRedstonePerTick this$0 -> DSAV
    void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object Rf(java.lang.Object,java.lang.Object,java.lang.Object) -> WPXx
react.sampler.SampleRedstoneTickTime -> org.cyberpwn.react.dxmy:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object sE(java.lang.Object,java.lang.Object,java.lang.Object) -> lMSr
react.sampler.SampleRedstoneTickTime$1 -> org.cyberpwn.react.WsJf:
    react.sampler.SampleRedstoneTickTime this$0 -> raTv
    void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object FS(java.lang.Object,java.lang.Object,java.lang.Object) -> xHFY
react.sampler.SampleRedstoneTickUtilization -> org.cyberpwn.react.riEu:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object im(java.lang.Object,java.lang.Object,java.lang.Object) -> CgbU
react.sampler.SampleRedstoneTickUtilization$1 -> org.cyberpwn.react.DcCV:
    react.sampler.SampleRedstoneTickUtilization this$0 -> pJNE
    void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object Za(java.lang.Object,java.lang.Object,java.lang.Object) -> stLY
react.sampler.SampleSyncQueue -> org.cyberpwn.react.aofP:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object FA(java.lang.Object,java.lang.Object,java.lang.Object) -> LjLj
react.sampler.SampleSyncQueue$1 -> org.cyberpwn.react.oxmg:
    react.sampler.SampleSyncQueue this$0 -> Uusa
    void <init>(react.sampler.SampleSyncQueue) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object uB(java.lang.Object,java.lang.Object,java.lang.Object) -> UJSY
react.sampler.SampleTickTime -> org.cyberpwn.react.jaOE:
    react.graph.IFormatter formatter -> cByY
    react.gmath.Average aa -> WcFi
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object AI(java.lang.Object,java.lang.Object,java.lang.Object) -> SeoW
react.sampler.SampleTickTime$1 -> org.cyberpwn.react.Aiyr:
    react.sampler.SampleTickTime this$0 -> oWkW
    void <init>(react.sampler.SampleTickTime) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object xJ(java.lang.Object,java.lang.Object,java.lang.Object) -> HClm
react.sampler.SampleTickUtilization -> org.cyberpwn.react.Eeed:
    react.graph.IFormatter formatter -> cByY
    react.gmath.Average aa -> WcFi
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object nl(java.lang.Object,java.lang.Object,java.lang.Object) -> vtcn
react.sampler.SampleTickUtilization$1 -> org.cyberpwn.react.DkVP:
    react.sampler.SampleTickUtilization this$0 -> mjvs
    void <init>(react.sampler.SampleTickUtilization) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object Nj(java.lang.Object,java.lang.Object,java.lang.Object) -> lUdg
react.sampler.SampleTicksPerSecond -> org.cyberpwn.react.KUwM:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object vE(java.lang.Object,java.lang.Object,java.lang.Object) -> dxYJ
react.sampler.SampleTicksPerSecond$1 -> org.cyberpwn.react.DcFM:
    react.sampler.SampleTicksPerSecond this$0 -> VWTU
    void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object Md(java.lang.Object,java.lang.Object,java.lang.Object) -> gWVV
react.sampler.SampleTileDroppedTicks -> org.cyberpwn.react.jjBx:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object DK(java.lang.Object,java.lang.Object,java.lang.Object) -> AXkS
react.sampler.SampleTileDroppedTicks$1 -> org.cyberpwn.react.gNvh:
    react.sampler.SampleTileDroppedTicks this$0 -> FjIO
    void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object xb(java.lang.Object,java.lang.Object,java.lang.Object) -> gyIC
react.sampler.SampleTileDroppedTicks$SampleMemoryUse -> org.cyberpwn.react.JdWF:
    java.lang.Object[] H -> kCOQ
    int k -> k
    java.math.BigInteger[] V -> fgCe
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void Y(int,java.lang.Object) -> OXeW
    int L(int,int) -> fcvC
    int J(byte[],int) -> DrYG
    void a27086() -> XJfJ
    void x() -> x
    java.lang.String l(java.lang.Object) -> SmbW
react.sampler.SampleTileTime -> org.cyberpwn.react.rOVx:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object Fg(java.lang.Object,java.lang.Object,java.lang.Object) -> LHGl
react.sampler.SampleTileTime$1 -> org.cyberpwn.react.WsLs:
    react.sampler.SampleTileTime this$0 -> QOta
    void <init>(react.sampler.SampleTileTime) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object Xa(java.lang.Object,java.lang.Object,java.lang.Object) -> VMUI
react.sampler.SampleTileTime$SampleMemoryMax -> org.cyberpwn.react.DHqx:
    java.lang.Object[] P -> hlUa
    int S -> S
    java.math.BigInteger[] Q -> DkAW
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void E(int,java.lang.Object) -> EdXk
    int m(int,int) -> CgFI
    int e(byte[],int) -> LiMa
    void p2207() -> bigo
    void t() -> t
    java.lang.String x(java.lang.Object) -> mOYk
react.sampler.SampleTileTimeLock -> org.cyberpwn.react.kmFb:
    react.graph.IFormatter formatter -> cByY
    void <init>() -> <init>
    void construct() -> construct
    void sample() -> sample
    java.lang.String get() -> get
    react.graph.IFormatter getFormatter() -> getFormatter
    java.lang.Object rE(java.lang.Object,java.lang.Object,java.lang.Object) -> hcJc
react.sampler.SampleTileTimeLock$1 -> org.cyberpwn.react.kBQw:
    react.sampler.SampleTileTimeLock this$0 -> QGcx
    void <init>(react.sampler.SampleTileTimeLock) -> <init>
    java.lang.String from(double) -> TqEp
    java.lang.Object Fa(java.lang.Object,java.lang.Object,java.lang.Object) -> sjyS
react.sampler.f -> org.cyberpwn.react.LPit:
    java.lang.Object[] w -> jaOE
    java.lang.Class[] n -> slhj
    int[] D -> yDFe
    short[] z -> QqxM
    int O -> O
    int C -> C
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class Q(int,int) -> TxvW
    java.lang.Class tx(int) -> YUht
    java.lang.reflect.Method Q(int) -> ssMp
    java.lang.Object C(int,java.lang.Object[]) -> CgEJ
    java.lang.Object Y(java.lang.Object,int,java.lang.Object[]) -> ssMp
    java.lang.Object e(int,java.lang.Object[]) -> PBWD
    java.lang.reflect.Field G(int) -> rori
    java.lang.Object q(java.lang.Object,int) -> eHBt
    void O(java.lang.Object,int,java.lang.Object) -> mOYk
    java.lang.Object w(int) -> KejP
    void v(int,java.lang.Object) -> SmbW
react.security.IPSecAlpha -> org.cyberpwn.react.OkUb:
    java.lang.String ip -> CFls
    void <init>() -> <init>
    void run() -> run
    java.lang.String getIp() -> getIp
    java.lang.Object Cf(java.lang.Object,java.lang.Object,java.lang.Object) -> pbPo
react.security.IPSecBravo -> org.cyberpwn.react.WakE:
    java.lang.String ip -> CFls
    void <init>() -> <init>
    void run() -> run
    java.lang.String getIp() -> getIp
    java.lang.Object Jj(java.lang.Object,java.lang.Object,java.lang.Object) -> lgGG
react.security.IPSecCharlie -> org.cyberpwn.react.kRsH:
    java.lang.String ip -> CFls
    void <init>() -> <init>
    void run() -> run
    java.lang.String getIp() -> getIp
    java.lang.Object bP(java.lang.Object,java.lang.Object,java.lang.Object) -> PnAr
react.security.IPSecDelta -> org.cyberpwn.react.Pvhj:
    java.lang.String ip -> CFls
    void <init>() -> <init>
    void run() -> run
    java.lang.String getIp() -> getIp
    java.lang.Object UW(java.lang.Object,java.lang.Object,java.lang.Object) -> PBrL
react.security.IPSecEcho -> org.cyberpwn.react.xiyQ:
    java.lang.String ip -> CFls
    void <init>() -> <init>
    void run() -> run
    java.lang.String getIp() -> getIp
    java.lang.Object bS(java.lang.Object,java.lang.Object,java.lang.Object) -> VnwA
react.security.IPSecFoxtrot -> org.cyberpwn.react.dpas:
    java.lang.String ip -> CFls
    void <init>() -> <init>
    void run() -> run
    java.lang.String getIp() -> getIp
    java.lang.Object bV(java.lang.Object,java.lang.Object,java.lang.Object) -> loWL
react.security.SecurityCheckpointAlpha -> org.cyberpwn.react.HxDD:
    void <init>() -> <init>
    void finishScan() -> uypA
    void doScan(java.lang.Runnable) -> dfal
    byte[] readResource(java.io.File,java.lang.String) -> WGJb
    react.glang.GMap scan(java.io.File) -> dfal
    byte[] access$000(java.io.File,java.lang.String) -> dfal
    java.lang.Object VV(java.lang.Object,java.lang.Object,java.lang.Object) -> CyCX
react.security.SecurityCheckpointAlpha$1 -> org.cyberpwn.react.rpyB:
    java.lang.Runnable val$r -> lxtl
    void <init>(java.lang.Runnable) -> <init>
    void run() -> run
    java.lang.Object Bn(java.lang.Object,java.lang.Object,java.lang.Object) -> scIw
react.security.SecurityCheckpointAlpha$1$1 -> org.cyberpwn.react.wESi:
    react.security.SecurityCheckpointAlpha$1 this$0 -> AcKN
    void <init>(react.security.SecurityCheckpointAlpha$1) -> <init>
    void run() -> run
    java.lang.Object Nw(java.lang.Object,java.lang.Object,java.lang.Object) -> prrI
react.security.SecurityCheckpointBravo -> org.cyberpwn.react.eseR:
    void <init>() -> <init>
    void finishScan() -> uypA
    void doScan(java.lang.Runnable) -> dfal
    byte[] readResource(java.io.File,java.lang.String) -> WGJb
    react.glang.GMap scan(java.io.File) -> dfal
    byte[] access$000(java.io.File,java.lang.String) -> dfal
    java.lang.Object sF(java.lang.Object,java.lang.Object,java.lang.Object) -> wUPG
react.security.SecurityCheckpointBravo$1 -> org.cyberpwn.react.MupY:
    java.lang.Runnable val$r -> lxtl
    void <init>(java.lang.Runnable) -> <init>
    void run() -> run
    java.lang.Object mM(java.lang.Object,java.lang.Object,java.lang.Object) -> Blnu
react.security.SecurityCheckpointBravo$1$1 -> org.cyberpwn.react.xGvG:
    react.security.SecurityCheckpointBravo$1 this$0 -> xREW
    void <init>(react.security.SecurityCheckpointBravo$1) -> <init>
    void run() -> run
    java.lang.Object kB(java.lang.Object,java.lang.Object,java.lang.Object) -> kRaY
react.security.SecurityCheckpointBravo$SecurityLockAlpha -> org.cyberpwn.react.MeOj:
    java.lang.Object[] n -> HoYL
    int W -> W
    java.math.BigInteger[] i -> iMOd
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void G(int,java.lang.Object) -> Vmyy
    int p(int,int) -> JHvG
    int H(byte[],int) -> OYFP
    void v31375() -> tLYT
    void L() -> L
    java.lang.String y(java.lang.Object) -> vQbs
react.security.SecurityCheckpointCharlie -> org.cyberpwn.react.nBjA:
    void <init>() -> <init>
    void finishScan() -> uypA
    void doScan(java.lang.Runnable) -> dfal
    byte[] readResource(java.io.File,java.lang.String) -> WGJb
    react.glang.GMap scan(java.io.File) -> dfal
    byte[] access$000(java.io.File,java.lang.String) -> dfal
    java.lang.Object lG(java.lang.Object,java.lang.Object,java.lang.Object) -> rqIE
react.security.SecurityCheckpointCharlie$1 -> org.cyberpwn.react.vtuE:
    java.lang.Runnable val$r -> lxtl
    void <init>(java.lang.Runnable) -> <init>
    void run() -> run
    java.lang.Object Er(java.lang.Object,java.lang.Object,java.lang.Object) -> jrBX
react.security.SecurityCheckpointCharlie$1$1 -> org.cyberpwn.react.yBhb:
    react.security.SecurityCheckpointCharlie$1 this$0 -> axvP
    void <init>(react.security.SecurityCheckpointCharlie$1) -> <init>
    void run() -> run
    java.lang.Object Vc(java.lang.Object,java.lang.Object,java.lang.Object) -> nAwF
react.security.SecurityCheckpointDelta -> org.cyberpwn.react.jrSY:
    void <init>() -> <init>
    void finishScan() -> uypA
    void doScan(java.lang.Runnable) -> dfal
    byte[] readResource(java.io.File,java.lang.String) -> WGJb
    react.glang.GMap scan(java.io.File) -> dfal
    byte[] access$000(java.io.File,java.lang.String) -> dfal
    java.lang.Object Aw(java.lang.Object,java.lang.Object,java.lang.Object) -> EvXY
react.security.SecurityCheckpointDelta$1 -> org.cyberpwn.react.EmwQ:
    java.lang.Runnable val$r -> lxtl
    void <init>(java.lang.Runnable) -> <init>
    void run() -> run
    java.lang.Object Bz(java.lang.Object,java.lang.Object,java.lang.Object) -> EmgS
react.security.SecurityCheckpointDelta$1$1 -> org.cyberpwn.react.jjAx:
    react.security.SecurityCheckpointDelta$1 this$0 -> CPAP
    void <init>(react.security.SecurityCheckpointDelta$1) -> <init>
    void run() -> run
    java.lang.Object Kg(java.lang.Object,java.lang.Object,java.lang.Object) -> BRvO
react.security.SecurityCheckpointEcho -> org.cyberpwn.react.jiaX:
    void <init>() -> <init>
    void finishScan() -> uypA
    void doScan(java.lang.Runnable) -> dfal
    byte[] readResource(java.io.File,java.lang.String) -> WGJb
    react.glang.GMap scan(java.io.File) -> dfal
    byte[] access$000(java.io.File,java.lang.String) -> dfal
    java.lang.Object Ak(java.lang.Object,java.lang.Object,java.lang.Object) -> bPOn
react.security.SecurityCheckpointEcho$1 -> org.cyberpwn.react.VDtU:
    java.lang.Runnable val$r -> lxtl
    void <init>(java.lang.Runnable) -> <init>
    void run() -> run
    java.lang.Object sK(java.lang.Object,java.lang.Object,java.lang.Object) -> QVwP
react.security.SecurityCheckpointEcho$1$1 -> org.cyberpwn.react.Ojry:
    react.security.SecurityCheckpointEcho$1 this$0 -> oWnV
    void <init>(react.security.SecurityCheckpointEcho$1) -> <init>
    void run() -> run
    java.lang.Object ua(java.lang.Object,java.lang.Object,java.lang.Object) -> OQRO
react.security.SecurityCheckpointFoxtrot -> org.cyberpwn.react.vldM:
    void <init>() -> <init>
    void finishScan() -> uypA
    void doScan(java.lang.Runnable) -> dfal
    byte[] readResource(java.io.File,java.lang.String) -> WGJb
    react.glang.GMap scan(java.io.File) -> dfal
    byte[] access$000(java.io.File,java.lang.String) -> dfal
    java.lang.Object wh(java.lang.Object,java.lang.Object,java.lang.Object) -> tLYi
react.security.SecurityCheckpointFoxtrot$1 -> org.cyberpwn.react.VgWg:
    java.lang.Runnable val$r -> lxtl
    void <init>(java.lang.Runnable) -> <init>
    void run() -> run
    java.lang.Object nm(java.lang.Object,java.lang.Object,java.lang.Object) -> JdEi
react.security.SecurityCheckpointFoxtrot$1$1 -> org.cyberpwn.react.pIOo:
    react.security.SecurityCheckpointFoxtrot$1 this$0 -> XCjl
    void <init>(react.security.SecurityCheckpointFoxtrot$1) -> <init>
    void run() -> run
    java.lang.Object aR(java.lang.Object,java.lang.Object,java.lang.Object) -> qeSi
react.security.SecurityLockAlpha -> org.cyberpwn.react.xHWA:
    void <init>() -> <init>
    java.lang.Object YR(java.lang.Object,java.lang.Object,java.lang.Object) -> uFoT
react.security.SecurityLockAlpha$1 -> org.cyberpwn.react.NgqC:
    java.io.File val$f -> mAHO
    react.security.SecurityLockAlpha this$0 -> vmdf
    void <init>(react.security.SecurityLockAlpha,java.io.File) -> <init>
    void run() -> run
    java.lang.Object ZM(java.lang.Object,java.lang.Object,java.lang.Object) -> vIrU
react.security.SecurityLockAlpha$SecurityLockFoxtrot -> org.cyberpwn.react.XuoJ:
    java.lang.Object[] s -> BTQJ
    int C -> C
    java.math.BigInteger[] I -> MwPq
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void g(int,java.lang.Object) -> mOYk
    int O(int,int) -> SeSJ
    int e(byte[],int) -> LiMa
    void L22042() -> Lqya
    void T() -> OXeW
    java.lang.String p(java.lang.Object) -> LiMa
react.security.SecurityLockBravo -> org.cyberpwn.react.CySo:
    void <init>() -> <init>
    java.lang.Object gH(java.lang.Object,java.lang.Object,java.lang.Object) -> RQlT
react.security.SecurityLockBravo$1 -> org.cyberpwn.react.OkUP:
    java.io.File val$f -> mAHO
    react.security.SecurityLockBravo this$0 -> xAFc
    void <init>(react.security.SecurityLockBravo,java.io.File) -> <init>
    void run() -> run
    java.lang.Object zo(java.lang.Object,java.lang.Object,java.lang.Object) -> KejP
react.security.SecurityLockCharlie -> org.cyberpwn.react.wVTY:
    void <init>() -> <init>
    java.lang.Object Oz(java.lang.Object,java.lang.Object,java.lang.Object) -> gOHr
react.security.SecurityLockCharlie$1 -> org.cyberpwn.react.lVYA:
    java.io.File val$f -> mAHO
    react.security.SecurityLockCharlie this$0 -> Dtfg
    void <init>(react.security.SecurityLockCharlie,java.io.File) -> <init>
    void run() -> run
    java.lang.Object KY(java.lang.Object,java.lang.Object,java.lang.Object) -> rgxs
react.security.SecurityLockCharlie$SecurityCheckpointAlpha -> org.cyberpwn.react.vRsn:
    java.lang.Object[] n -> HoYL
    int e -> e
    java.math.BigInteger[] s -> uHGY
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void W(int,java.lang.Object) -> TqEp
    int K(int,int) -> mOYk
    int M(byte[],int) -> wnWa
    void R9376() -> HwPI
    void i() -> i
    java.lang.String R(java.lang.Object) -> vRGF
react.security.SecurityLockDelta -> org.cyberpwn.react.oFPK:
    void <init>() -> <init>
    java.lang.Object JQ(java.lang.Object,java.lang.Object,java.lang.Object) -> bikk
react.security.SecurityLockDelta$1 -> org.cyberpwn.react.bbLy:
    java.io.File val$f -> mAHO
    react.security.SecurityLockDelta this$0 -> fwgW
    void <init>(react.security.SecurityLockDelta,java.io.File) -> <init>
    void run() -> run
    java.lang.Object yN(java.lang.Object,java.lang.Object,java.lang.Object) -> HwME
react.security.SecurityLockFoxtrot -> org.cyberpwn.react.wojF:
    void <init>() -> <init>
    java.lang.Object WH(java.lang.Object,java.lang.Object,java.lang.Object) -> iCkq
react.security.SecurityLockFoxtrot$1 -> org.cyberpwn.react.yTNP:
    java.io.File val$f -> mAHO
    react.security.SecurityLockFoxtrot this$0 -> ektK
    void <init>(react.security.SecurityLockFoxtrot,java.io.File) -> <init>
    void run() -> run
    java.lang.Object Kh(java.lang.Object,java.lang.Object,java.lang.Object) -> QpMH
react.security.SecurityLockFoxtrot$SecurityCheckpointFoxtrot -> org.cyberpwn.react.VDvu:
    java.lang.Object[] C -> whDa
    int Z -> Z
    java.math.BigInteger[] j -> hlJc
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void V(int,java.lang.Object) -> wnYS
    int j(int,int) -> dfal
    int y(byte[],int) -> qcup
    void h14434() -> qBnu
    void s() -> s
    java.lang.String l(java.lang.Object) -> SmbW
react.security.u -> org.cyberpwn.react.fKuY:
    java.lang.Object[] W -> lyYR
    java.lang.Class[] V -> foCs
    int[] o -> lVtq
    short[] i -> wVst
    int P -> P
    int Z -> Z
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class h(int,int) -> ivTF
    java.lang.Class q(int) -> sHYj
    java.lang.reflect.Method Z(int) -> avks
    java.lang.Object K(int,java.lang.Object[]) -> vRCd
    java.lang.Object V(java.lang.Object,int,java.lang.Object[]) -> XJNQ
    java.lang.Object h(int,java.lang.Object[]) -> tupB
    java.lang.reflect.Field S(int) -> wUPG
    java.lang.Object J(java.lang.Object,int) -> sHYj
    void K(java.lang.Object,int,java.lang.Object) -> OXeW
    java.lang.Object D(int) -> SmbW
    void t(int,java.lang.Object) -> HvRk
react.slate.IndividualSlate -> org.cyberpwn.react.JJej:
    void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    void addViewer(org.bukkit.entity.Player) -> addViewer
    java.lang.Object Sb(java.lang.Object,java.lang.Object,java.lang.Object) -> AWsB
react.slate.IndividualSlate$SlateUtil -> org.cyberpwn.react.iMOd:
    java.lang.Object[] p -> wyBC
    int h -> h
    java.math.BigInteger[] C -> fUPH
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void X(int,java.lang.Object) -> XJNQ
    int q(int,int) -> WXLP
    int a(byte[],int) -> lTeb
    void M3677() -> vcaN
    void Q() -> Q
    java.lang.String u(java.lang.Object) -> xiNT
react.slate.PhantomSlate -> org.cyberpwn.react.brnB:
    react.glang.GList lines -> lines
    react.glang.GList viewers -> viewers
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> slate
    void <init>(java.lang.String) -> <init>
    react.glang.GList getLines() -> getLines
    void set(int,java.lang.String) -> set
    void setLines(react.glang.GList) -> setLines
    java.lang.String get(int) -> get
    void update() -> update
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void build() -> build
    void addViewer(org.bukkit.entity.Player) -> addViewer
    void removeViewer(org.bukkit.entity.Player) -> removeViewer
    react.glang.GList getViewers() -> getViewers
    boolean isViewing(org.bukkit.entity.Player) -> isViewing
    void addLine(java.lang.String) -> addLine
    void clearLines() -> clearLines
    java.lang.Object Dr(java.lang.Object,java.lang.Object,java.lang.Object) -> Dr
react.slate.PhantomSlate$IndividualSlate -> org.cyberpwn.react.OYty:
    java.lang.Object[] S -> gyUP
    int s -> s
    java.math.BigInteger[] n -> hcJc
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void i(int,java.lang.Object) -> LiMa
    int h(int,int) -> vRCd
    int J(byte[],int) -> DrYG
    void J5800() -> VxHe
    void f() -> f
    java.lang.String K(java.lang.Object) -> MlSj
react.slate.Slate -> org.cyberpwn.react.fehM:
    void build() -> build
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> getLines
    void set(int,java.lang.String) -> set
    void setLines(react.glang.GList) -> setLines
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> addViewer
    void addLine(java.lang.String) -> addLine
    void clearLines() -> clearLines
    void removeViewer(org.bukkit.entity.Player) -> removeViewer
    react.glang.GList getViewers() -> getViewers
    boolean isViewing(org.bukkit.entity.Player) -> isViewing
    void update() -> update
react.slate.SlateUtil -> org.cyberpwn.react.xajv:
    void <init>() -> <init>
    org.bukkit.scoreboard.ScoreboardManager getManager() -> PmfH
    org.bukkit.scoreboard.Scoreboard newBoard() -> futQ
    org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> WGJb
    org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> dfal
    org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> lTgP
    void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> WGJb
    org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> WGJb
    org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> dfal
    java.lang.String convertJSON(java.lang.String) -> EBVK
    java.lang.String[] convertJSON(java.lang.String[]) -> KejP
    void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> WGJb
    java.lang.Object Gq(java.lang.Object,java.lang.Object,java.lang.Object) -> DYea
react.slate.m -> org.cyberpwn.react.uaTC:
    java.lang.Object[] J -> sRWQ
    java.lang.Class[] Y -> NxeL
    int[] u -> CqdN
    short[] k -> PfhP
    int q -> q
    int d -> d
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class U(int,int) -> EAwa
    java.lang.Class U(int) -> KDLh
    java.lang.reflect.Method K(int) -> kIWJ
    java.lang.Object o(int,java.lang.Object[]) -> FpMO
    java.lang.Object G(java.lang.Object,int,java.lang.Object[]) -> DrYG
    java.lang.Object q(int,java.lang.Object[]) -> qtuv
    java.lang.reflect.Field Q(int) -> tupB
    java.lang.Object U(java.lang.Object,int) -> nJMP
    void n(java.lang.Object,int,java.lang.Object) -> CgEJ
    java.lang.Object m(int) -> nthS
    void p(int,java.lang.Object) -> WGJb
react.text.ColoredString -> org.cyberpwn.react.VDwa:
    surge.util.C c -> vBpO
    java.lang.String s -> s
    void <init>(surge.util.C,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    surge.util.C getC() -> QWWL
    void setC(surge.util.C) -> dfal
    java.lang.String getS() -> pPlv
    void setS(java.lang.String) -> EdXk
    java.lang.Object Wi(java.lang.Object,java.lang.Object,java.lang.Object) -> Wi
react.text.RTEX -> org.cyberpwn.react.nTNI:
    react.glang.GList extras -> EMVk
    void <init>(react.text.ColoredString[]) -> <init>
    void <init>() -> <init>
    react.glang.GList getExtras() -> tUIq
    react.json.JSONObject toJSON() -> MlSj
    java.lang.Object zk(java.lang.Object,java.lang.Object,java.lang.Object) -> UAEN
react.text.RTEX$ColoredString -> org.cyberpwn.react.OkWl:
    java.lang.Object[] u -> XuYm
    int s -> s
    java.math.BigInteger[] r -> OJSP
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void O(int,java.lang.Object) -> qcup
    int N(int,int) -> Vmyy
    int D(byte[],int) -> FpMO
    void G30771() -> AaYt
    void a() -> a
    java.lang.String g(java.lang.Object) -> lTeb
react.text.RTX -> org.cyberpwn.react.MBnJ:
    react.json.JSONArray base -> MeoQ
    void <init>() -> <init>
    void add(react.json.JSONObject) -> KejP
    void addText(java.lang.String) -> addText
    void addText(java.lang.String,surge.util.C) -> dfal
    void addTextHover(java.lang.String,react.text.RTEX,surge.util.C) -> WGJb
    void addTextSuggestedCommand(java.lang.String,java.lang.String,surge.util.C) -> WGJb
    void addTextOpenURL(java.lang.String,java.lang.String,surge.util.C) -> dfal
    void addTextFireCommand(java.lang.String,java.lang.String,surge.util.C) -> lTgP
    void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,surge.util.C) -> WGJb
    void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,surge.util.C) -> dfal
    void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,surge.util.C) -> lTgP
    react.json.JSONArray toJSON() -> hcHc
    void tellRawTo(org.bukkit.entity.Player) -> DPSk
    java.lang.Object Tz(java.lang.Object,java.lang.Object,java.lang.Object) -> BeAK
react.text.RawText -> org.cyberpwn.react.DADN:
    java.lang.String COLOR_BLACK -> COLOR_BLACK
    java.lang.String COLOR_DARK_BLUE -> COLOR_DARK_BLUE
    java.lang.String COLOR_DARK_GREEN -> COLOR_DARK_GREEN
    java.lang.String COLOR_DARK_AQUA -> COLOR_DARK_AQUA
    java.lang.String COLOR_DARK_RED -> COLOR_DARK_RED
    java.lang.String COLOR_DARK_PURPLE -> COLOR_DARK_PURPLE
    java.lang.String COLOR_GOLD -> COLOR_GOLD
    java.lang.String COLOR_GRAY -> COLOR_GRAY
    java.lang.String COLOR_DARK_GRAY -> COLOR_DARK_GRAY
    java.lang.String COLOR_BLUE -> COLOR_BLUE
    java.lang.String COLOR_GREEN -> COLOR_GREEN
    java.lang.String COLOR_AQUA -> COLOR_AQUA
    java.lang.String COLOR_RED -> COLOR_RED
    java.lang.String COLOR_LIGHT_PURPLE -> COLOR_LIGHT_PURPLE
    java.lang.String COLOR_YELLOW -> COLOR_YELLOW
    java.lang.String COLOR_WHITE -> COLOR_WHITE
    java.lang.String COLOR_NONE -> COLOR_NONE
    java.lang.String HEAD_TEXT -> HEAD_TEXT
    java.lang.String HEAD_COLOR -> HEAD_COLOR
    java.lang.String HEAD_BOLD -> HEAD_BOLD
    java.lang.String HEAD_ITALIC -> HEAD_ITALIC
    java.lang.String HEAD_UNDERLINED -> HEAD_UNDERLINED
    java.lang.String HEAD_STRIKETHROUGH -> HEAD_STRIKETHROUGH
    java.lang.String HEAD_OBFUSCATED -> HEAD_OBFUSCATED
    java.lang.String HEAD_CLICK_EVENT -> HEAD_CLICK_EVENT
    java.lang.String HEAD_HOVER_EVENT -> HEAD_HOVER_EVENT
    java.lang.String HEAD_ACTION -> HEAD_ACTION
    java.lang.String HEAD_VALUE -> HEAD_VALUE
    java.lang.String HEAD_EXTRA -> HEAD_EXTRA
    java.lang.String HEAD_ACTION_SHOW_TEXT -> HEAD_ACTION_SHOW_TEXT
    java.lang.String HEAD_ACTION_COMMAND -> HEAD_ACTION_COMMAND
    java.util.ArrayList components -> components
    void <init>() -> <init>
    react.text.RawText addText(java.lang.String) -> addText
    react.text.RawText addText(java.lang.String,java.lang.String) -> addText
    react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> addText
    react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> addTextWithCommand
    react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> addTextWithCommand
    react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> addTextWithHover
    react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> addTextWithHover
    react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> addTextWithHoverCommand
    react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> addTextWithHoverCommand
    java.lang.String compile() -> compile
    void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> tellRawTo
    java.lang.Object tj(java.lang.Object,java.lang.Object,java.lang.Object) -> tj
    void <clinit>() -> <clinit>
react.text.RawText$ColoredString -> org.cyberpwn.react.VDwY:
    java.lang.Object[] r -> kTHs
    int s -> s
    java.math.BigInteger[] M -> Dkul
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void A(int,java.lang.Object) -> gpKE
    int m(int,int) -> CgFI
    int d(byte[],int) -> ESVk
    void i24125() -> lVBp
    void a() -> a
    java.lang.String Z(java.lang.Object) -> qtuv
react.text.in -> org.cyberpwn.react.Voki:
    java.lang.Object[] z -> LPit
    java.lang.Class[] k -> jsSX
    int[] u -> CqdN
    short[] j -> UBqK
    int X -> X
    int e -> e
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class b(int,int) -> GQOV
    java.lang.Class K(int) -> WGJb
    java.lang.reflect.Method j(int) -> QpMH
    java.lang.Object a(int,java.lang.Object[]) -> HvRk
    java.lang.Object e(java.lang.Object,int,java.lang.Object[]) -> mOYk
    java.lang.Object e(int,java.lang.Object[]) -> PBWD
    java.lang.reflect.Field s(int) -> sQMd
    java.lang.Object l(java.lang.Object,int) -> wnYS
    void D(java.lang.Object,int,java.lang.Object) -> WGJb
    java.lang.Object I(int) -> RkAo
    void k(int,java.lang.Object) -> ESVk
react.u -> org.cyberpwn.react.txAr:
    java.lang.Object[] z -> LPit
    java.lang.Class[] K -> CPBQ
    int[] k -> lVbM
    short[] b -> DIpn
    int G -> G
    int y -> y
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class G(int,int) -> LXLE
    java.lang.Class h(int) -> BIsv
    java.lang.reflect.Method C(int) -> BRfs
    java.lang.Object E(int,java.lang.Object[]) -> wnYS
    java.lang.Object g(java.lang.Object,int,java.lang.Object[]) -> wnYS
    java.lang.Object O(int,java.lang.Object[]) -> OYFP
    java.lang.reflect.Field S(int) -> wUPG
    java.lang.Object R(java.lang.Object,int) -> lTgP
    void p(java.lang.Object,int,java.lang.Object) -> Vmyy
    java.lang.Object V(int) -> vACh
    void M(int,java.lang.Object) -> eHBt
surge.Main -> org.cyberpwn.react.fegS:
    react.glang.GList plugins -> keTK
    react.glang.GMap pluginInstances -> QHFp
    react.glang.GList controllerSet -> sAuw
    react.glang.GMap anchors -> tpOC
    react.glang.GList classes -> cTjb
    java.lang.reflect.Field nsField -> qDaj
    java.lang.reflect.Field thField -> NrCK
    react.glang.GList tracks -> CXRR
    long nsf -> CysI
    surge.server.SuperSampler ssx -> etbv
    void <init>() -> <init>
    void onControllerRegistry() -> onControllerRegistry
    void reload() -> reload
    long getNanoSync() -> getNanoSync
    void requestResetNanos() -> gNcW
    int getThreadCount() -> getThreadCount
    void onStart(surge.util.Protocol) -> onStart
    void onStop() -> onStop
    void onPostInit() -> onPostInit
    void onPreInit() -> onPreInit
    void shutDownAmps() -> qBnU
    void initializeAmps() -> AjKP
    void doScan() -> doScan
    void scanForPoolDefiners() -> iUIb
    void scanForRawEvents() -> oolM
    void scanForDynamicTrack() -> FqHs
    void scanForAmps() -> VnuO
    void onTick() -> onTick
    surge.server.SuperSampler getSuperSampler() -> BIsv
    void <clinit>() -> <clinit>
    java.lang.Object cL(java.lang.Object,java.lang.Object,java.lang.Object) -> jOaA
surge.PluginAmp -> org.cyberpwn.react.Npcd:
    surge.control.AmpedPlugin plugin -> plugin
    boolean connected -> connected
    int masterTask -> masterTask
    java.lang.Runnable onReload -> onReload
    void <init>(surge.control.AmpedPlugin) -> <init>
    surge.control.AmpedPlugin getPluginInstance() -> getPluginInstance
    boolean isConnected() -> isConnected
    void connect() -> connect
    void masterTick() -> masterTick
    void disconnect() -> disconnect
    int startTask(int,java.lang.Runnable) -> startTask
    int startRepeatingTask(int,int,java.lang.Runnable) -> startRepeatingTask
    void stopTask(int) -> stopTask
    surge.control.AmpedPlugin getPlugin() -> getPlugin
    int getMasterTask() -> getMasterTask
    java.lang.Runnable getOnReload() -> getOnReload
    void setPlugin(surge.control.AmpedPlugin) -> setPlugin
    void setConnected(boolean) -> setConnected
    void setMasterTask(int) -> setMasterTask
    void setOnReload(java.lang.Runnable) -> setOnReload
    void access$000(surge.PluginAmp) -> access$000
    java.lang.Object vt(java.lang.Object,java.lang.Object,java.lang.Object) -> vt
surge.PluginAmp$1 -> org.cyberpwn.react.PfJA:
    surge.PluginAmp this$0 -> vusm
    void <init>(surge.PluginAmp) -> <init>
    void run() -> run
surge.PluginAmp$2 -> org.cyberpwn.react.gWiS:
    surge.PluginAmp this$0 -> vusm
    void <init>(surge.PluginAmp) -> <init>
    void run() -> run
    java.lang.Object vM(java.lang.Object,java.lang.Object,java.lang.Object) -> NxeL
surge.PluginAmp$3 -> org.cyberpwn.react.tgAJ:
    surge.PluginAmp this$0 -> vusm
    void <init>(surge.PluginAmp) -> <init>
    void run() -> run
    java.lang.Object eJ(java.lang.Object,java.lang.Object,java.lang.Object) -> Dadv
surge.Surge -> org.cyberpwn.react.nCLP:
    surge.PluginAmp amp -> xcIT
    react.glang.GList tickComponents -> edBd
    react.glang.GList atickComponents -> LIXg
    surge.sched.TaskManager taskmgr -> LHwm
    surge.hotload.HotloadManager hotloadmgr -> CPBA
    java.lang.Thread mainThread -> FYJP
    void <init>() -> <init>
    boolean isObfuscated() -> isObfuscated
    void register(org.bukkit.event.Listener) -> WGJb
    void unregister(org.bukkit.event.Listener) -> unregister
    java.io.File folder(java.lang.String) -> gpKE
    java.io.File folder() -> cBWL
    java.io.File getPluginJarFile() -> hIVB
    java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> KejP
    void startup() -> startup
    java.lang.Thread getServerThread() -> ySWC
    react.glang.GList getTickComponents() -> UkuG
    react.glang.GList getAsyncTickComponents() -> iwOr
    void registerTicked(surge.sched.IMasterTickComponent) -> WGJb
    void unregisterTicked(surge.sched.IMasterTickComponent) -> dfal
    surge.PluginAmp createAmp(surge.control.AmpedPlugin) -> WGJb
    boolean isMainThread() -> isMainThread
    void stopAmp() -> pYaM
    boolean hasAmp() -> Qxys
    surge.PluginAmp getAmp() -> IWqH
    surge.sched.TaskManager getTaskManager() -> RQix
    surge.hotload.HotloadManager getHotloadManager() -> fSsK
    void <clinit>() -> <clinit>
    java.lang.Object sN(java.lang.Object,java.lang.Object,java.lang.Object) -> fvJg
surge.a -> org.cyberpwn.react.OQco:
    java.lang.Object[] S -> gyUP
    java.lang.Class[] o -> hBRN
    int[] F -> rOtc
    short[] t -> RuKG
    int Q -> Q
    int Z -> Z
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class C(int,int) -> avks
    java.lang.Class t(int) -> xWrH
    java.lang.reflect.Method G(int) -> QFAs
    java.lang.Object b(int,java.lang.Object[]) -> EBVK
    java.lang.Object M(java.lang.Object,int,java.lang.Object[]) -> XdAJ
    java.lang.Object V(int,java.lang.Object[]) -> EdXk
    java.lang.reflect.Field v(int) -> gpKE
    java.lang.Object t(java.lang.Object,int) -> XJNQ
    void j(java.lang.Object,int,java.lang.Object) -> SmbW
    java.lang.Object R(int) -> jpkw
    void j(int,java.lang.Object) -> DrYG
surge.cluster.Cluster -> org.cyberpwn.react.lpKF:
    surge.cluster.ClusterType type -> ExIq
    java.lang.Object t -> brvH
    void <init>(surge.cluster.ClusterType,java.lang.Object) -> <init>
    surge.cluster.ClusterType getType() -> UcdX
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
surge.cluster.Cluster$Cluster -> org.cyberpwn.react.MmaQ:
    java.lang.Object[] y -> GmNb
    int f -> f
    java.math.BigInteger[] n -> hcJc
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void O(int,java.lang.Object) -> qcup
    int u(int,int) -> DrYG
    int O(byte[],int) -> QpMH
    void R1885() -> woVw
    void L() -> L
    java.lang.String T(java.lang.Object) -> EAwa
surge.cluster.ClusterBoolean -> org.cyberpwn.react.BTQJ:
    void <init>(java.lang.Boolean) -> <init>
surge.cluster.ClusterDouble -> org.cyberpwn.react.uqqx:
    void <init>(java.lang.Double) -> <init>
surge.cluster.ClusterInt -> org.cyberpwn.react.WsOQ:
    void <init>(java.lang.Integer) -> <init>
surge.cluster.ClusterLong -> org.cyberpwn.react.aMgR:
    void <init>(java.lang.Long) -> <init>
surge.cluster.ClusterString -> org.cyberpwn.react.YFOt:
    void <init>(java.lang.String) -> <init>
surge.cluster.ClusterStringList -> org.cyberpwn.react.pHpg:
    void <init>(java.util.List) -> <init>
surge.cluster.ClusterType -> org.cyberpwn.react.GuBM:
    surge.cluster.ClusterType INT -> INT
    surge.cluster.ClusterType BOOLEAN -> BOOLEAN
    surge.cluster.ClusterType STRING -> STRING
    surge.cluster.ClusterType STRING_LIST -> STRING_LIST
    surge.cluster.ClusterType DOUBLE -> DOUBLE
    surge.cluster.ClusterType LONG -> LONG
    surge.cluster.ClusterType[] $VALUES -> $VALUES
    surge.cluster.ClusterType[] values() -> values
    surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object Vh(java.lang.Object,java.lang.Object,java.lang.Object) -> Vh
surge.cluster.ConfigurationDataInput -> org.cyberpwn.react.DtIX:
    void <init>() -> <init>
    void read(surge.cluster.IConfigurable,java.io.File) -> WGJb
    surge.cluster.DataCluster fillDefaults(surge.cluster.IConfigurable) -> WGJb
    java.lang.Object ft(java.lang.Object,java.lang.Object,java.lang.Object) -> lgHq
surge.cluster.ConfigurationDataInput$1 -> org.cyberpwn.react.KMkL:
    int[] $SwitchMap$surge$cluster$ClusterType -> YaAK
    void <clinit>() -> <clinit>
    java.lang.Object Ol(java.lang.Object,java.lang.Object,java.lang.Object) -> JlYK
surge.cluster.ConfigurationDataOutput -> org.cyberpwn.react.bsPi:
    void <init>() -> <init>
    void write(surge.cluster.IConfigurable,java.io.File) -> dfal
    java.lang.Object tf(java.lang.Object,java.lang.Object,java.lang.Object) -> wfVM
surge.cluster.DataCluster -> org.cyberpwn.react.XeRt:
    react.glang.GMap clusters -> clusters
    void <init>() -> <init>
    react.glang.GList keys() -> keys
    void fromJson(react.json.JSONObject) -> fromJson
    react.json.JSONObject toJson() -> toJson
    org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> toFileConfiguration
    void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> fromFileConfiguration
    boolean contains(java.lang.String) -> contains
    surge.cluster.ClusterType getType(java.lang.String) -> getType
    int getInt(java.lang.String) -> getInt
    java.lang.Object get(java.lang.String) -> get
    long getLong(java.lang.String) -> getLong
    java.lang.String getString(java.lang.String) -> getString
    double getDouble(java.lang.String) -> getDouble
    boolean getBoolean(java.lang.String) -> getBoolean
    java.util.List getStringList(java.lang.String) -> getStringList
    void trySet(java.lang.String,java.lang.Object) -> trySet
    void set(java.lang.String,int) -> set
    void set(java.lang.String,boolean) -> set
    void set(java.lang.String,double) -> set
    void set(java.lang.String,long) -> set
    void set(java.lang.String,java.lang.String) -> set
    void set(java.lang.String,java.util.List) -> set
    java.lang.Object xt(java.lang.Object,java.lang.Object,java.lang.Object) -> xt
surge.cluster.DataCluster$Cluster -> org.cyberpwn.react.ejwY:
    java.lang.Object[] d -> qUQx
    int i -> i
    java.math.BigInteger[] V -> fgCe
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void q(int,java.lang.Object) -> QpMH
    int Z(int,int) -> MtdV
    int M(byte[],int) -> wnWa
    void X24932() -> WPXx
    void S() -> S
    java.lang.String G(java.lang.Object) -> NECO
surge.cluster.ICluster -> org.cyberpwn.react.vAsl:
    surge.cluster.ClusterType getType() -> UcdX
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
surge.cluster.IConfigurable -> org.cyberpwn.react.uYDe:
surge.cluster.IDataInput -> org.cyberpwn.react.AaoY:
    surge.cluster.DataCluster read(java.io.File) -> lTgP
surge.cluster.IDataOutput -> org.cyberpwn.react.IYHM:
    void write(surge.cluster.DataCluster,java.io.File) -> WGJb
surge.cluster.Key -> org.cyberpwn.react.LsSH:
    java.lang.String value() -> value
surge.cluster.KeyPointer -> org.cyberpwn.react.VMkE:
    int value() -> value
surge.cluster.KeyStore -> org.cyberpwn.react.nurS:
surge.cluster.ReflectedConfigurationException -> org.cyberpwn.react.kcxN:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
surge.cluster.YamlDataInput -> org.cyberpwn.react.bbOb:
    void <init>() -> <init>
    surge.cluster.DataCluster read(java.io.File) -> lTgP
    java.lang.Object wM(java.lang.Object,java.lang.Object,java.lang.Object) -> Cgcx
surge.cluster.YamlDataOutput -> org.cyberpwn.react.banb:
    void <init>() -> <init>
    void write(surge.cluster.DataCluster,java.io.File) -> WGJb
    java.lang.Object Wh(java.lang.Object,java.lang.Object,java.lang.Object) -> bilU
surge.cluster.c -> org.cyberpwn.react.XSqM:
    java.lang.Object[] T -> iUpD
    java.lang.Class[] U -> SNMo
    int[] R -> pskR
    short[] Z -> WaxF
    int a -> a
    int W -> W
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class T(int,int) -> PBVy
    java.lang.Class E(int) -> ndGa
    java.lang.reflect.Method Z(int) -> avks
    java.lang.Object G(int,java.lang.Object[]) -> gpKE
    java.lang.Object g(java.lang.Object,int,java.lang.Object[]) -> wnYS
    java.lang.Object I(int,java.lang.Object[]) -> eHBt
    java.lang.reflect.Field Y(int) -> QyFc
    java.lang.Object f(java.lang.Object,int) -> DrYG
    void y(java.lang.Object,int,java.lang.Object) -> ESVk
    java.lang.Object F(int) -> DHIa
    void t(int,java.lang.Object) -> HvRk
surge.collection.GSound -> org.cyberpwn.react.vRuO:
    java.lang.String sound -> ffdv
    org.bukkit.Sound iSound -> tEYs
    java.lang.Float volume -> lqKY
    java.lang.Float pitch -> Asnw
    void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    void <init>(org.bukkit.Sound) -> <init>
    void play(org.bukkit.entity.Player) -> tupB
    void play(org.bukkit.Location) -> mOYk
    void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> WGJb
    java.lang.String getSound() -> lMSr
    void setSound(java.lang.String) -> LiMa
    org.bukkit.Sound getiSound() -> xHFY
    void setiSound(org.bukkit.Sound) -> dfal
    java.lang.Float getVolume() -> CgbU
    void setVolume(java.lang.Float) -> WGJb
    java.lang.Float getPitch() -> stLY
    void setPitch(java.lang.Float) -> dfal
    java.lang.Object OL(java.lang.Object,java.lang.Object,java.lang.Object) -> afiV
surge.collection.d -> org.cyberpwn.react.Xdpm:
    java.lang.Object[] s -> BTQJ
    int a -> a
    java.math.BigInteger[] h -> qoYM
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void P(int,java.lang.Object) -> lTgP
    int N(int,int) -> Vmyy
    int H(byte[],int) -> OYFP
    void v8089() -> LjLj
    void y() -> y
    java.lang.String T(java.lang.Object) -> EAwa
surge.collection.id -> org.cyberpwn.react.jXce:
    java.lang.Object[] d -> qUQx
    int R -> R
    java.math.BigInteger[] n -> hcJc
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void u(int,java.lang.Object) -> lTeb
    int q(int,int) -> WXLP
    int Q(byte[],int) -> sQMd
    void p14442() -> UJSY
    void h() -> h
    java.lang.String v(java.lang.Object) -> DrYG
surge.collection.l -> org.cyberpwn.react.lUxb:
    java.lang.Object[] M -> Kogy
    java.lang.Class[] R -> wFMb
    int[] o -> lVtq
    short[] C -> UTUv
    int H -> H
    int K -> K
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class R(int,int) -> MSBL
    java.lang.Class m(int) -> CDha
    java.lang.reflect.Method H(int) -> uVxs
    java.lang.Object o(int,java.lang.Object[]) -> FpMO
    java.lang.Object R(java.lang.Object,int,java.lang.Object[]) -> OXeW
    java.lang.Object l(int,java.lang.Object[]) -> nJMP
    java.lang.reflect.Field G(int) -> rori
    java.lang.Object m(java.lang.Object,int) -> XdAJ
    void j(java.lang.Object,int,java.lang.Object) -> SmbW
    java.lang.Object K(int) -> oLvw
    void M(int,java.lang.Object) -> eHBt
surge.control.AmpedPlugin -> org.cyberpwn.react.TifW:
    react.glang.GList controllers -> controllers
    react.gconcurrent.ParallelPoolManager pp -> pp
    surge.server.CoreTickThread ctt -> ctt
    java.util.UUID idx -> idx
    void <init>() -> <init>
    void doScan() -> doScan
    long getNanoSync() -> getNanoSync
    int getThreadCount() -> getThreadCount
    void onReload() -> onReload
    void onEnable() -> onEnable
    void moveLegacy() -> moveLegacy
    boolean checkForLegacy() -> checkForLegacy
    void onDisable() -> onDisable
    react.glang.GList getControllers() -> getControllers
    void registerController(surge.control.IController) -> registerController
    void onTick() -> onTick
    java.lang.String getTickName() -> getTickName
    react.gconcurrent.ParallelPoolManager getThreadPool() -> getThreadPool
    void destroyOldThreads() -> destroyOldThreads
    void onControllerRegistry() -> onControllerRegistry
    void onStart(surge.util.Protocol) -> onStart
    void onStop() -> onStop
    void onPostInit() -> onPostInit
    void onPreInit() -> onPreInit
    java.lang.Object kT(java.lang.Object,java.lang.Object,java.lang.Object) -> kT
surge.control.AmpedPlugin$1 -> org.cyberpwn.react.MCOY:
    surge.control.AmpedPlugin this$0 -> kSuE
    void <init>(surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    long getNanoGate() -> getNanoGate
    java.lang.Object iY(java.lang.Object,java.lang.Object,java.lang.Object) -> VxJp
surge.control.AmpedPlugin$2 -> org.cyberpwn.react.RdAO:
    surge.control.AmpedPlugin this$0 -> kSuE
    void <init>(surge.control.AmpedPlugin) -> <init>
    void run() -> run
    java.lang.Object vj(java.lang.Object,java.lang.Object,java.lang.Object) -> LYLE
surge.control.Control -> org.cyberpwn.react.oxuK:
surge.control.Controller -> org.cyberpwn.react.vmGw:
    void <init>() -> <init>
surge.control.Disable -> org.cyberpwn.react.qehU:
surge.control.Enable -> org.cyberpwn.react.bsPW:
surge.control.IController -> org.cyberpwn.react.SfdB:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
surge.control.Instance -> org.cyberpwn.react.lUws:
surge.control.Plugin -> org.cyberpwn.react.skoC:
surge.control.SurgePlugin -> org.cyberpwn.react.fKwG:
    void onStart(surge.util.Protocol) -> onStart
    void onStop() -> onStop
    void onPostInit() -> onPostInit
    void onPreInit() -> onPreInit
    void onControllerRegistry() -> onControllerRegistry
    void registerController(surge.control.IController) -> registerController
    react.glang.GList getControllers() -> getControllers
    react.gconcurrent.ParallelPoolManager getThreadPool() -> getThreadPool
surge.control.dz -> org.cyberpwn.react.aUxv:
    java.lang.Object[] z -> LPit
    int h -> h
    java.math.BigInteger[] P -> hdOp
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void W(int,java.lang.Object) -> TqEp
    int P(int,int) -> KejP
    int B(byte[],int) -> qtuv
    void R20349() -> SeoW
    void F() -> F
    java.lang.String r(java.lang.Object) -> IWUw
surge.control.s -> org.cyberpwn.react.uHFI:
    java.lang.Object[] i -> HEJG
    int D -> D
    java.math.BigInteger[] w -> quxe
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void S(int,java.lang.Object) -> LXLE
    int P(int,int) -> KejP
    int H(byte[],int) -> OYFP
    void p21629() -> HClm
    void r() -> r
    java.lang.String P(java.lang.Object) -> Vvlm
surge.control.vq -> org.cyberpwn.react.etKk:
    java.lang.Object[] c -> Hewq
    java.lang.Class[] Y -> NxeL
    int[] f -> f
    short[] o -> JLGP
    int B -> B
    int y -> y
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class D(int,int) -> LXMs
    java.lang.Class s(int) -> XdAJ
    java.lang.reflect.Method I(int) -> HCWk
    java.lang.Object Z(int,java.lang.Object[]) -> XJNQ
    java.lang.Object x(java.lang.Object,int,java.lang.Object[]) -> WGJb
    java.lang.Object I(int,java.lang.Object[]) -> eHBt
    java.lang.reflect.Field U(int) -> GYfc
    java.lang.Object g(java.lang.Object,int) -> OXeW
    void x(java.lang.Object,int,java.lang.Object) -> PBWD
    java.lang.Object p(int) -> KwUU
    void w(int,java.lang.Object) -> sQMd
surge.hotload.HotloadManager -> org.cyberpwn.react.hlTA:
    react.glang.GMap filemods -> filemods
    react.glang.GMap filesizes -> filesizes
    react.glang.GMap fileacts -> fileacts
    void <init>() -> <init>
    void track(java.io.File,java.lang.Runnable) -> track
    void untrack(java.io.File) -> untrack
    void untrackall() -> untrackall
    void onTick() -> onTick
    java.lang.String getTickName() -> getTickName
    react.glang.GMap access$000(surge.hotload.HotloadManager) -> access$000
    react.glang.GMap access$100(surge.hotload.HotloadManager) -> access$100
    react.glang.GMap access$200(surge.hotload.HotloadManager) -> access$200
    java.lang.Object ER(java.lang.Object,java.lang.Object,java.lang.Object) -> ER
surge.hotload.HotloadManager$1 -> org.cyberpwn.react.tLrQ:
    surge.hotload.HotloadManager this$0 -> NFqG
    void <init>(surge.hotload.HotloadManager) -> <init>
    void run() -> run
    java.lang.Object PR(java.lang.Object,java.lang.Object,java.lang.Object) -> pPpc
surge.hotload.kj -> org.cyberpwn.react.qUJx:
    java.lang.Object[] A -> BCRy
    int T -> T
    java.math.BigInteger[] Tj -> WtNs
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void C(int,java.lang.Object) -> DPSk
    int J(int,int) -> ESVk
    int Y(byte[],int) -> EdXk
    void C7240() -> vtcn
    void S() -> S
    java.lang.String v(java.lang.Object) -> DrYG
surge.hotload.o -> org.cyberpwn.react.oEsQ:
    java.lang.Object[] A -> BCRy
    int i -> i
    java.math.BigInteger[] v -> JdEi
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void Q(int,java.lang.Object) -> RkAo
    int c(int,int) -> c
    int S(byte[],int) -> OXeW
    void K22477() -> lUdg
    void Kj() -> gWVV
    java.lang.String G(java.lang.Object) -> NECO
surge.hotload.y -> org.cyberpwn.react.JJjU:
    java.lang.Object[] eI -> vCTA
    java.lang.Class[] P -> fDeJ
    int[] k -> lVbM
    short[] e -> EEGs
    int U -> U
    int R -> R
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class M(int,int) -> gpKE
    java.lang.Class e(int) -> NLyR
    java.lang.reflect.Method I(int) -> HCWk
    java.lang.Object q(int,java.lang.Object[]) -> qtuv
    java.lang.Object C(java.lang.Object,int,java.lang.Object[]) -> Vmyy
    java.lang.Object g(int,java.lang.Object[]) -> fcvC
    java.lang.reflect.Field Z(int) -> QMqg
    java.lang.Object p(java.lang.Object,int) -> PBWD
    void z(java.lang.Object,int,java.lang.Object) -> DPSk
    java.lang.Object G(int) -> vRCd
    void C(int,java.lang.Object) -> DPSk
surge.im -> org.cyberpwn.react.IGfp:
    java.lang.Object[] y -> GmNb
    int P -> P
    java.math.BigInteger[] O -> WXLP
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void e(int,java.lang.Object) -> EBVK
    int B(int,int) -> xhmI
    int T(byte[],int) -> TqEp
    void x26936() -> AXkS
    void G() -> G
    java.lang.String d(java.lang.Object) -> VDGt
surge.nms.NMSClass -> org.cyberpwn.react.jGef:
    boolean init -> QjMi
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> aOHx
    java.lang.Class IChatBaseComponent -> DBCp
    java.lang.Class ChatSerializer -> smNT
    java.lang.Class PacketPlayOutPlayerInfo -> ukDO
    java.lang.Class PlayerInfoData -> Vpke
    java.lang.Class EnumPlayerInfoAction -> gYJe
    java.lang.Class GameProfile -> apkL
    java.lang.Class EnumGamemode -> CrDu
    java.lang.Class TileEntitySkull -> Nqcd
    java.lang.Class LoadingCache -> AcPH
    void <init>() -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object UL(java.lang.Object,java.lang.Object,java.lang.Object) -> gNYk
surge.nms.NMSX -> org.cyberpwn.react.WPoo:
    surge.nms.NMSX bountifulAPI -> pktK
    boolean useOldMethods -> FGhm
    java.lang.String nmsver -> vuvG
    java.lang.Object eTimes -> qDcm
    java.lang.Object eTitle -> CWrs
    java.lang.Object eSubtitle -> pcdP
    void <init>() -> <init>
    java.lang.String getVersion() -> getVersion
    void setAi(org.bukkit.entity.LivingEntity,boolean) -> WGJb
    java.lang.Class getCBNMSClass(java.lang.String) -> wnWa
    java.lang.Class getCBClass(java.lang.String) -> lTeb
    java.lang.Object serializeChat(java.lang.String) -> QpMH
    java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> WGJb
    java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> WGJb
    java.lang.String getBukkitVersion() -> getBukkitVersion
    java.lang.String nmsPackage() -> LHGl
    java.lang.String craftPackage() -> VMUI
    void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> WGJb
    void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> WGJb
    java.lang.Class getNMSClass(java.lang.String) -> sQMd
    void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> WGJb
    void clearTitle(org.bukkit.entity.Player) -> HvRk
    void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> dfal
    void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> WGJb
    void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> WGJb
    void sendActionBarToAllPlayers(java.lang.String) -> RkAo
    void sendActionBarToAllPlayers(java.lang.String,int) -> lTgP
    java.lang.String getEntityName(org.bukkit.entity.Entity) -> CgEJ
    int ping(org.bukkit.entity.Player) -> fcvC
    void <clinit>() -> <clinit>
    java.lang.Object Mx(java.lang.Object,java.lang.Object,java.lang.Object) -> AGjx
surge.nms.NMSX$1 -> org.cyberpwn.react.eRHu:
    org.bukkit.entity.Player val$player -> FiYn
    void <init>(org.bukkit.entity.Player) -> <init>
    void run() -> run
    java.lang.Object oj(java.lang.Object,java.lang.Object,java.lang.Object) -> dxbS
surge.nms.NMSX$2 -> org.cyberpwn.react.HoYL:
    org.bukkit.entity.Player val$player -> FiYn
    java.lang.String val$message -> ptdy
    void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    void run() -> run
    java.lang.Object kR(java.lang.Object,java.lang.Object,java.lang.Object) -> ghYv
surge.nms.PacketUtil -> org.cyberpwn.react.XSsI:
    void <init>() -> <init>
    surge.nms.PacketUtil$V getVersion() -> hcJc
    void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> WGJb
    void clearTitle(org.bukkit.entity.Player) -> HvRk
    void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> WGJb
    java.lang.Object HP(java.lang.Object,java.lang.Object,java.lang.Object) -> PLFT
surge.nms.PacketUtil$PacketUtil -> org.cyberpwn.react.grAb:
    java.lang.Object[] q -> gGhG
    int B -> B
    java.math.BigInteger[] h -> qoYM
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void E(int,java.lang.Object) -> EdXk
    int x(int,int) -> aLYB
    int L(byte[],int) -> lTgP
    void b5518() -> sjyS
    void C() -> C
    java.lang.String gQ(java.lang.Object) -> kYvI
surge.nms.PacketUtil$Title -> org.cyberpwn.react.xank:
    java.lang.Object[] q -> gGhG
    int I -> I
    java.math.BigInteger[] Z -> hReB
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void p(int,java.lang.Object) -> WGJb
    int r(int,int) -> eqwO
    int j(byte[],int) -> xNwp
    void b31228() -> pbPo
    void z() -> z
    java.lang.String C(java.lang.Object) -> bWiv
surge.nms.PacketUtil$V -> org.cyberpwn.react.tUcK:
    surge.nms.PacketUtil$V R17 -> NGPk
    surge.nms.PacketUtil$V R18 -> tyAc
    surge.nms.PacketUtil$V R19 -> xRIT
    surge.nms.PacketUtil$V R111 -> dyry
    surge.nms.PacketUtil$V R110 -> NPAo
    surge.nms.PacketUtil$V R112 -> JeXS
    surge.nms.PacketUtil$V[] $VALUES -> IHav
    surge.nms.PacketUtil$V[] values() -> values
    surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object zb(java.lang.Object,java.lang.Object,java.lang.Object) -> gFWT
surge.nms.Title -> org.cyberpwn.react.SgFX:
    java.lang.String title -> title
    java.lang.String subTitle -> rGfS
    java.lang.String action -> action
    java.lang.Integer fadeIn -> JuyI
    java.lang.Integer fadeOut -> ahYb
    java.lang.Integer stayTime -> oyqq
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    void send(org.bukkit.entity.Player) -> LXLE
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    java.lang.String getSubTitle() -> lgGG
    void setSubTitle(java.lang.String) -> EAwa
    java.lang.String getAction() -> getAction
    void setAction(java.lang.String) -> setAction
    java.lang.Integer getFadeIn() -> PBrL
    void setFadeIn(java.lang.Integer) -> dfal
    java.lang.Integer getFadeOut() -> VnwA
    void setFadeOut(java.lang.Integer) -> lTgP
    java.lang.Integer getStayTime() -> loWL
    void setStayTime(java.lang.Integer) -> KejP
    java.lang.Object iS(java.lang.Object,java.lang.Object,java.lang.Object) -> TFoo
surge.nms.VersionBukkit -> org.cyberpwn.react.lonA:
    surge.nms.VersionBukkit VU -> VU
    surge.nms.VersionBukkit V7 -> V7
    surge.nms.VersionBukkit V8 -> V8
    surge.nms.VersionBukkit V9 -> V9
    surge.nms.VersionBukkit V11 -> V11
    surge.nms.VersionBukkit V111 -> V111
    surge.nms.VersionBukkit V112 -> V112
    surge.nms.VersionBukkit[] $VALUES -> $VALUES
    surge.nms.VersionBukkit[] values() -> values
    surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean tc() -> tc
    boolean uc() -> uc
    surge.nms.VersionBukkit get() -> get
    void <clinit>() -> <clinit>
    java.lang.Object Ip(java.lang.Object,java.lang.Object,java.lang.Object) -> Ip
surge.nms.nh -> org.cyberpwn.react.pHuO:
    java.lang.Object[] G -> ySrs
    java.lang.Class[] c -> Xmpe
    int[] L -> UBfB
    short[] n -> lgHq
    int d -> d
    int H -> H
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class D(int,int) -> LXMs
    java.lang.Class Rt(int) -> UtRO
    java.lang.reflect.Method h(int) -> skFN
    java.lang.Object h(int,java.lang.Object[]) -> tupB
    java.lang.Object D(java.lang.Object,int,java.lang.Object[]) -> ESVk
    java.lang.Object K(int,java.lang.Object[]) -> vRCd
    java.lang.reflect.Field X(int) -> FEaw
    java.lang.Object c(java.lang.Object,int) -> ePRm
    void w(java.lang.Object,int,java.lang.Object) -> wnYS
    java.lang.Object g(int) -> PKPR
    void o(int,java.lang.Object) -> EAwa
surge.sched.IBursterator -> org.cyberpwn.react.kSXf:
    void burst(java.lang.Object) -> xhmI
    void setTimeLock(double) -> DrYG
    double getEstimatedTimeUse() -> CyCX
    int flush() -> scIw
    int flush(react.gbench.Profiler) -> WGJb
    void queue(java.lang.Object) -> hQNI
    void queue(java.util.List) -> SCOM
    void queue(java.lang.Object[]) -> lTgP
surge.sched.ICancellable -> org.cyberpwn.react.HDcM:
    void cancel() -> cancel
surge.sched.IMasterTickComponent -> org.cyberpwn.react.Jlks:
    void onTick() -> onTick
    java.lang.String getTickName() -> getTickName
surge.sched.ITask -> org.cyberpwn.react.tfdJ:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> prrI
    java.lang.String getName() -> getName
    double getComputeTime() -> Blnu
    double getTotalComputeTime() -> kRaY
    double getActiveTime() -> rqIE
    boolean hasCompleted() -> jrBX
surge.sched.Task -> org.cyberpwn.react.pYwI:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> IPuP
    double computeTime -> lVyf
    double totalComputeTime -> pSFT
    double activeTime -> AkaO
    boolean completed -> completed
    react.gbench.Profiler profiler -> DuLB
    react.gbench.Profiler activeProfiler -> AkaN
    int ticks -> HpVY
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,int) -> <init>
    void setup(java.lang.String,boolean) -> WGJb
    void cancel() -> cancel
    int getId() -> getId
    boolean isRepeating() -> prrI
    java.lang.String getName() -> getName
    double getComputeTime() -> Blnu
    boolean hasCompleted() -> jrBX
    double getTotalComputeTime() -> kRaY
    double getActiveTime() -> rqIE
    react.gbench.Profiler access$000(surge.sched.Task) -> lTgP
    boolean access$102(surge.sched.Task,boolean) -> WGJb
    react.gbench.Profiler access$200(surge.sched.Task) -> KejP
    double access$302(surge.sched.Task,double) -> WGJb
    double access$402(surge.sched.Task,double) -> dfal
    double access$502(surge.sched.Task,double) -> lTgP
    double access$300(surge.sched.Task) -> mOYk
    double access$500(surge.sched.Task) -> wnYS
    double access$400(surge.sched.Task) -> SCOM
    java.lang.Object YF(java.lang.Object,java.lang.Object,java.lang.Object) -> YF
surge.sched.Task$1 -> org.cyberpwn.react.brpy:
    surge.sched.Task this$0 -> cCmq
    void <init>(surge.sched.Task) -> <init>
    void run() -> run
    java.lang.Object sn(java.lang.Object,java.lang.Object,java.lang.Object) -> URdW
surge.sched.Task$2 -> org.cyberpwn.react.BCRy:
    surge.sched.Task this$0 -> cCmq
    void <init>(surge.sched.Task) -> <init>
    void run() -> run
    java.lang.Object Zs(java.lang.Object,java.lang.Object,java.lang.Object) -> Zs
surge.sched.Task$3 -> org.cyberpwn.react.slQe:
    int val$total -> ipUH
    surge.sched.Task this$0 -> cCmq
    void <init>(surge.sched.Task,int) -> <init>
    void run() -> run
    java.lang.Object hf(java.lang.Object,java.lang.Object,java.lang.Object) -> BlqK
surge.sched.Task$TaskLater -> org.cyberpwn.react.jHDn:
    java.lang.Object[] t -> WboI
    int o -> o
    java.math.BigInteger[] f -> lWAy
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void l(int,java.lang.Object) -> vQbs
    int i(int,int) -> QNKT
    int c(byte[],int) -> dfal
    void v542() -> nAwF
    void A() -> A
    java.lang.String H(java.lang.Object) -> MSBL
surge.sched.TaskLater -> org.cyberpwn.react.VMkj:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> IPuP
    double computeTime -> lVyf
    double totalComputeTime -> pSFT
    double activeTime -> AkaO
    boolean completed -> completed
    react.gbench.Profiler profiler -> DuLB
    react.gbench.Profiler activeProfiler -> AkaN
    int ticks -> HpVY
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void setup(java.lang.String,boolean) -> WGJb
    void cancel() -> cancel
    int getId() -> getId
    boolean isRepeating() -> prrI
    java.lang.String getName() -> getName
    double getComputeTime() -> Blnu
    boolean hasCompleted() -> jrBX
    double getTotalComputeTime() -> kRaY
    double getActiveTime() -> rqIE
    react.gbench.Profiler access$000(surge.sched.TaskLater) -> WGJb
    double access$102(surge.sched.TaskLater,double) -> WGJb
    double access$200(surge.sched.TaskLater) -> dfal
    double access$202(surge.sched.TaskLater,double) -> dfal
    double access$100(surge.sched.TaskLater) -> lTgP
    react.gbench.Profiler access$300(surge.sched.TaskLater) -> KejP
    double access$400(surge.sched.TaskLater) -> mOYk
    double access$402(surge.sched.TaskLater,double) -> lTgP
    int access$500(surge.sched.TaskLater) -> wnYS
    java.lang.Object fV(java.lang.Object,java.lang.Object,java.lang.Object) -> XRiQ
surge.sched.TaskLater$1 -> org.cyberpwn.react.eQfj:
    surge.sched.TaskLater this$0 -> WAMH
    void <init>(surge.sched.TaskLater) -> <init>
    void run() -> run
    java.lang.Object sX(java.lang.Object,java.lang.Object,java.lang.Object) -> KEGl
surge.sched.TaskManager -> org.cyberpwn.react.ECkL:
    react.glang.GList tasks -> rpyB
    react.glang.GMap taskProfiles -> oiTu
    void <init>() -> <init>
    void add(surge.sched.ITask) -> WGJb
    void onTick() -> onTick
    void putFinishingTask(surge.sched.ITask) -> dfal
    void putTask(surge.sched.ITask) -> lTgP
    java.lang.String getTickName() -> getTickName
    react.glang.GList getTasks() -> EvXY
    react.glang.GMap getTaskProfiles() -> EmgS
    java.lang.Object xV(java.lang.Object,java.lang.Object,java.lang.Object) -> uGNd
surge.sched.TaskProfile -> org.cyberpwn.react.MuvI:
    double activeTime -> AkaO
    double computeTickTime -> JCXO
    double computeTime -> lVyf
    void <init>() -> <init>
    double getActiveTime() -> rqIE
    void setActiveTime(double) -> XdAJ
    double getComputeTickTime() -> QVwP
    void setComputeTickTime(double) -> OXeW
    double getComputeTime() -> Blnu
    void setComputeTime(double) -> Vmyy
surge.sched.TaskProfile$TaskProfile -> org.cyberpwn.react.hlUa:
    java.lang.Object[] d -> qUQx
    int v -> jHLQ
    java.math.BigInteger[] w -> quxe
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void E(int,java.lang.Object) -> EdXk
    int o(int,int) -> WiQc
    int F(byte[],int) -> Vmyy
    void Q9360() -> OQRO
    void m() -> m
    java.lang.String H(java.lang.Object) -> MSBL
surge.sched.d -> org.cyberpwn.react.JKLl:
    java.lang.Object[] V -> CgEJ
    java.lang.Class[] B -> pthJ
    int[] KE -> Jdyv
    short[] T -> xRKs
    int F -> F
    int K -> K
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class H(int,int) -> dUcs
    java.lang.Class j(int) -> EdXk
    java.lang.reflect.Method w(int) -> DPSk
    java.lang.Object Z(int,java.lang.Object[]) -> XJNQ
    java.lang.Object C(java.lang.Object,int,java.lang.Object[]) -> Vmyy
    java.lang.Object v(int,java.lang.Object[]) -> LXLE
    java.lang.reflect.Field m(int) -> APDY
    java.lang.Object I(java.lang.Object,int) -> Vmyy
    void G(java.lang.Object,int,java.lang.Object) -> tupB
    java.lang.Object K(int) -> oLvw
    void u(int,java.lang.Object) -> lTeb
surge.server.AsyncTick -> org.cyberpwn.react.ySrs:
surge.server.CPS -> org.cyberpwn.react.mkCu:
    react.glang.GMap keys -> Trwj
    void <init>() -> <init>
    react.glang.GList identify(java.lang.String) -> NECO
    void scan() -> tLYi
    java.lang.String readResource(java.io.File,java.lang.String) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object VU(java.lang.Object,java.lang.Object,java.lang.Object) -> sQiU
surge.server.CPS$CPS -> org.cyberpwn.react.MStu:
    java.lang.Object[] w -> jaOE
    int K -> K
    java.math.BigInteger[] V -> fgCe
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void x(int,java.lang.Object) -> FpMO
    int G(int,int) -> xNwp
    int S(byte[],int) -> OXeW
    void N26924() -> JdEi
    void s() -> s
    java.lang.String Gq(java.lang.Object) -> NffG
surge.server.CPS$Cuboid -> org.cyberpwn.react.FGPr:
    java.lang.Object[] G -> ySrs
    int d -> d
    java.math.BigInteger[] m -> mkCu
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void U(int,java.lang.Object) -> qtuv
    int C(int,int) -> SeUk
    int G(byte[],int) -> WGJb
    void O3245() -> qeSi
    void n() -> n
    java.lang.String H(java.lang.Object) -> MSBL
surge.server.CoreTickThread -> org.cyberpwn.react.gFmx:
    boolean r -> r
    void <init>() -> <init>
    void run() -> run
    java.lang.Object cC(java.lang.Object,java.lang.Object,java.lang.Object) -> CNRG
surge.server.Cuboid -> org.cyberpwn.react.pbjk:
    java.lang.String worldName -> worldName
    int x1 -> x1
    int y1 -> y1
    int z1 -> z1
    int x2 -> x2
    int y2 -> y2
    int z2 -> z2
    void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    int depth(surge.util.Axis) -> depth
    void set(org.bukkit.Location,org.bukkit.Location) -> set
    boolean hasPlayers() -> hasPlayers
    react.glang.GList getPlayers() -> getPlayers
    react.glang.GList getEntities() -> getEntities
    void <init>(org.bukkit.Location) -> <init>
    void <init>(surge.server.Cuboid) -> <init>
    void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    void <init>(java.util.Map) -> <init>
    java.util.Map serialize() -> serialize
    surge.server.Cuboid flatten(int) -> flatten
    org.bukkit.Location getLowerNE() -> getLowerNE
    org.bukkit.Location getUpperSW() -> getUpperSW
    org.bukkit.Location getCenter() -> getCenter
    org.bukkit.World getWorld() -> getWorld
    int getSizeX() -> getSizeX
    int getSizeY() -> getSizeY
    int getSizeZ() -> getSizeZ
    int getLowerX() -> getLowerX
    int getLowerY() -> getLowerY
    int getLowerZ() -> getLowerZ
    int getUpperX() -> getUpperX
    int getUpperY() -> getUpperY
    int getUpperZ() -> getUpperZ
    org.bukkit.block.Block[] corners() -> corners
    surge.server.Cuboid expand(surge.server.Cuboid$CuboidDirection,int) -> expand
    surge.server.Cuboid shift(surge.server.Cuboid$CuboidDirection,int) -> shift
    surge.server.Cuboid outset(surge.server.Cuboid$CuboidDirection,int) -> outset
    surge.server.Cuboid inset(surge.server.Cuboid$CuboidDirection,int) -> inset
    boolean contains(int,int,int) -> contains
    boolean contains(org.bukkit.block.Block) -> contains
    boolean contains(org.bukkit.Location) -> contains
    int volume() -> volume
    byte averageLightLevel() -> averageLightLevel
    surge.server.Cuboid contract() -> contract
    surge.server.Cuboid contract(surge.server.Cuboid$CuboidDirection) -> contract
    surge.server.Cuboid getFace(surge.server.Cuboid$CuboidDirection) -> getFace
    boolean containsOnly(org.bukkit.Material) -> containsOnly
    surge.server.Cuboid getBoundingCuboid(surge.server.Cuboid) -> getBoundingCuboid
    org.bukkit.block.Block getRelativeBlock(int,int,int) -> getRelativeBlock
    org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> getRelativeBlock
    java.util.List getChunks() -> getChunks
    void fill(int,byte) -> fill
    java.util.Iterator iterator() -> iterator
    surge.server.Cuboid clone() -> clone
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object clone() -> clone
    java.lang.Object MR(java.lang.Object,java.lang.Object,java.lang.Object) -> MR
surge.server.Cuboid$1 -> org.cyberpwn.react.NOHs:
    surge.server.Cuboid this$0 -> oiTf
    void <init>(surge.server.Cuboid) -> <init>
    org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> nJMP
    java.lang.Object onAdapt(java.lang.Object) -> Vmyy
surge.server.Cuboid$2 -> org.cyberpwn.react.AkFR:
    int[] $SwitchMap$surge$util$Axis -> jPsV
    int[] $SwitchMap$surge$server$Cuboid$CuboidDirection -> yfPh
    void <clinit>() -> <clinit>
    java.lang.Object oO(java.lang.Object,java.lang.Object,java.lang.Object) -> fBsG
surge.server.Cuboid$CuboidDirection -> org.cyberpwn.react.qoAB:
    surge.server.Cuboid$CuboidDirection North -> North
    surge.server.Cuboid$CuboidDirection East -> East
    surge.server.Cuboid$CuboidDirection South -> South
    surge.server.Cuboid$CuboidDirection West -> West
    surge.server.Cuboid$CuboidDirection Up -> Up
    surge.server.Cuboid$CuboidDirection Down -> Down
    surge.server.Cuboid$CuboidDirection Horizontal -> Horizontal
    surge.server.Cuboid$CuboidDirection Vertical -> Vertical
    surge.server.Cuboid$CuboidDirection Both -> Both
    surge.server.Cuboid$CuboidDirection Unknown -> Unknown
    surge.server.Cuboid$CuboidDirection[] $VALUES -> $VALUES
    surge.server.Cuboid$CuboidDirection[] values() -> values
    surge.server.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    surge.server.Cuboid$CuboidDirection opposite() -> opposite
    void <clinit>() -> <clinit>
    java.lang.Object oQ(java.lang.Object,java.lang.Object,java.lang.Object) -> oQ
surge.server.Cuboid$CuboidIterator -> org.cyberpwn.react.ffOP:
    org.bukkit.World w -> kmhu
    int baseX -> SWCw
    int baseY -> DRfX
    int baseZ -> wOHf
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> GeBF
    int sizeY -> YFqP
    int sizeZ -> EEIO
    surge.server.Cuboid this$0 -> oiTf
    void <init>(surge.server.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    boolean hasNext() -> hasNext
    org.bukkit.block.Block next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
    java.lang.Object CN(java.lang.Object,java.lang.Object,java.lang.Object) -> RjmU
surge.server.MemoryMonitor -> org.cyberpwn.react.uHGY:
    long memoryFree -> memoryFree
    long memoryUsed -> memoryUsed
    long memoryMax -> memoryMax
    long lastMemoryUsed -> lastMemoryUsed
    long memoryUsedAfterGC -> memoryUsedAfterGC
    long allocated -> allocated
    long collected -> collected
    long collections -> collections
    long sms -> sms
    long memoryAllocatedPerTick -> memoryAllocatedPerTick
    long memoryCollectedPerTick -> memoryCollectedPerTick
    long memoryFullyAllocatedPerTick -> memoryFullyAllocatedPerTick
    long mah -> mah
    long mahs -> mahs
    void <init>() -> <init>
    void onAllocationSet() -> onAllocationSet
    void run() -> run
    long getMemoryFree() -> getMemoryFree
    long getMemoryUsed() -> getMemoryUsed
    long getMemoryMax() -> getMemoryMax
    long getLastMemoryUsed() -> getLastMemoryUsed
    long getMemoryUsedAfterGC() -> getMemoryUsedAfterGC
    long getAllocated() -> getAllocated
    long getCollected() -> getCollected
    long getCollections() -> getCollections
    long getSms() -> getSms
    long getMemoryAllocatedPerTick() -> getMemoryAllocatedPerTick
    long getMemoryCollectedPerTick() -> getMemoryCollectedPerTick
    long getMemoryFullyAllocatedPerTick() -> getMemoryFullyAllocatedPerTick
    long getMah() -> getMah
    long getMahs() -> getMahs
    java.lang.Object AC(java.lang.Object,java.lang.Object,java.lang.Object) -> AC
surge.server.SuperSampler -> org.cyberpwn.react.wyBC:
    react.gmath.Average ticksPerSecondL -> ticksPerSecondL
    react.gmath.Average tickTimeL -> tickTimeL
    react.gmath.Average mahL -> mahL
    double ticksPerSecond -> ticksPerSecond
    double ticksPerSecondRaw -> ticksPerSecondRaw
    double tickTime -> tickTime
    double tickTimeRaw -> tickTimeRaw
    boolean running -> running
    boolean frozen -> frozen
    double tickUtilizationRaw -> tickUtilizationRaw
    double tickUtilization -> tickUtilization
    double leftoverTickTime -> leftoverTickTime
    long memoryUse -> memoryUse
    long memoryAllocated -> memoryAllocated
    long memoryCollected -> memoryCollected
    long mahs -> mahs
    int totalChunks -> totalChunks
    int totalEntities -> totalEntities
    int totalDrops -> totalDrops
    int totalTiles -> totalTiles
    int totalLiving -> totalLiving
    int chunksLoaded -> chunksLoaded
    int chunksUnloaded -> chunksUnloaded
    surge.server.WorldMonitor worldMonitor -> worldMonitor
    surge.server.TPSMonitor tpsMonitor -> tpsMonitor
    surge.server.MemoryMonitor memoryMonitor -> memoryMonitor
    java.lang.StackTraceElement[] lockStack -> lockStack
    react.glang.GMap spikes -> spikes
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    void onTick() -> onTick
    java.lang.String getTickName() -> getTickName
    react.gmath.Average getTicksPerSecondL() -> getTicksPerSecondL
    double getTicksPerSecond() -> getTicksPerSecond
    double getTicksPerSecondRaw() -> getTicksPerSecondRaw
    boolean isRunning() -> isRunning
    surge.server.TPSMonitor getTpsMonitor() -> getTpsMonitor
    react.gmath.Average getTickTimeL() -> getTickTimeL
    double getTickTime() -> getTickTime
    double getTickTimeRaw() -> getTickTimeRaw
    double getTickUtilizationRaw() -> getTickUtilizationRaw
    double getTickUtilization() -> getTickUtilization
    double getLeftoverTickTime() -> getLeftoverTickTime
    surge.server.MemoryMonitor getMemoryMonitor() -> getMemoryMonitor
    long getMemoryUse() -> getMemoryUse
    long getMemoryAllocated() -> getMemoryAllocated
    long getMemoryCollected() -> getMemoryCollected
    react.gmath.Average getMahL() -> getMahL
    long getMahs() -> getMahs
    int getTotalChunks() -> getTotalChunks
    int getTotalEntities() -> getTotalEntities
    int getTotalDrops() -> getTotalDrops
    int getTotalTiles() -> getTotalTiles
    int getTotalLiving() -> getTotalLiving
    surge.server.WorldMonitor getWorldMonitor() -> getWorldMonitor
    int getChunksLoaded() -> getChunksLoaded
    int getChunksUnloaded() -> getChunksUnloaded
    void setTicksPerSecondL(react.gmath.Average) -> setTicksPerSecondL
    void setTickTimeL(react.gmath.Average) -> setTickTimeL
    void setMahL(react.gmath.Average) -> setMahL
    void setTicksPerSecond(double) -> setTicksPerSecond
    void setTicksPerSecondRaw(double) -> setTicksPerSecondRaw
    void setTickTime(double) -> setTickTime
    void setTickTimeRaw(double) -> setTickTimeRaw
    void setRunning(boolean) -> setRunning
    void setTickUtilizationRaw(double) -> setTickUtilizationRaw
    void setTickUtilization(double) -> setTickUtilization
    void setLeftoverTickTime(double) -> setLeftoverTickTime
    void setMemoryUse(long) -> setMemoryUse
    void setMemoryAllocated(long) -> setMemoryAllocated
    void setMemoryCollected(long) -> setMemoryCollected
    void setMahs(long) -> setMahs
    void setTotalChunks(int) -> setTotalChunks
    void setTotalEntities(int) -> setTotalEntities
    void setTotalDrops(int) -> setTotalDrops
    void setTotalTiles(int) -> setTotalTiles
    void setTotalLiving(int) -> setTotalLiving
    void setChunksLoaded(int) -> setChunksLoaded
    void setChunksUnloaded(int) -> setChunksUnloaded
    void setWorldMonitor(surge.server.WorldMonitor) -> setWorldMonitor
    void setTpsMonitor(surge.server.TPSMonitor) -> setTpsMonitor
    void setMemoryMonitor(surge.server.MemoryMonitor) -> setMemoryMonitor
    boolean isFrozen() -> isFrozen
    java.lang.StackTraceElement[] getLockStack() -> getLockStack
    react.glang.GMap getSpikes() -> getSpikes
    int access$002(surge.server.SuperSampler,int) -> access$002
    int access$102(surge.server.SuperSampler,int) -> access$102
    int access$202(surge.server.SuperSampler,int) -> access$202
    int access$302(surge.server.SuperSampler,int) -> access$302
    int access$402(surge.server.SuperSampler,int) -> access$402
    int access$502(surge.server.SuperSampler,int) -> access$502
    int access$602(surge.server.SuperSampler,int) -> access$602
    double access$702(surge.server.SuperSampler,double) -> access$702
    double access$802(surge.server.SuperSampler,double) -> access$802
    double access$700(surge.server.SuperSampler) -> access$700
    react.gmath.Average access$900(surge.server.SuperSampler) -> access$900
    double access$800(surge.server.SuperSampler) -> access$800
    react.gmath.Average access$1000(surge.server.SuperSampler) -> access$1000
    double access$1102(surge.server.SuperSampler,double) -> access$1102
    double access$1202(surge.server.SuperSampler,double) -> access$1202
    double access$1302(surge.server.SuperSampler,double) -> access$1302
    double access$1402(surge.server.SuperSampler,double) -> access$1402
    double access$1200(surge.server.SuperSampler) -> access$1200
    double access$1502(surge.server.SuperSampler,double) -> access$1502
    double access$1400(surge.server.SuperSampler) -> access$1400
    boolean access$1602(surge.server.SuperSampler,boolean) -> access$1602
    react.glang.GMap access$1700(surge.server.SuperSampler) -> access$1700
    long access$1802(surge.server.SuperSampler,long) -> access$1802
    long access$1902(surge.server.SuperSampler,long) -> access$1902
    long access$2002(surge.server.SuperSampler,long) -> access$2002
    react.gmath.Average access$2100(surge.server.SuperSampler) -> access$2100
    long access$2202(surge.server.SuperSampler,long) -> access$2202
    java.lang.Object bZ(java.lang.Object,java.lang.Object,java.lang.Object) -> bZ
surge.server.SuperSampler$1 -> org.cyberpwn.react.YWYW:
    surge.server.SuperSampler this$0 -> SyFA
    void <init>(surge.server.SuperSampler) -> <init>
    void updated(int,int,int,int,int,int,int) -> WGJb
    java.lang.Object IA(java.lang.Object,java.lang.Object,java.lang.Object) -> MdbO
surge.server.SuperSampler$2 -> org.cyberpwn.react.QFoj:
    surge.server.SuperSampler this$0 -> SyFA
    void <init>(surge.server.SuperSampler) -> <init>
    void onTicked() -> uFoT
    void onSpike() -> vIrU
    java.lang.Object Dj(java.lang.Object,java.lang.Object,java.lang.Object) -> yKMs
surge.server.SuperSampler$3 -> org.cyberpwn.react.rqae:
    surge.server.SuperSampler this$0 -> SyFA
    void <init>(surge.server.SuperSampler) -> <init>
    void onAllocationSet() -> onAllocationSet
    java.lang.Object AP(java.lang.Object,java.lang.Object,java.lang.Object) -> SDPf
surge.server.TPSMonitor -> org.cyberpwn.react.fTlu:
    double tickTimeMS -> JKgU
    double rawTicksPerSecond -> WRMW
    react.gbench.Profiler tickProfiler -> eIsP
    react.gbench.Profiler tickTimeProfiler -> EgLX
    boolean ticked -> vmhJ
    java.lang.Thread$State lastState -> WRNL
    double actualTickTimeMS -> Trvm
    double ltt -> tgaS
    long lastTick -> xGvG
    boolean frozen -> frozen
    java.lang.StackTraceElement[] lockedStack -> uari
    double lmsx -> IQUa
    void <init>() -> <init>
    void onTicked() -> uFoT
    void onSpike() -> vIrU
    void run() -> run
    void processState(java.lang.Thread$State) -> WGJb
    double getTickTimeMS() -> RQlT
    double getRawTicksPerSecond() -> gOHr
    react.gbench.Profiler getTickProfiler() -> rgxs
    boolean isTicked() -> bikk
    void markTick() -> iCkq
    react.gbench.Profiler getTickTimeProfiler() -> DYea
    java.lang.Thread$State getLastState() -> BeAK
    double getActualTickTimeMS() -> jOaA
    double getLtt() -> NxeL
    long getLastTick() -> XdFb
    boolean isFrozen() -> isFrozen
    java.lang.StackTraceElement[] getLockedStack() -> lgHq
    java.lang.Object Dv(java.lang.Object,java.lang.Object,java.lang.Object) -> bHLO
surge.server.WorldMonitor -> org.cyberpwn.react.Tiks:
    boolean chunksChanged -> BCor
    boolean dropChanged -> BDPq
    boolean tileChanged -> YPCa
    boolean livingChanged -> DAfI
    boolean totalChanged -> WALY
    boolean updated -> oiWS
    int totalChunks -> totalChunks
    int totalDrops -> totalDrops
    int totalTiles -> totalTiles
    int totalLiving -> totalLiving
    int totalEntities -> totalEntities
    int chunksLoaded -> chunksLoaded
    int chunksUnloaded -> chunksUnloaded
    long ms -> LjLj
    void <init>() -> <init>
    void run() -> run
    void updated(int,int,int,int,int,int,int) -> WGJb
    void on(org.bukkit.event.world.ChunkLoadEvent) -> dfal
    void on(org.bukkit.event.world.ChunkUnloadEvent) -> WGJb
    void on(org.bukkit.event.entity.EntitySpawnEvent) -> WGJb
    void on(org.bukkit.event.entity.EntityDeathEvent) -> WGJb
    void on(org.bukkit.event.player.PlayerDropItemEvent) -> WGJb
    void on(org.bukkit.event.player.PlayerPickupItemEvent) -> WGJb
    void on(org.bukkit.event.block.BlockPlaceEvent) -> WGJb
    void on(org.bukkit.event.block.BlockBreakEvent) -> WGJb
    void doUpdate() -> JlYK
    void sample() -> sample
    void sampleTotalCount() -> Cgcx
    void sampleLivingCount() -> bilU
    void sampleTileCount() -> afiV
    void sampleDropCount() -> VxJp
    void sampleChunkCount() -> LYLE
    java.lang.Object SY(java.lang.Object,java.lang.Object,java.lang.Object) -> TFrb
surge.server.hs -> org.cyberpwn.react.TGfw:
    java.lang.Object[] H -> kCOQ
    java.lang.Class[] e -> Eeed
    int[] W -> KOMi
    short[] s -> fDhu
    int Q -> Q
    int X -> X
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class K(int,int) -> DPSk
    java.lang.Class E(int) -> ndGa
    java.lang.reflect.Method m(int) -> aLYB
    java.lang.Object A(int,java.lang.Object[]) -> mOYk
    java.lang.Object Z(java.lang.Object,int,java.lang.Object[]) -> ePRm
    java.lang.Object e(int,java.lang.Object[]) -> PBWD
    java.lang.reflect.Field O(int) -> WiQc
    java.lang.Object E(java.lang.Object,int) -> ESVk
    void S(java.lang.Object,int,java.lang.Object) -> TqEp
    java.lang.Object T(int) -> kbkM
    void U(int,java.lang.Object) -> qtuv
surge.text.PhantomSpinner -> org.cyberpwn.react.xbRC:
    surge.text.ProgressSpinner s -> Wsrc
    surge.text.ProgressSpinner c -> VppC
    void <init>(surge.util.C,surge.util.C,surge.util.C) -> <init>
    java.lang.String toString() -> toString
    java.lang.Object ZU(java.lang.Object,java.lang.Object,java.lang.Object) -> SCon
surge.text.PhantomSpinner$ProgressSpinner -> org.cyberpwn.react.axaX:
    java.lang.Object[] c -> Hewq
    int q -> q
    java.math.BigInteger[] E -> NXBp
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void m(int,java.lang.Object) -> WXLP
    int h(int,int) -> vRCd
    int U(byte[],int) -> SCOM
    void J1893() -> pPpc
    void r() -> r
    java.lang.String T(java.lang.Object) -> EAwa
surge.text.ProgressSpinner -> org.cyberpwn.react.uYGu:
    java.lang.String[] chars -> WANq
    int index -> index
    surge.text.ProgressSpinner DEFAULT -> hJpD
    surge.text.ProgressSpinner NETWORK -> yesF
    surge.text.ProgressSpinner CIRCLES -> pSHX
    surge.text.ProgressSpinner RANDOMS -> NiYK
    surge.text.ProgressSpinner MERGERS -> gHMR
    void <init>(java.lang.String[]) -> <init>
    void <init>() -> <init>
    java.lang.String toString() -> toString
    java.lang.String[] getChars() -> AGjx
    int getIndex() -> getIndex
    void <clinit>() -> <clinit>
    java.lang.Object oB(java.lang.Object,java.lang.Object,java.lang.Object) -> TaFc
surge.text.ProgressSpinner$ProgressSpinner -> org.cyberpwn.react.etLe:
    java.lang.Object[] g -> RQlT
    int Z -> Z
    java.math.BigInteger[] D -> XSsI
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void z(int,java.lang.Object) -> wnWa
    int t(int,int) -> vRGF
    int B(byte[],int) -> qtuv
    void e27331() -> dxbS
    void V() -> APDY
    java.lang.String a(java.lang.Object) -> a
surge.text.u -> org.cyberpwn.react.AQSw:
    java.lang.Object[] Y -> Lavv
    java.lang.Class[] u -> XMBq
    int[] d -> FGPr
    short[] I -> GSIv
    int S -> S
    int e -> e
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class t(int,int) -> OXeW
    java.lang.Class X(int) -> hQNI
    java.lang.reflect.Method v(int) -> GbXW
    java.lang.Object i(int,java.lang.Object[]) -> Vmyy
    java.lang.Object I(java.lang.Object,int,java.lang.Object[]) -> xNwp
    java.lang.Object Z(int,java.lang.Object[]) -> XJNQ
    java.lang.reflect.Field r(int) -> rDyl
    java.lang.Object I(java.lang.Object,int) -> Vmyy
    void h(java.lang.Object,int,java.lang.Object) -> HvRk
    java.lang.Object M(int) -> FpWJ
    void F(int,java.lang.Object) -> UAEN
surge.tx -> org.cyberpwn.react.AHbo:
    java.lang.Object[] I -> iUpY
    int D -> D
    java.math.BigInteger[] T -> DQtJ
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void D(int,java.lang.Object) -> fcvC
    int n(int,int) -> owfy
    int M(byte[],int) -> wnWa
    void m21814() -> ghYv
    void q() -> q
    java.lang.String P(java.lang.Object) -> Vvlm
surge.util.Amounts -> org.cyberpwn.react.RRcN:
    surge.util.Amounts SINGLE -> MLcO
    surge.util.Amounts DUAL -> qEHy
    surge.util.Amounts TRI -> Metq
    surge.util.Amounts QUAD -> BoFf
    surge.util.Amounts HEX -> oiWD
    surge.util.Amounts OCTA -> iEaj
    int a -> a
    surge.util.Amounts[] $VALUES -> AlCa
    surge.util.Amounts[] values() -> values
    surge.util.Amounts valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int a() -> a
    java.lang.String to(int) -> sHbU
    void <clinit>() -> <clinit>
    java.lang.Object Xp(java.lang.Object,java.lang.Object,java.lang.Object) -> fnKC
surge.util.Anchor -> org.cyberpwn.react.NVvx:
    int value() -> value
surge.util.Area -> org.cyberpwn.react.QrCk:
    org.bukkit.Location location -> bAOD
    java.lang.Double radius -> mlBK
    boolean within(org.bukkit.Location,org.bukkit.Location,double) -> WGJb
    void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    surge.server.Cuboid toCuboid() -> PLFT
    void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    java.lang.Double distance(org.bukkit.Location) -> wnYS
    java.lang.Double slowDistance(org.bukkit.Location) -> SCOM
    boolean isWithin(org.bukkit.Location) -> SmbW
    boolean hasEntities() -> hasEntities
    org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> mOYk
    org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> WGJb
    org.bukkit.entity.Entity[] getNearbyEntities() -> gFWT
    org.bukkit.entity.Player[] getNearbyPlayers() -> TFoo
    org.bukkit.Location getLocation() -> getLocation
    void setLocation(org.bukkit.Location) -> setLocation
    java.lang.Double getRadius() -> URdW
    void setRadius(java.lang.Double) -> lTgP
    org.bukkit.Location random() -> BlqK
    java.lang.Object gL(java.lang.Object,java.lang.Object,java.lang.Object) -> xYLP
surge.util.Area$Blocks -> org.cyberpwn.react.dWVd:
    java.lang.Object[] i -> HEJG
    int q -> q
    java.math.BigInteger[] R -> uqqx
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void l(int,java.lang.Object) -> vQbs
    int l(int,int) -> SmbW
    int r(byte[],int) -> KejP
    void X13275() -> KEGl
    void k() -> k
    java.lang.String z(java.lang.Object) -> fcvC
surge.util.Axis -> org.cyberpwn.react.pRIK:
    surge.util.Axis X -> GCCC
    surge.util.Axis Y -> qgMB
    surge.util.Axis Z -> COgX
    int x -> x
    int y -> y
    int z -> z
    surge.util.Axis[] $VALUES -> lExu
    surge.util.Axis[] values() -> values
    surge.util.Axis valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int,int) -> <init>
    org.bukkit.util.Vector positive() -> uGNd
    org.bukkit.util.Vector negative() -> sQiU
    void <clinit>() -> <clinit>
    java.lang.Object bA(java.lang.Object,java.lang.Object,java.lang.Object) -> mHKU
surge.util.BlastResistance -> org.cyberpwn.react.fCji:
    surge.util.BlastResistance BARRIER -> OdIu
    surge.util.BlastResistance BEDROCK -> pkwm
    surge.util.BlastResistance COMMAND -> nerQ
    surge.util.BlastResistance ENDER_PORTAL -> QYNu
    surge.util.BlastResistance ENDER_PORTAL_FRAME -> YOco
    surge.util.BlastResistance ANVIL -> rjOO
    surge.util.BlastResistance ENCHANTMENT_TABLE -> sKOO
    surge.util.BlastResistance OBSIDIAN -> xbmx
    surge.util.BlastResistance ENDER_CHEST -> ExOj
    surge.util.BlastResistance WATER -> USxp
    surge.util.BlastResistance LAVA -> THfE
    surge.util.BlastResistance STATIONARY_WATER -> bAMi
    surge.util.BlastResistance DRAGON_EGG -> ffkc
    surge.util.BlastResistance ENDER_STONE -> yToV
    surge.util.BlastResistance COAL_BLOCK -> JnMb
    surge.util.BlastResistance DIAMOND_BLOCK -> nCoB
    surge.util.BlastResistance EMERALD_BLOCK -> kLHQ
    surge.util.BlastResistance GOLD_BLOCK -> Xerw
    surge.util.BlastResistance IRON_BLOCK -> pchD
    surge.util.BlastResistance REDSTONE_BLOCK -> WtRj
    surge.util.BlastResistance BRICK -> OIwV
    surge.util.BlastResistance BRICK_STAIRS -> BUWB
    surge.util.BlastResistance HARD_CLAY -> oWwA
    surge.util.BlastResistance STONE -> cUTq
    surge.util.BlastResistance SMOOTH_BRICK -> Mevd
    surge.util.BlastResistance SMOOTH_STAIRS -> yMDK
    surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> RCCW
    surge.util.BlastResistance STONE_SLAB2 -> VprG
    surge.util.BlastResistance IRON_DOOR -> RScq
    surge.util.BlastResistance IRON_DOOR_BLOCK -> qpAA
    surge.util.BlastResistance IRON_TRAPDOOR -> BDTf
    surge.util.BlastResistance MOB_SPAWNER -> hKSK
    surge.util.BlastResistance WEB -> rGnQ
    surge.util.BlastResistance DISPENSER -> FYSM
    surge.util.BlastResistance DROPPER -> Soxg
    surge.util.BlastResistance FURNACE -> gjSL
    surge.util.BlastResistance BURNING_FURNACE -> FYSL
    surge.util.BlastResistance BEACON -> uIGk
    surge.util.BlastResistance COAL_ORE -> kLLI
    surge.util.BlastResistance COCOA -> ExSP
    surge.util.BlastResistance DIAMOND_ORE -> iyIY
    surge.util.BlastResistance EMERALD_ORE -> xAOI
    surge.util.BlastResistance FENCE -> rjPy
    surge.util.BlastResistance FENCE_GATE -> sSam
    surge.util.BlastResistance ACACIA_FENCE_GATE -> nDQn
    surge.util.BlastResistance BIRCH_FENCE_GATE -> tWDv
    surge.util.BlastResistance DARK_OAK_FENCE_GATE -> HMuR
    surge.util.BlastResistance SPRUCE_FENCE_GATE -> MvwP
    surge.util.BlastResistance JUNGLE_FENCE_GATE -> sudR
    surge.util.BlastResistance ACACIA_FENCE -> tpVk
    surge.util.BlastResistance BIRCH_FENCE -> WlCo
    surge.util.BlastResistance DARK_OAK_FENCE -> WRPu
    surge.util.BlastResistance SPRUCE_FENCE -> hueP
    surge.util.BlastResistance JUNGLE_FENCE -> ARSv
    surge.util.BlastResistance ACACIA_WOOD_STAIRS -> rGlo
    surge.util.BlastResistance BIRCH_WOOD_STAIRS -> CPIm
    surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> BoIl
    surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> CrKl
    surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> ffmk
    surge.util.BlastResistance QUARTZ_STAIRS -> tEbQ
    surge.util.BlastResistance COBBLESTONE_STAIRS -> bQpY
    surge.util.BlastResistance SANDSTONE_STAIRS -> ffnG
    surge.util.BlastResistance NETHER_BRICK_STAIRS -> oiWf
    surge.util.BlastResistance WOOD_STAIRS -> jYgf
    surge.util.BlastResistance RED_SANDSTONE_STAIRS -> gYRp
    surge.util.BlastResistance ACACIA_DOOR -> LJEJ
    surge.util.BlastResistance BIRCH_DOOR -> tghi
    surge.util.BlastResistance DARK_OAK_DOOR -> NFxg
    surge.util.BlastResistance SPRUCE_DOOR -> hJtG
    surge.util.BlastResistance JUNGLE_DOOR -> nDUS
    surge.util.BlastResistance GOLD_ORE -> SyLs
    surge.util.BlastResistance HOPPER -> iWIU
    surge.util.BlastResistance IRON_ORE -> MLfv
    surge.util.BlastResistance LAPIS_BLOCK -> TkNc
    surge.util.BlastResistance LAPIS_ORE -> PxSv
    surge.util.BlastResistance QUARTZ_ORE -> Hgjw
    surge.util.BlastResistance REDSTONE_ORE -> BnjO
    surge.util.BlastResistance TRAP_DOOR -> AswV
    surge.util.BlastResistance WOOD -> TkNl
    surge.util.BlastResistance CHEST -> GCFc
    surge.util.BlastResistance TRAPPED_CHEST -> LJEa
    surge.util.BlastResistance WORKBENCH -> fDnE
    surge.util.BlastResistance CAULDRON -> euOs
    surge.util.BlastResistance LOG -> KGBe
    surge.util.BlastResistance LOG_2 -> UeaF
    surge.util.BlastResistance BOOKSHELF -> cUVw
    surge.util.BlastResistance BANNER -> GvJx
    surge.util.BlastResistance STANDING_BANNER -> QXrQ
    surge.util.BlastResistance WALL_BANNER -> RvIL
    surge.util.BlastResistance JACK_O_LANTERN -> xIaG
    surge.util.BlastResistance MELON_BLOCK -> cLeK
    surge.util.BlastResistance SKULL -> rjSV
    surge.util.BlastResistance PUMPKIN -> qELr
    surge.util.BlastResistance SIGN -> MTvY
    surge.util.BlastResistance SIGN_POST -> RCDc
    surge.util.BlastResistance WALL_SIGN -> fgQG
    surge.util.BlastResistance QUARTZ_BLOCK -> qfnf
    surge.util.BlastResistance NOTE_BLOCK -> hCBr
    surge.util.BlastResistance RED_SANDSTONE -> cewH
    surge.util.BlastResistance SANDSTONE -> RdgN
    surge.util.BlastResistance WOOL -> mJAq
    surge.util.BlastResistance MONSTER_EGG -> VWdP
    surge.util.BlastResistance RAILS -> ffqx
    surge.util.BlastResistance ACTIVATOR_RAIL -> rbFS
    surge.util.BlastResistance DETECTOR_RAIL -> RKWm
    surge.util.BlastResistance POWERED_RAIL -> AIem
    surge.util.BlastResistance CLAY -> yTvc
    surge.util.BlastResistance DIRT -> lhdI
    surge.util.BlastResistance GRASS -> OdQm
    surge.util.BlastResistance GRAVEL -> orMk
    surge.util.BlastResistance SPONGE -> rXro
    surge.util.BlastResistance BREWING_STAND -> NqpK
    surge.util.BlastResistance STONE_BUTTON -> EpFw
    surge.util.BlastResistance WOOD_BUTTON -> VWdY
    surge.util.BlastResistance CAKE_BLOCK -> pAjl
    surge.util.BlastResistance ICE -> xQsQ
    surge.util.BlastResistance PACKED_ICE -> KiEj
    surge.util.BlastResistance LEVER -> fxTS
    surge.util.BlastResistance MYCEL -> wXBV
    surge.util.BlastResistance PISTON_BASE -> NqnM
    surge.util.BlastResistance PISTON_EXTENSION -> fgRY
    surge.util.BlastResistance PISTON_MOVING_PIECE -> MCvl
    surge.util.BlastResistance PISTON_STICKY_BASE -> TYmW
    surge.util.BlastResistance GOLD_PLATE -> PpDs
    surge.util.BlastResistance IRON_PLATE -> AJHS
    surge.util.BlastResistance STONE_PLATE -> fUpC
    surge.util.BlastResistance WOOD_PLATE -> wqTR
    surge.util.BlastResistance SAND -> oWyT
    surge.util.BlastResistance SOUL_SAND -> AQwV
    surge.util.BlastResistance CACTUS -> cfYs
    surge.util.BlastResistance LADDER -> pcmi
    surge.util.BlastResistance NETHERRACK -> yLdt
    surge.util.BlastResistance GLASS -> JmsH
    surge.util.BlastResistance THIN_GLASS -> RvLC
    surge.util.BlastResistance STAINED_GLASS -> NaMt
    surge.util.BlastResistance STAINED_GLASS_PANE -> cDVf
    surge.util.BlastResistance GLOWSTONE -> mbxV
    surge.util.BlastResistance REDSTONE_LAMP_OFF -> IcCL
    surge.util.BlastResistance REDSTONE_LAMP_ON -> Wbxx
    surge.util.BlastResistance SEA_LANTERN -> OJaL
    surge.util.BlastResistance BED_BLOCK -> ujpM
    surge.util.BlastResistance DAYLIGHT_DETECTOR -> lFdA
    surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> OuTn
    surge.util.BlastResistance HUGE_MUSHROOM_1 -> JfFO
    surge.util.BlastResistance HUGE_MUSHROOM_2 -> UnUk
    surge.util.BlastResistance LEAVES -> XDYn
    surge.util.BlastResistance LEAVES_2 -> utCC
    surge.util.BlastResistance SNOW -> tFJp
    int br -> kCaH
    surge.util.BlastResistance[] $VALUES -> mQvU
    surge.util.BlastResistance[] values() -> values
    surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getBlastResistance() -> CNRG
    int get(org.bukkit.Material) -> lTgP
    void <clinit>() -> <clinit>
    java.lang.Object en(java.lang.Object,java.lang.Object,java.lang.Object) -> cubf
surge.util.BlockFinder -> org.cyberpwn.react.dOFv:
    void <init>() -> <init>
    boolean follow(org.bukkit.block.Block,react.glang.GList,react.glang.GList,int) -> WGJb
    boolean tail(surge.server.Cuboid,org.bukkit.block.Block,react.glang.GList,react.glang.GList,int) -> WGJb
    java.lang.Object rQ(java.lang.Object,java.lang.Object,java.lang.Object) -> vdGf
surge.util.Blocks -> org.cyberpwn.react.pRIT:
    void <init>() -> <init>
    org.bukkit.Location getCenter(org.bukkit.block.Block) -> SmbW
    java.lang.Object Lr(java.lang.Object,java.lang.Object,java.lang.Object) -> dhEU
surge.util.C -> org.cyberpwn.react.BTVi:
    surge.util.C BLACK -> BLACK
    surge.util.C DARK_BLUE -> DARK_BLUE
    surge.util.C DARK_GREEN -> DARK_GREEN
    surge.util.C DARK_AQUA -> DARK_AQUA
    surge.util.C DARK_RED -> DARK_RED
    surge.util.C DARK_PURPLE -> DARK_PURPLE
    surge.util.C GOLD -> GOLD
    surge.util.C GRAY -> GRAY
    surge.util.C DARK_GRAY -> DARK_GRAY
    surge.util.C BLUE -> BLUE
    surge.util.C GREEN -> GREEN
    surge.util.C AQUA -> AQUA
    surge.util.C RED -> RED
    surge.util.C LIGHT_PURPLE -> LIGHT_PURPLE
    surge.util.C YELLOW -> YELLOW
    surge.util.C WHITE -> WHITE
    surge.util.C MAGIC -> MAGIC
    surge.util.C BOLD -> BOLD
    surge.util.C STRIKETHROUGH -> STRIKETHROUGH
    surge.util.C UNDERLINE -> UNDERLINE
    surge.util.C ITALIC -> ITALIC
    surge.util.C RESET -> RESET
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> intCode
    char code -> code
    boolean isFormat -> isFormat
    java.lang.String toString -> toString
    java.util.Map BY_ID -> BY_ID
    java.util.Map BY_CHAR -> BY_CHAR
    java.util.Map dyeChatMap -> dyeChatMap
    java.util.Map chatHexMap -> chatHexMap
    java.util.Map dyeHexMap -> dyeHexMap
    surge.util.C[] $VALUES -> $VALUES
    surge.util.C[] values() -> values
    surge.util.C valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,char,int) -> <init>
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    char getChar() -> getChar
    java.lang.String toString() -> toString
    org.bukkit.DyeColor dye() -> dye
    java.lang.String hex() -> hex
    boolean isFormat() -> isFormat
    boolean isColor() -> isColor
    surge.util.C getByChar(char) -> getByChar
    surge.util.C getByChar(java.lang.String) -> getByChar
    java.lang.String stripColor(java.lang.String) -> stripColor
    surge.util.C dyeToChat(org.bukkit.DyeColor) -> dyeToChat
    org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> chatToDye
    java.lang.String chatToHex(org.bukkit.ChatColor) -> chatToHex
    java.lang.String dyeToHex(org.bukkit.DyeColor) -> dyeToHex
    org.bukkit.Color hexToColor(java.lang.String) -> hexToColor
    org.bukkit.Color rgbToColor(java.lang.String) -> rgbToColor
    java.lang.String generateColorTable() -> generateColorTable
    org.bukkit.ChatColor chatColor() -> chatColor
    java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    surge.util.C fromItemMeta(byte) -> fromItemMeta
    byte getItemMeta() -> getItemMeta
    java.lang.String getLastColors(java.lang.String) -> getLastColors
    void <init>(java.lang.String,int,char,int,surge.util.C$1) -> <init>
    void <init>(java.lang.String,int,char,int,boolean,surge.util.C$1) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object qi(java.lang.Object,java.lang.Object,java.lang.Object) -> qi
surge.util.C$1 -> org.cyberpwn.react.pskR:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$10 -> org.cyberpwn.react.ptLR:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$11 -> org.cyberpwn.react.uGhl:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$12 -> org.cyberpwn.react.sIsQ:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$13 -> org.cyberpwn.react.scfJ:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$14 -> org.cyberpwn.react.Arwc:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$15 -> org.cyberpwn.react.OtQO:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$16 -> org.cyberpwn.react.fUPH:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$17 -> org.cyberpwn.react.skuy:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$18 -> org.cyberpwn.react.rXSI:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$19 -> org.cyberpwn.react.DROL:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$2 -> org.cyberpwn.react.brvH:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$20 -> org.cyberpwn.react.FPDf:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$21 -> org.cyberpwn.react.nKfF:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$22 -> org.cyberpwn.react.RlYG:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$23 -> org.cyberpwn.react.gGPp:
    int[] $SwitchMap$surge$util$C -> bQwc
    void <clinit>() -> <clinit>
    java.lang.Object vH(java.lang.Object,java.lang.Object,java.lang.Object) -> GQoa
surge.util.C$3 -> org.cyberpwn.react.COJn:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$4 -> org.cyberpwn.react.IGjy:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$5 -> org.cyberpwn.react.EndI:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$6 -> org.cyberpwn.react.EMBJ:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$7 -> org.cyberpwn.react.jOxt:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$8 -> org.cyberpwn.react.cuyd:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$9 -> org.cyberpwn.react.hthA:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.CDou -> org.cyberpwn.react.MSxD:
    double number -> number
    double max -> max
    void <init>(double) -> <init>
    surge.util.CDou set(double) -> set
    surge.util.CDou add(double) -> add
    surge.util.CDou sub(double) -> sub
    double get() -> get
    void circ() -> circ
    java.lang.Object Zs(java.lang.Object,java.lang.Object,java.lang.Object) -> Zs
surge.util.CMD -> org.cyberpwn.react.gGRK:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> fpGC
    void <init>(java.lang.String) -> <init>
    surge.util.CMD virtual() -> fBsG
    void execute(org.bukkit.command.CommandSender) -> lTgP
    void execute() -> execute
    java.lang.Object Ef(java.lang.Object,java.lang.Object,java.lang.Object) -> XJfJ
surge.util.CNum -> org.cyberpwn.react.QFrP:
    int number -> number
    int max -> max
    void <init>(int) -> <init>
    surge.util.CNum set(int) -> PlrO
    surge.util.CNum add(int) -> oEGC
    surge.util.CNum sub(int) -> kAJi
    int get() -> get
    void circ() -> circ
    int getMax() -> getMax
    void setMax(int) -> jgyq
    java.lang.Object cj(java.lang.Object,java.lang.Object,java.lang.Object) -> Ihvt
surge.util.Chunks -> org.cyberpwn.react.uXig:
    void <init>() -> <init>
    react.glang.GList getLoadedChunks(org.bukkit.World) -> qcup
    react.glang.GList getLoadedChunks() -> MdbO
    react.glang.GList getRadius(org.bukkit.Chunk,int) -> dfal
    boolean unload(org.bukkit.Chunk,boolean,boolean) -> WGJb
    boolean unload(org.bukkit.Chunk,boolean) -> WGJb
    boolean unload(org.bukkit.Chunk) -> OYFP
    int unload(react.glang.GList,boolean,boolean) -> WGJb
    int unload(react.glang.GList,boolean) -> WGJb
    int unload(react.glang.GList) -> OYFP
    boolean isLoaded(java.lang.String,int,int) -> WGJb
    boolean isLoaded(org.bukkit.World,int,int) -> lTgP
    void load(react.glang.GList) -> UAEN
    java.lang.Object AZ(java.lang.Object,java.lang.Object,java.lang.Object) -> CNTh
surge.util.CuboidException -> org.cyberpwn.react.hReB:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
surge.util.D -> org.cyberpwn.react.PMBB:
    react.glang.GList buffer -> ecrM
    boolean dbg -> qDpi
    int kf -> vvcr
    react.glang.Callback scall -> TsdD
    void <init>() -> <init>
    void flush() -> flush
    void log(java.lang.String,java.lang.String) -> log
    void l(java.lang.Object,java.lang.String) -> dfal
    void s(java.lang.Object,java.lang.String) -> lTgP
    void cdb() -> yKMs
    void v(java.lang.Object,java.lang.String) -> KejP
    void w(java.lang.Object,java.lang.String) -> mOYk
    void f(java.lang.Object,java.lang.String) -> wnYS
    void l(java.lang.String) -> Vvlm
    void s(java.lang.String) -> eqwO
    void v(java.lang.String) -> qlil
    void w(java.lang.String) -> vRGF
    void f(java.lang.String) -> xiNT
    void <clinit>() -> <clinit>
    java.lang.Object Kq(java.lang.Object,java.lang.Object,java.lang.Object) -> qLFa
surge.util.DMSRequire -> org.cyberpwn.react.FiVl:
    surge.util.DMSRequirement value() -> SDPf
surge.util.DMSRequirement -> org.cyberpwn.react.RuKG:
    surge.util.DMSRequirement SQL -> YiaD
    surge.util.DMSRequirement[] $VALUES -> jtBc
    surge.util.DMSRequirement[] values() -> values
    surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object Kt(java.lang.Object,java.lang.Object,java.lang.Object) -> TxvW
surge.util.Depend -> org.cyberpwn.react.xbTK:
    surge.util.Depend VAULT -> DBPV
    surge.util.Depend FAWE -> gXvQ
    surge.util.Depend WORLDEDIT -> xsyB
    surge.util.Depend PROTOLIB -> DRsB
    surge.util.Depend CITIZENS -> GKYV
    java.lang.String name -> name
    surge.util.Depend[] $VALUES -> bkhk
    surge.util.Depend[] values() -> values
    surge.util.Depend valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    boolean exists() -> exists
    void <clinit>() -> <clinit>
    java.lang.Object wq(java.lang.Object,java.lang.Object,java.lang.Object) -> wLmu
surge.util.Dimension -> org.cyberpwn.react.HEJG:
    int width -> width
    int height -> height
    int depth -> depth
    void <init>(int,int,int) -> <init>
    void <init>(int,int) -> <init>
    surge.util.DimensionFace getPane() -> bHLO
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getDepth() -> getDepth
surge.util.DimensionFace -> org.cyberpwn.react.FhvR:
    surge.util.DimensionFace X -> wyfX
    surge.util.DimensionFace Y -> aqWU
    surge.util.DimensionFace Z -> xkhP
    surge.util.DimensionFace[] $VALUES -> xJEd
    surge.util.DimensionFace[] values() -> values
    surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object rT(java.lang.Object,java.lang.Object,java.lang.Object) -> Smwi
surge.util.Direction -> org.cyberpwn.react.txJo:
    surge.util.Direction U -> TYoY
    surge.util.Direction D -> Kyhb
    surge.util.Direction N -> CqqN
    surge.util.Direction S -> Mnls
    surge.util.Direction E -> Wsyb
    surge.util.Direction W -> OuTV
    int x -> x
    int y -> y
    int z -> z
    surge.server.Cuboid$CuboidDirection f -> IbaW
    surge.util.Direction[] $VALUES -> wGBU
    surge.util.Direction[] values() -> values
    surge.util.Direction valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int,int,surge.server.Cuboid$CuboidDirection) -> <init>
    surge.util.Direction reverse() -> TFrb
    int x() -> SCon
    int y() -> TaFc
    int z() -> z
    surge.server.Cuboid$CuboidDirection f() -> fnKC
    react.glang.GList news() -> xYLP
    react.glang.GList udnews() -> mHKU
    surge.util.Direction facing(org.bukkit.entity.Player) -> vRCd
    surge.util.Direction fromByte(byte) -> VDGt
    byte byteValue() -> byteValue
    void <clinit>() -> <clinit>
    java.lang.Object Dk(java.lang.Object,java.lang.Object,java.lang.Object) -> LHLQ
surge.util.Direction$1 -> org.cyberpwn.react.TOyd:
    int[] $SwitchMap$surge$util$Direction -> fgUL
    void <clinit>() -> <clinit>
    java.lang.Object An(java.lang.Object,java.lang.Object,java.lang.Object) -> HerU
surge.util.DynamicConfiguration -> org.cyberpwn.react.OsoR:
surge.util.DynamicTracker -> org.cyberpwn.react.QhtA:
surge.util.Embedded -> org.cyberpwn.react.ghre:
    react.glang.GList get() -> cubf
    void add(java.lang.Object) -> add
surge.util.FU -> org.cyberpwn.react.SUhF:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    void <init>() -> <init>
    java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    void touch(java.io.File) -> touch
    java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    java.io.File toFile(java.net.URL) -> toFile
    java.io.File[] toFiles(java.net.URL[]) -> toFiles
    java.net.URL[] toURLs(java.io.File[]) -> toURLs
    void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    void copyFile(java.io.File,java.io.File) -> copyFile
    void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    void doCopyFile(java.io.File,java.io.File,boolean) -> WGJb
    void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    void doCopyDirectory(java.io.File,java.io.File,boolean) -> dfal
    void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    void deleteDirectory(java.io.File) -> deleteDirectory
    void cleanDirectory(java.io.File) -> cleanDirectory
    boolean waitFor(java.io.File,int) -> waitFor
    java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    java.util.List readLines(java.io.File,java.lang.String) -> readLines
    void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    void forceDelete(java.io.File) -> forceDelete
    void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    void deleteDirectoryOnExit(java.io.File) -> KejP
    void cleanDirectoryOnExit(java.io.File) -> mOYk
    void forceMkdir(java.io.File) -> forceMkdir
    long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    boolean isFileNewer(java.io.File,long) -> isFileNewer
    void <clinit>() -> <clinit>
    java.lang.Object xJ(java.lang.Object,java.lang.Object,java.lang.Object) -> HClm
surge.util.Fingerprint -> org.cyberpwn.react.Npkv:
    void <init>() -> <init>
    java.lang.String randomFingerprint(java.lang.String) -> MlSj
    java.lang.Object pB(java.lang.Object,java.lang.Object,java.lang.Object) -> quxe
surge.util.Health -> org.cyberpwn.react.nCSx:
    double hp -> NPOK
    void <init>(double) -> <init>
    int getFlatHearts() -> vdGf
    double getHearts() -> dhEU
    double getHalfHearts() -> GQoa
    int getFlatHalfHearts() -> Ihvt
surge.util.IO -> org.cyberpwn.react.IGis:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    void <init>() -> <init>
    void closeQuietly(java.io.Reader) -> closeQuietly
    void closeQuietly(java.io.Writer) -> closeQuietly
    void closeQuietly(java.io.InputStream) -> closeQuietly
    void closeQuietly(java.io.OutputStream) -> closeQuietly
    byte[] toByteArray(java.io.InputStream) -> toByteArray
    byte[] toByteArray(java.io.Reader) -> toByteArray
    byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    byte[] toByteArray(java.lang.String) -> toByteArray
    char[] toCharArray(java.io.InputStream) -> toCharArray
    char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    char[] toCharArray(java.io.Reader) -> toCharArray
    java.lang.String toString(java.io.InputStream) -> toString
    java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    java.lang.String toString(java.io.Reader) -> toString
    java.lang.String toString(byte[]) -> toString
    java.lang.String toString(byte[],java.lang.String) -> toString
    java.util.List readLines(java.io.InputStream) -> readLines
    java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    java.util.List readLines(java.io.Reader) -> readLines
    java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    void write(byte[],java.io.OutputStream) -> write
    void write(byte[],java.io.Writer) -> write
    void write(byte[],java.io.Writer,java.lang.String) -> write
    void write(char[],java.io.Writer) -> write
    void write(char[],java.io.OutputStream) -> write
    void write(char[],java.io.OutputStream,java.lang.String) -> write
    void write(java.lang.String,java.io.Writer) -> write
    void write(java.lang.String,java.io.OutputStream) -> write
    void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    void write(java.lang.StringBuffer,java.io.Writer) -> write
    void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    int copy(java.io.InputStream,java.io.OutputStream) -> copy
    long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    void copy(java.io.InputStream,java.io.Writer) -> copy
    void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    int copy(java.io.Reader,java.io.Writer) -> copy
    long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    void copy(java.io.Reader,java.io.OutputStream) -> copy
    void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
    void <clinit>() -> <clinit>
    java.lang.Object YX(java.lang.Object,java.lang.Object,java.lang.Object) -> MeAi
surge.util.Items -> org.cyberpwn.react.PwSY:
    void <init>() -> <init>
    boolean is(org.bukkit.inventory.ItemStack) -> KejP
    boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> WGJb
    boolean is(org.bukkit.inventory.ItemStack,surge.util.MaterialBlock) -> WGJb
    boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> WGJb
    boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> WGJb
    boolean hasMeta(org.bukkit.inventory.ItemStack) -> mOYk
    boolean hasName(org.bukkit.inventory.ItemStack) -> wnYS
    boolean hasLore(org.bukkit.inventory.ItemStack) -> SCOM
    boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> WGJb
    boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> WGJb
    boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> WGJb
    boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> WGJb
    boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> SmbW
    surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> ePRm
    boolean isBroken(org.bukkit.inventory.ItemStack) -> CgEJ
    boolean hasDurability(org.bukkit.inventory.ItemStack) -> nJMP
    double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> WXLP
    void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> WGJb
    short getMaxDurability(org.bukkit.inventory.ItemStack) -> bWiv
    short getDurability(org.bukkit.inventory.ItemStack) -> TqEp
    void setDurability(org.bukkit.inventory.ItemStack,short) -> WGJb
    void setDurability(org.bukkit.inventory.ItemStack,int) -> WGJb
    void damage(org.bukkit.inventory.ItemStack,int) -> dfal
    boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> WGJb
    java.lang.Object jq(java.lang.Object,java.lang.Object,java.lang.Object) -> qJgc
surge.util.MSound -> org.cyberpwn.react.DANC:
    surge.util.MSound AMBIENCE_CAVE -> iWKg
    surge.util.MSound AMBIENCE_RAIN -> FbLP
    surge.util.MSound AMBIENCE_THUNDER -> coOo
    surge.util.MSound ANVIL_BREAK -> sKYq
    surge.util.MSound ANVIL_LAND -> SxrM
    surge.util.MSound ANVIL_USE -> Pohx
    surge.util.MSound ARROW_HIT -> YrTA
    surge.util.MSound BURP -> gbJl
    surge.util.MSound CHEST_CLOSE -> kUEW
    surge.util.MSound CHEST_OPEN -> jkRs
    surge.util.MSound CLICK -> TIRP
    surge.util.MSound DOOR_CLOSE -> LIjb
    surge.util.MSound DOOR_OPEN -> riyP
    surge.util.MSound DRINK -> aFev
    surge.util.MSound EAT -> mQyD
    surge.util.MSound EXPLODE -> aXHc
    surge.util.MSound FALL_BIG -> hTLO
    surge.util.MSound FALL_SMALL -> KNvV
    surge.util.MSound FIRE -> HhPp
    surge.util.MSound FIRE_IGNITE -> LJJL
    surge.util.MSound FIZZ -> GCKS
    surge.util.MSound FUSE -> eRpi
    surge.util.MSound GLASS -> sBgv
    surge.util.MSound HURT_FLESH -> VXHI
    surge.util.MSound ITEM_BREAK -> aqYJ
    surge.util.MSound ITEM_PICKUP -> OKCO
    surge.util.MSound LAVA -> PpHp
    surge.util.MSound LAVA_POP -> DmFk
    surge.util.MSound LEVEL_UP -> sTKD
    surge.util.MSound MINECART_BASE -> AknR
    surge.util.MSound MINECART_INSIDE -> Vhhp
    surge.util.MSound NOTE_BASS -> utBg
    surge.util.MSound NOTE_PIANO -> fNDy
    surge.util.MSound NOTE_BASS_DRUM -> Vyja
    surge.util.MSound NOTE_STICKS -> DAsB
    surge.util.MSound NOTE_BASS_GUITAR -> jcAj
    surge.util.MSound NOTE_SNARE_DRUM -> SgpL
    surge.util.MSound NOTE_PLING -> daPg
    surge.util.MSound ORB_PICKUP -> Sgot
    surge.util.MSound PISTON_EXTEND -> VOVt
    surge.util.MSound PISTON_RETRACT -> MxAq
    surge.util.MSound PORTAL -> VGFl
    surge.util.MSound PORTAL_TRAVEL -> JeiP
    surge.util.MSound PORTAL_TRIGGER -> JDFl
    surge.util.MSound SHOOT_ARROW -> Olgy
    surge.util.MSound SPLASH -> euWl
    surge.util.MSound SPLASH2 -> huqA
    surge.util.MSound STEP_GRASS -> hdno
    surge.util.MSound STEP_GRAVEL -> YjEX
    surge.util.MSound STEP_LADDER -> BnrW
    surge.util.MSound STEP_SAND -> jHrR
    surge.util.MSound STEP_SNOW -> MxEP
    surge.util.MSound STEP_STONE -> EpMW
    surge.util.MSound STEP_WOOD -> RBlo
    surge.util.MSound STEP_WOOL -> mAYi
    surge.util.MSound SWIM -> pRsS
    surge.util.MSound WATER -> hvPk
    surge.util.MSound WOOD_CLICK -> aiLY
    surge.util.MSound BAT_DEATH -> jbdW
    surge.util.MSound BAT_HURT -> gPik
    surge.util.MSound BAT_IDLE -> sBjd
    surge.util.MSound BAT_LOOP -> pctk
    surge.util.MSound BAT_TAKEOFF -> RvSH
    surge.util.MSound BLAZE_BREATH -> OcvC
    surge.util.MSound BLAZE_DEATH -> kvhS
    surge.util.MSound BLAZE_HIT -> jHqH
    surge.util.MSound CAT_HISS -> wFei
    surge.util.MSound CAT_HIT -> drUF
    surge.util.MSound CAT_MEOW -> vwHJ
    surge.util.MSound CAT_PURR -> YrUY
    surge.util.MSound CAT_PURREOW -> UCeU
    surge.util.MSound CHICKEN_IDLE -> xQyN
    surge.util.MSound CHICKEN_HURT -> UDEp
    surge.util.MSound CHICKEN_EGG_POP -> rbKC
    surge.util.MSound CHICKEN_WALK -> ORti
    surge.util.MSound COW_IDLE -> JfIj
    surge.util.MSound COW_HURT -> dHDO
    surge.util.MSound COW_WALK -> pAsr
    surge.util.MSound CREEPER_HISS -> iFQi
    surge.util.MSound CREEPER_DEATH -> GCPX
    surge.util.MSound ENDERDRAGON_DEATH -> mtaO
    surge.util.MSound ENDERDRAGON_GROWL -> XgDc
    surge.util.MSound ENDERDRAGON_HIT -> lGKK
    surge.util.MSound ENDERDRAGON_WINGS -> WdAT
    surge.util.MSound ENDERMAN_DEATH -> YaUp
    surge.util.MSound ENDERMAN_HIT -> HODh
    surge.util.MSound ENDERMAN_IDLE -> cLpL
    surge.util.MSound ENDERMAN_TELEPORT -> vnYh
    surge.util.MSound ENDERMAN_SCREAM -> fNJa
    surge.util.MSound ENDERMAN_STARE -> JKyK
    surge.util.MSound GHAST_SCREAM -> GTRU
    surge.util.MSound GHAST_SCREAM2 -> sTOT
    surge.util.MSound GHAST_CHARGE -> MDbB
    surge.util.MSound GHAST_DEATH -> NOuE
    surge.util.MSound GHAST_FIREBALL -> RCPR
    surge.util.MSound GHAST_MOAN -> Yifr
    surge.util.MSound IRONGOLEM_DEATH -> OSXs
    surge.util.MSound IRONGOLEM_HIT -> SNdC
    surge.util.MSound IRONGOLEM_THROW -> MDae
    surge.util.MSound IRONGOLEM_WALK -> hvQt
    surge.util.MSound MAGMACUBE_WALK -> heQE
    surge.util.MSound MAGMACUBE_WALK2 -> drVR
    surge.util.MSound MAGMACUBE_JUMP -> ShUO
    surge.util.MSound PIG_IDLE -> LtbI
    surge.util.MSound PIG_DEATH -> pKFE
    surge.util.MSound PIG_WALK -> MxFO
    surge.util.MSound SHEEP_IDLE -> lNwx
    surge.util.MSound SHEEP_SHEAR -> txsT
    surge.util.MSound SHEEP_WALK -> kwJe
    surge.util.MSound SILVERFISH_HIT -> vUGK
    surge.util.MSound SILVERFISH_KILL -> vviK
    surge.util.MSound SILVERFISH_IDLE -> aymm
    surge.util.MSound SILVERFISH_WALK -> NHDh
    surge.util.MSound SKELETON_IDLE -> fMhT
    surge.util.MSound SKELETON_DEATH -> aiMX
    surge.util.MSound SKELETON_HURT -> BECA
    surge.util.MSound SKELETON_WALK -> TskQ
    surge.util.MSound SLIME_ATTACK -> rQOF
    surge.util.MSound SLIME_WALK -> Wtcs
    surge.util.MSound SLIME_WALK2 -> HVum
    surge.util.MSound SPIDER_IDLE -> XDcC
    surge.util.MSound SPIDER_DEATH -> yEBU
    surge.util.MSound SPIDER_WALK -> iOEX
    surge.util.MSound WITHER_DEATH -> CPXA
    surge.util.MSound WITHER_HURT -> bkql
    surge.util.MSound WITHER_IDLE -> Uvne
    surge.util.MSound WITHER_SHOOT -> RmfI
    surge.util.MSound WITHER_SPAWN -> OKJm
    surge.util.MSound WOLF_BARK -> nMSC
    surge.util.MSound WOLF_DEATH -> bkqW
    surge.util.MSound WOLF_GROWL -> HqIC
    surge.util.MSound WOLF_HOWL -> TRHP
    surge.util.MSound WOLF_HURT -> VWmU
    surge.util.MSound WOLF_PANT -> HNda
    surge.util.MSound WOLF_SHAKE -> JDJP
    surge.util.MSound WOLF_WALK -> kejj
    surge.util.MSound WOLF_WHINE -> ShWP
    surge.util.MSound ZOMBIE_METAL -> KWnQ
    surge.util.MSound ZOMBIE_WOOD -> nVCY
    surge.util.MSound ZOMBIE_WOODBREAK -> Hxws
    surge.util.MSound ZOMBIE_IDLE -> HOFS
    surge.util.MSound ZOMBIE_DEATH -> aWlp
    surge.util.MSound ZOMBIE_HURT -> pJjF
    surge.util.MSound ZOMBIE_INFECT -> CYKQ
    surge.util.MSound ZOMBIE_UNFECT -> uQha
    surge.util.MSound ZOMBIE_REMEDY -> blUS
    surge.util.MSound ZOMBIE_WALK -> RnHY
    surge.util.MSound ZOMBIE_PIG_IDLE -> dXhV
    surge.util.MSound ZOMBIE_PIG_ANGRY -> LtgI
    surge.util.MSound ZOMBIE_PIG_DEATH -> CjMV
    surge.util.MSound ZOMBIE_PIG_HURT -> WuGc
    surge.util.MSound DIG_WOOL -> ixyL
    surge.util.MSound DIG_GRASS -> qMlW
    surge.util.MSound DIG_GRAVEL -> blUc
    surge.util.MSound DIG_SAND -> CGgk
    surge.util.MSound DIG_SNOW -> vKyr
    surge.util.MSound DIG_STONE -> yMTF
    surge.util.MSound DIG_WOOD -> HOIa
    surge.util.MSound FIREWORK_BLAST -> BUhS
    surge.util.MSound FIREWORK_BLAST2 -> OmNW
    surge.util.MSound FIREWORK_LARGE_BLAST -> uIWU
    surge.util.MSound FIREWORK_LARGE_BLAST2 -> Fjci
    surge.util.MSound FIREWORK_TWINKLE -> tyXp
    surge.util.MSound FIREWORK_TWINKLE2 -> cVDs
    surge.util.MSound FIREWORK_LAUNCH -> OmMy
    surge.util.MSound SUCCESSFUL_HIT -> IHyG
    surge.util.MSound HORSE_ANGRY -> GLDo
    surge.util.MSound HORSE_ARMOR -> OmOG
    surge.util.MSound HORSE_BREATHE -> Kqbs
    surge.util.MSound HORSE_DEATH -> SOGg
    surge.util.MSound HORSE_GALLOP -> oXff
    surge.util.MSound HORSE_HIT -> lqaE
    surge.util.MSound HORSE_IDLE -> yoVC
    surge.util.MSound HORSE_JUMP -> GSuE
    surge.util.MSound HORSE_LAND -> SqKF
    surge.util.MSound HORSE_SADDLE -> lPBP
    surge.util.MSound HORSE_SOFT -> RBtk
    surge.util.MSound HORSE_WOOD -> FQUJ
    surge.util.MSound DONKEY_ANGRY -> fMnu
    surge.util.MSound DONKEY_DEATH -> tWYM
    surge.util.MSound DONKEY_HIT -> EhEF
    surge.util.MSound DONKEY_IDLE -> vTnC
    surge.util.MSound HORSE_SKELETON_DEATH -> JncC
    surge.util.MSound HORSE_SKELETON_HIT -> cnyR
    surge.util.MSound HORSE_SKELETON_IDLE -> dHJJ
    surge.util.MSound HORSE_ZOMBIE_DEATH -> LuIi
    surge.util.MSound HORSE_ZOMBIE_HIT -> XxLR
    surge.util.MSound HORSE_ZOMBIE_IDLE -> keoW
    surge.util.MSound VILLAGER_DEATH -> gYcT
    surge.util.MSound VILLAGER_HAGGLE -> VWsM
    surge.util.MSound VILLAGER_HIT -> aiUK
    surge.util.MSound VILLAGER_IDLE -> BfjP
    surge.util.MSound VILLAGER_NO -> WRfI
    surge.util.MSound VILLAGER_YES -> Mfjd
    java.lang.String pre19sound -> JoDS
    java.lang.String post19sound -> gsUp
    org.bukkit.Sound resolvedSound -> ahsb
    surge.util.MSound[] $VALUES -> LuIx
    surge.util.MSound[] values() -> values
    surge.util.MSound valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    org.bukkit.Sound bukkitSound() -> CNTh
    void <clinit>() -> <clinit>
    java.lang.Object iR(java.lang.Object,java.lang.Object,java.lang.Object) -> EucO
surge.util.MaterialBlock -> org.cyberpwn.react.GBDu:
    org.bukkit.Material material -> material
    java.lang.Byte data -> data
    void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    void <init>(org.bukkit.Material) -> <init>
    void <init>(org.bukkit.Location) -> <init>
    void <init>(org.bukkit.block.BlockState) -> <init>
    void <init>(org.bukkit.block.Block) -> <init>
    void <init>() -> <init>
    org.bukkit.Material getMaterial() -> getMaterial
    void setMaterial(org.bukkit.Material) -> setMaterial
    java.lang.Byte getData() -> getData
    void setData(java.lang.Byte) -> setData
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object HE(java.lang.Object,java.lang.Object,java.lang.Object) -> HE
surge.util.P -> org.cyberpwn.react.yStB:
    void <init>() -> <init>
    boolean isWithinViewDistance(org.bukkit.entity.Player,org.bukkit.Chunk) -> WGJb
    boolean isWithinViewDistance(org.bukkit.Chunk) -> UAEN
    boolean isOnline(java.lang.String) -> IWUw
    org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    org.bukkit.entity.Player getAnyPlayer() -> qLFa
    boolean isAnyOnline() -> LHLQ
    react.glang.GList inWorld(org.bukkit.World) -> PBWD
    react.glang.GList inChunk(org.bukkit.Chunk) -> VDGt
    react.glang.GList inArea(org.bukkit.Location,double) -> WGJb
    react.glang.GList inArea(org.bukkit.Location,int) -> WGJb
    void disable(org.bukkit.entity.Player) -> FpMO
    void enable(org.bukkit.entity.Player) -> qtuv
    org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> WGJb
    org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> dfal
    boolean hasInventoryOpen(org.bukkit.entity.Player) -> EBVK
    org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> WGJb
    int getTotalExperience(org.bukkit.entity.Player) -> EdXk
    void setTotalExperience(org.bukkit.entity.Player,int) -> lTgP
    boolean canFindPlayer(java.lang.String) -> kYvI
    org.bukkit.entity.Player findPlayer(java.lang.String) -> xhmI
    react.glang.GList onlinePlayers() -> HerU
    org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> gpKE
    void clear(org.bukkit.entity.Player) -> LiMa
    void clearEffects(org.bukkit.entity.Player) -> wnWa
    void heal(org.bukkit.entity.Player,double) -> WGJb
    void heal(org.bukkit.entity.Player) -> lTeb
    void resetMaxHeath(org.bukkit.entity.Player) -> QpMH
    void resetHunger(org.bukkit.entity.Player) -> sQMd
    void kill(org.bukkit.entity.Player) -> RkAo
    surge.util.Shape getShape(org.bukkit.entity.Player) -> EAwa
    org.bukkit.Location getHand(org.bukkit.entity.Player) -> NECO
    org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> WGJb
    java.lang.Object iw(java.lang.Object,java.lang.Object,java.lang.Object) -> BeCv
surge.util.P$1 -> org.cyberpwn.react.rqcI:
    void <init>() -> <init>
    org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> nJMP
    java.lang.Object onAdapt(java.lang.Object) -> Vmyy
    java.lang.Object CX(java.lang.Object,java.lang.Object,java.lang.Object) -> Drww
surge.util.P$2 -> org.cyberpwn.react.dFXS:
    java.lang.Double val$doff -> OvBv
    org.bukkit.entity.Player val$e -> RnKG
    org.bukkit.entity.Entity[] val$result -> xJQu
    void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    void onTrace(org.bukkit.Location) -> ePRm
    java.lang.Object LS(java.lang.Object,java.lang.Object,java.lang.Object) -> QqMv
surge.util.PE -> org.cyberpwn.react.riSB:
    surge.util.PE ABSORPTION -> ABSORPTION
    surge.util.PE BLINDNESS -> BLINDNESS
    surge.util.PE CONFUSION -> CONFUSION
    surge.util.PE DAMAGE_RESISTANCE -> DAMAGE_RESISTANCE
    surge.util.PE FAST_DIGGING -> FAST_DIGGING
    surge.util.PE FIRE_RESISTANCE -> FIRE_RESISTANCE
    surge.util.PE GLOWING -> GLOWING
    surge.util.PE HARM -> HARM
    surge.util.PE HEAL -> HEAL
    surge.util.PE HEALTH_BOOST -> HEALTH_BOOST
    surge.util.PE HUNGER -> HUNGER
    surge.util.PE INCREASE_DAMAGE -> INCREASE_DAMAGE
    surge.util.PE INVISIBILITY -> INVISIBILITY
    surge.util.PE JUMP -> JUMP
    surge.util.PE LEVITATION -> LEVITATION
    surge.util.PE LUCK -> LUCK
    surge.util.PE NIGHT_VISION -> NIGHT_VISION
    surge.util.PE POISON -> POISON
    surge.util.PE REGENERATION -> REGENERATION
    surge.util.PE SATURATION -> SATURATION
    surge.util.PE SLOW -> SLOW
    surge.util.PE SLOW_DIGGING -> SLOW_DIGGING
    surge.util.PE SPEED -> SPEED
    surge.util.PE UNLUCK -> UNLUCK
    surge.util.PE WATER_BREATHING -> WATER_BREATHING
    surge.util.PE WEAKNESS -> WEAKNESS
    surge.util.PE WITHER -> WITHER
    void <init>(java.util.Map) -> <init>
    void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    java.util.Map serialize() -> serialize
    boolean apply(org.bukkit.entity.LivingEntity) -> apply
    boolean equals(java.lang.Object) -> equals
    int getAmplifier() -> getAmplifier
    int getDuration() -> getDuration
    org.bukkit.potion.PotionEffectType getType() -> getType
    boolean isAmbient() -> isAmbient
    boolean hasParticles() -> hasParticles
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> defaulted
    surge.util.PE d(int) -> d
    surge.util.PE a(int) -> a
    org.bukkit.potion.PotionEffect c() -> c
    void c(org.bukkit.entity.LivingEntity) -> c
    void crm(org.bukkit.entity.LivingEntity) -> crm
    void rm(org.bukkit.entity.LivingEntity) -> rm
    void <clinit>() -> <clinit>
surge.util.ParticleEffect -> org.cyberpwn.react.Rtgx:
    surge.util.ParticleEffect EXPLOSION_NORMAL -> aWqC
    surge.util.ParticleEffect EXPLOSION_LARGE -> qMmd
    surge.util.ParticleEffect EXPLOSION_HUGE -> EWAy
    surge.util.ParticleEffect FIREWORKS_SPARK -> JoBe
    surge.util.ParticleEffect WATER_BUBBLE -> EpSt
    surge.util.ParticleEffect WATER_SPLASH -> coYM
    surge.util.ParticleEffect WATER_WAKE -> UfPx
    surge.util.ParticleEffect SUSPENDED -> dOyF
    surge.util.ParticleEffect SUSPENDED_DEPTH -> sLCv
    surge.util.ParticleEffect CRIT -> LdGj
    surge.util.ParticleEffect CRIT_MAGIC -> iplu
    surge.util.ParticleEffect SMOKE_NORMAL -> RCXK
    surge.util.ParticleEffect SMOKE_LARGE -> liVP
    surge.util.ParticleEffect SPELL -> TlAv
    surge.util.ParticleEffect SPELL_INSTANT -> sLGl
    surge.util.ParticleEffect SPELL_MOB -> nEIJ
    surge.util.ParticleEffect SPELL_MOB_AMBIENT -> iEyY
    surge.util.ParticleEffect SPELL_WITCH -> bItm
    surge.util.ParticleEffect DRIP_WATER -> ywlD
    surge.util.ParticleEffect DRIP_LAVA -> nxNA
    surge.util.ParticleEffect VILLAGER_ANGRY -> ygJd
    surge.util.ParticleEffect VILLAGER_HAPPY -> FbYO
    surge.util.ParticleEffect TOWN_AURA -> gPtN
    surge.util.ParticleEffect NOTE -> dGkc
    surge.util.ParticleEffect PORTAL -> yMXS
    surge.util.ParticleEffect ENCHANTMENT_TABLE -> emSC
    surge.util.ParticleEffect FLAME -> mlXc
    surge.util.ParticleEffect LAVA -> lWro
    surge.util.ParticleEffect FOOTSTEP -> jtQR
    surge.util.ParticleEffect CLOUD -> xBEC
    surge.util.ParticleEffect REDSTONE -> BMYn
    surge.util.ParticleEffect SNOWBALL -> Ibnx
    surge.util.ParticleEffect SNOW_SHOVEL -> tVyL
    surge.util.ParticleEffect SLIME -> QIDr
    surge.util.ParticleEffect HEART -> yfhv
    surge.util.ParticleEffect BARRIER -> RKgS
    surge.util.ParticleEffect ITEM_CRACK -> KaFW
    surge.util.ParticleEffect BLOCK_CRACK -> dYLb
    surge.util.ParticleEffect BLOCK_DUST -> tEvu
    surge.util.ParticleEffect WATER_DROP -> PFAx
    surge.util.ParticleEffect ITEM_TAKE -> UCoO
    surge.util.ParticleEffect MOB_APPEARANCE -> nfip
    surge.util.ParticleEffect DRAGON_BREATH -> eJli
    surge.util.ParticleEffect END_ROD -> vCmY
    surge.util.ParticleEffect DAMAGE_INDICATOR -> LRfr
    surge.util.ParticleEffect SWEEP_ATTACK -> CsAe
    java.util.Map NAME_MAP -> JCol
    java.util.Map ID_MAP -> GSxa
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> gYcu
    java.util.List properties -> UDOr
    surge.util.ParticleEffect[] $VALUES -> FsYb
    surge.util.ParticleEffect[] values() -> values
    surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,int,int,surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    java.lang.String getName() -> getName
    int getId() -> getId
    int getRequiredVersion() -> quxe
    boolean hasProperty(surge.util.ParticleEffect$ParticleProperty) -> WGJb
    boolean isSupported() -> isSupported
    surge.util.ParticleEffect fromName(java.lang.String) -> hQNI
    surge.util.ParticleEffect fromId(int) -> YDfj
    boolean isWater(org.bukkit.Location) -> CgEJ
    boolean isLongDistance(org.bukkit.Location,java.util.List) -> WGJb
    boolean isDataCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleData) -> WGJb
    boolean isColorCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor) -> WGJb
    void display(float,int,org.bukkit.Location,double) -> WGJb
    void display(float,int,org.bukkit.Location,java.util.List) -> WGJb
    void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> WGJb
    void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> WGJb
    void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> WGJb
    void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> WGJb
    void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> WGJb
    void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> WGJb
    void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> WGJb
    void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> WGJb
    void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> WGJb
    void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> WGJb
    void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> WGJb
    void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> WGJb
    void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object RK(java.lang.Object,java.lang.Object,java.lang.Object) -> RcPV
surge.util.ParticleEffect$BlockData -> org.cyberpwn.react.XLGR:
    void <init>(org.bukkit.Material,byte) -> <init>
    java.lang.Object fF(java.lang.Object,java.lang.Object,java.lang.Object) -> OYUi
surge.util.ParticleEffect$ItemData -> org.cyberpwn.react.RuHu:
    void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$NoteColor -> org.cyberpwn.react.LQTg:
    int note -> note
    void <init>(int) -> <init>
    float getValueX() -> MeAi
    float getValueY() -> BeCv
    float getValueZ() -> Drww
surge.util.ParticleEffect$OrdinaryColor -> org.cyberpwn.react.LsXI:
    int red -> red
    int green -> green
    int blue -> blue
    void <init>(int,int,int) -> <init>
    void <init>(org.bukkit.Color) -> <init>
    int getRed() -> getRed
    int getGreen() -> getGreen
    int getBlue() -> getBlue
    float getValueX() -> MeAi
    float getValueY() -> BeCv
    float getValueZ() -> Drww
    java.lang.Object yc(java.lang.Object,java.lang.Object,java.lang.Object) -> BeDK
surge.util.ParticleEffect$ParticleColor -> org.cyberpwn.react.HDhK:
    void <init>() -> <init>
    float getValueX() -> MeAi
    float getValueY() -> BeCv
    float getValueZ() -> Drww
surge.util.ParticleEffect$ParticleColorException -> org.cyberpwn.react.sBFN:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticleData -> org.cyberpwn.react.jioC:
    org.bukkit.Material material -> material
    byte data -> data
    int[] packetData -> hTWS
    void <init>(org.bukkit.Material,byte) -> <init>
    org.bukkit.Material getMaterial() -> getMaterial
    byte getData() -> getData
    int[] getPacketData() -> QqMv
    java.lang.String getPacketDataString() -> RcPV
    java.lang.Object No(java.lang.Object,java.lang.Object,java.lang.Object) -> eHbv
surge.util.ParticleEffect$ParticleDataException -> org.cyberpwn.react.Ulrh:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticlePacket -> org.cyberpwn.react.xHcp:
    int version -> version
    java.lang.Class enumParticle -> wFon
    java.lang.reflect.Constructor packetConstructor -> lPBm
    java.lang.reflect.Method getHandle -> tEwN
    java.lang.reflect.Field playerConnection -> lrFL
    java.lang.reflect.Method sendPacket -> UfUl
    boolean initialized -> initialized
    surge.util.ParticleEffect effect -> qEbb
    float offsetX -> mdJe
    float offsetY -> UUSu
    float offsetZ -> KXWo
    float speed -> AIxf
    int amount -> MuvI
    boolean longDistance -> sCXf
    surge.util.ParticleEffect$ParticleData data -> ygLt
    java.lang.Object packet -> sTYr
    void <init>(surge.util.ParticleEffect,float,float,float,float,int,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    void <init>(surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    void <init>(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    void initialize() -> initialize
    int getVersion() -> getVersion
    boolean isInitialized() -> isInitialized
    void initializePacket(org.bukkit.Location) -> nJMP
    void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> WGJb
    void sendTo(org.bukkit.Location,java.util.List) -> dfal
    void sendTo(org.bukkit.Location,double) -> dfal
    java.lang.Object rp(java.lang.Object,java.lang.Object,java.lang.Object) -> ETYd
surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> org.cyberpwn.react.scgo:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> org.cyberpwn.react.FXWS:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> org.cyberpwn.react.WaxF:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticleProperty -> org.cyberpwn.react.jHLQ:
    surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> ULdB
    surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> bdKf
    surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> oYNd
    surge.util.ParticleEffect$ParticleProperty COLORABLE -> OSbo
    surge.util.ParticleEffect$ParticleProperty[] $VALUES -> ngLy
    surge.util.ParticleEffect$ParticleProperty[] values() -> values
    surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object CL(java.lang.Object,java.lang.Object,java.lang.Object) -> eYdc
surge.util.ParticleEffect$ParticleVersionException -> org.cyberpwn.react.gWtF:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
surge.util.Paste -> org.cyberpwn.react.jYNF:
    void <init>() -> <init>
    java.lang.String paste(java.lang.String) -> MSBL
    java.lang.Object xE(java.lang.Object,java.lang.Object,java.lang.Object) -> lUhK
surge.util.Persist -> org.cyberpwn.react.GSIv:
surge.util.Platform -> org.cyberpwn.react.whDa:
    boolean ENABLE -> QHhD
    double PROC_CPU -> aWvT
    void <init>() -> <init>
    java.lang.String getVersion() -> getVersion
    java.lang.String getName() -> getName
    com.sun.management.OperatingSystemMXBean getSystem() -> BeDK
    com.sun.management.OperatingSystemMXBean access$000() -> eHbv
    void <clinit>() -> <clinit>
    java.lang.Object ck(java.lang.Object,java.lang.Object,java.lang.Object) -> oDvc
surge.util.Platform$CPU -> org.cyberpwn.react.EfVN:
    void <init>() -> <init>
    int getAvailableProcessors() -> getAvailableProcessors
    double getCPULoad() -> ETYd
    double getProcessCPULoad() -> eYdc
    double getLiveProcessCPULoad() -> lUhK
    java.lang.String getArchitecture() -> Tyvh
    java.lang.Object xC(java.lang.Object,java.lang.Object,java.lang.Object) -> Tyvh
surge.util.Platform$ENVIRONMENT -> org.cyberpwn.react.KhHE:
    void <init>() -> <init>
    boolean canRunBatch() -> EKiB
    java.lang.String getJavaHome() -> OYhc
    java.lang.String getJavaVendor() -> QppW
    java.lang.String getJavaVersion() -> hkaq
    java.lang.Object LL(java.lang.Object,java.lang.Object,java.lang.Object) -> EKiB
surge.util.Platform$MEMORY -> org.cyberpwn.react.gWtM:
    void <init>() -> <init>
surge.util.Platform$MEMORY$PHYSICAL -> org.cyberpwn.react.ujOG:
    void <init>() -> <init>
    long getTotalMemory() -> KDjv
    long getFreeMemory() -> pIGA
    long getUsedMemory() -> FhaH
    java.lang.Object wz(java.lang.Object,java.lang.Object,java.lang.Object) -> miXs
surge.util.Platform$MEMORY$VIRTUAL -> org.cyberpwn.react.XCYC:
    void <init>() -> <init>
    long getTotalMemory() -> KDjv
    long getFreeMemory() -> pIGA
    long getUsedMemory() -> FhaH
    long getCommittedVirtualMemory() -> bbAE
    java.lang.Object xo(java.lang.Object,java.lang.Object,java.lang.Object) -> xo
surge.util.Platform$STORAGE -> org.cyberpwn.react.huKL:
    void <init>() -> <init>
    long getAbsoluteTotalSpace() -> LHOf
    long getTotalSpace() -> getTotalSpace
    long getTotalSpace(java.io.File) -> wnYS
    long getAbsoluteFreeSpace() -> SLca
    long getFreeSpace() -> getFreeSpace
    long getFreeSpace(java.io.File) -> SCOM
    long getUsedSpace() -> cKQf
    long getUsedSpace(java.io.File) -> SmbW
    long getAbsoluteUsedSpace() -> JBIg
    java.io.File[] getRoots() -> getRoots
    java.lang.Object mY(java.lang.Object,java.lang.Object,java.lang.Object) -> OYhc
surge.util.PluginUtil -> org.cyberpwn.react.ghuD:
    void <init>() -> <init>
    void enable(org.bukkit.plugin.Plugin) -> mOYk
    void enable(java.lang.String) -> NffG
    void enableAll() -> nucb
    void disable(org.bukkit.plugin.Plugin) -> wnYS
    void disableAll() -> YFDv
    java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> SCOM
    java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> WGJb
    org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> GQQD
    java.util.List getPluginNames(boolean) -> DrYG
    java.lang.String getPluginVersion(java.lang.String) -> MtdV
    java.lang.String getUsages(org.bukkit.plugin.Plugin) -> SmbW
    java.util.List findByCommand(java.lang.String) -> QNKT
    void load(org.bukkit.plugin.Plugin) -> ePRm
    java.lang.String getPluginFileName(java.lang.String) -> RPmS
    java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> WGJb
    void load(java.lang.String) -> load
    void load(java.io.File) -> load
    void reload(org.bukkit.plugin.Plugin) -> CgEJ
    void reloadAll() -> bXoS
    void unload(org.bukkit.plugin.Plugin) -> nJMP
    void unloadForce(org.bukkit.plugin.Plugin) -> WXLP
    void reloadSoft(surge.control.AmpedPlugin) -> dfal
    java.lang.Object VQ(java.lang.Object,java.lang.Object,java.lang.Object) -> QppW
surge.util.PoolCount -> org.cyberpwn.react.QXUT:
surge.util.PoolDescriber -> org.cyberpwn.react.apUO:
surge.util.PoolNanoThrottle -> org.cyberpwn.react.GIvY:
surge.util.PositionalSelector -> org.cyberpwn.react.vlol:
    react.glang.GSet allowedChunks -> nxNn
    void <init>() -> <init>
    void <init>(org.bukkit.Chunk) -> <init>
    void <init>(org.bukkit.World) -> <init>
    void addWorld(org.bukkit.World) -> addWorld
    void addAllWorlds() -> BTCY
    void addChunk(org.bukkit.Chunk) -> sHYj
    react.glang.GSet getAllowedChunks() -> Xdcg
    java.lang.Object DZ(java.lang.Object,java.lang.Object,java.lang.Object) -> hkaq
surge.util.Protocol -> org.cyberpwn.react.tLvn:
    surge.util.Protocol LATEST -> LATEST
    surge.util.Protocol R1_12_2 -> R1_12_2
    surge.util.Protocol R1_12_2_PRE -> R1_12_2_PRE
    surge.util.Protocol R1_12_1 -> R1_12_1
    surge.util.Protocol R1_12 -> R1_12
    surge.util.Protocol R1_11_2 -> R1_11_2
    surge.util.Protocol R1_11_1 -> R1_11_1
    surge.util.Protocol R1_11 -> R1_11
    surge.util.Protocol R1_10_2 -> R1_10_2
    surge.util.Protocol R1_10_1 -> R1_10_1
    surge.util.Protocol R1_10 -> R1_10
    surge.util.Protocol R1_9_4 -> R1_9_4
    surge.util.Protocol R1_9_3 -> R1_9_3
    surge.util.Protocol R1_9_2 -> R1_9_2
    surge.util.Protocol R1_9_1 -> R1_9_1
    surge.util.Protocol R1_9 -> R1_9
    surge.util.Protocol R1_8_9 -> R1_8_9
    surge.util.Protocol R1_8_8 -> R1_8_8
    surge.util.Protocol R1_8_7 -> R1_8_7
    surge.util.Protocol R1_8_6 -> R1_8_6
    surge.util.Protocol R1_8_5 -> R1_8_5
    surge.util.Protocol R1_8_4 -> R1_8_4
    surge.util.Protocol R1_8_3 -> R1_8_3
    surge.util.Protocol R1_8_2 -> R1_8_2
    surge.util.Protocol R1_8_1 -> R1_8_1
    surge.util.Protocol R1_8 -> R1_8
    surge.util.Protocol R1_7_10 -> R1_7_10
    surge.util.Protocol R1_7_9 -> R1_7_9
    surge.util.Protocol R1_7_8 -> R1_7_8
    surge.util.Protocol R1_7_7 -> R1_7_7
    surge.util.Protocol R1_7_6 -> R1_7_6
    surge.util.Protocol R1_7_5 -> R1_7_5
    surge.util.Protocol R1_7_4 -> R1_7_4
    surge.util.Protocol R1_7_3 -> R1_7_3
    surge.util.Protocol R1_7_2 -> R1_7_2
    surge.util.Protocol R1_7_1 -> R1_7_1
    surge.util.Protocol B1_6_4 -> B1_6_4
    surge.util.Protocol B1_6_3 -> B1_6_3
    surge.util.Protocol B1_6_2 -> B1_6_2
    surge.util.Protocol B1_6_1 -> B1_6_1
    surge.util.Protocol B1_5_2 -> B1_5_2
    surge.util.Protocol B1_5_1 -> B1_5_1
    surge.util.Protocol B1_5 -> B1_5
    surge.util.Protocol B1_4_7 -> B1_4_7
    surge.util.Protocol B1_4_6 -> B1_4_6
    surge.util.Protocol B1_4_5 -> B1_4_5
    surge.util.Protocol B1_4_4 -> B1_4_4
    surge.util.Protocol B1_4_2 -> B1_4_2
    surge.util.Protocol B1_3_2 -> B1_3_2
    surge.util.Protocol B1_3_1 -> B1_3_1
    surge.util.Protocol B1_2_5 -> B1_2_5
    surge.util.Protocol B1_2_4 -> B1_2_4
    surge.util.Protocol EARLIEST -> EARLIEST
    surge.util.Protocol UNKNOWN -> UNKNOWN
    int version -> version
    java.lang.String packageVersion -> packageVersion
    java.lang.String versionName -> versionName
    boolean netty -> netty
    surge.util.Protocol[] $VALUES -> $VALUES
    surge.util.Protocol[] values() -> values
    surge.util.Protocol valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    void <init>(java.lang.String,int,int) -> <init>
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    boolean hasPackageSupport() -> hasPackageSupport
    java.lang.String getPackageVersion() -> getPackageVersion
    java.lang.String toString() -> toString
    surge.util.Protocol getSupportedNMSVersion() -> getSupportedNMSVersion
    surge.util.Protocol getProtocolVersion() -> getProtocolVersion
    surge.util.ProtocolRange to(surge.util.Protocol) -> to
    boolean isServerVersion() -> isServerVersion
    java.lang.String getVersionString() -> getVersionString
    boolean isNettySupported() -> isNettySupported
    boolean isActualVersion() -> isActualVersion
    int getVersion() -> getVersion
    int getCVersion() -> getCVersion
    int getMetaVersion() -> getMetaVersion
    void <clinit>() -> <clinit>
    java.lang.Object bJ(java.lang.Object,java.lang.Object,java.lang.Object) -> bJ
surge.util.ProtocolRange -> org.cyberpwn.react.xHcD:
    surge.util.Protocol from -> from
    surge.util.Protocol to -> to
    void <init>(surge.util.Protocol,surge.util.Protocol) -> <init>
    surge.util.Protocol getFrom() -> getFrom
    surge.util.Protocol getTo() -> getTo
    boolean contains(surge.util.Protocol) -> contains
    java.lang.String toString() -> toString
    java.lang.Object Wi(java.lang.Object,java.lang.Object,java.lang.Object) -> Wi
surge.util.Query -> org.cyberpwn.react.lVbM:
    org.bukkit.entity.Player p -> p
    void <init>(org.bukkit.entity.Player) -> <init>
    void close() -> close
    void onMessage(java.lang.String) -> CMUG
    void on(org.bukkit.event.player.PlayerQuitEvent) -> WGJb
    void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> WGJb
    void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> WGJb
    java.lang.Object mU(java.lang.Object,java.lang.Object,java.lang.Object) -> KDjv
surge.util.Query$1 -> org.cyberpwn.react.BKiv:
    org.bukkit.event.player.AsyncPlayerChatEvent val$e -> BgOO
    surge.util.Query this$0 -> xJWQ
    void <init>(surge.util.Query,org.bukkit.event.player.AsyncPlayerChatEvent) -> <init>
    void run() -> run
    java.lang.Object iB(java.lang.Object,java.lang.Object,java.lang.Object) -> pIGA
surge.util.Range -> org.cyberpwn.react.foCs:
    double min -> min
    double max -> max
    void <init>(double,double) -> <init>
    void <init>(int,int) -> <init>
    void <init>(long,long) -> <init>
    double randomNext() -> GbqX
    int randomNextInt() -> jFsL
    long randomNextLong() -> XSaS
    boolean isWithin(double) -> ESVk
    boolean isWithin(int) -> xytC
    boolean isWithin(long) -> XJNQ
    double getMin() -> getMin
    void setMin(double) -> DPSk
    double getMax() -> getMax
    void setMax(double) -> setMax
    java.lang.Object WM(java.lang.Object,java.lang.Object,java.lang.Object) -> FhaH
surge.util.RawEvent -> org.cyberpwn.react.pALS:
surge.util.RayTrace -> org.cyberpwn.react.foCv:
    org.bukkit.Location start -> ItVD
    org.bukkit.util.Vector direction -> Gmnf
    java.lang.Double maxDistance -> veqy
    java.lang.Double distanceCovered -> CrbT
    java.lang.Double step -> CQBP
    java.lang.Boolean stop -> QHfP
    void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    void trace() -> EKjH
    void stop() -> stop
    void onTrace(org.bukkit.Location) -> ePRm
    org.bukkit.Location getStart() -> jPES
    void setStart(org.bukkit.Location) -> WXLP
    org.bukkit.util.Vector getDirection() -> getDirection
    void setDirection(org.bukkit.util.Vector) -> setDirection
    java.lang.Double getMaxDistance() -> GlCe
    void setMaxDistance(java.lang.Double) -> KejP
    java.lang.Double getDistanceCovered() -> GlCf
    void setDistanceCovered(java.lang.Double) -> mOYk
    java.lang.Double getStep() -> BdeU
    void setStep(java.lang.Double) -> wnYS
    java.lang.Object vU(java.lang.Object,java.lang.Object,java.lang.Object) -> bbAE
surge.util.ReflectionUtils -> org.cyberpwn.react.Lavv:
    void <init>() -> <init>
    java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    java.lang.reflect.Constructor getConstructor(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> WGJb
    java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> WGJb
    java.lang.Object instantiateObject(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> WGJb
    java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    java.lang.reflect.Method getMethod(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> WGJb
    java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> WGJb
    java.lang.Object invokeMethod(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> WGJb
    java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> WGJb
    java.lang.reflect.Field getField(java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> WGJb
    java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> WGJb
    java.lang.Object getValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> WGJb
    java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> WGJb
    void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> WGJb
    void setValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> WGJb
    void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> WGJb
    java.lang.Object sK(java.lang.Object,java.lang.Object,java.lang.Object) -> QVwP
surge.util.ReflectionUtils$DataType -> org.cyberpwn.react.lWAy:
    surge.util.ReflectionUtils$DataType BYTE -> CjRR
    surge.util.ReflectionUtils$DataType SHORT -> Kqhm
    surge.util.ReflectionUtils$DataType INTEGER -> FjjO
    surge.util.ReflectionUtils$DataType LONG -> Wtjp
    surge.util.ReflectionUtils$DataType CHARACTER -> gQVh
    surge.util.ReflectionUtils$DataType FLOAT -> Ltkl
    surge.util.ReflectionUtils$DataType DOUBLE -> FbYi
    surge.util.ReflectionUtils$DataType BOOLEAN -> Dlsy
    java.util.Map CLASS_MAP -> gQUm
    java.lang.Class primitive -> hCXA
    java.lang.Class reference -> RCXx
    surge.util.ReflectionUtils$DataType[] $VALUES -> arIL
    surge.util.ReflectionUtils$DataType[] values() -> values
    surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    java.lang.Class getPrimitive() -> URgt
    java.lang.Class getReference() -> vuJd
    surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> dfal
    java.lang.Class getPrimitive(java.lang.Class) -> lTgP
    java.lang.Class getReference(java.lang.Class) -> KejP
    java.lang.Class[] getPrimitive(java.lang.Class[]) -> WGJb
    java.lang.Class[] getReference(java.lang.Class[]) -> dfal
    java.lang.Class[] getPrimitive(java.lang.Object[]) -> KejP
    java.lang.Class[] getReference(java.lang.Object[]) -> mOYk
    boolean compare(java.lang.Class[],java.lang.Class[]) -> WGJb
    void <clinit>() -> <clinit>
    java.lang.Object PT(java.lang.Object,java.lang.Object,java.lang.Object) -> LHOf
surge.util.ReflectionUtils$IO -> org.cyberpwn.react.LQVb:
    java.lang.Object[] U -> xHFY
    int f -> f
    java.math.BigInteger[] Q -> DkAW
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void K(int,java.lang.Object) -> nJMP
    int l(int,int) -> SmbW
    int J(byte[],int) -> DrYG
    void v31541() -> pjhI
    void W() -> HwME
    java.lang.String B(java.lang.Object) -> FpMO
surge.util.ReflectionUtils$PackageType -> org.cyberpwn.react.VouX:
    surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> ravU
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> MxPd
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> FIKH
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> wyym
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> gHhU
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> cUnH
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> jAPl
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> obCG
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> dHPW
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> ubsD
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> vfWF
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> qMtv
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> MVPU
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> qNVX
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> TbtN
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> VXYs
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> TARW
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> bIyj
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> pufC
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> BVPB
    java.lang.String path -> path
    surge.util.ReflectionUtils$PackageType[] $VALUES -> eSck
    surge.util.ReflectionUtils$PackageType[] values() -> values
    surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int,surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    java.lang.String getPath() -> getPath
    java.lang.Class getClass(java.lang.String) -> getClass
    java.lang.String toString() -> toString
    java.lang.String getServerVersion() -> getServerVersion
    void <clinit>() -> <clinit>
    java.lang.Object UC(java.lang.Object,java.lang.Object,java.lang.Object) -> SLca
surge.util.Refreshable -> org.cyberpwn.react.BKij:
    void refresh() -> refresh
surge.util.SQLOperation -> org.cyberpwn.react.HVLR:
    surge.util.SQLOperation LOAD -> evGj
    surge.util.SQLOperation SAVE -> HWaq
    surge.util.SQLOperation[] $VALUES -> LSMb
    surge.util.SQLOperation[] values() -> values
    surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object IG(java.lang.Object,java.lang.Object,java.lang.Object) -> cKQf
surge.util.ServerState -> org.cyberpwn.react.ymgt:
    surge.util.ServerState START -> ukbc
    surge.util.ServerState ENABLE -> xAfq
    surge.util.ServerState DISABLE -> TcSg
    surge.util.ServerState STOP -> rIGa
    surge.util.ServerState RUNNING -> ViYh
    surge.util.ServerState[] $VALUES -> FjlS
    surge.util.ServerState[] values() -> values
    surge.util.ServerState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
    java.lang.Object xS(java.lang.Object,java.lang.Object,java.lang.Object) -> JBIg
surge.util.Shape -> org.cyberpwn.react.Votl:
    org.bukkit.Location location -> bAOD
    org.bukkit.util.Vector offset -> gbYx
    org.bukkit.util.Vector size -> pCAm
    void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    void <init>(org.bukkit.Location) -> <init>
    boolean isWithinShape(org.bukkit.Location) -> bWiv
    org.bukkit.Location randomLocation() -> CWHC
    org.bukkit.Location randomSurface() -> UuMJ
    org.bukkit.Location getCenter() -> getCenter
    org.bukkit.Location getLocation() -> getLocation
    org.bukkit.util.Vector getOffset() -> LHNg
    org.bukkit.util.Vector getSize() -> pIDs
    java.lang.Object Py(java.lang.Object,java.lang.Object,java.lang.Object) -> nucb
surge.util.SnowLevel -> org.cyberpwn.react.mrwA:
    byte level -> XpAN
    void <init>(byte) -> <init>
    byte getLevel() -> nmSB
    void setLevel(byte) -> sHYj
surge.util.SuperCaller -> org.cyberpwn.react.xPre:
    void run() -> run
surge.util.T -> org.cyberpwn.react.AQWh:
    void <init>() -> <init>
    void onStop(long,double) -> dfal
    void stop() -> stop
surge.util.TXT -> org.cyberpwn.react.jXnp:
    void <init>() -> <init>
    java.lang.String repeat(java.lang.String,int) -> repeat
    react.glang.GList wrap(java.lang.String,int) -> KejP
    java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> WGJb
    java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> WGJb
    java.lang.String line(surge.util.C,int) -> WGJb
    java.lang.String underline(surge.util.C,int) -> dfal
    java.lang.String getLine(surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> WGJb
    java.lang.Object RS(java.lang.Object,java.lang.Object,java.lang.Object) -> Smif
surge.util.Tag -> org.cyberpwn.react.VyJQ:
    java.lang.String value() -> value
surge.util.Timer -> org.cyberpwn.react.bHfo:
    long tns -> tNlj
    long cns -> JMFP
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    long getTime() -> getTime
    long getLastRun() -> dMqx
    java.lang.Object UO(java.lang.Object,java.lang.Object,java.lang.Object) -> YFDv
surge.util.VectorMath -> org.cyberpwn.react.ETuI:
    void <init>() -> <init>
    org.bukkit.util.Vector scaleStatic(surge.util.Axis,org.bukkit.util.Vector,double) -> WGJb
    org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> WGJb
    org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> dfal
    org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> lTgP
    org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> KejP
    boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> dfal
    org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> mOYk
    org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> wnYS
    org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> SCOM
    org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> SmbW
    org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> ePRm
    org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> CgEJ
    double round(double,int) -> mOYk
    org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> WGJb
    org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> WGJb
    react.glang.GList split(org.bukkit.block.BlockFace) -> WGJb
    org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> lTgP
    org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> KejP
    org.bukkit.util.Vector toVector(float,float) -> WGJb
    void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> WGJb
    void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> WGJb
    org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> nJMP
    double getSpeed(org.bukkit.util.Vector) -> WXLP
    react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> WGJb
    org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> bWiv
    org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> WGJb
    org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> dfal
    org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> lTgP
    org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> KejP
    org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> TqEp
    java.lang.Object Fb(java.lang.Object,java.lang.Object,java.lang.Object) -> SCTm
surge.util.VectorMath$1 -> org.cyberpwn.react.EfWY:
    org.bukkit.util.Vector val$vector -> aPGw
    void <init>(org.bukkit.util.Vector) -> <init>
    org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> OYFP
    java.lang.Object onAdapt(java.lang.Object) -> Vmyy
    java.lang.Object rb(java.lang.Object,java.lang.Object,java.lang.Object) -> bXoS
surge.util.VectorMath$2 -> org.cyberpwn.react.fnfQ:
    int[] $SwitchMap$surge$util$Axis -> jPsV
    int[] $SwitchMap$org$bukkit$block$BlockFace -> cELd
    void <clinit>() -> <clinit>
    java.lang.Object TL(java.lang.Object,java.lang.Object,java.lang.Object) -> BTCY
surge.util.VectorMath$CMD -> org.cyberpwn.react.JJqx:
    java.lang.Object[] y -> GmNb
    int h -> h
    java.math.BigInteger[] A -> apUO
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void X(int,java.lang.Object) -> XJNQ
    int u(int,int) -> DrYG
    int H(byte[],int) -> OYFP
    void l30649() -> AsEp
    void d() -> d
    java.lang.String b(java.lang.Object) -> KejP
surge.util.W -> org.cyberpwn.react.cBxd:
    void <init>() -> <init>
    boolean visible(org.bukkit.block.Block) -> ePRm
    void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> WGJb
    org.bukkit.entity.Entity getEntity(int) -> IEyH
    int count(org.bukkit.entity.Player,surge.util.MaterialBlock) -> WGJb
    boolean has(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> WGJb
    int getChunkX(org.bukkit.block.Block) -> CgEJ
    int getChunkY(org.bukkit.block.Block) -> nJMP
    void dropXp(org.bukkit.Location,int) -> dfal
    int getChunkZ(org.bukkit.block.Block) -> WXLP
    void take(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> dfal
    int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> WGJb
    react.glang.GList news(org.bukkit.Location) -> TqEp
    int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> WGJb
    react.glang.GList getBlocks(org.bukkit.Chunk) -> ssMp
    org.bukkit.World getSyncWorld(org.bukkit.World) -> vQbs
    org.bukkit.World toSync(org.bukkit.World) -> eHBt
    org.bukkit.block.Block toSync(org.bukkit.block.Block) -> bWiv
    org.bukkit.Location toSync(org.bukkit.Location) -> OYFP
    org.bukkit.Chunk toSync(org.bukkit.Chunk) -> xNwp
    surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> tuqb
    org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> WGJb
    void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> WGJb
    void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> WGJb
    void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> WGJb
    void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> WGJb
    void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> WGJb
    void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> WGJb
    int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> WGJb
    react.glang.GList chunkFaces(org.bukkit.Chunk) -> qcup
    react.glang.GList blockFaces(org.bukkit.block.Block) -> TqEp
    org.bukkit.Location simulateFall(org.bukkit.Location) -> UAEN
    react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> lTgP
    react.glang.GList blockRadius(org.bukkit.block.Block,int) -> WGJb
    org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> WGJb
    boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> WGJb
    double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> WGJb
    java.lang.Object Zl(java.lang.Object,java.lang.Object,java.lang.Object) -> Xdcg
surge.util.W$1 -> org.cyberpwn.react.LjkO:
    java.lang.Double val$doff -> OvBv
    org.bukkit.entity.Entity val$e -> gkJl
    org.bukkit.entity.Entity[] val$result -> xJQu
    void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    void onTrace(org.bukkit.Location) -> ePRm
    java.lang.Object KN(java.lang.Object,java.lang.Object,java.lang.Object) -> GbqX
surge.util.Worlds -> org.cyberpwn.react.kvEn:
    void <init>() -> <init>
    react.glang.GList getWorlds() -> GJDD
    boolean hasWorld(java.lang.String) -> vACh
    org.bukkit.World getWorld(java.lang.String) -> getWorld
    java.lang.Object DG(java.lang.Object,java.lang.Object,java.lang.Object) -> hIJi
surge.util.package-info -> org.cyberpwn.react.Trbr:
surge.util.y -> org.cyberpwn.react.KoyD:
    java.lang.Object[] T -> iUpD
    java.lang.Class[] p -> Bwre
    int[] R -> pskR
    short[] d -> kwWU
    int V -> V
    int H -> H
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Class x(int,int) -> rDyl
    java.lang.Class gQ(int) -> satA
    java.lang.reflect.Method h(int) -> skFN
    java.lang.Object O(int,java.lang.Object[]) -> OYFP
    java.lang.Object c(java.lang.Object,int,java.lang.Object[]) -> DPSk
    java.lang.Object I(int,java.lang.Object[]) -> eHBt
    java.lang.reflect.Field Q(int) -> tupB
    java.lang.Object s(java.lang.Object,int) -> DPSk
    void m(java.lang.Object,int,java.lang.Object) -> ssMp
    java.lang.Object O(int) -> NLxE
    void f(int,java.lang.Object) -> OYFP
xre.ilj.jd -> org.cyberpwn.react.KFEx:
    java.lang.Object[] w -> jaOE
    int O -> O
    java.math.BigInteger[] F -> ffOP
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void E(int,java.lang.Object) -> EdXk
    int V(int,int) -> kYvI
    int J(byte[],int) -> DrYG
    void e30253() -> EKmJ
    void Z() -> Z
    java.lang.String m(java.lang.Object) -> QpMH
xre.ilj.n -> org.cyberpwn.react.Ultc:
    java.lang.Object[] F -> rgxs
    int s -> s
    java.math.BigInteger[] y -> lVhn
    void <init>(int) -> <init>
    void <clinit>() -> <clinit>
    void run() -> run
    void l(int,java.lang.Object) -> vQbs
    int E(int,int) -> ssMp
    int s(byte[],int) -> DPSk
    void z13091() -> Tqjq
    void N() -> N
    java.lang.String f(java.lang.Object) -> sHYj

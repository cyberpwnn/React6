react.Config -> rfxw:
    react.glang.GMap worldConfigs -> rfxw
    java.lang.String A_MAX_EXPLOSIONS_PER_TICK -> BuBg
    java.lang.String A_COMMANDOVERRIDE_TPS -> uhSQ
    java.lang.String A_REACT_REMOTE_PORT -> Jshh
    java.lang.String A_REACT_REMOTE_ENABLED -> gUxe
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> LiNY
    java.lang.String A_POOL_MAXTHREADS -> LWlN
    java.lang.String A_POOL_SYNC_NANOS -> MuBe
    java.lang.String A_FASTLEAF_ENABLED -> CoUX
    java.lang.String A_FASTLEAF_ONDECAY -> UYvJ
    java.lang.String A_FASTLEAF_INSTANT -> uqDO
    java.lang.String A_FASTLEAF_DECAYPERIOD -> UsiF
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> AWlC
    java.lang.String A_ENTITYSTACK_ENABLED -> SBmp
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> LhnC
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> SBnO
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> lvjD
    java.lang.String A_GLASS_SHOW_BLOCKS -> IyWb
    java.lang.String A_GLASS_SHOW_PARTICLES -> wCdc
    java.lang.String A_ALLOW_CULL -> owcC
    java.lang.String A_ALLOW_PURGE -> WhmP
    java.lang.String A_ALLOW_STACKING -> Hdqq
    java.lang.String A_CULL_RULES -> bXKh
    java.lang.String A_RAI_TPS_HIGH_TICK -> vtFp
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> VTgS
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> XkoF
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> VCed
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> KThF
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> LGIu
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> kACC
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> kYtA
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> CfcL
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> WNyF
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> TyTt
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> nJKR
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> prTV
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> FolS
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> Lhle
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> UcGU
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> xiJh
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> pHAU
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> LFig
    java.lang.String A_RAI_FLUID_TIME_CEIL -> tdnH
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> UITY
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> CweP
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> LiMk
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> NgEq
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> AXOT
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> LGLx
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> aDHh
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> DXga
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> PBXQ
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> YECP
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> PmMF
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> vkXD
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> yuAt
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> vQeY
    java.lang.String A_USE_WORLD_CONFIGS -> CUbt
    java.lang.String A_LANGUAGE -> weif
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> wThV
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> CECB
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> ERyj
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> ylPV
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> jOCQ
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> IqGj
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> VKxE
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> Ywdg
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> Dqwv
    java.lang.String A_RAI_ENTITY_PROPIGATE -> GbPb
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> turL
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> iSoF
    int MAX_EXPLOSIONS_PER_TICK -> Husy
    boolean COMMANDOVERRIDES_TPS -> ckqE
    int REACT_REMOTE_PORT -> XJOX
    boolean REACT_REMOTE_ENABLED -> WiNv
    int ENTITY_STACK_MAX_COUNT -> mXLH
    int POOL_MAXTHREADS -> jVql
    long POOL_SYNC_NANOS -> cuCI
    boolean FASTLEAF_ENABLED -> qJdx
    boolean FASTLEAF_ONDECAY -> CUfO
    boolean FASTLEAF_INSTANT -> kAHI
    int FASTLEAF_DECAYPERIOD -> UIYT
    boolean COMMANDOVERRIDES_MEMORY -> XdCy
    boolean ENTITYSTACK_ENABLED -> Bccu
    int ENTITYSTACK_MINIMUM_GROUP -> GQRX
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> yIoK
    int ENTITYSTACK_MAXIMUM_HEALTH -> uFSd
    boolean GLASS_SHOW_BLOCKS -> XuFh
    boolean GLASS_SHOW_PARTICLES -> URJj
    react.glang.GList ALLOW_CULL -> WWpB
    react.glang.GList ALLOW_PURGE -> XJRU
    react.glang.GList ALLOW_STACKING -> tBpJ
    react.glang.GList CULL_RULES -> IgyW
    double RAI_TPS_HIGH_TICK -> ylRf
    long RAI_REDSTONE_TIME_FLOOR -> FpQG
    long RAI_REDSTONE_TIME_CEIL -> KDKS
    long RAI_REDSTONE_TIME_MUDDING -> Tpgp
    double RAI_REDSTONE_TIME_FUNCTION -> KvoI
    double RAI_REDSTONE_TIME_OVERBLEED -> xypM
    int RAI_REDSTONE_TIME_RADIUS -> Suub
    int RAI_REDSTONE_TIME_PROPIGATION -> HduC
    long RAI_HOPPER_TIME_FLOOR -> wvlk
    long RAI_HOPPER_TIME_CEIL -> TgwQ
    long RAI_HOPPER_TIME_MUDDING -> Ixxq
    double RAI_HOPPER_TIME_FUNCTION -> lDJP
    double RAI_HOPPER_TIME_OVERBLEED -> FopT
    int RAI_HOPPER_TIME_RADIUS -> Grrs
    int RAI_HOPPER_TIME_PROPIGATION -> SBqJ
    int RAI_ENTITY_CHUNK_MULTIPLIER -> avnV
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> idqv
    int RAI_ENTITY_CHUNK_RADIUS -> aTjs
    long RAI_FLUID_TIME_FLOOR -> Keme
    long RAI_FLUID_TIME_CEIL -> VUMH
    long RAI_FLUID_TIME_MUDDING -> PAww
    double RAI_FLUID_TIME_FUNCTION -> IVvd
    double RAI_FLUID_TIME_OVERBLEED -> nkrD
    int RAI_FLUID_TIME_RADIUS -> jVss
    int RAI_FLUID_TIME_PROPIGATION -> nlRa
    double SMEAR_TICK_ENTITIES_MAX_TICK -> ySDB
    double SMEAR_TICK_TILES_MAX_TICK -> LXSJ
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> lvpY
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> AGRF
    double SMEAR_TICK_ENTITIES_AMOUNT -> iCSn
    double SMEAR_TICK_TILES_AMOUNT -> mrCs
    boolean SMEAR_TICK_ENTITIES_ENABLE -> pOxW
    boolean SMEAR_TICK_TILES_ENABLE -> KUPN
    boolean HOPPER_OVERTICK_ENABLE -> YgJC
    boolean USE_WORLD_CONFIGS -> uxyp
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> QyDl
    long RAI_CHUNK_TIME_CEIL -> WGPp
    long RAI_CHUNK_TIME_MUDDING -> TNiN
    double RAI_CHUNK_TIME_FUNCTION -> Ynxs
    double RAI_CHUNK_TIME_OVERBLEED -> ElqE
    int RAI_CHUNK_TIME_RADIUS -> MdHO
    int RAI_CHUNK_TIME_PROPIGATION -> miSE
    boolean RAI_CHUNK_TIME_PROPIGATE -> vskv
    boolean RAI_FLUID_TIME_PROPIGATE -> saqW
    boolean RAI_ENTITY_PROPIGATE -> fKJp
    boolean RAI_HOPPER_TIME_PROPIGATE -> qBXx
    boolean RAI_REDSTONE_TIME_PROPIGATE -> ryBN
    boolean hrld -> JAJW
    boolean rns -> HCUC
    boolean rrl -> gpQc
    39:648:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    653:670:void doTrack(org.bukkit.plugin.Plugin) -> rfxw
    675:697:void onRead(org.bukkit.plugin.Plugin) -> BuBg
    701:731:void read(java.io.File,boolean) -> rfxw
    735:752:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> rfxw
    757:765:void closeWorldConfig(org.bukkit.World) -> BuBg
    770:883:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> rfxw
    888:925:react.surge.cluster.DataCluster defaultConfig(boolean) -> rfxw
    930:1009:react.glang.GList getDefaultEntitiesForStacking() -> rfxw
    1014:1033:react.glang.GList getDefaultEntitiesForCulling() -> BuBg
    1038:1075:react.glang.GList getDefaultEntitiesForRemoval() -> uhSQ
    1080:1109:react.glang.GList getDefaultCullRules() -> Jshh
react.Config$1 -> rfxw$1:
    java.io.File val$fConfig -> qKKI
    java.io.File val$fConfigExperimental -> oEDl
    org.bukkit.plugin.Plugin val$main -> cccd
    1:656:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    661:665:void run() -> run
react.Config$2 -> rfxw$2:
    react.api.WorldConfig val$wc -> BtiE
    org.bukkit.World val$w -> Plnf
    1:742:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    747:748:void run() -> run
react.Gate -> BuBg:
    react.glang.GMap defaultSettings -> offV
    react.glang.GSet refresh -> BItW
    react.glang.GSet destroy -> XkvA
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> McfM
    42:44:void <clinit>() -> <clinit>
    40:40:void <init>() -> <init>
    48:138:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> rfxw
    144:175:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> rfxw
    180:180:int getChunkCountForView() -> gUxe
    185:185:int getMaxChunksForView() -> LiNY
    190:190:boolean hasFawe() -> LWlN
    195:216:void tickEntityNextTickListTick(org.bukkit.World) -> uhSQ
    220:224:void resetEntityMaxTick(org.bukkit.World) -> Jshh
    228:228:int getEntityTickMax(org.bukkit.World) -> gUxe
    233:233:int getTileTickMax(org.bukkit.World) -> LiNY
    238:256:void tweakEntityTickMax(org.bukkit.World,int) -> rfxw
    260:277:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> rfxw
    282:286:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> rfxw
    290:302:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> rfxw
    307:311:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> BuBg
    315:333:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> rfxw
    337:341:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> LWlN
    346:349:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> rfxw
    354:357:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> BuBg
    362:362:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> uhSQ
    367:367:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> Jshh
    372:372:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> gUxe
    377:377:boolean isBadForUnloading() -> MuBe
    382:382:boolean canUnload(org.bukkit.World,int,int) -> rfxw
    389:405:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    411:422:void unloadChunk(org.bukkit.World,int,int) -> BuBg
    426:442:void removeEntity(org.bukkit.entity.Entity) -> rfxw
    446:462:void purgeEntity(org.bukkit.entity.Entity) -> BuBg
    466:482:void cullEntity(org.bukkit.entity.Entity) -> uhSQ
    487:504:void updateBlock(org.bukkit.block.Block) -> rfxw
    508:512:java.lang.String header(java.lang.String,react.surge.util.C) -> rfxw
    517:517:java.lang.String header(react.surge.util.C) -> rfxw
    523:527:void updateFluid(org.bukkit.block.Block) -> BuBg
    531:532:void refresh(org.bukkit.Chunk) -> BuBg
    537:556:void refreshChunks() -> CoUX
    560:561:void sendBlockChange(org.bukkit.Location) -> rfxw
    40:40:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> UYvJ
react.Gate$1 -> BuBg$1:
    react.api.SelectorPosition val$sel -> wKyr
    react.glang.Callback val$prog -> BlWq
    react.glang.Callback val$cb -> sjas
    1:48:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    53:136:void run() -> run
react.Gate$1$1 -> BuBg$1$1:
    react.Gate$1 this$1 -> sbQj
    java.lang.Object val$o -> vbig
    java.lang.reflect.Constructor val$vectorConstruct -> BBEF
    java.lang.reflect.Constructor val$cuboidConstruct -> tKbU
    java.lang.reflect.Method val$faweFixMethod -> Jsph
    java.lang.Integer[] val$total -> ogKI
    java.lang.Integer[] val$sof -> RQTy
    react.glang.Callback val$prog -> BlWq
    java.lang.Integer val$tot -> wDMr
    1:80:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    87:105:void run() -> run
react.Gate$1$2 -> BuBg$1$2:
    react.Gate$1 this$1 -> sbQj
    react.glang.Callback val$prog -> BlWq
    react.glang.Callback val$cb -> sjas
    java.lang.Integer[] val$total -> ogKI
    1:109:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    116:124:void run() -> run
react.Gate$2 -> BuBg$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> RbVg
    290:290:void <clinit>() -> <clinit>
react.Info -> uhSQ:
    java.lang.String CORE_REACT_DOT -> hbVT
    java.lang.String CORE_NAME -> jqNB
    java.lang.String CORE_CACHE -> HCXG
    java.lang.String WORLD_CONFIGS -> MRgY
    java.lang.String CORE_DOTYML -> CxON
    java.lang.String COMMAND_REACT -> PKOr
    java.lang.String COMMAND_RAI -> hIDO
    java.lang.String COMMAND_ACT_DESCRIPTION -> Fxfs
    java.lang.String COMMAND_ACT -> eGix
    java.lang.String COMMAND_ACT_ALIAS_1 -> lvrU
    java.lang.String COMMAND_ACT_ALIAS_2 -> lfPg
    java.lang.String COMMAND_ACT_USAGE -> Vvqr
    java.lang.String COMMAND_HELP_DESCRIPTION -> skEe
    java.lang.String COMMAND_HELP -> ofhk
    java.lang.String COMMAND_HELP_ALIAS_1 -> bObR
    java.lang.String COMMAND_HELP_ALIAS_2 -> xFoG
    java.lang.String COMMAND_HELP_USAGE -> Fgcr
    java.lang.String COMMAND_STATUS_DESCRIPTION -> Yfit
    java.lang.String COMMAND_STATUS -> VMAE
    java.lang.String COMMAND_STATUS_ALIAS_1 -> BSIB
    java.lang.String COMMAND_STATUS_ALIAS_2 -> LObs
    java.lang.String COMMAND_STATUS_USAGE -> FNRe
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> KDPO
    java.lang.String COMMAND_CPUSCORE -> eGiY
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> cdFu
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> nJTE
    java.lang.String COMMAND_CPUSCORE_USAGE -> EueV
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> SCXm
    java.lang.String COMMAND_RELOAD -> EeEL
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> WGUT
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> ySHA
    java.lang.String COMMAND_RELOAD_USAGE -> ghGC
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> klCA
    java.lang.String COMMAND_MONITOR -> BBGx
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> dVKw
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> AaHW
    java.lang.String COMMAND_MONITOR_USAGE -> fKQK
    java.lang.String COMMAND_VERSION_DESCRIPTION -> cSHw
    java.lang.String COMMAND_VERSION -> OiqN
    java.lang.String COMMAND_VERSION_ALIAS_1 -> rhEU
    java.lang.String COMMAND_VERSION_ALIAS_2 -> rFAm
    java.lang.String COMMAND_VERSION_USAGE -> tCWI
    java.lang.String COMMAND_MAP_DESCRIPTION -> ksqU
    java.lang.String COMMAND_MAP -> tKfc
    java.lang.String COMMAND_MAP_ALIAS_1 -> BdLh
    java.lang.String COMMAND_MAP_ALIAS_2 -> NUji
    java.lang.String COMMAND_MAP_USAGE -> EKQQ
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> BJYh
    java.lang.String COMMAND_TOPCHUNK -> cBFM
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> xWrq
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> xXSq
    java.lang.String COMMAND_TOPCHUNK_USAGE -> BclA
    java.lang.String COMMAND_GLASS_DESCRIPTION -> gMqg
    java.lang.String COMMAND_GLASS -> piml
    java.lang.String COMMAND_GLASS_ALIAS_1 -> Mkye
    java.lang.String COMMAND_GLASS_ALIAS_2 -> hkHH
    java.lang.String COMMAND_GLASS_USAGE -> JcRP
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> WXUf
    java.lang.String COMMAND_CBLAME -> HKia
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> clYb
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> MJXU
    java.lang.String COMMAND_CBLAME_USAGE -> VUSK
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> mPGU
    java.lang.String COMMAND_ACTIONLOG -> xWuh
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> rovl
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> INoT
    java.lang.String COMMAND_ACTIONLOG_USAGE -> xiXW
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> IOOs
    java.lang.String COMMAND_CAPABILITIES -> MIyl
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> EKSx
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> QVgJ
    java.lang.String COMMAND_CAPABILITIES_USAGE -> lDQy
    java.lang.String MSG_PERMISSION -> YVNp
    java.lang.String MSG_MONITORING_STARTED -> AqkB
    java.lang.String MSG_MONITORING_STOPPED -> TOOs
    java.lang.String MSG_ACTIONLOGGING_STARTED -> YDkp
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> BdMP
    java.lang.String MSG_GLASS_STARTED -> hHgS
    java.lang.String MSG_GLASS_STOPPED -> lDSH
    org.bukkit.Color COLOR_HOPPER -> YxOy
    org.bukkit.Color COLOR_BLOCK_UPDATE -> xrIK
    org.bukkit.Color COLOR_BLOCK_FROMTO -> cJWy
    org.bukkit.Color COLOR_BLOCK_BURN -> NpAK
    org.bukkit.Color COLOR_BLOCK_DECAY -> fudq
    org.bukkit.Color COLOR_BLOCK_FORM -> DbCT
    java.lang.String NAME_TICK -> xOcs
    java.lang.String NAME_MEMORY -> hYgW
    java.lang.String NAME_CHUNKS -> bGVM
    java.lang.String NAME_ENTITIES -> Puew
    java.lang.String STATE_MONITORING_TAB -> lDQY
    java.lang.String STATE_MONITORING_ENABLED -> rhEq
    java.lang.String STATE_MONITORING_HIGH -> FNWH
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> RHgo
    java.lang.String STATE_MAPPING_ENABLED -> Qxia
    java.lang.String STATE_SOUND_PLAYS -> ThaJ
    java.lang.String STATE_MONITORING_POSTED -> WWvi
    java.lang.String STATE_MONITORING_LASTTAB -> iCYK
    java.lang.String STATE_GLASSES_ENABLED -> KTuI
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> QFEk
    java.lang.String STATE_PLAYER_HOTBAR -> qTEW
    java.lang.String STATE_PLAYER_SHIFT -> CEPL
    java.lang.String STATE_PLAYER_SCROLL -> RHjY
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> QhKY
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> nAif
    java.lang.String PERM_ACCESS -> QgjW
    java.lang.String PERM_MONITOR -> cBJv
    java.lang.String PERM_MONITOR_TITLE -> jqTA
    java.lang.String PERM_MONITOR_ACTIONLOG -> WFxW
    java.lang.String PERM_MONITOR_MAP -> ntoC
    java.lang.String PERM_MONITOR_ENVIRONMENT -> Vewl
    java.lang.String PERM_MONITOR_GLASSES -> vARA
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> inPg
    java.lang.String PERM_ACT -> hjmI
    java.lang.String PERM_RAI -> fJsP
    java.lang.String PERM_RAI_CONTROL -> gyLY
    java.lang.String PERM_RAI_ACCESS -> tLLY
    java.lang.String PERM_RAI_MONITOR -> oDkx
    java.lang.String PERM_RELOAD -> HUAD
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> vbrk
    java.lang.String SAMPLER_REDSTONE_TICK -> qvGh
    java.lang.String SAMPLER_ENTITY_TIME -> pQBH
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> cuOx
    java.lang.String SAMPLER_TILE_TIME_LOCK -> dgQf
    java.lang.String SAMPLER_TILE_TIME -> VLff
    java.lang.String SAMPLER_TILE_DROPTICK -> DsEw
    java.lang.String SAMPLER_ENTITY_DROPTICK -> YDln
    java.lang.String SAMPLER_REDSTONE_SECOND -> RIIu
    java.lang.String SAMPLER_REDSTONE_TIME -> vbrX
    java.lang.String SAMPLER_PHYSICS_TIME -> gyKP
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> TqTE
    java.lang.String SAMPLER_HOPPER_TICK -> WPHq
    java.lang.String SAMPLER_HOPPER_SECOND -> DGpy
    java.lang.String SAMPLER_HOPPER_TIME -> PTEl
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> esCv
    java.lang.String SAMPLER_FLUID_TICK -> LrMR
    java.lang.String SAMPLER_FLUID_SECOND -> qdct
    java.lang.String SAMPLER_FLUID_TIME -> VUVr
    java.lang.String SAMPLER_TPS -> ETFk
    java.lang.String SAMPLER_TICK -> gggm
    java.lang.String SAMPLER_TIU -> xWuv
    java.lang.String SAMPLER_MEM -> gNVW
    java.lang.String SAMPLER_FREEMEM -> MAkS
    java.lang.String SAMPLER_MAXMEM -> WPJB
    java.lang.String SAMPLER_ALLOCMEM -> UIbk
    java.lang.String SAMPLER_MAHS -> fmUy
    java.lang.String SAMPLER_CHK -> wLcX
    java.lang.String SAMPLER_ATASK -> EBdd
    java.lang.String SAMPLER_STASK -> NNBg
    java.lang.String SAMPLER_CHK_TIME -> UJFW
    java.lang.String SAMPLER_EXPLOSION_TIME -> qeHj
    java.lang.String SAMPLER_CHKS -> gyMo
    java.lang.String SAMPLER_ENT -> ktYK
    java.lang.String SAMPLER_ENTLIV -> xWyw
    java.lang.String SAMPLER_ENTDROP -> LOkw
    java.lang.String SAMPLER_ENTTILE -> XdPi
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> TGBw
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> CofM
    java.lang.String ACTION_CULL_ENTITIES_NAME -> vIcS
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> FWMR
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> Yoda
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> JlJb
    java.lang.String ACTION_UPDATE_FLUID_NAME -> TFbm
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> ndPF
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> Gjpk
    java.lang.String ACTION_LOCK_FLUID_STATUS -> qBcb
    java.lang.String ACTION_LOCK_FLUID_NAME -> lDUt
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> ebEQ
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> ogQu
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> kbuY
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> vbuG
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> PdiC
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> xPIk
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> lnid
    java.lang.String ACTION_LOCK_HOPPER_NAME -> UQtm
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> DjXF
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> UASy
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> ArQH
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> GtBO
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> erfO
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> ghKT
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> bPJr
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> xrLV
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> dUpQ
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> DGsm
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> ggjW
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> NwuF
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> eiwb
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> DXwd
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> pHUN
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> Cwwj
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> TFeA
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> Qxow
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> xqnf
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> fdjQ
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> gFKQ
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> RYor
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> pHUU
    java.lang.String ACTION_FIX_LIGHTING_NAME -> Gbar
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> OjYi
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> RHoB
    java.lang.String ACTION_COLLECT_GARBAGE -> XmDh
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> oMbG
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> nSOl
    6:6:void <init>() -> <init>
    8:241:void <clinit>() -> <clinit>
react.Lang -> Jshh:
    java.lang.String BUNDLE_NAME -> Qgno
    java.util.ResourceBundle RESOURCE_BUNDLE -> PCIm
    java.util.ResourceBundle PRIMARY_BUNDLE -> Ukjq
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> gUxe:
    react.React instance -> ArQi
    react.controller.SampleController sampleController -> Sedq
    react.controller.PlayerController playerController -> NMcH
    react.controller.MonitorController monitorController -> SwFH
    react.controller.CommandController commandController -> PShf
    react.controller.ActionController actionController -> ifCa
    react.controller.FastDecayController fastDecayController -> NVTV
    react.controller.EntityStackController entityStackController -> XAmk
    react.controller.GlassController glassController -> TXFX
    react.controller.EntityCullController entityCullController -> CpHL
    react.controller.SpikeController spikeController -> fSgw
    react.controller.SecurityController securityController -> loLI
    react.controller.RedstoneController redstoneController -> Tpvl
    react.controller.HopperController hopperController -> ESir
    react.controller.PhysicsController physicsController -> lMHp
    react.controller.TickTimeController tickTimeController -> PBgm
    react.controller.RAIController raiController -> JRXm
    react.controller.FluidController fluidController -> stDW
    react.controller.ChunkController chunkController -> HfHQ
    react.controller.GraphController graphController -> yAnw
    react.controller.ChronophyFluidController fluidChronophyController -> DbKx
    react.controller.EventController eventController -> Smve
    react.controller.BlockInjectController blockInjectController -> LYCF
    react.controller.SmearTickController smearTickController -> PCLJ
    react.controller.FeatureController featureController -> jhgm
    react.controller.HopperOvertickController hopperPlungeController -> ebJe
    react.controller.BenchmarkController benchmarkController -> jFdq
    react.controller.LanguageController languageController -> FySx
    react.controller.RemoteController remoteController -> ivgE
    react.controller.ExplosiveController explosiveController -> nRpu
    react.controller.WorldController worldController -> mPOU
    44:44:void <init>() -> <init>
    142:150:void enable() -> enable
    156:156:void disable() -> disable
react.React$1 -> gUxe$1:
    react.React this$0 -> SDEN
    143:143:void <init>(react.React) -> <init>
    147:148:void run() -> run
react.action.ActionCollectGarbage -> LiNY:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
react.action.ActionCollectGarbage$1 -> LiNY$1:
    react.action.source.IActionSource val$source -> dNFN
    react.action.ActionCollectGarbage this$0 -> eGvd
    30:30:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> LiNY$1$1:
    long val$mbnex -> eixc
    long val$mbmem -> yRpQ
    react.action.ActionCollectGarbage$1 this$1 -> Xlcy
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> LWlN:
    long ms -> dVUP
    int lcd -> oEST
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
    25:25:long access$002(react.action.ActionCullEntities,long) -> rfxw
    25:25:int access$100(react.action.ActionCullEntities) -> rfxw
    25:25:long access$000(react.action.ActionCullEntities) -> BuBg
react.action.ActionCullEntities$1 -> LWlN$1:
    react.action.ActionCullEntities this$0 -> hjrG
    37:37:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> uqDO
    37:37:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> LWlN$2:
    react.action.ActionCullEntities this$0 -> hjrG
    49:49:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> uqDO
    49:49:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> LWlN$3:
    react.glang.FinalInteger val$completed -> jXFq
    react.glang.FinalInteger val$total -> Tyif
    react.glang.FinalInteger val$totalCulled -> qCHt
    react.glang.FinalInteger val$totalChunked -> EBix
    react.action.source.IActionSource val$source -> dNFN
    react.action.ActionCullEntities this$0 -> hjrG
    105:105:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> LWlN$4:
    react.action.source.IActionSource val$source -> dNFN
    react.glang.FinalInteger val$totalCulled -> qCHt
    react.glang.FinalInteger val$totalChunked -> EBix
    react.action.ActionCullEntities this$0 -> hjrG
    137:137:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> MuBe:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
react.action.ActionFixLighting$1 -> MuBe$1:
    react.action.ActionFixLighting this$0 -> jFde
    29:29:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> uqDO
    29:29:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> MuBe$2:
    react.action.source.IActionSource val$source -> dNFN
    int val$ch -> EvPL
    react.action.ActionFixLighting this$0 -> jFde
    78:78:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> rfxw
    78:78:void run(java.lang.Object) -> rfxw
react.action.ActionFixLighting$3 -> MuBe$3:
    react.action.ActionFixLighting this$0 -> jFde
    89:89:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> rfxw
    89:89:void run(java.lang.Object) -> rfxw
react.action.ActionLockFluid -> CoUX:
    int lcd -> oEST
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
react.action.ActionLockFluid$1 -> CoUX$1:
    react.action.ActionLockFluid this$0 -> QpaX
    31:31:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> uqDO
    31:31:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> CoUX$2:
    react.action.ActionLockFluid this$0 -> QpaX
    43:43:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> uqDO
    43:43:java.lang.Object get() -> get
react.action.ActionLockHopper -> UYvJ:
    int lcd -> oEST
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
react.action.ActionLockHopper$1 -> UYvJ$1:
    react.action.ActionLockHopper this$0 -> fBiJ
    31:31:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> uqDO
    31:31:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> UYvJ$2:
    react.action.ActionLockHopper this$0 -> fBiJ
    43:43:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> uqDO
    43:43:java.lang.Object get() -> get
react.action.ActionLockRedstone -> uqDO:
    int lcd -> oEST
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
react.action.ActionLockRedstone$1 -> uqDO$1:
    react.action.ActionLockRedstone this$0 -> jGEM
    31:31:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> uqDO
    31:31:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> uqDO$2:
    react.action.ActionLockRedstone this$0 -> jGEM
    43:43:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> uqDO
    43:43:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> UsiF:
    long ms -> dVUP
    int lcd -> oEST
    boolean fail -> cRqX
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> BuBg
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> rfxw
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> rfxw
    23:23:int access$200(react.action.ActionPurgeChunks) -> BuBg
    23:23:long access$100(react.action.ActionPurgeChunks) -> uhSQ
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> rfxw
react.action.ActionPurgeChunks$1 -> UsiF$1:
    react.action.ActionPurgeChunks this$0 -> Ipyl
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> uqDO
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> UsiF$2:
    int val$dk -> JIie
    java.lang.Object val$j -> DakG
    react.glang.FinalInteger val$acompleted -> jXFe
    react.glang.FinalInteger val$completed -> jXFq
    react.glang.FinalInteger val$total -> Tyif
    react.glang.FinalInteger val$totalCulled -> qCHt
    react.glang.FinalInteger val$totalChunked -> EBix
    react.action.source.IActionSource val$source -> dNFN
    react.api.ISelector[] val$selectors -> hcBT
    react.action.ActionPurgeChunks this$0 -> Ipyl
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> UsiF$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> eXvs
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> UsiF$3:
    react.action.source.IActionSource val$source -> dNFN
    react.glang.FinalInteger val$acompleted -> jXFe
    react.action.ActionPurgeChunks this$0 -> Ipyl
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> UsiF$4:
    org.bukkit.Chunk val$chunk -> MtxV
    java.lang.Runnable val$cb -> TOYb
    react.action.ActionPurgeChunks this$0 -> Ipyl
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> AWlC:
    long ms -> dVUP
    int lcd -> oEST
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> BuBg
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> rfxw
    27:27:int access$100(react.action.ActionPurgeEntities) -> rfxw
    27:27:long access$000(react.action.ActionPurgeEntities) -> BuBg
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> rfxw
react.action.ActionPurgeEntities$1 -> AWlC$1:
    react.action.ActionPurgeEntities this$0 -> HTga
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> uqDO
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> AWlC$2:
    react.action.ActionPurgeEntities this$0 -> HTga
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> uqDO
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> AWlC$3:
    react.glang.FinalInteger val$completed -> jXFq
    react.glang.FinalInteger val$total -> Tyif
    react.glang.FinalInteger val$totalCulled -> qCHt
    react.glang.FinalInteger val$totalChunked -> EBix
    react.action.source.IActionSource val$source -> dNFN
    react.action.ActionPurgeEntities this$0 -> HTga
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> AWlC$4:
    react.action.source.IActionSource val$source -> dNFN
    react.glang.FinalInteger val$totalCulled -> qCHt
    react.glang.FinalInteger val$totalChunked -> EBix
    react.action.ActionPurgeEntities this$0 -> HTga
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> AWlC$5:
    org.bukkit.entity.Entity val$i -> fBkX
    react.glang.FinalInteger val$cu -> PuqM
    int val$k -> VxCa
    org.bukkit.Chunk val$chunk -> MtxV
    java.lang.Runnable val$cb -> TOYb
    react.action.ActionPurgeEntities this$0 -> HTga
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> SBmp:
    int lcd -> oEST
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
react.action.ActionUnlockFluid$1 -> SBmp$1:
    react.action.ActionUnlockFluid this$0 -> Qpcs
    30:30:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> uqDO
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> LhnC:
    int lcd -> oEST
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
react.action.ActionUnlockHopper$1 -> LhnC$1:
    react.action.ActionUnlockHopper this$0 -> Kfap
    30:30:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> uqDO
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> SBnO:
    int lcd -> oEST
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
react.action.ActionUnlockRedstone$1 -> SBnO$1:
    react.action.ActionUnlockRedstone this$0 -> gEmt
    30:30:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> uqDO
    30:30:java.lang.Object get() -> get
react.action.source.AccessActionSource -> lvjD:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> rfxw
    26:33:void sendResponseSuccess(java.lang.String) -> BuBg
    38:45:void sendResponseError(java.lang.String) -> uhSQ
    50:57:void sendResponseActing(java.lang.String) -> Jshh
react.action.source.ActionHandle -> IyWb:
    react.action.source.ActionHandle AUTOMATIC -> Pdod
    react.action.source.ActionHandle MANUAL -> sAAk
    react.action.source.ActionHandle MUTEX -> QxtU
    react.action.source.ActionHandle[] $VALUES -> ebKo
    3:3:react.action.source.ActionHandle[] values() -> values
    3:3:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.action.source.ConsoleActionSource -> wCdc:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> rfxw
    18:19:void sendResponseSuccess(java.lang.String) -> BuBg
    24:25:void sendResponseError(java.lang.String) -> uhSQ
    30:31:void sendResponseActing(java.lang.String) -> Jshh
react.action.source.IActionSource -> owcC:
    void sendResponse(java.lang.String) -> rfxw
    void sendResponseSuccess(java.lang.String) -> BuBg
    void sendResponseError(java.lang.String) -> uhSQ
    void sendResponseActing(java.lang.String) -> Jshh
react.action.source.PlayerActionSource -> WhmP:
    org.bukkit.entity.Player p -> FyVR
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> rfxw
    30:31:void sendResponseSuccess(java.lang.String) -> BuBg
    36:37:void sendResponseError(java.lang.String) -> uhSQ
    42:43:void sendResponseActing(java.lang.String) -> Jshh
react.action.source.RAIActionSource -> Hdqq:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> rfxw
    16:17:void sendResponseSuccess(java.lang.String) -> BuBg
    22:23:void sendResponseError(java.lang.String) -> uhSQ
    28:29:void sendResponseActing(java.lang.String) -> Jshh
react.api.Action -> bXKh:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> ebKn
    java.lang.String[] nodes -> DsPS
    react.action.source.ActionHandle handle -> SLVr
    react.api.ActionState state -> jpyw
    react.api.ActionTargetType target -> KUaL
    react.api.ActionType type -> bXcB
    react.action.source.IActionSource currentSource -> lMNU
    double progress -> LHDE
    react.glang.GMap defaultSelectors -> ArVs
    28:29:void <init>(react.api.ActionType) -> <init>
    31:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> rfxw
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> rfxw
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> UsiF
    94:94:react.api.ActionState getState() -> AWlC
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> gUxe
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> SBmp
    130:130:react.api.ActionType getType() -> LhnC
    136:136:react.glang.GMap getDefaultSelectors() -> SBnO
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> BuBg
    189:190:void completeAction() -> lvjD
    195:195:react.action.source.IActionSource getCurrentSource() -> IyWb
    201:201:java.lang.String[] getNodes() -> wCdc
    207:208:void setNodes(java.lang.String[]) -> rfxw
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
react.api.ActionAlreadyRunningException -> vtFp:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> VTgS:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> XkoF:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> VCed:
    react.api.ActionState IDLE -> ogWf
    react.api.ActionState RUNNING -> hHos
    react.api.ActionState[] $VALUES -> sYpj
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> KThF:
    react.api.ActionTargetType POSITIONAL -> NgYp
    react.api.ActionTargetType SYSTEM -> ySRe
    react.api.ActionTargetType[] $VALUES -> inWX
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> LGIu:
    react.api.ActionType FIX_LIGHTING -> ctux
    react.api.ActionType UNLOCK_FLUID -> PBkw
    react.api.ActionType LOCK_FLUID -> LYDO
    react.api.ActionType UNLOCK_HOPPER -> dDuG
    react.api.ActionType LOCK_HOPPER -> OrnF
    react.api.ActionType UNLOCK_REDSTONE -> iUHu
    react.api.ActionType LOCK_REDSTONE -> fmbS
    react.api.ActionType CULL_ENTITIES -> fmat
    react.api.ActionType COLLECT_GARBAGE -> teiU
    react.api.ActionType PURGE_ENTITIES -> GtKL
    react.api.ActionType PURGE_CHUNKS -> TiNc
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> SLVr
    react.api.ActionTargetType target -> KUaL
    react.api.ActionType[] $VALUES -> dpLb
    6:6:react.api.ActionType[] values() -> values
    6:6:react.api.ActionType valueOf(java.lang.String) -> valueOf
    26:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> owcC
    50:50:react.api.ActionTargetType getTarget() -> SBmp
    6:18:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> kACC:
    react.api.ActivationRangeType ANIMALS -> rVqT
    react.api.ActivationRangeType MONSTERS -> FVtX
    react.api.ActivationRangeType MISC -> uGHw
    react.api.ActivationRangeType[] $VALUES -> aEAW
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> kYtA:
    int value() -> value
react.api.Async -> CfcL:
react.api.CPUBenchmark -> WNyF:
    org.bukkit.command.CommandSender sender -> sender
    int score -> kuBC
    java.lang.Runnable onFinish -> aUbB
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> WhmP
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> rfxw
    10:10:int access$100(react.api.CPUBenchmark) -> BuBg
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> uhSQ
react.api.CPUBenchmark$1 -> WNyF$1:
    react.api.CPUBenchmark this$0 -> sHsJ
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> WNyF$2:
    react.api.CPUBenchmark this$0 -> sHsJ
    78:78:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> TyTt:
    react.api.CPUResult ULTRA_SLOW -> FyYA
    react.api.CPUResult VERY_SLOW -> DjaY
    react.api.CPUResult SLOW -> LjGM
    react.api.CPUResult AVERAGE -> hISd
    react.api.CPUResult GOOD -> yBTF
    react.api.CPUResult FAST -> PBmh
    react.api.CPUResult VERY_FAST -> KLox
    react.api.CPUResult ULTRA_FAST -> jiMH
    java.lang.String m -> nlhI
    react.api.CPUResult[] $VALUES -> JJMy
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> rfxw
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> nJKR:
    react.glang.GMap cache -> FEqd
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> BuBg
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> uhSQ
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> Hdqq
    54:54:boolean has(java.lang.Object) -> Jshh
react.api.Capability -> prTV:
    react.api.Capability DUAL_WEILD -> GHuF
    react.api.Capability SCOREBOARD -> WrVy
    react.api.Capability SCOREBOARD_ADVANCED -> vlNf
    react.api.Capability HOPPER -> sIRe
    react.api.Capability ENTITY_ATTRIBUTES -> anrU
    react.api.Capability ENTITY_AI -> KVBu
    react.api.Capability ACTION_BAR -> uXJR
    react.api.Capability ENTITY_NAMES -> fdpB
    react.api.Capability TITLE_BAR -> tKtg
    react.api.Capability CHUNK_RELIGHTING -> KEDL
    react.api.Capability MONITOR_SUBMISSIVENESS -> gqGq
    react.api.Capability ACCELERATED_PING -> sbgi
    react.api.Capability ENTITY_THROTTLING -> VwgU
    react.api.Capability TILE_THROTTLING -> nljg
    react.api.Capability PASSENGERS -> bqwo
    react.glang.GList capabilities -> UIoh
    react.surge.util.Protocol version -> SwNv
    react.api.Flavor flavor -> xHDn
    java.lang.String plugin -> RYwx
    java.lang.String name -> name
    56:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> bXKh
    100:100:boolean isFlavorCapable() -> vtFp
    105:105:boolean isVersionCapable() -> VTgS
    110:110:boolean isCapable() -> XkoF
    115:115:react.surge.util.Protocol getVersion() -> VCed
    120:120:react.api.Flavor getFlavor() -> KThF
    125:125:java.lang.String getPlugin() -> LGIu
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> rfxw
    153:167:void sendNotCapable(react.action.source.IActionSource) -> rfxw
    14:48:void <clinit>() -> <clinit>
react.api.CapabilityBasis -> FolS:
    react.api.CapabilityBasis VERSION -> ThpE
    react.api.CapabilityBasis FLAVOR -> RYyH
    react.api.CapabilityBasis PLUGIN -> QFTt
    react.api.CapabilityBasis[] $VALUES -> bXfl
    3:3:react.api.CapabilityBasis[] values() -> values
    3:3:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ChunkIssue -> Lhle:
    react.api.ChunkIssue ENTITY -> mrWt
    react.api.ChunkIssue HOPPER -> BJhm
    react.api.ChunkIssue TNT -> xifd
    react.api.ChunkIssue REDSTONE -> IXOx
    react.api.ChunkIssue FLUID -> MlmM
    react.api.ChunkIssue PHYSICS -> qTQW
    react.api.ChunkIssue[] $VALUES -> gpfj
    3:3:react.api.ChunkIssue[] values() -> values
    3:3:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:10:void <clinit>() -> <clinit>
react.api.Clip -> UcGU:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> xiJh:
    org.bukkit.command.CommandSender sender -> sender
    13:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> rfxw
    31:32:void sendResponseSuccess(java.lang.String) -> BuBg
    37:38:void sendResponseError(java.lang.String) -> uhSQ
    43:44:void sendResponseActing(java.lang.String) -> Jshh
react.api.CullList -> pHAU:
    react.glang.GSet toCull -> gOEJ
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> Jshh
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> kACC
react.api.DTest -> LFig:
    6:6:void <init>() -> <init>
    11:62:int test() -> kYtA
react.api.EntityFlag -> tdnH:
    react.api.EntityFlag NAMED -> vkqD
    react.api.EntityFlag TAMED -> YNLD
    react.api.EntityFlag STACKED -> nJgA
    react.api.EntityFlag RIDDEN -> ekAD
    react.api.EntityFlag LEASHED -> aLqQ
    java.lang.String m -> nlhI
    react.api.EntityFlag[] $VALUES -> tvjy
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> gUxe
    40:70:boolean is(org.bukkit.entity.Entity) -> LiNY
    76:76:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> UITY:
    react.glang.GSet entityTypes -> yKGT
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> CfcL
react.api.EntitySample -> CweP:
    react.glang.GMap counts -> mPTf
    react.glang.GMap sets -> Aiiw
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> WNyF
    45:45:react.glang.GList getTypes() -> TyTt
    50:57:int total() -> nJKR
    62:67:int get(org.bukkit.entity.EntityType) -> rfxw
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> BuBg
    84:96:void add(org.bukkit.entity.Entity) -> Jshh
react.api.Experimental -> LiMk:
react.api.Flavor -> NgEq:
    react.api.Flavor ANY -> HULG
    react.api.Flavor SAFE_MODE -> kJNl
    react.api.Flavor CRAFT_BUKKIT -> psQF
    react.api.Flavor BUKKIT -> WHEY
    react.api.Flavor SPIGOT -> fmcY
    react.api.Flavor SOGGY_SPIGOT -> rWTI
    react.api.Flavor PAPER_SPIGOT -> panD
    react.api.Flavor TACO_SPIGOT -> wxDg
    react.api.Flavor TORCH_SPIGOT -> aVCi
    react.api.Flavor FORGE_HACK -> nKGO
    react.api.Flavor SPONGE_HACK -> VxGc
    react.api.Flavor[] $VALUES -> ivlH
    6:6:react.api.Flavor[] values() -> values
    6:6:react.api.Flavor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> prTV
    74:79:boolean compatableWith(react.api.Flavor) -> rfxw
    84:84:java.lang.String fancyName() -> FolS
    6:18:void <clinit>() -> <clinit>
react.api.IAction -> AXOT:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> UsiF
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> BuBg
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
    react.api.ActionState getState() -> AWlC
    react.api.ActionTargetType getTarget() -> SBmp
    void setNodes(java.lang.String[]) -> rfxw
    java.lang.String[] getNodes() -> wCdc
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> gUxe
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> LhnC
    react.glang.GMap getDefaultSelectors() -> SBnO
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> rfxw
    react.api.ISelector[] biselect(react.api.ISelector[]) -> rfxw
    react.action.source.IActionSource getCurrentSource() -> IyWb
    void completeAction() -> lvjD
react.api.ICache -> LGLx:
    react.glang.GSet get(java.lang.Object) -> BuBg
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> uhSQ
    void clear() -> clear
    boolean has(java.lang.Object) -> Jshh
    react.glang.GList k() -> Hdqq
react.api.ICommand -> aDHh:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> Lhle
    java.lang.String[] getPermissions() -> UcGU
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> LiNY
    react.api.SideGate getSideGate() -> xiJh
    void registerParameterDescription(java.lang.String,java.lang.String) -> rfxw
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
react.api.IRecord -> DXga:
    java.lang.String getRecordType() -> pHAU
    long getRecordTime() -> LFig
    react.json.JSONObject toJSON() -> tdnH
    java.lang.Object getRecordObject() -> UITY
    void fromJSON(react.json.JSONObject) -> rfxw
react.api.IRecordBook -> PBXQ:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> rfxw
    long getOldestRecordTime() -> CweP
    void addRecord(react.api.IRecord) -> rfxw
    long getLatestRecordTime() -> LiMk
    int countRecords(long,long) -> rfxw
    react.glang.GMap getRecords(long,long) -> BuBg
    int purgeRecordsBefore(long) -> BuBg
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> YECP:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> NgEq
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> AXOT
    react.surge.util.C getAltColor() -> LGLx
    void setColor(react.surge.util.C,react.surge.util.C) -> rfxw
    int getInterval() -> getInterval
    void setInterval(int) -> BuBg
    void sample() -> aDHh
    java.lang.String get() -> get
    void construct() -> DXga
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> PmMF:
    react.api.SelectionMode getMode() -> PBXQ
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> gUxe
    react.glang.GSet getList() -> YECP
    react.glang.GSet getPossibilities() -> PmMF
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> LiNY
    java.lang.String getName() -> getName
react.api.Injection -> vkXD:
    react.api.InjectionMethod value() -> vkXD
react.api.InjectionMethod -> yuAt:
    react.api.InjectionMethod SWAP -> cKGv
    react.api.InjectionMethod SUBSTRATE -> gyVn
    react.api.InjectionMethod RELOAD -> ncwq
    react.api.InjectionMethod[] $VALUES -> kdAT
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> vQeY:
    java.lang.String value() -> value
react.api.MSampler -> CUbt:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> yuAt
react.api.MonitorHeading -> weif:
    react.api.ISampler head -> dNKR
    react.glang.GList children -> IFoT
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> rfxw
    27:27:react.api.ISampler getHead() -> vQeY
    32:33:void setHead(react.api.ISampler) -> BuBg
    37:37:react.glang.GList getChildren() -> CUbt
    42:42:java.lang.String getHeadText() -> weif
    47:60:java.lang.String getChildText() -> wThV
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> rfxw
react.api.NoiseGenerator -> wThV:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> CECB:
    react.api.NoiseGenerator[] octaves -> nRyo
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> CECB
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> ERyj:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> HoAc
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> ERyj
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> ylPV:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> rfxw
react.api.Permissable -> jOCQ:
    react.api.Permissable ACCESS -> QqJs
    react.api.Permissable MONITOR -> kIqQ
    react.api.Permissable MONITOR_TITLE -> RQjb
    react.api.Permissable MONITOR_ACTIONLOG -> KxKN
    react.api.Permissable MONITOR_MAP -> TytL
    react.api.Permissable MONITOR_ENVIRONMENT -> RAIm
    react.api.Permissable MONITOR_GLASSES -> AjLF
    react.api.Permissable MONITOR_CHUNK_BLAME -> WXhP
    react.api.Permissable RAI_MONITOR -> rhVq
    react.api.Permissable RAI_CONTROL -> AYKm
    react.api.Permissable RAI_ACCESS -> VMUK
    react.api.Permissable RAI -> DjdC
    react.api.Permissable ACT -> rqHe
    react.api.Permissable RELOAD -> wxGd
    java.lang.String node -> KVFc
    react.api.Permissable[] $VALUES -> nRxr
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    27:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> rfxw
    46:46:java.lang.String getNode() -> ylPV
    7:22:void <clinit>() -> <clinit>
react.api.PluginSelfDeleter -> IqGj:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> fuvE
    java.lang.Runnable r -> xrYG
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> rfxw
react.api.ReactCommand -> VKxE:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> HTmU
    java.lang.String usage -> IGPM
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> tUJt
    react.api.SideGate sideGate -> vJOf
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> LiNY
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> rfxw
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> Lhle
    47:47:java.lang.String[] getPermissions() -> UcGU
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> xiJh
react.api.ReactException -> Ywdg:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> Dqwv:
    react.glang.GMap keystore -> QVvj
    boolean monitoring -> monitoring
    boolean highMonitor -> RAKc
    boolean actionlogging -> stOC
    boolean glasses -> fKeL
    boolean mapping -> eHbJ
    int monitorSelection -> YWAq
    int plays -> VLwA
    boolean monitorPosted -> nJlI
    int monitorLastSelection -> AXlE
    int switchNotification -> UIsg
    int hotbarSlot -> qvWw
    boolean shift -> NpUJ
    int scroll -> jiSY
    double lastHeight -> IrFr
    boolean heightMovement -> vlUi
    org.bukkit.entity.Player p -> FyVR
    42:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> jOCQ
    128:128:boolean isMapping() -> IqGj
    133:133:org.bukkit.entity.Player getP() -> VKxE
    138:140:void setMonitoring(boolean) -> BuBg
    144:146:void setMapping(boolean) -> uhSQ
    150:150:int getMonitorSelection() -> Ywdg
    155:157:void setMonitorSelection(int) -> uhSQ
    161:161:int getHotbarSlot() -> Dqwv
    166:168:void setHotbarSlot(int) -> Jshh
    172:172:boolean isShifting() -> GbPb
    177:179:void setShifting(boolean) -> Jshh
    183:183:boolean isShift() -> turL
    188:190:void setShift(boolean) -> gUxe
    194:194:int getScroll() -> iSoF
    199:201:void setScroll(int) -> gUxe
    205:205:int getMonitorLastSelection() -> Husy
    210:212:void setMonitorLastSelection(int) -> LiNY
    216:217:void setP(org.bukkit.entity.Player) -> BuBg
    221:221:double getLastHeight() -> ckqE
    226:228:void setLastHeight(double) -> rfxw
    232:232:boolean isHeightMovement() -> XJOX
    237:239:void setHeightMovement(boolean) -> LiNY
    243:243:int getSwitchNotification() -> WiNv
    248:250:void setSwitchNotification(int) -> LWlN
    254:254:boolean getMonitorPosted() -> mXLH
    259:261:void setMonitorPosted(boolean) -> LWlN
    265:265:int getPlays() -> jVql
    270:272:void setPlays(int) -> MuBe
    276:276:boolean isGlasses() -> cuCI
    281:283:void setGlasses(boolean) -> MuBe
    287:287:boolean isActionlogging() -> qJdx
    292:294:void setActionlogging(boolean) -> CoUX
    24:40:void <clinit>() -> <clinit>
react.api.Record -> GbPb:
    java.lang.String recordType -> Pmig
    long recordTime -> iUOQ
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> pHAU
    32:32:long getRecordTime() -> LFig
    38:38:java.lang.Object getRecordObject() -> UITY
    react.json.JSONObject toJSON() -> tdnH
    void fromJSON(react.json.JSONObject) -> rfxw
react.api.RecordBook -> turL:
    java.io.File recordFile -> QEvc
    react.json.JSONObject js -> lxIt
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> rfxw
    79:87:react.api.IRecord getRecord(long) -> rfxw
    react.api.IRecord createDummyRecord(long,java.lang.String) -> rfxw
    95:107:long getOldestRecordTime() -> CweP
    113:125:long getLatestRecordTime() -> LiMk
    130:130:boolean within(long,long,long) -> rfxw
    136:144:int countRecords(long,long) -> rfxw
    150:162:react.glang.GMap getRecords(long,long) -> BuBg
    168:181:int purgeRecordsBefore(long) -> BuBg
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> iSoF:
react.api.SampledChunk -> Husy:
    org.bukkit.Chunk c -> vcdG
    react.glang.GMap counts -> mPTf
    12:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> CUfO
    26:38:void hit(react.api.ChunkIssue,int) -> rfxw
    42:42:org.bukkit.Chunk getC() -> kAHI
    47:47:react.glang.GMap getCounts() -> UIYT
react.api.SampledType -> ckqE:
    react.api.SampledType ENTITY_TIME_LOCK -> Ngau
    react.api.SampledType TILE_TIME_LOCK -> OIBt
    react.api.SampledType ENTITY_TIME -> CVbe
    react.api.SampledType TILE_TIME -> QFXR
    react.api.SampledType ENTITY_DROPTICK -> hblL
    react.api.SampledType TILE_DROPTICK -> YNOa
    react.api.SampledType REDSTONE_TICK_USAGE -> SCmF
    react.api.SampledType REDSTONE_TICK -> dWAL
    react.api.SampledType REDSTONE_SECOND -> CosX
    react.api.SampledType REDSTONE_TIME -> uqbM
    react.api.SampledType PHYSICS_TIME -> Vwjd
    react.api.SampledType HOPPER_TICK_USAGE -> TPAx
    react.api.SampledType HOPPER_TICK -> WHIu
    react.api.SampledType HOPPER_SECOND -> lLsx
    react.api.SampledType HOPPER_TIME -> sYxt
    react.api.SampledType FLUID_TICK_USAGE -> lgHX
    react.api.SampledType FLUID_TICK -> uqao
    react.api.SampledType FLUID_SECOND -> JJUT
    react.api.SampledType FLUID_TIME -> qmet
    react.api.SampledType TPS -> bGhU
    react.api.SampledType TICK -> hHxg
    react.api.SampledType TIU -> gEyI
    react.api.SampledType MEM -> DbXa
    react.api.SampledType FREEMEM -> YpVY
    react.api.SampledType MAXMEM -> dpVI
    react.api.SampledType ALLOCMEM -> Mdbb
    react.api.SampledType MAHS -> PKiA
    react.api.SampledType CHK_TIME -> uFqA
    react.api.SampledType EXPLOSION_TIME -> xXjv
    react.api.SampledType CHK -> wUgr
    react.api.SampledType ATASK -> Limu
    react.api.SampledType STASK -> NgdQ
    react.api.SampledType CHKS -> JRgF
    react.api.SampledType ENT -> XeBC
    react.api.SampledType ENTLIV -> DQUp
    react.api.SampledType ENTDROP -> ETXu
    react.api.SampledType ENTTILE -> LYMs
    java.lang.String node -> KVFc
    react.api.SampledType[] $VALUES -> lDep
    6:6:react.api.SampledType[] values() -> values
    6:6:react.api.SampledType valueOf(java.lang.String) -> valueOf
    50:50:react.api.ISampler get() -> XdCy
    56:56:java.lang.String toString() -> toString
    60:70:void <init>(java.lang.String,int,java.lang.String) -> <init>
    74:74:java.lang.String getNode() -> ylPV
    6:44:void <clinit>() -> <clinit>
react.api.Sampler -> XJOX:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> QFYt
    react.surge.util.C altColor -> NpVF
    int interval -> OawB
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> AXOT
    49:49:react.surge.util.C getAltColor() -> LGLx
    55:55:int getInterval() -> getInterval
    void sample() -> aDHh
    void construct() -> DXga
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> rfxw
    107:108:void setInterval(int) -> BuBg
react.api.Sector -> WiNv:
    int value() -> value
react.api.SelectionException -> mXLH:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> jVql:
    react.api.SelectionMode WHITELIST -> vtft
    react.api.SelectionMode BLACKLIST -> gplQ
    react.api.SelectionMode[] $VALUES -> KMYs
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> cuCI:
    java.lang.Class objectType -> bipX
    react.api.SelectionMode mode -> bbAN
    react.glang.GSet list -> yeCU
    react.glang.GSet possibilities -> jrIW
    int popoff -> UtlM
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> PBXQ
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> gUxe
    43:43:react.glang.GSet getList() -> YECP
    49:49:react.glang.GSet getPossibilities() -> PmMF
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> LiNY
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> LWlN
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> qJdx:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> uhSQ
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> LiNY
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> MuBe
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> CUfO:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> kAHI:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> uhSQ
    29:30:void add(org.bukkit.Chunk,int) -> rfxw
    34:38:void add(org.bukkit.World) -> MuBe
    42:46:void addAll() -> Bccu
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> LiNY
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> MuBe
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> UIYT:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> LiNY
    87:87:java.lang.String getName() -> getName
react.api.Side -> XdCy:
    react.api.Side PLAYERS -> kAgK
    react.api.Side CONSOLE -> tvtl
    java.lang.String ss -> vBFu
    react.api.Side[] $VALUES -> jXWG
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> GQRX
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> BuBg
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> Bccu:
    react.api.SideGate PLAYERS_ONLY -> NghD
    react.api.SideGate CONSOLES_ONLY -> Cggt
    react.api.SideGate ANYTHING -> fLJa
    react.api.SideGate[] $VALUES -> eYgp
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> rfxw
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> Bccu$1:
    int[] $SwitchMap$react$api$SideGate -> RQpc
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> GQRX:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> qmjq
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> yIoK
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> yIoK:
    double wScale -> jrHk
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> rfxw
react.api.SpecializedTickLimiter -> uFSd:
    double rMaxTime -> wwly
    long rStartTime -> RtUN
    double rLastTime -> AYRW
    long rMark -> rpme
    double tMaxTime -> dFBh
    react.gmath.Average atimes -> ymRN
    react.gmath.Average adropped -> YhFX
    int droppedTicks -> IFte
    boolean entityTick -> ekIb
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> XuFh:
    react.glang.GList sources -> IPFq
    react.glang.GList splooge -> uGSG
    react.glang.GSet destroy -> XkvA
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> rfxw
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> BuBg
    void clipped(org.bukkit.Location) -> BuBg
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> uhSQ
    boolean isAllowedSource(org.bukkit.Location) -> Jshh
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> rfxw
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> BuBg
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> uhSQ
react.api.SploogeCounter$1 -> XuFh$1:
    java.util.Iterator val$it -> PKjC
    org.bukkit.Location val$start -> NyIR
    int val$maxDistance -> Qpod
    react.api.SploogeCounter this$0 -> XeDR
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> XuFh$1$1:
    react.api.SploogeCounter$1 this$1 -> vBFH
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> URJj:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> WWpB:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> tdnH
    38:49:void fromJSON(react.json.JSONObject) -> rfxw
react.api.StackTraceRecordBook -> XJRU:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> BuBg
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> rfxw
react.api.StackedEntity -> tBpJ:
    org.bukkit.entity.LivingEntity entity -> Pmln
    int count -> count
    double rmx -> kdHw
    20:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> rfxw
    46:46:int getAbsoluteMaxCount() -> uFSd
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> BuBg
    56:58:void update() -> update
    62:68:void signalSize() -> XuFh
    72:123:void updateHealth() -> URJj
    127:128:void heal(double) -> BuBg
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> WWpB
    142:142:int getEffectiveCount(double) -> uhSQ
    147:147:double getEffectiveMaxHealth(int) -> CoUX
    152:152:double getRealMaxHealth() -> XJRU
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> rfxw
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> IgyW:
    react.glang.GList headings -> BTDU
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> rfxw
    24:24:int getMaxSelection() -> tBpJ
    29:37:int left(int) -> UYvJ
    42:50:int right(int) -> uqDO
    55:55:react.api.MonitorHeading getHeadFor(int) -> UsiF
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> rfxw
    83:100:java.lang.String getHotbarFor(int,boolean) -> rfxw
react.api.Unused -> ylRf:
react.api.WorldConfig -> FpQG:
    boolean allowRai -> vRfS
    boolean allowActions -> uGRi
    boolean allowRelighting -> nTCp
    boolean allowTileThrottling -> yScC
    boolean allowEntityThrottling -> VpAt
    boolean allowFastLeafDecay -> EKmP
    java.util.List assumeNoSideEffectsEntities -> WsEL
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> CoUX
    48:62:void save(org.bukkit.World) -> UYvJ
    66:80:void load(org.bukkit.World) -> uqDO
react.binject.BlockInjector -> KDKS:
    react.surge.util.Protocol protocol -> OPyb
    java.lang.Class blocksClass -> cdeE
    13:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> rfxw
    29:56:void inject() -> IgyW
    61:61:react.surge.util.Protocol getVersion() -> VCed
react.binject.IBlockInjector -> Tpgp:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> rfxw
    void add(int,java.lang.String,java.lang.Object) -> rfxw
    java.lang.Object get(java.lang.String) -> get
    void inject() -> IgyW
    react.surge.util.Protocol getVersion() -> VCed
react.binject.InjectedBlock -> KvoI:
    react.surge.util.Protocol getInjectProtocol() -> ylRf
    java.lang.String getInjectKey() -> FpQG
    java.lang.String getInjectCKey() -> KDKS
    int getInjectId() -> Tpgp
react.binject.ReflectionUtil -> xypM:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> rfxw
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> rfxw
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> rfxw
    41:54:void setAccessible(java.lang.reflect.Field) -> rfxw
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> rfxw
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> rfxw
react.binject.V10.BlockInjector10 -> Suub:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> LWlN
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> rfxw
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> rfxw
react.binject.V11.BlockInjector11 -> HduC:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> MuBe
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> rfxw
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> rfxw
react.binject.V12.BlockInjector12 -> wvlk:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> CoUX
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> rfxw
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> rfxw
react.binject.V8.BlockInjector8 -> TgwQ:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> UYvJ
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> rfxw
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> rfxw
react.binject.V9.BlockInjector9 -> Ixxq:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> uqDO
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> rfxw
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> rfxw
react.cache.CachedEntity -> lDJP:
    java.util.UUID uid -> XBcS
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> AjSv
    double x -> x
    double y -> y
    double z -> z
    double vx -> hkcf
    double vy -> awqU
    double vz -> QOPn
    double dx -> lUlk
    double dy -> ivwU
    double dz -> oyIg
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> LWlN
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> KvoI
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> xypM
    120:121:void setVx(double) -> Jshh
    125:125:double getVy() -> Suub
    130:131:void setVy(double) -> gUxe
    135:135:double getVz() -> HduC
    140:141:void setVz(double) -> LiNY
    145:145:double getDx() -> wvlk
    150:151:void setDx(double) -> LWlN
    155:155:double getDy() -> TgwQ
    160:161:void setDy(double) -> MuBe
    165:165:double getDz() -> Ixxq
    170:171:void setDz(double) -> CoUX
    175:175:java.util.UUID getUid() -> lDJP
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> FopT:
    int age -> xiqF
    boolean ageLock -> Gstj
    boolean breed -> ktlT
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> LWlN
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> FopT
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> Grrs
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> Grrs:
    org.bukkit.DyeColor dye -> dEdM
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> LWlN
    30:30:org.bukkit.DyeColor getDye() -> SBqJ
    35:36:void setDye(org.bukkit.DyeColor) -> rfxw
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> SBqJ:
    react.glang.GList potionEffects -> IaIw
    boolean canPickupItems -> YhIF
    org.bukkit.inventory.ItemStack[] armorContents -> FiCK
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> TOgX
    double maxHealth -> maxHealth
    int maxAir -> PByp
    int air -> TPGs
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> LWlN
    63:63:react.glang.GList getPotionEffects() -> avnV
    68:69:void setPotionEffects(react.glang.GList) -> BuBg
    73:73:boolean isCanPickupItems() -> idqv
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> aTjs
    138:139:void setMaxAir(int) -> AWlC
    143:143:int getAir() -> Keme
    148:149:void setAir(int) -> SBmp
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> avnV:
    boolean sheared -> lwoD
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> LWlN
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> idqv:
    org.bukkit.inventory.ItemStack is -> BKUY
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> LWlN
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> aTjs:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> Keme:
    react.chronophysics.HopperDirection DOWN -> TrKb
    react.chronophysics.HopperDirection NORTH -> SevX
    react.chronophysics.HopperDirection SOUTH -> SDSu
    react.chronophysics.HopperDirection EAST -> dyIm
    react.chronophysics.HopperDirection WEST -> CFGl
    int direction -> direction
    react.chronophysics.HopperDirection[] $VALUES -> HMEy
    6:6:react.chronophysics.HopperDirection[] values() -> values
    6:6:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> gUxe
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> rfxw
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> BuBg
    6:12:void <clinit>() -> <clinit>
react.chronophysics.HopperDirection$1 -> Keme$1:
    int[] $SwitchMap$react$chronophysics$HopperDirection -> vIvk
    23:23:void <clinit>() -> <clinit>
react.chronophysics.HopperWormhole -> VUMH:
    org.bukkit.block.Hopper source -> apDA
    react.glang.GList path -> hASK
    org.bukkit.block.Hopper destination -> QFaS
    18:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> VUMH
    31:31:react.glang.GList getPath() -> PAww
    36:36:org.bukkit.block.Hopper getDestination() -> IVvd
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> rfxw
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> PAww:
    org.bukkit.block.Hopper h -> wUnd
    14:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> rfxw
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> nkrD
    62:62:boolean isLockedByRedstone() -> jVss
react.command.CommandAct -> IVvd:
    41:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> rfxw
    186:192:react.text.RTX getBeginningRTX() -> nlRa
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> rfxw
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> BuBg
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> uhSQ
    331:346:react.glang.GList getSortedCommands() -> ySDB
    351:358:int getPageSize(int) -> LhnC
    363:363:boolean isValidPage(int,int) -> rfxw
    368:377:react.glang.GList getPage(int,int) -> BuBg
react.command.CommandActionLog -> nkrD:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
react.command.CommandCPUScore -> jVss:
    16:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
react.command.CommandCapabilities -> nlRa:
    20:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
react.command.CommandChunkBlame -> ySDB:
    24:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
react.command.CommandChunkBlame$1 -> ySDB$1:
    org.bukkit.command.CommandSender val$sender -> YNYQ
    react.command.CommandChunkBlame this$0 -> toIa
    37:37:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> ySDB$1$1:
    java.lang.String val$i -> MJtx
    react.glang.GMap val$top -> ydex
    int val$totalx -> APcj
    react.command.CommandChunkBlame$1 this$1 -> AGsD
    66:66:void <init>(react.command.CommandChunkBlame$1,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> LXSJ:
    17:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
react.command.CommandHelp -> lvpY:
    29:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> rfxw
    81:87:react.text.RTX getBeginningRTX() -> nlRa
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> rfxw
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> BuBg
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> uhSQ
    208:215:react.glang.GList getSortedCommands() -> ySDB
    220:227:int getPageSize(int) -> LhnC
    232:232:boolean isValidPage(int,int) -> rfxw
    237:246:react.glang.GList getPage(int,int) -> BuBg
react.command.CommandHighMonitor -> AGRF:
    17:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
react.command.CommandMap -> iCSn:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
react.command.CommandMonitor -> mrCs:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
react.command.CommandReload -> pOxW:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
react.command.CommandReload$1 -> pOxW$1:
    org.bukkit.command.CommandSender val$sender -> YNYQ
    react.command.CommandReload this$0 -> gGAC
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> pOxW$1$1:
    react.command.CommandReload$1 this$1 -> ktoI
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> KUPN:
    29:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
    54:63:org.bukkit.inventory.ItemStack makeBook() -> LXSJ
    68:94:void addSpikePages(react.glang.GList) -> uhSQ
    98:108:void addStatusPages(react.glang.GList) -> Jshh
    112:129:int findSlot(org.bukkit.entity.Player) -> uhSQ
react.command.CommandTopChunk -> YgJC:
    23:31:void <init>() -> <init>
    36:52:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
react.command.CommandVersion -> uxyp:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> rfxw
react.controller.ActionController -> QyDl:
    int kiv -> wDmD
    react.glang.GMap actions -> aNAL
    react.glang.GMap pending -> PnRg
    react.glang.GList tasks -> sIbX
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> rfxw
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> BuBg
    141:141:react.api.IAction getAction(react.api.ActionType) -> rfxw
    146:147:void registerAction(react.api.IAction) -> rfxw
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> lvpY
    241:248:react.glang.GList getActionNames() -> AGRF
react.controller.BenchmarkController -> WGPp:
    react.api.CPUBenchmark finished -> mrdi
    boolean done -> ELQH
    int score -> kuBC
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    13:13:react.api.CPUBenchmark access$002(react.controller.BenchmarkController,react.api.CPUBenchmark) -> rfxw
    13:13:boolean access$102(react.controller.BenchmarkController,boolean) -> rfxw
    13:13:react.api.CPUBenchmark access$000(react.controller.BenchmarkController) -> rfxw
react.controller.BenchmarkController$1 -> WGPp$1:
    react.controller.BenchmarkController this$0 -> wVOF
    27:27:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
react.controller.BenchmarkController$1$1 -> WGPp$1$1:
    react.controller.BenchmarkController$1 this$1 -> QWab
    32:32:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
react.controller.BenchmarkController$1$1$1 -> WGPp$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> KEOd
    37:37:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> TNiN:
    react.glang.GMap rangeMapping -> eYjY
    react.binject.IBlockInjector injector -> yeFN
    boolean injected -> Kobk
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> iCSn
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> mrCs
    115:115:react.binject.IBlockInjector getInjector() -> pOxW
    120:120:boolean isInjected() -> KUPN
react.controller.ChronophyFluidController -> Ynxs:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> ElqE:
    boolean firstTickList -> bQCQ
    long firstTick -> mrdA
    long lastTick -> IOjW
    react.gmath.Average aCSMS -> urKR
    react.glang.GMap pluginLoads -> uqiq
    react.glang.GMap playerLoads -> AYUj
    int serverLoads -> Fhcs
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> YgJC
    63:73:void tickNextTickList() -> uxyp
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> rfxw
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> rfxw
    171:171:boolean isFirstTickList() -> QyDl
    176:176:long getFirstTick() -> WGPp
    181:181:long getLastTick() -> TNiN
    186:186:react.gmath.Average getaCSMS() -> Ynxs
    191:191:react.glang.GMap getPluginLoads() -> ElqE
    196:196:react.glang.GMap getPlayerLoads() -> MdHO
    201:201:int getServerLoads() -> miSE
    21:21:react.glang.GMap access$000(react.controller.ChunkController) -> rfxw
    21:21:int access$108(react.controller.ChunkController) -> BuBg
    21:21:react.glang.GMap access$200(react.controller.ChunkController) -> uhSQ
react.controller.ChunkController$1 -> ElqE$1:
    org.bukkit.event.world.ChunkLoadEvent val$e -> JRlu
    react.controller.ChunkController this$0 -> tCsE
    131:131:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> uhSQ
    131:131:void run(java.lang.Object) -> rfxw
react.controller.CommandController -> MdHO:
    react.glang.GList commands -> kclX
    boolean k -> USNL
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> CoUX
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> UYvJ
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> rfxw
    317:317:react.glang.GList getCommands() -> vskv
    322:323:void setCommands(react.glang.GList) -> gUxe
    327:327:boolean isK() -> saqW
    332:333:void setK(boolean) -> UYvJ
react.controller.EntityCullController -> miSE:
    react.glang.GSet flags -> lpBJ
    react.glang.GSet defer -> kBKB
    react.glang.GMap maxs -> vlaA
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> fKJp
    172:180:int cull(org.bukkit.Chunk) -> Jshh
    185:295:int partialCull(org.bukkit.Chunk) -> gUxe
react.controller.EntityStackController -> vskv:
    react.glang.GList stacks -> VpFV
    20:22:void <init>() -> <init>
    27:28:void start() -> start
    33:34:void stop() -> stop
    39:54:void tick() -> tick
    59:112:void stack(react.glang.GList) -> LiNY
    116:121:boolean isStacked(org.bukkit.entity.LivingEntity) -> uhSQ
    126:139:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> Jshh
    145:163:void on(org.bukkit.event.entity.EntityDamageEvent) -> rfxw
    167:182:void merge(react.api.StackedEntity,react.api.StackedEntity) -> rfxw
    186:252:void checkNear(org.bukkit.entity.LivingEntity) -> gUxe
    257:297:void on(org.bukkit.event.entity.EntitySpawnEvent) -> rfxw
react.controller.EntityStackController$1 -> vskv$1:
    react.controller.EntityStackController this$0 -> awuN
    org.bukkit.event.entity.EntitySpawnEvent val$e -> oEhc
    1:264:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    269:294:void run() -> run
react.controller.EventController -> saqW:
    react.lagmap.LagMap map -> FiHJ
    react.glang.GMap slots -> yKWA
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> rfxw
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> rfxw
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> rfxw
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> rfxw
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> rfxw
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> rfxw
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> rfxw
react.controller.ExplosiveController -> fKJp:
    boolean firstTickList -> bQCQ
    long firstTick -> mrdA
    long lastTick -> IOjW
    react.gmath.Average aCSMS -> urKR
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> YgJC
    50:60:void tickNextTickList() -> uxyp
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> BuBg
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> rfxw
    89:89:boolean isFirstTickList() -> QyDl
    94:94:long getFirstTick() -> WGPp
    99:99:long getLastTick() -> TNiN
    104:104:react.gmath.Average getaCSMS() -> Ynxs
react.controller.FastDecayController -> qBXx:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> xYUE
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> rfxw
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> rfxw
    74:155:void checkBreak(org.bukkit.block.Block) -> uhSQ
    159:190:void decay(org.bukkit.block.Block) -> Jshh
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> gUxe
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> qBXx
react.controller.FastDecayController$1 -> qBXx$1:
    react.controller.FastDecayController this$0 -> wEPR
    react.glang.GMap val$locs -> cmYq
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> uhSQ
    99:99:boolean isAllowedSource(org.bukkit.Location) -> Jshh
    105:124:void clipped(org.bukkit.Location) -> BuBg
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> rfxw
react.controller.FastDecayController$1$1 -> qBXx$1$1:
    react.controller.FastDecayController$1 this$1 -> JuSv
    react.glang.GMap val$locs -> cmYq
    int val$i -> pYmH
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> qBXx$2:
    react.controller.FastDecayController this$0 -> wEPR
    org.bukkit.block.Block val$b -> LHVK
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FastDecayController$3 -> qBXx$3:
    int[] $SwitchMap$org$bukkit$TreeSpecies -> TOmD
    201:201:void <clinit>() -> <clinit>
react.controller.FeatureController -> ryBN:
    react.feature.INMSBinding trueBinding -> HLiy
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> ryBN
    85:85:java.lang.String getPackageVersion() -> JAJW
    90:90:boolean hasBinding() -> HCUC
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> rfxw
react.controller.FluidController -> JAJW:
    react.glang.GSet ignore -> Dsbi
    int flowsPerTick -> OHmf
    int flowsPerSecond -> Utrc
    react.gmath.Average aFST -> HLjb
    react.gmath.Average aFSS -> aMaA
    react.gmath.Average aFSMS -> QGBp
    boolean firstTickList -> bQCQ
    long firstTick -> mrdA
    long lastTick -> IOjW
    react.glang.GSet frozen -> vdNu
    react.glang.GMap queue -> gNqb
    react.glang.GMap freezeTimes -> iCut
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> LiNY
    68:76:void checkChunks() -> gpQc
    80:97:void checkChunk(org.bukkit.Chunk) -> LWlN
    101:107:void queue(org.bukkit.block.Block) -> LiNY
    111:111:boolean isFrozen(org.bukkit.Chunk) -> MuBe
    116:117:void freeze(org.bukkit.Chunk) -> CoUX
    121:127:void unfreeze(org.bukkit.Chunk) -> UYvJ
    131:138:void freeze(org.bukkit.Chunk,long) -> rfxw
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> YgJC
    172:182:void tickNextTickList() -> uxyp
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> rfxw
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> rfxw
    248:248:react.glang.GSet getIgnore() -> qKKI
    253:253:int getTransfersPerTick() -> oEDl
    258:258:int getTransfersPerSecond() -> cccd
    263:263:react.gmath.Average getaFST() -> BtiE
    268:268:react.gmath.Average getaFSS() -> Plnf
    273:273:react.gmath.Average getaFSMS() -> offV
    278:278:boolean isFirstTickList() -> QyDl
    283:283:long getFirstTick() -> WGPp
    288:288:long getLastTick() -> TNiN
    293:293:react.glang.GSet getFrozen() -> BItW
    298:298:react.glang.GMap getQueue() -> XkvA
    303:303:react.glang.GMap getFreezeTimes() -> McfM
react.controller.GlassController -> HCUC:
    react.glang.GMap q -> nmXs
    react.glang.GList g -> JdRB
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> Jshh
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> gUxe
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> LiNY
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> rfxw
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> rfxw
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> rfxw
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> rfxw
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> rfxw
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> rfxw
    36:36:react.glang.GList access$0(react.controller.GlassController) -> rfxw
react.controller.GlassController$1 -> HCUC$1:
    react.controller.GlassController this$0 -> aVQc
    react.glang.GMap val$cc -> gWbn
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> HCUC$1$1:
    react.controller.GlassController$1 this$1 -> CgmV
    org.bukkit.Location val$i -> jrMe
    org.bukkit.entity.Player val$j -> gFbA
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> gpQc:
    react.glang.GMap g -> hkfl
    react.glang.GMap gr -> GcXw
    react.glang.GMap gra -> BShy
    38:38:void <init>() -> <init>
    47:80:void start() -> start
    85:91:void stop() -> stop
    96:123:void tick() -> tick
    128:145:void on(org.bukkit.event.player.PlayerJoinEvent) -> rfxw
    149:215:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> rfxw
    220:260:void on(org.bukkit.event.player.PlayerMoveEvent) -> rfxw
    266:266:void on(react.event.ReactScrollEvent) -> rfxw
    270:323:void toggleMapping(org.bukkit.entity.Player) -> LWlN
    327:359:void toggleMappingEod(org.bukkit.entity.Player) -> MuBe
    363:363:react.glang.GMap getG() -> wKyr
    368:368:react.glang.GMap getGr() -> BlWq
    38:38:react.glang.GMap access$000(react.controller.GraphController) -> rfxw
    38:38:react.glang.GMap access$100(react.controller.GraphController) -> BuBg
react.controller.GraphController$1 -> gpQc$1:
    react.controller.GraphController this$0 -> AbJe
    61:61:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    65:78:void run() -> run
react.controller.GraphController$2 -> gpQc$2:
    react.controller.GraphController this$0 -> AbJe
    97:97:void <init>(react.controller.GraphController) -> <init>
    101:105:void run() -> run
react.controller.GraphController$3 -> gpQc$3:
    org.bukkit.event.player.PlayerJoinEvent val$e -> OcBn
    react.controller.GraphController this$0 -> AbJe
    129:129:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    133:143:void run() -> run
react.controller.HopperController -> qKKI:
    react.glang.GSet ignore -> Dsbi
    int transfersPerTick -> AGvf
    int transfersPerSecond -> aERs
    react.gmath.Average aHST -> CySF
    react.gmath.Average aHSS -> woej
    react.gmath.Average aHSMS -> mYWj
    boolean firstTickList -> bQCQ
    long firstTick -> mrdA
    long lastTick -> IOjW
    react.glang.GSet frozen -> vdNu
    react.glang.GMap queue -> gNqb
    react.glang.GMap freezeTimes -> iCut
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> LiNY
    65:73:void checkChunks() -> gpQc
    77:94:void checkChunk(org.bukkit.Chunk) -> LWlN
    98:104:void queue(org.bukkit.block.Block) -> LiNY
    108:108:boolean isFrozen(org.bukkit.Chunk) -> MuBe
    113:114:void freeze(org.bukkit.Chunk) -> CoUX
    118:124:void unfreeze(org.bukkit.Chunk) -> UYvJ
    128:135:void freeze(org.bukkit.Chunk,long) -> rfxw
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> YgJC
    169:179:void tickNextTickList() -> uxyp
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> rfxw
    207:207:react.glang.GSet getIgnore() -> qKKI
    212:212:int getTransfersPerTick() -> oEDl
    217:217:int getTransfersPerSecond() -> cccd
    222:222:react.gmath.Average getaHST() -> sjas
    227:227:react.gmath.Average getaHSS() -> sbQj
    232:232:react.gmath.Average getaHSMS() -> vbig
    237:237:boolean isFirstTickList() -> QyDl
    242:242:long getFirstTick() -> WGPp
    247:247:long getLastTick() -> TNiN
    252:252:react.glang.GSet getFrozen() -> BItW
    257:257:react.glang.GMap getQueue() -> XkvA
    262:262:react.glang.GMap getFreezeTimes() -> McfM
react.controller.HopperOvertickController -> oEDl:
    react.glang.GList possiblePlunge -> FWhF
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> uhSQ
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> rfxw
react.controller.LanguageController -> cccd:
    java.io.File languageFolder -> magp
    int oldVersion -> JmFO
    java.io.File dlf -> lpGC
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> BBEF
    160:221:void downloadAll(boolean) -> uqDO
    225:261:void downloadLanguage(java.lang.String) -> UsiF
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> AWlC
    315:315:java.io.File getFileForLanguage(java.lang.String) -> SBmp
    320:332:void writeDefaults() -> tKbU
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> rfxw
    263:263:void access$1(react.controller.LanguageController) -> rfxw
react.controller.LanguageController$1 -> cccd$1:
    react.controller.LanguageController this$0 -> toLq
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> cccd$2:
    react.controller.LanguageController this$0 -> toLq
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> rfxw
react.controller.LanguageController$2$1 -> cccd$2$1:
    react.controller.LanguageController$2 this$1 -> oWMM
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> rfxw
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> rfxw
    121:121:void onDownloadStarted(react.gnet.download.Download) -> rfxw
    126:128:void onDownloadFinished(react.gnet.download.Download) -> BuBg
    134:134:void onDownloadFailed(react.gnet.download.Download) -> uhSQ
react.controller.LanguageController$3 -> cccd$3:
    react.controller.LanguageController this$0 -> toLq
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> cccd$3$1:
    react.controller.LanguageController$3 this$1 -> BTMY
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> cccd$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> TaOe
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> cccd$4:
    react.controller.LanguageController this$0 -> toLq
    java.io.File val$dld -> Utsb
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> rfxw
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> rfxw
    245:245:void onDownloadStarted(react.gnet.download.Download) -> rfxw
    250:251:void onDownloadFinished(react.gnet.download.Download) -> BuBg
    257:257:void onDownloadFailed(react.gnet.download.Download) -> uhSQ
react.controller.MonitorController -> BtiE:
    int maxCooldown -> WHUs
    react.api.TitleMonitor titleMonitor -> hbxW
    react.glang.GMap posts -> LbIa
    react.slate.PhantomSlate sb -> fLQO
    boolean ready -> Lixc
    44:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> Jsph
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> CoUX
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> UYvJ
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> ogKI
    179:184:float calcVolume(react.api.ReactPlayer) -> rfxw
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> uqDO
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> UsiF
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> AWlC
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> SBmp
    219:223:void startMonitoring(org.bukkit.entity.Player) -> LhnC
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> SBnO
    242:247:void startActionLogging(org.bukkit.entity.Player) -> lvjD
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> IyWb
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> BuBg
    279:291:void processPlayer(react.api.ReactPlayer) -> uhSQ
    296:296:void handleActionLog(org.bukkit.entity.Player) -> wCdc
    300:324:void handleTriggers(react.api.ReactPlayer) -> Jshh
    328:367:void handleScrolling(react.api.ReactPlayer) -> gUxe
    371:399:void handleShifting(react.api.ReactPlayer) -> LiNY
    403:425:void handlePosting(react.api.ReactPlayer) -> LWlN
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> rfxw
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> rfxw
    471:501:void tickMonitor(react.api.ReactPlayer) -> MuBe
    505:505:react.api.TitleMonitor getTitleMonitor() -> RQTy
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> rfxw
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> rfxw
    539:552:void onTick() -> wDMr
    556:578:void updateActionBoard() -> RbVg
    583:583:java.lang.String getTickName() -> hbVT
    35:35:react.slate.PhantomSlate access$002(react.controller.MonitorController,react.slate.PhantomSlate) -> rfxw
    35:35:react.slate.PhantomSlate access$100(react.controller.MonitorController) -> rfxw
    35:35:boolean access$202(react.controller.MonitorController,boolean) -> rfxw
    35:35:boolean access$200(react.controller.MonitorController) -> BuBg
    35:35:react.slate.PhantomSlate access$000(react.controller.MonitorController) -> uhSQ
    37:37:void <clinit>() -> <clinit>
react.controller.MonitorController$1 -> BtiE$1:
    react.controller.MonitorController this$0 -> aERN
    69:69:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> BtiE$2:
    react.controller.MonitorController this$0 -> aERN
    557:557:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> Plnf:
    react.glang.GMap samples -> ecAD
    int redstonePerTick -> stYq
    int redstonePerSecond -> AYYr
    boolean firstTickList -> bQCQ
    long firstTick -> mrdA
    long lastTick -> IOjW
    react.gmath.Average aRSMS -> ETdD
    react.gmath.Average aRST -> yCFd
    react.gmath.Average aRSS -> TPOH
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> rfxw
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> rfxw
    72:79:void flushTickList() -> YgJC
    83:93:void tickNextTickList() -> uxyp
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> uqDO
    121:122:void onPhysics(org.bukkit.Chunk) -> UsiF
    126:127:void onHopper(org.bukkit.Chunk) -> AWlC
    131:132:void onFluid(org.bukkit.Chunk) -> SBmp
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> rfxw
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> rfxw
    156:176:void onTick() -> wDMr
    181:181:java.lang.String getTickName() -> hbVT
    186:186:react.glang.GMap getSamples() -> jqNB
    191:191:int getRedstonePerTick() -> HCXG
    196:196:int getRedstonePerSecond() -> MRgY
    201:201:boolean isFirstTickList() -> QyDl
    206:206:long getFirstTick() -> WGPp
    211:211:long getLastTick() -> TNiN
    216:216:react.gmath.Average getaRSMS() -> CxON
    221:221:react.gmath.Average getaRST() -> PKOr
    226:226:react.gmath.Average getaRSS() -> hIDO
react.controller.PhysicsController$1 -> Plnf$1:
    react.controller.PhysicsController this$0 -> tLgo
    169:169:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> offV:
    react.glang.GList players -> GQxb
    react.glang.GSet save -> maev
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> owcC
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> rfxw
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> WhmP
    113:113:react.glang.GList getPlayers() -> Fxfs
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> rfxw
react.controller.PlayerController$1 -> offV$1:
    react.glang.GList val$toSave -> apFq
    react.controller.PlayerController this$0 -> TrQr
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> BItW:
    react.rai.IRAI rai -> htYv
    boolean raiEnabled -> nTIM
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    17:17:react.rai.IRAI access$000(react.controller.RAIController) -> rfxw
react.controller.RAIController$1 -> BItW$1:
    react.controller.RAIController this$0 -> cukj
    47:47:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> XkvA:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> uhSQ
react.controller.ReactServerInfo -> McfM:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> eGix
    27:27:int dgetGameProtocol() -> lvrU
    33:33:java.lang.String dgetGameVersion() -> lfPg
    39:39:java.lang.String dgetReactVersion() -> Vvqr
    45:45:int dgetMaxPlayers() -> skEe
    51:58:react.glang.GList dgetConnectedPlayers() -> ofhk
    64:64:int dgetViewDistance() -> bObR
    70:70:int dgetGamePort() -> xFoG
    76:76:java.lang.String dgetGameAddress() -> Fgcr
    82:89:react.glang.GList dgetRemotePlugins() -> Yfit
    95:102:react.glang.GList dgetWorlds() -> VMAE
    108:108:react.glang.GList dgetActions() -> BSIB
    114:114:react.glang.GList dgetSamplers() -> LObs
react.controller.RedstoneController -> wKyr:
    react.glang.GSet ignore -> Dsbi
    react.glang.GSet frozen -> vdNu
    react.glang.GMap queue -> gNqb
    react.glang.GMap freezeTimes -> iCut
    int redstonePerTick -> stYq
    int redstonePerSecond -> AYYr
    react.gmath.Average aRST -> yCFd
    react.gmath.Average aRSS -> TPOH
    react.gmath.Average aRSMS -> ETdD
    boolean firstTickList -> bQCQ
    long firstTick -> mrdA
    long lastTick -> IOjW
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> LiNY
    95:101:void tick() -> tick
    105:113:void checkChunks() -> gpQc
    117:134:void checkChunk(org.bukkit.Chunk) -> LWlN
    138:144:void queue(org.bukkit.block.Block) -> LiNY
    148:148:boolean isFrozen(org.bukkit.Chunk) -> MuBe
    153:154:void freeze(org.bukkit.Chunk) -> CoUX
    158:165:void flushTickList() -> YgJC
    169:179:void tickNextTickList() -> uxyp
    183:189:void unfreeze(org.bukkit.Chunk) -> UYvJ
    193:200:void freeze(org.bukkit.Chunk,long) -> rfxw
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> rfxw
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> rfxw
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> rfxw
    246:246:react.glang.GSet getIgnore() -> qKKI
    251:251:react.glang.GSet getFrozen() -> BItW
    256:256:react.glang.GMap getQueue() -> XkvA
    261:261:react.glang.GMap getFreezeTimes() -> McfM
    266:266:int getRedstonePerTick() -> HCXG
    271:271:int getRedstonePerSecond() -> MRgY
    276:276:react.gmath.Average getaRST() -> PKOr
    281:281:react.gmath.Average getaRSS() -> hIDO
    286:286:react.gmath.Average getaRSMS() -> CxON
    291:291:boolean isFirstTickList() -> QyDl
    296:296:long getFirstTick() -> WGPp
    301:301:long getLastTick() -> TNiN
react.controller.RemoteController -> BlWq:
    react.remote.server.RemoteServer remoteServer -> gFfV
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> FNRe
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> rfxw
react.controller.RemoteController$1 -> BlWq$1:
    react.controller.RemoteController this$0 -> Ucto
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> BlWq$2:
    react.controller.RemoteController this$0 -> Ucto
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> KDPO
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> eGiY
react.controller.SampleController -> sjas:
    react.glang.GMap samplers -> fCcT
    react.surge.server.SuperSampler ss -> wNEa
    int cd -> Bdng
    29:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> cdFu
    69:74:void restartSuperSampler() -> nJTE
    78:79:void registerSampler(react.api.ISampler) -> uhSQ
    83:83:react.api.ISampler getSampler(java.lang.String) -> LhnC
    88:131:void constructSamplers() -> EueV
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> SCXm
    187:209:void onTick() -> wDMr
    214:214:java.lang.String getTickName() -> hbVT
    219:219:react.glang.GMap getSamplers() -> EeEL
    224:224:react.surge.server.SuperSampler getSs() -> WGUT
    229:229:int getCd() -> ySHA
    234:241:react.glang.GList getSamplerNames() -> ghGC
    22:22:react.surge.server.SuperSampler access$000(react.controller.SampleController) -> rfxw
react.controller.SampleController$1 -> sjas$1:
    react.controller.SampleController this$0 -> uOng
    141:141:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> sjas$2:
    react.controller.SampleController this$0 -> uOng
    153:153:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> sbQj:
    java.lang.String ipa -> ydkp
    react.glang.GList failures -> oxrG
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> SBnO
    41:74:void checkForIP() -> klCA
    78:91:void scan(java.lang.Runnable) -> rfxw
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> sbQj$1:
    react.controller.SecurityController this$0 -> fDCh
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> sbQj$2:
    java.lang.String val$ip -> riJN
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> sbQj$3:
    java.lang.Thread val$t -> wMdT
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> vbig:
    react.glang.GMap etl -> DjvG
    react.glang.GMap ttl -> AXyh
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> rfxw
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> rfxw
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> UsiF
    143:160:void releaseWorld(org.bukkit.World) -> AWlC
    164:181:double getUniversalEntityTick() -> BBGx
    186:203:double getUniversalEntityLimit() -> dVKw
    208:225:double getUniversalTileLimit() -> AaHW
    230:247:double getUniversalTileTick() -> fKQK
    252:264:double getUniversalEntityDroppedTicks() -> cSHw
    269:281:double getUniversalTileDroppedTicks() -> OiqN
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> rfxw
    301:312:void setTileTickLimit(org.bukkit.World,double) -> BuBg
    316:321:double getEntityTickLimit(org.bukkit.World) -> SBmp
    326:331:double getTileTickLimit(org.bukkit.World) -> LhnC
    336:341:double getLastEntityTick(org.bukkit.World) -> SBnO
    346:351:double getLastTileTick(org.bukkit.World) -> lvjD
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> IyWb
    366:371:double getTileDroppedTicks(org.bukkit.World) -> wCdc
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> rfxw
react.controller.SpikeController -> BBEF:
    react.glang.GMap spikes -> NEoT
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> wDMr
    111:111:java.lang.String getTickName() -> hbVT
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> rhEU
    128:160:void whoFuckingDidThis(react.glang.Callback) -> rfxw
    25:25:react.glang.GMap access$000(react.controller.SpikeController) -> rfxw
react.controller.SpikeController$1 -> BBEF$1:
    react.controller.SpikeController this$0 -> QWjB
    35:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> BBEF$1$1:
    react.controller.SpikeController$1 this$1 -> OcFN
    40:40:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> BBEF$2:
    react.glang.GMap val$vv -> JuYH
    react.controller.SpikeController this$0 -> QWjB
    75:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> BBEF$3:
    java.lang.Thread val$t -> wMdT
    react.glang.Callback val$callback -> pRBM
    react.controller.SpikeController this$0 -> QWjB
    131:131:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> tKbU:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> Jsph:
    12:12:void <init>() -> <init>
    17:23:void start() -> start
    28:34:void stop() -> stop
    40:40:void tick() -> tick
    45:46:void on(org.bukkit.event.world.WorldUnloadEvent) -> rfxw
react.event.ReactEvent -> ogKI:
    org.bukkit.event.HandlerList handlers -> dVnp
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> RQTy:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> wDMr:
    react.event.ScrollDirection direction -> MuqH
    boolean cancellled -> XBkS
    int amount -> xrjT
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> rFAm
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> tCWI
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> RbVg:
    react.event.ScrollDirection DOWN -> kdUK
    react.event.ScrollDirection UP -> LbMP
    react.event.ScrollDirection[] $VALUES -> NFOp
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.feature.INMSBinding -> hbVT:
    java.lang.String getPackageVersion() -> JAJW
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> rfxw
react.feature.NMSBinding -> jqNB:
    java.lang.String packageVersion -> yJxm
    8:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> JAJW
react.feature.NMSBinding10 -> HCXG:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> rfxw
react.feature.NMSBinding11 -> MRgY:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> rfxw
react.feature.NMSBinding12 -> CxON:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> rfxw
react.feature.NMSBinding8 -> PKOr:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> rfxw
react.feature.NMSBinding9 -> hIDO:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> rfxw
react.gbench.Profiler -> Fxfs:
    long nanos -> fwGi
    long startNano -> LakB
    long millis -> nJyV
    long startMillis -> ORBn
    double time -> VMeQ
    boolean profiling -> FWiI
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> SBnO
    78:78:double getTicks() -> ksqU
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> tKfc
    93:93:double getHours() -> BdLh
    98:98:double getMilliseconds() -> NUji
    103:103:long getNanoseconds() -> EKQQ
    108:108:long getNanos() -> BJYh
    113:113:long getStartNano() -> cBFM
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> xWrq
    128:128:double getTime() -> xXSq
    133:133:boolean isProfiling() -> BclA
react.gconcurrent.A -> eGix:
    react.gconcurrent.ParallelPoolManager mgr -> WQIj
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> eGix$1:
    react.gconcurrent.A this$0 -> SoQG
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> lvrU:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> lfPg:
    react.gconcurrent.QueueMode mode -> RJKC
    react.glang.GList threads -> tDYw
    int next -> QNwU
    int threadCount -> ujAW
    java.util.Queue squeue -> KUvj
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> oVlr
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> jjBQ
    22:23:void syncQueue(react.gconcurrent.Execution) -> rfxw
    long getNanoGate() -> gMqg
    29:42:void tickSyncQueue() -> piml
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> Mkye
    93:100:int getTotalQueueSize() -> hkHH
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> BuBg
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> JcRP
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> WXUf
    152:179:void updateThreadInformation() -> HKia
    183:215:react.gconcurrent.ParallelThread nextThread() -> clYb
    220:226:void createThreads(int) -> lvjD
    230:230:react.gconcurrent.QueueMode getMode() -> MJXU
    235:235:int getNext() -> VUSK
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> mPGU
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> xWuh
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> rovl
react.gconcurrent.ParallelThread -> Vvqr:
    java.util.Queue queue -> yCIE
    react.gconcurrent.ThreadInformation info -> oVlr
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> UYvJ
    63:70:void execute(react.gconcurrent.Execution) -> uhSQ
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> BuBg
    92:92:java.util.Queue getQueue() -> INoT
    97:97:react.gconcurrent.ThreadInformation getInfo() -> xiXW
react.gconcurrent.QueueMode -> skEe:
    react.gconcurrent.QueueMode ROUND_ROBIN -> Hnro
    react.gconcurrent.QueueMode SMALLEST -> jrVB
    react.gconcurrent.QueueMode[] ENUM$VALUES -> FFjP
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> ofhk:
    react.gconcurrent.ParallelPoolManager mgr -> WQIj
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> ofhk$1:
    react.gconcurrent.S this$0 -> AsOv
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> bObR:
    long tick -> CVrV
    long atick -> EfJq
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> xFoG:
    double ticksPerSecond -> DYvK
    int queuedSize -> DbgS
    boolean processing -> oWQh
    double utilization -> BeRA
    react.gmath.Average ticksPerSecondAverage -> ohRs
    long tick -> CVrV
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> IOOs
    33:35:void setTicksPerSecond(double) -> uqDO
    39:39:int getQueuedSize() -> MIyl
    44:45:void setQueuedSize(int) -> IyWb
    49:49:boolean isProcessing() -> EKSx
    54:55:void setProcessing(boolean) -> UsiF
    59:59:double getUtilization() -> QVgJ
    64:65:void setUtilization(double) -> UsiF
    69:69:double getTicksPerSecondAverage() -> lDQy
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> YVNp
    89:89:int getId() -> getId
react.gformat.F -> Fgcr:
    java.text.NumberFormat NF -> IaVP
    java.text.DecimalFormat DF -> YqFM
    java.lang.String[] NAMES -> opbd
    java.math.BigInteger THOUSAND -> Dbgf
    java.util.NavigableMap MAP -> bQLP
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> lvjD
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> rfxw
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> rfxw
    201:221:java.lang.String timeLong(long,int) -> rfxw
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> uhSQ
    236:236:java.lang.String b(double) -> AWlC
    241:258:java.lang.String b(java.math.BigInteger) -> rfxw
    263:267:void instantiate() -> AqkB
    279:279:java.lang.String fileSize(long) -> Jshh
    292:292:java.lang.String memSize(long) -> gUxe
    305:306:java.lang.String stamp(long) -> LiNY
    322:349:java.lang.String ofSize(long,int) -> BuBg
    363:368:java.lang.String trim(java.lang.String,int) -> BuBg
    381:401:java.lang.String cname(java.lang.String) -> IyWb
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> LWlN
    459:477:java.lang.String memx(long) -> MuBe
    491:492:java.lang.String f(long) -> CoUX
    504:505:java.lang.String f(int) -> wCdc
    519:528:java.lang.String f(double,int) -> BuBg
    544:553:java.lang.String fd(double,int) -> uhSQ
    567:576:java.lang.String f(float,int) -> rfxw
    587:587:java.lang.String f(double) -> SBmp
    598:598:java.lang.String f(float) -> rfxw
    613:613:java.lang.String pc(double,int) -> Jshh
    628:628:java.lang.String pc(float,int) -> BuBg
    641:641:java.lang.String pc(double) -> LhnC
    654:654:java.lang.String pc(float) -> BuBg
    670:670:java.lang.String pc(int,int,int) -> rfxw
    684:684:java.lang.String pc(int,int) -> uhSQ
    700:700:java.lang.String pc(long,long,int) -> rfxw
    714:714:java.lang.String pc(long,long) -> Jshh
    726:726:java.lang.String msSeconds(long) -> UYvJ
    740:740:java.lang.String msSeconds(long,int) -> uhSQ
    752:752:java.lang.String nsMs(long) -> uqDO
    766:766:java.lang.String nsMs(long,int) -> Jshh
    780:780:java.lang.String nsMsd(long,int) -> gUxe
react.glang.AccessCallback -> Yfit:
    java.lang.Object get() -> get
react.glang.Adapter -> VMAE:
    java.lang.Object adapt(java.lang.Object) -> LiNY
    java.lang.Object onAdapt(java.lang.Object) -> LWlN
react.glang.Callback -> BSIB:
    java.lang.Object t -> Gknj
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> rfxw
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> LObs:
    double i -> KEWc
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> SBnO
react.glang.FinalFloat -> FNRe:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> uhSQ
react.glang.FinalInteger -> KDPO:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> owcC
react.glang.FinalLong -> eGiY:
    long i -> Cpdc
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> UsiF
react.glang.FinalString -> cdFu:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> nJTE:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> LiNY
    java.lang.Object onAdapt(java.lang.Object) -> LWlN
react.glang.GBiset -> EueV:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> EwKf
    java.lang.Object b -> Ngrc
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> TOOs
    53:54:void setA(java.lang.Object) -> MuBe
    63:63:java.lang.Object getB() -> YDkp
    73:74:void setB(java.lang.Object) -> CoUX
react.glang.GList -> SCXm:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> Jshh
    45:52:react.glang.GList grepDistance(int,int) -> gUxe
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> BuBg
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> BdMP
    188:190:react.glang.GList shuffleCopy() -> hHgS
    198:199:void shuffle() -> lDSH
    210:236:react.glang.GList split() -> YxOy
    248:248:boolean hasIndex(int) -> WhmP
    258:259:java.lang.Object pickRandom() -> xrIK
    270:277:react.glang.GList stringList() -> cJWy
    288:292:void forEach(react.glang.Callback) -> BuBg
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> Hdqq
    336:336:react.glang.GList cropFrom(int) -> bXKh
    341:373:react.glang.GList split(int) -> vtFp
    389:389:react.glang.GList cropTo(int) -> VTgS
    406:416:react.glang.GList crop(int,int) -> LiNY
    427:431:react.glang.GList removeDuplicates() -> NpAK
    442:446:void removeAll(java.lang.Object) -> UYvJ
    455:455:boolean hasDuplicates() -> fudq
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> DbCT
    484:490:void push(java.lang.Object,int) -> rfxw
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> uqDO
    528:532:void add(java.util.List) -> rfxw
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> xOcs
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> hYgW
    626:627:react.glang.GList qdel(java.lang.Object) -> UsiF
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> bGVM
    662:669:java.lang.Object popLast() -> Puew
    674:683:java.lang.Object popRandom() -> lDQY
react.glang.GListAdapter -> EeEL:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> BuBg
    java.lang.Object onAdapt(java.lang.Object) -> LWlN
react.glang.GMap -> WGUT:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> rhEq
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> rfxw
    64:81:react.glang.GMap flip() -> FNWH
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> rfxw
    121:121:react.glang.GList k() -> Hdqq
    131:131:react.glang.GSet kset() -> RHgo
    141:141:react.glang.GList v() -> Qxia
    151:151:react.glang.GSet vset() -> ThaJ
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> BuBg
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> LWlN
    209:219:react.glang.GMap removeDuplicateValues() -> WWvi
    233:242:void put(react.glang.GList,react.glang.GList) -> rfxw
    251:267:react.glang.GList sortK() -> iCYK
    277:293:react.glang.GList sortV() -> KTuI
react.glang.GQuadraset -> ySHA:
    java.lang.Object a -> EwKf
    java.lang.Object b -> Ngrc
    java.lang.Object c -> fmwP
    java.lang.Object d -> kRsN
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> TOOs
    25:26:void setA(java.lang.Object) -> MuBe
    30:30:java.lang.Object getB() -> YDkp
    35:36:void setB(java.lang.Object) -> CoUX
    40:40:java.lang.Object getC() -> QFEk
    45:46:void setC(java.lang.Object) -> AWlC
    50:50:java.lang.Object getD() -> qTEW
    55:56:void setD(java.lang.Object) -> SBmp
react.glang.GSet -> ghGC:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> klCA:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> EwKf
    java.lang.Object b -> Ngrc
    java.lang.Object c -> fmwP
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> TOOs
    26:27:void setA(java.lang.Object) -> MuBe
    31:31:java.lang.Object getB() -> YDkp
    36:37:void setB(java.lang.Object) -> CoUX
    41:41:java.lang.Object getC() -> QFEk
    46:47:void setC(java.lang.Object) -> AWlC
react.gmath.Average -> BBGx:
    double[] values -> QXKY
    double average -> RlOg
    boolean dirty -> apJt
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> lvjD
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> CEPL
react.gmath.DoubleArrayUtils -> dVKw:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> rfxw
    17:19:void wrapRight(double[]) -> rfxw
    23:27:void fill(double[],double) -> fill
react.gmath.M -> AaHW:
    int precision -> Arof
    int modulus -> cSmV
    float[] sin -> NqDs
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> rfxw
    31:36:boolean r(java.lang.Double) -> BuBg
    51:51:double tps(long,int) -> LiNY
    63:63:double ticksFromNS(long) -> AWlC
    75:101:java.lang.String toRoman(int) -> XkoF
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> LWlN
    144:216:int fromRoman(java.lang.String) -> wCdc
    226:226:long ns() -> RHjY
    236:236:long ms() -> QhKY
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> BuBg
    333:333:float sinLookup(int) -> VCed
react.gnet.client.Client -> fKQK:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> QhlT
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> rfxw
    74:74:react.gnet.packet.PacketHandler getHandler() -> nAif
react.gnet.client.IClient -> cSHw:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> rfxw
    react.gnet.packet.PacketHandler getHandler() -> nAif
react.gnet.download.Download -> OiqN:
    react.gnet.download.DownloadState state -> uaRR
    react.gnet.download.DownloadType type -> mPiU
    react.gnet.download.DownloadStatus status -> xsLW
    react.gnet.download.DownloadMonitor monitor -> bHYe
    java.net.URL url -> url
    java.io.File file -> Ojut
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> QgjW
    92:92:react.gnet.download.DownloadType getType() -> cBJv
    97:97:react.gnet.download.DownloadStatus getStatus() -> jqTA
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> WFxW
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> rhEU:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> rfxw
    void onDownloadStarted(react.gnet.download.Download) -> rfxw
    void onDownloadFinished(react.gnet.download.Download) -> BuBg
    void onDownloadFailed(react.gnet.download.Download) -> uhSQ
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> rfxw
react.gnet.download.DownloadState -> rFAm:
    react.gnet.download.DownloadState IDLE -> KUyK
    react.gnet.download.DownloadState DOWNLOADING -> dqCf
    react.gnet.download.DownloadState FAILED -> TigV
    react.gnet.download.DownloadState FINISHED -> MnEP
    react.gnet.download.DownloadState[] $VALUES -> AQOQ
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> tCWI:
    long bytesDownloaded -> cSob
    long bytesTotal -> xPlM
    long bytesPerSecond -> jigF
    long timeElapsed -> NEsR
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> ntoC
    25:25:long getBytesDownloaded() -> Vewl
    30:31:void setBytesDownloaded(long) -> SBmp
    35:35:long getBytesTotal() -> vARA
    40:41:void setBytesTotal(long) -> LhnC
    45:45:long getBytesPerSecond() -> inPg
    50:51:void setBytesPerSecond(long) -> SBnO
    55:55:long getTimeElapsed() -> hjmI
    60:61:void setTimeElapsed(long) -> lvjD
react.gnet.download.DownloadType -> ksqU:
    react.gnet.download.DownloadType DETERMINATE -> HwgI
    react.gnet.download.DownloadType INDETERMINATE -> gGKc
    react.gnet.download.DownloadType[] $VALUES -> BBoV
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> tKfc:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> fJsP
    java.lang.String getPacketName() -> gyLY
react.gnet.packet.IncompatablePacketException -> BdLh:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> NUji:
    react.gnet.packet.PacketBinding SERVER_BOUND -> PCiU
    react.gnet.packet.PacketBinding CLIENT_BOUND -> QiOq
    react.gnet.packet.PacketBinding[] $VALUES -> HwgW
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> EKQQ:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> BJYh:
    react.glang.GList accept -> IHFc
    react.gnet.packet.PacketBinding side -> mbNL
    react.gnet.streams.OSS out -> Yxua
    react.gnet.streams.ISS in -> qmxp
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> rfxw
    28:34:void accept(react.gnet.packet.IPacket) -> BuBg
    38:46:react.gnet.packet.IPacket findPacket(int) -> KThF
    51:66:react.gnet.packet.IPacket read() -> tLLY
    71:77:void write(react.gnet.packet.IPacket) -> uhSQ
react.gnet.packet.UnhandledPacketException -> cBFM:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> xWrq:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> nAif
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> Jshh
react.gnet.server.Server -> xXSq:
    int port -> port
    java.net.ServerSocket socket -> oOBY
    react.gnet.packet.PacketHandler handler -> QhlT
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> nAif
    37:84:void run() -> run
    88:91:void pstart() -> oDkx
    95:96:void pstop() -> HUAD
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> Jshh
react.gnet.streams.ISS -> BclA:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> uHBb
    boolean built -> gWjp
    byte[] readBuffer -> FGKq
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> LGIu
    64:72:react.glang.GList readStringList() -> vbrk
    77:85:react.glang.GList readDoubleList() -> qvGh
    90:98:react.glang.GList readLongList() -> pQBH
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> rfxw
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> rfxw
    136:137:react.gnet.streams.ISS gzip() -> cuOx
    142:147:void build() -> dgQf
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> BuBg
    435:436:void close() -> close
react.gnet.streams.OSS -> gMqg:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> Ulia
    react.gnet.streams.StreamBuilder bu -> uHBb
    boolean built -> gWjp
    byte[] writeBuffer -> vAtH
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> kACC
    41:42:react.gnet.streams.OSS gzip(int) -> kYtA
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> BuBg
    53:58:void build() -> dgQf
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> MuBe
    102:108:void writeDoubleList(react.glang.GList) -> CoUX
    112:118:void writeLongList(react.glang.GList) -> UYvJ
    122:128:void writeStreamableList(react.glang.GList) -> uqDO
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> VLff
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> uhSQ
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> piml:
    react.glang.GList constructors -> XmbQ
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> rfxw
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> rfxw
    49:50:void bind(react.gnet.streams.StreamConstructor) -> rfxw
    54:55:void bindGZIP(int) -> CfcL
    59:60:void bindGZIP() -> DsEw
    64:65:void bindCipher(javax.crypto.Cipher) -> uhSQ
    69:70:void bindBuffer(int) -> WNyF
    74:75:void bindBuffer() -> YDln
react.gnet.streams.StreamConstructor -> Mkye:
    java.io.InputStream constructInput(java.io.InputStream) -> rfxw
    java.io.OutputStream constructOutput(java.io.OutputStream) -> rfxw
react.gnet.streams.constructors.BufferedStreamConstructor -> hkHH:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> BuBg
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> BuBg
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> rfxw
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> rfxw
react.gnet.streams.constructors.CipherStreamConstructor -> JcRP:
    javax.crypto.Cipher cipher -> iEAC
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> uhSQ
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> uhSQ
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> rfxw
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> rfxw
react.gnet.streams.constructors.GZipStreamConstructor -> WXUf:
    int compressionLevel -> cBmN
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> Jshh
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> Jshh
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> rfxw
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> rfxw
react.gnet.streams.overlays.CGZIPInputStream -> HKia:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> clYb:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> MJXU:
    void toBytes(react.gnet.streams.OSS) -> rfxw
    void fromBytes(react.gnet.streams.ISS) -> rfxw
react.graph.ColossalView -> VUSK:
    react.papyrus.BufferedFrame view -> BeTb
    react.glang.GMap buffers -> kuXp
    react.glang.GMap graphs -> FXMl
    double level -> ArrL
    double targetLevel -> tLnV
    int maxX -> EwMv
    int maxY -> SMQs
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> RIIu
    51:77:void render() -> vbrX
    81:98:void scroll(int) -> TyTt
    102:112:void recompile() -> gyKP
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> rfxw
    122:122:react.papyrus.BufferedFrame getView() -> TqTE
    127:127:react.glang.GMap getBuffers() -> WPHq
    132:132:react.glang.GMap getGraphs() -> DGpy
    137:137:double getLevel() -> PTEl
    142:142:double getTargetLevel() -> esCv
    147:147:int getMaxX() -> LrMR
    152:152:int getMaxY() -> qdct
react.graph.ColossalView$Builder -> VUSK$rfxw:
    react.glang.GList graphs -> bQLt
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> rfxw
    171:191:react.graph.ColossalView compute() -> VUVr
react.graph.CubicleIterator -> mPGU:
    int[][] mapping -> qUGk
    int xCubes -> vcvQ
    int yCubes -> sSAU
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> nJKR
    47:130:void insert(react.graph.GraphSize,int) -> rfxw
    134:145:void print() -> print
react.graph.Graph2D -> xWuh:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> rfxw
react.graph.GraphLagMap -> rovl:
    int grid -> rhno
    org.bukkit.entity.Player viewer -> vJgh
    org.bukkit.util.Vector lastVector -> NFUj
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> ETFk
    49:55:void zoomOut() -> gggm
    60:164:void onRender(react.papyrus.BufferedFrame) -> rfxw
react.graph.GraphLagMap$1 -> rovl$1:
    int[] $SwitchMap$react$api$ChunkIssue -> UBXx
    107:107:void <clinit>() -> <clinit>
react.graph.GraphSampleLine -> INoT:
    double lx -> YphQ
    double ly -> GJQx
    react.api.ISampler sampler -> COFm
    react.graph.IFormatter formatter -> feko
    byte graphColor -> SVFK
    byte backgroundColor -> pjxb
    byte borderColor -> cLBu
    byte textColor -> XCSB
    int ticksLeftTitle -> ETmR
    int ticksOutTitle -> FGPH
    double nextPoint -> MvWm
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> aDHh
    51:183:void onRender(react.papyrus.BufferedFrame) -> rfxw
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> BuBg
    226:254:int getHue(int,int,int) -> uhSQ
    259:281:void scaleFor(react.glang.GList) -> UsiF
    285:285:react.graph.IFormatter getFormatter() -> NgEq
    290:291:void setFormatter(react.graph.IFormatter) -> rfxw
    295:295:byte getGraphColor() -> xWuv
    300:301:void setGraphColor(byte) -> rfxw
    305:305:byte getBackgroundColor() -> gNVW
    310:311:void setBackgroundColor(byte) -> BuBg
    315:315:byte getBorderColor() -> MAkS
    320:321:void setBorderColor(byte) -> uhSQ
    325:325:byte getTextColor() -> WPJB
    330:331:void setTextColor(byte) -> Jshh
    335:335:react.api.ISampler getSampler() -> UIbk
react.graph.GraphSize -> xiXW:
    react.graph.GraphSize WIDE -> uYGM
    react.graph.GraphSize FULL -> cTSU
    react.graph.GraphSize SQUARE -> vBWS
    react.graph.GraphSize[] $VALUES -> igDv
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> fmUy
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> xiXW$1:
    int[] $SwitchMap$react$graph$GraphSize -> MuuR
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> IOOs:
    java.lang.String text -> text
    byte fontColor -> IqyQ
    byte backgroundColor -> pjxb
    boolean wrote -> kcxq
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> rfxw
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> wLcX
    68:69:void setFontColor(byte) -> gUxe
    73:73:byte getBackgroundColor() -> gNVW
    78:79:void setBackgroundColor(byte) -> BuBg
react.graph.GraphingInstance -> MIyl:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> bQLt
    react.graph.ColossalView view -> BnGu
    react.papyrus.Papyrus papyrus -> CFWI
    react.papyrus.IRenderer renderer -> IaXn
    boolean mapping -> eHbJ
    react.glang.GList msgs -> EwPL
    react.surge.sched.Task waiter -> SMSm
    react.surge.sched.Task waiter2 -> wpLv
    int shift -> XSqr
    int iv -> hkps
    boolean notif -> Fyqx
    boolean doScrolling -> XSrL
    50:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> EBdd
    127:128:void setDoScrolling(boolean) -> AWlC
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> rfxw
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> rfxw
    151:155:void send(java.lang.String) -> owcC
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> rfxw
    166:205:void on(react.event.ReactScrollEvent) -> rfxw
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> rfxw
    219:227:void destroy() -> destroy
    231:240:void toggle() -> NNBg
    244:245:void setGraphs(react.glang.GList) -> AWlC
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> UJFW
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> qeHj
    298:298:react.graph.ColossalView getView() -> gyMo
    303:303:react.papyrus.Papyrus getPapyrus() -> ktYK
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> rfxw
    323:324:void setPapyrus(react.papyrus.Papyrus) -> rfxw
    328:329:void setRenderer(react.papyrus.IRenderer) -> rfxw
    333:334:void setMapping(boolean) -> uhSQ
    338:339:void setMsgs(react.glang.GList) -> SBmp
    343:344:void setWaiter(react.surge.sched.Task) -> rfxw
    348:349:void setWaiter2(react.surge.sched.Task) -> BuBg
    353:354:void setShift(int) -> prTV
    358:359:void setNotif(boolean) -> SBmp
    363:363:react.papyrus.IRenderer getRenderer() -> xWyw
    368:368:boolean isMapping() -> IqGj
    373:373:react.glang.GList getMsgs() -> LOkw
    378:378:react.surge.sched.Task getWaiter() -> XdPi
    383:383:react.surge.sched.Task getWaiter2() -> TGBw
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> CofM
    398:414:void compile() -> vIcS
    418:433:void enableSly() -> FWMR
    437:445:void disableSly() -> Yoda
    32:32:boolean access$000(react.graph.GraphingInstance) -> rfxw
    32:32:react.glang.GList access$100(react.graph.GraphingInstance) -> BuBg
    32:32:boolean access$200(react.graph.GraphingInstance) -> uhSQ
    32:32:boolean access$202(react.graph.GraphingInstance,boolean) -> rfxw
    32:32:int access$300(react.graph.GraphingInstance) -> Jshh
    32:32:int access$310(react.graph.GraphingInstance) -> gUxe
    32:32:int access$302(react.graph.GraphingInstance,int) -> rfxw
    32:32:react.graph.ColossalView access$400(react.graph.GraphingInstance) -> LiNY
react.graph.GraphingInstance$1 -> MIyl$1:
    org.bukkit.entity.Player val$player -> FrBr
    react.graph.GraphingInstance this$0 -> KMnn
    55:55:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> MIyl$2:
    react.graph.GraphingInstance this$0 -> KMnn
    80:80:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> MIyl$3:
    react.graph.GraphingInstance this$0 -> KMnn
    110:110:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> rfxw
react.graph.IFormatter -> EKSx:
    java.lang.String from(double) -> IyWb
react.graph.IGraph -> QVgJ:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> JlJb
    long getTimeViewport() -> TFbm
    void render(react.papyrus.BufferedFrame) -> uhSQ
    double getMax() -> getMax
    void setMax(double) -> wCdc
react.graph.NormalGraph -> lDQy:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> kmOD
    long timeViewport -> Fhrw
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> JlJb
    35:35:long getTimeViewport() -> TFbm
    41:42:void render(react.papyrus.BufferedFrame) -> uhSQ
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> wCdc
    void onRender(react.papyrus.BufferedFrame) -> rfxw
react.graph.PlotBoard -> YVNp:
    react.glang.GMap plots -> xkCn
    int maxRecordings -> RuGs
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> ndPF
    33:33:long getAccurateTimeSpan() -> Gjpk
    38:50:long getMedian(long,long) -> gUxe
    55:55:long getMinimumAccuracyRange() -> qBcb
    60:70:double getMaxValue() -> lDUt
    75:85:double getMinValue() -> ebEQ
    90:90:react.glang.GList sort(react.glang.GMap) -> BuBg
    95:105:long earilestRecording() -> ogQu
    110:120:long latestRecording() -> kbuY
    125:126:void reduceBefore(long) -> IyWb
    130:156:void reduceBetween(long,long) -> LiNY
    160:160:boolean before(long,long) -> LWlN
    165:165:boolean after(long,long) -> MuBe
    170:170:boolean within(long,long,long) -> rfxw
    175:193:react.glang.GMap getBetween(long,long) -> CoUX
    198:200:void plot(long,double) -> rfxw
    204:204:boolean hasAt(long) -> wCdc
    209:209:double getAt(long) -> owcC
    214:214:int getSize() -> getSize
react.graph.Point -> AqkB:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> TOOs:
    int iid -> xapx
    react.graph.IGraph graph -> Iiks
    react.graph.GraphSize size -> Dbly
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> vbuG
    24:25:void setGraph(react.graph.IGraph) -> rfxw
    29:29:react.graph.GraphSize getSize() -> PdiC
    34:35:void setSize(react.graph.GraphSize) -> rfxw
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> YDkp:
    react.graph.RenderMaxType UNLIMITED -> jXiU
    react.graph.RenderMaxType LIMITED -> wMmR
    react.graph.RenderMaxType[] $VALUES -> hdEf
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> BdMP:
    java.lang.String CRLF -> nTSp
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> WhmP
    162:198:java.lang.String toString(react.json.JSONObject) -> BuBg
react.json.HTTPTokener -> hHgS:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> lDSH:
    java.util.ArrayList myArrayList -> QaDJ
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> rfxw
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> FolS
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> Lhle
    394:399:react.json.JSONObject getJSONObject(int) -> UcGU
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> Hdqq
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> xiJh
    515:515:boolean optBoolean(int) -> pHAU
    533:536:boolean optBoolean(int,boolean) -> BuBg
    551:551:double optDouble(int) -> LFig
    569:572:double optDouble(int,double) -> rfxw
    587:587:int optInt(int) -> tdnH
    605:608:int optInt(int,int) -> MuBe
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> BuBg
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> rfxw
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> rfxw
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> rfxw
    722:723:react.json.JSONArray optJSONArray(int) -> UITY
    737:738:react.json.JSONObject optJSONObject(int) -> CweP
    752:752:long optLong(int) -> LiMk
    770:773:long optLong(int,long) -> rfxw
    788:788:java.lang.String optString(int) -> NgEq
    803:804:java.lang.String optString(int,java.lang.String) -> rfxw
    816:817:react.json.JSONArray put(boolean) -> LhnC
    830:831:react.json.JSONArray put(java.util.Collection) -> rfxw
    845:848:react.json.JSONArray put(double) -> owcC
    860:861:react.json.JSONArray put(int) -> AXOT
    873:874:react.json.JSONArray put(long) -> WhmP
    887:888:react.json.JSONArray put(java.util.Map) -> rfxw
    902:903:react.json.JSONArray put(java.lang.Object) -> LhnC
    921:922:react.json.JSONArray put(int,boolean) -> uhSQ
    939:940:react.json.JSONArray put(int,java.util.Collection) -> rfxw
    958:959:react.json.JSONArray put(int,double) -> BuBg
    977:978:react.json.JSONArray put(int,int) -> CoUX
    996:997:react.json.JSONArray put(int,long) -> BuBg
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> rfxw
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> rfxw
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> SBnO
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> rfxw
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> rfxw
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> rfxw
react.json.JSONException -> YxOy:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> CFXC
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> xrIK:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> rfxw
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> bXKh
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> rfxw
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> BuBg
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> WhmP
    379:456:java.lang.String toString(react.json.JSONArray) -> BuBg
    472:552:java.lang.String toString(react.json.JSONObject) -> BuBg
react.json.JSONObject -> cJWy:
    java.util.Map map -> map
    java.lang.Object NULL -> PUOa
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> rfxw
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> BuBg
    480:499:java.lang.String doubleToString(double) -> WhmP
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> vtFp
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> VTgS
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> XkoF
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> uhSQ
    751:767:java.lang.String[] getNames(java.lang.Object) -> lvjD
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> VCed
    855:855:boolean isNull(java.lang.String) -> KThF
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> xPIk
    917:937:java.lang.String numberToString(java.lang.Number) -> rfxw
    949:949:java.lang.Object opt(java.lang.String) -> LGIu
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> rfxw
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> rfxw
    1018:1018:boolean optBoolean(java.lang.String) -> kACC
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> rfxw
    1054:1054:double optDouble(java.lang.String) -> kYtA
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> rfxw
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> rfxw
    1116:1119:double optDouble(java.lang.String,double) -> rfxw
    1134:1134:int optInt(java.lang.String) -> CfcL
    1152:1155:int optInt(java.lang.String,int) -> uhSQ
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> WNyF
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> TyTt
    1198:1198:long optLong(java.lang.String) -> nJKR
    1216:1219:long optLong(java.lang.String,long) -> rfxw
    1234:1234:java.lang.String optString(java.lang.String) -> prTV
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> BuBg
    1255:1305:void populateMap(java.lang.Object) -> IyWb
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> BuBg
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> rfxw
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> BuBg
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> Jshh
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> BuBg
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> rfxw
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> uhSQ
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> Jshh
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> gUxe
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> rfxw
    1590:1590:java.lang.Object remove(java.lang.String) -> FolS
    1605:1640:boolean similar(java.lang.Object) -> SBnO
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> wCdc
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> uhSQ
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> rfxw
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> rfxw
    2000:2004:void indent(java.io.Writer,int) -> rfxw
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> rfxw
react.json.JSONObject$Null -> cJWy$rfxw:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> NpAK:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> fudq:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> DbCT:
    long character -> RAcH
    boolean eof -> eof
    long index -> jHGn
    long line -> kllo
    char previous -> lNMp
    java.io.Reader reader -> reader
    boolean usePrevious -> Ljec
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> lnid
    119:131:int dehexchar(char) -> rfxw
    136:136:boolean end() -> UQtm
    147:153:boolean more() -> DjXF
    164:198:char next() -> next
    213:218:char next(char) -> BuBg
    233:250:java.lang.String next(int) -> LGLx
    263:266:char nextClean() -> UASy
    287:334:java.lang.String nextString(char) -> uhSQ
    349:361:java.lang.String nextTo(char) -> Jshh
    376:388:java.lang.String nextTo(java.lang.String) -> Lhle
    403:441:java.lang.Object nextValue() -> ArQH
    458:479:char skipTo(char) -> gUxe
    491:491:react.json.JSONException syntaxError(java.lang.String) -> UcGU
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> xOcs:
    int maxdepth -> Ljed
    boolean comma -> Sfhr
    char mode -> GSEs
    react.json.JSONObject[] stack -> HEHH
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> xiJh
    157:164:react.json.JSONWriter array() -> GtBO
    180:193:react.json.JSONWriter end(char,char) -> rfxw
    206:206:react.json.JSONWriter endArray() -> erfO
    219:219:react.json.JSONWriter endObject() -> ghKT
    235:258:react.json.JSONWriter key(java.lang.String) -> pHAU
    274:285:react.json.JSONWriter object() -> bPJr
    299:310:void pop(char) -> LiNY
    322:329:void push(react.json.JSONObject) -> Jshh
    342:342:react.json.JSONWriter value(boolean) -> SBnO
    356:356:react.json.JSONWriter value(double) -> Hdqq
    369:369:react.json.JSONWriter value(long) -> Hdqq
    385:385:react.json.JSONWriter value(java.lang.Object) -> owcC
react.json.XML -> hYgW:
    java.lang.Character AMP -> SEDx
    java.lang.Character APOS -> dVvS
    java.lang.Character BANG -> WkCw
    java.lang.Character EQ -> brrn
    java.lang.Character GT -> bkDG
    java.lang.Character LT -> BCVR
    java.lang.Character QUEST -> YhYS
    java.lang.Character QUOT -> xQPJ
    java.lang.Character SLASH -> PDKx
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> LFig
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> rfxw
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> WhmP
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> bGVM:
    java.util.HashMap entity -> opgv
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> xrLV
    108:133:java.lang.Object nextContent() -> dUpQ
    149:166:java.lang.Object nextEntity(char) -> LWlN
    186:239:java.lang.Object nextMeta() -> DGsm
    261:334:java.lang.Object nextToken() -> ggjW
    354:420:boolean skipPast(java.lang.String) -> tdnH
react.lagmap.LagMap -> Puew:
    react.glang.GMap chunks -> cTTJ
    14:16:void <init>() -> <init>
    20:29:void pump() -> NwuF
    33:39:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> rfxw
    43:49:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> rfxw
    53:53:react.glang.GMap getChunks() -> eiwb
react.lagmap.LagMapChunk -> lDQY:
    int x -> x
    int z -> z
    react.glang.GMap hits -> scbp
    13:18:void <init>(int,int) -> <init>
    22:28:void hit(react.api.ChunkIssue,double) -> rfxw
    32:33:void hit(react.api.ChunkIssue) -> rfxw
    37:37:int getX() -> getX
    42:42:int getZ() -> getZ
    47:54:double totalScore() -> DXwd
    59:59:react.glang.GMap getHits() -> pHUN
    64:73:void pump() -> NwuF
    78:78:int compareTo(react.lagmap.LagMapChunk) -> rfxw
    1:1:int compareTo(java.lang.Object) -> compareTo
react.papyrus.BufferedFrame -> rhEq:
    byte[][] frame -> pRJG
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> rfxw
    90:97:void write(byte) -> LiNY
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> rfxw
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> rfxw
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> rfxw
    153:167:java.awt.image.BufferedImage toBufferedImage() -> Cwwj
    175:182:void writeRainbowMul() -> TFeA
    189:196:void writeRainbowAdd() -> Qxow
    203:213:void writeSparks() -> xqnf
    217:223:boolean write(int,int,byte) -> rfxw
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> rfxw
    255:272:void write(react.papyrus.BufferedFrame) -> Jshh
    276:276:byte[][] getRawFrame() -> fdjQ
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> FNWH:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> Jshh
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> rfxw
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> RHgo:
    org.bukkit.map.MapView getView() -> gFKQ
    react.papyrus.BufferedFrame getFrameBuffer() -> RYor
    void addRenderer(react.papyrus.IRenderer) -> BuBg
    void clearRenderers() -> pHUU
    react.glang.GList getRenderers() -> Gbar
    void removeRenderer(react.papyrus.IRenderer) -> uhSQ
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> OjYi
react.papyrus.IRenderer -> Qxia:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> rfxw
react.papyrus.Papyrus -> ThaJ:
    org.bukkit.map.MapView map -> msSl
    react.papyrus.BufferedFrame frameBuffer -> lopK
    react.papyrus.BufferedFrame lastFrameBuffer -> SVGM
    react.glang.GList renderers -> kKKJ
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> gFKQ
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> RYor
    51:52:void addRenderer(react.papyrus.IRenderer) -> BuBg
    57:58:void clearRenderers() -> pHUU
    63:63:react.glang.GList getRenderers() -> Gbar
    69:70:void removeRenderer(react.papyrus.IRenderer) -> uhSQ
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> OjYi
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> BuBg
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> uhSQ
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> Jshh
react.papyrus.Papyrus$1 -> ThaJ$1:
    org.bukkit.map.MapCanvas val$c -> iffJ
    org.bukkit.map.MapView val$v -> BTWS
    react.papyrus.Papyrus this$0 -> scax
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> WWvi:
    int spaceSize -> cmfW
    java.lang.String fontChars -> fCkG
    int[][] fontData -> mrrR
    react.papyrus.ReactFont Font -> wNLU
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> iCYK:
    react.glang.GList subgoals -> JmPL
    java.lang.String tag -> bjbj
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> RHoB
    26:44:void propigate() -> XmDh
    49:50:void addGoal(react.rai.IGoal) -> rfxw
    55:65:react.glang.GList getFailingSubgoals() -> oMbG
    71:71:boolean isFailing() -> nSOl
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> Qgno
    void onPropigated() -> PCIm
react.rai.Goal$1 -> iCYK$1:
    react.rai.IGoal val$i -> xbPm
    react.rai.Goal this$0 -> Uuaj
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> KTuI:
    react.glang.GList getSubgoals() -> RHoB
    void propigate() -> XmDh
    void onPropigated() -> PCIm
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> oMbG
    boolean isFailing() -> nSOl
    boolean onCheckFailing() -> Qgno
    void update() -> update
    void addGoal(react.rai.IGoal) -> rfxw
react.rai.IRAI -> QFEk:
    react.glang.GList getGoals() -> Ukjq
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> rfxw
    react.glang.GList getEvents() -> ArQi
    void callEvent(react.rai.RAIEvent) -> rfxw
    react.glang.GList getListeners() -> Sedq
react.rai.RAI -> qTEW:
    react.glang.GList goals -> bata
    react.glang.GList events -> iUhO
    react.glang.GList logEvents -> etPM
    react.glang.GList listeners -> JeBG
    long since -> kKMa
    react.rai.RAI instance -> qDMl
    22:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> Ukjq
    41:42:void addGoal(react.rai.IGoal) -> rfxw
    47:77:void tick() -> tick
    82:82:react.glang.GList getEvents() -> ArQi
    88:95:void callEvent(react.rai.RAIEvent) -> rfxw
    100:100:react.glang.GList getListeners() -> Sedq
react.rai.RAIEvent -> CEPL:
    react.rai.RAIEventType type -> nTWI
    java.lang.String[] pars -> GAeX
    java.lang.String ovt -> dVxg
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> NMcH
    29:29:java.lang.String[] getPars() -> SwFH
    34:34:java.lang.String getOvt() -> PShf
react.rai.RAIEventType -> RHjY:
    react.rai.RAIEventType FIRE_ACTION -> yTVR
    react.rai.RAIEventType NOTE_GOAL_FAILING -> OcPL
    react.rai.RAIEventType NOTE_GOAL_FIXED -> ayFI
    java.lang.String[] msgs -> sBCV
    react.rai.RAIEventType[] $VALUES -> rrEQ
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> ifCa
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> rfxw
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedEntityCounts -> QhKY:
    boolean failing -> EoDu
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> Qgno
    91:134:void onPropigated() -> PCIm
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> rfxw
react.rai.goals.GoalReducedEntityCounts$1 -> QhKY$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> LkIC
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> QhKY$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> LkIC
    org.bukkit.Chunk val$lx -> FiWP
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> nAif:
    boolean failing -> EoDu
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> Qgno
    72:76:void onPropigated() -> PCIm
react.rai.goals.GoalStableChunkTime$1 -> nAif$1:
    react.rai.goals.GoalStableChunkTime this$0 -> Wrvr
    1:48:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> QgjW:
    boolean failing -> EoDu
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> PCIm
    35:35:void letUp() -> NVTV
    40:77:boolean onCheckFailing() -> Qgno
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> rfxw
react.rai.goals.GoalStableEntityTime$1 -> QgjW$1:
    react.rai.goals.GoalStableEntityTime this$0 -> hlVd
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> cBJv:
    boolean failing -> EoDu
    react.glang.GMap reocc -> dNgg
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> PCIm
    88:125:boolean onCheckFailing() -> Qgno
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> rfxw
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> BuBg
react.rai.goals.GoalStableFluidTime$1 -> cBJv$1:
    react.rai.goals.GoalStableFluidTime this$0 -> ujLI
    org.bukkit.Chunk val$lx -> FiWP
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> cBJv$2:
    react.rai.goals.GoalStableFluidTime this$0 -> ujLI
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> jqTA:
    boolean failing -> EoDu
    react.glang.GMap reocc -> dNgg
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> PCIm
    89:125:boolean onCheckFailing() -> Qgno
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> rfxw
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> BuBg
react.rai.goals.GoalStableHopperTime$1 -> jqTA$1:
    react.rai.goals.GoalStableHopperTime this$0 -> ixJo
    org.bukkit.Chunk val$lx -> FiWP
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> jqTA$2:
    react.rai.goals.GoalStableHopperTime this$0 -> ixJo
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> WFxW:
    boolean failing -> EoDu
    react.glang.GMap reocc -> dNgg
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> PCIm
    89:126:boolean onCheckFailing() -> Qgno
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> rfxw
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> BuBg
react.rai.goals.GoalStableRedstoneTime$1 -> WFxW$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> ffPY
    org.bukkit.Chunk val$lx -> FiWP
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> WFxW$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> ffPY
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> ntoC:
    boolean failing -> EoDu
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> PCIm
    34:58:boolean onCheckFailing() -> Qgno
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> rfxw
react.rai.goals.GoalStableTickTime$1 -> ntoC$1:
    react.rai.goals.GoalStableTickTime this$0 -> giTM
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> Vewl:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> RlXH
    boolean authenticated -> hSEX
    react.remote.server.ServerInfo info -> Jloy
    react.glang.GMap frems -> GtiI
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> aDHh
    51:51:react.glang.GMap getFrames() -> XAmk
    56:75:int computeFrames() -> TXFX
    80:92:boolean clearToken() -> CpHL
    97:110:boolean updateServerInfo() -> fSgw
    115:129:boolean refreshToken() -> loLI
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> uhSQ
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> Tpvl
    165:165:boolean isAuthenticated() -> ESir
    170:170:react.remote.server.ServerInfo getInfo() -> lMHp
react.remote.client.packet.CPacketClearToken -> vARA:
    java.lang.String token -> RlXH
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> rfxw
    33:34:void fromBytes(react.gnet.streams.ISS) -> rfxw
    38:38:java.lang.String getToken() -> Tpvl
    43:44:void setToken(java.lang.String) -> UITY
react.remote.client.packet.CPacketComputeFrames -> inPg:
    java.lang.String token -> RlXH
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> rfxw
    33:34:void fromBytes(react.gnet.streams.ISS) -> rfxw
    38:38:java.lang.String getToken() -> Tpvl
    43:44:void setToken(java.lang.String) -> UITY
react.remote.client.packet.CPacketGetInfo -> hjmI:
    java.lang.String token -> RlXH
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> rfxw
    33:34:void fromBytes(react.gnet.streams.ISS) -> rfxw
    38:38:java.lang.String getToken() -> Tpvl
    43:44:void setToken(java.lang.String) -> UITY
react.remote.client.packet.CPacketGetToken -> fJsP:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> rfxw
    36:38:void fromBytes(react.gnet.streams.ISS) -> rfxw
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> gyLY:
    java.lang.String token -> RlXH
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> rfxw
    33:34:void fromBytes(react.gnet.streams.ISS) -> rfxw
    38:38:java.lang.String getToken() -> Tpvl
    43:44:void setToken(java.lang.String) -> UITY
react.remote.client.packet.ClientPacket -> tLLY:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> rfxw
    void fromBytes(react.gnet.streams.ISS) -> rfxw
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> fJsP
    42:42:java.lang.String getPacketName() -> gyLY
react.remote.client.packet.ClientPacketType -> oDkx:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> RkwS
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> gWpd
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> mjdL
    react.remote.client.packet.ClientPacketType GET_INFO -> vBYm
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> gXQh
    react.remote.client.packet.ClientPacketType[] $VALUES -> RBET
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> HUAD:
    react.glang.GMap compute(long,long) -> uhSQ
react.remote.server.KnownUser -> vbrk:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> qvGh:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> rfxw
    38:41:void fromBytes(react.gnet.streams.ISS) -> rfxw
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> pQBH:
    react.glang.GList users -> GchG
    react.glang.GMap session -> VyDu
    react.glang.GMap lastCompute -> LPvU
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> KDPO
    44:45:void registerUser(react.remote.server.KnownUser) -> rfxw
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> BuBg
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> CweP
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> Jshh
    react.remote.server.IFrameComputer getFrameComputer() -> eGiY
    170:171:void markLastCompute(react.remote.server.KnownUser) -> uhSQ
    175:180:long getLastCompute(react.remote.server.KnownUser) -> Jshh
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> rfxw
    190:191:void deleteSession(react.remote.server.KnownUser) -> gUxe
    195:195:java.lang.String createToken() -> PBgm
react.remote.server.ServerInfo -> cuOx:
    java.lang.String motd -> aFBj
    int gameProtocol -> CppC
    java.lang.String gameVersion -> bIEj
    java.lang.String reactVersion -> XKiC
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> qoDW
    int viewDistance -> viewDistance
    int gamePort -> JlsU
    java.lang.String gameAddress -> UKQJ
    react.glang.GList remotePlugins -> HfmY
    react.glang.GList worlds -> JdcS
    react.glang.GList actions -> SgNG
    react.glang.GList samplers -> hJVr
    26:26:react.remote.server.ServerInfo empty() -> JRXm
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> rfxw
    146:159:void fromBytes(react.gnet.streams.ISS) -> rfxw
    java.lang.String dgetMotd() -> eGix
    int dgetGameProtocol() -> lvrU
    java.lang.String dgetGameVersion() -> lfPg
    java.lang.String dgetReactVersion() -> Vvqr
    int dgetMaxPlayers() -> skEe
    react.glang.GList dgetConnectedPlayers() -> ofhk
    int dgetViewDistance() -> bObR
    int dgetGamePort() -> xFoG
    java.lang.String dgetGameAddress() -> Fgcr
    react.glang.GList dgetRemotePlugins() -> Yfit
    react.glang.GList dgetWorlds() -> VMAE
    react.glang.GList dgetActions() -> BSIB
    react.glang.GList dgetSamplers() -> LObs
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> stDW
    199:199:java.lang.String getGameVersion() -> HfHQ
    204:204:java.lang.String getReactVersion() -> yAnw
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> DbKx
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> Smve
    229:229:java.lang.String getGameAddress() -> LYCF
    234:234:react.glang.GList getRemotePlugins() -> PCLJ
    239:239:react.glang.GList getWorlds() -> jhgm
    244:244:react.glang.GList getActions() -> lvpY
    249:249:react.glang.GList getSamplers() -> ebJe
react.remote.server.ServerInfo$1 -> cuOx$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> VMAE
    37:37:int dgetViewDistance() -> bObR
    43:43:react.glang.GList dgetRemotePlugins() -> Yfit
    49:49:java.lang.String dgetReactVersion() -> Vvqr
    55:55:java.lang.String dgetMotd() -> eGix
    61:61:int dgetMaxPlayers() -> skEe
    67:67:java.lang.String dgetGameVersion() -> lfPg
    73:73:int dgetGameProtocol() -> lvrU
    79:79:int dgetGamePort() -> xFoG
    85:85:java.lang.String dgetGameAddress() -> Fgcr
    91:91:react.glang.GList dgetConnectedPlayers() -> ofhk
    97:97:react.glang.GList dgetActions() -> BSIB
    103:103:react.glang.GList dgetSamplers() -> LObs
react.remote.server.packet.ComputedFrame -> dgQf:
    react.glang.GMap values -> sBEq
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> rfxw
    28:36:void fromBytes(react.gnet.streams.ISS) -> rfxw
    40:40:react.glang.GMap getValues() -> jFdq
    45:46:void setValues(react.glang.GMap) -> uhSQ
react.remote.server.packet.SPacketOk -> VLff:
    boolean ok -> RuKp
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> rfxw
    33:34:void fromBytes(react.gnet.streams.ISS) -> rfxw
    38:38:boolean isOk() -> FySx
    43:44:void setOk(boolean) -> lvjD
react.remote.server.packet.SPacketSendFrames -> DsEw:
    react.glang.GMap frames -> tVJO
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> rfxw
    36:44:void fromBytes(react.gnet.streams.ISS) -> rfxw
    48:48:react.glang.GMap getFrames() -> XAmk
    53:54:void setFrames(react.glang.GMap) -> Jshh
react.remote.server.packet.SPacketSendInfo -> YDln:
    react.remote.server.ServerInfo info -> Jloy
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> rfxw
    33:34:void fromBytes(react.gnet.streams.ISS) -> rfxw
    38:38:react.remote.server.ServerInfo getInfo() -> lMHp
    43:44:void setInfo(react.remote.server.ServerInfo) -> rfxw
react.remote.server.packet.SPacketSendToken -> RIIu:
    java.lang.String token -> RlXH
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> rfxw
    33:34:void fromBytes(react.gnet.streams.ISS) -> rfxw
    38:38:java.lang.String getToken() -> Tpvl
    43:44:void setToken(java.lang.String) -> UITY
react.remote.server.packet.ServerPacket -> vbrX:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> rfxw
    void fromBytes(react.gnet.streams.ISS) -> rfxw
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> fJsP
    42:42:java.lang.String getPacketName() -> gyLY
react.remote.server.packet.ServerPacketType -> gyKP:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> DkcP
    react.remote.server.packet.ServerPacketType SEND_INFO -> cKhY
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> DkcV
    react.remote.server.packet.ServerPacketType OK -> wpTe
    react.remote.server.packet.ServerPacketType[] $VALUES -> ndyQ
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> TqTE:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleAsyncQueue$1 -> TqTE$1:
    react.sampler.SampleAsyncQueue this$0 -> sIuJ
    21:21:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleChunkTime -> WPHq:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleChunkTime$1 -> WPHq$1:
    react.sampler.SampleChunkTime this$0 -> hSGk
    21:21:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleChunksLoaded -> DGpy:
    react.graph.IFormatter formatter -> feko
    18:27:void <init>() -> <init>
    32:38:void construct() -> DXga
    43:44:void sample() -> aDHh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleChunksLoaded$1 -> DGpy$1:
    react.sampler.SampleChunksLoaded this$0 -> sdHK
    20:20:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> IyWb
react.sampler.SampleChunksLoadedPerSecond -> PTEl:
    react.gmath.Average a -> sAci
    react.graph.IFormatter formatter -> feko
    16:29:void <init>() -> <init>
    34:40:void construct() -> DXga
    45:47:void sample() -> aDHh
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleChunksLoadedPerSecond$1 -> PTEl$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> hchB
    22:22:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> IyWb
react.sampler.SampleEntitiesDrops -> esCv:
    react.graph.IFormatter formatter -> feko
    18:27:void <init>() -> <init>
    32:38:void construct() -> DXga
    43:44:void sample() -> aDHh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleEntitiesDrops$1 -> esCv$1:
    react.sampler.SampleEntitiesDrops this$0 -> jXkt
    20:20:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> IyWb
react.sampler.SampleEntitiesLiving -> LrMR:
    react.graph.IFormatter formatter -> feko
    18:27:void <init>() -> <init>
    32:38:void construct() -> DXga
    43:44:void sample() -> aDHh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleEntitiesLiving$1 -> LrMR$1:
    react.sampler.SampleEntitiesLiving this$0 -> xrvL
    20:20:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> IyWb
react.sampler.SampleEntitiesTiles -> qdct:
    react.graph.IFormatter formatter -> feko
    18:27:void <init>() -> <init>
    32:38:void construct() -> DXga
    43:44:void sample() -> aDHh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleEntitiesTiles$1 -> qdct$1:
    react.sampler.SampleEntitiesTiles this$0 -> Gtjh
    20:20:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> IyWb
react.sampler.SampleEntitiesTotal -> VUVr:
    react.graph.IFormatter formatter -> feko
    18:27:void <init>() -> <init>
    32:38:void construct() -> DXga
    43:44:void sample() -> aDHh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleEntitiesTotal$1 -> VUVr$1:
    react.sampler.SampleEntitiesTotal this$0 -> kuap
    20:20:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> IyWb
react.sampler.SampleEntityDroppedTicks -> ETFk:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleEntityDroppedTicks$1 -> ETFk$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> EfTb
    21:21:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleEntityTime -> gggm:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleEntityTime$1 -> gggm$1:
    react.sampler.SampleEntityTime this$0 -> VNRa
    21:21:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleEntityTimeLock -> xWuv:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleEntityTimeLock$1 -> xWuv$1:
    react.sampler.SampleEntityTimeLock this$0 -> etRA
    21:21:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleExplosionTime -> gNVW:
    react.graph.IFormatter formatter -> feko
    18:27:void <init>() -> <init>
    32:38:void construct() -> DXga
    43:44:void sample() -> aDHh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleExplosionTime$1 -> gNVW$1:
    react.sampler.SampleExplosionTime this$0 -> TsAW
    20:20:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> IyWb
react.sampler.SampleFluidPerSecond -> MAkS:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleFluidPerSecond$1 -> MAkS$1:
    react.sampler.SampleFluidPerSecond this$0 -> fDPN
    21:21:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleFluidPerTick -> WPJB:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    46:53:void sample() -> aDHh
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleFluidPerTick$1 -> WPJB$1:
    react.sampler.SampleFluidPerTick this$0 -> nuyR
    21:21:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleFluidTickTime -> UIbk:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleFluidTickTime$1 -> UIbk$1:
    react.sampler.SampleFluidTickTime this$0 -> Rkxo
    21:21:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleFluidTickUtilization -> fmUy:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    46:53:void sample() -> aDHh
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleFluidTickUtilization$1 -> fmUy$1:
    react.sampler.SampleFluidTickUtilization this$0 -> Tinj
    21:21:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleHopperPerSecond -> wLcX:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleHopperPerSecond$1 -> wLcX$1:
    react.sampler.SampleHopperPerSecond this$0 -> HEJf
    21:21:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleHopperPerTick -> EBdd:
    react.graph.IFormatter formatter -> feko
    19:29:void <init>() -> <init>
    34:40:void construct() -> DXga
    47:54:void sample() -> aDHh
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleHopperPerTick$1 -> EBdd$1:
    react.sampler.SampleHopperPerTick this$0 -> tDgF
    21:21:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleHopperTickTime -> NNBg:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleHopperTickTime$1 -> NNBg$1:
    react.sampler.SampleHopperTickTime this$0 -> vJmD
    21:21:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleHopperTickUtilization -> UJFW:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    46:53:void sample() -> aDHh
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleHopperTickUtilization$1 -> UJFW$1:
    react.sampler.SampleHopperTickUtilization this$0 -> nCVO
    21:21:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleMemoryAllocated -> qeHj:
    react.graph.IFormatter formatter -> feko
    18:27:void <init>() -> <init>
    32:38:void construct() -> DXga
    43:44:void sample() -> aDHh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleMemoryAllocated$1 -> qeHj$1:
    react.sampler.SampleMemoryAllocated this$0 -> QGWG
    20:20:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> IyWb
react.sampler.SampleMemoryAllocationPerSecond -> gyMo:
    react.graph.IFormatter formatter -> feko
    18:27:void <init>() -> <init>
    32:38:void construct() -> DXga
    43:44:void sample() -> aDHh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleMemoryAllocationPerSecond$1 -> gyMo$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> ETti
    20:20:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> IyWb
react.sampler.SampleMemoryFree -> ktYK:
    react.graph.IFormatter formatter -> feko
    18:27:void <init>() -> <init>
    32:38:void construct() -> DXga
    43:44:void sample() -> aDHh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleMemoryFree$1 -> ktYK$1:
    react.sampler.SampleMemoryFree this$0 -> ifnE
    20:20:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> IyWb
react.sampler.SampleMemoryMax -> xWyw:
    react.graph.IFormatter formatter -> feko
    18:27:void <init>() -> <init>
    32:38:void construct() -> DXga
    43:44:void sample() -> aDHh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleMemoryMax$1 -> xWyw$1:
    react.sampler.SampleMemoryMax this$0 -> UTDG
    20:20:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> IyWb
react.sampler.SampleMemoryUse -> LOkw:
    react.graph.IFormatter formatter -> feko
    18:27:void <init>() -> <init>
    32:38:void construct() -> DXga
    43:44:void sample() -> aDHh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleMemoryUse$1 -> LOkw$1:
    react.sampler.SampleMemoryUse this$0 -> XnOE
    20:20:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> IyWb
react.sampler.SamplePhysicsTickTime -> XdPi:
    react.graph.IFormatter formatter -> feko
    18:27:void <init>() -> <init>
    32:38:void construct() -> DXga
    43:44:void sample() -> aDHh
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SamplePhysicsTickTime$1 -> XdPi$1:
    react.sampler.SamplePhysicsTickTime this$0 -> rhvr
    20:20:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> IyWb
react.sampler.SampleRedstonePerSecond -> TGBw:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleRedstonePerSecond$1 -> TGBw$1:
    react.sampler.SampleRedstonePerSecond this$0 -> IabU
    21:21:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleRedstonePerTick -> CofM:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    46:53:void sample() -> aDHh
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleRedstonePerTick$1 -> CofM$1:
    react.sampler.SampleRedstonePerTick this$0 -> xryP
    21:21:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleRedstoneTickTime -> vIcS:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleRedstoneTickTime$1 -> vIcS$1:
    react.sampler.SampleRedstoneTickTime this$0 -> Gtmi
    21:21:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleRedstoneTickUtilization -> FWMR:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    46:53:void sample() -> aDHh
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleRedstoneTickUtilization$1 -> FWMR$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> wNTV
    21:21:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleSyncQueue -> Yoda:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleSyncQueue$1 -> Yoda$1:
    react.sampler.SampleSyncQueue this$0 -> aVfM
    21:21:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleTickTime -> JlJb:
    react.graph.IFormatter formatter -> feko
    react.gmath.Average aa -> YhaP
    17:29:void <init>() -> <init>
    34:40:void construct() -> DXga
    45:47:void sample() -> aDHh
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleTickTime$1 -> JlJb$1:
    react.sampler.SampleTickTime this$0 -> JTER
    22:22:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> IyWb
react.sampler.SampleTickUtilization -> TFbm:
    react.graph.IFormatter formatter -> feko
    react.gmath.Average aa -> YhaP
    17:29:void <init>() -> <init>
    34:40:void construct() -> DXga
    45:47:void sample() -> aDHh
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleTickUtilization$1 -> TFbm$1:
    react.sampler.SampleTickUtilization this$0 -> kTCC
    22:22:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> IyWb
react.sampler.SampleTicksPerSecond -> ndPF:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleTicksPerSecond$1 -> ndPF$1:
    react.sampler.SampleTicksPerSecond this$0 -> LHiF
    21:21:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleTileDroppedTicks -> Gjpk:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleTileDroppedTicks$1 -> Gjpk$1:
    react.sampler.SampleTileDroppedTicks this$0 -> wEcB
    21:21:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleTileTime -> qBcb:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleTileTime$1 -> qBcb$1:
    react.sampler.SampleTileTime this$0 -> vvEO
    21:21:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.sampler.SampleTileTimeLock -> lDUt:
    react.graph.IFormatter formatter -> feko
    19:28:void <init>() -> <init>
    33:39:void construct() -> DXga
    44:45:void sample() -> aDHh
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> NgEq
react.sampler.SampleTileTimeLock$1 -> lDUt$1:
    react.sampler.SampleTileTimeLock this$0 -> NOPJ
    21:21:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> IyWb
react.security.checkpoints.SecurityCheckpointAlpha -> ebEQ:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> ivgE
    78:148:void doScan(java.lang.Runnable) -> BuBg
    152:181:byte[] readResource(java.io.File,java.lang.String) -> rfxw
    186:217:react.glang.GMap scan(java.io.File) -> BuBg
    33:33:byte[] access$000(java.io.File,java.lang.String) -> BuBg
react.security.checkpoints.SecurityCheckpointAlpha$1 -> ebEQ$1:
    java.lang.Runnable val$r -> IHNq
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> ebEQ$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> HUla
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> ogQu:
    java.lang.String ip -> xPuR
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> kbuY:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> kbuY$1:
    java.io.File val$f -> LQXS
    react.security.locks.SecurityLockAlpha this$0 -> LHfo
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> vbuG:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> Hdqq
react.slate.PhantomSlate -> PdiC:
    react.glang.GList lines -> rGSq
    react.glang.GList viewers -> fTrK
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> bYgT
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> nRpu
    44:45:void set(int,java.lang.String) -> BuBg
    50:51:void setLines(react.glang.GList) -> LhnC
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> dgQf
    91:95:void addViewer(org.bukkit.entity.Player) -> Hdqq
    100:102:void removeViewer(org.bukkit.entity.Player) -> bXKh
    107:107:react.glang.GList getViewers() -> mPOU
    113:113:boolean isViewing(org.bukkit.entity.Player) -> vtFp
    119:120:void addLine(java.lang.String) -> LiMk
    125:126:void clearLines() -> SDEN
react.slate.Slate -> xPIk:
    void build() -> dgQf
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> nRpu
    void set(int,java.lang.String) -> BuBg
    void setLines(react.glang.GList) -> LhnC
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> Hdqq
    void addLine(java.lang.String) -> LiMk
    void clearLines() -> SDEN
    void removeViewer(org.bukkit.entity.Player) -> bXKh
    react.glang.GList getViewers() -> mPOU
    boolean isViewing(org.bukkit.entity.Player) -> vtFp
    void update() -> update
react.slate.SlateUtil -> lnid:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> dNFN
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> eGvd
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> rfxw
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> BuBg
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> uhSQ
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> rfxw
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> rfxw
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> BuBg
    186:196:java.lang.String convertJSON(java.lang.String) -> NgEq
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> BuBg
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> rfxw
react.surge.Main -> UQtm:
    react.glang.GList plugins -> kCAC
    react.glang.GMap pluginInstances -> RuLu
    react.glang.GList controllerSet -> sciW
    react.glang.GMap anchors -> UvEg
    react.glang.GList classes -> qvuH
    java.lang.reflect.Field nsField -> WYgk
    java.lang.reflect.Field thField -> hAgM
    react.glang.GList tracks -> xsXg
    long nsf -> qvtU
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> eixc
    90:109:long getNanoSync() -> yRpQ
    114:115:void requestResetNanos() -> Xlcy
    119:127:void requestReload() -> dVUP
    131:134:void requestReload(java.lang.Runnable) -> uhSQ
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> rfxw
    201:218:void onStop() -> oEST
    224:224:void onPostInit() -> hjrG
    230:230:void onPreInit() -> jXFq
    234:245:void shutDownAmps() -> Tyif
    249:458:void initializeAmps() -> qCHt
    463:504:void doScan() -> EBix
    508:530:void scanForPoolDefiners() -> jFde
    534:550:void scanForRawEvents() -> EvPL
    554:570:void scanForDynamicTrack() -> QpaX
    574:595:void scanForAmps() -> fBiJ
    600:611:void onTick() -> wDMr
react.surge.Main$1 -> UQtm$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> DjXF:
    react.surge.control.AmpedPlugin plugin -> IHPE
    boolean connected -> connected
    int masterTask -> ORQj
    java.lang.Runnable onReload -> JBbB
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> jGEM
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> cRqX
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> rfxw
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> rfxw
    123:124:void stopTask(int) -> DXga
    128:128:react.surge.control.AmpedPlugin getPlugin() -> Ipyl
    133:133:int getMasterTask() -> JIie
    138:138:java.lang.Runnable getOnReload() -> DakG
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> rfxw
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> PBXQ
    158:159:void setOnReload(java.lang.Runnable) -> Jshh
    67:67:void access$0(react.surge.PluginAmp) -> rfxw
react.surge.PluginAmp$1 -> DjXF$1:
    react.surge.PluginAmp this$0 -> EDSo
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> DjXF$2:
    react.surge.PluginAmp this$0 -> EDSo
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> DjXF$3:
    react.surge.PluginAmp this$0 -> EDSo
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> UASy:
    react.surge.PluginAmp amp -> yeYp
    react.glang.GList tickComponents -> DIaX
    react.glang.GList atickComponents -> RtmC
    react.surge.sched.TaskManager taskmgr -> vluV
    react.surge.hotload.HotloadManager hotloadmgr -> ifoc
    java.lang.Thread mainThread -> GcnT
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> rfxw
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> AXOT
    44:44:java.io.File folder() -> jXFe
    49:51:java.io.File getPluginJarFile() -> hcBT
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> Jshh
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> eXvs
    74:74:react.glang.GList getTickComponents() -> MtxV
    79:79:react.glang.GList getAsyncTickComponents() -> TOYb
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> rfxw
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> BuBg
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> BuBg
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> HTga
    126:126:boolean hasAmp() -> fBkX
    131:131:react.surge.PluginAmp getAmp() -> PuqM
    136:136:react.surge.sched.TaskManager getTaskManager() -> VxCa
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> Qpcs
react.surge.cluster.Cluster -> ArQH:
    react.surge.cluster.ClusterType type -> fUVS
    java.lang.Object t -> Gknj
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> Kfap
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> GtBO:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> erfO:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> ghKT:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> bPJr:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> xrLV:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> dUpQ:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> DGsm:
    react.surge.cluster.ClusterType INT -> SUoP
    react.surge.cluster.ClusterType BOOLEAN -> iwpv
    react.surge.cluster.ClusterType STRING -> QWxs
    react.surge.cluster.ClusterType STRING_LIST -> QrMM
    react.surge.cluster.ClusterType DOUBLE -> CXCC
    react.surge.cluster.ClusterType LONG -> rXXk
    react.surge.cluster.ClusterType[] ENUM$VALUES -> xjkN
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> ggjW:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> tgPX
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> rfxw
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> rfxw
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> gEmt
react.surge.cluster.ConfigurationDataOutput -> NwuF:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> BuBg
react.surge.cluster.DataCluster -> eiwb:
    react.glang.GMap clusters -> RSLv
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> Pdod
    29:33:void fromJson(react.json.JSONObject) -> gUxe
    37:44:react.json.JSONObject toJson() -> sAAk
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> QxtU
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> rfxw
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> LGLx
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> LiNY
    194:195:void set(java.lang.String,int) -> gUxe
    199:200:void set(java.lang.String,boolean) -> uhSQ
    204:205:void set(java.lang.String,double) -> uhSQ
    209:210:void set(java.lang.String,long) -> uhSQ
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> rfxw
react.surge.cluster.ICluster -> DXwd:
    react.surge.cluster.ClusterType getType() -> Kfap
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> pHUN:
react.surge.cluster.IDataInput -> Cwwj:
    react.surge.cluster.DataCluster read(java.io.File) -> uhSQ
react.surge.cluster.IDataOutput -> TFeA:
    void write(react.surge.cluster.DataCluster,java.io.File) -> rfxw
react.surge.cluster.Key -> Qxow:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> xqnf:
    int value() -> value
react.surge.cluster.KeyStore -> fdjQ:
react.surge.cluster.ReflectedConfigurationException -> gFKQ:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> RYor:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> uhSQ
react.surge.cluster.YamlDataOutput -> pHUU:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> rfxw
react.surge.collection.GSound -> Gbar:
    java.lang.String sound -> pcSy
    org.bukkit.Sound iSound -> lNWQ
    java.lang.Float volume -> AIKT
    java.lang.Float pitch -> VNWf
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> VTgS
    61:72:void play(org.bukkit.Location) -> LiNY
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> rfxw
    93:93:java.lang.String getSound() -> ebKo
    98:99:void setSound(java.lang.String) -> aDHh
    103:103:org.bukkit.Sound getiSound() -> FyVR
    108:109:void setiSound(org.bukkit.Sound) -> rfxw
    113:113:java.lang.Float getVolume() -> ebKn
    118:119:void setVolume(java.lang.Float) -> rfxw
    123:123:java.lang.Float getPitch() -> DsPS
    128:129:void setPitch(java.lang.Float) -> BuBg
react.surge.control.AmpedPlugin -> OjYi:
    react.glang.GList controllers -> xPwd
    react.gconcurrent.ParallelPoolManager pp -> Gcnd
    react.surge.server.CoreTickThread ctt -> gGWr
    24:50:void <init>() -> <init>
    void doScan() -> EBix
    long getNanoSync() -> yRpQ
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:91:void onDisable() -> onDisable
    96:96:react.glang.GList getControllers() -> SLVr
    102:103:void registerController(react.surge.control.IController) -> rfxw
    108:119:void onTick() -> wDMr
    124:124:java.lang.String getTickName() -> hbVT
    130:130:react.gconcurrent.ParallelPoolManager getThreadPool() -> jpyw
    136:251:void destroyOldThreads() -> KUaL
    void onControllerRegistry() -> eixc
    void onStart(react.surge.util.Protocol) -> rfxw
    void onStop() -> oEST
    void onPostInit() -> hjrG
    void onPreInit() -> jXFq
react.surge.control.AmpedPlugin$1 -> OjYi$1:
    react.surge.control.AmpedPlugin this$0 -> lFFR
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> gMqg
react.surge.control.AmpedPlugin$2 -> OjYi$2:
    react.surge.control.AmpedPlugin this$0 -> lFFR
    1:149:void <init>(react.surge.control.AmpedPlugin) -> <init>
    154:244:void run() -> run
react.surge.control.Control -> RHoB:
react.surge.control.Controller -> XmDh:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> oMbG:
react.surge.control.Enable -> nSOl:
react.surge.control.IController -> Qgno:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> PCIm:
react.surge.control.Plugin -> Ukjq:
react.surge.control.SurgePlugin -> ArQi:
    void onStart(react.surge.util.Protocol) -> rfxw
    void onStop() -> oEST
    void onPostInit() -> hjrG
    void onPreInit() -> jXFq
    void onControllerRegistry() -> eixc
    void registerController(react.surge.control.IController) -> rfxw
    react.glang.GList getControllers() -> SLVr
    react.gconcurrent.ParallelPoolManager getThreadPool() -> jpyw
react.surge.hotload.HotloadManager -> Sedq:
    react.glang.GMap filemods -> VWJE
    react.glang.GMap filesizes -> mayj
    react.glang.GMap fileacts -> TYTL
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> rfxw
    35:38:void untrack(java.io.File) -> Jshh
    42:45:void untrackall() -> bXcB
    50:86:void onTick() -> wDMr
    91:91:java.lang.String getTickName() -> hbVT
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> rfxw
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> BuBg
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> uhSQ
react.surge.hotload.HotloadManager$1 -> Sedq$1:
    react.surge.hotload.HotloadManager this$0 -> TPcB
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> NMcH:
    boolean init -> rOfs
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> lggy
    java.lang.Class IChatBaseComponent -> jGpA
    java.lang.Class ChatSerializer -> QaKB
    java.lang.Class PacketPlayOutPlayerInfo -> NqST
    java.lang.Class PlayerInfoData -> essp
    java.lang.Class EnumPlayerInfoAction -> uHOO
    java.lang.Class GameProfile -> ghyP
    java.lang.Class EnumGamemode -> EMGJ
    java.lang.Class TileEntitySkull -> RRkU
    java.lang.Class LoadingCache -> CNqR
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> SwFH:
    react.surge.nms.NMSX bountifulAPI -> lhGq
    boolean useOldMethods -> tUlN
    java.lang.String nmsver -> VhJV
    java.lang.Object eTimes -> jHNv
    java.lang.Object eTitle -> DcVO
    java.lang.Object eSubtitle -> KgjH
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> rfxw
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> DXga
    75:89:java.lang.Class getCBClass(java.lang.String) -> PBXQ
    96:104:java.lang.Object serializeChat(java.lang.String) -> YECP
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> BuBg
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> rfxw
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> lMNU
    151:151:java.lang.String craftPackage() -> LHDE
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> rfxw
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> rfxw
    197:207:java.lang.Class getNMSClass(java.lang.String) -> PmMF
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> rfxw
    279:280:void clearTitle(org.bukkit.entity.Player) -> XkoF
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> BuBg
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> rfxw
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> rfxw
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> vkXD
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> LiNY
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> MuBe
    434:447:int ping(org.bukkit.entity.Player) -> VCed
react.surge.nms.NMSX$1 -> SwFH$1:
    org.bukkit.entity.Player val$player -> FrBr
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> SwFH$2:
    org.bukkit.entity.Player val$player -> FrBr
    java.lang.String val$message -> UmWQ
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> PShf:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> ArVs
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> rfxw
    68:82:void clearTitle(org.bukkit.entity.Player) -> XkoF
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> rfxw
react.surge.nms.PacketUtil$V -> PShf$rfxw:
    react.surge.nms.PacketUtil$V R17 -> VNWR
    react.surge.nms.PacketUtil$V R18 -> MvaP
    react.surge.nms.PacketUtil$V R19 -> gPGm
    react.surge.nms.PacketUtil$V R111 -> nLOC
    react.surge.nms.PacketUtil$V R110 -> jbFC
    react.surge.nms.PacketUtil$V R112 -> wEgK
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> sdOQ
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> ifCa:
    java.lang.String title -> title
    java.lang.String subTitle -> yvac
    java.lang.String action -> action
    java.lang.Integer fadeIn -> vSeY
    java.lang.Integer fadeOut -> OATq
    java.lang.Integer stayTime -> tpDE
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> KThF
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> ogWf
    79:80:void setSubTitle(java.lang.String) -> yuAt
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> hHos
    99:100:void setFadeIn(java.lang.Integer) -> uhSQ
    104:104:java.lang.Integer getFadeOut() -> sYpj
    109:110:void setFadeOut(java.lang.Integer) -> Jshh
    114:114:java.lang.Integer getStayTime() -> NgYp
    119:120:void setStayTime(java.lang.Integer) -> gUxe
react.surge.nms.VersionBukkit -> NVTV:
    react.surge.nms.VersionBukkit VU -> neaH
    react.surge.nms.VersionBukkit V7 -> tDmu
    react.surge.nms.VersionBukkit V8 -> VyOE
    react.surge.nms.VersionBukkit V9 -> XvdA
    react.surge.nms.VersionBukkit V11 -> dyfL
    react.surge.nms.VersionBukkit V111 -> grMf
    react.surge.nms.VersionBukkit V112 -> UKVq
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> fDVp
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> ySRe
    27:32:boolean uc() -> inWX
    37:67:react.surge.nms.VersionBukkit get() -> ctux
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> XAmk:
    void burst(java.lang.Object) -> WhmP
    void setTimeLock(double) -> bXKh
    double getEstimatedTimeUse() -> PBkw
    int flush() -> LYDO
    int flush(react.gbench.Profiler) -> rfxw
    void queue(java.lang.Object) -> Hdqq
    void queue(java.util.List) -> uhSQ
    void queue(java.lang.Object[]) -> rfxw
react.surge.sched.ICancellable -> TXFX:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> CpHL:
    void onTick() -> wDMr
    java.lang.String getTickName() -> hbVT
react.surge.sched.ITask -> fSgw:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> dDuG
    java.lang.String getName() -> getName
    double getComputeTime() -> OrnF
    double getTotalComputeTime() -> iUHu
    double getActiveTime() -> fmbS
    boolean hasCompleted() -> fmat
react.surge.sched.Task -> loLI:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> mIJx
    double computeTime -> KWKx
    double totalComputeTime -> HNCW
    double activeTime -> vmWk
    boolean completed -> completed
    react.gbench.Profiler profiler -> veGc
    react.gbench.Profiler activeProfiler -> QOke
    int ticks -> CheA
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> Jshh
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> dDuG
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> OrnF
    150:150:boolean hasCompleted() -> fmat
    156:156:double getTotalComputeTime() -> iUHu
    162:162:double getActiveTime() -> fmbS
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> uhSQ
    15:15:void access$1(react.surge.sched.Task,boolean) -> rfxw
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> Jshh
    14:14:void access$3(react.surge.sched.Task,double) -> rfxw
    12:12:void access$4(react.surge.sched.Task,double) -> BuBg
    14:14:double access$5(react.surge.sched.Task) -> gUxe
    13:13:void access$6(react.surge.sched.Task,double) -> uhSQ
    13:13:double access$7(react.surge.sched.Task) -> LiNY
    12:12:double access$8(react.surge.sched.Task) -> LWlN
react.surge.sched.Task$1 -> loLI$1:
    react.surge.sched.Task this$0 -> dXBX
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> loLI$2:
    react.surge.sched.Task this$0 -> dXBX
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> loLI$3:
    react.surge.sched.Task this$0 -> dXBX
    int val$total -> kugs
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> Tpvl:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> mIJx
    double computeTime -> KWKx
    double totalComputeTime -> HNCW
    double activeTime -> vmWk
    boolean completed -> completed
    react.gbench.Profiler profiler -> veGc
    react.gbench.Profiler activeProfiler -> QOke
    int ticks -> CheA
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> Jshh
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> dDuG
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> OrnF
    101:101:boolean hasCompleted() -> fmat
    107:107:double getTotalComputeTime() -> iUHu
    113:113:double getActiveTime() -> fmbS
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> rfxw
    12:12:void access$1(react.surge.sched.TaskLater,double) -> rfxw
    13:13:double access$2(react.surge.sched.TaskLater) -> BuBg
    12:12:double access$3(react.surge.sched.TaskLater) -> uhSQ
    13:13:void access$4(react.surge.sched.TaskLater,double) -> BuBg
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> Jshh
    14:14:double access$6(react.surge.sched.TaskLater) -> gUxe
    14:14:void access$7(react.surge.sched.TaskLater,double) -> uhSQ
react.surge.sched.TaskLater$1 -> Tpvl$1:
    react.surge.sched.TaskLater this$0 -> QrNM
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> ESir:
    react.glang.GList tasks -> sIbX
    react.glang.GMap taskProfiles -> XmqK
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> rfxw
    25:35:void onTick() -> wDMr
    39:40:void putFinishingTask(react.surge.sched.ITask) -> BuBg
    44:53:void putTask(react.surge.sched.ITask) -> uhSQ
    58:58:java.lang.String getTickName() -> hbVT
    63:63:react.glang.GList getTasks() -> teiU
    68:68:react.glang.GMap getTaskProfiles() -> GtKL
react.surge.sched.TaskProfile -> lMHp:
    double activeTime -> vmWk
    double computeTickTime -> KWKM
    double computeTime -> KWKx
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> fmbS
    23:24:void setActiveTime(double) -> vtFp
    28:28:double getComputeTickTime() -> TiNc
    33:34:void setComputeTickTime(double) -> VTgS
    38:38:double getComputeTime() -> OrnF
    43:44:void setComputeTime(double) -> XkoF
react.surge.server.AsyncTick -> PBgm:
react.surge.server.CPS -> JRXm:
    react.glang.GMap keys -> mIJm
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> vQeY
    46:99:void scan() -> dpLb
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> uhSQ
react.surge.server.CoreTickThread -> stDW:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> HfHQ:
    long memoryFree -> agjc
    long memoryUsed -> ebtq
    long memoryMax -> jbCu
    long lastMemoryUsed -> Ulwv
    long memoryUsedAfterGC -> pJCS
    long allocated -> GBPV
    long collected -> FaOu
    long collections -> GmDa
    long sms -> xjoW
    long memoryAllocatedPerTick -> UdkJ
    long memoryCollectedPerTick -> HgWG
    long memoryFullyAllocatedPerTick -> bkPg
    long mah -> qnkh
    long mahs -> eIea
    22:39:void <init>() -> <init>
    void onAllocationSet() -> rVqT
    46:98:void run() -> run
    102:102:long getMemoryFree() -> FVtX
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> uGHw
    117:117:long getLastMemoryUsed() -> aEAW
    122:122:long getMemoryUsedAfterGC() -> kuBC
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> aUbB
    137:137:long getCollections() -> sHsJ
    142:142:long getSms() -> FyYA
    147:147:long getMemoryAllocatedPerTick() -> DjaY
    152:152:long getMemoryCollectedPerTick() -> LjGM
    157:157:long getMemoryFullyAllocatedPerTick() -> hISd
    162:162:long getMah() -> yBTF
    167:167:long getMahs() -> PBmh
react.surge.server.SuperSampler -> yAnw:
    react.gmath.Average ticksPerSecondL -> COTv
    react.gmath.Average tickTimeL -> Tiww
    react.gmath.Average mahL -> Iriq
    double ticksPerSecond -> DYvK
    double ticksPerSecondRaw -> vBdy
    double tickTime -> WtBv
    double tickTimeRaw -> jbFw
    boolean running -> running
    boolean frozen -> XDAf
    double tickUtilizationRaw -> wyNX
    double tickUtilization -> MKqk
    double leftoverTickTime -> BCaB
    long memoryUse -> nwEI
    long memoryAllocated -> ujUw
    long memoryCollected -> hcog
    long mahs -> eIea
    int totalChunks -> elIL
    int totalEntities -> jbGJ
    int totalDrops -> IagW
    int totalTiles -> HgVE
    int totalLiving -> hmAx
    int chunksLoaded -> DRXW
    int chunksUnloaded -> MTao
    react.surge.server.WorldMonitor worldMonitor -> mHjo
    react.surge.server.TPSMonitor tpsMonitor -> lWKA
    react.surge.server.MemoryMonitor memoryMonitor -> stpO
    java.lang.StackTraceElement[] lockStack -> UvMJ
    react.glang.GMap spikes -> NEoT
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> wDMr
    154:154:java.lang.String getTickName() -> hbVT
    159:159:react.gmath.Average getTicksPerSecondL() -> KLox
    164:164:double getTicksPerSecond() -> IOOs
    169:169:double getTicksPerSecondRaw() -> jiMH
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> nlhI
    184:184:react.gmath.Average getTickTimeL() -> JJMy
    189:189:double getTickTime() -> FEqd
    194:194:double getTickTimeRaw() -> GHuF
    199:199:double getTickUtilizationRaw() -> WrVy
    204:204:double getTickUtilization() -> vlNf
    209:209:double getLeftoverTickTime() -> sIRe
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> anrU
    219:219:long getMemoryUse() -> KVBu
    224:224:long getMemoryAllocated() -> uXJR
    229:229:long getMemoryCollected() -> fdpB
    234:234:react.gmath.Average getMahL() -> tKtg
    239:239:long getMahs() -> PBmh
    244:244:int getTotalChunks() -> KEDL
    249:249:int getTotalEntities() -> gqGq
    254:254:int getTotalDrops() -> sbgi
    259:259:int getTotalTiles() -> VwgU
    264:264:int getTotalLiving() -> nljg
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> bqwo
    274:274:int getChunksLoaded() -> UIoh
    279:279:int getChunksUnloaded() -> SwNv
    284:285:void setTicksPerSecondL(react.gmath.Average) -> rfxw
    289:290:void setTickTimeL(react.gmath.Average) -> BuBg
    294:295:void setMahL(react.gmath.Average) -> uhSQ
    299:300:void setTicksPerSecond(double) -> uqDO
    304:305:void setTicksPerSecondRaw(double) -> VCed
    309:310:void setTickTime(double) -> KThF
    314:315:void setTickTimeRaw(double) -> LGIu
    319:320:void setRunning(boolean) -> IyWb
    324:325:void setTickUtilizationRaw(double) -> kACC
    329:330:void setTickUtilization(double) -> kYtA
    334:335:void setLeftoverTickTime(double) -> CfcL
    339:340:void setMemoryUse(long) -> bXKh
    344:345:void setMemoryAllocated(long) -> vtFp
    349:350:void setMemoryCollected(long) -> VTgS
    354:355:void setMahs(long) -> XkoF
    359:360:void setTotalChunks(int) -> YECP
    364:365:void setTotalEntities(int) -> PmMF
    369:370:void setTotalDrops(int) -> vkXD
    374:375:void setTotalTiles(int) -> yuAt
    379:380:void setTotalLiving(int) -> vQeY
    384:385:void setChunksLoaded(int) -> CUbt
    389:390:void setChunksUnloaded(int) -> weif
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> rfxw
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> rfxw
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> rfxw
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> xHDn
    419:419:react.glang.GMap getSpikes() -> rhEU
    31:31:void access$0(react.surge.server.SuperSampler,int) -> rfxw
    33:33:void access$1(react.surge.server.SuperSampler,int) -> BuBg
    34:34:void access$2(react.surge.server.SuperSampler,int) -> uhSQ
    32:32:void access$3(react.surge.server.SuperSampler,int) -> Jshh
    35:35:void access$4(react.surge.server.SuperSampler,int) -> gUxe
    36:36:void access$5(react.surge.server.SuperSampler,int) -> LiNY
    37:37:void access$6(react.surge.server.SuperSampler,int) -> LWlN
    19:19:void access$7(react.surge.server.SuperSampler,double) -> rfxw
    21:21:void access$8(react.surge.server.SuperSampler,double) -> BuBg
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> rfxw
    19:19:double access$10(react.surge.server.SuperSampler) -> BuBg
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> uhSQ
    21:21:double access$12(react.surge.server.SuperSampler) -> Jshh
    18:18:void access$13(react.surge.server.SuperSampler,double) -> uhSQ
    20:20:void access$14(react.surge.server.SuperSampler,double) -> Jshh
    24:24:void access$15(react.surge.server.SuperSampler,double) -> gUxe
    20:20:double access$16(react.surge.server.SuperSampler) -> gUxe
    25:25:void access$17(react.surge.server.SuperSampler,double) -> LiNY
    25:25:double access$18(react.surge.server.SuperSampler) -> LiNY
    26:26:void access$19(react.surge.server.SuperSampler,double) -> LWlN
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> rfxw
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> LWlN
    27:27:void access$22(react.surge.server.SuperSampler,long) -> rfxw
    28:28:void access$23(react.surge.server.SuperSampler,long) -> BuBg
    29:29:void access$24(react.surge.server.SuperSampler,long) -> uhSQ
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> MuBe
    30:30:void access$26(react.surge.server.SuperSampler,long) -> Jshh
react.surge.server.SuperSampler$1 -> yAnw$1:
    react.surge.server.SuperSampler this$0 -> eQub
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> rfxw
react.surge.server.SuperSampler$2 -> yAnw$2:
    react.surge.server.SuperSampler this$0 -> eQub
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> RYwx
    106:107:void onSpike() -> ThpE
react.surge.server.SuperSampler$3 -> yAnw$3:
    react.surge.server.SuperSampler this$0 -> eQub
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> rVqT
react.surge.server.TPSMonitor -> DbKx:
    double tickTimeMS -> kdgs
    double rawTicksPerSecond -> kTHE
    react.gbench.Profiler tickProfiler -> KEkE
    react.gbench.Profiler tickTimeProfiler -> BDBf
    boolean ticked -> DlLA
    java.lang.Thread$State lastState -> FaOr
    double actualTickTimeMS -> kdlE
    double ltt -> Rttw
    long lastTick -> IOjW
    boolean frozen -> XDAf
    java.lang.StackTraceElement[] lockedStack -> wgnS
    double lmsx -> ubHp
    23:40:void <init>() -> <init>
    void onTicked() -> RYwx
    void onSpike() -> ThpE
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> rfxw
    160:160:double getTickTimeMS() -> RYyH
    165:165:double getRawTicksPerSecond() -> QFTt
    170:170:react.gbench.Profiler getTickProfiler() -> bXfl
    175:175:boolean isTicked() -> mrWt
    180:181:void markTick() -> BJhm
    185:185:react.gbench.Profiler getTickTimeProfiler() -> xifd
    190:190:java.lang.Thread$State getLastState() -> IXOx
    195:195:double getActualTickTimeMS() -> MlmM
    200:200:double getLtt() -> qTQW
    205:205:long getLastTick() -> TNiN
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> gpfj
react.surge.server.WorldMonitor -> Smve:
    boolean chunksChanged -> AseI
    boolean dropChanged -> ebya
    boolean tileChanged -> KqCF
    boolean livingChanged -> YXHP
    boolean totalChanged -> WRBN
    boolean updated -> BLTX
    int totalChunks -> elIL
    int totalDrops -> IagW
    int totalTiles -> HgVE
    int totalLiving -> hmAx
    int totalEntities -> jbGJ
    int chunksLoaded -> DRXW
    int chunksUnloaded -> MTao
    long ms -> dVUP
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> rfxw
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> BuBg
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> rfxw
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> rfxw
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> rfxw
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> rfxw
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> rfxw
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> rfxw
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> rfxw
    130:131:void doUpdate() -> gOEJ
    135:186:void sample() -> aDHh
    190:196:void sampleTotalCount() -> vkqD
    200:206:void sampleLivingCount() -> YNLD
    210:238:void sampleTileCount() -> nJgA
    242:248:void sampleDropCount() -> ekAD
    252:258:void sampleChunkCount() -> aLqQ
react.surge.text.PhantomSpinner -> LYCF:
    react.surge.text.ProgressSpinner s -> axqX
    react.surge.text.ProgressSpinner c -> nfET
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> PCLJ:
    java.lang.String[] chars -> UBio
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> Ewac
    react.surge.text.ProgressSpinner NETWORK -> pRWv
    react.surge.text.ProgressSpinner CIRCLES -> CylM
    react.surge.text.ProgressSpinner RANDOMS -> jbHx
    react.surge.text.ProgressSpinner MERGERS -> AsdW
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> tvjy
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> jhgm:
    int value() -> value
react.surge.util.Area -> ebJe:
    org.bukkit.Location location -> scqp
    java.lang.Double radius -> wgnI
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> rfxw
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> yKGT
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> LWlN
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> MuBe
    109:109:boolean isWithin(org.bukkit.Location) -> CoUX
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> Jshh
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> rfxw
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> mPTf
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> Aiiw
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> UYvJ
    257:257:java.lang.Double getRadius() -> HULG
    268:269:void setRadius(java.lang.Double) -> uhSQ
    278:283:org.bukkit.Location random() -> kJNl
react.surge.util.Axis -> jFdq:
    react.surge.util.Axis X -> Gctt
    react.surge.util.Axis Y -> WIPs
    react.surge.util.Axis Z -> uPes
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> SDsI
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> psQF
    29:29:org.bukkit.util.Vector negative() -> WHEY
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> FySx:
    react.surge.util.BlastResistance BARRIER -> ARCn
    react.surge.util.BlastResistance BEDROCK -> NGFM
    react.surge.util.BlastResistance COMMAND -> iESN
    react.surge.util.BlastResistance ENDER_PORTAL -> SUuA
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> iERp
    react.surge.util.BlastResistance ANVIL -> MnVc
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> yUBY
    react.surge.util.BlastResistance OBSIDIAN -> LkTD
    react.surge.util.BlastResistance ENDER_CHEST -> AYsM
    react.surge.util.BlastResistance WATER -> httE
    react.surge.util.BlastResistance LAVA -> Xvek
    react.surge.util.BlastResistance STATIONARY_WATER -> mjqR
    react.surge.util.BlastResistance DRAGON_EGG -> VVmR
    react.surge.util.BlastResistance ENDER_STONE -> SDsK
    react.surge.util.BlastResistance COAL_BLOCK -> xkQL
    react.surge.util.BlastResistance DIAMOND_BLOCK -> nDAU
    react.surge.util.BlastResistance EMERALD_BLOCK -> hRoo
    react.surge.util.BlastResistance GOLD_BLOCK -> TQHe
    react.surge.util.BlastResistance IRON_BLOCK -> jPen
    react.surge.util.BlastResistance REDSTONE_BLOCK -> BCec
    react.surge.util.BlastResistance BRICK -> gjCq
    react.surge.util.BlastResistance BRICK_STAIRS -> aqCb
    react.surge.util.BlastResistance HARD_CLAY -> RcvG
    react.surge.util.BlastResistance STONE -> EoRl
    react.surge.util.BlastResistance SMOOTH_BRICK -> YWhv
    react.surge.util.BlastResistance SMOOTH_STAIRS -> eAYf
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> JnBI
    react.surge.util.BlastResistance STONE_SLAB2 -> KyTu
    react.surge.util.BlastResistance IRON_DOOR -> HNHq
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> Sfxm
    react.surge.util.BlastResistance IRON_TRAPDOOR -> FjEr
    react.surge.util.BlastResistance MOB_SPAWNER -> fLnF
    react.surge.util.BlastResistance WEB -> hmGC
    react.surge.util.BlastResistance DISPENSER -> AYtK
    react.surge.util.BlastResistance DROPPER -> UePY
    react.surge.util.BlastResistance FURNACE -> MKul
    react.surge.util.BlastResistance BURNING_FURNACE -> suVY
    react.surge.util.BlastResistance BEACON -> TsOC
    react.surge.util.BlastResistance COAL_ORE -> Ialn
    react.surge.util.BlastResistance COCOA -> jQJK
    react.surge.util.BlastResistance DIAMOND_ORE -> oXIJ
    react.surge.util.BlastResistance EMERALD_ORE -> scsr
    react.surge.util.BlastResistance FENCE -> MDFn
    react.surge.util.BlastResistance FENCE_GATE -> dhjY
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> ifwg
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> BKtm
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> bAAr
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> ribS
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> AISK
    react.surge.util.BlastResistance ACACIA_FENCE -> vSjd
    react.surge.util.BlastResistance BIRCH_FENCE -> cefN
    react.surge.util.BlastResistance DARK_OAK_FENCE -> txYF
    react.surge.util.BlastResistance SPRUCE_FENCE -> BLWd
    react.surge.util.BlastResistance JUNGLE_FENCE -> NOXf
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> Rctk
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> lySC
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> cKrk
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> YXIc
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> mjqu
    react.surge.util.BlastResistance QUARTZ_STAIRS -> QaRt
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> LRCq
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> VWQO
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> xtDI
    react.surge.util.BlastResistance WOOD_STAIRS -> MCdk
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> ixYU
    react.surge.util.BlastResistance ACACIA_DOOR -> aySM
    react.surge.util.BlastResistance BIRCH_DOOR -> ayUj
    react.surge.util.BlastResistance DARK_OAK_DOOR -> VpeU
    react.surge.util.BlastResistance SPRUCE_DOOR -> qMOc
    react.surge.util.BlastResistance JUNGLE_DOOR -> gidw
    react.surge.util.BlastResistance GOLD_ORE -> urma
    react.surge.util.BlastResistance HOPPER -> FjHJ
    react.surge.util.BlastResistance IRON_ORE -> bADE
    react.surge.util.BlastResistance LAPIS_BLOCK -> vvRL
    react.surge.util.BlastResistance LAPIS_ORE -> YynU
    react.surge.util.BlastResistance QUARTZ_ORE -> lWRc
    react.surge.util.BlastResistance REDSTONE_ORE -> iMge
    react.surge.util.BlastResistance TRAP_DOOR -> cUIR
    react.surge.util.BlastResistance WOOD -> wEna
    react.surge.util.BlastResistance CHEST -> yfIK
    react.surge.util.BlastResistance TRAPPED_CHEST -> UTQB
    react.surge.util.BlastResistance WORKBENCH -> LAFE
    react.surge.util.BlastResistance CAULDRON -> YyoL
    react.surge.util.BlastResistance LOG -> VpfK
    react.surge.util.BlastResistance LOG_2 -> KWUC
    react.surge.util.BlastResistance BOOKSHELF -> FqxE
    react.surge.util.BlastResistance BANNER -> QPTr
    react.surge.util.BlastResistance STANDING_BANNER -> lFPb
    react.surge.util.BlastResistance WALL_BANNER -> xtFb
    react.surge.util.BlastResistance JACK_O_LANTERN -> SDvl
    react.surge.util.BlastResistance MELON_BLOCK -> IsOe
    react.surge.util.BlastResistance SKULL -> GtyR
    react.surge.util.BlastResistance PUMPKIN -> ffaG
    react.surge.util.BlastResistance SIGN -> fwcN
    react.surge.util.BlastResistance SIGN_POST -> gPSH
    react.surge.util.BlastResistance WALL_SIGN -> ridG
    react.surge.util.BlastResistance QUARTZ_BLOCK -> cTfs
    react.surge.util.BlastResistance NOTE_BLOCK -> EweD
    react.surge.util.BlastResistance RED_SANDSTONE -> cKui
    react.surge.util.BlastResistance SANDSTONE -> mcEP
    react.surge.util.BlastResistance WOOL -> AAFQ
    react.surge.util.BlastResistance MONSTER_EGG -> cKuc
    react.surge.util.BlastResistance RAILS -> SNJK
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> JmbW
    react.surge.util.BlastResistance DETECTOR_RAIL -> OuBT
    react.surge.util.BlastResistance POWERED_RAIL -> UBmX
    react.surge.util.BlastResistance CLAY -> xQec
    react.surge.util.BlastResistance DIRT -> gaWM
    react.surge.util.BlastResistance GRASS -> PgFS
    react.surge.util.BlastResistance GRAVEL -> NFkx
    react.surge.util.BlastResistance SPONGE -> lWSx
    react.surge.util.BlastResistance BREWING_STAND -> vvSh
    react.surge.util.BlastResistance STONE_BUTTON -> vTPg
    react.surge.util.BlastResistance WOOD_BUTTON -> kCOk
    react.surge.util.BlastResistance CAKE_BLOCK -> pkph
    react.surge.util.BlastResistance ICE -> pcaL
    react.surge.util.BlastResistance PACKED_ICE -> lEqv
    react.surge.util.BlastResistance LEVER -> YWnM
    react.surge.util.BlastResistance MYCEL -> rquv
    react.surge.util.BlastResistance PISTON_BASE -> bRHL
    react.surge.util.BlastResistance PISTON_EXTENSION -> kvTQ
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> MCjL
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> VxxL
    react.surge.util.BlastResistance GOLD_PLATE -> fgET
    react.surge.util.BlastResistance IRON_PLATE -> Nhmx
    react.surge.util.BlastResistance STONE_PLATE -> dGKW
    react.surge.util.BlastResistance WOOD_PLATE -> qMQK
    react.surge.util.BlastResistance SAND -> fxEf
    react.surge.util.BlastResistance SOUL_SAND -> jbNh
    react.surge.util.BlastResistance CACTUS -> RmJr
    react.surge.util.BlastResistance LADDER -> PLqU
    react.surge.util.BlastResistance NETHERRACK -> EEBh
    react.surge.util.BlastResistance GLASS -> xshL
    react.surge.util.BlastResistance THIN_GLASS -> raUX
    react.surge.util.BlastResistance STAINED_GLASS -> RSXX
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> gOtD
    react.surge.util.BlastResistance GLOWSTONE -> Tano
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> xYtq
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> jPmB
    react.surge.util.BlastResistance SEA_LANTERN -> pImL
    react.surge.util.BlastResistance BED_BLOCK -> PUbh
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> kvSJ
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> qLoX
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> gquk
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> VqGe
    react.surge.util.BlastResistance LEAVES -> VVsn
    react.surge.util.BlastResistance LEAVES_2 -> LIVo
    react.surge.util.BlastResistance SNOW -> jrno
    int br -> UCQA
    react.surge.util.BlastResistance[] ENUM$VALUES -> iEYG
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> fmcY
    175:190:int get(org.bukkit.Material) -> rfxw
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> ivgE:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> LWlN
react.surge.util.C -> nRpu:
    react.surge.util.C BLACK -> oNyb
    react.surge.util.C DARK_BLUE -> oGKA
    react.surge.util.C DARK_GREEN -> mcKF
    react.surge.util.C DARK_AQUA -> JKdJ
    react.surge.util.C DARK_RED -> qEDA
    react.surge.util.C DARK_PURPLE -> JBrd
    react.surge.util.C GOLD -> yfLq
    react.surge.util.C GRAY -> YyrV
    react.surge.util.C DARK_GRAY -> dGNL
    react.surge.util.C BLUE -> IbTH
    react.surge.util.C GREEN -> UTUK
    react.surge.util.C AQUA -> OJRn
    react.surge.util.C RED -> dqap
    react.surge.util.C LIGHT_PURPLE -> qDau
    react.surge.util.C YELLOW -> VEvC
    react.surge.util.C WHITE -> TPpf
    react.surge.util.C MAGIC -> rGeR
    react.surge.util.C BOLD -> iyAW
    react.surge.util.C STRIKETHROUGH -> FOyH
    react.surge.util.C UNDERLINE -> vnDy
    react.surge.util.C ITALIC -> gaXh
    react.surge.util.C RESET -> RlnQ
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> yvlr
    char code -> bHwa
    boolean isFormat -> WtNH
    java.lang.String toString -> HpRf
    java.util.Map BY_ID -> aqIk
    java.util.Map BY_CHAR -> CaCd
    java.util.Map dyeChatMap -> vusj
    java.util.Map chatHexMap -> Wbih
    java.util.Map dyeHexMap -> LAGw
    int[] $SWITCH_TABLE$surge$util$C -> lEsO
    react.surge.util.C[] ENUM$VALUES -> scye
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> rWTI
    378:378:java.lang.String hex() -> panD
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> MuBe
    434:442:react.surge.util.C getByChar(java.lang.String) -> CUbt
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> BuBg
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> rfxw
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> BuBg
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> uhSQ
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> weif
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> wThV
    560:578:java.lang.String generateColorTable() -> wxDg
    588:588:org.bukkit.ChatColor chatColor() -> aVCi
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> LWlN
    632:679:byte getItemMeta() -> nKGO
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> VxGc
react.surge.util.C$1 -> nRpu$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> nRpu$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> nRpu$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> nRpu$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> nRpu$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> nRpu$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> nRpu$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> nRpu$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> nRpu$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> nRpu$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> nRpu$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> nRpu$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> nRpu$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> nRpu$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> nRpu$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> nRpu$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> nRpu$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> nRpu$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> nRpu$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> nRpu$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> nRpu$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> nRpu$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> mPOU:
    double number -> rqww
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> WNyF
    23:25:react.surge.util.CDou add(double) -> TyTt
    30:32:react.surge.util.CDou sub(double) -> nJKR
    37:37:double get() -> get
    42:48:void circ() -> ivlH
react.surge.util.CMD -> SDEN:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> Vxwx
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> cKGv
    51:53:void execute(org.bukkit.command.CommandSender) -> uhSQ
    60:77:void execute() -> execute
react.surge.util.CNum -> dNFN:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> wThV
    23:25:react.surge.util.CNum add(int) -> CECB
    30:32:react.surge.util.CNum sub(int) -> ERyj
    37:37:int get() -> get
    42:48:void circ() -> ivlH
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> ylPV
react.surge.util.Chunks -> eGvd:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> owcC
    33:40:react.glang.GList getLoadedChunks() -> gyVn
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> BuBg
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> rfxw
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> rfxw
    98:98:boolean unload(org.bukkit.Chunk) -> LhnC
    114:124:int unload(react.glang.GList,boolean,boolean) -> rfxw
    138:138:int unload(react.glang.GList,boolean) -> rfxw
    150:150:int unload(react.glang.GList) -> SBnO
    166:166:boolean isLoaded(java.lang.String,int,int) -> rfxw
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> uhSQ
    201:205:void load(react.glang.GList) -> lvjD
react.surge.util.Cuboid -> eixc:
    java.lang.String worldName -> lWVD
    int x1 -> YGMc
    int y1 -> hRxl
    int z1 -> kvVH
    int x2 -> Mvny
    int y2 -> rHDr
    int z2 -> nwNG
    int[] $SWITCH_TABLE$surge$util$Axis -> vTPy
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> NhqG
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> rfxw
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> uhSQ
    93:93:boolean hasPlayers() -> ncwq
    98:110:react.glang.GList getPlayers() -> Fxfs
    115:166:react.glang.GList getEntities() -> kdAT
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> jOCQ
    287:287:org.bukkit.Location getLowerNE() -> dNKR
    298:298:org.bukkit.Location getUpperSW() -> IFoT
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> nRyo
    348:348:int getSizeY() -> HoAc
    358:358:int getSizeZ() -> QqJs
    368:368:int getLowerX() -> kIqQ
    378:378:int getLowerY() -> RQjb
    388:388:int getLowerZ() -> KxKN
    398:398:int getUpperX() -> TytL
    408:408:int getUpperY() -> RAIm
    418:418:int getUpperZ() -> AjLF
    428:438:org.bukkit.block.Block[] corners() -> WXhP
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> rfxw
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> BuBg
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> uhSQ
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> Jshh
    546:546:boolean contains(int,int,int) -> gUxe
    558:558:boolean contains(org.bukkit.block.Block) -> MuBe
    570:570:boolean contains(org.bukkit.Location) -> uqDO
    580:580:int volume() -> rhVq
    591:601:byte averageLightLevel() -> AYKm
    612:612:react.surge.util.Cuboid contract() -> VMUK
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> rfxw
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> BuBg
    708:715:boolean containsOnly(org.bukkit.Material) -> BuBg
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> rfxw
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> LiNY
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> rfxw
    786:800:java.util.List getChunks() -> DjdC
    815:819:void fill(int,byte) -> rfxw
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> rqHe
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> wxGd
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> KVFc
react.surge.util.Cuboid$1 -> eixc$1:
    react.surge.util.Cuboid this$0 -> UBqU
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> CoUX
    1:1:java.lang.Object onAdapt(java.lang.Object) -> LWlN
react.surge.util.Cuboid$CuboidDirection -> eixc$rfxw:
    react.surge.util.Cuboid$CuboidDirection North -> rYGO
    react.surge.util.Cuboid$CuboidDirection East -> gXih
    react.surge.util.Cuboid$CuboidDirection South -> wpie
    react.surge.util.Cuboid$CuboidDirection West -> AQlX
    react.surge.util.Cuboid$CuboidDirection Up -> TkFR
    react.surge.util.Cuboid$CuboidDirection Down -> mblM
    react.surge.util.Cuboid$CuboidDirection Horizontal -> yUMo
    react.surge.util.Cuboid$CuboidDirection Vertical -> DdGo
    react.surge.util.Cuboid$CuboidDirection Both -> Juxw
    react.surge.util.Cuboid$CuboidDirection Unknown -> LbnE
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> NhqG
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> WbmE
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> nRxr
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> KVFc
react.surge.util.Cuboid$CuboidIterator -> eixc$BuBg:
    org.bukkit.World w -> AQlO
    int baseX -> XDMe
    int baseY -> xsmH
    int baseZ -> Bnac
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> OuHx
    int sizeY -> PEHD
    int sizeZ -> BfQT
    react.surge.util.Cuboid this$0 -> UBqU
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> yRpQ:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> Xlcy:
    react.glang.GList buffer -> XepV
    boolean dbg -> OSEH
    int kf -> BTou
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> Jshh
    41:49:void l(java.lang.Object,java.lang.String) -> BuBg
    53:54:void s(java.lang.Object,java.lang.String) -> uhSQ
    58:69:void cdb() -> fuvE
    73:79:void v(java.lang.Object,java.lang.String) -> Jshh
    83:84:void w(java.lang.Object,java.lang.String) -> gUxe
    88:89:void f(java.lang.Object,java.lang.String) -> LiNY
    93:106:void l(java.lang.String) -> CECB
    110:117:void s(java.lang.String) -> ERyj
    121:135:void v(java.lang.String) -> ylPV
    139:146:void w(java.lang.String) -> jOCQ
    150:157:void f(java.lang.String) -> IqGj
react.surge.util.DMSRequire -> dVUP:
    react.surge.util.DMSRequirement value() -> xrYG
react.surge.util.DMSRequirement -> oEST:
    react.surge.util.DMSRequirement SQL -> xIXe
    react.surge.util.DMSRequirement[] ENUM$VALUES -> dGNr
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> hjrG:
    react.surge.util.Depend VAULT -> NPAm
    react.surge.util.Depend FAWE -> GKLr
    react.surge.util.Depend WORLDEDIT -> kTUH
    react.surge.util.Depend PROTOLIB -> IkFP
    react.surge.util.Depend CITIZENS -> OBBy
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> cUMw
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> jXFq:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> HTmU
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> Tyif:
    react.surge.util.DimensionFace X -> eIrG
    react.surge.util.DimensionFace Y -> JvYa
    react.surge.util.DimensionFace Z -> smNA
    react.surge.util.DimensionFace[] ENUM$VALUES -> yCia
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> qCHt:
    react.surge.util.Direction U -> mtLs
    react.surge.util.Direction D -> agxb
    react.surge.util.Direction N -> Umgd
    react.surge.util.Direction S -> daAt
    react.surge.util.Direction E -> mbkB
    react.surge.util.Direction W -> DlYs
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> HMqo
    int[] $SWITCH_TABLE$surge$util$Direction -> Bnco
    react.surge.util.Direction[] ENUM$VALUES -> JLIL
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> IGPM
    61:61:int x() -> tUJt
    66:66:int y() -> vJOf
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> QVvj
    81:81:react.glang.GList news() -> RAKc
    86:86:react.glang.GList udnews() -> stOC
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> LGIu
    115:147:react.surge.util.Direction fromByte(byte) -> MuBe
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> fKeL
react.surge.util.DynamicConfiguration -> EBix:
react.surge.util.DynamicTracker -> jFde:
react.surge.util.Embedded -> EvPL:
    react.glang.GList get() -> eHbJ
    void add(java.lang.Object) -> add
react.surge.util.FU -> QpaX:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> rfxw
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> BuBg
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> gUxe
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> LiNY
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> fBiJ:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> VKxE
react.surge.util.Health -> jGEM:
    double hp -> CXTv
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> YWAq
    41:41:double getHearts() -> VLwA
    51:51:double getHalfHearts() -> nJlI
    61:61:int getFlatHalfHearts() -> AXlE
react.surge.util.IO -> cRqX:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> Ipyl:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> rfxw
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> rfxw
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> rfxw
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> rfxw
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> rfxw
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> BuBg
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> uhSQ
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> Jshh
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> rfxw
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> rfxw
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> rfxw
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> rfxw
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> gUxe
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> LiNY
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> LWlN
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> MuBe
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> CoUX
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> rfxw
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> UYvJ
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> uqDO
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> rfxw
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> rfxw
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> BuBg
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> rfxw
react.surge.util.MSound -> JIie:
    react.surge.util.MSound AMBIENCE_CAVE -> dWrd
    react.surge.util.MSound AMBIENCE_RAIN -> hdaA
    react.surge.util.MSound AMBIENCE_THUNDER -> iVbQ
    react.surge.util.MSound ANVIL_BREAK -> hmQj
    react.surge.util.MSound ANVIL_LAND -> SpVB
    react.surge.util.MSound ANVIL_USE -> FYNn
    react.surge.util.MSound ARROW_HIT -> KNjw
    react.surge.util.MSound BURP -> xcNN
    react.surge.util.MSound CHEST_CLOSE -> uPqx
    react.surge.util.MSound CHEST_OPEN -> xcNC
    react.surge.util.MSound CLICK -> Ijha
    react.surge.util.MSound DOOR_CLOSE -> eJVH
    react.surge.util.MSound DOOR_OPEN -> huaE
    react.surge.util.MSound DRINK -> CaGg
    react.surge.util.MSound EAT -> Hoso
    react.surge.util.MSound EXPLODE -> NFqY
    react.surge.util.MSound FALL_BIG -> dObA
    react.surge.util.MSound FALL_SMALL -> FHKn
    react.surge.util.MSound FIRE -> rjLg
    react.surge.util.MSound FIRE_IGNITE -> FHKo
    react.surge.util.MSound FIZZ -> AcQg
    react.surge.util.MSound FUSE -> Efjp
    react.surge.util.MSound GLASS -> OdHb
    react.surge.util.MSound HURT_FLESH -> QGjb
    react.surge.util.MSound ITEM_BREAK -> ShDX
    react.surge.util.MSound ITEM_PICKUP -> OSGW
    react.surge.util.MSound LAVA -> KpmX
    react.surge.util.MSound LAVA_POP -> edGb
    react.surge.util.MSound LEVEL_UP -> UKfa
    react.surge.util.MSound MINECART_BASE -> yClQ
    react.surge.util.MSound MINECART_INSIDE -> PEIQ
    react.surge.util.MSound NOTE_BASS -> NiVW
    react.surge.util.MSound NOTE_PIANO -> yTmU
    react.surge.util.MSound NOTE_BASS_DRUM -> YrGB
    react.surge.util.MSound NOTE_STICKS -> rGlM
    react.surge.util.MSound NOTE_BASS_GUITAR -> nDQK
    react.surge.util.MSound NOTE_SNARE_DRUM -> aqPN
    react.surge.util.MSound NOTE_PLING -> Dcjn
    react.surge.util.MSound ORB_PICKUP -> Hgfm
    react.surge.util.MSound PISTON_EXTEND -> qfkf
    react.surge.util.MSound PISTON_RETRACT -> xROF
    react.surge.util.MSound PORTAL -> kCWu
    react.surge.util.MSound PORTAL_TRAVEL -> sKPJ
    react.surge.util.MSound PORTAL_TRIGGER -> fEIq
    react.surge.util.MSound SHOOT_ARROW -> ukHp
    react.surge.util.MSound SPLASH -> OuLs
    react.surge.util.MSound SPLASH2 -> pAeo
    react.surge.util.MSound STEP_GRASS -> YqhQ
    react.surge.util.MSound STEP_GRAVEL -> AQpP
    react.surge.util.MSound STEP_LADDER -> eJWS
    react.surge.util.MSound STEP_SAND -> MDSG
    react.surge.util.MSound STEP_SNOW -> iMsN
    react.surge.util.MSound STEP_STONE -> thEX
    react.surge.util.MSound STEP_WOOD -> QsBt
    react.surge.util.MSound STEP_WOOL -> JByW
    react.surge.util.MSound SWIM -> UnNQ
    react.surge.util.MSound WATER -> uavM
    react.surge.util.MSound WOOD_CLICK -> tFBP
    react.surge.util.MSound BAT_DEATH -> WQor
    react.surge.util.MSound BAT_HURT -> kLIQ
    react.surge.util.MSound BAT_IDLE -> GvGS
    react.surge.util.MSound BAT_LOOP -> Fiqf
    react.surge.util.MSound BAT_TAKEOFF -> DAfo
    react.surge.util.MSound BLAZE_BREATH -> fgMa
    react.surge.util.MSound BLAZE_DEATH -> Yqha
    react.surge.util.MSound BLAZE_HIT -> smRc
    react.surge.util.MSound CAT_HISS -> XCpN
    react.surge.util.MSound CAT_HIT -> suaq
    react.surge.util.MSound CAT_MEOW -> hlrB
    react.surge.util.MSound CAT_PURR -> BevL
    react.surge.util.MSound CAT_PURREOW -> OdJb
    react.surge.util.MSound CHICKEN_IDLE -> RTBN
    react.surge.util.MSound CHICKEN_HURT -> Guda
    react.surge.util.MSound CHICKEN_EGG_POP -> rGjt
    react.surge.util.MSound CHICKEN_WALK -> Umjv
    react.surge.util.MSound COW_IDLE -> XMAs
    react.surge.util.MSound COW_HURT -> pBEV
    react.surge.util.MSound COW_WALK -> nDNy
    react.surge.util.MSound CREEPER_HISS -> jjfk
    react.surge.util.MSound CREEPER_DEATH -> fLyM
    react.surge.util.MSound ENDERDRAGON_DEATH -> AAOu
    react.surge.util.MSound ENDERDRAGON_GROWL -> aNkS
    react.surge.util.MSound ENDERDRAGON_HIT -> lOKS
    react.surge.util.MSound ENDERDRAGON_WINGS -> iNQu
    react.surge.util.MSound ENDERMAN_DEATH -> xcOH
    react.surge.util.MSound ENDERMAN_HIT -> wFYU
    react.surge.util.MSound ENDERMAN_IDLE -> JnMh
    react.surge.util.MSound ENDERMAN_TELEPORT -> AQqA
    react.surge.util.MSound ENDERMAN_SCREAM -> fxQX
    react.surge.util.MSound ENDERMAN_STARE -> kCYb
    react.surge.util.MSound GHAST_SCREAM -> QisR
    react.surge.util.MSound GHAST_SCREAM2 -> HMwF
    react.surge.util.MSound GHAST_CHARGE -> kLKQ
    react.surge.util.MSound GHAST_DEATH -> XoHc
    react.surge.util.MSound GHAST_FIREBALL -> eIyG
    react.surge.util.MSound GHAST_MOAN -> JLKo
    react.surge.util.MSound IRONGOLEM_DEATH -> IIIM
    react.surge.util.MSound IRONGOLEM_HIT -> YaIP
    react.surge.util.MSound IRONGOLEM_THROW -> dhvy
    react.surge.util.MSound IRONGOLEM_WALK -> xRPS
    react.surge.util.MSound MAGMACUBE_WALK -> nDQy
    react.surge.util.MSound MAGMACUBE_WALK2 -> LlDm
    react.surge.util.MSound MAGMACUBE_JUMP -> SWFl
    react.surge.util.MSound PIG_IDLE -> XoFu
    react.surge.util.MSound PIG_DEATH -> EpBJ
    react.surge.util.MSound PIG_WALK -> yLaY
    react.surge.util.MSound SHEEP_IDLE -> GSci
    react.surge.util.MSound SHEEP_SHEAR -> eBHh
    react.surge.util.MSound SHEEP_WALK -> RKRl
    react.surge.util.MSound SILVERFISH_HIT -> ywUe
    react.surge.util.MSound SILVERFISH_KILL -> diYL
    react.surge.util.MSound SILVERFISH_IDLE -> lOLn
    react.surge.util.MSound SILVERFISH_WALK -> nLan
    react.surge.util.MSound SKELETON_IDLE -> svEO
    react.surge.util.MSound SKELETON_DEATH -> WtTn
    react.surge.util.MSound SKELETON_HURT -> KycR
    react.surge.util.MSound SKELETON_WALK -> LJEJ
    react.surge.util.MSound SLIME_ATTACK -> IHkN
    react.surge.util.MSound SLIME_WALK -> AcVr
    react.surge.util.MSound SLIME_WALK2 -> qxRa
    react.surge.util.MSound SPIDER_IDLE -> wprL
    react.surge.util.MSound SPIDER_DEATH -> pcll
    react.surge.util.MSound SPIDER_WALK -> oPJD
    react.surge.util.MSound WITHER_DEATH -> hCDb
    react.surge.util.MSound WITHER_HURT -> dPId
    react.surge.util.MSound WITHER_IDLE -> lXAm
    react.surge.util.MSound WITHER_SHOOT -> drLa
    react.surge.util.MSound WITHER_SPAWN -> Wsva
    react.surge.util.MSound WOLF_BARK -> JfBS
    react.surge.util.MSound WOLF_DEATH -> UKnM
    react.surge.util.MSound WOLF_GROWL -> mARB
    react.surge.util.MSound WOLF_HOWL -> JnRh
    react.surge.util.MSound WOLF_HURT -> JnSH
    react.surge.util.MSound WOLF_PANT -> tVgO
    react.surge.util.MSound WOLF_SHAKE -> GdiH
    react.surge.util.MSound WOLF_WALK -> rGpF
    react.surge.util.MSound WOLF_WHINE -> tggk
    react.surge.util.MSound ZOMBIE_METAL -> GeGi
    react.surge.util.MSound ZOMBIE_WOOD -> TPyb
    react.surge.util.MSound ZOMBIE_WOODBREAK -> HMvs
    react.surge.util.MSound ZOMBIE_IDLE -> OAjX
    react.surge.util.MSound ZOMBIE_DEATH -> hJsF
    react.surge.util.MSound ZOMBIE_HURT -> iNWH
    react.surge.util.MSound ZOMBIE_INFECT -> qxRJ
    react.surge.util.MSound ZOMBIE_UNFECT -> TIJb
    react.surge.util.MSound ZOMBIE_REMEDY -> ExSm
    react.surge.util.MSound ZOMBIE_WALK -> kLLh
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> XLdw
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> aycM
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> GlxA
    react.surge.util.MSound ZOMBIE_PIG_HURT -> bAQp
    react.surge.util.MSound DIG_WOOL -> Qace
    react.surge.util.MSound DIG_GRASS -> KqTd
    react.surge.util.MSound DIG_GRAVEL -> HyMQ
    react.surge.util.MSound DIG_SAND -> Qisy
    react.surge.util.MSound DIG_SNOW -> ffpF
    react.surge.util.MSound DIG_STONE -> YrME
    react.surge.util.MSound DIG_WOOD -> Jmpe
    react.surge.util.MSound FIREWORK_BLAST -> HNXo
    react.surge.util.MSound FIREWORK_BLAST2 -> TsaG
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> VFbR
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> xtWm
    react.surge.util.MSound FIREWORK_TWINKLE -> nUXj
    react.surge.util.MSound FIREWORK_TWINKLE2 -> rbFO
    react.surge.util.MSound FIREWORK_LAUNCH -> DKAF
    react.surge.util.MSound SUCCESSFUL_HIT -> noLI
    react.surge.util.MSound HORSE_ANGRY -> nTxO
    react.surge.util.MSound HORSE_ARMOR -> LIet
    react.surge.util.MSound HORSE_BREATHE -> AIfK
    react.surge.util.MSound HORSE_DEATH -> seGu
    react.surge.util.MSound HORSE_GALLOP -> lWcF
    react.surge.util.MSound HORSE_HIT -> vLNc
    react.surge.util.MSound HORSE_IDLE -> IHmj
    react.surge.util.MSound HORSE_JUMP -> HFIl
    react.surge.util.MSound HORSE_LAND -> vnQO
    react.surge.util.MSound HORSE_SADDLE -> XUXg
    react.surge.util.MSound HORSE_SOFT -> tWHu
    react.surge.util.MSound HORSE_WOOD -> iyMT
    react.surge.util.MSound DONKEY_ANGRY -> Dtqh
    react.surge.util.MSound DONKEY_DEATH -> AIfw
    react.surge.util.MSound DONKEY_HIT -> ywYl
    react.surge.util.MSound DONKEY_IDLE -> daLT
    react.surge.util.MSound HORSE_SKELETON_DEATH -> OcpE
    react.surge.util.MSound HORSE_SKELETON_HIT -> AlJq
    react.surge.util.MSound HORSE_SKELETON_IDLE -> SNYf
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> rrdi
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> UKnn
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> mlGI
    react.surge.util.MSound VILLAGER_DEATH -> SEhj
    react.surge.util.MSound VILLAGER_HAGGLE -> bswc
    react.surge.util.MSound VILLAGER_HIT -> dOix
    react.surge.util.MSound VILLAGER_IDLE -> CaNx
    react.surge.util.MSound VILLAGER_NO -> iEgR
    react.surge.util.MSound VILLAGER_YES -> Pwti
    java.lang.String pre19sound -> RCFo
    java.lang.String post19sound -> sJtE
    org.bukkit.Sound resolvedSound -> Kyfu
    react.surge.util.MSound[] ENUM$VALUES -> fDrC
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> UIsg
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> DakG:
    org.bukkit.Material material -> TRAJ
    java.lang.Byte data -> gixG
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> qvWw
    79:80:void setData(java.lang.Byte) -> rfxw
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> jXFe:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> Ywdg
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> NpUJ
    68:68:boolean isAnyOnline() -> jiSY
    80:80:react.glang.GList inWorld(org.bukkit.World) -> WhmP
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> SBnO
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> rfxw
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> rfxw
    143:144:void disable(org.bukkit.entity.Player) -> kACC
    154:155:void enable(org.bukkit.entity.Player) -> kYtA
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> rfxw
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> BuBg
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> CfcL
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> rfxw
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> WNyF
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> uhSQ
    300:300:boolean canFindPlayer(java.lang.String) -> Dqwv
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> GbPb
    338:345:react.glang.GList onlinePlayers() -> IrFr
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> TyTt
    368:371:void clear(org.bukkit.entity.Player) -> nJKR
    381:385:void clearEffects(org.bukkit.entity.Player) -> prTV
    398:399:void heal(org.bukkit.entity.Player,double) -> rfxw
    409:410:void heal(org.bukkit.entity.Player) -> FolS
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> Lhle
    432:433:void resetHunger(org.bukkit.entity.Player) -> UcGU
    443:444:void kill(org.bukkit.entity.Player) -> xiJh
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> pHAU
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> LFig
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> rfxw
react.surge.util.P$1 -> jXFe$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> CoUX
    1:1:java.lang.Object onAdapt(java.lang.Object) -> LWlN
react.surge.util.P$2 -> jXFe$2:
    java.lang.Double val$doff -> gPfO
    org.bukkit.entity.Player val$e -> jtBj
    org.bukkit.entity.Entity[] val$result -> eRom
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> UsiF
react.surge.util.PE -> hcBT:
    react.surge.util.PE ABSORPTION -> wXDs
    react.surge.util.PE BLINDNESS -> iWLx
    react.surge.util.PE CONFUSION -> fxWa
    react.surge.util.PE DAMAGE_RESISTANCE -> VXGI
    react.surge.util.PE FAST_DIGGING -> wFcM
    react.surge.util.PE FIRE_RESISTANCE -> elbx
    react.surge.util.PE GLOWING -> GSjp
    react.surge.util.PE HARM -> veau
    react.surge.util.PE HEAL -> knTW
    react.surge.util.PE HEALTH_BOOST -> lNrt
    react.surge.util.PE HUNGER -> bRXb
    react.surge.util.PE INCREASE_DAMAGE -> JDDC
    react.surge.util.PE INVISIBILITY -> AJIE
    react.surge.util.PE JUMP -> THoT
    react.surge.util.PE LEVITATION -> pAln
    react.surge.util.PE LUCK -> bQur
    react.surge.util.PE NIGHT_VISION -> qDpO
    react.surge.util.PE POISON -> NPNN
    react.surge.util.PE REGENERATION -> pBNP
    react.surge.util.PE SATURATION -> Dlcc
    react.surge.util.PE SLOW -> Vhes
    react.surge.util.PE SLOW_DIGGING -> DSQl
    react.surge.util.PE SPEED -> PNDT
    react.surge.util.PE UNLUCK -> LlKT
    react.surge.util.PE WATER_BREATHING -> FPfh
    react.surge.util.PE WEAKNESS -> vnST
    react.surge.util.PE WITHER -> pBNY
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> rfxw
    144:144:react.surge.util.PE d(int) -> IqGj
    156:156:react.surge.util.PE a(int) -> VKxE
    166:166:org.bukkit.potion.PotionEffect c() -> vlUi
    177:178:void c(org.bukkit.entity.LivingEntity) -> LiNY
    182:183:void crm(org.bukkit.entity.LivingEntity) -> LWlN
    187:188:void rm(org.bukkit.entity.LivingEntity) -> MuBe
react.surge.util.ParticleEffect -> eXvs:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> DKBJ
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> XTyc
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> PESH
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> liEk
    react.surge.util.ParticleEffect WATER_BUBBLE -> bAVS
    react.surge.util.ParticleEffect WATER_SPLASH -> OdST
    react.surge.util.ParticleEffect WATER_WAKE -> IHoA
    react.surge.util.ParticleEffect SUSPENDED -> AklM
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> UKqL
    react.surge.util.ParticleEffect CRIT -> UedE
    react.surge.util.ParticleEffect CRIT_MAGIC -> fNBo
    react.surge.util.ParticleEffect SMOKE_NORMAL -> PogC
    react.surge.util.ParticleEffect SMOKE_LARGE -> btYw
    react.surge.util.ParticleEffect SPELL -> KFeF
    react.surge.util.ParticleEffect SPELL_INSTANT -> eSRs
    react.surge.util.ParticleEffect SPELL_MOB -> AJLB
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> KOXU
    react.surge.util.ParticleEffect SPELL_WITCH -> OSSv
    react.surge.util.ParticleEffect DRIP_WATER -> rYXg
    react.surge.util.ParticleEffect DRIP_LAVA -> PVVv
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> yoOW
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> pApS
    react.surge.util.ParticleEffect TOWN_AURA -> MxAy
    react.surge.util.ParticleEffect NOTE -> drSL
    react.surge.util.ParticleEffect PORTAL -> hBjJ
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> TcDb
    react.surge.util.ParticleEffect FLAME -> QGxM
    react.surge.util.ParticleEffect LAVA -> HqDG
    react.surge.util.ParticleEffect FOOTSTEP -> ULTe
    react.surge.util.ParticleEffect CLOUD -> IjuA
    react.surge.util.ParticleEffect REDSTONE -> vnVA
    react.surge.util.ParticleEffect SNOWBALL -> ENGs
    react.surge.util.ParticleEffect SNOW_SHOVEL -> IQbn
    react.surge.util.ParticleEffect SLIME -> AJKK
    react.surge.util.ParticleEffect HEART -> jjqy
    react.surge.util.ParticleEffect BARRIER -> kDCW
    react.surge.util.ParticleEffect ITEM_CRACK -> oYAE
    react.surge.util.ParticleEffect BLOCK_CRACK -> OKDc
    react.surge.util.ParticleEffect BLOCK_DUST -> pSRY
    react.surge.util.ParticleEffect WATER_DROP -> JmxQ
    react.surge.util.ParticleEffect ITEM_TAKE -> fVUT
    react.surge.util.ParticleEffect MOB_APPEARANCE -> gGvB
    react.surge.util.ParticleEffect DRAGON_BREATH -> iyQV
    react.surge.util.ParticleEffect END_ROD -> MLkn
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> EUvO
    react.surge.util.ParticleEffect SWEEP_ATTACK -> lhgg
    java.util.Map NAME_MAP -> LkmC
    java.util.Map ID_MAP -> usae
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> GdnE
    java.util.List properties -> OmGF
    react.surge.util.ParticleEffect[] ENUM$VALUES -> THoy
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> Pmig
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> rfxw
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> turL
    557:565:react.surge.util.ParticleEffect fromId(int) -> Ywdg
    577:578:boolean isWater(org.bukkit.Location) -> AWlC
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> rfxw
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> rfxw
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> rfxw
    665:681:void display(float,int,org.bukkit.Location,double) -> rfxw
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> rfxw
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> rfxw
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> rfxw
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> rfxw
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> rfxw
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> rfxw
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> rfxw
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> rfxw
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> rfxw
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> rfxw
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> rfxw
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> rfxw
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> rfxw
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> rfxw
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> eXvs$rfxw:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> eXvs$BuBg:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> eXvs$uhSQ:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> iUOQ
    1594:1594:float getValueY() -> QEvc
    1605:1605:float getValueZ() -> lxIt
react.surge.util.ParticleEffect$OrdinaryColor -> eXvs$Jshh:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> iUOQ
    1526:1526:float getValueY() -> QEvc
    1537:1537:float getValueZ() -> lxIt
react.surge.util.ParticleEffect$ParticleColor -> eXvs$gUxe:
    1383:1383:void <init>() -> <init>
    float getValueX() -> iUOQ
    float getValueY() -> QEvc
    float getValueZ() -> lxIt
react.surge.util.ParticleEffect$ParticleColorException -> eXvs$LiNY:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> eXvs$LWlN:
    org.bukkit.Material material -> TRAJ
    byte data -> hSig
    int[] packetData -> wygr
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> vcdG
    1309:1309:java.lang.String getPacketDataString() -> Ngau
react.surge.util.ParticleEffect$ParticleDataException -> eXvs$MuBe:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> eXvs$CoUX:
    int version -> version
    java.lang.Class enumParticle -> drQx
    java.lang.reflect.Constructor packetConstructor -> aiHs
    java.lang.reflect.Method getHandle -> NqsJ
    java.lang.reflect.Field playerConnection -> JLVt
    java.lang.reflect.Method sendPacket -> EolD
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> Xwbj
    float offsetX -> yMNC
    float offsetY -> OAsw
    float offsetZ -> txqq
    float speed -> aiMC
    int amount -> xrjT
    boolean longDistance -> rGxC
    react.surge.util.ParticleEffect$ParticleData data -> liJt
    java.lang.Object packet -> TRDx
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> SBmp
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> rfxw
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> BuBg
    2004:2018:void sendTo(org.bukkit.Location,double) -> BuBg
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> eXvs$CoUX$rfxw:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> eXvs$CoUX$BuBg:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> eXvs$CoUX$uhSQ:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> eXvs$UYvJ:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> Pfyv
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> RnBW
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> NrVo
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> KGKI
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> ItHu
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> eXvs$uqDO:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> MtxV:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> iSoF
react.surge.util.Persist -> TOYb:
react.surge.util.PluginUtil -> HTga:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> gUxe
    81:85:void enableAll() -> OIBt
    95:99:void disable(org.bukkit.plugin.Plugin) -> LiNY
    106:110:void disableAll() -> CVbe
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> LWlN
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> rfxw
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> Husy
    169:172:java.util.List getPluginNames(boolean) -> wCdc
    184:187:java.lang.String getPluginVersion(java.lang.String) -> ckqE
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> MuBe
    237:316:java.util.List findByCommand(java.lang.String) -> XJOX
    337:338:void load(org.bukkit.plugin.Plugin) -> CoUX
    342:364:java.lang.String getPluginFileName(java.lang.String) -> WiNv
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> rfxw
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> UYvJ
    480:484:void reloadAll() -> QFXR
    496:622:void unload(org.bukkit.plugin.Plugin) -> uqDO
react.surge.util.PoolCount -> fBkX:
react.surge.util.PoolDescriber -> PuqM:
react.surge.util.PoolNanoThrottle -> VxCa:
react.surge.util.PositionalSelector -> Qpcs:
    react.glang.GSet allowedChunks -> JDGf
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> hblL
    39:40:void addChunk(org.bukkit.Chunk) -> lvjD
    44:44:react.glang.GSet getAllowedChunks() -> YNOa
react.surge.util.Protocol -> Kfap:
    react.surge.util.Protocol LATEST -> wpxv
    react.surge.util.Protocol R1_12_2 -> eSTU
    react.surge.util.Protocol R1_12_2_PRE -> HEoS
    react.surge.util.Protocol R1_12_1 -> dibi
    react.surge.util.Protocol R1_12 -> Dtwj
    react.surge.util.Protocol R1_11_2 -> EUxO
    react.surge.util.Protocol R1_11_1 -> iyRx
    react.surge.util.Protocol R1_11 -> NjDj
    react.surge.util.Protocol R1_10_2 -> SOAQ
    react.surge.util.Protocol R1_10_1 -> PDuj
    react.surge.util.Protocol R1_10 -> VXIk
    react.surge.util.Protocol R1_9_4 -> VNwc
    react.surge.util.Protocol R1_9_3 -> SFPG
    react.surge.util.Protocol R1_9_2 -> hTLe
    react.surge.util.Protocol R1_9_1 -> HqDu
    react.surge.util.Protocol R1_9 -> dibt
    react.surge.util.Protocol R1_8_9 -> XfaD
    react.surge.util.Protocol R1_8_8 -> pmEv
    react.surge.util.Protocol R1_8_7 -> YGaE
    react.surge.util.Protocol R1_8_6 -> elfS
    react.surge.util.Protocol R1_8_5 -> CHDB
    react.surge.util.Protocol R1_8_4 -> Yici
    react.surge.util.Protocol R1_8_3 -> SEoV
    react.surge.util.Protocol R1_8_2 -> fMen
    react.surge.util.Protocol R1_8_1 -> GSqI
    react.surge.util.Protocol R1_8 -> YigD
    react.surge.util.Protocol R1_7_10 -> RSpP
    react.surge.util.Protocol R1_7_9 -> jbfi
    react.surge.util.Protocol R1_7_8 -> seQW
    react.surge.util.Protocol R1_7_7 -> pSVm
    react.surge.util.Protocol R1_7_6 -> pcwK
    react.surge.util.Protocol R1_7_5 -> cweN
    react.surge.util.Protocol R1_7_4 -> jYuH
    react.surge.util.Protocol R1_7_3 -> XMQx
    react.surge.util.Protocol R1_7_2 -> LJPK
    react.surge.util.Protocol R1_7_1 -> daVK
    react.surge.util.Protocol B1_6_4 -> MoTX
    react.surge.util.Protocol B1_6_3 -> HxvG
    react.surge.util.Protocol B1_6_2 -> THsc
    react.surge.util.Protocol B1_6_1 -> nLoH
    react.surge.util.Protocol B1_5_2 -> UwKu
    react.surge.util.Protocol B1_5_1 -> vDFK
    react.surge.util.Protocol B1_5 -> GmcA
    react.surge.util.Protocol B1_4_7 -> tqED
    react.surge.util.Protocol B1_4_6 -> Nqva
    react.surge.util.Protocol B1_4_5 -> SVrY
    react.surge.util.Protocol B1_4_4 -> hSmc
    react.surge.util.Protocol B1_4_2 -> suot
    react.surge.util.Protocol B1_3_2 -> dPTD
    react.surge.util.Protocol B1_3_1 -> THst
    react.surge.util.Protocol B1_2_5 -> jjtw
    react.surge.util.Protocol B1_2_4 -> NOtI
    react.surge.util.Protocol EARLIEST -> blQD
    react.surge.util.Protocol UNKNOWN -> qMgR
    int version -> version
    java.lang.String packageVersion -> yJxm
    java.lang.String versionName -> mkmv
    boolean netty -> LImf
    react.surge.util.Protocol[] ENUM$VALUES -> ujuA
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> SCmF
    118:118:java.lang.String getPackageVersion() -> JAJW
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> dWAL
    142:150:react.surge.util.Protocol getProtocolVersion() -> CosX
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> BuBg
    160:160:boolean isServerVersion() -> uqbM
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> Vwjd
    175:175:boolean isActualVersion() -> TPAx
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> WHIu
    200:200:int getMetaVersion() -> lLsx
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> gEmt:
    react.surge.util.Protocol from -> UThY
    react.surge.util.Protocol to -> DAwA
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> sYxt
    21:21:react.surge.util.Protocol getTo() -> lgHX
    26:26:boolean contains(react.surge.util.Protocol) -> uhSQ
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> Pdod:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> uqao
    70:70:int randomNextInt() -> JJUT
    80:80:long randomNextLong() -> qmet
    92:92:boolean isWithin(double) -> prTV
    104:104:boolean isWithin(int) -> Dqwv
    116:116:boolean isWithin(long) -> VCed
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> FolS
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> wCdc
react.surge.util.RawEvent -> sAAk:
react.surge.util.RayTrace -> QxtU:
    org.bukkit.Location start -> dOrW
    org.bukkit.util.Vector direction -> RnEo
    java.lang.Double maxDistance -> elkO
    java.lang.Double distanceCovered -> EMmI
    java.lang.Double step -> ucIW
    java.lang.Boolean stop -> tNdC
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> bGhU
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> UsiF
    89:89:org.bukkit.Location getStart() -> hHxg
    94:95:void setStart(org.bukkit.Location) -> LhnC
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> gEyI
    114:115:void setMaxDistance(java.lang.Double) -> Jshh
    119:119:java.lang.Double getDistanceCovered() -> DbXa
    124:125:void setDistanceCovered(java.lang.Double) -> gUxe
    129:129:java.lang.Double getStep() -> YpVY
    134:135:void setStep(java.lang.Double) -> LiNY
react.surge.util.ReflectionUtils -> ebKo:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> rfxw
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> rfxw
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> rfxw
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> rfxw
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> rfxw
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> rfxw
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> rfxw
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> rfxw
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> rfxw
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> rfxw
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> rfxw
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> rfxw
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> rfxw
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> rfxw
react.surge.util.ReflectionUtils$DataType -> ebKo$rfxw:
    react.surge.util.ReflectionUtils$DataType BYTE -> THwM
    react.surge.util.ReflectionUtils$DataType SHORT -> Gdte
    react.surge.util.ReflectionUtils$DataType INTEGER -> tFRe
    react.surge.util.ReflectionUtils$DataType LONG -> hSqG
    react.surge.util.ReflectionUtils$DataType CHARACTER -> PMlf
    react.surge.util.ReflectionUtils$DataType FLOAT -> OBXu
    react.surge.util.ReflectionUtils$DataType DOUBLE -> XwhH
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> pSWv
    java.util.Map CLASS_MAP -> OlmB
    java.lang.Class primitive -> NOvq
    java.lang.Class reference -> YaYB
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> AJQJ
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> dpVI
    704:704:java.lang.Class getReference() -> Mdbb
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> BuBg
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> uhSQ
    741:742:java.lang.Class getReference(java.lang.Class) -> Jshh
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> rfxw
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> BuBg
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> BuBg
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> uhSQ
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> rfxw
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> ebKo$BuBg:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> ViOh
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> qUys
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> ojGk
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> IskJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> iVsb
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> VFlA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> yoTU
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> Qaou
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> ENLu
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> Hgvg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> lGJo
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> kejP
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> cxFh
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> iVsQ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> OJiM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> RSqm
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> KaAJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> uQeS
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> jRFk
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> qDxN
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> whmD
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> FyVR:
    void refresh() -> refresh
react.surge.util.SQLOperation -> ebKn:
    react.surge.util.SQLOperation LOAD -> cweb
    react.surge.util.SQLOperation SAVE -> JTnD
    react.surge.util.SQLOperation[] ENUM$VALUES -> FkEd
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> DsPS:
    react.surge.util.ServerState START -> GuxT
    react.surge.util.ServerState ENABLE -> qNMm
    react.surge.util.ServerState DISABLE -> mRbX
    react.surge.util.ServerState STOP -> ixye
    react.surge.util.ServerState RUNNING -> gIAB
    react.surge.util.ServerState[] ENUM$VALUES -> qxaS
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> SLVr:
    org.bukkit.Location location -> scqp
    org.bukkit.util.Vector offset -> ubjV
    org.bukkit.util.Vector size -> gPqG
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> SBnO
    90:94:org.bukkit.Location randomLocation() -> PKiA
    104:104:org.bukkit.Location randomSurface() -> uFqA
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> xXjv
    129:129:org.bukkit.util.Vector getSize() -> wUgr
react.surge.util.SnowLevel -> jpyw:
    byte level -> gPoi
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> Limu
    51:52:void setLevel(byte) -> CoUX
react.surge.util.SuperCaller -> KUaL:
    void run() -> run
react.surge.util.T -> bXcB:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> BuBg
    32:35:void stop() -> stop
react.surge.util.TXT -> lMNU:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> LWlN
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> rfxw
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> rfxw
    99:99:java.lang.String line(react.surge.util.C,int) -> rfxw
    113:113:java.lang.String underline(react.surge.util.C,int) -> BuBg
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> rfxw
react.surge.util.Tag -> LHDE:
    java.lang.String value() -> value
react.surge.util.Timer -> ArVs:
    long tns -> yVET
    long cns -> laAR
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> NgdQ
react.surge.util.VectorMath -> ogWf:
    int[] $SWITCH_TABLE$surge$util$Axis -> vTPy
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> smeM
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> rfxw
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> rfxw
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> BuBg
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> uhSQ
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> rfxw
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> BuBg
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> BuBg
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> uhSQ
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> Jshh
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> gUxe
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> LiNY
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> LWlN
    111:111:double round(double,int) -> gUxe
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> rfxw
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> rfxw
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> rfxw
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> Jshh
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> gUxe
    268:268:org.bukkit.util.Vector toVector(float,float) -> rfxw
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> rfxw
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> rfxw
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> MuBe
    337:340:double getSpeed(org.bukkit.util.Vector) -> CoUX
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> rfxw
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> UYvJ
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> rfxw
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> BuBg
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> uhSQ
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> Jshh
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> uqDO
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> wxGd
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> JRgF
react.surge.util.VectorMath$1 -> ogWf$1:
    org.bukkit.util.Vector val$vector -> GCUQ
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> UsiF
    1:1:java.lang.Object onAdapt(java.lang.Object) -> LWlN
react.surge.util.W -> hHos:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> CoUX
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> rfxw
    75:86:org.bukkit.entity.Entity getEntity(int) -> GbPb
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> rfxw
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> rfxw
    143:143:int getChunkX(org.bukkit.block.Block) -> UYvJ
    155:155:int getChunkY(org.bukkit.block.Block) -> uqDO
    168:169:void dropXp(org.bukkit.Location,int) -> BuBg
    180:180:int getChunkZ(org.bukkit.block.Block) -> UsiF
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> BuBg
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> rfxw
    232:239:react.glang.GList news(org.bukkit.Location) -> lvjD
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> rfxw
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> IyWb
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> Hdqq
    300:300:org.bukkit.World toSync(org.bukkit.World) -> bXKh
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> AWlC
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> IyWb
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> wCdc
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> mXLH
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> rfxw
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> rfxw
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> rfxw
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> rfxw
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> rfxw
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> rfxw
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> rfxw
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> rfxw
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> owcC
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> SBmp
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> wCdc
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> uhSQ
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> rfxw
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> rfxw
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> rfxw
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> rfxw
react.surge.util.W$1 -> hHos$1:
    java.lang.Double val$doff -> gPfO
    org.bukkit.entity.Entity val$e -> wFmK
    org.bukkit.entity.Entity[] val$result -> eRom
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> UsiF
react.surge.util.Worlds -> sYpj:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> jhgm
    33:33:boolean hasWorld(java.lang.String) -> jVql
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> NgYp:
react.text.ColoredString -> ySRe:
    react.surge.util.C c -> CPYP
    java.lang.String s -> MxKY
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> XeBC
    42:43:void setC(react.surge.util.C) -> BuBg
    47:47:java.lang.String getS() -> DQUp
    52:53:void setS(java.lang.String) -> cuCI
react.text.RTEX -> inWX:
    react.glang.GList extras -> qyAM
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> ETXu
    44:58:react.json.JSONObject toJSON() -> tdnH
react.text.RTX -> ctux:
    react.json.JSONArray base -> Niit
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> LiNY
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> BuBg
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> rfxw
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> rfxw
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> BuBg
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> uhSQ
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> rfxw
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> BuBg
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> uhSQ
    265:265:react.json.JSONArray toJSON() -> LYMs
    276:277:void tellRawTo(org.bukkit.entity.Player) -> tdnH
react.text.RawText -> PBkw:
    java.lang.String COLOR_BLACK -> MDcs
    java.lang.String COLOR_DARK_BLUE -> uHuu
    java.lang.String COLOR_DARK_GREEN -> uAGL
    java.lang.String COLOR_DARK_AQUA -> djJJ
    java.lang.String COLOR_DARK_RED -> GmgP
    java.lang.String COLOR_DARK_PURPLE -> XxIb
    java.lang.String COLOR_GOLD -> xlRh
    java.lang.String COLOR_GRAY -> foni
    java.lang.String COLOR_DARK_GRAY -> BDel
    java.lang.String COLOR_BLUE -> heTf
    java.lang.String COLOR_GREEN -> Ouab
    java.lang.String COLOR_AQUA -> cDfM
    java.lang.String COLOR_RED -> yUfi
    java.lang.String COLOR_LIGHT_PURPLE -> FQUP
    java.lang.String COLOR_YELLOW -> NXlN
    java.lang.String COLOR_WHITE -> gsVc
    java.lang.String COLOR_NONE -> IAMC
    java.lang.String HEAD_TEXT -> laDL
    java.lang.String HEAD_COLOR -> jsnc
    java.lang.String HEAD_BOLD -> wGPG
    java.lang.String HEAD_ITALIC -> XxMH
    java.lang.String HEAD_UNDERLINED -> qhBR
    java.lang.String HEAD_STRIKETHROUGH -> lGPV
    java.lang.String HEAD_OBFUSCATED -> snGr
    java.lang.String HEAD_CLICK_EVENT -> vena
    java.lang.String HEAD_HOVER_EVENT -> ynwp
    java.lang.String HEAD_ACTION -> Vqeh
    java.lang.String HEAD_VALUE -> bJTf
    java.lang.String HEAD_EXTRA -> AcgJ
    java.lang.String HEAD_ACTION_SHOW_TEXT -> BEHI
    java.lang.String HEAD_ACTION_COMMAND -> RmhS
    java.util.ArrayList components -> lFnj
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> qJdx
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> gUxe
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> rfxw
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> rfxw
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> rfxw
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> rfxw
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> rfxw
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> rfxw
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> rfxw
    307:313:java.lang.String compile() -> lDep
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> rfxw
